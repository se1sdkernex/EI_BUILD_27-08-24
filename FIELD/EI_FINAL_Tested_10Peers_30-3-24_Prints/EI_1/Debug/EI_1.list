
EI_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023cf4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000556c  08023ef4  08023ef4  00033ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029460  08029460  000402e4  2**0
                  CONTENTS
  4 .ARM          00000008  08029460  08029460  00039460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029468  08029468  000402e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029468  08029468  00039468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802946c  0802946c  0003946c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08029470  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001a4  08029614  000401a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000244  080296b4  00040244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00014064  200002e4  08029754  000402e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20014348  08029754  00044348  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037e40  00000000  00000000  00040312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008324  00000000  00000000  00078152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002480  00000000  00000000  00080478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000021b0  00000000  00000000  000828f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004309f  00000000  00000000  00084aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00045540  00000000  00000000  000c7b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013ba1a  00000000  00000000  0010d087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00248aa1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a040  00000000  00000000  00248af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002e4 	.word	0x200002e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08023edc 	.word	0x08023edc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002e8 	.word	0x200002e8
 800023c:	08023edc 	.word	0x08023edc

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint8_t Commands_List[20][50] = {{0,},};
uint8_t Commands_Count = 0;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000a50 	.word	0x20000a50
 8000a70:	08023ef4 	.word	0x08023ef4
 8000a74:	08023f00 	.word	0x08023f00
 8000a78:	08023f10 	.word	0x08023f10
 8000a7c:	08023f20 	.word	0x08023f20
 8000a80:	08023f34 	.word	0x08023f34
 8000a84:	08023f48 	.word	0x08023f48
 8000a88:	08023f5c 	.word	0x08023f5c
 8000a8c:	08023f68 	.word	0x08023f68
 8000a90:	20000e38 	.word	0x20000e38

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f01a fd2d 	bl	801b504 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f022 f84d 	bl	8022b54 <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000bce8 	.word	0x2000bce8
 8000ac8:	20000140 	.word	0x20000140

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f017 fc01 	bl	80182e4 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f017 fbf1 	bl	80182e4 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f017 fbe0 	bl	80182e4 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000a48 	.word	0x20000a48
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f021 fe10 	bl	80227a0 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00e f96b 	bl	800ee60 <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f014 fbc5 	bl	8015324 <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f014 fb74 	bl	80152a4 <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f021 fec6 	bl	8022970 <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f021 ff3a 	bl	8022aa8 <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f021 fe90 	bl	8022970 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f021 ff0b 	bl	8022aa8 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f021 fe5e 	bl	8022970 <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f021 fef7 	bl	8022aa8 <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f021 fe41 	bl	8022970 <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f021 fe33 	bl	8022970 <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f021 fecc 	bl	8022aa8 <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f021 fe13 	bl	8022970 <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f021 fe05 	bl	8022970 <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f021 fe9e 	bl	8022aa8 <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f021 fde0 	bl	8022970 <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f021 fdbe 	bl	8022970 <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f021 fda5 	bl	8022970 <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f021 fd97 	bl	8022970 <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f021 fd89 	bl	8022970 <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f021 fe21 	bl	8022aa8 <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f00e fda7 	bl	800f9c8 <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000a0a8 	.word	0x2000a0a8
 8000e88:	08023f70 	.word	0x08023f70
 8000e8c:	20000644 	.word	0x20000644
 8000e90:	08023f88 	.word	0x08023f88
 8000e94:	20000a82 	.word	0x20000a82
 8000e98:	08023fc8 	.word	0x08023fc8
 8000e9c:	20000645 	.word	0x20000645
 8000ea0:	08023fdc 	.word	0x08023fdc
 8000ea4:	20000ab4 	.word	0x20000ab4
 8000ea8:	08023ff8 	.word	0x08023ff8
 8000eac:	08024014 	.word	0x08024014
 8000eb0:	2000195c 	.word	0x2000195c
 8000eb4:	08024024 	.word	0x08024024
 8000eb8:	20000ae6 	.word	0x20000ae6
 8000ebc:	08024038 	.word	0x08024038
 8000ec0:	20000b18 	.word	0x20000b18
 8000ec4:	08024048 	.word	0x08024048
 8000ec8:	20000b4a 	.word	0x20000b4a
 8000ecc:	20000b7c 	.word	0x20000b7c
 8000ed0:	20000bae 	.word	0x20000bae
 8000ed4:	08024064 	.word	0x08024064
 8000ed8:	20000be0 	.word	0x20000be0
 8000edc:	08024074 	.word	0x08024074
 8000ee0:	20000c12 	.word	0x20000c12

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f021 fc08 	bl	8022730 <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000a50 	.word	0x20000a50
 8000f48:	20000e38 	.word	0x20000e38

08000f4c <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0a2      	sub	sp, #136	; 0x88
 8000f50:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	227c      	movs	r2, #124	; 0x7c
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f021 fc1b 	bl	80227a0 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 8000f76:	e03a      	b.n	8000fee <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 8000f78:	f00e fb34 	bl	800f5e4 <Get_Eth_Byte>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 8000f82:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000f86:	2bf4      	cmp	r3, #244	; 0xf4
 8000f88:	d002      	beq.n	8000f90 <Process_Hitachi_Packets_Eth+0x44>
 8000f8a:	2bf6      	cmp	r3, #246	; 0xf6
 8000f8c:	d00c      	beq.n	8000fa8 <Process_Hitachi_Packets_Eth+0x5c>
 8000f8e:	e01b      	b.n	8000fc8 <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8000f90:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000f9a:	3388      	adds	r3, #136	; 0x88
 8000f9c:	443b      	add	r3, r7
 8000f9e:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fa2:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 8000fa6:	e01e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 8000fa8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fb2:	3388      	adds	r3, #136	; 0x88
 8000fb4:	443b      	add	r3, r7
 8000fb6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fba:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 8000fbe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fc2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 8000fc6:	e00e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 8000fc8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00a      	beq.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 8000fd0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fda:	3388      	adds	r3, #136	; 0x88
 8000fdc:	443b      	add	r3, r7
 8000fde:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fe2:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 8000fe6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d105      	bne.n	8000ffa <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 8000fee:	f00e fae5 	bl	800f5bc <Is_There_EI_Data>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1bf      	bne.n	8000f78 <Process_Hitachi_Packets_Eth+0x2c>
 8000ff8:	e000      	b.n	8000ffc <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 8000ffa:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8000ffc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00d      	beq.n	8001020 <Process_Hitachi_Packets_Eth+0xd4>
	{
		if(Traverser>15)
 8001004:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d906      	bls.n	800101a <Process_Hitachi_Packets_Eth+0xce>
		{
			Convert_Data_format(Temp_array,Traverser);
 800100c:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f8a3 	bl	8001160 <Convert_Data_format>
		}
		Traverser = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 8001020:	bf00      	nop
 8001022:	3788      	adds	r7, #136	; 0x88
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0a2      	sub	sp, #136	; 0x88
 800102c:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	227c      	movs	r2, #124	; 0x7c
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f021 fbad 	bl	80227a0 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <Process_Hitachi_Packets_Com+0x12c>)
 8001054:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001058:	2b00      	cmp	r3, #0
 800105a:	d074      	beq.n	8001146 <Process_Hitachi_Packets_Com+0x11e>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 800105c:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <Process_Hitachi_Packets_Com+0x130>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f00d fefd 	bl	800ee60 <HAL_Elaps_Ticks>
 8001066:	4603      	mov	r3, r0
 8001068:	2b13      	cmp	r3, #19
 800106a:	d96e      	bls.n	800114a <Process_Hitachi_Packets_Com+0x122>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 800106c:	e04a      	b.n	8001104 <Process_Hitachi_Packets_Com+0xdc>
	{
		Data = Com_Get_Byte(THREE_PORT);
 800106e:	2003      	movs	r0, #3
 8001070:	f014 f958 	bl	8015324 <Com_Get_Byte>
 8001074:	4603      	mov	r3, r0
 8001076:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 800107a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800107e:	2b7e      	cmp	r3, #126	; 0x7e
 8001080:	d90a      	bls.n	8001098 <Process_Hitachi_Packets_Com+0x70>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 8001082:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	4619      	mov	r1, r3
 800108a:	4834      	ldr	r0, [pc, #208]	; (800115c <Process_Hitachi_Packets_Com+0x134>)
 800108c:	f021 fc70 	bl	8022970 <iprintf>
			Traverser = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 8001096:	e03d      	b.n	8001114 <Process_Hitachi_Packets_Com+0xec>
		}
		//printf("%02X ",Data);
		switch(Data)
 8001098:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800109c:	2bf4      	cmp	r3, #244	; 0xf4
 800109e:	d002      	beq.n	80010a6 <Process_Hitachi_Packets_Com+0x7e>
 80010a0:	2bf6      	cmp	r3, #246	; 0xf6
 80010a2:	d00c      	beq.n	80010be <Process_Hitachi_Packets_Com+0x96>
 80010a4:	e01b      	b.n	80010de <Process_Hitachi_Packets_Com+0xb6>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 80010a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010b0:	3388      	adds	r3, #136	; 0x88
 80010b2:	443b      	add	r3, r7
 80010b4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010b8:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80010bc:	e01e      	b.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80010be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010c8:	3388      	adds	r3, #136	; 0x88
 80010ca:	443b      	add	r3, r7
 80010cc:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010d0:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80010d4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010d8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80010dc:	e00e      	b.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
		default:
			if(Traverser >0)
 80010de:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00a      	beq.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
			{
				Temp_array[Traverser++] = Data;
 80010e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010f0:	3388      	adds	r3, #136	; 0x88
 80010f2:	443b      	add	r3, r7
 80010f4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010f8:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80010fc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <Process_Hitachi_Packets_Com+0xea>
	while(Com_DataReady(THREE_PORT))
 8001104:	2003      	movs	r0, #3
 8001106:	f014 f8cd 	bl	80152a4 <Com_DataReady>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ae      	bne.n	800106e <Process_Hitachi_Packets_Com+0x46>
 8001110:	e000      	b.n	8001114 <Process_Hitachi_Packets_Com+0xec>
		{
			break;
 8001112:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8001114:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001118:	2b00      	cmp	r3, #0
 800111a:	d017      	beq.n	800114c <Process_Hitachi_Packets_Com+0x124>
	{
		if(Traverser>15)
 800111c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d906      	bls.n	8001132 <Process_Hitachi_Packets_Com+0x10a>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001124:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f817 	bl	8001160 <Convert_Data_format>
		}
		Traverser = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f021 fb2e 	bl	80227a0 <memset>
 8001144:	e002      	b.n	800114c <Process_Hitachi_Packets_Com+0x124>
		return;
 8001146:	bf00      	nop
 8001148:	e000      	b.n	800114c <Process_Hitachi_Packets_Com+0x124>
		return;
 800114a:	bf00      	nop
	}
}
 800114c:	3788      	adds	r7, #136	; 0x88
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000304 	.word	0x20000304
 8001158:	2000a0a4 	.word	0x2000a0a4
 800115c:	080240b0 	.word	0x080240b0

08001160 <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0a4      	sub	sp, #144	; 0x90
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	227c      	movs	r2, #124	; 0x7c
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f021 fb11 	bl	80227a0 <memset>
	uint16_t des_index=0,src_index=0;
 800117e:	2300      	movs	r3, #0
 8001180:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001184:	2300      	movs	r3, #0
 8001186:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 800118a:	2300      	movs	r3, #0
 800118c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001190:	2300      	movs	r3, #0
 8001192:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001196:	e034      	b.n	8001202 <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 8001198:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2bf0      	cmp	r3, #240	; 0xf0
 80011a4:	d118      	bne.n	80011d8 <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 80011a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	7819      	ldrb	r1, [r3, #0]
 80011b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011b4:	3301      	adds	r3, #1
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011c0:	430a      	orrs	r2, r1
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	3390      	adds	r3, #144	; 0x90
 80011c6:	443b      	add	r3, r7
 80011c8:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80011cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011d0:	3301      	adds	r3, #1
 80011d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80011d6:	e00a      	b.n	80011ee <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80011d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	441a      	add	r2, r3
 80011e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	3390      	adds	r3, #144	; 0x90
 80011e8:	443b      	add	r3, r7
 80011ea:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 80011ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011f2:	3301      	adds	r3, #1
 80011f4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80011f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011fc:	3301      	adds	r3, #1
 80011fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	b29b      	uxth	r3, r3
 8001206:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800120a:	429a      	cmp	r2, r3
 800120c:	d3c4      	bcc.n	8001198 <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 800120e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f805 	bl	8001228 <EI_Data_Analyzer>
}
 800121e:	bf00      	nop
 8001220:	3790      	adds	r7, #144	; 0x90
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	77fb      	strb	r3, [r7, #31]
 800123c:	2300      	movs	r3, #0
 800123e:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001248:	f014 fb94 	bl	8015974 <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 800124e:	4ba7      	ldr	r3, [pc, #668]	; (80014ec <EI_Data_Analyzer+0x2c4>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d111      	bne.n	800127a <EI_Data_Analyzer+0x52>
 8001256:	f014 fb8d 	bl	8015974 <HAL_GetTick>
 800125a:	4603      	mov	r3, r0
 800125c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001260:	4293      	cmp	r3, r2
 8001262:	d90a      	bls.n	800127a <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 8001264:	48a2      	ldr	r0, [pc, #648]	; (80014f0 <EI_Data_Analyzer+0x2c8>)
 8001266:	f021 fc1f 	bl	8022aa8 <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800126a:	49a2      	ldr	r1, [pc, #648]	; (80014f4 <EI_Data_Analyzer+0x2cc>)
 800126c:	48a2      	ldr	r0, [pc, #648]	; (80014f8 <EI_Data_Analyzer+0x2d0>)
 800126e:	f7fe ffe7 	bl	8000240 <strcmp>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	f040 81a1 	bne.w	80015bc <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3303      	adds	r3, #3
 800127e:	461a      	mov	r2, r3
 8001280:	2110      	movs	r1, #16
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff f9c6 	bl	8000614 <ExtractBits>
 8001288:	4603      	mov	r3, r0
 800128a:	b29b      	uxth	r3, r3
 800128c:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 800128e:	e00b      	b.n	80012a8 <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 8001290:	7ffb      	ldrb	r3, [r7, #31]
 8001292:	4a9a      	ldr	r2, [pc, #616]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001294:	3366      	adds	r3, #102	; 0x66
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d009      	beq.n	80012b6 <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	3301      	adds	r3, #1
 80012a6:	77fb      	strb	r3, [r7, #31]
 80012a8:	4b94      	ldr	r3, [pc, #592]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ae:	7ffa      	ldrb	r2, [r7, #31]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3ed      	bcc.n	8001290 <EI_Data_Analyzer+0x68>
 80012b4:	e000      	b.n	80012b8 <EI_Data_Analyzer+0x90>
		{
			break;
 80012b6:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 80012b8:	4b90      	ldr	r3, [pc, #576]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012be:	7ffa      	ldrb	r2, [r7, #31]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d309      	bcc.n	80012d8 <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80012c4:	4b8e      	ldr	r3, [pc, #568]	; (8001500 <EI_Data_Analyzer+0x2d8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	f040 8179 	bne.w	80015c0 <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80012ce:	6939      	ldr	r1, [r7, #16]
 80012d0:	488c      	ldr	r0, [pc, #560]	; (8001504 <EI_Data_Analyzer+0x2dc>)
 80012d2:	f021 fb4d 	bl	8022970 <iprintf>
		}
		return;
 80012d6:	e173      	b.n	80015c0 <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3301      	adds	r3, #1
 80012dc:	461a      	mov	r2, r3
 80012de:	2110      	movs	r1, #16
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff f997 	bl	8000614 <ExtractBits>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	4a83      	ldr	r2, [pc, #524]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012f0:	3370      	adds	r3, #112	; 0x70
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d012      	beq.n	8001324 <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 80012fe:	4882      	ldr	r0, [pc, #520]	; (8001508 <EI_Data_Analyzer+0x2e0>)
 8001300:	f021 fbd2 	bl	8022aa8 <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 8001304:	69b9      	ldr	r1, [r7, #24]
 8001306:	4881      	ldr	r0, [pc, #516]	; (800150c <EI_Data_Analyzer+0x2e4>)
 8001308:	f021 fb32 	bl	8022970 <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	4a7b      	ldr	r2, [pc, #492]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001310:	3370      	adds	r3, #112	; 0x70
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	461a      	mov	r2, r3
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	487c      	ldr	r0, [pc, #496]	; (8001510 <EI_Data_Analyzer+0x2e8>)
 800131e:	f021 fb27 	bl	8022970 <iprintf>
		return;
 8001322:	e14e      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8001328:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <EI_Data_Analyzer+0x2ec>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d016      	beq.n	8001364 <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 8001336:	4b77      	ldr	r3, [pc, #476]	; (8001514 <EI_Data_Analyzer+0x2ec>)
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	7fba      	ldrb	r2, [r7, #30]
 800133c:	429a      	cmp	r2, r3
 800133e:	d111      	bne.n	8001364 <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001340:	4875      	ldr	r0, [pc, #468]	; (8001518 <EI_Data_Analyzer+0x2f0>)
 8001342:	f021 fbb1 	bl	8022aa8 <puts>
			printf("Received:%lu\n",Destin_Address);
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	4874      	ldr	r0, [pc, #464]	; (800151c <EI_Data_Analyzer+0x2f4>)
 800134a:	f021 fb11 	bl	8022970 <iprintf>
			Destin_Address = 333;
 800134e:	f240 134d 	movw	r3, #333	; 0x14d
 8001352:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001354:	4b69      	ldr	r3, [pc, #420]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135a:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	4870      	ldr	r0, [pc, #448]	; (8001520 <EI_Data_Analyzer+0x2f8>)
 8001360:	f021 fb06 	bl	8022970 <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001364:	4b65      	ldr	r3, [pc, #404]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136a:	7fba      	ldrb	r2, [r7, #30]
 800136c:	429a      	cmp	r2, r3
 800136e:	d307      	bcc.n	8001380 <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001370:	486c      	ldr	r0, [pc, #432]	; (8001524 <EI_Data_Analyzer+0x2fc>)
 8001372:	f021 fb99 	bl	8022aa8 <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	486b      	ldr	r0, [pc, #428]	; (8001528 <EI_Data_Analyzer+0x300>)
 800137a:	f021 faf9 	bl	8022970 <iprintf>
		return;
 800137e:	e120      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001380:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <EI_Data_Analyzer+0x2d8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d121      	bne.n	80013cc <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	4a68      	ldr	r2, [pc, #416]	; (800152c <EI_Data_Analyzer+0x304>)
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d002      	beq.n	8001398 <EI_Data_Analyzer+0x170>
 8001392:	2b02      	cmp	r3, #2
 8001394:	d004      	beq.n	80013a0 <EI_Data_Analyzer+0x178>
 8001396:	e007      	b.n	80013a8 <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 8001398:	4865      	ldr	r0, [pc, #404]	; (8001530 <EI_Data_Analyzer+0x308>)
 800139a:	f021 fb85 	bl	8022aa8 <puts>
			break;
 800139e:	e015      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 80013a0:	4864      	ldr	r0, [pc, #400]	; (8001534 <EI_Data_Analyzer+0x30c>)
 80013a2:	f021 fb81 	bl	8022aa8 <puts>
			break;
 80013a6:	e011      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
 80013aa:	4a54      	ldr	r2, [pc, #336]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80013ac:	4413      	add	r3, r2
 80013ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d103      	bne.n	80013be <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 80013b6:	4860      	ldr	r0, [pc, #384]	; (8001538 <EI_Data_Analyzer+0x310>)
 80013b8:	f021 fb76 	bl	8022aa8 <puts>
 80013bc:	e006      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 80013be:	7ffb      	ldrb	r3, [r7, #31]
 80013c0:	4a5a      	ldr	r2, [pc, #360]	; (800152c <EI_Data_Analyzer+0x304>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	4619      	mov	r1, r3
 80013c6:	485d      	ldr	r0, [pc, #372]	; (800153c <EI_Data_Analyzer+0x314>)
 80013c8:	f021 fad2 	bl	8022970 <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 80013cc:	7ffb      	ldrb	r3, [r7, #31]
 80013ce:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <EI_Data_Analyzer+0x318>)
 80013d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d4:	7ffa      	ldrb	r2, [r7, #31]
 80013d6:	4955      	ldr	r1, [pc, #340]	; (800152c <EI_Data_Analyzer+0x304>)
 80013d8:	5c8a      	ldrb	r2, [r1, r2]
 80013da:	4293      	cmp	r3, r2
 80013dc:	d014      	beq.n	8001408 <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	4958      	ldr	r1, [pc, #352]	; (8001544 <EI_Data_Analyzer+0x31c>)
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 80013e8:	7ffb      	ldrb	r3, [r7, #31]
 80013ea:	4957      	ldr	r1, [pc, #348]	; (8001548 <EI_Data_Analyzer+0x320>)
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	4a4d      	ldr	r2, [pc, #308]	; (800152c <EI_Data_Analyzer+0x304>)
 80013f6:	5cd2      	ldrb	r2, [r2, r3]
 80013f8:	7ffb      	ldrb	r3, [r7, #31]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4a50      	ldr	r2, [pc, #320]	; (8001540 <EI_Data_Analyzer+0x318>)
 80013fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 8001402:	4852      	ldr	r0, [pc, #328]	; (800154c <EI_Data_Analyzer+0x324>)
 8001404:	f021 fb50 	bl	8022aa8 <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 8001408:	7ffa      	ldrb	r2, [r7, #31]
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	4947      	ldr	r1, [pc, #284]	; (800152c <EI_Data_Analyzer+0x304>)
 800140e:	5c89      	ldrb	r1, [r1, r2]
 8001410:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <EI_Data_Analyzer+0x328>)
 8001412:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 8001414:	7ffb      	ldrb	r3, [r7, #31]
 8001416:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	4618      	mov	r0, r3
 800141e:	f00d fd1f 	bl	800ee60 <HAL_Elaps_Ticks>
 8001422:	4602      	mov	r2, r0
 8001424:	7ffb      	ldrb	r3, [r7, #31]
 8001426:	4935      	ldr	r1, [pc, #212]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001428:	338a      	adds	r3, #138	; 0x8a
 800142a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800142e:	429a      	cmp	r2, r3
 8001430:	d318      	bcc.n	8001464 <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	4947      	ldr	r1, [pc, #284]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 800143c:	7ffb      	ldrb	r3, [r7, #31]
 800143e:	4941      	ldr	r1, [pc, #260]	; (8001544 <EI_Data_Analyzer+0x31c>)
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	493f      	ldr	r1, [pc, #252]	; (8001548 <EI_Data_Analyzer+0x320>)
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001450:	7ffb      	ldrb	r3, [r7, #31]
 8001452:	4a2a      	ldr	r2, [pc, #168]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001454:	3366      	adds	r3, #102	; 0x66
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4619      	mov	r1, r3
 800145e:	483e      	ldr	r0, [pc, #248]	; (8001558 <EI_Data_Analyzer+0x330>)
 8001460:	f021 fa86 	bl	8022970 <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	493b      	ldr	r1, [pc, #236]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 800146e:	2281      	movs	r2, #129	; 0x81
 8001470:	2100      	movs	r1, #0
 8001472:	483a      	ldr	r0, [pc, #232]	; (800155c <EI_Data_Analyzer+0x334>)
 8001474:	f021 f994 	bl	80227a0 <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	461a      	mov	r2, r3
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4837      	ldr	r0, [pc, #220]	; (800155c <EI_Data_Analyzer+0x334>)
 8001480:	f021 f966 	bl	8022750 <memcpy>
	Rx_Print_st.Size = Size;
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <EI_Data_Analyzer+0x334>)
 800148a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3307      	adds	r3, #7
 8001492:	461a      	mov	r2, r3
 8001494:	2108      	movs	r1, #8
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff f8bc 	bl	8000614 <ExtractBits>
 800149c:	4603      	mov	r3, r0
 800149e:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 80014a0:	7ffa      	ldrb	r2, [r7, #31]
 80014a2:	492f      	ldr	r1, [pc, #188]	; (8001560 <EI_Data_Analyzer+0x338>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	3303      	adds	r3, #3
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 80014b4:	7ffb      	ldrb	r3, [r7, #31]
 80014b6:	492b      	ldr	r1, [pc, #172]	; (8001564 <EI_Data_Analyzer+0x33c>)
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 80014be:	7ffb      	ldrb	r3, [r7, #31]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f006 fc15 	bl	8007cf0 <Check_Other_EiPC_Packet>
	switch (Message_Type)
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d870      	bhi.n	80015b0 <EI_Data_Analyzer+0x388>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <EI_Data_Analyzer+0x2ac>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	08001569 	.word	0x08001569
 80014d8:	08001579 	.word	0x08001579
 80014dc:	08001589 	.word	0x08001589
 80014e0:	08001591 	.word	0x08001591
 80014e4:	080015b1 	.word	0x080015b1
 80014e8:	080015a1 	.word	0x080015a1
 80014ec:	20000108 	.word	0x20000108
 80014f0:	080240dc 	.word	0x080240dc
 80014f4:	0802411c 	.word	0x0802411c
 80014f8:	20000305 	.word	0x20000305
 80014fc:	20000304 	.word	0x20000304
 8001500:	20000645 	.word	0x20000645
 8001504:	08024128 	.word	0x08024128
 8001508:	08024164 	.word	0x08024164
 800150c:	08024180 	.word	0x08024180
 8001510:	080241a4 	.word	0x080241a4
 8001514:	2000195c 	.word	0x2000195c
 8001518:	080241dc 	.word	0x080241dc
 800151c:	08024200 	.word	0x08024200
 8001520:	08024210 	.word	0x08024210
 8001524:	08024220 	.word	0x08024220
 8001528:	08024254 	.word	0x08024254
 800152c:	20001080 	.word	0x20001080
 8001530:	08024274 	.word	0x08024274
 8001534:	08024284 	.word	0x08024284
 8001538:	08024294 	.word	0x08024294
 800153c:	080242ac 	.word	0x080242ac
 8001540:	20000f7c 	.word	0x20000f7c
 8001544:	20000fa4 	.word	0x20000fa4
 8001548:	20000fcc 	.word	0x20000fcc
 800154c:	080242d0 	.word	0x080242d0
 8001550:	20001024 	.word	0x20001024
 8001554:	20001030 	.word	0x20001030
 8001558:	080242e8 	.word	0x080242e8
 800155c:	20001c10 	.word	0x20001c10
 8001560:	20001674 	.word	0x20001674
 8001564:	20000e74 	.word	0x20000e74
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	b2d9      	uxtb	r1, r3
 800156c:	7fbb      	ldrb	r3, [r7, #30]
 800156e:	7ffa      	ldrb	r2, [r7, #31]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f82d 	bl	80015d0 <Init_Msg_extr>
		break;
 8001576:	e024      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	b2d9      	uxtb	r1, r3
 800157c:	7fbb      	ldrb	r3, [r7, #30]
 800157e:	7ffa      	ldrb	r2, [r7, #31]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f001 fbc3 	bl	8002d0c <Vital_Msg_extr>
		break;
 8001586:	e01c      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <EI_Data_Analyzer+0x3a0>)
 800158a:	f021 fa8d 	bl	8022aa8 <puts>
		break;
 800158e:	e018      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	b2d9      	uxtb	r1, r3
 8001594:	7fbb      	ldrb	r3, [r7, #30]
 8001596:	7ffa      	ldrb	r2, [r7, #31]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f003 fe61 	bl	8005260 <Status_Msg_Extr>
		break;
 800159e:	e010      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	b2d9      	uxtb	r1, r3
 80015a4:	7fbb      	ldrb	r3, [r7, #30]
 80015a6:	7ffa      	ldrb	r2, [r7, #31]
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f005 f861 	bl	8006670 <Service_Msg_Extr>
		break;
 80015ae:	e008      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <EI_Data_Analyzer+0x3a4>)
 80015b6:	f021 f9db 	bl	8022970 <iprintf>
		break;
 80015ba:	e002      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
			return;
 80015bc:	bf00      	nop
 80015be:	e000      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
		return;
 80015c0:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	08024304 	.word	0x08024304
 80015cc:	08024328 	.word	0x08024328

080015d0 <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	70fb      	strb	r3, [r7, #3]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70bb      	strb	r3, [r7, #2]
 80015e6:	4613      	mov	r3, r2
 80015e8:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 80015fa:	f014 f9bb 	bl	8015974 <HAL_GetTick>
 80015fe:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 8001600:	2300      	movs	r3, #0
 8001602:	83fb      	strh	r3, [r7, #30]
 8001604:	2300      	movs	r3, #0
 8001606:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	b29b      	uxth	r3, r3
 800160c:	3b05      	subs	r3, #5
 800160e:	b29b      	uxth	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f011 fdd6 	bl	80131c4 <CalculateDirectReverseCrc>
 8001618:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	3b05      	subs	r3, #5
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	441a      	add	r2, r3
 8001622:	8bbb      	ldrh	r3, [r7, #28]
 8001624:	2120      	movs	r1, #32
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fff4 	bl	8000614 <ExtractBits>
 800162c:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	429a      	cmp	r2, r3
 8001634:	d013      	beq.n	800165e <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001636:	78bb      	ldrb	r3, [r7, #2]
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <Init_Msg_extr+0x110>)
 800163a:	3366      	adds	r3, #102	; 0x66
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4619      	mov	r1, r3
 8001644:	4827      	ldr	r0, [pc, #156]	; (80016e4 <Init_Msg_extr+0x114>)
 8001646:	f021 f993 	bl	8022970 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 800164a:	6939      	ldr	r1, [r7, #16]
 800164c:	4826      	ldr	r0, [pc, #152]	; (80016e8 <Init_Msg_extr+0x118>)
 800164e:	f021 f98f 	bl	8022970 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001652:	6979      	ldr	r1, [r7, #20]
 8001654:	4825      	ldr	r0, [pc, #148]	; (80016ec <Init_Msg_extr+0x11c>)
 8001656:	f021 f98b 	bl	8022970 <iprintf>
		return;
 800165a:	f000 be32 	b.w	80022c2 <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <Init_Msg_extr+0x120>)
 8001662:	2101      	movs	r1, #1
 8001664:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 8001666:	78bb      	ldrb	r3, [r7, #2]
 8001668:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <Init_Msg_extr+0x124>)
 800166a:	2101      	movs	r1, #1
 800166c:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f103 021d 	add.w	r2, r3, #29
 8001674:	8bbb      	ldrh	r3, [r7, #28]
 8001676:	2110      	movs	r1, #16
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ffcb 	bl	8000614 <ExtractBits>
 800167e:	4603      	mov	r3, r0
 8001680:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001682:	78bb      	ldrb	r3, [r7, #2]
 8001684:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <Init_Msg_extr+0x110>)
 8001686:	33f4      	adds	r3, #244	; 0xf4
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	889b      	ldrh	r3, [r3, #4]
 800168e:	8b7a      	ldrh	r2, [r7, #26]
 8001690:	429a      	cmp	r2, r3
 8001692:	d03d      	beq.n	8001710 <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 8001694:	78bb      	ldrb	r3, [r7, #2]
 8001696:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <Init_Msg_extr+0x128>)
 8001698:	2101      	movs	r1, #1
 800169a:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <Init_Msg_extr+0x110>)
 80016a0:	3366      	adds	r3, #102	; 0x66
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <Init_Msg_extr+0x12c>)
 80016ac:	f021 f960 	bl	8022970 <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 80016b0:	8b7b      	ldrh	r3, [r7, #26]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4812      	ldr	r0, [pc, #72]	; (8001700 <Init_Msg_extr+0x130>)
 80016b6:	f021 f95b 	bl	8022970 <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 80016ba:	78bb      	ldrb	r3, [r7, #2]
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <Init_Msg_extr+0x110>)
 80016be:	33f4      	adds	r3, #244	; 0xf4
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	889b      	ldrh	r3, [r3, #4]
 80016c6:	4619      	mov	r1, r3
 80016c8:	480e      	ldr	r0, [pc, #56]	; (8001704 <Init_Msg_extr+0x134>)
 80016ca:	f021 f951 	bl	8022970 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 80016ce:	490e      	ldr	r1, [pc, #56]	; (8001708 <Init_Msg_extr+0x138>)
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <Init_Msg_extr+0x13c>)
 80016d2:	f7fe fdb5 	bl	8000240 <strcmp>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01d      	beq.n	8001718 <Init_Msg_extr+0x148>
		{
			return;
 80016dc:	f000 bdf1 	b.w	80022c2 <Init_Msg_extr+0xcf2>
 80016e0:	20000304 	.word	0x20000304
 80016e4:	08024344 	.word	0x08024344
 80016e8:	08024360 	.word	0x08024360
 80016ec:	08024370 	.word	0x08024370
 80016f0:	20000ff4 	.word	0x20000ff4
 80016f4:	2000100c 	.word	0x2000100c
 80016f8:	20001000 	.word	0x20001000
 80016fc:	08024380 	.word	0x08024380
 8001700:	080243b8 	.word	0x080243b8
 8001704:	080243dc 	.word	0x080243dc
 8001708:	0802411c 	.word	0x0802411c
 800170c:	20000305 	.word	0x20000305
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 8001710:	78bb      	ldrb	r3, [r7, #2]
 8001712:	4aab      	ldr	r2, [pc, #684]	; (80019c0 <Init_Msg_extr+0x3f0>)
 8001714:	2100      	movs	r1, #0
 8001716:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800171e:	8bbb      	ldrh	r3, [r7, #28]
 8001720:	2108      	movs	r1, #8
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff76 	bl	8000614 <ExtractBits>
 8001728:	4603      	mov	r3, r0
 800172a:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 800172c:	78bb      	ldrb	r3, [r7, #2]
 800172e:	4aa5      	ldr	r2, [pc, #660]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001730:	4413      	add	r3, r2
 8001732:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001736:	7e7a      	ldrb	r2, [r7, #25]
 8001738:	429a      	cmp	r2, r3
 800173a:	d01f      	beq.n	800177c <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	4aa1      	ldr	r2, [pc, #644]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001740:	3366      	adds	r3, #102	; 0x66
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4619      	mov	r1, r3
 800174a:	489f      	ldr	r0, [pc, #636]	; (80019c8 <Init_Msg_extr+0x3f8>)
 800174c:	f021 f910 	bl	8022970 <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001750:	78bb      	ldrb	r3, [r7, #2]
 8001752:	4a9c      	ldr	r2, [pc, #624]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001754:	4413      	add	r3, r2
 8001756:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800175a:	4619      	mov	r1, r3
 800175c:	489b      	ldr	r0, [pc, #620]	; (80019cc <Init_Msg_extr+0x3fc>)
 800175e:	f021 f907 	bl	8022970 <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001762:	7e7b      	ldrb	r3, [r7, #25]
 8001764:	4619      	mov	r1, r3
 8001766:	489a      	ldr	r0, [pc, #616]	; (80019d0 <Init_Msg_extr+0x400>)
 8001768:	f021 f902 	bl	8022970 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800176c:	4999      	ldr	r1, [pc, #612]	; (80019d4 <Init_Msg_extr+0x404>)
 800176e:	489a      	ldr	r0, [pc, #616]	; (80019d8 <Init_Msg_extr+0x408>)
 8001770:	f7fe fd66 	bl	8000240 <strcmp>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 85a2 	bne.w	80022c0 <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 800177c:	78bb      	ldrb	r3, [r7, #2]
 800177e:	4997      	ldr	r1, [pc, #604]	; (80019dc <Init_Msg_extr+0x40c>)
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	4a95      	ldr	r2, [pc, #596]	; (80019e0 <Init_Msg_extr+0x410>)
 800178a:	2101      	movs	r1, #1
 800178c:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 800178e:	78bb      	ldrb	r3, [r7, #2]
 8001790:	4a94      	ldr	r2, [pc, #592]	; (80019e4 <Init_Msg_extr+0x414>)
 8001792:	2100      	movs	r1, #0
 8001794:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 8001796:	78bb      	ldrb	r3, [r7, #2]
 8001798:	4993      	ldr	r1, [pc, #588]	; (80019e8 <Init_Msg_extr+0x418>)
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 80017a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017a4:	3308      	adds	r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da00      	bge.n	80017ac <Init_Msg_extr+0x1dc>
 80017aa:	3307      	adds	r3, #7
 80017ac:	10db      	asrs	r3, r3, #3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	8bfb      	ldrh	r3, [r7, #30]
 80017b2:	4413      	add	r3, r2
 80017b4:	83fb      	strh	r3, [r7, #30]
 80017b6:	8bbb      	ldrh	r3, [r7, #28]
 80017b8:	3308      	adds	r3, #8
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	b21b      	sxth	r3, r3
 80017be:	425a      	negs	r2, r3
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	f002 0207 	and.w	r2, r2, #7
 80017c8:	bf58      	it	pl
 80017ca:	4253      	negpl	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80017d0:	8bfb      	ldrh	r3, [r7, #30]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	441a      	add	r2, r3
 80017d6:	8bbb      	ldrh	r3, [r7, #28]
 80017d8:	2110      	movs	r1, #16
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe ff1a 	bl	8000614 <ExtractBits>
 80017e0:	4602      	mov	r2, r0
 80017e2:	78bb      	ldrb	r3, [r7, #2]
 80017e4:	b291      	uxth	r1, r2
 80017e6:	4a81      	ldr	r2, [pc, #516]	; (80019ec <Init_Msg_extr+0x41c>)
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	4413      	add	r3, r2
 80017ec:	3310      	adds	r3, #16
 80017ee:	460a      	mov	r2, r1
 80017f0:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 80017f2:	78bb      	ldrb	r3, [r7, #2]
 80017f4:	4a7d      	ldr	r2, [pc, #500]	; (80019ec <Init_Msg_extr+0x41c>)
 80017f6:	015b      	lsls	r3, r3, #5
 80017f8:	4413      	add	r3, r2
 80017fa:	3310      	adds	r3, #16
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	487b      	ldr	r0, [pc, #492]	; (80019f0 <Init_Msg_extr+0x420>)
 8001802:	f021 f8b5 	bl	8022970 <iprintf>
	BITSTUFFINC(16);
 8001806:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800180a:	3310      	adds	r3, #16
 800180c:	2b00      	cmp	r3, #0
 800180e:	da00      	bge.n	8001812 <Init_Msg_extr+0x242>
 8001810:	3307      	adds	r3, #7
 8001812:	10db      	asrs	r3, r3, #3
 8001814:	b29a      	uxth	r2, r3
 8001816:	8bfb      	ldrh	r3, [r7, #30]
 8001818:	4413      	add	r3, r2
 800181a:	83fb      	strh	r3, [r7, #30]
 800181c:	8bbb      	ldrh	r3, [r7, #28]
 800181e:	3310      	adds	r3, #16
 8001820:	b29b      	uxth	r3, r3
 8001822:	b21b      	sxth	r3, r3
 8001824:	425a      	negs	r2, r3
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	f002 0207 	and.w	r2, r2, #7
 800182e:	bf58      	it	pl
 8001830:	4253      	negpl	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001836:	8bfb      	ldrh	r3, [r7, #30]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	441a      	add	r2, r3
 800183c:	8bbb      	ldrh	r3, [r7, #28]
 800183e:	2110      	movs	r1, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fee7 	bl	8000614 <ExtractBits>
 8001846:	4602      	mov	r2, r0
 8001848:	78bb      	ldrb	r3, [r7, #2]
 800184a:	b291      	uxth	r1, r2
 800184c:	4a67      	ldr	r2, [pc, #412]	; (80019ec <Init_Msg_extr+0x41c>)
 800184e:	015b      	lsls	r3, r3, #5
 8001850:	4413      	add	r3, r2
 8001852:	330e      	adds	r3, #14
 8001854:	460a      	mov	r2, r1
 8001856:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	4a64      	ldr	r2, [pc, #400]	; (80019ec <Init_Msg_extr+0x41c>)
 800185c:	015b      	lsls	r3, r3, #5
 800185e:	4413      	add	r3, r2
 8001860:	330e      	adds	r3, #14
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	4863      	ldr	r0, [pc, #396]	; (80019f4 <Init_Msg_extr+0x424>)
 8001868:	f021 f882 	bl	8022970 <iprintf>
	BITSTUFFINC(16);
 800186c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001870:	3310      	adds	r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	da00      	bge.n	8001878 <Init_Msg_extr+0x2a8>
 8001876:	3307      	adds	r3, #7
 8001878:	10db      	asrs	r3, r3, #3
 800187a:	b29a      	uxth	r2, r3
 800187c:	8bfb      	ldrh	r3, [r7, #30]
 800187e:	4413      	add	r3, r2
 8001880:	83fb      	strh	r3, [r7, #30]
 8001882:	8bbb      	ldrh	r3, [r7, #28]
 8001884:	3310      	adds	r3, #16
 8001886:	b29b      	uxth	r3, r3
 8001888:	b21b      	sxth	r3, r3
 800188a:	425a      	negs	r2, r3
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	f002 0207 	and.w	r2, r2, #7
 8001894:	bf58      	it	pl
 8001896:	4253      	negpl	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800189c:	8bfb      	ldrh	r3, [r7, #30]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	441a      	add	r2, r3
 80018a2:	8bbb      	ldrh	r3, [r7, #28]
 80018a4:	2108      	movs	r1, #8
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe feb4 	bl	8000614 <ExtractBits>
 80018ac:	4602      	mov	r2, r0
 80018ae:	78bb      	ldrb	r3, [r7, #2]
 80018b0:	b2d1      	uxtb	r1, r2
 80018b2:	4a4e      	ldr	r2, [pc, #312]	; (80019ec <Init_Msg_extr+0x41c>)
 80018b4:	015b      	lsls	r3, r3, #5
 80018b6:	4413      	add	r3, r2
 80018b8:	460a      	mov	r2, r1
 80018ba:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 80018bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018c0:	3308      	adds	r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da00      	bge.n	80018c8 <Init_Msg_extr+0x2f8>
 80018c6:	3307      	adds	r3, #7
 80018c8:	10db      	asrs	r3, r3, #3
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	8bfb      	ldrh	r3, [r7, #30]
 80018ce:	4413      	add	r3, r2
 80018d0:	83fb      	strh	r3, [r7, #30]
 80018d2:	8bbb      	ldrh	r3, [r7, #28]
 80018d4:	3308      	adds	r3, #8
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	b21b      	sxth	r3, r3
 80018da:	425a      	negs	r2, r3
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	f002 0207 	and.w	r2, r2, #7
 80018e4:	bf58      	it	pl
 80018e6:	4253      	negpl	r3, r2
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80018ec:	8bfb      	ldrh	r3, [r7, #30]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	441a      	add	r2, r3
 80018f2:	8bbb      	ldrh	r3, [r7, #28]
 80018f4:	2108      	movs	r1, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe8c 	bl	8000614 <ExtractBits>
 80018fc:	4602      	mov	r2, r0
 80018fe:	78bb      	ldrb	r3, [r7, #2]
 8001900:	b2d1      	uxtb	r1, r2
 8001902:	4a3a      	ldr	r2, [pc, #232]	; (80019ec <Init_Msg_extr+0x41c>)
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	4413      	add	r3, r2
 8001908:	3301      	adds	r3, #1
 800190a:	460a      	mov	r2, r1
 800190c:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 800190e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001912:	3308      	adds	r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	da00      	bge.n	800191a <Init_Msg_extr+0x34a>
 8001918:	3307      	adds	r3, #7
 800191a:	10db      	asrs	r3, r3, #3
 800191c:	b29a      	uxth	r2, r3
 800191e:	8bfb      	ldrh	r3, [r7, #30]
 8001920:	4413      	add	r3, r2
 8001922:	83fb      	strh	r3, [r7, #30]
 8001924:	8bbb      	ldrh	r3, [r7, #28]
 8001926:	3308      	adds	r3, #8
 8001928:	b29b      	uxth	r3, r3
 800192a:	b21b      	sxth	r3, r3
 800192c:	425a      	negs	r2, r3
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	f002 0207 	and.w	r2, r2, #7
 8001936:	bf58      	it	pl
 8001938:	4253      	negpl	r3, r2
 800193a:	b21b      	sxth	r3, r3
 800193c:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800193e:	8bfb      	ldrh	r3, [r7, #30]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	441a      	add	r2, r3
 8001944:	8bbb      	ldrh	r3, [r7, #28]
 8001946:	2108      	movs	r1, #8
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe63 	bl	8000614 <ExtractBits>
 800194e:	4602      	mov	r2, r0
 8001950:	78bb      	ldrb	r3, [r7, #2]
 8001952:	b2d1      	uxtb	r1, r2
 8001954:	4a25      	ldr	r2, [pc, #148]	; (80019ec <Init_Msg_extr+0x41c>)
 8001956:	015b      	lsls	r3, r3, #5
 8001958:	4413      	add	r3, r2
 800195a:	3302      	adds	r3, #2
 800195c:	460a      	mov	r2, r1
 800195e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8001960:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001964:	3308      	adds	r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	da00      	bge.n	800196c <Init_Msg_extr+0x39c>
 800196a:	3307      	adds	r3, #7
 800196c:	10db      	asrs	r3, r3, #3
 800196e:	b29a      	uxth	r2, r3
 8001970:	8bfb      	ldrh	r3, [r7, #30]
 8001972:	4413      	add	r3, r2
 8001974:	83fb      	strh	r3, [r7, #30]
 8001976:	8bbb      	ldrh	r3, [r7, #28]
 8001978:	3308      	adds	r3, #8
 800197a:	b29b      	uxth	r3, r3
 800197c:	b21b      	sxth	r3, r3
 800197e:	425a      	negs	r2, r3
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	f002 0207 	and.w	r2, r2, #7
 8001988:	bf58      	it	pl
 800198a:	4253      	negpl	r3, r2
 800198c:	b21b      	sxth	r3, r3
 800198e:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001990:	8bfb      	ldrh	r3, [r7, #30]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	441a      	add	r2, r3
 8001996:	8bbb      	ldrh	r3, [r7, #28]
 8001998:	2110      	movs	r1, #16
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fe3a 	bl	8000614 <ExtractBits>
 80019a0:	4602      	mov	r2, r0
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	b291      	uxth	r1, r2
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <Init_Msg_extr+0x428>)
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	4413      	add	r3, r2
 80019ac:	3304      	adds	r3, #4
 80019ae:	460a      	mov	r2, r1
 80019b0:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 80019b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019b6:	3310      	adds	r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	da1f      	bge.n	80019fc <Init_Msg_extr+0x42c>
 80019bc:	3307      	adds	r3, #7
 80019be:	e01d      	b.n	80019fc <Init_Msg_extr+0x42c>
 80019c0:	20001000 	.word	0x20001000
 80019c4:	20000304 	.word	0x20000304
 80019c8:	08024400 	.word	0x08024400
 80019cc:	08024428 	.word	0x08024428
 80019d0:	0802443c 	.word	0x0802443c
 80019d4:	0802411c 	.word	0x0802411c
 80019d8:	20000305 	.word	0x20000305
 80019dc:	20000fa4 	.word	0x20000fa4
 80019e0:	2000100c 	.word	0x2000100c
 80019e4:	2000108c 	.word	0x2000108c
 80019e8:	20001098 	.word	0x20001098
 80019ec:	20001264 	.word	0x20001264
 80019f0:	08024450 	.word	0x08024450
 80019f4:	08024458 	.word	0x08024458
 80019f8:	200011c4 	.word	0x200011c4
 80019fc:	10db      	asrs	r3, r3, #3
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	8bfb      	ldrh	r3, [r7, #30]
 8001a02:	4413      	add	r3, r2
 8001a04:	83fb      	strh	r3, [r7, #30]
 8001a06:	8bbb      	ldrh	r3, [r7, #28]
 8001a08:	3310      	adds	r3, #16
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	425a      	negs	r2, r3
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	f002 0207 	and.w	r2, r2, #7
 8001a18:	bf58      	it	pl
 8001a1a:	4253      	negpl	r3, r2
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 8001a20:	78bb      	ldrb	r3, [r7, #2]
 8001a22:	4a8e      	ldr	r2, [pc, #568]	; (8001c5c <Init_Msg_extr+0x68c>)
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4413      	add	r3, r2
 8001a28:	3304      	adds	r3, #4
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 811d 	beq.w	8001c70 <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a36:	8bfb      	ldrh	r3, [r7, #30]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	441a      	add	r2, r3
 8001a3c:	8bbb      	ldrh	r3, [r7, #28]
 8001a3e:	2108      	movs	r1, #8
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fde7 	bl	8000614 <ExtractBits>
 8001a46:	4603      	mov	r3, r0
 8001a48:	78ba      	ldrb	r2, [r7, #2]
 8001a4a:	b2d8      	uxtb	r0, r3
 8001a4c:	4984      	ldr	r1, [pc, #528]	; (8001c60 <Init_Msg_extr+0x690>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	440b      	add	r3, r1
 8001a58:	3305      	adds	r3, #5
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8001a5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a62:	3308      	adds	r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	da00      	bge.n	8001a6a <Init_Msg_extr+0x49a>
 8001a68:	3307      	adds	r3, #7
 8001a6a:	10db      	asrs	r3, r3, #3
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	8bfb      	ldrh	r3, [r7, #30]
 8001a70:	4413      	add	r3, r2
 8001a72:	83fb      	strh	r3, [r7, #30]
 8001a74:	8bbb      	ldrh	r3, [r7, #28]
 8001a76:	3308      	adds	r3, #8
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	425a      	negs	r2, r3
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	f002 0207 	and.w	r2, r2, #7
 8001a86:	bf58      	it	pl
 8001a88:	4253      	negpl	r3, r2
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a8e:	8bfb      	ldrh	r3, [r7, #30]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	441a      	add	r2, r3
 8001a94:	8bbb      	ldrh	r3, [r7, #28]
 8001a96:	2108      	movs	r1, #8
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fdbb 	bl	8000614 <ExtractBits>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	78ba      	ldrb	r2, [r7, #2]
 8001aa2:	b2d8      	uxtb	r0, r3
 8001aa4:	496e      	ldr	r1, [pc, #440]	; (8001c60 <Init_Msg_extr+0x690>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	440b      	add	r3, r1
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8001ab6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001aba:	3308      	adds	r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da00      	bge.n	8001ac2 <Init_Msg_extr+0x4f2>
 8001ac0:	3307      	adds	r3, #7
 8001ac2:	10db      	asrs	r3, r3, #3
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	8bfb      	ldrh	r3, [r7, #30]
 8001ac8:	4413      	add	r3, r2
 8001aca:	83fb      	strh	r3, [r7, #30]
 8001acc:	8bbb      	ldrh	r3, [r7, #28]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	425a      	negs	r2, r3
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	f002 0207 	and.w	r2, r2, #7
 8001ade:	bf58      	it	pl
 8001ae0:	4253      	negpl	r3, r2
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001ae6:	8bfb      	ldrh	r3, [r7, #30]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	441a      	add	r2, r3
 8001aec:	8bbb      	ldrh	r3, [r7, #28]
 8001aee:	2108      	movs	r1, #8
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd8f 	bl	8000614 <ExtractBits>
 8001af6:	4603      	mov	r3, r0
 8001af8:	78ba      	ldrb	r2, [r7, #2]
 8001afa:	b2d8      	uxtb	r0, r3
 8001afc:	4958      	ldr	r1, [pc, #352]	; (8001c60 <Init_Msg_extr+0x690>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	440b      	add	r3, r1
 8001b08:	3303      	adds	r3, #3
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8001b0e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b12:	3308      	adds	r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da00      	bge.n	8001b1a <Init_Msg_extr+0x54a>
 8001b18:	3307      	adds	r3, #7
 8001b1a:	10db      	asrs	r3, r3, #3
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	8bfb      	ldrh	r3, [r7, #30]
 8001b20:	4413      	add	r3, r2
 8001b22:	83fb      	strh	r3, [r7, #30]
 8001b24:	8bbb      	ldrh	r3, [r7, #28]
 8001b26:	3308      	adds	r3, #8
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	425a      	negs	r2, r3
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	f002 0207 	and.w	r2, r2, #7
 8001b36:	bf58      	it	pl
 8001b38:	4253      	negpl	r3, r2
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b3e:	8bfb      	ldrh	r3, [r7, #30]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	441a      	add	r2, r3
 8001b44:	8bbb      	ldrh	r3, [r7, #28]
 8001b46:	2108      	movs	r1, #8
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd63 	bl	8000614 <ExtractBits>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	78ba      	ldrb	r2, [r7, #2]
 8001b52:	b2d8      	uxtb	r0, r3
 8001b54:	4942      	ldr	r1, [pc, #264]	; (8001c60 <Init_Msg_extr+0x690>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	440b      	add	r3, r1
 8001b60:	4602      	mov	r2, r0
 8001b62:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8001b64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b68:	3308      	adds	r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da00      	bge.n	8001b70 <Init_Msg_extr+0x5a0>
 8001b6e:	3307      	adds	r3, #7
 8001b70:	10db      	asrs	r3, r3, #3
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	8bfb      	ldrh	r3, [r7, #30]
 8001b76:	4413      	add	r3, r2
 8001b78:	83fb      	strh	r3, [r7, #30]
 8001b7a:	8bbb      	ldrh	r3, [r7, #28]
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	425a      	negs	r2, r3
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	f002 0207 	and.w	r2, r2, #7
 8001b8c:	bf58      	it	pl
 8001b8e:	4253      	negpl	r3, r2
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b94:	8bfb      	ldrh	r3, [r7, #30]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	441a      	add	r2, r3
 8001b9a:	8bbb      	ldrh	r3, [r7, #28]
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fd38 	bl	8000614 <ExtractBits>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	78ba      	ldrb	r2, [r7, #2]
 8001ba8:	b2d8      	uxtb	r0, r3
 8001baa:	492d      	ldr	r1, [pc, #180]	; (8001c60 <Init_Msg_extr+0x690>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	4602      	mov	r2, r0
 8001bba:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8001bbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da00      	bge.n	8001bc8 <Init_Msg_extr+0x5f8>
 8001bc6:	3307      	adds	r3, #7
 8001bc8:	10db      	asrs	r3, r3, #3
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	8bfb      	ldrh	r3, [r7, #30]
 8001bce:	4413      	add	r3, r2
 8001bd0:	83fb      	strh	r3, [r7, #30]
 8001bd2:	8bbb      	ldrh	r3, [r7, #28]
 8001bd4:	3308      	adds	r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	425a      	negs	r2, r3
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	f002 0207 	and.w	r2, r2, #7
 8001be4:	bf58      	it	pl
 8001be6:	4253      	negpl	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001bec:	8bfb      	ldrh	r3, [r7, #30]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	8bbb      	ldrh	r3, [r7, #28]
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fd0c 	bl	8000614 <ExtractBits>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	78ba      	ldrb	r2, [r7, #2]
 8001c00:	b2d8      	uxtb	r0, r3
 8001c02:	4917      	ldr	r1, [pc, #92]	; (8001c60 <Init_Msg_extr+0x690>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3302      	adds	r3, #2
 8001c10:	4602      	mov	r2, r0
 8001c12:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8001c14:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c18:	3308      	adds	r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da00      	bge.n	8001c20 <Init_Msg_extr+0x650>
 8001c1e:	3307      	adds	r3, #7
 8001c20:	10db      	asrs	r3, r3, #3
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	8bfb      	ldrh	r3, [r7, #30]
 8001c26:	4413      	add	r3, r2
 8001c28:	83fb      	strh	r3, [r7, #30]
 8001c2a:	8bbb      	ldrh	r3, [r7, #28]
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	425a      	negs	r2, r3
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	f002 0207 	and.w	r2, r2, #7
 8001c3c:	bf58      	it	pl
 8001c3e:	4253      	negpl	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8001c44:	78bb      	ldrb	r3, [r7, #2]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f007 f860 	bl	8008d0c <IS_MLK_EIPC_TIME_MATCHING>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <Init_Msg_extr+0x698>
 8001c52:	78bb      	ldrb	r3, [r7, #2]
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <Init_Msg_extr+0x694>)
 8001c56:	2100      	movs	r1, #0
 8001c58:	54d1      	strb	r1, [r2, r3]
 8001c5a:	e009      	b.n	8001c70 <Init_Msg_extr+0x6a0>
 8001c5c:	200011c4 	.word	0x200011c4
 8001c60:	20001188 	.word	0x20001188
 8001c64:	200010d8 	.word	0x200010d8
 8001c68:	78bb      	ldrb	r3, [r7, #2]
 8001c6a:	4aa4      	ldr	r2, [pc, #656]	; (8001efc <Init_Msg_extr+0x92c>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001c70:	8bfb      	ldrh	r3, [r7, #30]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	441a      	add	r2, r3
 8001c76:	8bbb      	ldrh	r3, [r7, #28]
 8001c78:	2108      	movs	r1, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fcca 	bl	8000614 <ExtractBits>
 8001c80:	4602      	mov	r2, r0
 8001c82:	78bb      	ldrb	r3, [r7, #2]
 8001c84:	b2d1      	uxtb	r1, r2
 8001c86:	4a9e      	ldr	r2, [pc, #632]	; (8001f00 <Init_Msg_extr+0x930>)
 8001c88:	015b      	lsls	r3, r3, #5
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	460a      	mov	r2, r1
 8001c90:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 8001c92:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c96:	3308      	adds	r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da00      	bge.n	8001c9e <Init_Msg_extr+0x6ce>
 8001c9c:	3307      	adds	r3, #7
 8001c9e:	10db      	asrs	r3, r3, #3
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	8bfb      	ldrh	r3, [r7, #30]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	83fb      	strh	r3, [r7, #30]
 8001ca8:	8bbb      	ldrh	r3, [r7, #28]
 8001caa:	3308      	adds	r3, #8
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	425a      	negs	r2, r3
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	f002 0207 	and.w	r2, r2, #7
 8001cba:	bf58      	it	pl
 8001cbc:	4253      	negpl	r3, r2
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001cc2:	8bfb      	ldrh	r3, [r7, #30]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	441a      	add	r2, r3
 8001cc8:	8bbb      	ldrh	r3, [r7, #28]
 8001cca:	2110      	movs	r1, #16
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fca1 	bl	8000614 <ExtractBits>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	78bb      	ldrb	r3, [r7, #2]
 8001cd6:	b291      	uxth	r1, r2
 8001cd8:	4a89      	ldr	r2, [pc, #548]	; (8001f00 <Init_Msg_extr+0x930>)
 8001cda:	015b      	lsls	r3, r3, #5
 8001cdc:	4413      	add	r3, r2
 8001cde:	3312      	adds	r3, #18
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 8001ce4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ce8:	3310      	adds	r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da00      	bge.n	8001cf0 <Init_Msg_extr+0x720>
 8001cee:	3307      	adds	r3, #7
 8001cf0:	10db      	asrs	r3, r3, #3
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	8bfb      	ldrh	r3, [r7, #30]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	83fb      	strh	r3, [r7, #30]
 8001cfa:	8bbb      	ldrh	r3, [r7, #28]
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	425a      	negs	r2, r3
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	f002 0207 	and.w	r2, r2, #7
 8001d0c:	bf58      	it	pl
 8001d0e:	4253      	negpl	r3, r2
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 8001d14:	78bb      	ldrb	r3, [r7, #2]
 8001d16:	015b      	lsls	r3, r3, #5
 8001d18:	4a79      	ldr	r2, [pc, #484]	; (8001f00 <Init_Msg_extr+0x930>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	1d18      	adds	r0, r3, #4
 8001d1e:	8bfb      	ldrh	r3, [r7, #30]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	2206      	movs	r2, #6
 8001d26:	4619      	mov	r1, r3
 8001d28:	f020 fd12 	bl	8022750 <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8001d2c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d30:	3310      	adds	r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da00      	bge.n	8001d38 <Init_Msg_extr+0x768>
 8001d36:	3307      	adds	r3, #7
 8001d38:	10db      	asrs	r3, r3, #3
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	8bfb      	ldrh	r3, [r7, #30]
 8001d3e:	4413      	add	r3, r2
 8001d40:	83fb      	strh	r3, [r7, #30]
 8001d42:	8bbb      	ldrh	r3, [r7, #28]
 8001d44:	3310      	adds	r3, #16
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	425a      	negs	r2, r3
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	f002 0207 	and.w	r2, r2, #7
 8001d54:	bf58      	it	pl
 8001d56:	4253      	negpl	r3, r2
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d60:	3310      	adds	r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da00      	bge.n	8001d68 <Init_Msg_extr+0x798>
 8001d66:	3307      	adds	r3, #7
 8001d68:	10db      	asrs	r3, r3, #3
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	8bfb      	ldrh	r3, [r7, #30]
 8001d6e:	4413      	add	r3, r2
 8001d70:	83fb      	strh	r3, [r7, #30]
 8001d72:	8bbb      	ldrh	r3, [r7, #28]
 8001d74:	3310      	adds	r3, #16
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	425a      	negs	r2, r3
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	f002 0207 	and.w	r2, r2, #7
 8001d84:	bf58      	it	pl
 8001d86:	4253      	negpl	r3, r2
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d90:	3310      	adds	r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da00      	bge.n	8001d98 <Init_Msg_extr+0x7c8>
 8001d96:	3307      	adds	r3, #7
 8001d98:	10db      	asrs	r3, r3, #3
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	8bfb      	ldrh	r3, [r7, #30]
 8001d9e:	4413      	add	r3, r2
 8001da0:	83fb      	strh	r3, [r7, #30]
 8001da2:	8bbb      	ldrh	r3, [r7, #28]
 8001da4:	3310      	adds	r3, #16
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	425a      	negs	r2, r3
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	f002 0207 	and.w	r2, r2, #7
 8001db4:	bf58      	it	pl
 8001db6:	4253      	negpl	r3, r2
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001dbc:	8bfb      	ldrh	r3, [r7, #30]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	441a      	add	r2, r3
 8001dc2:	8bbb      	ldrh	r3, [r7, #28]
 8001dc4:	2110      	movs	r1, #16
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fc24 	bl	8000614 <ExtractBits>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	78bb      	ldrb	r3, [r7, #2]
 8001dd0:	b291      	uxth	r1, r2
 8001dd2:	4a4b      	ldr	r2, [pc, #300]	; (8001f00 <Init_Msg_extr+0x930>)
 8001dd4:	015b      	lsls	r3, r3, #5
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3314      	adds	r3, #20
 8001dda:	460a      	mov	r2, r1
 8001ddc:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 8001dde:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001de2:	3310      	adds	r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	da00      	bge.n	8001dea <Init_Msg_extr+0x81a>
 8001de8:	3307      	adds	r3, #7
 8001dea:	10db      	asrs	r3, r3, #3
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	8bfb      	ldrh	r3, [r7, #30]
 8001df0:	4413      	add	r3, r2
 8001df2:	83fb      	strh	r3, [r7, #30]
 8001df4:	8bbb      	ldrh	r3, [r7, #28]
 8001df6:	3310      	adds	r3, #16
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	425a      	negs	r2, r3
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	f002 0207 	and.w	r2, r2, #7
 8001e06:	bf58      	it	pl
 8001e08:	4253      	negpl	r3, r2
 8001e0a:	b21b      	sxth	r3, r3
 8001e0c:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e0e:	8bfb      	ldrh	r3, [r7, #30]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	441a      	add	r2, r3
 8001e14:	8bbb      	ldrh	r3, [r7, #28]
 8001e16:	2110      	movs	r1, #16
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fbfb 	bl	8000614 <ExtractBits>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	78bb      	ldrb	r3, [r7, #2]
 8001e22:	b291      	uxth	r1, r2
 8001e24:	4a36      	ldr	r2, [pc, #216]	; (8001f00 <Init_Msg_extr+0x930>)
 8001e26:	015b      	lsls	r3, r3, #5
 8001e28:	4413      	add	r3, r2
 8001e2a:	3316      	adds	r3, #22
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 8001e30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e34:	3310      	adds	r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da00      	bge.n	8001e3c <Init_Msg_extr+0x86c>
 8001e3a:	3307      	adds	r3, #7
 8001e3c:	10db      	asrs	r3, r3, #3
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	8bfb      	ldrh	r3, [r7, #30]
 8001e42:	4413      	add	r3, r2
 8001e44:	83fb      	strh	r3, [r7, #30]
 8001e46:	8bbb      	ldrh	r3, [r7, #28]
 8001e48:	3310      	adds	r3, #16
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	425a      	negs	r2, r3
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	f002 0207 	and.w	r2, r2, #7
 8001e58:	bf58      	it	pl
 8001e5a:	4253      	negpl	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e60:	8bfb      	ldrh	r3, [r7, #30]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	441a      	add	r2, r3
 8001e66:	8bbb      	ldrh	r3, [r7, #28]
 8001e68:	2110      	movs	r1, #16
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fbd2 	bl	8000614 <ExtractBits>
 8001e70:	4602      	mov	r2, r0
 8001e72:	78bb      	ldrb	r3, [r7, #2]
 8001e74:	b291      	uxth	r1, r2
 8001e76:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <Init_Msg_extr+0x930>)
 8001e78:	015b      	lsls	r3, r3, #5
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	460a      	mov	r2, r1
 8001e80:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 8001e82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e86:	3310      	adds	r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da00      	bge.n	8001e8e <Init_Msg_extr+0x8be>
 8001e8c:	3307      	adds	r3, #7
 8001e8e:	10db      	asrs	r3, r3, #3
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	8bfb      	ldrh	r3, [r7, #30]
 8001e94:	4413      	add	r3, r2
 8001e96:	83fb      	strh	r3, [r7, #30]
 8001e98:	8bbb      	ldrh	r3, [r7, #28]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	425a      	negs	r2, r3
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	f002 0207 	and.w	r2, r2, #7
 8001eaa:	bf58      	it	pl
 8001eac:	4253      	negpl	r3, r2
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 8001eb2:	8bfb      	ldrh	r3, [r7, #30]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	441a      	add	r2, r3
 8001eb8:	78bc      	ldrb	r4, [r7, #2]
 8001eba:	8bbb      	ldrh	r3, [r7, #28]
 8001ebc:	2118      	movs	r1, #24
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fba8 	bl	8000614 <ExtractBits>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	490f      	ldr	r1, [pc, #60]	; (8001f04 <Init_Msg_extr+0x934>)
 8001ec8:	0123      	lsls	r3, r4, #4
 8001eca:	440b      	add	r3, r1
 8001ecc:	3308      	adds	r3, #8
 8001ece:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8001ed0:	78bb      	ldrb	r3, [r7, #2]
 8001ed2:	78ba      	ldrb	r2, [r7, #2]
 8001ed4:	490b      	ldr	r1, [pc, #44]	; (8001f04 <Init_Msg_extr+0x934>)
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	440b      	add	r3, r1
 8001eda:	3308      	adds	r3, #8
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	480a      	ldr	r0, [pc, #40]	; (8001f08 <Init_Msg_extr+0x938>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4403      	add	r3, r0
 8001eea:	3308      	adds	r3, #8
 8001eec:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8001eee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ef2:	3318      	adds	r3, #24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da09      	bge.n	8001f0c <Init_Msg_extr+0x93c>
 8001ef8:	3307      	adds	r3, #7
 8001efa:	e007      	b.n	8001f0c <Init_Msg_extr+0x93c>
 8001efc:	200010d8 	.word	0x200010d8
 8001f00:	20001264 	.word	0x20001264
 8001f04:	200011c4 	.word	0x200011c4
 8001f08:	20001674 	.word	0x20001674
 8001f0c:	10db      	asrs	r3, r3, #3
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	8bfb      	ldrh	r3, [r7, #30]
 8001f12:	4413      	add	r3, r2
 8001f14:	83fb      	strh	r3, [r7, #30]
 8001f16:	8bbb      	ldrh	r3, [r7, #28]
 8001f18:	3318      	adds	r3, #24
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	425a      	negs	r2, r3
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	f002 0207 	and.w	r2, r2, #7
 8001f28:	bf58      	it	pl
 8001f2a:	4253      	negpl	r3, r2
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f30:	8bfb      	ldrh	r3, [r7, #30]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	441a      	add	r2, r3
 8001f36:	8bbb      	ldrh	r3, [r7, #28]
 8001f38:	2108      	movs	r1, #8
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb6a 	bl	8000614 <ExtractBits>
 8001f40:	4602      	mov	r2, r0
 8001f42:	78bb      	ldrb	r3, [r7, #2]
 8001f44:	b2d1      	uxtb	r1, r2
 8001f46:	4ab1      	ldr	r2, [pc, #708]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 8001f50:	78ba      	ldrb	r2, [r7, #2]
 8001f52:	78bb      	ldrb	r3, [r7, #2]
 8001f54:	49ad      	ldr	r1, [pc, #692]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	440a      	add	r2, r1
 8001f5a:	7811      	ldrb	r1, [r2, #0]
 8001f5c:	4aab      	ldr	r2, [pc, #684]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	4413      	add	r3, r2
 8001f62:	3302      	adds	r3, #2
 8001f64:	460a      	mov	r2, r1
 8001f66:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 8001f68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da00      	bge.n	8001f74 <Init_Msg_extr+0x9a4>
 8001f72:	3307      	adds	r3, #7
 8001f74:	10db      	asrs	r3, r3, #3
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	8bfb      	ldrh	r3, [r7, #30]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	83fb      	strh	r3, [r7, #30]
 8001f7e:	8bbb      	ldrh	r3, [r7, #28]
 8001f80:	3308      	adds	r3, #8
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	425a      	negs	r2, r3
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	f002 0207 	and.w	r2, r2, #7
 8001f90:	bf58      	it	pl
 8001f92:	4253      	negpl	r3, r2
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f98:	8bfb      	ldrh	r3, [r7, #30]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	441a      	add	r2, r3
 8001f9e:	8bbb      	ldrh	r3, [r7, #28]
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fb36 	bl	8000614 <ExtractBits>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	78bb      	ldrb	r3, [r7, #2]
 8001fac:	b2d1      	uxtb	r1, r2
 8001fae:	4a98      	ldr	r2, [pc, #608]	; (8002210 <Init_Msg_extr+0xc40>)
 8001fb0:	015b      	lsls	r3, r3, #5
 8001fb2:	4413      	add	r3, r2
 8001fb4:	330a      	adds	r3, #10
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 8001fba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	da00      	bge.n	8001fc6 <Init_Msg_extr+0x9f6>
 8001fc4:	3307      	adds	r3, #7
 8001fc6:	10db      	asrs	r3, r3, #3
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	8bfb      	ldrh	r3, [r7, #30]
 8001fcc:	4413      	add	r3, r2
 8001fce:	83fb      	strh	r3, [r7, #30]
 8001fd0:	8bbb      	ldrh	r3, [r7, #28]
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	425a      	negs	r2, r3
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	f002 0207 	and.w	r2, r2, #7
 8001fe2:	bf58      	it	pl
 8001fe4:	4253      	negpl	r3, r2
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	441a      	add	r2, r3
 8001ff0:	8bbb      	ldrh	r3, [r7, #28]
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fb0d 	bl	8000614 <ExtractBits>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	78bb      	ldrb	r3, [r7, #2]
 8001ffe:	b2d1      	uxtb	r1, r2
 8002000:	4a82      	ldr	r2, [pc, #520]	; (800220c <Init_Msg_extr+0xc3c>)
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4413      	add	r3, r2
 8002006:	3303      	adds	r3, #3
 8002008:	460a      	mov	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 800200c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002010:	3308      	adds	r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	da00      	bge.n	8002018 <Init_Msg_extr+0xa48>
 8002016:	3307      	adds	r3, #7
 8002018:	10db      	asrs	r3, r3, #3
 800201a:	b29a      	uxth	r2, r3
 800201c:	8bfb      	ldrh	r3, [r7, #30]
 800201e:	4413      	add	r3, r2
 8002020:	83fb      	strh	r3, [r7, #30]
 8002022:	8bbb      	ldrh	r3, [r7, #28]
 8002024:	3308      	adds	r3, #8
 8002026:	b29b      	uxth	r3, r3
 8002028:	b21b      	sxth	r3, r3
 800202a:	425a      	negs	r2, r3
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	f002 0207 	and.w	r2, r2, #7
 8002034:	bf58      	it	pl
 8002036:	4253      	negpl	r3, r2
 8002038:	b21b      	sxth	r3, r3
 800203a:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 800203c:	78bb      	ldrb	r3, [r7, #2]
 800203e:	4a73      	ldr	r2, [pc, #460]	; (800220c <Init_Msg_extr+0xc3c>)
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4413      	add	r3, r2
 8002044:	3303      	adds	r3, #3
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	78bb      	ldrb	r3, [r7, #2]
 800204a:	4972      	ldr	r1, [pc, #456]	; (8002214 <Init_Msg_extr+0xc44>)
 800204c:	440b      	add	r3, r1
 800204e:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002052:	429a      	cmp	r2, r3
 8002054:	d015      	beq.n	8002082 <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 8002056:	4870      	ldr	r0, [pc, #448]	; (8002218 <Init_Msg_extr+0xc48>)
 8002058:	f020 fd26 	bl	8022aa8 <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 800205c:	78bb      	ldrb	r3, [r7, #2]
 800205e:	4a6d      	ldr	r2, [pc, #436]	; (8002214 <Init_Msg_extr+0xc44>)
 8002060:	4413      	add	r3, r2
 8002062:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002066:	4619      	mov	r1, r3
 8002068:	486c      	ldr	r0, [pc, #432]	; (800221c <Init_Msg_extr+0xc4c>)
 800206a:	f020 fc81 	bl	8022970 <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 800206e:	78bb      	ldrb	r3, [r7, #2]
 8002070:	4a66      	ldr	r2, [pc, #408]	; (800220c <Init_Msg_extr+0xc3c>)
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4413      	add	r3, r2
 8002076:	3303      	adds	r3, #3
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	4868      	ldr	r0, [pc, #416]	; (8002220 <Init_Msg_extr+0xc50>)
 800207e:	f020 fc77 	bl	8022970 <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002082:	8bfb      	ldrh	r3, [r7, #30]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	441a      	add	r2, r3
 8002088:	8bbb      	ldrh	r3, [r7, #28]
 800208a:	2108      	movs	r1, #8
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fac1 	bl	8000614 <ExtractBits>
 8002092:	4602      	mov	r2, r0
 8002094:	78bb      	ldrb	r3, [r7, #2]
 8002096:	b2d1      	uxtb	r1, r2
 8002098:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <Init_Msg_extr+0xc40>)
 800209a:	015b      	lsls	r3, r3, #5
 800209c:	4413      	add	r3, r2
 800209e:	330b      	adds	r3, #11
 80020a0:	460a      	mov	r2, r1
 80020a2:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 80020a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020a8:	3308      	adds	r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da00      	bge.n	80020b0 <Init_Msg_extr+0xae0>
 80020ae:	3307      	adds	r3, #7
 80020b0:	10db      	asrs	r3, r3, #3
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	8bfb      	ldrh	r3, [r7, #30]
 80020b6:	4413      	add	r3, r2
 80020b8:	83fb      	strh	r3, [r7, #30]
 80020ba:	8bbb      	ldrh	r3, [r7, #28]
 80020bc:	3308      	adds	r3, #8
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	425a      	negs	r2, r3
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	f002 0207 	and.w	r2, r2, #7
 80020cc:	bf58      	it	pl
 80020ce:	4253      	negpl	r3, r2
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80020d4:	8bfb      	ldrh	r3, [r7, #30]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	441a      	add	r2, r3
 80020da:	8bbb      	ldrh	r3, [r7, #28]
 80020dc:	2108      	movs	r1, #8
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fa98 	bl	8000614 <ExtractBits>
 80020e4:	4602      	mov	r2, r0
 80020e6:	78bb      	ldrb	r3, [r7, #2]
 80020e8:	b2d1      	uxtb	r1, r2
 80020ea:	4a49      	ldr	r2, [pc, #292]	; (8002210 <Init_Msg_extr+0xc40>)
 80020ec:	015b      	lsls	r3, r3, #5
 80020ee:	4413      	add	r3, r2
 80020f0:	330c      	adds	r3, #12
 80020f2:	460a      	mov	r2, r1
 80020f4:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 80020f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020fa:	3308      	adds	r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da00      	bge.n	8002102 <Init_Msg_extr+0xb32>
 8002100:	3307      	adds	r3, #7
 8002102:	10db      	asrs	r3, r3, #3
 8002104:	b29a      	uxth	r2, r3
 8002106:	8bfb      	ldrh	r3, [r7, #30]
 8002108:	4413      	add	r3, r2
 800210a:	83fb      	strh	r3, [r7, #30]
 800210c:	8bbb      	ldrh	r3, [r7, #28]
 800210e:	3308      	adds	r3, #8
 8002110:	b29b      	uxth	r3, r3
 8002112:	b21b      	sxth	r3, r3
 8002114:	425a      	negs	r2, r3
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	f002 0207 	and.w	r2, r2, #7
 800211e:	bf58      	it	pl
 8002120:	4253      	negpl	r3, r2
 8002122:	b21b      	sxth	r3, r3
 8002124:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 8002126:	78bb      	ldrb	r3, [r7, #2]
 8002128:	4a39      	ldr	r2, [pc, #228]	; (8002210 <Init_Msg_extr+0xc40>)
 800212a:	015b      	lsls	r3, r3, #5
 800212c:	4413      	add	r3, r2
 800212e:	330c      	adds	r3, #12
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d00c      	beq.n	8002150 <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 8002136:	78bb      	ldrb	r3, [r7, #2]
 8002138:	4a35      	ldr	r2, [pc, #212]	; (8002210 <Init_Msg_extr+0xc40>)
 800213a:	015b      	lsls	r3, r3, #5
 800213c:	4413      	add	r3, r2
 800213e:	330c      	adds	r3, #12
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4837      	ldr	r0, [pc, #220]	; (8002224 <Init_Msg_extr+0xc54>)
 8002146:	f020 fc13 	bl	8022970 <iprintf>
		printf("This Value has to be \"1\"\n");
 800214a:	4837      	ldr	r0, [pc, #220]	; (8002228 <Init_Msg_extr+0xc58>)
 800214c:	f020 fcac 	bl	8022aa8 <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002150:	8bfb      	ldrh	r3, [r7, #30]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	441a      	add	r2, r3
 8002156:	8bbb      	ldrh	r3, [r7, #28]
 8002158:	2108      	movs	r1, #8
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fa5a 	bl	8000614 <ExtractBits>
 8002160:	4602      	mov	r2, r0
 8002162:	78bb      	ldrb	r3, [r7, #2]
 8002164:	b2d1      	uxtb	r1, r2
 8002166:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <Init_Msg_extr+0xc40>)
 8002168:	015b      	lsls	r3, r3, #5
 800216a:	4413      	add	r3, r2
 800216c:	330d      	adds	r3, #13
 800216e:	460a      	mov	r2, r1
 8002170:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 8002172:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002176:	3308      	adds	r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	da00      	bge.n	800217e <Init_Msg_extr+0xbae>
 800217c:	3307      	adds	r3, #7
 800217e:	10db      	asrs	r3, r3, #3
 8002180:	b29a      	uxth	r2, r3
 8002182:	8bfb      	ldrh	r3, [r7, #30]
 8002184:	4413      	add	r3, r2
 8002186:	83fb      	strh	r3, [r7, #30]
 8002188:	8bbb      	ldrh	r3, [r7, #28]
 800218a:	3308      	adds	r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	b21b      	sxth	r3, r3
 8002190:	425a      	negs	r2, r3
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	f002 0207 	and.w	r2, r2, #7
 800219a:	bf58      	it	pl
 800219c:	4253      	negpl	r3, r2
 800219e:	b21b      	sxth	r3, r3
 80021a0:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 80021a2:	8bfb      	ldrh	r3, [r7, #30]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	441a      	add	r2, r3
 80021a8:	78bc      	ldrb	r4, [r7, #2]
 80021aa:	8bbb      	ldrh	r3, [r7, #28]
 80021ac:	2120      	movs	r1, #32
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fa30 	bl	8000614 <ExtractBits>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4916      	ldr	r1, [pc, #88]	; (8002210 <Init_Msg_extr+0xc40>)
 80021b8:	0163      	lsls	r3, r4, #5
 80021ba:	440b      	add	r3, r1
 80021bc:	331c      	adds	r3, #28
 80021be:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80021c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021c4:	3320      	adds	r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	da00      	bge.n	80021cc <Init_Msg_extr+0xbfc>
 80021ca:	3307      	adds	r3, #7
 80021cc:	10db      	asrs	r3, r3, #3
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	8bfb      	ldrh	r3, [r7, #30]
 80021d2:	4413      	add	r3, r2
 80021d4:	83fb      	strh	r3, [r7, #30]
 80021d6:	8bbb      	ldrh	r3, [r7, #28]
 80021d8:	3320      	adds	r3, #32
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b21b      	sxth	r3, r3
 80021de:	425a      	negs	r2, r3
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	f002 0207 	and.w	r2, r2, #7
 80021e8:	bf58      	it	pl
 80021ea:	4253      	negpl	r3, r2
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 80021f0:	787a      	ldrb	r2, [r7, #1]
 80021f2:	78bb      	ldrb	r3, [r7, #2]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f86c 	bl	80022d4 <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 80021fc:	78ba      	ldrb	r2, [r7, #2]
 80021fe:	490b      	ldr	r1, [pc, #44]	; (800222c <Init_Msg_extr+0xc5c>)
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	e012      	b.n	8002230 <Init_Msg_extr+0xc60>
 800220a:	bf00      	nop
 800220c:	200011c4 	.word	0x200011c4
 8002210:	20001264 	.word	0x20001264
 8002214:	20000304 	.word	0x20000304
 8002218:	08024460 	.word	0x08024460
 800221c:	08024428 	.word	0x08024428
 8002220:	0802443c 	.word	0x0802443c
 8002224:	0802447c 	.word	0x0802447c
 8002228:	080244a8 	.word	0x080244a8
 800222c:	20001674 	.word	0x20001674
 8002230:	440b      	add	r3, r1
 8002232:	3314      	adds	r3, #20
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 8002238:	78ba      	ldrb	r2, [r7, #2]
 800223a:	4923      	ldr	r1, [pc, #140]	; (80022c8 <Init_Msg_extr+0xcf8>)
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	3305      	adds	r3, #5
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 800224c:	78ba      	ldrb	r2, [r7, #2]
 800224e:	491e      	ldr	r1, [pc, #120]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	78ba      	ldrb	r2, [r7, #2]
 800225c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 800225e:	78ba      	ldrb	r2, [r7, #2]
 8002260:	4919      	ldr	r1, [pc, #100]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	3301      	adds	r3, #1
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8002272:	2218      	movs	r2, #24
 8002274:	2100      	movs	r1, #0
 8002276:	4815      	ldr	r0, [pc, #84]	; (80022cc <Init_Msg_extr+0xcfc>)
 8002278:	f020 fa92 	bl	80227a0 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 800227c:	78ba      	ldrb	r2, [r7, #2]
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002288:	4413      	add	r3, r2
 800228a:	2218      	movs	r2, #24
 800228c:	4619      	mov	r1, r3
 800228e:	480f      	ldr	r0, [pc, #60]	; (80022cc <Init_Msg_extr+0xcfc>)
 8002290:	f020 fa5e 	bl	8022750 <memcpy>


#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 8002294:	f240 2001 	movw	r0, #513	; 0x201
 8002298:	f00d fb96 	bl	800f9c8 <TransmitCanPkt>

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800229c:	78ba      	ldrb	r2, [r7, #2]
 800229e:	490a      	ldr	r1, [pc, #40]	; (80022c8 <Init_Msg_extr+0xcf8>)
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	3301      	adds	r3, #1
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 80022b0:	78bc      	ldrb	r4, [r7, #2]
 80022b2:	f013 fb5f 	bl	8015974 <HAL_GetTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <Init_Msg_extr+0xd00>)
 80022ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80022be:	e000      	b.n	80022c2 <Init_Msg_extr+0xcf2>
			return;
 80022c0:	bf00      	nop
}
 80022c2:	3724      	adds	r7, #36	; 0x24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	20001674 	.word	0x20001674
 80022cc:	20001854 	.word	0x20001854
 80022d0:	20000e44 	.word	0x20000e44

080022d4 <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b097      	sub	sp, #92	; 0x5c
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	460a      	mov	r2, r1
 80022de:	71fb      	strb	r3, [r7, #7]
 80022e0:	4613      	mov	r3, r2
 80022e2:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	2238      	movs	r2, #56	; 0x38
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f020 fa55 	bl	80227a0 <memset>
	uint32_t Calc_CRC = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002300:	2300      	movs	r3, #0
 8002302:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 8002306:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800230a:	f107 020c 	add.w	r2, r7, #12
 800230e:	441a      	add	r2, r3
 8002310:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002314:	23f4      	movs	r3, #244	; 0xf4
 8002316:	2108      	movs	r1, #8
 8002318:	f7fe fa08 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800231c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002320:	3308      	adds	r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	da00      	bge.n	8002328 <Send_Init_Msg+0x54>
 8002326:	3307      	adds	r3, #7
 8002328:	10db      	asrs	r3, r3, #3
 800232a:	b29a      	uxth	r2, r3
 800232c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002330:	4413      	add	r3, r2
 8002332:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002336:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800233a:	3308      	adds	r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b21b      	sxth	r3, r3
 8002340:	425a      	negs	r2, r3
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	f002 0207 	and.w	r2, r2, #7
 800234a:	bf58      	it	pl
 800234c:	4253      	negpl	r3, r2
 800234e:	b21b      	sxth	r3, r3
 8002350:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002358:	f107 020c 	add.w	r2, r7, #12
 800235c:	441a      	add	r2, r3
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	4977      	ldr	r1, [pc, #476]	; (8002540 <Send_Init_Msg+0x26c>)
 8002362:	3366      	adds	r3, #102	; 0x66
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800236e:	2110      	movs	r1, #16
 8002370:	f7fe f9dc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002374:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002378:	3310      	adds	r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	da00      	bge.n	8002380 <Send_Init_Msg+0xac>
 800237e:	3307      	adds	r3, #7
 8002380:	10db      	asrs	r3, r3, #3
 8002382:	b29a      	uxth	r2, r3
 8002384:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002388:	4413      	add	r3, r2
 800238a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800238e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002392:	3310      	adds	r3, #16
 8002394:	b29b      	uxth	r3, r3
 8002396:	b21b      	sxth	r3, r3
 8002398:	425a      	negs	r2, r3
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	f002 0207 	and.w	r2, r2, #7
 80023a2:	bf58      	it	pl
 80023a4:	4253      	negpl	r3, r2
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80023ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023b0:	f107 020c 	add.w	r2, r7, #12
 80023b4:	441a      	add	r2, r3
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	4961      	ldr	r1, [pc, #388]	; (8002540 <Send_Init_Msg+0x26c>)
 80023ba:	3370      	adds	r3, #112	; 0x70
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80023c6:	2110      	movs	r1, #16
 80023c8:	f7fe f9b0 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80023cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80023d0:	3310      	adds	r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da00      	bge.n	80023d8 <Send_Init_Msg+0x104>
 80023d6:	3307      	adds	r3, #7
 80023d8:	10db      	asrs	r3, r3, #3
 80023da:	b29a      	uxth	r2, r3
 80023dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e0:	4413      	add	r3, r2
 80023e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80023e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80023ea:	3310      	adds	r3, #16
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	425a      	negs	r2, r3
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	f002 0207 	and.w	r2, r2, #7
 80023fa:	bf58      	it	pl
 80023fc:	4253      	negpl	r3, r2
 80023fe:	b21b      	sxth	r3, r3
 8002400:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <Send_Init_Msg+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d031      	beq.n	8002476 <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <Send_Init_Msg+0x270>)
 8002414:	791b      	ldrb	r3, [r3, #4]
 8002416:	79fa      	ldrb	r2, [r7, #7]
 8002418:	429a      	cmp	r2, r3
 800241a:	d137      	bne.n	800248c <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002422:	4849      	ldr	r0, [pc, #292]	; (8002548 <Send_Init_Msg+0x274>)
 8002424:	f017 ff58 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 8002428:	4602      	mov	r2, r0
 800242a:	4b48      	ldr	r3, [pc, #288]	; (800254c <Send_Init_Msg+0x278>)
 800242c:	fba3 1302 	umull	r1, r3, r3, r2
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	21c8      	movs	r1, #200	; 0xc8
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002442:	4843      	ldr	r0, [pc, #268]	; (8002550 <Send_Init_Msg+0x27c>)
 8002444:	f020 fb30 	bl	8022aa8 <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 8002448:	2100      	movs	r1, #0
 800244a:	4842      	ldr	r0, [pc, #264]	; (8002554 <Send_Init_Msg+0x280>)
 800244c:	f020 fa90 	bl	8022970 <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002450:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002454:	4619      	mov	r1, r3
 8002456:	4840      	ldr	r0, [pc, #256]	; (8002558 <Send_Init_Msg+0x284>)
 8002458:	f020 fa8a 	bl	8022970 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 800245c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002460:	f107 020c 	add.w	r2, r7, #12
 8002464:	441a      	add	r2, r3
 8002466:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800246a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800246e:	2108      	movs	r1, #8
 8002470:	f7fe f95c 	bl	800072c <InsertBits>
 8002474:	e00a      	b.n	800248c <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 8002476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800247a:	f107 020c 	add.w	r2, r7, #12
 800247e:	441a      	add	r2, r3
 8002480:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002484:	2300      	movs	r3, #0
 8002486:	2108      	movs	r1, #8
 8002488:	f7fe f950 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 800248c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002490:	3308      	adds	r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	da00      	bge.n	8002498 <Send_Init_Msg+0x1c4>
 8002496:	3307      	adds	r3, #7
 8002498:	10db      	asrs	r3, r3, #3
 800249a:	b29a      	uxth	r2, r3
 800249c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024a0:	4413      	add	r3, r2
 80024a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80024a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024aa:	3308      	adds	r3, #8
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	425a      	negs	r2, r3
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	f002 0207 	and.w	r2, r2, #7
 80024ba:	bf58      	it	pl
 80024bc:	4253      	negpl	r3, r2
 80024be:	b21b      	sxth	r3, r3
 80024c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <Send_Init_Msg+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	08db      	lsrs	r3, r3, #3
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d04c      	beq.n	800256c <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <Send_Init_Msg+0x270>)
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	79fa      	ldrb	r2, [r7, #7]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d165      	bne.n	80025a8 <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 80024e2:	4819      	ldr	r0, [pc, #100]	; (8002548 <Send_Init_Msg+0x274>)
 80024e4:	f017 fef8 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <Send_Init_Msg+0x278>)
 80024ec:	fba3 1302 	umull	r1, r3, r3, r2
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	21c8      	movs	r1, #200	; 0xc8
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 80024fe:	4817      	ldr	r0, [pc, #92]	; (800255c <Send_Init_Msg+0x288>)
 8002500:	f020 fad2 	bl	8022aa8 <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <Send_Init_Msg+0x28c>)
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4413      	add	r3, r2
 800250c:	3302      	adds	r3, #2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	4814      	ldr	r0, [pc, #80]	; (8002564 <Send_Init_Msg+0x290>)
 8002514:	f020 fa2c 	bl	8022970 <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 8002518:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800251c:	4619      	mov	r1, r3
 800251e:	4812      	ldr	r0, [pc, #72]	; (8002568 <Send_Init_Msg+0x294>)
 8002520:	f020 fa26 	bl	8022970 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002524:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002528:	f107 020c 	add.w	r2, r7, #12
 800252c:	441a      	add	r2, r3
 800252e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002532:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002536:	2108      	movs	r1, #8
 8002538:	f7fe f8f8 	bl	800072c <InsertBits>
 800253c:	e034      	b.n	80025a8 <Send_Init_Msg+0x2d4>
 800253e:	bf00      	nop
 8002540:	20000304 	.word	0x20000304
 8002544:	2000195c 	.word	0x2000195c
 8002548:	20009d20 	.word	0x20009d20
 800254c:	51eb851f 	.word	0x51eb851f
 8002550:	080244c4 	.word	0x080244c4
 8002554:	080244e8 	.word	0x080244e8
 8002558:	08024508 	.word	0x08024508
 800255c:	08024528 	.word	0x08024528
 8002560:	200011c4 	.word	0x200011c4
 8002564:	0802454c 	.word	0x0802454c
 8002568:	0802456c 	.word	0x0802456c

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 800256c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002570:	f107 020c 	add.w	r2, r7, #12
 8002574:	18d1      	adds	r1, r2, r3
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	48c4      	ldr	r0, [pc, #784]	; (800288c <Send_Init_Msg+0x5b8>)
 800257a:	011a      	lsls	r2, r3, #4
 800257c:	4402      	add	r2, r0
 800257e:	3202      	adds	r2, #2
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	3201      	adds	r2, #1
 8002584:	b2d4      	uxtb	r4, r2
 8002586:	48c1      	ldr	r0, [pc, #772]	; (800288c <Send_Init_Msg+0x5b8>)
 8002588:	011a      	lsls	r2, r3, #4
 800258a:	4402      	add	r2, r0
 800258c:	3202      	adds	r2, #2
 800258e:	4620      	mov	r0, r4
 8002590:	7010      	strb	r0, [r2, #0]
 8002592:	4abe      	ldr	r2, [pc, #760]	; (800288c <Send_Init_Msg+0x5b8>)
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	4413      	add	r3, r2
 8002598:	3302      	adds	r3, #2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025a0:	460a      	mov	r2, r1
 80025a2:	2108      	movs	r1, #8
 80025a4:	f7fe f8c2 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 80025a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025ac:	3308      	adds	r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da00      	bge.n	80025b4 <Send_Init_Msg+0x2e0>
 80025b2:	3307      	adds	r3, #7
 80025b4:	10db      	asrs	r3, r3, #3
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025bc:	4413      	add	r3, r2
 80025be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80025c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025c6:	3308      	adds	r3, #8
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	425a      	negs	r2, r3
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	f002 0207 	and.w	r2, r2, #7
 80025d6:	bf58      	it	pl
 80025d8:	4253      	negpl	r3, r2
 80025da:	b21b      	sxth	r3, r3
 80025dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 80025e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e4:	f107 020c 	add.w	r2, r7, #12
 80025e8:	441a      	add	r2, r3
 80025ea:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025ee:	2301      	movs	r3, #1
 80025f0:	2108      	movs	r1, #8
 80025f2:	f7fe f89b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80025f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025fa:	3308      	adds	r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da00      	bge.n	8002602 <Send_Init_Msg+0x32e>
 8002600:	3307      	adds	r3, #7
 8002602:	10db      	asrs	r3, r3, #3
 8002604:	b29a      	uxth	r2, r3
 8002606:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800260a:	4413      	add	r3, r2
 800260c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002610:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002614:	3308      	adds	r3, #8
 8002616:	b29b      	uxth	r3, r3
 8002618:	b21b      	sxth	r3, r3
 800261a:	425a      	negs	r2, r3
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	f002 0207 	and.w	r2, r2, #7
 8002624:	bf58      	it	pl
 8002626:	4253      	negpl	r3, r2
 8002628:	b21b      	sxth	r3, r3
 800262a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	4a96      	ldr	r2, [pc, #600]	; (800288c <Send_Init_Msg+0x5b8>)
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4413      	add	r3, r2
 8002636:	3306      	adds	r3, #6
 8002638:	2205      	movs	r2, #5
 800263a:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 800263c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002640:	f107 020c 	add.w	r2, r7, #12
 8002644:	441a      	add	r2, r3
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	4990      	ldr	r1, [pc, #576]	; (800288c <Send_Init_Msg+0x5b8>)
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	440b      	add	r3, r1
 800264e:	3306      	adds	r3, #6
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002656:	2110      	movs	r1, #16
 8002658:	f7fe f868 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800265c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002660:	3310      	adds	r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	da00      	bge.n	8002668 <Send_Init_Msg+0x394>
 8002666:	3307      	adds	r3, #7
 8002668:	10db      	asrs	r3, r3, #3
 800266a:	b29a      	uxth	r2, r3
 800266c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002670:	4413      	add	r3, r2
 8002672:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002676:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800267a:	3310      	adds	r3, #16
 800267c:	b29b      	uxth	r3, r3
 800267e:	b21b      	sxth	r3, r3
 8002680:	425a      	negs	r2, r3
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	f002 0207 	and.w	r2, r2, #7
 800268a:	bf58      	it	pl
 800268c:	4253      	negpl	r3, r2
 800268e:	b21b      	sxth	r3, r3
 8002690:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 8002694:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002698:	f107 020c 	add.w	r2, r7, #12
 800269c:	441a      	add	r2, r3
 800269e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026a2:	2317      	movs	r3, #23
 80026a4:	2108      	movs	r1, #8
 80026a6:	f7fe f841 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80026aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026ae:	3308      	adds	r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da00      	bge.n	80026b6 <Send_Init_Msg+0x3e2>
 80026b4:	3307      	adds	r3, #7
 80026b6:	10db      	asrs	r3, r3, #3
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026be:	4413      	add	r3, r2
 80026c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026c8:	3308      	adds	r3, #8
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	425a      	negs	r2, r3
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	f002 0207 	and.w	r2, r2, #7
 80026d8:	bf58      	it	pl
 80026da:	4253      	negpl	r3, r2
 80026dc:	b21b      	sxth	r3, r3
 80026de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 80026e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e6:	f107 020c 	add.w	r2, r7, #12
 80026ea:	441a      	add	r2, r3
 80026ec:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026f0:	2301      	movs	r3, #1
 80026f2:	2110      	movs	r1, #16
 80026f4:	f7fe f81a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80026f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026fc:	3310      	adds	r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da00      	bge.n	8002704 <Send_Init_Msg+0x430>
 8002702:	3307      	adds	r3, #7
 8002704:	10db      	asrs	r3, r3, #3
 8002706:	b29a      	uxth	r2, r3
 8002708:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270c:	4413      	add	r3, r2
 800270e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002712:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002716:	3310      	adds	r3, #16
 8002718:	b29b      	uxth	r3, r3
 800271a:	b21b      	sxth	r3, r3
 800271c:	425a      	negs	r2, r3
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	f002 0207 	and.w	r2, r2, #7
 8002726:	bf58      	it	pl
 8002728:	4253      	negpl	r3, r2
 800272a:	b21b      	sxth	r3, r3
 800272c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002730:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002734:	f107 020c 	add.w	r2, r7, #12
 8002738:	441a      	add	r2, r3
 800273a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800273e:	4b54      	ldr	r3, [pc, #336]	; (8002890 <Send_Init_Msg+0x5bc>)
 8002740:	2120      	movs	r1, #32
 8002742:	f7fd fff3 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002746:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800274a:	3320      	adds	r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	da00      	bge.n	8002752 <Send_Init_Msg+0x47e>
 8002750:	3307      	adds	r3, #7
 8002752:	10db      	asrs	r3, r3, #3
 8002754:	b29a      	uxth	r2, r3
 8002756:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800275a:	4413      	add	r3, r2
 800275c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002760:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002764:	3320      	adds	r3, #32
 8002766:	b29b      	uxth	r3, r3
 8002768:	b21b      	sxth	r3, r3
 800276a:	425a      	negs	r2, r3
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	f002 0207 	and.w	r2, r2, #7
 8002774:	bf58      	it	pl
 8002776:	4253      	negpl	r3, r2
 8002778:	b21b      	sxth	r3, r3
 800277a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 800277e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002782:	f107 020c 	add.w	r2, r7, #12
 8002786:	441a      	add	r2, r3
 8002788:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800278c:	2300      	movs	r3, #0
 800278e:	2110      	movs	r1, #16
 8002790:	f7fd ffcc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002794:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002798:	3310      	adds	r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	da00      	bge.n	80027a0 <Send_Init_Msg+0x4cc>
 800279e:	3307      	adds	r3, #7
 80027a0:	10db      	asrs	r3, r3, #3
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a8:	4413      	add	r3, r2
 80027aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027b2:	3310      	adds	r3, #16
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	425a      	negs	r2, r3
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	f002 0207 	and.w	r2, r2, #7
 80027c2:	bf58      	it	pl
 80027c4:	4253      	negpl	r3, r2
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 80027cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027d0:	f107 020c 	add.w	r2, r7, #12
 80027d4:	441a      	add	r2, r3
 80027d6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80027da:	2300      	movs	r3, #0
 80027dc:	2110      	movs	r1, #16
 80027de:	f7fd ffa5 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80027e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80027e6:	3310      	adds	r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da00      	bge.n	80027ee <Send_Init_Msg+0x51a>
 80027ec:	3307      	adds	r3, #7
 80027ee:	10db      	asrs	r3, r3, #3
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f6:	4413      	add	r3, r2
 80027f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002800:	3310      	adds	r3, #16
 8002802:	b29b      	uxth	r3, r3
 8002804:	b21b      	sxth	r3, r3
 8002806:	425a      	negs	r2, r3
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	f002 0207 	and.w	r2, r2, #7
 8002810:	bf58      	it	pl
 8002812:	4253      	negpl	r3, r2
 8002814:	b21b      	sxth	r3, r3
 8002816:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 800281a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800281e:	f107 020c 	add.w	r2, r7, #12
 8002822:	441a      	add	r2, r3
 8002824:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002828:	2300      	movs	r3, #0
 800282a:	2110      	movs	r1, #16
 800282c:	f7fd ff7e 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002830:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002834:	3310      	adds	r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	da00      	bge.n	800283c <Send_Init_Msg+0x568>
 800283a:	3307      	adds	r3, #7
 800283c:	10db      	asrs	r3, r3, #3
 800283e:	b29a      	uxth	r2, r3
 8002840:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002844:	4413      	add	r3, r2
 8002846:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800284a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800284e:	3310      	adds	r3, #16
 8002850:	b29b      	uxth	r3, r3
 8002852:	b21b      	sxth	r3, r3
 8002854:	425a      	negs	r2, r3
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	f002 0207 	and.w	r2, r2, #7
 800285e:	bf58      	it	pl
 8002860:	4253      	negpl	r3, r2
 8002862:	b21b      	sxth	r3, r3
 8002864:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 8002868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800286c:	f107 020c 	add.w	r2, r7, #12
 8002870:	441a      	add	r2, r3
 8002872:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002876:	2300      	movs	r3, #0
 8002878:	2110      	movs	r1, #16
 800287a:	f7fd ff57 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800287e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002882:	3310      	adds	r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	da05      	bge.n	8002894 <Send_Init_Msg+0x5c0>
 8002888:	3307      	adds	r3, #7
 800288a:	e003      	b.n	8002894 <Send_Init_Msg+0x5c0>
 800288c:	200011c4 	.word	0x200011c4
 8002890:	33e232af 	.word	0x33e232af
 8002894:	10db      	asrs	r3, r3, #3
 8002896:	b29a      	uxth	r2, r3
 8002898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800289c:	4413      	add	r3, r2
 800289e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028a6:	3310      	adds	r3, #16
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	425a      	negs	r2, r3
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	f002 0207 	and.w	r2, r2, #7
 80028b6:	bf58      	it	pl
 80028b8:	4253      	negpl	r3, r2
 80028ba:	b21b      	sxth	r3, r3
 80028bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4ab2      	ldr	r2, [pc, #712]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4413      	add	r3, r2
 80028c8:	3308      	adds	r3, #8
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4ab0      	ldr	r2, [pc, #704]	; (8002b90 <Send_Init_Msg+0x8bc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d90d      	bls.n	80028ee <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4aad      	ldr	r2, [pc, #692]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4413      	add	r3, r2
 80028da:	3308      	adds	r3, #8
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	3a01      	subs	r2, #1
 80028e2:	49aa      	ldr	r1, [pc, #680]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	440b      	add	r3, r1
 80028e8:	330c      	adds	r3, #12
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e00c      	b.n	8002908 <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	4aa6      	ldr	r2, [pc, #664]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	3308      	adds	r3, #8
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	3201      	adds	r2, #1
 80028fe:	49a3      	ldr	r1, [pc, #652]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	440b      	add	r3, r1
 8002904:	330c      	adds	r3, #12
 8002906:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8002908:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800290c:	f107 020c 	add.w	r2, r7, #12
 8002910:	441a      	add	r2, r3
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	499d      	ldr	r1, [pc, #628]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	440b      	add	r3, r1
 800291a:	330c      	adds	r3, #12
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002922:	2118      	movs	r1, #24
 8002924:	f7fd ff02 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	79fa      	ldrb	r2, [r7, #7]
 800292c:	4997      	ldr	r1, [pc, #604]	; (8002b8c <Send_Init_Msg+0x8b8>)
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	440b      	add	r3, r1
 8002932:	330c      	adds	r3, #12
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	4897      	ldr	r0, [pc, #604]	; (8002b94 <Send_Init_Msg+0x8c0>)
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4403      	add	r3, r0
 8002942:	330c      	adds	r3, #12
 8002944:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8002946:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800294a:	3318      	adds	r3, #24
 800294c:	2b00      	cmp	r3, #0
 800294e:	da00      	bge.n	8002952 <Send_Init_Msg+0x67e>
 8002950:	3307      	adds	r3, #7
 8002952:	10db      	asrs	r3, r3, #3
 8002954:	b29a      	uxth	r2, r3
 8002956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800295a:	4413      	add	r3, r2
 800295c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002960:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002964:	3318      	adds	r3, #24
 8002966:	b29b      	uxth	r3, r3
 8002968:	b21b      	sxth	r3, r3
 800296a:	425a      	negs	r2, r3
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	f002 0207 	and.w	r2, r2, #7
 8002974:	bf58      	it	pl
 8002976:	4253      	negpl	r3, r2
 8002978:	b21b      	sxth	r3, r3
 800297a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4a85      	ldr	r2, [pc, #532]	; (8002b98 <Send_Init_Msg+0x8c4>)
 8002982:	5cd2      	ldrb	r2, [r2, r3]
 8002984:	3201      	adds	r2, #1
 8002986:	b2d1      	uxtb	r1, r2
 8002988:	4a83      	ldr	r2, [pc, #524]	; (8002b98 <Send_Init_Msg+0x8c4>)
 800298a:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4a82      	ldr	r2, [pc, #520]	; (8002b98 <Send_Init_Msg+0x8c4>)
 8002990:	5cd3      	ldrb	r3, [r2, r3]
 8002992:	2bb3      	cmp	r3, #179	; 0xb3
 8002994:	d804      	bhi.n	80029a0 <Send_Init_Msg+0x6cc>
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4a7f      	ldr	r2, [pc, #508]	; (8002b98 <Send_Init_Msg+0x8c4>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	4a7d      	ldr	r2, [pc, #500]	; (8002b98 <Send_Init_Msg+0x8c4>)
 80029a4:	210a      	movs	r1, #10
 80029a6:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 80029a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ac:	f107 020c 	add.w	r2, r7, #12
 80029b0:	441a      	add	r2, r3
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	4978      	ldr	r1, [pc, #480]	; (8002b98 <Send_Init_Msg+0x8c4>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80029bc:	2108      	movs	r1, #8
 80029be:	f7fd feb5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80029c2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80029c6:	3308      	adds	r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da00      	bge.n	80029ce <Send_Init_Msg+0x6fa>
 80029cc:	3307      	adds	r3, #7
 80029ce:	10db      	asrs	r3, r3, #3
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029d6:	4413      	add	r3, r2
 80029d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80029dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80029e0:	3308      	adds	r3, #8
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	425a      	negs	r2, r3
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	f002 0207 	and.w	r2, r2, #7
 80029f0:	bf58      	it	pl
 80029f2:	4253      	negpl	r3, r2
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 80029fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029fe:	f107 020c 	add.w	r2, r7, #12
 8002a02:	441a      	add	r2, r3
 8002a04:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a08:	2301      	movs	r3, #1
 8002a0a:	2108      	movs	r1, #8
 8002a0c:	f7fd fe8e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a14:	3308      	adds	r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	da00      	bge.n	8002a1c <Send_Init_Msg+0x748>
 8002a1a:	3307      	adds	r3, #7
 8002a1c:	10db      	asrs	r3, r3, #3
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a24:	4413      	add	r3, r2
 8002a26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a2e:	3308      	adds	r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	425a      	negs	r2, r3
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	f002 0207 	and.w	r2, r2, #7
 8002a3e:	bf58      	it	pl
 8002a40:	4253      	negpl	r3, r2
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 8002a48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	441a      	add	r2, r3
 8002a52:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a56:	2301      	movs	r3, #1
 8002a58:	2108      	movs	r1, #8
 8002a5a:	f7fd fe67 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a62:	3308      	adds	r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da00      	bge.n	8002a6a <Send_Init_Msg+0x796>
 8002a68:	3307      	adds	r3, #7
 8002a6a:	10db      	asrs	r3, r3, #3
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a72:	4413      	add	r3, r2
 8002a74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	425a      	negs	r2, r3
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	f002 0207 	and.w	r2, r2, #7
 8002a8c:	bf58      	it	pl
 8002a8e:	4253      	negpl	r3, r2
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 8002a96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a9a:	f107 020c 	add.w	r2, r7, #12
 8002a9e:	441a      	add	r2, r3
 8002aa0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2108      	movs	r1, #8
 8002aa8:	f7fd fe40 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002aac:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da00      	bge.n	8002ab8 <Send_Init_Msg+0x7e4>
 8002ab6:	3307      	adds	r3, #7
 8002ab8:	10db      	asrs	r3, r3, #3
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ac6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002aca:	3308      	adds	r3, #8
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	425a      	negs	r2, r3
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	f002 0207 	and.w	r2, r2, #7
 8002ada:	bf58      	it	pl
 8002adc:	4253      	negpl	r3, r2
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <Send_Init_Msg+0x8c8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d060      	beq.n	8002bb4 <Send_Init_Msg+0x8e0>
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <Send_Init_Msg+0x8c8>)
 8002af4:	791b      	ldrb	r3, [r3, #4]
 8002af6:	79fa      	ldrb	r2, [r7, #7]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d15b      	bne.n	8002bb4 <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 8002afc:	230c      	movs	r3, #12
 8002afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 8002b02:	4827      	ldr	r0, [pc, #156]	; (8002ba0 <Send_Init_Msg+0x8cc>)
 8002b04:	f017 fbe8 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 8002b08:	4601      	mov	r1, r0
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <Send_Init_Msg+0x8d0>)
 8002b0c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	4613      	mov	r3, r2
 8002b14:	015b      	lsls	r3, r3, #5
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	1aca      	subs	r2, r1, r3
 8002b1e:	b2d3      	uxtb	r3, r2
 8002b20:	3301      	adds	r3, #1
 8002b22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 8002b26:	4820      	ldr	r0, [pc, #128]	; (8002ba8 <Send_Init_Msg+0x8d4>)
 8002b28:	f01f ffbe 	bl	8022aa8 <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4413      	add	r3, r2
 8002b34:	3303      	adds	r3, #3
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	481c      	ldr	r0, [pc, #112]	; (8002bac <Send_Init_Msg+0x8d8>)
 8002b3c:	f01f ff18 	bl	8022970 <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	4413      	add	r3, r2
 8002b48:	3303      	adds	r3, #3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d108      	bne.n	8002b66 <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	3b02      	subs	r3, #2
 8002b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 8002b66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4810      	ldr	r0, [pc, #64]	; (8002bb0 <Send_Init_Msg+0x8dc>)
 8002b6e:	f01f feff 	bl	8022970 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8002b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b76:	f107 020c 	add.w	r2, r7, #12
 8002b7a:	441a      	add	r2, r3
 8002b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b80:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b84:	2108      	movs	r1, #8
 8002b86:	f7fd fdd1 	bl	800072c <InsertBits>
	{
 8002b8a:	e022      	b.n	8002bd2 <Send_Init_Msg+0x8fe>
 8002b8c:	200011c4 	.word	0x200011c4
 8002b90:	00ffffef 	.word	0x00ffffef
 8002b94:	20001674 	.word	0x20001674
 8002b98:	2000010c 	.word	0x2000010c
 8002b9c:	2000195c 	.word	0x2000195c
 8002ba0:	20009d20 	.word	0x20009d20
 8002ba4:	10624dd3 	.word	0x10624dd3
 8002ba8:	0802458c 	.word	0x0802458c
 8002bac:	080245bc 	.word	0x080245bc
 8002bb0:	080245d8 	.word	0x080245d8
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002bb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bb8:	f107 020c 	add.w	r2, r7, #12
 8002bbc:	441a      	add	r2, r3
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	494e      	ldr	r1, [pc, #312]	; (8002cfc <Send_Init_Msg+0xa28>)
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002bc8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002bcc:	2108      	movs	r1, #8
 8002bce:	f7fd fdad 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002bd2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da00      	bge.n	8002bde <Send_Init_Msg+0x90a>
 8002bdc:	3307      	adds	r3, #7
 8002bde:	10db      	asrs	r3, r3, #3
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002be6:	4413      	add	r3, r2
 8002be8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002bec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bf0:	3308      	adds	r3, #8
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	425a      	negs	r2, r3
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	f002 0207 	and.w	r2, r2, #7
 8002c00:	bf58      	it	pl
 8002c02:	4253      	negpl	r3, r2
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 8002c0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c0e:	f107 020c 	add.w	r2, r7, #12
 8002c12:	441a      	add	r2, r3
 8002c14:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	f7fd fd86 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002c20:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c24:	3308      	adds	r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	da00      	bge.n	8002c2c <Send_Init_Msg+0x958>
 8002c2a:	3307      	adds	r3, #7
 8002c2c:	10db      	asrs	r3, r3, #3
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c34:	4413      	add	r3, r2
 8002c36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c3e:	3308      	adds	r3, #8
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	425a      	negs	r2, r3
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	f002 0207 	and.w	r2, r2, #7
 8002c4e:	bf58      	it	pl
 8002c50:	4253      	negpl	r3, r2
 8002c52:	b21b      	sxth	r3, r3
 8002c54:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 8002c58:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f010 faae 	bl	80131c4 <CalculateDirectReverseCrc>
 8002c68:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 8002c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c6e:	f107 020c 	add.w	r2, r7, #12
 8002c72:	441a      	add	r2, r3
 8002c74:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7a:	2120      	movs	r1, #32
 8002c7c:	f7fd fd56 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002c80:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c84:	3320      	adds	r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da00      	bge.n	8002c8c <Send_Init_Msg+0x9b8>
 8002c8a:	3307      	adds	r3, #7
 8002c8c:	10db      	asrs	r3, r3, #3
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c94:	4413      	add	r3, r2
 8002c96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c9e:	3320      	adds	r3, #32
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	425a      	negs	r2, r3
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	f002 0207 	and.w	r2, r2, #7
 8002cae:	bf58      	it	pl
 8002cb0:	4253      	negpl	r3, r2
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <Send_Init_Msg+0xa2c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0a5b      	lsrs	r3, r3, #9
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <Send_Init_Msg+0xa0a>
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <Send_Init_Msg+0xa2c>)
 8002cc8:	791b      	ldrb	r3, [r3, #4]
 8002cca:	79fa      	ldrb	r2, [r7, #7]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d106      	bne.n	8002cde <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 8002cd0:	480c      	ldr	r0, [pc, #48]	; (8002d04 <Send_Init_Msg+0xa30>)
 8002cd2:	f01f fee9 	bl	8022aa8 <puts>
		printf("Not Sending Reply");
 8002cd6:	480c      	ldr	r0, [pc, #48]	; (8002d08 <Send_Init_Msg+0xa34>)
 8002cd8:	f01f fe4a 	bl	8022970 <iprintf>
 8002cdc:	e009      	b.n	8002cf2 <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8002cde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce2:	b2d9      	uxtb	r1, r3
 8002ce4:	79fa      	ldrb	r2, [r7, #7]
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	4618      	mov	r0, r3
 8002cec:	f004 fc68 	bl	80075c0 <Process_Sending_Reply>
	}
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	375c      	adds	r7, #92	; 0x5c
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000304 	.word	0x20000304
 8002d00:	2000195c 	.word	0x2000195c
 8002d04:	080245f4 	.word	0x080245f4
 8002d08:	0802460c 	.word	0x0802460c

08002d0c <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b099      	sub	sp, #100	; 0x64
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	70fb      	strb	r3, [r7, #3]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	70bb      	strb	r3, [r7, #2]
 8002d22:	4613      	mov	r3, r2
 8002d24:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint32_t Calc_CRC = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Recv_CRC = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t Ticks = HAL_GetTick();
 8002d34:	f012 fe1e 	bl	8015974 <HAL_GetTick>
 8002d38:	64b8      	str	r0, [r7, #72]	; 0x48
	uint8_t noofIP = 0, uc_index = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t LinkEstablishFlag = CLEAR;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	uint8_t Temp_Vital_Data_Buff[60] = {0,};
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	2238      	movs	r2, #56	; 0x38
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f01f fd21 	bl	80227a0 <memset>
	BITSTUFFINIT(0, 0);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8002d6a:	49a1      	ldr	r1, [pc, #644]	; (8002ff0 <Vital_Msg_extr+0x2e4>)
 8002d6c:	48a1      	ldr	r0, [pc, #644]	; (8002ff4 <Vital_Msg_extr+0x2e8>)
 8002d6e:	f7fd fa67 	bl	8000240 <strcmp>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8138 	beq.w	8002fea <Vital_Msg_extr+0x2de>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002d7a:	4b9f      	ldr	r3, [pc, #636]	; (8002ff8 <Vital_Msg_extr+0x2ec>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02d      	beq.n	8002de2 <Vital_Msg_extr+0xd6>
 8002d86:	4b9c      	ldr	r3, [pc, #624]	; (8002ff8 <Vital_Msg_extr+0x2ec>)
 8002d88:	791b      	ldrb	r3, [r3, #4]
 8002d8a:	78ba      	ldrb	r2, [r7, #2]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d128      	bne.n	8002de2 <Vital_Msg_extr+0xd6>
	{
		uint32_t Rand_Number = 22;
 8002d90:	2316      	movs	r3, #22
 8002d92:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8002d94:	4899      	ldr	r0, [pc, #612]	; (8002ffc <Vital_Msg_extr+0x2f0>)
 8002d96:	f017 fa9f 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b98      	ldr	r3, [pc, #608]	; (8003000 <Vital_Msg_extr+0x2f4>)
 8002d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002da2:	0dd9      	lsrs	r1, r3, #23
 8002da4:	460b      	mov	r3, r1
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	1a5b      	subs	r3, r3, r1
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	647b      	str	r3, [r7, #68]	; 0x44
#endif
		printf("\nInjected RX Vital CRC failure\n");
 8002db0:	4894      	ldr	r0, [pc, #592]	; (8003004 <Vital_Msg_extr+0x2f8>)
 8002db2:	f01f fe79 	bl	8022aa8 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002db6:	78bb      	ldrb	r3, [r7, #2]
 8002db8:	4a93      	ldr	r2, [pc, #588]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4891      	ldr	r0, [pc, #580]	; (800300c <Vital_Msg_extr+0x300>)
 8002dc6:	f01f fdd3 	bl	8022970 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8002dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002dcc:	4890      	ldr	r0, [pc, #576]	; (8003010 <Vital_Msg_extr+0x304>)
 8002dce:	f01f fdcf 	bl	8022970 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8002dd2:	f107 0208 	add.w	r2, r7, #8
 8002dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd8:	2118      	movs	r1, #24
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fd fca6 	bl	800072c <InsertBits>
	{
 8002de0:	e00b      	b.n	8002dfa <Vital_Msg_extr+0xee>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002de2:	78bb      	ldrb	r3, [r7, #2]
 8002de4:	4a88      	ldr	r2, [pc, #544]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4413      	add	r3, r2
 8002dea:	3308      	adds	r3, #8
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f107 0208 	add.w	r2, r7, #8
 8002df2:	2118      	movs	r1, #24
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fd fc99 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e00:	e010      	b.n	8002e24 <Vital_Msg_extr+0x118>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002e02:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	441a      	add	r2, r3
 8002e0a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e0e:	3303      	adds	r3, #3
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	3360      	adds	r3, #96	; 0x60
 8002e14:	443b      	add	r3, r7
 8002e16:	f803 2c58 	strb.w	r2, [r3, #-88]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002e1a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e24:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	3b05      	subs	r3, #5
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	dbe8      	blt.n	8002e02 <Vital_Msg_extr+0xf6>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002e30:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3303      	adds	r3, #3
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f010 f9bf 	bl	80131c4 <CalculateDirectReverseCrc>
 8002e46:	64f8      	str	r0, [r7, #76]	; 0x4c
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	3b05      	subs	r3, #5
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	441a      	add	r2, r3
 8002e50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002e54:	2120      	movs	r1, #32
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fbdc 	bl	8000614 <ExtractBits>
 8002e5c:	65b8      	str	r0, [r7, #88]	; 0x58

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 8002e5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e62:	429a      	cmp	r2, r3
 8002e64:	f000 80ec 	beq.w	8003040 <Vital_Msg_extr+0x334>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3305      	adds	r3, #5
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2108      	movs	r1, #8
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fd fbcf 	bl	8000614 <ExtractBits>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <Vital_Msg_extr+0x186>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3305      	adds	r3, #5
 8002e80:	461a      	mov	r2, r3
 8002e82:	2108      	movs	r1, #8
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fd fbc5 	bl	8000614 <ExtractBits>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	f040 8098 	bne.w	8002fc2 <Vital_Msg_extr+0x2b6>
		{
			printf("Tx seq Roll over Detected\n");
 8002e92:	4860      	ldr	r0, [pc, #384]	; (8003014 <Vital_Msg_extr+0x308>)
 8002e94:	f01f fe08 	bl	8022aa8 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	223c      	movs	r2, #60	; 0x3c
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f01f fc7d 	bl	80227a0 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8002ea6:	78bb      	ldrb	r3, [r7, #2]
 8002ea8:	4a57      	ldr	r2, [pc, #348]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	4413      	add	r3, r2
 8002eae:	3308      	adds	r3, #8
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f107 0208 	add.w	r2, r7, #8
 8002eb8:	2118      	movs	r1, #24
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fd fc36 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002ec6:	e010      	b.n	8002eea <Vital_Msg_extr+0x1de>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002ec8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	441a      	add	r2, r3
 8002ed0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ed4:	3303      	adds	r3, #3
 8002ed6:	7812      	ldrb	r2, [r2, #0]
 8002ed8:	3360      	adds	r3, #96	; 0x60
 8002eda:	443b      	add	r3, r7
 8002edc:	f803 2c58 	strb.w	r2, [r3, #-88]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ee0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002eea:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	3b05      	subs	r3, #5
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	dbe8      	blt.n	8002ec8 <Vital_Msg_extr+0x1bc>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002ef6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3303      	adds	r3, #3
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	f107 0308 	add.w	r3, r7, #8
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f010 f95c 	bl	80131c4 <CalculateDirectReverseCrc>
 8002f0c:	64f8      	str	r0, [r7, #76]	; 0x4c
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	3b05      	subs	r3, #5
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	441a      	add	r2, r3
 8002f16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fb79 	bl	8000614 <ExtractBits>
 8002f22:	65b8      	str	r0, [r7, #88]	; 0x58

			if(Calc_CRC == Recv_CRC)
 8002f24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d136      	bne.n	8002f9a <Vital_Msg_extr+0x28e>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8002f2c:	483a      	ldr	r0, [pc, #232]	; (8003018 <Vital_Msg_extr+0x30c>)
 8002f2e:	f01f fdbb 	bl	8022aa8 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8002f32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f34:	4839      	ldr	r0, [pc, #228]	; (800301c <Vital_Msg_extr+0x310>)
 8002f36:	f01f fd1b 	bl	8022970 <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f3a:	78bb      	ldrb	r3, [r7, #2]
 8002f3c:	4a32      	ldr	r2, [pc, #200]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	4413      	add	r3, r2
 8002f42:	3308      	adds	r3, #8
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4619      	mov	r1, r3
 8002f48:	4835      	ldr	r0, [pc, #212]	; (8003020 <Vital_Msg_extr+0x314>)
 8002f4a:	f01f fd11 	bl	8022970 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f4e:	78bb      	ldrb	r3, [r7, #2]
 8002f50:	492d      	ldr	r1, [pc, #180]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f52:	011a      	lsls	r2, r3, #4
 8002f54:	440a      	add	r2, r1
 8002f56:	3208      	adds	r2, #8
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	3201      	adds	r2, #1
 8002f5c:	492a      	ldr	r1, [pc, #168]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	440b      	add	r3, r1
 8002f62:	3308      	adds	r3, #8
 8002f64:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f66:	78bb      	ldrb	r3, [r7, #2]
 8002f68:	4a27      	ldr	r2, [pc, #156]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3308      	adds	r3, #8
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	482b      	ldr	r0, [pc, #172]	; (8003024 <Vital_Msg_extr+0x318>)
 8002f76:	f01f fcfb 	bl	8022970 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f7a:	78bb      	ldrb	r3, [r7, #2]
 8002f7c:	78ba      	ldrb	r2, [r7, #2]
 8002f7e:	4922      	ldr	r1, [pc, #136]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	440b      	add	r3, r1
 8002f84:	3308      	adds	r3, #8
 8002f86:	6819      	ldr	r1, [r3, #0]
 8002f88:	4827      	ldr	r0, [pc, #156]	; (8003028 <Vital_Msg_extr+0x31c>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4403      	add	r3, r0
 8002f94:	3308      	adds	r3, #8
 8002f96:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 8002f98:	e053      	b.n	8003042 <Vital_Msg_extr+0x336>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002f9a:	78bb      	ldrb	r3, [r7, #2]
 8002f9c:	4a23      	ldr	r2, [pc, #140]	; (800302c <Vital_Msg_extr+0x320>)
 8002f9e:	3366      	adds	r3, #102	; 0x66
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4821      	ldr	r0, [pc, #132]	; (8003030 <Vital_Msg_extr+0x324>)
 8002faa:	f01f fce1 	bl	8022970 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002fae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fb0:	4820      	ldr	r0, [pc, #128]	; (8003034 <Vital_Msg_extr+0x328>)
 8002fb2:	f01f fcdd 	bl	8022970 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 8002fb6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fb8:	481f      	ldr	r0, [pc, #124]	; (8003038 <Vital_Msg_extr+0x32c>)
 8002fba:	f01f fcd9 	bl	8022970 <iprintf>
				return;
 8002fbe:	f000 beac 	b.w	8003d1a <Vital_Msg_extr+0x100e>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002fc2:	78bb      	ldrb	r3, [r7, #2]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	; (800302c <Vital_Msg_extr+0x320>)
 8002fc6:	3366      	adds	r3, #102	; 0x66
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	481a      	ldr	r0, [pc, #104]	; (800303c <Vital_Msg_extr+0x330>)
 8002fd2:	f01f fccd 	bl	8022970 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002fd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fd8:	4816      	ldr	r0, [pc, #88]	; (8003034 <Vital_Msg_extr+0x328>)
 8002fda:	f01f fcc9 	bl	8022970 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8002fde:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fe0:	4815      	ldr	r0, [pc, #84]	; (8003038 <Vital_Msg_extr+0x32c>)
 8002fe2:	f01f fcc5 	bl	8022970 <iprintf>
			return;
 8002fe6:	f000 be98 	b.w	8003d1a <Vital_Msg_extr+0x100e>
		goto ROLLOVER_VITAL;
 8002fea:	bf00      	nop
 8002fec:	e029      	b.n	8003042 <Vital_Msg_extr+0x336>
 8002fee:	bf00      	nop
 8002ff0:	0802411c 	.word	0x0802411c
 8002ff4:	20000305 	.word	0x20000305
 8002ff8:	2000195c 	.word	0x2000195c
 8002ffc:	20009d20 	.word	0x20009d20
 8003000:	80008001 	.word	0x80008001
 8003004:	08024620 	.word	0x08024620
 8003008:	200011c4 	.word	0x200011c4
 800300c:	08024640 	.word	0x08024640
 8003010:	08024668 	.word	0x08024668
 8003014:	08024690 	.word	0x08024690
 8003018:	080246ac 	.word	0x080246ac
 800301c:	080246c4 	.word	0x080246c4
 8003020:	080246e4 	.word	0x080246e4
 8003024:	08024704 	.word	0x08024704
 8003028:	20001674 	.word	0x20001674
 800302c:	20000304 	.word	0x20000304
 8003030:	08024730 	.word	0x08024730
 8003034:	08024360 	.word	0x08024360
 8003038:	08024370 	.word	0x08024370
 800303c:	08024750 	.word	0x08024750
		}
	}

	ROLLOVER_VITAL:
 8003040:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 8003042:	78bb      	ldrb	r3, [r7, #2]
 8003044:	49c3      	ldr	r1, [pc, #780]	; (8003354 <Vital_Msg_extr+0x648>)
 8003046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 800304c:	78bb      	ldrb	r3, [r7, #2]
 800304e:	49c2      	ldr	r1, [pc, #776]	; (8003358 <Vital_Msg_extr+0x64c>)
 8003050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 8003056:	78bb      	ldrb	r3, [r7, #2]
 8003058:	4ac0      	ldr	r2, [pc, #768]	; (800335c <Vital_Msg_extr+0x650>)
 800305a:	2101      	movs	r1, #1
 800305c:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 800305e:	78ba      	ldrb	r2, [r7, #2]
 8003060:	4613      	mov	r3, r2
 8003062:	015b      	lsls	r3, r3, #5
 8003064:	4413      	add	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4abd      	ldr	r2, [pc, #756]	; (8003360 <Vital_Msg_extr+0x654>)
 800306a:	4413      	add	r3, r2
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f01f fb95 	bl	80227a0 <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 8003076:	78ba      	ldrb	r2, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	4413      	add	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4ab7      	ldr	r2, [pc, #732]	; (8003360 <Vital_Msg_extr+0x654>)
 8003082:	4413      	add	r3, r2
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	f01f fb61 	bl	8022750 <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 800308e:	78ba      	ldrb	r2, [r7, #2]
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	b298      	uxth	r0, r3
 8003094:	49b2      	ldr	r1, [pc, #712]	; (8003360 <Vital_Msg_extr+0x654>)
 8003096:	4613      	mov	r3, r2
 8003098:	015b      	lsls	r3, r3, #5
 800309a:	4413      	add	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	440b      	add	r3, r1
 80030a0:	3340      	adds	r3, #64	; 0x40
 80030a2:	4602      	mov	r2, r0
 80030a4:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 80030a6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80030aa:	3308      	adds	r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da00      	bge.n	80030b2 <Vital_Msg_extr+0x3a6>
 80030b0:	3307      	adds	r3, #7
 80030b2:	10db      	asrs	r3, r3, #3
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030ba:	4413      	add	r3, r2
 80030bc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80030c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030c4:	3308      	adds	r3, #8
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	425a      	negs	r2, r3
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	f002 0207 	and.w	r2, r2, #7
 80030d4:	bf58      	it	pl
 80030d6:	4253      	negpl	r3, r2
 80030d8:	b21b      	sxth	r3, r3
 80030da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80030de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	441a      	add	r2, r3
 80030e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030ea:	2110      	movs	r1, #16
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fa91 	bl	8000614 <ExtractBits>
 80030f2:	4603      	mov	r3, r0
 80030f4:	78ba      	ldrb	r2, [r7, #2]
 80030f6:	b298      	uxth	r0, r3
 80030f8:	499a      	ldr	r1, [pc, #616]	; (8003364 <Vital_Msg_extr+0x658>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	440b      	add	r3, r1
 8003104:	3328      	adds	r3, #40	; 0x28
 8003106:	4602      	mov	r2, r0
 8003108:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 800310a:	78ba      	ldrb	r2, [r7, #2]
 800310c:	4995      	ldr	r1, [pc, #596]	; (8003364 <Vital_Msg_extr+0x658>)
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	440b      	add	r3, r1
 8003118:	3328      	adds	r3, #40	; 0x28
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	4892      	ldr	r0, [pc, #584]	; (8003368 <Vital_Msg_extr+0x65c>)
 8003120:	f01f fc26 	bl	8022970 <iprintf>
	BITSTUFFINC(16);
 8003124:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003128:	3310      	adds	r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	da00      	bge.n	8003130 <Vital_Msg_extr+0x424>
 800312e:	3307      	adds	r3, #7
 8003130:	10db      	asrs	r3, r3, #3
 8003132:	b29a      	uxth	r2, r3
 8003134:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003138:	4413      	add	r3, r2
 800313a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800313e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003142:	3310      	adds	r3, #16
 8003144:	b29b      	uxth	r3, r3
 8003146:	b21b      	sxth	r3, r3
 8003148:	425a      	negs	r2, r3
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	f002 0207 	and.w	r2, r2, #7
 8003152:	bf58      	it	pl
 8003154:	4253      	negpl	r3, r2
 8003156:	b21b      	sxth	r3, r3
 8003158:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800315c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	441a      	add	r2, r3
 8003164:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003168:	2110      	movs	r1, #16
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd fa52 	bl	8000614 <ExtractBits>
 8003170:	4603      	mov	r3, r0
 8003172:	78ba      	ldrb	r2, [r7, #2]
 8003174:	b298      	uxth	r0, r3
 8003176:	497b      	ldr	r1, [pc, #492]	; (8003364 <Vital_Msg_extr+0x658>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	440b      	add	r3, r1
 8003182:	3326      	adds	r3, #38	; 0x26
 8003184:	4602      	mov	r2, r0
 8003186:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 8003188:	78ba      	ldrb	r2, [r7, #2]
 800318a:	4976      	ldr	r1, [pc, #472]	; (8003364 <Vital_Msg_extr+0x658>)
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	440b      	add	r3, r1
 8003196:	3326      	adds	r3, #38	; 0x26
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	4619      	mov	r1, r3
 800319c:	4873      	ldr	r0, [pc, #460]	; (800336c <Vital_Msg_extr+0x660>)
 800319e:	f01f fbe7 	bl	8022970 <iprintf>
	BITSTUFFINC(16);
 80031a2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80031a6:	3310      	adds	r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da00      	bge.n	80031ae <Vital_Msg_extr+0x4a2>
 80031ac:	3307      	adds	r3, #7
 80031ae:	10db      	asrs	r3, r3, #3
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031b6:	4413      	add	r3, r2
 80031b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80031bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031c0:	3310      	adds	r3, #16
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	b21b      	sxth	r3, r3
 80031c6:	425a      	negs	r2, r3
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	f002 0207 	and.w	r2, r2, #7
 80031d0:	bf58      	it	pl
 80031d2:	4253      	negpl	r3, r2
 80031d4:	b21b      	sxth	r3, r3
 80031d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80031da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	441a      	add	r2, r3
 80031e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031e6:	2108      	movs	r1, #8
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fd fa13 	bl	8000614 <ExtractBits>
 80031ee:	4602      	mov	r2, r0
 80031f0:	78bb      	ldrb	r3, [r7, #2]
 80031f2:	b2d1      	uxtb	r1, r2
 80031f4:	4a5e      	ldr	r2, [pc, #376]	; (8003370 <Vital_Msg_extr+0x664>)
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	4413      	add	r3, r2
 80031fa:	3302      	adds	r3, #2
 80031fc:	460a      	mov	r2, r1
 80031fe:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8003200:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003204:	3308      	adds	r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	da00      	bge.n	800320c <Vital_Msg_extr+0x500>
 800320a:	3307      	adds	r3, #7
 800320c:	10db      	asrs	r3, r3, #3
 800320e:	b29a      	uxth	r2, r3
 8003210:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003214:	4413      	add	r3, r2
 8003216:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800321a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800321e:	3308      	adds	r3, #8
 8003220:	b29b      	uxth	r3, r3
 8003222:	b21b      	sxth	r3, r3
 8003224:	425a      	negs	r2, r3
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	f002 0207 	and.w	r2, r2, #7
 800322e:	bf58      	it	pl
 8003230:	4253      	negpl	r3, r2
 8003232:	b21b      	sxth	r3, r3
 8003234:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003238:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	441a      	add	r2, r3
 8003240:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003244:	2108      	movs	r1, #8
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd f9e4 	bl	8000614 <ExtractBits>
 800324c:	4602      	mov	r2, r0
 800324e:	78bb      	ldrb	r3, [r7, #2]
 8003250:	b2d1      	uxtb	r1, r2
 8003252:	4a47      	ldr	r2, [pc, #284]	; (8003370 <Vital_Msg_extr+0x664>)
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4413      	add	r3, r2
 8003258:	3301      	adds	r3, #1
 800325a:	460a      	mov	r2, r1
 800325c:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 800325e:	78bb      	ldrb	r3, [r7, #2]
 8003260:	4a43      	ldr	r2, [pc, #268]	; (8003370 <Vital_Msg_extr+0x664>)
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	4413      	add	r3, r2
 8003266:	3301      	adds	r3, #1
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d138      	bne.n	80032e0 <Vital_Msg_extr+0x5d4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800326e:	78bb      	ldrb	r3, [r7, #2]
 8003270:	4a40      	ldr	r2, [pc, #256]	; (8003374 <Vital_Msg_extr+0x668>)
 8003272:	3366      	adds	r3, #102	; 0x66
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4619      	mov	r1, r3
 800327c:	483e      	ldr	r0, [pc, #248]	; (8003378 <Vital_Msg_extr+0x66c>)
 800327e:	f01f fb77 	bl	8022970 <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8003282:	78bb      	ldrb	r3, [r7, #2]
 8003284:	4a3a      	ldr	r2, [pc, #232]	; (8003370 <Vital_Msg_extr+0x664>)
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	4413      	add	r3, r2
 800328a:	330c      	adds	r3, #12
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	483a      	ldr	r0, [pc, #232]	; (800337c <Vital_Msg_extr+0x670>)
 8003292:	f01f fb6d 	bl	8022970 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8003296:	78bb      	ldrb	r3, [r7, #2]
 8003298:	4935      	ldr	r1, [pc, #212]	; (8003370 <Vital_Msg_extr+0x664>)
 800329a:	011a      	lsls	r2, r3, #4
 800329c:	440a      	add	r2, r1
 800329e:	320c      	adds	r2, #12
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	3201      	adds	r2, #1
 80032a4:	4932      	ldr	r1, [pc, #200]	; (8003370 <Vital_Msg_extr+0x664>)
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	440b      	add	r3, r1
 80032aa:	330c      	adds	r3, #12
 80032ac:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80032ae:	78bb      	ldrb	r3, [r7, #2]
 80032b0:	4a2f      	ldr	r2, [pc, #188]	; (8003370 <Vital_Msg_extr+0x664>)
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	4413      	add	r3, r2
 80032b6:	330c      	adds	r3, #12
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4830      	ldr	r0, [pc, #192]	; (8003380 <Vital_Msg_extr+0x674>)
 80032be:	f01f fb57 	bl	8022970 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80032c2:	78bb      	ldrb	r3, [r7, #2]
 80032c4:	78ba      	ldrb	r2, [r7, #2]
 80032c6:	492a      	ldr	r1, [pc, #168]	; (8003370 <Vital_Msg_extr+0x664>)
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	440b      	add	r3, r1
 80032cc:	330c      	adds	r3, #12
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	482c      	ldr	r0, [pc, #176]	; (8003384 <Vital_Msg_extr+0x678>)
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4403      	add	r3, r0
 80032dc:	330c      	adds	r3, #12
 80032de:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 80032e0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80032e4:	3308      	adds	r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	da00      	bge.n	80032ec <Vital_Msg_extr+0x5e0>
 80032ea:	3307      	adds	r3, #7
 80032ec:	10db      	asrs	r3, r3, #3
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80032f4:	4413      	add	r3, r2
 80032f6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80032fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032fe:	3308      	adds	r3, #8
 8003300:	b29b      	uxth	r3, r3
 8003302:	b21b      	sxth	r3, r3
 8003304:	425a      	negs	r2, r3
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	f002 0207 	and.w	r2, r2, #7
 800330e:	bf58      	it	pl
 8003310:	4253      	negpl	r3, r2
 8003312:	b21b      	sxth	r3, r3
 8003314:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003318:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	441a      	add	r2, r3
 8003320:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003324:	2108      	movs	r1, #8
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f974 	bl	8000614 <ExtractBits>
 800332c:	4603      	mov	r3, r0
 800332e:	78ba      	ldrb	r2, [r7, #2]
 8003330:	b2d8      	uxtb	r0, r3
 8003332:	490c      	ldr	r1, [pc, #48]	; (8003364 <Vital_Msg_extr+0x658>)
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	440b      	add	r3, r1
 800333e:	3302      	adds	r3, #2
 8003340:	4602      	mov	r2, r0
 8003342:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003344:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003348:	3308      	adds	r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	da1c      	bge.n	8003388 <Vital_Msg_extr+0x67c>
 800334e:	3307      	adds	r3, #7
 8003350:	e01a      	b.n	8003388 <Vital_Msg_extr+0x67c>
 8003352:	bf00      	nop
 8003354:	20000fa4 	.word	0x20000fa4
 8003358:	20000fcc 	.word	0x20000fcc
 800335c:	20001018 	.word	0x20001018
 8003360:	2000197c 	.word	0x2000197c
 8003364:	200013a4 	.word	0x200013a4
 8003368:	08024450 	.word	0x08024450
 800336c:	08024458 	.word	0x08024458
 8003370:	200011c4 	.word	0x200011c4
 8003374:	20000304 	.word	0x20000304
 8003378:	08024764 	.word	0x08024764
 800337c:	080247a8 	.word	0x080247a8
 8003380:	080247b8 	.word	0x080247b8
 8003384:	20001674 	.word	0x20001674
 8003388:	10db      	asrs	r3, r3, #3
 800338a:	b29a      	uxth	r2, r3
 800338c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003390:	4413      	add	r3, r2
 8003392:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003396:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800339a:	3308      	adds	r3, #8
 800339c:	b29b      	uxth	r3, r3
 800339e:	b21b      	sxth	r3, r3
 80033a0:	425a      	negs	r2, r3
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	f002 0207 	and.w	r2, r2, #7
 80033aa:	bf58      	it	pl
 80033ac:	4253      	negpl	r3, r2
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80033b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	441a      	add	r2, r3
 80033bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033c0:	2110      	movs	r1, #16
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd f926 	bl	8000614 <ExtractBits>
 80033c8:	4602      	mov	r2, r0
 80033ca:	78bb      	ldrb	r3, [r7, #2]
 80033cc:	b291      	uxth	r1, r2
 80033ce:	4abd      	ldr	r2, [pc, #756]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	460a      	mov	r2, r1
 80033d8:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80033da:	49bb      	ldr	r1, [pc, #748]	; (80036c8 <Vital_Msg_extr+0x9bc>)
 80033dc:	48bb      	ldr	r0, [pc, #748]	; (80036cc <Vital_Msg_extr+0x9c0>)
 80033de:	f7fc ff2f 	bl	8000240 <strcmp>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <Vital_Msg_extr+0x6fc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80033e8:	78bb      	ldrb	r3, [r7, #2]
 80033ea:	4ab6      	ldr	r2, [pc, #728]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	4413      	add	r3, r2
 80033f0:	3304      	adds	r3, #4
 80033f2:	881a      	ldrh	r2, [r3, #0]
 80033f4:	78bb      	ldrb	r3, [r7, #2]
 80033f6:	f042 0208 	orr.w	r2, r2, #8
 80033fa:	b291      	uxth	r1, r2
 80033fc:	4ab1      	ldr	r2, [pc, #708]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	4413      	add	r3, r2
 8003402:	3304      	adds	r3, #4
 8003404:	460a      	mov	r2, r1
 8003406:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8003408:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800340c:	3310      	adds	r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	da00      	bge.n	8003414 <Vital_Msg_extr+0x708>
 8003412:	3307      	adds	r3, #7
 8003414:	10db      	asrs	r3, r3, #3
 8003416:	b29a      	uxth	r2, r3
 8003418:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800341c:	4413      	add	r3, r2
 800341e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003422:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003426:	3310      	adds	r3, #16
 8003428:	b29b      	uxth	r3, r3
 800342a:	b21b      	sxth	r3, r3
 800342c:	425a      	negs	r2, r3
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	f002 0207 	and.w	r2, r2, #7
 8003436:	bf58      	it	pl
 8003438:	4253      	negpl	r3, r2
 800343a:	b21b      	sxth	r3, r3
 800343c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 8003440:	78bb      	ldrb	r3, [r7, #2]
 8003442:	4aa0      	ldr	r2, [pc, #640]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	4413      	add	r3, r2
 8003448:	3304      	adds	r3, #4
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8145 	beq.w	80036e0 <Vital_Msg_extr+0x9d4>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003456:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	441a      	add	r2, r3
 800345e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003462:	2108      	movs	r1, #8
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd f8d5 	bl	8000614 <ExtractBits>
 800346a:	4603      	mov	r3, r0
 800346c:	78ba      	ldrb	r2, [r7, #2]
 800346e:	b2d8      	uxtb	r0, r3
 8003470:	4997      	ldr	r1, [pc, #604]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003472:	4613      	mov	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	440b      	add	r3, r1
 800347c:	3305      	adds	r3, #5
 800347e:	4602      	mov	r2, r0
 8003480:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8003482:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003486:	3308      	adds	r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	da00      	bge.n	800348e <Vital_Msg_extr+0x782>
 800348c:	3307      	adds	r3, #7
 800348e:	10db      	asrs	r3, r3, #3
 8003490:	b29a      	uxth	r2, r3
 8003492:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003496:	4413      	add	r3, r2
 8003498:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800349c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034a0:	3308      	adds	r3, #8
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	b21b      	sxth	r3, r3
 80034a6:	425a      	negs	r2, r3
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	f002 0207 	and.w	r2, r2, #7
 80034b0:	bf58      	it	pl
 80034b2:	4253      	negpl	r3, r2
 80034b4:	b21b      	sxth	r3, r3
 80034b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80034ba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	441a      	add	r2, r3
 80034c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034c6:	2108      	movs	r1, #8
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd f8a3 	bl	8000614 <ExtractBits>
 80034ce:	4603      	mov	r3, r0
 80034d0:	78ba      	ldrb	r2, [r7, #2]
 80034d2:	b2d8      	uxtb	r0, r3
 80034d4:	497e      	ldr	r1, [pc, #504]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	440b      	add	r3, r1
 80034e0:	3304      	adds	r3, #4
 80034e2:	4602      	mov	r2, r0
 80034e4:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 80034e6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80034ea:	3308      	adds	r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	da00      	bge.n	80034f2 <Vital_Msg_extr+0x7e6>
 80034f0:	3307      	adds	r3, #7
 80034f2:	10db      	asrs	r3, r3, #3
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034fa:	4413      	add	r3, r2
 80034fc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003500:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003504:	3308      	adds	r3, #8
 8003506:	b29b      	uxth	r3, r3
 8003508:	b21b      	sxth	r3, r3
 800350a:	425a      	negs	r2, r3
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	f002 0207 	and.w	r2, r2, #7
 8003514:	bf58      	it	pl
 8003516:	4253      	negpl	r3, r2
 8003518:	b21b      	sxth	r3, r3
 800351a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800351e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	441a      	add	r2, r3
 8003526:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800352a:	2108      	movs	r1, #8
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd f871 	bl	8000614 <ExtractBits>
 8003532:	4603      	mov	r3, r0
 8003534:	78ba      	ldrb	r2, [r7, #2]
 8003536:	b2d8      	uxtb	r0, r3
 8003538:	4965      	ldr	r1, [pc, #404]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	440b      	add	r3, r1
 8003544:	3303      	adds	r3, #3
 8003546:	4602      	mov	r2, r0
 8003548:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 800354a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800354e:	3308      	adds	r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	da00      	bge.n	8003556 <Vital_Msg_extr+0x84a>
 8003554:	3307      	adds	r3, #7
 8003556:	10db      	asrs	r3, r3, #3
 8003558:	b29a      	uxth	r2, r3
 800355a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800355e:	4413      	add	r3, r2
 8003560:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003564:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003568:	3308      	adds	r3, #8
 800356a:	b29b      	uxth	r3, r3
 800356c:	b21b      	sxth	r3, r3
 800356e:	425a      	negs	r2, r3
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	f002 0207 	and.w	r2, r2, #7
 8003578:	bf58      	it	pl
 800357a:	4253      	negpl	r3, r2
 800357c:	b21b      	sxth	r3, r3
 800357e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003582:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	441a      	add	r2, r3
 800358a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800358e:	2108      	movs	r1, #8
 8003590:	4618      	mov	r0, r3
 8003592:	f7fd f83f 	bl	8000614 <ExtractBits>
 8003596:	4603      	mov	r3, r0
 8003598:	78ba      	ldrb	r2, [r7, #2]
 800359a:	b2d8      	uxtb	r0, r3
 800359c:	494c      	ldr	r1, [pc, #304]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	440b      	add	r3, r1
 80035a8:	4602      	mov	r2, r0
 80035aa:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 80035ac:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80035b0:	3308      	adds	r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	da00      	bge.n	80035b8 <Vital_Msg_extr+0x8ac>
 80035b6:	3307      	adds	r3, #7
 80035b8:	10db      	asrs	r3, r3, #3
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035c0:	4413      	add	r3, r2
 80035c2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80035c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035ca:	3308      	adds	r3, #8
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	b21b      	sxth	r3, r3
 80035d0:	425a      	negs	r2, r3
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	f002 0207 	and.w	r2, r2, #7
 80035da:	bf58      	it	pl
 80035dc:	4253      	negpl	r3, r2
 80035de:	b21b      	sxth	r3, r3
 80035e0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80035e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	441a      	add	r2, r3
 80035ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035f0:	2108      	movs	r1, #8
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd f80e 	bl	8000614 <ExtractBits>
 80035f8:	4603      	mov	r3, r0
 80035fa:	78ba      	ldrb	r2, [r7, #2]
 80035fc:	b2d8      	uxtb	r0, r3
 80035fe:	4934      	ldr	r1, [pc, #208]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	440b      	add	r3, r1
 800360a:	3301      	adds	r3, #1
 800360c:	4602      	mov	r2, r0
 800360e:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8003610:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003614:	3308      	adds	r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	da00      	bge.n	800361c <Vital_Msg_extr+0x910>
 800361a:	3307      	adds	r3, #7
 800361c:	10db      	asrs	r3, r3, #3
 800361e:	b29a      	uxth	r2, r3
 8003620:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003624:	4413      	add	r3, r2
 8003626:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800362a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800362e:	3308      	adds	r3, #8
 8003630:	b29b      	uxth	r3, r3
 8003632:	b21b      	sxth	r3, r3
 8003634:	425a      	negs	r2, r3
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	f002 0207 	and.w	r2, r2, #7
 800363e:	bf58      	it	pl
 8003640:	4253      	negpl	r3, r2
 8003642:	b21b      	sxth	r3, r3
 8003644:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003648:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	441a      	add	r2, r3
 8003650:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003654:	2108      	movs	r1, #8
 8003656:	4618      	mov	r0, r3
 8003658:	f7fc ffdc 	bl	8000614 <ExtractBits>
 800365c:	4603      	mov	r3, r0
 800365e:	78ba      	ldrb	r2, [r7, #2]
 8003660:	b2d8      	uxtb	r0, r3
 8003662:	491b      	ldr	r1, [pc, #108]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	440b      	add	r3, r1
 800366e:	3302      	adds	r3, #2
 8003670:	4602      	mov	r2, r0
 8003672:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8003674:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003678:	3308      	adds	r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	da00      	bge.n	8003680 <Vital_Msg_extr+0x974>
 800367e:	3307      	adds	r3, #7
 8003680:	10db      	asrs	r3, r3, #3
 8003682:	b29a      	uxth	r2, r3
 8003684:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003688:	4413      	add	r3, r2
 800368a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800368e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003692:	3308      	adds	r3, #8
 8003694:	b29b      	uxth	r3, r3
 8003696:	b21b      	sxth	r3, r3
 8003698:	425a      	negs	r2, r3
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	f002 0207 	and.w	r2, r2, #7
 80036a2:	bf58      	it	pl
 80036a4:	4253      	negpl	r3, r2
 80036a6:	b21b      	sxth	r3, r3
 80036a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 80036ac:	78bb      	ldrb	r3, [r7, #2]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f005 fb2c 	bl	8008d0c <IS_MLK_EIPC_TIME_MATCHING>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00e      	beq.n	80036d8 <Vital_Msg_extr+0x9cc>
 80036ba:	78bb      	ldrb	r3, [r7, #2]
 80036bc:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <Vital_Msg_extr+0x9c8>)
 80036be:	2100      	movs	r1, #0
 80036c0:	54d1      	strb	r1, [r2, r3]
 80036c2:	e00d      	b.n	80036e0 <Vital_Msg_extr+0x9d4>
 80036c4:	200011c4 	.word	0x200011c4
 80036c8:	0802411c 	.word	0x0802411c
 80036cc:	20000305 	.word	0x20000305
 80036d0:	20001188 	.word	0x20001188
 80036d4:	200010d8 	.word	0x200010d8
 80036d8:	78bb      	ldrb	r3, [r7, #2]
 80036da:	4a86      	ldr	r2, [pc, #536]	; (80038f4 <Vital_Msg_extr+0xbe8>)
 80036dc:	2101      	movs	r1, #1
 80036de:	54d1      	strb	r1, [r2, r3]


	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 80036e0:	78bb      	ldrb	r3, [r7, #2]
 80036e2:	4a85      	ldr	r2, [pc, #532]	; (80038f8 <Vital_Msg_extr+0xbec>)
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4413      	add	r3, r2
 80036e8:	3304      	adds	r3, #4
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <Vital_Msg_extr+0x9ee>
	{
		LinkEstablishFlag = SET;
 80036f4:	2301      	movs	r3, #1
 80036f6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80036fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	441a      	add	r2, r3
 8003702:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003706:	2108      	movs	r1, #8
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc ff83 	bl	8000614 <ExtractBits>
 800370e:	4603      	mov	r3, r0
 8003710:	78ba      	ldrb	r2, [r7, #2]
 8003712:	b2d8      	uxtb	r0, r3
 8003714:	4979      	ldr	r1, [pc, #484]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	440b      	add	r3, r1
 8003720:	3303      	adds	r3, #3
 8003722:	4602      	mov	r2, r0
 8003724:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003726:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800372a:	3308      	adds	r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	da00      	bge.n	8003732 <Vital_Msg_extr+0xa26>
 8003730:	3307      	adds	r3, #7
 8003732:	10db      	asrs	r3, r3, #3
 8003734:	b29a      	uxth	r2, r3
 8003736:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800373a:	4413      	add	r3, r2
 800373c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003740:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003744:	3308      	adds	r3, #8
 8003746:	b29b      	uxth	r3, r3
 8003748:	b21b      	sxth	r3, r3
 800374a:	425a      	negs	r2, r3
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	f002 0207 	and.w	r2, r2, #7
 8003754:	bf58      	it	pl
 8003756:	4253      	negpl	r3, r2
 8003758:	b21b      	sxth	r3, r3
 800375a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 800375e:	78ba      	ldrb	r2, [r7, #2]
 8003760:	4966      	ldr	r1, [pc, #408]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	440b      	add	r3, r1
 800376c:	3303      	adds	r3, #3
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	4619      	mov	r1, r3
 8003772:	4863      	ldr	r0, [pc, #396]	; (8003900 <Vital_Msg_extr+0xbf4>)
 8003774:	f01f f8fc 	bl	8022970 <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003778:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	441a      	add	r2, r3
 8003780:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003784:	2108      	movs	r1, #8
 8003786:	4618      	mov	r0, r3
 8003788:	f7fc ff44 	bl	8000614 <ExtractBits>
 800378c:	4603      	mov	r3, r0
 800378e:	78ba      	ldrb	r2, [r7, #2]
 8003790:	b2d8      	uxtb	r0, r3
 8003792:	495a      	ldr	r1, [pc, #360]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	440b      	add	r3, r1
 800379e:	3304      	adds	r3, #4
 80037a0:	4602      	mov	r2, r0
 80037a2:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 80037a4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80037a8:	3308      	adds	r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	da00      	bge.n	80037b0 <Vital_Msg_extr+0xaa4>
 80037ae:	3307      	adds	r3, #7
 80037b0:	10db      	asrs	r3, r3, #3
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80037b8:	4413      	add	r3, r2
 80037ba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80037be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037c2:	3308      	adds	r3, #8
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	b21b      	sxth	r3, r3
 80037c8:	425a      	negs	r2, r3
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	f002 0207 	and.w	r2, r2, #7
 80037d2:	bf58      	it	pl
 80037d4:	4253      	negpl	r3, r2
 80037d6:	b21b      	sxth	r3, r3
 80037d8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 80037dc:	78ba      	ldrb	r2, [r7, #2]
 80037de:	4947      	ldr	r1, [pc, #284]	; (80038fc <Vital_Msg_extr+0xbf0>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	440b      	add	r3, r1
 80037ea:	3303      	adds	r3, #3
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (noofIP != 0)
 80037f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <Vital_Msg_extr+0xb10>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 80037fe:	78ba      	ldrb	r2, [r7, #2]
 8003800:	493e      	ldr	r1, [pc, #248]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	440b      	add	r3, r1
 800380c:	3303      	adds	r3, #3
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	08db      	lsrs	r3, r3, #3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800381a:	e00b      	b.n	8003834 <Vital_Msg_extr+0xb28>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 800381c:	78ba      	ldrb	r2, [r7, #2]
 800381e:	4937      	ldr	r1, [pc, #220]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	440b      	add	r3, r1
 800382a:	3303      	adds	r3, #3
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	08db      	lsrs	r3, r3, #3
 8003830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003834:	2300      	movs	r3, #0
 8003836:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800383a:	e04c      	b.n	80038d6 <Vital_Msg_extr+0xbca>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800383c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	441a      	add	r2, r3
 8003844:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003848:	2108      	movs	r1, #8
 800384a:	4618      	mov	r0, r3
 800384c:	f7fc fee2 	bl	8000614 <ExtractBits>
 8003850:	4603      	mov	r3, r0
 8003852:	78ba      	ldrb	r2, [r7, #2]
 8003854:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003858:	b2dc      	uxtb	r4, r3
 800385a:	4828      	ldr	r0, [pc, #160]	; (80038fc <Vital_Msg_extr+0xbf0>)
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	4403      	add	r3, r0
 8003866:	440b      	add	r3, r1
 8003868:	3305      	adds	r3, #5
 800386a:	4622      	mov	r2, r4
 800386c:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 800386e:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
 8003872:	78ba      	ldrb	r2, [r7, #2]
 8003874:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003878:	4c20      	ldr	r4, [pc, #128]	; (80038fc <Vital_Msg_extr+0xbf0>)
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	4423      	add	r3, r4
 8003884:	440b      	add	r3, r1
 8003886:	3305      	adds	r3, #5
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	4601      	mov	r1, r0
 800388e:	481d      	ldr	r0, [pc, #116]	; (8003904 <Vital_Msg_extr+0xbf8>)
 8003890:	f01f f86e 	bl	8022970 <iprintf>
		BITSTUFFINC(8);
 8003894:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003898:	3308      	adds	r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	da00      	bge.n	80038a0 <Vital_Msg_extr+0xb94>
 800389e:	3307      	adds	r3, #7
 80038a0:	10db      	asrs	r3, r3, #3
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80038a8:	4413      	add	r3, r2
 80038aa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80038ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038b2:	3308      	adds	r3, #8
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	b21b      	sxth	r3, r3
 80038b8:	425a      	negs	r2, r3
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	f002 0207 	and.w	r2, r2, #7
 80038c2:	bf58      	it	pl
 80038c4:	4253      	negpl	r3, r2
 80038c6:	b21b      	sxth	r3, r3
 80038c8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80038cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038d0:	3301      	adds	r3, #1
 80038d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3ab      	bcc.n	800383c <Vital_Msg_extr+0xb30>
	}
	printf("\n");
 80038e4:	200a      	movs	r0, #10
 80038e6:	f01f f85b 	bl	80229a0 <putchar>

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038f0:	e044      	b.n	800397c <Vital_Msg_extr+0xc70>
 80038f2:	bf00      	nop
 80038f4:	200010d8 	.word	0x200010d8
 80038f8:	200011c4 	.word	0x200011c4
 80038fc:	200013a4 	.word	0x200013a4
 8003900:	080247c8 	.word	0x080247c8
 8003904:	080247d0 	.word	0x080247d0
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003908:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	441a      	add	r2, r3
 8003910:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003914:	2108      	movs	r1, #8
 8003916:	4618      	mov	r0, r3
 8003918:	f7fc fe7c 	bl	8000614 <ExtractBits>
 800391c:	4603      	mov	r3, r0
 800391e:	78ba      	ldrb	r2, [r7, #2]
 8003920:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003924:	b2dc      	uxtb	r4, r3
 8003926:	48c4      	ldr	r0, [pc, #784]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	4403      	add	r3, r0
 8003932:	440b      	add	r3, r1
 8003934:	3315      	adds	r3, #21
 8003936:	4622      	mov	r2, r4
 8003938:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 800393a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800393e:	3308      	adds	r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	da00      	bge.n	8003946 <Vital_Msg_extr+0xc3a>
 8003944:	3307      	adds	r3, #7
 8003946:	10db      	asrs	r3, r3, #3
 8003948:	b29a      	uxth	r2, r3
 800394a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800394e:	4413      	add	r3, r2
 8003950:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003954:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003958:	3308      	adds	r3, #8
 800395a:	b29b      	uxth	r3, r3
 800395c:	b21b      	sxth	r3, r3
 800395e:	425a      	negs	r2, r3
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	f002 0207 	and.w	r2, r2, #7
 8003968:	bf58      	it	pl
 800396a:	4253      	negpl	r3, r2
 800396c:	b21b      	sxth	r3, r3
 800396e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 8003972:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003976:	3301      	adds	r3, #1
 8003978:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800397c:	78ba      	ldrb	r2, [r7, #2]
 800397e:	49ae      	ldr	r1, [pc, #696]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	440b      	add	r3, r1
 800398a:	3304      	adds	r3, #4
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003994:	429a      	cmp	r2, r3
 8003996:	d3b7      	bcc.n	8003908 <Vital_Msg_extr+0xbfc>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 8003998:	787a      	ldrb	r2, [r7, #1]
 800399a:	78bb      	ldrb	r3, [r7, #2]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 fa6e 	bl	8006e80 <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 80039a4:	78bb      	ldrb	r3, [r7, #2]
 80039a6:	4aa5      	ldr	r2, [pc, #660]	; (8003c3c <Vital_Msg_extr+0xf30>)
 80039a8:	2101      	movs	r1, #1
 80039aa:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 80039ac:	78bb      	ldrb	r3, [r7, #2]
 80039ae:	4aa3      	ldr	r2, [pc, #652]	; (8003c3c <Vital_Msg_extr+0xf30>)
 80039b0:	3302      	adds	r3, #2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039b8:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 80039ba:	78ba      	ldrb	r2, [r7, #2]
 80039bc:	49a0      	ldr	r1, [pc, #640]	; (8003c40 <Vital_Msg_extr+0xf34>)
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	440b      	add	r3, r1
 80039c8:	3304      	adds	r3, #4
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d116      	bne.n	80039fe <Vital_Msg_extr+0xcf2>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80039d0:	2246      	movs	r2, #70	; 0x46
 80039d2:	2100      	movs	r1, #0
 80039d4:	489b      	ldr	r0, [pc, #620]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039d6:	f01e fee3 	bl	80227a0 <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 80039da:	78bb      	ldrb	r3, [r7, #2]
 80039dc:	b29a      	uxth	r2, r3
 80039de:	4b99      	ldr	r3, [pc, #612]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039e0:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	4b97      	ldr	r3, [pc, #604]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039e8:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	461a      	mov	r2, r3
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4895      	ldr	r0, [pc, #596]	; (8003c48 <Vital_Msg_extr+0xf3c>)
 80039f2:	f01e fead 	bl	8022750 <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
 80039f6:	f240 2003 	movw	r0, #515	; 0x203
 80039fa:	f00b ffe5 	bl	800f9c8 <TransmitCanPkt>




	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 80039fe:	78ba      	ldrb	r2, [r7, #2]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4a90      	ldr	r2, [pc, #576]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	2210      	movs	r2, #16
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f01e fec4 	bl	80227a0 <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 8003a18:	78ba      	ldrb	r2, [r7, #2]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4a8a      	ldr	r2, [pc, #552]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a24:	4413      	add	r3, r2
 8003a26:	1c58      	adds	r0, r3, #1
 8003a28:	78ba      	ldrb	r2, [r7, #2]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	4a81      	ldr	r2, [pc, #516]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003a34:	4413      	add	r3, r2
 8003a36:	3305      	adds	r3, #5
 8003a38:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f01e fe87 	bl	8022750 <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 8003a42:	78ba      	ldrb	r2, [r7, #2]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4a7f      	ldr	r2, [pc, #508]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a4e:	4413      	add	r3, r2
 8003a50:	3301      	adds	r3, #1
 8003a52:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a56:	b212      	sxth	r2, r2
 8003a58:	78bc      	ldrb	r4, [r7, #2]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f00f faf7 	bl	8013050 <GetCRC16>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4619      	mov	r1, r3
 8003a66:	4a79      	ldr	r2, [pc, #484]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a68:	4623      	mov	r3, r4
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4423      	add	r3, r4
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	3312      	adds	r3, #18
 8003a74:	460a      	mov	r2, r1
 8003a76:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 8003a78:	78ba      	ldrb	r2, [r7, #2]
 8003a7a:	4974      	ldr	r1, [pc, #464]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3311      	adds	r3, #17
 8003a88:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a8c:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 8003a8e:	78ba      	ldrb	r2, [r7, #2]
 8003a90:	496e      	ldr	r1, [pc, #440]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	78ba      	ldrb	r2, [r7, #2]
 8003a9e:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 8003aa0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d172      	bne.n	8003b8e <Vital_Msg_extr+0xe82>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003aa8:	78ba      	ldrb	r2, [r7, #2]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4a67      	ldr	r2, [pc, #412]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	2210      	movs	r2, #16
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f01e fe6f 	bl	80227a0 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8003ac2:	78ba      	ldrb	r2, [r7, #2]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4a60      	ldr	r2, [pc, #384]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003ace:	1898      	adds	r0, r3, r2
 8003ad0:	78ba      	ldrb	r2, [r7, #2]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a5c      	ldr	r2, [pc, #368]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003adc:	4413      	add	r3, r2
 8003ade:	2214      	movs	r2, #20
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f01e fe35 	bl	8022750 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8003ae6:	78bb      	ldrb	r3, [r7, #2]
 8003ae8:	495a      	ldr	r1, [pc, #360]	; (8003c54 <Vital_Msg_extr+0xf48>)
 8003aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8003af0:	78bb      	ldrb	r3, [r7, #2]
 8003af2:	4a59      	ldr	r2, [pc, #356]	; (8003c58 <Vital_Msg_extr+0xf4c>)
 8003af4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003af8:	78ba      	ldrb	r2, [r7, #2]
 8003afa:	4855      	ldr	r0, [pc, #340]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4403      	add	r3, r0
 8003b06:	3312      	adds	r3, #18
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	4299      	cmp	r1, r3
 8003b0c:	d03f      	beq.n	8003b8e <Vital_Msg_extr+0xe82>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003b0e:	78ba      	ldrb	r2, [r7, #2]
 8003b10:	78b9      	ldrb	r1, [r7, #2]
 8003b12:	484f      	ldr	r0, [pc, #316]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4403      	add	r3, r0
 8003b1e:	3312      	adds	r3, #18
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	4b4d      	ldr	r3, [pc, #308]	; (8003c58 <Vital_Msg_extr+0xf4c>)
 8003b24:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8003b28:	2214      	movs	r2, #20
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	484b      	ldr	r0, [pc, #300]	; (8003c5c <Vital_Msg_extr+0xf50>)
 8003b2e:	f01e fe37 	bl	80227a0 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8003b32:	78ba      	ldrb	r2, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4a44      	ldr	r2, [pc, #272]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b3e:	4413      	add	r3, r2
 8003b40:	2214      	movs	r2, #20
 8003b42:	4619      	mov	r1, r3
 8003b44:	4845      	ldr	r0, [pc, #276]	; (8003c5c <Vital_Msg_extr+0xf50>)
 8003b46:	f01e fe03 	bl	8022750 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8003b4a:	f240 2007 	movw	r0, #519	; 0x207
 8003b4e:	f00b ff3b 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 8003b52:	78bb      	ldrb	r3, [r7, #2]
 8003b54:	4a42      	ldr	r2, [pc, #264]	; (8003c60 <Vital_Msg_extr+0xf54>)
 8003b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d117      	bne.n	8003b8e <Vital_Msg_extr+0xe82>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003b5e:	78bb      	ldrb	r3, [r7, #2]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	4a40      	ldr	r2, [pc, #256]	; (8003c64 <Vital_Msg_extr+0xf58>)
 8003b64:	4413      	add	r3, r2
 8003b66:	1c98      	adds	r0, r3, #2
 8003b68:	78ba      	ldrb	r2, [r7, #2]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4a37      	ldr	r2, [pc, #220]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b74:	4413      	add	r3, r2
 8003b76:	3301      	adds	r3, #1
 8003b78:	2210      	movs	r2, #16
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f01e fde8 	bl	8022750 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8003b80:	f240 1019 	movw	r0, #281	; 0x119
 8003b84:	f00b ff20 	bl	800f9c8 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8003b88:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <Vital_Msg_extr+0xf5c>)
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8c:	6013      	str	r3, [r2, #0]

		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003b8e:	78b9      	ldrb	r1, [r7, #2]
 8003b90:	78ba      	ldrb	r2, [r7, #2]
 8003b92:	482f      	ldr	r0, [pc, #188]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b94:	460b      	mov	r3, r1
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4403      	add	r3, r0
 8003b9e:	3312      	adds	r3, #18
 8003ba0:	8818      	ldrh	r0, [r3, #0]
 8003ba2:	4927      	ldr	r1, [pc, #156]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	4413      	add	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	440b      	add	r3, r1
 8003bae:	3306      	adds	r3, #6
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8003bb4:	78ba      	ldrb	r2, [r7, #2]
 8003bb6:	4922      	ldr	r1, [pc, #136]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3314      	adds	r3, #20
 8003bc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bc6:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 8003bc8:	78ba      	ldrb	r2, [r7, #2]
 8003bca:	491d      	ldr	r1, [pc, #116]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3305      	adds	r3, #5
 8003bd8:	2202      	movs	r2, #2
 8003bda:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8003bdc:	78ba      	ldrb	r2, [r7, #2]
 8003bde:	4918      	ldr	r1, [pc, #96]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003be0:	4613      	mov	r3, r2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	78ba      	ldrb	r2, [r7, #2]
 8003bec:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8003bee:	78ba      	ldrb	r2, [r7, #2]
 8003bf0:	4913      	ldr	r1, [pc, #76]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	2201      	movs	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8003c02:	78ba      	ldrb	r2, [r7, #2]
 8003c04:	490e      	ldr	r1, [pc, #56]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	3302      	adds	r3, #2
 8003c12:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003c16:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8003c18:	2218      	movs	r2, #24
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4813      	ldr	r0, [pc, #76]	; (8003c6c <Vital_Msg_extr+0xf60>)
 8003c1e:	f01e fdbf 	bl	80227a0 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8003c22:	78ba      	ldrb	r2, [r7, #2]
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003c2e:	4413      	add	r3, r2
 8003c30:	2218      	movs	r2, #24
 8003c32:	4619      	mov	r1, r3
 8003c34:	e01c      	b.n	8003c70 <Vital_Msg_extr+0xf64>
 8003c36:	bf00      	nop
 8003c38:	200013a4 	.word	0x200013a4
 8003c3c:	20001c94 	.word	0x20001c94
 8003c40:	20001674 	.word	0x20001674
 8003c44:	20001884 	.word	0x20001884
 8003c48:	2000188a 	.word	0x2000188a
 8003c4c:	20001db8 	.word	0x20001db8
 8003c50:	20001e80 	.word	0x20001e80
 8003c54:	20000ed8 	.word	0x20000ed8
 8003c58:	20000f00 	.word	0x20000f00
 8003c5c:	20002010 	.word	0x20002010
 8003c60:	20000ec4 	.word	0x20000ec4
 8003c64:	200010e4 	.word	0x200010e4
 8003c68:	20000e70 	.word	0x20000e70
 8003c6c:	20001854 	.word	0x20001854
 8003c70:	482b      	ldr	r0, [pc, #172]	; (8003d20 <Vital_Msg_extr+0x1014>)
 8003c72:	f01e fd6d 	bl	8022750 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8003c76:	f240 2001 	movw	r0, #513	; 0x201
 8003c7a:	f00b fea5 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8003c7e:	78ba      	ldrb	r2, [r7, #2]
 8003c80:	4928      	ldr	r1, [pc, #160]	; (8003d24 <Vital_Msg_extr+0x1018>)
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8003c92:	78bb      	ldrb	r3, [r7, #2]
 8003c94:	4924      	ldr	r1, [pc, #144]	; (8003d28 <Vital_Msg_extr+0x101c>)
 8003c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8003c9c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d11d      	bne.n	8003ce0 <Vital_Msg_extr+0xfd4>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8003ca4:	78bb      	ldrb	r3, [r7, #2]
 8003ca6:	4921      	ldr	r1, [pc, #132]	; (8003d2c <Vital_Msg_extr+0x1020>)
 8003ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8003cae:	78ba      	ldrb	r2, [r7, #2]
 8003cb0:	491f      	ldr	r1, [pc, #124]	; (8003d30 <Vital_Msg_extr+0x1024>)
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cc0:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8003cc2:	78ba      	ldrb	r2, [r7, #2]
 8003cc4:	491a      	ldr	r1, [pc, #104]	; (8003d30 <Vital_Msg_extr+0x1024>)
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8003cd6:	78bb      	ldrb	r3, [r7, #2]
 8003cd8:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <Vital_Msg_extr+0x1028>)
 8003cda:	2101      	movs	r1, #1
 8003cdc:	54d1      	strb	r1, [r2, r3]
 8003cde:	e017      	b.n	8003d10 <Vital_Msg_extr+0x1004>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8003ce0:	78bb      	ldrb	r3, [r7, #2]
 8003ce2:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <Vital_Msg_extr+0x1028>)
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8003ce8:	78ba      	ldrb	r2, [r7, #2]
 8003cea:	4911      	ldr	r1, [pc, #68]	; (8003d30 <Vital_Msg_extr+0x1024>)
 8003cec:	4613      	mov	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cfa:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8003cfc:	78ba      	ldrb	r2, [r7, #2]
 8003cfe:	490c      	ldr	r1, [pc, #48]	; (8003d30 <Vital_Msg_extr+0x1024>)
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8003d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d14:	4808      	ldr	r0, [pc, #32]	; (8003d38 <Vital_Msg_extr+0x102c>)
 8003d16:	f014 fb16 	bl	8018346 <HAL_GPIO_TogglePin>

}
 8003d1a:	3764      	adds	r7, #100	; 0x64
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd90      	pop	{r4, r7, pc}
 8003d20:	20001854 	.word	0x20001854
 8003d24:	20001674 	.word	0x20001674
 8003d28:	20000e44 	.word	0x20000e44
 8003d2c:	20000f14 	.word	0x20000f14
 8003d30:	20001cc8 	.word	0x20001cc8
 8003d34:	20000f64 	.word	0x20000f64
 8003d38:	40021c00 	.word	0x40021c00

08003d3c <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b0a5      	sub	sp, #148	; 0x94
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	460a      	mov	r2, r1
 8003d46:	71fb      	strb	r3, [r7, #7]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d54:	2238      	movs	r2, #56	; 0x38
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f01e fd21 	bl	80227a0 <memset>
	uint8_t Temp_Buff[60] = {0,};
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	f107 0310 	add.w	r3, r7, #16
 8003d66:	2238      	movs	r2, #56	; 0x38
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f01e fd18 	bl	80227a0 <memset>
	uint8_t uc_index = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 8003d76:	2300      	movs	r3, #0
 8003d78:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 8003d82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d86:	223c      	movs	r2, #60	; 0x3c
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f01e fd08 	bl	80227a0 <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8003d90:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003d94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d98:	441a      	add	r2, r3
 8003d9a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003d9e:	23f4      	movs	r3, #244	; 0xf4
 8003da0:	2108      	movs	r1, #8
 8003da2:	f7fc fcc3 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003da6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003daa:	3308      	adds	r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	da00      	bge.n	8003db2 <Send_Vital_Data_Message+0x76>
 8003db0:	3307      	adds	r3, #7
 8003db2:	10db      	asrs	r3, r3, #3
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003dba:	4413      	add	r3, r2
 8003dbc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003dc0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	b21b      	sxth	r3, r3
 8003dca:	425a      	negs	r2, r3
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	f002 0207 	and.w	r2, r2, #7
 8003dd4:	bf58      	it	pl
 8003dd6:	4253      	negpl	r3, r2
 8003dd8:	b21b      	sxth	r3, r3
 8003dda:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8003dde:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003de2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003de6:	441a      	add	r2, r3
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	49c6      	ldr	r1, [pc, #792]	; (8004104 <Send_Vital_Data_Message+0x3c8>)
 8003dec:	3366      	adds	r3, #102	; 0x66
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003df8:	2110      	movs	r1, #16
 8003dfa:	f7fc fc97 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003dfe:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003e02:	3310      	adds	r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da00      	bge.n	8003e0a <Send_Vital_Data_Message+0xce>
 8003e08:	3307      	adds	r3, #7
 8003e0a:	10db      	asrs	r3, r3, #3
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e12:	4413      	add	r3, r2
 8003e14:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e1c:	3310      	adds	r3, #16
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	b21b      	sxth	r3, r3
 8003e22:	425a      	negs	r2, r3
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	f002 0207 	and.w	r2, r2, #7
 8003e2c:	bf58      	it	pl
 8003e2e:	4253      	negpl	r3, r2
 8003e30:	b21b      	sxth	r3, r3
 8003e32:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8003e36:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e3a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e3e:	441a      	add	r2, r3
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	49b0      	ldr	r1, [pc, #704]	; (8004104 <Send_Vital_Data_Message+0x3c8>)
 8003e44:	3370      	adds	r3, #112	; 0x70
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003e50:	2110      	movs	r1, #16
 8003e52:	f7fc fc6b 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003e56:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003e5a:	3310      	adds	r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	da00      	bge.n	8003e62 <Send_Vital_Data_Message+0x126>
 8003e60:	3307      	adds	r3, #7
 8003e62:	10db      	asrs	r3, r3, #3
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e74:	3310      	adds	r3, #16
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	425a      	negs	r2, r3
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	f002 0207 	and.w	r2, r2, #7
 8003e84:	bf58      	it	pl
 8003e86:	4253      	negpl	r3, r2
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003e8e:	4b9e      	ldr	r3, [pc, #632]	; (8004108 <Send_Vital_Data_Message+0x3cc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d035      	beq.n	8003f08 <Send_Vital_Data_Message+0x1cc>
 8003e9c:	4b9a      	ldr	r3, [pc, #616]	; (8004108 <Send_Vital_Data_Message+0x3cc>)
 8003e9e:	791b      	ldrb	r3, [r3, #4]
 8003ea0:	79fa      	ldrb	r2, [r7, #7]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d130      	bne.n	8003f08 <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8003eac:	4897      	ldr	r0, [pc, #604]	; (800410c <Send_Vital_Data_Message+0x3d0>)
 8003eae:	f016 fa13 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	4b96      	ldr	r3, [pc, #600]	; (8004110 <Send_Vital_Data_Message+0x3d4>)
 8003eb6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eba:	099b      	lsrs	r3, r3, #6
 8003ebc:	21c8      	movs	r1, #200	; 0xc8
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 8003ec8:	4892      	ldr	r0, [pc, #584]	; (8004114 <Send_Vital_Data_Message+0x3d8>)
 8003eca:	f01e fded 	bl	8022aa8 <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	4a91      	ldr	r2, [pc, #580]	; (8004118 <Send_Vital_Data_Message+0x3dc>)
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	4619      	mov	r1, r3
 8003edc:	488f      	ldr	r0, [pc, #572]	; (800411c <Send_Vital_Data_Message+0x3e0>)
 8003ede:	f01e fd47 	bl	8022970 <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 8003ee2:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	488d      	ldr	r0, [pc, #564]	; (8004120 <Send_Vital_Data_Message+0x3e4>)
 8003eea:	f01e fd41 	bl	8022970 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8003eee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003ef2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ef6:	441a      	add	r2, r3
 8003ef8:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003efc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003f00:	2108      	movs	r1, #8
 8003f02:	f7fc fc13 	bl	800072c <InsertBits>
	{
 8003f06:	e00f      	b.n	8003f28 <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8003f08:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f10:	441a      	add	r2, r3
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	4980      	ldr	r1, [pc, #512]	; (8004118 <Send_Vital_Data_Message+0x3dc>)
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	440b      	add	r3, r1
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003f22:	2108      	movs	r1, #8
 8003f24:	f7fc fc02 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8003f28:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	da00      	bge.n	8003f34 <Send_Vital_Data_Message+0x1f8>
 8003f32:	3307      	adds	r3, #7
 8003f34:	10db      	asrs	r3, r3, #3
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003f42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003f46:	3308      	adds	r3, #8
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	b21b      	sxth	r3, r3
 8003f4c:	425a      	negs	r2, r3
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	f002 0207 	and.w	r2, r2, #7
 8003f56:	bf58      	it	pl
 8003f58:	4253      	negpl	r3, r2
 8003f5a:	b21b      	sxth	r3, r3
 8003f5c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003f60:	4b69      	ldr	r3, [pc, #420]	; (8004108 <Send_Vital_Data_Message+0x3cc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	08db      	lsrs	r3, r3, #3
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d035      	beq.n	8003fda <Send_Vital_Data_Message+0x29e>
 8003f6e:	4b66      	ldr	r3, [pc, #408]	; (8004108 <Send_Vital_Data_Message+0x3cc>)
 8003f70:	791b      	ldrb	r3, [r3, #4]
 8003f72:	79fa      	ldrb	r2, [r7, #7]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d130      	bne.n	8003fda <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 8003f7e:	4863      	ldr	r0, [pc, #396]	; (800410c <Send_Vital_Data_Message+0x3d0>)
 8003f80:	f016 f9aa 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 8003f84:	4602      	mov	r2, r0
 8003f86:	4b62      	ldr	r3, [pc, #392]	; (8004110 <Send_Vital_Data_Message+0x3d4>)
 8003f88:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8c:	099b      	lsrs	r3, r3, #6
 8003f8e:	21c8      	movs	r1, #200	; 0xc8
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8003f9a:	4862      	ldr	r0, [pc, #392]	; (8004124 <Send_Vital_Data_Message+0x3e8>)
 8003f9c:	f01e fd84 	bl	8022aa8 <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	4a5d      	ldr	r2, [pc, #372]	; (8004118 <Send_Vital_Data_Message+0x3dc>)
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3302      	adds	r3, #2
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	4619      	mov	r1, r3
 8003fae:	485e      	ldr	r0, [pc, #376]	; (8004128 <Send_Vital_Data_Message+0x3ec>)
 8003fb0:	f01e fcde 	bl	8022970 <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 8003fb4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003fb8:	4619      	mov	r1, r3
 8003fba:	485c      	ldr	r0, [pc, #368]	; (800412c <Send_Vital_Data_Message+0x3f0>)
 8003fbc:	f01e fcd8 	bl	8022970 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8003fc0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fc4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fc8:	441a      	add	r2, r3
 8003fca:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003fce:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003fd2:	2108      	movs	r1, #8
 8003fd4:	f7fc fbaa 	bl	800072c <InsertBits>
	{
 8003fd8:	e00f      	b.n	8003ffa <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8003fda:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fde:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fe2:	441a      	add	r2, r3
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	494c      	ldr	r1, [pc, #304]	; (8004118 <Send_Vital_Data_Message+0x3dc>)
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	440b      	add	r3, r1
 8003fec:	3302      	adds	r3, #2
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003ff4:	2108      	movs	r1, #8
 8003ff6:	f7fc fb99 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 8003ffa:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003ffe:	3308      	adds	r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	da00      	bge.n	8004006 <Send_Vital_Data_Message+0x2ca>
 8004004:	3307      	adds	r3, #7
 8004006:	10db      	asrs	r3, r3, #3
 8004008:	b29a      	uxth	r2, r3
 800400a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800400e:	4413      	add	r3, r2
 8004010:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004014:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004018:	3308      	adds	r3, #8
 800401a:	b29b      	uxth	r3, r3
 800401c:	b21b      	sxth	r3, r3
 800401e:	425a      	negs	r2, r3
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	f002 0207 	and.w	r2, r2, #7
 8004028:	bf58      	it	pl
 800402a:	4253      	negpl	r3, r2
 800402c:	b21b      	sxth	r3, r3
 800402e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 8004032:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004036:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800403a:	441a      	add	r2, r3
 800403c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004040:	2302      	movs	r3, #2
 8004042:	2108      	movs	r1, #8
 8004044:	f7fc fb72 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004048:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800404c:	3308      	adds	r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	da00      	bge.n	8004054 <Send_Vital_Data_Message+0x318>
 8004052:	3307      	adds	r3, #7
 8004054:	10db      	asrs	r3, r3, #3
 8004056:	b29a      	uxth	r2, r3
 8004058:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800405c:	4413      	add	r3, r2
 800405e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004062:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004066:	3308      	adds	r3, #8
 8004068:	b29b      	uxth	r3, r3
 800406a:	b21b      	sxth	r3, r3
 800406c:	425a      	negs	r2, r3
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	f002 0207 	and.w	r2, r2, #7
 8004076:	bf58      	it	pl
 8004078:	4253      	negpl	r3, r2
 800407a:	b21b      	sxth	r3, r3
 800407c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	4a2b      	ldr	r2, [pc, #172]	; (8004130 <Send_Vital_Data_Message+0x3f4>)
 8004084:	5cd3      	ldrb	r3, [r2, r3]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d15a      	bne.n	8004140 <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 800408a:	f007 fa6f 	bl	800b56c <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 800408e:	79fa      	ldrb	r2, [r7, #7]
 8004090:	4613      	mov	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4413      	add	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	4a26      	ldr	r2, [pc, #152]	; (8004134 <Send_Vital_Data_Message+0x3f8>)
 800409a:	4413      	add	r3, r2
 800409c:	4a26      	ldr	r2, [pc, #152]	; (8004138 <Send_Vital_Data_Message+0x3fc>)
 800409e:	6811      	ldr	r1, [r2, #0]
 80040a0:	6019      	str	r1, [r3, #0]
 80040a2:	8892      	ldrh	r2, [r2, #4]
 80040a4:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 80040a6:	4825      	ldr	r0, [pc, #148]	; (800413c <Send_Vital_Data_Message+0x400>)
 80040a8:	f01e fcfe 	bl	8022aa8 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <Send_Vital_Data_Message+0x3f4>)
 80040b0:	2100      	movs	r1, #0
 80040b2:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 80040b4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040bc:	441a      	add	r2, r3
 80040be:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80040c2:	2368      	movs	r3, #104	; 0x68
 80040c4:	2110      	movs	r1, #16
 80040c6:	f7fc fb31 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80040ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80040ce:	3310      	adds	r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	da00      	bge.n	80040d6 <Send_Vital_Data_Message+0x39a>
 80040d4:	3307      	adds	r3, #7
 80040d6:	10db      	asrs	r3, r3, #3
 80040d8:	b29a      	uxth	r2, r3
 80040da:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040de:	4413      	add	r3, r2
 80040e0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80040e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040e8:	3310      	adds	r3, #16
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	b21b      	sxth	r3, r3
 80040ee:	425a      	negs	r2, r3
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	f002 0207 	and.w	r2, r2, #7
 80040f8:	bf58      	it	pl
 80040fa:	4253      	negpl	r3, r2
 80040fc:	b21b      	sxth	r3, r3
 80040fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004102:	e044      	b.n	800418e <Send_Vital_Data_Message+0x452>
 8004104:	20000304 	.word	0x20000304
 8004108:	2000195c 	.word	0x2000195c
 800410c:	20009d20 	.word	0x20009d20
 8004110:	51eb851f 	.word	0x51eb851f
 8004114:	080247e0 	.word	0x080247e0
 8004118:	200011c4 	.word	0x200011c4
 800411c:	08024804 	.word	0x08024804
 8004120:	08024824 	.word	0x08024824
 8004124:	08024528 	.word	0x08024528
 8004128:	0802454c 	.word	0x0802454c
 800412c:	0802456c 	.word	0x0802456c
 8004130:	200010d8 	.word	0x200010d8
 8004134:	20001188 	.word	0x20001188
 8004138:	20002890 	.word	0x20002890
 800413c:	08024844 	.word	0x08024844
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 8004140:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004144:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004148:	441a      	add	r2, r3
 800414a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800414e:	2328      	movs	r3, #40	; 0x28
 8004150:	2110      	movs	r1, #16
 8004152:	f7fc faeb 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8004156:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800415a:	3310      	adds	r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	da00      	bge.n	8004162 <Send_Vital_Data_Message+0x426>
 8004160:	3307      	adds	r3, #7
 8004162:	10db      	asrs	r3, r3, #3
 8004164:	b29a      	uxth	r2, r3
 8004166:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800416a:	4413      	add	r3, r2
 800416c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004170:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004174:	3310      	adds	r3, #16
 8004176:	b29b      	uxth	r3, r3
 8004178:	b21b      	sxth	r3, r3
 800417a:	425a      	negs	r2, r3
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	f002 0207 	and.w	r2, r2, #7
 8004184:	bf58      	it	pl
 8004186:	4253      	negpl	r3, r2
 8004188:	b21b      	sxth	r3, r3
 800418a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 800418e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004192:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004196:	18d1      	adds	r1, r2, r3
 8004198:	79fa      	ldrb	r2, [r7, #7]
 800419a:	48cd      	ldr	r0, [pc, #820]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 800419c:	4613      	mov	r3, r2
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4413      	add	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4403      	add	r3, r0
 80041a6:	3305      	adds	r3, #5
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80041ae:	460a      	mov	r2, r1
 80041b0:	2108      	movs	r1, #8
 80041b2:	f7fc fabb 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80041b6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80041ba:	3308      	adds	r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	da00      	bge.n	80041c2 <Send_Vital_Data_Message+0x486>
 80041c0:	3307      	adds	r3, #7
 80041c2:	10db      	asrs	r3, r3, #3
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041ca:	4413      	add	r3, r2
 80041cc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80041d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80041d4:	3308      	adds	r3, #8
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	b21b      	sxth	r3, r3
 80041da:	425a      	negs	r2, r3
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	f002 0207 	and.w	r2, r2, #7
 80041e4:	bf58      	it	pl
 80041e6:	4253      	negpl	r3, r2
 80041e8:	b21b      	sxth	r3, r3
 80041ea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80041ee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041f6:	18d1      	adds	r1, r2, r3
 80041f8:	79fa      	ldrb	r2, [r7, #7]
 80041fa:	48b5      	ldr	r0, [pc, #724]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 80041fc:	4613      	mov	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	4413      	add	r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4403      	add	r3, r0
 8004206:	3304      	adds	r3, #4
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800420e:	460a      	mov	r2, r1
 8004210:	2108      	movs	r1, #8
 8004212:	f7fc fa8b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004216:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800421a:	3308      	adds	r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	da00      	bge.n	8004222 <Send_Vital_Data_Message+0x4e6>
 8004220:	3307      	adds	r3, #7
 8004222:	10db      	asrs	r3, r3, #3
 8004224:	b29a      	uxth	r2, r3
 8004226:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800422a:	4413      	add	r3, r2
 800422c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004230:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004234:	3308      	adds	r3, #8
 8004236:	b29b      	uxth	r3, r3
 8004238:	b21b      	sxth	r3, r3
 800423a:	425a      	negs	r2, r3
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	f002 0207 	and.w	r2, r2, #7
 8004244:	bf58      	it	pl
 8004246:	4253      	negpl	r3, r2
 8004248:	b21b      	sxth	r3, r3
 800424a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 800424e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004252:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004256:	18d1      	adds	r1, r2, r3
 8004258:	79fa      	ldrb	r2, [r7, #7]
 800425a:	489d      	ldr	r0, [pc, #628]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 800425c:	4613      	mov	r3, r2
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4413      	add	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4403      	add	r3, r0
 8004266:	3303      	adds	r3, #3
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800426e:	460a      	mov	r2, r1
 8004270:	2108      	movs	r1, #8
 8004272:	f7fc fa5b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004276:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800427a:	3308      	adds	r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	da00      	bge.n	8004282 <Send_Vital_Data_Message+0x546>
 8004280:	3307      	adds	r3, #7
 8004282:	10db      	asrs	r3, r3, #3
 8004284:	b29a      	uxth	r2, r3
 8004286:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800428a:	4413      	add	r3, r2
 800428c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004290:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004294:	3308      	adds	r3, #8
 8004296:	b29b      	uxth	r3, r3
 8004298:	b21b      	sxth	r3, r3
 800429a:	425a      	negs	r2, r3
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	f002 0207 	and.w	r2, r2, #7
 80042a4:	bf58      	it	pl
 80042a6:	4253      	negpl	r3, r2
 80042a8:	b21b      	sxth	r3, r3
 80042aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 80042ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042b6:	18d1      	adds	r1, r2, r3
 80042b8:	79fa      	ldrb	r2, [r7, #7]
 80042ba:	4885      	ldr	r0, [pc, #532]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 80042bc:	4613      	mov	r3, r2
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	4413      	add	r3, r2
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	4403      	add	r3, r0
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80042cc:	460a      	mov	r2, r1
 80042ce:	2108      	movs	r1, #8
 80042d0:	f7fc fa2c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80042d4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80042d8:	3308      	adds	r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	da00      	bge.n	80042e0 <Send_Vital_Data_Message+0x5a4>
 80042de:	3307      	adds	r3, #7
 80042e0:	10db      	asrs	r3, r3, #3
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042e8:	4413      	add	r3, r2
 80042ea:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80042ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80042f2:	3308      	adds	r3, #8
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	b21b      	sxth	r3, r3
 80042f8:	425a      	negs	r2, r3
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	f002 0207 	and.w	r2, r2, #7
 8004302:	bf58      	it	pl
 8004304:	4253      	negpl	r3, r2
 8004306:	b21b      	sxth	r3, r3
 8004308:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 800430c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004310:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004314:	18d1      	adds	r1, r2, r3
 8004316:	79fa      	ldrb	r2, [r7, #7]
 8004318:	486d      	ldr	r0, [pc, #436]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 800431a:	4613      	mov	r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4413      	add	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4403      	add	r3, r0
 8004324:	3301      	adds	r3, #1
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800432c:	460a      	mov	r2, r1
 800432e:	2108      	movs	r1, #8
 8004330:	f7fc f9fc 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004334:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004338:	3308      	adds	r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	da00      	bge.n	8004340 <Send_Vital_Data_Message+0x604>
 800433e:	3307      	adds	r3, #7
 8004340:	10db      	asrs	r3, r3, #3
 8004342:	b29a      	uxth	r2, r3
 8004344:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004348:	4413      	add	r3, r2
 800434a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800434e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004352:	3308      	adds	r3, #8
 8004354:	b29b      	uxth	r3, r3
 8004356:	b21b      	sxth	r3, r3
 8004358:	425a      	negs	r2, r3
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	f002 0207 	and.w	r2, r2, #7
 8004362:	bf58      	it	pl
 8004364:	4253      	negpl	r3, r2
 8004366:	b21b      	sxth	r3, r3
 8004368:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 800436c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004370:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004374:	18d1      	adds	r1, r2, r3
 8004376:	79fa      	ldrb	r2, [r7, #7]
 8004378:	4855      	ldr	r0, [pc, #340]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4403      	add	r3, r0
 8004384:	3302      	adds	r3, #2
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800438c:	460a      	mov	r2, r1
 800438e:	2108      	movs	r1, #8
 8004390:	f7fc f9cc 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004394:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004398:	3308      	adds	r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	da00      	bge.n	80043a0 <Send_Vital_Data_Message+0x664>
 800439e:	3307      	adds	r3, #7
 80043a0:	10db      	asrs	r3, r3, #3
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043a8:	4413      	add	r3, r2
 80043aa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80043ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80043b2:	3308      	adds	r3, #8
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	b21b      	sxth	r3, r3
 80043b8:	425a      	negs	r2, r3
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	f002 0207 	and.w	r2, r2, #7
 80043c2:	bf58      	it	pl
 80043c4:	4253      	negpl	r3, r2
 80043c6:	b21b      	sxth	r3, r3
 80043c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 80043cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80043d4:	441a      	add	r2, r3
 80043d6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80043da:	2301      	movs	r3, #1
 80043dc:	2108      	movs	r1, #8
 80043de:	f7fc f9a5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80043e2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80043e6:	3308      	adds	r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	da00      	bge.n	80043ee <Send_Vital_Data_Message+0x6b2>
 80043ec:	3307      	adds	r3, #7
 80043ee:	10db      	asrs	r3, r3, #3
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043f6:	4413      	add	r3, r2
 80043f8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80043fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004400:	3308      	adds	r3, #8
 8004402:	b29b      	uxth	r3, r3
 8004404:	b21b      	sxth	r3, r3
 8004406:	425a      	negs	r2, r3
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	f002 0207 	and.w	r2, r2, #7
 8004410:	bf58      	it	pl
 8004412:	4253      	negpl	r3, r2
 8004414:	b21b      	sxth	r3, r3
 8004416:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 800441a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800441e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004422:	441a      	add	r2, r3
 8004424:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004428:	2300      	movs	r3, #0
 800442a:	2108      	movs	r1, #8
 800442c:	f7fc f97e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004430:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004434:	3308      	adds	r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	da00      	bge.n	800443c <Send_Vital_Data_Message+0x700>
 800443a:	3307      	adds	r3, #7
 800443c:	10db      	asrs	r3, r3, #3
 800443e:	b29a      	uxth	r2, r3
 8004440:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004444:	4413      	add	r3, r2
 8004446:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800444a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800444e:	3308      	adds	r3, #8
 8004450:	b29b      	uxth	r3, r3
 8004452:	b21b      	sxth	r3, r3
 8004454:	425a      	negs	r2, r3
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	f002 0207 	and.w	r2, r2, #7
 800445e:	bf58      	it	pl
 8004460:	4253      	negpl	r3, r2
 8004462:	b21b      	sxth	r3, r3
 8004464:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 8004468:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800446c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004470:	441a      	add	r2, r3
 8004472:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004476:	2301      	movs	r3, #1
 8004478:	2108      	movs	r1, #8
 800447a:	f7fc f957 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800447e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004482:	3308      	adds	r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	da00      	bge.n	800448a <Send_Vital_Data_Message+0x74e>
 8004488:	3307      	adds	r3, #7
 800448a:	10db      	asrs	r3, r3, #3
 800448c:	b29a      	uxth	r2, r3
 800448e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004492:	4413      	add	r3, r2
 8004494:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004498:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800449c:	3308      	adds	r3, #8
 800449e:	b29b      	uxth	r3, r3
 80044a0:	b21b      	sxth	r3, r3
 80044a2:	425a      	negs	r2, r3
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	f002 0207 	and.w	r2, r2, #7
 80044ac:	bf58      	it	pl
 80044ae:	4253      	negpl	r3, r2
 80044b0:	b21b      	sxth	r3, r3
 80044b2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80044b6:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <Send_Vital_Data_Message+0x798>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d02c      	beq.n	800451e <Send_Vital_Data_Message+0x7e2>
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <Send_Vital_Data_Message+0x798>)
 80044c6:	791b      	ldrb	r3, [r3, #4]
 80044c8:	79fa      	ldrb	r2, [r7, #7]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d127      	bne.n	800451e <Send_Vital_Data_Message+0x7e2>
 80044ce:	e003      	b.n	80044d8 <Send_Vital_Data_Message+0x79c>
 80044d0:	20001188 	.word	0x20001188
 80044d4:	2000195c 	.word	0x2000195c
	{
		uint32_t Rand_Number = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 80044de:	484e      	ldr	r0, [pc, #312]	; (8004618 <Send_Vital_Data_Message+0x8dc>)
 80044e0:	f015 fefa 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 80044e4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80044e8:	484c      	ldr	r0, [pc, #304]	; (800461c <Send_Vital_Data_Message+0x8e0>)
 80044ea:	f01e fadd 	bl	8022aa8 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	4a4b      	ldr	r2, [pc, #300]	; (8004620 <Send_Vital_Data_Message+0x8e4>)
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	4413      	add	r3, r2
 80044f6:	330c      	adds	r3, #12
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4619      	mov	r1, r3
 80044fc:	4849      	ldr	r0, [pc, #292]	; (8004624 <Send_Vital_Data_Message+0x8e8>)
 80044fe:	f01e fa37 	bl	8022970 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 8004502:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004506:	4848      	ldr	r0, [pc, #288]	; (8004628 <Send_Vital_Data_Message+0x8ec>)
 8004508:	f01e fa32 	bl	8022970 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 800450c:	f107 020c 	add.w	r2, r7, #12
 8004510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004514:	2118      	movs	r1, #24
 8004516:	2000      	movs	r0, #0
 8004518:	f7fc f908 	bl	800072c <InsertBits>
	{
 800451c:	e00b      	b.n	8004536 <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	4a3f      	ldr	r2, [pc, #252]	; (8004620 <Send_Vital_Data_Message+0x8e4>)
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	4413      	add	r3, r2
 8004526:	330c      	adds	r3, #12
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f107 020c 	add.w	r2, r7, #12
 800452e:	2118      	movs	r1, #24
 8004530:	2000      	movs	r0, #0
 8004532:	f7fc f8fb 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004536:	2300      	movs	r3, #0
 8004538:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800453c:	e011      	b.n	8004562 <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 800453e:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8004542:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004546:	3303      	adds	r3, #3
 8004548:	3290      	adds	r2, #144	; 0x90
 800454a:	443a      	add	r2, r7
 800454c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8004550:	3390      	adds	r3, #144	; 0x90
 8004552:	443b      	add	r3, r7
 8004554:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004558:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800455c:	3301      	adds	r3, #1
 800455e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004562:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004566:	b29b      	uxth	r3, r3
 8004568:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800456c:	429a      	cmp	r2, r3
 800456e:	d8e6      	bhi.n	800453e <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8004570:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004574:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004578:	18d4      	adds	r4, r2, r3
 800457a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800457e:	b29b      	uxth	r3, r3
 8004580:	3303      	adds	r3, #3
 8004582:	b29a      	uxth	r2, r3
 8004584:	f107 030c 	add.w	r3, r7, #12
 8004588:	4611      	mov	r1, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f00e fe1a 	bl	80131c4 <CalculateDirectReverseCrc>
 8004590:	4603      	mov	r3, r0
 8004592:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004596:	4622      	mov	r2, r4
 8004598:	2120      	movs	r1, #32
 800459a:	f7fc f8c7 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 800459e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80045a2:	3320      	adds	r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	da00      	bge.n	80045aa <Send_Vital_Data_Message+0x86e>
 80045a8:	3307      	adds	r3, #7
 80045aa:	10db      	asrs	r3, r3, #3
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80045b2:	4413      	add	r3, r2
 80045b4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80045b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80045bc:	3320      	adds	r3, #32
 80045be:	b29b      	uxth	r3, r3
 80045c0:	b21b      	sxth	r3, r3
 80045c2:	425a      	negs	r2, r3
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	f002 0207 	and.w	r2, r2, #7
 80045cc:	bf58      	it	pl
 80045ce:	4253      	negpl	r3, r2
 80045d0:	b21b      	sxth	r3, r3
 80045d2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <Send_Vital_Data_Message+0x8f0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	0a5b      	lsrs	r3, r3, #9
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <Send_Vital_Data_Message+0x8c0>
 80045e4:	4b11      	ldr	r3, [pc, #68]	; (800462c <Send_Vital_Data_Message+0x8f0>)
 80045e6:	791b      	ldrb	r3, [r3, #4]
 80045e8:	79fa      	ldrb	r2, [r7, #7]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d106      	bne.n	80045fc <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 80045ee:	4810      	ldr	r0, [pc, #64]	; (8004630 <Send_Vital_Data_Message+0x8f4>)
 80045f0:	f01e fa5a 	bl	8022aa8 <puts>
		printf("Not Sending Reply");
 80045f4:	480f      	ldr	r0, [pc, #60]	; (8004634 <Send_Vital_Data_Message+0x8f8>)
 80045f6:	f01e f9bb 	bl	8022970 <iprintf>
 80045fa:	e009      	b.n	8004610 <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80045fc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004600:	b2d9      	uxtb	r1, r3
 8004602:	79fa      	ldrb	r2, [r7, #7]
 8004604:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004608:	4618      	mov	r0, r3
 800460a:	f002 ffd9 	bl	80075c0 <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 800460e:	bf00      	nop
 8004610:	bf00      	nop
 8004612:	3794      	adds	r7, #148	; 0x94
 8004614:	46bd      	mov	sp, r7
 8004616:	bd90      	pop	{r4, r7, pc}
 8004618:	20009d20 	.word	0x20009d20
 800461c:	0802485c 	.word	0x0802485c
 8004620:	200011c4 	.word	0x200011c4
 8004624:	08024880 	.word	0x08024880
 8004628:	080248a4 	.word	0x080248a4
 800462c:	2000195c 	.word	0x2000195c
 8004630:	080245f4 	.word	0x080245f4
 8004634:	0802460c 	.word	0x0802460c

08004638 <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b0c0      	sub	sp, #256	; 0x100
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	4608      	mov	r0, r1
 8004642:	4611      	mov	r1, r2
 8004644:	461a      	mov	r2, r3
 8004646:	4603      	mov	r3, r0
 8004648:	70fb      	strb	r3, [r7, #3]
 800464a:	460b      	mov	r3, r1
 800464c:	70bb      	strb	r3, [r7, #2]
 800464e:	4613      	mov	r3, r2
 8004650:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	uint32_t Calc_CRC = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t Recv_CRC = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t Ticks = HAL_GetTick();
 8004664:	f011 f986 	bl	8015974 <HAL_GetTick>
 8004668:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	uint8_t noofIP = 0, uc_index = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004672:	2300      	movs	r3, #0
 8004674:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t LinkEstablishFlag = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t Temp_Vital_Data_Buff[128] = {0,};
 800467e:	2300      	movs	r3, #0
 8004680:	667b      	str	r3, [r7, #100]	; 0x64
 8004682:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004686:	227c      	movs	r2, #124	; 0x7c
 8004688:	2100      	movs	r1, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f01e f888 	bl	80227a0 <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 8004690:	2300      	movs	r3, #0
 8004692:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004696:	2300      	movs	r3, #0
 8004698:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	b299      	uxth	r1, r3
 80046a0:	78ba      	ldrb	r2, [r7, #2]
 80046a2:	48c3      	ldr	r0, [pc, #780]	; (80049b0 <Vital_Msg_extr_from_CAN+0x378>)
 80046a4:	4613      	mov	r3, r2
 80046a6:	015b      	lsls	r3, r3, #5
 80046a8:	4413      	add	r3, r2
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4403      	add	r3, r0
 80046ae:	3340      	adds	r3, #64	; 0x40
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	4299      	cmp	r1, r3
 80046b4:	d11a      	bne.n	80046ec <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 80046b6:	78ba      	ldrb	r2, [r7, #2]
 80046b8:	4613      	mov	r3, r2
 80046ba:	015b      	lsls	r3, r3, #5
 80046bc:	4413      	add	r3, r2
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4abb      	ldr	r2, [pc, #748]	; (80049b0 <Vital_Msg_extr_from_CAN+0x378>)
 80046c2:	4413      	add	r3, r2
 80046c4:	78fa      	ldrb	r2, [r7, #3]
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f01e f831 	bl	8022730 <memcmp>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80046d4:	78bb      	ldrb	r3, [r7, #2]
 80046d6:	4ab7      	ldr	r2, [pc, #732]	; (80049b4 <Vital_Msg_extr_from_CAN+0x37c>)
 80046d8:	3366      	adds	r3, #102	; 0x66
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4619      	mov	r1, r3
 80046e2:	48b5      	ldr	r0, [pc, #724]	; (80049b8 <Vital_Msg_extr_from_CAN+0x380>)
 80046e4:	f01e f944 	bl	8022970 <iprintf>
			return;
 80046e8:	f000 bda0 	b.w	800522c <Vital_Msg_extr_from_CAN+0xbf4>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	3b05      	subs	r3, #5
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	441a      	add	r2, r3
 80046f4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80046f8:	2120      	movs	r1, #32
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fb ff8a 	bl	8000614 <ExtractBits>
 8004700:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004704:	4bad      	ldr	r3, [pc, #692]	; (80049bc <Vital_Msg_extr_from_CAN+0x384>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d034      	beq.n	800477a <Vital_Msg_extr_from_CAN+0x142>
 8004710:	4baa      	ldr	r3, [pc, #680]	; (80049bc <Vital_Msg_extr_from_CAN+0x384>)
 8004712:	791b      	ldrb	r3, [r3, #4]
 8004714:	78ba      	ldrb	r2, [r7, #2]
 8004716:	429a      	cmp	r2, r3
 8004718:	d12f      	bne.n	800477a <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 800471a:	2316      	movs	r3, #22
 800471c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8004720:	48a7      	ldr	r0, [pc, #668]	; (80049c0 <Vital_Msg_extr_from_CAN+0x388>)
 8004722:	f015 fdd9 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 8004726:	4602      	mov	r2, r0
 8004728:	4ba6      	ldr	r3, [pc, #664]	; (80049c4 <Vital_Msg_extr_from_CAN+0x38c>)
 800472a:	fba3 1302 	umull	r1, r3, r3, r2
 800472e:	0dd9      	lsrs	r1, r3, #23
 8004730:	460b      	mov	r3, r1
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	1a5b      	subs	r3, r3, r1
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		printf("\nInjected RX Vital CRC failure\n");
 800473e:	48a2      	ldr	r0, [pc, #648]	; (80049c8 <Vital_Msg_extr_from_CAN+0x390>)
 8004740:	f01e f9b2 	bl	8022aa8 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004744:	78ba      	ldrb	r2, [r7, #2]
 8004746:	49a1      	ldr	r1, [pc, #644]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 8004748:	4613      	mov	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4413      	add	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	440b      	add	r3, r1
 8004752:	3308      	adds	r3, #8
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4619      	mov	r1, r3
 8004758:	489d      	ldr	r0, [pc, #628]	; (80049d0 <Vital_Msg_extr_from_CAN+0x398>)
 800475a:	f01e f909 	bl	8022970 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 800475e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8004762:	489c      	ldr	r0, [pc, #624]	; (80049d4 <Vital_Msg_extr_from_CAN+0x39c>)
 8004764:	f01e f904 	bl	8022970 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8004768:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800476c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004770:	2118      	movs	r1, #24
 8004772:	2000      	movs	r0, #0
 8004774:	f7fb ffda 	bl	800072c <InsertBits>
	{
 8004778:	e00e      	b.n	8004798 <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 800477a:	78ba      	ldrb	r2, [r7, #2]
 800477c:	4993      	ldr	r1, [pc, #588]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	440b      	add	r3, r1
 8004788:	3308      	adds	r3, #8
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004790:	2118      	movs	r1, #24
 8004792:	2000      	movs	r0, #0
 8004794:	f7fb ffca 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004798:	2300      	movs	r3, #0
 800479a:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800479e:	e011      	b.n	80047c4 <Vital_Msg_extr_from_CAN+0x18c>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80047a0:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	441a      	add	r2, r3
 80047a8:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047ac:	3303      	adds	r3, #3
 80047ae:	7812      	ldrb	r2, [r2, #0]
 80047b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80047b4:	443b      	add	r3, r7
 80047b6:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80047ba:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047be:	3301      	adds	r3, #1
 80047c0:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80047c4:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	3b05      	subs	r3, #5
 80047cc:	429a      	cmp	r2, r3
 80047ce:	dbe7      	blt.n	80047a0 <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 80047d0:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3303      	adds	r3, #3
 80047d8:	b29a      	uxth	r2, r3
 80047da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80047de:	4611      	mov	r1, r2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f00e fcef 	bl	80131c4 <CalculateDirectReverseCrc>
 80047e6:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	if(Calc_CRC != Recv_CRC)
 80047ea:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80047ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80047f2:	429a      	cmp	r2, r3
 80047f4:	f000 8104 	beq.w	8004a00 <Vital_Msg_extr_from_CAN+0x3c8>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3305      	adds	r3, #5
 80047fc:	461a      	mov	r2, r3
 80047fe:	2108      	movs	r1, #8
 8004800:	2000      	movs	r0, #0
 8004802:	f7fb ff07 	bl	8000614 <ExtractBits>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	f040 80ba 	bne.w	8004982 <Vital_Msg_extr_from_CAN+0x34a>
		{
			printf("Tx seq Roll over Detected\n");
 800480e:	4872      	ldr	r0, [pc, #456]	; (80049d8 <Vital_Msg_extr_from_CAN+0x3a0>)
 8004810:	f01e f94a 	bl	8022aa8 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8004814:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004818:	2280      	movs	r2, #128	; 0x80
 800481a:	2100      	movs	r1, #0
 800481c:	4618      	mov	r0, r3
 800481e:	f01d ffbf 	bl	80227a0 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 8004822:	78ba      	ldrb	r2, [r7, #2]
 8004824:	4969      	ldr	r1, [pc, #420]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 8004826:	4613      	mov	r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	4413      	add	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	440b      	add	r3, r1
 8004830:	3308      	adds	r3, #8
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800483a:	2118      	movs	r1, #24
 800483c:	2000      	movs	r0, #0
 800483e:	f7fb ff75 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004842:	2300      	movs	r3, #0
 8004844:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004848:	e011      	b.n	800486e <Vital_Msg_extr_from_CAN+0x236>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 800484a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	441a      	add	r2, r3
 8004852:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004856:	3303      	adds	r3, #3
 8004858:	7812      	ldrb	r2, [r2, #0]
 800485a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800485e:	443b      	add	r3, r7
 8004860:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004864:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004868:	3301      	adds	r3, #1
 800486a:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800486e:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	3b05      	subs	r3, #5
 8004876:	429a      	cmp	r2, r3
 8004878:	dbe7      	blt.n	800484a <Vital_Msg_extr_from_CAN+0x212>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 800487a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800487e:	b29b      	uxth	r3, r3
 8004880:	3303      	adds	r3, #3
 8004882:	b29a      	uxth	r2, r3
 8004884:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f00e fc9a 	bl	80131c4 <CalculateDirectReverseCrc>
 8004890:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	3b05      	subs	r3, #5
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	441a      	add	r2, r3
 800489c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80048a0:	2120      	movs	r1, #32
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fb feb6 	bl	8000614 <ExtractBits>
 80048a8:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

			if(Calc_CRC == Recv_CRC)
 80048ac:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80048b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d14e      	bne.n	8004956 <Vital_Msg_extr_from_CAN+0x31e>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 80048b8:	4848      	ldr	r0, [pc, #288]	; (80049dc <Vital_Msg_extr_from_CAN+0x3a4>)
 80048ba:	f01e f8f5 	bl	8022aa8 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 80048be:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80048c2:	4847      	ldr	r0, [pc, #284]	; (80049e0 <Vital_Msg_extr_from_CAN+0x3a8>)
 80048c4:	f01e f854 	bl	8022970 <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80048c8:	78ba      	ldrb	r2, [r7, #2]
 80048ca:	4940      	ldr	r1, [pc, #256]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 80048cc:	4613      	mov	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	440b      	add	r3, r1
 80048d6:	3308      	adds	r3, #8
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	4841      	ldr	r0, [pc, #260]	; (80049e4 <Vital_Msg_extr_from_CAN+0x3ac>)
 80048de:	f01e f847 	bl	8022970 <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 80048e2:	78ba      	ldrb	r2, [r7, #2]
 80048e4:	4939      	ldr	r1, [pc, #228]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 80048e6:	4613      	mov	r3, r2
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	4413      	add	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	440b      	add	r3, r1
 80048f0:	3308      	adds	r3, #8
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	1c59      	adds	r1, r3, #1
 80048f6:	4835      	ldr	r0, [pc, #212]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4403      	add	r3, r0
 8004902:	3308      	adds	r3, #8
 8004904:	6019      	str	r1, [r3, #0]
 8004906:	78b9      	ldrb	r1, [r7, #2]
 8004908:	4830      	ldr	r0, [pc, #192]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 800490a:	4613      	mov	r3, r2
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	4413      	add	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	4403      	add	r3, r0
 8004914:	3308      	adds	r3, #8
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4833      	ldr	r0, [pc, #204]	; (80049e8 <Vital_Msg_extr_from_CAN+0x3b0>)
 800491a:	010b      	lsls	r3, r1, #4
 800491c:	4403      	add	r3, r0
 800491e:	3308      	adds	r3, #8
 8004920:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8004922:	78bb      	ldrb	r3, [r7, #2]
 8004924:	4a30      	ldr	r2, [pc, #192]	; (80049e8 <Vital_Msg_extr_from_CAN+0x3b0>)
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	4413      	add	r3, r2
 800492a:	3308      	adds	r3, #8
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4619      	mov	r1, r3
 8004930:	482e      	ldr	r0, [pc, #184]	; (80049ec <Vital_Msg_extr_from_CAN+0x3b4>)
 8004932:	f01e f81d 	bl	8022970 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8004936:	78bb      	ldrb	r3, [r7, #2]
 8004938:	78ba      	ldrb	r2, [r7, #2]
 800493a:	492b      	ldr	r1, [pc, #172]	; (80049e8 <Vital_Msg_extr_from_CAN+0x3b0>)
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	440b      	add	r3, r1
 8004940:	3308      	adds	r3, #8
 8004942:	6819      	ldr	r1, [r3, #0]
 8004944:	482a      	ldr	r0, [pc, #168]	; (80049f0 <Vital_Msg_extr_from_CAN+0x3b8>)
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	4403      	add	r3, r0
 8004950:	3308      	adds	r3, #8
 8004952:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 8004954:	e055      	b.n	8004a02 <Vital_Msg_extr_from_CAN+0x3ca>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004956:	78bb      	ldrb	r3, [r7, #2]
 8004958:	4a16      	ldr	r2, [pc, #88]	; (80049b4 <Vital_Msg_extr_from_CAN+0x37c>)
 800495a:	3366      	adds	r3, #102	; 0x66
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	4619      	mov	r1, r3
 8004964:	4823      	ldr	r0, [pc, #140]	; (80049f4 <Vital_Msg_extr_from_CAN+0x3bc>)
 8004966:	f01e f803 	bl	8022970 <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 800496a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800496e:	4822      	ldr	r0, [pc, #136]	; (80049f8 <Vital_Msg_extr_from_CAN+0x3c0>)
 8004970:	f01d fffe 	bl	8022970 <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004974:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004978:	4820      	ldr	r0, [pc, #128]	; (80049fc <Vital_Msg_extr_from_CAN+0x3c4>)
 800497a:	f01d fff9 	bl	8022970 <iprintf>
				return;
 800497e:	f000 bc55 	b.w	800522c <Vital_Msg_extr_from_CAN+0xbf4>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004982:	78bb      	ldrb	r3, [r7, #2]
 8004984:	4a0b      	ldr	r2, [pc, #44]	; (80049b4 <Vital_Msg_extr_from_CAN+0x37c>)
 8004986:	3366      	adds	r3, #102	; 0x66
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4619      	mov	r1, r3
 8004990:	4818      	ldr	r0, [pc, #96]	; (80049f4 <Vital_Msg_extr_from_CAN+0x3bc>)
 8004992:	f01d ffed 	bl	8022970 <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 8004996:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800499a:	4817      	ldr	r0, [pc, #92]	; (80049f8 <Vital_Msg_extr_from_CAN+0x3c0>)
 800499c:	f01d ffe8 	bl	8022970 <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 80049a0:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80049a4:	4815      	ldr	r0, [pc, #84]	; (80049fc <Vital_Msg_extr_from_CAN+0x3c4>)
 80049a6:	f01d ffe3 	bl	8022970 <iprintf>
			return;
 80049aa:	f000 bc3f 	b.w	800522c <Vital_Msg_extr_from_CAN+0xbf4>
 80049ae:	bf00      	nop
 80049b0:	2000197c 	.word	0x2000197c
 80049b4:	20000304 	.word	0x20000304
 80049b8:	080248c8 	.word	0x080248c8
 80049bc:	2000195c 	.word	0x2000195c
 80049c0:	20009d20 	.word	0x20009d20
 80049c4:	80008001 	.word	0x80008001
 80049c8:	08024620 	.word	0x08024620
 80049cc:	20001764 	.word	0x20001764
 80049d0:	08024640 	.word	0x08024640
 80049d4:	08024668 	.word	0x08024668
 80049d8:	08024690 	.word	0x08024690
 80049dc:	0802490c 	.word	0x0802490c
 80049e0:	080246c4 	.word	0x080246c4
 80049e4:	08024930 	.word	0x08024930
 80049e8:	200011c4 	.word	0x200011c4
 80049ec:	08024704 	.word	0x08024704
 80049f0:	20001674 	.word	0x20001674
 80049f4:	0802494c 	.word	0x0802494c
 80049f8:	08024360 	.word	0x08024360
 80049fc:	08024370 	.word	0x08024370
		}
	}
	ROLLOVER_VITAL_CAN:
 8004a00:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 8004a02:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004a06:	3308      	adds	r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	da00      	bge.n	8004a0e <Vital_Msg_extr_from_CAN+0x3d6>
 8004a0c:	3307      	adds	r3, #7
 8004a0e:	10db      	asrs	r3, r3, #3
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a16:	4413      	add	r3, r2
 8004a18:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004a1c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a20:	3308      	adds	r3, #8
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	b21b      	sxth	r3, r3
 8004a26:	425a      	negs	r2, r3
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	f002 0207 	and.w	r2, r2, #7
 8004a30:	bf58      	it	pl
 8004a32:	4253      	negpl	r3, r2
 8004a34:	b21b      	sxth	r3, r3
 8004a36:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004a3a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	441a      	add	r2, r3
 8004a42:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a46:	2110      	movs	r1, #16
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fb fde3 	bl	8000614 <ExtractBits>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 8004a56:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	48c6      	ldr	r0, [pc, #792]	; (8004d78 <Vital_Msg_extr_from_CAN+0x740>)
 8004a5e:	f01d ff87 	bl	8022970 <iprintf>
	BITSTUFFINC(16);
 8004a62:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004a66:	3310      	adds	r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	da00      	bge.n	8004a6e <Vital_Msg_extr_from_CAN+0x436>
 8004a6c:	3307      	adds	r3, #7
 8004a6e:	10db      	asrs	r3, r3, #3
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a76:	4413      	add	r3, r2
 8004a78:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004a7c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a80:	3310      	adds	r3, #16
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	b21b      	sxth	r3, r3
 8004a86:	425a      	negs	r2, r3
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	f002 0207 	and.w	r2, r2, #7
 8004a90:	bf58      	it	pl
 8004a92:	4253      	negpl	r3, r2
 8004a94:	b21b      	sxth	r3, r3
 8004a96:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004a9a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	441a      	add	r2, r3
 8004aa2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004aa6:	2110      	movs	r1, #16
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fb fdb3 	bl	8000614 <ExtractBits>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 8004ab6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004aba:	4619      	mov	r1, r3
 8004abc:	48af      	ldr	r0, [pc, #700]	; (8004d7c <Vital_Msg_extr_from_CAN+0x744>)
 8004abe:	f01d ff57 	bl	8022970 <iprintf>
	BITSTUFFINC(16);
 8004ac2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004ac6:	3310      	adds	r3, #16
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da00      	bge.n	8004ace <Vital_Msg_extr_from_CAN+0x496>
 8004acc:	3307      	adds	r3, #7
 8004ace:	10db      	asrs	r3, r3, #3
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004adc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ae0:	3310      	adds	r3, #16
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	b21b      	sxth	r3, r3
 8004ae6:	425a      	negs	r2, r3
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	f002 0207 	and.w	r2, r2, #7
 8004af0:	bf58      	it	pl
 8004af2:	4253      	negpl	r3, r2
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004afa:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	441a      	add	r2, r3
 8004b02:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b06:	2108      	movs	r1, #8
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fb fd83 	bl	8000614 <ExtractBits>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 8004b16:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	da00      	bge.n	8004b22 <Vital_Msg_extr_from_CAN+0x4ea>
 8004b20:	3307      	adds	r3, #7
 8004b22:	10db      	asrs	r3, r3, #3
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004b30:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b34:	3308      	adds	r3, #8
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	b21b      	sxth	r3, r3
 8004b3a:	425a      	negs	r2, r3
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	f002 0207 	and.w	r2, r2, #7
 8004b44:	bf58      	it	pl
 8004b46:	4253      	negpl	r3, r2
 8004b48:	b21b      	sxth	r3, r3
 8004b4a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004b4e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	441a      	add	r2, r3
 8004b56:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b5a:	2108      	movs	r1, #8
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fb fd59 	bl	8000614 <ExtractBits>
 8004b62:	4603      	mov	r3, r0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 8004b6a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004b6e:	3308      	adds	r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	da00      	bge.n	8004b76 <Vital_Msg_extr_from_CAN+0x53e>
 8004b74:	3307      	adds	r3, #7
 8004b76:	10db      	asrs	r3, r3, #3
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b7e:	4413      	add	r3, r2
 8004b80:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004b84:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b88:	3308      	adds	r3, #8
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	b21b      	sxth	r3, r3
 8004b8e:	425a      	negs	r2, r3
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	f002 0207 	and.w	r2, r2, #7
 8004b98:	bf58      	it	pl
 8004b9a:	4253      	negpl	r3, r2
 8004b9c:	b21b      	sxth	r3, r3
 8004b9e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ba2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	441a      	add	r2, r3
 8004baa:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bae:	2108      	movs	r1, #8
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fb fd2f 	bl	8000614 <ExtractBits>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8004bbe:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004bc2:	3308      	adds	r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	da00      	bge.n	8004bca <Vital_Msg_extr_from_CAN+0x592>
 8004bc8:	3307      	adds	r3, #7
 8004bca:	10db      	asrs	r3, r3, #3
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004bd8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bdc:	3308      	adds	r3, #8
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	b21b      	sxth	r3, r3
 8004be2:	425a      	negs	r2, r3
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	f002 0207 	and.w	r2, r2, #7
 8004bec:	bf58      	it	pl
 8004bee:	4253      	negpl	r3, r2
 8004bf0:	b21b      	sxth	r3, r3
 8004bf2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004bf6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	441a      	add	r2, r3
 8004bfe:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c02:	2110      	movs	r1, #16
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb fd05 	bl	8000614 <ExtractBits>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	853b      	strh	r3, [r7, #40]	; 0x28
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 8004c10:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c14:	3310      	adds	r3, #16
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	da00      	bge.n	8004c1c <Vital_Msg_extr_from_CAN+0x5e4>
 8004c1a:	3307      	adds	r3, #7
 8004c1c:	10db      	asrs	r3, r3, #3
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c24:	4413      	add	r3, r2
 8004c26:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c2a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c2e:	3310      	adds	r3, #16
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	b21b      	sxth	r3, r3
 8004c34:	425a      	negs	r2, r3
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	f002 0207 	and.w	r2, r2, #7
 8004c3e:	bf58      	it	pl
 8004c40:	4253      	negpl	r3, r2
 8004c42:	b21b      	sxth	r3, r3
 8004c44:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 8004c48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80fe 	beq.w	8004e50 <Vital_Msg_extr_from_CAN+0x818>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004c54:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	441a      	add	r2, r3
 8004c5c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c60:	2108      	movs	r1, #8
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fb fcd6 	bl	8000614 <ExtractBits>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 8004c70:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c74:	3308      	adds	r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da00      	bge.n	8004c7c <Vital_Msg_extr_from_CAN+0x644>
 8004c7a:	3307      	adds	r3, #7
 8004c7c:	10db      	asrs	r3, r3, #3
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c84:	4413      	add	r3, r2
 8004c86:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c8a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c8e:	3308      	adds	r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b21b      	sxth	r3, r3
 8004c94:	425a      	negs	r2, r3
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	f002 0207 	and.w	r2, r2, #7
 8004c9e:	bf58      	it	pl
 8004ca0:	4253      	negpl	r3, r2
 8004ca2:	b21b      	sxth	r3, r3
 8004ca4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ca8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	441a      	add	r2, r3
 8004cb0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004cb4:	2108      	movs	r1, #8
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fb fcac 	bl	8000614 <ExtractBits>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 8004cc4:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004cc8:	3308      	adds	r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	da00      	bge.n	8004cd0 <Vital_Msg_extr_from_CAN+0x698>
 8004cce:	3307      	adds	r3, #7
 8004cd0:	10db      	asrs	r3, r3, #3
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cd8:	4413      	add	r3, r2
 8004cda:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004cde:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	b21b      	sxth	r3, r3
 8004ce8:	425a      	negs	r2, r3
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	f002 0207 	and.w	r2, r2, #7
 8004cf2:	bf58      	it	pl
 8004cf4:	4253      	negpl	r3, r2
 8004cf6:	b21b      	sxth	r3, r3
 8004cf8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004cfc:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	441a      	add	r2, r3
 8004d04:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d08:	2108      	movs	r1, #8
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fb fc82 	bl	8000614 <ExtractBits>
 8004d10:	4603      	mov	r3, r0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	77fb      	strb	r3, [r7, #31]
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 8004d16:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	da00      	bge.n	8004d22 <Vital_Msg_extr_from_CAN+0x6ea>
 8004d20:	3307      	adds	r3, #7
 8004d22:	10db      	asrs	r3, r3, #3
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d30:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d34:	3308      	adds	r3, #8
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	b21b      	sxth	r3, r3
 8004d3a:	425a      	negs	r2, r3
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	f002 0207 	and.w	r2, r2, #7
 8004d44:	bf58      	it	pl
 8004d46:	4253      	negpl	r3, r2
 8004d48:	b21b      	sxth	r3, r3
 8004d4a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d4e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	441a      	add	r2, r3
 8004d56:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d5a:	2108      	movs	r1, #8
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fb fc59 	bl	8000614 <ExtractBits>
 8004d62:	4603      	mov	r3, r0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	773b      	strb	r3, [r7, #28]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 8004d68:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da06      	bge.n	8004d80 <Vital_Msg_extr_from_CAN+0x748>
 8004d72:	3307      	adds	r3, #7
 8004d74:	e004      	b.n	8004d80 <Vital_Msg_extr_from_CAN+0x748>
 8004d76:	bf00      	nop
 8004d78:	08024450 	.word	0x08024450
 8004d7c:	08024458 	.word	0x08024458
 8004d80:	10db      	asrs	r3, r3, #3
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d88:	4413      	add	r3, r2
 8004d8a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d8e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d92:	3308      	adds	r3, #8
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	b21b      	sxth	r3, r3
 8004d98:	425a      	negs	r2, r3
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	f002 0207 	and.w	r2, r2, #7
 8004da2:	bf58      	it	pl
 8004da4:	4253      	negpl	r3, r2
 8004da6:	b21b      	sxth	r3, r3
 8004da8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004dac:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	441a      	add	r2, r3
 8004db4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004db8:	2108      	movs	r1, #8
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fb fc2a 	bl	8000614 <ExtractBits>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	777b      	strb	r3, [r7, #29]
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 8004dc6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004dca:	3308      	adds	r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	da00      	bge.n	8004dd2 <Vital_Msg_extr_from_CAN+0x79a>
 8004dd0:	3307      	adds	r3, #7
 8004dd2:	10db      	asrs	r3, r3, #3
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004dda:	4413      	add	r3, r2
 8004ddc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004de0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004de4:	3308      	adds	r3, #8
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	b21b      	sxth	r3, r3
 8004dea:	425a      	negs	r2, r3
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	f002 0207 	and.w	r2, r2, #7
 8004df4:	bf58      	it	pl
 8004df6:	4253      	negpl	r3, r2
 8004df8:	b21b      	sxth	r3, r3
 8004dfa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004dfe:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	441a      	add	r2, r3
 8004e06:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e0a:	2108      	movs	r1, #8
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fb fc01 	bl	8000614 <ExtractBits>
 8004e12:	4603      	mov	r3, r0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	77bb      	strb	r3, [r7, #30]
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 8004e18:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	da00      	bge.n	8004e24 <Vital_Msg_extr_from_CAN+0x7ec>
 8004e22:	3307      	adds	r3, #7
 8004e24:	10db      	asrs	r3, r3, #3
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e32:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e36:	3308      	adds	r3, #8
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	b21b      	sxth	r3, r3
 8004e3c:	425a      	negs	r2, r3
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	f002 0207 	and.w	r2, r2, #7
 8004e46:	bf58      	it	pl
 8004e48:	4253      	negpl	r3, r2
 8004e4a:	b21b      	sxth	r3, r3
 8004e4c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 8004e50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <Vital_Msg_extr_from_CAN+0x828>
	{
		LinkEstablishFlag = SET;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e60:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	441a      	add	r2, r3
 8004e68:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e6c:	2108      	movs	r1, #8
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fb fbd0 	bl	8000614 <ExtractBits>
 8004e74:	4603      	mov	r3, r0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BITSTUFFINC(8);
 8004e7c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e80:	3308      	adds	r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	da00      	bge.n	8004e88 <Vital_Msg_extr_from_CAN+0x850>
 8004e86:	3307      	adds	r3, #7
 8004e88:	10db      	asrs	r3, r3, #3
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e90:	4413      	add	r3, r2
 8004e92:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e96:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	b21b      	sxth	r3, r3
 8004ea0:	425a      	negs	r2, r3
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	f002 0207 	and.w	r2, r2, #7
 8004eaa:	bf58      	it	pl
 8004eac:	4253      	negpl	r3, r2
 8004eae:	b21b      	sxth	r3, r3
 8004eb0:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 8004eb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004eb8:	4619      	mov	r1, r3
 8004eba:	484b      	ldr	r0, [pc, #300]	; (8004fe8 <Vital_Msg_extr_from_CAN+0x9b0>)
 8004ebc:	f01d fd58 	bl	8022970 <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ec0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	441a      	add	r2, r3
 8004ec8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ecc:	2108      	movs	r1, #8
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fb fba0 	bl	8000614 <ExtractBits>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BITSTUFFINC(8);
 8004edc:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	da00      	bge.n	8004ee8 <Vital_Msg_extr_from_CAN+0x8b0>
 8004ee6:	3307      	adds	r3, #7
 8004ee8:	10db      	asrs	r3, r3, #3
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004ef6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004efa:	3308      	adds	r3, #8
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	b21b      	sxth	r3, r3
 8004f00:	425a      	negs	r2, r3
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	f002 0207 	and.w	r2, r2, #7
 8004f0a:	bf58      	it	pl
 8004f0c:	4253      	negpl	r3, r2
 8004f0e:	b21b      	sxth	r3, r3
 8004f10:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 8004f14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	if (noofIP != 0)
 8004f20:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <Vital_Msg_extr_from_CAN+0x900>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 8004f28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f2c:	08db      	lsrs	r3, r3, #3
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	3301      	adds	r3, #1
 8004f32:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004f36:	e004      	b.n	8004f42 <Vital_Msg_extr_from_CAN+0x90a>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 8004f38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f3c:	08db      	lsrs	r3, r3, #3
 8004f3e:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004f42:	2300      	movs	r3, #0
 8004f44:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004f48:	e040      	b.n	8004fcc <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004f4a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	441a      	add	r2, r3
 8004f52:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f56:	2108      	movs	r1, #8
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fb fb5b 	bl	8000614 <ExtractBits>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f6a:	443b      	add	r3, r7
 8004f6c:	f803 2cc7 	strb.w	r2, [r3, #-199]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 8004f70:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 8004f74:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004f78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f7c:	443b      	add	r3, r7
 8004f7e:	f813 3cc7 	ldrb.w	r3, [r3, #-199]
 8004f82:	461a      	mov	r2, r3
 8004f84:	4819      	ldr	r0, [pc, #100]	; (8004fec <Vital_Msg_extr_from_CAN+0x9b4>)
 8004f86:	f01d fcf3 	bl	8022970 <iprintf>
		BITSTUFFINC(8);
 8004f8a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004f8e:	3308      	adds	r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	da00      	bge.n	8004f96 <Vital_Msg_extr_from_CAN+0x95e>
 8004f94:	3307      	adds	r3, #7
 8004f96:	10db      	asrs	r3, r3, #3
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004fa4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004fa8:	3308      	adds	r3, #8
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	b21b      	sxth	r3, r3
 8004fae:	425a      	negs	r2, r3
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	f002 0207 	and.w	r2, r2, #7
 8004fb8:	bf58      	it	pl
 8004fba:	4253      	negpl	r3, r2
 8004fbc:	b21b      	sxth	r3, r3
 8004fbe:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004fc2:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004fcc:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d3b7      	bcc.n	8004f4a <Vital_Msg_extr_from_CAN+0x912>
	}
	printf("\n");
 8004fda:	200a      	movs	r0, #10
 8004fdc:	f01d fce0 	bl	80229a0 <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004fe6:	e037      	b.n	8005058 <Vital_Msg_extr_from_CAN+0xa20>
 8004fe8:	08024968 	.word	0x08024968
 8004fec:	08024970 	.word	0x08024970
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ff0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	441a      	add	r2, r3
 8004ff8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ffc:	2108      	movs	r1, #8
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fb fb08 	bl	8000614 <ExtractBits>
 8005004:	4602      	mov	r2, r0
 8005006:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005010:	443b      	add	r3, r7
 8005012:	f803 2cb7 	strb.w	r2, [r3, #-183]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 8005016:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800501a:	3308      	adds	r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	da00      	bge.n	8005022 <Vital_Msg_extr_from_CAN+0x9ea>
 8005020:	3307      	adds	r3, #7
 8005022:	10db      	asrs	r3, r3, #3
 8005024:	b29a      	uxth	r2, r3
 8005026:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800502a:	4413      	add	r3, r2
 800502c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005030:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005034:	3308      	adds	r3, #8
 8005036:	b29b      	uxth	r3, r3
 8005038:	b21b      	sxth	r3, r3
 800503a:	425a      	negs	r2, r3
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	f002 0207 	and.w	r2, r2, #7
 8005044:	bf58      	it	pl
 8005046:	4253      	negpl	r3, r2
 8005048:	b21b      	sxth	r3, r3
 800504a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 800504e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005052:	3301      	adds	r3, #1
 8005054:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005058:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800505c:	b29b      	uxth	r3, r3
 800505e:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8005062:	429a      	cmp	r2, r3
 8005064:	d3c4      	bcc.n	8004ff0 <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 8005066:	f107 0308 	add.w	r3, r7, #8
 800506a:	3301      	adds	r3, #1
 800506c:	2210      	movs	r2, #16
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f01d fb95 	bl	80227a0 <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 8005076:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 800507a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800507e:	1d59      	adds	r1, r3, #5
 8005080:	f107 0308 	add.w	r3, r7, #8
 8005084:	3301      	adds	r3, #1
 8005086:	4618      	mov	r0, r3
 8005088:	f01d fb62 	bl	8022750 <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 800508c:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005090:	b21a      	sxth	r2, r3
 8005092:	f107 0308 	add.w	r3, r7, #8
 8005096:	3301      	adds	r3, #1
 8005098:	4619      	mov	r1, r3
 800509a:	2000      	movs	r0, #0
 800509c:	f00d ffd8 	bl	8013050 <GetCRC16>
 80050a0:	4603      	mov	r3, r0
 80050a2:	837b      	strh	r3, [r7, #26]
	CAN_Relay_st.No_ofIps = noofIP;
 80050a4:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 80050a8:	767b      	strb	r3, [r7, #25]
	CAN_Relay_st.Peer_Index = Source_Index;
 80050aa:	78bb      	ldrb	r3, [r7, #2]
 80050ac:	723b      	strb	r3, [r7, #8]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 80050ae:	78bb      	ldrb	r3, [r7, #2]
 80050b0:	4a60      	ldr	r2, [pc, #384]	; (8005234 <Vital_Msg_extr_from_CAN+0xbfc>)
 80050b2:	4413      	add	r3, r2
 80050b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d17f      	bne.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
 80050bc:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d17b      	bne.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
 80050c4:	8b79      	ldrh	r1, [r7, #26]
 80050c6:	78ba      	ldrb	r2, [r7, #2]
 80050c8:	485b      	ldr	r0, [pc, #364]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4403      	add	r3, r0
 80050d4:	3312      	adds	r3, #18
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	4299      	cmp	r1, r3
 80050da:	d06f      	beq.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80050dc:	78ba      	ldrb	r2, [r7, #2]
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4a54      	ldr	r2, [pc, #336]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 80050e8:	4413      	add	r3, r2
 80050ea:	3301      	adds	r3, #1
 80050ec:	2210      	movs	r2, #16
 80050ee:	2100      	movs	r1, #0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f01d fb55 	bl	80227a0 <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 80050f6:	78ba      	ldrb	r2, [r7, #2]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4a4d      	ldr	r2, [pc, #308]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 8005102:	4413      	add	r3, r2
 8005104:	f107 0108 	add.w	r1, r7, #8
 8005108:	2214      	movs	r2, #20
 800510a:	4618      	mov	r0, r3
 800510c:	f01d fb20 	bl	8022750 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8005110:	78bb      	ldrb	r3, [r7, #2]
 8005112:	494a      	ldr	r1, [pc, #296]	; (800523c <Vital_Msg_extr_from_CAN+0xc04>)
 8005114:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 800511c:	78bb      	ldrb	r3, [r7, #2]
 800511e:	4a48      	ldr	r2, [pc, #288]	; (8005240 <Vital_Msg_extr_from_CAN+0xc08>)
 8005120:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005124:	78ba      	ldrb	r2, [r7, #2]
 8005126:	4844      	ldr	r0, [pc, #272]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4403      	add	r3, r0
 8005132:	3312      	adds	r3, #18
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	4299      	cmp	r1, r3
 8005138:	d040      	beq.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 800513a:	78ba      	ldrb	r2, [r7, #2]
 800513c:	78b9      	ldrb	r1, [r7, #2]
 800513e:	483e      	ldr	r0, [pc, #248]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4403      	add	r3, r0
 800514a:	3312      	adds	r3, #18
 800514c:	881a      	ldrh	r2, [r3, #0]
 800514e:	4b3c      	ldr	r3, [pc, #240]	; (8005240 <Vital_Msg_extr_from_CAN+0xc08>)
 8005150:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005154:	2214      	movs	r2, #20
 8005156:	2100      	movs	r1, #0
 8005158:	483a      	ldr	r0, [pc, #232]	; (8005244 <Vital_Msg_extr_from_CAN+0xc0c>)
 800515a:	f01d fb21 	bl	80227a0 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 800515e:	78ba      	ldrb	r2, [r7, #2]
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4a33      	ldr	r2, [pc, #204]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 800516a:	4413      	add	r3, r2
 800516c:	2214      	movs	r2, #20
 800516e:	4619      	mov	r1, r3
 8005170:	4834      	ldr	r0, [pc, #208]	; (8005244 <Vital_Msg_extr_from_CAN+0xc0c>)
 8005172:	f01d faed 	bl	8022750 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8005176:	f240 2007 	movw	r0, #519	; 0x207
 800517a:	f00a fc25 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 800517e:	78bb      	ldrb	r3, [r7, #2]
 8005180:	4a31      	ldr	r2, [pc, #196]	; (8005248 <Vital_Msg_extr_from_CAN+0xc10>)
 8005182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d118      	bne.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800518a:	78bb      	ldrb	r3, [r7, #2]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	4a2f      	ldr	r2, [pc, #188]	; (800524c <Vital_Msg_extr_from_CAN+0xc14>)
 8005190:	4413      	add	r3, r2
 8005192:	1c98      	adds	r0, r3, #2
 8005194:	78ba      	ldrb	r2, [r7, #2]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4a26      	ldr	r2, [pc, #152]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 80051a0:	4413      	add	r3, r2
 80051a2:	3301      	adds	r3, #1
 80051a4:	2210      	movs	r2, #16
 80051a6:	4619      	mov	r1, r3
 80051a8:	f01d fad2 	bl	8022750 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 80051ac:	f240 1019 	movw	r0, #281	; 0x119
 80051b0:	f00a fc0a 	bl	800f9c8 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 80051b4:	4a26      	ldr	r2, [pc, #152]	; (8005250 <Vital_Msg_extr_from_CAN+0xc18>)
 80051b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051ba:	6013      	str	r3, [r2, #0]





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 80051bc:	78ba      	ldrb	r2, [r7, #2]
 80051be:	4925      	ldr	r1, [pc, #148]	; (8005254 <Vital_Msg_extr_from_CAN+0xc1c>)
 80051c0:	4613      	mov	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	4413      	add	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	440b      	add	r3, r1
 80051ca:	78ba      	ldrb	r2, [r7, #2]
 80051cc:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 80051ce:	78ba      	ldrb	r2, [r7, #2]
 80051d0:	4920      	ldr	r1, [pc, #128]	; (8005254 <Vital_Msg_extr_from_CAN+0xc1c>)
 80051d2:	4613      	mov	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	4413      	add	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	440b      	add	r3, r1
 80051dc:	3301      	adds	r3, #1
 80051de:	2201      	movs	r2, #1
 80051e0:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80051e2:	2218      	movs	r2, #24
 80051e4:	2100      	movs	r1, #0
 80051e6:	481c      	ldr	r0, [pc, #112]	; (8005258 <Vital_Msg_extr_from_CAN+0xc20>)
 80051e8:	f01d fada 	bl	80227a0 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80051ec:	78ba      	ldrb	r2, [r7, #2]
 80051ee:	4613      	mov	r3, r2
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	4413      	add	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	4a17      	ldr	r2, [pc, #92]	; (8005254 <Vital_Msg_extr_from_CAN+0xc1c>)
 80051f8:	4413      	add	r3, r2
 80051fa:	2218      	movs	r2, #24
 80051fc:	4619      	mov	r1, r3
 80051fe:	4816      	ldr	r0, [pc, #88]	; (8005258 <Vital_Msg_extr_from_CAN+0xc20>)
 8005200:	f01d faa6 	bl	8022750 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8005204:	f240 2001 	movw	r0, #513	; 0x201
 8005208:	f00a fbde 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800520c:	78ba      	ldrb	r2, [r7, #2]
 800520e:	4911      	ldr	r1, [pc, #68]	; (8005254 <Vital_Msg_extr_from_CAN+0xc1c>)
 8005210:	4613      	mov	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	4413      	add	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	440b      	add	r3, r1
 800521a:	3301      	adds	r3, #1
 800521c:	2200      	movs	r2, #0
 800521e:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005220:	78bb      	ldrb	r3, [r7, #2]
 8005222:	490e      	ldr	r1, [pc, #56]	; (800525c <Vital_Msg_extr_from_CAN+0xc24>)
 8005224:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 800522c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20000304 	.word	0x20000304
 8005238:	20001e80 	.word	0x20001e80
 800523c:	20000ed8 	.word	0x20000ed8
 8005240:	20000f00 	.word	0x20000f00
 8005244:	20002010 	.word	0x20002010
 8005248:	20000ec4 	.word	0x20000ec4
 800524c:	200010e4 	.word	0x200010e4
 8005250:	20000e70 	.word	0x20000e70
 8005254:	20001674 	.word	0x20001674
 8005258:	20001854 	.word	0x20001854
 800525c:	20000e44 	.word	0x20000e44

08005260 <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8005260:	b590      	push	{r4, r7, lr}
 8005262:	b095      	sub	sp, #84	; 0x54
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	4608      	mov	r0, r1
 800526a:	4611      	mov	r1, r2
 800526c:	461a      	mov	r2, r3
 800526e:	4603      	mov	r3, r0
 8005270:	70fb      	strb	r3, [r7, #3]
 8005272:	460b      	mov	r3, r1
 8005274:	70bb      	strb	r3, [r7, #2]
 8005276:	4613      	mov	r3, r2
 8005278:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 800527a:	2300      	movs	r3, #0
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	f107 030c 	add.w	r3, r7, #12
 8005282:	2224      	movs	r2, #36	; 0x24
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f01d fa8a 	bl	80227a0 <memset>
	uint8_t uc_index = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 8005296:	2300      	movs	r3, #0
 8005298:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = CLEAR;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 80052a0:	f010 fb68 	bl	8015974 <HAL_GetTick>
 80052a4:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 80052ac:	2300      	movs	r3, #0
 80052ae:	873b      	strh	r3, [r7, #56]	; 0x38
 80052b0:	2300      	movs	r3, #0
 80052b2:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80052b4:	499a      	ldr	r1, [pc, #616]	; (8005520 <Status_Msg_Extr+0x2c0>)
 80052b6:	489b      	ldr	r0, [pc, #620]	; (8005524 <Status_Msg_Extr+0x2c4>)
 80052b8:	f7fa ffc2 	bl	8000240 <strcmp>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 812c 	beq.w	800551c <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80052c4:	4b98      	ldr	r3, [pc, #608]	; (8005528 <Status_Msg_Extr+0x2c8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d02c      	beq.n	800532a <Status_Msg_Extr+0xca>
 80052d0:	4b95      	ldr	r3, [pc, #596]	; (8005528 <Status_Msg_Extr+0x2c8>)
 80052d2:	791b      	ldrb	r3, [r3, #4]
 80052d4:	78ba      	ldrb	r2, [r7, #2]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d127      	bne.n	800532a <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 80052de:	4893      	ldr	r0, [pc, #588]	; (800552c <Status_Msg_Extr+0x2cc>)
 80052e0:	f014 fffa 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 80052e4:	4602      	mov	r2, r0
 80052e6:	4b92      	ldr	r3, [pc, #584]	; (8005530 <Status_Msg_Extr+0x2d0>)
 80052e8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ec:	0bd9      	lsrs	r1, r3, #15
 80052ee:	460b      	mov	r3, r1
 80052f0:	041b      	lsls	r3, r3, #16
 80052f2:	1a5b      	subs	r3, r3, r1
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 80052f8:	488e      	ldr	r0, [pc, #568]	; (8005534 <Status_Msg_Extr+0x2d4>)
 80052fa:	f01d fbd5 	bl	8022aa8 <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80052fe:	78bb      	ldrb	r3, [r7, #2]
 8005300:	4a8d      	ldr	r2, [pc, #564]	; (8005538 <Status_Msg_Extr+0x2d8>)
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	4413      	add	r3, r2
 8005306:	3308      	adds	r3, #8
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4619      	mov	r1, r3
 800530c:	488b      	ldr	r0, [pc, #556]	; (800553c <Status_Msg_Extr+0x2dc>)
 800530e:	f01d fb2f 	bl	8022970 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8005312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005314:	488a      	ldr	r0, [pc, #552]	; (8005540 <Status_Msg_Extr+0x2e0>)
 8005316:	f01d fb2b 	bl	8022970 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 800531a:	f107 0208 	add.w	r2, r7, #8
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	2118      	movs	r1, #24
 8005322:	2000      	movs	r0, #0
 8005324:	f7fb fa02 	bl	800072c <InsertBits>
	{
 8005328:	e00b      	b.n	8005342 <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800532a:	78bb      	ldrb	r3, [r7, #2]
 800532c:	4a82      	ldr	r2, [pc, #520]	; (8005538 <Status_Msg_Extr+0x2d8>)
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	4413      	add	r3, r2
 8005332:	3308      	adds	r3, #8
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f107 0208 	add.w	r2, r7, #8
 800533a:	2118      	movs	r1, #24
 800533c:	2000      	movs	r0, #0
 800533e:	f7fb f9f5 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005342:	2300      	movs	r3, #0
 8005344:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005348:	e010      	b.n	800536c <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 800534a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	441a      	add	r2, r3
 8005352:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005356:	3303      	adds	r3, #3
 8005358:	7812      	ldrb	r2, [r2, #0]
 800535a:	3350      	adds	r3, #80	; 0x50
 800535c:	443b      	add	r3, r7
 800535e:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005362:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005366:	3301      	adds	r3, #1
 8005368:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800536c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	3b05      	subs	r3, #5
 8005374:	429a      	cmp	r2, r3
 8005376:	dbe8      	blt.n	800534a <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005378:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800537c:	b29b      	uxth	r3, r3
 800537e:	3303      	adds	r3, #3
 8005380:	b29a      	uxth	r2, r3
 8005382:	f107 0308 	add.w	r3, r7, #8
 8005386:	4611      	mov	r1, r2
 8005388:	4618      	mov	r0, r3
 800538a:	f00d ff1b 	bl	80131c4 <CalculateDirectReverseCrc>
 800538e:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	3b05      	subs	r3, #5
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	441a      	add	r2, r3
 8005398:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800539a:	2120      	movs	r1, #32
 800539c:	4618      	mov	r0, r3
 800539e:	f7fb f939 	bl	8000614 <ExtractBits>
 80053a2:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 80053a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a8:	429a      	cmp	r2, r3
 80053aa:	f000 80df 	beq.w	800556c <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3305      	adds	r3, #5
 80053b2:	461a      	mov	r2, r3
 80053b4:	2108      	movs	r1, #8
 80053b6:	2000      	movs	r0, #0
 80053b8:	f7fb f92c 	bl	8000614 <ExtractBits>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 80053c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <Status_Msg_Extr+0x174>
 80053ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	f040 8090 	bne.w	80054f4 <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80053d4:	78bb      	ldrb	r3, [r7, #2]
 80053d6:	4a5b      	ldr	r2, [pc, #364]	; (8005544 <Status_Msg_Extr+0x2e4>)
 80053d8:	3366      	adds	r3, #102	; 0x66
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	4619      	mov	r1, r3
 80053e2:	4859      	ldr	r0, [pc, #356]	; (8005548 <Status_Msg_Extr+0x2e8>)
 80053e4:	f01d fac4 	bl	8022970 <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 80053e8:	f107 0308 	add.w	r3, r7, #8
 80053ec:	2228      	movs	r2, #40	; 0x28
 80053ee:	2100      	movs	r1, #0
 80053f0:	4618      	mov	r0, r3
 80053f2:	f01d f9d5 	bl	80227a0 <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 80053f6:	78bb      	ldrb	r3, [r7, #2]
 80053f8:	4a4f      	ldr	r2, [pc, #316]	; (8005538 <Status_Msg_Extr+0x2d8>)
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	4413      	add	r3, r2
 80053fe:	3308      	adds	r3, #8
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3301      	adds	r3, #1
 8005404:	f107 0208 	add.w	r2, r7, #8
 8005408:	2118      	movs	r1, #24
 800540a:	2000      	movs	r0, #0
 800540c:	f7fb f98e 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005410:	2300      	movs	r3, #0
 8005412:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005416:	e010      	b.n	800543a <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005418:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	441a      	add	r2, r3
 8005420:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005424:	3303      	adds	r3, #3
 8005426:	7812      	ldrb	r2, [r2, #0]
 8005428:	3350      	adds	r3, #80	; 0x50
 800542a:	443b      	add	r3, r7
 800542c:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005430:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005434:	3301      	adds	r3, #1
 8005436:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800543a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	3b05      	subs	r3, #5
 8005442:	429a      	cmp	r2, r3
 8005444:	dbe8      	blt.n	8005418 <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005446:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800544a:	b29b      	uxth	r3, r3
 800544c:	3303      	adds	r3, #3
 800544e:	b29a      	uxth	r2, r3
 8005450:	f107 0308 	add.w	r3, r7, #8
 8005454:	4611      	mov	r1, r2
 8005456:	4618      	mov	r0, r3
 8005458:	f00d feb4 	bl	80131c4 <CalculateDirectReverseCrc>
 800545c:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 800545e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005462:	429a      	cmp	r2, r3
 8005464:	d132      	bne.n	80054cc <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8005466:	4839      	ldr	r0, [pc, #228]	; (800554c <Status_Msg_Extr+0x2ec>)
 8005468:	f01d fb1e 	bl	8022aa8 <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800546c:	78bb      	ldrb	r3, [r7, #2]
 800546e:	4a32      	ldr	r2, [pc, #200]	; (8005538 <Status_Msg_Extr+0x2d8>)
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	4413      	add	r3, r2
 8005474:	3308      	adds	r3, #8
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4619      	mov	r1, r3
 800547a:	4835      	ldr	r0, [pc, #212]	; (8005550 <Status_Msg_Extr+0x2f0>)
 800547c:	f01d fa78 	bl	8022970 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005480:	78bb      	ldrb	r3, [r7, #2]
 8005482:	492d      	ldr	r1, [pc, #180]	; (8005538 <Status_Msg_Extr+0x2d8>)
 8005484:	011a      	lsls	r2, r3, #4
 8005486:	440a      	add	r2, r1
 8005488:	3208      	adds	r2, #8
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	3201      	adds	r2, #1
 800548e:	492a      	ldr	r1, [pc, #168]	; (8005538 <Status_Msg_Extr+0x2d8>)
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	440b      	add	r3, r1
 8005494:	3308      	adds	r3, #8
 8005496:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005498:	78bb      	ldrb	r3, [r7, #2]
 800549a:	4a27      	ldr	r2, [pc, #156]	; (8005538 <Status_Msg_Extr+0x2d8>)
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	4413      	add	r3, r2
 80054a0:	3308      	adds	r3, #8
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4619      	mov	r1, r3
 80054a6:	482b      	ldr	r0, [pc, #172]	; (8005554 <Status_Msg_Extr+0x2f4>)
 80054a8:	f01d fa62 	bl	8022970 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80054ac:	78bb      	ldrb	r3, [r7, #2]
 80054ae:	78ba      	ldrb	r2, [r7, #2]
 80054b0:	4921      	ldr	r1, [pc, #132]	; (8005538 <Status_Msg_Extr+0x2d8>)
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	440b      	add	r3, r1
 80054b6:	3308      	adds	r3, #8
 80054b8:	6819      	ldr	r1, [r3, #0]
 80054ba:	4827      	ldr	r0, [pc, #156]	; (8005558 <Status_Msg_Extr+0x2f8>)
 80054bc:	4613      	mov	r3, r2
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	4413      	add	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4403      	add	r3, r0
 80054c6:	3308      	adds	r3, #8
 80054c8:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 80054ca:	e050      	b.n	800556e <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80054cc:	78bb      	ldrb	r3, [r7, #2]
 80054ce:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <Status_Msg_Extr+0x2e4>)
 80054d0:	3366      	adds	r3, #102	; 0x66
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	4619      	mov	r1, r3
 80054da:	4820      	ldr	r0, [pc, #128]	; (800555c <Status_Msg_Extr+0x2fc>)
 80054dc:	f01d fa48 	bl	8022970 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 80054e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054e2:	481f      	ldr	r0, [pc, #124]	; (8005560 <Status_Msg_Extr+0x300>)
 80054e4:	f01d fa44 	bl	8022970 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 80054e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054ea:	481e      	ldr	r0, [pc, #120]	; (8005564 <Status_Msg_Extr+0x304>)
 80054ec:	f01d fa40 	bl	8022970 <iprintf>
				return;
 80054f0:	f000 bc33 	b.w	8005d5a <Status_Msg_Extr+0xafa>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80054f4:	78bb      	ldrb	r3, [r7, #2]
 80054f6:	4a13      	ldr	r2, [pc, #76]	; (8005544 <Status_Msg_Extr+0x2e4>)
 80054f8:	3366      	adds	r3, #102	; 0x66
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	4619      	mov	r1, r3
 8005502:	4819      	ldr	r0, [pc, #100]	; (8005568 <Status_Msg_Extr+0x308>)
 8005504:	f01d fa34 	bl	8022970 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005508:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800550a:	4815      	ldr	r0, [pc, #84]	; (8005560 <Status_Msg_Extr+0x300>)
 800550c:	f01d fa30 	bl	8022970 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005510:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005512:	4814      	ldr	r0, [pc, #80]	; (8005564 <Status_Msg_Extr+0x304>)
 8005514:	f01d fa2c 	bl	8022970 <iprintf>
			return;
 8005518:	f000 bc1f 	b.w	8005d5a <Status_Msg_Extr+0xafa>
		goto ROLLOVER_STATUS;
 800551c:	bf00      	nop
 800551e:	e026      	b.n	800556e <Status_Msg_Extr+0x30e>
 8005520:	0802411c 	.word	0x0802411c
 8005524:	20000305 	.word	0x20000305
 8005528:	2000195c 	.word	0x2000195c
 800552c:	20009d20 	.word	0x20009d20
 8005530:	80008001 	.word	0x80008001
 8005534:	08024980 	.word	0x08024980
 8005538:	200011c4 	.word	0x200011c4
 800553c:	080249a0 	.word	0x080249a0
 8005540:	08024668 	.word	0x08024668
 8005544:	20000304 	.word	0x20000304
 8005548:	080249c4 	.word	0x080249c4
 800554c:	080246ac 	.word	0x080246ac
 8005550:	080249e8 	.word	0x080249e8
 8005554:	08024a00 	.word	0x08024a00
 8005558:	20001674 	.word	0x20001674
 800555c:	08024a18 	.word	0x08024a18
 8005560:	08024360 	.word	0x08024360
 8005564:	08024370 	.word	0x08024370
 8005568:	08024a38 	.word	0x08024a38
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 800556c:	bf00      	nop

	BITSTUFFINC(8);
 800556e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005572:	3308      	adds	r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	da00      	bge.n	800557a <Status_Msg_Extr+0x31a>
 8005578:	3307      	adds	r3, #7
 800557a:	10db      	asrs	r3, r3, #3
 800557c:	b29a      	uxth	r2, r3
 800557e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005580:	4413      	add	r3, r2
 8005582:	873b      	strh	r3, [r7, #56]	; 0x38
 8005584:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005586:	3308      	adds	r3, #8
 8005588:	b29b      	uxth	r3, r3
 800558a:	b21b      	sxth	r3, r3
 800558c:	425a      	negs	r2, r3
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	f002 0207 	and.w	r2, r2, #7
 8005596:	bf58      	it	pl
 8005598:	4253      	negpl	r3, r2
 800559a:	b21b      	sxth	r3, r3
 800559c:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800559e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	441a      	add	r2, r3
 80055a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055a6:	2110      	movs	r1, #16
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fb f833 	bl	8000614 <ExtractBits>
 80055ae:	4603      	mov	r3, r0
 80055b0:	78ba      	ldrb	r2, [r7, #2]
 80055b2:	b298      	uxth	r0, r3
 80055b4:	49ab      	ldr	r1, [pc, #684]	; (8005864 <Status_Msg_Extr+0x604>)
 80055b6:	4613      	mov	r3, r2
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	3306      	adds	r3, #6
 80055c2:	4602      	mov	r2, r0
 80055c4:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 80055c6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80055ca:	3310      	adds	r3, #16
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	da00      	bge.n	80055d2 <Status_Msg_Extr+0x372>
 80055d0:	3307      	adds	r3, #7
 80055d2:	10db      	asrs	r3, r3, #3
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055d8:	4413      	add	r3, r2
 80055da:	873b      	strh	r3, [r7, #56]	; 0x38
 80055dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055de:	3310      	adds	r3, #16
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	b21b      	sxth	r3, r3
 80055e4:	425a      	negs	r2, r3
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	f002 0207 	and.w	r2, r2, #7
 80055ee:	bf58      	it	pl
 80055f0:	4253      	negpl	r3, r2
 80055f2:	b21b      	sxth	r3, r3
 80055f4:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80055f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	441a      	add	r2, r3
 80055fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055fe:	2110      	movs	r1, #16
 8005600:	4618      	mov	r0, r3
 8005602:	f7fb f807 	bl	8000614 <ExtractBits>
 8005606:	4603      	mov	r3, r0
 8005608:	78ba      	ldrb	r2, [r7, #2]
 800560a:	b298      	uxth	r0, r3
 800560c:	4995      	ldr	r1, [pc, #596]	; (8005864 <Status_Msg_Extr+0x604>)
 800560e:	4613      	mov	r3, r2
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	3304      	adds	r3, #4
 800561a:	4602      	mov	r2, r0
 800561c:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 800561e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005622:	3310      	adds	r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	da00      	bge.n	800562a <Status_Msg_Extr+0x3ca>
 8005628:	3307      	adds	r3, #7
 800562a:	10db      	asrs	r3, r3, #3
 800562c:	b29a      	uxth	r2, r3
 800562e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005630:	4413      	add	r3, r2
 8005632:	873b      	strh	r3, [r7, #56]	; 0x38
 8005634:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005636:	3310      	adds	r3, #16
 8005638:	b29b      	uxth	r3, r3
 800563a:	b21b      	sxth	r3, r3
 800563c:	425a      	negs	r2, r3
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	f002 0207 	and.w	r2, r2, #7
 8005646:	bf58      	it	pl
 8005648:	4253      	negpl	r3, r2
 800564a:	b21b      	sxth	r3, r3
 800564c:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800564e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	441a      	add	r2, r3
 8005654:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005656:	2108      	movs	r1, #8
 8005658:	4618      	mov	r0, r3
 800565a:	f7fa ffdb 	bl	8000614 <ExtractBits>
 800565e:	4602      	mov	r2, r0
 8005660:	78bb      	ldrb	r3, [r7, #2]
 8005662:	b2d1      	uxtb	r1, r2
 8005664:	4a80      	ldr	r2, [pc, #512]	; (8005868 <Status_Msg_Extr+0x608>)
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	4413      	add	r3, r2
 800566a:	3302      	adds	r3, #2
 800566c:	460a      	mov	r2, r1
 800566e:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8005670:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005674:	3308      	adds	r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	da00      	bge.n	800567c <Status_Msg_Extr+0x41c>
 800567a:	3307      	adds	r3, #7
 800567c:	10db      	asrs	r3, r3, #3
 800567e:	b29a      	uxth	r2, r3
 8005680:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005682:	4413      	add	r3, r2
 8005684:	873b      	strh	r3, [r7, #56]	; 0x38
 8005686:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005688:	3308      	adds	r3, #8
 800568a:	b29b      	uxth	r3, r3
 800568c:	b21b      	sxth	r3, r3
 800568e:	425a      	negs	r2, r3
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	f002 0207 	and.w	r2, r2, #7
 8005698:	bf58      	it	pl
 800569a:	4253      	negpl	r3, r2
 800569c:	b21b      	sxth	r3, r3
 800569e:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80056a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	441a      	add	r2, r3
 80056a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056a8:	2108      	movs	r1, #8
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fa ffb2 	bl	8000614 <ExtractBits>
 80056b0:	4602      	mov	r2, r0
 80056b2:	78bb      	ldrb	r3, [r7, #2]
 80056b4:	b2d1      	uxtb	r1, r2
 80056b6:	4a6c      	ldr	r2, [pc, #432]	; (8005868 <Status_Msg_Extr+0x608>)
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	4413      	add	r3, r2
 80056bc:	3301      	adds	r3, #1
 80056be:	460a      	mov	r2, r1
 80056c0:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 80056c2:	78bb      	ldrb	r3, [r7, #2]
 80056c4:	4a68      	ldr	r2, [pc, #416]	; (8005868 <Status_Msg_Extr+0x608>)
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	4413      	add	r3, r2
 80056ca:	3301      	adds	r3, #1
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d138      	bne.n	8005744 <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80056d2:	78bb      	ldrb	r3, [r7, #2]
 80056d4:	4a65      	ldr	r2, [pc, #404]	; (800586c <Status_Msg_Extr+0x60c>)
 80056d6:	3366      	adds	r3, #102	; 0x66
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	4619      	mov	r1, r3
 80056e0:	4863      	ldr	r0, [pc, #396]	; (8005870 <Status_Msg_Extr+0x610>)
 80056e2:	f01d f945 	bl	8022970 <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80056e6:	78bb      	ldrb	r3, [r7, #2]
 80056e8:	4a5f      	ldr	r2, [pc, #380]	; (8005868 <Status_Msg_Extr+0x608>)
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	4413      	add	r3, r2
 80056ee:	330c      	adds	r3, #12
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4619      	mov	r1, r3
 80056f4:	485f      	ldr	r0, [pc, #380]	; (8005874 <Status_Msg_Extr+0x614>)
 80056f6:	f01d f93b 	bl	8022970 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80056fa:	78bb      	ldrb	r3, [r7, #2]
 80056fc:	495a      	ldr	r1, [pc, #360]	; (8005868 <Status_Msg_Extr+0x608>)
 80056fe:	011a      	lsls	r2, r3, #4
 8005700:	440a      	add	r2, r1
 8005702:	320c      	adds	r2, #12
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	3201      	adds	r2, #1
 8005708:	4957      	ldr	r1, [pc, #348]	; (8005868 <Status_Msg_Extr+0x608>)
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	440b      	add	r3, r1
 800570e:	330c      	adds	r3, #12
 8005710:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005712:	78bb      	ldrb	r3, [r7, #2]
 8005714:	4a54      	ldr	r2, [pc, #336]	; (8005868 <Status_Msg_Extr+0x608>)
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	4413      	add	r3, r2
 800571a:	330c      	adds	r3, #12
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4619      	mov	r1, r3
 8005720:	4855      	ldr	r0, [pc, #340]	; (8005878 <Status_Msg_Extr+0x618>)
 8005722:	f01d f925 	bl	8022970 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8005726:	78bb      	ldrb	r3, [r7, #2]
 8005728:	78ba      	ldrb	r2, [r7, #2]
 800572a:	494f      	ldr	r1, [pc, #316]	; (8005868 <Status_Msg_Extr+0x608>)
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	440b      	add	r3, r1
 8005730:	330c      	adds	r3, #12
 8005732:	6819      	ldr	r1, [r3, #0]
 8005734:	4851      	ldr	r0, [pc, #324]	; (800587c <Status_Msg_Extr+0x61c>)
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4403      	add	r3, r0
 8005740:	330c      	adds	r3, #12
 8005742:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8005744:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005748:	3308      	adds	r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	da00      	bge.n	8005750 <Status_Msg_Extr+0x4f0>
 800574e:	3307      	adds	r3, #7
 8005750:	10db      	asrs	r3, r3, #3
 8005752:	b29a      	uxth	r2, r3
 8005754:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005756:	4413      	add	r3, r2
 8005758:	873b      	strh	r3, [r7, #56]	; 0x38
 800575a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800575c:	3308      	adds	r3, #8
 800575e:	b29b      	uxth	r3, r3
 8005760:	b21b      	sxth	r3, r3
 8005762:	425a      	negs	r2, r3
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	f002 0207 	and.w	r2, r2, #7
 800576c:	bf58      	it	pl
 800576e:	4253      	negpl	r3, r2
 8005770:	b21b      	sxth	r3, r3
 8005772:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005774:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	441a      	add	r2, r3
 800577a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800577c:	2108      	movs	r1, #8
 800577e:	4618      	mov	r0, r3
 8005780:	f7fa ff48 	bl	8000614 <ExtractBits>
 8005784:	4603      	mov	r3, r0
 8005786:	78ba      	ldrb	r2, [r7, #2]
 8005788:	b2d8      	uxtb	r0, r3
 800578a:	4936      	ldr	r1, [pc, #216]	; (8005864 <Status_Msg_Extr+0x604>)
 800578c:	4613      	mov	r3, r2
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	3302      	adds	r3, #2
 8005798:	4602      	mov	r2, r0
 800579a:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 800579c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80057a0:	3308      	adds	r3, #8
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	da00      	bge.n	80057a8 <Status_Msg_Extr+0x548>
 80057a6:	3307      	adds	r3, #7
 80057a8:	10db      	asrs	r3, r3, #3
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057ae:	4413      	add	r3, r2
 80057b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80057b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057b4:	3308      	adds	r3, #8
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	b21b      	sxth	r3, r3
 80057ba:	425a      	negs	r2, r3
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	f002 0207 	and.w	r2, r2, #7
 80057c4:	bf58      	it	pl
 80057c6:	4253      	negpl	r3, r2
 80057c8:	b21b      	sxth	r3, r3
 80057ca:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80057cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	441a      	add	r2, r3
 80057d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057d4:	2110      	movs	r1, #16
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fa ff1c 	bl	8000614 <ExtractBits>
 80057dc:	4602      	mov	r2, r0
 80057de:	78bb      	ldrb	r3, [r7, #2]
 80057e0:	b291      	uxth	r1, r2
 80057e2:	4a21      	ldr	r2, [pc, #132]	; (8005868 <Status_Msg_Extr+0x608>)
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	4413      	add	r3, r2
 80057e8:	3304      	adds	r3, #4
 80057ea:	460a      	mov	r2, r1
 80057ec:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80057ee:	4924      	ldr	r1, [pc, #144]	; (8005880 <Status_Msg_Extr+0x620>)
 80057f0:	4824      	ldr	r0, [pc, #144]	; (8005884 <Status_Msg_Extr+0x624>)
 80057f2:	f7fa fd25 	bl	8000240 <strcmp>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10f      	bne.n	800581c <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80057fc:	78bb      	ldrb	r3, [r7, #2]
 80057fe:	4a1a      	ldr	r2, [pc, #104]	; (8005868 <Status_Msg_Extr+0x608>)
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	4413      	add	r3, r2
 8005804:	3304      	adds	r3, #4
 8005806:	881a      	ldrh	r2, [r3, #0]
 8005808:	78bb      	ldrb	r3, [r7, #2]
 800580a:	f042 0208 	orr.w	r2, r2, #8
 800580e:	b291      	uxth	r1, r2
 8005810:	4a15      	ldr	r2, [pc, #84]	; (8005868 <Status_Msg_Extr+0x608>)
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	4413      	add	r3, r2
 8005816:	3304      	adds	r3, #4
 8005818:	460a      	mov	r2, r1
 800581a:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 800581c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005820:	3310      	adds	r3, #16
 8005822:	2b00      	cmp	r3, #0
 8005824:	da00      	bge.n	8005828 <Status_Msg_Extr+0x5c8>
 8005826:	3307      	adds	r3, #7
 8005828:	10db      	asrs	r3, r3, #3
 800582a:	b29a      	uxth	r2, r3
 800582c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800582e:	4413      	add	r3, r2
 8005830:	873b      	strh	r3, [r7, #56]	; 0x38
 8005832:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005834:	3310      	adds	r3, #16
 8005836:	b29b      	uxth	r3, r3
 8005838:	b21b      	sxth	r3, r3
 800583a:	425a      	negs	r2, r3
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	f002 0207 	and.w	r2, r2, #7
 8005844:	bf58      	it	pl
 8005846:	4253      	negpl	r3, r2
 8005848:	b21b      	sxth	r3, r3
 800584a:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 800584c:	78bb      	ldrb	r3, [r7, #2]
 800584e:	4a06      	ldr	r2, [pc, #24]	; (8005868 <Status_Msg_Extr+0x608>)
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	4413      	add	r3, r2
 8005854:	3304      	adds	r3, #4
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 812f 	beq.w	8005ac0 <Status_Msg_Extr+0x860>
 8005862:	e011      	b.n	8005888 <Status_Msg_Extr+0x628>
 8005864:	200015fc 	.word	0x200015fc
 8005868:	200011c4 	.word	0x200011c4
 800586c:	20000304 	.word	0x20000304
 8005870:	08024764 	.word	0x08024764
 8005874:	08024a50 	.word	0x08024a50
 8005878:	08024a5c 	.word	0x08024a5c
 800587c:	20001674 	.word	0x20001674
 8005880:	0802411c 	.word	0x0802411c
 8005884:	20000305 	.word	0x20000305
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005888:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	441a      	add	r2, r3
 800588e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005890:	2108      	movs	r1, #8
 8005892:	4618      	mov	r0, r3
 8005894:	f7fa febe 	bl	8000614 <ExtractBits>
 8005898:	4603      	mov	r3, r0
 800589a:	78ba      	ldrb	r2, [r7, #2]
 800589c:	b2d8      	uxtb	r0, r3
 800589e:	4984      	ldr	r1, [pc, #528]	; (8005ab0 <Status_Msg_Extr+0x850>)
 80058a0:	4613      	mov	r3, r2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	4413      	add	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	440b      	add	r3, r1
 80058aa:	3305      	adds	r3, #5
 80058ac:	4602      	mov	r2, r0
 80058ae:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80058b0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80058b4:	3308      	adds	r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	da00      	bge.n	80058bc <Status_Msg_Extr+0x65c>
 80058ba:	3307      	adds	r3, #7
 80058bc:	10db      	asrs	r3, r3, #3
 80058be:	b29a      	uxth	r2, r3
 80058c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058c2:	4413      	add	r3, r2
 80058c4:	873b      	strh	r3, [r7, #56]	; 0x38
 80058c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058c8:	3308      	adds	r3, #8
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	b21b      	sxth	r3, r3
 80058ce:	425a      	negs	r2, r3
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	f002 0207 	and.w	r2, r2, #7
 80058d8:	bf58      	it	pl
 80058da:	4253      	negpl	r3, r2
 80058dc:	b21b      	sxth	r3, r3
 80058de:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80058e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	441a      	add	r2, r3
 80058e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058e8:	2108      	movs	r1, #8
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fa fe92 	bl	8000614 <ExtractBits>
 80058f0:	4603      	mov	r3, r0
 80058f2:	78ba      	ldrb	r2, [r7, #2]
 80058f4:	b2d8      	uxtb	r0, r3
 80058f6:	496e      	ldr	r1, [pc, #440]	; (8005ab0 <Status_Msg_Extr+0x850>)
 80058f8:	4613      	mov	r3, r2
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	4413      	add	r3, r2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	440b      	add	r3, r1
 8005902:	3304      	adds	r3, #4
 8005904:	4602      	mov	r2, r0
 8005906:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005908:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800590c:	3308      	adds	r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	da00      	bge.n	8005914 <Status_Msg_Extr+0x6b4>
 8005912:	3307      	adds	r3, #7
 8005914:	10db      	asrs	r3, r3, #3
 8005916:	b29a      	uxth	r2, r3
 8005918:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800591a:	4413      	add	r3, r2
 800591c:	873b      	strh	r3, [r7, #56]	; 0x38
 800591e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005920:	3308      	adds	r3, #8
 8005922:	b29b      	uxth	r3, r3
 8005924:	b21b      	sxth	r3, r3
 8005926:	425a      	negs	r2, r3
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	f002 0207 	and.w	r2, r2, #7
 8005930:	bf58      	it	pl
 8005932:	4253      	negpl	r3, r2
 8005934:	b21b      	sxth	r3, r3
 8005936:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005938:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	441a      	add	r2, r3
 800593e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005940:	2108      	movs	r1, #8
 8005942:	4618      	mov	r0, r3
 8005944:	f7fa fe66 	bl	8000614 <ExtractBits>
 8005948:	4603      	mov	r3, r0
 800594a:	78ba      	ldrb	r2, [r7, #2]
 800594c:	b2d8      	uxtb	r0, r3
 800594e:	4958      	ldr	r1, [pc, #352]	; (8005ab0 <Status_Msg_Extr+0x850>)
 8005950:	4613      	mov	r3, r2
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	4413      	add	r3, r2
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	440b      	add	r3, r1
 800595a:	3303      	adds	r3, #3
 800595c:	4602      	mov	r2, r0
 800595e:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005960:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005964:	3308      	adds	r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	da00      	bge.n	800596c <Status_Msg_Extr+0x70c>
 800596a:	3307      	adds	r3, #7
 800596c:	10db      	asrs	r3, r3, #3
 800596e:	b29a      	uxth	r2, r3
 8005970:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005972:	4413      	add	r3, r2
 8005974:	873b      	strh	r3, [r7, #56]	; 0x38
 8005976:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005978:	3308      	adds	r3, #8
 800597a:	b29b      	uxth	r3, r3
 800597c:	b21b      	sxth	r3, r3
 800597e:	425a      	negs	r2, r3
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	f002 0207 	and.w	r2, r2, #7
 8005988:	bf58      	it	pl
 800598a:	4253      	negpl	r3, r2
 800598c:	b21b      	sxth	r3, r3
 800598e:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005990:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	441a      	add	r2, r3
 8005996:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005998:	2108      	movs	r1, #8
 800599a:	4618      	mov	r0, r3
 800599c:	f7fa fe3a 	bl	8000614 <ExtractBits>
 80059a0:	4603      	mov	r3, r0
 80059a2:	78ba      	ldrb	r2, [r7, #2]
 80059a4:	b2d8      	uxtb	r0, r3
 80059a6:	4942      	ldr	r1, [pc, #264]	; (8005ab0 <Status_Msg_Extr+0x850>)
 80059a8:	4613      	mov	r3, r2
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	4413      	add	r3, r2
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	440b      	add	r3, r1
 80059b2:	4602      	mov	r2, r0
 80059b4:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80059b6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80059ba:	3308      	adds	r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	da00      	bge.n	80059c2 <Status_Msg_Extr+0x762>
 80059c0:	3307      	adds	r3, #7
 80059c2:	10db      	asrs	r3, r3, #3
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059c8:	4413      	add	r3, r2
 80059ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80059cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059ce:	3308      	adds	r3, #8
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	b21b      	sxth	r3, r3
 80059d4:	425a      	negs	r2, r3
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	f002 0207 	and.w	r2, r2, #7
 80059de:	bf58      	it	pl
 80059e0:	4253      	negpl	r3, r2
 80059e2:	b21b      	sxth	r3, r3
 80059e4:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80059e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	441a      	add	r2, r3
 80059ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059ee:	2108      	movs	r1, #8
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fa fe0f 	bl	8000614 <ExtractBits>
 80059f6:	4603      	mov	r3, r0
 80059f8:	78ba      	ldrb	r2, [r7, #2]
 80059fa:	b2d8      	uxtb	r0, r3
 80059fc:	492c      	ldr	r1, [pc, #176]	; (8005ab0 <Status_Msg_Extr+0x850>)
 80059fe:	4613      	mov	r3, r2
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4413      	add	r3, r2
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	440b      	add	r3, r1
 8005a08:	3301      	adds	r3, #1
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a0e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a12:	3308      	adds	r3, #8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	da00      	bge.n	8005a1a <Status_Msg_Extr+0x7ba>
 8005a18:	3307      	adds	r3, #7
 8005a1a:	10db      	asrs	r3, r3, #3
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a20:	4413      	add	r3, r2
 8005a22:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a26:	3308      	adds	r3, #8
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	b21b      	sxth	r3, r3
 8005a2c:	425a      	negs	r2, r3
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	f002 0207 	and.w	r2, r2, #7
 8005a36:	bf58      	it	pl
 8005a38:	4253      	negpl	r3, r2
 8005a3a:	b21b      	sxth	r3, r3
 8005a3c:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005a3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	441a      	add	r2, r3
 8005a44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a46:	2108      	movs	r1, #8
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fa fde3 	bl	8000614 <ExtractBits>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	78ba      	ldrb	r2, [r7, #2]
 8005a52:	b2d8      	uxtb	r0, r3
 8005a54:	4916      	ldr	r1, [pc, #88]	; (8005ab0 <Status_Msg_Extr+0x850>)
 8005a56:	4613      	mov	r3, r2
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	440b      	add	r3, r1
 8005a60:	3302      	adds	r3, #2
 8005a62:	4602      	mov	r2, r0
 8005a64:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a66:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	da00      	bge.n	8005a72 <Status_Msg_Extr+0x812>
 8005a70:	3307      	adds	r3, #7
 8005a72:	10db      	asrs	r3, r3, #3
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a78:	4413      	add	r3, r2
 8005a7a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a7e:	3308      	adds	r3, #8
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	b21b      	sxth	r3, r3
 8005a84:	425a      	negs	r2, r3
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	f002 0207 	and.w	r2, r2, #7
 8005a8e:	bf58      	it	pl
 8005a90:	4253      	negpl	r3, r2
 8005a92:	b21b      	sxth	r3, r3
 8005a94:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8005a96:	78bb      	ldrb	r3, [r7, #2]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f003 f937 	bl	8008d0c <IS_MLK_EIPC_TIME_MATCHING>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d009      	beq.n	8005ab8 <Status_Msg_Extr+0x858>
 8005aa4:	78bb      	ldrb	r3, [r7, #2]
 8005aa6:	4a03      	ldr	r2, [pc, #12]	; (8005ab4 <Status_Msg_Extr+0x854>)
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	54d1      	strb	r1, [r2, r3]
 8005aac:	e008      	b.n	8005ac0 <Status_Msg_Extr+0x860>
 8005aae:	bf00      	nop
 8005ab0:	20001188 	.word	0x20001188
 8005ab4:	200010d8 	.word	0x200010d8
 8005ab8:	78bb      	ldrb	r3, [r7, #2]
 8005aba:	4aa9      	ldr	r2, [pc, #676]	; (8005d60 <Status_Msg_Extr+0xb00>)
 8005abc:	2101      	movs	r1, #1
 8005abe:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8005ac0:	78bb      	ldrb	r3, [r7, #2]
 8005ac2:	4aa8      	ldr	r2, [pc, #672]	; (8005d64 <Status_Msg_Extr+0xb04>)
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3304      	adds	r3, #4
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <Status_Msg_Extr+0x87a>
	{
		LinkEstablishFlag = SET;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8005ada:	787a      	ldrb	r2, [r7, #1]
 8005adc:	78bb      	ldrb	r3, [r7, #2]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 f961 	bl	8005da8 <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 8005ae6:	78bb      	ldrb	r3, [r7, #2]
 8005ae8:	499f      	ldr	r1, [pc, #636]	; (8005d68 <Status_Msg_Extr+0xb08>)
 8005aea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8005af0:	78bb      	ldrb	r3, [r7, #2]
 8005af2:	499e      	ldr	r1, [pc, #632]	; (8005d6c <Status_Msg_Extr+0xb0c>)
 8005af4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8005afa:	78ba      	ldrb	r2, [r7, #2]
 8005afc:	499c      	ldr	r1, [pc, #624]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005afe:	4613      	mov	r3, r2
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	4413      	add	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	440b      	add	r3, r1
 8005b08:	3310      	adds	r3, #16
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	78bc      	ldrb	r4, [r7, #2]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f009 f9a6 	bl	800ee60 <HAL_Elaps_Ticks>
 8005b14:	4602      	mov	r2, r0
 8005b16:	4996      	ldr	r1, [pc, #600]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005b18:	4623      	mov	r3, r4
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4423      	add	r3, r4
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	440b      	add	r3, r1
 8005b22:	3310      	adds	r3, #16
 8005b24:	601a      	str	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 8005b26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d16d      	bne.n	8005c0a <Status_Msg_Extr+0x9aa>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005b2e:	78ba      	ldrb	r2, [r7, #2]
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4a8e      	ldr	r2, [pc, #568]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	2210      	movs	r2, #16
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f01c fe2c 	bl	80227a0 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8005b48:	78ba      	ldrb	r2, [r7, #2]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4a88      	ldr	r2, [pc, #544]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005b54:	1898      	adds	r0, r3, r2
 8005b56:	78ba      	ldrb	r2, [r7, #2]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4a85      	ldr	r2, [pc, #532]	; (8005d78 <Status_Msg_Extr+0xb18>)
 8005b62:	4413      	add	r3, r2
 8005b64:	2214      	movs	r2, #20
 8005b66:	4619      	mov	r1, r3
 8005b68:	f01c fdf2 	bl	8022750 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005b6c:	78bb      	ldrb	r3, [r7, #2]
 8005b6e:	4a83      	ldr	r2, [pc, #524]	; (8005d7c <Status_Msg_Extr+0xb1c>)
 8005b70:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005b74:	78ba      	ldrb	r2, [r7, #2]
 8005b76:	487f      	ldr	r0, [pc, #508]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4403      	add	r3, r0
 8005b82:	3312      	adds	r3, #18
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	4299      	cmp	r1, r3
 8005b88:	d03f      	beq.n	8005c0a <Status_Msg_Extr+0x9aa>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005b8a:	78ba      	ldrb	r2, [r7, #2]
 8005b8c:	78b9      	ldrb	r1, [r7, #2]
 8005b8e:	4879      	ldr	r0, [pc, #484]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4403      	add	r3, r0
 8005b9a:	3312      	adds	r3, #18
 8005b9c:	881a      	ldrh	r2, [r3, #0]
 8005b9e:	4b77      	ldr	r3, [pc, #476]	; (8005d7c <Status_Msg_Extr+0xb1c>)
 8005ba0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005ba4:	2214      	movs	r2, #20
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	4875      	ldr	r0, [pc, #468]	; (8005d80 <Status_Msg_Extr+0xb20>)
 8005baa:	f01c fdf9 	bl	80227a0 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005bae:	78ba      	ldrb	r2, [r7, #2]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4a6e      	ldr	r2, [pc, #440]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005bba:	4413      	add	r3, r2
 8005bbc:	2214      	movs	r2, #20
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	486f      	ldr	r0, [pc, #444]	; (8005d80 <Status_Msg_Extr+0xb20>)
 8005bc2:	f01c fdc5 	bl	8022750 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8005bc6:	f240 2007 	movw	r0, #519	; 0x207
 8005bca:	f009 fefd 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == 0)
 8005bce:	78bb      	ldrb	r3, [r7, #2]
 8005bd0:	4a6c      	ldr	r2, [pc, #432]	; (8005d84 <Status_Msg_Extr+0xb24>)
 8005bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d117      	bne.n	8005c0a <Status_Msg_Extr+0x9aa>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005bda:	78bb      	ldrb	r3, [r7, #2]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	4a6a      	ldr	r2, [pc, #424]	; (8005d88 <Status_Msg_Extr+0xb28>)
 8005be0:	4413      	add	r3, r2
 8005be2:	1c98      	adds	r0, r3, #2
 8005be4:	78ba      	ldrb	r2, [r7, #2]
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4a61      	ldr	r2, [pc, #388]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	2210      	movs	r2, #16
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	f01c fdaa 	bl	8022750 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8005bfc:	f240 1019 	movw	r0, #281	; 0x119
 8005c00:	f009 fee2 	bl	800f9c8 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8005c04:	4a61      	ldr	r2, [pc, #388]	; (8005d8c <Status_Msg_Extr+0xb2c>)
 8005c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c08:	6013      	str	r3, [r2, #0]
		}
	}


	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005c0a:	78b9      	ldrb	r1, [r7, #2]
 8005c0c:	78ba      	ldrb	r2, [r7, #2]
 8005c0e:	4859      	ldr	r0, [pc, #356]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005c10:	460b      	mov	r3, r1
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4403      	add	r3, r0
 8005c1a:	3312      	adds	r3, #18
 8005c1c:	8818      	ldrh	r0, [r3, #0]
 8005c1e:	4954      	ldr	r1, [pc, #336]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c20:	4613      	mov	r3, r2
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	4413      	add	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	440b      	add	r3, r1
 8005c2a:	3306      	adds	r3, #6
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8005c30:	78ba      	ldrb	r2, [r7, #2]
 8005c32:	494f      	ldr	r1, [pc, #316]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c34:	4613      	mov	r3, r2
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	4413      	add	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3314      	adds	r3, #20
 8005c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c42:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 8005c44:	78ba      	ldrb	r2, [r7, #2]
 8005c46:	494a      	ldr	r1, [pc, #296]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c48:	4613      	mov	r3, r2
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	440b      	add	r3, r1
 8005c52:	3305      	adds	r3, #5
 8005c54:	2204      	movs	r2, #4
 8005c56:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005c58:	78ba      	ldrb	r2, [r7, #2]
 8005c5a:	4945      	ldr	r1, [pc, #276]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4413      	add	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	440b      	add	r3, r1
 8005c66:	78ba      	ldrb	r2, [r7, #2]
 8005c68:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005c6a:	78ba      	ldrb	r2, [r7, #2]
 8005c6c:	4940      	ldr	r1, [pc, #256]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c6e:	4613      	mov	r3, r2
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	4413      	add	r3, r2
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	440b      	add	r3, r1
 8005c78:	3301      	adds	r3, #1
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8005c7e:	78ba      	ldrb	r2, [r7, #2]
 8005c80:	493b      	ldr	r1, [pc, #236]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c82:	4613      	mov	r3, r2
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	4413      	add	r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	440b      	add	r3, r1
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005c92:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005c94:	2218      	movs	r2, #24
 8005c96:	2100      	movs	r1, #0
 8005c98:	483d      	ldr	r0, [pc, #244]	; (8005d90 <Status_Msg_Extr+0xb30>)
 8005c9a:	f01c fd81 	bl	80227a0 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005c9e:	78ba      	ldrb	r2, [r7, #2]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	4413      	add	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	4a31      	ldr	r2, [pc, #196]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005caa:	4413      	add	r3, r2
 8005cac:	2218      	movs	r2, #24
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4837      	ldr	r0, [pc, #220]	; (8005d90 <Status_Msg_Extr+0xb30>)
 8005cb2:	f01c fd4d 	bl	8022750 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8005cb6:	f240 2001 	movw	r0, #513	; 0x201
 8005cba:	f009 fe85 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005cbe:	78ba      	ldrb	r2, [r7, #2]
 8005cc0:	492b      	ldr	r1, [pc, #172]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	4413      	add	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	440b      	add	r3, r1
 8005ccc:	3301      	adds	r3, #1
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005cd2:	78bb      	ldrb	r3, [r7, #2]
 8005cd4:	492f      	ldr	r1, [pc, #188]	; (8005d94 <Status_Msg_Extr+0xb34>)
 8005cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8005cdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d11d      	bne.n	8005d20 <Status_Msg_Extr+0xac0>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8005ce4:	78bb      	ldrb	r3, [r7, #2]
 8005ce6:	492c      	ldr	r1, [pc, #176]	; (8005d98 <Status_Msg_Extr+0xb38>)
 8005ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8005cee:	78ba      	ldrb	r2, [r7, #2]
 8005cf0:	492a      	ldr	r1, [pc, #168]	; (8005d9c <Status_Msg_Extr+0xb3c>)
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d00:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8005d02:	78ba      	ldrb	r2, [r7, #2]
 8005d04:	4925      	ldr	r1, [pc, #148]	; (8005d9c <Status_Msg_Extr+0xb3c>)
 8005d06:	4613      	mov	r3, r2
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3301      	adds	r3, #1
 8005d12:	2201      	movs	r2, #1
 8005d14:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8005d16:	78bb      	ldrb	r3, [r7, #2]
 8005d18:	4a21      	ldr	r2, [pc, #132]	; (8005da0 <Status_Msg_Extr+0xb40>)
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	54d1      	strb	r1, [r2, r3]
 8005d1e:	e017      	b.n	8005d50 <Status_Msg_Extr+0xaf0>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8005d20:	78bb      	ldrb	r3, [r7, #2]
 8005d22:	4a1f      	ldr	r2, [pc, #124]	; (8005da0 <Status_Msg_Extr+0xb40>)
 8005d24:	2100      	movs	r1, #0
 8005d26:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8005d28:	78ba      	ldrb	r2, [r7, #2]
 8005d2a:	491c      	ldr	r1, [pc, #112]	; (8005d9c <Status_Msg_Extr+0xb3c>)
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	3308      	adds	r3, #8
 8005d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d3a:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8005d3c:	78ba      	ldrb	r2, [r7, #2]
 8005d3e:	4917      	ldr	r1, [pc, #92]	; (8005d9c <Status_Msg_Extr+0xb3c>)
 8005d40:	4613      	mov	r3, r2
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8005d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d54:	4813      	ldr	r0, [pc, #76]	; (8005da4 <Status_Msg_Extr+0xb44>)
 8005d56:	f012 faf6 	bl	8018346 <HAL_GPIO_TogglePin>

}
 8005d5a:	3754      	adds	r7, #84	; 0x54
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd90      	pop	{r4, r7, pc}
 8005d60:	200010d8 	.word	0x200010d8
 8005d64:	200011c4 	.word	0x200011c4
 8005d68:	20000fa4 	.word	0x20000fa4
 8005d6c:	20000fcc 	.word	0x20000fcc
 8005d70:	20001674 	.word	0x20001674
 8005d74:	20001e80 	.word	0x20001e80
 8005d78:	20001db8 	.word	0x20001db8
 8005d7c:	20000f00 	.word	0x20000f00
 8005d80:	20002010 	.word	0x20002010
 8005d84:	20000ec4 	.word	0x20000ec4
 8005d88:	200010e4 	.word	0x200010e4
 8005d8c:	20000e70 	.word	0x20000e70
 8005d90:	20001854 	.word	0x20001854
 8005d94:	20000e44 	.word	0x20000e44
 8005d98:	20000f14 	.word	0x20000f14
 8005d9c:	20001cc8 	.word	0x20001cc8
 8005da0:	20000f64 	.word	0x20000f64
 8005da4:	40021c00 	.word	0x40021c00

08005da8 <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8005da8:	b590      	push	{r4, r7, lr}
 8005daa:	b0a5      	sub	sp, #148	; 0x94
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	4603      	mov	r3, r0
 8005db0:	460a      	mov	r2, r1
 8005db2:	71fb      	strb	r3, [r7, #7]
 8005db4:	4613      	mov	r3, r2
 8005db6:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8005db8:	2300      	movs	r3, #0
 8005dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005dc0:	2238      	movs	r2, #56	; 0x38
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f01c fceb 	bl	80227a0 <memset>
	uint8_t Temp_Buff[60] = {0,};
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	f107 0310 	add.w	r3, r7, #16
 8005dd2:	2238      	movs	r2, #56	; 0x38
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f01c fce2 	bl	80227a0 <memset>
	uint8_t uc_index = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 8005de2:	2300      	movs	r3, #0
 8005de4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005de8:	2300      	movs	r3, #0
 8005dea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8005dee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005df2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005df6:	441a      	add	r2, r3
 8005df8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005dfc:	23f4      	movs	r3, #244	; 0xf4
 8005dfe:	2108      	movs	r1, #8
 8005e00:	f7fa fc94 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8005e04:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005e08:	3308      	adds	r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	da00      	bge.n	8005e10 <Send_Status_Message+0x68>
 8005e0e:	3307      	adds	r3, #7
 8005e10:	10db      	asrs	r3, r3, #3
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e18:	4413      	add	r3, r2
 8005e1a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005e1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e22:	3308      	adds	r3, #8
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	b21b      	sxth	r3, r3
 8005e28:	425a      	negs	r2, r3
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	f002 0207 	and.w	r2, r2, #7
 8005e32:	bf58      	it	pl
 8005e34:	4253      	negpl	r3, r2
 8005e36:	b21b      	sxth	r3, r3
 8005e38:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005e3c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e44:	441a      	add	r2, r3
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	49bc      	ldr	r1, [pc, #752]	; (800613c <Send_Status_Message+0x394>)
 8005e4a:	3366      	adds	r3, #102	; 0x66
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005e56:	2110      	movs	r1, #16
 8005e58:	f7fa fc68 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005e5c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005e60:	3310      	adds	r3, #16
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	da00      	bge.n	8005e68 <Send_Status_Message+0xc0>
 8005e66:	3307      	adds	r3, #7
 8005e68:	10db      	asrs	r3, r3, #3
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e70:	4413      	add	r3, r2
 8005e72:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005e76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e7a:	3310      	adds	r3, #16
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	b21b      	sxth	r3, r3
 8005e80:	425a      	negs	r2, r3
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	f002 0207 	and.w	r2, r2, #7
 8005e8a:	bf58      	it	pl
 8005e8c:	4253      	negpl	r3, r2
 8005e8e:	b21b      	sxth	r3, r3
 8005e90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8005e94:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e98:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e9c:	441a      	add	r2, r3
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	49a6      	ldr	r1, [pc, #664]	; (800613c <Send_Status_Message+0x394>)
 8005ea2:	3370      	adds	r3, #112	; 0x70
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005eae:	2110      	movs	r1, #16
 8005eb0:	f7fa fc3c 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005eb4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005eb8:	3310      	adds	r3, #16
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da00      	bge.n	8005ec0 <Send_Status_Message+0x118>
 8005ebe:	3307      	adds	r3, #7
 8005ec0:	10db      	asrs	r3, r3, #3
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005ec8:	4413      	add	r3, r2
 8005eca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005ece:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005ed2:	3310      	adds	r3, #16
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	b21b      	sxth	r3, r3
 8005ed8:	425a      	negs	r2, r3
 8005eda:	f003 0307 	and.w	r3, r3, #7
 8005ede:	f002 0207 	and.w	r2, r2, #7
 8005ee2:	bf58      	it	pl
 8005ee4:	4253      	negpl	r3, r2
 8005ee6:	b21b      	sxth	r3, r3
 8005ee8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005eec:	4b94      	ldr	r3, [pc, #592]	; (8006140 <Send_Status_Message+0x398>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	089b      	lsrs	r3, r3, #2
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d035      	beq.n	8005f66 <Send_Status_Message+0x1be>
 8005efa:	4b91      	ldr	r3, [pc, #580]	; (8006140 <Send_Status_Message+0x398>)
 8005efc:	791b      	ldrb	r3, [r3, #4]
 8005efe:	79fa      	ldrb	r2, [r7, #7]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d130      	bne.n	8005f66 <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 8005f0a:	488e      	ldr	r0, [pc, #568]	; (8006144 <Send_Status_Message+0x39c>)
 8005f0c:	f014 f9e4 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 8005f10:	4602      	mov	r2, r0
 8005f12:	4b8d      	ldr	r3, [pc, #564]	; (8006148 <Send_Status_Message+0x3a0>)
 8005f14:	fba3 1302 	umull	r1, r3, r3, r2
 8005f18:	099b      	lsrs	r3, r3, #6
 8005f1a:	21c8      	movs	r1, #200	; 0xc8
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 8005f26:	4889      	ldr	r0, [pc, #548]	; (800614c <Send_Status_Message+0x3a4>)
 8005f28:	f01c fdbe 	bl	8022aa8 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8005f2c:	79fb      	ldrb	r3, [r7, #7]
 8005f2e:	4a88      	ldr	r2, [pc, #544]	; (8006150 <Send_Status_Message+0x3a8>)
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	4413      	add	r3, r2
 8005f34:	3301      	adds	r3, #1
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4886      	ldr	r0, [pc, #536]	; (8006154 <Send_Status_Message+0x3ac>)
 8005f3c:	f01c fd18 	bl	8022970 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8005f40:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8005f44:	4619      	mov	r1, r3
 8005f46:	4884      	ldr	r0, [pc, #528]	; (8006158 <Send_Status_Message+0x3b0>)
 8005f48:	f01c fd12 	bl	8022970 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 8005f4c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f54:	441a      	add	r2, r3
 8005f56:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8005f5a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f5e:	2108      	movs	r1, #8
 8005f60:	f7fa fbe4 	bl	800072c <InsertBits>
	{
 8005f64:	e00f      	b.n	8005f86 <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8005f66:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f6e:	441a      	add	r2, r3
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	4977      	ldr	r1, [pc, #476]	; (8006150 <Send_Status_Message+0x3a8>)
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	440b      	add	r3, r1
 8005f78:	3301      	adds	r3, #1
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f80:	2108      	movs	r1, #8
 8005f82:	f7fa fbd3 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 8005f86:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	da00      	bge.n	8005f92 <Send_Status_Message+0x1ea>
 8005f90:	3307      	adds	r3, #7
 8005f92:	10db      	asrs	r3, r3, #3
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005fa0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	b21b      	sxth	r3, r3
 8005faa:	425a      	negs	r2, r3
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	f002 0207 	and.w	r2, r2, #7
 8005fb4:	bf58      	it	pl
 8005fb6:	4253      	negpl	r3, r2
 8005fb8:	b21b      	sxth	r3, r3
 8005fba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005fbe:	4b60      	ldr	r3, [pc, #384]	; (8006140 <Send_Status_Message+0x398>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	08db      	lsrs	r3, r3, #3
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d038      	beq.n	800603e <Send_Status_Message+0x296>
 8005fcc:	4b5c      	ldr	r3, [pc, #368]	; (8006140 <Send_Status_Message+0x398>)
 8005fce:	791b      	ldrb	r3, [r3, #4]
 8005fd0:	79fa      	ldrb	r2, [r7, #7]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d133      	bne.n	800603e <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8005fdc:	4859      	ldr	r0, [pc, #356]	; (8006144 <Send_Status_Message+0x39c>)
 8005fde:	f014 f97b 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	4b58      	ldr	r3, [pc, #352]	; (8006148 <Send_Status_Message+0x3a0>)
 8005fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fea:	099b      	lsrs	r3, r3, #6
 8005fec:	21c8      	movs	r1, #200	; 0xc8
 8005fee:	fb01 f303 	mul.w	r3, r1, r3
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8005ff8:	4858      	ldr	r0, [pc, #352]	; (800615c <Send_Status_Message+0x3b4>)
 8005ffa:	f01c fd55 	bl	8022aa8 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	4a53      	ldr	r2, [pc, #332]	; (8006150 <Send_Status_Message+0x3a8>)
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	4413      	add	r3, r2
 8006006:	3302      	adds	r3, #2
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	4619      	mov	r1, r3
 800600c:	4854      	ldr	r0, [pc, #336]	; (8006160 <Send_Status_Message+0x3b8>)
 800600e:	f01c fcaf 	bl	8022970 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8006012:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8006016:	4619      	mov	r1, r3
 8006018:	4852      	ldr	r0, [pc, #328]	; (8006164 <Send_Status_Message+0x3bc>)
 800601a:	f01c fca9 	bl	8022970 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 800601e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006022:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006026:	441a      	add	r2, r3
 8006028:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800602c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006030:	2108      	movs	r1, #8
 8006032:	f7fa fb7b 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 8006036:	4b4c      	ldr	r3, [pc, #304]	; (8006168 <Send_Status_Message+0x3c0>)
 8006038:	2201      	movs	r2, #1
 800603a:	701a      	strb	r2, [r3, #0]
	{
 800603c:	e020      	b.n	8006080 <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 800603e:	4b4a      	ldr	r3, [pc, #296]	; (8006168 <Send_Status_Message+0x3c0>)
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8006044:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006048:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800604c:	18d1      	adds	r1, r2, r3
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	483f      	ldr	r0, [pc, #252]	; (8006150 <Send_Status_Message+0x3a8>)
 8006052:	011a      	lsls	r2, r3, #4
 8006054:	4402      	add	r2, r0
 8006056:	3202      	adds	r2, #2
 8006058:	7812      	ldrb	r2, [r2, #0]
 800605a:	3201      	adds	r2, #1
 800605c:	b2d4      	uxtb	r4, r2
 800605e:	483c      	ldr	r0, [pc, #240]	; (8006150 <Send_Status_Message+0x3a8>)
 8006060:	011a      	lsls	r2, r3, #4
 8006062:	4402      	add	r2, r0
 8006064:	3202      	adds	r2, #2
 8006066:	4620      	mov	r0, r4
 8006068:	7010      	strb	r0, [r2, #0]
 800606a:	4a39      	ldr	r2, [pc, #228]	; (8006150 <Send_Status_Message+0x3a8>)
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	4413      	add	r3, r2
 8006070:	3302      	adds	r3, #2
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006078:	460a      	mov	r2, r1
 800607a:	2108      	movs	r1, #8
 800607c:	f7fa fb56 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8006080:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006084:	3308      	adds	r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	da00      	bge.n	800608c <Send_Status_Message+0x2e4>
 800608a:	3307      	adds	r3, #7
 800608c:	10db      	asrs	r3, r3, #3
 800608e:	b29a      	uxth	r2, r3
 8006090:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006094:	4413      	add	r3, r2
 8006096:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800609a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800609e:	3308      	adds	r3, #8
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	b21b      	sxth	r3, r3
 80060a4:	425a      	negs	r2, r3
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	f002 0207 	and.w	r2, r2, #7
 80060ae:	bf58      	it	pl
 80060b0:	4253      	negpl	r3, r2
 80060b2:	b21b      	sxth	r3, r3
 80060b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 80060b8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80060c0:	441a      	add	r2, r3
 80060c2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80060c6:	2304      	movs	r3, #4
 80060c8:	2108      	movs	r1, #8
 80060ca:	f7fa fb2f 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80060ce:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80060d2:	3308      	adds	r3, #8
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	da00      	bge.n	80060da <Send_Status_Message+0x332>
 80060d8:	3307      	adds	r3, #7
 80060da:	10db      	asrs	r3, r3, #3
 80060dc:	b29a      	uxth	r2, r3
 80060de:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060e2:	4413      	add	r3, r2
 80060e4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80060e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060ec:	3308      	adds	r3, #8
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	b21b      	sxth	r3, r3
 80060f2:	425a      	negs	r2, r3
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	f002 0207 	and.w	r2, r2, #7
 80060fc:	bf58      	it	pl
 80060fe:	4253      	negpl	r3, r2
 8006100:	b21b      	sxth	r3, r3
 8006102:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 8006106:	79fb      	ldrb	r3, [r7, #7]
 8006108:	4a11      	ldr	r2, [pc, #68]	; (8006150 <Send_Status_Message+0x3a8>)
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	4413      	add	r3, r2
 800610e:	3304      	adds	r3, #4
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d052      	beq.n	80061c0 <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	4a13      	ldr	r2, [pc, #76]	; (800616c <Send_Status_Message+0x3c4>)
 800611e:	5cd3      	ldrb	r3, [r2, r3]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d125      	bne.n	8006170 <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 8006124:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006128:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800612c:	441a      	add	r2, r3
 800612e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006132:	2368      	movs	r3, #104	; 0x68
 8006134:	2110      	movs	r1, #16
 8006136:	f7fa faf9 	bl	800072c <InsertBits>
 800613a:	e024      	b.n	8006186 <Send_Status_Message+0x3de>
 800613c:	20000304 	.word	0x20000304
 8006140:	2000195c 	.word	0x2000195c
 8006144:	20009d20 	.word	0x20009d20
 8006148:	51eb851f 	.word	0x51eb851f
 800614c:	080244c4 	.word	0x080244c4
 8006150:	200011c4 	.word	0x200011c4
 8006154:	08024a68 	.word	0x08024a68
 8006158:	08024a88 	.word	0x08024a88
 800615c:	08024528 	.word	0x08024528
 8006160:	08024aa8 	.word	0x08024aa8
 8006164:	08024ac8 	.word	0x08024ac8
 8006168:	20000e39 	.word	0x20000e39
 800616c:	200010d8 	.word	0x200010d8
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006170:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006174:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006178:	441a      	add	r2, r3
 800617a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800617e:	2328      	movs	r3, #40	; 0x28
 8006180:	2110      	movs	r1, #16
 8006182:	f7fa fad3 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006186:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800618a:	3310      	adds	r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	da00      	bge.n	8006192 <Send_Status_Message+0x3ea>
 8006190:	3307      	adds	r3, #7
 8006192:	10db      	asrs	r3, r3, #3
 8006194:	b29a      	uxth	r2, r3
 8006196:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800619a:	4413      	add	r3, r2
 800619c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80061a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061a4:	3310      	adds	r3, #16
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	b21b      	sxth	r3, r3
 80061aa:	425a      	negs	r2, r3
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	f002 0207 	and.w	r2, r2, #7
 80061b4:	bf58      	it	pl
 80061b6:	4253      	negpl	r3, r2
 80061b8:	b21b      	sxth	r3, r3
 80061ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061be:	e03a      	b.n	8006236 <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <Send_Status_Message+0x43c>)
 80061c4:	5cd3      	ldrb	r3, [r2, r3]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d10e      	bne.n	80061e8 <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 80061ca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061d2:	441a      	add	r2, r3
 80061d4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80061d8:	2364      	movs	r3, #100	; 0x64
 80061da:	2110      	movs	r1, #16
 80061dc:	f7fa faa6 	bl	800072c <InsertBits>
 80061e0:	e00d      	b.n	80061fe <Send_Status_Message+0x456>
 80061e2:	bf00      	nop
 80061e4:	200010d8 	.word	0x200010d8
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 80061e8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061f0:	441a      	add	r2, r3
 80061f2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80061f6:	2324      	movs	r3, #36	; 0x24
 80061f8:	2110      	movs	r1, #16
 80061fa:	f7fa fa97 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 80061fe:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006202:	3310      	adds	r3, #16
 8006204:	2b00      	cmp	r3, #0
 8006206:	da00      	bge.n	800620a <Send_Status_Message+0x462>
 8006208:	3307      	adds	r3, #7
 800620a:	10db      	asrs	r3, r3, #3
 800620c:	b29a      	uxth	r2, r3
 800620e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006212:	4413      	add	r3, r2
 8006214:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006218:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800621c:	3310      	adds	r3, #16
 800621e:	b29b      	uxth	r3, r3
 8006220:	b21b      	sxth	r3, r3
 8006222:	425a      	negs	r2, r3
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	f002 0207 	and.w	r2, r2, #7
 800622c:	bf58      	it	pl
 800622e:	4253      	negpl	r3, r2
 8006230:	b21b      	sxth	r3, r3
 8006232:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	4ac6      	ldr	r2, [pc, #792]	; (8006554 <Send_Status_Message+0x7ac>)
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	4413      	add	r3, r2
 800623e:	3304      	adds	r3, #4
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	b29b      	uxth	r3, r3
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 8139 	beq.w	80064c2 <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	4ac1      	ldr	r2, [pc, #772]	; (8006558 <Send_Status_Message+0x7b0>)
 8006254:	5cd3      	ldrb	r3, [r2, r3]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d114      	bne.n	8006284 <Send_Status_Message+0x4dc>
		{
			Get_time();
 800625a:	f005 f987 	bl	800b56c <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 800625e:	79fa      	ldrb	r2, [r7, #7]
 8006260:	4613      	mov	r3, r2
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	4413      	add	r3, r2
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	4abc      	ldr	r2, [pc, #752]	; (800655c <Send_Status_Message+0x7b4>)
 800626a:	4413      	add	r3, r2
 800626c:	4abc      	ldr	r2, [pc, #752]	; (8006560 <Send_Status_Message+0x7b8>)
 800626e:	6811      	ldr	r1, [r2, #0]
 8006270:	6019      	str	r1, [r3, #0]
 8006272:	8892      	ldrh	r2, [r2, #4]
 8006274:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 8006276:	48bb      	ldr	r0, [pc, #748]	; (8006564 <Send_Status_Message+0x7bc>)
 8006278:	f01c fc16 	bl	8022aa8 <puts>
			Change_MLK_TIME[Source_Index] = 0;
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	4ab6      	ldr	r2, [pc, #728]	; (8006558 <Send_Status_Message+0x7b0>)
 8006280:	2100      	movs	r1, #0
 8006282:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8006284:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006288:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800628c:	18d1      	adds	r1, r2, r3
 800628e:	79fa      	ldrb	r2, [r7, #7]
 8006290:	48b2      	ldr	r0, [pc, #712]	; (800655c <Send_Status_Message+0x7b4>)
 8006292:	4613      	mov	r3, r2
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	4413      	add	r3, r2
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	4403      	add	r3, r0
 800629c:	3305      	adds	r3, #5
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80062a4:	460a      	mov	r2, r1
 80062a6:	2108      	movs	r1, #8
 80062a8:	f7fa fa40 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80062ac:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80062b0:	3308      	adds	r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da00      	bge.n	80062b8 <Send_Status_Message+0x510>
 80062b6:	3307      	adds	r3, #7
 80062b8:	10db      	asrs	r3, r3, #3
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062c0:	4413      	add	r3, r2
 80062c2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80062c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80062ca:	3308      	adds	r3, #8
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	b21b      	sxth	r3, r3
 80062d0:	425a      	negs	r2, r3
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	f002 0207 	and.w	r2, r2, #7
 80062da:	bf58      	it	pl
 80062dc:	4253      	negpl	r3, r2
 80062de:	b21b      	sxth	r3, r3
 80062e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80062e4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062ec:	18d1      	adds	r1, r2, r3
 80062ee:	79fa      	ldrb	r2, [r7, #7]
 80062f0:	489a      	ldr	r0, [pc, #616]	; (800655c <Send_Status_Message+0x7b4>)
 80062f2:	4613      	mov	r3, r2
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	4413      	add	r3, r2
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	4403      	add	r3, r0
 80062fc:	3304      	adds	r3, #4
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006304:	460a      	mov	r2, r1
 8006306:	2108      	movs	r1, #8
 8006308:	f7fa fa10 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800630c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006310:	3308      	adds	r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	da00      	bge.n	8006318 <Send_Status_Message+0x570>
 8006316:	3307      	adds	r3, #7
 8006318:	10db      	asrs	r3, r3, #3
 800631a:	b29a      	uxth	r2, r3
 800631c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006320:	4413      	add	r3, r2
 8006322:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006326:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800632a:	3308      	adds	r3, #8
 800632c:	b29b      	uxth	r3, r3
 800632e:	b21b      	sxth	r3, r3
 8006330:	425a      	negs	r2, r3
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	f002 0207 	and.w	r2, r2, #7
 800633a:	bf58      	it	pl
 800633c:	4253      	negpl	r3, r2
 800633e:	b21b      	sxth	r3, r3
 8006340:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8006344:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006348:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800634c:	18d1      	adds	r1, r2, r3
 800634e:	79fa      	ldrb	r2, [r7, #7]
 8006350:	4882      	ldr	r0, [pc, #520]	; (800655c <Send_Status_Message+0x7b4>)
 8006352:	4613      	mov	r3, r2
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	4413      	add	r3, r2
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	4403      	add	r3, r0
 800635c:	3303      	adds	r3, #3
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006364:	460a      	mov	r2, r1
 8006366:	2108      	movs	r1, #8
 8006368:	f7fa f9e0 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800636c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006370:	3308      	adds	r3, #8
 8006372:	2b00      	cmp	r3, #0
 8006374:	da00      	bge.n	8006378 <Send_Status_Message+0x5d0>
 8006376:	3307      	adds	r3, #7
 8006378:	10db      	asrs	r3, r3, #3
 800637a:	b29a      	uxth	r2, r3
 800637c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006380:	4413      	add	r3, r2
 8006382:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006386:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800638a:	3308      	adds	r3, #8
 800638c:	b29b      	uxth	r3, r3
 800638e:	b21b      	sxth	r3, r3
 8006390:	425a      	negs	r2, r3
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	f002 0207 	and.w	r2, r2, #7
 800639a:	bf58      	it	pl
 800639c:	4253      	negpl	r3, r2
 800639e:	b21b      	sxth	r3, r3
 80063a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 80063a4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063ac:	18d1      	adds	r1, r2, r3
 80063ae:	79fa      	ldrb	r2, [r7, #7]
 80063b0:	486a      	ldr	r0, [pc, #424]	; (800655c <Send_Status_Message+0x7b4>)
 80063b2:	4613      	mov	r3, r2
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	4413      	add	r3, r2
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	4403      	add	r3, r0
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80063c2:	460a      	mov	r2, r1
 80063c4:	2108      	movs	r1, #8
 80063c6:	f7fa f9b1 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80063ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80063ce:	3308      	adds	r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	da00      	bge.n	80063d6 <Send_Status_Message+0x62e>
 80063d4:	3307      	adds	r3, #7
 80063d6:	10db      	asrs	r3, r3, #3
 80063d8:	b29a      	uxth	r2, r3
 80063da:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063de:	4413      	add	r3, r2
 80063e0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80063e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80063e8:	3308      	adds	r3, #8
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	b21b      	sxth	r3, r3
 80063ee:	425a      	negs	r2, r3
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	f002 0207 	and.w	r2, r2, #7
 80063f8:	bf58      	it	pl
 80063fa:	4253      	negpl	r3, r2
 80063fc:	b21b      	sxth	r3, r3
 80063fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8006402:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006406:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800640a:	18d1      	adds	r1, r2, r3
 800640c:	79fa      	ldrb	r2, [r7, #7]
 800640e:	4853      	ldr	r0, [pc, #332]	; (800655c <Send_Status_Message+0x7b4>)
 8006410:	4613      	mov	r3, r2
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	4413      	add	r3, r2
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	4403      	add	r3, r0
 800641a:	3301      	adds	r3, #1
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006422:	460a      	mov	r2, r1
 8006424:	2108      	movs	r1, #8
 8006426:	f7fa f981 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800642a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800642e:	3308      	adds	r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	da00      	bge.n	8006436 <Send_Status_Message+0x68e>
 8006434:	3307      	adds	r3, #7
 8006436:	10db      	asrs	r3, r3, #3
 8006438:	b29a      	uxth	r2, r3
 800643a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800643e:	4413      	add	r3, r2
 8006440:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006444:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006448:	3308      	adds	r3, #8
 800644a:	b29b      	uxth	r3, r3
 800644c:	b21b      	sxth	r3, r3
 800644e:	425a      	negs	r2, r3
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	f002 0207 	and.w	r2, r2, #7
 8006458:	bf58      	it	pl
 800645a:	4253      	negpl	r3, r2
 800645c:	b21b      	sxth	r3, r3
 800645e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8006462:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006466:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800646a:	18d1      	adds	r1, r2, r3
 800646c:	79fa      	ldrb	r2, [r7, #7]
 800646e:	483b      	ldr	r0, [pc, #236]	; (800655c <Send_Status_Message+0x7b4>)
 8006470:	4613      	mov	r3, r2
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	4413      	add	r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	4403      	add	r3, r0
 800647a:	3302      	adds	r3, #2
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006482:	460a      	mov	r2, r1
 8006484:	2108      	movs	r1, #8
 8006486:	f7fa f951 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800648a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800648e:	3308      	adds	r3, #8
 8006490:	2b00      	cmp	r3, #0
 8006492:	da00      	bge.n	8006496 <Send_Status_Message+0x6ee>
 8006494:	3307      	adds	r3, #7
 8006496:	10db      	asrs	r3, r3, #3
 8006498:	b29a      	uxth	r2, r3
 800649a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800649e:	4413      	add	r3, r2
 80064a0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80064a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064a8:	3308      	adds	r3, #8
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	b21b      	sxth	r3, r3
 80064ae:	425a      	negs	r2, r3
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	f002 0207 	and.w	r2, r2, #7
 80064b8:	bf58      	it	pl
 80064ba:	4253      	negpl	r3, r2
 80064bc:	b21b      	sxth	r3, r3
 80064be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80064c2:	4b29      	ldr	r3, [pc, #164]	; (8006568 <Send_Status_Message+0x7c0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d031      	beq.n	8006534 <Send_Status_Message+0x78c>
 80064d0:	4b25      	ldr	r3, [pc, #148]	; (8006568 <Send_Status_Message+0x7c0>)
 80064d2:	791b      	ldrb	r3, [r3, #4]
 80064d4:	79fa      	ldrb	r2, [r7, #7]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d12c      	bne.n	8006534 <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 80064e0:	4822      	ldr	r0, [pc, #136]	; (800656c <Send_Status_Message+0x7c4>)
 80064e2:	f013 fef9 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 80064e6:	4602      	mov	r2, r0
 80064e8:	4b21      	ldr	r3, [pc, #132]	; (8006570 <Send_Status_Message+0x7c8>)
 80064ea:	fba3 1302 	umull	r1, r3, r3, r2
 80064ee:	0dd9      	lsrs	r1, r3, #23
 80064f0:	460b      	mov	r3, r1
 80064f2:	041b      	lsls	r3, r3, #16
 80064f4:	1a5b      	subs	r3, r3, r1
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80064fe:	481d      	ldr	r0, [pc, #116]	; (8006574 <Send_Status_Message+0x7cc>)
 8006500:	f01c fad2 	bl	8022aa8 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006504:	79fb      	ldrb	r3, [r7, #7]
 8006506:	4a13      	ldr	r2, [pc, #76]	; (8006554 <Send_Status_Message+0x7ac>)
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	4413      	add	r3, r2
 800650c:	330c      	adds	r3, #12
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4619      	mov	r1, r3
 8006512:	4819      	ldr	r0, [pc, #100]	; (8006578 <Send_Status_Message+0x7d0>)
 8006514:	f01c fa2c 	bl	8022970 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 8006518:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800651c:	4817      	ldr	r0, [pc, #92]	; (800657c <Send_Status_Message+0x7d4>)
 800651e:	f01c fa27 	bl	8022970 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 8006522:	f107 020c 	add.w	r2, r7, #12
 8006526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800652a:	2118      	movs	r1, #24
 800652c:	2000      	movs	r0, #0
 800652e:	f7fa f8fd 	bl	800072c <InsertBits>
	{
 8006532:	e00b      	b.n	800654c <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	4a07      	ldr	r2, [pc, #28]	; (8006554 <Send_Status_Message+0x7ac>)
 8006538:	011b      	lsls	r3, r3, #4
 800653a:	4413      	add	r3, r2
 800653c:	330c      	adds	r3, #12
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f107 020c 	add.w	r2, r7, #12
 8006544:	2118      	movs	r1, #24
 8006546:	2000      	movs	r0, #0
 8006548:	f7fa f8f0 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800654c:	2300      	movs	r3, #0
 800654e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006552:	e027      	b.n	80065a4 <Send_Status_Message+0x7fc>
 8006554:	200011c4 	.word	0x200011c4
 8006558:	200010d8 	.word	0x200010d8
 800655c:	20001188 	.word	0x20001188
 8006560:	20002890 	.word	0x20002890
 8006564:	08024844 	.word	0x08024844
 8006568:	2000195c 	.word	0x2000195c
 800656c:	20009d20 	.word	0x20009d20
 8006570:	80008001 	.word	0x80008001
 8006574:	0802485c 	.word	0x0802485c
 8006578:	08024880 	.word	0x08024880
 800657c:	080248a4 	.word	0x080248a4
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006580:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006584:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006588:	3303      	adds	r3, #3
 800658a:	3290      	adds	r2, #144	; 0x90
 800658c:	443a      	add	r2, r7
 800658e:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8006592:	3390      	adds	r3, #144	; 0x90
 8006594:	443b      	add	r3, r7
 8006596:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800659a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800659e:	3301      	adds	r3, #1
 80065a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80065a4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d8e6      	bhi.n	8006580 <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 80065b2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80065b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80065ba:	18d4      	adds	r4, r2, r3
 80065bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3303      	adds	r3, #3
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	f107 030c 	add.w	r3, r7, #12
 80065ca:	4611      	mov	r1, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f00c fdf9 	bl	80131c4 <CalculateDirectReverseCrc>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80065d8:	4622      	mov	r2, r4
 80065da:	2120      	movs	r1, #32
 80065dc:	f7fa f8a6 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 80065e0:	4b1f      	ldr	r3, [pc, #124]	; (8006660 <Send_Status_Message+0x8b8>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 80065e6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80065ea:	3320      	adds	r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	da00      	bge.n	80065f2 <Send_Status_Message+0x84a>
 80065f0:	3307      	adds	r3, #7
 80065f2:	10db      	asrs	r3, r3, #3
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80065fa:	4413      	add	r3, r2
 80065fc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006600:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006604:	3320      	adds	r3, #32
 8006606:	b29b      	uxth	r3, r3
 8006608:	b21b      	sxth	r3, r3
 800660a:	425a      	negs	r2, r3
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	f002 0207 	and.w	r2, r2, #7
 8006614:	bf58      	it	pl
 8006616:	4253      	negpl	r3, r2
 8006618:	b21b      	sxth	r3, r3
 800661a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800661e:	4b11      	ldr	r3, [pc, #68]	; (8006664 <Send_Status_Message+0x8bc>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	0a5b      	lsrs	r3, r3, #9
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00b      	beq.n	8006644 <Send_Status_Message+0x89c>
 800662c:	4b0d      	ldr	r3, [pc, #52]	; (8006664 <Send_Status_Message+0x8bc>)
 800662e:	791b      	ldrb	r3, [r3, #4]
 8006630:	79fa      	ldrb	r2, [r7, #7]
 8006632:	429a      	cmp	r2, r3
 8006634:	d106      	bne.n	8006644 <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 8006636:	480c      	ldr	r0, [pc, #48]	; (8006668 <Send_Status_Message+0x8c0>)
 8006638:	f01c fa36 	bl	8022aa8 <puts>
		printf("Not Sending Reply");
 800663c:	480b      	ldr	r0, [pc, #44]	; (800666c <Send_Status_Message+0x8c4>)
 800663e:	f01c f997 	bl	8022970 <iprintf>
 8006642:	e009      	b.n	8006658 <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 8006644:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006648:	b2d9      	uxtb	r1, r3
 800664a:	79fa      	ldrb	r2, [r7, #7]
 800664c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006650:	4618      	mov	r0, r3
 8006652:	f000 ffb5 	bl	80075c0 <Process_Sending_Reply>
	}
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	3794      	adds	r7, #148	; 0x94
 800665c:	46bd      	mov	sp, r7
 800665e:	bd90      	pop	{r4, r7, pc}
 8006660:	20000e39 	.word	0x20000e39
 8006664:	2000195c 	.word	0x2000195c
 8006668:	080245f4 	.word	0x080245f4
 800666c:	0802460c 	.word	0x0802460c

08006670 <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	4608      	mov	r0, r1
 800667a:	4611      	mov	r1, r2
 800667c:	461a      	mov	r2, r3
 800667e:	4603      	mov	r3, r0
 8006680:	70fb      	strb	r3, [r7, #3]
 8006682:	460b      	mov	r3, r1
 8006684:	70bb      	strb	r3, [r7, #2]
 8006686:	4613      	mov	r3, r2
 8006688:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = CLEAR;
 8006692:	2300      	movs	r3, #0
 8006694:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 8006696:	f00f f96d 	bl	8015974 <HAL_GetTick>
 800669a:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 800669c:	2300      	movs	r3, #0
 800669e:	81fb      	strh	r3, [r7, #14]
 80066a0:	2300      	movs	r3, #0
 80066a2:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b05      	subs	r3, #5
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f00c fd88 	bl	80131c4 <CalculateDirectReverseCrc>
 80066b4:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	3b05      	subs	r3, #5
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	441a      	add	r2, r3
 80066be:	89bb      	ldrh	r3, [r7, #12]
 80066c0:	2120      	movs	r1, #32
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7f9 ffa6 	bl	8000614 <ExtractBits>
 80066c8:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d01a      	beq.n	8006708 <Service_Msg_Extr+0x98>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80066d2:	78bb      	ldrb	r3, [r7, #2]
 80066d4:	4a08      	ldr	r2, [pc, #32]	; (80066f8 <Service_Msg_Extr+0x88>)
 80066d6:	3366      	adds	r3, #102	; 0x66
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	4619      	mov	r1, r3
 80066e0:	4806      	ldr	r0, [pc, #24]	; (80066fc <Service_Msg_Extr+0x8c>)
 80066e2:	f01c f945 	bl	8022970 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 80066e6:	6979      	ldr	r1, [r7, #20]
 80066e8:	4805      	ldr	r0, [pc, #20]	; (8006700 <Service_Msg_Extr+0x90>)
 80066ea:	f01c f941 	bl	8022970 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 80066ee:	69b9      	ldr	r1, [r7, #24]
 80066f0:	4804      	ldr	r0, [pc, #16]	; (8006704 <Service_Msg_Extr+0x94>)
 80066f2:	f01c f93d 	bl	8022970 <iprintf>
		return;
 80066f6:	e39f      	b.n	8006e38 <Service_Msg_Extr+0x7c8>
 80066f8:	20000304 	.word	0x20000304
 80066fc:	08024aec 	.word	0x08024aec
 8006700:	08024360 	.word	0x08024360
 8006704:	08024370 	.word	0x08024370
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 8006708:	78bb      	ldrb	r3, [r7, #2]
 800670a:	49ae      	ldr	r1, [pc, #696]	; (80069c4 <Service_Msg_Extr+0x354>)
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8006712:	78bb      	ldrb	r3, [r7, #2]
 8006714:	49ac      	ldr	r1, [pc, #688]	; (80069c8 <Service_Msg_Extr+0x358>)
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 800671c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006720:	3308      	adds	r3, #8
 8006722:	2b00      	cmp	r3, #0
 8006724:	da00      	bge.n	8006728 <Service_Msg_Extr+0xb8>
 8006726:	3307      	adds	r3, #7
 8006728:	10db      	asrs	r3, r3, #3
 800672a:	b29a      	uxth	r2, r3
 800672c:	89fb      	ldrh	r3, [r7, #14]
 800672e:	4413      	add	r3, r2
 8006730:	81fb      	strh	r3, [r7, #14]
 8006732:	89bb      	ldrh	r3, [r7, #12]
 8006734:	3308      	adds	r3, #8
 8006736:	b29b      	uxth	r3, r3
 8006738:	b21b      	sxth	r3, r3
 800673a:	425a      	negs	r2, r3
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	f002 0207 	and.w	r2, r2, #7
 8006744:	bf58      	it	pl
 8006746:	4253      	negpl	r3, r2
 8006748:	b21b      	sxth	r3, r3
 800674a:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800674c:	89fb      	ldrh	r3, [r7, #14]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	441a      	add	r2, r3
 8006752:	89bb      	ldrh	r3, [r7, #12]
 8006754:	2110      	movs	r1, #16
 8006756:	4618      	mov	r0, r3
 8006758:	f7f9 ff5c 	bl	8000614 <ExtractBits>
 800675c:	4603      	mov	r3, r0
 800675e:	78ba      	ldrb	r2, [r7, #2]
 8006760:	b298      	uxth	r0, r3
 8006762:	499a      	ldr	r1, [pc, #616]	; (80069cc <Service_Msg_Extr+0x35c>)
 8006764:	4613      	mov	r3, r2
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	3306      	adds	r3, #6
 8006770:	4602      	mov	r2, r0
 8006772:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8006774:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006778:	3310      	adds	r3, #16
 800677a:	2b00      	cmp	r3, #0
 800677c:	da00      	bge.n	8006780 <Service_Msg_Extr+0x110>
 800677e:	3307      	adds	r3, #7
 8006780:	10db      	asrs	r3, r3, #3
 8006782:	b29a      	uxth	r2, r3
 8006784:	89fb      	ldrh	r3, [r7, #14]
 8006786:	4413      	add	r3, r2
 8006788:	81fb      	strh	r3, [r7, #14]
 800678a:	89bb      	ldrh	r3, [r7, #12]
 800678c:	3310      	adds	r3, #16
 800678e:	b29b      	uxth	r3, r3
 8006790:	b21b      	sxth	r3, r3
 8006792:	425a      	negs	r2, r3
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	f002 0207 	and.w	r2, r2, #7
 800679c:	bf58      	it	pl
 800679e:	4253      	negpl	r3, r2
 80067a0:	b21b      	sxth	r3, r3
 80067a2:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80067a4:	89fb      	ldrh	r3, [r7, #14]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	441a      	add	r2, r3
 80067aa:	89bb      	ldrh	r3, [r7, #12]
 80067ac:	2110      	movs	r1, #16
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7f9 ff30 	bl	8000614 <ExtractBits>
 80067b4:	4603      	mov	r3, r0
 80067b6:	78ba      	ldrb	r2, [r7, #2]
 80067b8:	b298      	uxth	r0, r3
 80067ba:	4984      	ldr	r1, [pc, #528]	; (80069cc <Service_Msg_Extr+0x35c>)
 80067bc:	4613      	mov	r3, r2
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	3304      	adds	r3, #4
 80067c8:	4602      	mov	r2, r0
 80067ca:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 80067cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80067d0:	3310      	adds	r3, #16
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da00      	bge.n	80067d8 <Service_Msg_Extr+0x168>
 80067d6:	3307      	adds	r3, #7
 80067d8:	10db      	asrs	r3, r3, #3
 80067da:	b29a      	uxth	r2, r3
 80067dc:	89fb      	ldrh	r3, [r7, #14]
 80067de:	4413      	add	r3, r2
 80067e0:	81fb      	strh	r3, [r7, #14]
 80067e2:	89bb      	ldrh	r3, [r7, #12]
 80067e4:	3310      	adds	r3, #16
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	b21b      	sxth	r3, r3
 80067ea:	425a      	negs	r2, r3
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	f002 0207 	and.w	r2, r2, #7
 80067f4:	bf58      	it	pl
 80067f6:	4253      	negpl	r3, r2
 80067f8:	b21b      	sxth	r3, r3
 80067fa:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80067fc:	89fb      	ldrh	r3, [r7, #14]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	441a      	add	r2, r3
 8006802:	89bb      	ldrh	r3, [r7, #12]
 8006804:	2108      	movs	r1, #8
 8006806:	4618      	mov	r0, r3
 8006808:	f7f9 ff04 	bl	8000614 <ExtractBits>
 800680c:	4602      	mov	r2, r0
 800680e:	78bb      	ldrb	r3, [r7, #2]
 8006810:	b2d1      	uxtb	r1, r2
 8006812:	4a6f      	ldr	r2, [pc, #444]	; (80069d0 <Service_Msg_Extr+0x360>)
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	4413      	add	r3, r2
 8006818:	3302      	adds	r3, #2
 800681a:	460a      	mov	r2, r1
 800681c:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 800681e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006822:	3308      	adds	r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	da00      	bge.n	800682a <Service_Msg_Extr+0x1ba>
 8006828:	3307      	adds	r3, #7
 800682a:	10db      	asrs	r3, r3, #3
 800682c:	b29a      	uxth	r2, r3
 800682e:	89fb      	ldrh	r3, [r7, #14]
 8006830:	4413      	add	r3, r2
 8006832:	81fb      	strh	r3, [r7, #14]
 8006834:	89bb      	ldrh	r3, [r7, #12]
 8006836:	3308      	adds	r3, #8
 8006838:	b29b      	uxth	r3, r3
 800683a:	b21b      	sxth	r3, r3
 800683c:	425a      	negs	r2, r3
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	f002 0207 	and.w	r2, r2, #7
 8006846:	bf58      	it	pl
 8006848:	4253      	negpl	r3, r2
 800684a:	b21b      	sxth	r3, r3
 800684c:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800684e:	89fb      	ldrh	r3, [r7, #14]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	441a      	add	r2, r3
 8006854:	89bb      	ldrh	r3, [r7, #12]
 8006856:	2108      	movs	r1, #8
 8006858:	4618      	mov	r0, r3
 800685a:	f7f9 fedb 	bl	8000614 <ExtractBits>
 800685e:	4602      	mov	r2, r0
 8006860:	78bb      	ldrb	r3, [r7, #2]
 8006862:	b2d1      	uxtb	r1, r2
 8006864:	4a5a      	ldr	r2, [pc, #360]	; (80069d0 <Service_Msg_Extr+0x360>)
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	4413      	add	r3, r2
 800686a:	3301      	adds	r3, #1
 800686c:	460a      	mov	r2, r1
 800686e:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8006870:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006874:	3308      	adds	r3, #8
 8006876:	2b00      	cmp	r3, #0
 8006878:	da00      	bge.n	800687c <Service_Msg_Extr+0x20c>
 800687a:	3307      	adds	r3, #7
 800687c:	10db      	asrs	r3, r3, #3
 800687e:	b29a      	uxth	r2, r3
 8006880:	89fb      	ldrh	r3, [r7, #14]
 8006882:	4413      	add	r3, r2
 8006884:	81fb      	strh	r3, [r7, #14]
 8006886:	89bb      	ldrh	r3, [r7, #12]
 8006888:	3308      	adds	r3, #8
 800688a:	b29b      	uxth	r3, r3
 800688c:	b21b      	sxth	r3, r3
 800688e:	425a      	negs	r2, r3
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	f002 0207 	and.w	r2, r2, #7
 8006898:	bf58      	it	pl
 800689a:	4253      	negpl	r3, r2
 800689c:	b21b      	sxth	r3, r3
 800689e:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80068a0:	89fb      	ldrh	r3, [r7, #14]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	441a      	add	r2, r3
 80068a6:	89bb      	ldrh	r3, [r7, #12]
 80068a8:	2108      	movs	r1, #8
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7f9 feb2 	bl	8000614 <ExtractBits>
 80068b0:	4603      	mov	r3, r0
 80068b2:	78ba      	ldrb	r2, [r7, #2]
 80068b4:	b2d8      	uxtb	r0, r3
 80068b6:	4945      	ldr	r1, [pc, #276]	; (80069cc <Service_Msg_Extr+0x35c>)
 80068b8:	4613      	mov	r3, r2
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	3302      	adds	r3, #2
 80068c4:	4602      	mov	r2, r0
 80068c6:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 80068c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80068cc:	3308      	adds	r3, #8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	da00      	bge.n	80068d4 <Service_Msg_Extr+0x264>
 80068d2:	3307      	adds	r3, #7
 80068d4:	10db      	asrs	r3, r3, #3
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	89fb      	ldrh	r3, [r7, #14]
 80068da:	4413      	add	r3, r2
 80068dc:	81fb      	strh	r3, [r7, #14]
 80068de:	89bb      	ldrh	r3, [r7, #12]
 80068e0:	3308      	adds	r3, #8
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	b21b      	sxth	r3, r3
 80068e6:	425a      	negs	r2, r3
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	f002 0207 	and.w	r2, r2, #7
 80068f0:	bf58      	it	pl
 80068f2:	4253      	negpl	r3, r2
 80068f4:	b21b      	sxth	r3, r3
 80068f6:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80068f8:	89fb      	ldrh	r3, [r7, #14]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	441a      	add	r2, r3
 80068fe:	89bb      	ldrh	r3, [r7, #12]
 8006900:	2110      	movs	r1, #16
 8006902:	4618      	mov	r0, r3
 8006904:	f7f9 fe86 	bl	8000614 <ExtractBits>
 8006908:	4602      	mov	r2, r0
 800690a:	78bb      	ldrb	r3, [r7, #2]
 800690c:	b291      	uxth	r1, r2
 800690e:	4a30      	ldr	r2, [pc, #192]	; (80069d0 <Service_Msg_Extr+0x360>)
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	4413      	add	r3, r2
 8006914:	3304      	adds	r3, #4
 8006916:	460a      	mov	r2, r1
 8006918:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800691a:	492e      	ldr	r1, [pc, #184]	; (80069d4 <Service_Msg_Extr+0x364>)
 800691c:	482e      	ldr	r0, [pc, #184]	; (80069d8 <Service_Msg_Extr+0x368>)
 800691e:	f7f9 fc8f 	bl	8000240 <strcmp>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10f      	bne.n	8006948 <Service_Msg_Extr+0x2d8>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8006928:	78bb      	ldrb	r3, [r7, #2]
 800692a:	4a29      	ldr	r2, [pc, #164]	; (80069d0 <Service_Msg_Extr+0x360>)
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	4413      	add	r3, r2
 8006930:	3304      	adds	r3, #4
 8006932:	881a      	ldrh	r2, [r3, #0]
 8006934:	78bb      	ldrb	r3, [r7, #2]
 8006936:	f042 0208 	orr.w	r2, r2, #8
 800693a:	b291      	uxth	r1, r2
 800693c:	4a24      	ldr	r2, [pc, #144]	; (80069d0 <Service_Msg_Extr+0x360>)
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	4413      	add	r3, r2
 8006942:	3304      	adds	r3, #4
 8006944:	460a      	mov	r2, r1
 8006946:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8006948:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800694c:	3310      	adds	r3, #16
 800694e:	2b00      	cmp	r3, #0
 8006950:	da00      	bge.n	8006954 <Service_Msg_Extr+0x2e4>
 8006952:	3307      	adds	r3, #7
 8006954:	10db      	asrs	r3, r3, #3
 8006956:	b29a      	uxth	r2, r3
 8006958:	89fb      	ldrh	r3, [r7, #14]
 800695a:	4413      	add	r3, r2
 800695c:	81fb      	strh	r3, [r7, #14]
 800695e:	89bb      	ldrh	r3, [r7, #12]
 8006960:	3310      	adds	r3, #16
 8006962:	b29b      	uxth	r3, r3
 8006964:	b21b      	sxth	r3, r3
 8006966:	425a      	negs	r2, r3
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	f002 0207 	and.w	r2, r2, #7
 8006970:	bf58      	it	pl
 8006972:	4253      	negpl	r3, r2
 8006974:	b21b      	sxth	r3, r3
 8006976:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 8006978:	78bb      	ldrb	r3, [r7, #2]
 800697a:	4a15      	ldr	r2, [pc, #84]	; (80069d0 <Service_Msg_Extr+0x360>)
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	4413      	add	r3, r2
 8006980:	3304      	adds	r3, #4
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 812b 	beq.w	8006be4 <Service_Msg_Extr+0x574>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800698e:	89fb      	ldrh	r3, [r7, #14]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	441a      	add	r2, r3
 8006994:	89bb      	ldrh	r3, [r7, #12]
 8006996:	2108      	movs	r1, #8
 8006998:	4618      	mov	r0, r3
 800699a:	f7f9 fe3b 	bl	8000614 <ExtractBits>
 800699e:	4603      	mov	r3, r0
 80069a0:	78ba      	ldrb	r2, [r7, #2]
 80069a2:	b2d8      	uxtb	r0, r3
 80069a4:	490d      	ldr	r1, [pc, #52]	; (80069dc <Service_Msg_Extr+0x36c>)
 80069a6:	4613      	mov	r3, r2
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	4413      	add	r3, r2
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	440b      	add	r3, r1
 80069b0:	3305      	adds	r3, #5
 80069b2:	4602      	mov	r2, r0
 80069b4:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 80069b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069ba:	3308      	adds	r3, #8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	da0f      	bge.n	80069e0 <Service_Msg_Extr+0x370>
 80069c0:	3307      	adds	r3, #7
 80069c2:	e00d      	b.n	80069e0 <Service_Msg_Extr+0x370>
 80069c4:	20000fa4 	.word	0x20000fa4
 80069c8:	20000fcc 	.word	0x20000fcc
 80069cc:	20001584 	.word	0x20001584
 80069d0:	200011c4 	.word	0x200011c4
 80069d4:	0802411c 	.word	0x0802411c
 80069d8:	20000305 	.word	0x20000305
 80069dc:	20001188 	.word	0x20001188
 80069e0:	10db      	asrs	r3, r3, #3
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	89fb      	ldrh	r3, [r7, #14]
 80069e6:	4413      	add	r3, r2
 80069e8:	81fb      	strh	r3, [r7, #14]
 80069ea:	89bb      	ldrh	r3, [r7, #12]
 80069ec:	3308      	adds	r3, #8
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	b21b      	sxth	r3, r3
 80069f2:	425a      	negs	r2, r3
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	f002 0207 	and.w	r2, r2, #7
 80069fc:	bf58      	it	pl
 80069fe:	4253      	negpl	r3, r2
 8006a00:	b21b      	sxth	r3, r3
 8006a02:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006a04:	89fb      	ldrh	r3, [r7, #14]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	441a      	add	r2, r3
 8006a0a:	89bb      	ldrh	r3, [r7, #12]
 8006a0c:	2108      	movs	r1, #8
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7f9 fe00 	bl	8000614 <ExtractBits>
 8006a14:	4603      	mov	r3, r0
 8006a16:	78ba      	ldrb	r2, [r7, #2]
 8006a18:	b2d8      	uxtb	r0, r3
 8006a1a:	496e      	ldr	r1, [pc, #440]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	4413      	add	r3, r2
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	440b      	add	r3, r1
 8006a26:	3304      	adds	r3, #4
 8006a28:	4602      	mov	r2, r0
 8006a2a:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8006a2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a30:	3308      	adds	r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	da00      	bge.n	8006a38 <Service_Msg_Extr+0x3c8>
 8006a36:	3307      	adds	r3, #7
 8006a38:	10db      	asrs	r3, r3, #3
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	89fb      	ldrh	r3, [r7, #14]
 8006a3e:	4413      	add	r3, r2
 8006a40:	81fb      	strh	r3, [r7, #14]
 8006a42:	89bb      	ldrh	r3, [r7, #12]
 8006a44:	3308      	adds	r3, #8
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	b21b      	sxth	r3, r3
 8006a4a:	425a      	negs	r2, r3
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	f002 0207 	and.w	r2, r2, #7
 8006a54:	bf58      	it	pl
 8006a56:	4253      	negpl	r3, r2
 8006a58:	b21b      	sxth	r3, r3
 8006a5a:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006a5c:	89fb      	ldrh	r3, [r7, #14]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	441a      	add	r2, r3
 8006a62:	89bb      	ldrh	r3, [r7, #12]
 8006a64:	2108      	movs	r1, #8
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7f9 fdd4 	bl	8000614 <ExtractBits>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	78ba      	ldrb	r2, [r7, #2]
 8006a70:	b2d8      	uxtb	r0, r3
 8006a72:	4958      	ldr	r1, [pc, #352]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006a74:	4613      	mov	r3, r2
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	4413      	add	r3, r2
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	440b      	add	r3, r1
 8006a7e:	3303      	adds	r3, #3
 8006a80:	4602      	mov	r2, r0
 8006a82:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8006a84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	da00      	bge.n	8006a90 <Service_Msg_Extr+0x420>
 8006a8e:	3307      	adds	r3, #7
 8006a90:	10db      	asrs	r3, r3, #3
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	89fb      	ldrh	r3, [r7, #14]
 8006a96:	4413      	add	r3, r2
 8006a98:	81fb      	strh	r3, [r7, #14]
 8006a9a:	89bb      	ldrh	r3, [r7, #12]
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	b21b      	sxth	r3, r3
 8006aa2:	425a      	negs	r2, r3
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	f002 0207 	and.w	r2, r2, #7
 8006aac:	bf58      	it	pl
 8006aae:	4253      	negpl	r3, r2
 8006ab0:	b21b      	sxth	r3, r3
 8006ab2:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006ab4:	89fb      	ldrh	r3, [r7, #14]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	441a      	add	r2, r3
 8006aba:	89bb      	ldrh	r3, [r7, #12]
 8006abc:	2108      	movs	r1, #8
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7f9 fda8 	bl	8000614 <ExtractBits>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	78ba      	ldrb	r2, [r7, #2]
 8006ac8:	b2d8      	uxtb	r0, r3
 8006aca:	4942      	ldr	r1, [pc, #264]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006acc:	4613      	mov	r3, r2
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	4413      	add	r3, r2
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	440b      	add	r3, r1
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8006ada:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	da00      	bge.n	8006ae6 <Service_Msg_Extr+0x476>
 8006ae4:	3307      	adds	r3, #7
 8006ae6:	10db      	asrs	r3, r3, #3
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	89fb      	ldrh	r3, [r7, #14]
 8006aec:	4413      	add	r3, r2
 8006aee:	81fb      	strh	r3, [r7, #14]
 8006af0:	89bb      	ldrh	r3, [r7, #12]
 8006af2:	3308      	adds	r3, #8
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	b21b      	sxth	r3, r3
 8006af8:	425a      	negs	r2, r3
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	f002 0207 	and.w	r2, r2, #7
 8006b02:	bf58      	it	pl
 8006b04:	4253      	negpl	r3, r2
 8006b06:	b21b      	sxth	r3, r3
 8006b08:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b0a:	89fb      	ldrh	r3, [r7, #14]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	441a      	add	r2, r3
 8006b10:	89bb      	ldrh	r3, [r7, #12]
 8006b12:	2108      	movs	r1, #8
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7f9 fd7d 	bl	8000614 <ExtractBits>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	78ba      	ldrb	r2, [r7, #2]
 8006b1e:	b2d8      	uxtb	r0, r3
 8006b20:	492c      	ldr	r1, [pc, #176]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006b22:	4613      	mov	r3, r2
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4413      	add	r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	440b      	add	r3, r1
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	4602      	mov	r2, r0
 8006b30:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8006b32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b36:	3308      	adds	r3, #8
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	da00      	bge.n	8006b3e <Service_Msg_Extr+0x4ce>
 8006b3c:	3307      	adds	r3, #7
 8006b3e:	10db      	asrs	r3, r3, #3
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	89fb      	ldrh	r3, [r7, #14]
 8006b44:	4413      	add	r3, r2
 8006b46:	81fb      	strh	r3, [r7, #14]
 8006b48:	89bb      	ldrh	r3, [r7, #12]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	b21b      	sxth	r3, r3
 8006b50:	425a      	negs	r2, r3
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	f002 0207 	and.w	r2, r2, #7
 8006b5a:	bf58      	it	pl
 8006b5c:	4253      	negpl	r3, r2
 8006b5e:	b21b      	sxth	r3, r3
 8006b60:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b62:	89fb      	ldrh	r3, [r7, #14]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	441a      	add	r2, r3
 8006b68:	89bb      	ldrh	r3, [r7, #12]
 8006b6a:	2108      	movs	r1, #8
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7f9 fd51 	bl	8000614 <ExtractBits>
 8006b72:	4603      	mov	r3, r0
 8006b74:	78ba      	ldrb	r2, [r7, #2]
 8006b76:	b2d8      	uxtb	r0, r3
 8006b78:	4916      	ldr	r1, [pc, #88]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	4413      	add	r3, r2
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	440b      	add	r3, r1
 8006b84:	3302      	adds	r3, #2
 8006b86:	4602      	mov	r2, r0
 8006b88:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8006b8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	da00      	bge.n	8006b96 <Service_Msg_Extr+0x526>
 8006b94:	3307      	adds	r3, #7
 8006b96:	10db      	asrs	r3, r3, #3
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	89fb      	ldrh	r3, [r7, #14]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	81fb      	strh	r3, [r7, #14]
 8006ba0:	89bb      	ldrh	r3, [r7, #12]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	b21b      	sxth	r3, r3
 8006ba8:	425a      	negs	r2, r3
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	f002 0207 	and.w	r2, r2, #7
 8006bb2:	bf58      	it	pl
 8006bb4:	4253      	negpl	r3, r2
 8006bb6:	b21b      	sxth	r3, r3
 8006bb8:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8006bba:	78bb      	ldrb	r3, [r7, #2]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f002 f8a5 	bl	8008d0c <IS_MLK_EIPC_TIME_MATCHING>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d009      	beq.n	8006bdc <Service_Msg_Extr+0x56c>
 8006bc8:	78bb      	ldrb	r3, [r7, #2]
 8006bca:	4a03      	ldr	r2, [pc, #12]	; (8006bd8 <Service_Msg_Extr+0x568>)
 8006bcc:	2100      	movs	r1, #0
 8006bce:	54d1      	strb	r1, [r2, r3]
 8006bd0:	e008      	b.n	8006be4 <Service_Msg_Extr+0x574>
 8006bd2:	bf00      	nop
 8006bd4:	20001188 	.word	0x20001188
 8006bd8:	200010d8 	.word	0x200010d8
 8006bdc:	78bb      	ldrb	r3, [r7, #2]
 8006bde:	4a98      	ldr	r2, [pc, #608]	; (8006e40 <Service_Msg_Extr+0x7d0>)
 8006be0:	2101      	movs	r1, #1
 8006be2:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8006be4:	78bb      	ldrb	r3, [r7, #2]
 8006be6:	4a97      	ldr	r2, [pc, #604]	; (8006e44 <Service_Msg_Extr+0x7d4>)
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	4413      	add	r3, r2
 8006bec:	3304      	adds	r3, #4
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <Service_Msg_Extr+0x58c>
	{
		LinkEstablishFlag = SET;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 8006bfc:	787a      	ldrb	r2, [r7, #1]
 8006bfe:	78bb      	ldrb	r3, [r7, #2]
 8006c00:	4611      	mov	r1, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff f8d0 	bl	8005da8 <Send_Status_Message>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 8006c08:	7ffb      	ldrb	r3, [r7, #31]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	f040 8081 	bne.w	8006d12 <Service_Msg_Extr+0x6a2>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006c10:	78ba      	ldrb	r2, [r7, #2]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4a8b      	ldr	r2, [pc, #556]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3301      	adds	r3, #1
 8006c20:	2210      	movs	r2, #16
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f01b fdbb 	bl	80227a0 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8006c2a:	78ba      	ldrb	r2, [r7, #2]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4a84      	ldr	r2, [pc, #528]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c36:	1898      	adds	r0, r3, r2
 8006c38:	78ba      	ldrb	r2, [r7, #2]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4a82      	ldr	r2, [pc, #520]	; (8006e4c <Service_Msg_Extr+0x7dc>)
 8006c44:	4413      	add	r3, r2
 8006c46:	2214      	movs	r2, #20
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f01b fd81 	bl	8022750 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8006c4e:	78bb      	ldrb	r3, [r7, #2]
 8006c50:	4a7f      	ldr	r2, [pc, #508]	; (8006e50 <Service_Msg_Extr+0x7e0>)
 8006c52:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006c56:	78ba      	ldrb	r2, [r7, #2]
 8006c58:	487b      	ldr	r0, [pc, #492]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4403      	add	r3, r0
 8006c64:	3312      	adds	r3, #18
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	4299      	cmp	r1, r3
 8006c6a:	d052      	beq.n	8006d12 <Service_Msg_Extr+0x6a2>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006c6c:	78ba      	ldrb	r2, [r7, #2]
 8006c6e:	78b9      	ldrb	r1, [r7, #2]
 8006c70:	4875      	ldr	r0, [pc, #468]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4403      	add	r3, r0
 8006c7c:	3312      	adds	r3, #18
 8006c7e:	881a      	ldrh	r2, [r3, #0]
 8006c80:	4b73      	ldr	r3, [pc, #460]	; (8006e50 <Service_Msg_Extr+0x7e0>)
 8006c82:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8006c86:	2214      	movs	r2, #20
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4872      	ldr	r0, [pc, #456]	; (8006e54 <Service_Msg_Extr+0x7e4>)
 8006c8c:	f01b fd88 	bl	80227a0 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8006c90:	78ba      	ldrb	r2, [r7, #2]
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4a6b      	ldr	r2, [pc, #428]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c9c:	4413      	add	r3, r2
 8006c9e:	2214      	movs	r2, #20
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	486c      	ldr	r0, [pc, #432]	; (8006e54 <Service_Msg_Extr+0x7e4>)
 8006ca4:	f01b fd54 	bl	8022750 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8006ca8:	f240 2007 	movw	r0, #519	; 0x207
 8006cac:	f008 fe8c 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006cb0:	78b9      	ldrb	r1, [r7, #2]
 8006cb2:	78ba      	ldrb	r2, [r7, #2]
 8006cb4:	4864      	ldr	r0, [pc, #400]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4403      	add	r3, r0
 8006cc0:	3312      	adds	r3, #18
 8006cc2:	8818      	ldrh	r0, [r3, #0]
 8006cc4:	4964      	ldr	r1, [pc, #400]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	4413      	add	r3, r2
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	440b      	add	r3, r1
 8006cd0:	3306      	adds	r3, #6
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 8006cd6:	78bb      	ldrb	r3, [r7, #2]
 8006cd8:	4a60      	ldr	r2, [pc, #384]	; (8006e5c <Service_Msg_Extr+0x7ec>)
 8006cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d117      	bne.n	8006d12 <Service_Msg_Extr+0x6a2>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006ce2:	78bb      	ldrb	r3, [r7, #2]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	4a5e      	ldr	r2, [pc, #376]	; (8006e60 <Service_Msg_Extr+0x7f0>)
 8006ce8:	4413      	add	r3, r2
 8006cea:	1c98      	adds	r0, r3, #2
 8006cec:	78ba      	ldrb	r2, [r7, #2]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4a54      	ldr	r2, [pc, #336]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006cf8:	4413      	add	r3, r2
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	2210      	movs	r2, #16
 8006cfe:	4619      	mov	r1, r3
 8006d00:	f01b fd26 	bl	8022750 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8006d04:	f240 1019 	movw	r0, #281	; 0x119
 8006d08:	f008 fe5e 	bl	800f9c8 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8006d0c:	4a55      	ldr	r2, [pc, #340]	; (8006e64 <Service_Msg_Extr+0x7f4>)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	6013      	str	r3, [r2, #0]
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8006d12:	78ba      	ldrb	r2, [r7, #2]
 8006d14:	4950      	ldr	r1, [pc, #320]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d16:	4613      	mov	r3, r2
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	4413      	add	r3, r2
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	440b      	add	r3, r1
 8006d20:	3314      	adds	r3, #20
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 8006d26:	78ba      	ldrb	r2, [r7, #2]
 8006d28:	494b      	ldr	r1, [pc, #300]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	4413      	add	r3, r2
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	440b      	add	r3, r1
 8006d34:	3305      	adds	r3, #5
 8006d36:	2206      	movs	r2, #6
 8006d38:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8006d3a:	78ba      	ldrb	r2, [r7, #2]
 8006d3c:	4946      	ldr	r1, [pc, #280]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d3e:	4613      	mov	r3, r2
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	4413      	add	r3, r2
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	440b      	add	r3, r1
 8006d48:	78ba      	ldrb	r2, [r7, #2]
 8006d4a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8006d4c:	78ba      	ldrb	r2, [r7, #2]
 8006d4e:	4942      	ldr	r1, [pc, #264]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d50:	4613      	mov	r3, r2
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	4413      	add	r3, r2
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	440b      	add	r3, r1
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8006d60:	78ba      	ldrb	r2, [r7, #2]
 8006d62:	493d      	ldr	r1, [pc, #244]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d64:	4613      	mov	r3, r2
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	4413      	add	r3, r2
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	440b      	add	r3, r1
 8006d6e:	3302      	adds	r3, #2
 8006d70:	7ffa      	ldrb	r2, [r7, #31]
 8006d72:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8006d74:	2218      	movs	r2, #24
 8006d76:	2100      	movs	r1, #0
 8006d78:	483b      	ldr	r0, [pc, #236]	; (8006e68 <Service_Msg_Extr+0x7f8>)
 8006d7a:	f01b fd11 	bl	80227a0 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8006d7e:	78ba      	ldrb	r2, [r7, #2]
 8006d80:	4613      	mov	r3, r2
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	4413      	add	r3, r2
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	4a33      	ldr	r2, [pc, #204]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d8a:	4413      	add	r3, r2
 8006d8c:	2218      	movs	r2, #24
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4835      	ldr	r0, [pc, #212]	; (8006e68 <Service_Msg_Extr+0x7f8>)
 8006d92:	f01b fcdd 	bl	8022750 <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8006d96:	f240 2001 	movw	r0, #513	; 0x201
 8006d9a:	f008 fe15 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8006d9e:	78ba      	ldrb	r2, [r7, #2]
 8006da0:	492d      	ldr	r1, [pc, #180]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006da2:	4613      	mov	r3, r2
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	4413      	add	r3, r2
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	440b      	add	r3, r1
 8006dac:	3301      	adds	r3, #1
 8006dae:	2200      	movs	r2, #0
 8006db0:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8006db2:	78bb      	ldrb	r3, [r7, #2]
 8006db4:	492d      	ldr	r1, [pc, #180]	; (8006e6c <Service_Msg_Extr+0x7fc>)
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 8006dbc:	7ffb      	ldrb	r3, [r7, #31]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d11d      	bne.n	8006dfe <Service_Msg_Extr+0x78e>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8006dc2:	78bb      	ldrb	r3, [r7, #2]
 8006dc4:	492a      	ldr	r1, [pc, #168]	; (8006e70 <Service_Msg_Extr+0x800>)
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Link_Flag[Source_Index] = SET;
 8006dcc:	78bb      	ldrb	r3, [r7, #2]
 8006dce:	4a29      	ldr	r2, [pc, #164]	; (8006e74 <Service_Msg_Extr+0x804>)
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8006dd4:	78ba      	ldrb	r2, [r7, #2]
 8006dd6:	4928      	ldr	r1, [pc, #160]	; (8006e78 <Service_Msg_Extr+0x808>)
 8006dd8:	4613      	mov	r3, r2
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	4413      	add	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	440b      	add	r3, r1
 8006de2:	3301      	adds	r3, #1
 8006de4:	2201      	movs	r2, #1
 8006de6:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8006de8:	78ba      	ldrb	r2, [r7, #2]
 8006dea:	4923      	ldr	r1, [pc, #140]	; (8006e78 <Service_Msg_Extr+0x808>)
 8006dec:	4613      	mov	r3, r2
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	3304      	adds	r3, #4
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e017      	b.n	8006e2e <Service_Msg_Extr+0x7be>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8006dfe:	78bb      	ldrb	r3, [r7, #2]
 8006e00:	4a1c      	ldr	r2, [pc, #112]	; (8006e74 <Service_Msg_Extr+0x804>)
 8006e02:	2100      	movs	r1, #0
 8006e04:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8006e06:	78ba      	ldrb	r2, [r7, #2]
 8006e08:	491b      	ldr	r1, [pc, #108]	; (8006e78 <Service_Msg_Extr+0x808>)
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	440b      	add	r3, r1
 8006e14:	3308      	adds	r3, #8
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8006e1a:	78ba      	ldrb	r2, [r7, #2]
 8006e1c:	4916      	ldr	r1, [pc, #88]	; (8006e78 <Service_Msg_Extr+0x808>)
 8006e1e:	4613      	mov	r3, r2
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	3301      	adds	r3, #1
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8006e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e32:	4812      	ldr	r0, [pc, #72]	; (8006e7c <Service_Msg_Extr+0x80c>)
 8006e34:	f011 fa87 	bl	8018346 <HAL_GPIO_TogglePin>

}
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	200010d8 	.word	0x200010d8
 8006e44:	200011c4 	.word	0x200011c4
 8006e48:	20001e80 	.word	0x20001e80
 8006e4c:	20001db8 	.word	0x20001db8
 8006e50:	20000f00 	.word	0x20000f00
 8006e54:	20002010 	.word	0x20002010
 8006e58:	20001674 	.word	0x20001674
 8006e5c:	20000ec4 	.word	0x20000ec4
 8006e60:	200010e4 	.word	0x200010e4
 8006e64:	20000e70 	.word	0x20000e70
 8006e68:	20001854 	.word	0x20001854
 8006e6c:	20000e44 	.word	0x20000e44
 8006e70:	20000f14 	.word	0x20000f14
 8006e74:	20000f64 	.word	0x20000f64
 8006e78:	20001cc8 	.word	0x20001cc8
 8006e7c:	40021c00 	.word	0x40021c00

08006e80 <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b095      	sub	sp, #84	; 0x54
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	460a      	mov	r2, r1
 8006e8a:	71fb      	strb	r3, [r7, #7]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	f107 0310 	add.w	r3, r7, #16
 8006e98:	2238      	movs	r2, #56	; 0x38
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f01b fc7f 	bl	80227a0 <memset>

	BITSTUFFINIT(0, 0);
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 8006eae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006eb2:	f107 020c 	add.w	r2, r7, #12
 8006eb6:	441a      	add	r2, r3
 8006eb8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006ebc:	23f4      	movs	r3, #244	; 0xf4
 8006ebe:	2108      	movs	r1, #8
 8006ec0:	f7f9 fc34 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006ec4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006ec8:	3308      	adds	r3, #8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	da00      	bge.n	8006ed0 <Send_Service_Signal_Message+0x50>
 8006ece:	3307      	adds	r3, #7
 8006ed0:	10db      	asrs	r3, r3, #3
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ed8:	4413      	add	r3, r2
 8006eda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006ede:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	b21b      	sxth	r3, r3
 8006ee8:	425a      	negs	r2, r3
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	f002 0207 	and.w	r2, r2, #7
 8006ef2:	bf58      	it	pl
 8006ef4:	4253      	negpl	r3, r2
 8006ef6:	b21b      	sxth	r3, r3
 8006ef8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 8006efc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f00:	f107 020c 	add.w	r2, r7, #12
 8006f04:	441a      	add	r2, r3
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	497b      	ldr	r1, [pc, #492]	; (80070f8 <Send_Service_Signal_Message+0x278>)
 8006f0a:	3366      	adds	r3, #102	; 0x66
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	440b      	add	r3, r1
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006f16:	2110      	movs	r1, #16
 8006f18:	f7f9 fc08 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006f1c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006f20:	3310      	adds	r3, #16
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da00      	bge.n	8006f28 <Send_Service_Signal_Message+0xa8>
 8006f26:	3307      	adds	r3, #7
 8006f28:	10db      	asrs	r3, r3, #3
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f30:	4413      	add	r3, r2
 8006f32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006f36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006f3a:	3310      	adds	r3, #16
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	b21b      	sxth	r3, r3
 8006f40:	425a      	negs	r2, r3
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	f002 0207 	and.w	r2, r2, #7
 8006f4a:	bf58      	it	pl
 8006f4c:	4253      	negpl	r3, r2
 8006f4e:	b21b      	sxth	r3, r3
 8006f50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 8006f54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f58:	f107 020c 	add.w	r2, r7, #12
 8006f5c:	441a      	add	r2, r3
 8006f5e:	79fb      	ldrb	r3, [r7, #7]
 8006f60:	4965      	ldr	r1, [pc, #404]	; (80070f8 <Send_Service_Signal_Message+0x278>)
 8006f62:	3370      	adds	r3, #112	; 0x70
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006f6e:	2110      	movs	r1, #16
 8006f70:	f7f9 fbdc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006f74:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006f78:	3310      	adds	r3, #16
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	da00      	bge.n	8006f80 <Send_Service_Signal_Message+0x100>
 8006f7e:	3307      	adds	r3, #7
 8006f80:	10db      	asrs	r3, r3, #3
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f88:	4413      	add	r3, r2
 8006f8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006f8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006f92:	3310      	adds	r3, #16
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	b21b      	sxth	r3, r3
 8006f98:	425a      	negs	r2, r3
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	f002 0207 	and.w	r2, r2, #7
 8006fa2:	bf58      	it	pl
 8006fa4:	4253      	negpl	r3, r2
 8006fa6:	b21b      	sxth	r3, r3
 8006fa8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006fac:	4b53      	ldr	r3, [pc, #332]	; (80070fc <Send_Service_Signal_Message+0x27c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	089b      	lsrs	r3, r3, #2
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d035      	beq.n	8007026 <Send_Service_Signal_Message+0x1a6>
 8006fba:	4b50      	ldr	r3, [pc, #320]	; (80070fc <Send_Service_Signal_Message+0x27c>)
 8006fbc:	791b      	ldrb	r3, [r3, #4]
 8006fbe:	79fa      	ldrb	r2, [r7, #7]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d130      	bne.n	8007026 <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8006fca:	484d      	ldr	r0, [pc, #308]	; (8007100 <Send_Service_Signal_Message+0x280>)
 8006fcc:	f013 f984 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	4b4c      	ldr	r3, [pc, #304]	; (8007104 <Send_Service_Signal_Message+0x284>)
 8006fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fd8:	099b      	lsrs	r3, r3, #6
 8006fda:	21c8      	movs	r1, #200	; 0xc8
 8006fdc:	fb01 f303 	mul.w	r3, r1, r3
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 8006fe6:	4848      	ldr	r0, [pc, #288]	; (8007108 <Send_Service_Signal_Message+0x288>)
 8006fe8:	f01b fd5e 	bl	8022aa8 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	4a47      	ldr	r2, [pc, #284]	; (800710c <Send_Service_Signal_Message+0x28c>)
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	4413      	add	r3, r2
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4845      	ldr	r0, [pc, #276]	; (8007110 <Send_Service_Signal_Message+0x290>)
 8006ffc:	f01b fcb8 	bl	8022970 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8007000:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007004:	4619      	mov	r1, r3
 8007006:	4843      	ldr	r0, [pc, #268]	; (8007114 <Send_Service_Signal_Message+0x294>)
 8007008:	f01b fcb2 	bl	8022970 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 800700c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007010:	f107 020c 	add.w	r2, r7, #12
 8007014:	441a      	add	r2, r3
 8007016:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800701a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800701e:	2108      	movs	r1, #8
 8007020:	f7f9 fb84 	bl	800072c <InsertBits>
	{
 8007024:	e00f      	b.n	8007046 <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8007026:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800702a:	f107 020c 	add.w	r2, r7, #12
 800702e:	441a      	add	r2, r3
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	4936      	ldr	r1, [pc, #216]	; (800710c <Send_Service_Signal_Message+0x28c>)
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	440b      	add	r3, r1
 8007038:	3301      	adds	r3, #1
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007040:	2108      	movs	r1, #8
 8007042:	f7f9 fb73 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8007046:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800704a:	3308      	adds	r3, #8
 800704c:	2b00      	cmp	r3, #0
 800704e:	da00      	bge.n	8007052 <Send_Service_Signal_Message+0x1d2>
 8007050:	3307      	adds	r3, #7
 8007052:	10db      	asrs	r3, r3, #3
 8007054:	b29a      	uxth	r2, r3
 8007056:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800705a:	4413      	add	r3, r2
 800705c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007060:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007064:	3308      	adds	r3, #8
 8007066:	b29b      	uxth	r3, r3
 8007068:	b21b      	sxth	r3, r3
 800706a:	425a      	negs	r2, r3
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	f002 0207 	and.w	r2, r2, #7
 8007074:	bf58      	it	pl
 8007076:	4253      	negpl	r3, r2
 8007078:	b21b      	sxth	r3, r3
 800707a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800707e:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <Send_Service_Signal_Message+0x27c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	08db      	lsrs	r3, r3, #3
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d04b      	beq.n	8007124 <Send_Service_Signal_Message+0x2a4>
 800708c:	4b1b      	ldr	r3, [pc, #108]	; (80070fc <Send_Service_Signal_Message+0x27c>)
 800708e:	791b      	ldrb	r3, [r3, #4]
 8007090:	79fa      	ldrb	r2, [r7, #7]
 8007092:	429a      	cmp	r2, r3
 8007094:	d146      	bne.n	8007124 <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 800709c:	4818      	ldr	r0, [pc, #96]	; (8007100 <Send_Service_Signal_Message+0x280>)
 800709e:	f013 f91b 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 80070a2:	4602      	mov	r2, r0
 80070a4:	4b17      	ldr	r3, [pc, #92]	; (8007104 <Send_Service_Signal_Message+0x284>)
 80070a6:	fba3 1302 	umull	r1, r3, r3, r2
 80070aa:	099b      	lsrs	r3, r3, #6
 80070ac:	21c8      	movs	r1, #200	; 0xc8
 80070ae:	fb01 f303 	mul.w	r3, r1, r3
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 80070b8:	4817      	ldr	r0, [pc, #92]	; (8007118 <Send_Service_Signal_Message+0x298>)
 80070ba:	f01b fcf5 	bl	8022aa8 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	4a12      	ldr	r2, [pc, #72]	; (800710c <Send_Service_Signal_Message+0x28c>)
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	4413      	add	r3, r2
 80070c6:	3302      	adds	r3, #2
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	4619      	mov	r1, r3
 80070cc:	4813      	ldr	r0, [pc, #76]	; (800711c <Send_Service_Signal_Message+0x29c>)
 80070ce:	f01b fc4f 	bl	8022970 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 80070d2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80070d6:	4619      	mov	r1, r3
 80070d8:	4811      	ldr	r0, [pc, #68]	; (8007120 <Send_Service_Signal_Message+0x2a0>)
 80070da:	f01b fc49 	bl	8022970 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 80070de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070e2:	f107 020c 	add.w	r2, r7, #12
 80070e6:	441a      	add	r2, r3
 80070e8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80070ec:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80070f0:	2108      	movs	r1, #8
 80070f2:	f7f9 fb1b 	bl	800072c <InsertBits>
	{
 80070f6:	e033      	b.n	8007160 <Send_Service_Signal_Message+0x2e0>
 80070f8:	20000304 	.word	0x20000304
 80070fc:	2000195c 	.word	0x2000195c
 8007100:	20009d20 	.word	0x20009d20
 8007104:	51eb851f 	.word	0x51eb851f
 8007108:	080244c4 	.word	0x080244c4
 800710c:	200011c4 	.word	0x200011c4
 8007110:	08024a68 	.word	0x08024a68
 8007114:	08024a88 	.word	0x08024a88
 8007118:	08024528 	.word	0x08024528
 800711c:	08024aa8 	.word	0x08024aa8
 8007120:	08024ac8 	.word	0x08024ac8
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8007124:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007128:	f107 020c 	add.w	r2, r7, #12
 800712c:	18d1      	adds	r1, r2, r3
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	484e      	ldr	r0, [pc, #312]	; (800726c <Send_Service_Signal_Message+0x3ec>)
 8007132:	011a      	lsls	r2, r3, #4
 8007134:	4402      	add	r2, r0
 8007136:	3202      	adds	r2, #2
 8007138:	7812      	ldrb	r2, [r2, #0]
 800713a:	3201      	adds	r2, #1
 800713c:	b2d4      	uxtb	r4, r2
 800713e:	484b      	ldr	r0, [pc, #300]	; (800726c <Send_Service_Signal_Message+0x3ec>)
 8007140:	011a      	lsls	r2, r3, #4
 8007142:	4402      	add	r2, r0
 8007144:	3202      	adds	r2, #2
 8007146:	4620      	mov	r0, r4
 8007148:	7010      	strb	r0, [r2, #0]
 800714a:	4a48      	ldr	r2, [pc, #288]	; (800726c <Send_Service_Signal_Message+0x3ec>)
 800714c:	011b      	lsls	r3, r3, #4
 800714e:	4413      	add	r3, r2
 8007150:	3302      	adds	r3, #2
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007158:	460a      	mov	r2, r1
 800715a:	2108      	movs	r1, #8
 800715c:	f7f9 fae6 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8007160:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007164:	3308      	adds	r3, #8
 8007166:	2b00      	cmp	r3, #0
 8007168:	da00      	bge.n	800716c <Send_Service_Signal_Message+0x2ec>
 800716a:	3307      	adds	r3, #7
 800716c:	10db      	asrs	r3, r3, #3
 800716e:	b29a      	uxth	r2, r3
 8007170:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007174:	4413      	add	r3, r2
 8007176:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800717a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800717e:	3308      	adds	r3, #8
 8007180:	b29b      	uxth	r3, r3
 8007182:	b21b      	sxth	r3, r3
 8007184:	425a      	negs	r2, r3
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	f002 0207 	and.w	r2, r2, #7
 800718e:	bf58      	it	pl
 8007190:	4253      	negpl	r3, r2
 8007192:	b21b      	sxth	r3, r3
 8007194:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 8007198:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800719c:	f107 020c 	add.w	r2, r7, #12
 80071a0:	441a      	add	r2, r3
 80071a2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80071a6:	2306      	movs	r3, #6
 80071a8:	2108      	movs	r1, #8
 80071aa:	f7f9 fabf 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80071ae:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80071b2:	3308      	adds	r3, #8
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	da00      	bge.n	80071ba <Send_Service_Signal_Message+0x33a>
 80071b8:	3307      	adds	r3, #7
 80071ba:	10db      	asrs	r3, r3, #3
 80071bc:	b29a      	uxth	r2, r3
 80071be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071c2:	4413      	add	r3, r2
 80071c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80071c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071cc:	3308      	adds	r3, #8
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	b21b      	sxth	r3, r3
 80071d2:	425a      	negs	r2, r3
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	f002 0207 	and.w	r2, r2, #7
 80071dc:	bf58      	it	pl
 80071de:	4253      	negpl	r3, r2
 80071e0:	b21b      	sxth	r3, r3
 80071e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 80071e6:	79fb      	ldrb	r3, [r7, #7]
 80071e8:	4a21      	ldr	r2, [pc, #132]	; (8007270 <Send_Service_Signal_Message+0x3f0>)
 80071ea:	5cd3      	ldrb	r3, [r2, r3]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d147      	bne.n	8007280 <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 80071f0:	f004 f9bc 	bl	800b56c <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 80071f4:	79fa      	ldrb	r2, [r7, #7]
 80071f6:	4613      	mov	r3, r2
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	4413      	add	r3, r2
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <Send_Service_Signal_Message+0x3f4>)
 8007200:	4413      	add	r3, r2
 8007202:	4a1d      	ldr	r2, [pc, #116]	; (8007278 <Send_Service_Signal_Message+0x3f8>)
 8007204:	6811      	ldr	r1, [r2, #0]
 8007206:	6019      	str	r1, [r3, #0]
 8007208:	8892      	ldrh	r2, [r2, #4]
 800720a:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 800720c:	481b      	ldr	r0, [pc, #108]	; (800727c <Send_Service_Signal_Message+0x3fc>)
 800720e:	f01b fc4b 	bl	8022aa8 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	4a16      	ldr	r2, [pc, #88]	; (8007270 <Send_Service_Signal_Message+0x3f0>)
 8007216:	2100      	movs	r1, #0
 8007218:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 800721a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800721e:	f107 020c 	add.w	r2, r7, #12
 8007222:	441a      	add	r2, r3
 8007224:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007228:	2369      	movs	r3, #105	; 0x69
 800722a:	2110      	movs	r1, #16
 800722c:	f7f9 fa7e 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007230:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007234:	3310      	adds	r3, #16
 8007236:	2b00      	cmp	r3, #0
 8007238:	da00      	bge.n	800723c <Send_Service_Signal_Message+0x3bc>
 800723a:	3307      	adds	r3, #7
 800723c:	10db      	asrs	r3, r3, #3
 800723e:	b29a      	uxth	r2, r3
 8007240:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007244:	4413      	add	r3, r2
 8007246:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800724a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800724e:	3310      	adds	r3, #16
 8007250:	b29b      	uxth	r3, r3
 8007252:	b21b      	sxth	r3, r3
 8007254:	425a      	negs	r2, r3
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	f002 0207 	and.w	r2, r2, #7
 800725e:	bf58      	it	pl
 8007260:	4253      	negpl	r3, r2
 8007262:	b21b      	sxth	r3, r3
 8007264:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007268:	e031      	b.n	80072ce <Send_Service_Signal_Message+0x44e>
 800726a:	bf00      	nop
 800726c:	200011c4 	.word	0x200011c4
 8007270:	200010d8 	.word	0x200010d8
 8007274:	20001188 	.word	0x20001188
 8007278:	20002890 	.word	0x20002890
 800727c:	08024844 	.word	0x08024844
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 8007280:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007284:	f107 020c 	add.w	r2, r7, #12
 8007288:	441a      	add	r2, r3
 800728a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800728e:	2329      	movs	r3, #41	; 0x29
 8007290:	2110      	movs	r1, #16
 8007292:	f7f9 fa4b 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007296:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800729a:	3310      	adds	r3, #16
 800729c:	2b00      	cmp	r3, #0
 800729e:	da00      	bge.n	80072a2 <Send_Service_Signal_Message+0x422>
 80072a0:	3307      	adds	r3, #7
 80072a2:	10db      	asrs	r3, r3, #3
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072aa:	4413      	add	r3, r2
 80072ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80072b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072b4:	3310      	adds	r3, #16
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	b21b      	sxth	r3, r3
 80072ba:	425a      	negs	r2, r3
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	f002 0207 	and.w	r2, r2, #7
 80072c4:	bf58      	it	pl
 80072c6:	4253      	negpl	r3, r2
 80072c8:	b21b      	sxth	r3, r3
 80072ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 80072ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072d2:	f107 020c 	add.w	r2, r7, #12
 80072d6:	18d1      	adds	r1, r2, r3
 80072d8:	79fa      	ldrb	r2, [r7, #7]
 80072da:	48b5      	ldr	r0, [pc, #724]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 80072dc:	4613      	mov	r3, r2
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	4413      	add	r3, r2
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	4403      	add	r3, r0
 80072e6:	3305      	adds	r3, #5
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80072ee:	460a      	mov	r2, r1
 80072f0:	2108      	movs	r1, #8
 80072f2:	f7f9 fa1b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80072f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80072fa:	3308      	adds	r3, #8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	da00      	bge.n	8007302 <Send_Service_Signal_Message+0x482>
 8007300:	3307      	adds	r3, #7
 8007302:	10db      	asrs	r3, r3, #3
 8007304:	b29a      	uxth	r2, r3
 8007306:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800730a:	4413      	add	r3, r2
 800730c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007310:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007314:	3308      	adds	r3, #8
 8007316:	b29b      	uxth	r3, r3
 8007318:	b21b      	sxth	r3, r3
 800731a:	425a      	negs	r2, r3
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	f002 0207 	and.w	r2, r2, #7
 8007324:	bf58      	it	pl
 8007326:	4253      	negpl	r3, r2
 8007328:	b21b      	sxth	r3, r3
 800732a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 800732e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007332:	f107 020c 	add.w	r2, r7, #12
 8007336:	18d1      	adds	r1, r2, r3
 8007338:	79fa      	ldrb	r2, [r7, #7]
 800733a:	489d      	ldr	r0, [pc, #628]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 800733c:	4613      	mov	r3, r2
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	4413      	add	r3, r2
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	4403      	add	r3, r0
 8007346:	3304      	adds	r3, #4
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800734e:	460a      	mov	r2, r1
 8007350:	2108      	movs	r1, #8
 8007352:	f7f9 f9eb 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007356:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800735a:	3308      	adds	r3, #8
 800735c:	2b00      	cmp	r3, #0
 800735e:	da00      	bge.n	8007362 <Send_Service_Signal_Message+0x4e2>
 8007360:	3307      	adds	r3, #7
 8007362:	10db      	asrs	r3, r3, #3
 8007364:	b29a      	uxth	r2, r3
 8007366:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800736a:	4413      	add	r3, r2
 800736c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007370:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007374:	3308      	adds	r3, #8
 8007376:	b29b      	uxth	r3, r3
 8007378:	b21b      	sxth	r3, r3
 800737a:	425a      	negs	r2, r3
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	f002 0207 	and.w	r2, r2, #7
 8007384:	bf58      	it	pl
 8007386:	4253      	negpl	r3, r2
 8007388:	b21b      	sxth	r3, r3
 800738a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 800738e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007392:	f107 020c 	add.w	r2, r7, #12
 8007396:	18d1      	adds	r1, r2, r3
 8007398:	79fa      	ldrb	r2, [r7, #7]
 800739a:	4885      	ldr	r0, [pc, #532]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 800739c:	4613      	mov	r3, r2
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	4413      	add	r3, r2
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	4403      	add	r3, r0
 80073a6:	3303      	adds	r3, #3
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80073ae:	460a      	mov	r2, r1
 80073b0:	2108      	movs	r1, #8
 80073b2:	f7f9 f9bb 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80073b6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80073ba:	3308      	adds	r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	da00      	bge.n	80073c2 <Send_Service_Signal_Message+0x542>
 80073c0:	3307      	adds	r3, #7
 80073c2:	10db      	asrs	r3, r3, #3
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073ca:	4413      	add	r3, r2
 80073cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80073d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80073d4:	3308      	adds	r3, #8
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	b21b      	sxth	r3, r3
 80073da:	425a      	negs	r2, r3
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	f002 0207 	and.w	r2, r2, #7
 80073e4:	bf58      	it	pl
 80073e6:	4253      	negpl	r3, r2
 80073e8:	b21b      	sxth	r3, r3
 80073ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 80073ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073f2:	f107 020c 	add.w	r2, r7, #12
 80073f6:	18d1      	adds	r1, r2, r3
 80073f8:	79fa      	ldrb	r2, [r7, #7]
 80073fa:	486d      	ldr	r0, [pc, #436]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 80073fc:	4613      	mov	r3, r2
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	4413      	add	r3, r2
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	4403      	add	r3, r0
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800740c:	460a      	mov	r2, r1
 800740e:	2108      	movs	r1, #8
 8007410:	f7f9 f98c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007414:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007418:	3308      	adds	r3, #8
 800741a:	2b00      	cmp	r3, #0
 800741c:	da00      	bge.n	8007420 <Send_Service_Signal_Message+0x5a0>
 800741e:	3307      	adds	r3, #7
 8007420:	10db      	asrs	r3, r3, #3
 8007422:	b29a      	uxth	r2, r3
 8007424:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007428:	4413      	add	r3, r2
 800742a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800742e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007432:	3308      	adds	r3, #8
 8007434:	b29b      	uxth	r3, r3
 8007436:	b21b      	sxth	r3, r3
 8007438:	425a      	negs	r2, r3
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	f002 0207 	and.w	r2, r2, #7
 8007442:	bf58      	it	pl
 8007444:	4253      	negpl	r3, r2
 8007446:	b21b      	sxth	r3, r3
 8007448:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 800744c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007450:	f107 020c 	add.w	r2, r7, #12
 8007454:	18d1      	adds	r1, r2, r3
 8007456:	79fa      	ldrb	r2, [r7, #7]
 8007458:	4855      	ldr	r0, [pc, #340]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 800745a:	4613      	mov	r3, r2
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	4413      	add	r3, r2
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	4403      	add	r3, r0
 8007464:	3301      	adds	r3, #1
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800746c:	460a      	mov	r2, r1
 800746e:	2108      	movs	r1, #8
 8007470:	f7f9 f95c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007474:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007478:	3308      	adds	r3, #8
 800747a:	2b00      	cmp	r3, #0
 800747c:	da00      	bge.n	8007480 <Send_Service_Signal_Message+0x600>
 800747e:	3307      	adds	r3, #7
 8007480:	10db      	asrs	r3, r3, #3
 8007482:	b29a      	uxth	r2, r3
 8007484:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007488:	4413      	add	r3, r2
 800748a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800748e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007492:	3308      	adds	r3, #8
 8007494:	b29b      	uxth	r3, r3
 8007496:	b21b      	sxth	r3, r3
 8007498:	425a      	negs	r2, r3
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	f002 0207 	and.w	r2, r2, #7
 80074a2:	bf58      	it	pl
 80074a4:	4253      	negpl	r3, r2
 80074a6:	b21b      	sxth	r3, r3
 80074a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 80074ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074b0:	f107 020c 	add.w	r2, r7, #12
 80074b4:	18d1      	adds	r1, r2, r3
 80074b6:	79fa      	ldrb	r2, [r7, #7]
 80074b8:	483d      	ldr	r0, [pc, #244]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 80074ba:	4613      	mov	r3, r2
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	4413      	add	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	4403      	add	r3, r0
 80074c4:	3302      	adds	r3, #2
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80074cc:	460a      	mov	r2, r1
 80074ce:	2108      	movs	r1, #8
 80074d0:	f7f9 f92c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80074d4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80074d8:	3308      	adds	r3, #8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	da00      	bge.n	80074e0 <Send_Service_Signal_Message+0x660>
 80074de:	3307      	adds	r3, #7
 80074e0:	10db      	asrs	r3, r3, #3
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074e8:	4413      	add	r3, r2
 80074ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80074ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80074f2:	3308      	adds	r3, #8
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	b21b      	sxth	r3, r3
 80074f8:	425a      	negs	r2, r3
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	f002 0207 	and.w	r2, r2, #7
 8007502:	bf58      	it	pl
 8007504:	4253      	negpl	r3, r2
 8007506:	b21b      	sxth	r3, r3
 8007508:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 800750c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007510:	f107 020c 	add.w	r2, r7, #12
 8007514:	18d4      	adds	r4, r2, r3
 8007516:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800751a:	f107 030c 	add.w	r3, r7, #12
 800751e:	4611      	mov	r1, r2
 8007520:	4618      	mov	r0, r3
 8007522:	f00b fe4f 	bl	80131c4 <CalculateDirectReverseCrc>
 8007526:	4603      	mov	r3, r0
 8007528:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800752c:	4622      	mov	r2, r4
 800752e:	2120      	movs	r1, #32
 8007530:	f7f9 f8fc 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8007534:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007538:	3320      	adds	r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	da00      	bge.n	8007540 <Send_Service_Signal_Message+0x6c0>
 800753e:	3307      	adds	r3, #7
 8007540:	10db      	asrs	r3, r3, #3
 8007542:	b29a      	uxth	r2, r3
 8007544:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007548:	4413      	add	r3, r2
 800754a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800754e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007552:	3320      	adds	r3, #32
 8007554:	b29b      	uxth	r3, r3
 8007556:	b21b      	sxth	r3, r3
 8007558:	425a      	negs	r2, r3
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	f002 0207 	and.w	r2, r2, #7
 8007562:	bf58      	it	pl
 8007564:	4253      	negpl	r3, r2
 8007566:	b21b      	sxth	r3, r3
 8007568:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800756c:	4b11      	ldr	r3, [pc, #68]	; (80075b4 <Send_Service_Signal_Message+0x734>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	0a5b      	lsrs	r3, r3, #9
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00b      	beq.n	8007592 <Send_Service_Signal_Message+0x712>
 800757a:	4b0e      	ldr	r3, [pc, #56]	; (80075b4 <Send_Service_Signal_Message+0x734>)
 800757c:	791b      	ldrb	r3, [r3, #4]
 800757e:	79fa      	ldrb	r2, [r7, #7]
 8007580:	429a      	cmp	r2, r3
 8007582:	d106      	bne.n	8007592 <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 8007584:	480c      	ldr	r0, [pc, #48]	; (80075b8 <Send_Service_Signal_Message+0x738>)
 8007586:	f01b fa8f 	bl	8022aa8 <puts>
		printf("Not Sending Reply");
 800758a:	480c      	ldr	r0, [pc, #48]	; (80075bc <Send_Service_Signal_Message+0x73c>)
 800758c:	f01b f9f0 	bl	8022970 <iprintf>
 8007590:	e009      	b.n	80075a6 <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8007592:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007596:	b2d9      	uxtb	r1, r3
 8007598:	79fa      	ldrb	r2, [r7, #7]
 800759a:	f107 030c 	add.w	r3, r7, #12
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 f80e 	bl	80075c0 <Process_Sending_Reply>
	}
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	3754      	adds	r7, #84	; 0x54
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd90      	pop	{r4, r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20001188 	.word	0x20001188
 80075b4:	2000195c 	.word	0x2000195c
 80075b8:	080245f4 	.word	0x080245f4
 80075bc:	0802460c 	.word	0x0802460c

080075c0 <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b09c      	sub	sp, #112	; 0x70
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
 80075cc:	4613      	mov	r3, r2
 80075ce:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 80075d0:	2300      	movs	r3, #0
 80075d2:	60bb      	str	r3, [r7, #8]
 80075d4:	f107 030c 	add.w	r3, r7, #12
 80075d8:	2260      	movs	r2, #96	; 0x60
 80075da:	2100      	movs	r1, #0
 80075dc:	4618      	mov	r0, r3
 80075de:	f01b f8df 	bl	80227a0 <memset>
	uint8_t uc_index = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 80075e8:	2300      	movs	r3, #0
 80075ea:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 80075ee:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 80075f8:	4619      	mov	r1, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	781a      	ldrb	r2, [r3, #0]
 80075fe:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8007602:	443b      	add	r3, r7
 8007604:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8007608:	2301      	movs	r3, #1
 800760a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800760e:	e03c      	b.n	800768a <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 8007610:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	4413      	add	r3, r2
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2bef      	cmp	r3, #239	; 0xef
 800761c:	d922      	bls.n	8007664 <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 800761e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	4413      	add	r3, r2
 8007626:	781a      	ldrb	r2, [r3, #0]
 8007628:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800762c:	1c59      	adds	r1, r3, #1
 800762e:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007632:	f022 020f 	bic.w	r2, r2, #15
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	3370      	adds	r3, #112	; 0x70
 800763a:	443b      	add	r3, r7
 800763c:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 8007640:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4413      	add	r3, r2
 8007648:	781a      	ldrb	r2, [r3, #0]
 800764a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800764e:	1c59      	adds	r1, r3, #1
 8007650:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007654:	f002 020f 	and.w	r2, r2, #15
 8007658:	b2d2      	uxtb	r2, r2
 800765a:	3370      	adds	r3, #112	; 0x70
 800765c:	443b      	add	r3, r7
 800765e:	f803 2c68 	strb.w	r2, [r3, #-104]
 8007662:	e00d      	b.n	8007680 <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 8007664:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	441a      	add	r2, r3
 800766c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007670:	1c59      	adds	r1, r3, #1
 8007672:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007676:	7812      	ldrb	r2, [r2, #0]
 8007678:	3370      	adds	r3, #112	; 0x70
 800767a:	443b      	add	r3, r7
 800767c:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8007680:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007684:	3301      	adds	r3, #1
 8007686:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800768a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800768e:	78fb      	ldrb	r3, [r7, #3]
 8007690:	429a      	cmp	r2, r3
 8007692:	d3bd      	bcc.n	8007610 <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 8007694:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 800769e:	3370      	adds	r3, #112	; 0x70
 80076a0:	443b      	add	r3, r7
 80076a2:	22f6      	movs	r2, #246	; 0xf6
 80076a4:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 80076a8:	78bb      	ldrb	r3, [r7, #2]
 80076aa:	4a37      	ldr	r2, [pc, #220]	; (8007788 <Process_Sending_Reply+0x1c8>)
 80076ac:	5cd3      	ldrb	r3, [r2, r3]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d10b      	bne.n	80076ca <Process_Sending_Reply+0x10a>
 80076b2:	4b36      	ldr	r3, [pc, #216]	; (800778c <Process_Sending_Reply+0x1cc>)
 80076b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d106      	bne.n	80076ca <Process_Sending_Reply+0x10a>
 80076bc:	4b34      	ldr	r3, [pc, #208]	; (8007790 <Process_Sending_Reply+0x1d0>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d102      	bne.n	80076ca <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 80076c4:	4833      	ldr	r0, [pc, #204]	; (8007794 <Process_Sending_Reply+0x1d4>)
 80076c6:	f001 f875 	bl	80087b4 <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 80076ca:	78bb      	ldrb	r3, [r7, #2]
 80076cc:	4a32      	ldr	r2, [pc, #200]	; (8007798 <Process_Sending_Reply+0x1d8>)
 80076ce:	4413      	add	r3, r2
 80076d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d10d      	bne.n	80076f4 <Process_Sending_Reply+0x134>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 80076d8:	78bb      	ldrb	r3, [r7, #2]
 80076da:	4a30      	ldr	r2, [pc, #192]	; (800779c <Process_Sending_Reply+0x1dc>)
 80076dc:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 80076e0:	f107 0008 	add.w	r0, r7, #8
 80076e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80076e8:	f007 ff2a 	bl	800f540 <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = CLEAR;
 80076ec:	78bb      	ldrb	r3, [r7, #2]
 80076ee:	4a26      	ldr	r2, [pc, #152]	; (8007788 <Process_Sending_Reply+0x1c8>)
 80076f0:	2100      	movs	r1, #0
 80076f2:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80076f4:	78bb      	ldrb	r3, [r7, #2]
 80076f6:	4a28      	ldr	r2, [pc, #160]	; (8007798 <Process_Sending_Reply+0x1d8>)
 80076f8:	4413      	add	r3, r2
 80076fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d119      	bne.n	8007736 <Process_Sending_Reply+0x176>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 8007702:	2300      	movs	r3, #0
 8007704:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8007708:	e00e      	b.n	8007728 <Process_Sending_Reply+0x168>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 800770a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800770e:	3370      	adds	r3, #112	; 0x70
 8007710:	443b      	add	r3, r7
 8007712:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8007716:	4619      	mov	r1, r3
 8007718:	2003      	movs	r0, #3
 800771a:	f00d fed3 	bl	80154c4 <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 800771e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007722:	3301      	adds	r3, #1
 8007724:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8007728:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800772c:	b29b      	uxth	r3, r3
 800772e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007732:	429a      	cmp	r2, r3
 8007734:	d3e9      	bcc.n	800770a <Process_Sending_Reply+0x14a>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 8007736:	4b16      	ldr	r3, [pc, #88]	; (8007790 <Process_Sending_Reply+0x1d0>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d102      	bne.n	8007744 <Process_Sending_Reply+0x184>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 800773e:	4815      	ldr	r0, [pc, #84]	; (8007794 <Process_Sending_Reply+0x1d4>)
 8007740:	f001 f838 	bl	80087b4 <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 8007744:	4b11      	ldr	r3, [pc, #68]	; (800778c <Process_Sending_Reply+0x1cc>)
 8007746:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <Process_Sending_Reply+0x1a6>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 800774e:	4b0f      	ldr	r3, [pc, #60]	; (800778c <Process_Sending_Reply+0x1cc>)
 8007750:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007754:	461a      	mov	r2, r3
 8007756:	2101      	movs	r1, #1
 8007758:	480c      	ldr	r0, [pc, #48]	; (800778c <Process_Sending_Reply+0x1cc>)
 800775a:	f000 fe85 	bl	8008468 <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 800775e:	4b0b      	ldr	r3, [pc, #44]	; (800778c <Process_Sending_Reply+0x1cc>)
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 8007766:	78fb      	ldrb	r3, [r7, #3]
 8007768:	461a      	mov	r2, r3
 800776a:	2100      	movs	r1, #0
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fe7b 	bl	8008468 <Print_EI_DATA>

	if(Debug_flag == 1)
 8007772:	4b07      	ldr	r3, [pc, #28]	; (8007790 <Process_Sending_Reply+0x1d0>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d102      	bne.n	8007780 <Process_Sending_Reply+0x1c0>
	{
		Display("___________________________________________________________________________________________\n");
 800777a:	4809      	ldr	r0, [pc, #36]	; (80077a0 <Process_Sending_Reply+0x1e0>)
 800777c:	f001 f81a 	bl	80087b4 <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 8007780:	bf00      	nop
 8007782:	3770      	adds	r7, #112	; 0x70
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	200010cc 	.word	0x200010cc
 800778c:	20001c10 	.word	0x20001c10
 8007790:	20000645 	.word	0x20000645
 8007794:	08024b0c 	.word	0x08024b0c
 8007798:	20000304 	.word	0x20000304
 800779c:	20001058 	.word	0x20001058
 80077a0:	08024b6c 	.word	0x08024b6c

080077a4 <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 80077ae:	f00e f8e1 	bl	8015974 <HAL_GetTick>
 80077b2:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	4a86      	ldr	r2, [pc, #536]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 80077b8:	4413      	add	r3, r2
 80077ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80077be:	2b02      	cmp	r3, #2
 80077c0:	f000 8102 	beq.w	80079c8 <Check_Primary_r_Secondary+0x224>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 80077c4:	79fa      	ldrb	r2, [r7, #7]
 80077c6:	4983      	ldr	r1, [pc, #524]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80077c8:	4613      	mov	r3, r2
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	4413      	add	r3, r2
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	440b      	add	r3, r1
 80077d2:	3303      	adds	r3, #3
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d12b      	bne.n	8007832 <Check_Primary_r_Secondary+0x8e>
 80077da:	79fa      	ldrb	r2, [r7, #7]
 80077dc:	497e      	ldr	r1, [pc, #504]	; (80079d8 <Check_Primary_r_Secondary+0x234>)
 80077de:	4613      	mov	r3, r2
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	4413      	add	r3, r2
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	440b      	add	r3, r1
 80077e8:	3303      	adds	r3, #3
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d120      	bne.n	8007832 <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80077f0:	79fa      	ldrb	r2, [r7, #7]
 80077f2:	4978      	ldr	r1, [pc, #480]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80077f4:	4613      	mov	r3, r2
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	4413      	add	r3, r2
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	440b      	add	r3, r1
 80077fe:	3304      	adds	r3, #4
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 80e1 	beq.w	80079ca <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	4a71      	ldr	r2, [pc, #452]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 800780c:	3366      	adds	r3, #102	; 0x66
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	4619      	mov	r1, r3
 8007816:	4871      	ldr	r0, [pc, #452]	; (80079dc <Check_Primary_r_Secondary+0x238>)
 8007818:	f01b f8aa 	bl	8022970 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 800781c:	79fa      	ldrb	r2, [r7, #7]
 800781e:	496d      	ldr	r1, [pc, #436]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007820:	4613      	mov	r3, r2
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	4413      	add	r3, r2
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	440b      	add	r3, r1
 800782a:	3304      	adds	r3, #4
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007830:	e0cb      	b.n	80079ca <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 8007832:	79fa      	ldrb	r2, [r7, #7]
 8007834:	4967      	ldr	r1, [pc, #412]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007836:	4613      	mov	r3, r2
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	4413      	add	r3, r2
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	440b      	add	r3, r1
 8007840:	3303      	adds	r3, #3
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d12b      	bne.n	80078a0 <Check_Primary_r_Secondary+0xfc>
 8007848:	79fa      	ldrb	r2, [r7, #7]
 800784a:	4963      	ldr	r1, [pc, #396]	; (80079d8 <Check_Primary_r_Secondary+0x234>)
 800784c:	4613      	mov	r3, r2
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	4413      	add	r3, r2
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	440b      	add	r3, r1
 8007856:	3303      	adds	r3, #3
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d120      	bne.n	80078a0 <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800785e:	79fa      	ldrb	r2, [r7, #7]
 8007860:	495c      	ldr	r1, [pc, #368]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007862:	4613      	mov	r3, r2
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	4413      	add	r3, r2
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	440b      	add	r3, r1
 800786c:	3304      	adds	r3, #4
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80aa 	beq.w	80079ca <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	4a55      	ldr	r2, [pc, #340]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 800787a:	3366      	adds	r3, #102	; 0x66
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	4619      	mov	r1, r3
 8007884:	4856      	ldr	r0, [pc, #344]	; (80079e0 <Check_Primary_r_Secondary+0x23c>)
 8007886:	f01b f873 	bl	8022970 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 800788a:	79fa      	ldrb	r2, [r7, #7]
 800788c:	4951      	ldr	r1, [pc, #324]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 800788e:	4613      	mov	r3, r2
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	4413      	add	r3, r2
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	440b      	add	r3, r1
 8007898:	3304      	adds	r3, #4
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800789e:	e094      	b.n	80079ca <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 80078a0:	79fa      	ldrb	r2, [r7, #7]
 80078a2:	494c      	ldr	r1, [pc, #304]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80078a4:	4613      	mov	r3, r2
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	4413      	add	r3, r2
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	440b      	add	r3, r1
 80078ae:	3303      	adds	r3, #3
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d13e      	bne.n	8007934 <Check_Primary_r_Secondary+0x190>
 80078b6:	79fa      	ldrb	r2, [r7, #7]
 80078b8:	4947      	ldr	r1, [pc, #284]	; (80079d8 <Check_Primary_r_Secondary+0x234>)
 80078ba:	4613      	mov	r3, r2
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	4413      	add	r3, r2
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	440b      	add	r3, r1
 80078c4:	3303      	adds	r3, #3
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d133      	bne.n	8007934 <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 80078cc:	79fa      	ldrb	r2, [r7, #7]
 80078ce:	4941      	ldr	r1, [pc, #260]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80078d0:	4613      	mov	r3, r2
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	4413      	add	r3, r2
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	440b      	add	r3, r1
 80078da:	3304      	adds	r3, #4
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d073      	beq.n	80079ca <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	4a3a      	ldr	r2, [pc, #232]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 80078e6:	3366      	adds	r3, #102	; 0x66
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	4619      	mov	r1, r3
 80078f0:	483c      	ldr	r0, [pc, #240]	; (80079e4 <Check_Primary_r_Secondary+0x240>)
 80078f2:	f01b f83d 	bl	8022970 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	493b      	ldr	r1, [pc, #236]	; (80079e8 <Check_Primary_r_Secondary+0x244>)
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8007900:	79fb      	ldrb	r3, [r7, #7]
 8007902:	493a      	ldr	r1, [pc, #232]	; (80079ec <Check_Primary_r_Secondary+0x248>)
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 800790a:	79fa      	ldrb	r2, [r7, #7]
 800790c:	4931      	ldr	r1, [pc, #196]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 800790e:	4613      	mov	r3, r2
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	4413      	add	r3, r2
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	440b      	add	r3, r1
 8007918:	3310      	adds	r3, #16
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 800791e:	79fa      	ldrb	r2, [r7, #7]
 8007920:	492c      	ldr	r1, [pc, #176]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007922:	4613      	mov	r3, r2
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	4413      	add	r3, r2
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	440b      	add	r3, r1
 800792c:	3304      	adds	r3, #4
 800792e:	2201      	movs	r2, #1
 8007930:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007932:	e04a      	b.n	80079ca <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 8007934:	79fa      	ldrb	r2, [r7, #7]
 8007936:	4927      	ldr	r1, [pc, #156]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007938:	4613      	mov	r3, r2
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	4413      	add	r3, r2
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	440b      	add	r3, r1
 8007942:	3303      	adds	r3, #3
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d13f      	bne.n	80079ca <Check_Primary_r_Secondary+0x226>
 800794a:	79fa      	ldrb	r2, [r7, #7]
 800794c:	4922      	ldr	r1, [pc, #136]	; (80079d8 <Check_Primary_r_Secondary+0x234>)
 800794e:	4613      	mov	r3, r2
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	4413      	add	r3, r2
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	440b      	add	r3, r1
 8007958:	3303      	adds	r3, #3
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d134      	bne.n	80079ca <Check_Primary_r_Secondary+0x226>
		{
#ifdef EI_1
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007960:	79fa      	ldrb	r2, [r7, #7]
 8007962:	491c      	ldr	r1, [pc, #112]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007964:	4613      	mov	r3, r2
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	4413      	add	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	440b      	add	r3, r1
 800796e:	3304      	adds	r3, #4
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d029      	beq.n	80079ca <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards Receiving data,EiPC_1 Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	4a15      	ldr	r2, [pc, #84]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 800797a:	3366      	adds	r3, #102	; 0x66
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	4619      	mov	r1, r3
 8007984:	481a      	ldr	r0, [pc, #104]	; (80079f0 <Check_Primary_r_Secondary+0x24c>)
 8007986:	f01a fff3 	bl	8022970 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	4916      	ldr	r1, [pc, #88]	; (80079e8 <Check_Primary_r_Secondary+0x244>)
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	4915      	ldr	r1, [pc, #84]	; (80079ec <Check_Primary_r_Secondary+0x248>)
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 800799e:	79fa      	ldrb	r2, [r7, #7]
 80079a0:	490c      	ldr	r1, [pc, #48]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80079a2:	4613      	mov	r3, r2
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	4413      	add	r3, r2
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	440b      	add	r3, r1
 80079ac:	3310      	adds	r3, #16
 80079ae:	2200      	movs	r2, #0
 80079b0:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 80079b2:	79fa      	ldrb	r2, [r7, #7]
 80079b4:	4907      	ldr	r1, [pc, #28]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80079b6:	4613      	mov	r3, r2
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	4413      	add	r3, r2
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	440b      	add	r3, r1
 80079c0:	3304      	adds	r3, #4
 80079c2:	2201      	movs	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	e000      	b.n	80079ca <Check_Primary_r_Secondary+0x226>
		return;
 80079c8:	bf00      	nop
			//			}
#endif

		}
	}
}
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20000304 	.word	0x20000304
 80079d4:	20001674 	.word	0x20001674
 80079d8:	20001764 	.word	0x20001764
 80079dc:	08024d24 	.word	0x08024d24
 80079e0:	08024d60 	.word	0x08024d60
 80079e4:	08024d9c 	.word	0x08024d9c
 80079e8:	20000fa4 	.word	0x20000fa4
 80079ec:	20000fcc 	.word	0x20000fcc
 80079f0:	08024dd4 	.word	0x08024dd4

080079f4 <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	4aac      	ldr	r2, [pc, #688]	; (8007cb4 <Check_Vital_CRC+0x2c0>)
 8007a02:	4413      	add	r3, r2
 8007a04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	f000 814f 	beq.w	8007cac <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 8007a0e:	79fa      	ldrb	r2, [r7, #7]
 8007a10:	49a9      	ldr	r1, [pc, #676]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007a12:	4613      	mov	r3, r2
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	4413      	add	r3, r2
 8007a18:	00db      	lsls	r3, r3, #3
 8007a1a:	440b      	add	r3, r1
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	6819      	ldr	r1, [r3, #0]
 8007a20:	79fa      	ldrb	r2, [r7, #7]
 8007a22:	48a6      	ldr	r0, [pc, #664]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007a24:	4613      	mov	r3, r2
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	4413      	add	r3, r2
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4403      	add	r3, r0
 8007a2e:	3308      	adds	r3, #8
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4299      	cmp	r1, r3
 8007a34:	f000 8092 	beq.w	8007b5c <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 8007a38:	79fa      	ldrb	r2, [r7, #7]
 8007a3a:	49a0      	ldr	r1, [pc, #640]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	4413      	add	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	440b      	add	r3, r1
 8007a46:	3308      	adds	r3, #8
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 8086 	beq.w	8007b5c <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007a50:	79fa      	ldrb	r2, [r7, #7]
 8007a52:	4999      	ldr	r1, [pc, #612]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007a54:	4613      	mov	r3, r2
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	4413      	add	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	440b      	add	r3, r1
 8007a5e:	3304      	adds	r3, #4
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d104      	bne.n	8007a70 <Check_Vital_CRC+0x7c>
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	4a95      	ldr	r2, [pc, #596]	; (8007cc0 <Check_Vital_CRC+0x2cc>)
 8007a6a:	5cd3      	ldrb	r3, [r2, r3]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d175      	bne.n	8007b5c <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007a70:	79fa      	ldrb	r2, [r7, #7]
 8007a72:	4991      	ldr	r1, [pc, #580]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007a74:	4613      	mov	r3, r2
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	4413      	add	r3, r2
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	440b      	add	r3, r1
 8007a7e:	3308      	adds	r3, #8
 8007a80:	6819      	ldr	r1, [r3, #0]
 8007a82:	79fa      	ldrb	r2, [r7, #7]
 8007a84:	488d      	ldr	r0, [pc, #564]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007a86:	4613      	mov	r3, r2
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	4413      	add	r3, r2
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	4403      	add	r3, r0
 8007a90:	3308      	adds	r3, #8
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	1acb      	subs	r3, r1, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	bfb8      	it	lt
 8007a9a:	425b      	neglt	r3, r3
 8007a9c:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d104      	bne.n	8007aae <Check_Vital_CRC+0xba>
 8007aa4:	79fb      	ldrb	r3, [r7, #7]
 8007aa6:	4a87      	ldr	r2, [pc, #540]	; (8007cc4 <Check_Vital_CRC+0x2d0>)
 8007aa8:	5cd3      	ldrb	r3, [r2, r3]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d14c      	bne.n	8007b48 <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 8007aae:	79fb      	ldrb	r3, [r7, #7]
 8007ab0:	4a84      	ldr	r2, [pc, #528]	; (8007cc4 <Check_Vital_CRC+0x2d0>)
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	4a7e      	ldr	r2, [pc, #504]	; (8007cb4 <Check_Vital_CRC+0x2c0>)
 8007aba:	3366      	adds	r3, #102	; 0x66
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4880      	ldr	r0, [pc, #512]	; (8007cc8 <Check_Vital_CRC+0x2d4>)
 8007ac6:	f01a ff53 	bl	8022970 <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007aca:	79fa      	ldrb	r2, [r7, #7]
 8007acc:	497a      	ldr	r1, [pc, #488]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007ace:	4613      	mov	r3, r2
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	4413      	add	r3, r2
 8007ad4:	00db      	lsls	r3, r3, #3
 8007ad6:	440b      	add	r3, r1
 8007ad8:	3308      	adds	r3, #8
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4619      	mov	r1, r3
 8007ade:	487b      	ldr	r0, [pc, #492]	; (8007ccc <Check_Vital_CRC+0x2d8>)
 8007ae0:	f01a ff46 	bl	8022970 <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007ae4:	79fa      	ldrb	r2, [r7, #7]
 8007ae6:	4975      	ldr	r1, [pc, #468]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007ae8:	4613      	mov	r3, r2
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	4413      	add	r3, r2
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	440b      	add	r3, r1
 8007af2:	3308      	adds	r3, #8
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4619      	mov	r1, r3
 8007af8:	4875      	ldr	r0, [pc, #468]	; (8007cd0 <Check_Vital_CRC+0x2dc>)
 8007afa:	f01a ff39 	bl	8022970 <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 8007afe:	4875      	ldr	r0, [pc, #468]	; (8007cd4 <Check_Vital_CRC+0x2e0>)
 8007b00:	f01a ffd2 	bl	8022aa8 <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007b04:	79fa      	ldrb	r2, [r7, #7]
 8007b06:	79f9      	ldrb	r1, [r7, #7]
 8007b08:	486c      	ldr	r0, [pc, #432]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	4413      	add	r3, r2
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	4403      	add	r3, r0
 8007b14:	3308      	adds	r3, #8
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	486f      	ldr	r0, [pc, #444]	; (8007cd8 <Check_Vital_CRC+0x2e4>)
 8007b1a:	010b      	lsls	r3, r1, #4
 8007b1c:	4403      	add	r3, r0
 8007b1e:	3308      	adds	r3, #8
 8007b20:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007b22:	79f9      	ldrb	r1, [r7, #7]
 8007b24:	79fa      	ldrb	r2, [r7, #7]
 8007b26:	4865      	ldr	r0, [pc, #404]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007b28:	460b      	mov	r3, r1
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	440b      	add	r3, r1
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	4403      	add	r3, r0
 8007b32:	3308      	adds	r3, #8
 8007b34:	6819      	ldr	r1, [r3, #0]
 8007b36:	4860      	ldr	r0, [pc, #384]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007b38:	4613      	mov	r3, r2
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	4413      	add	r3, r2
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	4403      	add	r3, r0
 8007b42:	3308      	adds	r3, #8
 8007b44:	6019      	str	r1, [r3, #0]
 8007b46:	e009      	b.n	8007b5c <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d106      	bne.n	8007b5c <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	4a5c      	ldr	r2, [pc, #368]	; (8007cc4 <Check_Vital_CRC+0x2d0>)
 8007b52:	5cd2      	ldrb	r2, [r2, r3]
 8007b54:	3201      	adds	r2, #1
 8007b56:	b2d1      	uxtb	r1, r2
 8007b58:	4a5a      	ldr	r2, [pc, #360]	; (8007cc4 <Check_Vital_CRC+0x2d0>)
 8007b5a:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 8007b5c:	79fa      	ldrb	r2, [r7, #7]
 8007b5e:	4956      	ldr	r1, [pc, #344]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007b60:	4613      	mov	r3, r2
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	4413      	add	r3, r2
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	440b      	add	r3, r1
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	6819      	ldr	r1, [r3, #0]
 8007b6e:	79fa      	ldrb	r2, [r7, #7]
 8007b70:	4852      	ldr	r0, [pc, #328]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007b72:	4613      	mov	r3, r2
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	4413      	add	r3, r2
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	4403      	add	r3, r0
 8007b7c:	330c      	adds	r3, #12
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4299      	cmp	r1, r3
 8007b82:	f000 8094 	beq.w	8007cae <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 8007b86:	79fa      	ldrb	r2, [r7, #7]
 8007b88:	494c      	ldr	r1, [pc, #304]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	4413      	add	r3, r2
 8007b90:	00db      	lsls	r3, r3, #3
 8007b92:	440b      	add	r3, r1
 8007b94:	330c      	adds	r3, #12
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 8088 	beq.w	8007cae <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007b9e:	79fa      	ldrb	r2, [r7, #7]
 8007ba0:	4945      	ldr	r1, [pc, #276]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	4413      	add	r3, r2
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	440b      	add	r3, r1
 8007bac:	3304      	adds	r3, #4
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d104      	bne.n	8007bbe <Check_Vital_CRC+0x1ca>
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	4a42      	ldr	r2, [pc, #264]	; (8007cc0 <Check_Vital_CRC+0x2cc>)
 8007bb8:	5cd3      	ldrb	r3, [r2, r3]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d177      	bne.n	8007cae <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007bbe:	79fa      	ldrb	r2, [r7, #7]
 8007bc0:	493d      	ldr	r1, [pc, #244]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	4413      	add	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	440b      	add	r3, r1
 8007bcc:	330c      	adds	r3, #12
 8007bce:	6819      	ldr	r1, [r3, #0]
 8007bd0:	79fa      	ldrb	r2, [r7, #7]
 8007bd2:	483a      	ldr	r0, [pc, #232]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	005b      	lsls	r3, r3, #1
 8007bd8:	4413      	add	r3, r2
 8007bda:	00db      	lsls	r3, r3, #3
 8007bdc:	4403      	add	r3, r0
 8007bde:	330c      	adds	r3, #12
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	1acb      	subs	r3, r1, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	bfb8      	it	lt
 8007be8:	425b      	neglt	r3, r3
 8007bea:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d104      	bne.n	8007bfc <Check_Vital_CRC+0x208>
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	4a39      	ldr	r2, [pc, #228]	; (8007cdc <Check_Vital_CRC+0x2e8>)
 8007bf6:	5cd3      	ldrb	r3, [r2, r3]
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d14c      	bne.n	8007c96 <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	4a37      	ldr	r2, [pc, #220]	; (8007cdc <Check_Vital_CRC+0x2e8>)
 8007c00:	2100      	movs	r1, #0
 8007c02:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	4a2b      	ldr	r2, [pc, #172]	; (8007cb4 <Check_Vital_CRC+0x2c0>)
 8007c08:	3366      	adds	r3, #102	; 0x66
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	4619      	mov	r1, r3
 8007c12:	4833      	ldr	r0, [pc, #204]	; (8007ce0 <Check_Vital_CRC+0x2ec>)
 8007c14:	f01a feac 	bl	8022970 <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007c18:	79fa      	ldrb	r2, [r7, #7]
 8007c1a:	4927      	ldr	r1, [pc, #156]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	4413      	add	r3, r2
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	440b      	add	r3, r1
 8007c26:	330c      	adds	r3, #12
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	482d      	ldr	r0, [pc, #180]	; (8007ce4 <Check_Vital_CRC+0x2f0>)
 8007c2e:	f01a fe9f 	bl	8022970 <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007c32:	79fa      	ldrb	r2, [r7, #7]
 8007c34:	4921      	ldr	r1, [pc, #132]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007c36:	4613      	mov	r3, r2
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	4413      	add	r3, r2
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	440b      	add	r3, r1
 8007c40:	330c      	adds	r3, #12
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4619      	mov	r1, r3
 8007c46:	4828      	ldr	r0, [pc, #160]	; (8007ce8 <Check_Vital_CRC+0x2f4>)
 8007c48:	f01a fe92 	bl	8022970 <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 8007c4c:	4827      	ldr	r0, [pc, #156]	; (8007cec <Check_Vital_CRC+0x2f8>)
 8007c4e:	f01a ff2b 	bl	8022aa8 <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007c52:	79fa      	ldrb	r2, [r7, #7]
 8007c54:	79f9      	ldrb	r1, [r7, #7]
 8007c56:	4819      	ldr	r0, [pc, #100]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007c58:	4613      	mov	r3, r2
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	4413      	add	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	4403      	add	r3, r0
 8007c62:	330c      	adds	r3, #12
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	481c      	ldr	r0, [pc, #112]	; (8007cd8 <Check_Vital_CRC+0x2e4>)
 8007c68:	010b      	lsls	r3, r1, #4
 8007c6a:	4403      	add	r3, r0
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007c70:	79f9      	ldrb	r1, [r7, #7]
 8007c72:	79fa      	ldrb	r2, [r7, #7]
 8007c74:	4811      	ldr	r0, [pc, #68]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007c76:	460b      	mov	r3, r1
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	440b      	add	r3, r1
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	4403      	add	r3, r0
 8007c80:	330c      	adds	r3, #12
 8007c82:	6819      	ldr	r1, [r3, #0]
 8007c84:	480c      	ldr	r0, [pc, #48]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007c86:	4613      	mov	r3, r2
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	4413      	add	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	4403      	add	r3, r0
 8007c90:	330c      	adds	r3, #12
 8007c92:	6019      	str	r1, [r3, #0]
 8007c94:	e00b      	b.n	8007cae <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d108      	bne.n	8007cae <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 8007c9c:	79fb      	ldrb	r3, [r7, #7]
 8007c9e:	4a0f      	ldr	r2, [pc, #60]	; (8007cdc <Check_Vital_CRC+0x2e8>)
 8007ca0:	5cd2      	ldrb	r2, [r2, r3]
 8007ca2:	3201      	adds	r2, #1
 8007ca4:	b2d1      	uxtb	r1, r2
 8007ca6:	4a0d      	ldr	r2, [pc, #52]	; (8007cdc <Check_Vital_CRC+0x2e8>)
 8007ca8:	54d1      	strb	r1, [r2, r3]
 8007caa:	e000      	b.n	8007cae <Check_Vital_CRC+0x2ba>
		return;
 8007cac:	bf00      	nop
				}
			}
		}
	}
}
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20000304 	.word	0x20000304
 8007cb8:	20001674 	.word	0x20001674
 8007cbc:	20001764 	.word	0x20001764
 8007cc0:	20000ff4 	.word	0x20000ff4
 8007cc4:	20002038 	.word	0x20002038
 8007cc8:	08024e10 	.word	0x08024e10
 8007ccc:	08024e54 	.word	0x08024e54
 8007cd0:	08024e78 	.word	0x08024e78
 8007cd4:	08024e9c 	.word	0x08024e9c
 8007cd8:	200011c4 	.word	0x200011c4
 8007cdc:	20002044 	.word	0x20002044
 8007ce0:	08024ec4 	.word	0x08024ec4
 8007ce4:	08024f08 	.word	0x08024f08
 8007ce8:	08024f2c 	.word	0x08024f2c
 8007cec:	08024f50 	.word	0x08024f50

08007cf0 <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	4a0a      	ldr	r2, [pc, #40]	; (8007d28 <Check_Other_EiPC_Packet+0x38>)
 8007cfe:	4413      	add	r3, r2
 8007d00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d007      	beq.n	8007d18 <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff fd4a 	bl	80077a4 <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7ff fe6e 	bl	80079f4 <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 8007d18:	79fb      	ldrb	r3, [r7, #7]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f001 f98e 	bl	800903c <CheckOtherLinkStatus>
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20000304 	.word	0x20000304

08007d2c <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 8007d2c:	b590      	push	{r4, r7, lr}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007d36:	4930      	ldr	r1, [pc, #192]	; (8007df8 <CheckLinkEstablishTimeout+0xcc>)
 8007d38:	4830      	ldr	r0, [pc, #192]	; (8007dfc <CheckLinkEstablishTimeout+0xd0>)
 8007d3a:	f7f8 fa81 	bl	8000240 <strcmp>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d055      	beq.n	8007df0 <CheckLinkEstablishTimeout+0xc4>
		return;
	}



	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007d44:	2300      	movs	r3, #0
 8007d46:	71fb      	strb	r3, [r7, #7]
 8007d48:	e04b      	b.n	8007de2 <CheckLinkEstablishTimeout+0xb6>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	4a2c      	ldr	r2, [pc, #176]	; (8007e00 <CheckLinkEstablishTimeout+0xd4>)
 8007d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f007 f884 	bl	800ee60 <HAL_Elaps_Ticks>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	4929      	ldr	r1, [pc, #164]	; (8007e04 <CheckLinkEstablishTimeout+0xd8>)
 8007d5e:	339e      	adds	r3, #158	; 0x9e
 8007d60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d939      	bls.n	8007ddc <CheckLinkEstablishTimeout+0xb0>
 8007d68:	79fb      	ldrb	r3, [r7, #7]
 8007d6a:	4a27      	ldr	r2, [pc, #156]	; (8007e08 <CheckLinkEstablishTimeout+0xdc>)
 8007d6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	4923      	ldr	r1, [pc, #140]	; (8007e00 <CheckLinkEstablishTimeout+0xd4>)
 8007d74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d02f      	beq.n	8007ddc <CheckLinkEstablishTimeout+0xb0>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 8007d7c:	79fa      	ldrb	r2, [r7, #7]
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	491f      	ldr	r1, [pc, #124]	; (8007e00 <CheckLinkEstablishTimeout+0xd4>)
 8007d82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d86:	4920      	ldr	r1, [pc, #128]	; (8007e08 <CheckLinkEstablishTimeout+0xdc>)
 8007d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8007d8c:	79fb      	ldrb	r3, [r7, #7]
 8007d8e:	4a1d      	ldr	r2, [pc, #116]	; (8007e04 <CheckLinkEstablishTimeout+0xd8>)
 8007d90:	3366      	adds	r3, #102	; 0x66
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	481c      	ldr	r0, [pc, #112]	; (8007e0c <CheckLinkEstablishTimeout+0xe0>)
 8007d9c:	f01a fde8 	bl	8022970 <iprintf>
			Link_Flag[Traverser] = CLEAR;
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <CheckLinkEstablishTimeout+0xe4>)
 8007da4:	2100      	movs	r1, #0
 8007da6:	54d1      	strb	r1, [r2, r3]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8007da8:	79fa      	ldrb	r2, [r7, #7]
 8007daa:	491a      	ldr	r1, [pc, #104]	; (8007e14 <CheckLinkEstablishTimeout+0xe8>)
 8007dac:	4613      	mov	r3, r2
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	4413      	add	r3, r2
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	440b      	add	r3, r1
 8007db6:	3310      	adds	r3, #16
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	79fc      	ldrb	r4, [r7, #7]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f007 f84f 	bl	800ee60 <HAL_Elaps_Ticks>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	4913      	ldr	r1, [pc, #76]	; (8007e14 <CheckLinkEstablishTimeout+0xe8>)
 8007dc6:	4623      	mov	r3, r4
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	4423      	add	r3, r4
 8007dcc:	00db      	lsls	r3, r3, #3
 8007dce:	440b      	add	r3, r1
 8007dd0:	3310      	adds	r3, #16
 8007dd2:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f001 f930 	bl	800903c <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	3301      	adds	r3, #1
 8007de0:	71fb      	strb	r3, [r7, #7]
 8007de2:	4b08      	ldr	r3, [pc, #32]	; (8007e04 <CheckLinkEstablishTimeout+0xd8>)
 8007de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007de8:	79fa      	ldrb	r2, [r7, #7]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d3ad      	bcc.n	8007d4a <CheckLinkEstablishTimeout+0x1e>
 8007dee:	e000      	b.n	8007df2 <CheckLinkEstablishTimeout+0xc6>
		return;
 8007df0:	bf00      	nop
		}
	}
}
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd90      	pop	{r4, r7, pc}
 8007df8:	0802411c 	.word	0x0802411c
 8007dfc:	20000305 	.word	0x20000305
 8007e00:	20000f14 	.word	0x20000f14
 8007e04:	20000304 	.word	0x20000304
 8007e08:	20002050 	.word	0x20002050
 8007e0c:	08024f78 	.word	0x08024f78
 8007e10:	20000f64 	.word	0x20000f64
 8007e14:	20001674 	.word	0x20001674

08007e18 <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 8007e18:	b590      	push	{r4, r7, lr}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007e1e:	2300      	movs	r3, #0
 8007e20:	71fb      	strb	r3, [r7, #7]
 8007e22:	e049      	b.n	8007eb8 <Send_Self_Sharing+0xa0>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 8007e24:	79fb      	ldrb	r3, [r7, #7]
 8007e26:	4a29      	ldr	r2, [pc, #164]	; (8007ecc <Send_Self_Sharing+0xb4>)
 8007e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f007 f817 	bl	800ee60 <HAL_Elaps_Ticks>
 8007e32:	4602      	mov	r2, r0
 8007e34:	4b26      	ldr	r3, [pc, #152]	; (8007ed0 <Send_Self_Sharing+0xb8>)
 8007e36:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d939      	bls.n	8007eb2 <Send_Self_Sharing+0x9a>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 8007e3e:	79fa      	ldrb	r2, [r7, #7]
 8007e40:	4924      	ldr	r1, [pc, #144]	; (8007ed4 <Send_Self_Sharing+0xbc>)
 8007e42:	4613      	mov	r3, r2
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	4413      	add	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	440b      	add	r3, r1
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	2200      	movs	r2, #0
 8007e50:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 8007e52:	79f9      	ldrb	r1, [r7, #7]
 8007e54:	79fa      	ldrb	r2, [r7, #7]
 8007e56:	4820      	ldr	r0, [pc, #128]	; (8007ed8 <Send_Self_Sharing+0xc0>)
 8007e58:	460b      	mov	r3, r1
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	440b      	add	r3, r1
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4403      	add	r3, r0
 8007e62:	3301      	adds	r3, #1
 8007e64:	7818      	ldrb	r0, [r3, #0]
 8007e66:	491b      	ldr	r1, [pc, #108]	; (8007ed4 <Send_Self_Sharing+0xbc>)
 8007e68:	4613      	mov	r3, r2
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	4413      	add	r3, r2
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	440b      	add	r3, r1
 8007e72:	3302      	adds	r3, #2
 8007e74:	4602      	mov	r2, r0
 8007e76:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007e78:	2218      	movs	r2, #24
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	4817      	ldr	r0, [pc, #92]	; (8007edc <Send_Self_Sharing+0xc4>)
 8007e7e:	f01a fc8f 	bl	80227a0 <memset>
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 8007e82:	79fa      	ldrb	r2, [r7, #7]
 8007e84:	4613      	mov	r3, r2
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	4413      	add	r3, r2
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	4a11      	ldr	r2, [pc, #68]	; (8007ed4 <Send_Self_Sharing+0xbc>)
 8007e8e:	4413      	add	r3, r2
 8007e90:	2218      	movs	r2, #24
 8007e92:	4619      	mov	r1, r3
 8007e94:	4811      	ldr	r0, [pc, #68]	; (8007edc <Send_Self_Sharing+0xc4>)
 8007e96:	f01a fc5b 	bl	8022750 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 8007e9a:	f240 2001 	movw	r0, #513	; 0x201
 8007e9e:	f007 fd93 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 8007ea2:	79fc      	ldrb	r4, [r7, #7]
 8007ea4:	f00d fd66 	bl	8015974 <HAL_GetTick>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	4a08      	ldr	r2, [pc, #32]	; (8007ecc <Send_Self_Sharing+0xb4>)
 8007eac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 8007eb0:	e008      	b.n	8007ec4 <Send_Self_Sharing+0xac>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	71fb      	strb	r3, [r7, #7]
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <Send_Self_Sharing+0xb8>)
 8007eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ebe:	79fa      	ldrb	r2, [r7, #7]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d3af      	bcc.n	8007e24 <Send_Self_Sharing+0xc>
		}
	}
}
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd90      	pop	{r4, r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20000e44 	.word	0x20000e44
 8007ed0:	20000304 	.word	0x20000304
 8007ed4:	20001674 	.word	0x20001674
 8007ed8:	20001cc8 	.word	0x20001cc8
 8007edc:	20001854 	.word	0x20001854

08007ee0 <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 8007ee4:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <Detect_CAN_Xchange_Failure+0x98>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 8007eec:	f00b fc1a 	bl	8013724 <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007ef0:	4922      	ldr	r1, [pc, #136]	; (8007f7c <Detect_CAN_Xchange_Failure+0x9c>)
 8007ef2:	4823      	ldr	r0, [pc, #140]	; (8007f80 <Detect_CAN_Xchange_Failure+0xa0>)
 8007ef4:	f7f8 f9a4 	bl	8000240 <strcmp>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 8007efe:	4b1e      	ldr	r3, [pc, #120]	; (8007f78 <Detect_CAN_Xchange_Failure+0x98>)
 8007f00:	2201      	movs	r2, #1
 8007f02:	701a      	strb	r2, [r3, #0]
		return;
 8007f04:	e036      	b.n	8007f74 <Detect_CAN_Xchange_Failure+0x94>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 8007f06:	4b1f      	ldr	r3, [pc, #124]	; (8007f84 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f006 ffa8 	bl	800ee60 <HAL_Elaps_Ticks>
 8007f10:	4602      	mov	r2, r0
 8007f12:	4b1d      	ldr	r3, [pc, #116]	; (8007f88 <Detect_CAN_Xchange_Failure+0xa8>)
 8007f14:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d32b      	bcc.n	8007f74 <Detect_CAN_Xchange_Failure+0x94>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 8007f1c:	4b1b      	ldr	r3, [pc, #108]	; (8007f8c <Detect_CAN_Xchange_Failure+0xac>)
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	4b18      	ldr	r3, [pc, #96]	; (8007f84 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d025      	beq.n	8007f74 <Detect_CAN_Xchange_Failure+0x94>
		{
			Is_CAN_Exchange_happening = NO;
 8007f28:	4b13      	ldr	r3, [pc, #76]	; (8007f78 <Detect_CAN_Xchange_Failure+0x98>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 8007f2e:	4b15      	ldr	r3, [pc, #84]	; (8007f84 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a16      	ldr	r2, [pc, #88]	; (8007f8c <Detect_CAN_Xchange_Failure+0xac>)
 8007f34:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 8007f36:	4b13      	ldr	r3, [pc, #76]	; (8007f84 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f006 ff90 	bl	800ee60 <HAL_Elaps_Ticks>
 8007f40:	4603      	mov	r3, r0
 8007f42:	4a13      	ldr	r2, [pc, #76]	; (8007f90 <Detect_CAN_Xchange_Failure+0xb0>)
 8007f44:	fba2 2303 	umull	r2, r3, r2, r3
 8007f48:	099b      	lsrs	r3, r3, #6
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4811      	ldr	r0, [pc, #68]	; (8007f94 <Detect_CAN_Xchange_Failure+0xb4>)
 8007f4e:	f01a fd0f 	bl	8022970 <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 8007f52:	4811      	ldr	r0, [pc, #68]	; (8007f98 <Detect_CAN_Xchange_Failure+0xb8>)
 8007f54:	f01a fda8 	bl	8022aa8 <puts>
			memset(&Rx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007f58:	2218      	movs	r2, #24
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	480f      	ldr	r0, [pc, #60]	; (8007f9c <Detect_CAN_Xchange_Failure+0xbc>)
 8007f5e:	f01a fc1f 	bl	80227a0 <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 8007f62:	22a2      	movs	r2, #162	; 0xa2
 8007f64:	2100      	movs	r1, #0
 8007f66:	480e      	ldr	r0, [pc, #56]	; (8007fa0 <Detect_CAN_Xchange_Failure+0xc0>)
 8007f68:	f01a fc1a 	bl	80227a0 <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8007f6c:	f240 1019 	movw	r0, #281	; 0x119
 8007f70:	f007 fd2a 	bl	800f9c8 <TransmitCanPkt>
		}
	}
}
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20000108 	.word	0x20000108
 8007f7c:	0802411c 	.word	0x0802411c
 8007f80:	20000305 	.word	0x20000305
 8007f84:	20000e40 	.word	0x20000e40
 8007f88:	20000304 	.word	0x20000304
 8007f8c:	20002078 	.word	0x20002078
 8007f90:	10624dd3 	.word	0x10624dd3
 8007f94:	08024f98 	.word	0x08024f98
 8007f98:	08024fc8 	.word	0x08024fc8
 8007f9c:	20001764 	.word	0x20001764
 8007fa0:	200010e4 	.word	0x200010e4

08007fa4 <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b0ae      	sub	sp, #184	; 0xb8
 8007fa8:	af00      	add	r7, sp, #0

#ifdef EI_1

	static uint32_t send_signals_serial_Clk = 0;
	static uint8_t Prev_Buff[MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS] = {0,};
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
 8007faa:	2300      	movs	r3, #0
 8007fac:	607b      	str	r3, [r7, #4]
 8007fae:	f107 0308 	add.w	r3, r7, #8
 8007fb2:	22a6      	movs	r2, #166	; 0xa6
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f01a fbf2 	bl	80227a0 <memset>
	uint16_t Serial_Byte=0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
#endif

	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 8007fc2:	4bc8      	ldr	r3, [pc, #800]	; (80082e4 <Process_Send_Signals_2_MIE+0x340>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f006 ff4a 	bl	800ee60 <HAL_Elaps_Ticks>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	4bc6      	ldr	r3, [pc, #792]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 8007fd0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	f240 8234 	bls.w	8008442 <Process_Send_Signals_2_MIE+0x49e>
	{
		uint8_t Traverser = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
		uint8_t Choice = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
#ifdef EI_1
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8007fec:	e08f      	b.n	800810e <Process_Send_Signals_2_MIE+0x16a>
		{
			if( (MisMatchFlag[Traverser] == SET) && ( strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0))
 8007fee:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8007ff2:	4abe      	ldr	r2, [pc, #760]	; (80082ec <Process_Send_Signals_2_MIE+0x348>)
 8007ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d11d      	bne.n	8008038 <Process_Send_Signals_2_MIE+0x94>
 8007ffc:	49bc      	ldr	r1, [pc, #752]	; (80082f0 <Process_Send_Signals_2_MIE+0x34c>)
 8007ffe:	48bd      	ldr	r0, [pc, #756]	; (80082f4 <Process_Send_Signals_2_MIE+0x350>)
 8008000:	f7f8 f91e 	bl	8000240 <strcmp>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d016      	beq.n	8008038 <Process_Send_Signals_2_MIE+0x94>
			{
				printf("MisMatch Found:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 800800a:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800800e:	4ab6      	ldr	r2, [pc, #728]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 8008010:	3366      	adds	r3, #102	; 0x66
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	4619      	mov	r1, r3
 800801a:	48b7      	ldr	r0, [pc, #732]	; (80082f8 <Process_Send_Signals_2_MIE+0x354>)
 800801c:	f01a fca8 	bl	8022970 <iprintf>
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008020:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	4ab5      	ldr	r2, [pc, #724]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 8008028:	4413      	add	r3, r2
 800802a:	3302      	adds	r3, #2
 800802c:	2210      	movs	r2, #16
 800802e:	2100      	movs	r1, #0
 8008030:	4618      	mov	r0, r3
 8008032:	f01a fbb5 	bl	80227a0 <memset>
				continue;
 8008036:	e065      	b.n	8008104 <Process_Send_Signals_2_MIE+0x160>
			}
			Choice = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(OtherCardLink_Flag[Traverser] == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 800803e:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008042:	4aaf      	ldr	r2, [pc, #700]	; (8008300 <Process_Send_Signals_2_MIE+0x35c>)
 8008044:	5cd3      	ldrb	r3, [r2, r3]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d106      	bne.n	8008058 <Process_Send_Signals_2_MIE+0xb4>
 800804a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800804e:	f043 0301 	orr.w	r3, r3, #1
 8008052:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8008056:	e005      	b.n	8008064 <Process_Send_Signals_2_MIE+0xc0>
 8008058:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800805c:	f023 0301 	bic.w	r3, r3, #1
 8008060:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(Link_Flag[Traverser] == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 8008064:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008068:	4aa6      	ldr	r2, [pc, #664]	; (8008304 <Process_Send_Signals_2_MIE+0x360>)
 800806a:	5cd3      	ldrb	r3, [r2, r3]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d106      	bne.n	800807e <Process_Send_Signals_2_MIE+0xda>
 8008070:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008074:	f043 0302 	orr.w	r3, r3, #2
 8008078:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800807c:	e005      	b.n	800808a <Process_Send_Signals_2_MIE+0xe6>
 800807e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008082:	f023 0302 	bic.w	r3, r3, #2
 8008086:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4

			switch(Choice)
 800808a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800808e:	2b01      	cmp	r3, #1
 8008090:	d005      	beq.n	800809e <Process_Send_Signals_2_MIE+0xfa>
 8008092:	2b00      	cmp	r3, #0
 8008094:	dd2b      	ble.n	80080ee <Process_Send_Signals_2_MIE+0x14a>
 8008096:	3b02      	subs	r3, #2
 8008098:	2b01      	cmp	r3, #1
 800809a:	d828      	bhi.n	80080ee <Process_Send_Signals_2_MIE+0x14a>
 800809c:	e013      	b.n	80080c6 <Process_Send_Signals_2_MIE+0x122>
			{
			case ONE:
				//				printf("\nOtherCard SET\n");
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],OtherCard_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 800809e:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	4a95      	ldr	r2, [pc, #596]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 80080a6:	4413      	add	r3, r2
 80080a8:	1c98      	adds	r0, r3, #2
 80080aa:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4a94      	ldr	r2, [pc, #592]	; (8008308 <Process_Send_Signals_2_MIE+0x364>)
 80080b8:	4413      	add	r3, r2
 80080ba:	3301      	adds	r3, #1
 80080bc:	2210      	movs	r2, #16
 80080be:	4619      	mov	r1, r3
 80080c0:	f01a fb46 	bl	8022750 <memcpy>
				break;
 80080c4:	e01e      	b.n	8008104 <Process_Send_Signals_2_MIE+0x160>
			case TWO:
				//				printf("\nBothCard SET2\n");
			case THREE:
				//				printf("\nBothCard SET3\n");
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 80080c6:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80080ca:	011b      	lsls	r3, r3, #4
 80080cc:	4a8b      	ldr	r2, [pc, #556]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 80080ce:	4413      	add	r3, r2
 80080d0:	1c98      	adds	r0, r3, #2
 80080d2:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4a8b      	ldr	r2, [pc, #556]	; (800830c <Process_Send_Signals_2_MIE+0x368>)
 80080e0:	4413      	add	r3, r2
 80080e2:	3301      	adds	r3, #1
 80080e4:	2210      	movs	r2, #16
 80080e6:	4619      	mov	r1, r3
 80080e8:	f01a fb32 	bl	8022750 <memcpy>
				break;
 80080ec:	e00a      	b.n	8008104 <Process_Send_Signals_2_MIE+0x160>

			default:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 80080ee:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	4a81      	ldr	r2, [pc, #516]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 80080f6:	4413      	add	r3, r2
 80080f8:	3302      	adds	r3, #2
 80080fa:	2210      	movs	r2, #16
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f01a fb4e 	bl	80227a0 <memset>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008104:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008108:	3301      	adds	r3, #1
 800810a:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 800810e:	4b76      	ldr	r3, [pc, #472]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 8008110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008114:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008118:	429a      	cmp	r2, r3
 800811a:	f4ff af68 	bcc.w	8007fee <Process_Send_Signals_2_MIE+0x4a>
			}
		}


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800811e:	4974      	ldr	r1, [pc, #464]	; (80082f0 <Process_Send_Signals_2_MIE+0x34c>)
 8008120:	4874      	ldr	r0, [pc, #464]	; (80082f4 <Process_Send_Signals_2_MIE+0x350>)
 8008122:	f7f8 f88d 	bl	8000240 <strcmp>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d102      	bne.n	8008132 <Process_Send_Signals_2_MIE+0x18e>
		{
			Is_CAN_Exchange_happening = YES;
 800812c:	4b78      	ldr	r3, [pc, #480]	; (8008310 <Process_Send_Signals_2_MIE+0x36c>)
 800812e:	2201      	movs	r2, #1
 8008130:	701a      	strb	r2, [r3, #0]
		}

		if(Is_CAN_Exchange_happening == NO)
 8008132:	4b77      	ldr	r3, [pc, #476]	; (8008310 <Process_Send_Signals_2_MIE+0x36c>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <Process_Send_Signals_2_MIE+0x1ac>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 800813a:	4876      	ldr	r0, [pc, #472]	; (8008314 <Process_Send_Signals_2_MIE+0x370>)
 800813c:	f01a fcb4 	bl	8022aa8 <puts>
			printf("Sending Blank Relay statuses\n");
 8008140:	4875      	ldr	r0, [pc, #468]	; (8008318 <Process_Send_Signals_2_MIE+0x374>)
 8008142:	f01a fcb1 	bl	8022aa8 <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 8008146:	22a2      	movs	r2, #162	; 0xa2
 8008148:	2100      	movs	r1, #0
 800814a:	486c      	ldr	r0, [pc, #432]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 800814c:	f01a fb28 	bl	80227a0 <memset>
		}


		if(Debug_flag == 1)
 8008150:	4b72      	ldr	r3, [pc, #456]	; (800831c <Process_Send_Signals_2_MIE+0x378>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d133      	bne.n	80081c0 <Process_Send_Signals_2_MIE+0x21c>
		{
			Get_time();
 8008158:	f003 fa08 	bl	800b56c <Get_time>
			//		printf("\n_________________________________________\n");
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 800815c:	4b70      	ldr	r3, [pc, #448]	; (8008320 <Process_Send_Signals_2_MIE+0x37c>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	4619      	mov	r1, r3
 8008162:	4b6f      	ldr	r3, [pc, #444]	; (8008320 <Process_Send_Signals_2_MIE+0x37c>)
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	461a      	mov	r2, r3
 8008168:	4b6d      	ldr	r3, [pc, #436]	; (8008320 <Process_Send_Signals_2_MIE+0x37c>)
 800816a:	789b      	ldrb	r3, [r3, #2]
 800816c:	486d      	ldr	r0, [pc, #436]	; (8008324 <Process_Send_Signals_2_MIE+0x380>)
 800816e:	f01a fbff 	bl	8022970 <iprintf>
			//		for(uint16_t Byte = 0; Byte<Num_of_Bytes;++Byte )
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8008172:	2300      	movs	r3, #0
 8008174:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8008178:	e017      	b.n	80081aa <Process_Send_Signals_2_MIE+0x206>

			{
				printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 800817a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800817e:	4a5f      	ldr	r2, [pc, #380]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 8008180:	4413      	add	r3, r2
 8008182:	789b      	ldrb	r3, [r3, #2]
 8008184:	4619      	mov	r1, r3
 8008186:	4868      	ldr	r0, [pc, #416]	; (8008328 <Process_Send_Signals_2_MIE+0x384>)
 8008188:	f01a fbf2 	bl	8022970 <iprintf>
				if(((Byte+1)%16)==0)
 800818c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008190:	3301      	adds	r3, #1
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	2b00      	cmp	r3, #0
 8008198:	d102      	bne.n	80081a0 <Process_Send_Signals_2_MIE+0x1fc>
				{
					printf("\n");
 800819a:	200a      	movs	r0, #10
 800819c:	f01a fc00 	bl	80229a0 <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 80081a0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80081a4:	3301      	adds	r3, #1
 80081a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80081aa:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 80081ae:	4b4e      	ldr	r3, [pc, #312]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 80081b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	429a      	cmp	r2, r3
 80081b8:	dbdf      	blt.n	800817a <Process_Send_Signals_2_MIE+0x1d6>
				}
			}
			printf("\n");
 80081ba:	200a      	movs	r0, #10
 80081bc:	f01a fbf0 	bl	80229a0 <putchar>
			//		printf("\n_________________________________________\n");
		}
		TransmitCanPkt(EI_PROCESS_DATA);
 80081c0:	f240 1019 	movw	r0, #281	; 0x119
 80081c4:	f007 fc00 	bl	800f9c8 <TransmitCanPkt>


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80081c8:	4949      	ldr	r1, [pc, #292]	; (80082f0 <Process_Send_Signals_2_MIE+0x34c>)
 80081ca:	484a      	ldr	r0, [pc, #296]	; (80082f4 <Process_Send_Signals_2_MIE+0x350>)
 80081cc:	f7f8 f838 	bl	8000240 <strcmp>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f040 8130 	bne.w	8008438 <Process_Send_Signals_2_MIE+0x494>
		{
			if(HAL_Elaps_Ticks(send_signals_serial_Clk) >= TWO_SEC )
 80081d8:	4b54      	ldr	r3, [pc, #336]	; (800832c <Process_Send_Signals_2_MIE+0x388>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f006 fe3f 	bl	800ee60 <HAL_Elaps_Ticks>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80081e8:	f0c0 80a8 	bcc.w	800833c <Process_Send_Signals_2_MIE+0x398>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 80081ec:	4a50      	ldr	r2, [pc, #320]	; (8008330 <Process_Send_Signals_2_MIE+0x38c>)
 80081ee:	4b43      	ldr	r3, [pc, #268]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 80081f0:	4610      	mov	r0, r2
 80081f2:	3302      	adds	r3, #2
 80081f4:	22a0      	movs	r2, #160	; 0xa0
 80081f6:	4619      	mov	r1, r3
 80081f8:	f01a faaa 	bl	8022750 <memcpy>
				Serial_Byte = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008202:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800820c:	33b8      	adds	r3, #184	; 0xb8
 800820e:	443b      	add	r3, r7
 8008210:	227e      	movs	r2, #126	; 0x7e
 8008212:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008216:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008220:	33b8      	adds	r3, #184	; 0xb8
 8008222:	443b      	add	r3, r7
 8008224:	227e      	movs	r2, #126	; 0x7e
 8008226:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 800822a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008234:	33b8      	adds	r3, #184	; 0xb8
 8008236:	443b      	add	r3, r7
 8008238:	227e      	movs	r2, #126	; 0x7e
 800823a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 800823e:	4b37      	ldr	r3, [pc, #220]	; (800831c <Process_Send_Signals_2_MIE+0x378>)
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d102      	bne.n	800824c <Process_Send_Signals_2_MIE+0x2a8>
				{
					printf("Sending Signals over Ethernet:\n");
 8008246:	483b      	ldr	r0, [pc, #236]	; (8008334 <Process_Send_Signals_2_MIE+0x390>)
 8008248:	f01a fc2e 	bl	8022aa8 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 800824c:	2300      	movs	r3, #0
 800824e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8008252:	e014      	b.n	800827e <Process_Send_Signals_2_MIE+0x2da>
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 8008254:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008258:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800825c:	1c59      	adds	r1, r3, #1
 800825e:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 8008262:	4619      	mov	r1, r3
 8008264:	4b25      	ldr	r3, [pc, #148]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 8008266:	4413      	add	r3, r2
 8008268:	789a      	ldrb	r2, [r3, #2]
 800826a:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 800826e:	443b      	add	r3, r7
 8008270:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008274:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8008278:	3301      	adds	r3, #1
 800827a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800827e:	4b1f      	ldr	r3, [pc, #124]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008286:	429a      	cmp	r2, r3
 8008288:	d3e4      	bcc.n	8008254 <Process_Send_Signals_2_MIE+0x2b0>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800828a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008294:	33b8      	adds	r3, #184	; 0xb8
 8008296:	443b      	add	r3, r7
 8008298:	227f      	movs	r2, #127	; 0x7f
 800829a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800829e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80082a8:	33b8      	adds	r3, #184	; 0xb8
 80082aa:	443b      	add	r3, r7
 80082ac:	227f      	movs	r2, #127	; 0x7f
 80082ae:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 80082b2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80082bc:	33b8      	adds	r3, #184	; 0xb8
 80082be:	443b      	add	r3, r7
 80082c0:	227f      	movs	r2, #127	; 0x7f
 80082c2:	f803 2cb4 	strb.w	r2, [r3, #-180]

				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 80082c6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082ca:	b2d9      	uxtb	r1, r3
 80082cc:	4a1a      	ldr	r2, [pc, #104]	; (8008338 <Process_Send_Signals_2_MIE+0x394>)
 80082ce:	1d3b      	adds	r3, r7, #4
 80082d0:	6812      	ldr	r2, [r2, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f007 f9b6 	bl	800f644 <Udp_Send_SigInfo>
				send_signals_serial_Clk = HAL_GetTick();
 80082d8:	f00d fb4c 	bl	8015974 <HAL_GetTick>
 80082dc:	4603      	mov	r3, r0
 80082de:	4a13      	ldr	r2, [pc, #76]	; (800832c <Process_Send_Signals_2_MIE+0x388>)
 80082e0:	6013      	str	r3, [r2, #0]
 80082e2:	e0a9      	b.n	8008438 <Process_Send_Signals_2_MIE+0x494>
 80082e4:	20000e70 	.word	0x20000e70
 80082e8:	20000304 	.word	0x20000304
 80082ec:	20000ec4 	.word	0x20000ec4
 80082f0:	0802411c 	.word	0x0802411c
 80082f4:	20000305 	.word	0x20000305
 80082f8:	08024fec 	.word	0x08024fec
 80082fc:	200010e4 	.word	0x200010e4
 8008300:	20000f70 	.word	0x20000f70
 8008304:	20000f64 	.word	0x20000f64
 8008308:	20001f48 	.word	0x20001f48
 800830c:	20001e80 	.word	0x20001e80
 8008310:	20000108 	.word	0x20000108
 8008314:	08025000 	.word	0x08025000
 8008318:	08025024 	.word	0x08025024
 800831c:	20000645 	.word	0x20000645
 8008320:	20002888 	.word	0x20002888
 8008324:	08025044 	.word	0x08025044
 8008328:	0802506c 	.word	0x0802506c
 800832c:	2000207c 	.word	0x2000207c
 8008330:	20002080 	.word	0x20002080
 8008334:	08025074 	.word	0x08025074
 8008338:	20001058 	.word	0x20001058
			}
			else if(memcmp(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff)) != 0)
 800833c:	22a0      	movs	r2, #160	; 0xa0
 800833e:	4943      	ldr	r1, [pc, #268]	; (800844c <Process_Send_Signals_2_MIE+0x4a8>)
 8008340:	4843      	ldr	r0, [pc, #268]	; (8008450 <Process_Send_Signals_2_MIE+0x4ac>)
 8008342:	f01a f9f5 	bl	8022730 <memcmp>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d075      	beq.n	8008438 <Process_Send_Signals_2_MIE+0x494>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 800834c:	4a40      	ldr	r2, [pc, #256]	; (8008450 <Process_Send_Signals_2_MIE+0x4ac>)
 800834e:	4b41      	ldr	r3, [pc, #260]	; (8008454 <Process_Send_Signals_2_MIE+0x4b0>)
 8008350:	4610      	mov	r0, r2
 8008352:	3302      	adds	r3, #2
 8008354:	22a0      	movs	r2, #160	; 0xa0
 8008356:	4619      	mov	r1, r3
 8008358:	f01a f9fa 	bl	8022750 <memcpy>
				Serial_Byte = 0;
 800835c:	2300      	movs	r3, #0
 800835e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008362:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800836c:	33b8      	adds	r3, #184	; 0xb8
 800836e:	443b      	add	r3, r7
 8008370:	227e      	movs	r2, #126	; 0x7e
 8008372:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008376:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008380:	33b8      	adds	r3, #184	; 0xb8
 8008382:	443b      	add	r3, r7
 8008384:	227e      	movs	r2, #126	; 0x7e
 8008386:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 800838a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008394:	33b8      	adds	r3, #184	; 0xb8
 8008396:	443b      	add	r3, r7
 8008398:	227e      	movs	r2, #126	; 0x7e
 800839a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 800839e:	4b2e      	ldr	r3, [pc, #184]	; (8008458 <Process_Send_Signals_2_MIE+0x4b4>)
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d102      	bne.n	80083ac <Process_Send_Signals_2_MIE+0x408>
				{
					printf("Sending Signals over Ethernet:\n");
 80083a6:	482d      	ldr	r0, [pc, #180]	; (800845c <Process_Send_Signals_2_MIE+0x4b8>)
 80083a8:	f01a fb7e 	bl	8022aa8 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 80083ac:	2300      	movs	r3, #0
 80083ae:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80083b2:	e014      	b.n	80083de <Process_Send_Signals_2_MIE+0x43a>
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 80083b4:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80083b8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083bc:	1c59      	adds	r1, r3, #1
 80083be:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 80083c2:	4619      	mov	r1, r3
 80083c4:	4b23      	ldr	r3, [pc, #140]	; (8008454 <Process_Send_Signals_2_MIE+0x4b0>)
 80083c6:	4413      	add	r3, r2
 80083c8:	789a      	ldrb	r2, [r3, #2]
 80083ca:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 80083ce:	443b      	add	r3, r7
 80083d0:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 80083d4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80083d8:	3301      	adds	r3, #1
 80083da:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80083de:	4b1d      	ldr	r3, [pc, #116]	; (8008454 <Process_Send_Signals_2_MIE+0x4b0>)
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d3e4      	bcc.n	80083b4 <Process_Send_Signals_2_MIE+0x410>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 80083ea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80083f4:	33b8      	adds	r3, #184	; 0xb8
 80083f6:	443b      	add	r3, r7
 80083f8:	227f      	movs	r2, #127	; 0x7f
 80083fa:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 80083fe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008408:	33b8      	adds	r3, #184	; 0xb8
 800840a:	443b      	add	r3, r7
 800840c:	227f      	movs	r2, #127	; 0x7f
 800840e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008412:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800841c:	33b8      	adds	r3, #184	; 0xb8
 800841e:	443b      	add	r3, r7
 8008420:	227f      	movs	r2, #127	; 0x7f
 8008422:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 8008426:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800842a:	b2d9      	uxtb	r1, r3
 800842c:	4a0c      	ldr	r2, [pc, #48]	; (8008460 <Process_Send_Signals_2_MIE+0x4bc>)
 800842e:	1d3b      	adds	r3, r7, #4
 8008430:	6812      	ldr	r2, [r2, #0]
 8008432:	4618      	mov	r0, r3
 8008434:	f007 f906 	bl	800f644 <Udp_Send_SigInfo>
			}
			printf("\n");
		}

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 8008438:	f00d fa9c 	bl	8015974 <HAL_GetTick>
 800843c:	4603      	mov	r3, r0
 800843e:	4a09      	ldr	r2, [pc, #36]	; (8008464 <Process_Send_Signals_2_MIE+0x4c0>)
 8008440:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 8008442:	bf00      	nop
 8008444:	37b8      	adds	r7, #184	; 0xb8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	200010e6 	.word	0x200010e6
 8008450:	20002080 	.word	0x20002080
 8008454:	200010e4 	.word	0x200010e4
 8008458:	20000645 	.word	0x20000645
 800845c:	08025074 	.word	0x08025074
 8008460:	20001058 	.word	0x20001058
 8008464:	20000e70 	.word	0x20000e70

08008468 <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 8008468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800846a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800846e:	af04      	add	r7, sp, #16
 8008470:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008474:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008478:	6018      	str	r0, [r3, #0]
 800847a:	4608      	mov	r0, r1
 800847c:	4611      	mov	r1, r2
 800847e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008482:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008486:	4602      	mov	r2, r0
 8008488:	701a      	strb	r2, [r3, #0]
 800848a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800848e:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8008492:	460a      	mov	r2, r1
 8008494:	701a      	strb	r2, [r3, #0]
	char Print_buff[512] = {0,};
 8008496:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800849a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	3304      	adds	r3, #4
 80084a4:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80084a8:	2100      	movs	r1, #0
 80084aa:	4618      	mov	r0, r3
 80084ac:	f01a f978 	bl	80227a0 <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nR|"):Display("\nX|");
 80084b6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084ba:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d003      	beq.n	80084cc <Print_EI_DATA+0x64>
 80084c4:	48a8      	ldr	r0, [pc, #672]	; (8008768 <Print_EI_DATA+0x300>)
 80084c6:	f000 f975 	bl	80087b4 <Display>
 80084ca:	e002      	b.n	80084d2 <Print_EI_DATA+0x6a>
 80084cc:	48a7      	ldr	r0, [pc, #668]	; (800876c <Print_EI_DATA+0x304>)
 80084ce:	f000 f971 	bl	80087b4 <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"DA:%lu|",ExtractBits(0,16,&Msg[1]));
 80084d2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084d6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3301      	adds	r3, #1
 80084de:	461a      	mov	r2, r3
 80084e0:	2110      	movs	r1, #16
 80084e2:	2000      	movs	r0, #0
 80084e4:	f7f8 f896 	bl	8000614 <ExtractBits>
 80084e8:	4602      	mov	r2, r0
 80084ea:	f107 030c 	add.w	r3, r7, #12
 80084ee:	49a0      	ldr	r1, [pc, #640]	; (8008770 <Print_EI_DATA+0x308>)
 80084f0:	4618      	mov	r0, r3
 80084f2:	f01a fbf5 	bl	8022ce0 <siprintf>
	Display(Print_buff);
 80084f6:	f107 030c 	add.w	r3, r7, #12
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f95a 	bl	80087b4 <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"SA:%lu|",ExtractBits(0,16,&Msg[3]));
 8008500:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008504:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3303      	adds	r3, #3
 800850c:	461a      	mov	r2, r3
 800850e:	2110      	movs	r1, #16
 8008510:	2000      	movs	r0, #0
 8008512:	f7f8 f87f 	bl	8000614 <ExtractBits>
 8008516:	4602      	mov	r2, r0
 8008518:	f107 030c 	add.w	r3, r7, #12
 800851c:	4995      	ldr	r1, [pc, #596]	; (8008774 <Print_EI_DATA+0x30c>)
 800851e:	4618      	mov	r0, r3
 8008520:	f01a fbde 	bl	8022ce0 <siprintf>
	Display(Print_buff);
 8008524:	f107 030c 	add.w	r3, r7, #12
 8008528:	4618      	mov	r0, r3
 800852a:	f000 f943 	bl	80087b4 <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 800852e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008532:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3307      	adds	r3, #7
 800853a:	461a      	mov	r2, r3
 800853c:	2108      	movs	r1, #8
 800853e:	2000      	movs	r0, #0
 8008540:	f7f8 f868 	bl	8000614 <ExtractBits>
 8008544:	4603      	mov	r3, r0
 8008546:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Display("MT:");
 800854a:	488b      	ldr	r0, [pc, #556]	; (8008778 <Print_EI_DATA+0x310>)
 800854c:	f000 f932 	bl	80087b4 <Display>
	switch(Msg_type)
 8008550:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008554:	3b01      	subs	r3, #1
 8008556:	2b05      	cmp	r3, #5
 8008558:	d829      	bhi.n	80085ae <Print_EI_DATA+0x146>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <Print_EI_DATA+0xf8>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	08008579 	.word	0x08008579
 8008564:	08008597 	.word	0x08008597
 8008568:	080085af 	.word	0x080085af
 800856c:	0800859f 	.word	0x0800859f
 8008570:	080085af 	.word	0x080085af
 8008574:	080085a7 	.word	0x080085a7
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8008578:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800857c:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <Print_EI_DATA+0x126>
 8008586:	487d      	ldr	r0, [pc, #500]	; (800877c <Print_EI_DATA+0x314>)
 8008588:	f000 f914 	bl	80087b4 <Display>
		//Display("INIT     ");
		break;
 800858c:	e012      	b.n	80085b4 <Print_EI_DATA+0x14c>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 800858e:	487c      	ldr	r0, [pc, #496]	; (8008780 <Print_EI_DATA+0x318>)
 8008590:	f000 f910 	bl	80087b4 <Display>
		break;
 8008594:	e00e      	b.n	80085b4 <Print_EI_DATA+0x14c>
	case 2:
		Display("VIT");
 8008596:	487b      	ldr	r0, [pc, #492]	; (8008784 <Print_EI_DATA+0x31c>)
 8008598:	f000 f90c 	bl	80087b4 <Display>
		break;
 800859c:	e00a      	b.n	80085b4 <Print_EI_DATA+0x14c>
	case 4:
		Display("STS");
 800859e:	487a      	ldr	r0, [pc, #488]	; (8008788 <Print_EI_DATA+0x320>)
 80085a0:	f000 f908 	bl	80087b4 <Display>
		break;
 80085a4:	e006      	b.n	80085b4 <Print_EI_DATA+0x14c>
	case 6:
		Display("SER");
 80085a6:	4879      	ldr	r0, [pc, #484]	; (800878c <Print_EI_DATA+0x324>)
 80085a8:	f000 f904 	bl	80087b4 <Display>
		break;
 80085ac:	e002      	b.n	80085b4 <Print_EI_DATA+0x14c>
	default:
		Display("UNKNOWN MESSAGE\n");
 80085ae:	4878      	ldr	r0, [pc, #480]	; (8008790 <Print_EI_DATA+0x328>)
 80085b0:	f000 f900 	bl	80087b4 <Display>
	}
	Display("|");
 80085b4:	4877      	ldr	r0, [pc, #476]	; (8008794 <Print_EI_DATA+0x32c>)
 80085b6:	f000 f8fd 	bl	80087b4 <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 80085ba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80085be:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3305      	adds	r3, #5
 80085c6:	461a      	mov	r2, r3
 80085c8:	2108      	movs	r1, #8
 80085ca:	2000      	movs	r0, #0
 80085cc:	f7f8 f822 	bl	8000614 <ExtractBits>
 80085d0:	4602      	mov	r2, r0
 80085d2:	f107 030c 	add.w	r3, r7, #12
 80085d6:	4970      	ldr	r1, [pc, #448]	; (8008798 <Print_EI_DATA+0x330>)
 80085d8:	4618      	mov	r0, r3
 80085da:	f01a fb81 	bl	8022ce0 <siprintf>
	Display(Print_buff);
 80085de:	f107 030c 	add.w	r3, r7, #12
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 f8e6 	bl	80087b4 <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 80085e8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80085ec:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3306      	adds	r3, #6
 80085f4:	461a      	mov	r2, r3
 80085f6:	2108      	movs	r1, #8
 80085f8:	2000      	movs	r0, #0
 80085fa:	f7f8 f80b 	bl	8000614 <ExtractBits>
 80085fe:	4602      	mov	r2, r0
 8008600:	f107 030c 	add.w	r3, r7, #12
 8008604:	4965      	ldr	r1, [pc, #404]	; (800879c <Print_EI_DATA+0x334>)
 8008606:	4618      	mov	r0, r3
 8008608:	f01a fb6a 	bl	8022ce0 <siprintf>
	Display(Print_buff);
 800860c:	f107 030c 	add.w	r3, r7, #12
 8008610:	4618      	mov	r0, r3
 8008612:	f000 f8cf 	bl	80087b4 <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 8008616:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800861a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3308      	adds	r3, #8
 8008622:	461a      	mov	r2, r3
 8008624:	2110      	movs	r1, #16
 8008626:	2000      	movs	r0, #0
 8008628:	f7f7 fff4 	bl	8000614 <ExtractBits>
 800862c:	4603      	mov	r3, r0
 800862e:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 8008632:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8008636:	f107 030c 	add.w	r3, r7, #12
 800863a:	4959      	ldr	r1, [pc, #356]	; (80087a0 <Print_EI_DATA+0x338>)
 800863c:	4618      	mov	r0, r3
 800863e:	f01a fb4f 	bl	8022ce0 <siprintf>
	Display(Print_buff);
 8008642:	f107 030c 	add.w	r3, r7, #12
 8008646:	4618      	mov	r0, r3
 8008648:	f000 f8b4 	bl	80087b4 <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 800864c:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8008650:	095b      	lsrs	r3, r3, #5
 8008652:	b29b      	uxth	r3, r3
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	d03f      	beq.n	80086dc <Print_EI_DATA+0x274>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 800865c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008660:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	330a      	adds	r3, #10
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	461d      	mov	r5, r3
 800866c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008670:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	330b      	adds	r3, #11
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	461e      	mov	r6, r3
 800867c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008680:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	330c      	adds	r3, #12
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008690:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	330d      	adds	r3, #13
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	4619      	mov	r1, r3
 800869c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80086a0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	330e      	adds	r3, #14
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	461c      	mov	r4, r3
 80086ac:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80086b0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	330f      	adds	r3, #15
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	f107 000c 	add.w	r0, r7, #12
 80086be:	9303      	str	r3, [sp, #12]
 80086c0:	9402      	str	r4, [sp, #8]
 80086c2:	9101      	str	r1, [sp, #4]
 80086c4:	9200      	str	r2, [sp, #0]
 80086c6:	4633      	mov	r3, r6
 80086c8:	462a      	mov	r2, r5
 80086ca:	4936      	ldr	r1, [pc, #216]	; (80087a4 <Print_EI_DATA+0x33c>)
 80086cc:	f01a fb08 	bl	8022ce0 <siprintf>
		Display(Print_buff);
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 f86d 	bl	80087b4 <Display>
 80086da:	e002      	b.n	80086e2 <Print_EI_DATA+0x27a>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 80086dc:	4832      	ldr	r0, [pc, #200]	; (80087a8 <Print_EI_DATA+0x340>)
 80086de:	f000 f869 	bl	80087b4 <Display>
	}
	if(Debug_flag == 1)
 80086e2:	4b32      	ldr	r3, [pc, #200]	; (80087ac <Print_EI_DATA+0x344>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d139      	bne.n	800875e <Print_EI_DATA+0x2f6>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 80086ea:	2300      	movs	r3, #0
 80086ec:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80086f0:	e019      	b.n	8008726 <Print_EI_DATA+0x2be>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 80086f2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80086f6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80086fa:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80086fe:	6812      	ldr	r2, [r2, #0]
 8008700:	4413      	add	r3, r2
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	461a      	mov	r2, r3
 8008706:	f107 030c 	add.w	r3, r7, #12
 800870a:	4929      	ldr	r1, [pc, #164]	; (80087b0 <Print_EI_DATA+0x348>)
 800870c:	4618      	mov	r0, r3
 800870e:	f01a fae7 	bl	8022ce0 <siprintf>
			Display(Print_buff);
 8008712:	f107 030c 	add.w	r3, r7, #12
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f84c 	bl	80087b4 <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 800871c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008720:	3301      	adds	r3, #1
 8008722:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008726:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800872a:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 800872e:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	429a      	cmp	r2, r3
 8008736:	d3dc      	bcc.n	80086f2 <Print_EI_DATA+0x28a>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 8008738:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800873c:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10b      	bne.n	800875e <Print_EI_DATA+0x2f6>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 8008746:	f107 030c 	add.w	r3, r7, #12
 800874a:	22f6      	movs	r2, #246	; 0xf6
 800874c:	4918      	ldr	r1, [pc, #96]	; (80087b0 <Print_EI_DATA+0x348>)
 800874e:	4618      	mov	r0, r3
 8008750:	f01a fac6 	bl	8022ce0 <siprintf>
			Display(Print_buff);
 8008754:	f107 030c 	add.w	r3, r7, #12
 8008758:	4618      	mov	r0, r3
 800875a:	f000 f82b 	bl	80087b4 <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 800875e:	bf00      	nop
 8008760:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8008764:	46bd      	mov	sp, r7
 8008766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008768:	08025094 	.word	0x08025094
 800876c:	08025098 	.word	0x08025098
 8008770:	0802509c 	.word	0x0802509c
 8008774:	080250a4 	.word	0x080250a4
 8008778:	080250ac 	.word	0x080250ac
 800877c:	080250b0 	.word	0x080250b0
 8008780:	080250b8 	.word	0x080250b8
 8008784:	080250c0 	.word	0x080250c0
 8008788:	080250c4 	.word	0x080250c4
 800878c:	080250c8 	.word	0x080250c8
 8008790:	080250cc 	.word	0x080250cc
 8008794:	080250e0 	.word	0x080250e0
 8008798:	080250e4 	.word	0x080250e4
 800879c:	080250f0 	.word	0x080250f0
 80087a0:	080250fc 	.word	0x080250fc
 80087a4:	08025108 	.word	0x08025108
 80087a8:	0802512c 	.word	0x0802512c
 80087ac:	20000645 	.word	0x20000645
 80087b0:	0802506c 	.word	0x0802506c

080087b4 <Display>:

void Display(char *Data)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 80087c0:	e00a      	b.n	80087d8 <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	4413      	add	r3, r2
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	4619      	mov	r1, r3
 80087cc:	2000      	movs	r0, #0
 80087ce:	f00c fe79 	bl	80154c4 <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	3301      	adds	r3, #1
 80087d6:	73fb      	strb	r3, [r7, #15]
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	4413      	add	r3, r2
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1ee      	bne.n	80087c2 <Display+0xe>
	}
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <print_self_Details>:
	}

}

void print_self_Details(void)
{
 80087f0:	b5b0      	push	{r4, r5, r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 80087fa:	4890      	ldr	r0, [pc, #576]	; (8008a3c <print_self_Details+0x24c>)
 80087fc:	f01a f954 	bl	8022aa8 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008800:	4b8f      	ldr	r3, [pc, #572]	; (8008a40 <print_self_Details+0x250>)
 8008802:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008806:	4619      	mov	r1, r3
 8008808:	488e      	ldr	r0, [pc, #568]	; (8008a44 <print_self_Details+0x254>)
 800880a:	f01a f8b1 	bl	8022970 <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 800880e:	4b8c      	ldr	r3, [pc, #560]	; (8008a40 <print_self_Details+0x250>)
 8008810:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008814:	4619      	mov	r1, r3
 8008816:	488c      	ldr	r0, [pc, #560]	; (8008a48 <print_self_Details+0x258>)
 8008818:	f01a f8aa 	bl	8022970 <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 800881c:	4b88      	ldr	r3, [pc, #544]	; (8008a40 <print_self_Details+0x250>)
 800881e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008822:	4619      	mov	r1, r3
 8008824:	4889      	ldr	r0, [pc, #548]	; (8008a4c <print_self_Details+0x25c>)
 8008826:	f01a f8a3 	bl	8022970 <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 800882a:	4b85      	ldr	r3, [pc, #532]	; (8008a40 <print_self_Details+0x250>)
 800882c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008830:	4619      	mov	r1, r3
 8008832:	4887      	ldr	r0, [pc, #540]	; (8008a50 <print_self_Details+0x260>)
 8008834:	f01a f89c 	bl	8022970 <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 8008838:	4b81      	ldr	r3, [pc, #516]	; (8008a40 <print_self_Details+0x250>)
 800883a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800883e:	4619      	mov	r1, r3
 8008840:	4884      	ldr	r0, [pc, #528]	; (8008a54 <print_self_Details+0x264>)
 8008842:	f01a f895 	bl	8022970 <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8008846:	4b7e      	ldr	r3, [pc, #504]	; (8008a40 <print_self_Details+0x250>)
 8008848:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 800884c:	4619      	mov	r1, r3
 800884e:	4882      	ldr	r0, [pc, #520]	; (8008a58 <print_self_Details+0x268>)
 8008850:	f01a f88e 	bl	8022970 <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008854:	4b7a      	ldr	r3, [pc, #488]	; (8008a40 <print_self_Details+0x250>)
 8008856:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800885a:	4619      	mov	r1, r3
 800885c:	4879      	ldr	r0, [pc, #484]	; (8008a44 <print_self_Details+0x254>)
 800885e:	f01a f887 	bl	8022970 <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8008862:	2300      	movs	r3, #0
 8008864:	71fb      	strb	r3, [r7, #7]
 8008866:	e03b      	b.n	80088e0 <print_self_Details+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 8008868:	79f9      	ldrb	r1, [r7, #7]
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	4a74      	ldr	r2, [pc, #464]	; (8008a40 <print_self_Details+0x250>)
 800886e:	3312      	adds	r3, #18
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	78db      	ldrb	r3, [r3, #3]
 8008876:	461c      	mov	r4, r3
 8008878:	79fb      	ldrb	r3, [r7, #7]
 800887a:	4a71      	ldr	r2, [pc, #452]	; (8008a40 <print_self_Details+0x250>)
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008884:	461d      	mov	r5, r3
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	4a6d      	ldr	r2, [pc, #436]	; (8008a40 <print_self_Details+0x250>)
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008892:	4618      	mov	r0, r3
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	4a6a      	ldr	r2, [pc, #424]	; (8008a40 <print_self_Details+0x250>)
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	9000      	str	r0, [sp, #0]
 80088a4:	462b      	mov	r3, r5
 80088a6:	4622      	mov	r2, r4
 80088a8:	486c      	ldr	r0, [pc, #432]	; (8008a5c <print_self_Details+0x26c>)
 80088aa:	f01a f861 	bl	8022970 <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 80088ae:	79f9      	ldrb	r1, [r7, #7]
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	4a63      	ldr	r2, [pc, #396]	; (8008a40 <print_self_Details+0x250>)
 80088b4:	333e      	adds	r3, #62	; 0x3e
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	885b      	ldrh	r3, [r3, #2]
 80088bc:	461a      	mov	r2, r3
 80088be:	4868      	ldr	r0, [pc, #416]	; (8008a60 <print_self_Details+0x270>)
 80088c0:	f01a f856 	bl	8022970 <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 80088c4:	79f9      	ldrb	r1, [r7, #7]
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	4a5d      	ldr	r2, [pc, #372]	; (8008a40 <print_self_Details+0x250>)
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80088d2:	461a      	mov	r2, r3
 80088d4:	4863      	ldr	r0, [pc, #396]	; (8008a64 <print_self_Details+0x274>)
 80088d6:	f01a f84b 	bl	8022970 <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	3301      	adds	r3, #1
 80088de:	71fb      	strb	r3, [r7, #7]
 80088e0:	4b57      	ldr	r3, [pc, #348]	; (8008a40 <print_self_Details+0x250>)
 80088e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80088e6:	79fa      	ldrb	r2, [r7, #7]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d3bd      	bcc.n	8008868 <print_self_Details+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 80088ec:	4b54      	ldr	r3, [pc, #336]	; (8008a40 <print_self_Details+0x250>)
 80088ee:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80088f2:	4619      	mov	r1, r3
 80088f4:	4b52      	ldr	r3, [pc, #328]	; (8008a40 <print_self_Details+0x250>)
 80088f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088fa:	461a      	mov	r2, r3
 80088fc:	4b50      	ldr	r3, [pc, #320]	; (8008a40 <print_self_Details+0x250>)
 80088fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008902:	4618      	mov	r0, r3
 8008904:	4b4e      	ldr	r3, [pc, #312]	; (8008a40 <print_self_Details+0x250>)
 8008906:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	4603      	mov	r3, r0
 800890e:	4856      	ldr	r0, [pc, #344]	; (8008a68 <print_self_Details+0x278>)
 8008910:	f01a f82e 	bl	8022970 <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 8008914:	4b4a      	ldr	r3, [pc, #296]	; (8008a40 <print_self_Details+0x250>)
 8008916:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800891a:	4618      	mov	r0, r3
 800891c:	4b48      	ldr	r3, [pc, #288]	; (8008a40 <print_self_Details+0x250>)
 800891e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008922:	461c      	mov	r4, r3
 8008924:	4b46      	ldr	r3, [pc, #280]	; (8008a40 <print_self_Details+0x250>)
 8008926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800892a:	461d      	mov	r5, r3
 800892c:	4b44      	ldr	r3, [pc, #272]	; (8008a40 <print_self_Details+0x250>)
 800892e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008932:	461a      	mov	r2, r3
 8008934:	4b42      	ldr	r3, [pc, #264]	; (8008a40 <print_self_Details+0x250>)
 8008936:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800893a:	4619      	mov	r1, r3
 800893c:	4b40      	ldr	r3, [pc, #256]	; (8008a40 <print_self_Details+0x250>)
 800893e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008942:	9302      	str	r3, [sp, #8]
 8008944:	9101      	str	r1, [sp, #4]
 8008946:	9200      	str	r2, [sp, #0]
 8008948:	462b      	mov	r3, r5
 800894a:	4622      	mov	r2, r4
 800894c:	4601      	mov	r1, r0
 800894e:	4847      	ldr	r0, [pc, #284]	; (8008a6c <print_self_Details+0x27c>)
 8008950:	f01a f80e 	bl	8022970 <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8008954:	4b3a      	ldr	r3, [pc, #232]	; (8008a40 <print_self_Details+0x250>)
 8008956:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 800895a:	4619      	mov	r1, r3
 800895c:	4844      	ldr	r0, [pc, #272]	; (8008a70 <print_self_Details+0x280>)
 800895e:	f01a f807 	bl	8022970 <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008962:	2300      	movs	r3, #0
 8008964:	71fb      	strb	r3, [r7, #7]
 8008966:	e05c      	b.n	8008a22 <print_self_Details+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	3301      	adds	r3, #1
 800896c:	4619      	mov	r1, r3
 800896e:	4841      	ldr	r0, [pc, #260]	; (8008a74 <print_self_Details+0x284>)
 8008970:	f019 fffe 	bl	8022970 <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008974:	79fb      	ldrb	r3, [r7, #7]
 8008976:	4a32      	ldr	r2, [pc, #200]	; (8008a40 <print_self_Details+0x250>)
 8008978:	3366      	adds	r3, #102	; 0x66
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	4619      	mov	r1, r3
 8008982:	483d      	ldr	r0, [pc, #244]	; (8008a78 <print_self_Details+0x288>)
 8008984:	f019 fff4 	bl	8022970 <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	4a2d      	ldr	r2, [pc, #180]	; (8008a40 <print_self_Details+0x250>)
 800898c:	3370      	adds	r3, #112	; 0x70
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	4619      	mov	r1, r3
 8008996:	4839      	ldr	r0, [pc, #228]	; (8008a7c <print_self_Details+0x28c>)
 8008998:	f019 ffea 	bl	8022970 <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	4a28      	ldr	r2, [pc, #160]	; (8008a40 <print_self_Details+0x250>)
 80089a0:	33f4      	adds	r3, #244	; 0xf4
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	4413      	add	r3, r2
 80089a6:	889b      	ldrh	r3, [r3, #4]
 80089a8:	4619      	mov	r1, r3
 80089aa:	4835      	ldr	r0, [pc, #212]	; (8008a80 <print_self_Details+0x290>)
 80089ac:	f019 ffe0 	bl	8022970 <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 80089b0:	79fb      	ldrb	r3, [r7, #7]
 80089b2:	4a23      	ldr	r2, [pc, #140]	; (8008a40 <print_self_Details+0x250>)
 80089b4:	4413      	add	r3, r2
 80089b6:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80089ba:	4619      	mov	r1, r3
 80089bc:	4831      	ldr	r0, [pc, #196]	; (8008a84 <print_self_Details+0x294>)
 80089be:	f019 ffd7 	bl	8022970 <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 80089c2:	79fb      	ldrb	r3, [r7, #7]
 80089c4:	4a1e      	ldr	r2, [pc, #120]	; (8008a40 <print_self_Details+0x250>)
 80089c6:	4413      	add	r3, r2
 80089c8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80089cc:	4619      	mov	r1, r3
 80089ce:	482e      	ldr	r0, [pc, #184]	; (8008a88 <print_self_Details+0x298>)
 80089d0:	f019 ffce 	bl	8022970 <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 80089d4:	79fb      	ldrb	r3, [r7, #7]
 80089d6:	4a1a      	ldr	r2, [pc, #104]	; (8008a40 <print_self_Details+0x250>)
 80089d8:	4413      	add	r3, r2
 80089da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089de:	4619      	mov	r1, r3
 80089e0:	482a      	ldr	r0, [pc, #168]	; (8008a8c <print_self_Details+0x29c>)
 80089e2:	f019 ffc5 	bl	8022970 <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 80089e6:	79fb      	ldrb	r3, [r7, #7]
 80089e8:	4a15      	ldr	r2, [pc, #84]	; (8008a40 <print_self_Details+0x250>)
 80089ea:	338a      	adds	r3, #138	; 0x8a
 80089ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089f0:	4619      	mov	r1, r3
 80089f2:	4827      	ldr	r0, [pc, #156]	; (8008a90 <print_self_Details+0x2a0>)
 80089f4:	f019 ffbc 	bl	8022970 <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 80089f8:	79fb      	ldrb	r3, [r7, #7]
 80089fa:	4a11      	ldr	r2, [pc, #68]	; (8008a40 <print_self_Details+0x250>)
 80089fc:	3394      	adds	r3, #148	; 0x94
 80089fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a02:	4619      	mov	r1, r3
 8008a04:	4823      	ldr	r0, [pc, #140]	; (8008a94 <print_self_Details+0x2a4>)
 8008a06:	f019 ffb3 	bl	8022970 <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 8008a0a:	79fb      	ldrb	r3, [r7, #7]
 8008a0c:	4a0c      	ldr	r2, [pc, #48]	; (8008a40 <print_self_Details+0x250>)
 8008a0e:	339e      	adds	r3, #158	; 0x9e
 8008a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a14:	4619      	mov	r1, r3
 8008a16:	4820      	ldr	r0, [pc, #128]	; (8008a98 <print_self_Details+0x2a8>)
 8008a18:	f019 ffaa 	bl	8022970 <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	71fb      	strb	r3, [r7, #7]
 8008a22:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <print_self_Details+0x250>)
 8008a24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a28:	79fa      	ldrb	r2, [r7, #7]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d39c      	bcc.n	8008968 <print_self_Details+0x178>

	}

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 8008a2e:	4803      	ldr	r0, [pc, #12]	; (8008a3c <print_self_Details+0x24c>)
 8008a30:	f01a f83a 	bl	8022aa8 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8008a3c:	080251a0 	.word	0x080251a0
 8008a40:	20000304 	.word	0x20000304
 8008a44:	080251f4 	.word	0x080251f4
 8008a48:	08025218 	.word	0x08025218
 8008a4c:	0802523c 	.word	0x0802523c
 8008a50:	08025268 	.word	0x08025268
 8008a54:	08025294 	.word	0x08025294
 8008a58:	080252c0 	.word	0x080252c0
 8008a5c:	080252ec 	.word	0x080252ec
 8008a60:	0802530c 	.word	0x0802530c
 8008a64:	0802531c 	.word	0x0802531c
 8008a68:	0802532c 	.word	0x0802532c
 8008a6c:	08025348 	.word	0x08025348
 8008a70:	08025378 	.word	0x08025378
 8008a74:	0802538c 	.word	0x0802538c
 8008a78:	080253a0 	.word	0x080253a0
 8008a7c:	080253bc 	.word	0x080253bc
 8008a80:	080253d8 	.word	0x080253d8
 8008a84:	080253f4 	.word	0x080253f4
 8008a88:	0802540c 	.word	0x0802540c
 8008a8c:	08025420 	.word	0x08025420
 8008a90:	08025434 	.word	0x08025434
 8008a94:	08025450 	.word	0x08025450
 8008a98:	0802546c 	.word	0x0802546c

08008a9c <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	71fb      	strb	r3, [r7, #7]
 8008aaa:	e054      	b.n	8008b56 <Send_Init_After_Timeout+0xba>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 8008aac:	79fb      	ldrb	r3, [r7, #7]
 8008aae:	4a2f      	ldr	r2, [pc, #188]	; (8008b6c <Send_Init_After_Timeout+0xd0>)
 8008ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d04b      	beq.n	8008b50 <Send_Init_After_Timeout+0xb4>
		{
#ifdef EI_1
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8008ab8:	79fb      	ldrb	r3, [r7, #7]
 8008aba:	4a2c      	ldr	r2, [pc, #176]	; (8008b6c <Send_Init_After_Timeout+0xd0>)
 8008abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f006 f9cd 	bl	800ee60 <HAL_Elaps_Ticks>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	79fb      	ldrb	r3, [r7, #7]
 8008aca:	4929      	ldr	r1, [pc, #164]	; (8008b70 <Send_Init_After_Timeout+0xd4>)
 8008acc:	3394      	adds	r3, #148	; 0x94
 8008ace:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if(
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d93c      	bls.n	8008b50 <Send_Init_After_Timeout+0xb4>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	4a26      	ldr	r2, [pc, #152]	; (8008b74 <Send_Init_After_Timeout+0xd8>)
 8008ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f006 f9be 	bl	800ee60 <HAL_Elaps_Ticks>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	79fb      	ldrb	r3, [r7, #7]
 8008ae8:	4921      	ldr	r1, [pc, #132]	; (8008b70 <Send_Init_After_Timeout+0xd4>)
 8008aea:	3394      	adds	r3, #148	; 0x94
 8008aec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d92d      	bls.n	8008b50 <Send_Init_After_Timeout+0xb4>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	4a20      	ldr	r2, [pc, #128]	; (8008b78 <Send_Init_After_Timeout+0xdc>)
 8008af8:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d028      	beq.n	8008b50 <Send_Init_After_Timeout+0xb4>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	4a1e      	ldr	r2, [pc, #120]	; (8008b7c <Send_Init_After_Timeout+0xe0>)
 8008b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b0a:	d921      	bls.n	8008b50 <Send_Init_After_Timeout+0xb4>
			)
			{
				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	4a17      	ldr	r2, [pc, #92]	; (8008b6c <Send_Init_After_Timeout+0xd0>)
 8008b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f006 f9a3 	bl	800ee60 <HAL_Elaps_Ticks>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	4a18      	ldr	r2, [pc, #96]	; (8008b80 <Send_Init_After_Timeout+0xe4>)
 8008b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b22:	099b      	lsrs	r3, r3, #6
 8008b24:	4619      	mov	r1, r3
 8008b26:	4817      	ldr	r0, [pc, #92]	; (8008b84 <Send_Init_After_Timeout+0xe8>)
 8008b28:	f019 ff22 	bl	8022970 <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	4a16      	ldr	r2, [pc, #88]	; (8008b88 <Send_Init_After_Timeout+0xec>)
 8008b30:	2101      	movs	r1, #1
 8008b32:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 8008b34:	79fa      	ldrb	r2, [r7, #7]
 8008b36:	79fb      	ldrb	r3, [r7, #7]
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7f9 fbca 	bl	80022d4 <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	4a0d      	ldr	r2, [pc, #52]	; (8008b78 <Send_Init_After_Timeout+0xdc>)
 8008b44:	2101      	movs	r1, #1
 8008b46:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	4a10      	ldr	r2, [pc, #64]	; (8008b8c <Send_Init_After_Timeout+0xf0>)
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	3301      	adds	r3, #1
 8008b54:	71fb      	strb	r3, [r7, #7]
 8008b56:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <Send_Init_After_Timeout+0xd4>)
 8008b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b5c:	79fa      	ldrb	r2, [r7, #7]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d3a4      	bcc.n	8008aac <Send_Init_After_Timeout+0x10>
				INIT_REQ_SENT_Flag[Traverser] = 1;
			}
#endif
		}
	}
}
 8008b62:	bf00      	nop
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20000fa4 	.word	0x20000fa4
 8008b70:	20000304 	.word	0x20000304
 8008b74:	20000e9c 	.word	0x20000e9c
 8008b78:	2000108c 	.word	0x2000108c
 8008b7c:	20001098 	.word	0x20001098
 8008b80:	10624dd3 	.word	0x10624dd3
 8008b84:	08025488 	.word	0x08025488
 8008b88:	200010cc 	.word	0x200010cc
 8008b8c:	200010c0 	.word	0x200010c0

08008b90 <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8008b96:	2300      	movs	r3, #0
 8008b98:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008b9a:	e037      	b.n	8008c0c <Send_Vital_Msg_After_Rx_VITAL+0x7c>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if(
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008b9c:	79fa      	ldrb	r2, [r7, #7]
 8008b9e:	4921      	ldr	r1, [pc, #132]	; (8008c24 <Send_Vital_Msg_After_Rx_VITAL+0x94>)
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	4413      	add	r3, r2
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	440b      	add	r3, r1
 8008baa:	3304      	adds	r3, #4
 8008bac:	781b      	ldrb	r3, [r3, #0]
		if(
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d006      	beq.n	8008bc0 <Send_Vital_Msg_After_Rx_VITAL+0x30>
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	4a1c      	ldr	r2, [pc, #112]	; (8008c28 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d122      	bne.n	8008c06 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	4a1a      	ldr	r2, [pc, #104]	; (8008c2c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008bc4:	5cd3      	ldrb	r3, [r2, r3]
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d11d      	bne.n	8008c06 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 50 )
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	4a17      	ldr	r2, [pc, #92]	; (8008c2c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008bce:	3302      	adds	r3, #2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f006 f942 	bl	800ee60 <HAL_Elaps_Ticks>
 8008bdc:	4603      	mov	r3, r0
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8008bde:	2b32      	cmp	r3, #50	; 0x32
 8008be0:	d911      	bls.n	8008c06 <Send_Vital_Msg_After_Rx_VITAL+0x76>
		)
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 8008be2:	79fa      	ldrb	r2, [r7, #7]
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	4611      	mov	r1, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fb f8a7 	bl	8003d3c <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	4a0e      	ldr	r2, [pc, #56]	; (8008c2c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 8008bf6:	79fb      	ldrb	r3, [r7, #7]
 8008bf8:	4a0c      	ldr	r2, [pc, #48]	; (8008c2c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008bfa:	3302      	adds	r3, #2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	f04f 32ff 	mov.w	r2, #4294967295
 8008c04:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008c06:	79fb      	ldrb	r3, [r7, #7]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	71fb      	strb	r3, [r7, #7]
 8008c0c:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 8008c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c12:	79fa      	ldrb	r2, [r7, #7]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d3c1      	bcc.n	8008b9c <Send_Vital_Msg_After_Rx_VITAL+0xc>
		//			Send_Vital_Data_Message(Traverser, Traverser);
		//			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
		//			Send_Vital_MSG_st.Clk[Traverser] = -1;
		//		}
	}
}
 8008c18:	bf00      	nop
 8008c1a:	bf00      	nop
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20001674 	.word	0x20001674
 8008c28:	20000304 	.word	0x20000304
 8008c2c:	20001c94 	.word	0x20001c94

08008c30 <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008c36:	2300      	movs	r3, #0
 8008c38:	71fb      	strb	r3, [r7, #7]
 8008c3a:	e04e      	b.n	8008cda <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	4a2c      	ldr	r2, [pc, #176]	; (8008cf0 <Check_Recv_Status_fail+0xc0>)
 8008c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d045      	beq.n	8008cd4 <Check_Recv_Status_fail+0xa4>
 8008c48:	79fa      	ldrb	r2, [r7, #7]
 8008c4a:	492a      	ldr	r1, [pc, #168]	; (8008cf4 <Check_Recv_Status_fail+0xc4>)
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	005b      	lsls	r3, r3, #1
 8008c50:	4413      	add	r3, r2
 8008c52:	00db      	lsls	r3, r3, #3
 8008c54:	440b      	add	r3, r1
 8008c56:	3303      	adds	r3, #3
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d03a      	beq.n	8008cd4 <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8008c5e:	79fb      	ldrb	r3, [r7, #7]
 8008c60:	4a23      	ldr	r2, [pc, #140]	; (8008cf0 <Check_Recv_Status_fail+0xc0>)
 8008c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f006 f8fa 	bl	800ee60 <HAL_Elaps_Ticks>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	79fb      	ldrb	r3, [r7, #7]
 8008c70:	4921      	ldr	r1, [pc, #132]	; (8008cf8 <Check_Recv_Status_fail+0xc8>)
 8008c72:	338a      	adds	r3, #138	; 0x8a
 8008c74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d92b      	bls.n	8008cd4 <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 8008c7c:	79fb      	ldrb	r3, [r7, #7]
 8008c7e:	4a1e      	ldr	r2, [pc, #120]	; (8008cf8 <Check_Recv_Status_fail+0xc8>)
 8008c80:	3366      	adds	r3, #102	; 0x66
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	6859      	ldr	r1, [r3, #4]
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	4a1b      	ldr	r2, [pc, #108]	; (8008cf8 <Check_Recv_Status_fail+0xc8>)
 8008c8c:	338a      	adds	r3, #138	; 0x8a
 8008c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c92:	4a1a      	ldr	r2, [pc, #104]	; (8008cfc <Check_Recv_Status_fail+0xcc>)
 8008c94:	fba2 2303 	umull	r2, r3, r2, r3
 8008c98:	099b      	lsrs	r3, r3, #6
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	4818      	ldr	r0, [pc, #96]	; (8008d00 <Check_Recv_Status_fail+0xd0>)
 8008c9e:	f019 fe67 	bl	8022970 <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	4a12      	ldr	r2, [pc, #72]	; (8008cf0 <Check_Recv_Status_fail+0xc0>)
 8008ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008caa:	4619      	mov	r1, r3
 8008cac:	4815      	ldr	r0, [pc, #84]	; (8008d04 <Check_Recv_Status_fail+0xd4>)
 8008cae:	f019 fe5f 	bl	8022970 <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 8008cb2:	f00c fe5f 	bl	8015974 <HAL_GetTick>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4813      	ldr	r0, [pc, #76]	; (8008d08 <Check_Recv_Status_fail+0xd8>)
 8008cbc:	f019 fe58 	bl	8022970 <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 8008cc0:	79fa      	ldrb	r2, [r7, #7]
 8008cc2:	490c      	ldr	r1, [pc, #48]	; (8008cf4 <Check_Recv_Status_fail+0xc4>)
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	4413      	add	r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	440b      	add	r3, r1
 8008cce:	3303      	adds	r3, #3
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	71fb      	strb	r3, [r7, #7]
 8008cda:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <Check_Recv_Status_fail+0xc8>)
 8008cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ce0:	79fa      	ldrb	r2, [r7, #7]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d3aa      	bcc.n	8008c3c <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 8008ce6:	bf00      	nop
 8008ce8:	bf00      	nop
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20000fcc 	.word	0x20000fcc
 8008cf4:	20001674 	.word	0x20001674
 8008cf8:	20000304 	.word	0x20000304
 8008cfc:	10624dd3 	.word	0x10624dd3
 8008d00:	080254b4 	.word	0x080254b4
 8008d04:	080254e8 	.word	0x080254e8
 8008d08:	08025518 	.word	0x08025518

08008d0c <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 8008d0c:	b590      	push	{r4, r7, lr}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	4a39      	ldr	r2, [pc, #228]	; (8008e0c <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8008d26:	4413      	add	r3, r2
 8008d28:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d168      	bne.n	8008e02 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 8008d30:	4b37      	ldr	r3, [pc, #220]	; (8008e10 <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d164      	bne.n	8008e02 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008d38:	79fa      	ldrb	r2, [r7, #7]
 8008d3a:	4936      	ldr	r1, [pc, #216]	; (8008e14 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	4413      	add	r3, r2
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	440b      	add	r3, r1
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f002 fb13 	bl	800b374 <bcdToDec>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	461a      	mov	r2, r3
 8008d52:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008d56:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8008d5a:	79fa      	ldrb	r2, [r7, #7]
 8008d5c:	492d      	ldr	r1, [pc, #180]	; (8008e14 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008d5e:	4613      	mov	r3, r2
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	4413      	add	r3, r2
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	440b      	add	r3, r1
 8008d68:	3301      	adds	r3, #1
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f002 fb01 	bl	800b374 <bcdToDec>
 8008d72:	4603      	mov	r3, r0
 8008d74:	461a      	mov	r2, r3
 8008d76:	4613      	mov	r3, r2
 8008d78:	011b      	lsls	r3, r3, #4
 8008d7a:	1a9b      	subs	r3, r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008d7e:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8008d80:	79fa      	ldrb	r2, [r7, #7]
 8008d82:	4924      	ldr	r1, [pc, #144]	; (8008e14 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008d84:	4613      	mov	r3, r2
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	4413      	add	r3, r2
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	440b      	add	r3, r1
 8008d8e:	3302      	adds	r3, #2
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f002 faee 	bl	800b374 <bcdToDec>
 8008d98:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8008d9a:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8008d9c:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008d9e:	613b      	str	r3, [r7, #16]

		Get_time();
 8008da0:	f002 fbe4 	bl	800b56c <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008da4:	4b1c      	ldr	r3, [pc, #112]	; (8008e18 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
 8008daa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008dae:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 8008db2:	4b19      	ldr	r3, [pc, #100]	; (8008e18 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008db4:	785b      	ldrb	r3, [r3, #1]
 8008db6:	4619      	mov	r1, r3
 8008db8:	460b      	mov	r3, r1
 8008dba:	011b      	lsls	r3, r3, #4
 8008dbc:	1a5b      	subs	r3, r3, r1
 8008dbe:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008dc0:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8008dc2:	4a15      	ldr	r2, [pc, #84]	; (8008e18 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008dc4:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 8008dc6:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8008dc8:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008dca:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	bfb8      	it	lt
 8008dd6:	425b      	neglt	r3, r3
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	dd12      	ble.n	8008e02 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8008de6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	4a07      	ldr	r2, [pc, #28]	; (8008e0c <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8008dee:	3366      	adds	r3, #102	; 0x66
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	461a      	mov	r2, r3
 8008df8:	4808      	ldr	r0, [pc, #32]	; (8008e1c <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 8008dfa:	f019 fdb9 	bl	8022970 <iprintf>
			Return_Value  = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd90      	pop	{r4, r7, pc}
 8008e0c:	20000304 	.word	0x20000304
 8008e10:	20000e6c 	.word	0x20000e6c
 8008e14:	20001188 	.word	0x20001188
 8008e18:	20002888 	.word	0x20002888
 8008e1c:	08025524 	.word	0x08025524

08008e20 <Check_All_Peers>:

void Check_All_Peers(void)
{
 8008e20:	b590      	push	{r4, r7, lr}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008e26:	2300      	movs	r3, #0
 8008e28:	71fb      	strb	r3, [r7, #7]
 8008e2a:	e045      	b.n	8008eb8 <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 8008e2c:	79fb      	ldrb	r3, [r7, #7]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe fde0 	bl	80079f4 <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8008e34:	79fa      	ldrb	r2, [r7, #7]
 8008e36:	4926      	ldr	r1, [pc, #152]	; (8008ed0 <Check_All_Peers+0xb0>)
 8008e38:	4613      	mov	r3, r2
 8008e3a:	005b      	lsls	r3, r3, #1
 8008e3c:	4413      	add	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	440b      	add	r3, r1
 8008e42:	3304      	adds	r3, #4
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f006 f80a 	bl	800ee60 <HAL_Elaps_Ticks>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	4920      	ldr	r1, [pc, #128]	; (8008ed4 <Check_All_Peers+0xb4>)
 8008e52:	338a      	adds	r3, #138	; 0x8a
 8008e54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d92a      	bls.n	8008eb2 <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 8008e5c:	79fa      	ldrb	r2, [r7, #7]
 8008e5e:	491c      	ldr	r1, [pc, #112]	; (8008ed0 <Check_All_Peers+0xb0>)
 8008e60:	4613      	mov	r3, r2
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	4413      	add	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	440b      	add	r3, r1
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d11f      	bne.n	8008eb2 <Check_All_Peers+0x92>
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	4a18      	ldr	r2, [pc, #96]	; (8008ed8 <Check_All_Peers+0xb8>)
 8008e76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e7a:	79fa      	ldrb	r2, [r7, #7]
 8008e7c:	4814      	ldr	r0, [pc, #80]	; (8008ed0 <Check_All_Peers+0xb0>)
 8008e7e:	4613      	mov	r3, r2
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4403      	add	r3, r0
 8008e88:	3304      	adds	r3, #4
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4299      	cmp	r1, r3
 8008e8e:	d010      	beq.n	8008eb2 <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = CLEAR;
 8008e90:	79fa      	ldrb	r2, [r7, #7]
 8008e92:	490f      	ldr	r1, [pc, #60]	; (8008ed0 <Check_All_Peers+0xb0>)
 8008e94:	4613      	mov	r3, r2
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	4413      	add	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	440b      	add	r3, r1
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 8008ea4:	79fc      	ldrb	r4, [r7, #7]
 8008ea6:	f00c fd65 	bl	8015974 <HAL_GetTick>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	4a0a      	ldr	r2, [pc, #40]	; (8008ed8 <Check_All_Peers+0xb8>)
 8008eae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	71fb      	strb	r3, [r7, #7]
 8008eb8:	4b06      	ldr	r3, [pc, #24]	; (8008ed4 <Check_All_Peers+0xb4>)
 8008eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ebe:	79fa      	ldrb	r2, [r7, #7]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d3b3      	bcc.n	8008e2c <Check_All_Peers+0xc>
			}
		}
	}
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd90      	pop	{r4, r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20001cc8 	.word	0x20001cc8
 8008ed4:	20000304 	.word	0x20000304
 8008ed8:	20002120 	.word	0x20002120

08008edc <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk = 0;

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008ee2:	4949      	ldr	r1, [pc, #292]	; (8009008 <Check_for_RelayMisMatch+0x12c>)
 8008ee4:	4849      	ldr	r0, [pc, #292]	; (800900c <Check_for_RelayMisMatch+0x130>)
 8008ee6:	f7f7 f9ab 	bl	8000240 <strcmp>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 8086 	beq.w	8008ffe <Check_for_RelayMisMatch+0x122>
	{
		return;
	}


	if(HAL_Elaps_Ticks(Check_Clk) > TWO_HUNDRED_MS )
 8008ef2:	4b47      	ldr	r3, [pc, #284]	; (8009010 <Check_for_RelayMisMatch+0x134>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f005 ffb2 	bl	800ee60 <HAL_Elaps_Ticks>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2bc8      	cmp	r3, #200	; 0xc8
 8008f00:	d97e      	bls.n	8009000 <Check_for_RelayMisMatch+0x124>
	{
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008f02:	2300      	movs	r3, #0
 8008f04:	71fb      	strb	r3, [r7, #7]
 8008f06:	e06e      	b.n	8008fe6 <Check_for_RelayMisMatch+0x10a>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (Link_Flag[Traverser] == CLEAR))
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	4a42      	ldr	r2, [pc, #264]	; (8009014 <Check_for_RelayMisMatch+0x138>)
 8008f0c:	5cd3      	ldrb	r3, [r2, r3]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d116      	bne.n	8008f40 <Check_for_RelayMisMatch+0x64>
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	4a40      	ldr	r2, [pc, #256]	; (8009018 <Check_for_RelayMisMatch+0x13c>)
 8008f16:	5cd3      	ldrb	r3, [r2, r3]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d111      	bne.n	8008f40 <Check_for_RelayMisMatch+0x64>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 8008f1c:	79fa      	ldrb	r2, [r7, #7]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4413      	add	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4a3d      	ldr	r2, [pc, #244]	; (800901c <Check_for_RelayMisMatch+0x140>)
 8008f28:	1898      	adds	r0, r3, r2
 8008f2a:	79fa      	ldrb	r2, [r7, #7]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4a3a      	ldr	r2, [pc, #232]	; (8009020 <Check_for_RelayMisMatch+0x144>)
 8008f36:	4413      	add	r3, r2
 8008f38:	2214      	movs	r2, #20
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	f019 fc08 	bl	8022750 <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 8008f40:	79fa      	ldrb	r2, [r7, #7]
 8008f42:	4936      	ldr	r1, [pc, #216]	; (800901c <Check_for_RelayMisMatch+0x140>)
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	440b      	add	r3, r1
 8008f4e:	3312      	adds	r3, #18
 8008f50:	8819      	ldrh	r1, [r3, #0]
 8008f52:	79fa      	ldrb	r2, [r7, #7]
 8008f54:	4832      	ldr	r0, [pc, #200]	; (8009020 <Check_for_RelayMisMatch+0x144>)
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4403      	add	r3, r0
 8008f60:	3312      	adds	r3, #18
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	4299      	cmp	r1, r3
 8008f66:	d034      	beq.n	8008fd2 <Check_for_RelayMisMatch+0xf6>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 8008f68:	79fb      	ldrb	r3, [r7, #7]
 8008f6a:	4a2e      	ldr	r2, [pc, #184]	; (8009024 <Check_for_RelayMisMatch+0x148>)
 8008f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f005 ff75 	bl	800ee60 <HAL_Elaps_Ticks>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f7c:	d32f      	bcc.n	8008fde <Check_for_RelayMisMatch+0x102>
				{
					continue;
				}
				else
				{
					printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008f7e:	79fb      	ldrb	r3, [r7, #7]
 8008f80:	4a29      	ldr	r2, [pc, #164]	; (8009028 <Check_for_RelayMisMatch+0x14c>)
 8008f82:	3366      	adds	r3, #102	; 0x66
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4827      	ldr	r0, [pc, #156]	; (800902c <Check_for_RelayMisMatch+0x150>)
 8008f8e:	f019 fcef 	bl	8022970 <iprintf>
					printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 8008f92:	79fa      	ldrb	r2, [r7, #7]
 8008f94:	4921      	ldr	r1, [pc, #132]	; (800901c <Check_for_RelayMisMatch+0x140>)
 8008f96:	4613      	mov	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	440b      	add	r3, r1
 8008fa0:	3312      	adds	r3, #18
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4822      	ldr	r0, [pc, #136]	; (8009030 <Check_for_RelayMisMatch+0x154>)
 8008fa8:	f019 fce2 	bl	8022970 <iprintf>
					printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 8008fac:	79fa      	ldrb	r2, [r7, #7]
 8008fae:	491c      	ldr	r1, [pc, #112]	; (8009020 <Check_for_RelayMisMatch+0x144>)
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	440b      	add	r3, r1
 8008fba:	3312      	adds	r3, #18
 8008fbc:	881b      	ldrh	r3, [r3, #0]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	481c      	ldr	r0, [pc, #112]	; (8009034 <Check_for_RelayMisMatch+0x158>)
 8008fc2:	f019 fcd5 	bl	8022970 <iprintf>

					MisMatchFlag[Traverser] = SET;
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	4a1b      	ldr	r2, [pc, #108]	; (8009038 <Check_for_RelayMisMatch+0x15c>)
 8008fca:	2101      	movs	r1, #1
 8008fcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008fd0:	e006      	b.n	8008fe0 <Check_for_RelayMisMatch+0x104>
					//					Tx_Peer_Index_To_SignalReq = 0xff;
				}
			}
			else
			{
				MisMatchFlag[Traverser] = CLEAR; /* If both Relay CRC is Matching MisMatch will be CLEAR */
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	4a18      	ldr	r2, [pc, #96]	; (8009038 <Check_for_RelayMisMatch+0x15c>)
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008fdc:	e000      	b.n	8008fe0 <Check_for_RelayMisMatch+0x104>
					continue;
 8008fde:	bf00      	nop
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	71fb      	strb	r3, [r7, #7]
 8008fe6:	4b10      	ldr	r3, [pc, #64]	; (8009028 <Check_for_RelayMisMatch+0x14c>)
 8008fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fec:	79fa      	ldrb	r2, [r7, #7]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d38a      	bcc.n	8008f08 <Check_for_RelayMisMatch+0x2c>
			}
		}
		Check_Clk = HAL_GetTick();
 8008ff2:	f00c fcbf 	bl	8015974 <HAL_GetTick>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	4a05      	ldr	r2, [pc, #20]	; (8009010 <Check_for_RelayMisMatch+0x134>)
 8008ffa:	6013      	str	r3, [r2, #0]
 8008ffc:	e000      	b.n	8009000 <Check_for_RelayMisMatch+0x124>
		return;
 8008ffe:	bf00      	nop
	}
}
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	0802411c 	.word	0x0802411c
 800900c:	20000305 	.word	0x20000305
 8009010:	20002148 	.word	0x20002148
 8009014:	20000f70 	.word	0x20000f70
 8009018:	20000f64 	.word	0x20000f64
 800901c:	20001e80 	.word	0x20001e80
 8009020:	20001f48 	.word	0x20001f48
 8009024:	20000ed8 	.word	0x20000ed8
 8009028:	20000304 	.word	0x20000304
 800902c:	08025564 	.word	0x08025564
 8009030:	08025570 	.word	0x08025570
 8009034:	08025580 	.word	0x08025580
 8009038:	20000ec4 	.word	0x20000ec4

0800903c <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8009046:	f00c fc95 	bl	8015974 <HAL_GetTick>
 800904a:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 800904c:	79fa      	ldrb	r2, [r7, #7]
 800904e:	492a      	ldr	r1, [pc, #168]	; (80090f8 <CheckOtherLinkStatus+0xbc>)
 8009050:	4613      	mov	r3, r2
 8009052:	005b      	lsls	r3, r3, #1
 8009054:	4413      	add	r3, r2
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	440b      	add	r3, r1
 800905a:	3302      	adds	r3, #2
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d11d      	bne.n	800909e <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	4925      	ldr	r1, [pc, #148]	; (80090fc <CheckOtherLinkStatus+0xc0>)
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 800906c:	79fa      	ldrb	r2, [r7, #7]
 800906e:	4924      	ldr	r1, [pc, #144]	; (8009100 <CheckOtherLinkStatus+0xc4>)
 8009070:	4613      	mov	r3, r2
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	440b      	add	r3, r1
 800907a:	3304      	adds	r3, #4
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 8009080:	79fa      	ldrb	r2, [r7, #7]
 8009082:	491f      	ldr	r1, [pc, #124]	; (8009100 <CheckOtherLinkStatus+0xc4>)
 8009084:	4613      	mov	r3, r2
 8009086:	005b      	lsls	r3, r3, #1
 8009088:	4413      	add	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	440b      	add	r3, r1
 800908e:	3301      	adds	r3, #1
 8009090:	2201      	movs	r2, #1
 8009092:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 8009094:	79fb      	ldrb	r3, [r7, #7]
 8009096:	4a1b      	ldr	r2, [pc, #108]	; (8009104 <CheckOtherLinkStatus+0xc8>)
 8009098:	2101      	movs	r1, #1
 800909a:	54d1      	strb	r1, [r2, r3]
 800909c:	e017      	b.n	80090ce <CheckOtherLinkStatus+0x92>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = CLEAR;
 800909e:	79fb      	ldrb	r3, [r7, #7]
 80090a0:	4a18      	ldr	r2, [pc, #96]	; (8009104 <CheckOtherLinkStatus+0xc8>)
 80090a2:	2100      	movs	r1, #0
 80090a4:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 80090a6:	79fa      	ldrb	r2, [r7, #7]
 80090a8:	4915      	ldr	r1, [pc, #84]	; (8009100 <CheckOtherLinkStatus+0xc4>)
 80090aa:	4613      	mov	r3, r2
 80090ac:	005b      	lsls	r3, r3, #1
 80090ae:	4413      	add	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	440b      	add	r3, r1
 80090b4:	3308      	adds	r3, #8
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = CLEAR;
 80090ba:	79fa      	ldrb	r2, [r7, #7]
 80090bc:	4910      	ldr	r1, [pc, #64]	; (8009100 <CheckOtherLinkStatus+0xc4>)
 80090be:	4613      	mov	r3, r2
 80090c0:	005b      	lsls	r3, r3, #1
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	440b      	add	r3, r1
 80090c8:	3301      	adds	r3, #1
 80090ca:	2200      	movs	r2, #0
 80090cc:	701a      	strb	r2, [r3, #0]
	}


	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 80090ce:	79fa      	ldrb	r2, [r7, #7]
 80090d0:	4909      	ldr	r1, [pc, #36]	; (80090f8 <CheckOtherLinkStatus+0xbc>)
 80090d2:	4613      	mov	r3, r2
 80090d4:	005b      	lsls	r3, r3, #1
 80090d6:	4413      	add	r3, r2
 80090d8:	00db      	lsls	r3, r3, #3
 80090da:	440b      	add	r3, r1
 80090dc:	3301      	adds	r3, #1
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d104      	bne.n	80090ee <CheckOtherLinkStatus+0xb2>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 80090e4:	79fb      	ldrb	r3, [r7, #7]
 80090e6:	4908      	ldr	r1, [pc, #32]	; (8009108 <CheckOtherLinkStatus+0xcc>)
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}


}
 80090ee:	bf00      	nop
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20001764 	.word	0x20001764
 80090fc:	20000f3c 	.word	0x20000f3c
 8009100:	20001d40 	.word	0x20001d40
 8009104:	20000f70 	.word	0x20000f70
 8009108:	20000e9c 	.word	0x20000e9c

0800910c <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 8009110:	4b1a      	ldr	r3, [pc, #104]	; (800917c <SendRelay2_Other+0x70>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4618      	mov	r0, r3
 8009116:	f005 fea3 	bl	800ee60 <HAL_Elaps_Ticks>
 800911a:	4603      	mov	r3, r0
 800911c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009120:	d92a      	bls.n	8009178 <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 8009122:	2214      	movs	r2, #20
 8009124:	2100      	movs	r1, #0
 8009126:	4816      	ldr	r0, [pc, #88]	; (8009180 <SendRelay2_Other+0x74>)
 8009128:	f019 fb3a 	bl	80227a0 <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 800912c:	4b15      	ldr	r3, [pc, #84]	; (8009184 <SendRelay2_Other+0x78>)
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4a13      	ldr	r2, [pc, #76]	; (8009188 <SendRelay2_Other+0x7c>)
 800913a:	4413      	add	r3, r2
 800913c:	2214      	movs	r2, #20
 800913e:	4619      	mov	r1, r3
 8009140:	480f      	ldr	r0, [pc, #60]	; (8009180 <SendRelay2_Other+0x74>)
 8009142:	f019 fb05 	bl	8022750 <memcpy>
		//			printf("I:%u ",Tx_Temp_Main_Relays_st.No_ofIps);
		//			printf("C:%04X\n",Tx_Temp_Main_Relays_st.RelayIPS_CRC);
		//		}

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8009146:	f240 2007 	movw	r0, #519	; 0x207
 800914a:	f006 fc3d 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

		++Traverser;
 800914e:	4b0d      	ldr	r3, [pc, #52]	; (8009184 <SendRelay2_Other+0x78>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3301      	adds	r3, #1
 8009154:	4a0b      	ldr	r2, [pc, #44]	; (8009184 <SendRelay2_Other+0x78>)
 8009156:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 8009158:	4b0c      	ldr	r3, [pc, #48]	; (800918c <SendRelay2_Other+0x80>)
 800915a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800915e:	461a      	mov	r2, r3
 8009160:	4b08      	ldr	r3, [pc, #32]	; (8009184 <SendRelay2_Other+0x78>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	429a      	cmp	r2, r3
 8009166:	d102      	bne.n	800916e <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 8009168:	4b06      	ldr	r3, [pc, #24]	; (8009184 <SendRelay2_Other+0x78>)
 800916a:	2200      	movs	r2, #0
 800916c:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 800916e:	f00c fc01 	bl	8015974 <HAL_GetTick>
 8009172:	4603      	mov	r3, r0
 8009174:	4a01      	ldr	r2, [pc, #4]	; (800917c <SendRelay2_Other+0x70>)
 8009176:	6013      	str	r3, [r2, #0]
	}
}
 8009178:	bf00      	nop
 800917a:	bd80      	pop	{r7, pc}
 800917c:	2000214c 	.word	0x2000214c
 8009180:	20002010 	.word	0x20002010
 8009184:	20002150 	.word	0x20002150
 8009188:	20001e80 	.word	0x20001e80
 800918c:	20000304 	.word	0x20000304

08009190 <Process_HitachiEI>:

void Process_HitachiEI(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8009194:	f013 fed0 	bl	801cf38 <MX_LWIP_Process>

		CheckEthernetStatus();
 8009198:	f000 f83c 	bl	8009214 <CheckEthernetStatus>

		HAL_IWDG_Refresh(&hiwdg);
 800919c:	481a      	ldr	r0, [pc, #104]	; (8009208 <Process_HitachiEI+0x78>)
 800919e:	f00f ff4f 	bl	8019040 <HAL_IWDG_Refresh>

		Feed_wdt();
 80091a2:	f00a faa3 	bl	80136ec <Feed_wdt>

		readCanToStructs();
 80091a6:	f007 f891 	bl	80102cc <readCanToStructs>

		Check_for_cmd();
 80091aa:	f7f7 fcd5 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 80091ae:	f7f7 fecd 	bl	8000f4c <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 80091b2:	f7f7 ff39 	bl	8001028 <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 80091b6:	f7fe fef5 	bl	8007fa4 <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 80091ba:	f7fe fe2d 	bl	8007e18 <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 80091be:	f7fe fe8f 	bl	8007ee0 <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 80091c2:	f7fe fdb3 	bl	8007d2c <CheckLinkEstablishTimeout>

		Check_All_Peers();
 80091c6:	f7ff fe2b 	bl	8008e20 <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 80091ca:	f7ff fce1 	bl	8008b90 <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 80091ce:	f7ff fc65 	bl	8008a9c <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 80091d2:	f7ff fd2d 	bl	8008c30 <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 80091d6:	f002 fa2b 	bl	800b630 <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 80091da:	f7ff fe7f 	bl	8008edc <Check_for_RelayMisMatch>

		SendRelay2_Other();
 80091de:	f7ff ff95 	bl	800910c <SendRelay2_Other>
		//Dats_Request_Flag = CheckDocklightForRqst(ISP_PORT);

		Print_BuildDat_Details();
 80091e2:	f00b fb95 	bl	8014910 <Print_BuildDat_Details>

		if(Dats_Request_Flag > 0)
 80091e6:	4b09      	ldr	r3, [pc, #36]	; (800920c <Process_HitachiEI+0x7c>)
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <Process_HitachiEI+0x66>
		{
			gucFlagUpdate = 3;
 80091ee:	4b08      	ldr	r3, [pc, #32]	; (8009210 <Process_HitachiEI+0x80>)
 80091f0:	2203      	movs	r2, #3
 80091f2:	701a      	strb	r2, [r3, #0]
			break;
 80091f4:	e002      	b.n	80091fc <Process_HitachiEI+0x6c>
		}

		Enable_UART_Interrupts();
 80091f6:	f00c f9ab 	bl	8015550 <Enable_UART_Interrupts>
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 80091fa:	e7cb      	b.n	8009194 <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 80091fc:	f00b fa86 	bl	801470c <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8009200:	4801      	ldr	r0, [pc, #4]	; (8009208 <Process_HitachiEI+0x78>)
 8009202:	f00f ff1d 	bl	8019040 <HAL_IWDG_Refresh>
		Data_Processing();
 8009206:	e7f9      	b.n	80091fc <Process_HitachiEI+0x6c>
 8009208:	20009d10 	.word	0x20009d10
 800920c:	20000644 	.word	0x20000644
 8009210:	20000a49 	.word	0x20000a49

08009214 <CheckEthernetStatus>:
	}
}


void CheckEthernetStatus(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
	int32_t LinkState = DP83848_GetLinkState(&DP83848);
 800921a:	4834      	ldr	r0, [pc, #208]	; (80092ec <CheckEthernetStatus+0xd8>)
 800921c:	f00c fac3 	bl	80157a6 <DP83848_GetLinkState>
 8009220:	6078      	str	r0, [r7, #4]
	static int32_t PreviousLinkState = 0;


	if(PreviousLinkState != LinkState)
 8009222:	4b33      	ldr	r3, [pc, #204]	; (80092f0 <CheckEthernetStatus+0xdc>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	429a      	cmp	r2, r3
 800922a:	d05a      	beq.n	80092e2 <CheckEthernetStatus+0xce>
	{
		PreviousLinkState = LinkState;
 800922c:	4a30      	ldr	r2, [pc, #192]	; (80092f0 <CheckEthernetStatus+0xdc>)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6013      	str	r3, [r2, #0]
		printf("Link State Changed:%ld\n",LinkState);
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	482f      	ldr	r0, [pc, #188]	; (80092f4 <CheckEthernetStatus+0xe0>)
 8009236:	f019 fb9b 	bl	8022970 <iprintf>
		switch(LinkState)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	3305      	adds	r3, #5
 800923e:	2b0b      	cmp	r3, #11
 8009240:	d84a      	bhi.n	80092d8 <CheckEthernetStatus+0xc4>
 8009242:	a201      	add	r2, pc, #4	; (adr r2, 8009248 <CheckEthernetStatus+0x34>)
 8009244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009248:	08009279 	.word	0x08009279
 800924c:	08009281 	.word	0x08009281
 8009250:	08009289 	.word	0x08009289
 8009254:	08009291 	.word	0x08009291
 8009258:	08009299 	.word	0x08009299
 800925c:	080092a1 	.word	0x080092a1
 8009260:	080092a9 	.word	0x080092a9
 8009264:	080092b1 	.word	0x080092b1
 8009268:	080092b9 	.word	0x080092b9
 800926c:	080092c1 	.word	0x080092c1
 8009270:	080092c9 	.word	0x080092c9
 8009274:	080092d1 	.word	0x080092d1
		{
		case DP83848_STATUS_READ_ERROR:
			printf("CurentLinkState:DP83848_STATUS_READ_ERROR\n");
 8009278:	481f      	ldr	r0, [pc, #124]	; (80092f8 <CheckEthernetStatus+0xe4>)
 800927a:	f019 fc15 	bl	8022aa8 <puts>
			break;
 800927e:	e031      	b.n	80092e4 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_WRITE_ERROR:
			printf("CurentLinkState:DP83848_STATUS_WRITE_ERROR\n");
 8009280:	481e      	ldr	r0, [pc, #120]	; (80092fc <CheckEthernetStatus+0xe8>)
 8009282:	f019 fc11 	bl	8022aa8 <puts>
			break;
 8009286:	e02d      	b.n	80092e4 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_ADDRESS_ERROR:
			printf("CurentLinkState:DP83848_STATUS_ADDRESS_ERROR\n");
 8009288:	481d      	ldr	r0, [pc, #116]	; (8009300 <CheckEthernetStatus+0xec>)
 800928a:	f019 fc0d 	bl	8022aa8 <puts>
			break;
 800928e:	e029      	b.n	80092e4 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_RESET_TIMEOUT:
			printf("CuurentLinkState:DP83848_STATUS_RESET_TIMEOUT\n");
 8009290:	481c      	ldr	r0, [pc, #112]	; (8009304 <CheckEthernetStatus+0xf0>)
 8009292:	f019 fc09 	bl	8022aa8 <puts>
			break;
 8009296:	e025      	b.n	80092e4 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_ERROR:
			printf("CuurentLinkState:DP83848_STATUS_ERROR\n");
 8009298:	481b      	ldr	r0, [pc, #108]	; (8009308 <CheckEthernetStatus+0xf4>)
 800929a:	f019 fc05 	bl	8022aa8 <puts>
			break;
 800929e:	e021      	b.n	80092e4 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_OK:
			printf("CuurentLinkState:DP83848_STATUS_OK\n");
 80092a0:	481a      	ldr	r0, [pc, #104]	; (800930c <CheckEthernetStatus+0xf8>)
 80092a2:	f019 fc01 	bl	8022aa8 <puts>
			break;
 80092a6:	e01d      	b.n	80092e4 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_LINK_DOWN:
			printf("CuurentLinkState:DP83848_STATUS_LINK_DOWN\n");
 80092a8:	4819      	ldr	r0, [pc, #100]	; (8009310 <CheckEthernetStatus+0xfc>)
 80092aa:	f019 fbfd 	bl	8022aa8 <puts>
			break;
 80092ae:	e019      	b.n	80092e4 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_100MBITS_FULLDUPLEX:
			printf("CuurentLinkState:DP83848_STATUS_100MBITS_FULLDUPLEX\n");
 80092b0:	4818      	ldr	r0, [pc, #96]	; (8009314 <CheckEthernetStatus+0x100>)
 80092b2:	f019 fbf9 	bl	8022aa8 <puts>
			break;
 80092b6:	e015      	b.n	80092e4 <CheckEthernetStatus+0xd0>
		case DP83848_STATUS_100MBITS_HALFDUPLEX:
			printf("CuurentLinkState:DP83848_STATUS_100MBITS_HALFDUPLEX\n");
 80092b8:	4817      	ldr	r0, [pc, #92]	; (8009318 <CheckEthernetStatus+0x104>)
 80092ba:	f019 fbf5 	bl	8022aa8 <puts>
			break;
 80092be:	e011      	b.n	80092e4 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_10MBITS_FULLDUPLEX:
			printf("CuurentLinkState:DP83848_STATUS_10MBITS_FULLDUPLEX\n");
 80092c0:	4816      	ldr	r0, [pc, #88]	; (800931c <CheckEthernetStatus+0x108>)
 80092c2:	f019 fbf1 	bl	8022aa8 <puts>
			break;
 80092c6:	e00d      	b.n	80092e4 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_10MBITS_HALFDUPLEX:
			printf("CuurentLinkState:DP83848_STATUS_10MBITS_HALFDUPLEX\n");
 80092c8:	4815      	ldr	r0, [pc, #84]	; (8009320 <CheckEthernetStatus+0x10c>)
 80092ca:	f019 fbed 	bl	8022aa8 <puts>
			break;
 80092ce:	e009      	b.n	80092e4 <CheckEthernetStatus+0xd0>

		case DP83848_STATUS_AUTONEGO_NOTDONE:
			printf("CuurentLinkState:DP83848_STATUS_AUTONEGO_NOTDONE\n");
 80092d0:	4814      	ldr	r0, [pc, #80]	; (8009324 <CheckEthernetStatus+0x110>)
 80092d2:	f019 fbe9 	bl	8022aa8 <puts>
			break;
 80092d6:	e005      	b.n	80092e4 <CheckEthernetStatus+0xd0>

		default:
			printf("UNKNOWN Link State with Value:%ld\n",LinkState);
 80092d8:	6879      	ldr	r1, [r7, #4]
 80092da:	4813      	ldr	r0, [pc, #76]	; (8009328 <CheckEthernetStatus+0x114>)
 80092dc:	f019 fb48 	bl	8022970 <iprintf>

		}

	}

}
 80092e0:	e000      	b.n	80092e4 <CheckEthernetStatus+0xd0>
	}
 80092e2:	bf00      	nop
}
 80092e4:	bf00      	nop
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	200107e4 	.word	0x200107e4
 80092f0:	20002154 	.word	0x20002154
 80092f4:	08025590 	.word	0x08025590
 80092f8:	080255a8 	.word	0x080255a8
 80092fc:	080255d4 	.word	0x080255d4
 8009300:	08025600 	.word	0x08025600
 8009304:	08025630 	.word	0x08025630
 8009308:	08025660 	.word	0x08025660
 800930c:	08025688 	.word	0x08025688
 8009310:	080256ac 	.word	0x080256ac
 8009314:	080256d8 	.word	0x080256d8
 8009318:	0802570c 	.word	0x0802570c
 800931c:	08025740 	.word	0x08025740
 8009320:	08025774 	.word	0x08025774
 8009324:	080257a8 	.word	0x080257a8
 8009328:	080257dc 	.word	0x080257dc

0800932c <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8009332:	4b26      	ldr	r3, [pc, #152]	; (80093cc <reset_cause_get+0xa0>)
 8009334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009336:	2b00      	cmp	r3, #0
 8009338:	da02      	bge.n	8009340 <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 800933a:	2301      	movs	r3, #1
 800933c:	71fb      	strb	r3, [r7, #7]
 800933e:	e037      	b.n	80093b0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8009340:	4b22      	ldr	r3, [pc, #136]	; (80093cc <reset_cause_get+0xa0>)
 8009342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009344:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800934c:	2302      	movs	r3, #2
 800934e:	71fb      	strb	r3, [r7, #7]
 8009350:	e02e      	b.n	80093b0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8009352:	4b1e      	ldr	r3, [pc, #120]	; (80093cc <reset_cause_get+0xa0>)
 8009354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800935e:	2303      	movs	r3, #3
 8009360:	71fb      	strb	r3, [r7, #7]
 8009362:	e025      	b.n	80093b0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8009364:	4b19      	ldr	r3, [pc, #100]	; (80093cc <reset_cause_get+0xa0>)
 8009366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 8009370:	2304      	movs	r3, #4
 8009372:	71fb      	strb	r3, [r7, #7]
 8009374:	e01c      	b.n	80093b0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8009376:	4b15      	ldr	r3, [pc, #84]	; (80093cc <reset_cause_get+0xa0>)
 8009378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800937a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d002      	beq.n	8009388 <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8009382:	2305      	movs	r3, #5
 8009384:	71fb      	strb	r3, [r7, #7]
 8009386:	e013      	b.n	80093b0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8009388:	4b10      	ldr	r3, [pc, #64]	; (80093cc <reset_cause_get+0xa0>)
 800938a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800938c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8009394:	2306      	movs	r3, #6
 8009396:	71fb      	strb	r3, [r7, #7]
 8009398:	e00a      	b.n	80093b0 <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800939a:	4b0c      	ldr	r3, [pc, #48]	; (80093cc <reset_cause_get+0xa0>)
 800939c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800939e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d002      	beq.n	80093ac <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 80093a6:	2307      	movs	r3, #7
 80093a8:	71fb      	strb	r3, [r7, #7]
 80093aa:	e001      	b.n	80093b0 <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 80093ac:	2300      	movs	r3, #0
 80093ae:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 80093b0:	4b06      	ldr	r3, [pc, #24]	; (80093cc <reset_cause_get+0xa0>)
 80093b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093b4:	4a05      	ldr	r2, [pc, #20]	; (80093cc <reset_cause_get+0xa0>)
 80093b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093ba:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 80093bc:	79fb      	ldrb	r3, [r7, #7]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	40023800 	.word	0x40023800

080093d0 <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	4603      	mov	r3, r0
 80093d8:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 80093da:	4b1c      	ldr	r3, [pc, #112]	; (800944c <reset_cause_get_name+0x7c>)
 80093dc:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 80093de:	79fb      	ldrb	r3, [r7, #7]
 80093e0:	2b07      	cmp	r3, #7
 80093e2:	d82b      	bhi.n	800943c <reset_cause_get_name+0x6c>
 80093e4:	a201      	add	r2, pc, #4	; (adr r2, 80093ec <reset_cause_get_name+0x1c>)
 80093e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ea:	bf00      	nop
 80093ec:	0800940d 	.word	0x0800940d
 80093f0:	08009413 	.word	0x08009413
 80093f4:	08009419 	.word	0x08009419
 80093f8:	0800941f 	.word	0x0800941f
 80093fc:	08009425 	.word	0x08009425
 8009400:	0800942b 	.word	0x0800942b
 8009404:	08009431 	.word	0x08009431
 8009408:	08009437 	.word	0x08009437
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 800940c:	4b10      	ldr	r3, [pc, #64]	; (8009450 <reset_cause_get_name+0x80>)
 800940e:	60fb      	str	r3, [r7, #12]
            break;
 8009410:	e014      	b.n	800943c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 8009412:	4b10      	ldr	r3, [pc, #64]	; (8009454 <reset_cause_get_name+0x84>)
 8009414:	60fb      	str	r3, [r7, #12]
            break;
 8009416:	e011      	b.n	800943c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8009418:	4b0f      	ldr	r3, [pc, #60]	; (8009458 <reset_cause_get_name+0x88>)
 800941a:	60fb      	str	r3, [r7, #12]
            break;
 800941c:	e00e      	b.n	800943c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800941e:	4b0f      	ldr	r3, [pc, #60]	; (800945c <reset_cause_get_name+0x8c>)
 8009420:	60fb      	str	r3, [r7, #12]
            break;
 8009422:	e00b      	b.n	800943c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 8009424:	4b0e      	ldr	r3, [pc, #56]	; (8009460 <reset_cause_get_name+0x90>)
 8009426:	60fb      	str	r3, [r7, #12]
            break;
 8009428:	e008      	b.n	800943c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 800942a:	4b0e      	ldr	r3, [pc, #56]	; (8009464 <reset_cause_get_name+0x94>)
 800942c:	60fb      	str	r3, [r7, #12]
            break;
 800942e:	e005      	b.n	800943c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8009430:	4b0d      	ldr	r3, [pc, #52]	; (8009468 <reset_cause_get_name+0x98>)
 8009432:	60fb      	str	r3, [r7, #12]
            break;
 8009434:	e002      	b.n	800943c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 8009436:	4b0d      	ldr	r3, [pc, #52]	; (800946c <reset_cause_get_name+0x9c>)
 8009438:	60fb      	str	r3, [r7, #12]
            break;
 800943a:	bf00      	nop
    }

    return reset_cause_name;
 800943c:	68fb      	ldr	r3, [r7, #12]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	08025800 	.word	0x08025800
 8009450:	08025804 	.word	0x08025804
 8009454:	0802580c 	.word	0x0802580c
 8009458:	0802581c 	.word	0x0802581c
 800945c:	08025834 	.word	0x08025834
 8009460:	08025850 	.word	0x08025850
 8009464:	08025860 	.word	0x08025860
 8009468:	08025890 	.word	0x08025890
 800946c:	080258ac 	.word	0x080258ac

08009470 <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 8009474:	f00b fa4c 	bl	8014910 <Print_BuildDat_Details>

		readCanToStructs();
 8009478:	f006 ff28 	bl	80102cc <readCanToStructs>

		Feed_wdt();
 800947c:	f00a f936 	bl	80136ec <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 8009480:	480f      	ldr	r0, [pc, #60]	; (80094c0 <Process_Medha_EI+0x50>)
 8009482:	f00f fddd 	bl	8019040 <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 8009486:	f000 f91d 	bl	80096c4 <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 800948a:	f000 fed3 	bl	800a234 <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 800948e:	f000 ff39 	bl	800a304 <Process_Clear_Relays>

		Send_Data_to_Other();
 8009492:	f000 ffcf 	bl	800a434 <Send_Data_to_Other>

		Process_Data_from_Other();
 8009496:	f001 f827 	bl	800a4e8 <Process_Data_from_Other>

		CheckforMedhaCMD();
 800949a:	f001 f9ed 	bl	800a878 <CheckforMedhaCMD>


		if(Dats_Request_Flag > 0)
 800949e:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <Process_Medha_EI+0x54>)
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <Process_Medha_EI+0x3e>
		{
			gucFlagUpdate = 3;
 80094a6:	4b08      	ldr	r3, [pc, #32]	; (80094c8 <Process_Medha_EI+0x58>)
 80094a8:	2203      	movs	r2, #3
 80094aa:	701a      	strb	r2, [r3, #0]
			break;
 80094ac:	e002      	b.n	80094b4 <Process_Medha_EI+0x44>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 80094ae:	f00c f84f 	bl	8015550 <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 80094b2:	e7df      	b.n	8009474 <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 80094b4:	4802      	ldr	r0, [pc, #8]	; (80094c0 <Process_Medha_EI+0x50>)
 80094b6:	f00f fdc3 	bl	8019040 <HAL_IWDG_Refresh>
		Data_Processing();
 80094ba:	f00b f927 	bl	801470c <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 80094be:	e7f9      	b.n	80094b4 <Process_Medha_EI+0x44>
 80094c0:	20009d10 	.word	0x20009d10
 80094c4:	20000644 	.word	0x20000644
 80094c8:	20000a49 	.word	0x20000a49

080094cc <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	4603      	mov	r3, r0
 80094d4:	6039      	str	r1, [r7, #0]
 80094d6:	71fb      	strb	r3, [r7, #7]
 80094d8:	4613      	mov	r3, r2
 80094da:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 80094dc:	2300      	movs	r3, #0
 80094de:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 80094e0:	2300      	movs	r3, #0
 80094e2:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 80094e4:	e0d0      	b.n	8009688 <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f00b ff1b 	bl	8015324 <Com_Get_Byte>
 80094ee:	4603      	mov	r3, r0
 80094f0:	461a      	mov	r2, r3
 80094f2:	4b6c      	ldr	r3, [pc, #432]	; (80096a4 <Get_Medha_EI_Message+0x1d8>)
 80094f4:	701a      	strb	r2, [r3, #0]
		//printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 80094f6:	4b6c      	ldr	r3, [pc, #432]	; (80096a8 <Get_Medha_EI_Message+0x1dc>)
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	3b01      	subs	r3, #1
 80094fc:	2b04      	cmp	r3, #4
 80094fe:	f200 80c2 	bhi.w	8009686 <Get_Medha_EI_Message+0x1ba>
 8009502:	a201      	add	r2, pc, #4	; (adr r2, 8009508 <Get_Medha_EI_Message+0x3c>)
 8009504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009508:	0800951d 	.word	0x0800951d
 800950c:	08009535 	.word	0x08009535
 8009510:	08009687 	.word	0x08009687
 8009514:	08009581 	.word	0x08009581
 8009518:	080095d9 	.word	0x080095d9
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 800951c:	4b61      	ldr	r3, [pc, #388]	; (80096a4 <Get_Medha_EI_Message+0x1d8>)
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	2b53      	cmp	r3, #83	; 0x53
 8009522:	f040 80b1 	bne.w	8009688 <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 8009526:	4b61      	ldr	r3, [pc, #388]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 8009528:	2201      	movs	r2, #1
 800952a:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800952c:	4b5e      	ldr	r3, [pc, #376]	; (80096a8 <Get_Medha_EI_Message+0x1dc>)
 800952e:	2202      	movs	r2, #2
 8009530:	701a      	strb	r2, [r3, #0]
			}
			break;
 8009532:	e0a9      	b.n	8009688 <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 8009534:	4b5d      	ldr	r3, [pc, #372]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	2b08      	cmp	r3, #8
 800953a:	d111      	bne.n	8009560 <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 800953c:	4b5b      	ldr	r3, [pc, #364]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	461a      	mov	r2, r3
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	4413      	add	r3, r2
 8009546:	4a57      	ldr	r2, [pc, #348]	; (80096a4 <Get_Medha_EI_Message+0x1d8>)
 8009548:	7812      	ldrb	r2, [r2, #0]
 800954a:	701a      	strb	r2, [r3, #0]
					i++;
 800954c:	4b57      	ldr	r3, [pc, #348]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 800954e:	881b      	ldrh	r3, [r3, #0]
 8009550:	3301      	adds	r3, #1
 8009552:	b29a      	uxth	r2, r3
 8009554:	4b55      	ldr	r3, [pc, #340]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 8009556:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 8009558:	4b53      	ldr	r3, [pc, #332]	; (80096a8 <Get_Medha_EI_Message+0x1dc>)
 800955a:	2204      	movs	r2, #4
 800955c:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 800955e:	e00d      	b.n	800957c <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 8009560:	4b52      	ldr	r3, [pc, #328]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	461a      	mov	r2, r3
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	4413      	add	r3, r2
 800956a:	4a4e      	ldr	r2, [pc, #312]	; (80096a4 <Get_Medha_EI_Message+0x1d8>)
 800956c:	7812      	ldrb	r2, [r2, #0]
 800956e:	701a      	strb	r2, [r3, #0]
					i++;
 8009570:	4b4e      	ldr	r3, [pc, #312]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	3301      	adds	r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	4b4c      	ldr	r3, [pc, #304]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 800957a:	801a      	strh	r2, [r3, #0]
				break;
 800957c:	bf00      	nop
			}
			break;
 800957e:	e083      	b.n	8009688 <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 8009580:	4b4a      	ldr	r3, [pc, #296]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	3b02      	subs	r3, #2
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	4413      	add	r3, r2
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	b29b      	uxth	r3, r3
 800958e:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 8009590:	4b47      	ldr	r3, [pc, #284]	; (80096b0 <Get_Medha_EI_Message+0x1e4>)
 8009592:	2200      	movs	r2, #0
 8009594:	801a      	strh	r2, [r3, #0]
				j=1;
 8009596:	4b47      	ldr	r3, [pc, #284]	; (80096b4 <Get_Medha_EI_Message+0x1e8>)
 8009598:	2201      	movs	r2, #1
 800959a:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 800959c:	4b43      	ldr	r3, [pc, #268]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	4413      	add	r3, r2
 80095a6:	4a3f      	ldr	r2, [pc, #252]	; (80096a4 <Get_Medha_EI_Message+0x1d8>)
 80095a8:	7812      	ldrb	r2, [r2, #0]
 80095aa:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 80095ac:	4b40      	ldr	r3, [pc, #256]	; (80096b0 <Get_Medha_EI_Message+0x1e4>)
 80095ae:	881b      	ldrh	r3, [r3, #0]
 80095b0:	3301      	adds	r3, #1
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	4b3e      	ldr	r3, [pc, #248]	; (80096b0 <Get_Medha_EI_Message+0x1e4>)
 80095b6:	801a      	strh	r2, [r3, #0]
				i++;
 80095b8:	4b3c      	ldr	r3, [pc, #240]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	3301      	adds	r3, #1
 80095be:	b29a      	uxth	r2, r3
 80095c0:	4b3a      	ldr	r3, [pc, #232]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 80095c2:	801a      	strh	r2, [r3, #0]
				j++;
 80095c4:	4b3b      	ldr	r3, [pc, #236]	; (80096b4 <Get_Medha_EI_Message+0x1e8>)
 80095c6:	881b      	ldrh	r3, [r3, #0]
 80095c8:	3301      	adds	r3, #1
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	4b39      	ldr	r3, [pc, #228]	; (80096b4 <Get_Medha_EI_Message+0x1e8>)
 80095ce:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 80095d0:	4b35      	ldr	r3, [pc, #212]	; (80096a8 <Get_Medha_EI_Message+0x1dc>)
 80095d2:	2205      	movs	r2, #5
 80095d4:	701a      	strb	r2, [r3, #0]
				break;
 80095d6:	e057      	b.n	8009688 <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 80095d8:	4b34      	ldr	r3, [pc, #208]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	4413      	add	r3, r2
 80095e2:	4a30      	ldr	r2, [pc, #192]	; (80096a4 <Get_Medha_EI_Message+0x1d8>)
 80095e4:	7812      	ldrb	r2, [r2, #0]
 80095e6:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 80095e8:	89ba      	ldrh	r2, [r7, #12]
 80095ea:	4b31      	ldr	r3, [pc, #196]	; (80096b0 <Get_Medha_EI_Message+0x1e4>)
 80095ec:	881b      	ldrh	r3, [r3, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d940      	bls.n	8009674 <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 80095f2:	4b2f      	ldr	r3, [pc, #188]	; (80096b0 <Get_Medha_EI_Message+0x1e4>)
 80095f4:	881b      	ldrh	r3, [r3, #0]
 80095f6:	3301      	adds	r3, #1
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	4b2d      	ldr	r3, [pc, #180]	; (80096b0 <Get_Medha_EI_Message+0x1e4>)
 80095fc:	801a      	strh	r2, [r3, #0]
					i++;
 80095fe:	4b2b      	ldr	r3, [pc, #172]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	3301      	adds	r3, #1
 8009604:	b29a      	uxth	r2, r3
 8009606:	4b29      	ldr	r3, [pc, #164]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 8009608:	801a      	strh	r2, [r3, #0]
					j++;
 800960a:	4b2a      	ldr	r3, [pc, #168]	; (80096b4 <Get_Medha_EI_Message+0x1e8>)
 800960c:	881b      	ldrh	r3, [r3, #0]
 800960e:	3301      	adds	r3, #1
 8009610:	b29a      	uxth	r2, r3
 8009612:	4b28      	ldr	r3, [pc, #160]	; (80096b4 <Get_Medha_EI_Message+0x1e8>)
 8009614:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 8009616:	89ba      	ldrh	r2, [r7, #12]
 8009618:	4b25      	ldr	r3, [pc, #148]	; (80096b0 <Get_Medha_EI_Message+0x1e4>)
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	429a      	cmp	r2, r3
 800961e:	d133      	bne.n	8009688 <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 8009620:	4b22      	ldr	r3, [pc, #136]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	3b04      	subs	r3, #4
 8009626:	b29a      	uxth	r2, r3
 8009628:	4b23      	ldr	r3, [pc, #140]	; (80096b8 <Get_Medha_EI_Message+0x1ec>)
 800962a:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 800962c:	4b22      	ldr	r3, [pc, #136]	; (80096b8 <Get_Medha_EI_Message+0x1ec>)
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	81fb      	strh	r3, [r7, #14]
						i = 0;
 8009632:	4b1e      	ldr	r3, [pc, #120]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 8009634:	2200      	movs	r2, #0
 8009636:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 8009638:	4b1b      	ldr	r3, [pc, #108]	; (80096a8 <Get_Medha_EI_Message+0x1dc>)
 800963a:	2201      	movs	r2, #1
 800963c:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 8009642:	89fb      	ldrh	r3, [r7, #14]
 8009644:	2b04      	cmp	r3, #4
 8009646:	d804      	bhi.n	8009652 <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 8009648:	481c      	ldr	r0, [pc, #112]	; (80096bc <Get_Medha_EI_Message+0x1f0>)
 800964a:	f019 fa2d 	bl	8022aa8 <puts>
							return ZERO;
 800964e:	2300      	movs	r3, #0
 8009650:	e023      	b.n	800969a <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 8009652:	4b19      	ldr	r3, [pc, #100]	; (80096b8 <Get_Medha_EI_Message+0x1ec>)
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	2000      	movs	r0, #0
 800965c:	f001 fbce 	bl	800adfc <CheckCRC32>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 8009666:	89fb      	ldrh	r3, [r7, #14]
 8009668:	e017      	b.n	800969a <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 800966a:	4815      	ldr	r0, [pc, #84]	; (80096c0 <Get_Medha_EI_Message+0x1f4>)
 800966c:	f019 fa1c 	bl	8022aa8 <puts>
							return ZERO;
 8009670:	2300      	movs	r3, #0
 8009672:	e012      	b.n	800969a <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 8009674:	4b0d      	ldr	r3, [pc, #52]	; (80096ac <Get_Medha_EI_Message+0x1e0>)
 8009676:	2200      	movs	r2, #0
 8009678:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 800967a:	4b0b      	ldr	r3, [pc, #44]	; (80096a8 <Get_Medha_EI_Message+0x1dc>)
 800967c:	2201      	movs	r2, #1
 800967e:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 8009680:	2300      	movs	r3, #0
 8009682:	81bb      	strh	r3, [r7, #12]
				}
				break;
 8009684:	e000      	b.n	8009688 <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 8009686:	bf00      	nop
	while(Com_DataReady(ComPort))
 8009688:	79fb      	ldrb	r3, [r7, #7]
 800968a:	4618      	mov	r0, r3
 800968c:	f00b fe0a 	bl	80152a4 <Com_DataReady>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	f47f af27 	bne.w	80094e6 <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20002854 	.word	0x20002854
 80096a8:	20000116 	.word	0x20000116
 80096ac:	20002856 	.word	0x20002856
 80096b0:	20002858 	.word	0x20002858
 80096b4:	2000285a 	.word	0x2000285a
 80096b8:	2000285c 	.word	0x2000285c
 80096bc:	080258c4 	.word	0x080258c4
 80096c0:	080258cc 	.word	0x080258cc

080096c4 <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 80096c4:	b5b0      	push	{r4, r5, r7, lr}
 80096c6:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 80096ca:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 80096cc:	2300      	movs	r3, #0
 80096ce:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 80096d2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80096d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80096da:	2200      	movs	r2, #0
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	3304      	adds	r3, #4
 80096e0:	f44f 7294 	mov.w	r2, #296	; 0x128
 80096e4:	2100      	movs	r1, #0
 80096e6:	4618      	mov	r0, r3
 80096e8:	f019 f85a 	bl	80227a0 <memset>
	uint16_t NoOfInputs 		= 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 80096f8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80096fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]
 8009704:	3304      	adds	r3, #4
 8009706:	227c      	movs	r2, #124	; 0x7c
 8009708:	2100      	movs	r1, #0
 800970a:	4618      	mov	r0, r3
 800970c:	f019 f848 	bl	80227a0 <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 8009710:	2300      	movs	r3, #0
 8009712:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 8009716:	2300      	movs	r3, #0
 8009718:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 800971c:	4bbf      	ldr	r3, [pc, #764]	; (8009a1c <Medha_EI_Analyser+0x358>)
 800971e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009722:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8009726:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800972a:	4618      	mov	r0, r3
 800972c:	f7ff fece 	bl	80094cc <Get_Medha_EI_Message>
 8009730:	4603      	mov	r3, r0
 8009732:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 8009736:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800973a:	2b05      	cmp	r3, #5
 800973c:	d934      	bls.n	80097a8 <Medha_EI_Analyser+0xe4>
	{
		printf("Raw Data:\n");
 800973e:	48b8      	ldr	r0, [pc, #736]	; (8009a20 <Medha_EI_Analyser+0x35c>)
 8009740:	f019 f9b2 	bl	8022aa8 <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 8009744:	2300      	movs	r3, #0
 8009746:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800974a:	e024      	b.n	8009796 <Medha_EI_Analyser+0xd2>
		{

			if((i!=0) && ((i%10)==0))
 800974c:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009750:	2b00      	cmp	r3, #0
 8009752:	d010      	beq.n	8009776 <Medha_EI_Analyser+0xb2>
 8009754:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009758:	4bb2      	ldr	r3, [pc, #712]	; (8009a24 <Medha_EI_Analyser+0x360>)
 800975a:	fba3 1302 	umull	r1, r3, r3, r2
 800975e:	08d9      	lsrs	r1, r3, #3
 8009760:	460b      	mov	r3, r1
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	440b      	add	r3, r1
 8009766:	005b      	lsls	r3, r3, #1
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	b29b      	uxth	r3, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	d102      	bne.n	8009776 <Medha_EI_Analyser+0xb2>
			{
				printf("\n");
 8009770:	200a      	movs	r0, #10
 8009772:	f019 f915 	bl	80229a0 <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 8009776:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800977a:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800977e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8009782:	5cd3      	ldrb	r3, [r2, r3]
 8009784:	4619      	mov	r1, r3
 8009786:	48a8      	ldr	r0, [pc, #672]	; (8009a28 <Medha_EI_Analyser+0x364>)
 8009788:	f019 f8f2 	bl	8022970 <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800978c:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009790:	3301      	adds	r3, #1
 8009792:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 8009796:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 800979a:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800979e:	429a      	cmp	r2, r3
 80097a0:	d3d4      	bcc.n	800974c <Medha_EI_Analyser+0x88>
		}
		printf("\n");
 80097a2:	200a      	movs	r0, #10
 80097a4:	f019 f8fc 	bl	80229a0 <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 80097a8:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f000 83ba 	beq.w	8009f26 <Medha_EI_Analyser+0x862>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 80097b2:	463b      	mov	r3, r7
 80097b4:	f44f 7292 	mov.w	r2, #292	; 0x124
 80097b8:	2100      	movs	r1, #0
 80097ba:	4618      	mov	r0, r3
 80097bc:	f018 fff0 	bl	80227a0 <memset>

		BYTEINIT(0);
 80097c0:	2300      	movs	r3, #0
 80097c2:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 80097c6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097ca:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80097ce:	4413      	add	r3, r2
 80097d0:	781a      	ldrb	r2, [r3, #0]
 80097d2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80097d6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097da:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 80097dc:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097e0:	3301      	adds	r3, #1
 80097e2:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 80097e6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097ea:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80097ee:	4413      	add	r3, r2
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80097f8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097fc:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 80097fe:	4b87      	ldr	r3, [pc, #540]	; (8009a1c <Medha_EI_Analyser+0x358>)
 8009800:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 8009804:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009808:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800980c:	889b      	ldrh	r3, [r3, #4]
 800980e:	429a      	cmp	r2, r3
 8009810:	d010      	beq.n	8009834 <Medha_EI_Analyser+0x170>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 8009812:	4886      	ldr	r0, [pc, #536]	; (8009a2c <Medha_EI_Analyser+0x368>)
 8009814:	f019 f948 	bl	8022aa8 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 8009818:	4b80      	ldr	r3, [pc, #512]	; (8009a1c <Medha_EI_Analyser+0x358>)
 800981a:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800981e:	4619      	mov	r1, r3
 8009820:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009824:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009828:	889b      	ldrh	r3, [r3, #4]
 800982a:	461a      	mov	r2, r3
 800982c:	4880      	ldr	r0, [pc, #512]	; (8009a30 <Medha_EI_Analyser+0x36c>)
 800982e:	f019 f89f 	bl	8022970 <iprintf>
			return;
 8009832:	e37b      	b.n	8009f2c <Medha_EI_Analyser+0x868>
		}
		BYTEINC(2);
 8009834:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009838:	3302      	adds	r3, #2
 800983a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 800983e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009842:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009846:	4413      	add	r3, r2
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	b29a      	uxth	r2, r3
 800984c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009850:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009854:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 8009856:	4b71      	ldr	r3, [pc, #452]	; (8009a1c <Medha_EI_Analyser+0x358>)
 8009858:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 800985c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009860:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009864:	885b      	ldrh	r3, [r3, #2]
 8009866:	429a      	cmp	r2, r3
 8009868:	d010      	beq.n	800988c <Medha_EI_Analyser+0x1c8>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 800986a:	4872      	ldr	r0, [pc, #456]	; (8009a34 <Medha_EI_Analyser+0x370>)
 800986c:	f019 f91c 	bl	8022aa8 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 8009870:	4b6a      	ldr	r3, [pc, #424]	; (8009a1c <Medha_EI_Analyser+0x358>)
 8009872:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8009876:	4619      	mov	r1, r3
 8009878:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800987c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009880:	885b      	ldrh	r3, [r3, #2]
 8009882:	461a      	mov	r2, r3
 8009884:	486a      	ldr	r0, [pc, #424]	; (8009a30 <Medha_EI_Analyser+0x36c>)
 8009886:	f019 f873 	bl	8022970 <iprintf>
			return;
 800988a:	e34f      	b.n	8009f2c <Medha_EI_Analyser+0x868>
		}
		BYTEINC(2);
 800988c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009890:	3302      	adds	r3, #2
 8009892:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 8009896:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800989a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800989e:	4413      	add	r3, r2
 80098a0:	781a      	ldrb	r2, [r3, #0]
 80098a2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098a6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098aa:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 80098ac:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098b0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098b4:	799b      	ldrb	r3, [r3, #6]
 80098b6:	2baa      	cmp	r3, #170	; 0xaa
 80098b8:	d010      	beq.n	80098dc <Medha_EI_Analyser+0x218>
 80098ba:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098be:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098c2:	799b      	ldrb	r3, [r3, #6]
 80098c4:	2bbb      	cmp	r3, #187	; 0xbb
 80098c6:	d009      	beq.n	80098dc <Medha_EI_Analyser+0x218>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 80098c8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098cc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098d0:	799b      	ldrb	r3, [r3, #6]
 80098d2:	4619      	mov	r1, r3
 80098d4:	4858      	ldr	r0, [pc, #352]	; (8009a38 <Medha_EI_Analyser+0x374>)
 80098d6:	f019 f84b 	bl	8022970 <iprintf>
			return;
 80098da:	e327      	b.n	8009f2c <Medha_EI_Analyser+0x868>
		}
		BYTEINC(1);
 80098dc:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80098e0:	3301      	adds	r3, #1
 80098e2:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 80098e6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80098ea:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80098ee:	4413      	add	r3, r2
 80098f0:	781a      	ldrb	r2, [r3, #0]
 80098f2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098f6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098fa:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 80098fc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009900:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009904:	79db      	ldrb	r3, [r3, #7]
 8009906:	2be1      	cmp	r3, #225	; 0xe1
 8009908:	d009      	beq.n	800991e <Medha_EI_Analyser+0x25a>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 800990a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800990e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009912:	79db      	ldrb	r3, [r3, #7]
 8009914:	4619      	mov	r1, r3
 8009916:	4849      	ldr	r0, [pc, #292]	; (8009a3c <Medha_EI_Analyser+0x378>)
 8009918:	f019 f82a 	bl	8022970 <iprintf>
			return;
 800991c:	e306      	b.n	8009f2c <Medha_EI_Analyser+0x868>
		}

		BYTEINC(1);
 800991e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009922:	3301      	adds	r3, #1
 8009924:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 8009928:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800992c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009930:	4413      	add	r3, r2
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	b29a      	uxth	r2, r3
 8009936:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800993a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800993e:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 8009940:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009944:	3302      	adds	r3, #2
 8009946:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 800994a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800994e:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009952:	4413      	add	r3, r2
 8009954:	781a      	ldrb	r2, [r3, #0]
 8009956:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800995a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800995e:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 8009960:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009964:	3301      	adds	r3, #1
 8009966:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 800996a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800996e:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009972:	441a      	add	r2, r3
 8009974:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009978:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800997c:	330b      	adds	r3, #11
 800997e:	6811      	ldr	r1, [r2, #0]
 8009980:	6019      	str	r1, [r3, #0]
 8009982:	8891      	ldrh	r1, [r2, #4]
 8009984:	7992      	ldrb	r2, [r2, #6]
 8009986:	8099      	strh	r1, [r3, #4]
 8009988:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 800998a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800998e:	3307      	adds	r3, #7
 8009990:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 8009994:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009998:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800999c:	4413      	add	r3, r2
 800999e:	781a      	ldrb	r2, [r3, #0]
 80099a0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099a4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099a8:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 80099aa:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099ae:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099b2:	7c9b      	ldrb	r3, [r3, #18]
 80099b4:	2b11      	cmp	r3, #17
 80099b6:	d009      	beq.n	80099cc <Medha_EI_Analyser+0x308>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 80099b8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099bc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099c0:	7c9b      	ldrb	r3, [r3, #18]
 80099c2:	4619      	mov	r1, r3
 80099c4:	481e      	ldr	r0, [pc, #120]	; (8009a40 <Medha_EI_Analyser+0x37c>)
 80099c6:	f018 ffd3 	bl	8022970 <iprintf>
			return;
 80099ca:	e2af      	b.n	8009f2c <Medha_EI_Analyser+0x868>
		}

		BYTEINC(1);
 80099cc:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80099d0:	3301      	adds	r3, #1
 80099d2:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 80099d6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80099da:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 80099de:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80099e2:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80099e6:	4413      	add	r3, r2
 80099e8:	881b      	ldrh	r3, [r3, #0]
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099f0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099f4:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 80099f6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099fa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099fe:	8a9b      	ldrh	r3, [r3, #20]
 8009a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a04:	d920      	bls.n	8009a48 <Medha_EI_Analyser+0x384>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%u\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 8009a06:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a0a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a0e:	8a9b      	ldrh	r3, [r3, #20]
 8009a10:	4619      	mov	r1, r3
 8009a12:	480c      	ldr	r0, [pc, #48]	; (8009a44 <Medha_EI_Analyser+0x380>)
 8009a14:	f018 ffac 	bl	8022970 <iprintf>
			return;
 8009a18:	e288      	b.n	8009f2c <Medha_EI_Analyser+0x868>
 8009a1a:	bf00      	nop
 8009a1c:	20000304 	.word	0x20000304
 8009a20:	080258d4 	.word	0x080258d4
 8009a24:	cccccccd 	.word	0xcccccccd
 8009a28:	080258e0 	.word	0x080258e0
 8009a2c:	080258e8 	.word	0x080258e8
 8009a30:	0802591c 	.word	0x0802591c
 8009a34:	08025940 	.word	0x08025940
 8009a38:	08025970 	.word	0x08025970
 8009a3c:	080259a8 	.word	0x080259a8
 8009a40:	080259e0 	.word	0x080259e0
 8009a44:	08025a24 	.word	0x08025a24
		}

		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 8009a48:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a4c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a50:	8a9a      	ldrh	r2, [r3, #20]
 8009a52:	4ba6      	ldr	r3, [pc, #664]	; (8009cec <Medha_EI_Analyser+0x628>)
 8009a54:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d014      	beq.n	8009a86 <Medha_EI_Analyser+0x3c2>
		{
			printf("No of Relays Not Matching...\nConfigured:%u - Received:%u\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 8009a5c:	4ba3      	ldr	r3, [pc, #652]	; (8009cec <Medha_EI_Analyser+0x628>)
 8009a5e:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009a62:	4619      	mov	r1, r3
 8009a64:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a68:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a6c:	8a9b      	ldrh	r3, [r3, #20]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	489f      	ldr	r0, [pc, #636]	; (8009cf0 <Medha_EI_Analyser+0x62c>)
 8009a72:	f018 ff7d 	bl	8022970 <iprintf>

			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8009a76:	499f      	ldr	r1, [pc, #636]	; (8009cf4 <Medha_EI_Analyser+0x630>)
 8009a78:	489f      	ldr	r0, [pc, #636]	; (8009cf8 <Medha_EI_Analyser+0x634>)
 8009a7a:	f7f6 fbe1 	bl	8000240 <strcmp>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 8252 	beq.w	8009f2a <Medha_EI_Analyser+0x866>
			{
				return;
			}
		}

		BYTEINC(2);
 8009a86:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009a8a:	3302      	adds	r3, #2
 8009a8c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 8009a90:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a94:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a98:	8a9b      	ldrh	r3, [r3, #20]
 8009a9a:	f003 0307 	and.w	r3, r3, #7
 8009a9e:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 8009aa2:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00a      	beq.n	8009ac0 <Medha_EI_Analyser+0x3fc>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 8009aaa:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009aae:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ab2:	8a9b      	ldrh	r3, [r3, #20]
 8009ab4:	08db      	lsrs	r3, r3, #3
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	3301      	adds	r3, #1
 8009aba:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 8009abe:	e007      	b.n	8009ad0 <Medha_EI_Analyser+0x40c>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 8009ac0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009ac4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ac8:	8a9b      	ldrh	r3, [r3, #20]
 8009aca:	08db      	lsrs	r3, r3, #3
 8009acc:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009ad6:	e02a      	b.n	8009b2e <Medha_EI_Analyser+0x46a>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 8009ad8:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009adc:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009ae0:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009ae4:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8009ae8:	5c89      	ldrb	r1, [r1, r2]
 8009aea:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009aee:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009af2:	4413      	add	r3, r2
 8009af4:	460a      	mov	r2, r1
 8009af6:	759a      	strb	r2, [r3, #22]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 8009af8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009afc:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009b00:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009b04:	4413      	add	r3, r2
 8009b06:	7d9a      	ldrb	r2, [r3, #22]
 8009b08:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b0c:	43d2      	mvns	r2, r2
 8009b0e:	b2d1      	uxtb	r1, r2
 8009b10:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009b14:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8009b18:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 8009b1a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009b1e:	3301      	adds	r3, #1
 8009b20:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009b24:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b28:	3301      	adds	r3, #1
 8009b2a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009b2e:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009b32:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d3ce      	bcc.n	8009ad8 <Medha_EI_Analyser+0x414>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009b40:	e01a      	b.n	8009b78 <Medha_EI_Analyser+0x4b4>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 8009b42:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009b46:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b4a:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009b4e:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8009b52:	5c89      	ldrb	r1, [r1, r2]
 8009b54:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009b58:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009b5c:	4413      	add	r3, r2
 8009b5e:	460a      	mov	r2, r1
 8009b60:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			BYTEINC(1);
 8009b64:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009b68:	3301      	adds	r3, #1
 8009b6a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009b6e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b72:	3301      	adds	r3, #1
 8009b74:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009b78:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009b7c:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d3de      	bcc.n	8009b42 <Medha_EI_Analyser+0x47e>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 8009b84:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 8009b88:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8009b8c:	463b      	mov	r3, r7
 8009b8e:	3396      	adds	r3, #150	; 0x96
 8009b90:	4618      	mov	r0, r3
 8009b92:	f018 fdcd 	bl	8022730 <memcmp>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d03f      	beq.n	8009c1c <Medha_EI_Analyser+0x558>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 8009b9c:	4857      	ldr	r0, [pc, #348]	; (8009cfc <Medha_EI_Analyser+0x638>)
 8009b9e:	f018 ff83 	bl	8022aa8 <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009ba8:	e011      	b.n	8009bce <Medha_EI_Analyser+0x50a>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 8009baa:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009bae:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009bb2:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	4850      	ldr	r0, [pc, #320]	; (8009d00 <Medha_EI_Analyser+0x63c>)
 8009bc0:	f018 fed6 	bl	8022970 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009bc4:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009bc8:	3301      	adds	r3, #1
 8009bca:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009bce:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009bd2:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d3e7      	bcc.n	8009baa <Medha_EI_Analyser+0x4e6>
			}

			printf("\nExpected Compliment Relay Status:\n");
 8009bda:	484a      	ldr	r0, [pc, #296]	; (8009d04 <Medha_EI_Analyser+0x640>)
 8009bdc:	f018 ff64 	bl	8022aa8 <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009be0:	2300      	movs	r3, #0
 8009be2:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009be6:	e00f      	b.n	8009c08 <Medha_EI_Analyser+0x544>
			{
				printf("%02X ",TempCompliment[Traverser]);
 8009be8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009bec:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009bf0:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8009bf4:	5cd3      	ldrb	r3, [r2, r3]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4841      	ldr	r0, [pc, #260]	; (8009d00 <Medha_EI_Analyser+0x63c>)
 8009bfa:	f018 feb9 	bl	8022970 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009bfe:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009c02:	3301      	adds	r3, #1
 8009c04:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009c08:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009c0c:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d3e9      	bcc.n	8009be8 <Medha_EI_Analyser+0x524>
			}

			printf("\nPACKET Rejected\n");
 8009c14:	483c      	ldr	r0, [pc, #240]	; (8009d08 <Medha_EI_Analyser+0x644>)
 8009c16:	f018 ff47 	bl	8022aa8 <puts>
			return;
 8009c1a:	e187      	b.n	8009f2c <Medha_EI_Analyser+0x868>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 8009c1c:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009c20:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8009c24:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f001 f8b3 	bl	800ad94 <GetCRC32>
 8009c2e:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 8009c32:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009c36:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009c3a:	4413      	add	r3, r2
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c44:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c48:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 8009c4c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c50:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c54:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009c58:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d00c      	beq.n	8009c7a <Medha_EI_Analyser+0x5b6>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 8009c60:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c64:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c68:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8009c72:	4826      	ldr	r0, [pc, #152]	; (8009d0c <Medha_EI_Analyser+0x648>)
 8009c74:	f018 fe7c 	bl	8022970 <iprintf>
			return;
 8009c78:	e158      	b.n	8009f2c <Medha_EI_Analyser+0x868>
		}
		BYTEINC(4);
 8009c7a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009c7e:	3304      	adds	r3, #4
 8009c80:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 8009c84:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009c88:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009c8c:	4413      	add	r3, r2
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c96:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c9a:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 8009c9e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009ca2:	3302      	adds	r3, #2
 8009ca4:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 8009ca8:	f00b fe64 	bl	8015974 <HAL_GetTick>
 8009cac:	4603      	mov	r3, r0
 8009cae:	4a18      	ldr	r2, [pc, #96]	; (8009d10 <Medha_EI_Analyser+0x64c>)
 8009cb0:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 8009cb2:	4a18      	ldr	r2, [pc, #96]	; (8009d14 <Medha_EI_Analyser+0x650>)
 8009cb4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cb8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	f44f 7392 	mov.w	r3, #292	; 0x124
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	f018 fd43 	bl	8022750 <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 8009cca:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <Medha_EI_Analyser+0x654>)
 8009ccc:	2201      	movs	r2, #1
 8009cce:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 8009cd0:	4b10      	ldr	r3, [pc, #64]	; (8009d14 <Medha_EI_Analyser+0x650>)
 8009cd2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009cd6:	4a10      	ldr	r2, [pc, #64]	; (8009d18 <Medha_EI_Analyser+0x654>)
 8009cd8:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 8009cda:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 f954 	bl	8009f8c <Send_Medha_EI_Reply>


		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009cea:	e028      	b.n	8009d3e <Medha_EI_Analyser+0x67a>
 8009cec:	20000304 	.word	0x20000304
 8009cf0:	08025a74 	.word	0x08025a74
 8009cf4:	08025ab0 	.word	0x08025ab0
 8009cf8:	20000305 	.word	0x20000305
 8009cfc:	08025abc 	.word	0x08025abc
 8009d00:	080258e0 	.word	0x080258e0
 8009d04:	08025b08 	.word	0x08025b08
 8009d08:	08025b2c 	.word	0x08025b2c
 8009d0c:	08025b40 	.word	0x08025b40
 8009d10:	200026a0 	.word	0x200026a0
 8009d14:	2000254c 	.word	0x2000254c
 8009d18:	200026b0 	.word	0x200026b0
		{
			//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
			Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 8009d1c:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009d20:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009d24:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009d28:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 8009d2c:	440a      	add	r2, r1
 8009d2e:	7d91      	ldrb	r1, [r2, #22]
 8009d30:	4a80      	ldr	r2, [pc, #512]	; (8009f34 <Medha_EI_Analyser+0x870>)
 8009d32:	54d1      	strb	r1, [r2, r3]
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009d34:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009d38:	3301      	adds	r3, #1
 8009d3a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009d3e:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009d42:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d3e8      	bcc.n	8009d1c <Medha_EI_Analyser+0x658>
		}
		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 8009d4a:	4b7b      	ldr	r3, [pc, #492]	; (8009f38 <Medha_EI_Analyser+0x874>)
 8009d4c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009d50:	4a78      	ldr	r2, [pc, #480]	; (8009f34 <Medha_EI_Analyser+0x870>)
 8009d52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 8009d56:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	4975      	ldr	r1, [pc, #468]	; (8009f34 <Medha_EI_Analyser+0x870>)
 8009d5e:	4877      	ldr	r0, [pc, #476]	; (8009f3c <Medha_EI_Analyser+0x878>)
 8009d60:	f018 fce6 	bl	8022730 <memcmp>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d030      	beq.n	8009dcc <Medha_EI_Analyser+0x708>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 8009d6a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d6e:	461a      	mov	r2, r3
 8009d70:	4970      	ldr	r1, [pc, #448]	; (8009f34 <Medha_EI_Analyser+0x870>)
 8009d72:	4872      	ldr	r0, [pc, #456]	; (8009f3c <Medha_EI_Analyser+0x878>)
 8009d74:	f018 fcec 	bl	8022750 <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 8009d78:	4b6e      	ldr	r3, [pc, #440]	; (8009f34 <Medha_EI_Analyser+0x870>)
 8009d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d7e:	4a6f      	ldr	r2, [pc, #444]	; (8009f3c <Medha_EI_Analyser+0x878>)
 8009d80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(MEDHA_RELAY_STS_t));
 8009d84:	2230      	movs	r2, #48	; 0x30
 8009d86:	2100      	movs	r1, #0
 8009d88:	486d      	ldr	r0, [pc, #436]	; (8009f40 <Medha_EI_Analyser+0x87c>)
 8009d8a:	f018 fd09 	bl	80227a0 <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 8009d8e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d92:	461a      	mov	r2, r3
 8009d94:	4967      	ldr	r1, [pc, #412]	; (8009f34 <Medha_EI_Analyser+0x870>)
 8009d96:	486a      	ldr	r0, [pc, #424]	; (8009f40 <Medha_EI_Analyser+0x87c>)
 8009d98:	f018 fcda 	bl	8022750 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
 8009d9c:	f240 1019 	movw	r0, #281	; 0x119
 8009da0:	f005 fe12 	bl	800f9c8 <TransmitCanPkt>
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 8009da4:	f00b fde6 	bl	8015974 <HAL_GetTick>
 8009da8:	4603      	mov	r3, r0
 8009daa:	4a66      	ldr	r2, [pc, #408]	; (8009f44 <Medha_EI_Analyser+0x880>)
 8009dac:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 8009dae:	4866      	ldr	r0, [pc, #408]	; (8009f48 <Medha_EI_Analyser+0x884>)
 8009db0:	f018 fe7a 	bl	8022aa8 <puts>


#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 8009db4:	f240 2001 	movw	r0, #513	; 0x201
 8009db8:	f005 fe06 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 8009dbc:	4b63      	ldr	r3, [pc, #396]	; (8009f4c <Medha_EI_Analyser+0x888>)
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d103      	bne.n	8009dcc <Medha_EI_Analyser+0x708>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8009dc4:	f240 2007 	movw	r0, #519	; 0x207
 8009dc8:	f005 fdfe 	bl	800f9c8 <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 8009dcc:	4860      	ldr	r0, [pc, #384]	; (8009f50 <Medha_EI_Analyser+0x88c>)
 8009dce:	f018 fe6b 	bl	8022aa8 <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 8009dd2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009dd6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009dda:	889b      	ldrh	r3, [r3, #4]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	485d      	ldr	r0, [pc, #372]	; (8009f54 <Medha_EI_Analyser+0x890>)
 8009de0:	f018 fdc6 	bl	8022970 <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 8009de4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009de8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009dec:	885b      	ldrh	r3, [r3, #2]
 8009dee:	4619      	mov	r1, r3
 8009df0:	4859      	ldr	r0, [pc, #356]	; (8009f58 <Medha_EI_Analyser+0x894>)
 8009df2:	f018 fdbd 	bl	8022970 <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 8009df6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009dfa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009dfe:	799b      	ldrb	r3, [r3, #6]
 8009e00:	4619      	mov	r1, r3
 8009e02:	4856      	ldr	r0, [pc, #344]	; (8009f5c <Medha_EI_Analyser+0x898>)
 8009e04:	f018 fdb4 	bl	8022970 <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 8009e08:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e0c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e10:	79db      	ldrb	r3, [r3, #7]
 8009e12:	4619      	mov	r1, r3
 8009e14:	4852      	ldr	r0, [pc, #328]	; (8009f60 <Medha_EI_Analyser+0x89c>)
 8009e16:	f018 fdab 	bl	8022970 <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 8009e1a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e1e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e22:	891b      	ldrh	r3, [r3, #8]
 8009e24:	4619      	mov	r1, r3
 8009e26:	484f      	ldr	r0, [pc, #316]	; (8009f64 <Medha_EI_Analyser+0x8a0>)
 8009e28:	f018 fda2 	bl	8022970 <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 8009e2c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e30:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e34:	7a9b      	ldrb	r3, [r3, #10]
 8009e36:	4619      	mov	r1, r3
 8009e38:	484b      	ldr	r0, [pc, #300]	; (8009f68 <Medha_EI_Analyser+0x8a4>)
 8009e3a:	f018 fd99 	bl	8022970 <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 8009e3e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e42:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e46:	7b9b      	ldrb	r3, [r3, #14]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e4e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e52:	7b5b      	ldrb	r3, [r3, #13]
 8009e54:	461c      	mov	r4, r3
 8009e56:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e5a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e5e:	7b1b      	ldrb	r3, [r3, #12]
 8009e60:	461d      	mov	r5, r3
 8009e62:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e66:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e6a:	7bdb      	ldrb	r3, [r3, #15]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e72:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e76:	7c1b      	ldrb	r3, [r3, #16]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e7e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e82:	7c5b      	ldrb	r3, [r3, #17]
 8009e84:	9302      	str	r3, [sp, #8]
 8009e86:	9101      	str	r1, [sp, #4]
 8009e88:	9200      	str	r2, [sp, #0]
 8009e8a:	462b      	mov	r3, r5
 8009e8c:	4622      	mov	r2, r4
 8009e8e:	4601      	mov	r1, r0
 8009e90:	4836      	ldr	r0, [pc, #216]	; (8009f6c <Medha_EI_Analyser+0x8a8>)
 8009e92:	f018 fd6d 	bl	8022970 <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 8009e96:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e9a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e9e:	7c9b      	ldrb	r3, [r3, #18]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	4833      	ldr	r0, [pc, #204]	; (8009f70 <Medha_EI_Analyser+0x8ac>)
 8009ea4:	f018 fd64 	bl	8022970 <iprintf>
		printf("RC:%5u\n",Medha_EI_Temp_Rx_st.NoofRelays);
 8009ea8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009eac:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009eb0:	8a9b      	ldrh	r3, [r3, #20]
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	482f      	ldr	r0, [pc, #188]	; (8009f74 <Medha_EI_Analyser+0x8b0>)
 8009eb6:	f018 fd5b 	bl	8022970 <iprintf>
		printf("SIGNAL DATA       :");
 8009eba:	482f      	ldr	r0, [pc, #188]	; (8009f78 <Medha_EI_Analyser+0x8b4>)
 8009ebc:	f018 fd58 	bl	8022970 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009ec6:	e021      	b.n	8009f0c <Medha_EI_Analyser+0x848>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 8009ec8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d010      	beq.n	8009ef2 <Medha_EI_Analyser+0x82e>
 8009ed0:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009ed4:	4b29      	ldr	r3, [pc, #164]	; (8009f7c <Medha_EI_Analyser+0x8b8>)
 8009ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8009eda:	08d9      	lsrs	r1, r3, #3
 8009edc:	460b      	mov	r3, r1
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	440b      	add	r3, r1
 8009ee2:	005b      	lsls	r3, r3, #1
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d102      	bne.n	8009ef2 <Medha_EI_Analyser+0x82e>
			{
				printf("\n                   ");
 8009eec:	4824      	ldr	r0, [pc, #144]	; (8009f80 <Medha_EI_Analyser+0x8bc>)
 8009eee:	f018 fd3f 	bl	8022970 <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 8009ef2:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009ef6:	4a0f      	ldr	r2, [pc, #60]	; (8009f34 <Medha_EI_Analyser+0x870>)
 8009ef8:	5cd3      	ldrb	r3, [r2, r3]
 8009efa:	4619      	mov	r1, r3
 8009efc:	4821      	ldr	r0, [pc, #132]	; (8009f84 <Medha_EI_Analyser+0x8c0>)
 8009efe:	f018 fd37 	bl	8022970 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009f02:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009f06:	3301      	adds	r3, #1
 8009f08:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009f0c:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009f10:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d3d7      	bcc.n	8009ec8 <Medha_EI_Analyser+0x804>
		}
		printf("\n");
 8009f18:	200a      	movs	r0, #10
 8009f1a:	f018 fd41 	bl	80229a0 <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 8009f1e:	481a      	ldr	r0, [pc, #104]	; (8009f88 <Medha_EI_Analyser+0x8c4>)
 8009f20:	f018 fdc2 	bl	8022aa8 <puts>
		return;
 8009f24:	e002      	b.n	8009f2c <Medha_EI_Analyser+0x868>
	}
	else
	{
		return;
 8009f26:	bf00      	nop
 8009f28:	e000      	b.n	8009f2c <Medha_EI_Analyser+0x868>
				return;
 8009f2a:	bf00      	nop
	}
}
 8009f2c:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bdb0      	pop	{r4, r5, r7, pc}
 8009f34:	200026c8 	.word	0x200026c8
 8009f38:	2000254c 	.word	0x2000254c
 8009f3c:	200027d0 	.word	0x200027d0
 8009f40:	20002670 	.word	0x20002670
 8009f44:	200026a0 	.word	0x200026a0
 8009f48:	08025b80 	.word	0x08025b80
 8009f4c:	200026b8 	.word	0x200026b8
 8009f50:	08025b98 	.word	0x08025b98
 8009f54:	08025bc0 	.word	0x08025bc0
 8009f58:	08025bc8 	.word	0x08025bc8
 8009f5c:	08025bd0 	.word	0x08025bd0
 8009f60:	08025bdc 	.word	0x08025bdc
 8009f64:	08025be8 	.word	0x08025be8
 8009f68:	08025bf0 	.word	0x08025bf0
 8009f6c:	08025bf8 	.word	0x08025bf8
 8009f70:	08025c1c 	.word	0x08025c1c
 8009f74:	08025c28 	.word	0x08025c28
 8009f78:	08025c30 	.word	0x08025c30
 8009f7c:	cccccccd 	.word	0xcccccccd
 8009f80:	08025c44 	.word	0x08025c44
 8009f84:	080258e0 	.word	0x080258e0
 8009f88:	08025c5c 	.word	0x08025c5c

08009f8c <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b0d2      	sub	sp, #328	; 0x148
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	4602      	mov	r2, r0
 8009f94:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009f98:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009f9c:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 8009f9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fa2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
 8009faa:	3304      	adds	r3, #4
 8009fac:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f018 fbf4 	bl	80227a0 <memset>
	uint32_t Cal_Crc =0;
 8009fb8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fbc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 8009fca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fce:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 8009fdc:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009fe0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009fe4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009fe8:	2153      	movs	r1, #83	; 0x53
 8009fea:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 8009fec:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 8009ff6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ffa:	f107 0214 	add.w	r2, r7, #20
 8009ffe:	4413      	add	r3, r2
 800a000:	4a88      	ldr	r2, [pc, #544]	; (800a224 <Send_Medha_EI_Reply+0x298>)
 800a002:	8852      	ldrh	r2, [r2, #2]
 800a004:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800a006:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a00a:	3302      	adds	r3, #2
 800a00c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 800a010:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a014:	f107 0214 	add.w	r2, r7, #20
 800a018:	4413      	add	r3, r2
 800a01a:	4a82      	ldr	r2, [pc, #520]	; (800a224 <Send_Medha_EI_Reply+0x298>)
 800a01c:	8892      	ldrh	r2, [r2, #4]
 800a01e:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800a020:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a024:	3302      	adds	r3, #2
 800a026:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 800a02a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a02e:	f107 0214 	add.w	r2, r7, #20
 800a032:	4413      	add	r3, r2
 800a034:	4a7b      	ldr	r2, [pc, #492]	; (800a224 <Send_Medha_EI_Reply+0x298>)
 800a036:	7992      	ldrb	r2, [r2, #6]
 800a038:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800a03a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a03e:	3301      	adds	r3, #1
 800a040:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 800a044:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a048:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a04c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a050:	21e2      	movs	r1, #226	; 0xe2
 800a052:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800a054:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a058:	3301      	adds	r3, #1
 800a05a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 800a05e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a062:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 800a066:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a06a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a06e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a072:	2100      	movs	r1, #0
 800a074:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 800a076:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a07a:	3301      	adds	r3, #1
 800a07c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a080:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a084:	2100      	movs	r1, #0
 800a086:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 800a088:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a08c:	3302      	adds	r3, #2
 800a08e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 800a092:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a096:	f107 0214 	add.w	r2, r7, #20
 800a09a:	4413      	add	r3, r2
 800a09c:	4a61      	ldr	r2, [pc, #388]	; (800a224 <Send_Medha_EI_Reply+0x298>)
 800a09e:	7a92      	ldrb	r2, [r2, #10]
 800a0a0:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800a0a2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 800a0ac:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0b0:	f107 0214 	add.w	r2, r7, #20
 800a0b4:	441a      	add	r2, r3
 800a0b6:	4b5b      	ldr	r3, [pc, #364]	; (800a224 <Send_Medha_EI_Reply+0x298>)
 800a0b8:	330b      	adds	r3, #11
 800a0ba:	6819      	ldr	r1, [r3, #0]
 800a0bc:	6011      	str	r1, [r2, #0]
 800a0be:	8899      	ldrh	r1, [r3, #4]
 800a0c0:	799b      	ldrb	r3, [r3, #6]
 800a0c2:	8091      	strh	r1, [r2, #4]
 800a0c4:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 800a0c6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0ca:	3307      	adds	r3, #7
 800a0cc:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 800a0d0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0d4:	f107 0214 	add.w	r2, r7, #20
 800a0d8:	4413      	add	r3, r2
 800a0da:	4a52      	ldr	r2, [pc, #328]	; (800a224 <Send_Medha_EI_Reply+0x298>)
 800a0dc:	8a92      	ldrh	r2, [r2, #20]
 800a0de:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800a0e0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0e4:	3302      	adds	r3, #2
 800a0e6:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 800a0ea:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0ee:	f107 0214 	add.w	r2, r7, #20
 800a0f2:	18d0      	adds	r0, r2, r3
 800a0f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a0f8:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a0fc:	881b      	ldrh	r3, [r3, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	4949      	ldr	r1, [pc, #292]	; (800a228 <Send_Medha_EI_Reply+0x29c>)
 800a102:	f018 fb25 	bl	8022750 <memcpy>
	BYTEINC(Outputs);
 800a106:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a10a:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a10e:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	4413      	add	r3, r2
 800a116:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 800a11a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a11e:	f107 0214 	add.w	r2, r7, #20
 800a122:	18d0      	adds	r0, r2, r3
 800a124:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a128:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a12c:	881b      	ldrh	r3, [r3, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	493e      	ldr	r1, [pc, #248]	; (800a22c <Send_Medha_EI_Reply+0x2a0>)
 800a132:	f018 fb0d 	bl	8022750 <memcpy>
	BYTEINC(Outputs);
 800a136:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a13a:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a13e:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	4413      	add	r3, r2
 800a146:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 800a14a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a14e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a152:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a156:	2100      	movs	r1, #0
 800a158:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 800a15a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a15e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a162:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a166:	2100      	movs	r1, #0
 800a168:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 800a16a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a16e:	3302      	adds	r3, #2
 800a170:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 800a174:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800a178:	b29b      	uxth	r3, r3
 800a17a:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a17e:	1ad3      	subs	r3, r2, r3
 800a180:	b29b      	uxth	r3, r3
 800a182:	3302      	adds	r3, #2
 800a184:	b29a      	uxth	r2, r3
 800a186:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a18a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800a18e:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 800a190:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800a194:	f107 0214 	add.w	r2, r7, #20
 800a198:	4413      	add	r3, r2
 800a19a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a19e:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800a1a2:	8812      	ldrh	r2, [r2, #0]
 800a1a4:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 800a1a6:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a1aa:	f107 0314 	add.w	r3, r7, #20
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	f000 fdef 	bl	800ad94 <GetCRC32>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a1bc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a1c0:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 800a1c2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a1c6:	f107 0214 	add.w	r2, r7, #20
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a1d0:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a1d4:	6812      	ldr	r2, [r2, #0]
 800a1d6:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 800a1d8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a1dc:	3304      	adds	r3, #4
 800a1de:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800a1e8:	e011      	b.n	800a20e <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 800a1ea:	4b11      	ldr	r3, [pc, #68]	; (800a230 <Send_Medha_EI_Reply+0x2a4>)
 800a1ec:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 800a1f0:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800a1f4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a1f8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a1fc:	5cd3      	ldrb	r3, [r2, r3]
 800a1fe:	4619      	mov	r1, r3
 800a200:	f00b f960 	bl	80154c4 <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800a204:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800a208:	3301      	adds	r3, #1
 800a20a:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800a20e:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800a212:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a216:	429a      	cmp	r2, r3
 800a218:	d3e7      	bcc.n	800a1ea <Send_Medha_EI_Reply+0x25e>
	}
	return;
 800a21a:	bf00      	nop
}
 800a21c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	2000254c 	.word	0x2000254c
 800a228:	20002562 	.word	0x20002562
 800a22c:	200025e2 	.word	0x200025e2
 800a230:	20000304 	.word	0x20000304

0800a234 <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 800a23a:	4b2c      	ldr	r3, [pc, #176]	; (800a2ec <Send_Relay_Statuses_2_MIE+0xb8>)
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	4618      	mov	r0, r3
 800a240:	f004 fe0e 	bl	800ee60 <HAL_Elaps_Ticks>
 800a244:	4602      	mov	r2, r0
 800a246:	4b2a      	ldr	r3, [pc, #168]	; (800a2f0 <Send_Relay_Statuses_2_MIE+0xbc>)
 800a248:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d349      	bcc.n	800a2e4 <Send_Relay_Statuses_2_MIE+0xb0>
	{
		uint16_t NoOfInputs = 0;
 800a250:	2300      	movs	r3, #0
 800a252:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 800a254:	4b26      	ldr	r3, [pc, #152]	; (800a2f0 <Send_Relay_Statuses_2_MIE+0xbc>)
 800a256:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a25a:	f003 0307 	and.w	r3, r3, #7
 800a25e:	b29b      	uxth	r3, r3
 800a260:	2b00      	cmp	r3, #0
 800a262:	d007      	beq.n	800a274 <Send_Relay_Statuses_2_MIE+0x40>
 800a264:	4b22      	ldr	r3, [pc, #136]	; (800a2f0 <Send_Relay_Statuses_2_MIE+0xbc>)
 800a266:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a26a:	08db      	lsrs	r3, r3, #3
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	3301      	adds	r3, #1
 800a270:	80fb      	strh	r3, [r7, #6]
 800a272:	e004      	b.n	800a27e <Send_Relay_Statuses_2_MIE+0x4a>
 800a274:	4b1e      	ldr	r3, [pc, #120]	; (800a2f0 <Send_Relay_Statuses_2_MIE+0xbc>)
 800a276:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a27a:	08db      	lsrs	r3, r3, #3
 800a27c:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800a27e:	f00b fb79 	bl	8015974 <HAL_GetTick>
 800a282:	4603      	mov	r3, r0
 800a284:	4a19      	ldr	r2, [pc, #100]	; (800a2ec <Send_Relay_Statuses_2_MIE+0xb8>)
 800a286:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 800a288:	481a      	ldr	r0, [pc, #104]	; (800a2f4 <Send_Relay_Statuses_2_MIE+0xc0>)
 800a28a:	f018 fc0d 	bl	8022aa8 <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800a28e:	2300      	movs	r3, #0
 800a290:	603b      	str	r3, [r7, #0]
 800a292:	e01c      	b.n	800a2ce <Send_Relay_Statuses_2_MIE+0x9a>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00e      	beq.n	800a2b8 <Send_Relay_Statuses_2_MIE+0x84>
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	4b16      	ldr	r3, [pc, #88]	; (800a2f8 <Send_Relay_Statuses_2_MIE+0xc4>)
 800a29e:	fba3 2301 	umull	r2, r3, r3, r1
 800a2a2:	091a      	lsrs	r2, r3, #4
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	1aca      	subs	r2, r1, r3
 800a2ae:	2a00      	cmp	r2, #0
 800a2b0:	d102      	bne.n	800a2b8 <Send_Relay_Statuses_2_MIE+0x84>
			{
				printf("\n");
 800a2b2:	200a      	movs	r0, #10
 800a2b4:	f018 fb74 	bl	80229a0 <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 800a2b8:	4a10      	ldr	r2, [pc, #64]	; (800a2fc <Send_Relay_Statuses_2_MIE+0xc8>)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	4413      	add	r3, r2
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	480f      	ldr	r0, [pc, #60]	; (800a300 <Send_Relay_Statuses_2_MIE+0xcc>)
 800a2c4:	f018 fb54 	bl	8022970 <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	603b      	str	r3, [r7, #0]
 800a2ce:	88fb      	ldrh	r3, [r7, #6]
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d3de      	bcc.n	800a294 <Send_Relay_Statuses_2_MIE+0x60>
		}
		printf("\n");
 800a2d6:	200a      	movs	r0, #10
 800a2d8:	f018 fb62 	bl	80229a0 <putchar>

#ifdef EI_1
		TransmitCanPkt(EI_PROCESS_DATA);
 800a2dc:	f240 1019 	movw	r0, #281	; 0x119
 800a2e0:	f005 fb72 	bl	800f9c8 <TransmitCanPkt>
#endif
	}
}
 800a2e4:	bf00      	nop
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	200026a0 	.word	0x200026a0
 800a2f0:	20000304 	.word	0x20000304
 800a2f4:	08025c84 	.word	0x08025c84
 800a2f8:	cccccccd 	.word	0xcccccccd
 800a2fc:	20002670 	.word	0x20002670
 800a300:	080258e0 	.word	0x080258e0

0800a304 <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 800a30a:	4b3d      	ldr	r3, [pc, #244]	; (800a400 <Process_Clear_Relays+0xfc>)
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	4618      	mov	r0, r3
 800a310:	f004 fda6 	bl	800ee60 <HAL_Elaps_Ticks>
 800a314:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800a316:	4b3b      	ldr	r3, [pc, #236]	; (800a404 <Process_Clear_Relays+0x100>)
 800a318:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a31c:	4a39      	ldr	r2, [pc, #228]	; (800a404 <Process_Clear_Relays+0x100>)
 800a31e:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 800a322:	fb02 f303 	mul.w	r3, r2, r3
 800a326:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800a328:	4937      	ldr	r1, [pc, #220]	; (800a408 <Process_Clear_Relays+0x104>)
 800a32a:	4838      	ldr	r0, [pc, #224]	; (800a40c <Process_Clear_Relays+0x108>)
 800a32c:	f7f5 ff88 	bl	8000240 <strcmp>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d05f      	beq.n	800a3f6 <Process_Clear_Relays+0xf2>
	}




	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d30c      	bcc.n	800a358 <Process_Clear_Relays+0x54>
 800a33e:	4b30      	ldr	r3, [pc, #192]	; (800a400 <Process_Clear_Relays+0xfc>)
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	4b33      	ldr	r3, [pc, #204]	; (800a410 <Process_Clear_Relays+0x10c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	429a      	cmp	r2, r3
 800a348:	d006      	beq.n	800a358 <Process_Clear_Relays+0x54>
 800a34a:	4b32      	ldr	r3, [pc, #200]	; (800a414 <Process_Clear_Relays+0x110>)
 800a34c:	785a      	ldrb	r2, [r3, #1]
 800a34e:	4b2d      	ldr	r3, [pc, #180]	; (800a404 <Process_Clear_Relays+0x100>)
 800a350:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a354:	429a      	cmp	r2, r3
 800a356:	d808      	bhi.n	800a36a <Process_Clear_Relays+0x66>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 800a358:	4b29      	ldr	r3, [pc, #164]	; (800a400 <Process_Clear_Relays+0xfc>)
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d04b      	beq.n	800a3f8 <Process_Clear_Relays+0xf4>
 800a360:	4b2d      	ldr	r3, [pc, #180]	; (800a418 <Process_Clear_Relays+0x114>)
 800a362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a366:	2b00      	cmp	r3, #0
 800a368:	d046      	beq.n	800a3f8 <Process_Clear_Relays+0xf4>
	)
	{


		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a36a:	4b25      	ldr	r3, [pc, #148]	; (800a400 <Process_Clear_Relays+0xfc>)
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	4619      	mov	r1, r3
 800a370:	482a      	ldr	r0, [pc, #168]	; (800a41c <Process_Clear_Relays+0x118>)
 800a372:	f018 fafd 	bl	8022970 <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800a376:	4b22      	ldr	r3, [pc, #136]	; (800a400 <Process_Clear_Relays+0xfc>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d006      	beq.n	800a390 <Process_Clear_Relays+0x8c>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a382:	4b1f      	ldr	r3, [pc, #124]	; (800a400 <Process_Clear_Relays+0xfc>)
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	f023 0301 	bic.w	r3, r3, #1
 800a38a:	b2da      	uxtb	r2, r3
 800a38c:	4b1c      	ldr	r3, [pc, #112]	; (800a400 <Process_Clear_Relays+0xfc>)
 800a38e:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800a390:	4b1b      	ldr	r3, [pc, #108]	; (800a400 <Process_Clear_Relays+0xfc>)
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	f003 0302 	and.w	r3, r3, #2
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d006      	beq.n	800a3aa <Process_Clear_Relays+0xa6>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a39c:	4b18      	ldr	r3, [pc, #96]	; (800a400 <Process_Clear_Relays+0xfc>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	f023 0302 	bic.w	r3, r3, #2
 800a3a4:	b2da      	uxtb	r2, r3
 800a3a6:	4b16      	ldr	r3, [pc, #88]	; (800a400 <Process_Clear_Relays+0xfc>)
 800a3a8:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a3aa:	2284      	movs	r2, #132	; 0x84
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	481a      	ldr	r0, [pc, #104]	; (800a418 <Process_Clear_Relays+0x114>)
 800a3b0:	f018 f9f6 	bl	80227a0 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800a3b4:	2230      	movs	r2, #48	; 0x30
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	4819      	ldr	r0, [pc, #100]	; (800a420 <Process_Clear_Relays+0x11c>)
 800a3ba:	f018 f9f1 	bl	80227a0 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a3be:	2284      	movs	r2, #132	; 0x84
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	4818      	ldr	r0, [pc, #96]	; (800a424 <Process_Clear_Relays+0x120>)
 800a3c4:	f018 f9ec 	bl	80227a0 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a3c8:	2208      	movs	r2, #8
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	4816      	ldr	r0, [pc, #88]	; (800a428 <Process_Clear_Relays+0x124>)
 800a3ce:	f018 f9e7 	bl	80227a0 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a3d2:	2208      	movs	r2, #8
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	480f      	ldr	r0, [pc, #60]	; (800a414 <Process_Clear_Relays+0x110>)
 800a3d8:	f018 f9e2 	bl	80227a0 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a3dc:	2208      	movs	r2, #8
 800a3de:	2100      	movs	r1, #0
 800a3e0:	4812      	ldr	r0, [pc, #72]	; (800a42c <Process_Clear_Relays+0x128>)
 800a3e2:	f018 f9dd 	bl	80227a0 <memset>
		printf("Cleared Relay Statuses\n");
 800a3e6:	4812      	ldr	r0, [pc, #72]	; (800a430 <Process_Clear_Relays+0x12c>)
 800a3e8:	f018 fb5e 	bl	8022aa8 <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800a3ec:	4b04      	ldr	r3, [pc, #16]	; (800a400 <Process_Clear_Relays+0xfc>)
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	4a07      	ldr	r2, [pc, #28]	; (800a410 <Process_Clear_Relays+0x10c>)
 800a3f2:	6013      	str	r3, [r2, #0]
 800a3f4:	e000      	b.n	800a3f8 <Process_Clear_Relays+0xf4>
		return;
 800a3f6:	bf00      	nop
	}
}
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	200026a0 	.word	0x200026a0
 800a404:	20000304 	.word	0x20000304
 800a408:	08025ab0 	.word	0x08025ab0
 800a40c:	20000305 	.word	0x20000305
 800a410:	20002860 	.word	0x20002860
 800a414:	200026b8 	.word	0x200026b8
 800a418:	200026c8 	.word	0x200026c8
 800a41c:	08025c98 	.word	0x08025c98
 800a420:	20002670 	.word	0x20002670
 800a424:	200027d0 	.word	0x200027d0
 800a428:	200026b0 	.word	0x200026b0
 800a42c:	200026c0 	.word	0x200026c0
 800a430:	08025cc8 	.word	0x08025cc8

0800a434 <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 800a438:	4b26      	ldr	r3, [pc, #152]	; (800a4d4 <Send_Data_to_Other+0xa0>)
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f004 fd0f 	bl	800ee60 <HAL_Elaps_Ticks>
 800a442:	4602      	mov	r2, r0
 800a444:	4b24      	ldr	r3, [pc, #144]	; (800a4d8 <Send_Data_to_Other+0xa4>)
 800a446:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a44a:	4923      	ldr	r1, [pc, #140]	; (800a4d8 <Send_Data_to_Other+0xa4>)
 800a44c:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 800a450:	fb01 f303 	mul.w	r3, r1, r3
 800a454:	429a      	cmp	r2, r3
 800a456:	d306      	bcc.n	800a466 <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 800a458:	4b20      	ldr	r3, [pc, #128]	; (800a4dc <Send_Data_to_Other+0xa8>)
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 800a460:	4b1e      	ldr	r3, [pc, #120]	; (800a4dc <Send_Data_to_Other+0xa8>)
 800a462:	2200      	movs	r2, #0
 800a464:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 800a466:	4b1b      	ldr	r3, [pc, #108]	; (800a4d4 <Send_Data_to_Other+0xa0>)
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f004 fcf8 	bl	800ee60 <HAL_Elaps_Ticks>
 800a470:	4602      	mov	r2, r0
 800a472:	4b19      	ldr	r3, [pc, #100]	; (800a4d8 <Send_Data_to_Other+0xa4>)
 800a474:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a478:	429a      	cmp	r2, r3
 800a47a:	d90e      	bls.n	800a49a <Send_Data_to_Other+0x66>
 800a47c:	4b15      	ldr	r3, [pc, #84]	; (800a4d4 <Send_Data_to_Other+0xa0>)
 800a47e:	685a      	ldr	r2, [r3, #4]
 800a480:	4b17      	ldr	r3, [pc, #92]	; (800a4e0 <Send_Data_to_Other+0xac>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	429a      	cmp	r2, r3
 800a486:	d008      	beq.n	800a49a <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800a488:	4b12      	ldr	r3, [pc, #72]	; (800a4d4 <Send_Data_to_Other+0xa0>)
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	4a14      	ldr	r2, [pc, #80]	; (800a4e0 <Send_Data_to_Other+0xac>)
 800a48e:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800a490:	f240 2001 	movw	r0, #513	; 0x201
 800a494:	f005 fa98 	bl	800f9c8 <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 800a498:	e01a      	b.n	800a4d0 <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 800a49a:	4b12      	ldr	r3, [pc, #72]	; (800a4e4 <Send_Data_to_Other+0xb0>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f004 fcde 	bl	800ee60 <HAL_Elaps_Ticks>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4aa:	d911      	bls.n	800a4d0 <Send_Data_to_Other+0x9c>
 800a4ac:	4b09      	ldr	r3, [pc, #36]	; (800a4d4 <Send_Data_to_Other+0xa0>)
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f004 fcd5 	bl	800ee60 <HAL_Elaps_Ticks>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a4bc:	d908      	bls.n	800a4d0 <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 800a4be:	f00b fa59 	bl	8015974 <HAL_GetTick>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	4a07      	ldr	r2, [pc, #28]	; (800a4e4 <Send_Data_to_Other+0xb0>)
 800a4c6:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_1_SELF_SHARING);
 800a4c8:	f240 2001 	movw	r0, #513	; 0x201
 800a4cc:	f005 fa7c 	bl	800f9c8 <TransmitCanPkt>
}
 800a4d0:	bf00      	nop
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	200026a0 	.word	0x200026a0
 800a4d8:	20000304 	.word	0x20000304
 800a4dc:	200026b0 	.word	0x200026b0
 800a4e0:	20002864 	.word	0x20002864
 800a4e4:	20002868 	.word	0x20002868

0800a4e8 <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 800a4e8:	b5b0      	push	{r4, r5, r7, lr}
 800a4ea:	af00      	add	r7, sp, #0
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 800a4ec:	4b95      	ldr	r3, [pc, #596]	; (800a744 <Process_Data_from_Other+0x25c>)
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	4b95      	ldr	r3, [pc, #596]	; (800a748 <Process_Data_from_Other+0x260>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d109      	bne.n	800a50c <Process_Data_from_Other+0x24>
 800a4f8:	4b92      	ldr	r3, [pc, #584]	; (800a744 <Process_Data_from_Other+0x25c>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f004 fcaf 	bl	800ee60 <HAL_Elaps_Ticks>
 800a502:	4603      	mov	r3, r0
 800a504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a508:	f0c0 80e4 	bcc.w	800a6d4 <Process_Data_from_Other+0x1ec>
	{
		Prev_Receive_CLK = HAL_GetTick();
 800a50c:	f00b fa32 	bl	8015974 <HAL_GetTick>
 800a510:	4603      	mov	r3, r0
 800a512:	4a8c      	ldr	r2, [pc, #560]	; (800a744 <Process_Data_from_Other+0x25c>)
 800a514:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 800a516:	4b8d      	ldr	r3, [pc, #564]	; (800a74c <Process_Data_from_Other+0x264>)
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d007      	beq.n	800a52e <Process_Data_from_Other+0x46>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 800a51e:	4b8c      	ldr	r3, [pc, #560]	; (800a750 <Process_Data_from_Other+0x268>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	f043 0301 	orr.w	r3, r3, #1
 800a526:	b2da      	uxtb	r2, r3
 800a528:	4b89      	ldr	r3, [pc, #548]	; (800a750 <Process_Data_from_Other+0x268>)
 800a52a:	701a      	strb	r2, [r3, #0]
 800a52c:	e006      	b.n	800a53c <Process_Data_from_Other+0x54>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 800a52e:	4b88      	ldr	r3, [pc, #544]	; (800a750 <Process_Data_from_Other+0x268>)
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	f023 0301 	bic.w	r3, r3, #1
 800a536:	b2da      	uxtb	r2, r3
 800a538:	4b85      	ldr	r3, [pc, #532]	; (800a750 <Process_Data_from_Other+0x268>)
 800a53a:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 800a53c:	4b85      	ldr	r3, [pc, #532]	; (800a754 <Process_Data_from_Other+0x26c>)
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d007      	beq.n	800a554 <Process_Data_from_Other+0x6c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 800a544:	4b82      	ldr	r3, [pc, #520]	; (800a750 <Process_Data_from_Other+0x268>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	f043 0302 	orr.w	r3, r3, #2
 800a54c:	b2da      	uxtb	r2, r3
 800a54e:	4b80      	ldr	r3, [pc, #512]	; (800a750 <Process_Data_from_Other+0x268>)
 800a550:	701a      	strb	r2, [r3, #0]
 800a552:	e006      	b.n	800a562 <Process_Data_from_Other+0x7a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 800a554:	4b7e      	ldr	r3, [pc, #504]	; (800a750 <Process_Data_from_Other+0x268>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	f023 0302 	bic.w	r3, r3, #2
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	4b7c      	ldr	r3, [pc, #496]	; (800a750 <Process_Data_from_Other+0x268>)
 800a560:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 800a562:	4b7b      	ldr	r3, [pc, #492]	; (800a750 <Process_Data_from_Other+0x268>)
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	2b03      	cmp	r3, #3
 800a568:	f200 809a 	bhi.w	800a6a0 <Process_Data_from_Other+0x1b8>
 800a56c:	a201      	add	r2, pc, #4	; (adr r2, 800a574 <Process_Data_from_Other+0x8c>)
 800a56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a572:	bf00      	nop
 800a574:	0800a585 	.word	0x0800a585
 800a578:	0800a615 	.word	0x0800a615
 800a57c:	0800a593 	.word	0x0800a593
 800a580:	0800a665 	.word	0x0800a665
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a584:	4b71      	ldr	r3, [pc, #452]	; (800a74c <Process_Data_from_Other+0x264>)
 800a586:	785b      	ldrb	r3, [r3, #1]
 800a588:	3301      	adds	r3, #1
 800a58a:	b2da      	uxtb	r2, r3
 800a58c:	4b6f      	ldr	r3, [pc, #444]	; (800a74c <Process_Data_from_Other+0x264>)
 800a58e:	705a      	strb	r2, [r3, #1]
			break;
 800a590:	e086      	b.n	800a6a0 <Process_Data_from_Other+0x1b8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a592:	4b70      	ldr	r3, [pc, #448]	; (800a754 <Process_Data_from_Other+0x26c>)
 800a594:	685a      	ldr	r2, [r3, #4]
 800a596:	4b6d      	ldr	r3, [pc, #436]	; (800a74c <Process_Data_from_Other+0x264>)
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d02f      	beq.n	800a5fe <Process_Data_from_Other+0x116>
			{
				if( (Received_CAN_Relay_Status == YES) )
 800a59e:	4b6e      	ldr	r3, [pc, #440]	; (800a758 <Process_Data_from_Other+0x270>)
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d179      	bne.n	800a69a <Process_Data_from_Other+0x1b2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 800a5a6:	4b69      	ldr	r3, [pc, #420]	; (800a74c <Process_Data_from_Other+0x264>)
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	486b      	ldr	r0, [pc, #428]	; (800a75c <Process_Data_from_Other+0x274>)
 800a5ae:	f018 f9df 	bl	8022970 <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 800a5b2:	4b68      	ldr	r3, [pc, #416]	; (800a754 <Process_Data_from_Other+0x26c>)
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4869      	ldr	r0, [pc, #420]	; (800a760 <Process_Data_from_Other+0x278>)
 800a5ba:	f018 f9d9 	bl	8022970 <iprintf>
					Received_CAN_Relay_Status=NO;
 800a5be:	4b66      	ldr	r3, [pc, #408]	; (800a758 <Process_Data_from_Other+0x270>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 800a5c4:	4867      	ldr	r0, [pc, #412]	; (800a764 <Process_Data_from_Other+0x27c>)
 800a5c6:	f018 fa6f 	bl	8022aa8 <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a5ca:	4a67      	ldr	r2, [pc, #412]	; (800a768 <Process_Data_from_Other+0x280>)
 800a5cc:	4b67      	ldr	r3, [pc, #412]	; (800a76c <Process_Data_from_Other+0x284>)
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	2384      	movs	r3, #132	; 0x84
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	f018 f8bb 	bl	8022750 <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 800a5da:	4a65      	ldr	r2, [pc, #404]	; (800a770 <Process_Data_from_Other+0x288>)
 800a5dc:	4b62      	ldr	r3, [pc, #392]	; (800a768 <Process_Data_from_Other+0x280>)
 800a5de:	4614      	mov	r4, r2
 800a5e0:	461d      	mov	r5, r3
 800a5e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a5ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800a5f2:	4b5d      	ldr	r3, [pc, #372]	; (800a768 <Process_Data_from_Other+0x280>)
 800a5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5f8:	4a54      	ldr	r2, [pc, #336]	; (800a74c <Process_Data_from_Other+0x264>)
 800a5fa:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800a5fc:	e04d      	b.n	800a69a <Process_Data_from_Other+0x1b2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a5fe:	4b53      	ldr	r3, [pc, #332]	; (800a74c <Process_Data_from_Other+0x264>)
 800a600:	2200      	movs	r2, #0
 800a602:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a604:	4b5b      	ldr	r3, [pc, #364]	; (800a774 <Process_Data_from_Other+0x28c>)
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	f023 0301 	bic.w	r3, r3, #1
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	4b59      	ldr	r3, [pc, #356]	; (800a774 <Process_Data_from_Other+0x28c>)
 800a610:	701a      	strb	r2, [r3, #0]
			break;
 800a612:	e042      	b.n	800a69a <Process_Data_from_Other+0x1b2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a614:	4b4f      	ldr	r3, [pc, #316]	; (800a754 <Process_Data_from_Other+0x26c>)
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	4b4c      	ldr	r3, [pc, #304]	; (800a74c <Process_Data_from_Other+0x264>)
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d016      	beq.n	800a64e <Process_Data_from_Other+0x166>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a620:	4855      	ldr	r0, [pc, #340]	; (800a778 <Process_Data_from_Other+0x290>)
 800a622:	f018 fa41 	bl	8022aa8 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a626:	4b49      	ldr	r3, [pc, #292]	; (800a74c <Process_Data_from_Other+0x264>)
 800a628:	785b      	ldrb	r3, [r3, #1]
 800a62a:	3301      	adds	r3, #1
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	4b47      	ldr	r3, [pc, #284]	; (800a74c <Process_Data_from_Other+0x264>)
 800a630:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800a632:	4b46      	ldr	r3, [pc, #280]	; (800a74c <Process_Data_from_Other+0x264>)
 800a634:	785b      	ldrb	r3, [r3, #1]
 800a636:	2b02      	cmp	r3, #2
 800a638:	d931      	bls.n	800a69e <Process_Data_from_Other+0x1b6>
 800a63a:	4b4b      	ldr	r3, [pc, #300]	; (800a768 <Process_Data_from_Other+0x280>)
 800a63c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a640:	2b00      	cmp	r3, #0
 800a642:	d02c      	beq.n	800a69e <Process_Data_from_Other+0x1b6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800a644:	f240 2007 	movw	r0, #519	; 0x207
 800a648:	f005 f9be 	bl	800f9c8 <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a64c:	e027      	b.n	800a69e <Process_Data_from_Other+0x1b6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a64e:	4b49      	ldr	r3, [pc, #292]	; (800a774 <Process_Data_from_Other+0x28c>)
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	f023 0301 	bic.w	r3, r3, #1
 800a656:	b2da      	uxtb	r2, r3
 800a658:	4b46      	ldr	r3, [pc, #280]	; (800a774 <Process_Data_from_Other+0x28c>)
 800a65a:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a65c:	4b3b      	ldr	r3, [pc, #236]	; (800a74c <Process_Data_from_Other+0x264>)
 800a65e:	2200      	movs	r2, #0
 800a660:	705a      	strb	r2, [r3, #1]
			break;
 800a662:	e01c      	b.n	800a69e <Process_Data_from_Other+0x1b6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a664:	4b3b      	ldr	r3, [pc, #236]	; (800a754 <Process_Data_from_Other+0x26c>)
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	4b38      	ldr	r3, [pc, #224]	; (800a74c <Process_Data_from_Other+0x264>)
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d009      	beq.n	800a684 <Process_Data_from_Other+0x19c>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a670:	4841      	ldr	r0, [pc, #260]	; (800a778 <Process_Data_from_Other+0x290>)
 800a672:	f018 fa19 	bl	8022aa8 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a676:	4b35      	ldr	r3, [pc, #212]	; (800a74c <Process_Data_from_Other+0x264>)
 800a678:	785b      	ldrb	r3, [r3, #1]
 800a67a:	3301      	adds	r3, #1
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	4b33      	ldr	r3, [pc, #204]	; (800a74c <Process_Data_from_Other+0x264>)
 800a680:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a682:	e00d      	b.n	800a6a0 <Process_Data_from_Other+0x1b8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a684:	4b3b      	ldr	r3, [pc, #236]	; (800a774 <Process_Data_from_Other+0x28c>)
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	f023 0301 	bic.w	r3, r3, #1
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	4b39      	ldr	r3, [pc, #228]	; (800a774 <Process_Data_from_Other+0x28c>)
 800a690:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a692:	4b2e      	ldr	r3, [pc, #184]	; (800a74c <Process_Data_from_Other+0x264>)
 800a694:	2200      	movs	r2, #0
 800a696:	705a      	strb	r2, [r3, #1]
			break;
 800a698:	e002      	b.n	800a6a0 <Process_Data_from_Other+0x1b8>
			break;
 800a69a:	bf00      	nop
 800a69c:	e000      	b.n	800a6a0 <Process_Data_from_Other+0x1b8>
			break;
 800a69e:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800a6a0:	4b2a      	ldr	r3, [pc, #168]	; (800a74c <Process_Data_from_Other+0x264>)
 800a6a2:	785a      	ldrb	r2, [r3, #1]
 800a6a4:	4b35      	ldr	r3, [pc, #212]	; (800a77c <Process_Data_from_Other+0x294>)
 800a6a6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d312      	bcc.n	800a6d4 <Process_Data_from_Other+0x1ec>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a6ae:	4b31      	ldr	r3, [pc, #196]	; (800a774 <Process_Data_from_Other+0x28c>)
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d10c      	bne.n	800a6d4 <Process_Data_from_Other+0x1ec>
			{
				printf("MisMatch Count Reached\n");
 800a6ba:	4831      	ldr	r0, [pc, #196]	; (800a780 <Process_Data_from_Other+0x298>)
 800a6bc:	f018 f9f4 	bl	8022aa8 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a6c0:	4b22      	ldr	r3, [pc, #136]	; (800a74c <Process_Data_from_Other+0x264>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a6c6:	4b2b      	ldr	r3, [pc, #172]	; (800a774 <Process_Data_from_Other+0x28c>)
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	f043 0301 	orr.w	r3, r3, #1
 800a6ce:	b2da      	uxtb	r2, r3
 800a6d0:	4b28      	ldr	r3, [pc, #160]	; (800a774 <Process_Data_from_Other+0x28c>)
 800a6d2:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800a6d4:	4b1c      	ldr	r3, [pc, #112]	; (800a748 <Process_Data_from_Other+0x260>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f004 fbc1 	bl	800ee60 <HAL_Elaps_Ticks>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	4b26      	ldr	r3, [pc, #152]	; (800a77c <Process_Data_from_Other+0x294>)
 800a6e2:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d92a      	bls.n	800a740 <Process_Data_from_Other+0x258>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800a6ea:	4b26      	ldr	r3, [pc, #152]	; (800a784 <Process_Data_from_Other+0x29c>)
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	4b16      	ldr	r3, [pc, #88]	; (800a748 <Process_Data_from_Other+0x260>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d024      	beq.n	800a740 <Process_Data_from_Other+0x258>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800a6f6:	4b14      	ldr	r3, [pc, #80]	; (800a748 <Process_Data_from_Other+0x260>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a22      	ldr	r2, [pc, #136]	; (800a784 <Process_Data_from_Other+0x29c>)
 800a6fc:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800a6fe:	4b12      	ldr	r3, [pc, #72]	; (800a748 <Process_Data_from_Other+0x260>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4618      	mov	r0, r3
 800a704:	f004 fbac 	bl	800ee60 <HAL_Elaps_Ticks>
 800a708:	4603      	mov	r3, r0
 800a70a:	4a1f      	ldr	r2, [pc, #124]	; (800a788 <Process_Data_from_Other+0x2a0>)
 800a70c:	fba2 2303 	umull	r2, r3, r2, r3
 800a710:	099b      	lsrs	r3, r3, #6
 800a712:	4619      	mov	r1, r3
 800a714:	481d      	ldr	r0, [pc, #116]	; (800a78c <Process_Data_from_Other+0x2a4>)
 800a716:	f018 f92b 	bl	8022970 <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800a71a:	4b0b      	ldr	r3, [pc, #44]	; (800a748 <Process_Data_from_Other+0x260>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4619      	mov	r1, r3
 800a720:	481b      	ldr	r0, [pc, #108]	; (800a790 <Process_Data_from_Other+0x2a8>)
 800a722:	f018 f925 	bl	8022970 <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a726:	4b13      	ldr	r3, [pc, #76]	; (800a774 <Process_Data_from_Other+0x28c>)
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	f003 0302 	and.w	r3, r3, #2
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d106      	bne.n	800a740 <Process_Data_from_Other+0x258>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a732:	4b10      	ldr	r3, [pc, #64]	; (800a774 <Process_Data_from_Other+0x28c>)
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	f043 0302 	orr.w	r3, r3, #2
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	4b0d      	ldr	r3, [pc, #52]	; (800a774 <Process_Data_from_Other+0x28c>)
 800a73e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800a740:	bf00      	nop
 800a742:	bdb0      	pop	{r4, r5, r7, pc}
 800a744:	2000286c 	.word	0x2000286c
 800a748:	2000215c 	.word	0x2000215c
 800a74c:	200026b0 	.word	0x200026b0
 800a750:	2000215a 	.word	0x2000215a
 800a754:	200026b8 	.word	0x200026b8
 800a758:	20002159 	.word	0x20002159
 800a75c:	08025ce0 	.word	0x08025ce0
 800a760:	08025cf8 	.word	0x08025cf8
 800a764:	08025d10 	.word	0x08025d10
 800a768:	200026c8 	.word	0x200026c8
 800a76c:	2000274c 	.word	0x2000274c
 800a770:	20002670 	.word	0x20002670
 800a774:	200026a0 	.word	0x200026a0
 800a778:	08025d44 	.word	0x08025d44
 800a77c:	20000304 	.word	0x20000304
 800a780:	08025d68 	.word	0x08025d68
 800a784:	20002870 	.word	0x20002870
 800a788:	10624dd3 	.word	0x10624dd3
 800a78c:	08025d80 	.word	0x08025d80
 800a790:	08025db0 	.word	0x08025db0

0800a794 <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800a798:	482a      	ldr	r0, [pc, #168]	; (800a844 <Print_Medha_Self_Details+0xb0>)
 800a79a:	f018 f985 	bl	8022aa8 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800a79e:	4b2a      	ldr	r3, [pc, #168]	; (800a848 <Print_Medha_Self_Details+0xb4>)
 800a7a0:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4829      	ldr	r0, [pc, #164]	; (800a84c <Print_Medha_Self_Details+0xb8>)
 800a7a8:	f018 f8e2 	bl	8022970 <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800a7ac:	4b26      	ldr	r3, [pc, #152]	; (800a848 <Print_Medha_Self_Details+0xb4>)
 800a7ae:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	4826      	ldr	r0, [pc, #152]	; (800a850 <Print_Medha_Self_Details+0xbc>)
 800a7b6:	f018 f8db 	bl	8022970 <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800a7ba:	4b23      	ldr	r3, [pc, #140]	; (800a848 <Print_Medha_Self_Details+0xb4>)
 800a7bc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4824      	ldr	r0, [pc, #144]	; (800a854 <Print_Medha_Self_Details+0xc0>)
 800a7c4:	f018 f8d4 	bl	8022970 <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800a7c8:	4b1f      	ldr	r3, [pc, #124]	; (800a848 <Print_Medha_Self_Details+0xb4>)
 800a7ca:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	4821      	ldr	r0, [pc, #132]	; (800a858 <Print_Medha_Self_Details+0xc4>)
 800a7d2:	f018 f8cd 	bl	8022970 <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800a7d6:	4b1c      	ldr	r3, [pc, #112]	; (800a848 <Print_Medha_Self_Details+0xb4>)
 800a7d8:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a7dc:	4619      	mov	r1, r3
 800a7de:	481f      	ldr	r0, [pc, #124]	; (800a85c <Print_Medha_Self_Details+0xc8>)
 800a7e0:	f018 f8c6 	bl	8022970 <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800a7e4:	4b18      	ldr	r3, [pc, #96]	; (800a848 <Print_Medha_Self_Details+0xb4>)
 800a7e6:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	481c      	ldr	r0, [pc, #112]	; (800a860 <Print_Medha_Self_Details+0xcc>)
 800a7ee:	f018 f8bf 	bl	8022970 <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800a7f2:	4b15      	ldr	r3, [pc, #84]	; (800a848 <Print_Medha_Self_Details+0xb4>)
 800a7f4:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	481a      	ldr	r0, [pc, #104]	; (800a864 <Print_Medha_Self_Details+0xd0>)
 800a7fc:	f018 f8b8 	bl	8022970 <iprintf>
	printf("NoofRelays                    :%u\n",EI_data.Medha_Prms_st.NoofRelays);
 800a800:	4b11      	ldr	r3, [pc, #68]	; (800a848 <Print_Medha_Self_Details+0xb4>)
 800a802:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a806:	4619      	mov	r1, r3
 800a808:	4817      	ldr	r0, [pc, #92]	; (800a868 <Print_Medha_Self_Details+0xd4>)
 800a80a:	f018 f8b1 	bl	8022970 <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800a80e:	4b0e      	ldr	r3, [pc, #56]	; (800a848 <Print_Medha_Self_Details+0xb4>)
 800a810:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a814:	4619      	mov	r1, r3
 800a816:	4815      	ldr	r0, [pc, #84]	; (800a86c <Print_Medha_Self_Details+0xd8>)
 800a818:	f018 f8aa 	bl	8022970 <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800a81c:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <Print_Medha_Self_Details+0xb4>)
 800a81e:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800a822:	4619      	mov	r1, r3
 800a824:	4812      	ldr	r0, [pc, #72]	; (800a870 <Print_Medha_Self_Details+0xdc>)
 800a826:	f018 f8a3 	bl	8022970 <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800a82a:	4b07      	ldr	r3, [pc, #28]	; (800a848 <Print_Medha_Self_Details+0xb4>)
 800a82c:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800a830:	4619      	mov	r1, r3
 800a832:	4810      	ldr	r0, [pc, #64]	; (800a874 <Print_Medha_Self_Details+0xe0>)
 800a834:	f018 f89c 	bl	8022970 <iprintf>


#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800a838:	4802      	ldr	r0, [pc, #8]	; (800a844 <Print_Medha_Self_Details+0xb0>)
 800a83a:	f018 f935 	bl	8022aa8 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 800a83e:	bf00      	nop
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	08025dd8 	.word	0x08025dd8
 800a848:	20000304 	.word	0x20000304
 800a84c:	08025e2c 	.word	0x08025e2c
 800a850:	08025e50 	.word	0x08025e50
 800a854:	08025e74 	.word	0x08025e74
 800a858:	08025e98 	.word	0x08025e98
 800a85c:	08025ebc 	.word	0x08025ebc
 800a860:	08025ee0 	.word	0x08025ee0
 800a864:	08025f04 	.word	0x08025f04
 800a868:	08025f28 	.word	0x08025f28
 800a86c:	08025f4c 	.word	0x08025f4c
 800a870:	08025f70 	.word	0x08025f70
 800a874:	08025f94 	.word	0x08025f94

0800a878 <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b09a      	sub	sp, #104	; 0x68
 800a87c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800a87e:	2300      	movs	r3, #0
 800a880:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800a890:	2300      	movs	r3, #0
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	1d3b      	adds	r3, r7, #4
 800a896:	2260      	movs	r2, #96	; 0x60
 800a898:	2100      	movs	r1, #0
 800a89a:	4618      	mov	r0, r3
 800a89c:	f017 ff80 	bl	80227a0 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800a8a0:	4bb9      	ldr	r3, [pc, #740]	; (800ab88 <CheckforMedhaCMD+0x310>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f004 fadb 	bl	800ee60 <HAL_Elaps_Ticks>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b09      	cmp	r3, #9
 800a8ae:	f240 81ad 	bls.w	800ac0c <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800a8b2:	e010      	b.n	800a8d6 <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	f00a fd35 	bl	8015324 <Com_Get_Byte>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800a8c0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a8c4:	1c5a      	adds	r2, r3, #1
 800a8c6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800a8ca:	3368      	adds	r3, #104	; 0x68
 800a8cc:	443b      	add	r3, r7
 800a8ce:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800a8d2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	f00a fce4 	bl	80152a4 <Com_DataReady>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1e8      	bne.n	800a8b4 <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800a8e2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 8144 	beq.w	800ab74 <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800a8ec:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a8f0:	3368      	adds	r3, #104	; 0x68
 800a8f2:	443b      	add	r3, r7
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800a8fa:	463b      	mov	r3, r7
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	48a3      	ldr	r0, [pc, #652]	; (800ab8c <CheckforMedhaCMD+0x314>)
 800a900:	f018 f836 	bl	8022970 <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800a904:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800a908:	463b      	mov	r3, r7
 800a90a:	4611      	mov	r1, r2
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fa0d 	bl	800ad2c <Is_MedhaCommand_Valid>
 800a912:	4603      	mov	r3, r0
 800a914:	2b0c      	cmp	r3, #12
 800a916:	f200 8129 	bhi.w	800ab6c <CheckforMedhaCMD+0x2f4>
 800a91a:	a201      	add	r2, pc, #4	; (adr r2, 800a920 <CheckforMedhaCMD+0xa8>)
 800a91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a920:	0800a955 	.word	0x0800a955
 800a924:	0800a963 	.word	0x0800a963
 800a928:	0800a9c7 	.word	0x0800a9c7
 800a92c:	0800a9e9 	.word	0x0800a9e9
 800a930:	0800aa11 	.word	0x0800aa11
 800a934:	0800aa39 	.word	0x0800aa39
 800a938:	0800aa61 	.word	0x0800aa61
 800a93c:	0800aa89 	.word	0x0800aa89
 800a940:	0800aab1 	.word	0x0800aab1
 800a944:	0800aad9 	.word	0x0800aad9
 800a948:	0800ab01 	.word	0x0800ab01
 800a94c:	0800ab29 	.word	0x0800ab29
 800a950:	0800ab51 	.word	0x0800ab51
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800a954:	4b8e      	ldr	r3, [pc, #568]	; (800ab90 <CheckforMedhaCMD+0x318>)
 800a956:	2201      	movs	r2, #1
 800a958:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800a95a:	488e      	ldr	r0, [pc, #568]	; (800ab94 <CheckforMedhaCMD+0x31c>)
 800a95c:	f018 f8a4 	bl	8022aa8 <puts>
				break;
 800a960:	e109      	b.n	800ab76 <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800a962:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a966:	3b01      	subs	r3, #1
 800a968:	3368      	adds	r3, #104	; 0x68
 800a96a:	443b      	add	r3, r7
 800a96c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a970:	3b30      	subs	r3, #48	; 0x30
 800a972:	461a      	mov	r2, r3
 800a974:	4988      	ldr	r1, [pc, #544]	; (800ab98 <CheckforMedhaCMD+0x320>)
 800a976:	4889      	ldr	r0, [pc, #548]	; (800ab9c <CheckforMedhaCMD+0x324>)
 800a978:	f017 fffa 	bl	8022970 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800a97c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a980:	3b01      	subs	r3, #1
 800a982:	3368      	adds	r3, #104	; 0x68
 800a984:	443b      	add	r3, r7
 800a986:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a98a:	2b2f      	cmp	r3, #47	; 0x2f
 800a98c:	d914      	bls.n	800a9b8 <CheckforMedhaCMD+0x140>
 800a98e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a992:	3b01      	subs	r3, #1
 800a994:	3368      	adds	r3, #104	; 0x68
 800a996:	443b      	add	r3, r7
 800a998:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a99c:	2b32      	cmp	r3, #50	; 0x32
 800a99e:	d80b      	bhi.n	800a9b8 <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800a9a0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	3368      	adds	r3, #104	; 0x68
 800a9a8:	443b      	add	r3, r7
 800a9aa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a9ae:	3b30      	subs	r3, #48	; 0x30
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	4b7b      	ldr	r3, [pc, #492]	; (800aba0 <CheckforMedhaCMD+0x328>)
 800a9b4:	701a      	strb	r2, [r3, #0]
 800a9b6:	e002      	b.n	800a9be <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800a9b8:	487a      	ldr	r0, [pc, #488]	; (800aba4 <CheckforMedhaCMD+0x32c>)
 800a9ba:	f018 f875 	bl	8022aa8 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a9c4:	e0d7      	b.n	800ab76 <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800a9c6:	4978      	ldr	r1, [pc, #480]	; (800aba8 <CheckforMedhaCMD+0x330>)
 800a9c8:	4878      	ldr	r0, [pc, #480]	; (800abac <CheckforMedhaCMD+0x334>)
 800a9ca:	f017 ffd1 	bl	8022970 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800a9ce:	4878      	ldr	r0, [pc, #480]	; (800abb0 <CheckforMedhaCMD+0x338>)
 800a9d0:	f018 f86a 	bl	8022aa8 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a9d4:	4b77      	ldr	r3, [pc, #476]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f043 0301 	orr.w	r3, r3, #1
 800a9dc:	4a75      	ldr	r2, [pc, #468]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800a9de:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a9e6:	e0c6      	b.n	800ab76 <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800a9e8:	4973      	ldr	r1, [pc, #460]	; (800abb8 <CheckforMedhaCMD+0x340>)
 800a9ea:	4870      	ldr	r0, [pc, #448]	; (800abac <CheckforMedhaCMD+0x334>)
 800a9ec:	f017 ffc0 	bl	8022970 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800a9f0:	4872      	ldr	r0, [pc, #456]	; (800abbc <CheckforMedhaCMD+0x344>)
 800a9f2:	f018 f859 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a9f6:	4b6f      	ldr	r3, [pc, #444]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a9fc:	4b6d      	ldr	r3, [pc, #436]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f043 0302 	orr.w	r3, r3, #2
 800aa04:	4a6b      	ldr	r2, [pc, #428]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aa06:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa0e:	e0b2      	b.n	800ab76 <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800aa10:	496b      	ldr	r1, [pc, #428]	; (800abc0 <CheckforMedhaCMD+0x348>)
 800aa12:	4866      	ldr	r0, [pc, #408]	; (800abac <CheckforMedhaCMD+0x334>)
 800aa14:	f017 ffac 	bl	8022970 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800aa18:	486a      	ldr	r0, [pc, #424]	; (800abc4 <CheckforMedhaCMD+0x34c>)
 800aa1a:	f018 f845 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aa1e:	4b65      	ldr	r3, [pc, #404]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aa24:	4b63      	ldr	r3, [pc, #396]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f043 0304 	orr.w	r3, r3, #4
 800aa2c:	4a61      	ldr	r2, [pc, #388]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aa2e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa30:	2301      	movs	r3, #1
 800aa32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa36:	e09e      	b.n	800ab76 <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800aa38:	4963      	ldr	r1, [pc, #396]	; (800abc8 <CheckforMedhaCMD+0x350>)
 800aa3a:	485c      	ldr	r0, [pc, #368]	; (800abac <CheckforMedhaCMD+0x334>)
 800aa3c:	f017 ff98 	bl	8022970 <iprintf>
				printf("INVALID_DES_PORT\n");
 800aa40:	4862      	ldr	r0, [pc, #392]	; (800abcc <CheckforMedhaCMD+0x354>)
 800aa42:	f018 f831 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aa46:	4b5b      	ldr	r3, [pc, #364]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aa4c:	4b59      	ldr	r3, [pc, #356]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f043 0308 	orr.w	r3, r3, #8
 800aa54:	4a57      	ldr	r2, [pc, #348]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aa56:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa5e:	e08a      	b.n	800ab76 <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800aa60:	495b      	ldr	r1, [pc, #364]	; (800abd0 <CheckforMedhaCMD+0x358>)
 800aa62:	4852      	ldr	r0, [pc, #328]	; (800abac <CheckforMedhaCMD+0x334>)
 800aa64:	f017 ff84 	bl	8022970 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800aa68:	485a      	ldr	r0, [pc, #360]	; (800abd4 <CheckforMedhaCMD+0x35c>)
 800aa6a:	f018 f81d 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aa6e:	4b51      	ldr	r3, [pc, #324]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aa70:	2200      	movs	r2, #0
 800aa72:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aa74:	4b4f      	ldr	r3, [pc, #316]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f043 0310 	orr.w	r3, r3, #16
 800aa7c:	4a4d      	ldr	r2, [pc, #308]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aa7e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa80:	2301      	movs	r3, #1
 800aa82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa86:	e076      	b.n	800ab76 <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800aa88:	4953      	ldr	r1, [pc, #332]	; (800abd8 <CheckforMedhaCMD+0x360>)
 800aa8a:	4848      	ldr	r0, [pc, #288]	; (800abac <CheckforMedhaCMD+0x334>)
 800aa8c:	f017 ff70 	bl	8022970 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800aa90:	4852      	ldr	r0, [pc, #328]	; (800abdc <CheckforMedhaCMD+0x364>)
 800aa92:	f018 f809 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aa96:	4b47      	ldr	r3, [pc, #284]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aa9c:	4b45      	ldr	r3, [pc, #276]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f043 0320 	orr.w	r3, r3, #32
 800aaa4:	4a43      	ldr	r2, [pc, #268]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aaa6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aaae:	e062      	b.n	800ab76 <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800aab0:	494b      	ldr	r1, [pc, #300]	; (800abe0 <CheckforMedhaCMD+0x368>)
 800aab2:	484c      	ldr	r0, [pc, #304]	; (800abe4 <CheckforMedhaCMD+0x36c>)
 800aab4:	f017 ff5c 	bl	8022970 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800aab8:	484b      	ldr	r0, [pc, #300]	; (800abe8 <CheckforMedhaCMD+0x370>)
 800aaba:	f017 fff5 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aabe:	4b3d      	ldr	r3, [pc, #244]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aac4:	4b3b      	ldr	r3, [pc, #236]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aacc:	4a39      	ldr	r2, [pc, #228]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aace:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aad0:	2301      	movs	r3, #1
 800aad2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aad6:	e04e      	b.n	800ab76 <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800aad8:	4944      	ldr	r1, [pc, #272]	; (800abec <CheckforMedhaCMD+0x374>)
 800aada:	4834      	ldr	r0, [pc, #208]	; (800abac <CheckforMedhaCMD+0x334>)
 800aadc:	f017 ff48 	bl	8022970 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800aae0:	4843      	ldr	r0, [pc, #268]	; (800abf0 <CheckforMedhaCMD+0x378>)
 800aae2:	f017 ffe1 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aae6:	4b33      	ldr	r3, [pc, #204]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aaec:	4b31      	ldr	r3, [pc, #196]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf4:	4a2f      	ldr	r2, [pc, #188]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800aaf6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aafe:	e03a      	b.n	800ab76 <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800ab00:	493c      	ldr	r1, [pc, #240]	; (800abf4 <CheckforMedhaCMD+0x37c>)
 800ab02:	482a      	ldr	r0, [pc, #168]	; (800abac <CheckforMedhaCMD+0x334>)
 800ab04:	f017 ff34 	bl	8022970 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800ab08:	483b      	ldr	r0, [pc, #236]	; (800abf8 <CheckforMedhaCMD+0x380>)
 800ab0a:	f017 ffcd 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ab0e:	4b29      	ldr	r3, [pc, #164]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800ab10:	2200      	movs	r2, #0
 800ab12:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ab14:	4b27      	ldr	r3, [pc, #156]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab1c:	4a25      	ldr	r2, [pc, #148]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800ab1e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ab20:	2301      	movs	r3, #1
 800ab22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ab26:	e026      	b.n	800ab76 <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800ab28:	4934      	ldr	r1, [pc, #208]	; (800abfc <CheckforMedhaCMD+0x384>)
 800ab2a:	4820      	ldr	r0, [pc, #128]	; (800abac <CheckforMedhaCMD+0x334>)
 800ab2c:	f017 ff20 	bl	8022970 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800ab30:	4833      	ldr	r0, [pc, #204]	; (800ac00 <CheckforMedhaCMD+0x388>)
 800ab32:	f017 ffb9 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ab36:	4b1f      	ldr	r3, [pc, #124]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ab3c:	4b1d      	ldr	r3, [pc, #116]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab44:	4a1b      	ldr	r2, [pc, #108]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800ab46:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ab4e:	e012      	b.n	800ab76 <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800ab50:	492c      	ldr	r1, [pc, #176]	; (800ac04 <CheckforMedhaCMD+0x38c>)
 800ab52:	4816      	ldr	r0, [pc, #88]	; (800abac <CheckforMedhaCMD+0x334>)
 800ab54:	f017 ff0c 	bl	8022970 <iprintf>
				printf("CLEAR ALL\n");
 800ab58:	482b      	ldr	r0, [pc, #172]	; (800ac08 <CheckforMedhaCMD+0x390>)
 800ab5a:	f017 ffa5 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ab5e:	4b15      	ldr	r3, [pc, #84]	; (800abb4 <CheckforMedhaCMD+0x33c>)
 800ab60:	2200      	movs	r2, #0
 800ab62:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800ab64:	2301      	movs	r3, #1
 800ab66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ab6a:	e004      	b.n	800ab76 <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800ab6c:	480d      	ldr	r0, [pc, #52]	; (800aba4 <CheckforMedhaCMD+0x32c>)
 800ab6e:	f017 ff9b 	bl	8022aa8 <puts>
 800ab72:	e000      	b.n	800ab76 <CheckforMedhaCMD+0x2fe>
			}
		}
 800ab74:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800ab76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d147      	bne.n	800ac0e <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800ab7e:	f240 2005 	movw	r0, #517	; 0x205
 800ab82:	f004 ff21 	bl	800f9c8 <TransmitCanPkt>
 800ab86:	e042      	b.n	800ac0e <CheckforMedhaCMD+0x396>
 800ab88:	2000a0a8 	.word	0x2000a0a8
 800ab8c:	08025fb8 	.word	0x08025fb8
 800ab90:	20000644 	.word	0x20000644
 800ab94:	08025fd0 	.word	0x08025fd0
 800ab98:	20002192 	.word	0x20002192
 800ab9c:	08026010 	.word	0x08026010
 800aba0:	20000645 	.word	0x20000645
 800aba4:	08026024 	.word	0x08026024
 800aba8:	200021c4 	.word	0x200021c4
 800abac:	08026040 	.word	0x08026040
 800abb0:	08026050 	.word	0x08026050
 800abb4:	20003518 	.word	0x20003518
 800abb8:	200021f6 	.word	0x200021f6
 800abbc:	08026068 	.word	0x08026068
 800abc0:	20002228 	.word	0x20002228
 800abc4:	08026080 	.word	0x08026080
 800abc8:	2000225a 	.word	0x2000225a
 800abcc:	08026094 	.word	0x08026094
 800abd0:	2000228c 	.word	0x2000228c
 800abd4:	080260a8 	.word	0x080260a8
 800abd8:	200022be 	.word	0x200022be
 800abdc:	080260bc 	.word	0x080260bc
 800abe0:	200022f0 	.word	0x200022f0
 800abe4:	080260d8 	.word	0x080260d8
 800abe8:	080260f0 	.word	0x080260f0
 800abec:	20002322 	.word	0x20002322
 800abf0:	08026104 	.word	0x08026104
 800abf4:	20002354 	.word	0x20002354
 800abf8:	0802611c 	.word	0x0802611c
 800abfc:	20002386 	.word	0x20002386
 800ac00:	0802613c 	.word	0x0802613c
 800ac04:	200023b8 	.word	0x200023b8
 800ac08:	0802615c 	.word	0x0802615c
		return;
 800ac0c:	bf00      	nop
		}
	}
}
 800ac0e:	3768      	adds	r7, #104	; 0x68
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800ac1e:	79fb      	ldrb	r3, [r7, #7]
 800ac20:	4a3d      	ldr	r2, [pc, #244]	; (800ad18 <Update_MedhaCommands+0x104>)
 800ac22:	2132      	movs	r1, #50	; 0x32
 800ac24:	fb01 f303 	mul.w	r3, r1, r3
 800ac28:	4413      	add	r3, r2
 800ac2a:	2224      	movs	r2, #36	; 0x24
 800ac2c:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800ac2e:	79fb      	ldrb	r3, [r7, #7]
 800ac30:	4a39      	ldr	r2, [pc, #228]	; (800ad18 <Update_MedhaCommands+0x104>)
 800ac32:	2132      	movs	r1, #50	; 0x32
 800ac34:	fb01 f303 	mul.w	r3, r1, r3
 800ac38:	4413      	add	r3, r2
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	4a35      	ldr	r2, [pc, #212]	; (800ad18 <Update_MedhaCommands+0x104>)
 800ac44:	2132      	movs	r1, #50	; 0x32
 800ac46:	fb01 f303 	mul.w	r3, r1, r3
 800ac4a:	4413      	add	r3, r2
 800ac4c:	3302      	adds	r3, #2
 800ac4e:	2230      	movs	r2, #48	; 0x30
 800ac50:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800ac52:	79fb      	ldrb	r3, [r7, #7]
 800ac54:	4a30      	ldr	r2, [pc, #192]	; (800ad18 <Update_MedhaCommands+0x104>)
 800ac56:	2132      	movs	r1, #50	; 0x32
 800ac58:	fb01 f303 	mul.w	r3, r1, r3
 800ac5c:	4413      	add	r3, r2
 800ac5e:	3303      	adds	r3, #3
 800ac60:	2240      	movs	r2, #64	; 0x40
 800ac62:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800ac64:	79fb      	ldrb	r3, [r7, #7]
 800ac66:	4a2c      	ldr	r2, [pc, #176]	; (800ad18 <Update_MedhaCommands+0x104>)
 800ac68:	2132      	movs	r1, #50	; 0x32
 800ac6a:	fb01 f303 	mul.w	r3, r1, r3
 800ac6e:	4413      	add	r3, r2
 800ac70:	3304      	adds	r3, #4
 800ac72:	22c0      	movs	r2, #192	; 0xc0
 800ac74:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800ac76:	79fb      	ldrb	r3, [r7, #7]
 800ac78:	4a27      	ldr	r2, [pc, #156]	; (800ad18 <Update_MedhaCommands+0x104>)
 800ac7a:	2132      	movs	r1, #50	; 0x32
 800ac7c:	fb01 f303 	mul.w	r3, r1, r3
 800ac80:	4413      	add	r3, r2
 800ac82:	3305      	adds	r3, #5
 800ac84:	224e      	movs	r2, #78	; 0x4e
 800ac86:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800ac88:	79fb      	ldrb	r3, [r7, #7]
 800ac8a:	4a23      	ldr	r2, [pc, #140]	; (800ad18 <Update_MedhaCommands+0x104>)
 800ac8c:	2132      	movs	r1, #50	; 0x32
 800ac8e:	fb01 f303 	mul.w	r3, r1, r3
 800ac92:	4413      	add	r3, r2
 800ac94:	3306      	adds	r3, #6
 800ac96:	2226      	movs	r2, #38	; 0x26
 800ac98:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800ac9a:	79fb      	ldrb	r3, [r7, #7]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800aca0:	79fb      	ldrb	r3, [r7, #7]
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	71fa      	strb	r2, [r7, #7]
 800aca6:	461a      	mov	r2, r3
 800aca8:	2332      	movs	r3, #50	; 0x32
 800acaa:	fb02 f303 	mul.w	r3, r2, r3
 800acae:	4a1a      	ldr	r2, [pc, #104]	; (800ad18 <Update_MedhaCommands+0x104>)
 800acb0:	4413      	add	r3, r2
 800acb2:	491a      	ldr	r1, [pc, #104]	; (800ad1c <Update_MedhaCommands+0x108>)
 800acb4:	461a      	mov	r2, r3
 800acb6:	460b      	mov	r3, r1
 800acb8:	cb03      	ldmia	r3!, {r0, r1}
 800acba:	6010      	str	r0, [r2, #0]
 800acbc:	6051      	str	r1, [r2, #4]
 800acbe:	8819      	ldrh	r1, [r3, #0]
 800acc0:	789b      	ldrb	r3, [r3, #2]
 800acc2:	8111      	strh	r1, [r2, #8]
 800acc4:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800acc6:	79fb      	ldrb	r3, [r7, #7]
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	71fa      	strb	r2, [r7, #7]
 800accc:	461a      	mov	r2, r3
 800acce:	2332      	movs	r3, #50	; 0x32
 800acd0:	fb02 f303 	mul.w	r3, r2, r3
 800acd4:	4a10      	ldr	r2, [pc, #64]	; (800ad18 <Update_MedhaCommands+0x104>)
 800acd6:	4413      	add	r3, r2
 800acd8:	4911      	ldr	r1, [pc, #68]	; (800ad20 <Update_MedhaCommands+0x10c>)
 800acda:	461a      	mov	r2, r3
 800acdc:	460b      	mov	r3, r1
 800acde:	cb03      	ldmia	r3!, {r0, r1}
 800ace0:	6010      	str	r0, [r2, #0]
 800ace2:	6051      	str	r1, [r2, #4]
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800ace8:	79fb      	ldrb	r3, [r7, #7]
 800acea:	1c5a      	adds	r2, r3, #1
 800acec:	71fa      	strb	r2, [r7, #7]
 800acee:	461a      	mov	r2, r3
 800acf0:	2332      	movs	r3, #50	; 0x32
 800acf2:	fb02 f303 	mul.w	r3, r2, r3
 800acf6:	4a08      	ldr	r2, [pc, #32]	; (800ad18 <Update_MedhaCommands+0x104>)
 800acf8:	4413      	add	r3, r2
 800acfa:	4a0a      	ldr	r2, [pc, #40]	; (800ad24 <Update_MedhaCommands+0x110>)
 800acfc:	6810      	ldr	r0, [r2, #0]
 800acfe:	6018      	str	r0, [r3, #0]
 800ad00:	7912      	ldrb	r2, [r2, #4]
 800ad02:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800ad04:	4a08      	ldr	r2, [pc, #32]	; (800ad28 <Update_MedhaCommands+0x114>)
 800ad06:	79fb      	ldrb	r3, [r7, #7]
 800ad08:	7013      	strb	r3, [r2, #0]
}
 800ad0a:	bf00      	nop
 800ad0c:	370c      	adds	r7, #12
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	20002160 	.word	0x20002160
 800ad1c:	08026168 	.word	0x08026168
 800ad20:	08026174 	.word	0x08026174
 800ad24:	08026180 	.word	0x08026180
 800ad28:	20002548 	.word	0x20002548

0800ad2c <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800ad2c:	b590      	push	{r4, r7, lr}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	460b      	mov	r3, r1
 800ad36:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800ad38:	2300      	movs	r3, #0
 800ad3a:	73fb      	strb	r3, [r7, #15]
 800ad3c:	e01c      	b.n	800ad78 <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
 800ad40:	2232      	movs	r2, #50	; 0x32
 800ad42:	fb02 f303 	mul.w	r3, r2, r3
 800ad46:	4a11      	ldr	r2, [pc, #68]	; (800ad8c <Is_MedhaCommand_Valid+0x60>)
 800ad48:	189c      	adds	r4, r3, r2
 800ad4a:	7bfb      	ldrb	r3, [r7, #15]
 800ad4c:	2232      	movs	r2, #50	; 0x32
 800ad4e:	fb02 f303 	mul.w	r3, r2, r3
 800ad52:	4a0e      	ldr	r2, [pc, #56]	; (800ad8c <Is_MedhaCommand_Valid+0x60>)
 800ad54:	4413      	add	r3, r2
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7f5 fa7c 	bl	8000254 <strlen>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	461a      	mov	r2, r3
 800ad60:	4621      	mov	r1, r4
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f017 fce4 	bl	8022730 <memcmp>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d101      	bne.n	800ad72 <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
 800ad70:	e008      	b.n	800ad84 <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
 800ad74:	3301      	adds	r3, #1
 800ad76:	73fb      	strb	r3, [r7, #15]
 800ad78:	4b05      	ldr	r3, [pc, #20]	; (800ad90 <Is_MedhaCommand_Valid+0x64>)
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	7bfa      	ldrb	r2, [r7, #15]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d3dd      	bcc.n	800ad3e <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800ad82:	23ff      	movs	r3, #255	; 0xff
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd90      	pop	{r4, r7, pc}
 800ad8c:	20002160 	.word	0x20002160
 800ad90:	20002548 	.word	0x20002548

0800ad94 <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b087      	sub	sp, #28
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	6039      	str	r1, [r7, #0]
 800ad9e:	80fb      	strh	r3, [r7, #6]
 800ada0:	4613      	mov	r3, r2
 800ada2:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800ada4:	2300      	movs	r3, #0
 800ada6:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800adac:	2300      	movs	r3, #0
 800adae:	60fb      	str	r3, [r7, #12]

	//	printf("\nstart cRc us_Start=%d end =%d\n",us_Start,us_End);
	for(i = us_Start ;i < us_End;i++)
 800adb0:	88fb      	ldrh	r3, [r7, #6]
 800adb2:	613b      	str	r3, [r7, #16]
 800adb4:	e015      	b.n	800ade2 <GetCRC32+0x4e>
	{
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	440b      	add	r3, r1
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	4053      	eors	r3, r2
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	0a1b      	lsrs	r3, r3, #8
 800adcc:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800adce:	4a0a      	ldr	r2, [pc, #40]	; (800adf8 <GetCRC32+0x64>)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	4053      	eors	r3, r2
 800adda:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	3301      	adds	r3, #1
 800ade0:	613b      	str	r3, [r7, #16]
 800ade2:	88bb      	ldrh	r3, [r7, #4]
 800ade4:	693a      	ldr	r2, [r7, #16]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d3e5      	bcc.n	800adb6 <GetCRC32+0x22>
	}

	return Crc;
 800adea:	697b      	ldr	r3, [r7, #20]
}
 800adec:	4618      	mov	r0, r3
 800adee:	371c      	adds	r7, #28
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	08028e4c 	.word	0x08028e4c

0800adfc <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	4603      	mov	r3, r0
 800ae04:	6039      	str	r1, [r7, #0]
 800ae06:	80fb      	strh	r3, [r7, #6]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800ae14:	88ba      	ldrh	r2, [r7, #4]
 800ae16:	88fb      	ldrh	r3, [r7, #6]
 800ae18:	6839      	ldr	r1, [r7, #0]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7ff ffba 	bl	800ad94 <GetCRC32>
 800ae20:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800ae22:	88bb      	ldrh	r3, [r7, #4]
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	4413      	add	r3, r2
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d101      	bne.n	800ae38 <CheckCRC32+0x3c>
	{
		return OK;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e009      	b.n	800ae4c <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	4805      	ldr	r0, [pc, #20]	; (800ae54 <CheckCRC32+0x58>)
 800ae3e:	f017 fd97 	bl	8022970 <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800ae42:	68f9      	ldr	r1, [r7, #12]
 800ae44:	4804      	ldr	r0, [pc, #16]	; (800ae58 <CheckCRC32+0x5c>)
 800ae46:	f017 fd93 	bl	8022970 <iprintf>
		return NOT_OK;
 800ae4a:	2300      	movs	r3, #0
	}

}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	08026188 	.word	0x08026188
 800ae58:	080261a0 	.word	0x080261a0

0800ae5c <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b086      	sub	sp, #24
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	4603      	mov	r3, r0
 800ae64:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800ae66:	2300      	movs	r3, #0
 800ae68:	60fb      	str	r3, [r7, #12]
 800ae6a:	f107 0310 	add.w	r3, r7, #16
 800ae6e:	2200      	movs	r2, #0
 800ae70:	601a      	str	r2, [r3, #0]
 800ae72:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800ae74:	79fb      	ldrb	r3, [r7, #7]
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	f107 010c 	add.w	r1, r7, #12
 800ae7c:	220a      	movs	r2, #10
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f000 f846 	bl	800af10 <ReadAndFormMsg>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	dd34      	ble.n	800aef4 <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800ae8a:	7b7b      	ldrb	r3, [r7, #13]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d115      	bne.n	800aebc <CheckForRqst+0x60>
 800ae90:	7bbb      	ldrb	r3, [r7, #14]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d112      	bne.n	800aebc <CheckForRqst+0x60>
 800ae96:	7bfb      	ldrb	r3, [r7, #15]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d10f      	bne.n	800aebc <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800ae9c:	4818      	ldr	r0, [pc, #96]	; (800af00 <CheckForRqst+0xa4>)
 800ae9e:	f017 fe03 	bl	8022aa8 <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800aea2:	79fb      	ldrb	r3, [r7, #7]
 800aea4:	2202      	movs	r2, #2
 800aea6:	2101      	movs	r1, #1
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 f933 	bl	800b114 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800aeae:	f00a fd61 	bl	8015974 <HAL_GetTick>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	4a13      	ldr	r2, [pc, #76]	; (800af04 <CheckForRqst+0xa8>)
 800aeb6:	6013      	str	r3, [r2, #0]
			return 0x01;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e01c      	b.n	800aef6 <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800aebc:	7b7b      	ldrb	r3, [r7, #13]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d115      	bne.n	800aeee <CheckForRqst+0x92>
 800aec2:	7bbb      	ldrb	r3, [r7, #14]
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d112      	bne.n	800aeee <CheckForRqst+0x92>
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d10f      	bne.n	800aeee <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800aece:	480e      	ldr	r0, [pc, #56]	; (800af08 <CheckForRqst+0xac>)
 800aed0:	f017 fdea 	bl	8022aa8 <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800aed4:	79fb      	ldrb	r3, [r7, #7]
 800aed6:	2202      	movs	r2, #2
 800aed8:	2102      	movs	r1, #2
 800aeda:	4618      	mov	r0, r3
 800aedc:	f000 f91a 	bl	800b114 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800aee0:	f00a fd48 	bl	8015974 <HAL_GetTick>
 800aee4:	4603      	mov	r3, r0
 800aee6:	4a07      	ldr	r2, [pc, #28]	; (800af04 <CheckForRqst+0xa8>)
 800aee8:	6013      	str	r3, [r2, #0]
			return 0x02;
 800aeea:	2302      	movs	r3, #2
 800aeec:	e003      	b.n	800aef6 <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800aeee:	4807      	ldr	r0, [pc, #28]	; (800af0c <CheckForRqst+0xb0>)
 800aef0:	f017 fdda 	bl	8022aa8 <puts>
	}
	return 0x00;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3718      	adds	r7, #24
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	080261b8 	.word	0x080261b8
 800af04:	20000a4c 	.word	0x20000a4c
 800af08:	080261d0 	.word	0x080261d0
 800af0c:	080261e8 	.word	0x080261e8

0800af10 <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800af10:	b590      	push	{r4, r7, lr}
 800af12:	b087      	sub	sp, #28
 800af14:	af02      	add	r7, sp, #8
 800af16:	4603      	mov	r3, r0
 800af18:	6039      	str	r1, [r7, #0]
 800af1a:	80fb      	strh	r3, [r7, #6]
 800af1c:	4613      	mov	r3, r2
 800af1e:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800af20:	2300      	movs	r3, #0
 800af22:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800af24:	2300      	movs	r3, #0
 800af26:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800af28:	2300      	movs	r3, #0
 800af2a:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800af2c:	e0d4      	b.n	800b0d8 <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800af2e:	4b71      	ldr	r3, [pc, #452]	; (800b0f4 <ReadAndFormMsg+0x1e4>)
 800af30:	2201      	movs	r2, #1
 800af32:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800af34:	4870      	ldr	r0, [pc, #448]	; (800b0f8 <ReadAndFormMsg+0x1e8>)
 800af36:	f00e f883 	bl	8019040 <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800af3a:	88fb      	ldrh	r3, [r7, #6]
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	4618      	mov	r0, r3
 800af40:	f00a f9f0 	bl	8015324 <Com_Get_Byte>
 800af44:	4603      	mov	r3, r0
 800af46:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800af48:	f00a fb02 	bl	8015550 <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800af4c:	4b6b      	ldr	r3, [pc, #428]	; (800b0fc <ReadAndFormMsg+0x1ec>)
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	2b03      	cmp	r3, #3
 800af52:	f000 8099 	beq.w	800b088 <ReadAndFormMsg+0x178>
 800af56:	2b03      	cmp	r3, #3
 800af58:	f300 80b0 	bgt.w	800b0bc <ReadAndFormMsg+0x1ac>
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d002      	beq.n	800af66 <ReadAndFormMsg+0x56>
 800af60:	2b02      	cmp	r3, #2
 800af62:	d00e      	beq.n	800af82 <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800af64:	e0aa      	b.n	800b0bc <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800af66:	7bfb      	ldrb	r3, [r7, #15]
 800af68:	2b24      	cmp	r3, #36	; 0x24
 800af6a:	f040 80a9 	bne.w	800b0c0 <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	7bfa      	ldrb	r2, [r7, #15]
 800af72:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800af74:	4b62      	ldr	r3, [pc, #392]	; (800b100 <ReadAndFormMsg+0x1f0>)
 800af76:	2201      	movs	r2, #1
 800af78:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800af7a:	4b60      	ldr	r3, [pc, #384]	; (800b0fc <ReadAndFormMsg+0x1ec>)
 800af7c:	2202      	movs	r2, #2
 800af7e:	701a      	strb	r2, [r3, #0]
			break;
 800af80:	e09e      	b.n	800b0c0 <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800af82:	7bfb      	ldrb	r3, [r7, #15]
 800af84:	2b26      	cmp	r3, #38	; 0x26
 800af86:	d006      	beq.n	800af96 <ReadAndFormMsg+0x86>
 800af88:	2b26      	cmp	r3, #38	; 0x26
 800af8a:	dc6e      	bgt.n	800b06a <ReadAndFormMsg+0x15a>
 800af8c:	2b05      	cmp	r3, #5
 800af8e:	d068      	beq.n	800b062 <ReadAndFormMsg+0x152>
 800af90:	2b24      	cmp	r3, #36	; 0x24
 800af92:	d05c      	beq.n	800b04e <ReadAndFormMsg+0x13e>
 800af94:	e069      	b.n	800b06a <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800af96:	4b5a      	ldr	r3, [pc, #360]	; (800b100 <ReadAndFormMsg+0x1f0>)
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	3b02      	subs	r3, #2
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800afa0:	4b57      	ldr	r3, [pc, #348]	; (800b100 <ReadAndFormMsg+0x1f0>)
 800afa2:	881b      	ldrh	r3, [r3, #0]
 800afa4:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800afa6:	4b56      	ldr	r3, [pc, #344]	; (800b100 <ReadAndFormMsg+0x1f0>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800afac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	da01      	bge.n	800afb8 <ReadAndFormMsg+0xa8>
					return 0;
 800afb4:	2300      	movs	r3, #0
 800afb6:	e099      	b.n	800b0ec <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800afb8:	4b50      	ldr	r3, [pc, #320]	; (800b0fc <ReadAndFormMsg+0x1ec>)
 800afba:	2201      	movs	r2, #1
 800afbc:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800afbe:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800afc2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	4413      	add	r3, r2
 800afca:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800afcc:	461c      	mov	r4, r3
 800afce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800afd2:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800afd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800afd8:	3301      	adds	r3, #1
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	4413      	add	r3, r2
 800afde:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	4603      	mov	r3, r0
 800afe4:	4622      	mov	r2, r4
 800afe6:	4847      	ldr	r0, [pc, #284]	; (800b104 <ReadAndFormMsg+0x1f4>)
 800afe8:	f017 fcc2 	bl	8022970 <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800afec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aff0:	4619      	mov	r1, r3
 800aff2:	6838      	ldr	r0, [r7, #0]
 800aff4:	f007 ffd8 	bl	8012fa8 <CheckCRC>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d012      	beq.n	800b024 <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800affe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b002:	683a      	ldr	r2, [r7, #0]
 800b004:	4413      	add	r3, r2
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	4619      	mov	r1, r3
 800b00a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b00e:	3301      	adds	r3, #1
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	4413      	add	r3, r2
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	461a      	mov	r2, r3
 800b018:	483b      	ldr	r0, [pc, #236]	; (800b108 <ReadAndFormMsg+0x1f8>)
 800b01a:	f017 fca9 	bl	8022970 <iprintf>
					return us_ReturnBytes;
 800b01e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b022:	e063      	b.n	800b0ec <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800b024:	4839      	ldr	r0, [pc, #228]	; (800b10c <ReadAndFormMsg+0x1fc>)
 800b026:	f017 fca3 	bl	8022970 <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b02a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	4413      	add	r3, r2
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	4619      	mov	r1, r3
 800b036:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b03a:	3301      	adds	r3, #1
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	4413      	add	r3, r2
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	461a      	mov	r2, r3
 800b044:	4832      	ldr	r0, [pc, #200]	; (800b110 <ReadAndFormMsg+0x200>)
 800b046:	f017 fc93 	bl	8022970 <iprintf>
					return 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	e04e      	b.n	800b0ec <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	7bfa      	ldrb	r2, [r7, #15]
 800b052:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800b054:	4b2a      	ldr	r3, [pc, #168]	; (800b100 <ReadAndFormMsg+0x1f0>)
 800b056:	2201      	movs	r2, #1
 800b058:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b05a:	4b28      	ldr	r3, [pc, #160]	; (800b0fc <ReadAndFormMsg+0x1ec>)
 800b05c:	2202      	movs	r2, #2
 800b05e:	701a      	strb	r2, [r3, #0]
				break;
 800b060:	e011      	b.n	800b086 <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800b062:	4b26      	ldr	r3, [pc, #152]	; (800b0fc <ReadAndFormMsg+0x1ec>)
 800b064:	2203      	movs	r2, #3
 800b066:	701a      	strb	r2, [r3, #0]
				break;
 800b068:	e00d      	b.n	800b086 <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800b06a:	4b25      	ldr	r3, [pc, #148]	; (800b100 <ReadAndFormMsg+0x1f0>)
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	461a      	mov	r2, r3
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	4413      	add	r3, r2
 800b074:	7bfa      	ldrb	r2, [r7, #15]
 800b076:	701a      	strb	r2, [r3, #0]
				j++;
 800b078:	4b21      	ldr	r3, [pc, #132]	; (800b100 <ReadAndFormMsg+0x1f0>)
 800b07a:	881b      	ldrh	r3, [r3, #0]
 800b07c:	3301      	adds	r3, #1
 800b07e:	b29a      	uxth	r2, r3
 800b080:	4b1f      	ldr	r3, [pc, #124]	; (800b100 <ReadAndFormMsg+0x1f0>)
 800b082:	801a      	strh	r2, [r3, #0]
				break;
 800b084:	bf00      	nop
			break;
 800b086:	e01c      	b.n	800b0c2 <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	2b24      	cmp	r3, #36	; 0x24
 800b08c:	d005      	beq.n	800b09a <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
 800b090:	2b26      	cmp	r3, #38	; 0x26
 800b092:	d002      	beq.n	800b09a <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800b094:	7bfb      	ldrb	r3, [r7, #15]
 800b096:	2b05      	cmp	r3, #5
 800b098:	d10c      	bne.n	800b0b4 <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800b09a:	4b19      	ldr	r3, [pc, #100]	; (800b100 <ReadAndFormMsg+0x1f0>)
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	7bfa      	ldrb	r2, [r7, #15]
 800b0a6:	701a      	strb	r2, [r3, #0]
					j++;
 800b0a8:	4b15      	ldr	r3, [pc, #84]	; (800b100 <ReadAndFormMsg+0x1f0>)
 800b0aa:	881b      	ldrh	r3, [r3, #0]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	4b13      	ldr	r3, [pc, #76]	; (800b100 <ReadAndFormMsg+0x1f0>)
 800b0b2:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b0b4:	4b11      	ldr	r3, [pc, #68]	; (800b0fc <ReadAndFormMsg+0x1ec>)
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	701a      	strb	r2, [r3, #0]
				break;
 800b0ba:	e002      	b.n	800b0c2 <ReadAndFormMsg+0x1b2>
				break;
 800b0bc:	bf00      	nop
 800b0be:	e000      	b.n	800b0c2 <ReadAndFormMsg+0x1b2>
			break;
 800b0c0:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800b0c2:	4b0f      	ldr	r3, [pc, #60]	; (800b100 <ReadAndFormMsg+0x1f0>)
 800b0c4:	881b      	ldrh	r3, [r3, #0]
 800b0c6:	88ba      	ldrh	r2, [r7, #4]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d805      	bhi.n	800b0d8 <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800b0cc:	4b0b      	ldr	r3, [pc, #44]	; (800b0fc <ReadAndFormMsg+0x1ec>)
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800b0d2:	4b0b      	ldr	r3, [pc, #44]	; (800b100 <ReadAndFormMsg+0x1f0>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800b0d8:	88fb      	ldrh	r3, [r7, #6]
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f00a f8e1 	bl	80152a4 <Com_DataReady>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f47f af22 	bne.w	800af2e <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3714      	adds	r7, #20
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd90      	pop	{r4, r7, pc}
 800b0f4:	20000a4a 	.word	0x20000a4a
 800b0f8:	20009d10 	.word	0x20009d10
 800b0fc:	20000117 	.word	0x20000117
 800b100:	20002874 	.word	0x20002874
 800b104:	080261f8 	.word	0x080261f8
 800b108:	08026220 	.word	0x08026220
 800b10c:	08026234 	.word	0x08026234
 800b110:	08026240 	.word	0x08026240

0800b114 <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	4603      	mov	r3, r0
 800b11c:	71fb      	strb	r3, [r7, #7]
 800b11e:	460b      	mov	r3, r1
 800b120:	71bb      	strb	r3, [r7, #6]
 800b122:	4613      	mov	r3, r2
 800b124:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800b126:	2300      	movs	r3, #0
 800b128:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800b12a:	2300      	movs	r3, #0
 800b12c:	60bb      	str	r3, [r7, #8]
 800b12e:	f107 030c 	add.w	r3, r7, #12
 800b132:	2200      	movs	r2, #0
 800b134:	601a      	str	r2, [r3, #0]
 800b136:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800b138:	2324      	movs	r3, #36	; 0x24
 800b13a:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800b13c:	79bb      	ldrb	r3, [r7, #6]
 800b13e:	121b      	asrs	r3, r3, #8
 800b140:	b2db      	uxtb	r3, r3
 800b142:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800b144:	79bb      	ldrb	r3, [r7, #6]
 800b146:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800b148:	797b      	ldrb	r3, [r7, #5]
 800b14a:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800b14c:	f107 0308 	add.w	r3, r7, #8
 800b150:	2104      	movs	r1, #4
 800b152:	4618      	mov	r0, r3
 800b154:	f007 ffd2 	bl	80130fc <ComputeCRC>
	puc_Message[6]= '&';
 800b158:	2326      	movs	r3, #38	; 0x26
 800b15a:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800b15c:	7b3b      	ldrb	r3, [r7, #12]
 800b15e:	4619      	mov	r1, r3
 800b160:	7b7b      	ldrb	r3, [r7, #13]
 800b162:	461a      	mov	r2, r3
 800b164:	480f      	ldr	r0, [pc, #60]	; (800b1a4 <SendAck+0x90>)
 800b166:	f017 fc03 	bl	8022970 <iprintf>

	AckTim=HAL_GetTick();
 800b16a:	f00a fc03 	bl	8015974 <HAL_GetTick>
 800b16e:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800b170:	e002      	b.n	800b178 <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800b172:	480d      	ldr	r0, [pc, #52]	; (800b1a8 <SendAck+0x94>)
 800b174:	f00d ff64 	bl	8019040 <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800b178:	6978      	ldr	r0, [r7, #20]
 800b17a:	f003 fe71 	bl	800ee60 <HAL_Elaps_Ticks>
 800b17e:	4603      	mov	r3, r0
 800b180:	f240 52db 	movw	r2, #1499	; 0x5db
 800b184:	4293      	cmp	r3, r2
 800b186:	d9f4      	bls.n	800b172 <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800b188:	f107 0108 	add.w	r1, r7, #8
 800b18c:	79fb      	ldrb	r3, [r7, #7]
 800b18e:	2206      	movs	r2, #6
 800b190:	4618      	mov	r0, r3
 800b192:	f00a f947 	bl	8015424 <CommTransmitMessage>

	AckTim = 0;
 800b196:	2300      	movs	r3, #0
 800b198:	617b      	str	r3, [r7, #20]
}
 800b19a:	bf00      	nop
 800b19c:	3718      	adds	r7, #24
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	0802624c 	.word	0x0802624c
 800b1a8:	20009d10 	.word	0x20009d10

0800b1ac <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	6039      	str	r1, [r7, #0]
 800b1b6:	80fb      	strh	r3, [r7, #6]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800b1c8:	e0ba      	b.n	800b340 <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800b1ca:	88fb      	ldrh	r3, [r7, #6]
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f00a f8a8 	bl	8015324 <Com_Get_Byte>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800b1d8:	f00a f9ba 	bl	8015550 <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800b1dc:	485f      	ldr	r0, [pc, #380]	; (800b35c <ReadAndFormConfig+0x1b0>)
 800b1de:	f00d ff2f 	bl	8019040 <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800b1e2:	4b5f      	ldr	r3, [pc, #380]	; (800b360 <ReadAndFormConfig+0x1b4>)
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	f000 8082 	beq.w	800b2f0 <ReadAndFormConfig+0x144>
 800b1ec:	2b03      	cmp	r3, #3
 800b1ee:	f300 8099 	bgt.w	800b324 <ReadAndFormConfig+0x178>
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d002      	beq.n	800b1fc <ReadAndFormConfig+0x50>
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d00e      	beq.n	800b218 <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800b1fa:	e093      	b.n	800b324 <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
 800b1fe:	2b24      	cmp	r3, #36	; 0x24
 800b200:	f040 8092 	bne.w	800b328 <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	7bfa      	ldrb	r2, [r7, #15]
 800b208:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800b20a:	4b56      	ldr	r3, [pc, #344]	; (800b364 <ReadAndFormConfig+0x1b8>)
 800b20c:	2201      	movs	r2, #1
 800b20e:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b210:	4b53      	ldr	r3, [pc, #332]	; (800b360 <ReadAndFormConfig+0x1b4>)
 800b212:	2202      	movs	r2, #2
 800b214:	701a      	strb	r2, [r3, #0]
			break;
 800b216:	e087      	b.n	800b328 <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	2b26      	cmp	r3, #38	; 0x26
 800b21c:	d006      	beq.n	800b22c <ReadAndFormConfig+0x80>
 800b21e:	2b26      	cmp	r3, #38	; 0x26
 800b220:	dc57      	bgt.n	800b2d2 <ReadAndFormConfig+0x126>
 800b222:	2b05      	cmp	r3, #5
 800b224:	d051      	beq.n	800b2ca <ReadAndFormConfig+0x11e>
 800b226:	2b24      	cmp	r3, #36	; 0x24
 800b228:	d045      	beq.n	800b2b6 <ReadAndFormConfig+0x10a>
 800b22a:	e052      	b.n	800b2d2 <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800b22c:	4b4d      	ldr	r3, [pc, #308]	; (800b364 <ReadAndFormConfig+0x1b8>)
 800b22e:	881b      	ldrh	r3, [r3, #0]
 800b230:	3b02      	subs	r3, #2
 800b232:	b29b      	uxth	r3, r3
 800b234:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800b236:	4b4b      	ldr	r3, [pc, #300]	; (800b364 <ReadAndFormConfig+0x1b8>)
 800b238:	881b      	ldrh	r3, [r3, #0]
 800b23a:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800b23c:	4b49      	ldr	r3, [pc, #292]	; (800b364 <ReadAndFormConfig+0x1b8>)
 800b23e:	2200      	movs	r2, #0
 800b240:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800b242:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b246:	2b00      	cmp	r3, #0
 800b248:	da01      	bge.n	800b24e <ReadAndFormConfig+0xa2>
					return 0;
 800b24a:	2300      	movs	r3, #0
 800b24c:	e082      	b.n	800b354 <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800b24e:	4b44      	ldr	r3, [pc, #272]	; (800b360 <ReadAndFormConfig+0x1b4>)
 800b250:	2201      	movs	r2, #1
 800b252:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800b254:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b258:	4619      	mov	r1, r3
 800b25a:	6838      	ldr	r0, [r7, #0]
 800b25c:	f007 fea4 	bl	8012fa8 <CheckCRC>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d012      	beq.n	800b28c <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b266:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b26a:	683a      	ldr	r2, [r7, #0]
 800b26c:	4413      	add	r3, r2
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	4619      	mov	r1, r3
 800b272:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b276:	3301      	adds	r3, #1
 800b278:	683a      	ldr	r2, [r7, #0]
 800b27a:	4413      	add	r3, r2
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	461a      	mov	r2, r3
 800b280:	4839      	ldr	r0, [pc, #228]	; (800b368 <ReadAndFormConfig+0x1bc>)
 800b282:	f017 fb75 	bl	8022970 <iprintf>
					return us_ReturnBytes;
 800b286:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b28a:	e063      	b.n	800b354 <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800b28c:	4837      	ldr	r0, [pc, #220]	; (800b36c <ReadAndFormConfig+0x1c0>)
 800b28e:	f017 fb6f 	bl	8022970 <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b292:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	4413      	add	r3, r2
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	4619      	mov	r1, r3
 800b29e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	4830      	ldr	r0, [pc, #192]	; (800b370 <ReadAndFormConfig+0x1c4>)
 800b2ae:	f017 fb5f 	bl	8022970 <iprintf>
					return 0;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e04e      	b.n	800b354 <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	7bfa      	ldrb	r2, [r7, #15]
 800b2ba:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800b2bc:	4b29      	ldr	r3, [pc, #164]	; (800b364 <ReadAndFormConfig+0x1b8>)
 800b2be:	2201      	movs	r2, #1
 800b2c0:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b2c2:	4b27      	ldr	r3, [pc, #156]	; (800b360 <ReadAndFormConfig+0x1b4>)
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	701a      	strb	r2, [r3, #0]
				break;
 800b2c8:	e011      	b.n	800b2ee <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800b2ca:	4b25      	ldr	r3, [pc, #148]	; (800b360 <ReadAndFormConfig+0x1b4>)
 800b2cc:	2203      	movs	r2, #3
 800b2ce:	701a      	strb	r2, [r3, #0]
				break;
 800b2d0:	e00d      	b.n	800b2ee <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800b2d2:	4b24      	ldr	r3, [pc, #144]	; (800b364 <ReadAndFormConfig+0x1b8>)
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	4413      	add	r3, r2
 800b2dc:	7bfa      	ldrb	r2, [r7, #15]
 800b2de:	701a      	strb	r2, [r3, #0]
				i++;
 800b2e0:	4b20      	ldr	r3, [pc, #128]	; (800b364 <ReadAndFormConfig+0x1b8>)
 800b2e2:	881b      	ldrh	r3, [r3, #0]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	4b1e      	ldr	r3, [pc, #120]	; (800b364 <ReadAndFormConfig+0x1b8>)
 800b2ea:	801a      	strh	r2, [r3, #0]
				break;
 800b2ec:	bf00      	nop
			break;
 800b2ee:	e01c      	b.n	800b32a <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
 800b2f2:	2b24      	cmp	r3, #36	; 0x24
 800b2f4:	d005      	beq.n	800b302 <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
 800b2f8:	2b26      	cmp	r3, #38	; 0x26
 800b2fa:	d002      	beq.n	800b302 <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	2b05      	cmp	r3, #5
 800b300:	d10c      	bne.n	800b31c <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800b302:	4b18      	ldr	r3, [pc, #96]	; (800b364 <ReadAndFormConfig+0x1b8>)
 800b304:	881b      	ldrh	r3, [r3, #0]
 800b306:	461a      	mov	r2, r3
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	4413      	add	r3, r2
 800b30c:	7bfa      	ldrb	r2, [r7, #15]
 800b30e:	701a      	strb	r2, [r3, #0]
					i++;
 800b310:	4b14      	ldr	r3, [pc, #80]	; (800b364 <ReadAndFormConfig+0x1b8>)
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	3301      	adds	r3, #1
 800b316:	b29a      	uxth	r2, r3
 800b318:	4b12      	ldr	r3, [pc, #72]	; (800b364 <ReadAndFormConfig+0x1b8>)
 800b31a:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b31c:	4b10      	ldr	r3, [pc, #64]	; (800b360 <ReadAndFormConfig+0x1b4>)
 800b31e:	2202      	movs	r2, #2
 800b320:	701a      	strb	r2, [r3, #0]
				break;
 800b322:	e002      	b.n	800b32a <ReadAndFormConfig+0x17e>
				break;
 800b324:	bf00      	nop
 800b326:	e000      	b.n	800b32a <ReadAndFormConfig+0x17e>
			break;
 800b328:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800b32a:	4b0e      	ldr	r3, [pc, #56]	; (800b364 <ReadAndFormConfig+0x1b8>)
 800b32c:	881b      	ldrh	r3, [r3, #0]
 800b32e:	88ba      	ldrh	r2, [r7, #4]
 800b330:	429a      	cmp	r2, r3
 800b332:	d805      	bhi.n	800b340 <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800b334:	4b0a      	ldr	r3, [pc, #40]	; (800b360 <ReadAndFormConfig+0x1b4>)
 800b336:	2201      	movs	r2, #1
 800b338:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800b33a:	4b0a      	ldr	r3, [pc, #40]	; (800b364 <ReadAndFormConfig+0x1b8>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800b340:	88fb      	ldrh	r3, [r7, #6]
 800b342:	b2db      	uxtb	r3, r3
 800b344:	4618      	mov	r0, r3
 800b346:	f009 ffad 	bl	80152a4 <Com_DataReady>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f47f af3c 	bne.w	800b1ca <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	20009d10 	.word	0x20009d10
 800b360:	20000118 	.word	0x20000118
 800b364:	20002876 	.word	0x20002876
 800b368:	08026268 	.word	0x08026268
 800b36c:	08026234 	.word	0x08026234
 800b370:	0802627c 	.word	0x0802627c

0800b374 <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	4603      	mov	r3, r0
 800b37c:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	091b      	lsrs	r3, r3, #4
 800b382:	b2db      	uxtb	r3, r3
 800b384:	461a      	mov	r2, r3
 800b386:	0092      	lsls	r2, r2, #2
 800b388:	4413      	add	r3, r2
 800b38a:	005b      	lsls	r3, r3, #1
 800b38c:	b2da      	uxtb	r2, r3
 800b38e:	79fb      	ldrb	r3, [r7, #7]
 800b390:	f003 030f 	and.w	r3, r3, #15
 800b394:	b2db      	uxtb	r3, r3
 800b396:	4413      	add	r3, r2
 800b398:	b2db      	uxtb	r3, r3
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
	...

0800b3a8 <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800b3b2:	79fb      	ldrb	r3, [r7, #7]
 800b3b4:	4a0d      	ldr	r2, [pc, #52]	; (800b3ec <Dec_to_BCD+0x44>)
 800b3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ba:	08db      	lsrs	r3, r3, #3
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	011b      	lsls	r3, r3, #4
 800b3c0:	b2d8      	uxtb	r0, r3
 800b3c2:	79fa      	ldrb	r2, [r7, #7]
 800b3c4:	4b09      	ldr	r3, [pc, #36]	; (800b3ec <Dec_to_BCD+0x44>)
 800b3c6:	fba3 1302 	umull	r1, r3, r3, r2
 800b3ca:	08d9      	lsrs	r1, r3, #3
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	440b      	add	r3, r1
 800b3d2:	005b      	lsls	r3, r3, #1
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	4403      	add	r3, r0
 800b3da:	71fb      	strb	r3, [r7, #7]
	return c;
 800b3dc:	79fb      	ldrb	r3, [r7, #7]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	cccccccd 	.word	0xcccccccd

0800b3f0 <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800b3f4:	4b0b      	ldr	r3, [pc, #44]	; (800b424 <Is_GPS_Valid+0x34>)
 800b3f6:	795b      	ldrb	r3, [r3, #5]
 800b3f8:	2b09      	cmp	r3, #9
 800b3fa:	d801      	bhi.n	800b400 <Is_GPS_Valid+0x10>
	{
		return 0;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	e00c      	b.n	800b41a <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800b400:	4b08      	ldr	r3, [pc, #32]	; (800b424 <Is_GPS_Valid+0x34>)
 800b402:	791b      	ldrb	r3, [r3, #4]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <Is_GPS_Valid+0x1c>
	{
		return 0;
 800b408:	2300      	movs	r3, #0
 800b40a:	e006      	b.n	800b41a <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800b40c:	4b05      	ldr	r3, [pc, #20]	; (800b424 <Is_GPS_Valid+0x34>)
 800b40e:	78db      	ldrb	r3, [r3, #3]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <Is_GPS_Valid+0x28>
	{
		return 0;
 800b414:	2300      	movs	r3, #0
 800b416:	e000      	b.n	800b41a <Is_GPS_Valid+0x2a>
	}
	return 1;
 800b418:	2301      	movs	r3, #1
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	20002878 	.word	0x20002878

0800b428 <Write_RTC>:


void Write_RTC(void)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b086      	sub	sp, #24
 800b42c:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800b42e:	2300      	movs	r3, #0
 800b430:	603b      	str	r3, [r7, #0]
 800b432:	1d3b      	adds	r3, r7, #4
 800b434:	2100      	movs	r1, #0
 800b436:	460a      	mov	r2, r1
 800b438:	801a      	strh	r2, [r3, #0]
 800b43a:	460a      	mov	r2, r1
 800b43c:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800b43e:	f7ff ffd7 	bl	800b3f0 <Is_GPS_Valid>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d103      	bne.n	800b450 <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800b448:	4844      	ldr	r0, [pc, #272]	; (800b55c <Write_RTC+0x134>)
 800b44a:	f017 fb2d 	bl	8022aa8 <puts>
 800b44e:	e081      	b.n	800b554 <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800b450:	4b43      	ldr	r3, [pc, #268]	; (800b560 <Write_RTC+0x138>)
 800b452:	2201      	movs	r2, #1
 800b454:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800b456:	4b43      	ldr	r3, [pc, #268]	; (800b564 <Write_RTC+0x13c>)
 800b458:	789b      	ldrb	r3, [r3, #2]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7ff ffa4 	bl	800b3a8 <Dec_to_BCD>
 800b460:	4603      	mov	r3, r0
 800b462:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800b464:	4b3f      	ldr	r3, [pc, #252]	; (800b564 <Write_RTC+0x13c>)
 800b466:	785b      	ldrb	r3, [r3, #1]
 800b468:	4618      	mov	r0, r3
 800b46a:	f7ff ff9d 	bl	800b3a8 <Dec_to_BCD>
 800b46e:	4603      	mov	r3, r0
 800b470:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800b472:	4b3c      	ldr	r3, [pc, #240]	; (800b564 <Write_RTC+0x13c>)
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	4618      	mov	r0, r3
 800b478:	f7ff ff96 	bl	800b3a8 <Dec_to_BCD>
 800b47c:	4603      	mov	r3, r0
 800b47e:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800b480:	4b38      	ldr	r3, [pc, #224]	; (800b564 <Write_RTC+0x13c>)
 800b482:	78db      	ldrb	r3, [r3, #3]
 800b484:	4618      	mov	r0, r3
 800b486:	f7ff ff8f 	bl	800b3a8 <Dec_to_BCD>
 800b48a:	4603      	mov	r3, r0
 800b48c:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800b48e:	4b35      	ldr	r3, [pc, #212]	; (800b564 <Write_RTC+0x13c>)
 800b490:	791b      	ldrb	r3, [r3, #4]
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff ff88 	bl	800b3a8 <Dec_to_BCD>
 800b498:	4603      	mov	r3, r0
 800b49a:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800b49c:	4b31      	ldr	r3, [pc, #196]	; (800b564 <Write_RTC+0x13c>)
 800b49e:	795b      	ldrb	r3, [r3, #5]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7ff ff81 	bl	800b3a8 <Dec_to_BCD>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800b4aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4ae:	9302      	str	r3, [sp, #8]
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	9301      	str	r3, [sp, #4]
 800b4b4:	463b      	mov	r3, r7
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	21d0      	movs	r1, #208	; 0xd0
 800b4be:	482a      	ldr	r0, [pc, #168]	; (800b568 <Write_RTC+0x140>)
 800b4c0:	f00d f810 	bl	80184e4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800b4c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4c8:	9302      	str	r3, [sp, #8]
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	9301      	str	r3, [sp, #4]
 800b4ce:	463b      	mov	r3, r7
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	21d0      	movs	r1, #208	; 0xd0
 800b4da:	4823      	ldr	r0, [pc, #140]	; (800b568 <Write_RTC+0x140>)
 800b4dc:	f00d f802 	bl	80184e4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800b4e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4e4:	9302      	str	r3, [sp, #8]
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	9301      	str	r3, [sp, #4]
 800b4ea:	463b      	mov	r3, r7
 800b4ec:	3302      	adds	r3, #2
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	21d0      	movs	r1, #208	; 0xd0
 800b4f6:	481c      	ldr	r0, [pc, #112]	; (800b568 <Write_RTC+0x140>)
 800b4f8:	f00c fff4 	bl	80184e4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800b4fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b500:	9302      	str	r3, [sp, #8]
 800b502:	2301      	movs	r3, #1
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	463b      	mov	r3, r7
 800b508:	3303      	adds	r3, #3
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	2301      	movs	r3, #1
 800b50e:	2204      	movs	r2, #4
 800b510:	21d0      	movs	r1, #208	; 0xd0
 800b512:	4815      	ldr	r0, [pc, #84]	; (800b568 <Write_RTC+0x140>)
 800b514:	f00c ffe6 	bl	80184e4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800b518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b51c:	9302      	str	r3, [sp, #8]
 800b51e:	2301      	movs	r3, #1
 800b520:	9301      	str	r3, [sp, #4]
 800b522:	463b      	mov	r3, r7
 800b524:	3304      	adds	r3, #4
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	2301      	movs	r3, #1
 800b52a:	2205      	movs	r2, #5
 800b52c:	21d0      	movs	r1, #208	; 0xd0
 800b52e:	480e      	ldr	r0, [pc, #56]	; (800b568 <Write_RTC+0x140>)
 800b530:	f00c ffd8 	bl	80184e4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800b534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b538:	9302      	str	r3, [sp, #8]
 800b53a:	2301      	movs	r3, #1
 800b53c:	9301      	str	r3, [sp, #4]
 800b53e:	463b      	mov	r3, r7
 800b540:	3305      	adds	r3, #5
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	2301      	movs	r3, #1
 800b546:	2206      	movs	r2, #6
 800b548:	21d0      	movs	r1, #208	; 0xd0
 800b54a:	4807      	ldr	r0, [pc, #28]	; (800b568 <Write_RTC+0x140>)
 800b54c:	f00c ffca 	bl	80184e4 <HAL_I2C_Mem_Write>

	Get_time();
 800b550:	f000 f80c 	bl	800b56c <Get_time>

}
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	080262dc 	.word	0x080262dc
 800b560:	20000e6c 	.word	0x20000e6c
 800b564:	20002878 	.word	0x20002878
 800b568:	20009c68 	.word	0x20009c68

0800b56c <Get_time>:


void Get_time(void)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800b572:	463b      	mov	r3, r7
 800b574:	2207      	movs	r2, #7
 800b576:	2100      	movs	r1, #0
 800b578:	4618      	mov	r0, r3
 800b57a:	f017 f911 	bl	80227a0 <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800b57e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b582:	9302      	str	r3, [sp, #8]
 800b584:	2307      	movs	r3, #7
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	463b      	mov	r3, r7
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	2301      	movs	r3, #1
 800b58e:	2200      	movs	r2, #0
 800b590:	21d0      	movs	r1, #208	; 0xd0
 800b592:	4824      	ldr	r0, [pc, #144]	; (800b624 <Get_time+0xb8>)
 800b594:	f00d f8ba 	bl	801870c <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800b598:	783b      	ldrb	r3, [r7, #0]
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7ff feea 	bl	800b374 <bcdToDec>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	4b20      	ldr	r3, [pc, #128]	; (800b628 <Get_time+0xbc>)
 800b5a6:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800b5a8:	787b      	ldrb	r3, [r7, #1]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7ff fee2 	bl	800b374 <bcdToDec>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	4b1c      	ldr	r3, [pc, #112]	; (800b628 <Get_time+0xbc>)
 800b5b6:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800b5b8:	78bb      	ldrb	r3, [r7, #2]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7ff feda 	bl	800b374 <bcdToDec>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	4b18      	ldr	r3, [pc, #96]	; (800b628 <Get_time+0xbc>)
 800b5c6:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800b5c8:	793b      	ldrb	r3, [r7, #4]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7ff fed2 	bl	800b374 <bcdToDec>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	4b14      	ldr	r3, [pc, #80]	; (800b628 <Get_time+0xbc>)
 800b5d6:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800b5d8:	797b      	ldrb	r3, [r7, #5]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7ff feca 	bl	800b374 <bcdToDec>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	4b10      	ldr	r3, [pc, #64]	; (800b628 <Get_time+0xbc>)
 800b5e6:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800b5e8:	79bb      	ldrb	r3, [r7, #6]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7ff fec2 	bl	800b374 <bcdToDec>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	4b0c      	ldr	r3, [pc, #48]	; (800b628 <Get_time+0xbc>)
 800b5f6:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800b5f8:	783a      	ldrb	r2, [r7, #0]
 800b5fa:	4b0c      	ldr	r3, [pc, #48]	; (800b62c <Get_time+0xc0>)
 800b5fc:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800b5fe:	787a      	ldrb	r2, [r7, #1]
 800b600:	4b0a      	ldr	r3, [pc, #40]	; (800b62c <Get_time+0xc0>)
 800b602:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800b604:	78ba      	ldrb	r2, [r7, #2]
 800b606:	4b09      	ldr	r3, [pc, #36]	; (800b62c <Get_time+0xc0>)
 800b608:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800b60a:	793a      	ldrb	r2, [r7, #4]
 800b60c:	4b07      	ldr	r3, [pc, #28]	; (800b62c <Get_time+0xc0>)
 800b60e:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800b610:	797a      	ldrb	r2, [r7, #5]
 800b612:	4b06      	ldr	r3, [pc, #24]	; (800b62c <Get_time+0xc0>)
 800b614:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800b616:	79ba      	ldrb	r2, [r7, #6]
 800b618:	4b04      	ldr	r3, [pc, #16]	; (800b62c <Get_time+0xc0>)
 800b61a:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800b61c:	bf00      	nop
}
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	20009c68 	.word	0x20009c68
 800b628:	20002888 	.word	0x20002888
 800b62c:	20002890 	.word	0x20002890

0800b630 <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800b634:	4b09      	ldr	r3, [pc, #36]	; (800b65c <Update_Time_Every_Sec+0x2c>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4618      	mov	r0, r3
 800b63a:	f003 fc11 	bl	800ee60 <HAL_Elaps_Ticks>
 800b63e:	4603      	mov	r3, r0
 800b640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b644:	d307      	bcc.n	800b656 <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800b646:	f7ff ff91 	bl	800b56c <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800b64a:	f00a f993 	bl	8015974 <HAL_GetTick>
 800b64e:	4603      	mov	r3, r0
 800b650:	4a02      	ldr	r2, [pc, #8]	; (800b65c <Update_Time_Every_Sec+0x2c>)
 800b652:	6013      	str	r3, [r2, #0]
	}
	return;
 800b654:	bf00      	nop
 800b656:	bf00      	nop
}
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	20002898 	.word	0x20002898

0800b660 <Process_SiemensEI>:

uint8_t SendReply = 0;


void Process_SiemensEI(void)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process();
 800b664:	f011 fc68 	bl	801cf38 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800b668:	4813      	ldr	r0, [pc, #76]	; (800b6b8 <Process_SiemensEI+0x58>)
 800b66a:	f00d fce9 	bl	8019040 <HAL_IWDG_Refresh>

		Feed_wdt();
 800b66e:	f008 f83d 	bl	80136ec <Feed_wdt>

		readCanToStructs();
 800b672:	f004 fe2b 	bl	80102cc <readCanToStructs>

		Chech_forSiemensCMD();
 800b676:	f001 fe27 	bl	800d2c8 <Chech_forSiemensCMD>

		ProcessSendingSignals2MIE();
 800b67a:	f001 fb85 	bl	800cd88 <ProcessSendingSignals2MIE>

		ProcessSelfSharing();
 800b67e:	f001 fc6b 	bl	800cf58 <ProcessSelfSharing>

		Siemens_Data_Analyser();
 800b682:	f000 f81f 	bl	800b6c4 <Siemens_Data_Analyser>

		ProcessDetectNoValidDataReceive();
 800b686:	f001 fc89 	bl	800cf9c <ProcessDetectNoValidDataReceive>

		SendRelays2Other();
 800b68a:	f001 fccb 	bl	800d024 <SendRelays2Other>

		CheckRelayMisMatch();
 800b68e:	f001 fce1 	bl	800d054 <CheckRelayMisMatch>

		Detect_SiemensCAN_Xchange_Failure();
 800b692:	f001 fd19 	bl	800d0c8 <Detect_SiemensCAN_Xchange_Failure>

		Print_BuildDat_Details();
 800b696:	f009 f93b 	bl	8014910 <Print_BuildDat_Details>

		GetTimeStamp();
 800b69a:	f002 fd9f 	bl	800e1dc <GetTimeStamp>

		if(Dats_Request_Flag > 0)
 800b69e:	4b07      	ldr	r3, [pc, #28]	; (800b6bc <Process_SiemensEI+0x5c>)
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d0de      	beq.n	800b664 <Process_SiemensEI+0x4>
		{
			gucFlagUpdate = 3;
 800b6a6:	4b06      	ldr	r3, [pc, #24]	; (800b6c0 <Process_SiemensEI+0x60>)
 800b6a8:	2203      	movs	r2, #3
 800b6aa:	701a      	strb	r2, [r3, #0]

	}

	while(1)
	{
		Data_Processing();
 800b6ac:	f009 f82e 	bl	801470c <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800b6b0:	4801      	ldr	r0, [pc, #4]	; (800b6b8 <Process_SiemensEI+0x58>)
 800b6b2:	f00d fcc5 	bl	8019040 <HAL_IWDG_Refresh>
		Data_Processing();
 800b6b6:	e7f9      	b.n	800b6ac <Process_SiemensEI+0x4c>
 800b6b8:	20009d10 	.word	0x20009d10
 800b6bc:	20000644 	.word	0x20000644
 800b6c0:	20000a49 	.word	0x20000a49

0800b6c4 <Siemens_Data_Analyser>:
	}
}

void Siemens_Data_Analyser(void)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800b6ca:	af00      	add	r7, sp, #0

	uint8_t Data_Traverser =0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
	uint16_t Cal_CRC=0,Cal_CRC_Compliment=0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42
	uint16_t Recv_CRC=0,Recv_CRC_Compliment=0;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	uint16_t Recv_CRC_Loc=0,Recv_CRC_Compliment_Loc = 0,Recv_CRC_Compliment_Size=0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	uint16_t Compliment_Data_Start_Loc = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a
	uint16_t App_data_Traverser = 0;
 800b702:	2300      	movs	r3, #0
 800b704:	f8a7 3a50 	strh.w	r3, [r7, #2640]	; 0xa50
	uint16_t VitalCRC = 0;
 800b708:	2300      	movs	r3, #0
 800b70a:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38
	uint16_t App_data_Size = 0;
 800b70e:	2300      	movs	r3, #0
 800b710:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	uint16_t TempApp_data_Size = 0;
 800b714:	2300      	movs	r3, #0
 800b716:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	uint8_t App_Data[SIEMENS_MAX_RELAY_SIZE];
	SIEMENS_PKT_t Temp_Siemens_RX_st;
	uint8_t Buff[MAX_SIEMENS_PKT_LENGTH] = {0,};
 800b71a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b71e:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
 800b726:	3304      	adds	r3, #4
 800b728:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b72c:	2100      	movs	r1, #0
 800b72e:	4618      	mov	r0, r3
 800b730:	f017 f836 	bl	80227a0 <memset>
	uint16_t Size = 0;
 800b734:	2300      	movs	r3, #0
 800b736:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
	uint8_t RejectPacketFlag = 0;
 800b73a:	2300      	movs	r3, #0
 800b73c:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b


	if(Ethernet_Circle_buff_st.Write_end > 10)
 800b740:	4b7c      	ldr	r3, [pc, #496]	; (800b934 <Siemens_Data_Analyser+0x270>)
 800b742:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b746:	2b0a      	cmp	r3, #10
 800b748:	f240 86dc 	bls.w	800c504 <Siemens_Data_Analyser+0xe40>
	{
		memcpy(&Buff,Ethernet_Circle_buff_st.Ethernet_Buffers,Ethernet_Circle_buff_st.Write_end);
 800b74c:	4b79      	ldr	r3, [pc, #484]	; (800b934 <Siemens_Data_Analyser+0x270>)
 800b74e:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b752:	461a      	mov	r2, r3
 800b754:	f107 030c 	add.w	r3, r7, #12
 800b758:	4976      	ldr	r1, [pc, #472]	; (800b934 <Siemens_Data_Analyser+0x270>)
 800b75a:	4618      	mov	r0, r3
 800b75c:	f016 fff8 	bl	8022750 <memcpy>
		Size = Ethernet_Circle_buff_st.Write_end;
 800b760:	4b74      	ldr	r3, [pc, #464]	; (800b934 <Siemens_Data_Analyser+0x270>)
 800b762:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b766:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
		memset(&Ethernet_Circle_buff_st,0,sizeof(ETHERNET_Circle_t));
 800b76a:	f240 6204 	movw	r2, #1540	; 0x604
 800b76e:	2100      	movs	r1, #0
 800b770:	4870      	ldr	r0, [pc, #448]	; (800b934 <Siemens_Data_Analyser+0x270>)
 800b772:	f017 f815 	bl	80227a0 <memset>
	else
	{
		return;
	}

	memset(&Temp_Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800b776:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800b77a:	f44f 720a 	mov.w	r2, #552	; 0x228
 800b77e:	2100      	movs	r1, #0
 800b780:	4618      	mov	r0, r3
 800b782:	f017 f80d 	bl	80227a0 <memset>


	BITSTUFFINIT(0,0);
 800b786:	2300      	movs	r3, #0
 800b788:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b78c:	2300      	movs	r3, #0
 800b78e:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Recv_CRC_Loc = ((Size/2)-2);
 800b792:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b796:	085b      	lsrs	r3, r3, #1
 800b798:	b29b      	uxth	r3, r3
 800b79a:	3b02      	subs	r3, #2
 800b79c:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
	Recv_CRC_Compliment_Size = ((Size/2)-2);
 800b7a0:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b7a4:	085b      	lsrs	r3, r3, #1
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	3b02      	subs	r3, #2
 800b7aa:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	Recv_CRC_Compliment_Loc = ((Size)-2);
 800b7ae:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b7b2:	3b02      	subs	r3, #2
 800b7b4:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
	Compliment_Data_Start_Loc = (Size/2);
 800b7b8:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b7bc:	085b      	lsrs	r3, r3, #1
 800b7be:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a


	if(  Data_Compliment(Buff,Size,VERIFY)  != 1)
 800b7c2:	f8b7 1a36 	ldrh.w	r1, [r7, #2614]	; 0xa36
 800b7c6:	f107 030c 	add.w	r3, r7, #12
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f002 fbeb 	bl	800dfa8 <Data_Compliment>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d004      	beq.n	800b7e2 <Siemens_Data_Analyser+0x11e>
	{
		printf("Compliment Data Not Verified\n");
 800b7d8:	4857      	ldr	r0, [pc, #348]	; (800b938 <Siemens_Data_Analyser+0x274>)
 800b7da:	f017 f965 	bl	8022aa8 <puts>
		return ;
 800b7de:	f000 be94 	b.w	800c50a <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC = ExtractBits(0,16,&Buff[Recv_CRC_Loc]);
 800b7e2:	f8b7 3a40 	ldrh.w	r3, [r7, #2624]	; 0xa40
 800b7e6:	f107 020c 	add.w	r2, r7, #12
 800b7ea:	4413      	add	r3, r2
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	2110      	movs	r1, #16
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	f7f4 ff0f 	bl	8000614 <ExtractBits>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
	Cal_CRC = Siemens_CRC(&Buff[0],Recv_CRC_Loc);
 800b7fc:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800b800:	f107 030c 	add.w	r3, r7, #12
 800b804:	4611      	mov	r1, r2
 800b806:	4618      	mov	r0, r3
 800b808:	f002 f8d2 	bl	800d9b0 <Siemens_CRC>
 800b80c:	4603      	mov	r3, r0
 800b80e:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b812:	4b4a      	ldr	r3, [pc, #296]	; (800b93c <Siemens_Data_Analyser+0x278>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	095b      	lsrs	r3, r3, #5
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d01c      	beq.n	800b85a <Siemens_Data_Analyser+0x196>
	{
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800b820:	4847      	ldr	r0, [pc, #284]	; (800b940 <Siemens_Data_Analyser+0x27c>)
 800b822:	f017 f941 	bl	8022aa8 <puts>
		Recv_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800b826:	4847      	ldr	r0, [pc, #284]	; (800b944 <Siemens_Data_Analyser+0x280>)
 800b828:	f00e fd56 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 800b82c:	4601      	mov	r1, r0
 800b82e:	4b46      	ldr	r3, [pc, #280]	; (800b948 <Siemens_Data_Analyser+0x284>)
 800b830:	fba3 2301 	umull	r2, r3, r3, r1
 800b834:	0bda      	lsrs	r2, r3, #15
 800b836:	4613      	mov	r3, r2
 800b838:	041b      	lsls	r3, r3, #16
 800b83a:	1a9b      	subs	r3, r3, r2
 800b83c:	1aca      	subs	r2, r1, r3
 800b83e:	4613      	mov	r3, r2
 800b840:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		if(Recv_CRC == Cal_CRC)
 800b844:	f8b7 2a54 	ldrh.w	r2, [r7, #2644]	; 0xa54
 800b848:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d104      	bne.n	800b85a <Siemens_Data_Analyser+0x196>
		{
			Recv_CRC += 4;
 800b850:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b854:	3304      	adds	r3, #4
 800b856:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		}
	}
#endif

	if(Cal_CRC != Recv_CRC)
 800b85a:	f8b7 2a44 	ldrh.w	r2, [r7, #2628]	; 0xa44
 800b85e:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b862:	429a      	cmp	r2, r3
 800b864:	d010      	beq.n	800b888 <Siemens_Data_Analyser+0x1c4>
	{
		printf("1st CRC Fail\n");
 800b866:	4839      	ldr	r0, [pc, #228]	; (800b94c <Siemens_Data_Analyser+0x288>)
 800b868:	f017 f91e 	bl	8022aa8 <puts>
		printf("Calculated:0x%04x\n",Cal_CRC);
 800b86c:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800b870:	4619      	mov	r1, r3
 800b872:	4837      	ldr	r0, [pc, #220]	; (800b950 <Siemens_Data_Analyser+0x28c>)
 800b874:	f017 f87c 	bl	8022970 <iprintf>
		printf("Received:0x%04x\n",Recv_CRC);
 800b878:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b87c:	4619      	mov	r1, r3
 800b87e:	4835      	ldr	r0, [pc, #212]	; (800b954 <Siemens_Data_Analyser+0x290>)
 800b880:	f017 f876 	bl	8022970 <iprintf>
		return;
 800b884:	f000 be41 	b.w	800c50a <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC_Compliment = ExtractBits(0,16,&Buff[Recv_CRC_Compliment_Loc]);
 800b888:	f8b7 3a3e 	ldrh.w	r3, [r7, #2622]	; 0xa3e
 800b88c:	f107 020c 	add.w	r2, r7, #12
 800b890:	4413      	add	r3, r2
 800b892:	461a      	mov	r2, r3
 800b894:	2110      	movs	r1, #16
 800b896:	2000      	movs	r0, #0
 800b898:	f7f4 febc 	bl	8000614 <ExtractBits>
 800b89c:	4603      	mov	r3, r0
 800b89e:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	Cal_CRC_Compliment = Siemens_CRC(&Buff[Compliment_Data_Start_Loc],Recv_CRC_Compliment_Size);
 800b8a2:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	; 0xa3a
 800b8a6:	f107 020c 	add.w	r2, r7, #12
 800b8aa:	4413      	add	r3, r2
 800b8ac:	f8b7 2a3c 	ldrh.w	r2, [r7, #2620]	; 0xa3c
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f002 f87c 	bl	800d9b0 <Siemens_CRC>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b8be:	4b1f      	ldr	r3, [pc, #124]	; (800b93c <Siemens_Data_Analyser+0x278>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	0a1b      	lsrs	r3, r3, #8
 800b8c4:	f003 0301 	and.w	r3, r3, #1
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d01c      	beq.n	800b906 <Siemens_Data_Analyser+0x242>
	{
		printf("Injecting INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800b8cc:	4822      	ldr	r0, [pc, #136]	; (800b958 <Siemens_Data_Analyser+0x294>)
 800b8ce:	f017 f8eb 	bl	8022aa8 <puts>
		Recv_CRC_Compliment = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800b8d2:	481c      	ldr	r0, [pc, #112]	; (800b944 <Siemens_Data_Analyser+0x280>)
 800b8d4:	f00e fd00 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 800b8d8:	4601      	mov	r1, r0
 800b8da:	4b1b      	ldr	r3, [pc, #108]	; (800b948 <Siemens_Data_Analyser+0x284>)
 800b8dc:	fba3 2301 	umull	r2, r3, r3, r1
 800b8e0:	0bda      	lsrs	r2, r3, #15
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	041b      	lsls	r3, r3, #16
 800b8e6:	1a9b      	subs	r3, r3, r2
 800b8e8:	1aca      	subs	r2, r1, r3
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		if(Recv_CRC_Compliment == Cal_CRC_Compliment)
 800b8f0:	f8b7 2a52 	ldrh.w	r2, [r7, #2642]	; 0xa52
 800b8f4:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d104      	bne.n	800b906 <Siemens_Data_Analyser+0x242>
		{
			Recv_CRC_Compliment += 4;
 800b8fc:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b900:	3304      	adds	r3, #4
 800b902:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		}
	}
#endif

	if(Cal_CRC_Compliment != Recv_CRC_Compliment)
 800b906:	f8b7 2a42 	ldrh.w	r2, [r7, #2626]	; 0xa42
 800b90a:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b90e:	429a      	cmp	r2, r3
 800b910:	d02a      	beq.n	800b968 <Siemens_Data_Analyser+0x2a4>
	{
		printf("2nd CRC Fail\n");
 800b912:	4812      	ldr	r0, [pc, #72]	; (800b95c <Siemens_Data_Analyser+0x298>)
 800b914:	f017 f8c8 	bl	8022aa8 <puts>
		printf("Cal_CRC_Compliment:0x%04x\n",Cal_CRC_Compliment);
 800b918:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800b91c:	4619      	mov	r1, r3
 800b91e:	4810      	ldr	r0, [pc, #64]	; (800b960 <Siemens_Data_Analyser+0x29c>)
 800b920:	f017 f826 	bl	8022970 <iprintf>
		printf("Recv_CRC_Compliment:0x%04x\n",Recv_CRC_Compliment);
 800b924:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b928:	4619      	mov	r1, r3
 800b92a:	480e      	ldr	r0, [pc, #56]	; (800b964 <Siemens_Data_Analyser+0x2a0>)
 800b92c:	f017 f820 	bl	8022970 <iprintf>
		return;
 800b930:	f000 bdeb 	b.w	800c50a <Siemens_Data_Analyser+0xe46>
 800b934:	20004c54 	.word	0x20004c54
 800b938:	080262fc 	.word	0x080262fc
 800b93c:	20003518 	.word	0x20003518
 800b940:	0802631c 	.word	0x0802631c
 800b944:	20009d20 	.word	0x20009d20
 800b948:	80008001 	.word	0x80008001
 800b94c:	08026344 	.word	0x08026344
 800b950:	08026354 	.word	0x08026354
 800b954:	08026368 	.word	0x08026368
 800b958:	0802637c 	.word	0x0802637c
 800b95c:	080263a8 	.word	0x080263a8
 800b960:	080263b8 	.word	0x080263b8
 800b964:	080263d4 	.word	0x080263d4
	}

	Temp_Siemens_RX_st.DesSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800b968:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b96c:	b2d8      	uxtb	r0, r3
 800b96e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b972:	f107 020c 	add.w	r2, r7, #12
 800b976:	441a      	add	r2, r3
 800b978:	2301      	movs	r3, #1
 800b97a:	2108      	movs	r1, #8
 800b97c:	f002 f86c 	bl	800da58 <Extract_Parity_Data>
 800b980:	4603      	mov	r3, r0
 800b982:	b2da      	uxtb	r2, r3
 800b984:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b988:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b98c:	701a      	strb	r2, [r3, #0]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b98e:	4b56      	ldr	r3, [pc, #344]	; (800bae8 <Siemens_Data_Analyser+0x424>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f003 0301 	and.w	r3, r3, #1
 800b996:	2b00      	cmp	r3, #0
 800b998:	d02a      	beq.n	800b9f0 <Siemens_Data_Analyser+0x32c>
	{
		printf("Injecting INVALID_DES_SYS_TYPE\n");
 800b99a:	4854      	ldr	r0, [pc, #336]	; (800baec <Siemens_Data_Analyser+0x428>)
 800b99c:	f017 f884 	bl	8022aa8 <puts>
		Temp_Siemens_RX_st.DesSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800b9a0:	4853      	ldr	r0, [pc, #332]	; (800baf0 <Siemens_Data_Analyser+0x42c>)
 800b9a2:	f00e fc99 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 800b9a6:	4601      	mov	r1, r0
 800b9a8:	4b52      	ldr	r3, [pc, #328]	; (800baf4 <Siemens_Data_Analyser+0x430>)
 800b9aa:	fba3 2301 	umull	r2, r3, r3, r1
 800b9ae:	09da      	lsrs	r2, r3, #7
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	021b      	lsls	r3, r3, #8
 800b9b4:	1a9b      	subs	r3, r3, r2
 800b9b6:	1aca      	subs	r2, r1, r3
 800b9b8:	b2d2      	uxtb	r2, r2
 800b9ba:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b9be:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b9c2:	701a      	strb	r2, [r3, #0]
		if(Temp_Siemens_RX_st.DesSysType == EI_data.Siemens_st.DestSysType)
 800b9c4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b9c8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b9cc:	781a      	ldrb	r2, [r3, #0]
 800b9ce:	4b4a      	ldr	r3, [pc, #296]	; (800baf8 <Siemens_Data_Analyser+0x434>)
 800b9d0:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d10b      	bne.n	800b9f0 <Siemens_Data_Analyser+0x32c>
		{
			Temp_Siemens_RX_st.DesSysType += 4;
 800b9d8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b9dc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	3304      	adds	r3, #4
 800b9e4:	b2da      	uxtb	r2, r3
 800b9e6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b9ea:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b9ee:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DesSysType != EI_data.Siemens_st.DestSysType)
 800b9f0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b9f4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b9f8:	781a      	ldrb	r2, [r3, #0]
 800b9fa:	4b3f      	ldr	r3, [pc, #252]	; (800baf8 <Siemens_Data_Analyser+0x434>)
 800b9fc:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d015      	beq.n	800ba30 <Siemens_Data_Analyser+0x36c>
	{
		printf("Destination System Type Not Matched\n");
 800ba04:	483d      	ldr	r0, [pc, #244]	; (800bafc <Siemens_Data_Analyser+0x438>)
 800ba06:	f017 f84f 	bl	8022aa8 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DesSysType);
 800ba0a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba0e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	4619      	mov	r1, r3
 800ba16:	483a      	ldr	r0, [pc, #232]	; (800bb00 <Siemens_Data_Analyser+0x43c>)
 800ba18:	f016 ffaa 	bl	8022970 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestSysType);
 800ba1c:	4b36      	ldr	r3, [pc, #216]	; (800baf8 <Siemens_Data_Analyser+0x434>)
 800ba1e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800ba22:	4619      	mov	r1, r3
 800ba24:	4837      	ldr	r0, [pc, #220]	; (800bb04 <Siemens_Data_Analyser+0x440>)
 800ba26:	f016 ffa3 	bl	8022970 <iprintf>
		RejectPacketFlag = 1;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Des_type:%u\n",Temp_Siemens_RX_st.dst_sys_typ);
	BITSTUFFINC(8);//Destination System Type
 800ba30:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800ba34:	3308      	adds	r3, #8
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	da00      	bge.n	800ba3c <Siemens_Data_Analyser+0x378>
 800ba3a:	3307      	adds	r3, #7
 800ba3c:	10db      	asrs	r3, r3, #3
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ba44:	4413      	add	r3, r2
 800ba46:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800ba4a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ba4e:	3308      	adds	r3, #8
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	b21b      	sxth	r3, r3
 800ba54:	425a      	negs	r2, r3
 800ba56:	f003 0307 	and.w	r3, r3, #7
 800ba5a:	f002 0207 	and.w	r2, r2, #7
 800ba5e:	bf58      	it	pl
 800ba60:	4253      	negpl	r3, r2
 800ba62:	b21b      	sxth	r3, r3
 800ba64:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800ba68:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ba6c:	b2d8      	uxtb	r0, r3
 800ba6e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ba72:	f107 020c 	add.w	r2, r7, #12
 800ba76:	441a      	add	r2, r3
 800ba78:	2300      	movs	r3, #0
 800ba7a:	2118      	movs	r1, #24
 800ba7c:	f001 ffec 	bl	800da58 <Extract_Parity_Data>
 800ba80:	4603      	mov	r3, r0
 800ba82:	461a      	mov	r2, r3
 800ba84:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba88:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba8c:	605a      	str	r2, [r3, #4]

	if(Temp_Siemens_RX_st.DestAddr != -1)
 800ba8e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba92:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9c:	d036      	beq.n	800bb0c <Siemens_Data_Analyser+0x448>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800ba9e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800baa2:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800baa6:	4a18      	ldr	r2, [pc, #96]	; (800bb08 <Siemens_Data_Analyser+0x444>)
 800baa8:	8812      	ldrh	r2, [r2, #0]
 800baaa:	801a      	strh	r2, [r3, #0]
 800baac:	2200      	movs	r2, #0
 800baae:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800bab0:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bab4:	f107 020c 	add.w	r2, r7, #12
 800bab8:	4413      	add	r3, r2
 800baba:	f107 0208 	add.w	r2, r7, #8
 800babe:	2103      	movs	r1, #3
 800bac0:	4618      	mov	r0, r3
 800bac2:	f000 fd4d 	bl	800c560 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtDestAddr,&ExtractBuffer, 3);
 800bac6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800baca:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bace:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800bad2:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
 800bad6:	3308      	adds	r3, #8
 800bad8:	6812      	ldr	r2, [r2, #0]
 800bada:	4611      	mov	r1, r2
 800badc:	8019      	strh	r1, [r3, #0]
 800bade:	3302      	adds	r3, #2
 800bae0:	0c12      	lsrs	r2, r2, #16
 800bae2:	701a      	strb	r2, [r3, #0]
 800bae4:	e015      	b.n	800bb12 <Siemens_Data_Analyser+0x44e>
 800bae6:	bf00      	nop
 800bae8:	20003518 	.word	0x20003518
 800baec:	080263f0 	.word	0x080263f0
 800baf0:	20009d20 	.word	0x20009d20
 800baf4:	80808081 	.word	0x80808081
 800baf8:	20000304 	.word	0x20000304
 800bafc:	08026410 	.word	0x08026410
 800bb00:	08026434 	.word	0x08026434
 800bb04:	08026444 	.word	0x08026444
 800bb08:	080265c8 	.word	0x080265c8
	}
	else
	{
		RejectPacketFlag = 1;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	//			Temp_Siemens_RX_st.DesSysType += 4;
	//		}
	//	}
	//#endif

	if(Temp_Siemens_RX_st.ExtDestAddr != EI_data.Siemens_st.DestAddress)
 800bb12:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb16:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb1a:	689a      	ldr	r2, [r3, #8]
 800bb1c:	4bbf      	ldr	r3, [pc, #764]	; (800be1c <Siemens_Data_Analyser+0x758>)
 800bb1e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d015      	beq.n	800bb52 <Siemens_Data_Analyser+0x48e>
	{
		printf("Destination Address Not Matched\n");
 800bb26:	48be      	ldr	r0, [pc, #760]	; (800be20 <Siemens_Data_Analyser+0x75c>)
 800bb28:	f016 ffbe 	bl	8022aa8 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.DestAddr);
 800bb2c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb30:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	4619      	mov	r1, r3
 800bb38:	48ba      	ldr	r0, [pc, #744]	; (800be24 <Siemens_Data_Analyser+0x760>)
 800bb3a:	f016 ff19 	bl	8022970 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.DestAddress);
 800bb3e:	4bb7      	ldr	r3, [pc, #732]	; (800be1c <Siemens_Data_Analyser+0x758>)
 800bb40:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800bb44:	4619      	mov	r1, r3
 800bb46:	48b8      	ldr	r0, [pc, #736]	; (800be28 <Siemens_Data_Analyser+0x764>)
 800bb48:	f016 ff12 	bl	8022970 <iprintf>
		RejectPacketFlag = 1;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_add:%lu\n",Temp_Siemens_RX_st.dst_add);
	BITSTUFFINC(24);//Destination Address
 800bb52:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bb56:	3318      	adds	r3, #24
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	da00      	bge.n	800bb5e <Siemens_Data_Analyser+0x49a>
 800bb5c:	3307      	adds	r3, #7
 800bb5e:	10db      	asrs	r3, r3, #3
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb66:	4413      	add	r3, r2
 800bb68:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bb6c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bb70:	3318      	adds	r3, #24
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	b21b      	sxth	r3, r3
 800bb76:	425a      	negs	r2, r3
 800bb78:	f003 0307 	and.w	r3, r3, #7
 800bb7c:	f002 0207 	and.w	r2, r2, #7
 800bb80:	bf58      	it	pl
 800bb82:	4253      	negpl	r3, r2
 800bb84:	b21b      	sxth	r3, r3
 800bb86:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SrcSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800bb8a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bb8e:	b2d8      	uxtb	r0, r3
 800bb90:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb94:	f107 020c 	add.w	r2, r7, #12
 800bb98:	441a      	add	r2, r3
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	2108      	movs	r1, #8
 800bb9e:	f001 ff5b 	bl	800da58 <Extract_Parity_Data>
 800bba2:	4603      	mov	r3, r0
 800bba4:	b2da      	uxtb	r2, r3
 800bba6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bbaa:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bbae:	731a      	strb	r2, [r3, #12]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bbb0:	4b9e      	ldr	r3, [pc, #632]	; (800be2c <Siemens_Data_Analyser+0x768>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	085b      	lsrs	r3, r3, #1
 800bbb6:	f003 0301 	and.w	r3, r3, #1
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d02a      	beq.n	800bc14 <Siemens_Data_Analyser+0x550>
	{
		printf("Injecting INVALID_SRC_SYS_TYPE\n");
 800bbbe:	489c      	ldr	r0, [pc, #624]	; (800be30 <Siemens_Data_Analyser+0x76c>)
 800bbc0:	f016 ff72 	bl	8022aa8 <puts>
		Temp_Siemens_RX_st.SrcSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800bbc4:	489b      	ldr	r0, [pc, #620]	; (800be34 <Siemens_Data_Analyser+0x770>)
 800bbc6:	f00e fb87 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 800bbca:	4601      	mov	r1, r0
 800bbcc:	4b9a      	ldr	r3, [pc, #616]	; (800be38 <Siemens_Data_Analyser+0x774>)
 800bbce:	fba3 2301 	umull	r2, r3, r3, r1
 800bbd2:	09da      	lsrs	r2, r3, #7
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	021b      	lsls	r3, r3, #8
 800bbd8:	1a9b      	subs	r3, r3, r2
 800bbda:	1aca      	subs	r2, r1, r3
 800bbdc:	b2d2      	uxtb	r2, r2
 800bbde:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bbe2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bbe6:	731a      	strb	r2, [r3, #12]
		if(Temp_Siemens_RX_st.SrcSysType == EI_data.Siemens_st.SourceSysType)
 800bbe8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bbec:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bbf0:	7b1a      	ldrb	r2, [r3, #12]
 800bbf2:	4b8a      	ldr	r3, [pc, #552]	; (800be1c <Siemens_Data_Analyser+0x758>)
 800bbf4:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d10b      	bne.n	800bc14 <Siemens_Data_Analyser+0x550>
		{
			Temp_Siemens_RX_st.SrcSysType += 4;
 800bbfc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc00:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc04:	7b1b      	ldrb	r3, [r3, #12]
 800bc06:	3304      	adds	r3, #4
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc0e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc12:	731a      	strb	r2, [r3, #12]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SrcSysType != EI_data.Siemens_st.SourceSysType)
 800bc14:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc18:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc1c:	7b1a      	ldrb	r2, [r3, #12]
 800bc1e:	4b7f      	ldr	r3, [pc, #508]	; (800be1c <Siemens_Data_Analyser+0x758>)
 800bc20:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d015      	beq.n	800bc54 <Siemens_Data_Analyser+0x590>
	{
		printf("Source System Type Not Matched\n");
 800bc28:	4884      	ldr	r0, [pc, #528]	; (800be3c <Siemens_Data_Analyser+0x778>)
 800bc2a:	f016 ff3d 	bl	8022aa8 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SrcSysType);
 800bc2e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc32:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc36:	7b1b      	ldrb	r3, [r3, #12]
 800bc38:	4619      	mov	r1, r3
 800bc3a:	4881      	ldr	r0, [pc, #516]	; (800be40 <Siemens_Data_Analyser+0x77c>)
 800bc3c:	f016 fe98 	bl	8022970 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourceSysType);
 800bc40:	4b76      	ldr	r3, [pc, #472]	; (800be1c <Siemens_Data_Analyser+0x758>)
 800bc42:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800bc46:	4619      	mov	r1, r3
 800bc48:	487e      	ldr	r0, [pc, #504]	; (800be44 <Siemens_Data_Analyser+0x780>)
 800bc4a:	f016 fe91 	bl	8022970 <iprintf>
		RejectPacketFlag = 1;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Src_sys_type:%u\n",Temp_Siemens_RX_st.Src_sys_type);
	BITSTUFFINC(8);//Source System Type
 800bc54:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bc58:	3308      	adds	r3, #8
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	da00      	bge.n	800bc60 <Siemens_Data_Analyser+0x59c>
 800bc5e:	3307      	adds	r3, #7
 800bc60:	10db      	asrs	r3, r3, #3
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bc68:	4413      	add	r3, r2
 800bc6a:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bc6e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bc72:	3308      	adds	r3, #8
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	b21b      	sxth	r3, r3
 800bc78:	425a      	negs	r2, r3
 800bc7a:	f003 0307 	and.w	r3, r3, #7
 800bc7e:	f002 0207 	and.w	r2, r2, #7
 800bc82:	bf58      	it	pl
 800bc84:	4253      	negpl	r3, r2
 800bc86:	b21b      	sxth	r3, r3
 800bc88:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourceAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800bc8c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bc90:	b2d8      	uxtb	r0, r3
 800bc92:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bc96:	f107 020c 	add.w	r2, r7, #12
 800bc9a:	441a      	add	r2, r3
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	2118      	movs	r1, #24
 800bca0:	f001 feda 	bl	800da58 <Extract_Parity_Data>
 800bca4:	4603      	mov	r3, r0
 800bca6:	461a      	mov	r2, r3
 800bca8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bcac:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bcb0:	611a      	str	r2, [r3, #16]

	if(Temp_Siemens_RX_st.SourceAddr != -1)
 800bcb2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bcb6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc0:	d021      	beq.n	800bd06 <Siemens_Data_Analyser+0x642>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800bcc2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bcc6:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800bcca:	4a5f      	ldr	r2, [pc, #380]	; (800be48 <Siemens_Data_Analyser+0x784>)
 800bccc:	8812      	ldrh	r2, [r2, #0]
 800bcce:	801a      	strh	r2, [r3, #0]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800bcd4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bcd8:	f107 020c 	add.w	r2, r7, #12
 800bcdc:	4413      	add	r3, r2
 800bcde:	1d3a      	adds	r2, r7, #4
 800bce0:	2103      	movs	r1, #3
 800bce2:	4618      	mov	r0, r3
 800bce4:	f000 fc3c 	bl	800c560 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtSourceAddr,&ExtractBuffer, 3);
 800bce8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bcec:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bcf0:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800bcf4:	f6a2 2254 	subw	r2, r2, #2644	; 0xa54
 800bcf8:	3314      	adds	r3, #20
 800bcfa:	6812      	ldr	r2, [r2, #0]
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	8019      	strh	r1, [r3, #0]
 800bd00:	3302      	adds	r3, #2
 800bd02:	0c12      	lsrs	r2, r2, #16
 800bd04:	701a      	strb	r2, [r3, #0]
	}

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bd06:	4b49      	ldr	r3, [pc, #292]	; (800be2c <Siemens_Data_Analyser+0x768>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	089b      	lsrs	r3, r3, #2
 800bd0c:	f003 0301 	and.w	r3, r3, #1
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d02c      	beq.n	800bd6e <Siemens_Data_Analyser+0x6aa>
	{
		printf("Injecting INVALID_SRC_ADDR\n");
 800bd14:	484d      	ldr	r0, [pc, #308]	; (800be4c <Siemens_Data_Analyser+0x788>)
 800bd16:	f016 fec7 	bl	8022aa8 <puts>
		Temp_Siemens_RX_st.SourceAddr = HAL_RNG_GetRandomNumber(&hrng) % 0xffffff;
 800bd1a:	4846      	ldr	r0, [pc, #280]	; (800be34 <Siemens_Data_Analyser+0x770>)
 800bd1c:	f00e fadc 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 800bd20:	4601      	mov	r1, r0
 800bd22:	f240 1301 	movw	r3, #257	; 0x101
 800bd26:	fba3 2301 	umull	r2, r3, r3, r1
 800bd2a:	1aca      	subs	r2, r1, r3
 800bd2c:	0852      	lsrs	r2, r2, #1
 800bd2e:	4413      	add	r3, r2
 800bd30:	0dda      	lsrs	r2, r3, #23
 800bd32:	4613      	mov	r3, r2
 800bd34:	061b      	lsls	r3, r3, #24
 800bd36:	1a9b      	subs	r3, r3, r2
 800bd38:	1aca      	subs	r2, r1, r3
 800bd3a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd3e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd42:	611a      	str	r2, [r3, #16]
		if(Temp_Siemens_RX_st.ExtSourceAddr == EI_data.Siemens_st.SourceAddress)
 800bd44:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd48:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd4c:	695a      	ldr	r2, [r3, #20]
 800bd4e:	4b33      	ldr	r3, [pc, #204]	; (800be1c <Siemens_Data_Analyser+0x758>)
 800bd50:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d10a      	bne.n	800bd6e <Siemens_Data_Analyser+0x6aa>
		{
			Temp_Siemens_RX_st.ExtSourceAddr += 4;
 800bd58:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd5c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd60:	695b      	ldr	r3, [r3, #20]
 800bd62:	1d1a      	adds	r2, r3, #4
 800bd64:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd68:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd6c:	615a      	str	r2, [r3, #20]
		}
	}
#endif


	if(Temp_Siemens_RX_st.ExtSourceAddr != EI_data.Siemens_st.SourceAddress)
 800bd6e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd72:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd76:	695a      	ldr	r2, [r3, #20]
 800bd78:	4b28      	ldr	r3, [pc, #160]	; (800be1c <Siemens_Data_Analyser+0x758>)
 800bd7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d015      	beq.n	800bdae <Siemens_Data_Analyser+0x6ea>
	{
		printf("Source Address Not Matched\n");
 800bd82:	4833      	ldr	r0, [pc, #204]	; (800be50 <Siemens_Data_Analyser+0x78c>)
 800bd84:	f016 fe90 	bl	8022aa8 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.ExtSourceAddr);
 800bd88:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd8c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	4619      	mov	r1, r3
 800bd94:	4823      	ldr	r0, [pc, #140]	; (800be24 <Siemens_Data_Analyser+0x760>)
 800bd96:	f016 fdeb 	bl	8022970 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.SourceAddress);
 800bd9a:	4b20      	ldr	r3, [pc, #128]	; (800be1c <Siemens_Data_Analyser+0x758>)
 800bd9c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bda0:	4619      	mov	r1, r3
 800bda2:	4821      	ldr	r0, [pc, #132]	; (800be28 <Siemens_Data_Analyser+0x764>)
 800bda4:	f016 fde4 	bl	8022970 <iprintf>
		RejectPacketFlag = 1;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_add:%lu\n",Temp_Siemens_RX_st.src_add);
	BITSTUFFINC(24);//Source Address
 800bdae:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bdb2:	3318      	adds	r3, #24
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	da00      	bge.n	800bdba <Siemens_Data_Analyser+0x6f6>
 800bdb8:	3307      	adds	r3, #7
 800bdba:	10db      	asrs	r3, r3, #3
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bdc8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bdcc:	3318      	adds	r3, #24
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	b21b      	sxth	r3, r3
 800bdd2:	425a      	negs	r2, r3
 800bdd4:	f003 0307 	and.w	r3, r3, #7
 800bdd8:	f002 0207 	and.w	r2, r2, #7
 800bddc:	bf58      	it	pl
 800bdde:	4253      	negpl	r3, r2
 800bde0:	b21b      	sxth	r3, r3
 800bde2:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.ProdDataVer = Extract_Parity_Data(ucBit,8,&Buff[ucByte],EVEN_PARITY);
 800bde6:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bdea:	b2d8      	uxtb	r0, r3
 800bdec:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bdf0:	f107 020c 	add.w	r2, r7, #12
 800bdf4:	441a      	add	r2, r3
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	2108      	movs	r1, #8
 800bdfa:	f001 fe2d 	bl	800da58 <Extract_Parity_Data>
 800bdfe:	4603      	mov	r3, r0
 800be00:	b2da      	uxtb	r2, r3
 800be02:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be06:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be0a:	761a      	strb	r2, [r3, #24]
	//	printf("prod_data_ver:%u\n",Temp_Siemens_RX_st.prod_data_ver);
	BITSTUFFINC(8);//Product Data Version
 800be0c:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800be10:	3308      	adds	r3, #8
 800be12:	2b00      	cmp	r3, #0
 800be14:	da1e      	bge.n	800be54 <Siemens_Data_Analyser+0x790>
 800be16:	3307      	adds	r3, #7
 800be18:	e01c      	b.n	800be54 <Siemens_Data_Analyser+0x790>
 800be1a:	bf00      	nop
 800be1c:	20000304 	.word	0x20000304
 800be20:	08026454 	.word	0x08026454
 800be24:	08026474 	.word	0x08026474
 800be28:	08026484 	.word	0x08026484
 800be2c:	20003518 	.word	0x20003518
 800be30:	08026494 	.word	0x08026494
 800be34:	20009d20 	.word	0x20009d20
 800be38:	80808081 	.word	0x80808081
 800be3c:	080264b4 	.word	0x080264b4
 800be40:	08026434 	.word	0x08026434
 800be44:	08026444 	.word	0x08026444
 800be48:	080265c8 	.word	0x080265c8
 800be4c:	080264d4 	.word	0x080264d4
 800be50:	080264f0 	.word	0x080264f0
 800be54:	10db      	asrs	r3, r3, #3
 800be56:	b29a      	uxth	r2, r3
 800be58:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800be5c:	4413      	add	r3, r2
 800be5e:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800be62:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800be66:	3308      	adds	r3, #8
 800be68:	b29b      	uxth	r3, r3
 800be6a:	b21b      	sxth	r3, r3
 800be6c:	425a      	negs	r2, r3
 800be6e:	f003 0307 	and.w	r3, r3, #7
 800be72:	f002 0207 	and.w	r2, r2, #7
 800be76:	bf58      	it	pl
 800be78:	4253      	negpl	r3, r2
 800be7a:	b21b      	sxth	r3, r3
 800be7c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.CompIndex = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800be80:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800be84:	b2d8      	uxtb	r0, r3
 800be86:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800be8a:	f107 020c 	add.w	r2, r7, #12
 800be8e:	441a      	add	r2, r3
 800be90:	2301      	movs	r3, #1
 800be92:	2108      	movs	r1, #8
 800be94:	f001 fde0 	bl	800da58 <Extract_Parity_Data>
 800be98:	4603      	mov	r3, r0
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bea0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bea4:	765a      	strb	r2, [r3, #25]
	//	printf("comp_index:%u\n",Temp_Siemens_RX_st.comp_index);
	BITSTUFFINC(8);//Compatability Index
 800bea6:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800beaa:	3308      	adds	r3, #8
 800beac:	2b00      	cmp	r3, #0
 800beae:	da00      	bge.n	800beb2 <Siemens_Data_Analyser+0x7ee>
 800beb0:	3307      	adds	r3, #7
 800beb2:	10db      	asrs	r3, r3, #3
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800beba:	4413      	add	r3, r2
 800bebc:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bec0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bec4:	3308      	adds	r3, #8
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	b21b      	sxth	r3, r3
 800beca:	425a      	negs	r2, r3
 800becc:	f003 0307 	and.w	r3, r3, #7
 800bed0:	f002 0207 	and.w	r2, r2, #7
 800bed4:	bf58      	it	pl
 800bed6:	4253      	negpl	r3, r2
 800bed8:	b21b      	sxth	r3, r3
 800beda:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestPort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800bede:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bee2:	b2d8      	uxtb	r0, r3
 800bee4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bee8:	f107 020c 	add.w	r2, r7, #12
 800beec:	441a      	add	r2, r3
 800beee:	2302      	movs	r3, #2
 800bef0:	2108      	movs	r1, #8
 800bef2:	f001 fdb1 	bl	800da58 <Extract_Parity_Data>
 800bef6:	4603      	mov	r3, r0
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800befe:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf02:	769a      	strb	r2, [r3, #26]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bf04:	4bab      	ldr	r3, [pc, #684]	; (800c1b4 <Siemens_Data_Analyser+0xaf0>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	08db      	lsrs	r3, r3, #3
 800bf0a:	f003 0301 	and.w	r3, r3, #1
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d02a      	beq.n	800bf68 <Siemens_Data_Analyser+0x8a4>
	{
		printf("Injecting INVALID_DES_PORT\n");
 800bf12:	48a9      	ldr	r0, [pc, #676]	; (800c1b8 <Siemens_Data_Analyser+0xaf4>)
 800bf14:	f016 fdc8 	bl	8022aa8 <puts>
		Temp_Siemens_RX_st.DestPort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800bf18:	48a8      	ldr	r0, [pc, #672]	; (800c1bc <Siemens_Data_Analyser+0xaf8>)
 800bf1a:	f00e f9dd 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 800bf1e:	4601      	mov	r1, r0
 800bf20:	4ba7      	ldr	r3, [pc, #668]	; (800c1c0 <Siemens_Data_Analyser+0xafc>)
 800bf22:	fba3 2301 	umull	r2, r3, r3, r1
 800bf26:	09da      	lsrs	r2, r3, #7
 800bf28:	4613      	mov	r3, r2
 800bf2a:	021b      	lsls	r3, r3, #8
 800bf2c:	1a9b      	subs	r3, r3, r2
 800bf2e:	1aca      	subs	r2, r1, r3
 800bf30:	b2d2      	uxtb	r2, r2
 800bf32:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf36:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf3a:	769a      	strb	r2, [r3, #26]
		if(Temp_Siemens_RX_st.DestPort == EI_data.Siemens_st.DestPort)
 800bf3c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf40:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf44:	7e9a      	ldrb	r2, [r3, #26]
 800bf46:	4b9f      	ldr	r3, [pc, #636]	; (800c1c4 <Siemens_Data_Analyser+0xb00>)
 800bf48:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d10b      	bne.n	800bf68 <Siemens_Data_Analyser+0x8a4>
		{
			Temp_Siemens_RX_st.DestPort += 4;
 800bf50:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf54:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf58:	7e9b      	ldrb	r3, [r3, #26]
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf62:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf66:	769a      	strb	r2, [r3, #26]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DestPort != EI_data.Siemens_st.DestPort)
 800bf68:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf6c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf70:	7e9a      	ldrb	r2, [r3, #26]
 800bf72:	4b94      	ldr	r3, [pc, #592]	; (800c1c4 <Siemens_Data_Analyser+0xb00>)
 800bf74:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d015      	beq.n	800bfa8 <Siemens_Data_Analyser+0x8e4>
	{
		printf("Destination Port Not Matched\n");
 800bf7c:	4892      	ldr	r0, [pc, #584]	; (800c1c8 <Siemens_Data_Analyser+0xb04>)
 800bf7e:	f016 fd93 	bl	8022aa8 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DestPort);
 800bf82:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf86:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf8a:	7e9b      	ldrb	r3, [r3, #26]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	488f      	ldr	r0, [pc, #572]	; (800c1cc <Siemens_Data_Analyser+0xb08>)
 800bf90:	f016 fcee 	bl	8022970 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestPort);
 800bf94:	4b8b      	ldr	r3, [pc, #556]	; (800c1c4 <Siemens_Data_Analyser+0xb00>)
 800bf96:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	488c      	ldr	r0, [pc, #560]	; (800c1d0 <Siemens_Data_Analyser+0xb0c>)
 800bf9e:	f016 fce7 	bl	8022970 <iprintf>
		RejectPacketFlag = 1;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_port:%u\n",Temp_Siemens_RX_st.dst_port);
	BITSTUFFINC(8); //Dest Port.
 800bfa8:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bfac:	3308      	adds	r3, #8
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	da00      	bge.n	800bfb4 <Siemens_Data_Analyser+0x8f0>
 800bfb2:	3307      	adds	r3, #7
 800bfb4:	10db      	asrs	r3, r3, #3
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bfbc:	4413      	add	r3, r2
 800bfbe:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bfc2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bfc6:	3308      	adds	r3, #8
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	b21b      	sxth	r3, r3
 800bfcc:	425a      	negs	r2, r3
 800bfce:	f003 0307 	and.w	r3, r3, #7
 800bfd2:	f002 0207 	and.w	r2, r2, #7
 800bfd6:	bf58      	it	pl
 800bfd8:	4253      	negpl	r3, r2
 800bfda:	b21b      	sxth	r3, r3
 800bfdc:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourcePort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800bfe0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bfe4:	b2d8      	uxtb	r0, r3
 800bfe6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bfea:	f107 020c 	add.w	r2, r7, #12
 800bfee:	441a      	add	r2, r3
 800bff0:	2302      	movs	r3, #2
 800bff2:	2108      	movs	r1, #8
 800bff4:	f001 fd30 	bl	800da58 <Extract_Parity_Data>
 800bff8:	4603      	mov	r3, r0
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c000:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c004:	76da      	strb	r2, [r3, #27]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c006:	4b6b      	ldr	r3, [pc, #428]	; (800c1b4 <Siemens_Data_Analyser+0xaf0>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	091b      	lsrs	r3, r3, #4
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	2b00      	cmp	r3, #0
 800c012:	d02a      	beq.n	800c06a <Siemens_Data_Analyser+0x9a6>
	{
		printf("Injecting INVALID_SRC_PORT\n");
 800c014:	486f      	ldr	r0, [pc, #444]	; (800c1d4 <Siemens_Data_Analyser+0xb10>)
 800c016:	f016 fd47 	bl	8022aa8 <puts>
		Temp_Siemens_RX_st.SourcePort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800c01a:	4868      	ldr	r0, [pc, #416]	; (800c1bc <Siemens_Data_Analyser+0xaf8>)
 800c01c:	f00e f95c 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 800c020:	4601      	mov	r1, r0
 800c022:	4b67      	ldr	r3, [pc, #412]	; (800c1c0 <Siemens_Data_Analyser+0xafc>)
 800c024:	fba3 2301 	umull	r2, r3, r3, r1
 800c028:	09da      	lsrs	r2, r3, #7
 800c02a:	4613      	mov	r3, r2
 800c02c:	021b      	lsls	r3, r3, #8
 800c02e:	1a9b      	subs	r3, r3, r2
 800c030:	1aca      	subs	r2, r1, r3
 800c032:	b2d2      	uxtb	r2, r2
 800c034:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c038:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c03c:	76da      	strb	r2, [r3, #27]
		if(Temp_Siemens_RX_st.SourcePort == EI_data.Siemens_st.SourcePort)
 800c03e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c042:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c046:	7eda      	ldrb	r2, [r3, #27]
 800c048:	4b5e      	ldr	r3, [pc, #376]	; (800c1c4 <Siemens_Data_Analyser+0xb00>)
 800c04a:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800c04e:	429a      	cmp	r2, r3
 800c050:	d10b      	bne.n	800c06a <Siemens_Data_Analyser+0x9a6>
		{
			Temp_Siemens_RX_st.SourcePort += 4;
 800c052:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c056:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c05a:	7edb      	ldrb	r3, [r3, #27]
 800c05c:	3304      	adds	r3, #4
 800c05e:	b2da      	uxtb	r2, r3
 800c060:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c064:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c068:	76da      	strb	r2, [r3, #27]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SourcePort != EI_data.Siemens_st.SourcePort)
 800c06a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c06e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c072:	7eda      	ldrb	r2, [r3, #27]
 800c074:	4b53      	ldr	r3, [pc, #332]	; (800c1c4 <Siemens_Data_Analyser+0xb00>)
 800c076:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d015      	beq.n	800c0aa <Siemens_Data_Analyser+0x9e6>
	{
		printf("Source Port Not Matched\n");
 800c07e:	4856      	ldr	r0, [pc, #344]	; (800c1d8 <Siemens_Data_Analyser+0xb14>)
 800c080:	f016 fd12 	bl	8022aa8 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SourcePort);
 800c084:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c088:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c08c:	7edb      	ldrb	r3, [r3, #27]
 800c08e:	4619      	mov	r1, r3
 800c090:	484e      	ldr	r0, [pc, #312]	; (800c1cc <Siemens_Data_Analyser+0xb08>)
 800c092:	f016 fc6d 	bl	8022970 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourcePort);
 800c096:	4b4b      	ldr	r3, [pc, #300]	; (800c1c4 <Siemens_Data_Analyser+0xb00>)
 800c098:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800c09c:	4619      	mov	r1, r3
 800c09e:	484c      	ldr	r0, [pc, #304]	; (800c1d0 <Siemens_Data_Analyser+0xb0c>)
 800c0a0:	f016 fc66 	bl	8022970 <iprintf>
		RejectPacketFlag = 1;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_port:%u\n",Temp_Siemens_RX_st.src_port);
	BITSTUFFINC(8); // Source Port.
 800c0aa:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c0ae:	3308      	adds	r3, #8
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	da00      	bge.n	800c0b6 <Siemens_Data_Analyser+0x9f2>
 800c0b4:	3307      	adds	r3, #7
 800c0b6:	10db      	asrs	r3, r3, #3
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c0be:	4413      	add	r3, r2
 800c0c0:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c0c4:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c0c8:	3308      	adds	r3, #8
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	b21b      	sxth	r3, r3
 800c0ce:	425a      	negs	r2, r3
 800c0d0:	f003 0307 	and.w	r3, r3, #7
 800c0d4:	f002 0207 	and.w	r2, r2, #7
 800c0d8:	bf58      	it	pl
 800c0da:	4253      	negpl	r3, r2
 800c0dc:	b21b      	sxth	r3, r3
 800c0de:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.RxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800c0e2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c0e6:	b2d8      	uxtb	r0, r3
 800c0e8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c0ec:	f107 020c 	add.w	r2, r7, #12
 800c0f0:	441a      	add	r2, r3
 800c0f2:	2302      	movs	r3, #2
 800c0f4:	2120      	movs	r1, #32
 800c0f6:	f001 fcaf 	bl	800da58 <Extract_Parity_Data>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c102:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c106:	61da      	str	r2, [r3, #28]
	//	printf("Rx_time_stamp:%lu\n",Temp_Siemens_RX_st.Rx_time_stamp);
	BITSTUFFINC(32);//RX_TIME STAMP
 800c108:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c10c:	3320      	adds	r3, #32
 800c10e:	2b00      	cmp	r3, #0
 800c110:	da00      	bge.n	800c114 <Siemens_Data_Analyser+0xa50>
 800c112:	3307      	adds	r3, #7
 800c114:	10db      	asrs	r3, r3, #3
 800c116:	b29a      	uxth	r2, r3
 800c118:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c11c:	4413      	add	r3, r2
 800c11e:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c122:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c126:	3320      	adds	r3, #32
 800c128:	b29b      	uxth	r3, r3
 800c12a:	b21b      	sxth	r3, r3
 800c12c:	425a      	negs	r2, r3
 800c12e:	f003 0307 	and.w	r3, r3, #7
 800c132:	f002 0207 	and.w	r2, r2, #7
 800c136:	bf58      	it	pl
 800c138:	4253      	negpl	r3, r2
 800c13a:	b21b      	sxth	r3, r3
 800c13c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.TxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800c140:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c144:	b2d8      	uxtb	r0, r3
 800c146:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c14a:	f107 020c 	add.w	r2, r7, #12
 800c14e:	441a      	add	r2, r3
 800c150:	2302      	movs	r3, #2
 800c152:	2120      	movs	r1, #32
 800c154:	f001 fc80 	bl	800da58 <Extract_Parity_Data>
 800c158:	4603      	mov	r3, r0
 800c15a:	461a      	mov	r2, r3
 800c15c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c160:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c164:	621a      	str	r2, [r3, #32]
	//	printf("Tx_time_stamp:%lu\n",Temp_Siemens_RX_st.Tx_time_stamp);
	BITSTUFFINC(32);//TX_TIME STAMP
 800c166:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c16a:	3320      	adds	r3, #32
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	da00      	bge.n	800c172 <Siemens_Data_Analyser+0xaae>
 800c170:	3307      	adds	r3, #7
 800c172:	10db      	asrs	r3, r3, #3
 800c174:	b29a      	uxth	r2, r3
 800c176:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c17a:	4413      	add	r3, r2
 800c17c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c180:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c184:	3320      	adds	r3, #32
 800c186:	b29b      	uxth	r3, r3
 800c188:	b21b      	sxth	r3, r3
 800c18a:	425a      	negs	r2, r3
 800c18c:	f003 0307 	and.w	r3, r3, #7
 800c190:	f002 0207 	and.w	r2, r2, #7
 800c194:	bf58      	it	pl
 800c196:	4253      	negpl	r3, r2
 800c198:	b21b      	sxth	r3, r3
 800c19a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	//TO DO WRITE DATA EXTRACTION
	App_data_Size = 0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	printf("\n");
 800c1a4:	200a      	movs	r0, #10
 800c1a6:	f016 fbfb 	bl	80229a0 <putchar>
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800c1aa:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c1ae:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800c1b2:	e052      	b.n	800c25a <Siemens_Data_Analyser+0xb96>
 800c1b4:	20003518 	.word	0x20003518
 800c1b8:	0802650c 	.word	0x0802650c
 800c1bc:	20009d20 	.word	0x20009d20
 800c1c0:	80808081 	.word	0x80808081
 800c1c4:	20000304 	.word	0x20000304
 800c1c8:	08026528 	.word	0x08026528
 800c1cc:	08026434 	.word	0x08026434
 800c1d0:	08026444 	.word	0x08026444
 800c1d4:	08026548 	.word	0x08026548
 800c1d8:	08026564 	.word	0x08026564
	{
		App_Data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
 800c1dc:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c1e0:	b2d8      	uxtb	r0, r3
 800c1e2:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c1e6:	f107 020c 	add.w	r2, r7, #12
 800c1ea:	441a      	add	r2, r3
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	2108      	movs	r1, #8
 800c1f0:	f001 fc32 	bl	800da58 <Extract_Parity_Data>
 800c1f4:	4601      	mov	r1, r0
 800c1f6:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	; 0xa50
 800c1fa:	1c5a      	adds	r2, r3, #1
 800c1fc:	f8a7 2a50 	strh.w	r2, [r7, #2640]	; 0xa50
 800c200:	461a      	mov	r2, r3
 800c202:	b2c9      	uxtb	r1, r1
 800c204:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c208:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800c20c:	5499      	strb	r1, [r3, r2]
		//printf("D[%02u]:%02x|",App_data_Size,App_Data[App_data_Size]);
		//Temp_Siemens_RX_st.app_data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
		//Extract the Received application data into buffer and checking parity and Removing Parity.
		++App_data_Size; //This variable is to know the Latest Size of Received Application Data
 800c20e:	f8b7 3a4e 	ldrh.w	r3, [r7, #2638]	; 0xa4e
 800c212:	3301      	adds	r3, #1
 800c214:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
		BITSTUFFINC(8);
 800c218:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c21c:	3308      	adds	r3, #8
 800c21e:	2b00      	cmp	r3, #0
 800c220:	da00      	bge.n	800c224 <Siemens_Data_Analyser+0xb60>
 800c222:	3307      	adds	r3, #7
 800c224:	10db      	asrs	r3, r3, #3
 800c226:	b29a      	uxth	r2, r3
 800c228:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c22c:	4413      	add	r3, r2
 800c22e:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c232:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c236:	3308      	adds	r3, #8
 800c238:	b29b      	uxth	r3, r3
 800c23a:	b21b      	sxth	r3, r3
 800c23c:	425a      	negs	r2, r3
 800c23e:	f003 0307 	and.w	r3, r3, #7
 800c242:	f002 0207 	and.w	r2, r2, #7
 800c246:	bf58      	it	pl
 800c248:	4253      	negpl	r3, r2
 800c24a:	b21b      	sxth	r3, r3
 800c24c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800c250:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c254:	3301      	adds	r3, #1
 800c256:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800c25a:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c25e:	b29b      	uxth	r3, r3
 800c260:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800c264:	429a      	cmp	r2, r3
 800c266:	d8b9      	bhi.n	800c1dc <Siemens_Data_Analyser+0xb18>
	}
	printf("\n");
 800c268:	200a      	movs	r0, #10
 800c26a:	f016 fb99 	bl	80229a0 <putchar>



	Temp_Siemens_RX_st.No_ofDataBytes = ExtractAppData(App_Data, App_data_Size, Temp_Siemens_RX_st.AppData);
 800c26e:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800c272:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c276:	f8b7 1a4e 	ldrh.w	r1, [r7, #2638]	; 0xa4e
 800c27a:	f607 0334 	addw	r3, r7, #2100	; 0x834
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 f96e 	bl	800c560 <ExtractAppData>
 800c284:	4603      	mov	r3, r0
 800c286:	461a      	mov	r2, r3
 800c288:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c28c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c290:	849a      	strh	r2, [r3, #36]	; 0x24

	//	Temp_Siemens_RX_st.No_ofDataBytes = App_data_Size;

	TempApp_data_Size  = EI_data.Siemens_st.Booloutputs % 8;
 800c292:	4ba0      	ldr	r3, [pc, #640]	; (800c514 <Siemens_Data_Analyser+0xe50>)
 800c294:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c298:	f003 0307 	and.w	r3, r3, #7
 800c29c:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	if(TempApp_data_Size!= 0)
 800c2a0:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d008      	beq.n	800c2ba <Siemens_Data_Analyser+0xbf6>
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800c2a8:	4b9a      	ldr	r3, [pc, #616]	; (800c514 <Siemens_Data_Analyser+0xe50>)
 800c2aa:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c2ae:	08db      	lsrs	r3, r3, #3
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
 800c2b8:	e005      	b.n	800c2c6 <Siemens_Data_Analyser+0xc02>
	}
	else
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs/8);
 800c2ba:	4b96      	ldr	r3, [pc, #600]	; (800c514 <Siemens_Data_Analyser+0xe50>)
 800c2bc:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c2c0:	08db      	lsrs	r3, r3, #3
 800c2c2:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	}


	if(Temp_Siemens_RX_st.No_ofDataBytes != TempApp_data_Size)
 800c2c6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c2ca:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c2ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2d0:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d02c      	beq.n	800c332 <Siemens_Data_Analyser+0xc6e>
	{
		printf("Application Data Not Matched\n");
 800c2d8:	488f      	ldr	r0, [pc, #572]	; (800c518 <Siemens_Data_Analyser+0xe54>)
 800c2da:	f016 fbe5 	bl	8022aa8 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.No_ofDataBytes);
 800c2de:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c2e2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c2e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	488c      	ldr	r0, [pc, #560]	; (800c51c <Siemens_Data_Analyser+0xe58>)
 800c2ec:	f016 fb40 	bl	8022970 <iprintf>
		printf("Expected:%u\n",TempApp_data_Size);
 800c2f0:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	488a      	ldr	r0, [pc, #552]	; (800c520 <Siemens_Data_Analyser+0xe5c>)
 800c2f8:	f016 fb3a 	bl	8022970 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800c2fc:	4989      	ldr	r1, [pc, #548]	; (800c524 <Siemens_Data_Analyser+0xe60>)
 800c2fe:	488a      	ldr	r0, [pc, #552]	; (800c528 <Siemens_Data_Analyser+0xe64>)
 800c300:	f7f3 ff9e 	bl	8000240 <strcmp>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d002      	beq.n	800c310 <Siemens_Data_Analyser+0xc4c>
		{
			RejectPacketFlag = 1;
 800c30a:	2301      	movs	r3, #1
 800c30c:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
		}
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800c310:	4984      	ldr	r1, [pc, #528]	; (800c524 <Siemens_Data_Analyser+0xe60>)
 800c312:	4885      	ldr	r0, [pc, #532]	; (800c528 <Siemens_Data_Analyser+0xe64>)
 800c314:	f7f3 ff94 	bl	8000240 <strcmp>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d109      	bne.n	800c332 <Siemens_Data_Analyser+0xc6e>
		{
			EI_data.Siemens_st.Booloutputs = (Temp_Siemens_RX_st.No_ofDataBytes * 8);
 800c31e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c322:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c326:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c328:	00db      	lsls	r3, r3, #3
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	4b79      	ldr	r3, [pc, #484]	; (800c514 <Siemens_Data_Analyser+0xe50>)
 800c32e:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
		}
	}

	if(RejectPacketFlag == 1)
 800c332:	f897 3a4b 	ldrb.w	r3, [r7, #2635]	; 0xa4b
 800c336:	2b01      	cmp	r3, #1
 800c338:	f000 80e6 	beq.w	800c508 <Siemens_Data_Analyser+0xe44>
	{
		return;
	}

	VitalCRC = GetCRC16(0, Temp_Siemens_RX_st.AppData, App_data_Size); /* Calculating Application Data CRC */
 800c33c:	f9b7 2a4e 	ldrsh.w	r2, [r7, #2638]	; 0xa4e
 800c340:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800c344:	3326      	adds	r3, #38	; 0x26
 800c346:	4619      	mov	r1, r3
 800c348:	2000      	movs	r0, #0
 800c34a:	f006 fe81 	bl	8013050 <GetCRC16>
 800c34e:	4603      	mov	r3, r0
 800c350:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38

	Temp_Siemens_RX_st.crc = ExtractBits(0,16,&Buff[ucByte]); /* Extraction of Packet CRC */
 800c354:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c358:	f107 020c 	add.w	r2, r7, #12
 800c35c:	4413      	add	r3, r2
 800c35e:	461a      	mov	r2, r3
 800c360:	2110      	movs	r1, #16
 800c362:	2000      	movs	r0, #0
 800c364:	f7f4 f956 	bl	8000614 <ExtractBits>
 800c368:	4603      	mov	r3, r0
 800c36a:	b29a      	uxth	r2, r3
 800c36c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c370:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c374:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226




	/* if Everything is Okay copy to Main Rx Structure */
	memset(&Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800c378:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c37c:	2100      	movs	r1, #0
 800c37e:	486b      	ldr	r0, [pc, #428]	; (800c52c <Siemens_Data_Analyser+0xe68>)
 800c380:	f016 fa0e 	bl	80227a0 <memset>
	memcpy(&Siemens_RX_st,&Temp_Siemens_RX_st,sizeof(SIEMENS_PKT_t));
 800c384:	4a69      	ldr	r2, [pc, #420]	; (800c52c <Siemens_Data_Analyser+0xe68>)
 800c386:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c38a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c38e:	4610      	mov	r0, r2
 800c390:	4619      	mov	r1, r3
 800c392:	f44f 730a 	mov.w	r3, #552	; 0x228
 800c396:	461a      	mov	r2, r3
 800c398:	f016 f9da 	bl	8022750 <memcpy>

	/* Send Reply to Received Packet */
	Form_Siemens_Reply();
 800c39c:	f000 f936 	bl	800c60c <Form_Siemens_Reply>




	//	if( (RxTimeStampNotUpdatedCount <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)  ) /* Consider the Packet If our Time stamp is Updating only (or) up to Certain count */
	if( abs(RxTimeStampNotUpdatedCount - EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800c3a0:	4b63      	ldr	r3, [pc, #396]	; (800c530 <Siemens_Data_Analyser+0xe6c>)
 800c3a2:	881b      	ldrh	r3, [r3, #0]
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	4b5b      	ldr	r3, [pc, #364]	; (800c514 <Siemens_Data_Analyser+0xe50>)
 800c3a8:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c3ac:	1ad3      	subs	r3, r2, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	bfb8      	it	lt
 800c3b2:	425b      	neglt	r3, r3
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	4b57      	ldr	r3, [pc, #348]	; (800c514 <Siemens_Data_Analyser+0xe50>)
 800c3b8:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d871      	bhi.n	800c4a4 <Siemens_Data_Analyser+0xde0>
	{
		if(Prev_RxTimeStampSiemens != Temp_Siemens_RX_st.RxTimeStamp)
 800c3c0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c3c4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c3c8:	69da      	ldr	r2, [r3, #28]
 800c3ca:	4b5a      	ldr	r3, [pc, #360]	; (800c534 <Siemens_Data_Analyser+0xe70>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d04c      	beq.n	800c46c <Siemens_Data_Analyser+0xda8>
		{
			/* Update Clocks if Any */
			//			printf("Updating...\n");
			SiemensClocks_st.LastReceiveClk = HAL_GetTick();
 800c3d2:	f009 facf 	bl	8015974 <HAL_GetTick>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	4a57      	ldr	r2, [pc, #348]	; (800c538 <Siemens_Data_Analyser+0xe74>)
 800c3da:	60d3      	str	r3, [r2, #12]



			Prev_RxTimeStampSiemens = Temp_Siemens_RX_st.RxTimeStamp;
 800c3dc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c3e0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c3e4:	69db      	ldr	r3, [r3, #28]
 800c3e6:	4a53      	ldr	r2, [pc, #332]	; (800c534 <Siemens_Data_Analyser+0xe70>)
 800c3e8:	6013      	str	r3, [r2, #0]
			RxTimeStampNotUpdatedCount = 0;
 800c3ea:	4b51      	ldr	r3, [pc, #324]	; (800c530 <Siemens_Data_Analyser+0xe6c>)
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS Updating:%u\n",RxTimeStampNotUpdatedCount);
			if(SiemensMain_Relays_st.VitalCRC != VitalCRC)
 800c3f0:	4b52      	ldr	r3, [pc, #328]	; (800c53c <Siemens_Data_Analyser+0xe78>)
 800c3f2:	885b      	ldrh	r3, [r3, #2]
 800c3f4:	f8b7 2a38 	ldrh.w	r2, [r7, #2616]	; 0xa38
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d053      	beq.n	800c4a4 <Siemens_Data_Analyser+0xde0>
			{
				memset(&SiemensMain_Relays_st,0,sizeof(VITAL_DATA_SHARING_t));
 800c3fc:	f44f 7201 	mov.w	r2, #516	; 0x204
 800c400:	2100      	movs	r1, #0
 800c402:	484e      	ldr	r0, [pc, #312]	; (800c53c <Siemens_Data_Analyser+0xe78>)
 800c404:	f016 f9cc 	bl	80227a0 <memset>
				memset(&VitalData2MIE_st,0,sizeof(VITAL_DATA_t));
 800c408:	f240 2202 	movw	r2, #514	; 0x202
 800c40c:	2100      	movs	r1, #0
 800c40e:	484c      	ldr	r0, [pc, #304]	; (800c540 <Siemens_Data_Analyser+0xe7c>)
 800c410:	f016 f9c6 	bl	80227a0 <memset>

				SiemensMain_Relays_st.VitalCRC = VitalCRC;
 800c414:	4a49      	ldr	r2, [pc, #292]	; (800c53c <Siemens_Data_Analyser+0xe78>)
 800c416:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	; 0xa38
 800c41a:	8053      	strh	r3, [r2, #2]
				SiemensMain_Relays_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800c41c:	4b43      	ldr	r3, [pc, #268]	; (800c52c <Siemens_Data_Analyser+0xe68>)
 800c41e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c420:	4b46      	ldr	r3, [pc, #280]	; (800c53c <Siemens_Data_Analyser+0xe78>)
 800c422:	801a      	strh	r2, [r3, #0]
				memcpy(&SiemensMain_Relays_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800c424:	4b41      	ldr	r3, [pc, #260]	; (800c52c <Siemens_Data_Analyser+0xe68>)
 800c426:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c428:	461a      	mov	r2, r3
 800c42a:	4946      	ldr	r1, [pc, #280]	; (800c544 <Siemens_Data_Analyser+0xe80>)
 800c42c:	4846      	ldr	r0, [pc, #280]	; (800c548 <Siemens_Data_Analyser+0xe84>)
 800c42e:	f016 f98f 	bl	8022750 <memcpy>

				VitalData2MIE_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800c432:	4b3e      	ldr	r3, [pc, #248]	; (800c52c <Siemens_Data_Analyser+0xe68>)
 800c434:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c436:	4b42      	ldr	r3, [pc, #264]	; (800c540 <Siemens_Data_Analyser+0xe7c>)
 800c438:	801a      	strh	r2, [r3, #0]
				memcpy(&VitalData2MIE_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800c43a:	4b3c      	ldr	r3, [pc, #240]	; (800c52c <Siemens_Data_Analyser+0xe68>)
 800c43c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c43e:	461a      	mov	r2, r3
 800c440:	4940      	ldr	r1, [pc, #256]	; (800c544 <Siemens_Data_Analyser+0xe80>)
 800c442:	4842      	ldr	r0, [pc, #264]	; (800c54c <Siemens_Data_Analyser+0xe88>)
 800c444:	f016 f984 	bl	8022750 <memcpy>

				if(SiemensClocks_st.MisMatchFlag == CLEAR)
 800c448:	4b3b      	ldr	r3, [pc, #236]	; (800c538 <Siemens_Data_Analyser+0xe74>)
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d103      	bne.n	800c458 <Siemens_Data_Analyser+0xd94>
				{
#ifdef EI_1
					TransmitCanPkt(EI_PROCESS_DATA);
 800c450:	f240 1019 	movw	r0, #281	; 0x119
 800c454:	f003 fab8 	bl	800f9c8 <TransmitCanPkt>
#endif
				}

#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800c458:	f240 2007 	movw	r0, #519	; 0x207
 800c45c:	f003 fab4 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

				SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800c460:	f009 fa88 	bl	8015974 <HAL_GetTick>
 800c464:	4603      	mov	r3, r0
 800c466:	4a34      	ldr	r2, [pc, #208]	; (800c538 <Siemens_Data_Analyser+0xe74>)
 800c468:	6113      	str	r3, [r2, #16]
 800c46a:	e01b      	b.n	800c4a4 <Siemens_Data_Analyser+0xde0>

			}
		}
		else
		{
			RxTimeStampNotUpdatedCount++;
 800c46c:	4b30      	ldr	r3, [pc, #192]	; (800c530 <Siemens_Data_Analyser+0xe6c>)
 800c46e:	881b      	ldrh	r3, [r3, #0]
 800c470:	3301      	adds	r3, #1
 800c472:	b29a      	uxth	r2, r3
 800c474:	4b2e      	ldr	r3, [pc, #184]	; (800c530 <Siemens_Data_Analyser+0xe6c>)
 800c476:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);

			if(RxTimeStampNotUpdatedCount >  EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800c478:	4b2d      	ldr	r3, [pc, #180]	; (800c530 <Siemens_Data_Analyser+0xe6c>)
 800c47a:	881b      	ldrh	r3, [r3, #0]
 800c47c:	461a      	mov	r2, r3
 800c47e:	4b25      	ldr	r3, [pc, #148]	; (800c514 <Siemens_Data_Analyser+0xe50>)
 800c480:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c484:	429a      	cmp	r2, r3
 800c486:	d90d      	bls.n	800c4a4 <Siemens_Data_Analyser+0xde0>
			{
				printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);
 800c488:	4b29      	ldr	r3, [pc, #164]	; (800c530 <Siemens_Data_Analyser+0xe6c>)
 800c48a:	881b      	ldrh	r3, [r3, #0]
 800c48c:	4619      	mov	r1, r3
 800c48e:	4830      	ldr	r0, [pc, #192]	; (800c550 <Siemens_Data_Analyser+0xe8c>)
 800c490:	f016 fa6e 	bl	8022970 <iprintf>
				RxTimeStampNotUpdatedCount = EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount + 1; /* To Avoid Overflow */
 800c494:	4b1f      	ldr	r3, [pc, #124]	; (800c514 <Siemens_Data_Analyser+0xe50>)
 800c496:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	3301      	adds	r3, #1
 800c49e:	b29a      	uxth	r2, r3
 800c4a0:	4b23      	ldr	r3, [pc, #140]	; (800c530 <Siemens_Data_Analyser+0xe6c>)
 800c4a2:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	Print_Siemens_MSG(&Temp_Siemens_RX_st,Buff,Size,RX);
 800c4a4:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	; 0xa36
 800c4a8:	f107 010c 	add.w	r1, r7, #12
 800c4ac:	f207 600c 	addw	r0, r7, #1548	; 0x60c
 800c4b0:	2302      	movs	r3, #2
 800c4b2:	f000 fe43 	bl	800d13c <Print_Siemens_MSG>
	if(Siemens_tx_Buffer_st.Tx_Length > 0)
 800c4b6:	4b27      	ldr	r3, [pc, #156]	; (800c554 <Siemens_Data_Analyser+0xe90>)
 800c4b8:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00d      	beq.n	800c4dc <Siemens_Data_Analyser+0xe18>
	{
		Print_Siemens_MSG(&Temp_SiemensTx_st,Siemens_tx_Buffer_st.Tx_Buff,Siemens_tx_Buffer_st.Tx_Length,TX);
 800c4c0:	4b24      	ldr	r3, [pc, #144]	; (800c554 <Siemens_Data_Analyser+0xe90>)
 800c4c2:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	4922      	ldr	r1, [pc, #136]	; (800c554 <Siemens_Data_Analyser+0xe90>)
 800c4ca:	4823      	ldr	r0, [pc, #140]	; (800c558 <Siemens_Data_Analyser+0xe94>)
 800c4cc:	f000 fe36 	bl	800d13c <Print_Siemens_MSG>
		memset(&Siemens_tx_Buffer_st,0,sizeof(SIEMENS_TX_PKT_t));
 800c4d0:	f240 6202 	movw	r2, #1538	; 0x602
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	481f      	ldr	r0, [pc, #124]	; (800c554 <Siemens_Data_Analyser+0xe90>)
 800c4d8:	f016 f962 	bl	80227a0 <memset>
	}

	Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount = RxTimeStampNotUpdatedCount;
 800c4dc:	4b14      	ldr	r3, [pc, #80]	; (800c530 <Siemens_Data_Analyser+0xe6c>)
 800c4de:	881a      	ldrh	r2, [r3, #0]
 800c4e0:	4b1e      	ldr	r3, [pc, #120]	; (800c55c <Siemens_Data_Analyser+0xe98>)
 800c4e2:	805a      	strh	r2, [r3, #2]
	Tx_Siemens_self_sharing_st.DataReceving = RECEIVING;
 800c4e4:	4b1d      	ldr	r3, [pc, #116]	; (800c55c <Siemens_Data_Analyser+0xe98>)
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	701a      	strb	r2, [r3, #0]
	Tx_Siemens_self_sharing_st.MesgReceived = RECEIVED;
 800c4ea:	4b1c      	ldr	r3, [pc, #112]	; (800c55c <Siemens_Data_Analyser+0xe98>)
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 800c4f0:	f240 2001 	movw	r0, #513	; 0x201
 800c4f4:	f003 fa68 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800c4f8:	f009 fa3c 	bl	8015974 <HAL_GetTick>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	4a0e      	ldr	r2, [pc, #56]	; (800c538 <Siemens_Data_Analyser+0xe74>)
 800c500:	6093      	str	r3, [r2, #8]

	return;
 800c502:	e002      	b.n	800c50a <Siemens_Data_Analyser+0xe46>
		return;
 800c504:	bf00      	nop
 800c506:	e000      	b.n	800c50a <Siemens_Data_Analyser+0xe46>
		return;
 800c508:	bf00      	nop
}
 800c50a:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	20000304 	.word	0x20000304
 800c518:	0802657c 	.word	0x0802657c
 800c51c:	08026434 	.word	0x08026434
 800c520:	08026444 	.word	0x08026444
 800c524:	0802659c 	.word	0x0802659c
 800c528:	20000305 	.word	0x20000305
 800c52c:	2000289c 	.word	0x2000289c
 800c530:	20003d5c 	.word	0x20003d5c
 800c534:	20003d58 	.word	0x20003d58
 800c538:	2000352c 	.word	0x2000352c
 800c53c:	2000374c 	.word	0x2000374c
 800c540:	20003548 	.word	0x20003548
 800c544:	200028c2 	.word	0x200028c2
 800c548:	20003750 	.word	0x20003750
 800c54c:	2000354a 	.word	0x2000354a
 800c550:	080265a8 	.word	0x080265a8
 800c554:	20002f14 	.word	0x20002f14
 800c558:	20002cec 	.word	0x20002cec
 800c55c:	20003520 	.word	0x20003520

0800c560 <ExtractAppData>:

uint16_t ExtractAppData(uint8_t *MainBuffer, uint16_t MainBufferLength, uint8_t *ExtractBuffer)
{
 800c560:	b480      	push	{r7}
 800c562:	b089      	sub	sp, #36	; 0x24
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	460b      	mov	r3, r1
 800c56a:	607a      	str	r2, [r7, #4]
 800c56c:	817b      	strh	r3, [r7, #10]
	uint16_t ExtractBufferByteIndex = 0;
 800c56e:	2300      	movs	r3, #0
 800c570:	83fb      	strh	r3, [r7, #30]
	uint8_t ExtractBufferBitIndex = 0;
 800c572:	2300      	movs	r3, #0
 800c574:	777b      	strb	r3, [r7, #29]
	uint16_t TotalMainBits = (MainBufferLength * 8);
 800c576:	897b      	ldrh	r3, [r7, #10]
 800c578:	00db      	lsls	r3, r3, #3
 800c57a:	833b      	strh	r3, [r7, #24]

	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800c57c:	2300      	movs	r3, #0
 800c57e:	837b      	strh	r3, [r7, #26]
 800c580:	e039      	b.n	800c5f6 <ExtractAppData+0x96>
	{
		int Temp = (Traverser / 8);
 800c582:	8b7b      	ldrh	r3, [r7, #26]
 800c584:	08db      	lsrs	r3, r3, #3
 800c586:	b29b      	uxth	r3, r3
 800c588:	617b      	str	r3, [r7, #20]
		int BitJump = (Traverser % 8);
 800c58a:	8b7b      	ldrh	r3, [r7, #26]
 800c58c:	f003 0307 	and.w	r3, r3, #7
 800c590:	613b      	str	r3, [r7, #16]
		if (BitJump == 7)
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2b07      	cmp	r3, #7
 800c596:	d02a      	beq.n	800c5ee <ExtractAppData+0x8e>
		{
			continue;
		}
		if ((MainBuffer[Temp] >> (Traverser % 8)) & 1)
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	4413      	add	r3, r2
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	8b7b      	ldrh	r3, [r7, #26]
 800c5a4:	f003 0307 	and.w	r3, r3, #7
 800c5a8:	fa42 f303 	asr.w	r3, r2, r3
 800c5ac:	f003 0301 	and.w	r3, r3, #1
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d010      	beq.n	800c5d6 <ExtractAppData+0x76>
		{
			SET_BIT_USER(ExtractBufferBitIndex, ExtractBuffer[ExtractBufferByteIndex]);
 800c5b4:	8bfb      	ldrh	r3, [r7, #30]
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	b25a      	sxtb	r2, r3
 800c5be:	7f7b      	ldrb	r3, [r7, #29]
 800c5c0:	2101      	movs	r1, #1
 800c5c2:	fa01 f303 	lsl.w	r3, r1, r3
 800c5c6:	b25b      	sxtb	r3, r3
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	b259      	sxtb	r1, r3
 800c5cc:	8bfb      	ldrh	r3, [r7, #30]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	b2ca      	uxtb	r2, r1
 800c5d4:	701a      	strb	r2, [r3, #0]
		}
		++ExtractBufferBitIndex;
 800c5d6:	7f7b      	ldrb	r3, [r7, #29]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	777b      	strb	r3, [r7, #29]
		if (ExtractBufferBitIndex == 8)
 800c5dc:	7f7b      	ldrb	r3, [r7, #29]
 800c5de:	2b08      	cmp	r3, #8
 800c5e0:	d106      	bne.n	800c5f0 <ExtractAppData+0x90>
		{
			ExtractBufferBitIndex = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	777b      	strb	r3, [r7, #29]
			++ExtractBufferByteIndex;
 800c5e6:	8bfb      	ldrh	r3, [r7, #30]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	83fb      	strh	r3, [r7, #30]
 800c5ec:	e000      	b.n	800c5f0 <ExtractAppData+0x90>
			continue;
 800c5ee:	bf00      	nop
	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800c5f0:	8b7b      	ldrh	r3, [r7, #26]
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	837b      	strh	r3, [r7, #26]
 800c5f6:	8b7a      	ldrh	r2, [r7, #26]
 800c5f8:	8b3b      	ldrh	r3, [r7, #24]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d3c1      	bcc.n	800c582 <ExtractAppData+0x22>
		}
	}
	return (ExtractBufferByteIndex);
 800c5fe:	8bfb      	ldrh	r3, [r7, #30]
}
 800c600:	4618      	mov	r0, r3
 800c602:	3724      	adds	r7, #36	; 0x24
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <Form_Siemens_Reply>:

void Form_Siemens_Reply(void)
{
 800c60c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c610:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800c614:	af04      	add	r7, sp, #16

	uint8_t Buffer[REPLY_MAX_SIZE] = {0,};
 800c616:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800c61a:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 800c61e:	2300      	movs	r3, #0
 800c620:	6013      	str	r3, [r2, #0]
 800c622:	1d10      	adds	r0, r2, #4
 800c624:	f240 53fc 	movw	r3, #1532	; 0x5fc
 800c628:	461a      	mov	r2, r3
 800c62a:	2100      	movs	r1, #0
 800c62c:	f016 f8b8 	bl	80227a0 <memset>
	uint16_t App_data_Traverser = 0;
 800c630:	2300      	movs	r3, #0
 800c632:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
	uint16_t Calc_CRC =0;
 800c636:	2300      	movs	r3, #0
 800c638:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
	uint16_t Calc_Compliment_CRC = 0;
 800c63c:	2300      	movs	r3, #0
 800c63e:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
	uint16_t CRC_Compliment_Loc  = 0;
 800c642:	2300      	movs	r3, #0
 800c644:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650
	BITSTUFFINIT(0,0);
 800c648:	2300      	movs	r3, #0
 800c64a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c64e:	2300      	movs	r3, #0
 800c650:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	//	printf("\nSending Packet Data:\n");
	memset(&Siemens_TX_st,0,sizeof(SIEMENS_PKT_t));
 800c654:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c658:	2100      	movs	r1, #0
 800c65a:	48ba      	ldr	r0, [pc, #744]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c65c:	f016 f8a0 	bl	80227a0 <memset>


	Siemens_TX_st.DesSysType = Siemens_RX_st.SrcSysType; //Destination System_Type
 800c660:	4bb9      	ldr	r3, [pc, #740]	; (800c948 <Form_Siemens_Reply+0x33c>)
 800c662:	7b1b      	ldrb	r3, [r3, #12]
 800c664:	4ab7      	ldr	r2, [pc, #732]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c666:	7013      	strb	r3, [r2, #0]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DesSysType,ODD_PARITY);
 800c668:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c66c:	b2d8      	uxtb	r0, r3
 800c66e:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c672:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c676:	1899      	adds	r1, r3, r2
 800c678:	4bb2      	ldr	r3, [pc, #712]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2200      	movs	r2, #0
 800c680:	461c      	mov	r4, r3
 800c682:	4615      	mov	r5, r2
 800c684:	2301      	movs	r3, #1
 800c686:	9302      	str	r3, [sp, #8]
 800c688:	e9cd 4500 	strd	r4, r5, [sp]
 800c68c:	460a      	mov	r2, r1
 800c68e:	2108      	movs	r1, #8
 800c690:	f001 fb24 	bl	800dcdc <Insert_cal_parity>
	//	printf("Dst_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c694:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c698:	3308      	adds	r3, #8
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	da00      	bge.n	800c6a0 <Form_Siemens_Reply+0x94>
 800c69e:	3307      	adds	r3, #7
 800c6a0:	10db      	asrs	r3, r3, #3
 800c6a2:	b29a      	uxth	r2, r3
 800c6a4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c6a8:	4413      	add	r3, r2
 800c6aa:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c6ae:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c6b2:	3308      	adds	r3, #8
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	b21b      	sxth	r3, r3
 800c6b8:	425a      	negs	r2, r3
 800c6ba:	f003 0107 	and.w	r1, r3, #7
 800c6be:	f002 0307 	and.w	r3, r2, #7
 800c6c2:	bf58      	it	pl
 800c6c4:	4259      	negpl	r1, r3
 800c6c6:	b20b      	sxth	r3, r1
 800c6c8:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.DestAddr = Siemens_RX_st.SourceAddr; //Destination Address
 800c6cc:	4b9e      	ldr	r3, [pc, #632]	; (800c948 <Form_Siemens_Reply+0x33c>)
 800c6ce:	691a      	ldr	r2, [r3, #16]
 800c6d0:	4b9c      	ldr	r3, [pc, #624]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c6d2:	605a      	str	r2, [r3, #4]
	Siemens_TX_st.ExtDestAddr = Siemens_RX_st.ExtSourceAddr;
 800c6d4:	4b9c      	ldr	r3, [pc, #624]	; (800c948 <Form_Siemens_Reply+0x33c>)
 800c6d6:	695a      	ldr	r2, [r3, #20]
 800c6d8:	4b9a      	ldr	r3, [pc, #616]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c6da:	609a      	str	r2, [r3, #8]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.DestAddr,EVEN_PARITY);
 800c6dc:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c6e0:	b2d8      	uxtb	r0, r3
 800c6e2:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c6e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c6ea:	1899      	adds	r1, r3, r2
 800c6ec:	4b95      	ldr	r3, [pc, #596]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	4698      	mov	r8, r3
 800c6f4:	4691      	mov	r9, r2
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	9302      	str	r3, [sp, #8]
 800c6fa:	e9cd 8900 	strd	r8, r9, [sp]
 800c6fe:	460a      	mov	r2, r1
 800c700:	2118      	movs	r1, #24
 800c702:	f001 faeb 	bl	800dcdc <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.DestAddr = %lu\n",Siemens_TX_st.DestAddr);
	BITSTUFFINC(24);
 800c706:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c70a:	3318      	adds	r3, #24
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	da00      	bge.n	800c712 <Form_Siemens_Reply+0x106>
 800c710:	3307      	adds	r3, #7
 800c712:	10db      	asrs	r3, r3, #3
 800c714:	b29a      	uxth	r2, r3
 800c716:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c71a:	4413      	add	r3, r2
 800c71c:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c720:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c724:	3318      	adds	r3, #24
 800c726:	b29b      	uxth	r3, r3
 800c728:	b21b      	sxth	r3, r3
 800c72a:	425a      	negs	r2, r3
 800c72c:	f003 0107 	and.w	r1, r3, #7
 800c730:	f002 0307 	and.w	r3, r2, #7
 800c734:	bf58      	it	pl
 800c736:	4259      	negpl	r1, r3
 800c738:	b20b      	sxth	r3, r1
 800c73a:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SrcSysType = Siemens_RX_st.DesSysType; //Destination Address
 800c73e:	4b82      	ldr	r3, [pc, #520]	; (800c948 <Form_Siemens_Reply+0x33c>)
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	4a80      	ldr	r2, [pc, #512]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c744:	7313      	strb	r3, [r2, #12]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SrcSysType,ODD_PARITY);
 800c746:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c74a:	b2d8      	uxtb	r0, r3
 800c74c:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c750:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c754:	1899      	adds	r1, r3, r2
 800c756:	4b7b      	ldr	r3, [pc, #492]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c758:	7b1b      	ldrb	r3, [r3, #12]
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	2200      	movs	r2, #0
 800c75e:	469a      	mov	sl, r3
 800c760:	4693      	mov	fp, r2
 800c762:	2301      	movs	r3, #1
 800c764:	9302      	str	r3, [sp, #8]
 800c766:	e9cd ab00 	strd	sl, fp, [sp]
 800c76a:	460a      	mov	r2, r1
 800c76c:	2108      	movs	r1, #8
 800c76e:	f001 fab5 	bl	800dcdc <Insert_cal_parity>
	//	printf("Src_sys_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c772:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c776:	3308      	adds	r3, #8
 800c778:	2b00      	cmp	r3, #0
 800c77a:	da00      	bge.n	800c77e <Form_Siemens_Reply+0x172>
 800c77c:	3307      	adds	r3, #7
 800c77e:	10db      	asrs	r3, r3, #3
 800c780:	b29a      	uxth	r2, r3
 800c782:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c786:	4413      	add	r3, r2
 800c788:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c78c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c790:	3308      	adds	r3, #8
 800c792:	b29b      	uxth	r3, r3
 800c794:	b21b      	sxth	r3, r3
 800c796:	425a      	negs	r2, r3
 800c798:	f003 0107 	and.w	r1, r3, #7
 800c79c:	f002 0307 	and.w	r3, r2, #7
 800c7a0:	bf58      	it	pl
 800c7a2:	4259      	negpl	r1, r3
 800c7a4:	b20b      	sxth	r3, r1
 800c7a6:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourceAddr = Siemens_RX_st.DestAddr;
 800c7aa:	4b67      	ldr	r3, [pc, #412]	; (800c948 <Form_Siemens_Reply+0x33c>)
 800c7ac:	685a      	ldr	r2, [r3, #4]
 800c7ae:	4b65      	ldr	r3, [pc, #404]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c7b0:	611a      	str	r2, [r3, #16]
	Siemens_TX_st.ExtSourceAddr = Siemens_RX_st.ExtDestAddr;
 800c7b2:	4b65      	ldr	r3, [pc, #404]	; (800c948 <Form_Siemens_Reply+0x33c>)
 800c7b4:	689a      	ldr	r2, [r3, #8]
 800c7b6:	4b63      	ldr	r3, [pc, #396]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c7b8:	615a      	str	r2, [r3, #20]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.SourceAddr,EVEN_PARITY);
 800c7ba:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c7be:	b2d8      	uxtb	r0, r3
 800c7c0:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c7c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c7c8:	1899      	adds	r1, r3, r2
 800c7ca:	4b5e      	ldr	r3, [pc, #376]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c7cc:	691b      	ldr	r3, [r3, #16]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	643b      	str	r3, [r7, #64]	; 0x40
 800c7d2:	647a      	str	r2, [r7, #68]	; 0x44
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	9302      	str	r3, [sp, #8]
 800c7d8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c7dc:	e9cd 3400 	strd	r3, r4, [sp]
 800c7e0:	460a      	mov	r2, r1
 800c7e2:	2118      	movs	r1, #24
 800c7e4:	f001 fa7a 	bl	800dcdc <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.SourceAddr = %lu\n",Siemens_TX_st.SourceAddr);
	BITSTUFFINC(24);
 800c7e8:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c7ec:	3318      	adds	r3, #24
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	da00      	bge.n	800c7f4 <Form_Siemens_Reply+0x1e8>
 800c7f2:	3307      	adds	r3, #7
 800c7f4:	10db      	asrs	r3, r3, #3
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c7fc:	4413      	add	r3, r2
 800c7fe:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c802:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c806:	3318      	adds	r3, #24
 800c808:	b29b      	uxth	r3, r3
 800c80a:	b21b      	sxth	r3, r3
 800c80c:	425a      	negs	r2, r3
 800c80e:	f003 0107 	and.w	r1, r3, #7
 800c812:	f002 0307 	and.w	r3, r2, #7
 800c816:	bf58      	it	pl
 800c818:	4259      	negpl	r1, r3
 800c81a:	b20b      	sxth	r3, r1
 800c81c:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.ProdDataVer = PROD_VERSION; //Self Product Version
 800c820:	4a48      	ldr	r2, [pc, #288]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c822:	230a      	movs	r3, #10
 800c824:	7613      	strb	r3, [r2, #24]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.ProdDataVer,EVEN_PARITY);
 800c826:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c82a:	b2d8      	uxtb	r0, r3
 800c82c:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c830:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c834:	1899      	adds	r1, r3, r2
 800c836:	4b43      	ldr	r3, [pc, #268]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c838:	7e1b      	ldrb	r3, [r3, #24]
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	2200      	movs	r2, #0
 800c83e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c840:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c842:	2300      	movs	r3, #0
 800c844:	9302      	str	r3, [sp, #8]
 800c846:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800c84a:	e9cd 3400 	strd	r3, r4, [sp]
 800c84e:	460a      	mov	r2, r1
 800c850:	2108      	movs	r1, #8
 800c852:	f001 fa43 	bl	800dcdc <Insert_cal_parity>
	//	printf("prod_data_ver:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c856:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c85a:	3308      	adds	r3, #8
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	da00      	bge.n	800c862 <Form_Siemens_Reply+0x256>
 800c860:	3307      	adds	r3, #7
 800c862:	10db      	asrs	r3, r3, #3
 800c864:	b29a      	uxth	r2, r3
 800c866:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c86a:	4413      	add	r3, r2
 800c86c:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c870:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c874:	3308      	adds	r3, #8
 800c876:	b29b      	uxth	r3, r3
 800c878:	b21b      	sxth	r3, r3
 800c87a:	425a      	negs	r2, r3
 800c87c:	f003 0107 	and.w	r1, r3, #7
 800c880:	f002 0307 	and.w	r3, r2, #7
 800c884:	bf58      	it	pl
 800c886:	4259      	negpl	r1, r3
 800c888:	b20b      	sxth	r3, r1
 800c88a:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.CompIndex = COMP_INDEX; //Self Compatability Index
 800c88e:	4a2d      	ldr	r2, [pc, #180]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c890:	2301      	movs	r3, #1
 800c892:	7653      	strb	r3, [r2, #25]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.CompIndex,ODD_PARITY);
 800c894:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c898:	b2d8      	uxtb	r0, r3
 800c89a:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c89e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c8a2:	1899      	adds	r1, r3, r2
 800c8a4:	4b27      	ldr	r3, [pc, #156]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c8a6:	7e5b      	ldrb	r3, [r3, #25]
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	633b      	str	r3, [r7, #48]	; 0x30
 800c8ae:	637a      	str	r2, [r7, #52]	; 0x34
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	9302      	str	r3, [sp, #8]
 800c8b4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c8b8:	e9cd 3400 	strd	r3, r4, [sp]
 800c8bc:	460a      	mov	r2, r1
 800c8be:	2108      	movs	r1, #8
 800c8c0:	f001 fa0c 	bl	800dcdc <Insert_cal_parity>
	//	printf("comp_index:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c8c4:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c8c8:	3308      	adds	r3, #8
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	da00      	bge.n	800c8d0 <Form_Siemens_Reply+0x2c4>
 800c8ce:	3307      	adds	r3, #7
 800c8d0:	10db      	asrs	r3, r3, #3
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c8d8:	4413      	add	r3, r2
 800c8da:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c8de:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c8e2:	3308      	adds	r3, #8
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	b21b      	sxth	r3, r3
 800c8e8:	425a      	negs	r2, r3
 800c8ea:	f003 0307 	and.w	r3, r3, #7
 800c8ee:	f002 0207 	and.w	r2, r2, #7
 800c8f2:	bf58      	it	pl
 800c8f4:	4253      	negpl	r3, r2
 800c8f6:	b21b      	sxth	r3, r3
 800c8f8:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	Siemens_TX_st.DestPort = Siemens_RX_st.SourcePort; //Destination Port
 800c8fc:	4b12      	ldr	r3, [pc, #72]	; (800c948 <Form_Siemens_Reply+0x33c>)
 800c8fe:	7edb      	ldrb	r3, [r3, #27]
 800c900:	4a10      	ldr	r2, [pc, #64]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c902:	7693      	strb	r3, [r2, #26]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DestPort,NO_PARITY);
 800c904:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c908:	b2d8      	uxtb	r0, r3
 800c90a:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c90e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c912:	1899      	adds	r1, r3, r2
 800c914:	4b0b      	ldr	r3, [pc, #44]	; (800c944 <Form_Siemens_Reply+0x338>)
 800c916:	7e9b      	ldrb	r3, [r3, #26]
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	2200      	movs	r2, #0
 800c91c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c91e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c920:	2302      	movs	r3, #2
 800c922:	9302      	str	r3, [sp, #8]
 800c924:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c928:	e9cd 3400 	strd	r3, r4, [sp]
 800c92c:	460a      	mov	r2, r1
 800c92e:	2108      	movs	r1, #8
 800c930:	f001 f9d4 	bl	800dcdc <Insert_cal_parity>
	//	printf("dst_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c934:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c938:	3308      	adds	r3, #8
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	da06      	bge.n	800c94c <Form_Siemens_Reply+0x340>
 800c93e:	3307      	adds	r3, #7
 800c940:	e004      	b.n	800c94c <Form_Siemens_Reply+0x340>
 800c942:	bf00      	nop
 800c944:	20002ac4 	.word	0x20002ac4
 800c948:	2000289c 	.word	0x2000289c
 800c94c:	10db      	asrs	r3, r3, #3
 800c94e:	b29a      	uxth	r2, r3
 800c950:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c954:	4413      	add	r3, r2
 800c956:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c95a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c95e:	3308      	adds	r3, #8
 800c960:	b29b      	uxth	r3, r3
 800c962:	b21b      	sxth	r3, r3
 800c964:	425a      	negs	r2, r3
 800c966:	f003 0307 	and.w	r3, r3, #7
 800c96a:	f002 0207 	and.w	r2, r2, #7
 800c96e:	bf58      	it	pl
 800c970:	4253      	negpl	r3, r2
 800c972:	b21b      	sxth	r3, r3
 800c974:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourcePort = Siemens_RX_st.DestPort; //Source Port
 800c978:	4bc4      	ldr	r3, [pc, #784]	; (800cc8c <Form_Siemens_Reply+0x680>)
 800c97a:	7e9a      	ldrb	r2, [r3, #26]
 800c97c:	4bc4      	ldr	r3, [pc, #784]	; (800cc90 <Form_Siemens_Reply+0x684>)
 800c97e:	76da      	strb	r2, [r3, #27]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SourcePort,NO_PARITY);
 800c980:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c984:	b2d8      	uxtb	r0, r3
 800c986:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c98a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c98e:	441a      	add	r2, r3
 800c990:	4bbf      	ldr	r3, [pc, #764]	; (800cc90 <Form_Siemens_Reply+0x684>)
 800c992:	7edb      	ldrb	r3, [r3, #27]
 800c994:	b2db      	uxtb	r3, r3
 800c996:	2100      	movs	r1, #0
 800c998:	623b      	str	r3, [r7, #32]
 800c99a:	6279      	str	r1, [r7, #36]	; 0x24
 800c99c:	2302      	movs	r3, #2
 800c99e:	9302      	str	r3, [sp, #8]
 800c9a0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c9a4:	e9cd 3400 	strd	r3, r4, [sp]
 800c9a8:	2108      	movs	r1, #8
 800c9aa:	f001 f997 	bl	800dcdc <Insert_cal_parity>
	//	printf("src_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c9ae:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c9b2:	3308      	adds	r3, #8
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	da00      	bge.n	800c9ba <Form_Siemens_Reply+0x3ae>
 800c9b8:	3307      	adds	r3, #7
 800c9ba:	10db      	asrs	r3, r3, #3
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c9c2:	4413      	add	r3, r2
 800c9c4:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c9c8:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c9cc:	3308      	adds	r3, #8
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	b21b      	sxth	r3, r3
 800c9d2:	425a      	negs	r2, r3
 800c9d4:	f003 0307 	and.w	r3, r3, #7
 800c9d8:	f002 0207 	and.w	r2, r2, #7
 800c9dc:	bf58      	it	pl
 800c9de:	4253      	negpl	r3, r2
 800c9e0:	b21b      	sxth	r3, r3
 800c9e2:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.RxTimeStamp = Siemens_RX_st.TxTimeStamp; //Source Port
 800c9e6:	4ba9      	ldr	r3, [pc, #676]	; (800cc8c <Form_Siemens_Reply+0x680>)
 800c9e8:	6a1b      	ldr	r3, [r3, #32]
 800c9ea:	4aa9      	ldr	r2, [pc, #676]	; (800cc90 <Form_Siemens_Reply+0x684>)
 800c9ec:	61d3      	str	r3, [r2, #28]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.RxTimeStamp,NO_PARITY);
 800c9ee:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c9f2:	b2d8      	uxtb	r0, r3
 800c9f4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c9f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c9fc:	4413      	add	r3, r2
 800c9fe:	4aa4      	ldr	r2, [pc, #656]	; (800cc90 <Form_Siemens_Reply+0x684>)
 800ca00:	69d2      	ldr	r2, [r2, #28]
 800ca02:	2100      	movs	r1, #0
 800ca04:	61ba      	str	r2, [r7, #24]
 800ca06:	61f9      	str	r1, [r7, #28]
 800ca08:	2202      	movs	r2, #2
 800ca0a:	9202      	str	r2, [sp, #8]
 800ca0c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ca10:	e9cd 1200 	strd	r1, r2, [sp]
 800ca14:	461a      	mov	r2, r3
 800ca16:	2120      	movs	r1, #32
 800ca18:	f001 f960 	bl	800dcdc <Insert_cal_parity>
	//	printf("Rx_time_stamp:%lu\n",Siemens_TX_st.Rx_time_stamp);
	BITSTUFFINC(32);
 800ca1c:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800ca20:	3320      	adds	r3, #32
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	da00      	bge.n	800ca28 <Form_Siemens_Reply+0x41c>
 800ca26:	3307      	adds	r3, #7
 800ca28:	10db      	asrs	r3, r3, #3
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ca30:	4413      	add	r3, r2
 800ca32:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800ca36:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ca3a:	3320      	adds	r3, #32
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	b21b      	sxth	r3, r3
 800ca40:	425a      	negs	r2, r3
 800ca42:	f003 0307 	and.w	r3, r3, #7
 800ca46:	f002 0207 	and.w	r2, r2, #7
 800ca4a:	bf58      	it	pl
 800ca4c:	4253      	negpl	r3, r2
 800ca4e:	b21b      	sxth	r3, r3
 800ca50:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.TxTimeStamp = SelfTimeStamp;//(uint32_t)(HAL_GetTick()/100);//Temp_Siemens_RX_st.Tx_time_stamp; //Source Port
 800ca54:	4b8f      	ldr	r3, [pc, #572]	; (800cc94 <Form_Siemens_Reply+0x688>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a8d      	ldr	r2, [pc, #564]	; (800cc90 <Form_Siemens_Reply+0x684>)
 800ca5a:	6213      	str	r3, [r2, #32]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.TxTimeStamp,NO_PARITY);
 800ca5c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ca60:	b2d8      	uxtb	r0, r3
 800ca62:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ca66:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ca6a:	4413      	add	r3, r2
 800ca6c:	4a88      	ldr	r2, [pc, #544]	; (800cc90 <Form_Siemens_Reply+0x684>)
 800ca6e:	6a12      	ldr	r2, [r2, #32]
 800ca70:	2100      	movs	r1, #0
 800ca72:	613a      	str	r2, [r7, #16]
 800ca74:	6179      	str	r1, [r7, #20]
 800ca76:	2202      	movs	r2, #2
 800ca78:	9202      	str	r2, [sp, #8]
 800ca7a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ca7e:	e9cd 1200 	strd	r1, r2, [sp]
 800ca82:	461a      	mov	r2, r3
 800ca84:	2120      	movs	r1, #32
 800ca86:	f001 f929 	bl	800dcdc <Insert_cal_parity>
	//	printf("Tx_time_stamp:%lu\n",Siemens_TX_st.Tx_time_stamp);
	BITSTUFFINC(32);
 800ca8a:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800ca8e:	3320      	adds	r3, #32
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	da00      	bge.n	800ca96 <Form_Siemens_Reply+0x48a>
 800ca94:	3307      	adds	r3, #7
 800ca96:	10db      	asrs	r3, r3, #3
 800ca98:	b29a      	uxth	r2, r3
 800ca9a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ca9e:	4413      	add	r3, r2
 800caa0:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800caa4:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800caa8:	3320      	adds	r3, #32
 800caaa:	b29b      	uxth	r3, r3
 800caac:	b21b      	sxth	r3, r3
 800caae:	425a      	negs	r2, r3
 800cab0:	f003 0307 	and.w	r3, r3, #7
 800cab4:	f002 0207 	and.w	r2, r2, #7
 800cab8:	bf58      	it	pl
 800caba:	4253      	negpl	r3, r2
 800cabc:	b21b      	sxth	r3, r3
 800cabe:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	CRC_Compliment_Loc = Data_Compliment(Buffer,ucByte,CONVERT); //ucByte = 30;
 800cac2:	f8b7 164e 	ldrh.w	r1, [r7, #1614]	; 0x64e
 800cac6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800caca:	2201      	movs	r2, #1
 800cacc:	4618      	mov	r0, r3
 800cace:	f001 fa6b 	bl	800dfa8 <Data_Compliment>
 800cad2:	4603      	mov	r3, r0
 800cad4:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650

	Calc_CRC = Siemens_CRC(Buffer,ucByte); //30
 800cad8:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800cadc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cae0:	4611      	mov	r1, r2
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 ff64 	bl	800d9b0 <Siemens_CRC>
 800cae8:	4603      	mov	r3, r0
 800caea:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656


#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800caee:	4b6a      	ldr	r3, [pc, #424]	; (800cc98 <Form_Siemens_Reply+0x68c>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	09db      	lsrs	r3, r3, #7
 800caf4:	f003 0301 	and.w	r3, r3, #1
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d02c      	beq.n	800cb56 <Form_Siemens_Reply+0x54a>
	{
		uint16_t Temp_Crc = Calc_CRC;
 800cafc:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800cb00:	f8a7 364a 	strh.w	r3, [r7, #1610]	; 0x64a
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800cb04:	4865      	ldr	r0, [pc, #404]	; (800cc9c <Form_Siemens_Reply+0x690>)
 800cb06:	f015 ffcf 	bl	8022aa8 <puts>
		printf("Actual CRC:%04x\n",Calc_CRC);
 800cb0a:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800cb0e:	4619      	mov	r1, r3
 800cb10:	4863      	ldr	r0, [pc, #396]	; (800cca0 <Form_Siemens_Reply+0x694>)
 800cb12:	f015 ff2d 	bl	8022970 <iprintf>

		Calc_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800cb16:	4863      	ldr	r0, [pc, #396]	; (800cca4 <Form_Siemens_Reply+0x698>)
 800cb18:	f00d fbde 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 800cb1c:	4601      	mov	r1, r0
 800cb1e:	4b62      	ldr	r3, [pc, #392]	; (800cca8 <Form_Siemens_Reply+0x69c>)
 800cb20:	fba3 2301 	umull	r2, r3, r3, r1
 800cb24:	0bda      	lsrs	r2, r3, #15
 800cb26:	4613      	mov	r3, r2
 800cb28:	041b      	lsls	r3, r3, #16
 800cb2a:	1a9b      	subs	r3, r3, r2
 800cb2c:	1aca      	subs	r2, r1, r3
 800cb2e:	4613      	mov	r3, r2
 800cb30:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		if(Calc_CRC == Temp_Crc)
 800cb34:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800cb38:	f8b7 364a 	ldrh.w	r3, [r7, #1610]	; 0x64a
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d104      	bne.n	800cb4a <Form_Siemens_Reply+0x53e>
		{
			Calc_CRC += 4;
 800cb40:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800cb44:	3304      	adds	r3, #4
 800cb46:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		}
		printf("Injected CRC:%04x\n",Calc_CRC);
 800cb4a:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800cb4e:	4619      	mov	r1, r3
 800cb50:	4856      	ldr	r0, [pc, #344]	; (800ccac <Form_Siemens_Reply+0x6a0>)
 800cb52:	f015 ff0d 	bl	8022970 <iprintf>




	//	printf("Cal_CRC:0x%04x\n",Calc_CRC);
	Insert_cal_parity(ucBit,16,&Buffer[ucByte],Calc_CRC,NO_PARITY);
 800cb56:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cb5a:	b2d8      	uxtb	r0, r3
 800cb5c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cb60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cb64:	4413      	add	r3, r2
 800cb66:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	60ba      	str	r2, [r7, #8]
 800cb6e:	60f9      	str	r1, [r7, #12]
 800cb70:	2202      	movs	r2, #2
 800cb72:	9202      	str	r2, [sp, #8]
 800cb74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cb78:	e9cd 1200 	strd	r1, r2, [sp]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	2110      	movs	r1, #16
 800cb80:	f001 f8ac 	bl	800dcdc <Insert_cal_parity>
	BITSTUFFINC(16);
 800cb84:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cb88:	3310      	adds	r3, #16
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	da00      	bge.n	800cb90 <Form_Siemens_Reply+0x584>
 800cb8e:	3307      	adds	r3, #7
 800cb90:	10db      	asrs	r3, r3, #3
 800cb92:	b29a      	uxth	r2, r3
 800cb94:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cb98:	4413      	add	r3, r2
 800cb9a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cb9e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cba2:	3310      	adds	r3, #16
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	b21b      	sxth	r3, r3
 800cba8:	425a      	negs	r2, r3
 800cbaa:	f003 0307 	and.w	r3, r3, #7
 800cbae:	f002 0207 	and.w	r2, r2, #7
 800cbb2:	bf58      	it	pl
 800cbb4:	4253      	negpl	r3, r2
 800cbb6:	b21b      	sxth	r3, r3
 800cbb8:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Calc_Compliment_CRC = Siemens_CRC(&Buffer[ucByte],ucByte-2);//32,30
 800cbbc:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cbc0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cbc4:	441a      	add	r2, r3
 800cbc6:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cbca:	3b02      	subs	r3, #2
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	4619      	mov	r1, r3
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	f000 feed 	bl	800d9b0 <Siemens_CRC>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cbdc:	4b2e      	ldr	r3, [pc, #184]	; (800cc98 <Form_Siemens_Reply+0x68c>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	0a5b      	lsrs	r3, r3, #9
 800cbe2:	f003 0301 	and.w	r3, r3, #1
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d02c      	beq.n	800cc44 <Form_Siemens_Reply+0x638>
	{
		uint16_t Temp_Crc = Calc_Compliment_CRC;
 800cbea:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800cbee:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800cbf2:	482a      	ldr	r0, [pc, #168]	; (800cc9c <Form_Siemens_Reply+0x690>)
 800cbf4:	f015 ff58 	bl	8022aa8 <puts>
		printf("Actual Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800cbf8:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	482c      	ldr	r0, [pc, #176]	; (800ccb0 <Form_Siemens_Reply+0x6a4>)
 800cc00:	f015 feb6 	bl	8022970 <iprintf>
		Calc_Compliment_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800cc04:	4827      	ldr	r0, [pc, #156]	; (800cca4 <Form_Siemens_Reply+0x698>)
 800cc06:	f00d fb67 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 800cc0a:	4601      	mov	r1, r0
 800cc0c:	4b26      	ldr	r3, [pc, #152]	; (800cca8 <Form_Siemens_Reply+0x69c>)
 800cc0e:	fba3 2301 	umull	r2, r3, r3, r1
 800cc12:	0bda      	lsrs	r2, r3, #15
 800cc14:	4613      	mov	r3, r2
 800cc16:	041b      	lsls	r3, r3, #16
 800cc18:	1a9b      	subs	r3, r3, r2
 800cc1a:	1aca      	subs	r2, r1, r3
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		if(Calc_Compliment_CRC == Temp_Crc)
 800cc22:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800cc26:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d104      	bne.n	800cc38 <Form_Siemens_Reply+0x62c>
		{
			Calc_Compliment_CRC += 4;
 800cc2e:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800cc32:	3304      	adds	r3, #4
 800cc34:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		}
		printf("Injected Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800cc38:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	481d      	ldr	r0, [pc, #116]	; (800ccb4 <Form_Siemens_Reply+0x6a8>)
 800cc40:	f015 fe96 	bl	8022970 <iprintf>
	}
#endif
	//	printf("Calc_Compliment_CRC:0x%04x\n",Calc_Compliment_CRC);
	ucByte+=ucByte;
 800cc44:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cc48:	005b      	lsls	r3, r3, #1
 800cc4a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
	Insert_cal_parity(ucBit,16,&Buffer[CRC_Compliment_Loc],Calc_Compliment_CRC,NO_PARITY);
 800cc4e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cc52:	b2d8      	uxtb	r0, r3
 800cc54:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cc58:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cc5c:	4413      	add	r3, r2
 800cc5e:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800cc62:	2100      	movs	r1, #0
 800cc64:	603a      	str	r2, [r7, #0]
 800cc66:	6079      	str	r1, [r7, #4]
 800cc68:	2202      	movs	r2, #2
 800cc6a:	9202      	str	r2, [sp, #8]
 800cc6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cc70:	e9cd 1200 	strd	r1, r2, [sp]
 800cc74:	461a      	mov	r2, r3
 800cc76:	2110      	movs	r1, #16
 800cc78:	f001 f830 	bl	800dcdc <Insert_cal_parity>
	BITSTUFFINC(16);
 800cc7c:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cc80:	3310      	adds	r3, #16
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	da18      	bge.n	800ccb8 <Form_Siemens_Reply+0x6ac>
 800cc86:	3307      	adds	r3, #7
 800cc88:	e016      	b.n	800ccb8 <Form_Siemens_Reply+0x6ac>
 800cc8a:	bf00      	nop
 800cc8c:	2000289c 	.word	0x2000289c
 800cc90:	20002ac4 	.word	0x20002ac4
 800cc94:	20003d60 	.word	0x20003d60
 800cc98:	20003518 	.word	0x20003518
 800cc9c:	0802631c 	.word	0x0802631c
 800cca0:	080265cc 	.word	0x080265cc
 800cca4:	20009d20 	.word	0x20009d20
 800cca8:	80008001 	.word	0x80008001
 800ccac:	080265e0 	.word	0x080265e0
 800ccb0:	080265f4 	.word	0x080265f4
 800ccb4:	08026610 	.word	0x08026610
 800ccb8:	10db      	asrs	r3, r3, #3
 800ccba:	b29a      	uxth	r2, r3
 800ccbc:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ccc0:	4413      	add	r3, r2
 800ccc2:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800ccc6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ccca:	3310      	adds	r3, #16
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	b21b      	sxth	r3, r3
 800ccd0:	425a      	negs	r2, r3
 800ccd2:	f003 0307 	and.w	r3, r3, #7
 800ccd6:	f002 0207 	and.w	r2, r2, #7
 800ccda:	bf58      	it	pl
 800ccdc:	4253      	negpl	r3, r2
 800ccde:	b21b      	sxth	r3, r3
 800cce0:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	memcpy(Siemens_tx_Buffer_st.Tx_Buff,Buffer,CRC_Compliment_Loc+2);
 800cce4:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cce8:	3302      	adds	r3, #2
 800ccea:	461a      	mov	r2, r3
 800ccec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	481e      	ldr	r0, [pc, #120]	; (800cd6c <Form_Siemens_Reply+0x760>)
 800ccf4:	f015 fd2c 	bl	8022750 <memcpy>
	Siemens_tx_Buffer_st.Tx_Length = (CRC_Compliment_Loc+2);
 800ccf8:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800ccfc:	3302      	adds	r3, #2
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	4b1a      	ldr	r3, [pc, #104]	; (800cd6c <Form_Siemens_Reply+0x760>)
 800cd02:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600

	CheckToSendReplyorNot();
 800cd06:	f001 f9bb 	bl	800e080 <CheckToSendReplyorNot>

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cd0a:	4b19      	ldr	r3, [pc, #100]	; (800cd70 <Form_Siemens_Reply+0x764>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	099b      	lsrs	r3, r3, #6
 800cd10:	f003 0301 	and.w	r3, r3, #1
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d003      	beq.n	800cd20 <Form_Siemens_Reply+0x714>
	{
		printf("Injecting NO REPLY FROM EIPC Failure\n");
 800cd18:	4816      	ldr	r0, [pc, #88]	; (800cd74 <Form_Siemens_Reply+0x768>)
 800cd1a:	f015 fec5 	bl	8022aa8 <puts>
 800cd1e:	e00f      	b.n	800cd40 <Form_Siemens_Reply+0x734>
	}
	else
	{
		if(SendReply == 1)
 800cd20:	4b15      	ldr	r3, [pc, #84]	; (800cd78 <Form_Siemens_Reply+0x76c>)
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d10b      	bne.n	800cd40 <Form_Siemens_Reply+0x734>
		{
			udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
 800cd28:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	3302      	adds	r3, #2
 800cd30:	b2d9      	uxtb	r1, r3
 800cd32:	4a12      	ldr	r2, [pc, #72]	; (800cd7c <Form_Siemens_Reply+0x770>)
 800cd34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cd38:	6812      	ldr	r2, [r2, #0]
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f002 fc00 	bl	800f540 <udpClient_send>
	{
		udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
	}
#endif

	memset(&Temp_SiemensTx_st,0,sizeof(SIEMENS_PKT_t));
 800cd40:	f44f 720a 	mov.w	r2, #552	; 0x228
 800cd44:	2100      	movs	r1, #0
 800cd46:	480e      	ldr	r0, [pc, #56]	; (800cd80 <Form_Siemens_Reply+0x774>)
 800cd48:	f015 fd2a 	bl	80227a0 <memset>
	memcpy(&Temp_SiemensTx_st,&Siemens_TX_st,sizeof(SIEMENS_PKT_t));
 800cd4c:	4a0c      	ldr	r2, [pc, #48]	; (800cd80 <Form_Siemens_Reply+0x774>)
 800cd4e:	4b0d      	ldr	r3, [pc, #52]	; (800cd84 <Form_Siemens_Reply+0x778>)
 800cd50:	4610      	mov	r0, r2
 800cd52:	4619      	mov	r1, r3
 800cd54:	f44f 730a 	mov.w	r3, #552	; 0x228
 800cd58:	461a      	mov	r2, r3
 800cd5a:	f015 fcf9 	bl	8022750 <memcpy>
	UNUSED(App_data_Traverser);
}
 800cd5e:	bf00      	nop
 800cd60:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 800cd64:	46bd      	mov	sp, r7
 800cd66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd6a:	bf00      	nop
 800cd6c:	20002f14 	.word	0x20002f14
 800cd70:	20003518 	.word	0x20003518
 800cd74:	08026630 	.word	0x08026630
 800cd78:	20004c41 	.word	0x20004c41
 800cd7c:	200052a8 	.word	0x200052a8
 800cd80:	20002cec 	.word	0x20002cec
 800cd84:	20002ac4 	.word	0x20002ac4

0800cd88 <ProcessSendingSignals2MIE>:

void ProcessSendingSignals2MIE(void)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.Signal2MIE_Clk) > EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK)
 800cd8e:	4b64      	ldr	r3, [pc, #400]	; (800cf20 <ProcessSendingSignals2MIE+0x198>)
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	4618      	mov	r0, r3
 800cd94:	f002 f864 	bl	800ee60 <HAL_Elaps_Ticks>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	4b62      	ldr	r3, [pc, #392]	; (800cf24 <ProcessSendingSignals2MIE+0x19c>)
 800cd9c:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800cda0:	429a      	cmp	r2, r3
 800cda2:	f240 80b9 	bls.w	800cf18 <ProcessSendingSignals2MIE+0x190>
	{
		if(
				(SiemensClocks_st.MisMatchFlag == CLEAR) &&
 800cda6:	4b5e      	ldr	r3, [pc, #376]	; (800cf20 <ProcessSendingSignals2MIE+0x198>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
		if(
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d113      	bne.n	800cdd6 <ProcessSendingSignals2MIE+0x4e>
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800cdae:	4b5c      	ldr	r3, [pc, #368]	; (800cf20 <ProcessSendingSignals2MIE+0x198>)
 800cdb0:	785b      	ldrb	r3, [r3, #1]
				(SiemensClocks_st.MisMatchFlag == CLEAR) &&
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d10f      	bne.n	800cdd6 <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800cdb6:	4b5c      	ldr	r3, [pc, #368]	; (800cf28 <ProcessSendingSignals2MIE+0x1a0>)
 800cdb8:	781b      	ldrb	r3, [r3, #0]
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d10b      	bne.n	800cdd6 <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800cdbe:	4b5b      	ldr	r3, [pc, #364]	; (800cf2c <ProcessSendingSignals2MIE+0x1a4>)
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d107      	bne.n	800cdd6 <ProcessSendingSignals2MIE+0x4e>
			/*
			 * CAN Exchange Happening.
			 * No MisMatch Found
			 */
			//			printf("\n1\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800cdc6:	4b5a      	ldr	r3, [pc, #360]	; (800cf30 <ProcessSendingSignals2MIE+0x1a8>)
 800cdc8:	881b      	ldrh	r3, [r3, #0]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	4959      	ldr	r1, [pc, #356]	; (800cf34 <ProcessSendingSignals2MIE+0x1ac>)
 800cdce:	485a      	ldr	r0, [pc, #360]	; (800cf38 <ProcessSendingSignals2MIE+0x1b0>)
 800cdd0:	f015 fcbe 	bl	8022750 <memcpy>
 800cdd4:	e02d      	b.n	800ce32 <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800cdd6:	4b54      	ldr	r3, [pc, #336]	; (800cf28 <ProcessSendingSignals2MIE+0x1a0>)
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d10f      	bne.n	800cdfe <ProcessSendingSignals2MIE+0x76>
 800cdde:	4b53      	ldr	r3, [pc, #332]	; (800cf2c <ProcessSendingSignals2MIE+0x1a4>)
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10b      	bne.n	800cdfe <ProcessSendingSignals2MIE+0x76>
 800cde6:	4b4e      	ldr	r3, [pc, #312]	; (800cf20 <ProcessSendingSignals2MIE+0x198>)
 800cde8:	785b      	ldrb	r3, [r3, #1]
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d107      	bne.n	800cdfe <ProcessSendingSignals2MIE+0x76>
			 * CAN Exchange Happening
			 * MisMatch Found because of Other Card is Receiving,
			 * This Card is Not Receiving
			 */
			//			printf("\n2\n");
			memcpy(&VitalData2MIE_st.Relays,&Siemens_OtherRelays_st.Relays,Siemens_OtherRelays_st.NoofDataBytes);
 800cdee:	4b53      	ldr	r3, [pc, #332]	; (800cf3c <ProcessSendingSignals2MIE+0x1b4>)
 800cdf0:	881b      	ldrh	r3, [r3, #0]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	4952      	ldr	r1, [pc, #328]	; (800cf40 <ProcessSendingSignals2MIE+0x1b8>)
 800cdf6:	4850      	ldr	r0, [pc, #320]	; (800cf38 <ProcessSendingSignals2MIE+0x1b0>)
 800cdf8:	f015 fcaa 	bl	8022750 <memcpy>
 800cdfc:	e019      	b.n	800ce32 <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800cdfe:	4b4b      	ldr	r3, [pc, #300]	; (800cf2c <ProcessSendingSignals2MIE+0x1a4>)
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d10f      	bne.n	800ce26 <ProcessSendingSignals2MIE+0x9e>
 800ce06:	4b48      	ldr	r3, [pc, #288]	; (800cf28 <ProcessSendingSignals2MIE+0x1a0>)
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10b      	bne.n	800ce26 <ProcessSendingSignals2MIE+0x9e>
 800ce0e:	4b44      	ldr	r3, [pc, #272]	; (800cf20 <ProcessSendingSignals2MIE+0x198>)
 800ce10:	785b      	ldrb	r3, [r3, #1]
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d107      	bne.n	800ce26 <ProcessSendingSignals2MIE+0x9e>
			 * CAN Exchange Happening
			 * MisMatch Found because of This Card is Receiving,
			 * Other Card is Not Receiving
			 */
			//			printf("\n4\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800ce16:	4b46      	ldr	r3, [pc, #280]	; (800cf30 <ProcessSendingSignals2MIE+0x1a8>)
 800ce18:	881b      	ldrh	r3, [r3, #0]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	4945      	ldr	r1, [pc, #276]	; (800cf34 <ProcessSendingSignals2MIE+0x1ac>)
 800ce1e:	4846      	ldr	r0, [pc, #280]	; (800cf38 <ProcessSendingSignals2MIE+0x1b0>)
 800ce20:	f015 fc96 	bl	8022750 <memcpy>
 800ce24:	e005      	b.n	800ce32 <ProcessSendingSignals2MIE+0xaa>
		}
		else
		{
			//			printf("\n5\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800ce26:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	4842      	ldr	r0, [pc, #264]	; (800cf38 <ProcessSendingSignals2MIE+0x1b0>)
 800ce2e:	f015 fcb7 	bl	80227a0 <memset>
		}


		if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800ce32:	4b3e      	ldr	r3, [pc, #248]	; (800cf2c <ProcessSendingSignals2MIE+0x1a4>)
 800ce34:	885b      	ldrh	r3, [r3, #2]
 800ce36:	461a      	mov	r2, r3
 800ce38:	4b3a      	ldr	r3, [pc, #232]	; (800cf24 <ProcessSendingSignals2MIE+0x19c>)
 800ce3a:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d30d      	bcc.n	800ce5e <ProcessSendingSignals2MIE+0xd6>
 800ce42:	4b39      	ldr	r3, [pc, #228]	; (800cf28 <ProcessSendingSignals2MIE+0x1a0>)
 800ce44:	885b      	ldrh	r3, [r3, #2]
 800ce46:	461a      	mov	r2, r3
 800ce48:	4b36      	ldr	r3, [pc, #216]	; (800cf24 <ProcessSendingSignals2MIE+0x19c>)
 800ce4a:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d305      	bcc.n	800ce5e <ProcessSendingSignals2MIE+0xd6>
		{
			//			printf("\n6\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800ce52:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce56:	2100      	movs	r1, #0
 800ce58:	4837      	ldr	r0, [pc, #220]	; (800cf38 <ProcessSendingSignals2MIE+0x1b0>)
 800ce5a:	f015 fca1 	bl	80227a0 <memset>
		}

		VitalData2MIE_st.NoofDataBytes = EI_data.Siemens_st.Booloutputs  % 8;
 800ce5e:	4b31      	ldr	r3, [pc, #196]	; (800cf24 <ProcessSendingSignals2MIE+0x19c>)
 800ce60:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800ce64:	f003 0307 	and.w	r3, r3, #7
 800ce68:	b29a      	uxth	r2, r3
 800ce6a:	4b36      	ldr	r3, [pc, #216]	; (800cf44 <ProcessSendingSignals2MIE+0x1bc>)
 800ce6c:	801a      	strh	r2, [r3, #0]

		if(VitalData2MIE_st.NoofDataBytes != 0)
 800ce6e:	4b35      	ldr	r3, [pc, #212]	; (800cf44 <ProcessSendingSignals2MIE+0x1bc>)
 800ce70:	881b      	ldrh	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d009      	beq.n	800ce8a <ProcessSendingSignals2MIE+0x102>
		{
			VitalData2MIE_st.NoofDataBytes  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800ce76:	4b2b      	ldr	r3, [pc, #172]	; (800cf24 <ProcessSendingSignals2MIE+0x19c>)
 800ce78:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800ce7c:	08db      	lsrs	r3, r3, #3
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	3301      	adds	r3, #1
 800ce82:	b29a      	uxth	r2, r3
 800ce84:	4b2f      	ldr	r3, [pc, #188]	; (800cf44 <ProcessSendingSignals2MIE+0x1bc>)
 800ce86:	801a      	strh	r2, [r3, #0]
 800ce88:	e006      	b.n	800ce98 <ProcessSendingSignals2MIE+0x110>
		}
		else
		{
			VitalData2MIE_st.NoofDataBytes = (EI_data.Siemens_st.Booloutputs / 8);
 800ce8a:	4b26      	ldr	r3, [pc, #152]	; (800cf24 <ProcessSendingSignals2MIE+0x19c>)
 800ce8c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800ce90:	08db      	lsrs	r3, r3, #3
 800ce92:	b29a      	uxth	r2, r3
 800ce94:	4b2b      	ldr	r3, [pc, #172]	; (800cf44 <ProcessSendingSignals2MIE+0x1bc>)
 800ce96:	801a      	strh	r2, [r3, #0]
		}

		if(((strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)) && (SiemensClocks_st.SiemensCanXchangeHappening == NO))
 800ce98:	492b      	ldr	r1, [pc, #172]	; (800cf48 <ProcessSendingSignals2MIE+0x1c0>)
 800ce9a:	482c      	ldr	r0, [pc, #176]	; (800cf4c <ProcessSendingSignals2MIE+0x1c4>)
 800ce9c:	f7f3 f9d0 	bl	8000240 <strcmp>
 800cea0:	4603      	mov	r3, r0
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d008      	beq.n	800ceb8 <ProcessSendingSignals2MIE+0x130>
 800cea6:	4b1e      	ldr	r3, [pc, #120]	; (800cf20 <ProcessSendingSignals2MIE+0x198>)
 800cea8:	785b      	ldrb	r3, [r3, #1]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d104      	bne.n	800ceb8 <ProcessSendingSignals2MIE+0x130>
		{
			TransmitCanPkt(EI_PROCESS_DATA);
 800ceae:	f240 1019 	movw	r0, #281	; 0x119
 800ceb2:	f002 fd89 	bl	800f9c8 <TransmitCanPkt>
 800ceb6:	e011      	b.n	800cedc <ProcessSendingSignals2MIE+0x154>
		}
#ifdef EI_1
		else
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800ceb8:	4923      	ldr	r1, [pc, #140]	; (800cf48 <ProcessSendingSignals2MIE+0x1c0>)
 800ceba:	4824      	ldr	r0, [pc, #144]	; (800cf4c <ProcessSendingSignals2MIE+0x1c4>)
 800cebc:	f7f3 f9c0 	bl	8000240 <strcmp>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d106      	bne.n	800ced4 <ProcessSendingSignals2MIE+0x14c>
			{
				memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800cec6:	4b1a      	ldr	r3, [pc, #104]	; (800cf30 <ProcessSendingSignals2MIE+0x1a8>)
 800cec8:	881b      	ldrh	r3, [r3, #0]
 800ceca:	461a      	mov	r2, r3
 800cecc:	4919      	ldr	r1, [pc, #100]	; (800cf34 <ProcessSendingSignals2MIE+0x1ac>)
 800cece:	481a      	ldr	r0, [pc, #104]	; (800cf38 <ProcessSendingSignals2MIE+0x1b0>)
 800ced0:	f015 fc3e 	bl	8022750 <memcpy>
			}
			TransmitCanPkt(EI_PROCESS_DATA);
 800ced4:	f240 1019 	movw	r0, #281	; 0x119
 800ced8:	f002 fd76 	bl	800f9c8 <TransmitCanPkt>




#ifdef EI_1
		printf("\nSendingRelaysToMIE:");
 800cedc:	481c      	ldr	r0, [pc, #112]	; (800cf50 <ProcessSendingSignals2MIE+0x1c8>)
 800cede:	f015 fd47 	bl	8022970 <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800cee2:	2300      	movs	r3, #0
 800cee4:	80fb      	strh	r3, [r7, #6]
 800cee6:	e00a      	b.n	800cefe <ProcessSendingSignals2MIE+0x176>
		{
			printf("%02X ",VitalData2MIE_st.Relays[Traverser]);
 800cee8:	88fb      	ldrh	r3, [r7, #6]
 800ceea:	4a16      	ldr	r2, [pc, #88]	; (800cf44 <ProcessSendingSignals2MIE+0x1bc>)
 800ceec:	4413      	add	r3, r2
 800ceee:	789b      	ldrb	r3, [r3, #2]
 800cef0:	4619      	mov	r1, r3
 800cef2:	4818      	ldr	r0, [pc, #96]	; (800cf54 <ProcessSendingSignals2MIE+0x1cc>)
 800cef4:	f015 fd3c 	bl	8022970 <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800cef8:	88fb      	ldrh	r3, [r7, #6]
 800cefa:	3301      	adds	r3, #1
 800cefc:	80fb      	strh	r3, [r7, #6]
 800cefe:	4b11      	ldr	r3, [pc, #68]	; (800cf44 <ProcessSendingSignals2MIE+0x1bc>)
 800cf00:	881b      	ldrh	r3, [r3, #0]
 800cf02:	88fa      	ldrh	r2, [r7, #6]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d3ef      	bcc.n	800cee8 <ProcessSendingSignals2MIE+0x160>
		}
		printf("\n");
 800cf08:	200a      	movs	r0, #10
 800cf0a:	f015 fd49 	bl	80229a0 <putchar>




#endif
		SiemensClocks_st.Signal2MIE_Clk = HAL_GetTick();
 800cf0e:	f008 fd31 	bl	8015974 <HAL_GetTick>
 800cf12:	4603      	mov	r3, r0
 800cf14:	4a02      	ldr	r2, [pc, #8]	; (800cf20 <ProcessSendingSignals2MIE+0x198>)
 800cf16:	6053      	str	r3, [r2, #4]
	}
}
 800cf18:	bf00      	nop
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	2000352c 	.word	0x2000352c
 800cf24:	20000304 	.word	0x20000304
 800cf28:	20003524 	.word	0x20003524
 800cf2c:	20003520 	.word	0x20003520
 800cf30:	2000374c 	.word	0x2000374c
 800cf34:	20003750 	.word	0x20003750
 800cf38:	2000354a 	.word	0x2000354a
 800cf3c:	20003950 	.word	0x20003950
 800cf40:	20003954 	.word	0x20003954
 800cf44:	20003548 	.word	0x20003548
 800cf48:	0802659c 	.word	0x0802659c
 800cf4c:	20000305 	.word	0x20000305
 800cf50:	08026658 	.word	0x08026658
 800cf54:	08026670 	.word	0x08026670

0800cf58 <ProcessSelfSharing>:


void ProcessSelfSharing(void)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.SelfSharingClk) > EI_data.Siemens_st.CAN_Xchange_Time)
 800cf5c:	4b0c      	ldr	r3, [pc, #48]	; (800cf90 <ProcessSelfSharing+0x38>)
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	4618      	mov	r0, r3
 800cf62:	f001 ff7d 	bl	800ee60 <HAL_Elaps_Ticks>
 800cf66:	4602      	mov	r2, r0
 800cf68:	4b0a      	ldr	r3, [pc, #40]	; (800cf94 <ProcessSelfSharing+0x3c>)
 800cf6a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d90b      	bls.n	800cf8a <ProcessSelfSharing+0x32>
	{
		Tx_Siemens_self_sharing_st.MesgReceived = NOT_RECEIVED;
 800cf72:	4b09      	ldr	r3, [pc, #36]	; (800cf98 <ProcessSelfSharing+0x40>)
 800cf74:	2200      	movs	r2, #0
 800cf76:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800cf78:	f240 2001 	movw	r0, #513	; 0x201
 800cf7c:	f002 fd24 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

		SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800cf80:	f008 fcf8 	bl	8015974 <HAL_GetTick>
 800cf84:	4603      	mov	r3, r0
 800cf86:	4a02      	ldr	r2, [pc, #8]	; (800cf90 <ProcessSelfSharing+0x38>)
 800cf88:	6093      	str	r3, [r2, #8]
	}
}
 800cf8a:	bf00      	nop
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	2000352c 	.word	0x2000352c
 800cf94:	20000304 	.word	0x20000304
 800cf98:	20003520 	.word	0x20003520

0800cf9c <ProcessDetectNoValidDataReceive>:

void ProcessDetectNoValidDataReceive(void)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	af00      	add	r7, sp, #0

	if((SiemensClocks_st.LastReceiveClk != 0) && (HAL_Elaps_Ticks(SiemensClocks_st.LastReceiveClk) > EI_data.Siemens_st.COMM_FAILURE_TIME_OUT) )
 800cfa0:	4b1a      	ldr	r3, [pc, #104]	; (800d00c <ProcessDetectNoValidDataReceive+0x70>)
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d014      	beq.n	800cfd2 <ProcessDetectNoValidDataReceive+0x36>
 800cfa8:	4b18      	ldr	r3, [pc, #96]	; (800d00c <ProcessDetectNoValidDataReceive+0x70>)
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f001 ff57 	bl	800ee60 <HAL_Elaps_Ticks>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	4b16      	ldr	r3, [pc, #88]	; (800d010 <ProcessDetectNoValidDataReceive+0x74>)
 800cfb6:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d909      	bls.n	800cfd2 <ProcessDetectNoValidDataReceive+0x36>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800cfbe:	4b15      	ldr	r3, [pc, #84]	; (800d014 <ProcessDetectNoValidDataReceive+0x78>)
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d005      	beq.n	800cfd2 <ProcessDetectNoValidDataReceive+0x36>
		{
			printf("This Card Not Receiving Data\n");
 800cfc6:	4814      	ldr	r0, [pc, #80]	; (800d018 <ProcessDetectNoValidDataReceive+0x7c>)
 800cfc8:	f015 fd6e 	bl	8022aa8 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800cfcc:	4b11      	ldr	r3, [pc, #68]	; (800d014 <ProcessDetectNoValidDataReceive+0x78>)
 800cfce:	2200      	movs	r2, #0
 800cfd0:	701a      	strb	r2, [r3, #0]
		}
	}

	if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800cfd2:	4b10      	ldr	r3, [pc, #64]	; (800d014 <ProcessDetectNoValidDataReceive+0x78>)
 800cfd4:	885b      	ldrh	r3, [r3, #2]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	4b0d      	ldr	r3, [pc, #52]	; (800d010 <ProcessDetectNoValidDataReceive+0x74>)
 800cfda:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d911      	bls.n	800d006 <ProcessDetectNoValidDataReceive+0x6a>
 800cfe2:	4b0e      	ldr	r3, [pc, #56]	; (800d01c <ProcessDetectNoValidDataReceive+0x80>)
 800cfe4:	885b      	ldrh	r3, [r3, #2]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	4b09      	ldr	r3, [pc, #36]	; (800d010 <ProcessDetectNoValidDataReceive+0x74>)
 800cfea:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d909      	bls.n	800d006 <ProcessDetectNoValidDataReceive+0x6a>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800cff2:	4b08      	ldr	r3, [pc, #32]	; (800d014 <ProcessDetectNoValidDataReceive+0x78>)
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d005      	beq.n	800d006 <ProcessDetectNoValidDataReceive+0x6a>
		{
			printf("This Card Not Valid Receiving Data\n");
 800cffa:	4809      	ldr	r0, [pc, #36]	; (800d020 <ProcessDetectNoValidDataReceive+0x84>)
 800cffc:	f015 fd54 	bl	8022aa8 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800d000:	4b04      	ldr	r3, [pc, #16]	; (800d014 <ProcessDetectNoValidDataReceive+0x78>)
 800d002:	2200      	movs	r2, #0
 800d004:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800d006:	bf00      	nop
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	2000352c 	.word	0x2000352c
 800d010:	20000304 	.word	0x20000304
 800d014:	20003520 	.word	0x20003520
 800d018:	08026678 	.word	0x08026678
 800d01c:	20003524 	.word	0x20003524
 800d020:	08026698 	.word	0x08026698

0800d024 <SendRelays2Other>:

void SendRelays2Other(void)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.Relays2OtheClk) > ONE_SEC)
 800d028:	4b09      	ldr	r3, [pc, #36]	; (800d050 <SendRelays2Other+0x2c>)
 800d02a:	691b      	ldr	r3, [r3, #16]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f001 ff17 	bl	800ee60 <HAL_Elaps_Ticks>
 800d032:	4603      	mov	r3, r0
 800d034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d038:	d908      	bls.n	800d04c <SendRelays2Other+0x28>
	{

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800d03a:	f240 2007 	movw	r0, #519	; 0x207
 800d03e:	f002 fcc3 	bl	800f9c8 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif
		SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800d042:	f008 fc97 	bl	8015974 <HAL_GetTick>
 800d046:	4603      	mov	r3, r0
 800d048:	4a01      	ldr	r2, [pc, #4]	; (800d050 <SendRelays2Other+0x2c>)
 800d04a:	6113      	str	r3, [r2, #16]

	}
}
 800d04c:	bf00      	nop
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	2000352c 	.word	0x2000352c

0800d054 <CheckRelayMisMatch>:

void CheckRelayMisMatch(void)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.RelayMisMatchCheckClk) > FIVE_HUNDRED_MS)
 800d058:	4b16      	ldr	r3, [pc, #88]	; (800d0b4 <CheckRelayMisMatch+0x60>)
 800d05a:	695b      	ldr	r3, [r3, #20]
 800d05c:	4618      	mov	r0, r3
 800d05e:	f001 feff 	bl	800ee60 <HAL_Elaps_Ticks>
 800d062:	4603      	mov	r3, r0
 800d064:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d068:	d922      	bls.n	800d0b0 <CheckRelayMisMatch+0x5c>
	{
		if( (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800d06a:	4b13      	ldr	r3, [pc, #76]	; (800d0b8 <CheckRelayMisMatch+0x64>)
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d10c      	bne.n	800d08c <CheckRelayMisMatch+0x38>
 800d072:	4b12      	ldr	r3, [pc, #72]	; (800d0bc <CheckRelayMisMatch+0x68>)
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	2b01      	cmp	r3, #1
 800d078:	d108      	bne.n	800d08c <CheckRelayMisMatch+0x38>
		{
			memcpy(&SiemensMain_Relays_st,&Siemens_OtherRelays_st,sizeof(VITAL_DATA_SHARING_t));
 800d07a:	4a11      	ldr	r2, [pc, #68]	; (800d0c0 <CheckRelayMisMatch+0x6c>)
 800d07c:	4b11      	ldr	r3, [pc, #68]	; (800d0c4 <CheckRelayMisMatch+0x70>)
 800d07e:	4610      	mov	r0, r2
 800d080:	4619      	mov	r1, r3
 800d082:	f44f 7301 	mov.w	r3, #516	; 0x204
 800d086:	461a      	mov	r2, r3
 800d088:	f015 fb62 	bl	8022750 <memcpy>
		}
		if(Siemens_OtherRelays_st.VitalCRC != SiemensMain_Relays_st.VitalCRC)
 800d08c:	4b0d      	ldr	r3, [pc, #52]	; (800d0c4 <CheckRelayMisMatch+0x70>)
 800d08e:	885a      	ldrh	r2, [r3, #2]
 800d090:	4b0b      	ldr	r3, [pc, #44]	; (800d0c0 <CheckRelayMisMatch+0x6c>)
 800d092:	885b      	ldrh	r3, [r3, #2]
 800d094:	429a      	cmp	r2, r3
 800d096:	d003      	beq.n	800d0a0 <CheckRelayMisMatch+0x4c>
		{
			SiemensClocks_st.MisMatchFlag = SET;
 800d098:	4b06      	ldr	r3, [pc, #24]	; (800d0b4 <CheckRelayMisMatch+0x60>)
 800d09a:	2201      	movs	r2, #1
 800d09c:	701a      	strb	r2, [r3, #0]
 800d09e:	e002      	b.n	800d0a6 <CheckRelayMisMatch+0x52>
		}
		else
		{
			SiemensClocks_st.MisMatchFlag = CLEAR;
 800d0a0:	4b04      	ldr	r3, [pc, #16]	; (800d0b4 <CheckRelayMisMatch+0x60>)
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	701a      	strb	r2, [r3, #0]
		}

		SiemensClocks_st.RelayMisMatchCheckClk = HAL_GetTick();
 800d0a6:	f008 fc65 	bl	8015974 <HAL_GetTick>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	4a01      	ldr	r2, [pc, #4]	; (800d0b4 <CheckRelayMisMatch+0x60>)
 800d0ae:	6153      	str	r3, [r2, #20]
	}
}
 800d0b0:	bf00      	nop
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	2000352c 	.word	0x2000352c
 800d0b8:	20003520 	.word	0x20003520
 800d0bc:	20003524 	.word	0x20003524
 800d0c0:	2000374c 	.word	0x2000374c
 800d0c4:	20003950 	.word	0x20003950

0800d0c8 <Detect_SiemensCAN_Xchange_Failure>:

void Detect_SiemensCAN_Xchange_Failure(void)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(SiemensClocks_st.SiemensCanXchangeHappening == YES)
 800d0cc:	4b16      	ldr	r3, [pc, #88]	; (800d128 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d0ce:	785b      	ldrb	r3, [r3, #1]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d101      	bne.n	800d0d8 <Detect_SiemensCAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 800d0d4:	f006 fb26 	bl	8013724 <Blink_S2>
	}

	if(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)>= EI_data.Siemens_st.CAN_EXCHANGE_TIME_OUT)
 800d0d8:	4b13      	ldr	r3, [pc, #76]	; (800d128 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d0da:	699b      	ldr	r3, [r3, #24]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f001 febf 	bl	800ee60 <HAL_Elaps_Ticks>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	4b11      	ldr	r3, [pc, #68]	; (800d12c <Detect_SiemensCAN_Xchange_Failure+0x64>)
 800d0e6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d31a      	bcc.n	800d124 <Detect_SiemensCAN_Xchange_Failure+0x5c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)
 800d0ee:	4b0e      	ldr	r3, [pc, #56]	; (800d128 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d0f0:	699a      	ldr	r2, [r3, #24]
 800d0f2:	4b0f      	ldr	r3, [pc, #60]	; (800d130 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d014      	beq.n	800d124 <Detect_SiemensCAN_Xchange_Failure+0x5c>
		{
			SiemensClocks_st.SiemensCanXchangeHappening = NO;
 800d0fa:	4b0b      	ldr	r3, [pc, #44]	; (800d128 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	705a      	strb	r2, [r3, #1]
			Previous_Clock_RCV_SELF_XCHG_CLK = SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK;
 800d100:	4b09      	ldr	r3, [pc, #36]	; (800d128 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d102:	699b      	ldr	r3, [r3, #24]
 800d104:	4a0a      	ldr	r2, [pc, #40]	; (800d130 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800d106:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)/1000));
 800d108:	4b07      	ldr	r3, [pc, #28]	; (800d128 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d10a:	699b      	ldr	r3, [r3, #24]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f001 fea7 	bl	800ee60 <HAL_Elaps_Ticks>
 800d112:	4603      	mov	r3, r0
 800d114:	4a07      	ldr	r2, [pc, #28]	; (800d134 <Detect_SiemensCAN_Xchange_Failure+0x6c>)
 800d116:	fba2 2303 	umull	r2, r3, r2, r3
 800d11a:	099b      	lsrs	r3, r3, #6
 800d11c:	4619      	mov	r1, r3
 800d11e:	4806      	ldr	r0, [pc, #24]	; (800d138 <Detect_SiemensCAN_Xchange_Failure+0x70>)
 800d120:	f015 fc26 	bl	8022970 <iprintf>
		}
	}
}
 800d124:	bf00      	nop
 800d126:	bd80      	pop	{r7, pc}
 800d128:	2000352c 	.word	0x2000352c
 800d12c:	20000304 	.word	0x20000304
 800d130:	20004c44 	.word	0x20004c44
 800d134:	10624dd3 	.word	0x10624dd3
 800d138:	080266bc 	.word	0x080266bc

0800d13c <Print_Siemens_MSG>:

void Print_Siemens_MSG(SIEMENS_PKT_t *SiemensPrint_st,uint8_t *Buff,uint16_t Length,uint8_t TX_RX)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	4611      	mov	r1, r2
 800d148:	461a      	mov	r2, r3
 800d14a:	460b      	mov	r3, r1
 800d14c:	80fb      	strh	r3, [r7, #6]
 800d14e:	4613      	mov	r3, r2
 800d150:	717b      	strb	r3, [r7, #5]

	//	printf("\n________________________________________________________________________________________________\n");
	printf("\nTX_RX:");
 800d152:	484d      	ldr	r0, [pc, #308]	; (800d288 <Print_Siemens_MSG+0x14c>)
 800d154:	f015 fc0c 	bl	8022970 <iprintf>
	if(TX_RX == TX)
 800d158:	797b      	ldrb	r3, [r7, #5]
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	d103      	bne.n	800d166 <Print_Siemens_MSG+0x2a>
	{
		printf("TX|");
 800d15e:	484b      	ldr	r0, [pc, #300]	; (800d28c <Print_Siemens_MSG+0x150>)
 800d160:	f015 fc06 	bl	8022970 <iprintf>
 800d164:	e005      	b.n	800d172 <Print_Siemens_MSG+0x36>
	}
	else if(TX_RX == RX)
 800d166:	797b      	ldrb	r3, [r7, #5]
 800d168:	2b02      	cmp	r3, #2
 800d16a:	d102      	bne.n	800d172 <Print_Siemens_MSG+0x36>
	{
		printf("RX|");
 800d16c:	4848      	ldr	r0, [pc, #288]	; (800d290 <Print_Siemens_MSG+0x154>)
 800d16e:	f015 fbff 	bl	8022970 <iprintf>
	}
	printf("DT:%u|",SiemensPrint_st->DesSysType);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	4619      	mov	r1, r3
 800d178:	4846      	ldr	r0, [pc, #280]	; (800d294 <Print_Siemens_MSG+0x158>)
 800d17a:	f015 fbf9 	bl	8022970 <iprintf>
	printf("DA:%lu|",SiemensPrint_st->ExtDestAddr);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	4619      	mov	r1, r3
 800d184:	4844      	ldr	r0, [pc, #272]	; (800d298 <Print_Siemens_MSG+0x15c>)
 800d186:	f015 fbf3 	bl	8022970 <iprintf>
	printf("ST:%u|",SiemensPrint_st->SrcSysType);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	7b1b      	ldrb	r3, [r3, #12]
 800d18e:	4619      	mov	r1, r3
 800d190:	4842      	ldr	r0, [pc, #264]	; (800d29c <Print_Siemens_MSG+0x160>)
 800d192:	f015 fbed 	bl	8022970 <iprintf>
	printf("SA:%lu|",SiemensPrint_st->ExtSourceAddr);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	695b      	ldr	r3, [r3, #20]
 800d19a:	4619      	mov	r1, r3
 800d19c:	4840      	ldr	r0, [pc, #256]	; (800d2a0 <Print_Siemens_MSG+0x164>)
 800d19e:	f015 fbe7 	bl	8022970 <iprintf>
	printf("PD_V:%u|",SiemensPrint_st->ProdDataVer);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	7e1b      	ldrb	r3, [r3, #24]
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	483e      	ldr	r0, [pc, #248]	; (800d2a4 <Print_Siemens_MSG+0x168>)
 800d1aa:	f015 fbe1 	bl	8022970 <iprintf>
	printf("CI:%u|",SiemensPrint_st->CompIndex);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	7e5b      	ldrb	r3, [r3, #25]
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	483c      	ldr	r0, [pc, #240]	; (800d2a8 <Print_Siemens_MSG+0x16c>)
 800d1b6:	f015 fbdb 	bl	8022970 <iprintf>
	printf("DP:%u|",SiemensPrint_st->DestPort);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	7e9b      	ldrb	r3, [r3, #26]
 800d1be:	4619      	mov	r1, r3
 800d1c0:	483a      	ldr	r0, [pc, #232]	; (800d2ac <Print_Siemens_MSG+0x170>)
 800d1c2:	f015 fbd5 	bl	8022970 <iprintf>
	printf("SP:%u|",SiemensPrint_st->SourcePort);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	7edb      	ldrb	r3, [r3, #27]
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	4838      	ldr	r0, [pc, #224]	; (800d2b0 <Print_Siemens_MSG+0x174>)
 800d1ce:	f015 fbcf 	bl	8022970 <iprintf>
	printf("RX_TS:%lu|",SiemensPrint_st->RxTimeStamp);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	69db      	ldr	r3, [r3, #28]
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	4836      	ldr	r0, [pc, #216]	; (800d2b4 <Print_Siemens_MSG+0x178>)
 800d1da:	f015 fbc9 	bl	8022970 <iprintf>
	printf("TX_TS:%lu\n",SiemensPrint_st->TxTimeStamp);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	6a1b      	ldr	r3, [r3, #32]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	4834      	ldr	r0, [pc, #208]	; (800d2b8 <Print_Siemens_MSG+0x17c>)
 800d1e6:	f015 fbc3 	bl	8022970 <iprintf>
	if(TX_RX == RX)
 800d1ea:	797b      	ldrb	r3, [r7, #5]
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d122      	bne.n	800d236 <Print_Siemens_MSG+0xfa>
	{
		printf("RC:%u|",SiemensPrint_st->No_ofDataBytes);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	4831      	ldr	r0, [pc, #196]	; (800d2bc <Print_Siemens_MSG+0x180>)
 800d1f8:	f015 fbba 	bl	8022970 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	82fb      	strh	r3, [r7, #22]
 800d200:	e00b      	b.n	800d21a <Print_Siemens_MSG+0xde>
		{
			printf("%02X ",SiemensPrint_st->AppData[Traverser]);
 800d202:	8afb      	ldrh	r3, [r7, #22]
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	4413      	add	r3, r2
 800d208:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d20c:	4619      	mov	r1, r3
 800d20e:	482c      	ldr	r0, [pc, #176]	; (800d2c0 <Print_Siemens_MSG+0x184>)
 800d210:	f015 fbae 	bl	8022970 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800d214:	8afb      	ldrh	r3, [r7, #22]
 800d216:	3301      	adds	r3, #1
 800d218:	82fb      	strh	r3, [r7, #22]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d21e:	8afa      	ldrh	r2, [r7, #22]
 800d220:	429a      	cmp	r2, r3
 800d222:	d3ee      	bcc.n	800d202 <Print_Siemens_MSG+0xc6>
		}
		printf("\n");
 800d224:	200a      	movs	r0, #10
 800d226:	f015 fbbb 	bl	80229a0 <putchar>

		if(Debug_flag == 2)
 800d22a:	4b26      	ldr	r3, [pc, #152]	; (800d2c4 <Print_Siemens_MSG+0x188>)
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d101      	bne.n	800d236 <Print_Siemens_MSG+0xfa>
		{
			PrintSignals();
 800d232:	f000 ff65 	bl	800e100 <PrintSignals>
		//		}
		//		printf("\n____________________________________ \n");


	}
	if(Debug_flag == 1)
 800d236:	4b23      	ldr	r3, [pc, #140]	; (800d2c4 <Print_Siemens_MSG+0x188>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d120      	bne.n	800d280 <Print_Siemens_MSG+0x144>
	{
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800d23e:	2300      	movs	r3, #0
 800d240:	82bb      	strh	r3, [r7, #20]
 800d242:	e016      	b.n	800d272 <Print_Siemens_MSG+0x136>
		{
			if((Byte != 0) && ( (Byte % 32) == 0) )
 800d244:	8abb      	ldrh	r3, [r7, #20]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d008      	beq.n	800d25c <Print_Siemens_MSG+0x120>
 800d24a:	8abb      	ldrh	r3, [r7, #20]
 800d24c:	f003 031f 	and.w	r3, r3, #31
 800d250:	b29b      	uxth	r3, r3
 800d252:	2b00      	cmp	r3, #0
 800d254:	d102      	bne.n	800d25c <Print_Siemens_MSG+0x120>
			{
				printf("\n");
 800d256:	200a      	movs	r0, #10
 800d258:	f015 fba2 	bl	80229a0 <putchar>
			}
			printf("%02X ",Buff[Byte]);
 800d25c:	8abb      	ldrh	r3, [r7, #20]
 800d25e:	68ba      	ldr	r2, [r7, #8]
 800d260:	4413      	add	r3, r2
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	4619      	mov	r1, r3
 800d266:	4816      	ldr	r0, [pc, #88]	; (800d2c0 <Print_Siemens_MSG+0x184>)
 800d268:	f015 fb82 	bl	8022970 <iprintf>
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800d26c:	8abb      	ldrh	r3, [r7, #20]
 800d26e:	3301      	adds	r3, #1
 800d270:	82bb      	strh	r3, [r7, #20]
 800d272:	8aba      	ldrh	r2, [r7, #20]
 800d274:	88fb      	ldrh	r3, [r7, #6]
 800d276:	429a      	cmp	r2, r3
 800d278:	d3e4      	bcc.n	800d244 <Print_Siemens_MSG+0x108>
		}
		printf("\n");
 800d27a:	200a      	movs	r0, #10
 800d27c:	f015 fb90 	bl	80229a0 <putchar>
	}
	//	printf("\n");
	//	printf("\n________________________________________________________________________________________________\n");
}
 800d280:	bf00      	nop
 800d282:	3718      	adds	r7, #24
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}
 800d288:	080266ec 	.word	0x080266ec
 800d28c:	080266f4 	.word	0x080266f4
 800d290:	080266f8 	.word	0x080266f8
 800d294:	080266fc 	.word	0x080266fc
 800d298:	08026704 	.word	0x08026704
 800d29c:	0802670c 	.word	0x0802670c
 800d2a0:	08026714 	.word	0x08026714
 800d2a4:	0802671c 	.word	0x0802671c
 800d2a8:	08026728 	.word	0x08026728
 800d2ac:	08026730 	.word	0x08026730
 800d2b0:	08026738 	.word	0x08026738
 800d2b4:	08026740 	.word	0x08026740
 800d2b8:	0802674c 	.word	0x0802674c
 800d2bc:	08026758 	.word	0x08026758
 800d2c0:	08026670 	.word	0x08026670
 800d2c4:	20000645 	.word	0x20000645

0800d2c8 <Chech_forSiemensCMD>:



void Chech_forSiemensCMD(void)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b09a      	sub	sp, #104	; 0x68
 800d2cc:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	603b      	str	r3, [r7, #0]
 800d2e4:	1d3b      	adds	r3, r7, #4
 800d2e6:	2260      	movs	r2, #96	; 0x60
 800d2e8:	2100      	movs	r1, #0
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f015 fa58 	bl	80227a0 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800d2f0:	4bb9      	ldr	r3, [pc, #740]	; (800d5d8 <Chech_forSiemensCMD+0x310>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f001 fdb3 	bl	800ee60 <HAL_Elaps_Ticks>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b09      	cmp	r3, #9
 800d2fe:	f240 81ad 	bls.w	800d65c <Chech_forSiemensCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800d302:	e010      	b.n	800d326 <Chech_forSiemensCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800d304:	2000      	movs	r0, #0
 800d306:	f008 f80d 	bl	8015324 <Com_Get_Byte>
 800d30a:	4603      	mov	r3, r0
 800d30c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800d310:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d314:	1c5a      	adds	r2, r3, #1
 800d316:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800d31a:	3368      	adds	r3, #104	; 0x68
 800d31c:	443b      	add	r3, r7
 800d31e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800d322:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800d326:	2000      	movs	r0, #0
 800d328:	f007 ffbc 	bl	80152a4 <Com_DataReady>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d1e8      	bne.n	800d304 <Chech_forSiemensCMD+0x3c>
		}
		if(Index>0)
 800d332:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d336:	2b00      	cmp	r3, #0
 800d338:	f000 8144 	beq.w	800d5c4 <Chech_forSiemensCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800d33c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d340:	3368      	adds	r3, #104	; 0x68
 800d342:	443b      	add	r3, r7
 800d344:	2200      	movs	r2, #0
 800d346:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800d34a:	463b      	mov	r3, r7
 800d34c:	4619      	mov	r1, r3
 800d34e:	48a3      	ldr	r0, [pc, #652]	; (800d5dc <Chech_forSiemensCMD+0x314>)
 800d350:	f015 fb0e 	bl	8022970 <iprintf>
			switch(Is_SiemensCommand_Valid(Buffer,Index))
 800d354:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800d358:	463b      	mov	r3, r7
 800d35a:	4611      	mov	r1, r2
 800d35c:	4618      	mov	r0, r3
 800d35e:	f000 faf3 	bl	800d948 <Is_SiemensCommand_Valid>
 800d362:	4603      	mov	r3, r0
 800d364:	2b0c      	cmp	r3, #12
 800d366:	f200 8129 	bhi.w	800d5bc <Chech_forSiemensCMD+0x2f4>
 800d36a:	a201      	add	r2, pc, #4	; (adr r2, 800d370 <Chech_forSiemensCMD+0xa8>)
 800d36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d370:	0800d3a5 	.word	0x0800d3a5
 800d374:	0800d3b3 	.word	0x0800d3b3
 800d378:	0800d417 	.word	0x0800d417
 800d37c:	0800d439 	.word	0x0800d439
 800d380:	0800d461 	.word	0x0800d461
 800d384:	0800d489 	.word	0x0800d489
 800d388:	0800d4b1 	.word	0x0800d4b1
 800d38c:	0800d4d9 	.word	0x0800d4d9
 800d390:	0800d501 	.word	0x0800d501
 800d394:	0800d529 	.word	0x0800d529
 800d398:	0800d551 	.word	0x0800d551
 800d39c:	0800d579 	.word	0x0800d579
 800d3a0:	0800d5a1 	.word	0x0800d5a1
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800d3a4:	4b8e      	ldr	r3, [pc, #568]	; (800d5e0 <Chech_forSiemensCMD+0x318>)
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800d3aa:	488e      	ldr	r0, [pc, #568]	; (800d5e4 <Chech_forSiemensCMD+0x31c>)
 800d3ac:	f015 fb7c 	bl	8022aa8 <puts>
				break;
 800d3b0:	e109      	b.n	800d5c6 <Chech_forSiemensCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 800d3b2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	3368      	adds	r3, #104	; 0x68
 800d3ba:	443b      	add	r3, r7
 800d3bc:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d3c0:	3b30      	subs	r3, #48	; 0x30
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	4988      	ldr	r1, [pc, #544]	; (800d5e8 <Chech_forSiemensCMD+0x320>)
 800d3c6:	4889      	ldr	r0, [pc, #548]	; (800d5ec <Chech_forSiemensCMD+0x324>)
 800d3c8:	f015 fad2 	bl	8022970 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800d3cc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	3368      	adds	r3, #104	; 0x68
 800d3d4:	443b      	add	r3, r7
 800d3d6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d3da:	2b2f      	cmp	r3, #47	; 0x2f
 800d3dc:	d914      	bls.n	800d408 <Chech_forSiemensCMD+0x140>
 800d3de:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	3368      	adds	r3, #104	; 0x68
 800d3e6:	443b      	add	r3, r7
 800d3e8:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d3ec:	2b32      	cmp	r3, #50	; 0x32
 800d3ee:	d80b      	bhi.n	800d408 <Chech_forSiemensCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800d3f0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	3368      	adds	r3, #104	; 0x68
 800d3f8:	443b      	add	r3, r7
 800d3fa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d3fe:	3b30      	subs	r3, #48	; 0x30
 800d400:	b2da      	uxtb	r2, r3
 800d402:	4b7b      	ldr	r3, [pc, #492]	; (800d5f0 <Chech_forSiemensCMD+0x328>)
 800d404:	701a      	strb	r2, [r3, #0]
 800d406:	e002      	b.n	800d40e <Chech_forSiemensCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800d408:	487a      	ldr	r0, [pc, #488]	; (800d5f4 <Chech_forSiemensCMD+0x32c>)
 800d40a:	f015 fb4d 	bl	8022aa8 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800d40e:	2301      	movs	r3, #1
 800d410:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d414:	e0d7      	b.n	800d5c6 <Chech_forSiemensCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_List[TWO]);
 800d416:	4978      	ldr	r1, [pc, #480]	; (800d5f8 <Chech_forSiemensCMD+0x330>)
 800d418:	4878      	ldr	r0, [pc, #480]	; (800d5fc <Chech_forSiemensCMD+0x334>)
 800d41a:	f015 faa9 	bl	8022970 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800d41e:	4878      	ldr	r0, [pc, #480]	; (800d600 <Chech_forSiemensCMD+0x338>)
 800d420:	f015 fb42 	bl	8022aa8 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d424:	4b77      	ldr	r3, [pc, #476]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f043 0301 	orr.w	r3, r3, #1
 800d42c:	4a75      	ldr	r2, [pc, #468]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d42e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d430:	2301      	movs	r3, #1
 800d432:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d436:	e0c6      	b.n	800d5c6 <Chech_forSiemensCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_List[THREE]);
 800d438:	4973      	ldr	r1, [pc, #460]	; (800d608 <Chech_forSiemensCMD+0x340>)
 800d43a:	4870      	ldr	r0, [pc, #448]	; (800d5fc <Chech_forSiemensCMD+0x334>)
 800d43c:	f015 fa98 	bl	8022970 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800d440:	4872      	ldr	r0, [pc, #456]	; (800d60c <Chech_forSiemensCMD+0x344>)
 800d442:	f015 fb31 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d446:	4b6f      	ldr	r3, [pc, #444]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d448:	2200      	movs	r2, #0
 800d44a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d44c:	4b6d      	ldr	r3, [pc, #436]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f043 0302 	orr.w	r3, r3, #2
 800d454:	4a6b      	ldr	r2, [pc, #428]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d456:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d458:	2301      	movs	r3, #1
 800d45a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d45e:	e0b2      	b.n	800d5c6 <Chech_forSiemensCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_List[FOUR]);
 800d460:	496b      	ldr	r1, [pc, #428]	; (800d610 <Chech_forSiemensCMD+0x348>)
 800d462:	4866      	ldr	r0, [pc, #408]	; (800d5fc <Chech_forSiemensCMD+0x334>)
 800d464:	f015 fa84 	bl	8022970 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800d468:	486a      	ldr	r0, [pc, #424]	; (800d614 <Chech_forSiemensCMD+0x34c>)
 800d46a:	f015 fb1d 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d46e:	4b65      	ldr	r3, [pc, #404]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d470:	2200      	movs	r2, #0
 800d472:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d474:	4b63      	ldr	r3, [pc, #396]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f043 0304 	orr.w	r3, r3, #4
 800d47c:	4a61      	ldr	r2, [pc, #388]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d47e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d480:	2301      	movs	r3, #1
 800d482:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d486:	e09e      	b.n	800d5c6 <Chech_forSiemensCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_List[FIVE]);
 800d488:	4963      	ldr	r1, [pc, #396]	; (800d618 <Chech_forSiemensCMD+0x350>)
 800d48a:	485c      	ldr	r0, [pc, #368]	; (800d5fc <Chech_forSiemensCMD+0x334>)
 800d48c:	f015 fa70 	bl	8022970 <iprintf>
				printf("INVALID_DES_PORT\n");
 800d490:	4862      	ldr	r0, [pc, #392]	; (800d61c <Chech_forSiemensCMD+0x354>)
 800d492:	f015 fb09 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d496:	4b5b      	ldr	r3, [pc, #364]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d498:	2200      	movs	r2, #0
 800d49a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d49c:	4b59      	ldr	r3, [pc, #356]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f043 0308 	orr.w	r3, r3, #8
 800d4a4:	4a57      	ldr	r2, [pc, #348]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d4a6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d4ae:	e08a      	b.n	800d5c6 <Chech_forSiemensCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_List[SIX]);
 800d4b0:	495b      	ldr	r1, [pc, #364]	; (800d620 <Chech_forSiemensCMD+0x358>)
 800d4b2:	4852      	ldr	r0, [pc, #328]	; (800d5fc <Chech_forSiemensCMD+0x334>)
 800d4b4:	f015 fa5c 	bl	8022970 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800d4b8:	485a      	ldr	r0, [pc, #360]	; (800d624 <Chech_forSiemensCMD+0x35c>)
 800d4ba:	f015 faf5 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d4be:	4b51      	ldr	r3, [pc, #324]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d4c4:	4b4f      	ldr	r3, [pc, #316]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f043 0310 	orr.w	r3, r3, #16
 800d4cc:	4a4d      	ldr	r2, [pc, #308]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d4ce:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d4d6:	e076      	b.n	800d5c6 <Chech_forSiemensCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_List[SEVEN]);
 800d4d8:	4953      	ldr	r1, [pc, #332]	; (800d628 <Chech_forSiemensCMD+0x360>)
 800d4da:	4848      	ldr	r0, [pc, #288]	; (800d5fc <Chech_forSiemensCMD+0x334>)
 800d4dc:	f015 fa48 	bl	8022970 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800d4e0:	4852      	ldr	r0, [pc, #328]	; (800d62c <Chech_forSiemensCMD+0x364>)
 800d4e2:	f015 fae1 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d4e6:	4b47      	ldr	r3, [pc, #284]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d4ec:	4b45      	ldr	r3, [pc, #276]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f043 0320 	orr.w	r3, r3, #32
 800d4f4:	4a43      	ldr	r2, [pc, #268]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d4f6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d4fe:	e062      	b.n	800d5c6 <Chech_forSiemensCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 800d500:	494b      	ldr	r1, [pc, #300]	; (800d630 <Chech_forSiemensCMD+0x368>)
 800d502:	484c      	ldr	r0, [pc, #304]	; (800d634 <Chech_forSiemensCMD+0x36c>)
 800d504:	f015 fa34 	bl	8022970 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800d508:	484b      	ldr	r0, [pc, #300]	; (800d638 <Chech_forSiemensCMD+0x370>)
 800d50a:	f015 facd 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d50e:	4b3d      	ldr	r3, [pc, #244]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d510:	2200      	movs	r2, #0
 800d512:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d514:	4b3b      	ldr	r3, [pc, #236]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d51c:	4a39      	ldr	r2, [pc, #228]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d51e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d520:	2301      	movs	r3, #1
 800d522:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d526:	e04e      	b.n	800d5c6 <Chech_forSiemensCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_List[NINE]);
 800d528:	4944      	ldr	r1, [pc, #272]	; (800d63c <Chech_forSiemensCMD+0x374>)
 800d52a:	4834      	ldr	r0, [pc, #208]	; (800d5fc <Chech_forSiemensCMD+0x334>)
 800d52c:	f015 fa20 	bl	8022970 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800d530:	4843      	ldr	r0, [pc, #268]	; (800d640 <Chech_forSiemensCMD+0x378>)
 800d532:	f015 fab9 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d536:	4b33      	ldr	r3, [pc, #204]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d538:	2200      	movs	r2, #0
 800d53a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d53c:	4b31      	ldr	r3, [pc, #196]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d544:	4a2f      	ldr	r2, [pc, #188]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d546:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d548:	2301      	movs	r3, #1
 800d54a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d54e:	e03a      	b.n	800d5c6 <Chech_forSiemensCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_List[TEN]);
 800d550:	493c      	ldr	r1, [pc, #240]	; (800d644 <Chech_forSiemensCMD+0x37c>)
 800d552:	482a      	ldr	r0, [pc, #168]	; (800d5fc <Chech_forSiemensCMD+0x334>)
 800d554:	f015 fa0c 	bl	8022970 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800d558:	483b      	ldr	r0, [pc, #236]	; (800d648 <Chech_forSiemensCMD+0x380>)
 800d55a:	f015 faa5 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d55e:	4b29      	ldr	r3, [pc, #164]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d560:	2200      	movs	r2, #0
 800d562:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d564:	4b27      	ldr	r3, [pc, #156]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d56c:	4a25      	ldr	r2, [pc, #148]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d56e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d570:	2301      	movs	r3, #1
 800d572:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d576:	e026      	b.n	800d5c6 <Chech_forSiemensCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_List[ELEVEN]);
 800d578:	4934      	ldr	r1, [pc, #208]	; (800d64c <Chech_forSiemensCMD+0x384>)
 800d57a:	4820      	ldr	r0, [pc, #128]	; (800d5fc <Chech_forSiemensCMD+0x334>)
 800d57c:	f015 f9f8 	bl	8022970 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800d580:	4833      	ldr	r0, [pc, #204]	; (800d650 <Chech_forSiemensCMD+0x388>)
 800d582:	f015 fa91 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d586:	4b1f      	ldr	r3, [pc, #124]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d588:	2200      	movs	r2, #0
 800d58a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d58c:	4b1d      	ldr	r3, [pc, #116]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d594:	4a1b      	ldr	r2, [pc, #108]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d596:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d598:	2301      	movs	r3, #1
 800d59a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d59e:	e012      	b.n	800d5c6 <Chech_forSiemensCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_List[TWELVE]);
 800d5a0:	492c      	ldr	r1, [pc, #176]	; (800d654 <Chech_forSiemensCMD+0x38c>)
 800d5a2:	4816      	ldr	r0, [pc, #88]	; (800d5fc <Chech_forSiemensCMD+0x334>)
 800d5a4:	f015 f9e4 	bl	8022970 <iprintf>
				printf("CLEAR ALL\n");
 800d5a8:	482b      	ldr	r0, [pc, #172]	; (800d658 <Chech_forSiemensCMD+0x390>)
 800d5aa:	f015 fa7d 	bl	8022aa8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d5ae:	4b15      	ldr	r3, [pc, #84]	; (800d604 <Chech_forSiemensCMD+0x33c>)
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d5ba:	e004      	b.n	800d5c6 <Chech_forSiemensCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800d5bc:	480d      	ldr	r0, [pc, #52]	; (800d5f4 <Chech_forSiemensCMD+0x32c>)
 800d5be:	f015 fa73 	bl	8022aa8 <puts>
 800d5c2:	e000      	b.n	800d5c6 <Chech_forSiemensCMD+0x2fe>
			}
		}
 800d5c4:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800d5c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d147      	bne.n	800d65e <Chech_forSiemensCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800d5ce:	f240 2005 	movw	r0, #517	; 0x205
 800d5d2:	f002 f9f9 	bl	800f9c8 <TransmitCanPkt>
 800d5d6:	e042      	b.n	800d65e <Chech_forSiemensCMD+0x396>
 800d5d8:	2000a0a8 	.word	0x2000a0a8
 800d5dc:	08026760 	.word	0x08026760
 800d5e0:	20000644 	.word	0x20000644
 800d5e4:	08026778 	.word	0x08026778
 800d5e8:	2000488a 	.word	0x2000488a
 800d5ec:	080267b8 	.word	0x080267b8
 800d5f0:	20000645 	.word	0x20000645
 800d5f4:	080267cc 	.word	0x080267cc
 800d5f8:	200048bc 	.word	0x200048bc
 800d5fc:	080267e8 	.word	0x080267e8
 800d600:	080267f8 	.word	0x080267f8
 800d604:	20003518 	.word	0x20003518
 800d608:	200048ee 	.word	0x200048ee
 800d60c:	08026810 	.word	0x08026810
 800d610:	20004920 	.word	0x20004920
 800d614:	08026828 	.word	0x08026828
 800d618:	20004952 	.word	0x20004952
 800d61c:	0802683c 	.word	0x0802683c
 800d620:	20004984 	.word	0x20004984
 800d624:	08026850 	.word	0x08026850
 800d628:	200049b6 	.word	0x200049b6
 800d62c:	08026864 	.word	0x08026864
 800d630:	200049e8 	.word	0x200049e8
 800d634:	08026880 	.word	0x08026880
 800d638:	08026898 	.word	0x08026898
 800d63c:	20004a1a 	.word	0x20004a1a
 800d640:	080268ac 	.word	0x080268ac
 800d644:	20004a4c 	.word	0x20004a4c
 800d648:	080268c4 	.word	0x080268c4
 800d64c:	20004a7e 	.word	0x20004a7e
 800d650:	080268e4 	.word	0x080268e4
 800d654:	20004ab0 	.word	0x20004ab0
 800d658:	08026904 	.word	0x08026904
		return;
 800d65c:	bf00      	nop
		}
	}
}
 800d65e:	3768      	adds	r7, #104	; 0x68
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <Update_SiemensCommands>:


void Update_SiemensCommands(void)
{
 800d664:	b4b0      	push	{r4, r5, r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800d66a:	2300      	movs	r3, #0
 800d66c:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800d66e:	79fb      	ldrb	r3, [r7, #7]
 800d670:	4aa6      	ldr	r2, [pc, #664]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d672:	2132      	movs	r1, #50	; 0x32
 800d674:	fb01 f303 	mul.w	r3, r1, r3
 800d678:	4413      	add	r3, r2
 800d67a:	2224      	movs	r2, #36	; 0x24
 800d67c:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800d67e:	79fb      	ldrb	r3, [r7, #7]
 800d680:	4aa2      	ldr	r2, [pc, #648]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d682:	2132      	movs	r1, #50	; 0x32
 800d684:	fb01 f303 	mul.w	r3, r1, r3
 800d688:	4413      	add	r3, r2
 800d68a:	3301      	adds	r3, #1
 800d68c:	2201      	movs	r2, #1
 800d68e:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800d690:	79fb      	ldrb	r3, [r7, #7]
 800d692:	4a9e      	ldr	r2, [pc, #632]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d694:	2132      	movs	r1, #50	; 0x32
 800d696:	fb01 f303 	mul.w	r3, r1, r3
 800d69a:	4413      	add	r3, r2
 800d69c:	3302      	adds	r3, #2
 800d69e:	2230      	movs	r2, #48	; 0x30
 800d6a0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800d6a2:	79fb      	ldrb	r3, [r7, #7]
 800d6a4:	4a99      	ldr	r2, [pc, #612]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d6a6:	2132      	movs	r1, #50	; 0x32
 800d6a8:	fb01 f303 	mul.w	r3, r1, r3
 800d6ac:	4413      	add	r3, r2
 800d6ae:	3303      	adds	r3, #3
 800d6b0:	2240      	movs	r2, #64	; 0x40
 800d6b2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800d6b4:	79fb      	ldrb	r3, [r7, #7]
 800d6b6:	4a95      	ldr	r2, [pc, #596]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d6b8:	2132      	movs	r1, #50	; 0x32
 800d6ba:	fb01 f303 	mul.w	r3, r1, r3
 800d6be:	4413      	add	r3, r2
 800d6c0:	3304      	adds	r3, #4
 800d6c2:	22c0      	movs	r2, #192	; 0xc0
 800d6c4:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800d6c6:	79fb      	ldrb	r3, [r7, #7]
 800d6c8:	4a90      	ldr	r2, [pc, #576]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d6ca:	2132      	movs	r1, #50	; 0x32
 800d6cc:	fb01 f303 	mul.w	r3, r1, r3
 800d6d0:	4413      	add	r3, r2
 800d6d2:	3305      	adds	r3, #5
 800d6d4:	224e      	movs	r2, #78	; 0x4e
 800d6d6:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800d6d8:	79fb      	ldrb	r3, [r7, #7]
 800d6da:	4a8c      	ldr	r2, [pc, #560]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d6dc:	2132      	movs	r1, #50	; 0x32
 800d6de:	fb01 f303 	mul.w	r3, r1, r3
 800d6e2:	4413      	add	r3, r2
 800d6e4:	3306      	adds	r3, #6
 800d6e6:	2226      	movs	r2, #38	; 0x26
 800d6e8:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800d6ea:	79fb      	ldrb	r3, [r7, #7]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800d6f0:	79fb      	ldrb	r3, [r7, #7]
 800d6f2:	1c5a      	adds	r2, r3, #1
 800d6f4:	71fa      	strb	r2, [r7, #7]
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	2332      	movs	r3, #50	; 0x32
 800d6fa:	fb02 f303 	mul.w	r3, r2, r3
 800d6fe:	4a83      	ldr	r2, [pc, #524]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d700:	4413      	add	r3, r2
 800d702:	4983      	ldr	r1, [pc, #524]	; (800d910 <Update_SiemensCommands+0x2ac>)
 800d704:	461a      	mov	r2, r3
 800d706:	460b      	mov	r3, r1
 800d708:	cb03      	ldmia	r3!, {r0, r1}
 800d70a:	6010      	str	r0, [r2, #0]
 800d70c:	6051      	str	r1, [r2, #4]
 800d70e:	8819      	ldrh	r1, [r3, #0]
 800d710:	789b      	ldrb	r3, [r3, #2]
 800d712:	8111      	strh	r1, [r2, #8]
 800d714:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800d716:	79fb      	ldrb	r3, [r7, #7]
 800d718:	1c5a      	adds	r2, r3, #1
 800d71a:	71fa      	strb	r2, [r7, #7]
 800d71c:	461a      	mov	r2, r3
 800d71e:	2332      	movs	r3, #50	; 0x32
 800d720:	fb02 f303 	mul.w	r3, r2, r3
 800d724:	4a79      	ldr	r2, [pc, #484]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d726:	4413      	add	r3, r2
 800d728:	4a7a      	ldr	r2, [pc, #488]	; (800d914 <Update_SiemensCommands+0x2b0>)
 800d72a:	461d      	mov	r5, r3
 800d72c:	4614      	mov	r4, r2
 800d72e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d730:	6028      	str	r0, [r5, #0]
 800d732:	6069      	str	r1, [r5, #4]
 800d734:	60aa      	str	r2, [r5, #8]
 800d736:	60eb      	str	r3, [r5, #12]
 800d738:	6820      	ldr	r0, [r4, #0]
 800d73a:	6128      	str	r0, [r5, #16]
 800d73c:	7923      	ldrb	r3, [r4, #4]
 800d73e:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800d740:	79fb      	ldrb	r3, [r7, #7]
 800d742:	1c5a      	adds	r2, r3, #1
 800d744:	71fa      	strb	r2, [r7, #7]
 800d746:	461a      	mov	r2, r3
 800d748:	2332      	movs	r3, #50	; 0x32
 800d74a:	fb02 f303 	mul.w	r3, r2, r3
 800d74e:	4a6f      	ldr	r2, [pc, #444]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d750:	4413      	add	r3, r2
 800d752:	4a71      	ldr	r2, [pc, #452]	; (800d918 <Update_SiemensCommands+0x2b4>)
 800d754:	461d      	mov	r5, r3
 800d756:	4614      	mov	r4, r2
 800d758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d75a:	6028      	str	r0, [r5, #0]
 800d75c:	6069      	str	r1, [r5, #4]
 800d75e:	60aa      	str	r2, [r5, #8]
 800d760:	60eb      	str	r3, [r5, #12]
 800d762:	6820      	ldr	r0, [r4, #0]
 800d764:	6128      	str	r0, [r5, #16]
 800d766:	7923      	ldrb	r3, [r4, #4]
 800d768:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800d76a:	79fb      	ldrb	r3, [r7, #7]
 800d76c:	1c5a      	adds	r2, r3, #1
 800d76e:	71fa      	strb	r2, [r7, #7]
 800d770:	461a      	mov	r2, r3
 800d772:	2332      	movs	r3, #50	; 0x32
 800d774:	fb02 f303 	mul.w	r3, r2, r3
 800d778:	4a64      	ldr	r2, [pc, #400]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d77a:	4413      	add	r3, r2
 800d77c:	4a67      	ldr	r2, [pc, #412]	; (800d91c <Update_SiemensCommands+0x2b8>)
 800d77e:	461d      	mov	r5, r3
 800d780:	4614      	mov	r4, r2
 800d782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d784:	6028      	str	r0, [r5, #0]
 800d786:	6069      	str	r1, [r5, #4]
 800d788:	60aa      	str	r2, [r5, #8]
 800d78a:	60eb      	str	r3, [r5, #12]
 800d78c:	7823      	ldrb	r3, [r4, #0]
 800d78e:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800d790:	79fb      	ldrb	r3, [r7, #7]
 800d792:	1c5a      	adds	r2, r3, #1
 800d794:	71fa      	strb	r2, [r7, #7]
 800d796:	461a      	mov	r2, r3
 800d798:	2332      	movs	r3, #50	; 0x32
 800d79a:	fb02 f303 	mul.w	r3, r2, r3
 800d79e:	4a5b      	ldr	r2, [pc, #364]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d7a0:	4413      	add	r3, r2
 800d7a2:	4a5f      	ldr	r2, [pc, #380]	; (800d920 <Update_SiemensCommands+0x2bc>)
 800d7a4:	461d      	mov	r5, r3
 800d7a6:	4614      	mov	r4, r2
 800d7a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7aa:	6028      	str	r0, [r5, #0]
 800d7ac:	6069      	str	r1, [r5, #4]
 800d7ae:	60aa      	str	r2, [r5, #8]
 800d7b0:	60eb      	str	r3, [r5, #12]
 800d7b2:	7823      	ldrb	r3, [r4, #0]
 800d7b4:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800d7b6:	79fb      	ldrb	r3, [r7, #7]
 800d7b8:	1c5a      	adds	r2, r3, #1
 800d7ba:	71fa      	strb	r2, [r7, #7]
 800d7bc:	461a      	mov	r2, r3
 800d7be:	2332      	movs	r3, #50	; 0x32
 800d7c0:	fb02 f303 	mul.w	r3, r2, r3
 800d7c4:	4a51      	ldr	r2, [pc, #324]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d7c6:	4413      	add	r3, r2
 800d7c8:	4a56      	ldr	r2, [pc, #344]	; (800d924 <Update_SiemensCommands+0x2c0>)
 800d7ca:	461d      	mov	r5, r3
 800d7cc:	4614      	mov	r4, r2
 800d7ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7d0:	6028      	str	r0, [r5, #0]
 800d7d2:	6069      	str	r1, [r5, #4]
 800d7d4:	60aa      	str	r2, [r5, #8]
 800d7d6:	60eb      	str	r3, [r5, #12]
 800d7d8:	7823      	ldrb	r3, [r4, #0]
 800d7da:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800d7dc:	79fb      	ldrb	r3, [r7, #7]
 800d7de:	1c5a      	adds	r2, r3, #1
 800d7e0:	71fa      	strb	r2, [r7, #7]
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	2332      	movs	r3, #50	; 0x32
 800d7e6:	fb02 f303 	mul.w	r3, r2, r3
 800d7ea:	4a48      	ldr	r2, [pc, #288]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d7ec:	4413      	add	r3, r2
 800d7ee:	4a4e      	ldr	r2, [pc, #312]	; (800d928 <Update_SiemensCommands+0x2c4>)
 800d7f0:	461d      	mov	r5, r3
 800d7f2:	4614      	mov	r4, r2
 800d7f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7f6:	6028      	str	r0, [r5, #0]
 800d7f8:	6069      	str	r1, [r5, #4]
 800d7fa:	60aa      	str	r2, [r5, #8]
 800d7fc:	60eb      	str	r3, [r5, #12]
 800d7fe:	cc03      	ldmia	r4!, {r0, r1}
 800d800:	6128      	str	r0, [r5, #16]
 800d802:	6169      	str	r1, [r5, #20]
 800d804:	8823      	ldrh	r3, [r4, #0]
 800d806:	78a2      	ldrb	r2, [r4, #2]
 800d808:	832b      	strh	r3, [r5, #24]
 800d80a:	4613      	mov	r3, r2
 800d80c:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800d80e:	79fb      	ldrb	r3, [r7, #7]
 800d810:	1c5a      	adds	r2, r3, #1
 800d812:	71fa      	strb	r2, [r7, #7]
 800d814:	461a      	mov	r2, r3
 800d816:	2332      	movs	r3, #50	; 0x32
 800d818:	fb02 f303 	mul.w	r3, r2, r3
 800d81c:	4a3b      	ldr	r2, [pc, #236]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d81e:	4413      	add	r3, r2
 800d820:	4a42      	ldr	r2, [pc, #264]	; (800d92c <Update_SiemensCommands+0x2c8>)
 800d822:	461d      	mov	r5, r3
 800d824:	4614      	mov	r4, r2
 800d826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d828:	6028      	str	r0, [r5, #0]
 800d82a:	6069      	str	r1, [r5, #4]
 800d82c:	60aa      	str	r2, [r5, #8]
 800d82e:	60eb      	str	r3, [r5, #12]
 800d830:	8823      	ldrh	r3, [r4, #0]
 800d832:	78a2      	ldrb	r2, [r4, #2]
 800d834:	822b      	strh	r3, [r5, #16]
 800d836:	4613      	mov	r3, r2
 800d838:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800d83a:	79fb      	ldrb	r3, [r7, #7]
 800d83c:	1c5a      	adds	r2, r3, #1
 800d83e:	71fa      	strb	r2, [r7, #7]
 800d840:	461a      	mov	r2, r3
 800d842:	2332      	movs	r3, #50	; 0x32
 800d844:	fb02 f303 	mul.w	r3, r2, r3
 800d848:	4a30      	ldr	r2, [pc, #192]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d84a:	4413      	add	r3, r2
 800d84c:	4a38      	ldr	r2, [pc, #224]	; (800d930 <Update_SiemensCommands+0x2cc>)
 800d84e:	461d      	mov	r5, r3
 800d850:	4614      	mov	r4, r2
 800d852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d854:	6028      	str	r0, [r5, #0]
 800d856:	6069      	str	r1, [r5, #4]
 800d858:	60aa      	str	r2, [r5, #8]
 800d85a:	60eb      	str	r3, [r5, #12]
 800d85c:	cc03      	ldmia	r4!, {r0, r1}
 800d85e:	6128      	str	r0, [r5, #16]
 800d860:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800d862:	79fb      	ldrb	r3, [r7, #7]
 800d864:	1c5a      	adds	r2, r3, #1
 800d866:	71fa      	strb	r2, [r7, #7]
 800d868:	461a      	mov	r2, r3
 800d86a:	2332      	movs	r3, #50	; 0x32
 800d86c:	fb02 f303 	mul.w	r3, r2, r3
 800d870:	4a26      	ldr	r2, [pc, #152]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d872:	4413      	add	r3, r2
 800d874:	4a2f      	ldr	r2, [pc, #188]	; (800d934 <Update_SiemensCommands+0x2d0>)
 800d876:	461c      	mov	r4, r3
 800d878:	4615      	mov	r5, r2
 800d87a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d87c:	6020      	str	r0, [r4, #0]
 800d87e:	6061      	str	r1, [r4, #4]
 800d880:	60a2      	str	r2, [r4, #8]
 800d882:	60e3      	str	r3, [r4, #12]
 800d884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d886:	6120      	str	r0, [r4, #16]
 800d888:	6161      	str	r1, [r4, #20]
 800d88a:	61a2      	str	r2, [r4, #24]
 800d88c:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800d88e:	79fb      	ldrb	r3, [r7, #7]
 800d890:	1c5a      	adds	r2, r3, #1
 800d892:	71fa      	strb	r2, [r7, #7]
 800d894:	461a      	mov	r2, r3
 800d896:	2332      	movs	r3, #50	; 0x32
 800d898:	fb02 f303 	mul.w	r3, r2, r3
 800d89c:	4a1b      	ldr	r2, [pc, #108]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d89e:	4413      	add	r3, r2
 800d8a0:	4a25      	ldr	r2, [pc, #148]	; (800d938 <Update_SiemensCommands+0x2d4>)
 800d8a2:	461d      	mov	r5, r3
 800d8a4:	4614      	mov	r4, r2
 800d8a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8a8:	6028      	str	r0, [r5, #0]
 800d8aa:	6069      	str	r1, [r5, #4]
 800d8ac:	60aa      	str	r2, [r5, #8]
 800d8ae:	60eb      	str	r3, [r5, #12]
 800d8b0:	cc07      	ldmia	r4!, {r0, r1, r2}
 800d8b2:	6128      	str	r0, [r5, #16]
 800d8b4:	6169      	str	r1, [r5, #20]
 800d8b6:	61aa      	str	r2, [r5, #24]
 800d8b8:	7823      	ldrb	r3, [r4, #0]
 800d8ba:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800d8bc:	79fb      	ldrb	r3, [r7, #7]
 800d8be:	1c5a      	adds	r2, r3, #1
 800d8c0:	71fa      	strb	r2, [r7, #7]
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	2332      	movs	r3, #50	; 0x32
 800d8c6:	fb02 f303 	mul.w	r3, r2, r3
 800d8ca:	4a10      	ldr	r2, [pc, #64]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d8cc:	4413      	add	r3, r2
 800d8ce:	491b      	ldr	r1, [pc, #108]	; (800d93c <Update_SiemensCommands+0x2d8>)
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	cb03      	ldmia	r3!, {r0, r1}
 800d8d6:	6010      	str	r0, [r2, #0]
 800d8d8:	6051      	str	r1, [r2, #4]
 800d8da:	881b      	ldrh	r3, [r3, #0]
 800d8dc:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800d8de:	79fb      	ldrb	r3, [r7, #7]
 800d8e0:	1c5a      	adds	r2, r3, #1
 800d8e2:	71fa      	strb	r2, [r7, #7]
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	2332      	movs	r3, #50	; 0x32
 800d8e8:	fb02 f303 	mul.w	r3, r2, r3
 800d8ec:	4a07      	ldr	r2, [pc, #28]	; (800d90c <Update_SiemensCommands+0x2a8>)
 800d8ee:	4413      	add	r3, r2
 800d8f0:	4a13      	ldr	r2, [pc, #76]	; (800d940 <Update_SiemensCommands+0x2dc>)
 800d8f2:	6810      	ldr	r0, [r2, #0]
 800d8f4:	6018      	str	r0, [r3, #0]
 800d8f6:	7912      	ldrb	r2, [r2, #4]
 800d8f8:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800d8fa:	4a12      	ldr	r2, [pc, #72]	; (800d944 <Update_SiemensCommands+0x2e0>)
 800d8fc:	79fb      	ldrb	r3, [r7, #7]
 800d8fe:	7013      	strb	r3, [r2, #0]
}
 800d900:	bf00      	nop
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	bcb0      	pop	{r4, r5, r7}
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	20004858 	.word	0x20004858
 800d910:	08026910 	.word	0x08026910
 800d914:	080267f8 	.word	0x080267f8
 800d918:	08026810 	.word	0x08026810
 800d91c:	08026828 	.word	0x08026828
 800d920:	0802683c 	.word	0x0802683c
 800d924:	08026850 	.word	0x08026850
 800d928:	0802691c 	.word	0x0802691c
 800d92c:	08026898 	.word	0x08026898
 800d930:	080268ac 	.word	0x080268ac
 800d934:	080268c4 	.word	0x080268c4
 800d938:	080268e4 	.word	0x080268e4
 800d93c:	08026938 	.word	0x08026938
 800d940:	08026944 	.word	0x08026944
 800d944:	20004c40 	.word	0x20004c40

0800d948 <Is_SiemensCommand_Valid>:

uint8_t Is_SiemensCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800d948:	b590      	push	{r4, r7, lr}
 800d94a:	b085      	sub	sp, #20
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	460b      	mov	r3, r1
 800d952:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800d954:	2300      	movs	r3, #0
 800d956:	73fb      	strb	r3, [r7, #15]
 800d958:	e01c      	b.n	800d994 <Is_SiemensCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 800d95a:	7bfb      	ldrb	r3, [r7, #15]
 800d95c:	2232      	movs	r2, #50	; 0x32
 800d95e:	fb02 f303 	mul.w	r3, r2, r3
 800d962:	4a11      	ldr	r2, [pc, #68]	; (800d9a8 <Is_SiemensCommand_Valid+0x60>)
 800d964:	189c      	adds	r4, r3, r2
 800d966:	7bfb      	ldrb	r3, [r7, #15]
 800d968:	2232      	movs	r2, #50	; 0x32
 800d96a:	fb02 f303 	mul.w	r3, r2, r3
 800d96e:	4a0e      	ldr	r2, [pc, #56]	; (800d9a8 <Is_SiemensCommand_Valid+0x60>)
 800d970:	4413      	add	r3, r2
 800d972:	4618      	mov	r0, r3
 800d974:	f7f2 fc6e 	bl	8000254 <strlen>
 800d978:	4603      	mov	r3, r0
 800d97a:	461a      	mov	r2, r3
 800d97c:	4621      	mov	r1, r4
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f014 fed6 	bl	8022730 <memcmp>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d101      	bne.n	800d98e <Is_SiemensCommand_Valid+0x46>
		{
			return Traverser;
 800d98a:	7bfb      	ldrb	r3, [r7, #15]
 800d98c:	e008      	b.n	800d9a0 <Is_SiemensCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800d98e:	7bfb      	ldrb	r3, [r7, #15]
 800d990:	3301      	adds	r3, #1
 800d992:	73fb      	strb	r3, [r7, #15]
 800d994:	4b05      	ldr	r3, [pc, #20]	; (800d9ac <Is_SiemensCommand_Valid+0x64>)
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	7bfa      	ldrb	r2, [r7, #15]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d3dd      	bcc.n	800d95a <Is_SiemensCommand_Valid+0x12>
		}
	}
	return 255;
 800d99e:	23ff      	movs	r3, #255	; 0xff
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3714      	adds	r7, #20
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd90      	pop	{r4, r7, pc}
 800d9a8:	20004858 	.word	0x20004858
 800d9ac:	20004c40 	.word	0x20004c40

0800d9b0 <Siemens_CRC>:
/*
 * SIEMENS CRC & Data Extract FUNTIONS
 */

uint16_t Siemens_CRC(uint8_t *data, uint16_t len)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b087      	sub	sp, #28
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800d9bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9c0:	82fb      	strh	r3, [r7, #22]
	uint16_t i=0;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	82bb      	strh	r3, [r7, #20]
	int j =0;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	613b      	str	r3, [r7, #16]
		printf("0x%02x|",data[i]);
	}
	printf("\n");
#endif

	for ( i = 0; i < len; i++)
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	82bb      	strh	r3, [r7, #20]
 800d9ce:	e022      	b.n	800da16 <Siemens_CRC+0x66>
	{
		crc ^= data[i];
 800d9d0:	8abb      	ldrh	r3, [r7, #20]
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	b29a      	uxth	r2, r3
 800d9da:	8afb      	ldrh	r3, [r7, #22]
 800d9dc:	4053      	eors	r3, r2
 800d9de:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	613b      	str	r3, [r7, #16]
 800d9e4:	e011      	b.n	800da0a <Siemens_CRC+0x5a>
		{
			if (crc & 0x0001)
 800d9e6:	8afb      	ldrh	r3, [r7, #22]
 800d9e8:	f003 0301 	and.w	r3, r3, #1
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d006      	beq.n	800d9fe <Siemens_CRC+0x4e>
			{
				crc = (crc >> 1) ^ 0x8408;
 800d9f0:	8afb      	ldrh	r3, [r7, #22]
 800d9f2:	085b      	lsrs	r3, r3, #1
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	4b17      	ldr	r3, [pc, #92]	; (800da54 <Siemens_CRC+0xa4>)
 800d9f8:	4053      	eors	r3, r2
 800d9fa:	82fb      	strh	r3, [r7, #22]
 800d9fc:	e002      	b.n	800da04 <Siemens_CRC+0x54>
			}
			else
			{
				crc >>= 1;
 800d9fe:	8afb      	ldrh	r3, [r7, #22]
 800da00:	085b      	lsrs	r3, r3, #1
 800da02:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	3301      	adds	r3, #1
 800da08:	613b      	str	r3, [r7, #16]
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	2b07      	cmp	r3, #7
 800da0e:	ddea      	ble.n	800d9e6 <Siemens_CRC+0x36>
	for ( i = 0; i < len; i++)
 800da10:	8abb      	ldrh	r3, [r7, #20]
 800da12:	3301      	adds	r3, #1
 800da14:	82bb      	strh	r3, [r7, #20]
 800da16:	8aba      	ldrh	r2, [r7, #20]
 800da18:	887b      	ldrh	r3, [r7, #2]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d3d8      	bcc.n	800d9d0 <Siemens_CRC+0x20>
			}
		}
	}

	crc_le[0] = crc & 0xFF;
 800da1e:	8afb      	ldrh	r3, [r7, #22]
 800da20:	b2db      	uxtb	r3, r3
 800da22:	733b      	strb	r3, [r7, #12]
	crc_le[1] = (crc >> 8) & 0xFF;
 800da24:	8afb      	ldrh	r3, [r7, #22]
 800da26:	0a1b      	lsrs	r3, r3, #8
 800da28:	b29b      	uxth	r3, r3
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	737b      	strb	r3, [r7, #13]
	//printf("Before Reverse 1:0x%02x|0x%02x\n",crc_le[0],crc_le[1]);



	crc = crc_le[0] << 8 | crc_le[1]; // reverse CRC bytes
 800da2e:	7b3b      	ldrb	r3, [r7, #12]
 800da30:	021b      	lsls	r3, r3, #8
 800da32:	b21a      	sxth	r2, r3
 800da34:	7b7b      	ldrb	r3, [r7, #13]
 800da36:	b21b      	sxth	r3, r3
 800da38:	4313      	orrs	r3, r2
 800da3a:	b21b      	sxth	r3, r3
 800da3c:	82fb      	strh	r3, [r7, #22]
	crc ^= 0xFFFF; // perform final XOR with 0xFFFF
 800da3e:	8afb      	ldrh	r3, [r7, #22]
 800da40:	43db      	mvns	r3, r3
 800da42:	82fb      	strh	r3, [r7, #22]
	//printf("Before Reverse 2:0x%02x\n",crc);


	// crc = crc_le[1] << 8 | crc_le[0]; // reverse CRC bytes
	// crc ^= 0xFFFF; // perform final XOR with 0xFFFF
	return crc;
 800da44:	8afb      	ldrh	r3, [r7, #22]
}
 800da46:	4618      	mov	r0, r3
 800da48:	371c      	adds	r7, #28
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	ffff8408 	.word	0xffff8408

0800da58 <Extract_Parity_Data>:


int32_t Extract_Parity_Data(uint8_t Start,uint8_t No_of_Bits,uint8_t *DataIn,uint8_t Parity_Type)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b086      	sub	sp, #24
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	603a      	str	r2, [r7, #0]
 800da60:	461a      	mov	r2, r3
 800da62:	4603      	mov	r3, r0
 800da64:	71fb      	strb	r3, [r7, #7]
 800da66:	460b      	mov	r3, r1
 800da68:	71bb      	strb	r3, [r7, #6]
 800da6a:	4613      	mov	r3, r2
 800da6c:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_val = 0,t1,t2,t3;
 800da6e:	2300      	movs	r3, #0
 800da70:	75fb      	strb	r3, [r7, #23]
	uint32_t Return_value = 0;
 800da72:	2300      	movs	r3, #0
 800da74:	613b      	str	r3, [r7, #16]

	if(Parity_Type != NO_PARITY)
 800da76:	797b      	ldrb	r3, [r7, #5]
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d010      	beq.n	800da9e <Extract_Parity_Data+0x46>
	{
		if(Verify_parity(DataIn,(No_of_Bits/8),Parity_Type)==0)
 800da7c:	79bb      	ldrb	r3, [r7, #6]
 800da7e:	08db      	lsrs	r3, r3, #3
 800da80:	b2db      	uxtb	r3, r3
 800da82:	797a      	ldrb	r2, [r7, #5]
 800da84:	4619      	mov	r1, r3
 800da86:	6838      	ldr	r0, [r7, #0]
 800da88:	f000 f8d0 	bl	800dc2c <Verify_parity>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d110      	bne.n	800dab4 <Extract_Parity_Data+0x5c>
		{
			printf("Parity Verfication Failed\n");
 800da92:	4840      	ldr	r0, [pc, #256]	; (800db94 <Extract_Parity_Data+0x13c>)
 800da94:	f015 f808 	bl	8022aa8 <puts>
			return -1;
 800da98:	f04f 33ff 	mov.w	r3, #4294967295
 800da9c:	e075      	b.n	800db8a <Extract_Parity_Data+0x132>
			//printf("Parity Verfication Success\n");
		}
	}
	else
	{
		Return_value = ExtractBits(Start,No_of_Bits,DataIn);
 800da9e:	79fb      	ldrb	r3, [r7, #7]
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	79ba      	ldrb	r2, [r7, #6]
 800daa4:	b291      	uxth	r1, r2
 800daa6:	683a      	ldr	r2, [r7, #0]
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7f2 fdb3 	bl	8000614 <ExtractBits>
 800daae:	6138      	str	r0, [r7, #16]
		return Return_value;
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	e06a      	b.n	800db8a <Extract_Parity_Data+0x132>
	}



	if(No_of_Bits==8)
 800dab4:	79bb      	ldrb	r3, [r7, #6]
 800dab6:	2b08      	cmp	r3, #8
 800dab8:	d108      	bne.n	800dacc <Extract_Parity_Data+0x74>
	{
		//printf("Data:0x%02x\n",DataIn[0]);
		Temp_val = DataIn[0];
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	75fb      	strb	r3, [r7, #23]
		Temp_val &= ~(1<<7);
 800dac0:	7dfb      	ldrb	r3, [r7, #23]
 800dac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dac6:	75fb      	strb	r3, [r7, #23]
		return (Temp_val);
 800dac8:	7dfb      	ldrb	r3, [r7, #23]
 800daca:	e05e      	b.n	800db8a <Extract_Parity_Data+0x132>
	}
	else if(No_of_Bits==24)
 800dacc:	79bb      	ldrb	r3, [r7, #6]
 800dace:	2b18      	cmp	r3, #24
 800dad0:	d15a      	bne.n	800db88 <Extract_Parity_Data+0x130>
	{
		//printf("24 bit extraction\n");
		Temp_val = DataIn[0];
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[0]);
		t1 = ((Temp_val>>0)&1); //copy of 0th bit
 800dad8:	7dfb      	ldrb	r3, [r7, #23]
 800dada:	f003 0301 	and.w	r3, r3, #1
 800dade:	73fb      	strb	r3, [r7, #15]
		t2 = ((Temp_val>>1)&1); //copy of 1st bit
 800dae0:	7dfb      	ldrb	r3, [r7, #23]
 800dae2:	085b      	lsrs	r3, r3, #1
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	f003 0301 	and.w	r3, r3, #1
 800daea:	73bb      	strb	r3, [r7, #14]
		Temp_val &= ~(1<<7); //clearing 7th bit
 800daec:	7dfb      	ldrb	r3, [r7, #23]
 800daee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daf2:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=2; //Shift two times.
 800daf4:	7dfb      	ldrb	r3, [r7, #23]
 800daf6:	089b      	lsrs	r3, r3, #2
 800daf8:	75fb      	strb	r3, [r7, #23]
		//printf("Temp:0x%02x\n",Temp_val);
		Return_value = Temp_val;
 800dafa:	7dfb      	ldrb	r3, [r7, #23]
 800dafc:	613b      	str	r3, [r7, #16]

		Temp_val = DataIn[1];
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	785b      	ldrb	r3, [r3, #1]
 800db02:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[1]);
		t3 = ((Temp_val>>0)&1);//copy of 0th bit.
 800db04:	7dfb      	ldrb	r3, [r7, #23]
 800db06:	f003 0301 	and.w	r3, r3, #1
 800db0a:	737b      	strb	r3, [r7, #13]
		Temp_val &= ~(1<<7); //clearing 7th bit.
 800db0c:	7dfb      	ldrb	r3, [r7, #23]
 800db0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db12:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=1; //Shift one time.
 800db14:	7dfb      	ldrb	r3, [r7, #23]
 800db16:	085b      	lsrs	r3, r3, #1
 800db18:	75fb      	strb	r3, [r7, #23]

		(t2==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800db1a:	7bbb      	ldrb	r3, [r7, #14]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d104      	bne.n	800db2a <Extract_Parity_Data+0xd2>
 800db20:	7dfb      	ldrb	r3, [r7, #23]
 800db22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db26:	75fb      	strb	r3, [r7, #23]
 800db28:	e003      	b.n	800db32 <Extract_Parity_Data+0xda>
 800db2a:	7dfb      	ldrb	r3, [r7, #23]
 800db2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db30:	75fb      	strb	r3, [r7, #23]
		(t1==0)?(Temp_val &= ~(1 << 6)):(Temp_val|= 1 << 6);//copying Previous bit
 800db32:	7bfb      	ldrb	r3, [r7, #15]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d104      	bne.n	800db42 <Extract_Parity_Data+0xea>
 800db38:	7dfb      	ldrb	r3, [r7, #23]
 800db3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db3e:	75fb      	strb	r3, [r7, #23]
 800db40:	e003      	b.n	800db4a <Extract_Parity_Data+0xf2>
 800db42:	7dfb      	ldrb	r3, [r7, #23]
 800db44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db48:	75fb      	strb	r3, [r7, #23]
		//printf("Temp2:0x%02x\n",Temp_val);
		Return_value<<=8;
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	021b      	lsls	r3, r3, #8
 800db4e:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800db50:	7dfb      	ldrb	r3, [r7, #23]
 800db52:	693a      	ldr	r2, [r7, #16]
 800db54:	4413      	add	r3, r2
 800db56:	613b      	str	r3, [r7, #16]


		Temp_val = DataIn[2];
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	789b      	ldrb	r3, [r3, #2]
 800db5c:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[2]);
		(t3==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800db5e:	7b7b      	ldrb	r3, [r7, #13]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d104      	bne.n	800db6e <Extract_Parity_Data+0x116>
 800db64:	7dfb      	ldrb	r3, [r7, #23]
 800db66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db6a:	75fb      	strb	r3, [r7, #23]
 800db6c:	e003      	b.n	800db76 <Extract_Parity_Data+0x11e>
 800db6e:	7dfb      	ldrb	r3, [r7, #23]
 800db70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db74:	75fb      	strb	r3, [r7, #23]
		//printf("Temp3:0x%02x\n",Temp_val);
		Return_value<<=8;
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	021b      	lsls	r3, r3, #8
 800db7a:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800db7c:	7dfb      	ldrb	r3, [r7, #23]
 800db7e:	693a      	ldr	r2, [r7, #16]
 800db80:	4413      	add	r3, r2
 800db82:	613b      	str	r3, [r7, #16]
		//printf("Data:0x%02x\n",DataIn[2]);
		//printf("Data:0x%02x\n",DataIn[1]);
		//printf("Data:0x%02x\n",DataIn[0]);
		return Return_value;
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	e000      	b.n	800db8a <Extract_Parity_Data+0x132>
	}
	return 0;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3718      	adds	r7, #24
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	0802694c 	.word	0x0802694c

0800db98 <Calculate_Parity>:

uint8_t Calculate_Parity(uint8_t Buff, uint8_t Parity_Type)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	4603      	mov	r3, r0
 800dba0:	460a      	mov	r2, r1
 800dba2:	71fb      	strb	r3, [r7, #7]
 800dba4:	4613      	mov	r3, r2
 800dba6:	71bb      	strb	r3, [r7, #6]
	int8_t bit = 0;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	73fb      	strb	r3, [r7, #15]
	int8_t count = 0;
 800dbac:	2300      	movs	r3, #0
 800dbae:	73bb      	strb	r3, [r7, #14]

	// printf("For Value:0x%02x\n", Buff);
	for (bit = 6; bit >= 0; bit--)
 800dbb0:	2306      	movs	r3, #6
 800dbb2:	73fb      	strb	r3, [r7, #15]
 800dbb4:	e014      	b.n	800dbe0 <Calculate_Parity+0x48>
	{
		//printf("[%02u]:%u| ", bit, ((Buff >> bit) & 1));
		if ((Buff >> bit) & 1)
 800dbb6:	79fa      	ldrb	r2, [r7, #7]
 800dbb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbbc:	fa42 f303 	asr.w	r3, r2, r3
 800dbc0:	f003 0301 	and.w	r3, r3, #1
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d005      	beq.n	800dbd4 <Calculate_Parity+0x3c>
		{
			count++;
 800dbc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	3301      	adds	r3, #1
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	73bb      	strb	r3, [r7, #14]
	for (bit = 6; bit >= 0; bit--)
 800dbd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	3b01      	subs	r3, #1
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	73fb      	strb	r3, [r7, #15]
 800dbe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	dae6      	bge.n	800dbb6 <Calculate_Parity+0x1e>
		}
	}
	//printf("\n");
	if (Parity_Type == 0)
 800dbe8:	79bb      	ldrb	r3, [r7, #6]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d109      	bne.n	800dc02 <Calculate_Parity+0x6a>
	{
		if ((count % 2) == 0)
 800dbee:	7bbb      	ldrb	r3, [r7, #14]
 800dbf0:	f003 0301 	and.w	r3, r3, #1
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d101      	bne.n	800dbfe <Calculate_Parity+0x66>
		{
			return 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	e00f      	b.n	800dc1e <Calculate_Parity+0x86>
		}
		else
		{
			return 1;
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e00d      	b.n	800dc1e <Calculate_Parity+0x86>
		}
	}
	if (Parity_Type == 1)
 800dc02:	79bb      	ldrb	r3, [r7, #6]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d109      	bne.n	800dc1c <Calculate_Parity+0x84>
	{
		if ((count % 2) == 0)
 800dc08:	7bbb      	ldrb	r3, [r7, #14]
 800dc0a:	f003 0301 	and.w	r3, r3, #1
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d101      	bne.n	800dc18 <Calculate_Parity+0x80>
		{
			return 1;
 800dc14:	2301      	movs	r3, #1
 800dc16:	e002      	b.n	800dc1e <Calculate_Parity+0x86>
		}
		else
		{
			return 0;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	e000      	b.n	800dc1e <Calculate_Parity+0x86>
		}
	}
	return 0;
 800dc1c:	2300      	movs	r3, #0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3714      	adds	r7, #20
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr
	...

0800dc2c <Verify_parity>:

uint8_t Verify_parity(uint8_t *Data,uint8_t Length,uint8_t Parity_Type)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	460b      	mov	r3, r1
 800dc36:	70fb      	strb	r3, [r7, #3]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	70bb      	strb	r3, [r7, #2]
	uint8_t Byte_Traverser = 0;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	73fb      	strb	r3, [r7, #15]

	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800dc40:	2300      	movs	r3, #0
 800dc42:	73fb      	strb	r3, [r7, #15]
 800dc44:	e03b      	b.n	800dcbe <Verify_parity+0x92>
	{
		if( (Calculate_Parity(Data[Byte_Traverser],Parity_Type)) != ((Data[Byte_Traverser]>>7)&1))
 800dc46:	7bfb      	ldrb	r3, [r7, #15]
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	4413      	add	r3, r2
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	78ba      	ldrb	r2, [r7, #2]
 800dc50:	4611      	mov	r1, r2
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7ff ffa0 	bl	800db98 <Calculate_Parity>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	7bfb      	ldrb	r3, [r7, #15]
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	4413      	add	r3, r2
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	09db      	lsrs	r3, r3, #7
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	f003 0301 	and.w	r3, r3, #1
 800dc6c:	4299      	cmp	r1, r3
 800dc6e:	d023      	beq.n	800dcb8 <Verify_parity+0x8c>
		{
			printf("Failed for data:0x%02x\n",Data[Byte_Traverser]);
 800dc70:	7bfb      	ldrb	r3, [r7, #15]
 800dc72:	687a      	ldr	r2, [r7, #4]
 800dc74:	4413      	add	r3, r2
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	4619      	mov	r1, r3
 800dc7a:	4815      	ldr	r0, [pc, #84]	; (800dcd0 <Verify_parity+0xa4>)
 800dc7c:	f014 fe78 	bl	8022970 <iprintf>
			printf("Expected Parity:%u\n",Calculate_Parity(Data[Byte_Traverser],Parity_Type));
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	4413      	add	r3, r2
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	78ba      	ldrb	r2, [r7, #2]
 800dc8a:	4611      	mov	r1, r2
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7ff ff83 	bl	800db98 <Calculate_Parity>
 800dc92:	4603      	mov	r3, r0
 800dc94:	4619      	mov	r1, r3
 800dc96:	480f      	ldr	r0, [pc, #60]	; (800dcd4 <Verify_parity+0xa8>)
 800dc98:	f014 fe6a 	bl	8022970 <iprintf>
			printf("Available Parity:%u\n",((Data[Byte_Traverser]>>7)&1));
 800dc9c:	7bfb      	ldrb	r3, [r7, #15]
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	4413      	add	r3, r2
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	09db      	lsrs	r3, r3, #7
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	f003 0301 	and.w	r3, r3, #1
 800dcac:	4619      	mov	r1, r3
 800dcae:	480a      	ldr	r0, [pc, #40]	; (800dcd8 <Verify_parity+0xac>)
 800dcb0:	f014 fe5e 	bl	8022970 <iprintf>
			return 0;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	e007      	b.n	800dcc8 <Verify_parity+0x9c>
	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800dcb8:	7bfb      	ldrb	r3, [r7, #15]
 800dcba:	3301      	adds	r3, #1
 800dcbc:	73fb      	strb	r3, [r7, #15]
 800dcbe:	7bfa      	ldrb	r2, [r7, #15]
 800dcc0:	78fb      	ldrb	r3, [r7, #3]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d3bf      	bcc.n	800dc46 <Verify_parity+0x1a>
		}
	}
	return 1;
 800dcc6:	2301      	movs	r3, #1
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	08026968 	.word	0x08026968
 800dcd4:	08026980 	.word	0x08026980
 800dcd8:	08026994 	.word	0x08026994

0800dcdc <Insert_cal_parity>:


void Insert_cal_parity(uint8_t start, uint8_t No_of_Bits, uint8_t *Dest_Buff, uint64_t DataIn, uint8_t Parity_Type)
{
 800dcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce0:	b089      	sub	sp, #36	; 0x24
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	4603      	mov	r3, r0
 800dce6:	60ba      	str	r2, [r7, #8]
 800dce8:	73fb      	strb	r3, [r7, #15]
 800dcea:	460b      	mov	r3, r1
 800dcec:	73bb      	strb	r3, [r7, #14]
	uint16_t t1 = 0, t2 = 0, t3 = 0, t4 = 0;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	83fb      	strh	r3, [r7, #30]
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	83bb      	strh	r3, [r7, #28]
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	833b      	strh	r3, [r7, #24]
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp_Data = 0;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	76fb      	strb	r3, [r7, #27]

	if(Parity_Type == NO_PARITY)
 800dd02:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800dd06:	2b02      	cmp	r3, #2
 800dd08:	d108      	bne.n	800dd1c <Insert_cal_parity+0x40>
	{
		InsertBits(start,No_of_Bits,Dest_Buff,DataIn);
 800dd0a:	7bfb      	ldrb	r3, [r7, #15]
 800dd0c:	b298      	uxth	r0, r3
 800dd0e:	7bbb      	ldrb	r3, [r7, #14]
 800dd10:	b299      	uxth	r1, r3
 800dd12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd14:	68ba      	ldr	r2, [r7, #8]
 800dd16:	f7f2 fd09 	bl	800072c <InsertBits>
		return;
 800dd1a:	e13b      	b.n	800df94 <Insert_cal_parity+0x2b8>
	}

	if (No_of_Bits == 8)
 800dd1c:	7bbb      	ldrb	r3, [r7, #14]
 800dd1e:	2b08      	cmp	r3, #8
 800dd20:	d12c      	bne.n	800dd7c <Insert_cal_parity+0xa0>
	{
		// printf("One Byte Calculation\n");
		if (DataIn > 0x7f)
 800dd22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dd26:	2a80      	cmp	r2, #128	; 0x80
 800dd28:	f173 0300 	sbcs.w	r3, r3, #0
 800dd2c:	d303      	bcc.n	800dd36 <Insert_cal_parity+0x5a>
		{
			printf("Can't Insert Data as it is more than 7 Bits Length\n");
 800dd2e:	489b      	ldr	r0, [pc, #620]	; (800df9c <Insert_cal_parity+0x2c0>)
 800dd30:	f014 feba 	bl	8022aa8 <puts>
			return;
 800dd34:	e12e      	b.n	800df94 <Insert_cal_parity+0x2b8>
		}
		else
		{
			if (Calculate_Parity(DataIn, Parity_Type) == 1)
 800dd36:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800dd3a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dd3e:	4611      	mov	r1, r2
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7ff ff29 	bl	800db98 <Calculate_Parity>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d10b      	bne.n	800dd64 <Insert_cal_parity+0x88>
			{
				//printf("\nSET\n");
				Dest_Buff[0] = DataIn;
 800dd4c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] |= 1 << 7;
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dd5c:	b2da      	uxtb	r2, r3
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	701a      	strb	r2, [r3, #0]
 800dd62:	e117      	b.n	800df94 <Insert_cal_parity+0x2b8>
			}
			else
			{
				//printf("\nCLEAR\n");
				Dest_Buff[0] = DataIn;
 800dd64:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] &= ~(1 << 7);
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd74:	b2da      	uxtb	r2, r3
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	701a      	strb	r2, [r3, #0]
 800dd7a:	e10b      	b.n	800df94 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else if (No_of_Bits == 24)
 800dd7c:	7bbb      	ldrb	r3, [r7, #14]
 800dd7e:	2b18      	cmp	r3, #24
 800dd80:	f040 8104 	bne.w	800df8c <Insert_cal_parity+0x2b0>
	{
		// printf("Three Byte's Calculation\n");
		if (DataIn > 0x1fffff)
 800dd84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dd88:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800dd8c:	f173 0300 	sbcs.w	r3, r3, #0
 800dd90:	d303      	bcc.n	800dd9a <Insert_cal_parity+0xbe>
		{
			printf("Can't Insert Data as it is more than 21 Bits Length\n");
 800dd92:	4883      	ldr	r0, [pc, #524]	; (800dfa0 <Insert_cal_parity+0x2c4>)
 800dd94:	f014 fe88 	bl	8022aa8 <puts>
			return;
 800dd98:	e0fc      	b.n	800df94 <Insert_cal_parity+0x2b8>
		}
		else
		{
			uint8_t Byte_Traverser = 0;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	76bb      	strb	r3, [r7, #26]

			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800dd9e:	2300      	movs	r3, #0
 800dda0:	76bb      	strb	r3, [r7, #26]
 800dda2:	e0ee      	b.n	800df82 <Insert_cal_parity+0x2a6>
			{
				Temp_Data = DataIn >> (((Byte_Traverser * 8)));
 800dda4:	7ebb      	ldrb	r3, [r7, #26]
 800dda6:	00d9      	lsls	r1, r3, #3
 800dda8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ddac:	f1c1 0620 	rsb	r6, r1, #32
 800ddb0:	f1a1 0c20 	sub.w	ip, r1, #32
 800ddb4:	fa22 f001 	lsr.w	r0, r2, r1
 800ddb8:	6038      	str	r0, [r7, #0]
 800ddba:	fa03 f606 	lsl.w	r6, r3, r6
 800ddbe:	6838      	ldr	r0, [r7, #0]
 800ddc0:	4330      	orrs	r0, r6
 800ddc2:	6038      	str	r0, [r7, #0]
 800ddc4:	fa23 fc0c 	lsr.w	ip, r3, ip
 800ddc8:	6838      	ldr	r0, [r7, #0]
 800ddca:	ea40 000c 	orr.w	r0, r0, ip
 800ddce:	6038      	str	r0, [r7, #0]
 800ddd0:	40cb      	lsrs	r3, r1
 800ddd2:	607b      	str	r3, [r7, #4]
 800ddd4:	783b      	ldrb	r3, [r7, #0]
 800ddd6:	76fb      	strb	r3, [r7, #27]
				// printf("#Temp_Data:0x%02x\n",Temp_Data);
				switch (Byte_Traverser)
 800ddd8:	7ebb      	ldrb	r3, [r7, #26]
 800ddda:	2b02      	cmp	r3, #2
 800dddc:	d07a      	beq.n	800ded4 <Insert_cal_parity+0x1f8>
 800ddde:	2b02      	cmp	r3, #2
 800dde0:	f300 8094 	bgt.w	800df0c <Insert_cal_parity+0x230>
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d002      	beq.n	800ddee <Insert_cal_parity+0x112>
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d01f      	beq.n	800de2c <Insert_cal_parity+0x150>
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
					//printf("Temp_Data:%u\n",Temp_Data);
					break;
				default:
					break;
 800ddec:	e08e      	b.n	800df0c <Insert_cal_parity+0x230>
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800ddee:	7ebb      	ldrb	r3, [r7, #26]
 800ddf0:	00d9      	lsls	r1, r3, #3
 800ddf2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ddf6:	f1c1 0620 	rsb	r6, r1, #32
 800ddfa:	f1a1 0020 	sub.w	r0, r1, #32
 800ddfe:	fa22 f401 	lsr.w	r4, r2, r1
 800de02:	fa03 f606 	lsl.w	r6, r3, r6
 800de06:	4334      	orrs	r4, r6
 800de08:	fa23 f000 	lsr.w	r0, r3, r0
 800de0c:	4304      	orrs	r4, r0
 800de0e:	fa23 f501 	lsr.w	r5, r3, r1
 800de12:	f04f 0200 	mov.w	r2, #0
 800de16:	f04f 0300 	mov.w	r3, #0
 800de1a:	09e2      	lsrs	r2, r4, #7
 800de1c:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800de20:	09eb      	lsrs	r3, r5, #7
 800de22:	b293      	uxth	r3, r2
 800de24:	f003 0301 	and.w	r3, r3, #1
 800de28:	83fb      	strh	r3, [r7, #30]
					break;
 800de2a:	e070      	b.n	800df0e <Insert_cal_parity+0x232>
					Temp_Data<<=1; //Shifting data by 1 bit
 800de2c:	7efb      	ldrb	r3, [r7, #27]
 800de2e:	005b      	lsls	r3, r3, #1
 800de30:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800de32:	8bfb      	ldrh	r3, [r7, #30]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d104      	bne.n	800de42 <Insert_cal_parity+0x166>
 800de38:	7efb      	ldrb	r3, [r7, #27]
 800de3a:	f023 0301 	bic.w	r3, r3, #1
 800de3e:	76fb      	strb	r3, [r7, #27]
 800de40:	e003      	b.n	800de4a <Insert_cal_parity+0x16e>
 800de42:	7efb      	ldrb	r3, [r7, #27]
 800de44:	f043 0301 	orr.w	r3, r3, #1
 800de48:	76fb      	strb	r3, [r7, #27]
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800de4a:	7ebb      	ldrb	r3, [r7, #26]
 800de4c:	00d9      	lsls	r1, r3, #3
 800de4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800de52:	f1c1 0620 	rsb	r6, r1, #32
 800de56:	f1a1 0020 	sub.w	r0, r1, #32
 800de5a:	fa22 f801 	lsr.w	r8, r2, r1
 800de5e:	fa03 f606 	lsl.w	r6, r3, r6
 800de62:	ea48 0806 	orr.w	r8, r8, r6
 800de66:	fa23 f000 	lsr.w	r0, r3, r0
 800de6a:	ea48 0800 	orr.w	r8, r8, r0
 800de6e:	fa23 f901 	lsr.w	r9, r3, r1
 800de72:	f04f 0200 	mov.w	r2, #0
 800de76:	f04f 0300 	mov.w	r3, #0
 800de7a:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 800de7e:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 800de82:	ea4f 13d9 	mov.w	r3, r9, lsr #7
 800de86:	b293      	uxth	r3, r2
 800de88:	f003 0301 	and.w	r3, r3, #1
 800de8c:	83fb      	strh	r3, [r7, #30]
					t2 = (((DataIn >> (((Byte_Traverser * 8)))) >> 6) & 1);
 800de8e:	7ebb      	ldrb	r3, [r7, #26]
 800de90:	00d9      	lsls	r1, r3, #3
 800de92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800de96:	f1c1 0620 	rsb	r6, r1, #32
 800de9a:	f1a1 0020 	sub.w	r0, r1, #32
 800de9e:	fa22 fa01 	lsr.w	sl, r2, r1
 800dea2:	fa03 f606 	lsl.w	r6, r3, r6
 800dea6:	ea4a 0a06 	orr.w	sl, sl, r6
 800deaa:	fa23 f000 	lsr.w	r0, r3, r0
 800deae:	ea4a 0a00 	orr.w	sl, sl, r0
 800deb2:	fa23 fb01 	lsr.w	fp, r3, r1
 800deb6:	f04f 0200 	mov.w	r2, #0
 800deba:	f04f 0300 	mov.w	r3, #0
 800debe:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800dec2:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800dec6:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800deca:	b293      	uxth	r3, r2
 800decc:	f003 0301 	and.w	r3, r3, #1
 800ded0:	83bb      	strh	r3, [r7, #28]
					break;
 800ded2:	e01c      	b.n	800df0e <Insert_cal_parity+0x232>
					Temp_Data<<=2; //Shifting data by 2 bit
 800ded4:	7efb      	ldrb	r3, [r7, #27]
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	76fb      	strb	r3, [r7, #27]
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800deda:	8bbb      	ldrh	r3, [r7, #28]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d104      	bne.n	800deea <Insert_cal_parity+0x20e>
 800dee0:	7efb      	ldrb	r3, [r7, #27]
 800dee2:	f023 0301 	bic.w	r3, r3, #1
 800dee6:	76fb      	strb	r3, [r7, #27]
 800dee8:	e003      	b.n	800def2 <Insert_cal_parity+0x216>
 800deea:	7efb      	ldrb	r3, [r7, #27]
 800deec:	f043 0301 	orr.w	r3, r3, #1
 800def0:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800def2:	8bfb      	ldrh	r3, [r7, #30]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d104      	bne.n	800df02 <Insert_cal_parity+0x226>
 800def8:	7efb      	ldrb	r3, [r7, #27]
 800defa:	f023 0302 	bic.w	r3, r3, #2
 800defe:	76fb      	strb	r3, [r7, #27]
					break;
 800df00:	e005      	b.n	800df0e <Insert_cal_parity+0x232>
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800df02:	7efb      	ldrb	r3, [r7, #27]
 800df04:	f043 0302 	orr.w	r3, r3, #2
 800df08:	76fb      	strb	r3, [r7, #27]
					break;
 800df0a:	e000      	b.n	800df0e <Insert_cal_parity+0x232>
					break;
 800df0c:	bf00      	nop
				}
				//if (Calculate_Parity(DataIn >> ((16 - (Byte_Traverser * 8))), Parity_Type) == 1)
				if (Calculate_Parity(Temp_Data, Parity_Type) == 1)
 800df0e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800df12:	7efb      	ldrb	r3, [r7, #27]
 800df14:	4611      	mov	r1, r2
 800df16:	4618      	mov	r0, r3
 800df18:	f7ff fe3e 	bl	800db98 <Calculate_Parity>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d116      	bne.n	800df50 <Insert_cal_parity+0x274>
				{
					// printf("SET\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800df22:	7ebb      	ldrb	r3, [r7, #26]
 800df24:	f1c3 0302 	rsb	r3, r3, #2
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	4413      	add	r3, r2
 800df2c:	7efa      	ldrb	r2, [r7, #27]
 800df2e:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3- Byte_Traverser-1] |= 1 << 7;
 800df30:	7ebb      	ldrb	r3, [r7, #26]
 800df32:	f1c3 0302 	rsb	r3, r3, #2
 800df36:	68ba      	ldr	r2, [r7, #8]
 800df38:	4413      	add	r3, r2
 800df3a:	781a      	ldrb	r2, [r3, #0]
 800df3c:	7ebb      	ldrb	r3, [r7, #26]
 800df3e:	f1c3 0302 	rsb	r3, r3, #2
 800df42:	68b9      	ldr	r1, [r7, #8]
 800df44:	440b      	add	r3, r1
 800df46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800df4a:	b2d2      	uxtb	r2, r2
 800df4c:	701a      	strb	r2, [r3, #0]
 800df4e:	e015      	b.n	800df7c <Insert_cal_parity+0x2a0>
				}
				else
				{
					// printf("CLEAR\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800df50:	7ebb      	ldrb	r3, [r7, #26]
 800df52:	f1c3 0302 	rsb	r3, r3, #2
 800df56:	68ba      	ldr	r2, [r7, #8]
 800df58:	4413      	add	r3, r2
 800df5a:	7efa      	ldrb	r2, [r7, #27]
 800df5c:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3 -Byte_Traverser-1] &= ~(1 << 7);
 800df5e:	7ebb      	ldrb	r3, [r7, #26]
 800df60:	f1c3 0302 	rsb	r3, r3, #2
 800df64:	68ba      	ldr	r2, [r7, #8]
 800df66:	4413      	add	r3, r2
 800df68:	781a      	ldrb	r2, [r3, #0]
 800df6a:	7ebb      	ldrb	r3, [r7, #26]
 800df6c:	f1c3 0302 	rsb	r3, r3, #2
 800df70:	68b9      	ldr	r1, [r7, #8]
 800df72:	440b      	add	r3, r1
 800df74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800df78:	b2d2      	uxtb	r2, r2
 800df7a:	701a      	strb	r2, [r3, #0]
			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800df7c:	7ebb      	ldrb	r3, [r7, #26]
 800df7e:	3301      	adds	r3, #1
 800df80:	76bb      	strb	r3, [r7, #26]
 800df82:	7ebb      	ldrb	r3, [r7, #26]
 800df84:	2b02      	cmp	r3, #2
 800df86:	f67f af0d 	bls.w	800dda4 <Insert_cal_parity+0xc8>
 800df8a:	e003      	b.n	800df94 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else
	{
		printf("Selection Wrong\n");
 800df8c:	4805      	ldr	r0, [pc, #20]	; (800dfa4 <Insert_cal_parity+0x2c8>)
 800df8e:	f014 fd8b 	bl	8022aa8 <puts>
		return;
 800df92:	bf00      	nop
	}
	UNUSED(t1);UNUSED(t2);UNUSED(t3);UNUSED(t4);
}
 800df94:	3724      	adds	r7, #36	; 0x24
 800df96:	46bd      	mov	sp, r7
 800df98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df9c:	080269ac 	.word	0x080269ac
 800dfa0:	080269e0 	.word	0x080269e0
 800dfa4:	08026a14 	.word	0x08026a14

0800dfa8 <Data_Compliment>:

uint16_t Data_Compliment(uint8_t *Buff,uint16_t Size,uint8_t Type)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	807b      	strh	r3, [r7, #2]
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	81fb      	strh	r3, [r7, #14]
	uint16_t Actual_Size = 0;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	81bb      	strh	r3, [r7, #12]

#if (SIEMENS_DEBUG==1)
	printf("Size:%u\n",Size);
#endif

	if(Type == VERIFY)
 800dfc0:	787b      	ldrb	r3, [r7, #1]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d133      	bne.n	800e02e <Data_Compliment+0x86>
	{
		Actual_Size = ((Size/2)-2);
 800dfc6:	887b      	ldrh	r3, [r7, #2]
 800dfc8:	085b      	lsrs	r3, r3, #1
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	3b02      	subs	r3, #2
 800dfce:	81bb      	strh	r3, [r7, #12]
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	81fb      	strh	r3, [r7, #14]
 800dfd4:	e025      	b.n	800e022 <Data_Compliment+0x7a>
		{
			// printf("0x%02x|Compliment:0x%02x\n",Buff[Traverser],Buff[Traverser+Actual_Size+2]);
			if(Buff[Traverser] != (uint8_t)~Buff[Traverser+Actual_Size+2])
 800dfd6:	89fb      	ldrh	r3, [r7, #14]
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	4413      	add	r3, r2
 800dfdc:	781a      	ldrb	r2, [r3, #0]
 800dfde:	89f9      	ldrh	r1, [r7, #14]
 800dfe0:	89bb      	ldrh	r3, [r7, #12]
 800dfe2:	440b      	add	r3, r1
 800dfe4:	3302      	adds	r3, #2
 800dfe6:	6879      	ldr	r1, [r7, #4]
 800dfe8:	440b      	add	r3, r1
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	43db      	mvns	r3, r3
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d013      	beq.n	800e01c <Data_Compliment+0x74>
			{
				printf("Compliment failed for DATA\n0x%02x|Compliment:0x%02x\n",Buff[Traverser],(uint8_t)~Buff[Traverser+Actual_Size+2]);
 800dff4:	89fb      	ldrh	r3, [r7, #14]
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	4413      	add	r3, r2
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	4619      	mov	r1, r3
 800dffe:	89fa      	ldrh	r2, [r7, #14]
 800e000:	89bb      	ldrh	r3, [r7, #12]
 800e002:	4413      	add	r3, r2
 800e004:	3302      	adds	r3, #2
 800e006:	687a      	ldr	r2, [r7, #4]
 800e008:	4413      	add	r3, r2
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	43db      	mvns	r3, r3
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	461a      	mov	r2, r3
 800e012:	481a      	ldr	r0, [pc, #104]	; (800e07c <Data_Compliment+0xd4>)
 800e014:	f014 fcac 	bl	8022970 <iprintf>
				return 0;
 800e018:	2300      	movs	r3, #0
 800e01a:	e02b      	b.n	800e074 <Data_Compliment+0xcc>
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800e01c:	89fb      	ldrh	r3, [r7, #14]
 800e01e:	3301      	adds	r3, #1
 800e020:	81fb      	strh	r3, [r7, #14]
 800e022:	89fa      	ldrh	r2, [r7, #14]
 800e024:	89bb      	ldrh	r3, [r7, #12]
 800e026:	429a      	cmp	r2, r3
 800e028:	d3d5      	bcc.n	800dfd6 <Data_Compliment+0x2e>
			}
		}
		return 1;
 800e02a:	2301      	movs	r3, #1
 800e02c:	e022      	b.n	800e074 <Data_Compliment+0xcc>
	}
	else if(Type == CONVERT)
 800e02e:	787b      	ldrb	r3, [r7, #1]
 800e030:	2b01      	cmp	r3, #1
 800e032:	d11e      	bne.n	800e072 <Data_Compliment+0xca>
		{
			printf("0x%02x|",Buff[Traverser]);
		}
		printf("Compliment Data:\n");
#endif
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800e034:	2300      	movs	r3, #0
 800e036:	81fb      	strh	r3, [r7, #14]
 800e038:	e010      	b.n	800e05c <Data_Compliment+0xb4>
		{
			Buff[Traverser+2+Size] = ~Buff[Traverser];
 800e03a:	89fb      	ldrh	r3, [r7, #14]
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	4413      	add	r3, r2
 800e040:	781a      	ldrb	r2, [r3, #0]
 800e042:	89fb      	ldrh	r3, [r7, #14]
 800e044:	1c99      	adds	r1, r3, #2
 800e046:	887b      	ldrh	r3, [r7, #2]
 800e048:	440b      	add	r3, r1
 800e04a:	4619      	mov	r1, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	440b      	add	r3, r1
 800e050:	43d2      	mvns	r2, r2
 800e052:	b2d2      	uxtb	r2, r2
 800e054:	701a      	strb	r2, [r3, #0]
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800e056:	89fb      	ldrh	r3, [r7, #14]
 800e058:	3301      	adds	r3, #1
 800e05a:	81fb      	strh	r3, [r7, #14]
 800e05c:	89fa      	ldrh	r2, [r7, #14]
 800e05e:	887b      	ldrh	r3, [r7, #2]
 800e060:	429a      	cmp	r2, r3
 800e062:	d3ea      	bcc.n	800e03a <Data_Compliment+0x92>
#if (SIEMENS_DEBUG==1)
			printf("0x%02x|",Buff[Traverser+2+Size]);
#endif
		}
		return (Traverser+Size+2);
 800e064:	89fa      	ldrh	r2, [r7, #14]
 800e066:	887b      	ldrh	r3, [r7, #2]
 800e068:	4413      	add	r3, r2
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	3302      	adds	r3, #2
 800e06e:	b29b      	uxth	r3, r3
 800e070:	e000      	b.n	800e074 <Data_Compliment+0xcc>
	}
	return 0;
 800e072:	2300      	movs	r3, #0
}
 800e074:	4618      	mov	r0, r3
 800e076:	3710      	adds	r7, #16
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	08026a24 	.word	0x08026a24

0800e080 <CheckToSendReplyorNot>:

void CheckToSendReplyorNot(void)
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800e086:	2300      	movs	r3, #0
 800e088:	71fb      	strb	r3, [r7, #7]

	if(Tx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800e08a:	4b1a      	ldr	r3, [pc, #104]	; (800e0f4 <CheckToSendReplyorNot+0x74>)
 800e08c:	785b      	ldrb	r3, [r3, #1]
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d104      	bne.n	800e09c <CheckToSendReplyorNot+0x1c>
	{
		SET_BIT_USER(0,Value);
 800e092:	79fb      	ldrb	r3, [r7, #7]
 800e094:	f043 0301 	orr.w	r3, r3, #1
 800e098:	71fb      	strb	r3, [r7, #7]
 800e09a:	e003      	b.n	800e0a4 <CheckToSendReplyorNot+0x24>
	}
	else
	{
		CLEAR_BIT_USER(0,Value);
 800e09c:	79fb      	ldrb	r3, [r7, #7]
 800e09e:	f023 0301 	bic.w	r3, r3, #1
 800e0a2:	71fb      	strb	r3, [r7, #7]
	}
	if(Rx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800e0a4:	4b14      	ldr	r3, [pc, #80]	; (800e0f8 <CheckToSendReplyorNot+0x78>)
 800e0a6:	785b      	ldrb	r3, [r3, #1]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d104      	bne.n	800e0b6 <CheckToSendReplyorNot+0x36>
	{
		SET_BIT_USER(1,Value);
 800e0ac:	79fb      	ldrb	r3, [r7, #7]
 800e0ae:	f043 0302 	orr.w	r3, r3, #2
 800e0b2:	71fb      	strb	r3, [r7, #7]
 800e0b4:	e003      	b.n	800e0be <CheckToSendReplyorNot+0x3e>
	}
	else
	{
		CLEAR_BIT_USER(1,Value);
 800e0b6:	79fb      	ldrb	r3, [r7, #7]
 800e0b8:	f023 0302 	bic.w	r3, r3, #2
 800e0bc:	71fb      	strb	r3, [r7, #7]
	}

	//	printf("Value:%u\n",Value);

	switch(Value)
 800e0be:	79fb      	ldrb	r3, [r7, #7]
 800e0c0:	2b02      	cmp	r3, #2
 800e0c2:	dc02      	bgt.n	800e0ca <CheckToSendReplyorNot+0x4a>
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	da03      	bge.n	800e0d0 <CheckToSendReplyorNot+0x50>
 800e0c8:	e00a      	b.n	800e0e0 <CheckToSendReplyorNot+0x60>
 800e0ca:	2b03      	cmp	r3, #3
 800e0cc:	d004      	beq.n	800e0d8 <CheckToSendReplyorNot+0x58>
 800e0ce:	e007      	b.n	800e0e0 <CheckToSendReplyorNot+0x60>
	{
	case ZERO:
	case ONE:
	case TWO:
		SendReply = 1;
 800e0d0:	4b0a      	ldr	r3, [pc, #40]	; (800e0fc <CheckToSendReplyorNot+0x7c>)
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	701a      	strb	r2, [r3, #0]
		break;
 800e0d6:	e007      	b.n	800e0e8 <CheckToSendReplyorNot+0x68>
	case THREE:
#ifdef EI_1
		SendReply = 1;
 800e0d8:	4b08      	ldr	r3, [pc, #32]	; (800e0fc <CheckToSendReplyorNot+0x7c>)
 800e0da:	2201      	movs	r2, #1
 800e0dc:	701a      	strb	r2, [r3, #0]
#endif
#ifdef EI_2
		SendReply = 0;
#endif
		break;
 800e0de:	e003      	b.n	800e0e8 <CheckToSendReplyorNot+0x68>
	default:
		SendReply = 1;
 800e0e0:	4b06      	ldr	r3, [pc, #24]	; (800e0fc <CheckToSendReplyorNot+0x7c>)
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	701a      	strb	r2, [r3, #0]
		break;
 800e0e6:	bf00      	nop
	}

}
 800e0e8:	bf00      	nop
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr
 800e0f4:	20003520 	.word	0x20003520
 800e0f8:	20003524 	.word	0x20003524
 800e0fc:	20004c41 	.word	0x20004c41

0800e100 <PrintSignals>:



void PrintSignals(void)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800e106:	4b2d      	ldr	r3, [pc, #180]	; (800e1bc <PrintSignals+0xbc>)
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	461a      	mov	r2, r3
 800e10c:	492c      	ldr	r1, [pc, #176]	; (800e1c0 <PrintSignals+0xc0>)
 800e10e:	482d      	ldr	r0, [pc, #180]	; (800e1c4 <PrintSignals+0xc4>)
 800e110:	f014 fb1e 	bl	8022750 <memcpy>

	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800e114:	2301      	movs	r3, #1
 800e116:	80fb      	strh	r3, [r7, #6]
 800e118:	e045      	b.n	800e1a6 <PrintSignals+0xa6>
	{
		if(Traverser > TotalSigCount)
 800e11a:	4b2b      	ldr	r3, [pc, #172]	; (800e1c8 <PrintSignals+0xc8>)
 800e11c:	881b      	ldrh	r3, [r3, #0]
 800e11e:	88fa      	ldrh	r2, [r7, #6]
 800e120:	429a      	cmp	r2, r3
 800e122:	d83c      	bhi.n	800e19e <PrintSignals+0x9e>
		{
			continue;
		}

		if(GETPIN(Traverser) > 0)
 800e124:	88fb      	ldrh	r3, [r7, #6]
 800e126:	3b01      	subs	r3, #1
 800e128:	2b00      	cmp	r3, #0
 800e12a:	da00      	bge.n	800e12e <PrintSignals+0x2e>
 800e12c:	3307      	adds	r3, #7
 800e12e:	10db      	asrs	r3, r3, #3
 800e130:	461a      	mov	r2, r3
 800e132:	4b26      	ldr	r3, [pc, #152]	; (800e1cc <PrintSignals+0xcc>)
 800e134:	4413      	add	r3, r2
 800e136:	789b      	ldrb	r3, [r3, #2]
 800e138:	4619      	mov	r1, r3
 800e13a:	88fb      	ldrh	r3, [r7, #6]
 800e13c:	3b01      	subs	r3, #1
 800e13e:	425a      	negs	r2, r3
 800e140:	f003 0307 	and.w	r3, r3, #7
 800e144:	f002 0207 	and.w	r2, r2, #7
 800e148:	bf58      	it	pl
 800e14a:	4253      	negpl	r3, r2
 800e14c:	2201      	movs	r2, #1
 800e14e:	fa02 f303 	lsl.w	r3, r2, r3
 800e152:	400b      	ands	r3, r1
 800e154:	2b00      	cmp	r3, #0
 800e156:	dd0c      	ble.n	800e172 <PrintSignals+0x72>
		{
			printf("%15s:PICKUP   ",Signals[Traverser-1]);
 800e158:	88fb      	ldrh	r3, [r7, #6]
 800e15a:	1e5a      	subs	r2, r3, #1
 800e15c:	4613      	mov	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4413      	add	r3, r2
 800e162:	00db      	lsls	r3, r3, #3
 800e164:	4a1a      	ldr	r2, [pc, #104]	; (800e1d0 <PrintSignals+0xd0>)
 800e166:	4413      	add	r3, r2
 800e168:	4619      	mov	r1, r3
 800e16a:	481a      	ldr	r0, [pc, #104]	; (800e1d4 <PrintSignals+0xd4>)
 800e16c:	f014 fc00 	bl	8022970 <iprintf>
 800e170:	e00b      	b.n	800e18a <PrintSignals+0x8a>
		}
		else
		{
			printf("%15s:DROP      ",Signals[Traverser-1]);
 800e172:	88fb      	ldrh	r3, [r7, #6]
 800e174:	1e5a      	subs	r2, r3, #1
 800e176:	4613      	mov	r3, r2
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	4413      	add	r3, r2
 800e17c:	00db      	lsls	r3, r3, #3
 800e17e:	4a14      	ldr	r2, [pc, #80]	; (800e1d0 <PrintSignals+0xd0>)
 800e180:	4413      	add	r3, r2
 800e182:	4619      	mov	r1, r3
 800e184:	4814      	ldr	r0, [pc, #80]	; (800e1d8 <PrintSignals+0xd8>)
 800e186:	f014 fbf3 	bl	8022970 <iprintf>
		}

		if( (Traverser%2) == 0)
 800e18a:	88fb      	ldrh	r3, [r7, #6]
 800e18c:	f003 0301 	and.w	r3, r3, #1
 800e190:	b29b      	uxth	r3, r3
 800e192:	2b00      	cmp	r3, #0
 800e194:	d104      	bne.n	800e1a0 <PrintSignals+0xa0>
		{
			printf("\n");
 800e196:	200a      	movs	r0, #10
 800e198:	f014 fc02 	bl	80229a0 <putchar>
 800e19c:	e000      	b.n	800e1a0 <PrintSignals+0xa0>
			continue;
 800e19e:	bf00      	nop
	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800e1a0:	88fb      	ldrh	r3, [r7, #6]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	80fb      	strh	r3, [r7, #6]
 800e1a6:	88fa      	ldrh	r2, [r7, #6]
 800e1a8:	4b08      	ldr	r3, [pc, #32]	; (800e1cc <PrintSignals+0xcc>)
 800e1aa:	881b      	ldrh	r3, [r3, #0]
 800e1ac:	00db      	lsls	r3, r3, #3
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	ddb3      	ble.n	800e11a <PrintSignals+0x1a>
		}
	}
}
 800e1b2:	bf00      	nop
 800e1b4:	bf00      	nop
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	2000374c 	.word	0x2000374c
 800e1c0:	20003750 	.word	0x20003750
 800e1c4:	2000354a 	.word	0x2000354a
 800e1c8:	20004854 	.word	0x20004854
 800e1cc:	20003548 	.word	0x20003548
 800e1d0:	20003d64 	.word	0x20003d64
 800e1d4:	08026a5c 	.word	0x08026a5c
 800e1d8:	08026a6c 	.word	0x08026a6c

0800e1dc <GetTimeStamp>:

void GetTimeStamp(void)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b084      	sub	sp, #16
 800e1e0:	af00      	add	r7, sp, #0
	uint32_t TimeFrame = 0;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	60fb      	str	r3, [r7, #12]
	static uint32_t PrevTimeFrame = 0;
	uint32_t TimeStamp = 0;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	60bb      	str	r3, [r7, #8]
	static 	uint32_t PrevTimeStamp = 0;
	static uint32_t TickswhenTimeChanged = 0;
	uint32_t ElapsTicksAfterTimeChange = 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	607b      	str	r3, [r7, #4]

	Get_time();
 800e1ee:	f7fd f9bd 	bl	800b56c <Get_time>
	TimeFrame = (((RTC_Date_time_Dec_st.Hour * 3600) +(RTC_Date_time_Dec_st.Mins * 60) + (RTC_Date_time_Dec_st.Secs)));
 800e1f2:	4b21      	ldr	r3, [pc, #132]	; (800e278 <GetTimeStamp+0x9c>)
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800e1fc:	fb03 f202 	mul.w	r2, r3, r2
 800e200:	4b1d      	ldr	r3, [pc, #116]	; (800e278 <GetTimeStamp+0x9c>)
 800e202:	785b      	ldrb	r3, [r3, #1]
 800e204:	4619      	mov	r1, r3
 800e206:	460b      	mov	r3, r1
 800e208:	011b      	lsls	r3, r3, #4
 800e20a:	1a5b      	subs	r3, r3, r1
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	4413      	add	r3, r2
 800e210:	4a19      	ldr	r2, [pc, #100]	; (800e278 <GetTimeStamp+0x9c>)
 800e212:	7892      	ldrb	r2, [r2, #2]
 800e214:	4413      	add	r3, r2
 800e216:	60fb      	str	r3, [r7, #12]

	if(TimeFrame != PrevTimeFrame)
 800e218:	4b18      	ldr	r3, [pc, #96]	; (800e27c <GetTimeStamp+0xa0>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	68fa      	ldr	r2, [r7, #12]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d007      	beq.n	800e232 <GetTimeStamp+0x56>
	{
		PrevTimeFrame = TimeFrame;
 800e222:	4a16      	ldr	r2, [pc, #88]	; (800e27c <GetTimeStamp+0xa0>)
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	6013      	str	r3, [r2, #0]
		TickswhenTimeChanged = HAL_GetTick();
 800e228:	f007 fba4 	bl	8015974 <HAL_GetTick>
 800e22c:	4603      	mov	r3, r0
 800e22e:	4a14      	ldr	r2, [pc, #80]	; (800e280 <GetTimeStamp+0xa4>)
 800e230:	6013      	str	r3, [r2, #0]
	}

	ElapsTicksAfterTimeChange = HAL_Elaps_Ticks(TickswhenTimeChanged);
 800e232:	4b13      	ldr	r3, [pc, #76]	; (800e280 <GetTimeStamp+0xa4>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4618      	mov	r0, r3
 800e238:	f000 fe12 	bl	800ee60 <HAL_Elaps_Ticks>
 800e23c:	6078      	str	r0, [r7, #4]

	TimeStamp  = (TimeFrame * 10) + (ElapsTicksAfterTimeChange/100);
 800e23e:	68fa      	ldr	r2, [r7, #12]
 800e240:	4613      	mov	r3, r2
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	4413      	add	r3, r2
 800e246:	005b      	lsls	r3, r3, #1
 800e248:	4619      	mov	r1, r3
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4a0d      	ldr	r2, [pc, #52]	; (800e284 <GetTimeStamp+0xa8>)
 800e24e:	fba2 2303 	umull	r2, r3, r2, r3
 800e252:	095b      	lsrs	r3, r3, #5
 800e254:	440b      	add	r3, r1
 800e256:	60bb      	str	r3, [r7, #8]
	if(TimeStamp != PrevTimeStamp)
 800e258:	4b0b      	ldr	r3, [pc, #44]	; (800e288 <GetTimeStamp+0xac>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d005      	beq.n	800e26e <GetTimeStamp+0x92>
	{
		PrevTimeStamp = TimeStamp;
 800e262:	4a09      	ldr	r2, [pc, #36]	; (800e288 <GetTimeStamp+0xac>)
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	6013      	str	r3, [r2, #0]
		SelfTimeStamp = TimeStamp;
 800e268:	4a08      	ldr	r2, [pc, #32]	; (800e28c <GetTimeStamp+0xb0>)
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	6013      	str	r3, [r2, #0]
		//		printf("Ticks:%lu|ms:%lu|%lu\n",HAL_GetTick(),	TimeStamp,(ElapsTicksAfterTimeChange));
	}
}
 800e26e:	bf00      	nop
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	20002888 	.word	0x20002888
 800e27c:	20004c48 	.word	0x20004c48
 800e280:	20004c4c 	.word	0x20004c4c
 800e284:	51eb851f 	.word	0x51eb851f
 800e288:	20004c50 	.word	0x20004c50
 800e28c:	20003d60 	.word	0x20003d60

0800e290 <UpdateSIGNALSNames>:


void UpdateSIGNALSNames(void)
{
 800e290:	b490      	push	{r4, r7}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800e29a:	79fb      	ldrb	r3, [r7, #7]
 800e29c:	1c5a      	adds	r2, r3, #1
 800e29e:	71fa      	strb	r2, [r7, #7]
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	4613      	mov	r3, r2
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	4413      	add	r3, r2
 800e2a8:	00db      	lsls	r3, r3, #3
 800e2aa:	4acd      	ldr	r2, [pc, #820]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e2ac:	4413      	add	r3, r2
 800e2ae:	4acd      	ldr	r2, [pc, #820]	; (800e5e4 <UpdateSIGNALSNames+0x354>)
 800e2b0:	6810      	ldr	r0, [r2, #0]
 800e2b2:	6018      	str	r0, [r3, #0]
 800e2b4:	8892      	ldrh	r2, [r2, #4]
 800e2b6:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800e2b8:	79fb      	ldrb	r3, [r7, #7]
 800e2ba:	1c5a      	adds	r2, r3, #1
 800e2bc:	71fa      	strb	r2, [r7, #7]
 800e2be:	461a      	mov	r2, r3
 800e2c0:	4613      	mov	r3, r2
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	4413      	add	r3, r2
 800e2c6:	00db      	lsls	r3, r3, #3
 800e2c8:	4ac5      	ldr	r2, [pc, #788]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e2ca:	4413      	add	r3, r2
 800e2cc:	4ac6      	ldr	r2, [pc, #792]	; (800e5e8 <UpdateSIGNALSNames+0x358>)
 800e2ce:	6810      	ldr	r0, [r2, #0]
 800e2d0:	6018      	str	r0, [r3, #0]
 800e2d2:	8892      	ldrh	r2, [r2, #4]
 800e2d4:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800e2d6:	79fb      	ldrb	r3, [r7, #7]
 800e2d8:	1c5a      	adds	r2, r3, #1
 800e2da:	71fa      	strb	r2, [r7, #7]
 800e2dc:	461a      	mov	r2, r3
 800e2de:	4613      	mov	r3, r2
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	4413      	add	r3, r2
 800e2e4:	00db      	lsls	r3, r3, #3
 800e2e6:	4abe      	ldr	r2, [pc, #760]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e2e8:	4413      	add	r3, r2
 800e2ea:	4ac0      	ldr	r2, [pc, #768]	; (800e5ec <UpdateSIGNALSNames+0x35c>)
 800e2ec:	6810      	ldr	r0, [r2, #0]
 800e2ee:	6018      	str	r0, [r3, #0]
 800e2f0:	8892      	ldrh	r2, [r2, #4]
 800e2f2:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800e2f4:	79fb      	ldrb	r3, [r7, #7]
 800e2f6:	1c5a      	adds	r2, r3, #1
 800e2f8:	71fa      	strb	r2, [r7, #7]
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	4613      	mov	r3, r2
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	4413      	add	r3, r2
 800e302:	00db      	lsls	r3, r3, #3
 800e304:	4ab6      	ldr	r2, [pc, #728]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e306:	4413      	add	r3, r2
 800e308:	4ab9      	ldr	r2, [pc, #740]	; (800e5f0 <UpdateSIGNALSNames+0x360>)
 800e30a:	6810      	ldr	r0, [r2, #0]
 800e30c:	6018      	str	r0, [r3, #0]
 800e30e:	8892      	ldrh	r2, [r2, #4]
 800e310:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800e312:	79fb      	ldrb	r3, [r7, #7]
 800e314:	1c5a      	adds	r2, r3, #1
 800e316:	71fa      	strb	r2, [r7, #7]
 800e318:	461a      	mov	r2, r3
 800e31a:	4613      	mov	r3, r2
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	4413      	add	r3, r2
 800e320:	00db      	lsls	r3, r3, #3
 800e322:	4aaf      	ldr	r2, [pc, #700]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e324:	4413      	add	r3, r2
 800e326:	4ab3      	ldr	r2, [pc, #716]	; (800e5f4 <UpdateSIGNALSNames+0x364>)
 800e328:	6810      	ldr	r0, [r2, #0]
 800e32a:	6018      	str	r0, [r3, #0]
 800e32c:	8892      	ldrh	r2, [r2, #4]
 800e32e:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800e330:	79fb      	ldrb	r3, [r7, #7]
 800e332:	1c5a      	adds	r2, r3, #1
 800e334:	71fa      	strb	r2, [r7, #7]
 800e336:	461a      	mov	r2, r3
 800e338:	4613      	mov	r3, r2
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	4413      	add	r3, r2
 800e33e:	00db      	lsls	r3, r3, #3
 800e340:	4aa7      	ldr	r2, [pc, #668]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e342:	4413      	add	r3, r2
 800e344:	4aac      	ldr	r2, [pc, #688]	; (800e5f8 <UpdateSIGNALSNames+0x368>)
 800e346:	6810      	ldr	r0, [r2, #0]
 800e348:	6018      	str	r0, [r3, #0]
 800e34a:	8891      	ldrh	r1, [r2, #4]
 800e34c:	7992      	ldrb	r2, [r2, #6]
 800e34e:	8099      	strh	r1, [r3, #4]
 800e350:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800e352:	79fb      	ldrb	r3, [r7, #7]
 800e354:	1c5a      	adds	r2, r3, #1
 800e356:	71fa      	strb	r2, [r7, #7]
 800e358:	461a      	mov	r2, r3
 800e35a:	4613      	mov	r3, r2
 800e35c:	009b      	lsls	r3, r3, #2
 800e35e:	4413      	add	r3, r2
 800e360:	00db      	lsls	r3, r3, #3
 800e362:	4a9f      	ldr	r2, [pc, #636]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e364:	4413      	add	r3, r2
 800e366:	4aa5      	ldr	r2, [pc, #660]	; (800e5fc <UpdateSIGNALSNames+0x36c>)
 800e368:	6810      	ldr	r0, [r2, #0]
 800e36a:	6018      	str	r0, [r3, #0]
 800e36c:	8891      	ldrh	r1, [r2, #4]
 800e36e:	7992      	ldrb	r2, [r2, #6]
 800e370:	8099      	strh	r1, [r3, #4]
 800e372:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800e374:	79fb      	ldrb	r3, [r7, #7]
 800e376:	1c5a      	adds	r2, r3, #1
 800e378:	71fa      	strb	r2, [r7, #7]
 800e37a:	461a      	mov	r2, r3
 800e37c:	4613      	mov	r3, r2
 800e37e:	009b      	lsls	r3, r3, #2
 800e380:	4413      	add	r3, r2
 800e382:	00db      	lsls	r3, r3, #3
 800e384:	4a96      	ldr	r2, [pc, #600]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e386:	4413      	add	r3, r2
 800e388:	4a9d      	ldr	r2, [pc, #628]	; (800e600 <UpdateSIGNALSNames+0x370>)
 800e38a:	6810      	ldr	r0, [r2, #0]
 800e38c:	6018      	str	r0, [r3, #0]
 800e38e:	7912      	ldrb	r2, [r2, #4]
 800e390:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800e392:	79fb      	ldrb	r3, [r7, #7]
 800e394:	1c5a      	adds	r2, r3, #1
 800e396:	71fa      	strb	r2, [r7, #7]
 800e398:	461a      	mov	r2, r3
 800e39a:	4613      	mov	r3, r2
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	4413      	add	r3, r2
 800e3a0:	00db      	lsls	r3, r3, #3
 800e3a2:	4a8f      	ldr	r2, [pc, #572]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e3a4:	4413      	add	r3, r2
 800e3a6:	4997      	ldr	r1, [pc, #604]	; (800e604 <UpdateSIGNALSNames+0x374>)
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	cb03      	ldmia	r3!, {r0, r1}
 800e3ae:	6010      	str	r0, [r2, #0]
 800e3b0:	6051      	str	r1, [r2, #4]
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800e3b6:	79fb      	ldrb	r3, [r7, #7]
 800e3b8:	1c5a      	adds	r2, r3, #1
 800e3ba:	71fa      	strb	r2, [r7, #7]
 800e3bc:	461a      	mov	r2, r3
 800e3be:	4613      	mov	r3, r2
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	4413      	add	r3, r2
 800e3c4:	00db      	lsls	r3, r3, #3
 800e3c6:	4a86      	ldr	r2, [pc, #536]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e3c8:	4413      	add	r3, r2
 800e3ca:	4a8f      	ldr	r2, [pc, #572]	; (800e608 <UpdateSIGNALSNames+0x378>)
 800e3cc:	6810      	ldr	r0, [r2, #0]
 800e3ce:	6018      	str	r0, [r3, #0]
 800e3d0:	8892      	ldrh	r2, [r2, #4]
 800e3d2:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800e3d4:	79fb      	ldrb	r3, [r7, #7]
 800e3d6:	1c5a      	adds	r2, r3, #1
 800e3d8:	71fa      	strb	r2, [r7, #7]
 800e3da:	461a      	mov	r2, r3
 800e3dc:	4613      	mov	r3, r2
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	4413      	add	r3, r2
 800e3e2:	00db      	lsls	r3, r3, #3
 800e3e4:	4a7e      	ldr	r2, [pc, #504]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e3e6:	4413      	add	r3, r2
 800e3e8:	4988      	ldr	r1, [pc, #544]	; (800e60c <UpdateSIGNALSNames+0x37c>)
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	cb03      	ldmia	r3!, {r0, r1}
 800e3f0:	6010      	str	r0, [r2, #0]
 800e3f2:	6051      	str	r1, [r2, #4]
 800e3f4:	881b      	ldrh	r3, [r3, #0]
 800e3f6:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800e3f8:	79fb      	ldrb	r3, [r7, #7]
 800e3fa:	1c5a      	adds	r2, r3, #1
 800e3fc:	71fa      	strb	r2, [r7, #7]
 800e3fe:	461a      	mov	r2, r3
 800e400:	4613      	mov	r3, r2
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	4413      	add	r3, r2
 800e406:	00db      	lsls	r3, r3, #3
 800e408:	4a75      	ldr	r2, [pc, #468]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e40a:	4413      	add	r3, r2
 800e40c:	4980      	ldr	r1, [pc, #512]	; (800e610 <UpdateSIGNALSNames+0x380>)
 800e40e:	461a      	mov	r2, r3
 800e410:	460b      	mov	r3, r1
 800e412:	cb03      	ldmia	r3!, {r0, r1}
 800e414:	6010      	str	r0, [r2, #0]
 800e416:	6051      	str	r1, [r2, #4]
 800e418:	8819      	ldrh	r1, [r3, #0]
 800e41a:	789b      	ldrb	r3, [r3, #2]
 800e41c:	8111      	strh	r1, [r2, #8]
 800e41e:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800e420:	79fb      	ldrb	r3, [r7, #7]
 800e422:	1c5a      	adds	r2, r3, #1
 800e424:	71fa      	strb	r2, [r7, #7]
 800e426:	461a      	mov	r2, r3
 800e428:	4613      	mov	r3, r2
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	4413      	add	r3, r2
 800e42e:	00db      	lsls	r3, r3, #3
 800e430:	4a6b      	ldr	r2, [pc, #428]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e432:	4413      	add	r3, r2
 800e434:	4977      	ldr	r1, [pc, #476]	; (800e614 <UpdateSIGNALSNames+0x384>)
 800e436:	461a      	mov	r2, r3
 800e438:	460b      	mov	r3, r1
 800e43a:	cb03      	ldmia	r3!, {r0, r1}
 800e43c:	6010      	str	r0, [r2, #0]
 800e43e:	6051      	str	r1, [r2, #4]
 800e440:	881b      	ldrh	r3, [r3, #0]
 800e442:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800e444:	79fb      	ldrb	r3, [r7, #7]
 800e446:	1c5a      	adds	r2, r3, #1
 800e448:	71fa      	strb	r2, [r7, #7]
 800e44a:	461a      	mov	r2, r3
 800e44c:	4613      	mov	r3, r2
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	4413      	add	r3, r2
 800e452:	00db      	lsls	r3, r3, #3
 800e454:	4a62      	ldr	r2, [pc, #392]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e456:	4413      	add	r3, r2
 800e458:	496f      	ldr	r1, [pc, #444]	; (800e618 <UpdateSIGNALSNames+0x388>)
 800e45a:	461a      	mov	r2, r3
 800e45c:	460b      	mov	r3, r1
 800e45e:	cb03      	ldmia	r3!, {r0, r1}
 800e460:	6010      	str	r0, [r2, #0]
 800e462:	6051      	str	r1, [r2, #4]
 800e464:	881b      	ldrh	r3, [r3, #0]
 800e466:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800e468:	79fb      	ldrb	r3, [r7, #7]
 800e46a:	1c5a      	adds	r2, r3, #1
 800e46c:	71fa      	strb	r2, [r7, #7]
 800e46e:	461a      	mov	r2, r3
 800e470:	4613      	mov	r3, r2
 800e472:	009b      	lsls	r3, r3, #2
 800e474:	4413      	add	r3, r2
 800e476:	00db      	lsls	r3, r3, #3
 800e478:	4a59      	ldr	r2, [pc, #356]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e47a:	4413      	add	r3, r2
 800e47c:	4967      	ldr	r1, [pc, #412]	; (800e61c <UpdateSIGNALSNames+0x38c>)
 800e47e:	461a      	mov	r2, r3
 800e480:	460b      	mov	r3, r1
 800e482:	cb03      	ldmia	r3!, {r0, r1}
 800e484:	6010      	str	r0, [r2, #0]
 800e486:	6051      	str	r1, [r2, #4]
 800e488:	8819      	ldrh	r1, [r3, #0]
 800e48a:	789b      	ldrb	r3, [r3, #2]
 800e48c:	8111      	strh	r1, [r2, #8]
 800e48e:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800e490:	79fb      	ldrb	r3, [r7, #7]
 800e492:	1c5a      	adds	r2, r3, #1
 800e494:	71fa      	strb	r2, [r7, #7]
 800e496:	461a      	mov	r2, r3
 800e498:	4613      	mov	r3, r2
 800e49a:	009b      	lsls	r3, r3, #2
 800e49c:	4413      	add	r3, r2
 800e49e:	00db      	lsls	r3, r3, #3
 800e4a0:	4a4f      	ldr	r2, [pc, #316]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e4a2:	4413      	add	r3, r2
 800e4a4:	495e      	ldr	r1, [pc, #376]	; (800e620 <UpdateSIGNALSNames+0x390>)
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	cb03      	ldmia	r3!, {r0, r1}
 800e4ac:	6010      	str	r0, [r2, #0]
 800e4ae:	6051      	str	r1, [r2, #4]
 800e4b0:	881b      	ldrh	r3, [r3, #0]
 800e4b2:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800e4b4:	79fb      	ldrb	r3, [r7, #7]
 800e4b6:	1c5a      	adds	r2, r3, #1
 800e4b8:	71fa      	strb	r2, [r7, #7]
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	4613      	mov	r3, r2
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	4413      	add	r3, r2
 800e4c2:	00db      	lsls	r3, r3, #3
 800e4c4:	4a46      	ldr	r2, [pc, #280]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e4c6:	4413      	add	r3, r2
 800e4c8:	4a56      	ldr	r2, [pc, #344]	; (800e624 <UpdateSIGNALSNames+0x394>)
 800e4ca:	6810      	ldr	r0, [r2, #0]
 800e4cc:	6018      	str	r0, [r3, #0]
 800e4ce:	8891      	ldrh	r1, [r2, #4]
 800e4d0:	7992      	ldrb	r2, [r2, #6]
 800e4d2:	8099      	strh	r1, [r3, #4]
 800e4d4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800e4d6:	79fb      	ldrb	r3, [r7, #7]
 800e4d8:	1c5a      	adds	r2, r3, #1
 800e4da:	71fa      	strb	r2, [r7, #7]
 800e4dc:	461a      	mov	r2, r3
 800e4de:	4613      	mov	r3, r2
 800e4e0:	009b      	lsls	r3, r3, #2
 800e4e2:	4413      	add	r3, r2
 800e4e4:	00db      	lsls	r3, r3, #3
 800e4e6:	4a3e      	ldr	r2, [pc, #248]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e4e8:	4413      	add	r3, r2
 800e4ea:	4a4f      	ldr	r2, [pc, #316]	; (800e628 <UpdateSIGNALSNames+0x398>)
 800e4ec:	6810      	ldr	r0, [r2, #0]
 800e4ee:	6018      	str	r0, [r3, #0]
 800e4f0:	8891      	ldrh	r1, [r2, #4]
 800e4f2:	7992      	ldrb	r2, [r2, #6]
 800e4f4:	8099      	strh	r1, [r3, #4]
 800e4f6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800e4f8:	79fb      	ldrb	r3, [r7, #7]
 800e4fa:	1c5a      	adds	r2, r3, #1
 800e4fc:	71fa      	strb	r2, [r7, #7]
 800e4fe:	461a      	mov	r2, r3
 800e500:	4613      	mov	r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	4413      	add	r3, r2
 800e506:	00db      	lsls	r3, r3, #3
 800e508:	4a35      	ldr	r2, [pc, #212]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e50a:	4413      	add	r3, r2
 800e50c:	4a47      	ldr	r2, [pc, #284]	; (800e62c <UpdateSIGNALSNames+0x39c>)
 800e50e:	6810      	ldr	r0, [r2, #0]
 800e510:	6018      	str	r0, [r3, #0]
 800e512:	8891      	ldrh	r1, [r2, #4]
 800e514:	7992      	ldrb	r2, [r2, #6]
 800e516:	8099      	strh	r1, [r3, #4]
 800e518:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800e51a:	79fb      	ldrb	r3, [r7, #7]
 800e51c:	1c5a      	adds	r2, r3, #1
 800e51e:	71fa      	strb	r2, [r7, #7]
 800e520:	461a      	mov	r2, r3
 800e522:	4613      	mov	r3, r2
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	4413      	add	r3, r2
 800e528:	00db      	lsls	r3, r3, #3
 800e52a:	4a2d      	ldr	r2, [pc, #180]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e52c:	4413      	add	r3, r2
 800e52e:	4a40      	ldr	r2, [pc, #256]	; (800e630 <UpdateSIGNALSNames+0x3a0>)
 800e530:	6810      	ldr	r0, [r2, #0]
 800e532:	6018      	str	r0, [r3, #0]
 800e534:	8891      	ldrh	r1, [r2, #4]
 800e536:	7992      	ldrb	r2, [r2, #6]
 800e538:	8099      	strh	r1, [r3, #4]
 800e53a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800e53c:	79fb      	ldrb	r3, [r7, #7]
 800e53e:	1c5a      	adds	r2, r3, #1
 800e540:	71fa      	strb	r2, [r7, #7]
 800e542:	461a      	mov	r2, r3
 800e544:	4613      	mov	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	4413      	add	r3, r2
 800e54a:	00db      	lsls	r3, r3, #3
 800e54c:	4a24      	ldr	r2, [pc, #144]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e54e:	4413      	add	r3, r2
 800e550:	4938      	ldr	r1, [pc, #224]	; (800e634 <UpdateSIGNALSNames+0x3a4>)
 800e552:	461a      	mov	r2, r3
 800e554:	460b      	mov	r3, r1
 800e556:	cb03      	ldmia	r3!, {r0, r1}
 800e558:	6010      	str	r0, [r2, #0]
 800e55a:	6051      	str	r1, [r2, #4]
 800e55c:	8819      	ldrh	r1, [r3, #0]
 800e55e:	789b      	ldrb	r3, [r3, #2]
 800e560:	8111      	strh	r1, [r2, #8]
 800e562:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800e564:	79fb      	ldrb	r3, [r7, #7]
 800e566:	1c5a      	adds	r2, r3, #1
 800e568:	71fa      	strb	r2, [r7, #7]
 800e56a:	461a      	mov	r2, r3
 800e56c:	4613      	mov	r3, r2
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	4413      	add	r3, r2
 800e572:	00db      	lsls	r3, r3, #3
 800e574:	4a1a      	ldr	r2, [pc, #104]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e576:	4413      	add	r3, r2
 800e578:	4a2f      	ldr	r2, [pc, #188]	; (800e638 <UpdateSIGNALSNames+0x3a8>)
 800e57a:	6810      	ldr	r0, [r2, #0]
 800e57c:	6018      	str	r0, [r3, #0]
 800e57e:	8891      	ldrh	r1, [r2, #4]
 800e580:	7992      	ldrb	r2, [r2, #6]
 800e582:	8099      	strh	r1, [r3, #4]
 800e584:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800e586:	79fb      	ldrb	r3, [r7, #7]
 800e588:	1c5a      	adds	r2, r3, #1
 800e58a:	71fa      	strb	r2, [r7, #7]
 800e58c:	461a      	mov	r2, r3
 800e58e:	4613      	mov	r3, r2
 800e590:	009b      	lsls	r3, r3, #2
 800e592:	4413      	add	r3, r2
 800e594:	00db      	lsls	r3, r3, #3
 800e596:	4a12      	ldr	r2, [pc, #72]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e598:	4413      	add	r3, r2
 800e59a:	4a28      	ldr	r2, [pc, #160]	; (800e63c <UpdateSIGNALSNames+0x3ac>)
 800e59c:	6810      	ldr	r0, [r2, #0]
 800e59e:	6018      	str	r0, [r3, #0]
 800e5a0:	8891      	ldrh	r1, [r2, #4]
 800e5a2:	7992      	ldrb	r2, [r2, #6]
 800e5a4:	8099      	strh	r1, [r3, #4]
 800e5a6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800e5a8:	79fb      	ldrb	r3, [r7, #7]
 800e5aa:	1c5a      	adds	r2, r3, #1
 800e5ac:	71fa      	strb	r2, [r7, #7]
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	4613      	mov	r3, r2
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	4413      	add	r3, r2
 800e5b6:	00db      	lsls	r3, r3, #3
 800e5b8:	4a09      	ldr	r2, [pc, #36]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e5ba:	4413      	add	r3, r2
 800e5bc:	4a20      	ldr	r2, [pc, #128]	; (800e640 <UpdateSIGNALSNames+0x3b0>)
 800e5be:	6810      	ldr	r0, [r2, #0]
 800e5c0:	6018      	str	r0, [r3, #0]
 800e5c2:	8891      	ldrh	r1, [r2, #4]
 800e5c4:	7992      	ldrb	r2, [r2, #6]
 800e5c6:	8099      	strh	r1, [r3, #4]
 800e5c8:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800e5ca:	79fb      	ldrb	r3, [r7, #7]
 800e5cc:	1c5a      	adds	r2, r3, #1
 800e5ce:	71fa      	strb	r2, [r7, #7]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	4413      	add	r3, r2
 800e5d8:	00db      	lsls	r3, r3, #3
 800e5da:	4a01      	ldr	r2, [pc, #4]	; (800e5e0 <UpdateSIGNALSNames+0x350>)
 800e5dc:	4413      	add	r3, r2
 800e5de:	e031      	b.n	800e644 <UpdateSIGNALSNames+0x3b4>
 800e5e0:	20003d64 	.word	0x20003d64
 800e5e4:	08026a7c 	.word	0x08026a7c
 800e5e8:	08026a84 	.word	0x08026a84
 800e5ec:	08026a8c 	.word	0x08026a8c
 800e5f0:	08026a94 	.word	0x08026a94
 800e5f4:	08026a9c 	.word	0x08026a9c
 800e5f8:	08026aa4 	.word	0x08026aa4
 800e5fc:	08026aac 	.word	0x08026aac
 800e600:	08026ab4 	.word	0x08026ab4
 800e604:	08026abc 	.word	0x08026abc
 800e608:	08026ac8 	.word	0x08026ac8
 800e60c:	08026ad0 	.word	0x08026ad0
 800e610:	08026adc 	.word	0x08026adc
 800e614:	08026ae8 	.word	0x08026ae8
 800e618:	08026af4 	.word	0x08026af4
 800e61c:	08026b00 	.word	0x08026b00
 800e620:	08026b0c 	.word	0x08026b0c
 800e624:	08026b18 	.word	0x08026b18
 800e628:	08026b20 	.word	0x08026b20
 800e62c:	08026b28 	.word	0x08026b28
 800e630:	08026b30 	.word	0x08026b30
 800e634:	08026b38 	.word	0x08026b38
 800e638:	08026b44 	.word	0x08026b44
 800e63c:	08026b4c 	.word	0x08026b4c
 800e640:	08026b54 	.word	0x08026b54
 800e644:	4acd      	ldr	r2, [pc, #820]	; (800e97c <UpdateSIGNALSNames+0x6ec>)
 800e646:	6810      	ldr	r0, [r2, #0]
 800e648:	6018      	str	r0, [r3, #0]
 800e64a:	8891      	ldrh	r1, [r2, #4]
 800e64c:	7992      	ldrb	r2, [r2, #6]
 800e64e:	8099      	strh	r1, [r3, #4]
 800e650:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800e652:	79fb      	ldrb	r3, [r7, #7]
 800e654:	1c5a      	adds	r2, r3, #1
 800e656:	71fa      	strb	r2, [r7, #7]
 800e658:	461a      	mov	r2, r3
 800e65a:	4613      	mov	r3, r2
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	4413      	add	r3, r2
 800e660:	00db      	lsls	r3, r3, #3
 800e662:	4ac7      	ldr	r2, [pc, #796]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e664:	4413      	add	r3, r2
 800e666:	4ac7      	ldr	r2, [pc, #796]	; (800e984 <UpdateSIGNALSNames+0x6f4>)
 800e668:	6810      	ldr	r0, [r2, #0]
 800e66a:	6018      	str	r0, [r3, #0]
 800e66c:	8891      	ldrh	r1, [r2, #4]
 800e66e:	7992      	ldrb	r2, [r2, #6]
 800e670:	8099      	strh	r1, [r3, #4]
 800e672:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800e674:	79fb      	ldrb	r3, [r7, #7]
 800e676:	1c5a      	adds	r2, r3, #1
 800e678:	71fa      	strb	r2, [r7, #7]
 800e67a:	461a      	mov	r2, r3
 800e67c:	4613      	mov	r3, r2
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	4413      	add	r3, r2
 800e682:	00db      	lsls	r3, r3, #3
 800e684:	4abe      	ldr	r2, [pc, #760]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e686:	4413      	add	r3, r2
 800e688:	4abf      	ldr	r2, [pc, #764]	; (800e988 <UpdateSIGNALSNames+0x6f8>)
 800e68a:	6810      	ldr	r0, [r2, #0]
 800e68c:	6018      	str	r0, [r3, #0]
 800e68e:	8891      	ldrh	r1, [r2, #4]
 800e690:	7992      	ldrb	r2, [r2, #6]
 800e692:	8099      	strh	r1, [r3, #4]
 800e694:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800e696:	79fb      	ldrb	r3, [r7, #7]
 800e698:	1c5a      	adds	r2, r3, #1
 800e69a:	71fa      	strb	r2, [r7, #7]
 800e69c:	461a      	mov	r2, r3
 800e69e:	4613      	mov	r3, r2
 800e6a0:	009b      	lsls	r3, r3, #2
 800e6a2:	4413      	add	r3, r2
 800e6a4:	00db      	lsls	r3, r3, #3
 800e6a6:	4ab6      	ldr	r2, [pc, #728]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e6a8:	4413      	add	r3, r2
 800e6aa:	4ab8      	ldr	r2, [pc, #736]	; (800e98c <UpdateSIGNALSNames+0x6fc>)
 800e6ac:	6810      	ldr	r0, [r2, #0]
 800e6ae:	6018      	str	r0, [r3, #0]
 800e6b0:	8891      	ldrh	r1, [r2, #4]
 800e6b2:	7992      	ldrb	r2, [r2, #6]
 800e6b4:	8099      	strh	r1, [r3, #4]
 800e6b6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800e6b8:	79fb      	ldrb	r3, [r7, #7]
 800e6ba:	1c5a      	adds	r2, r3, #1
 800e6bc:	71fa      	strb	r2, [r7, #7]
 800e6be:	461a      	mov	r2, r3
 800e6c0:	4613      	mov	r3, r2
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	4413      	add	r3, r2
 800e6c6:	00db      	lsls	r3, r3, #3
 800e6c8:	4aad      	ldr	r2, [pc, #692]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e6ca:	4413      	add	r3, r2
 800e6cc:	49b0      	ldr	r1, [pc, #704]	; (800e990 <UpdateSIGNALSNames+0x700>)
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	cb03      	ldmia	r3!, {r0, r1}
 800e6d4:	6010      	str	r0, [r2, #0]
 800e6d6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800e6d8:	79fb      	ldrb	r3, [r7, #7]
 800e6da:	1c5a      	adds	r2, r3, #1
 800e6dc:	71fa      	strb	r2, [r7, #7]
 800e6de:	461a      	mov	r2, r3
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4413      	add	r3, r2
 800e6e6:	00db      	lsls	r3, r3, #3
 800e6e8:	4aa5      	ldr	r2, [pc, #660]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e6ea:	4413      	add	r3, r2
 800e6ec:	49a9      	ldr	r1, [pc, #676]	; (800e994 <UpdateSIGNALSNames+0x704>)
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	cb03      	ldmia	r3!, {r0, r1}
 800e6f4:	6010      	str	r0, [r2, #0]
 800e6f6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	1c5a      	adds	r2, r3, #1
 800e6fc:	71fa      	strb	r2, [r7, #7]
 800e6fe:	461a      	mov	r2, r3
 800e700:	4613      	mov	r3, r2
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4413      	add	r3, r2
 800e706:	00db      	lsls	r3, r3, #3
 800e708:	4a9d      	ldr	r2, [pc, #628]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e70a:	4413      	add	r3, r2
 800e70c:	49a2      	ldr	r1, [pc, #648]	; (800e998 <UpdateSIGNALSNames+0x708>)
 800e70e:	461a      	mov	r2, r3
 800e710:	460b      	mov	r3, r1
 800e712:	cb03      	ldmia	r3!, {r0, r1}
 800e714:	6010      	str	r0, [r2, #0]
 800e716:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800e718:	79fb      	ldrb	r3, [r7, #7]
 800e71a:	1c5a      	adds	r2, r3, #1
 800e71c:	71fa      	strb	r2, [r7, #7]
 800e71e:	461a      	mov	r2, r3
 800e720:	4613      	mov	r3, r2
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	4413      	add	r3, r2
 800e726:	00db      	lsls	r3, r3, #3
 800e728:	4a95      	ldr	r2, [pc, #596]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e72a:	4413      	add	r3, r2
 800e72c:	499b      	ldr	r1, [pc, #620]	; (800e99c <UpdateSIGNALSNames+0x70c>)
 800e72e:	461a      	mov	r2, r3
 800e730:	460b      	mov	r3, r1
 800e732:	cb03      	ldmia	r3!, {r0, r1}
 800e734:	6010      	str	r0, [r2, #0]
 800e736:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800e738:	79fb      	ldrb	r3, [r7, #7]
 800e73a:	1c5a      	adds	r2, r3, #1
 800e73c:	71fa      	strb	r2, [r7, #7]
 800e73e:	461a      	mov	r2, r3
 800e740:	4613      	mov	r3, r2
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	4413      	add	r3, r2
 800e746:	00db      	lsls	r3, r3, #3
 800e748:	4a8d      	ldr	r2, [pc, #564]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e74a:	4413      	add	r3, r2
 800e74c:	4994      	ldr	r1, [pc, #592]	; (800e9a0 <UpdateSIGNALSNames+0x710>)
 800e74e:	461a      	mov	r2, r3
 800e750:	460b      	mov	r3, r1
 800e752:	cb03      	ldmia	r3!, {r0, r1}
 800e754:	6010      	str	r0, [r2, #0]
 800e756:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800e758:	79fb      	ldrb	r3, [r7, #7]
 800e75a:	1c5a      	adds	r2, r3, #1
 800e75c:	71fa      	strb	r2, [r7, #7]
 800e75e:	461a      	mov	r2, r3
 800e760:	4613      	mov	r3, r2
 800e762:	009b      	lsls	r3, r3, #2
 800e764:	4413      	add	r3, r2
 800e766:	00db      	lsls	r3, r3, #3
 800e768:	4a85      	ldr	r2, [pc, #532]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e76a:	4413      	add	r3, r2
 800e76c:	498d      	ldr	r1, [pc, #564]	; (800e9a4 <UpdateSIGNALSNames+0x714>)
 800e76e:	461a      	mov	r2, r3
 800e770:	460b      	mov	r3, r1
 800e772:	cb03      	ldmia	r3!, {r0, r1}
 800e774:	6010      	str	r0, [r2, #0]
 800e776:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800e778:	79fb      	ldrb	r3, [r7, #7]
 800e77a:	1c5a      	adds	r2, r3, #1
 800e77c:	71fa      	strb	r2, [r7, #7]
 800e77e:	461a      	mov	r2, r3
 800e780:	4613      	mov	r3, r2
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	4413      	add	r3, r2
 800e786:	00db      	lsls	r3, r3, #3
 800e788:	4a7d      	ldr	r2, [pc, #500]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e78a:	4413      	add	r3, r2
 800e78c:	4986      	ldr	r1, [pc, #536]	; (800e9a8 <UpdateSIGNALSNames+0x718>)
 800e78e:	461a      	mov	r2, r3
 800e790:	460b      	mov	r3, r1
 800e792:	cb03      	ldmia	r3!, {r0, r1}
 800e794:	6010      	str	r0, [r2, #0]
 800e796:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800e798:	79fb      	ldrb	r3, [r7, #7]
 800e79a:	1c5a      	adds	r2, r3, #1
 800e79c:	71fa      	strb	r2, [r7, #7]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	4413      	add	r3, r2
 800e7a6:	00db      	lsls	r3, r3, #3
 800e7a8:	4a75      	ldr	r2, [pc, #468]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e7aa:	4413      	add	r3, r2
 800e7ac:	497f      	ldr	r1, [pc, #508]	; (800e9ac <UpdateSIGNALSNames+0x71c>)
 800e7ae:	461a      	mov	r2, r3
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	cb03      	ldmia	r3!, {r0, r1}
 800e7b4:	6010      	str	r0, [r2, #0]
 800e7b6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800e7b8:	79fb      	ldrb	r3, [r7, #7]
 800e7ba:	1c5a      	adds	r2, r3, #1
 800e7bc:	71fa      	strb	r2, [r7, #7]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	4613      	mov	r3, r2
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	4413      	add	r3, r2
 800e7c6:	00db      	lsls	r3, r3, #3
 800e7c8:	4a6d      	ldr	r2, [pc, #436]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e7ca:	4413      	add	r3, r2
 800e7cc:	4978      	ldr	r1, [pc, #480]	; (800e9b0 <UpdateSIGNALSNames+0x720>)
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	cb03      	ldmia	r3!, {r0, r1}
 800e7d4:	6010      	str	r0, [r2, #0]
 800e7d6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800e7d8:	79fb      	ldrb	r3, [r7, #7]
 800e7da:	1c5a      	adds	r2, r3, #1
 800e7dc:	71fa      	strb	r2, [r7, #7]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	4613      	mov	r3, r2
 800e7e2:	009b      	lsls	r3, r3, #2
 800e7e4:	4413      	add	r3, r2
 800e7e6:	00db      	lsls	r3, r3, #3
 800e7e8:	4a65      	ldr	r2, [pc, #404]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e7ea:	4413      	add	r3, r2
 800e7ec:	4971      	ldr	r1, [pc, #452]	; (800e9b4 <UpdateSIGNALSNames+0x724>)
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	cb03      	ldmia	r3!, {r0, r1}
 800e7f4:	6010      	str	r0, [r2, #0]
 800e7f6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800e7f8:	79fb      	ldrb	r3, [r7, #7]
 800e7fa:	1c5a      	adds	r2, r3, #1
 800e7fc:	71fa      	strb	r2, [r7, #7]
 800e7fe:	461a      	mov	r2, r3
 800e800:	4613      	mov	r3, r2
 800e802:	009b      	lsls	r3, r3, #2
 800e804:	4413      	add	r3, r2
 800e806:	00db      	lsls	r3, r3, #3
 800e808:	4a5d      	ldr	r2, [pc, #372]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e80a:	4413      	add	r3, r2
 800e80c:	496a      	ldr	r1, [pc, #424]	; (800e9b8 <UpdateSIGNALSNames+0x728>)
 800e80e:	461a      	mov	r2, r3
 800e810:	460b      	mov	r3, r1
 800e812:	cb03      	ldmia	r3!, {r0, r1}
 800e814:	6010      	str	r0, [r2, #0]
 800e816:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800e818:	79fb      	ldrb	r3, [r7, #7]
 800e81a:	1c5a      	adds	r2, r3, #1
 800e81c:	71fa      	strb	r2, [r7, #7]
 800e81e:	461a      	mov	r2, r3
 800e820:	4613      	mov	r3, r2
 800e822:	009b      	lsls	r3, r3, #2
 800e824:	4413      	add	r3, r2
 800e826:	00db      	lsls	r3, r3, #3
 800e828:	4a55      	ldr	r2, [pc, #340]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e82a:	4413      	add	r3, r2
 800e82c:	4963      	ldr	r1, [pc, #396]	; (800e9bc <UpdateSIGNALSNames+0x72c>)
 800e82e:	461a      	mov	r2, r3
 800e830:	460b      	mov	r3, r1
 800e832:	cb03      	ldmia	r3!, {r0, r1}
 800e834:	6010      	str	r0, [r2, #0]
 800e836:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800e838:	79fb      	ldrb	r3, [r7, #7]
 800e83a:	1c5a      	adds	r2, r3, #1
 800e83c:	71fa      	strb	r2, [r7, #7]
 800e83e:	461a      	mov	r2, r3
 800e840:	4613      	mov	r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	4413      	add	r3, r2
 800e846:	00db      	lsls	r3, r3, #3
 800e848:	4a4d      	ldr	r2, [pc, #308]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e84a:	4413      	add	r3, r2
 800e84c:	495c      	ldr	r1, [pc, #368]	; (800e9c0 <UpdateSIGNALSNames+0x730>)
 800e84e:	461a      	mov	r2, r3
 800e850:	460b      	mov	r3, r1
 800e852:	cb03      	ldmia	r3!, {r0, r1}
 800e854:	6010      	str	r0, [r2, #0]
 800e856:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800e858:	79fb      	ldrb	r3, [r7, #7]
 800e85a:	1c5a      	adds	r2, r3, #1
 800e85c:	71fa      	strb	r2, [r7, #7]
 800e85e:	461a      	mov	r2, r3
 800e860:	4613      	mov	r3, r2
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	4413      	add	r3, r2
 800e866:	00db      	lsls	r3, r3, #3
 800e868:	4a45      	ldr	r2, [pc, #276]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e86a:	4413      	add	r3, r2
 800e86c:	4a55      	ldr	r2, [pc, #340]	; (800e9c4 <UpdateSIGNALSNames+0x734>)
 800e86e:	461c      	mov	r4, r3
 800e870:	4613      	mov	r3, r2
 800e872:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e874:	6020      	str	r0, [r4, #0]
 800e876:	6061      	str	r1, [r4, #4]
 800e878:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800e87a:	79fb      	ldrb	r3, [r7, #7]
 800e87c:	1c5a      	adds	r2, r3, #1
 800e87e:	71fa      	strb	r2, [r7, #7]
 800e880:	461a      	mov	r2, r3
 800e882:	4613      	mov	r3, r2
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	4413      	add	r3, r2
 800e888:	00db      	lsls	r3, r3, #3
 800e88a:	4a3d      	ldr	r2, [pc, #244]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e88c:	4413      	add	r3, r2
 800e88e:	494e      	ldr	r1, [pc, #312]	; (800e9c8 <UpdateSIGNALSNames+0x738>)
 800e890:	461a      	mov	r2, r3
 800e892:	460b      	mov	r3, r1
 800e894:	cb03      	ldmia	r3!, {r0, r1}
 800e896:	6010      	str	r0, [r2, #0]
 800e898:	6051      	str	r1, [r2, #4]
 800e89a:	8819      	ldrh	r1, [r3, #0]
 800e89c:	789b      	ldrb	r3, [r3, #2]
 800e89e:	8111      	strh	r1, [r2, #8]
 800e8a0:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800e8a2:	79fb      	ldrb	r3, [r7, #7]
 800e8a4:	1c5a      	adds	r2, r3, #1
 800e8a6:	71fa      	strb	r2, [r7, #7]
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	4613      	mov	r3, r2
 800e8ac:	009b      	lsls	r3, r3, #2
 800e8ae:	4413      	add	r3, r2
 800e8b0:	00db      	lsls	r3, r3, #3
 800e8b2:	4a33      	ldr	r2, [pc, #204]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e8b4:	4413      	add	r3, r2
 800e8b6:	4a45      	ldr	r2, [pc, #276]	; (800e9cc <UpdateSIGNALSNames+0x73c>)
 800e8b8:	461c      	mov	r4, r3
 800e8ba:	4613      	mov	r3, r2
 800e8bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e8be:	6020      	str	r0, [r4, #0]
 800e8c0:	6061      	str	r1, [r4, #4]
 800e8c2:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800e8c4:	79fb      	ldrb	r3, [r7, #7]
 800e8c6:	1c5a      	adds	r2, r3, #1
 800e8c8:	71fa      	strb	r2, [r7, #7]
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	4613      	mov	r3, r2
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	4413      	add	r3, r2
 800e8d2:	00db      	lsls	r3, r3, #3
 800e8d4:	4a2a      	ldr	r2, [pc, #168]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e8d6:	4413      	add	r3, r2
 800e8d8:	493d      	ldr	r1, [pc, #244]	; (800e9d0 <UpdateSIGNALSNames+0x740>)
 800e8da:	461a      	mov	r2, r3
 800e8dc:	460b      	mov	r3, r1
 800e8de:	cb03      	ldmia	r3!, {r0, r1}
 800e8e0:	6010      	str	r0, [r2, #0]
 800e8e2:	6051      	str	r1, [r2, #4]
 800e8e4:	8819      	ldrh	r1, [r3, #0]
 800e8e6:	789b      	ldrb	r3, [r3, #2]
 800e8e8:	8111      	strh	r1, [r2, #8]
 800e8ea:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 800e8ec:	79fb      	ldrb	r3, [r7, #7]
 800e8ee:	1c5a      	adds	r2, r3, #1
 800e8f0:	71fa      	strb	r2, [r7, #7]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	4613      	mov	r3, r2
 800e8f6:	009b      	lsls	r3, r3, #2
 800e8f8:	4413      	add	r3, r2
 800e8fa:	00db      	lsls	r3, r3, #3
 800e8fc:	4a20      	ldr	r2, [pc, #128]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e8fe:	4413      	add	r3, r2
 800e900:	4934      	ldr	r1, [pc, #208]	; (800e9d4 <UpdateSIGNALSNames+0x744>)
 800e902:	461a      	mov	r2, r3
 800e904:	460b      	mov	r3, r1
 800e906:	cb03      	ldmia	r3!, {r0, r1}
 800e908:	6010      	str	r0, [r2, #0]
 800e90a:	6051      	str	r1, [r2, #4]
 800e90c:	8819      	ldrh	r1, [r3, #0]
 800e90e:	789b      	ldrb	r3, [r3, #2]
 800e910:	8111      	strh	r1, [r2, #8]
 800e912:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 800e914:	79fb      	ldrb	r3, [r7, #7]
 800e916:	1c5a      	adds	r2, r3, #1
 800e918:	71fa      	strb	r2, [r7, #7]
 800e91a:	461a      	mov	r2, r3
 800e91c:	4613      	mov	r3, r2
 800e91e:	009b      	lsls	r3, r3, #2
 800e920:	4413      	add	r3, r2
 800e922:	00db      	lsls	r3, r3, #3
 800e924:	4a16      	ldr	r2, [pc, #88]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e926:	4413      	add	r3, r2
 800e928:	4a2b      	ldr	r2, [pc, #172]	; (800e9d8 <UpdateSIGNALSNames+0x748>)
 800e92a:	461c      	mov	r4, r3
 800e92c:	4613      	mov	r3, r2
 800e92e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e930:	6020      	str	r0, [r4, #0]
 800e932:	6061      	str	r1, [r4, #4]
 800e934:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 800e936:	79fb      	ldrb	r3, [r7, #7]
 800e938:	1c5a      	adds	r2, r3, #1
 800e93a:	71fa      	strb	r2, [r7, #7]
 800e93c:	461a      	mov	r2, r3
 800e93e:	4613      	mov	r3, r2
 800e940:	009b      	lsls	r3, r3, #2
 800e942:	4413      	add	r3, r2
 800e944:	00db      	lsls	r3, r3, #3
 800e946:	4a0e      	ldr	r2, [pc, #56]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e948:	4413      	add	r3, r2
 800e94a:	4924      	ldr	r1, [pc, #144]	; (800e9dc <UpdateSIGNALSNames+0x74c>)
 800e94c:	461a      	mov	r2, r3
 800e94e:	460b      	mov	r3, r1
 800e950:	cb03      	ldmia	r3!, {r0, r1}
 800e952:	6010      	str	r0, [r2, #0]
 800e954:	6051      	str	r1, [r2, #4]
 800e956:	8819      	ldrh	r1, [r3, #0]
 800e958:	789b      	ldrb	r3, [r3, #2]
 800e95a:	8111      	strh	r1, [r2, #8]
 800e95c:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 800e95e:	79fb      	ldrb	r3, [r7, #7]
 800e960:	1c5a      	adds	r2, r3, #1
 800e962:	71fa      	strb	r2, [r7, #7]
 800e964:	461a      	mov	r2, r3
 800e966:	4613      	mov	r3, r2
 800e968:	009b      	lsls	r3, r3, #2
 800e96a:	4413      	add	r3, r2
 800e96c:	00db      	lsls	r3, r3, #3
 800e96e:	4a04      	ldr	r2, [pc, #16]	; (800e980 <UpdateSIGNALSNames+0x6f0>)
 800e970:	4413      	add	r3, r2
 800e972:	4a1b      	ldr	r2, [pc, #108]	; (800e9e0 <UpdateSIGNALSNames+0x750>)
 800e974:	6810      	ldr	r0, [r2, #0]
 800e976:	6018      	str	r0, [r3, #0]
 800e978:	e034      	b.n	800e9e4 <UpdateSIGNALSNames+0x754>
 800e97a:	bf00      	nop
 800e97c:	08026b5c 	.word	0x08026b5c
 800e980:	20003d64 	.word	0x20003d64
 800e984:	08026b64 	.word	0x08026b64
 800e988:	08026b6c 	.word	0x08026b6c
 800e98c:	08026b74 	.word	0x08026b74
 800e990:	08026b7c 	.word	0x08026b7c
 800e994:	08026b84 	.word	0x08026b84
 800e998:	08026b8c 	.word	0x08026b8c
 800e99c:	08026b94 	.word	0x08026b94
 800e9a0:	08026b9c 	.word	0x08026b9c
 800e9a4:	08026ba4 	.word	0x08026ba4
 800e9a8:	08026bac 	.word	0x08026bac
 800e9ac:	08026bb4 	.word	0x08026bb4
 800e9b0:	08026bbc 	.word	0x08026bbc
 800e9b4:	08026bc4 	.word	0x08026bc4
 800e9b8:	08026bcc 	.word	0x08026bcc
 800e9bc:	08026bd4 	.word	0x08026bd4
 800e9c0:	08026bdc 	.word	0x08026bdc
 800e9c4:	08026be4 	.word	0x08026be4
 800e9c8:	08026bf0 	.word	0x08026bf0
 800e9cc:	08026bfc 	.word	0x08026bfc
 800e9d0:	08026c08 	.word	0x08026c08
 800e9d4:	08026c14 	.word	0x08026c14
 800e9d8:	08026c20 	.word	0x08026c20
 800e9dc:	08026c2c 	.word	0x08026c2c
 800e9e0:	08026c38 	.word	0x08026c38
 800e9e4:	8891      	ldrh	r1, [r2, #4]
 800e9e6:	7992      	ldrb	r2, [r2, #6]
 800e9e8:	8099      	strh	r1, [r3, #4]
 800e9ea:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 800e9ec:	79fb      	ldrb	r3, [r7, #7]
 800e9ee:	1c5a      	adds	r2, r3, #1
 800e9f0:	71fa      	strb	r2, [r7, #7]
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	4413      	add	r3, r2
 800e9fa:	00db      	lsls	r3, r3, #3
 800e9fc:	4a82      	ldr	r2, [pc, #520]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800e9fe:	4413      	add	r3, r2
 800ea00:	4a82      	ldr	r2, [pc, #520]	; (800ec0c <UpdateSIGNALSNames+0x97c>)
 800ea02:	6810      	ldr	r0, [r2, #0]
 800ea04:	6018      	str	r0, [r3, #0]
 800ea06:	8891      	ldrh	r1, [r2, #4]
 800ea08:	7992      	ldrb	r2, [r2, #6]
 800ea0a:	8099      	strh	r1, [r3, #4]
 800ea0c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 800ea0e:	79fb      	ldrb	r3, [r7, #7]
 800ea10:	1c5a      	adds	r2, r3, #1
 800ea12:	71fa      	strb	r2, [r7, #7]
 800ea14:	461a      	mov	r2, r3
 800ea16:	4613      	mov	r3, r2
 800ea18:	009b      	lsls	r3, r3, #2
 800ea1a:	4413      	add	r3, r2
 800ea1c:	00db      	lsls	r3, r3, #3
 800ea1e:	4a7a      	ldr	r2, [pc, #488]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800ea20:	4413      	add	r3, r2
 800ea22:	4a7b      	ldr	r2, [pc, #492]	; (800ec10 <UpdateSIGNALSNames+0x980>)
 800ea24:	6810      	ldr	r0, [r2, #0]
 800ea26:	6018      	str	r0, [r3, #0]
 800ea28:	8891      	ldrh	r1, [r2, #4]
 800ea2a:	7992      	ldrb	r2, [r2, #6]
 800ea2c:	8099      	strh	r1, [r3, #4]
 800ea2e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 800ea30:	79fb      	ldrb	r3, [r7, #7]
 800ea32:	1c5a      	adds	r2, r3, #1
 800ea34:	71fa      	strb	r2, [r7, #7]
 800ea36:	461a      	mov	r2, r3
 800ea38:	4613      	mov	r3, r2
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	4413      	add	r3, r2
 800ea3e:	00db      	lsls	r3, r3, #3
 800ea40:	4a71      	ldr	r2, [pc, #452]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800ea42:	4413      	add	r3, r2
 800ea44:	4a73      	ldr	r2, [pc, #460]	; (800ec14 <UpdateSIGNALSNames+0x984>)
 800ea46:	6810      	ldr	r0, [r2, #0]
 800ea48:	6018      	str	r0, [r3, #0]
 800ea4a:	8891      	ldrh	r1, [r2, #4]
 800ea4c:	7992      	ldrb	r2, [r2, #6]
 800ea4e:	8099      	strh	r1, [r3, #4]
 800ea50:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 800ea52:	79fb      	ldrb	r3, [r7, #7]
 800ea54:	1c5a      	adds	r2, r3, #1
 800ea56:	71fa      	strb	r2, [r7, #7]
 800ea58:	461a      	mov	r2, r3
 800ea5a:	4613      	mov	r3, r2
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	4413      	add	r3, r2
 800ea60:	00db      	lsls	r3, r3, #3
 800ea62:	4a69      	ldr	r2, [pc, #420]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800ea64:	4413      	add	r3, r2
 800ea66:	4a6c      	ldr	r2, [pc, #432]	; (800ec18 <UpdateSIGNALSNames+0x988>)
 800ea68:	6810      	ldr	r0, [r2, #0]
 800ea6a:	6018      	str	r0, [r3, #0]
 800ea6c:	8891      	ldrh	r1, [r2, #4]
 800ea6e:	7992      	ldrb	r2, [r2, #6]
 800ea70:	8099      	strh	r1, [r3, #4]
 800ea72:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 800ea74:	79fb      	ldrb	r3, [r7, #7]
 800ea76:	1c5a      	adds	r2, r3, #1
 800ea78:	71fa      	strb	r2, [r7, #7]
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	4613      	mov	r3, r2
 800ea7e:	009b      	lsls	r3, r3, #2
 800ea80:	4413      	add	r3, r2
 800ea82:	00db      	lsls	r3, r3, #3
 800ea84:	4a60      	ldr	r2, [pc, #384]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800ea86:	4413      	add	r3, r2
 800ea88:	4a64      	ldr	r2, [pc, #400]	; (800ec1c <UpdateSIGNALSNames+0x98c>)
 800ea8a:	6810      	ldr	r0, [r2, #0]
 800ea8c:	6018      	str	r0, [r3, #0]
 800ea8e:	8891      	ldrh	r1, [r2, #4]
 800ea90:	7992      	ldrb	r2, [r2, #6]
 800ea92:	8099      	strh	r1, [r3, #4]
 800ea94:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 800ea96:	79fb      	ldrb	r3, [r7, #7]
 800ea98:	1c5a      	adds	r2, r3, #1
 800ea9a:	71fa      	strb	r2, [r7, #7]
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	4613      	mov	r3, r2
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	4413      	add	r3, r2
 800eaa4:	00db      	lsls	r3, r3, #3
 800eaa6:	4a58      	ldr	r2, [pc, #352]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800eaa8:	4413      	add	r3, r2
 800eaaa:	4a5d      	ldr	r2, [pc, #372]	; (800ec20 <UpdateSIGNALSNames+0x990>)
 800eaac:	6810      	ldr	r0, [r2, #0]
 800eaae:	6018      	str	r0, [r3, #0]
 800eab0:	8891      	ldrh	r1, [r2, #4]
 800eab2:	7992      	ldrb	r2, [r2, #6]
 800eab4:	8099      	strh	r1, [r3, #4]
 800eab6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 800eab8:	79fb      	ldrb	r3, [r7, #7]
 800eaba:	1c5a      	adds	r2, r3, #1
 800eabc:	71fa      	strb	r2, [r7, #7]
 800eabe:	461a      	mov	r2, r3
 800eac0:	4613      	mov	r3, r2
 800eac2:	009b      	lsls	r3, r3, #2
 800eac4:	4413      	add	r3, r2
 800eac6:	00db      	lsls	r3, r3, #3
 800eac8:	4a4f      	ldr	r2, [pc, #316]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800eaca:	4413      	add	r3, r2
 800eacc:	4a55      	ldr	r2, [pc, #340]	; (800ec24 <UpdateSIGNALSNames+0x994>)
 800eace:	6810      	ldr	r0, [r2, #0]
 800ead0:	6018      	str	r0, [r3, #0]
 800ead2:	8891      	ldrh	r1, [r2, #4]
 800ead4:	7992      	ldrb	r2, [r2, #6]
 800ead6:	8099      	strh	r1, [r3, #4]
 800ead8:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 800eada:	79fb      	ldrb	r3, [r7, #7]
 800eadc:	1c5a      	adds	r2, r3, #1
 800eade:	71fa      	strb	r2, [r7, #7]
 800eae0:	461a      	mov	r2, r3
 800eae2:	4613      	mov	r3, r2
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	4413      	add	r3, r2
 800eae8:	00db      	lsls	r3, r3, #3
 800eaea:	4a47      	ldr	r2, [pc, #284]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800eaec:	4413      	add	r3, r2
 800eaee:	4a4e      	ldr	r2, [pc, #312]	; (800ec28 <UpdateSIGNALSNames+0x998>)
 800eaf0:	6810      	ldr	r0, [r2, #0]
 800eaf2:	6018      	str	r0, [r3, #0]
 800eaf4:	8891      	ldrh	r1, [r2, #4]
 800eaf6:	7992      	ldrb	r2, [r2, #6]
 800eaf8:	8099      	strh	r1, [r3, #4]
 800eafa:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 800eafc:	79fb      	ldrb	r3, [r7, #7]
 800eafe:	1c5a      	adds	r2, r3, #1
 800eb00:	71fa      	strb	r2, [r7, #7]
 800eb02:	461a      	mov	r2, r3
 800eb04:	4613      	mov	r3, r2
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	4413      	add	r3, r2
 800eb0a:	00db      	lsls	r3, r3, #3
 800eb0c:	4a3e      	ldr	r2, [pc, #248]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800eb0e:	4413      	add	r3, r2
 800eb10:	4a46      	ldr	r2, [pc, #280]	; (800ec2c <UpdateSIGNALSNames+0x99c>)
 800eb12:	6810      	ldr	r0, [r2, #0]
 800eb14:	6018      	str	r0, [r3, #0]
 800eb16:	8891      	ldrh	r1, [r2, #4]
 800eb18:	7992      	ldrb	r2, [r2, #6]
 800eb1a:	8099      	strh	r1, [r3, #4]
 800eb1c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 800eb1e:	79fb      	ldrb	r3, [r7, #7]
 800eb20:	1c5a      	adds	r2, r3, #1
 800eb22:	71fa      	strb	r2, [r7, #7]
 800eb24:	461a      	mov	r2, r3
 800eb26:	4613      	mov	r3, r2
 800eb28:	009b      	lsls	r3, r3, #2
 800eb2a:	4413      	add	r3, r2
 800eb2c:	00db      	lsls	r3, r3, #3
 800eb2e:	4a36      	ldr	r2, [pc, #216]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800eb30:	4413      	add	r3, r2
 800eb32:	4a3f      	ldr	r2, [pc, #252]	; (800ec30 <UpdateSIGNALSNames+0x9a0>)
 800eb34:	6810      	ldr	r0, [r2, #0]
 800eb36:	6018      	str	r0, [r3, #0]
 800eb38:	8891      	ldrh	r1, [r2, #4]
 800eb3a:	7992      	ldrb	r2, [r2, #6]
 800eb3c:	8099      	strh	r1, [r3, #4]
 800eb3e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 800eb40:	79fb      	ldrb	r3, [r7, #7]
 800eb42:	1c5a      	adds	r2, r3, #1
 800eb44:	71fa      	strb	r2, [r7, #7]
 800eb46:	461a      	mov	r2, r3
 800eb48:	4613      	mov	r3, r2
 800eb4a:	009b      	lsls	r3, r3, #2
 800eb4c:	4413      	add	r3, r2
 800eb4e:	00db      	lsls	r3, r3, #3
 800eb50:	4a2d      	ldr	r2, [pc, #180]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800eb52:	4413      	add	r3, r2
 800eb54:	4a37      	ldr	r2, [pc, #220]	; (800ec34 <UpdateSIGNALSNames+0x9a4>)
 800eb56:	6810      	ldr	r0, [r2, #0]
 800eb58:	6018      	str	r0, [r3, #0]
 800eb5a:	8891      	ldrh	r1, [r2, #4]
 800eb5c:	7992      	ldrb	r2, [r2, #6]
 800eb5e:	8099      	strh	r1, [r3, #4]
 800eb60:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 800eb62:	79fb      	ldrb	r3, [r7, #7]
 800eb64:	1c5a      	adds	r2, r3, #1
 800eb66:	71fa      	strb	r2, [r7, #7]
 800eb68:	461a      	mov	r2, r3
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	009b      	lsls	r3, r3, #2
 800eb6e:	4413      	add	r3, r2
 800eb70:	00db      	lsls	r3, r3, #3
 800eb72:	4a25      	ldr	r2, [pc, #148]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800eb74:	4413      	add	r3, r2
 800eb76:	4930      	ldr	r1, [pc, #192]	; (800ec38 <UpdateSIGNALSNames+0x9a8>)
 800eb78:	461a      	mov	r2, r3
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	cb03      	ldmia	r3!, {r0, r1}
 800eb7e:	6010      	str	r0, [r2, #0]
 800eb80:	6051      	str	r1, [r2, #4]
 800eb82:	881b      	ldrh	r3, [r3, #0]
 800eb84:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 800eb86:	79fb      	ldrb	r3, [r7, #7]
 800eb88:	1c5a      	adds	r2, r3, #1
 800eb8a:	71fa      	strb	r2, [r7, #7]
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	4613      	mov	r3, r2
 800eb90:	009b      	lsls	r3, r3, #2
 800eb92:	4413      	add	r3, r2
 800eb94:	00db      	lsls	r3, r3, #3
 800eb96:	4a1c      	ldr	r2, [pc, #112]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800eb98:	4413      	add	r3, r2
 800eb9a:	4a28      	ldr	r2, [pc, #160]	; (800ec3c <UpdateSIGNALSNames+0x9ac>)
 800eb9c:	6810      	ldr	r0, [r2, #0]
 800eb9e:	6018      	str	r0, [r3, #0]
 800eba0:	8891      	ldrh	r1, [r2, #4]
 800eba2:	7992      	ldrb	r2, [r2, #6]
 800eba4:	8099      	strh	r1, [r3, #4]
 800eba6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 800eba8:	79fb      	ldrb	r3, [r7, #7]
 800ebaa:	1c5a      	adds	r2, r3, #1
 800ebac:	71fa      	strb	r2, [r7, #7]
 800ebae:	461a      	mov	r2, r3
 800ebb0:	4613      	mov	r3, r2
 800ebb2:	009b      	lsls	r3, r3, #2
 800ebb4:	4413      	add	r3, r2
 800ebb6:	00db      	lsls	r3, r3, #3
 800ebb8:	4a13      	ldr	r2, [pc, #76]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800ebba:	4413      	add	r3, r2
 800ebbc:	4a20      	ldr	r2, [pc, #128]	; (800ec40 <UpdateSIGNALSNames+0x9b0>)
 800ebbe:	461c      	mov	r4, r3
 800ebc0:	4613      	mov	r3, r2
 800ebc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ebc4:	6020      	str	r0, [r4, #0]
 800ebc6:	6061      	str	r1, [r4, #4]
 800ebc8:	60a2      	str	r2, [r4, #8]
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 800ebce:	79fb      	ldrb	r3, [r7, #7]
 800ebd0:	1c5a      	adds	r2, r3, #1
 800ebd2:	71fa      	strb	r2, [r7, #7]
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	4413      	add	r3, r2
 800ebdc:	00db      	lsls	r3, r3, #3
 800ebde:	4a0a      	ldr	r2, [pc, #40]	; (800ec08 <UpdateSIGNALSNames+0x978>)
 800ebe0:	4413      	add	r3, r2
 800ebe2:	4a18      	ldr	r2, [pc, #96]	; (800ec44 <UpdateSIGNALSNames+0x9b4>)
 800ebe4:	461c      	mov	r4, r3
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ebea:	6020      	str	r0, [r4, #0]
 800ebec:	6061      	str	r1, [r4, #4]
 800ebee:	60a2      	str	r2, [r4, #8]
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 800ebf4:	79fb      	ldrb	r3, [r7, #7]
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	4b13      	ldr	r3, [pc, #76]	; (800ec48 <UpdateSIGNALSNames+0x9b8>)
 800ebfa:	801a      	strh	r2, [r3, #0]


}
 800ebfc:	bf00      	nop
 800ebfe:	3708      	adds	r7, #8
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bc90      	pop	{r4, r7}
 800ec04:	4770      	bx	lr
 800ec06:	bf00      	nop
 800ec08:	20003d64 	.word	0x20003d64
 800ec0c:	08026c40 	.word	0x08026c40
 800ec10:	08026c48 	.word	0x08026c48
 800ec14:	08026c50 	.word	0x08026c50
 800ec18:	08026c58 	.word	0x08026c58
 800ec1c:	08026c60 	.word	0x08026c60
 800ec20:	08026c68 	.word	0x08026c68
 800ec24:	08026c70 	.word	0x08026c70
 800ec28:	08026c78 	.word	0x08026c78
 800ec2c:	08026c80 	.word	0x08026c80
 800ec30:	08026c88 	.word	0x08026c88
 800ec34:	08026c90 	.word	0x08026c90
 800ec38:	08026c98 	.word	0x08026c98
 800ec3c:	08026ca4 	.word	0x08026ca4
 800ec40:	08026cac 	.word	0x08026cac
 800ec44:	08026cbc 	.word	0x08026cbc
 800ec48:	20004854 	.word	0x20004854

0800ec4c <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 800ec4c:	b5b0      	push	{r4, r5, r7, lr}
 800ec4e:	b086      	sub	sp, #24
 800ec50:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 800ec52:	496f      	ldr	r1, [pc, #444]	; (800ee10 <print_self_DetailsSiemens+0x1c4>)
 800ec54:	486f      	ldr	r0, [pc, #444]	; (800ee14 <print_self_DetailsSiemens+0x1c8>)
 800ec56:	f013 fe8b 	bl	8022970 <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 800ec5a:	4b6f      	ldr	r3, [pc, #444]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ec5c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ec60:	4619      	mov	r1, r3
 800ec62:	486e      	ldr	r0, [pc, #440]	; (800ee1c <print_self_DetailsSiemens+0x1d0>)
 800ec64:	f013 fe84 	bl	8022970 <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800ec68:	4b6b      	ldr	r3, [pc, #428]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ec6a:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800ec6e:	4619      	mov	r1, r3
 800ec70:	4b69      	ldr	r3, [pc, #420]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ec72:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800ec76:	461a      	mov	r2, r3
 800ec78:	4b67      	ldr	r3, [pc, #412]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ec7a:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800ec7e:	4618      	mov	r0, r3
 800ec80:	4b65      	ldr	r3, [pc, #404]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ec82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ec86:	9300      	str	r3, [sp, #0]
 800ec88:	4603      	mov	r3, r0
 800ec8a:	4865      	ldr	r0, [pc, #404]	; (800ee20 <print_self_DetailsSiemens+0x1d4>)
 800ec8c:	f013 fe70 	bl	8022970 <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 800ec90:	4b61      	ldr	r3, [pc, #388]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ec92:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 800ec96:	4618      	mov	r0, r3
 800ec98:	4b5f      	ldr	r3, [pc, #380]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ec9a:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
 800ec9e:	461c      	mov	r4, r3
 800eca0:	4b5d      	ldr	r3, [pc, #372]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800eca2:	f893 32af 	ldrb.w	r3, [r3, #687]	; 0x2af
 800eca6:	461d      	mov	r5, r3
 800eca8:	4b5b      	ldr	r3, [pc, #364]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ecaa:	f893 32b0 	ldrb.w	r3, [r3, #688]	; 0x2b0
 800ecae:	461a      	mov	r2, r3
 800ecb0:	4b59      	ldr	r3, [pc, #356]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ecb2:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	4b57      	ldr	r3, [pc, #348]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ecba:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
 800ecbe:	9302      	str	r3, [sp, #8]
 800ecc0:	9101      	str	r1, [sp, #4]
 800ecc2:	9200      	str	r2, [sp, #0]
 800ecc4:	462b      	mov	r3, r5
 800ecc6:	4622      	mov	r2, r4
 800ecc8:	4601      	mov	r1, r0
 800ecca:	4856      	ldr	r0, [pc, #344]	; (800ee24 <print_self_DetailsSiemens+0x1d8>)
 800eccc:	f013 fe50 	bl	8022970 <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 800ecd0:	4b51      	ldr	r3, [pc, #324]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ecd2:	f8b3 32da 	ldrh.w	r3, [r3, #730]	; 0x2da
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	4853      	ldr	r0, [pc, #332]	; (800ee28 <print_self_DetailsSiemens+0x1dc>)
 800ecda:	f013 fe49 	bl	8022970 <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800ecde:	2300      	movs	r3, #0
 800ece0:	71fb      	strb	r3, [r7, #7]
 800ece2:	e037      	b.n	800ed54 <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 800ece4:	79fb      	ldrb	r3, [r7, #7]
 800ece6:	1c59      	adds	r1, r3, #1
 800ece8:	79fb      	ldrb	r3, [r7, #7]
 800ecea:	4a4b      	ldr	r2, [pc, #300]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ecec:	33ae      	adds	r3, #174	; 0xae
 800ecee:	009b      	lsls	r3, r3, #2
 800ecf0:	4413      	add	r3, r2
 800ecf2:	785b      	ldrb	r3, [r3, #1]
 800ecf4:	461c      	mov	r4, r3
 800ecf6:	79fb      	ldrb	r3, [r7, #7]
 800ecf8:	4a47      	ldr	r2, [pc, #284]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	4413      	add	r3, r2
 800ecfe:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800ed02:	461d      	mov	r5, r3
 800ed04:	79fb      	ldrb	r3, [r7, #7]
 800ed06:	4a44      	ldr	r2, [pc, #272]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	4413      	add	r3, r2
 800ed0c:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800ed10:	4618      	mov	r0, r3
 800ed12:	79fb      	ldrb	r3, [r7, #7]
 800ed14:	4a40      	ldr	r2, [pc, #256]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ed16:	009b      	lsls	r3, r3, #2
 800ed18:	4413      	add	r3, r2
 800ed1a:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800ed1e:	9301      	str	r3, [sp, #4]
 800ed20:	9000      	str	r0, [sp, #0]
 800ed22:	462b      	mov	r3, r5
 800ed24:	4622      	mov	r2, r4
 800ed26:	4841      	ldr	r0, [pc, #260]	; (800ee2c <print_self_DetailsSiemens+0x1e0>)
 800ed28:	f013 fe22 	bl	8022970 <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 800ed2c:	79fb      	ldrb	r3, [r7, #7]
 800ed2e:	4a3a      	ldr	r2, [pc, #232]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ed30:	33b6      	adds	r3, #182	; 0xb6
 800ed32:	009b      	lsls	r3, r3, #2
 800ed34:	4413      	add	r3, r2
 800ed36:	88db      	ldrh	r3, [r3, #6]
 800ed38:	4619      	mov	r1, r3
 800ed3a:	79fb      	ldrb	r3, [r7, #7]
 800ed3c:	4a36      	ldr	r2, [pc, #216]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	4413      	add	r3, r2
 800ed42:	f8b3 32e0 	ldrh.w	r3, [r3, #736]	; 0x2e0
 800ed46:	461a      	mov	r2, r3
 800ed48:	4839      	ldr	r0, [pc, #228]	; (800ee30 <print_self_DetailsSiemens+0x1e4>)
 800ed4a:	f013 fe11 	bl	8022970 <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800ed4e:	79fb      	ldrb	r3, [r7, #7]
 800ed50:	3301      	adds	r3, #1
 800ed52:	71fb      	strb	r3, [r7, #7]
 800ed54:	4b30      	ldr	r3, [pc, #192]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ed56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ed5a:	79fa      	ldrb	r2, [r7, #7]
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d3c1      	bcc.n	800ece4 <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 800ed60:	4b2d      	ldr	r3, [pc, #180]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ed62:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800ed66:	4619      	mov	r1, r3
 800ed68:	4832      	ldr	r0, [pc, #200]	; (800ee34 <print_self_DetailsSiemens+0x1e8>)
 800ed6a:	f013 fe01 	bl	8022970 <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 800ed6e:	4b2a      	ldr	r3, [pc, #168]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ed70:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800ed74:	4619      	mov	r1, r3
 800ed76:	4830      	ldr	r0, [pc, #192]	; (800ee38 <print_self_DetailsSiemens+0x1ec>)
 800ed78:	f013 fdfa 	bl	8022970 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 800ed7c:	4b26      	ldr	r3, [pc, #152]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ed7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ed82:	4619      	mov	r1, r3
 800ed84:	482d      	ldr	r0, [pc, #180]	; (800ee3c <print_self_DetailsSiemens+0x1f0>)
 800ed86:	f013 fdf3 	bl	8022970 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 800ed8a:	4b23      	ldr	r3, [pc, #140]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ed8c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800ed90:	4619      	mov	r1, r3
 800ed92:	482a      	ldr	r0, [pc, #168]	; (800ee3c <print_self_DetailsSiemens+0x1f0>)
 800ed94:	f013 fdec 	bl	8022970 <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 800ed98:	4b1f      	ldr	r3, [pc, #124]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ed9a:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800ed9e:	4619      	mov	r1, r3
 800eda0:	4827      	ldr	r0, [pc, #156]	; (800ee40 <print_self_DetailsSiemens+0x1f4>)
 800eda2:	f013 fde5 	bl	8022970 <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 800eda6:	4b1c      	ldr	r3, [pc, #112]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800eda8:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800edac:	4619      	mov	r1, r3
 800edae:	4825      	ldr	r0, [pc, #148]	; (800ee44 <print_self_DetailsSiemens+0x1f8>)
 800edb0:	f013 fdde 	bl	8022970 <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 800edb4:	4b18      	ldr	r3, [pc, #96]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800edb6:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800edba:	4619      	mov	r1, r3
 800edbc:	4822      	ldr	r0, [pc, #136]	; (800ee48 <print_self_DetailsSiemens+0x1fc>)
 800edbe:	f013 fdd7 	bl	8022970 <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 800edc2:	4b15      	ldr	r3, [pc, #84]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800edc4:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800edc8:	4619      	mov	r1, r3
 800edca:	4820      	ldr	r0, [pc, #128]	; (800ee4c <print_self_DetailsSiemens+0x200>)
 800edcc:	f013 fdd0 	bl	8022970 <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 800edd0:	4b11      	ldr	r3, [pc, #68]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800edd2:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800edd6:	4619      	mov	r1, r3
 800edd8:	481d      	ldr	r0, [pc, #116]	; (800ee50 <print_self_DetailsSiemens+0x204>)
 800edda:	f013 fdc9 	bl	8022970 <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 800edde:	4b0e      	ldr	r3, [pc, #56]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800ede0:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800ede4:	4619      	mov	r1, r3
 800ede6:	481b      	ldr	r0, [pc, #108]	; (800ee54 <print_self_DetailsSiemens+0x208>)
 800ede8:	f013 fdc2 	bl	8022970 <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 800edec:	4b0a      	ldr	r3, [pc, #40]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800edee:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800edf2:	4619      	mov	r1, r3
 800edf4:	4818      	ldr	r0, [pc, #96]	; (800ee58 <print_self_DetailsSiemens+0x20c>)
 800edf6:	f013 fdbb 	bl	8022970 <iprintf>
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 800edfa:	4b07      	ldr	r3, [pc, #28]	; (800ee18 <print_self_DetailsSiemens+0x1cc>)
 800edfc:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ee00:	4619      	mov	r1, r3
 800ee02:	4816      	ldr	r0, [pc, #88]	; (800ee5c <print_self_DetailsSiemens+0x210>)
 800ee04:	f013 fdb4 	bl	8022970 <iprintf>

}
 800ee08:	bf00      	nop
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bdb0      	pop	{r4, r5, r7, pc}
 800ee10:	20000305 	.word	0x20000305
 800ee14:	08026ccc 	.word	0x08026ccc
 800ee18:	20000304 	.word	0x20000304
 800ee1c:	08026ce0 	.word	0x08026ce0
 800ee20:	08026cf0 	.word	0x08026cf0
 800ee24:	08026d08 	.word	0x08026d08
 800ee28:	08026d30 	.word	0x08026d30
 800ee2c:	08026d48 	.word	0x08026d48
 800ee30:	08026d5c 	.word	0x08026d5c
 800ee34:	08026d74 	.word	0x08026d74
 800ee38:	08026d84 	.word	0x08026d84
 800ee3c:	08026d98 	.word	0x08026d98
 800ee40:	08026dac 	.word	0x08026dac
 800ee44:	08026dbc 	.word	0x08026dbc
 800ee48:	08026dcc 	.word	0x08026dcc
 800ee4c:	08026de0 	.word	0x08026de0
 800ee50:	08026df8 	.word	0x08026df8
 800ee54:	08026e10 	.word	0x08026e10
 800ee58:	08026e2c 	.word	0x08026e2c
 800ee5c:	08026e48 	.word	0x08026e48

0800ee60 <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 800ee68:	f006 fd84 	bl	8015974 <HAL_GetTick>
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	1ad3      	subs	r3, r2, r3
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	bfb8      	it	lt
 800ee76:	425b      	neglt	r3, r3
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3708      	adds	r7, #8
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 800ee86:	23f3      	movs	r3, #243	; 0xf3
 800ee88:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 800ee8a:	f011 f87b 	bl	801ff84 <udp_new>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	4a7a      	ldr	r2, [pc, #488]	; (800f07c <udpServer_init+0x1fc>)
 800ee92:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 800ee94:	4b7a      	ldr	r3, [pc, #488]	; (800f080 <udpServer_init+0x200>)
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d002      	beq.n	800eea2 <udpServer_init+0x22>
 800ee9c:	2b02      	cmp	r3, #2
 800ee9e:	d074      	beq.n	800ef8a <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 800eea0:	e0e9      	b.n	800f076 <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 800eea2:	4b77      	ldr	r3, [pc, #476]	; (800f080 <udpServer_init+0x200>)
 800eea4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800eea8:	061a      	lsls	r2, r3, #24
 800eeaa:	4b75      	ldr	r3, [pc, #468]	; (800f080 <udpServer_init+0x200>)
 800eeac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eeb0:	041b      	lsls	r3, r3, #16
 800eeb2:	431a      	orrs	r2, r3
 800eeb4:	4b72      	ldr	r3, [pc, #456]	; (800f080 <udpServer_init+0x200>)
 800eeb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eeba:	021b      	lsls	r3, r3, #8
 800eebc:	4313      	orrs	r3, r2
 800eebe:	4a70      	ldr	r2, [pc, #448]	; (800f080 <udpServer_init+0x200>)
 800eec0:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800eec4:	4313      	orrs	r3, r2
 800eec6:	061a      	lsls	r2, r3, #24
 800eec8:	4b6d      	ldr	r3, [pc, #436]	; (800f080 <udpServer_init+0x200>)
 800eeca:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800eece:	0619      	lsls	r1, r3, #24
 800eed0:	4b6b      	ldr	r3, [pc, #428]	; (800f080 <udpServer_init+0x200>)
 800eed2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eed6:	041b      	lsls	r3, r3, #16
 800eed8:	4319      	orrs	r1, r3
 800eeda:	4b69      	ldr	r3, [pc, #420]	; (800f080 <udpServer_init+0x200>)
 800eedc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eee0:	021b      	lsls	r3, r3, #8
 800eee2:	430b      	orrs	r3, r1
 800eee4:	4966      	ldr	r1, [pc, #408]	; (800f080 <udpServer_init+0x200>)
 800eee6:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800eeea:	430b      	orrs	r3, r1
 800eeec:	021b      	lsls	r3, r3, #8
 800eeee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eef2:	431a      	orrs	r2, r3
 800eef4:	4b62      	ldr	r3, [pc, #392]	; (800f080 <udpServer_init+0x200>)
 800eef6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800eefa:	0619      	lsls	r1, r3, #24
 800eefc:	4b60      	ldr	r3, [pc, #384]	; (800f080 <udpServer_init+0x200>)
 800eefe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ef02:	041b      	lsls	r3, r3, #16
 800ef04:	4319      	orrs	r1, r3
 800ef06:	4b5e      	ldr	r3, [pc, #376]	; (800f080 <udpServer_init+0x200>)
 800ef08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ef0c:	021b      	lsls	r3, r3, #8
 800ef0e:	430b      	orrs	r3, r1
 800ef10:	495b      	ldr	r1, [pc, #364]	; (800f080 <udpServer_init+0x200>)
 800ef12:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800ef16:	430b      	orrs	r3, r1
 800ef18:	0a1b      	lsrs	r3, r3, #8
 800ef1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ef1e:	431a      	orrs	r2, r3
 800ef20:	4b57      	ldr	r3, [pc, #348]	; (800f080 <udpServer_init+0x200>)
 800ef22:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800ef26:	0619      	lsls	r1, r3, #24
 800ef28:	4b55      	ldr	r3, [pc, #340]	; (800f080 <udpServer_init+0x200>)
 800ef2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ef2e:	041b      	lsls	r3, r3, #16
 800ef30:	4319      	orrs	r1, r3
 800ef32:	4b53      	ldr	r3, [pc, #332]	; (800f080 <udpServer_init+0x200>)
 800ef34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ef38:	021b      	lsls	r3, r3, #8
 800ef3a:	430b      	orrs	r3, r1
 800ef3c:	4950      	ldr	r1, [pc, #320]	; (800f080 <udpServer_init+0x200>)
 800ef3e:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800ef42:	430b      	orrs	r3, r1
 800ef44:	0e1b      	lsrs	r3, r3, #24
 800ef46:	4313      	orrs	r3, r2
 800ef48:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800ef4a:	4b4c      	ldr	r3, [pc, #304]	; (800f07c <udpServer_init+0x1fc>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4a4c      	ldr	r2, [pc, #304]	; (800f080 <udpServer_init+0x200>)
 800ef50:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 800ef54:	4639      	mov	r1, r7
 800ef56:	4618      	mov	r0, r3
 800ef58:	f010 ff2a 	bl	801fdb0 <udp_bind>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800ef60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d107      	bne.n	800ef78 <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800ef68:	4b44      	ldr	r3, [pc, #272]	; (800f07c <udpServer_init+0x1fc>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	4945      	ldr	r1, [pc, #276]	; (800f084 <udpServer_init+0x204>)
 800ef70:	4618      	mov	r0, r3
 800ef72:	f010 ffa5 	bl	801fec0 <udp_recv>
		break;
 800ef76:	e07c      	b.n	800f072 <udpServer_init+0x1f2>
			printf("N-OK\n");
 800ef78:	4843      	ldr	r0, [pc, #268]	; (800f088 <udpServer_init+0x208>)
 800ef7a:	f013 fd95 	bl	8022aa8 <puts>
			udp_remove(upcb);
 800ef7e:	4b3f      	ldr	r3, [pc, #252]	; (800f07c <udpServer_init+0x1fc>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	4618      	mov	r0, r3
 800ef84:	f010 ffbc 	bl	801ff00 <udp_remove>
		break;
 800ef88:	e073      	b.n	800f072 <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800ef8a:	4b3d      	ldr	r3, [pc, #244]	; (800f080 <udpServer_init+0x200>)
 800ef8c:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800ef90:	061a      	lsls	r2, r3, #24
 800ef92:	4b3b      	ldr	r3, [pc, #236]	; (800f080 <udpServer_init+0x200>)
 800ef94:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800ef98:	041b      	lsls	r3, r3, #16
 800ef9a:	431a      	orrs	r2, r3
 800ef9c:	4b38      	ldr	r3, [pc, #224]	; (800f080 <udpServer_init+0x200>)
 800ef9e:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800efa2:	021b      	lsls	r3, r3, #8
 800efa4:	4313      	orrs	r3, r2
 800efa6:	4a36      	ldr	r2, [pc, #216]	; (800f080 <udpServer_init+0x200>)
 800efa8:	f892 22a8 	ldrb.w	r2, [r2, #680]	; 0x2a8
 800efac:	4313      	orrs	r3, r2
 800efae:	061a      	lsls	r2, r3, #24
 800efb0:	4b33      	ldr	r3, [pc, #204]	; (800f080 <udpServer_init+0x200>)
 800efb2:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800efb6:	0619      	lsls	r1, r3, #24
 800efb8:	4b31      	ldr	r3, [pc, #196]	; (800f080 <udpServer_init+0x200>)
 800efba:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800efbe:	041b      	lsls	r3, r3, #16
 800efc0:	4319      	orrs	r1, r3
 800efc2:	4b2f      	ldr	r3, [pc, #188]	; (800f080 <udpServer_init+0x200>)
 800efc4:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800efc8:	021b      	lsls	r3, r3, #8
 800efca:	430b      	orrs	r3, r1
 800efcc:	492c      	ldr	r1, [pc, #176]	; (800f080 <udpServer_init+0x200>)
 800efce:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800efd2:	430b      	orrs	r3, r1
 800efd4:	021b      	lsls	r3, r3, #8
 800efd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800efda:	431a      	orrs	r2, r3
 800efdc:	4b28      	ldr	r3, [pc, #160]	; (800f080 <udpServer_init+0x200>)
 800efde:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800efe2:	0619      	lsls	r1, r3, #24
 800efe4:	4b26      	ldr	r3, [pc, #152]	; (800f080 <udpServer_init+0x200>)
 800efe6:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800efea:	041b      	lsls	r3, r3, #16
 800efec:	4319      	orrs	r1, r3
 800efee:	4b24      	ldr	r3, [pc, #144]	; (800f080 <udpServer_init+0x200>)
 800eff0:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800eff4:	021b      	lsls	r3, r3, #8
 800eff6:	430b      	orrs	r3, r1
 800eff8:	4921      	ldr	r1, [pc, #132]	; (800f080 <udpServer_init+0x200>)
 800effa:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800effe:	430b      	orrs	r3, r1
 800f000:	0a1b      	lsrs	r3, r3, #8
 800f002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f006:	431a      	orrs	r2, r3
 800f008:	4b1d      	ldr	r3, [pc, #116]	; (800f080 <udpServer_init+0x200>)
 800f00a:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800f00e:	0619      	lsls	r1, r3, #24
 800f010:	4b1b      	ldr	r3, [pc, #108]	; (800f080 <udpServer_init+0x200>)
 800f012:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800f016:	041b      	lsls	r3, r3, #16
 800f018:	4319      	orrs	r1, r3
 800f01a:	4b19      	ldr	r3, [pc, #100]	; (800f080 <udpServer_init+0x200>)
 800f01c:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800f020:	021b      	lsls	r3, r3, #8
 800f022:	430b      	orrs	r3, r1
 800f024:	4916      	ldr	r1, [pc, #88]	; (800f080 <udpServer_init+0x200>)
 800f026:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800f02a:	430b      	orrs	r3, r1
 800f02c:	0e1b      	lsrs	r3, r3, #24
 800f02e:	4313      	orrs	r3, r2
 800f030:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800f032:	4b12      	ldr	r3, [pc, #72]	; (800f07c <udpServer_init+0x1fc>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4a12      	ldr	r2, [pc, #72]	; (800f080 <udpServer_init+0x200>)
 800f038:	f8b2 22da 	ldrh.w	r2, [r2, #730]	; 0x2da
 800f03c:	4639      	mov	r1, r7
 800f03e:	4618      	mov	r0, r3
 800f040:	f010 feb6 	bl	801fdb0 <udp_bind>
 800f044:	4603      	mov	r3, r0
 800f046:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800f048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d107      	bne.n	800f060 <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800f050:	4b0a      	ldr	r3, [pc, #40]	; (800f07c <udpServer_init+0x1fc>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2200      	movs	r2, #0
 800f056:	490b      	ldr	r1, [pc, #44]	; (800f084 <udpServer_init+0x204>)
 800f058:	4618      	mov	r0, r3
 800f05a:	f010 ff31 	bl	801fec0 <udp_recv>
		break;
 800f05e:	e007      	b.n	800f070 <udpServer_init+0x1f0>
			printf("N-OK\n");
 800f060:	4809      	ldr	r0, [pc, #36]	; (800f088 <udpServer_init+0x208>)
 800f062:	f013 fd21 	bl	8022aa8 <puts>
			udp_remove(upcb);
 800f066:	4b05      	ldr	r3, [pc, #20]	; (800f07c <udpServer_init+0x1fc>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	4618      	mov	r0, r3
 800f06c:	f010 ff48 	bl	801ff00 <udp_remove>
		break;
 800f070:	bf00      	nop
	}

	udpClient_connect();
 800f072:	f000 f90d 	bl	800f290 <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	200052d4 	.word	0x200052d4
 800f080:	20000304 	.word	0x20000304
 800f084:	0800f08d 	.word	0x0800f08d
 800f088:	08026e68 	.word	0x08026e68

0800f08c <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b086      	sub	sp, #24
 800f090:	af00      	add	r7, sp, #0
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	60b9      	str	r1, [r7, #8]
 800f096:	607a      	str	r2, [r7, #4]
 800f098:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 800f09a:	2300      	movs	r3, #0
 800f09c:	75fb      	strb	r3, [r7, #23]
	uint16_t Length = 0;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	82bb      	strh	r3, [r7, #20]
	uint8_t IpMatched = 0;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	75bb      	strb	r3, [r7, #22]
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 800f0a6:	4a70      	ldr	r2, [pc, #448]	; (800f268 <UDP_Receive_Callback+0x1dc>)
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	6013      	str	r3, [r2, #0]
	Length = p->len;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	895b      	ldrh	r3, [r3, #10]
 800f0b2:	82bb      	strh	r3, [r7, #20]
	switch(EI_data.ProtocolType)
 800f0b4:	4b6d      	ldr	r3, [pc, #436]	; (800f26c <UDP_Receive_Callback+0x1e0>)
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d02e      	beq.n	800f11a <UDP_Receive_Callback+0x8e>
 800f0bc:	2b02      	cmp	r3, #2
 800f0be:	d045      	beq.n	800f14c <UDP_Receive_Callback+0xc0>
 800f0c0:	e069      	b.n	800f196 <UDP_Receive_Callback+0x10a>
	{

	case HITACHI:
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800f0c2:	4b69      	ldr	r3, [pc, #420]	; (800f268 <UDP_Receive_Callback+0x1dc>)
 800f0c4:	681a      	ldr	r2, [r3, #0]
 800f0c6:	7dfb      	ldrb	r3, [r7, #23]
 800f0c8:	4969      	ldr	r1, [pc, #420]	; (800f270 <UDP_Receive_Callback+0x1e4>)
 800f0ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d120      	bne.n	800f114 <UDP_Receive_Callback+0x88>
			{
				if(IpMatched == 0)
 800f0d2:	7dbb      	ldrb	r3, [r7, #22]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d109      	bne.n	800f0ec <UDP_Receive_Callback+0x60>
				{
					printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 800f0d8:	6838      	ldr	r0, [r7, #0]
 800f0da:	f012 fb51 	bl	8021780 <ip4addr_ntoa>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	4864      	ldr	r0, [pc, #400]	; (800f274 <UDP_Receive_Callback+0x1e8>)
 800f0e4:	f013 fc44 	bl	8022970 <iprintf>
					IpMatched = 1;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	75bb      	strb	r3, [r7, #22]
				}
				Recv_IP_List[Traverser/2] = *addr;
 800f0ec:	7dfb      	ldrb	r3, [r7, #23]
 800f0ee:	085b      	lsrs	r3, r3, #1
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	4a60      	ldr	r2, [pc, #384]	; (800f278 <UDP_Receive_Callback+0x1ec>)
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 800f0fe:	7dfb      	ldrb	r3, [r7, #23]
 800f100:	f003 0301 	and.w	r3, r3, #1
 800f104:	b2db      	uxtb	r3, r3
 800f106:	7dfa      	ldrb	r2, [r7, #23]
 800f108:	0852      	lsrs	r2, r2, #1
 800f10a:	b2d2      	uxtb	r2, r2
 800f10c:	3301      	adds	r3, #1
 800f10e:	b2d9      	uxtb	r1, r3
 800f110:	4b5a      	ldr	r3, [pc, #360]	; (800f27c <UDP_Receive_Callback+0x1f0>)
 800f112:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800f114:	7dfb      	ldrb	r3, [r7, #23]
 800f116:	3301      	adds	r3, #1
 800f118:	75fb      	strb	r3, [r7, #23]
 800f11a:	4b54      	ldr	r3, [pc, #336]	; (800f26c <UDP_Receive_Callback+0x1e0>)
 800f11c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f120:	7dfa      	ldrb	r2, [r7, #23]
 800f122:	429a      	cmp	r2, r3
 800f124:	d3cd      	bcc.n	800f0c2 <UDP_Receive_Callback+0x36>
				//break;
			}
		}
		if(Traverser>EI_data.Hitachi_st.No_of_IP_s)
 800f126:	4b51      	ldr	r3, [pc, #324]	; (800f26c <UDP_Receive_Callback+0x1e0>)
 800f128:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f12c:	7dfa      	ldrb	r2, [r7, #23]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d935      	bls.n	800f19e <UDP_Receive_Callback+0x112>
		{
			pbuf_free(p);
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f00f fee4 	bl	801ef00 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 800f138:	6838      	ldr	r0, [r7, #0]
 800f13a:	f012 fb21 	bl	8021780 <ip4addr_ntoa>
 800f13e:	4601      	mov	r1, r0
 800f140:	7dfb      	ldrb	r3, [r7, #23]
 800f142:	461a      	mov	r2, r3
 800f144:	484e      	ldr	r0, [pc, #312]	; (800f280 <UDP_Receive_Callback+0x1f4>)
 800f146:	f013 fc13 	bl	8022970 <iprintf>
			return;
 800f14a:	e08a      	b.n	800f262 <UDP_Receive_Callback+0x1d6>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f14c:	2300      	movs	r3, #0
 800f14e:	75fb      	strb	r3, [r7, #23]
 800f150:	e00a      	b.n	800f168 <UDP_Receive_Callback+0xdc>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800f152:	4b45      	ldr	r3, [pc, #276]	; (800f268 <UDP_Receive_Callback+0x1dc>)
 800f154:	681a      	ldr	r2, [r3, #0]
 800f156:	7dfb      	ldrb	r3, [r7, #23]
 800f158:	4945      	ldr	r1, [pc, #276]	; (800f270 <UDP_Receive_Callback+0x1e4>)
 800f15a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f15e:	429a      	cmp	r2, r3
 800f160:	d009      	beq.n	800f176 <UDP_Receive_Callback+0xea>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f162:	7dfb      	ldrb	r3, [r7, #23]
 800f164:	3301      	adds	r3, #1
 800f166:	75fb      	strb	r3, [r7, #23]
 800f168:	4b40      	ldr	r3, [pc, #256]	; (800f26c <UDP_Receive_Callback+0x1e0>)
 800f16a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f16e:	7dfa      	ldrb	r2, [r7, #23]
 800f170:	429a      	cmp	r2, r3
 800f172:	d3ee      	bcc.n	800f152 <UDP_Receive_Callback+0xc6>
 800f174:	e000      	b.n	800f178 <UDP_Receive_Callback+0xec>
			{
				break;
 800f176:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 800f178:	4b3c      	ldr	r3, [pc, #240]	; (800f26c <UDP_Receive_Callback+0x1e0>)
 800f17a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f17e:	7dfa      	ldrb	r2, [r7, #23]
 800f180:	429a      	cmp	r2, r3
 800f182:	d90e      	bls.n	800f1a2 <UDP_Receive_Callback+0x116>
		{
			pbuf_free(p);
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f00f febb 	bl	801ef00 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 800f18a:	7dfb      	ldrb	r3, [r7, #23]
 800f18c:	4619      	mov	r1, r3
 800f18e:	483d      	ldr	r0, [pc, #244]	; (800f284 <UDP_Receive_Callback+0x1f8>)
 800f190:	f013 fbee 	bl	8022970 <iprintf>
			return;
 800f194:	e065      	b.n	800f262 <UDP_Receive_Callback+0x1d6>
		}
		break;
	default:
		pbuf_free(p);
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f00f feb2 	bl	801ef00 <pbuf_free>
		return;
 800f19c:	e061      	b.n	800f262 <UDP_Receive_Callback+0x1d6>
		break;
 800f19e:	bf00      	nop
 800f1a0:	e000      	b.n	800f1a4 <UDP_Receive_Callback+0x118>
		break;
 800f1a2:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 800f1a4:	4b31      	ldr	r3, [pc, #196]	; (800f26c <UDP_Receive_Callback+0x1e0>)
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d002      	beq.n	800f1b2 <UDP_Receive_Callback+0x126>
 800f1ac:	2b02      	cmp	r3, #2
 800f1ae:	d049      	beq.n	800f244 <UDP_Receive_Callback+0x1b8>
		Ethernet_Circle_buff_st.Write_end = Length;
		break;

	default:
		/* Do Nothing */
		break;
 800f1b0:	e054      	b.n	800f25c <UDP_Receive_Callback+0x1d0>
		Interrupt_clock = HAL_GetTick();
 800f1b2:	f006 fbdf 	bl	8015974 <HAL_GetTick>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	4a33      	ldr	r2, [pc, #204]	; (800f288 <UDP_Receive_Callback+0x1fc>)
 800f1ba:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 800f1bc:	4b33      	ldr	r3, [pc, #204]	; (800f28c <UDP_Receive_Callback+0x200>)
 800f1be:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	8abb      	ldrh	r3, [r7, #20]
 800f1c6:	4413      	add	r3, r2
 800f1c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f1cc:	dd24      	ble.n	800f218 <UDP_Receive_Callback+0x18c>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 800f1ce:	4b2f      	ldr	r3, [pc, #188]	; (800f28c <UDP_Receive_Callback+0x200>)
 800f1d0:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f1d4:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 800f1d8:	827b      	strh	r3, [r7, #18]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 800f1da:	4b2c      	ldr	r3, [pc, #176]	; (800f28c <UDP_Receive_Callback+0x200>)
 800f1dc:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	4b2a      	ldr	r3, [pc, #168]	; (800f28c <UDP_Receive_Callback+0x200>)
 800f1e4:	18d0      	adds	r0, r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	685b      	ldr	r3, [r3, #4]
 800f1ea:	8a7a      	ldrh	r2, [r7, #18]
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	f013 faaf 	bl	8022750 <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	685a      	ldr	r2, [r3, #4]
 800f1f6:	8a7b      	ldrh	r3, [r7, #18]
 800f1f8:	18d1      	adds	r1, r2, r3
 800f1fa:	8aba      	ldrh	r2, [r7, #20]
 800f1fc:	8a7b      	ldrh	r3, [r7, #18]
 800f1fe:	1ad3      	subs	r3, r2, r3
 800f200:	461a      	mov	r2, r3
 800f202:	4822      	ldr	r0, [pc, #136]	; (800f28c <UDP_Receive_Callback+0x200>)
 800f204:	f013 faa4 	bl	8022750 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 800f208:	8aba      	ldrh	r2, [r7, #20]
 800f20a:	8a7b      	ldrh	r3, [r7, #18]
 800f20c:	1ad3      	subs	r3, r2, r3
 800f20e:	b29a      	uxth	r2, r3
 800f210:	4b1e      	ldr	r3, [pc, #120]	; (800f28c <UDP_Receive_Callback+0x200>)
 800f212:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800f216:	e021      	b.n	800f25c <UDP_Receive_Callback+0x1d0>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 800f218:	4b1c      	ldr	r3, [pc, #112]	; (800f28c <UDP_Receive_Callback+0x200>)
 800f21a:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f21e:	461a      	mov	r2, r3
 800f220:	4b1a      	ldr	r3, [pc, #104]	; (800f28c <UDP_Receive_Callback+0x200>)
 800f222:	18d0      	adds	r0, r2, r3
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	8aba      	ldrh	r2, [r7, #20]
 800f22a:	4619      	mov	r1, r3
 800f22c:	f013 fa90 	bl	8022750 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 800f230:	4b16      	ldr	r3, [pc, #88]	; (800f28c <UDP_Receive_Callback+0x200>)
 800f232:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 800f236:	8abb      	ldrh	r3, [r7, #20]
 800f238:	4413      	add	r3, r2
 800f23a:	b29a      	uxth	r2, r3
 800f23c:	4b13      	ldr	r3, [pc, #76]	; (800f28c <UDP_Receive_Callback+0x200>)
 800f23e:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800f242:	e00b      	b.n	800f25c <UDP_Receive_Callback+0x1d0>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	8aba      	ldrh	r2, [r7, #20]
 800f24a:	4619      	mov	r1, r3
 800f24c:	480f      	ldr	r0, [pc, #60]	; (800f28c <UDP_Receive_Callback+0x200>)
 800f24e:	f013 fa7f 	bl	8022750 <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 800f252:	4a0e      	ldr	r2, [pc, #56]	; (800f28c <UDP_Receive_Callback+0x200>)
 800f254:	8abb      	ldrh	r3, [r7, #20]
 800f256:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		break;
 800f25a:	bf00      	nop
	}


	pbuf_free(p);
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f00f fe4f 	bl	801ef00 <pbuf_free>
}
 800f262:	3718      	adds	r7, #24
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	200052a8 	.word	0x200052a8
 800f26c:	20000304 	.word	0x20000304
 800f270:	20005258 	.word	0x20005258
 800f274:	08026e70 	.word	0x08026e70
 800f278:	20001058 	.word	0x20001058
 800f27c:	20001080 	.word	0x20001080
 800f280:	08026e7c 	.word	0x08026e7c
 800f284:	08026ea8 	.word	0x08026ea8
 800f288:	20000e3c 	.word	0x20000e3c
 800f28c:	20004c54 	.word	0x20004c54

0800f290 <udpClient_connect>:
void udpClient_connect(void)
{
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
	err_t err;
	uint8_t Traverser = 0;
 800f296:	2300      	movs	r3, #0
 800f298:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 800f29a:	4ba6      	ldr	r3, [pc, #664]	; (800f534 <udpClient_connect+0x2a4>)
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d003      	beq.n	800f2aa <udpClient_connect+0x1a>
 800f2a2:	2b02      	cmp	r3, #2
 800f2a4:	f000 80a1 	beq.w	800f3ea <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 800f2a8:	e13f      	b.n	800f52a <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	71fb      	strb	r3, [r7, #7]
 800f2ae:	e094      	b.n	800f3da <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 800f2b0:	79fb      	ldrb	r3, [r7, #7]
 800f2b2:	4aa0      	ldr	r2, [pc, #640]	; (800f534 <udpClient_connect+0x2a4>)
 800f2b4:	3312      	adds	r3, #18
 800f2b6:	009b      	lsls	r3, r3, #2
 800f2b8:	4413      	add	r3, r2
 800f2ba:	78db      	ldrb	r3, [r3, #3]
 800f2bc:	061a      	lsls	r2, r3, #24
 800f2be:	79fb      	ldrb	r3, [r7, #7]
 800f2c0:	499c      	ldr	r1, [pc, #624]	; (800f534 <udpClient_connect+0x2a4>)
 800f2c2:	009b      	lsls	r3, r3, #2
 800f2c4:	440b      	add	r3, r1
 800f2c6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f2ca:	041b      	lsls	r3, r3, #16
 800f2cc:	431a      	orrs	r2, r3
 800f2ce:	79fb      	ldrb	r3, [r7, #7]
 800f2d0:	4998      	ldr	r1, [pc, #608]	; (800f534 <udpClient_connect+0x2a4>)
 800f2d2:	009b      	lsls	r3, r3, #2
 800f2d4:	440b      	add	r3, r1
 800f2d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f2da:	021b      	lsls	r3, r3, #8
 800f2dc:	431a      	orrs	r2, r3
 800f2de:	79fb      	ldrb	r3, [r7, #7]
 800f2e0:	4994      	ldr	r1, [pc, #592]	; (800f534 <udpClient_connect+0x2a4>)
 800f2e2:	009b      	lsls	r3, r3, #2
 800f2e4:	440b      	add	r3, r1
 800f2e6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f2ea:	4313      	orrs	r3, r2
 800f2ec:	061a      	lsls	r2, r3, #24
 800f2ee:	79fb      	ldrb	r3, [r7, #7]
 800f2f0:	4990      	ldr	r1, [pc, #576]	; (800f534 <udpClient_connect+0x2a4>)
 800f2f2:	3312      	adds	r3, #18
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	440b      	add	r3, r1
 800f2f8:	78db      	ldrb	r3, [r3, #3]
 800f2fa:	0619      	lsls	r1, r3, #24
 800f2fc:	79fb      	ldrb	r3, [r7, #7]
 800f2fe:	488d      	ldr	r0, [pc, #564]	; (800f534 <udpClient_connect+0x2a4>)
 800f300:	009b      	lsls	r3, r3, #2
 800f302:	4403      	add	r3, r0
 800f304:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f308:	041b      	lsls	r3, r3, #16
 800f30a:	4319      	orrs	r1, r3
 800f30c:	79fb      	ldrb	r3, [r7, #7]
 800f30e:	4889      	ldr	r0, [pc, #548]	; (800f534 <udpClient_connect+0x2a4>)
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	4403      	add	r3, r0
 800f314:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f318:	021b      	lsls	r3, r3, #8
 800f31a:	4319      	orrs	r1, r3
 800f31c:	79fb      	ldrb	r3, [r7, #7]
 800f31e:	4885      	ldr	r0, [pc, #532]	; (800f534 <udpClient_connect+0x2a4>)
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	4403      	add	r3, r0
 800f324:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f328:	430b      	orrs	r3, r1
 800f32a:	021b      	lsls	r3, r3, #8
 800f32c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f330:	431a      	orrs	r2, r3
 800f332:	79fb      	ldrb	r3, [r7, #7]
 800f334:	497f      	ldr	r1, [pc, #508]	; (800f534 <udpClient_connect+0x2a4>)
 800f336:	3312      	adds	r3, #18
 800f338:	009b      	lsls	r3, r3, #2
 800f33a:	440b      	add	r3, r1
 800f33c:	78db      	ldrb	r3, [r3, #3]
 800f33e:	0619      	lsls	r1, r3, #24
 800f340:	79fb      	ldrb	r3, [r7, #7]
 800f342:	487c      	ldr	r0, [pc, #496]	; (800f534 <udpClient_connect+0x2a4>)
 800f344:	009b      	lsls	r3, r3, #2
 800f346:	4403      	add	r3, r0
 800f348:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f34c:	041b      	lsls	r3, r3, #16
 800f34e:	4319      	orrs	r1, r3
 800f350:	79fb      	ldrb	r3, [r7, #7]
 800f352:	4878      	ldr	r0, [pc, #480]	; (800f534 <udpClient_connect+0x2a4>)
 800f354:	009b      	lsls	r3, r3, #2
 800f356:	4403      	add	r3, r0
 800f358:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f35c:	021b      	lsls	r3, r3, #8
 800f35e:	4319      	orrs	r1, r3
 800f360:	79fb      	ldrb	r3, [r7, #7]
 800f362:	4874      	ldr	r0, [pc, #464]	; (800f534 <udpClient_connect+0x2a4>)
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	4403      	add	r3, r0
 800f368:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f36c:	430b      	orrs	r3, r1
 800f36e:	0a1b      	lsrs	r3, r3, #8
 800f370:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f374:	ea42 0103 	orr.w	r1, r2, r3
 800f378:	79fb      	ldrb	r3, [r7, #7]
 800f37a:	4a6e      	ldr	r2, [pc, #440]	; (800f534 <udpClient_connect+0x2a4>)
 800f37c:	3312      	adds	r3, #18
 800f37e:	009b      	lsls	r3, r3, #2
 800f380:	4413      	add	r3, r2
 800f382:	78db      	ldrb	r3, [r3, #3]
 800f384:	061a      	lsls	r2, r3, #24
 800f386:	79fb      	ldrb	r3, [r7, #7]
 800f388:	486a      	ldr	r0, [pc, #424]	; (800f534 <udpClient_connect+0x2a4>)
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	4403      	add	r3, r0
 800f38e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f392:	041b      	lsls	r3, r3, #16
 800f394:	431a      	orrs	r2, r3
 800f396:	79fb      	ldrb	r3, [r7, #7]
 800f398:	4866      	ldr	r0, [pc, #408]	; (800f534 <udpClient_connect+0x2a4>)
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	4403      	add	r3, r0
 800f39e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f3a2:	021b      	lsls	r3, r3, #8
 800f3a4:	431a      	orrs	r2, r3
 800f3a6:	79fb      	ldrb	r3, [r7, #7]
 800f3a8:	4862      	ldr	r0, [pc, #392]	; (800f534 <udpClient_connect+0x2a4>)
 800f3aa:	009b      	lsls	r3, r3, #2
 800f3ac:	4403      	add	r3, r0
 800f3ae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f3b2:	4313      	orrs	r3, r2
 800f3b4:	0e1a      	lsrs	r2, r3, #24
 800f3b6:	79fb      	ldrb	r3, [r7, #7]
 800f3b8:	430a      	orrs	r2, r1
 800f3ba:	495f      	ldr	r1, [pc, #380]	; (800f538 <udpClient_connect+0x2a8>)
 800f3bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800f3c0:	79fb      	ldrb	r3, [r7, #7]
 800f3c2:	79fa      	ldrb	r2, [r7, #7]
 800f3c4:	495b      	ldr	r1, [pc, #364]	; (800f534 <udpClient_connect+0x2a4>)
 800f3c6:	009b      	lsls	r3, r3, #2
 800f3c8:	440b      	add	r3, r1
 800f3ca:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	; 0xfc
 800f3ce:	4b5b      	ldr	r3, [pc, #364]	; (800f53c <udpClient_connect+0x2ac>)
 800f3d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800f3d4:	79fb      	ldrb	r3, [r7, #7]
 800f3d6:	3301      	adds	r3, #1
 800f3d8:	71fb      	strb	r3, [r7, #7]
 800f3da:	4b56      	ldr	r3, [pc, #344]	; (800f534 <udpClient_connect+0x2a4>)
 800f3dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f3e0:	79fa      	ldrb	r2, [r7, #7]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	f4ff af64 	bcc.w	800f2b0 <udpClient_connect+0x20>
		break;
 800f3e8:	e09f      	b.n	800f52a <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	71fb      	strb	r3, [r7, #7]
 800f3ee:	e094      	b.n	800f51a <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 800f3f0:	79fb      	ldrb	r3, [r7, #7]
 800f3f2:	4a50      	ldr	r2, [pc, #320]	; (800f534 <udpClient_connect+0x2a4>)
 800f3f4:	33ae      	adds	r3, #174	; 0xae
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	4413      	add	r3, r2
 800f3fa:	785b      	ldrb	r3, [r3, #1]
 800f3fc:	061a      	lsls	r2, r3, #24
 800f3fe:	79fb      	ldrb	r3, [r7, #7]
 800f400:	494c      	ldr	r1, [pc, #304]	; (800f534 <udpClient_connect+0x2a4>)
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	440b      	add	r3, r1
 800f406:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f40a:	041b      	lsls	r3, r3, #16
 800f40c:	431a      	orrs	r2, r3
 800f40e:	79fb      	ldrb	r3, [r7, #7]
 800f410:	4948      	ldr	r1, [pc, #288]	; (800f534 <udpClient_connect+0x2a4>)
 800f412:	009b      	lsls	r3, r3, #2
 800f414:	440b      	add	r3, r1
 800f416:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f41a:	021b      	lsls	r3, r3, #8
 800f41c:	431a      	orrs	r2, r3
 800f41e:	79fb      	ldrb	r3, [r7, #7]
 800f420:	4944      	ldr	r1, [pc, #272]	; (800f534 <udpClient_connect+0x2a4>)
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	440b      	add	r3, r1
 800f426:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f42a:	4313      	orrs	r3, r2
 800f42c:	061a      	lsls	r2, r3, #24
 800f42e:	79fb      	ldrb	r3, [r7, #7]
 800f430:	4940      	ldr	r1, [pc, #256]	; (800f534 <udpClient_connect+0x2a4>)
 800f432:	33ae      	adds	r3, #174	; 0xae
 800f434:	009b      	lsls	r3, r3, #2
 800f436:	440b      	add	r3, r1
 800f438:	785b      	ldrb	r3, [r3, #1]
 800f43a:	0619      	lsls	r1, r3, #24
 800f43c:	79fb      	ldrb	r3, [r7, #7]
 800f43e:	483d      	ldr	r0, [pc, #244]	; (800f534 <udpClient_connect+0x2a4>)
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	4403      	add	r3, r0
 800f444:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f448:	041b      	lsls	r3, r3, #16
 800f44a:	4319      	orrs	r1, r3
 800f44c:	79fb      	ldrb	r3, [r7, #7]
 800f44e:	4839      	ldr	r0, [pc, #228]	; (800f534 <udpClient_connect+0x2a4>)
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	4403      	add	r3, r0
 800f454:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f458:	021b      	lsls	r3, r3, #8
 800f45a:	4319      	orrs	r1, r3
 800f45c:	79fb      	ldrb	r3, [r7, #7]
 800f45e:	4835      	ldr	r0, [pc, #212]	; (800f534 <udpClient_connect+0x2a4>)
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	4403      	add	r3, r0
 800f464:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f468:	430b      	orrs	r3, r1
 800f46a:	021b      	lsls	r3, r3, #8
 800f46c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f470:	431a      	orrs	r2, r3
 800f472:	79fb      	ldrb	r3, [r7, #7]
 800f474:	492f      	ldr	r1, [pc, #188]	; (800f534 <udpClient_connect+0x2a4>)
 800f476:	33ae      	adds	r3, #174	; 0xae
 800f478:	009b      	lsls	r3, r3, #2
 800f47a:	440b      	add	r3, r1
 800f47c:	785b      	ldrb	r3, [r3, #1]
 800f47e:	0619      	lsls	r1, r3, #24
 800f480:	79fb      	ldrb	r3, [r7, #7]
 800f482:	482c      	ldr	r0, [pc, #176]	; (800f534 <udpClient_connect+0x2a4>)
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	4403      	add	r3, r0
 800f488:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f48c:	041b      	lsls	r3, r3, #16
 800f48e:	4319      	orrs	r1, r3
 800f490:	79fb      	ldrb	r3, [r7, #7]
 800f492:	4828      	ldr	r0, [pc, #160]	; (800f534 <udpClient_connect+0x2a4>)
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	4403      	add	r3, r0
 800f498:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f49c:	021b      	lsls	r3, r3, #8
 800f49e:	4319      	orrs	r1, r3
 800f4a0:	79fb      	ldrb	r3, [r7, #7]
 800f4a2:	4824      	ldr	r0, [pc, #144]	; (800f534 <udpClient_connect+0x2a4>)
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	4403      	add	r3, r0
 800f4a8:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f4ac:	430b      	orrs	r3, r1
 800f4ae:	0a1b      	lsrs	r3, r3, #8
 800f4b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f4b4:	ea42 0103 	orr.w	r1, r2, r3
 800f4b8:	79fb      	ldrb	r3, [r7, #7]
 800f4ba:	4a1e      	ldr	r2, [pc, #120]	; (800f534 <udpClient_connect+0x2a4>)
 800f4bc:	33ae      	adds	r3, #174	; 0xae
 800f4be:	009b      	lsls	r3, r3, #2
 800f4c0:	4413      	add	r3, r2
 800f4c2:	785b      	ldrb	r3, [r3, #1]
 800f4c4:	061a      	lsls	r2, r3, #24
 800f4c6:	79fb      	ldrb	r3, [r7, #7]
 800f4c8:	481a      	ldr	r0, [pc, #104]	; (800f534 <udpClient_connect+0x2a4>)
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	4403      	add	r3, r0
 800f4ce:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f4d2:	041b      	lsls	r3, r3, #16
 800f4d4:	431a      	orrs	r2, r3
 800f4d6:	79fb      	ldrb	r3, [r7, #7]
 800f4d8:	4816      	ldr	r0, [pc, #88]	; (800f534 <udpClient_connect+0x2a4>)
 800f4da:	009b      	lsls	r3, r3, #2
 800f4dc:	4403      	add	r3, r0
 800f4de:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f4e2:	021b      	lsls	r3, r3, #8
 800f4e4:	431a      	orrs	r2, r3
 800f4e6:	79fb      	ldrb	r3, [r7, #7]
 800f4e8:	4812      	ldr	r0, [pc, #72]	; (800f534 <udpClient_connect+0x2a4>)
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	4403      	add	r3, r0
 800f4ee:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f4f2:	4313      	orrs	r3, r2
 800f4f4:	0e1a      	lsrs	r2, r3, #24
 800f4f6:	79fb      	ldrb	r3, [r7, #7]
 800f4f8:	430a      	orrs	r2, r1
 800f4fa:	490f      	ldr	r1, [pc, #60]	; (800f538 <udpClient_connect+0x2a8>)
 800f4fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800f500:	79fb      	ldrb	r3, [r7, #7]
 800f502:	79fa      	ldrb	r2, [r7, #7]
 800f504:	490b      	ldr	r1, [pc, #44]	; (800f534 <udpClient_connect+0x2a4>)
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	440b      	add	r3, r1
 800f50a:	f8b3 12e0 	ldrh.w	r1, [r3, #736]	; 0x2e0
 800f50e:	4b0b      	ldr	r3, [pc, #44]	; (800f53c <udpClient_connect+0x2ac>)
 800f510:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f514:	79fb      	ldrb	r3, [r7, #7]
 800f516:	3301      	adds	r3, #1
 800f518:	71fb      	strb	r3, [r7, #7]
 800f51a:	4b06      	ldr	r3, [pc, #24]	; (800f534 <udpClient_connect+0x2a4>)
 800f51c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f520:	79fa      	ldrb	r2, [r7, #7]
 800f522:	429a      	cmp	r2, r3
 800f524:	f4ff af64 	bcc.w	800f3f0 <udpClient_connect+0x160>
		break;
 800f528:	bf00      	nop
	}
}
 800f52a:	370c      	adds	r7, #12
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr
 800f534:	20000304 	.word	0x20000304
 800f538:	20005258 	.word	0x20005258
 800f53c:	200052ac 	.word	0x200052ac

0800f540 <udpClient_send>:
void udpClient_send(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b086      	sub	sp, #24
 800f544:	af00      	add	r7, sp, #0
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	460b      	mov	r3, r1
 800f54a:	607a      	str	r2, [r7, #4]
 800f54c:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800f54e:	2300      	movs	r3, #0
 800f550:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800f552:	7afb      	ldrb	r3, [r7, #11]
 800f554:	b29b      	uxth	r3, r3
 800f556:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f55a:	4619      	mov	r1, r3
 800f55c:	2036      	movs	r0, #54	; 0x36
 800f55e:	f00f f9ed 	bl	801e93c <pbuf_alloc>
 800f562:	6138      	str	r0, [r7, #16]

	//	char *SendingIP = ipaddr_ntoa(&IP_addr);
	//
	//	printf("\nSent IP:%s\n",SendingIP);

	if (txBuf != NULL)
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d01d      	beq.n	800f5a6 <udpClient_send+0x66>
	{
		pbuf_take(txBuf, data, len);
 800f56a:	7afb      	ldrb	r3, [r7, #11]
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	461a      	mov	r2, r3
 800f570:	68f9      	ldr	r1, [r7, #12]
 800f572:	6938      	ldr	r0, [r7, #16]
 800f574:	f00f febe 	bl	801f2f4 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 800f578:	4b0d      	ldr	r3, [pc, #52]	; (800f5b0 <udpClient_send+0x70>)
 800f57a:	6818      	ldr	r0, [r3, #0]
 800f57c:	4b0d      	ldr	r3, [pc, #52]	; (800f5b4 <udpClient_send+0x74>)
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	1d3a      	adds	r2, r7, #4
 800f582:	6939      	ldr	r1, [r7, #16]
 800f584:	f010 fa5e 	bl	801fa44 <udp_sendto>
 800f588:	4603      	mov	r3, r0
 800f58a:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800f58c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d005      	beq.n	800f5a0 <udpClient_send+0x60>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 800f594:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f598:	4619      	mov	r1, r3
 800f59a:	4807      	ldr	r0, [pc, #28]	; (800f5b8 <udpClient_send+0x78>)
 800f59c:	f013 f9e8 	bl	8022970 <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 800f5a0:	6938      	ldr	r0, [r7, #16]
 800f5a2:	f00f fcad 	bl	801ef00 <pbuf_free>
	}
}
 800f5a6:	bf00      	nop
 800f5a8:	3718      	adds	r7, #24
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	200052d4 	.word	0x200052d4
 800f5b4:	200052ac 	.word	0x200052ac
 800f5b8:	08026ed0 	.word	0x08026ed0

0800f5bc <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 800f5c0:	4b07      	ldr	r3, [pc, #28]	; (800f5e0 <Is_There_EI_Data+0x24>)
 800f5c2:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800f5c6:	4b06      	ldr	r3, [pc, #24]	; (800f5e0 <Is_There_EI_Data+0x24>)
 800f5c8:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d001      	beq.n	800f5d4 <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	e000      	b.n	800f5d6 <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 800f5d4:	2300      	movs	r3, #0
	}
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr
 800f5e0:	20004c54 	.word	0x20004c54

0800f5e4 <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 800f5ea:	4b15      	ldr	r3, [pc, #84]	; (800f640 <Get_Eth_Byte+0x5c>)
 800f5ec:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800f5f0:	1c5a      	adds	r2, r3, #1
 800f5f2:	b291      	uxth	r1, r2
 800f5f4:	4a12      	ldr	r2, [pc, #72]	; (800f640 <Get_Eth_Byte+0x5c>)
 800f5f6:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	4b10      	ldr	r3, [pc, #64]	; (800f640 <Get_Eth_Byte+0x5c>)
 800f5fe:	5c9b      	ldrb	r3, [r3, r2]
 800f600:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 800f602:	4b0f      	ldr	r3, [pc, #60]	; (800f640 <Get_Eth_Byte+0x5c>)
 800f604:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800f608:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f60c:	d313      	bcc.n	800f636 <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 800f60e:	4b0c      	ldr	r3, [pc, #48]	; (800f640 <Get_Eth_Byte+0x5c>)
 800f610:	2200      	movs	r2, #0
 800f612:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 800f616:	4b0a      	ldr	r3, [pc, #40]	; (800f640 <Get_Eth_Byte+0x5c>)
 800f618:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f61c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f620:	d109      	bne.n	800f636 <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 800f622:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f626:	2100      	movs	r1, #0
 800f628:	4805      	ldr	r0, [pc, #20]	; (800f640 <Get_Eth_Byte+0x5c>)
 800f62a:	f013 f8b9 	bl	80227a0 <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 800f62e:	4b04      	ldr	r3, [pc, #16]	; (800f640 <Get_Eth_Byte+0x5c>)
 800f630:	2200      	movs	r2, #0
 800f632:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 800f636:	79fb      	ldrb	r3, [r7, #7]
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3708      	adds	r7, #8
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}
 800f640:	20004c54 	.word	0x20004c54

0800f644 <Udp_Send_SigInfo>:

void Udp_Send_SigInfo(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b086      	sub	sp, #24
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	460b      	mov	r3, r1
 800f64e:	607a      	str	r2, [r7, #4]
 800f650:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800f652:	2300      	movs	r3, #0
 800f654:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800f656:	7afb      	ldrb	r3, [r7, #11]
 800f658:	b29b      	uxth	r3, r3
 800f65a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f65e:	4619      	mov	r1, r3
 800f660:	2036      	movs	r0, #54	; 0x36
 800f662:	f00f f96b 	bl	801e93c <pbuf_alloc>
 800f666:	6138      	str	r0, [r7, #16]

	if (txBuf != NULL)
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d01a      	beq.n	800f6a4 <Udp_Send_SigInfo+0x60>
	{
		pbuf_take(txBuf, data, len);
 800f66e:	7afb      	ldrb	r3, [r7, #11]
 800f670:	b29b      	uxth	r3, r3
 800f672:	461a      	mov	r2, r3
 800f674:	68f9      	ldr	r1, [r7, #12]
 800f676:	6938      	ldr	r0, [r7, #16]
 800f678:	f00f fe3c 	bl	801f2f4 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,12345);
 800f67c:	4b0b      	ldr	r3, [pc, #44]	; (800f6ac <Udp_Send_SigInfo+0x68>)
 800f67e:	6818      	ldr	r0, [r3, #0]
 800f680:	1d3a      	adds	r2, r7, #4
 800f682:	f243 0339 	movw	r3, #12345	; 0x3039
 800f686:	6939      	ldr	r1, [r7, #16]
 800f688:	f010 f9dc 	bl	801fa44 <udp_sendto>
 800f68c:	4603      	mov	r3, r0
 800f68e:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800f690:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d002      	beq.n	800f69e <Udp_Send_SigInfo+0x5a>
		{
			printf("Packet Sent Failure\n");
 800f698:	4805      	ldr	r0, [pc, #20]	; (800f6b0 <Udp_Send_SigInfo+0x6c>)
 800f69a:	f013 fa05 	bl	8022aa8 <puts>
		}
		pbuf_free(txBuf);
 800f69e:	6938      	ldr	r0, [r7, #16]
 800f6a0:	f00f fc2e 	bl	801ef00 <pbuf_free>
	}
}
 800f6a4:	bf00      	nop
 800f6a6:	3718      	adds	r7, #24
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	200052d4 	.word	0x200052d4
 800f6b0:	08026ef8 	.word	0x08026ef8

0800f6b4 <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b094      	sub	sp, #80	; 0x50
 800f6b8:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 800f6ba:	4b38      	ldr	r3, [pc, #224]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f6bc:	4a38      	ldr	r2, [pc, #224]	; (800f7a0 <MX_CAN2_Init+0xec>)
 800f6be:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 800f6c0:	4b36      	ldr	r3, [pc, #216]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f6c2:	2212      	movs	r2, #18
 800f6c4:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800f6c6:	4b35      	ldr	r3, [pc, #212]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800f6cc:	4b33      	ldr	r3, [pc, #204]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f6ce:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800f6d2:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800f6d4:	4b31      	ldr	r3, [pc, #196]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f6d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f6da:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800f6dc:	4b2f      	ldr	r3, [pc, #188]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f6de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f6e2:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800f6e4:	4b2d      	ldr	r3, [pc, #180]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800f6ea:	4b2c      	ldr	r3, [pc, #176]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800f6f0:	4b2a      	ldr	r3, [pc, #168]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 800f6f6:	4b29      	ldr	r3, [pc, #164]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800f6fc:	4b27      	ldr	r3, [pc, #156]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f6fe:	2200      	movs	r2, #0
 800f700:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800f702:	4b26      	ldr	r3, [pc, #152]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f704:	2200      	movs	r2, #0
 800f706:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800f708:	4824      	ldr	r0, [pc, #144]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f70a:	f006 f963 	bl	80159d4 <HAL_CAN_Init>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d001      	beq.n	800f718 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 800f714:	f004 fba2 	bl	8013e5c <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800f718:	2301      	movs	r3, #1
 800f71a:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 800f71c:	2304      	movs	r3, #4
 800f71e:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800f720:	2301      	movs	r3, #1
 800f722:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 800f724:	f242 0360 	movw	r3, #8288	; 0x2060
 800f728:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 800f72a:	2300      	movs	r3, #0
 800f72c:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 800f72e:	f242 0360 	movw	r3, #8288	; 0x2060
 800f732:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800f734:	2300      	movs	r3, #0
 800f736:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 800f738:	2301      	movs	r3, #1
 800f73a:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800f73c:	2301      	movs	r3, #1
 800f73e:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 800f740:	2302      	movs	r3, #2
 800f742:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 800f744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f748:	4619      	mov	r1, r3
 800f74a:	4814      	ldr	r0, [pc, #80]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f74c:	f006 fa88 	bl	8015c60 <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 800f750:	2301      	movs	r3, #1
 800f752:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 800f754:	2305      	movs	r3, #5
 800f756:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800f758:	2301      	movs	r3, #1
 800f75a:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 800f75c:	f242 1320 	movw	r3, #8480	; 0x2120
 800f760:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 800f762:	2300      	movs	r3, #0
 800f764:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 800f766:	f242 1320 	movw	r3, #8480	; 0x2120
 800f76a:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 800f76c:	2300      	movs	r3, #0
 800f76e:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 800f770:	2301      	movs	r3, #1
 800f772:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 800f774:	2301      	movs	r3, #1
 800f776:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 800f778:	2302      	movs	r3, #2
 800f77a:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 800f77c:	463b      	mov	r3, r7
 800f77e:	4619      	mov	r1, r3
 800f780:	4806      	ldr	r0, [pc, #24]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f782:	f006 fa6d 	bl	8015c60 <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 800f786:	4805      	ldr	r0, [pc, #20]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f788:	f006 fb56 	bl	8015e38 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 800f78c:	2110      	movs	r1, #16
 800f78e:	4803      	ldr	r0, [pc, #12]	; (800f79c <MX_CAN2_Init+0xe8>)
 800f790:	f006 fd9c 	bl	80162cc <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 800f794:	bf00      	nop
 800f796:	3750      	adds	r7, #80	; 0x50
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	20009b8c 	.word	0x20009b8c
 800f7a0:	40006800 	.word	0x40006800

0800f7a4 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b08a      	sub	sp, #40	; 0x28
 800f7a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 800f7aa:	4b34      	ldr	r3, [pc, #208]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f7ac:	4a34      	ldr	r2, [pc, #208]	; (800f880 <MX_CAN3_Init+0xdc>)
 800f7ae:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 800f7b0:	4b32      	ldr	r3, [pc, #200]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f7b2:	2205      	movs	r2, #5
 800f7b4:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800f7b6:	4b31      	ldr	r3, [pc, #196]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800f7bc:	4b2f      	ldr	r3, [pc, #188]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f7be:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800f7c2:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 800f7c4:	4b2d      	ldr	r3, [pc, #180]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f7c6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800f7ca:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 800f7cc:	4b2b      	ldr	r3, [pc, #172]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 800f7d2:	4b2a      	ldr	r3, [pc, #168]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f7d4:	4a2a      	ldr	r2, [pc, #168]	; (800f880 <MX_CAN3_Init+0xdc>)
 800f7d6:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 800f7d8:	4b28      	ldr	r3, [pc, #160]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f7da:	2212      	movs	r2, #18
 800f7dc:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800f7de:	4b27      	ldr	r3, [pc, #156]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800f7e4:	4b25      	ldr	r3, [pc, #148]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 800f7ea:	4b24      	ldr	r3, [pc, #144]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f7ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f7f0:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800f7f2:	4b22      	ldr	r3, [pc, #136]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f7f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f7f8:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 800f7fa:	4b20      	ldr	r3, [pc, #128]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 800f800:	4b1e      	ldr	r3, [pc, #120]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f802:	2200      	movs	r2, #0
 800f804:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 800f806:	4b1d      	ldr	r3, [pc, #116]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f808:	2200      	movs	r2, #0
 800f80a:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 800f80c:	4b1b      	ldr	r3, [pc, #108]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f80e:	2201      	movs	r2, #1
 800f810:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 800f812:	4b1a      	ldr	r3, [pc, #104]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f814:	2200      	movs	r2, #0
 800f816:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 800f818:	4b18      	ldr	r3, [pc, #96]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f81a:	2200      	movs	r2, #0
 800f81c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 800f81e:	4817      	ldr	r0, [pc, #92]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f820:	f006 f8d8 	bl	80159d4 <HAL_CAN_Init>
 800f824:	4603      	mov	r3, r0
 800f826:	2b00      	cmp	r3, #0
 800f828:	d001      	beq.n	800f82e <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 800f82a:	f004 fb17 	bl	8013e5c <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800f82e:	2301      	movs	r3, #1
 800f830:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 800f832:	2301      	movs	r3, #1
 800f834:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800f836:	2300      	movs	r3, #0
 800f838:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 800f83a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f83e:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 800f840:	2300      	movs	r3, #0
 800f842:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 800f844:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f848:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800f84a:	2300      	movs	r3, #0
 800f84c:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 800f84e:	2300      	movs	r3, #0
 800f850:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800f852:	2301      	movs	r3, #1
 800f854:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 800f856:	2306      	movs	r3, #6
 800f858:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 800f85a:	463b      	mov	r3, r7
 800f85c:	4619      	mov	r1, r3
 800f85e:	4807      	ldr	r0, [pc, #28]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f860:	f006 f9fe 	bl	8015c60 <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 800f864:	4805      	ldr	r0, [pc, #20]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f866:	f006 fae7 	bl	8015e38 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 800f86a:	2102      	movs	r1, #2
 800f86c:	4803      	ldr	r0, [pc, #12]	; (800f87c <MX_CAN3_Init+0xd8>)
 800f86e:	f006 fd2d 	bl	80162cc <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 800f872:	bf00      	nop
 800f874:	3728      	adds	r7, #40	; 0x28
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	20009bf0 	.word	0x20009bf0
 800f880:	40003400 	.word	0x40003400

0800f884 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b08c      	sub	sp, #48	; 0x30
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f88c:	f107 031c 	add.w	r3, r7, #28
 800f890:	2200      	movs	r2, #0
 800f892:	601a      	str	r2, [r3, #0]
 800f894:	605a      	str	r2, [r3, #4]
 800f896:	609a      	str	r2, [r3, #8]
 800f898:	60da      	str	r2, [r3, #12]
 800f89a:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4a44      	ldr	r2, [pc, #272]	; (800f9b4 <HAL_CAN_MspInit+0x130>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d144      	bne.n	800f930 <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 800f8a6:	4b44      	ldr	r3, [pc, #272]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8aa:	4a43      	ldr	r2, [pc, #268]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f8ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f8b0:	6413      	str	r3, [r2, #64]	; 0x40
 800f8b2:	4b41      	ldr	r3, [pc, #260]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f8ba:	61bb      	str	r3, [r7, #24]
 800f8bc:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 800f8be:	4b3e      	ldr	r3, [pc, #248]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8c2:	4a3d      	ldr	r2, [pc, #244]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f8c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f8c8:	6413      	str	r3, [r2, #64]	; 0x40
 800f8ca:	4b3b      	ldr	r3, [pc, #236]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8d2:	617b      	str	r3, [r7, #20]
 800f8d4:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800f8d6:	4b38      	ldr	r3, [pc, #224]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8da:	4a37      	ldr	r2, [pc, #220]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f8dc:	f043 0302 	orr.w	r3, r3, #2
 800f8e0:	6313      	str	r3, [r2, #48]	; 0x30
 800f8e2:	4b35      	ldr	r3, [pc, #212]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8e6:	f003 0302 	and.w	r3, r3, #2
 800f8ea:	613b      	str	r3, [r7, #16]
 800f8ec:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 800f8ee:	2360      	movs	r3, #96	; 0x60
 800f8f0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8f2:	2302      	movs	r3, #2
 800f8f4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8fa:	2303      	movs	r3, #3
 800f8fc:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800f8fe:	2309      	movs	r3, #9
 800f900:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f902:	f107 031c 	add.w	r3, r7, #28
 800f906:	4619      	mov	r1, r3
 800f908:	482c      	ldr	r0, [pc, #176]	; (800f9bc <HAL_CAN_MspInit+0x138>)
 800f90a:	f008 fb3f 	bl	8017f8c <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 800f90e:	2200      	movs	r2, #0
 800f910:	2104      	movs	r1, #4
 800f912:	2040      	movs	r0, #64	; 0x40
 800f914:	f007 f80f 	bl	8016936 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800f918:	2040      	movs	r0, #64	; 0x40
 800f91a:	f007 f828 	bl	801696e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 800f91e:	2201      	movs	r2, #1
 800f920:	2104      	movs	r1, #4
 800f922:	2041      	movs	r0, #65	; 0x41
 800f924:	f007 f807 	bl	8016936 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800f928:	2041      	movs	r0, #65	; 0x41
 800f92a:	f007 f820 	bl	801696e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 800f92e:	e03d      	b.n	800f9ac <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	4a22      	ldr	r2, [pc, #136]	; (800f9c0 <HAL_CAN_MspInit+0x13c>)
 800f936:	4293      	cmp	r3, r2
 800f938:	d138      	bne.n	800f9ac <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 800f93a:	4b1f      	ldr	r3, [pc, #124]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f93e:	4a1e      	ldr	r2, [pc, #120]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f940:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f944:	6413      	str	r3, [r2, #64]	; 0x40
 800f946:	4b1c      	ldr	r3, [pc, #112]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f94a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f94e:	60fb      	str	r3, [r7, #12]
 800f950:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800f952:	4b19      	ldr	r3, [pc, #100]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f956:	4a18      	ldr	r2, [pc, #96]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f958:	f043 0301 	orr.w	r3, r3, #1
 800f95c:	6313      	str	r3, [r2, #48]	; 0x30
 800f95e:	4b16      	ldr	r3, [pc, #88]	; (800f9b8 <HAL_CAN_MspInit+0x134>)
 800f960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f962:	f003 0301 	and.w	r3, r3, #1
 800f966:	60bb      	str	r3, [r7, #8]
 800f968:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 800f96a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800f96e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f970:	2302      	movs	r3, #2
 800f972:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f974:	2300      	movs	r3, #0
 800f976:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f978:	2303      	movs	r3, #3
 800f97a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800f97c:	230b      	movs	r3, #11
 800f97e:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f980:	f107 031c 	add.w	r3, r7, #28
 800f984:	4619      	mov	r1, r3
 800f986:	480f      	ldr	r0, [pc, #60]	; (800f9c4 <HAL_CAN_MspInit+0x140>)
 800f988:	f008 fb00 	bl	8017f8c <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 800f98c:	2200      	movs	r2, #0
 800f98e:	2100      	movs	r1, #0
 800f990:	2069      	movs	r0, #105	; 0x69
 800f992:	f006 ffd0 	bl	8016936 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800f996:	2069      	movs	r0, #105	; 0x69
 800f998:	f006 ffe9 	bl	801696e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 800f99c:	2200      	movs	r2, #0
 800f99e:	2100      	movs	r1, #0
 800f9a0:	206a      	movs	r0, #106	; 0x6a
 800f9a2:	f006 ffc8 	bl	8016936 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 800f9a6:	206a      	movs	r0, #106	; 0x6a
 800f9a8:	f006 ffe1 	bl	801696e <HAL_NVIC_EnableIRQ>
}
 800f9ac:	bf00      	nop
 800f9ae:	3730      	adds	r7, #48	; 0x30
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	40006800 	.word	0x40006800
 800f9b8:	40023800 	.word	0x40023800
 800f9bc:	40020400 	.word	0x40020400
 800f9c0:	40003400 	.word	0x40003400
 800f9c4:	40020000 	.word	0x40020000

0800f9c8 <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	80fb      	strh	r3, [r7, #6]
	void *pp_ptr;
	uint16_t Traverser = 0;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	81bb      	strh	r3, [r7, #12]
	uint16_t uc_size = 0;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	81fb      	strh	r3, [r7, #14]



	switch(EI_data.ProtocolType)
 800f9da:	4b9c      	ldr	r3, [pc, #624]	; (800fc4c <TransmitCanPkt+0x284>)
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	2b03      	cmp	r3, #3
 800f9e0:	f000 816b 	beq.w	800fcba <TransmitCanPkt+0x2f2>
 800f9e4:	2b03      	cmp	r3, #3
 800f9e6:	f300 81e9 	bgt.w	800fdbc <TransmitCanPkt+0x3f4>
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d003      	beq.n	800f9f6 <TransmitCanPkt+0x2e>
 800f9ee:	2b02      	cmp	r3, #2
 800f9f0:	f000 80b9 	beq.w	800fb66 <TransmitCanPkt+0x19e>
 800f9f4:	e1e2      	b.n	800fdbc <TransmitCanPkt+0x3f4>
	{

	case HITACHI:
	{
		/* _____________________________ HITACHI ________________________________________ */
		if( (CHECKFLAG(8,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800f9f6:	4b96      	ldr	r3, [pc, #600]	; (800fc50 <TransmitCanPkt+0x288>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	0a1b      	lsrs	r3, r3, #8
 800f9fc:	f003 0301 	and.w	r3, r3, #1
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d003      	beq.n	800fa0c <TransmitCanPkt+0x44>
		{
			printf("Stopping CAN Transmission\n");
 800fa04:	4893      	ldr	r0, [pc, #588]	; (800fc54 <TransmitCanPkt+0x28c>)
 800fa06:	f013 f84f 	bl	8022aa8 <puts>
			return;
 800fa0a:	e1d7      	b.n	800fdbc <TransmitCanPkt+0x3f4>
		}

		switch((int)Ken_idetifier)
 800fa0c:	88fb      	ldrh	r3, [r7, #6]
 800fa0e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800fa12:	f300 80a2 	bgt.w	800fb5a <TransmitCanPkt+0x192>
 800fa16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa1a:	dc0d      	bgt.n	800fa38 <TransmitCanPkt+0x70>
 800fa1c:	f240 1219 	movw	r2, #281	; 0x119
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d021      	beq.n	800fa68 <TransmitCanPkt+0xa0>
 800fa24:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800fa28:	f340 8097 	ble.w	800fb5a <TransmitCanPkt+0x192>
 800fa2c:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	f200 8092 	bhi.w	800fb5a <TransmitCanPkt+0x192>
 800fa36:	e033      	b.n	800faa0 <TransmitCanPkt+0xd8>
 800fa38:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800fa3c:	2b07      	cmp	r3, #7
 800fa3e:	f200 808c 	bhi.w	800fb5a <TransmitCanPkt+0x192>
 800fa42:	a201      	add	r2, pc, #4	; (adr r2, 800fa48 <TransmitCanPkt+0x80>)
 800fa44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa48:	0800fac5 	.word	0x0800fac5
 800fa4c:	0800fac5 	.word	0x0800fac5
 800fa50:	0800faef 	.word	0x0800faef
 800fa54:	0800faef 	.word	0x0800faef
 800fa58:	0800fb13 	.word	0x0800fb13
 800fa5c:	0800fb5b 	.word	0x0800fb5b
 800fa60:	0800fb37 	.word	0x0800fb37
 800fa64:	0800fb37 	.word	0x0800fb37
		{
		case EI_PROCESS_DATA:
			vEI_Transver_EI_To_MIE.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 800fa68:	4b78      	ldr	r3, [pc, #480]	; (800fc4c <TransmitCanPkt+0x284>)
 800fa6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	011b      	lsls	r3, r3, #4
 800fa72:	b29a      	uxth	r2, r3
 800fa74:	4b78      	ldr	r3, [pc, #480]	; (800fc58 <TransmitCanPkt+0x290>)
 800fa76:	801a      	strh	r2, [r3, #0]
			pp_ptr = &vEI_Transver_EI_To_MIE;
 800fa78:	4b77      	ldr	r3, [pc, #476]	; (800fc58 <TransmitCanPkt+0x290>)
 800fa7a:	60bb      	str	r3, [r7, #8]
			uc_size =(vEI_Transver_EI_To_MIE.ActualDataBytes + sizeof(vEI_Transver_EI_To_MIE.ActualDataBytes)); /* +2 is by Considering */
 800fa7c:	4b76      	ldr	r3, [pc, #472]	; (800fc58 <TransmitCanPkt+0x290>)
 800fa7e:	881b      	ldrh	r3, [r3, #0]
 800fa80:	3302      	adds	r3, #2
 800fa82:	81fb      	strh	r3, [r7, #14]
			//uc_size = sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t);
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800fa84:	89fb      	ldrh	r3, [r7, #14]
 800fa86:	88fa      	ldrh	r2, [r7, #6]
 800fa88:	4619      	mov	r1, r3
 800fa8a:	68b8      	ldr	r0, [r7, #8]
 800fa8c:	f000 f9b2 	bl	800fdf4 <sendCanPkts>
			if(Debug_flag == 1)
 800fa90:	4b72      	ldr	r3, [pc, #456]	; (800fc5c <TransmitCanPkt+0x294>)
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d162      	bne.n	800fb5e <TransmitCanPkt+0x196>
			{
				printf("SENT SIGNAL DATA TO MIE\n");
 800fa98:	4871      	ldr	r0, [pc, #452]	; (800fc60 <TransmitCanPkt+0x298>)
 800fa9a:	f013 f805 	bl	8022aa8 <puts>
			}
			break;
 800fa9e:	e05e      	b.n	800fb5e <TransmitCanPkt+0x196>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800faa0:	4b70      	ldr	r3, [pc, #448]	; (800fc64 <TransmitCanPkt+0x29c>)
 800faa2:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800faa4:	2316      	movs	r3, #22
 800faa6:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800faa8:	4b6c      	ldr	r3, [pc, #432]	; (800fc5c <TransmitCanPkt+0x294>)
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	2b01      	cmp	r3, #1
 800faae:	d102      	bne.n	800fab6 <TransmitCanPkt+0xee>
			{
				printf("\nHealth 2 MIE\n");
 800fab0:	486d      	ldr	r0, [pc, #436]	; (800fc68 <TransmitCanPkt+0x2a0>)
 800fab2:	f012 fff9 	bl	8022aa8 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800fab6:	89fb      	ldrh	r3, [r7, #14]
 800fab8:	88fa      	ldrh	r2, [r7, #6]
 800faba:	4619      	mov	r1, r3
 800fabc:	68b8      	ldr	r0, [r7, #8]
 800fabe:	f000 f999 	bl	800fdf4 <sendCanPkts>
			break;
 800fac2:	e04f      	b.n	800fb64 <TransmitCanPkt+0x19c>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Temp_Tx_Ei_self_sharing_st;
 800fac4:	4b69      	ldr	r3, [pc, #420]	; (800fc6c <TransmitCanPkt+0x2a4>)
 800fac6:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(EI_SELF_SHARING_t);
 800fac8:	2318      	movs	r3, #24
 800faca:	81fb      	strh	r3, [r7, #14]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800facc:	89fb      	ldrh	r3, [r7, #14]
 800face:	88fa      	ldrh	r2, [r7, #6]
 800fad0:	4619      	mov	r1, r3
 800fad2:	68b8      	ldr	r0, [r7, #8]
 800fad4:	f000 f98e 	bl	800fdf4 <sendCanPkts>
			if(Debug_flag == 1)
 800fad8:	4b60      	ldr	r3, [pc, #384]	; (800fc5c <TransmitCanPkt+0x294>)
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d140      	bne.n	800fb62 <TransmitCanPkt+0x19a>
			{
				printf("Sent2_O:%u\n",Temp_Tx_Ei_self_sharing_st.Peer_Index);
 800fae0:	4b62      	ldr	r3, [pc, #392]	; (800fc6c <TransmitCanPkt+0x2a4>)
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	4619      	mov	r1, r3
 800fae6:	4862      	ldr	r0, [pc, #392]	; (800fc70 <TransmitCanPkt+0x2a8>)
 800fae8:	f012 ff42 	bl	8022970 <iprintf>
			}
			break;
 800faec:	e039      	b.n	800fb62 <TransmitCanPkt+0x19a>

		case SEND_VITAL_MSG_1:
		case SEND_VITAL_MSG_2:
			pp_ptr = &Tx_VITAL_MSG_CAN_st;
 800faee:	4b61      	ldr	r3, [pc, #388]	; (800fc74 <TransmitCanPkt+0x2ac>)
 800faf0:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SEND_VITAL_MSG_2_OTH_t);
 800faf2:	2346      	movs	r3, #70	; 0x46
 800faf4:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800faf6:	4b59      	ldr	r3, [pc, #356]	; (800fc5c <TransmitCanPkt+0x294>)
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	2b01      	cmp	r3, #1
 800fafc:	d102      	bne.n	800fb04 <TransmitCanPkt+0x13c>
			{
				printf("\nSending V-Message 2-O\n");
 800fafe:	485e      	ldr	r0, [pc, #376]	; (800fc78 <TransmitCanPkt+0x2b0>)
 800fb00:	f012 ffd2 	bl	8022aa8 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800fb04:	89fb      	ldrh	r3, [r7, #14]
 800fb06:	88fa      	ldrh	r2, [r7, #6]
 800fb08:	4619      	mov	r1, r3
 800fb0a:	68b8      	ldr	r0, [r7, #8]
 800fb0c:	f000 f972 	bl	800fdf4 <sendCanPkts>
			break;
 800fb10:	e028      	b.n	800fb64 <TransmitCanPkt+0x19c>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Hitachi_fault_injection_st;
 800fb12:	4b4f      	ldr	r3, [pc, #316]	; (800fc50 <TransmitCanPkt+0x288>)
 800fb14:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_INJECTION_t);
 800fb16:	2308      	movs	r3, #8
 800fb18:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fb1a:	4b50      	ldr	r3, [pc, #320]	; (800fc5c <TransmitCanPkt+0x294>)
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d102      	bne.n	800fb28 <TransmitCanPkt+0x160>
			{
				printf("\nSending Fault Injection data 2-O\n");
 800fb22:	4856      	ldr	r0, [pc, #344]	; (800fc7c <TransmitCanPkt+0x2b4>)
 800fb24:	f012 ffc0 	bl	8022aa8 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800fb28:	89fb      	ldrh	r3, [r7, #14]
 800fb2a:	88fa      	ldrh	r2, [r7, #6]
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	68b8      	ldr	r0, [r7, #8]
 800fb30:	f000 f960 	bl	800fdf4 <sendCanPkts>
			break;
 800fb34:	e016      	b.n	800fb64 <TransmitCanPkt+0x19c>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Tx_Temp_Main_Relays_st;
 800fb36:	4b52      	ldr	r3, [pc, #328]	; (800fc80 <TransmitCanPkt+0x2b8>)
 800fb38:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(RELAYS_t);
 800fb3a:	2314      	movs	r3, #20
 800fb3c:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fb3e:	4b47      	ldr	r3, [pc, #284]	; (800fc5c <TransmitCanPkt+0x294>)
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	2b01      	cmp	r3, #1
 800fb44:	d102      	bne.n	800fb4c <TransmitCanPkt+0x184>
			{
				printf("Sending Relays-O\n");
 800fb46:	484f      	ldr	r0, [pc, #316]	; (800fc84 <TransmitCanPkt+0x2bc>)
 800fb48:	f012 ffae 	bl	8022aa8 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fb4c:	89fb      	ldrh	r3, [r7, #14]
 800fb4e:	88fa      	ldrh	r2, [r7, #6]
 800fb50:	4619      	mov	r1, r3
 800fb52:	68b8      	ldr	r0, [r7, #8]
 800fb54:	f000 f94e 	bl	800fdf4 <sendCanPkts>
			break;
 800fb58:	e004      	b.n	800fb64 <TransmitCanPkt+0x19c>
		default:
			break;
 800fb5a:	bf00      	nop
 800fb5c:	e12e      	b.n	800fdbc <TransmitCanPkt+0x3f4>
			break;
 800fb5e:	bf00      	nop
 800fb60:	e12c      	b.n	800fdbc <TransmitCanPkt+0x3f4>
			break;
 800fb62:	bf00      	nop

		} /* 	switch((int)Ken_idetifier) for HITACHI 	*/
		break; /* case HITACHI: break */
 800fb64:	e12a      	b.n	800fdbc <TransmitCanPkt+0x3f4>
	/* _____________________________ HITACHI ________________________________________ */

	case SIEMENS:
	{
		/* _____________________________ SIEMENS ________________________________________ */
		switch((int)Ken_idetifier)
 800fb66:	88fb      	ldrh	r3, [r7, #6]
 800fb68:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800fb6c:	f300 8123 	bgt.w	800fdb6 <TransmitCanPkt+0x3ee>
 800fb70:	f240 2207 	movw	r2, #519	; 0x207
 800fb74:	4293      	cmp	r3, r2
 800fb76:	da3d      	bge.n	800fbf4 <TransmitCanPkt+0x22c>
 800fb78:	f240 2205 	movw	r2, #517	; 0x205
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	f000 808d 	beq.w	800fc9c <TransmitCanPkt+0x2d4>
 800fb82:	f240 2205 	movw	r2, #517	; 0x205
 800fb86:	4293      	cmp	r3, r2
 800fb88:	f300 8115 	bgt.w	800fdb6 <TransmitCanPkt+0x3ee>
 800fb8c:	f240 1219 	movw	r2, #281	; 0x119
 800fb90:	4293      	cmp	r3, r2
 800fb92:	d009      	beq.n	800fba8 <TransmitCanPkt+0x1e0>
 800fb94:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800fb98:	f340 810d 	ble.w	800fdb6 <TransmitCanPkt+0x3ee>
 800fb9c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	f200 8108 	bhi.w	800fdb6 <TransmitCanPkt+0x3ee>
 800fba6:	e013      	b.n	800fbd0 <TransmitCanPkt+0x208>
		{

		case EI_PROCESS_DATA:
			pp_ptr = &VitalData2MIE_st;
 800fba8:	4b37      	ldr	r3, [pc, #220]	; (800fc88 <TransmitCanPkt+0x2c0>)
 800fbaa:	60bb      	str	r3, [r7, #8]
			//				uc_size = sizeof(VITAL_DATA_t);
			uc_size =(VitalData2MIE_st.NoofDataBytes + sizeof(VitalData2MIE_st.NoofDataBytes)); /* +2 is by Considering */
 800fbac:	4b36      	ldr	r3, [pc, #216]	; (800fc88 <TransmitCanPkt+0x2c0>)
 800fbae:	881b      	ldrh	r3, [r3, #0]
 800fbb0:	3302      	adds	r3, #2
 800fbb2:	81fb      	strh	r3, [r7, #14]

			if(Debug_flag == 1)
 800fbb4:	4b29      	ldr	r3, [pc, #164]	; (800fc5c <TransmitCanPkt+0x294>)
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d102      	bne.n	800fbc2 <TransmitCanPkt+0x1fa>
			{
				printf("Sending Signals 2 MIE\n");
 800fbbc:	4833      	ldr	r0, [pc, #204]	; (800fc8c <TransmitCanPkt+0x2c4>)
 800fbbe:	f012 ff73 	bl	8022aa8 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fbc2:	89fb      	ldrh	r3, [r7, #14]
 800fbc4:	88fa      	ldrh	r2, [r7, #6]
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	68b8      	ldr	r0, [r7, #8]
 800fbca:	f000 f913 	bl	800fdf4 <sendCanPkts>
			break;
 800fbce:	e073      	b.n	800fcb8 <TransmitCanPkt+0x2f0>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Tx_Siemens_self_sharing_st;
 800fbd0:	4b2f      	ldr	r3, [pc, #188]	; (800fc90 <TransmitCanPkt+0x2c8>)
 800fbd2:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SIEMENS_SELF_SHARING_t);
 800fbd4:	2304      	movs	r3, #4
 800fbd6:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fbd8:	4b20      	ldr	r3, [pc, #128]	; (800fc5c <TransmitCanPkt+0x294>)
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d102      	bne.n	800fbe6 <TransmitCanPkt+0x21e>
			{
				printf("Sending Signals 2 MIE\n");
 800fbe0:	482a      	ldr	r0, [pc, #168]	; (800fc8c <TransmitCanPkt+0x2c4>)
 800fbe2:	f012 ff61 	bl	8022aa8 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fbe6:	89fb      	ldrh	r3, [r7, #14]
 800fbe8:	88fa      	ldrh	r2, [r7, #6]
 800fbea:	4619      	mov	r1, r3
 800fbec:	68b8      	ldr	r0, [r7, #8]
 800fbee:	f000 f901 	bl	800fdf4 <sendCanPkts>
			break;
 800fbf2:	e061      	b.n	800fcb8 <TransmitCanPkt+0x2f0>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &SiemensMain_Relays_st;
 800fbf4:	4b27      	ldr	r3, [pc, #156]	; (800fc94 <TransmitCanPkt+0x2cc>)
 800fbf6:	60bb      	str	r3, [r7, #8]

			uc_size = (EI_data.Siemens_st.Booloutputs % 8);
 800fbf8:	4b14      	ldr	r3, [pc, #80]	; (800fc4c <TransmitCanPkt+0x284>)
 800fbfa:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800fbfe:	f003 0307 	and.w	r3, r3, #7
 800fc02:	81fb      	strh	r3, [r7, #14]
			if (uc_size != 0)
 800fc04:	89fb      	ldrh	r3, [r7, #14]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d007      	beq.n	800fc1a <TransmitCanPkt+0x252>
			{
				uc_size = ((EI_data.Siemens_st.Booloutputs / 8)) + 1; //	including 0th buffer
 800fc0a:	4b10      	ldr	r3, [pc, #64]	; (800fc4c <TransmitCanPkt+0x284>)
 800fc0c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800fc10:	08db      	lsrs	r3, r3, #3
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	3301      	adds	r3, #1
 800fc16:	81fb      	strh	r3, [r7, #14]
 800fc18:	e004      	b.n	800fc24 <TransmitCanPkt+0x25c>
			}
			else
			{
				uc_size = (EI_data.Siemens_st.Booloutputs / 8);
 800fc1a:	4b0c      	ldr	r3, [pc, #48]	; (800fc4c <TransmitCanPkt+0x284>)
 800fc1c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800fc20:	08db      	lsrs	r3, r3, #3
 800fc22:	81fb      	strh	r3, [r7, #14]
			}

			SiemensMain_Relays_st.NoofDataBytes = uc_size;
 800fc24:	4a1b      	ldr	r2, [pc, #108]	; (800fc94 <TransmitCanPkt+0x2cc>)
 800fc26:	89fb      	ldrh	r3, [r7, #14]
 800fc28:	8013      	strh	r3, [r2, #0]
			//				printf("NoofDataBytes:%u\n",SiemensMain_Relays_st.NoofDataBytes);
			uc_size = uc_size + ( (sizeof(SiemensMain_Relays_st.NoofDataBytes)) + (sizeof(SiemensMain_Relays_st.VitalCRC)) );
 800fc2a:	89fb      	ldrh	r3, [r7, #14]
 800fc2c:	3304      	adds	r3, #4
 800fc2e:	81fb      	strh	r3, [r7, #14]
			//				printf("Relays2Other:%u\n",uc_size);
			if(Debug_flag == 1)
 800fc30:	4b0a      	ldr	r3, [pc, #40]	; (800fc5c <TransmitCanPkt+0x294>)
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d102      	bne.n	800fc3e <TransmitCanPkt+0x276>
			{
				printf("Sending Relays 2 Other\n");
 800fc38:	4817      	ldr	r0, [pc, #92]	; (800fc98 <TransmitCanPkt+0x2d0>)
 800fc3a:	f012 ff35 	bl	8022aa8 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fc3e:	89fb      	ldrh	r3, [r7, #14]
 800fc40:	88fa      	ldrh	r2, [r7, #6]
 800fc42:	4619      	mov	r1, r3
 800fc44:	68b8      	ldr	r0, [r7, #8]
 800fc46:	f000 f8d5 	bl	800fdf4 <sendCanPkts>
			break;
 800fc4a:	e035      	b.n	800fcb8 <TransmitCanPkt+0x2f0>
 800fc4c:	20000304 	.word	0x20000304
 800fc50:	2000195c 	.word	0x2000195c
 800fc54:	08026f0c 	.word	0x08026f0c
 800fc58:	200010e4 	.word	0x200010e4
 800fc5c:	20000645 	.word	0x20000645
 800fc60:	08026f28 	.word	0x08026f28
 800fc64:	20001964 	.word	0x20001964
 800fc68:	08026f40 	.word	0x08026f40
 800fc6c:	20001854 	.word	0x20001854
 800fc70:	08026f50 	.word	0x08026f50
 800fc74:	20001884 	.word	0x20001884
 800fc78:	08026f5c 	.word	0x08026f5c
 800fc7c:	08026f74 	.word	0x08026f74
 800fc80:	20002010 	.word	0x20002010
 800fc84:	08026f98 	.word	0x08026f98
 800fc88:	20003548 	.word	0x20003548
 800fc8c:	08026fac 	.word	0x08026fac
 800fc90:	20003520 	.word	0x20003520
 800fc94:	2000374c 	.word	0x2000374c
 800fc98:	08026fc4 	.word	0x08026fc4

		case CAN_FAULT_INJECTION:
			pp_ptr = &Siemens_fault_injection_st;
 800fc9c:	4b49      	ldr	r3, [pc, #292]	; (800fdc4 <TransmitCanPkt+0x3fc>)
 800fc9e:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SIEMENS_FAULT_INJECTION_t);
 800fca0:	2308      	movs	r3, #8
 800fca2:	81fb      	strh	r3, [r7, #14]
			printf("\nSending Fault Injection data 2-O\n");
 800fca4:	4848      	ldr	r0, [pc, #288]	; (800fdc8 <TransmitCanPkt+0x400>)
 800fca6:	f012 feff 	bl	8022aa8 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800fcaa:	89fb      	ldrh	r3, [r7, #14]
 800fcac:	88fa      	ldrh	r2, [r7, #6]
 800fcae:	4619      	mov	r1, r3
 800fcb0:	68b8      	ldr	r0, [r7, #8]
 800fcb2:	f000 f89f 	bl	800fdf4 <sendCanPkts>
			break;
 800fcb6:	bf00      	nop
		}
		break; /* case SIEMENS: break */
 800fcb8:	e07d      	b.n	800fdb6 <TransmitCanPkt+0x3ee>


	case MEDHA:
	{
		/* _____________________________ MEDHA ________________________________________ */
		switch((int)Ken_idetifier)
 800fcba:	88fb      	ldrh	r3, [r7, #6]
 800fcbc:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800fcc0:	dc7b      	bgt.n	800fdba <TransmitCanPkt+0x3f2>
 800fcc2:	f240 2207 	movw	r2, #519	; 0x207
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	da61      	bge.n	800fd8e <TransmitCanPkt+0x3c6>
 800fcca:	f240 2205 	movw	r2, #517	; 0x205
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d04f      	beq.n	800fd72 <TransmitCanPkt+0x3aa>
 800fcd2:	f240 2205 	movw	r2, #517	; 0x205
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	dc6f      	bgt.n	800fdba <TransmitCanPkt+0x3f2>
 800fcda:	f240 2202 	movw	r2, #514	; 0x202
 800fcde:	4293      	cmp	r3, r2
 800fce0:	dc6b      	bgt.n	800fdba <TransmitCanPkt+0x3f2>
 800fce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fce6:	dc21      	bgt.n	800fd2c <TransmitCanPkt+0x364>
 800fce8:	f240 1219 	movw	r2, #281	; 0x119
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d007      	beq.n	800fd00 <TransmitCanPkt+0x338>
 800fcf0:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800fcf4:	dd61      	ble.n	800fdba <TransmitCanPkt+0x3f2>
 800fcf6:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800fcfa:	2b01      	cmp	r3, #1
 800fcfc:	d85d      	bhi.n	800fdba <TransmitCanPkt+0x3f2>
 800fcfe:	e026      	b.n	800fd4e <TransmitCanPkt+0x386>
		{
		case EI_PROCESS_DATA:
			pp_ptr = &Medha_Relay_Sts_st;
 800fd00:	4b32      	ldr	r3, [pc, #200]	; (800fdcc <TransmitCanPkt+0x404>)
 800fd02:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_RELAY_STS_t);
 800fd04:	2330      	movs	r3, #48	; 0x30
 800fd06:	81fb      	strh	r3, [r7, #14]
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fd08:	89fb      	ldrh	r3, [r7, #14]
 800fd0a:	88fa      	ldrh	r2, [r7, #6]
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	68b8      	ldr	r0, [r7, #8]
 800fd10:	f000 f870 	bl	800fdf4 <sendCanPkts>
			if(Debug_flag == 1)
 800fd14:	4b2e      	ldr	r3, [pc, #184]	; (800fdd0 <TransmitCanPkt+0x408>)
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d14a      	bne.n	800fdb2 <TransmitCanPkt+0x3ea>
			{
				printf("SENT MEDHA SIGNAL DATA TO MIE:%lu\n",HAL_GetTick());
 800fd1c:	f005 fe2a 	bl	8015974 <HAL_GetTick>
 800fd20:	4603      	mov	r3, r0
 800fd22:	4619      	mov	r1, r3
 800fd24:	482b      	ldr	r0, [pc, #172]	; (800fdd4 <TransmitCanPkt+0x40c>)
 800fd26:	f012 fe23 	bl	8022970 <iprintf>
			}
			break;
 800fd2a:	e042      	b.n	800fdb2 <TransmitCanPkt+0x3ea>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Medha_ei_self_sharing_TX_st;
 800fd2c:	4b2a      	ldr	r3, [pc, #168]	; (800fdd8 <TransmitCanPkt+0x410>)
 800fd2e:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_EI_SELF_SHARING_t);
 800fd30:	2308      	movs	r3, #8
 800fd32:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fd34:	4b26      	ldr	r3, [pc, #152]	; (800fdd0 <TransmitCanPkt+0x408>)
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d102      	bne.n	800fd42 <TransmitCanPkt+0x37a>
			{
				printf("\nSending_2_O\n");
 800fd3c:	4827      	ldr	r0, [pc, #156]	; (800fddc <TransmitCanPkt+0x414>)
 800fd3e:	f012 feb3 	bl	8022aa8 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fd42:	89fb      	ldrh	r3, [r7, #14]
 800fd44:	88fa      	ldrh	r2, [r7, #6]
 800fd46:	4619      	mov	r1, r3
 800fd48:	68b8      	ldr	r0, [r7, #8]
 800fd4a:	f000 f853 	bl	800fdf4 <sendCanPkts>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800fd4e:	4b24      	ldr	r3, [pc, #144]	; (800fde0 <TransmitCanPkt+0x418>)
 800fd50:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800fd52:	2316      	movs	r3, #22
 800fd54:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fd56:	4b1e      	ldr	r3, [pc, #120]	; (800fdd0 <TransmitCanPkt+0x408>)
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	2b01      	cmp	r3, #1
 800fd5c:	d102      	bne.n	800fd64 <TransmitCanPkt+0x39c>
			{
				printf("\nHealth 2 MIE\n");
 800fd5e:	4821      	ldr	r0, [pc, #132]	; (800fde4 <TransmitCanPkt+0x41c>)
 800fd60:	f012 fea2 	bl	8022aa8 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fd64:	89fb      	ldrh	r3, [r7, #14]
 800fd66:	88fa      	ldrh	r2, [r7, #6]
 800fd68:	4619      	mov	r1, r3
 800fd6a:	68b8      	ldr	r0, [r7, #8]
 800fd6c:	f000 f842 	bl	800fdf4 <sendCanPkts>
			break;
 800fd70:	e020      	b.n	800fdb4 <TransmitCanPkt+0x3ec>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Medha_Fault_Injection_st;
 800fd72:	4b1d      	ldr	r3, [pc, #116]	; (800fde8 <TransmitCanPkt+0x420>)
 800fd74:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_FAULT_INJECTION_t);
 800fd76:	2304      	movs	r3, #4
 800fd78:	81fb      	strh	r3, [r7, #14]
			printf("\nSending Fault Injection data 2-O\n");
 800fd7a:	4813      	ldr	r0, [pc, #76]	; (800fdc8 <TransmitCanPkt+0x400>)
 800fd7c:	f012 fe94 	bl	8022aa8 <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fd80:	89fb      	ldrh	r3, [r7, #14]
 800fd82:	88fa      	ldrh	r2, [r7, #6]
 800fd84:	4619      	mov	r1, r3
 800fd86:	68b8      	ldr	r0, [r7, #8]
 800fd88:	f000 f834 	bl	800fdf4 <sendCanPkts>
			break;
 800fd8c:	e012      	b.n	800fdb4 <TransmitCanPkt+0x3ec>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Medha_Cur_Relay_Status_st;
 800fd8e:	4b17      	ldr	r3, [pc, #92]	; (800fdec <TransmitCanPkt+0x424>)
 800fd90:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_CUR_RELAY_STS_t);
 800fd92:	2384      	movs	r3, #132	; 0x84
 800fd94:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fd96:	4b0e      	ldr	r3, [pc, #56]	; (800fdd0 <TransmitCanPkt+0x408>)
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	2b01      	cmp	r3, #1
 800fd9c:	d102      	bne.n	800fda4 <TransmitCanPkt+0x3dc>
			{
				printf("\nRelay Data 2-O\n");
 800fd9e:	4814      	ldr	r0, [pc, #80]	; (800fdf0 <TransmitCanPkt+0x428>)
 800fda0:	f012 fe82 	bl	8022aa8 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fda4:	89fb      	ldrh	r3, [r7, #14]
 800fda6:	88fa      	ldrh	r2, [r7, #6]
 800fda8:	4619      	mov	r1, r3
 800fdaa:	68b8      	ldr	r0, [r7, #8]
 800fdac:	f000 f822 	bl	800fdf4 <sendCanPkts>
			break;
 800fdb0:	e000      	b.n	800fdb4 <TransmitCanPkt+0x3ec>
			break;
 800fdb2:	bf00      	nop
		}

		break;
 800fdb4:	e001      	b.n	800fdba <TransmitCanPkt+0x3f2>
		break; /* case SIEMENS: break */
 800fdb6:	bf00      	nop
 800fdb8:	e000      	b.n	800fdbc <TransmitCanPkt+0x3f4>
		break;
 800fdba:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 800fdbc:	3710      	adds	r7, #16
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	20003518 	.word	0x20003518
 800fdc8:	08026f74 	.word	0x08026f74
 800fdcc:	20002670 	.word	0x20002670
 800fdd0:	20000645 	.word	0x20000645
 800fdd4:	08026fdc 	.word	0x08026fdc
 800fdd8:	200026b0 	.word	0x200026b0
 800fddc:	08027000 	.word	0x08027000
 800fde0:	20001964 	.word	0x20001964
 800fde4:	08026f40 	.word	0x08026f40
 800fde8:	200026ac 	.word	0x200026ac
 800fdec:	200026c8 	.word	0x200026c8
 800fdf0:	08027010 	.word	0x08027010

0800fdf4 <sendCanPkts>:

void sendCanPkts(void *sptr, int size,enum enumCanId canId)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b088      	sub	sp, #32
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	60f8      	str	r0, [r7, #12]
 800fdfc:	60b9      	str	r1, [r7, #8]
 800fdfe:	4613      	mov	r3, r2
 800fe00:	80fb      	strh	r3, [r7, #6]
	int32_t j = size,seqNo=0;
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	61fb      	str	r3, [r7, #28]
 800fe06:	2300      	movs	r3, #0
 800fe08:	61bb      	str	r3, [r7, #24]
	char *cptr = sptr;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	617b      	str	r3, [r7, #20]
	while(j > 0)
 800fe0e:	e019      	b.n	800fe44 <sendCanPkts+0x50>
	{
		//printf("J=%u\n",j);
		if(j < 7)
 800fe10:	69fb      	ldr	r3, [r7, #28]
 800fe12:	2b06      	cmp	r3, #6
 800fe14:	dc07      	bgt.n	800fe26 <sendCanPkts+0x32>
		{
			CAN_transmit(canId,cptr,j+1,seqNo);
 800fe16:	88f8      	ldrh	r0, [r7, #6]
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	1c5a      	adds	r2, r3, #1
 800fe1c:	69bb      	ldr	r3, [r7, #24]
 800fe1e:	6979      	ldr	r1, [r7, #20]
 800fe20:	f000 f818 	bl	800fe54 <CAN_transmit>
 800fe24:	e005      	b.n	800fe32 <sendCanPkts+0x3e>
		}
		else
		{
			CAN_transmit(canId,cptr,8,seqNo);
 800fe26:	88f8      	ldrh	r0, [r7, #6]
 800fe28:	69bb      	ldr	r3, [r7, #24]
 800fe2a:	2208      	movs	r2, #8
 800fe2c:	6979      	ldr	r1, [r7, #20]
 800fe2e:	f000 f811 	bl	800fe54 <CAN_transmit>
		}
		cptr += 7;
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	3307      	adds	r3, #7
 800fe36:	617b      	str	r3, [r7, #20]
		j-=7;
 800fe38:	69fb      	ldr	r3, [r7, #28]
 800fe3a:	3b07      	subs	r3, #7
 800fe3c:	61fb      	str	r3, [r7, #28]
		seqNo++;
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	3301      	adds	r3, #1
 800fe42:	61bb      	str	r3, [r7, #24]
	while(j > 0)
 800fe44:	69fb      	ldr	r3, [r7, #28]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	dce2      	bgt.n	800fe10 <sendCanPkts+0x1c>
	}
}
 800fe4a:	bf00      	nop
 800fe4c:	bf00      	nop
 800fe4e:	3720      	adds	r7, #32
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}

0800fe54 <CAN_transmit>:

void CAN_transmit (int can_id ,char* datPtr,int len,int seqNo)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b088      	sub	sp, #32
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	60f8      	str	r0, [r7, #12]
 800fe5c:	60b9      	str	r1, [r7, #8]
 800fe5e:	607a      	str	r2, [r7, #4]
 800fe60:	603b      	str	r3, [r7, #0]
	char i=0;
 800fe62:	2300      	movs	r3, #0
 800fe64:	77fb      	strb	r3, [r7, #31]
	uint32_t CAN_TxWaitClk = HAL_GetTick();
 800fe66:	f005 fd85 	bl	8015974 <HAL_GetTick>
 800fe6a:	61b8      	str	r0, [r7, #24]

	//	CAN_TxMsg.id = can_id;
	TxData[0] = seqNo;
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	b2da      	uxtb	r2, r3
 800fe70:	4b4d      	ldr	r3, [pc, #308]	; (800ffa8 <CAN_transmit+0x154>)
 800fe72:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len-1; i++)
 800fe74:	2300      	movs	r3, #0
 800fe76:	77fb      	strb	r3, [r7, #31]
 800fe78:	e00a      	b.n	800fe90 <CAN_transmit+0x3c>
	{
		TxData[i+1] = *(datPtr+i);
 800fe7a:	7ffb      	ldrb	r3, [r7, #31]
 800fe7c:	68ba      	ldr	r2, [r7, #8]
 800fe7e:	441a      	add	r2, r3
 800fe80:	7ffb      	ldrb	r3, [r7, #31]
 800fe82:	3301      	adds	r3, #1
 800fe84:	7811      	ldrb	r1, [r2, #0]
 800fe86:	4a48      	ldr	r2, [pc, #288]	; (800ffa8 <CAN_transmit+0x154>)
 800fe88:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len-1; i++)
 800fe8a:	7ffb      	ldrb	r3, [r7, #31]
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	77fb      	strb	r3, [r7, #31]
 800fe90:	7ffa      	ldrb	r2, [r7, #31]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	3b01      	subs	r3, #1
 800fe96:	429a      	cmp	r2, r3
 800fe98:	dbef      	blt.n	800fe7a <CAN_transmit+0x26>
	}
	if(can_id < (0x200) )
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fea0:	da3b      	bge.n	800ff1a <CAN_transmit+0xc6>
	{
		while(len!=0)
 800fea2:	e036      	b.n	800ff12 <CAN_transmit+0xbe>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader2.IDE = CAN_ID_STD;
 800fea4:	4b41      	ldr	r3, [pc, #260]	; (800ffac <CAN_transmit+0x158>)
 800fea6:	2200      	movs	r2, #0
 800fea8:	609a      	str	r2, [r3, #8]
			TxHeader2.StdId=can_id;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	4a3f      	ldr	r2, [pc, #252]	; (800ffac <CAN_transmit+0x158>)
 800feae:	6013      	str	r3, [r2, #0]
			TxHeader2.RTR=CAN_RTR_DATA;
 800feb0:	4b3e      	ldr	r3, [pc, #248]	; (800ffac <CAN_transmit+0x158>)
 800feb2:	2200      	movs	r2, #0
 800feb4:	60da      	str	r2, [r3, #12]
			TxHeader2.DLC=len;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4a3c      	ldr	r2, [pc, #240]	; (800ffac <CAN_transmit+0x158>)
 800feba:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 800febc:	2300      	movs	r3, #0
 800febe:	75bb      	strb	r3, [r7, #22]
			//				{
			//					printf("%02X ",TxData[i]);
			//				}
			//				printf("\n");
			//			}
			if((Error=HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData, &pTxMailbox2))!=HAL_OK)
 800fec0:	4b3b      	ldr	r3, [pc, #236]	; (800ffb0 <CAN_transmit+0x15c>)
 800fec2:	4a39      	ldr	r2, [pc, #228]	; (800ffa8 <CAN_transmit+0x154>)
 800fec4:	4939      	ldr	r1, [pc, #228]	; (800ffac <CAN_transmit+0x158>)
 800fec6:	483b      	ldr	r0, [pc, #236]	; (800ffb4 <CAN_transmit+0x160>)
 800fec8:	f005 fffa 	bl	8015ec0 <HAL_CAN_AddTxMessage>
 800fecc:	4603      	mov	r3, r0
 800fece:	461a      	mov	r2, r3
 800fed0:	4b39      	ldr	r3, [pc, #228]	; (800ffb8 <CAN_transmit+0x164>)
 800fed2:	701a      	strb	r2, [r3, #0]
 800fed4:	4b38      	ldr	r3, [pc, #224]	; (800ffb8 <CAN_transmit+0x164>)
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d00d      	beq.n	800fef8 <CAN_transmit+0xa4>
			{
				printf("CAN2 Tx Fail\n");
 800fedc:	4837      	ldr	r0, [pc, #220]	; (800ffbc <CAN_transmit+0x168>)
 800fede:	f012 fde3 	bl	8022aa8 <puts>
				return;
 800fee2:	e05e      	b.n	800ffa2 <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 800fee4:	69b8      	ldr	r0, [r7, #24]
 800fee6:	f7fe ffbb 	bl	800ee60 <HAL_Elaps_Ticks>
 800feea:	4603      	mov	r3, r0
 800feec:	2b64      	cmp	r3, #100	; 0x64
 800feee:	d903      	bls.n	800fef8 <CAN_transmit+0xa4>
				{
					printf("CAN2 Tx Fail\n");
 800fef0:	4832      	ldr	r0, [pc, #200]	; (800ffbc <CAN_transmit+0x168>)
 800fef2:	f012 fdd9 	bl	8022aa8 <puts>
					return;
 800fef6:	e054      	b.n	800ffa2 <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
 800fef8:	4b2d      	ldr	r3, [pc, #180]	; (800ffb0 <CAN_transmit+0x15c>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	4619      	mov	r1, r3
 800fefe:	482d      	ldr	r0, [pc, #180]	; (800ffb4 <CAN_transmit+0x160>)
 800ff00:	f006 f8ae 	bl	8016060 <HAL_CAN_IsTxMessagePending>
 800ff04:	4603      	mov	r3, r0
 800ff06:	75bb      	strb	r3, [r7, #22]
 800ff08:	7dbb      	ldrb	r3, [r7, #22]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d1ea      	bne.n	800fee4 <CAN_transmit+0x90>
				}
			}

			len=0;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	607b      	str	r3, [r7, #4]
		while(len!=0)
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d1c5      	bne.n	800fea4 <CAN_transmit+0x50>
 800ff18:	e043      	b.n	800ffa2 <CAN_transmit+0x14e>
		}
	}
	else
	{

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800ff1a:	4929      	ldr	r1, [pc, #164]	; (800ffc0 <CAN_transmit+0x16c>)
 800ff1c:	4829      	ldr	r0, [pc, #164]	; (800ffc4 <CAN_transmit+0x170>)
 800ff1e:	f7f0 f98f 	bl	8000240 <strcmp>
 800ff22:	4603      	mov	r3, r0
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d03b      	beq.n	800ffa0 <CAN_transmit+0x14c>
		{
			return;
		}

		while(len!=0)
 800ff28:	e036      	b.n	800ff98 <CAN_transmit+0x144>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader3.IDE = CAN_ID_STD;
 800ff2a:	4b27      	ldr	r3, [pc, #156]	; (800ffc8 <CAN_transmit+0x174>)
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	609a      	str	r2, [r3, #8]
			TxHeader3.StdId=can_id;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	4a25      	ldr	r2, [pc, #148]	; (800ffc8 <CAN_transmit+0x174>)
 800ff34:	6013      	str	r3, [r2, #0]
			TxHeader3.RTR=CAN_RTR_DATA;
 800ff36:	4b24      	ldr	r3, [pc, #144]	; (800ffc8 <CAN_transmit+0x174>)
 800ff38:	2200      	movs	r2, #0
 800ff3a:	60da      	str	r2, [r3, #12]
			TxHeader3.DLC=len;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	4a22      	ldr	r2, [pc, #136]	; (800ffc8 <CAN_transmit+0x174>)
 800ff40:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 800ff42:	2300      	movs	r3, #0
 800ff44:	75fb      	strb	r3, [r7, #23]
			//				}
			//				printf("\n");
			//			}

			//printf("TxHeader1.DLC:%u\n",TxHeader1.DLC);
			if((Error=HAL_CAN_AddTxMessage(&hcan3, &TxHeader3, TxData, &pTxMailbox3))!=HAL_OK)
 800ff46:	4b21      	ldr	r3, [pc, #132]	; (800ffcc <CAN_transmit+0x178>)
 800ff48:	4a17      	ldr	r2, [pc, #92]	; (800ffa8 <CAN_transmit+0x154>)
 800ff4a:	491f      	ldr	r1, [pc, #124]	; (800ffc8 <CAN_transmit+0x174>)
 800ff4c:	4820      	ldr	r0, [pc, #128]	; (800ffd0 <CAN_transmit+0x17c>)
 800ff4e:	f005 ffb7 	bl	8015ec0 <HAL_CAN_AddTxMessage>
 800ff52:	4603      	mov	r3, r0
 800ff54:	461a      	mov	r2, r3
 800ff56:	4b18      	ldr	r3, [pc, #96]	; (800ffb8 <CAN_transmit+0x164>)
 800ff58:	701a      	strb	r2, [r3, #0]
 800ff5a:	4b17      	ldr	r3, [pc, #92]	; (800ffb8 <CAN_transmit+0x164>)
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d00d      	beq.n	800ff7e <CAN_transmit+0x12a>
			{
				printf("CAN3 Tx Fail\n");
 800ff62:	481c      	ldr	r0, [pc, #112]	; (800ffd4 <CAN_transmit+0x180>)
 800ff64:	f012 fda0 	bl	8022aa8 <puts>
				return;
 800ff68:	e01b      	b.n	800ffa2 <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 800ff6a:	69b8      	ldr	r0, [r7, #24]
 800ff6c:	f7fe ff78 	bl	800ee60 <HAL_Elaps_Ticks>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b64      	cmp	r3, #100	; 0x64
 800ff74:	d903      	bls.n	800ff7e <CAN_transmit+0x12a>
				{
					printf("CAN3 Tx Fail\n");
 800ff76:	4817      	ldr	r0, [pc, #92]	; (800ffd4 <CAN_transmit+0x180>)
 800ff78:	f012 fd96 	bl	8022aa8 <puts>
					return;
 800ff7c:	e011      	b.n	800ffa2 <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
 800ff7e:	4b13      	ldr	r3, [pc, #76]	; (800ffcc <CAN_transmit+0x178>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	4619      	mov	r1, r3
 800ff84:	4812      	ldr	r0, [pc, #72]	; (800ffd0 <CAN_transmit+0x17c>)
 800ff86:	f006 f86b 	bl	8016060 <HAL_CAN_IsTxMessagePending>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	75fb      	strb	r3, [r7, #23]
 800ff8e:	7dfb      	ldrb	r3, [r7, #23]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d1ea      	bne.n	800ff6a <CAN_transmit+0x116>
				}
			}
			len=0;
 800ff94:	2300      	movs	r3, #0
 800ff96:	607b      	str	r3, [r7, #4]
		while(len!=0)
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d1c5      	bne.n	800ff2a <CAN_transmit+0xd6>
 800ff9e:	e000      	b.n	800ffa2 <CAN_transmit+0x14e>
			return;
 800ffa0:	bf00      	nop
		}
	}
}
 800ffa2:	3720      	adds	r7, #32
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}
 800ffa8:	20009b80 	.word	0x20009b80
 800ffac:	20009b00 	.word	0x20009b00
 800ffb0:	20009b30 	.word	0x20009b30
 800ffb4:	20009b8c 	.word	0x20009b8c
 800ffb8:	20009b88 	.word	0x20009b88
 800ffbc:	08027020 	.word	0x08027020
 800ffc0:	08027030 	.word	0x08027030
 800ffc4:	20000305 	.word	0x20000305
 800ffc8:	20009b18 	.word	0x20009b18
 800ffcc:	20009b34 	.word	0x20009b34
 800ffd0:	20009bf0 	.word	0x20009bf0
 800ffd4:	0802703c 	.word	0x0802703c

0800ffd8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	4a3e      	ldr	r2, [pc, #248]	; (80100e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d175      	bne.n	80100d6 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 800ffea:	4b3e      	ldr	r3, [pc, #248]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800ffec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fff0:	881b      	ldrh	r3, [r3, #0]
 800fff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fff6:	d104      	bne.n	8010002 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 800fff8:	4b3a      	ldr	r3, [pc, #232]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fffa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fffe:	2200      	movs	r2, #0
 8010000:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 8010002:	4b39      	ldr	r3, [pc, #228]	; (80100e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8010004:	4a39      	ldr	r2, [pc, #228]	; (80100ec <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8010006:	2100      	movs	r1, #0
 8010008:	4839      	ldr	r0, [pc, #228]	; (80100f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 801000a:	f006 f84d 	bl	80160a8 <HAL_CAN_GetRxMessage>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	d001      	beq.n	8010018 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 8010014:	f003 ff22 	bl	8013e5c <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 8010018:	4b32      	ldr	r3, [pc, #200]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801001a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801001e:	881b      	ldrh	r3, [r3, #0]
 8010020:	4a30      	ldr	r2, [pc, #192]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010022:	011b      	lsls	r3, r3, #4
 8010024:	4413      	add	r3, r2
 8010026:	330f      	adds	r3, #15
 8010028:	2203      	movs	r2, #3
 801002a:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 801002c:	4b2f      	ldr	r3, [pc, #188]	; (80100ec <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 801002e:	691a      	ldr	r2, [r3, #16]
 8010030:	4b2c      	ldr	r3, [pc, #176]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010032:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010036:	881b      	ldrh	r3, [r3, #0]
 8010038:	b2d1      	uxtb	r1, r2
 801003a:	4a2a      	ldr	r2, [pc, #168]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801003c:	011b      	lsls	r3, r3, #4
 801003e:	4413      	add	r3, r2
 8010040:	330c      	adds	r3, #12
 8010042:	460a      	mov	r2, r1
 8010044:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 8010046:	4b29      	ldr	r3, [pc, #164]	; (80100ec <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8010048:	689a      	ldr	r2, [r3, #8]
 801004a:	4b26      	ldr	r3, [pc, #152]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801004c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010050:	881b      	ldrh	r3, [r3, #0]
 8010052:	b2d1      	uxtb	r1, r2
 8010054:	4a23      	ldr	r2, [pc, #140]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010056:	011b      	lsls	r3, r3, #4
 8010058:	4413      	add	r3, r2
 801005a:	330d      	adds	r3, #13
 801005c:	460a      	mov	r2, r1
 801005e:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 8010060:	4b22      	ldr	r3, [pc, #136]	; (80100ec <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8010062:	68da      	ldr	r2, [r3, #12]
 8010064:	4b1f      	ldr	r3, [pc, #124]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010066:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801006a:	881b      	ldrh	r3, [r3, #0]
 801006c:	b2d1      	uxtb	r1, r2
 801006e:	4a1d      	ldr	r2, [pc, #116]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010070:	011b      	lsls	r3, r3, #4
 8010072:	4413      	add	r3, r2
 8010074:	330e      	adds	r3, #14
 8010076:	460a      	mov	r2, r1
 8010078:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 801007a:	4b1a      	ldr	r3, [pc, #104]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801007c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010080:	881b      	ldrh	r3, [r3, #0]
 8010082:	4618      	mov	r0, r3
 8010084:	4b19      	ldr	r3, [pc, #100]	; (80100ec <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8010086:	681a      	ldr	r2, [r3, #0]
 8010088:	4916      	ldr	r1, [pc, #88]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801008a:	0103      	lsls	r3, r0, #4
 801008c:	440b      	add	r3, r1
 801008e:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 8010090:	4b14      	ldr	r3, [pc, #80]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010092:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010096:	881b      	ldrh	r3, [r3, #0]
 8010098:	4a12      	ldr	r2, [pc, #72]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801009a:	011b      	lsls	r3, r3, #4
 801009c:	4413      	add	r3, r2
 801009e:	330e      	adds	r3, #14
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d117      	bne.n	80100d6 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 80100a6:	4b0f      	ldr	r3, [pc, #60]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80100a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80100ac:	881b      	ldrh	r3, [r3, #0]
 80100ae:	011b      	lsls	r3, r3, #4
 80100b0:	4a0c      	ldr	r2, [pc, #48]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80100b2:	4413      	add	r3, r2
 80100b4:	3304      	adds	r3, #4
 80100b6:	490c      	ldr	r1, [pc, #48]	; (80100e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80100b8:	461a      	mov	r2, r3
 80100ba:	460b      	mov	r3, r1
 80100bc:	cb03      	ldmia	r3!, {r0, r1}
 80100be:	6010      	str	r0, [r2, #0]
 80100c0:	6051      	str	r1, [r2, #4]
			canRead.In++;
 80100c2:	4b08      	ldr	r3, [pc, #32]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80100c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80100c8:	881b      	ldrh	r3, [r3, #0]
 80100ca:	3301      	adds	r3, #1
 80100cc:	b29a      	uxth	r2, r3
 80100ce:	4b05      	ldr	r3, [pc, #20]	; (80100e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80100d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80100d4:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80100d6:	bf00      	nop
 80100d8:	3708      	adds	r7, #8
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	40003400 	.word	0x40003400
 80100e4:	20005afc 	.word	0x20005afc
 80100e8:	20009b78 	.word	0x20009b78
 80100ec:	20009b54 	.word	0x20009b54
 80100f0:	20009bf0 	.word	0x20009bf0

080100f4 <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 80100fc:	4b42      	ldr	r3, [pc, #264]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80100fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010102:	881b      	ldrh	r3, [r3, #0]
 8010104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010108:	d104      	bne.n	8010114 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 801010a:	4b3f      	ldr	r3, [pc, #252]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801010c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010110:	2200      	movs	r2, #0
 8010112:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 8010114:	4b3d      	ldr	r3, [pc, #244]	; (801020c <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8010116:	4a3e      	ldr	r2, [pc, #248]	; (8010210 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010118:	2101      	movs	r1, #1
 801011a:	483e      	ldr	r0, [pc, #248]	; (8010214 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 801011c:	f005 ffc4 	bl	80160a8 <HAL_CAN_GetRxMessage>
 8010120:	4603      	mov	r3, r0
 8010122:	461a      	mov	r2, r3
 8010124:	4b3c      	ldr	r3, [pc, #240]	; (8010218 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8010126:	701a      	strb	r2, [r3, #0]
 8010128:	4b3b      	ldr	r3, [pc, #236]	; (8010218 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d007      	beq.n	8010140 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 8010130:	4b39      	ldr	r3, [pc, #228]	; (8010218 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	4619      	mov	r1, r3
 8010136:	4839      	ldr	r0, [pc, #228]	; (801021c <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8010138:	f012 fc1a 	bl	8022970 <iprintf>
		Error_Handler();
 801013c:	f003 fe8e 	bl	8013e5c <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 8010140:	4b31      	ldr	r3, [pc, #196]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010142:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010146:	881b      	ldrh	r3, [r3, #0]
 8010148:	4a2f      	ldr	r2, [pc, #188]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801014a:	011b      	lsls	r3, r3, #4
 801014c:	4413      	add	r3, r2
 801014e:	330f      	adds	r3, #15
 8010150:	2202      	movs	r2, #2
 8010152:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 8010154:	4b2e      	ldr	r3, [pc, #184]	; (8010210 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010156:	691a      	ldr	r2, [r3, #16]
 8010158:	4b2b      	ldr	r3, [pc, #172]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801015a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801015e:	881b      	ldrh	r3, [r3, #0]
 8010160:	b2d1      	uxtb	r1, r2
 8010162:	4a29      	ldr	r2, [pc, #164]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010164:	011b      	lsls	r3, r3, #4
 8010166:	4413      	add	r3, r2
 8010168:	330c      	adds	r3, #12
 801016a:	460a      	mov	r2, r1
 801016c:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 801016e:	4b28      	ldr	r3, [pc, #160]	; (8010210 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010170:	689a      	ldr	r2, [r3, #8]
 8010172:	4b25      	ldr	r3, [pc, #148]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010174:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010178:	881b      	ldrh	r3, [r3, #0]
 801017a:	b2d1      	uxtb	r1, r2
 801017c:	4a22      	ldr	r2, [pc, #136]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801017e:	011b      	lsls	r3, r3, #4
 8010180:	4413      	add	r3, r2
 8010182:	330d      	adds	r3, #13
 8010184:	460a      	mov	r2, r1
 8010186:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 8010188:	4b21      	ldr	r3, [pc, #132]	; (8010210 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 801018a:	68da      	ldr	r2, [r3, #12]
 801018c:	4b1e      	ldr	r3, [pc, #120]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801018e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010192:	881b      	ldrh	r3, [r3, #0]
 8010194:	b2d1      	uxtb	r1, r2
 8010196:	4a1c      	ldr	r2, [pc, #112]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010198:	011b      	lsls	r3, r3, #4
 801019a:	4413      	add	r3, r2
 801019c:	330e      	adds	r3, #14
 801019e:	460a      	mov	r2, r1
 80101a0:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 80101a2:	4b19      	ldr	r3, [pc, #100]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80101a4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80101a8:	881b      	ldrh	r3, [r3, #0]
 80101aa:	4618      	mov	r0, r3
 80101ac:	4b18      	ldr	r3, [pc, #96]	; (8010210 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	4915      	ldr	r1, [pc, #84]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80101b2:	0103      	lsls	r3, r0, #4
 80101b4:	440b      	add	r3, r1
 80101b6:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 80101b8:	4b13      	ldr	r3, [pc, #76]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80101ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80101be:	881b      	ldrh	r3, [r3, #0]
 80101c0:	4a11      	ldr	r2, [pc, #68]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80101c2:	011b      	lsls	r3, r3, #4
 80101c4:	4413      	add	r3, r2
 80101c6:	330e      	adds	r3, #14
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d117      	bne.n	80101fe <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 80101ce:	4b0e      	ldr	r3, [pc, #56]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80101d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80101d4:	881b      	ldrh	r3, [r3, #0]
 80101d6:	011b      	lsls	r3, r3, #4
 80101d8:	4a0b      	ldr	r2, [pc, #44]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80101da:	4413      	add	r3, r2
 80101dc:	3304      	adds	r3, #4
 80101de:	490b      	ldr	r1, [pc, #44]	; (801020c <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 80101e0:	461a      	mov	r2, r3
 80101e2:	460b      	mov	r3, r1
 80101e4:	cb03      	ldmia	r3!, {r0, r1}
 80101e6:	6010      	str	r0, [r2, #0]
 80101e8:	6051      	str	r1, [r2, #4]
		canRead.In++;
 80101ea:	4b07      	ldr	r3, [pc, #28]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80101ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80101f0:	881b      	ldrh	r3, [r3, #0]
 80101f2:	3301      	adds	r3, #1
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	4b04      	ldr	r3, [pc, #16]	; (8010208 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80101f8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80101fc:	801a      	strh	r2, [r3, #0]
	}
}
 80101fe:	bf00      	nop
 8010200:	3708      	adds	r7, #8
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop
 8010208:	20005afc 	.word	0x20005afc
 801020c:	20009b70 	.word	0x20009b70
 8010210:	20009b38 	.word	0x20009b38
 8010214:	20009b8c 	.word	0x20009b8c
 8010218:	20009b88 	.word	0x20009b88
 801021c:	0802704c 	.word	0x0802704c

08010220 <canDataReady>:


unsigned char canDataReady()
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 8010226:	2300      	movs	r3, #0
 8010228:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 801022a:	4b27      	ldr	r3, [pc, #156]	; (80102c8 <canDataReady+0xa8>)
 801022c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010230:	881a      	ldrh	r2, [r3, #0]
 8010232:	4b25      	ldr	r3, [pc, #148]	; (80102c8 <canDataReady+0xa8>)
 8010234:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010238:	885b      	ldrh	r3, [r3, #2]
 801023a:	429a      	cmp	r2, r3
 801023c:	d101      	bne.n	8010242 <canDataReady+0x22>
	{
		return 0;
 801023e:	2300      	movs	r3, #0
 8010240:	e03e      	b.n	80102c0 <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 8010242:	4b21      	ldr	r3, [pc, #132]	; (80102c8 <canDataReady+0xa8>)
 8010244:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010248:	885b      	ldrh	r3, [r3, #2]
 801024a:	3301      	adds	r3, #1
 801024c:	607b      	str	r3, [r7, #4]
 801024e:	e02e      	b.n	80102ae <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 8010250:	4b1d      	ldr	r3, [pc, #116]	; (80102c8 <canDataReady+0xa8>)
 8010252:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010256:	885b      	ldrh	r3, [r3, #2]
 8010258:	011b      	lsls	r3, r3, #4
 801025a:	4a1b      	ldr	r2, [pc, #108]	; (80102c8 <canDataReady+0xa8>)
 801025c:	1898      	adds	r0, r3, r2
 801025e:	4b1a      	ldr	r3, [pc, #104]	; (80102c8 <canDataReady+0xa8>)
 8010260:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010264:	881b      	ldrh	r3, [r3, #0]
 8010266:	011b      	lsls	r3, r3, #4
 8010268:	4a17      	ldr	r2, [pc, #92]	; (80102c8 <canDataReady+0xa8>)
 801026a:	4413      	add	r3, r2
 801026c:	2210      	movs	r2, #16
 801026e:	4619      	mov	r1, r3
 8010270:	f012 fa5e 	bl	8022730 <memcmp>
 8010274:	4603      	mov	r3, r0
 8010276:	2b00      	cmp	r3, #0
 8010278:	d116      	bne.n	80102a8 <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 801027a:	4b13      	ldr	r3, [pc, #76]	; (80102c8 <canDataReady+0xa8>)
 801027c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010280:	885b      	ldrh	r3, [r3, #2]
 8010282:	011b      	lsls	r3, r3, #4
 8010284:	4a10      	ldr	r2, [pc, #64]	; (80102c8 <canDataReady+0xa8>)
 8010286:	4413      	add	r3, r2
 8010288:	2210      	movs	r2, #16
 801028a:	2100      	movs	r1, #0
 801028c:	4618      	mov	r0, r3
 801028e:	f012 fa87 	bl	80227a0 <memset>
			canRead.Out++;
 8010292:	4b0d      	ldr	r3, [pc, #52]	; (80102c8 <canDataReady+0xa8>)
 8010294:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010298:	885b      	ldrh	r3, [r3, #2]
 801029a:	3301      	adds	r3, #1
 801029c:	b29a      	uxth	r2, r3
 801029e:	4b0a      	ldr	r3, [pc, #40]	; (80102c8 <canDataReady+0xa8>)
 80102a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80102a4:	805a      	strh	r2, [r3, #2]
			break;
 80102a6:	e00a      	b.n	80102be <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	3301      	adds	r3, #1
 80102ac:	607b      	str	r3, [r7, #4]
 80102ae:	4b06      	ldr	r3, [pc, #24]	; (80102c8 <canDataReady+0xa8>)
 80102b0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80102b4:	881b      	ldrh	r3, [r3, #0]
 80102b6:	461a      	mov	r2, r3
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d3c8      	bcc.n	8010250 <canDataReady+0x30>
		}
	}
	return 1;
 80102be:	2301      	movs	r3, #1
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3708      	adds	r7, #8
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	20005afc 	.word	0x20005afc

080102cc <readCanToStructs>:

void readCanToStructs(void)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b08e      	sub	sp, #56	; 0x38
 80102d0:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 80102d2:	2300      	movs	r3, #0
 80102d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80102d8:	2300      	movs	r3, #0
 80102da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80102de:	2300      	movs	r3, #0
 80102e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 80102e4:	2300      	movs	r3, #0
 80102e6:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 80102e8:	4bc0      	ldr	r3, [pc, #768]	; (80105ec <readCanToStructs+0x320>)
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	2b03      	cmp	r3, #3
 80102ee:	f002 8640 	beq.w	8012f72 <readCanToStructs+0x2ca6>
 80102f2:	2b03      	cmp	r3, #3
 80102f4:	f302 8644 	bgt.w	8012f80 <readCanToStructs+0x2cb4>
 80102f8:	2b01      	cmp	r3, #1
 80102fa:	d004      	beq.n	8010306 <readCanToStructs+0x3a>
 80102fc:	2b02      	cmp	r3, #2
 80102fe:	f001 87f4 	beq.w	80122ea <readCanToStructs+0x201e>
		/* __________ MEDHA _________ */
	}
	break;

	default:
		break;
 8010302:	f002 be3d 	b.w	8012f80 <readCanToStructs+0x2cb4>
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8010306:	4bba      	ldr	r3, [pc, #744]	; (80105f0 <readCanToStructs+0x324>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	09db      	lsrs	r3, r3, #7
 801030c:	f003 0301 	and.w	r3, r3, #1
 8010310:	2b00      	cmp	r3, #0
 8010312:	f042 8637 	bne.w	8012f84 <readCanToStructs+0x2cb8>
		while(canDataReady())
 8010316:	f001 b92f 	b.w	8011578 <readCanToStructs+0x12ac>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 801031a:	4bb6      	ldr	r3, [pc, #728]	; (80105f4 <readCanToStructs+0x328>)
 801031c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010320:	885b      	ldrh	r3, [r3, #2]
 8010322:	4ab4      	ldr	r2, [pc, #720]	; (80105f4 <readCanToStructs+0x328>)
 8010324:	011b      	lsls	r3, r3, #4
 8010326:	4413      	add	r3, r2
 8010328:	330f      	adds	r3, #15
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	3b01      	subs	r3, #1
 801032e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8010332:	4bb0      	ldr	r3, [pc, #704]	; (80105f4 <readCanToStructs+0x328>)
 8010334:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010338:	885b      	ldrh	r3, [r3, #2]
 801033a:	4aae      	ldr	r2, [pc, #696]	; (80105f4 <readCanToStructs+0x328>)
 801033c:	011b      	lsls	r3, r3, #4
 801033e:	4413      	add	r3, r2
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8010346:	f201 80f4 	bhi.w	8011532 <readCanToStructs+0x1266>
 801034a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801034e:	d80a      	bhi.n	8010366 <readCanToStructs+0x9a>
 8010350:	f240 1203 	movw	r2, #259	; 0x103
 8010354:	4293      	cmp	r3, r2
 8010356:	d01f      	beq.n	8010398 <readCanToStructs+0xcc>
 8010358:	f240 1209 	movw	r2, #265	; 0x109
 801035c:	4293      	cmp	r3, r2
 801035e:	f000 80f1 	beq.w	8010544 <readCanToStructs+0x278>
				break;
 8010362:	f001 b8e6 	b.w	8011532 <readCanToStructs+0x1266>
 8010366:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 801036a:	2b07      	cmp	r3, #7
 801036c:	f201 80e1 	bhi.w	8011532 <readCanToStructs+0x1266>
 8010370:	a201      	add	r2, pc, #4	; (adr r2, 8010378 <readCanToStructs+0xac>)
 8010372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010376:	bf00      	nop
 8010378:	08010719 	.word	0x08010719
 801037c:	08010921 	.word	0x08010921
 8010380:	08010af9 	.word	0x08010af9
 8010384:	08010d13 	.word	0x08010d13
 8010388:	08010f29 	.word	0x08010f29
 801038c:	08011533 	.word	0x08011533
 8010390:	080110bd 	.word	0x080110bd
 8010394:	080112f7 	.word	0x080112f7
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8010398:	4b97      	ldr	r3, [pc, #604]	; (80105f8 <readCanToStructs+0x32c>)
 801039a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801039c:	4b95      	ldr	r3, [pc, #596]	; (80105f4 <readCanToStructs+0x328>)
 801039e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80103a2:	885b      	ldrh	r3, [r3, #2]
 80103a4:	4a93      	ldr	r2, [pc, #588]	; (80105f4 <readCanToStructs+0x328>)
 80103a6:	011b      	lsls	r3, r3, #4
 80103a8:	4413      	add	r3, r2
 80103aa:	3304      	adds	r3, #4
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80103b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d110      	bne.n	80103dc <readCanToStructs+0x110>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80103ba:	2206      	movs	r2, #6
 80103bc:	2100      	movs	r1, #0
 80103be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103c0:	f012 f9ee 	bl	80227a0 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80103c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103c8:	4a8c      	ldr	r2, [pc, #560]	; (80105fc <readCanToStructs+0x330>)
 80103ca:	f240 4112 	movw	r1, #1042	; 0x412
 80103ce:	fb01 f303 	mul.w	r3, r1, r3
 80103d2:	4413      	add	r3, r2
 80103d4:	f203 2307 	addw	r3, r3, #519	; 0x207
 80103d8:	2200      	movs	r2, #0
 80103da:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 80103dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103e0:	4a86      	ldr	r2, [pc, #536]	; (80105fc <readCanToStructs+0x330>)
 80103e2:	f240 4112 	movw	r1, #1042	; 0x412
 80103e6:	fb01 f303 	mul.w	r3, r1, r3
 80103ea:	4413      	add	r3, r2
 80103ec:	f203 2307 	addw	r3, r3, #519	; 0x207
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80103f6:	429a      	cmp	r2, r3
 80103f8:	d015      	beq.n	8010426 <readCanToStructs+0x15a>
					printf("GPS Packet Seq no MisMatch\n");
 80103fa:	4881      	ldr	r0, [pc, #516]	; (8010600 <readCanToStructs+0x334>)
 80103fc:	f012 fb54 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010400:	2206      	movs	r2, #6
 8010402:	2100      	movs	r1, #0
 8010404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010406:	f012 f9cb 	bl	80227a0 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801040a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801040e:	4a7b      	ldr	r2, [pc, #492]	; (80105fc <readCanToStructs+0x330>)
 8010410:	f240 4112 	movw	r1, #1042	; 0x412
 8010414:	fb01 f303 	mul.w	r3, r1, r3
 8010418:	4413      	add	r3, r2
 801041a:	f203 2307 	addw	r3, r3, #519	; 0x207
 801041e:	2200      	movs	r2, #0
 8010420:	701a      	strb	r2, [r3, #0]
					break;
 8010422:	f001 b887 	b.w	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010426:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801042a:	4613      	mov	r3, r2
 801042c:	00db      	lsls	r3, r3, #3
 801042e:	1a9b      	subs	r3, r3, r2
 8010430:	461a      	mov	r2, r3
 8010432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010434:	4413      	add	r3, r2
 8010436:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010438:	2301      	movs	r3, #1
 801043a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801043e:	e016      	b.n	801046e <readCanToStructs+0x1a2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010440:	4b6c      	ldr	r3, [pc, #432]	; (80105f4 <readCanToStructs+0x328>)
 8010442:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010446:	885b      	ldrh	r3, [r3, #2]
 8010448:	461a      	mov	r2, r3
 801044a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801044e:	4969      	ldr	r1, [pc, #420]	; (80105f4 <readCanToStructs+0x328>)
 8010450:	0112      	lsls	r2, r2, #4
 8010452:	440a      	add	r2, r1
 8010454:	4413      	add	r3, r2
 8010456:	3304      	adds	r3, #4
 8010458:	781a      	ldrb	r2, [r3, #0]
 801045a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801045c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801045e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010460:	3301      	adds	r3, #1
 8010462:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010464:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010468:	3301      	adds	r3, #1
 801046a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801046e:	4b61      	ldr	r3, [pc, #388]	; (80105f4 <readCanToStructs+0x328>)
 8010470:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010474:	885b      	ldrh	r3, [r3, #2]
 8010476:	4a5f      	ldr	r2, [pc, #380]	; (80105f4 <readCanToStructs+0x328>)
 8010478:	011b      	lsls	r3, r3, #4
 801047a:	4413      	add	r3, r2
 801047c:	330c      	adds	r3, #12
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010484:	429a      	cmp	r2, r3
 8010486:	d3db      	bcc.n	8010440 <readCanToStructs+0x174>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8010488:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801048c:	4a5b      	ldr	r2, [pc, #364]	; (80105fc <readCanToStructs+0x330>)
 801048e:	f240 4112 	movw	r1, #1042	; 0x412
 8010492:	fb01 f303 	mul.w	r3, r1, r3
 8010496:	4413      	add	r3, r2
 8010498:	f203 2307 	addw	r3, r3, #519	; 0x207
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	461a      	mov	r2, r3
 80104a0:	4613      	mov	r3, r2
 80104a2:	00db      	lsls	r3, r3, #3
 80104a4:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80104a6:	4b53      	ldr	r3, [pc, #332]	; (80105f4 <readCanToStructs+0x328>)
 80104a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80104ac:	885b      	ldrh	r3, [r3, #2]
 80104ae:	4951      	ldr	r1, [pc, #324]	; (80105f4 <readCanToStructs+0x328>)
 80104b0:	011b      	lsls	r3, r3, #4
 80104b2:	440b      	add	r3, r1
 80104b4:	330c      	adds	r3, #12
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	3b01      	subs	r3, #1
 80104ba:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80104bc:	2b05      	cmp	r3, #5
 80104be:	d91c      	bls.n	80104fa <readCanToStructs+0x22e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80104c0:	4b50      	ldr	r3, [pc, #320]	; (8010604 <readCanToStructs+0x338>)
 80104c2:	4a4d      	ldr	r2, [pc, #308]	; (80105f8 <readCanToStructs+0x32c>)
 80104c4:	6811      	ldr	r1, [r2, #0]
 80104c6:	6019      	str	r1, [r3, #0]
 80104c8:	8892      	ldrh	r2, [r2, #4]
 80104ca:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80104cc:	4b4e      	ldr	r3, [pc, #312]	; (8010608 <readCanToStructs+0x33c>)
 80104ce:	781b      	ldrb	r3, [r3, #0]
 80104d0:	2b01      	cmp	r3, #1
 80104d2:	d102      	bne.n	80104da <readCanToStructs+0x20e>
						printf("GPS_PACKET_RECEIVED\n");
 80104d4:	484d      	ldr	r0, [pc, #308]	; (801060c <readCanToStructs+0x340>)
 80104d6:	f012 fae7 	bl	8022aa8 <puts>
					Write_RTC();
 80104da:	f7fa ffa5 	bl	800b428 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80104de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80104e2:	4a46      	ldr	r2, [pc, #280]	; (80105fc <readCanToStructs+0x330>)
 80104e4:	f240 4112 	movw	r1, #1042	; 0x412
 80104e8:	fb01 f303 	mul.w	r3, r1, r3
 80104ec:	4413      	add	r3, r2
 80104ee:	f203 2307 	addw	r3, r3, #519	; 0x207
 80104f2:	2200      	movs	r2, #0
 80104f4:	701a      	strb	r2, [r3, #0]
				break;
 80104f6:	f001 b81d 	b.w	8011534 <readCanToStructs+0x1268>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 80104fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80104fe:	4a3f      	ldr	r2, [pc, #252]	; (80105fc <readCanToStructs+0x330>)
 8010500:	f240 4112 	movw	r1, #1042	; 0x412
 8010504:	fb01 f303 	mul.w	r3, r1, r3
 8010508:	4413      	add	r3, r2
 801050a:	f203 2306 	addw	r3, r3, #518	; 0x206
 801050e:	2201      	movs	r2, #1
 8010510:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8010512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010516:	4939      	ldr	r1, [pc, #228]	; (80105fc <readCanToStructs+0x330>)
 8010518:	f240 4212 	movw	r2, #1042	; 0x412
 801051c:	fb03 f202 	mul.w	r2, r3, r2
 8010520:	440a      	add	r2, r1
 8010522:	f202 2207 	addw	r2, r2, #519	; 0x207
 8010526:	7812      	ldrb	r2, [r2, #0]
 8010528:	3201      	adds	r2, #1
 801052a:	b2d0      	uxtb	r0, r2
 801052c:	4a33      	ldr	r2, [pc, #204]	; (80105fc <readCanToStructs+0x330>)
 801052e:	f240 4112 	movw	r1, #1042	; 0x412
 8010532:	fb01 f303 	mul.w	r3, r1, r3
 8010536:	4413      	add	r3, r2
 8010538:	f203 2307 	addw	r3, r3, #519	; 0x207
 801053c:	4602      	mov	r2, r0
 801053e:	701a      	strb	r2, [r3, #0]
				break;
 8010540:	f000 bff8 	b.w	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8010544:	4b2c      	ldr	r3, [pc, #176]	; (80105f8 <readCanToStructs+0x32c>)
 8010546:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010548:	4b2a      	ldr	r3, [pc, #168]	; (80105f4 <readCanToStructs+0x328>)
 801054a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801054e:	885b      	ldrh	r3, [r3, #2]
 8010550:	4a28      	ldr	r2, [pc, #160]	; (80105f4 <readCanToStructs+0x328>)
 8010552:	011b      	lsls	r3, r3, #4
 8010554:	4413      	add	r3, r2
 8010556:	3304      	adds	r3, #4
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801055e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010562:	2b00      	cmp	r3, #0
 8010564:	d110      	bne.n	8010588 <readCanToStructs+0x2bc>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010566:	2206      	movs	r2, #6
 8010568:	2100      	movs	r1, #0
 801056a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801056c:	f012 f918 	bl	80227a0 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8010570:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010574:	4a21      	ldr	r2, [pc, #132]	; (80105fc <readCanToStructs+0x330>)
 8010576:	f240 4112 	movw	r1, #1042	; 0x412
 801057a:	fb01 f303 	mul.w	r3, r1, r3
 801057e:	4413      	add	r3, r2
 8010580:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010584:	2200      	movs	r2, #0
 8010586:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8010588:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801058c:	4a1b      	ldr	r2, [pc, #108]	; (80105fc <readCanToStructs+0x330>)
 801058e:	f240 4112 	movw	r1, #1042	; 0x412
 8010592:	fb01 f303 	mul.w	r3, r1, r3
 8010596:	4413      	add	r3, r2
 8010598:	f203 2313 	addw	r3, r3, #531	; 0x213
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d015      	beq.n	80105d2 <readCanToStructs+0x306>
					printf("GPS2 Packet Seq no MisMatch\n");
 80105a6:	481a      	ldr	r0, [pc, #104]	; (8010610 <readCanToStructs+0x344>)
 80105a8:	f012 fa7e 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80105ac:	2206      	movs	r2, #6
 80105ae:	2100      	movs	r1, #0
 80105b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105b2:	f012 f8f5 	bl	80227a0 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80105b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105ba:	4a10      	ldr	r2, [pc, #64]	; (80105fc <readCanToStructs+0x330>)
 80105bc:	f240 4112 	movw	r1, #1042	; 0x412
 80105c0:	fb01 f303 	mul.w	r3, r1, r3
 80105c4:	4413      	add	r3, r2
 80105c6:	f203 2313 	addw	r3, r3, #531	; 0x213
 80105ca:	2200      	movs	r2, #0
 80105cc:	701a      	strb	r2, [r3, #0]
					break;
 80105ce:	f000 bfb1 	b.w	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80105d2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80105d6:	4613      	mov	r3, r2
 80105d8:	00db      	lsls	r3, r3, #3
 80105da:	1a9b      	subs	r3, r3, r2
 80105dc:	461a      	mov	r2, r3
 80105de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e0:	4413      	add	r3, r2
 80105e2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80105e4:	2301      	movs	r3, #1
 80105e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80105ea:	e02a      	b.n	8010642 <readCanToStructs+0x376>
 80105ec:	20000304 	.word	0x20000304
 80105f0:	2000195c 	.word	0x2000195c
 80105f4:	20005afc 	.word	0x20005afc
 80105f8:	20002880 	.word	0x20002880
 80105fc:	200052d8 	.word	0x200052d8
 8010600:	08027074 	.word	0x08027074
 8010604:	20002878 	.word	0x20002878
 8010608:	20000645 	.word	0x20000645
 801060c:	08027090 	.word	0x08027090
 8010610:	080270a4 	.word	0x080270a4
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010614:	4bb6      	ldr	r3, [pc, #728]	; (80108f0 <readCanToStructs+0x624>)
 8010616:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801061a:	885b      	ldrh	r3, [r3, #2]
 801061c:	461a      	mov	r2, r3
 801061e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010622:	49b3      	ldr	r1, [pc, #716]	; (80108f0 <readCanToStructs+0x624>)
 8010624:	0112      	lsls	r2, r2, #4
 8010626:	440a      	add	r2, r1
 8010628:	4413      	add	r3, r2
 801062a:	3304      	adds	r3, #4
 801062c:	781a      	ldrb	r2, [r3, #0]
 801062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010630:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010634:	3301      	adds	r3, #1
 8010636:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010638:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801063c:	3301      	adds	r3, #1
 801063e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010642:	4bab      	ldr	r3, [pc, #684]	; (80108f0 <readCanToStructs+0x624>)
 8010644:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010648:	885b      	ldrh	r3, [r3, #2]
 801064a:	4aa9      	ldr	r2, [pc, #676]	; (80108f0 <readCanToStructs+0x624>)
 801064c:	011b      	lsls	r3, r3, #4
 801064e:	4413      	add	r3, r2
 8010650:	330c      	adds	r3, #12
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010658:	429a      	cmp	r2, r3
 801065a:	d3db      	bcc.n	8010614 <readCanToStructs+0x348>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 801065c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010660:	4aa4      	ldr	r2, [pc, #656]	; (80108f4 <readCanToStructs+0x628>)
 8010662:	f240 4112 	movw	r1, #1042	; 0x412
 8010666:	fb01 f303 	mul.w	r3, r1, r3
 801066a:	4413      	add	r3, r2
 801066c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	461a      	mov	r2, r3
 8010674:	4613      	mov	r3, r2
 8010676:	00db      	lsls	r3, r3, #3
 8010678:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801067a:	4b9d      	ldr	r3, [pc, #628]	; (80108f0 <readCanToStructs+0x624>)
 801067c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010680:	885b      	ldrh	r3, [r3, #2]
 8010682:	499b      	ldr	r1, [pc, #620]	; (80108f0 <readCanToStructs+0x624>)
 8010684:	011b      	lsls	r3, r3, #4
 8010686:	440b      	add	r3, r1
 8010688:	330c      	adds	r3, #12
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	3b01      	subs	r3, #1
 801068e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8010690:	2b05      	cmp	r3, #5
 8010692:	d91c      	bls.n	80106ce <readCanToStructs+0x402>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8010694:	4b98      	ldr	r3, [pc, #608]	; (80108f8 <readCanToStructs+0x62c>)
 8010696:	4a99      	ldr	r2, [pc, #612]	; (80108fc <readCanToStructs+0x630>)
 8010698:	6811      	ldr	r1, [r2, #0]
 801069a:	6019      	str	r1, [r3, #0]
 801069c:	8892      	ldrh	r2, [r2, #4]
 801069e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80106a0:	4b97      	ldr	r3, [pc, #604]	; (8010900 <readCanToStructs+0x634>)
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d102      	bne.n	80106ae <readCanToStructs+0x3e2>
						printf("GPS2_PACKET_RECEIVED\n");
 80106a8:	4896      	ldr	r0, [pc, #600]	; (8010904 <readCanToStructs+0x638>)
 80106aa:	f012 f9fd 	bl	8022aa8 <puts>
					Write_RTC();
 80106ae:	f7fa febb 	bl	800b428 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80106b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106b6:	4a8f      	ldr	r2, [pc, #572]	; (80108f4 <readCanToStructs+0x628>)
 80106b8:	f240 4112 	movw	r1, #1042	; 0x412
 80106bc:	fb01 f303 	mul.w	r3, r1, r3
 80106c0:	4413      	add	r3, r2
 80106c2:	f203 2313 	addw	r3, r3, #531	; 0x213
 80106c6:	2200      	movs	r2, #0
 80106c8:	701a      	strb	r2, [r3, #0]
				break;
 80106ca:	f000 bf33 	b.w	8011534 <readCanToStructs+0x1268>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80106ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106d2:	4a88      	ldr	r2, [pc, #544]	; (80108f4 <readCanToStructs+0x628>)
 80106d4:	f240 4112 	movw	r1, #1042	; 0x412
 80106d8:	fb01 f303 	mul.w	r3, r1, r3
 80106dc:	4413      	add	r3, r2
 80106de:	f203 2312 	addw	r3, r3, #530	; 0x212
 80106e2:	2201      	movs	r2, #1
 80106e4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 80106e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106ea:	4982      	ldr	r1, [pc, #520]	; (80108f4 <readCanToStructs+0x628>)
 80106ec:	f240 4212 	movw	r2, #1042	; 0x412
 80106f0:	fb03 f202 	mul.w	r2, r3, r2
 80106f4:	440a      	add	r2, r1
 80106f6:	f202 2213 	addw	r2, r2, #531	; 0x213
 80106fa:	7812      	ldrb	r2, [r2, #0]
 80106fc:	3201      	adds	r2, #1
 80106fe:	b2d0      	uxtb	r0, r2
 8010700:	4a7c      	ldr	r2, [pc, #496]	; (80108f4 <readCanToStructs+0x628>)
 8010702:	f240 4112 	movw	r1, #1042	; 0x412
 8010706:	fb01 f303 	mul.w	r3, r1, r3
 801070a:	4413      	add	r3, r2
 801070c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010710:	4602      	mov	r2, r0
 8010712:	701a      	strb	r2, [r3, #0]
				break;
 8010714:	f000 bf0e 	b.w	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8010718:	4b7b      	ldr	r3, [pc, #492]	; (8010908 <readCanToStructs+0x63c>)
 801071a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801071c:	4b74      	ldr	r3, [pc, #464]	; (80108f0 <readCanToStructs+0x624>)
 801071e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010722:	885b      	ldrh	r3, [r3, #2]
 8010724:	4a72      	ldr	r2, [pc, #456]	; (80108f0 <readCanToStructs+0x624>)
 8010726:	011b      	lsls	r3, r3, #4
 8010728:	4413      	add	r3, r2
 801072a:	3304      	adds	r3, #4
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010732:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010736:	2b00      	cmp	r3, #0
 8010738:	d110      	bne.n	801075c <readCanToStructs+0x490>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 801073a:	2218      	movs	r2, #24
 801073c:	2100      	movs	r1, #0
 801073e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010740:	f012 f82e 	bl	80227a0 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8010744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010748:	4a6a      	ldr	r2, [pc, #424]	; (80108f4 <readCanToStructs+0x628>)
 801074a:	f240 4112 	movw	r1, #1042	; 0x412
 801074e:	fb01 f303 	mul.w	r3, r1, r3
 8010752:	4413      	add	r3, r2
 8010754:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010758:	2200      	movs	r2, #0
 801075a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 801075c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010760:	4a64      	ldr	r2, [pc, #400]	; (80108f4 <readCanToStructs+0x628>)
 8010762:	f240 4112 	movw	r1, #1042	; 0x412
 8010766:	fb01 f303 	mul.w	r3, r1, r3
 801076a:	4413      	add	r3, r2
 801076c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010776:	429a      	cmp	r2, r3
 8010778:	d015      	beq.n	80107a6 <readCanToStructs+0x4da>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 801077a:	4864      	ldr	r0, [pc, #400]	; (801090c <readCanToStructs+0x640>)
 801077c:	f012 f994 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010780:	2218      	movs	r2, #24
 8010782:	2100      	movs	r1, #0
 8010784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010786:	f012 f80b 	bl	80227a0 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801078a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801078e:	4a59      	ldr	r2, [pc, #356]	; (80108f4 <readCanToStructs+0x628>)
 8010790:	f240 4112 	movw	r1, #1042	; 0x412
 8010794:	fb01 f303 	mul.w	r3, r1, r3
 8010798:	4413      	add	r3, r2
 801079a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801079e:	2200      	movs	r2, #0
 80107a0:	701a      	strb	r2, [r3, #0]
					break;
 80107a2:	f000 bec7 	b.w	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80107a6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80107aa:	4613      	mov	r3, r2
 80107ac:	00db      	lsls	r3, r3, #3
 80107ae:	1a9b      	subs	r3, r3, r2
 80107b0:	461a      	mov	r2, r3
 80107b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b4:	4413      	add	r3, r2
 80107b6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80107b8:	2301      	movs	r3, #1
 80107ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80107be:	e016      	b.n	80107ee <readCanToStructs+0x522>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80107c0:	4b4b      	ldr	r3, [pc, #300]	; (80108f0 <readCanToStructs+0x624>)
 80107c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80107c6:	885b      	ldrh	r3, [r3, #2]
 80107c8:	461a      	mov	r2, r3
 80107ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107ce:	4948      	ldr	r1, [pc, #288]	; (80108f0 <readCanToStructs+0x624>)
 80107d0:	0112      	lsls	r2, r2, #4
 80107d2:	440a      	add	r2, r1
 80107d4:	4413      	add	r3, r2
 80107d6:	3304      	adds	r3, #4
 80107d8:	781a      	ldrb	r2, [r3, #0]
 80107da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107dc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80107de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e0:	3301      	adds	r3, #1
 80107e2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80107e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107e8:	3301      	adds	r3, #1
 80107ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80107ee:	4b40      	ldr	r3, [pc, #256]	; (80108f0 <readCanToStructs+0x624>)
 80107f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80107f4:	885b      	ldrh	r3, [r3, #2]
 80107f6:	4a3e      	ldr	r2, [pc, #248]	; (80108f0 <readCanToStructs+0x624>)
 80107f8:	011b      	lsls	r3, r3, #4
 80107fa:	4413      	add	r3, r2
 80107fc:	330c      	adds	r3, #12
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010804:	429a      	cmp	r2, r3
 8010806:	d3db      	bcc.n	80107c0 <readCanToStructs+0x4f4>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8010808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801080c:	4a39      	ldr	r2, [pc, #228]	; (80108f4 <readCanToStructs+0x628>)
 801080e:	f240 4112 	movw	r1, #1042	; 0x412
 8010812:	fb01 f303 	mul.w	r3, r1, r3
 8010816:	4413      	add	r3, r2
 8010818:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	461a      	mov	r2, r3
 8010820:	4613      	mov	r3, r2
 8010822:	00db      	lsls	r3, r3, #3
 8010824:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 8010826:	4b32      	ldr	r3, [pc, #200]	; (80108f0 <readCanToStructs+0x624>)
 8010828:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801082c:	885b      	ldrh	r3, [r3, #2]
 801082e:	4930      	ldr	r1, [pc, #192]	; (80108f0 <readCanToStructs+0x624>)
 8010830:	011b      	lsls	r3, r3, #4
 8010832:	440b      	add	r3, r1
 8010834:	330c      	adds	r3, #12
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	3b01      	subs	r3, #1
 801083a:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 801083c:	2b17      	cmp	r3, #23
 801083e:	d932      	bls.n	80108a6 <readCanToStructs+0x5da>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8010840:	4b31      	ldr	r3, [pc, #196]	; (8010908 <readCanToStructs+0x63c>)
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	461a      	mov	r2, r3
 8010846:	4613      	mov	r3, r2
 8010848:	005b      	lsls	r3, r3, #1
 801084a:	4413      	add	r3, r2
 801084c:	00db      	lsls	r3, r3, #3
 801084e:	4a30      	ldr	r2, [pc, #192]	; (8010910 <readCanToStructs+0x644>)
 8010850:	4413      	add	r3, r2
 8010852:	2218      	movs	r2, #24
 8010854:	492c      	ldr	r1, [pc, #176]	; (8010908 <readCanToStructs+0x63c>)
 8010856:	4618      	mov	r0, r3
 8010858:	f011 ff7a 	bl	8022750 <memcpy>
					if(Debug_flag == 1)
 801085c:	4b28      	ldr	r3, [pc, #160]	; (8010900 <readCanToStructs+0x634>)
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	2b01      	cmp	r3, #1
 8010862:	d105      	bne.n	8010870 <readCanToStructs+0x5a4>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010864:	4b28      	ldr	r3, [pc, #160]	; (8010908 <readCanToStructs+0x63c>)
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	4619      	mov	r1, r3
 801086a:	482a      	ldr	r0, [pc, #168]	; (8010914 <readCanToStructs+0x648>)
 801086c:	f012 f880 	bl	8022970 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8010870:	4b29      	ldr	r3, [pc, #164]	; (8010918 <readCanToStructs+0x64c>)
 8010872:	2201      	movs	r2, #1
 8010874:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8010876:	f005 f87d 	bl	8015974 <HAL_GetTick>
 801087a:	4603      	mov	r3, r0
 801087c:	4a27      	ldr	r2, [pc, #156]	; (801091c <readCanToStructs+0x650>)
 801087e:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010880:	4b21      	ldr	r3, [pc, #132]	; (8010908 <readCanToStructs+0x63c>)
 8010882:	781b      	ldrb	r3, [r3, #0]
 8010884:	4618      	mov	r0, r3
 8010886:	f7f7 fa33 	bl	8007cf0 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801088a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801088e:	4a19      	ldr	r2, [pc, #100]	; (80108f4 <readCanToStructs+0x628>)
 8010890:	f240 4112 	movw	r1, #1042	; 0x412
 8010894:	fb01 f303 	mul.w	r3, r1, r3
 8010898:	4413      	add	r3, r2
 801089a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801089e:	2200      	movs	r2, #0
 80108a0:	701a      	strb	r2, [r3, #0]
				break;
 80108a2:	f000 be47 	b.w	8011534 <readCanToStructs+0x1268>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80108a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108aa:	4a12      	ldr	r2, [pc, #72]	; (80108f4 <readCanToStructs+0x628>)
 80108ac:	f240 4112 	movw	r1, #1042	; 0x412
 80108b0:	fb01 f303 	mul.w	r3, r1, r3
 80108b4:	4413      	add	r3, r2
 80108b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80108ba:	2201      	movs	r2, #1
 80108bc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80108be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108c2:	490c      	ldr	r1, [pc, #48]	; (80108f4 <readCanToStructs+0x628>)
 80108c4:	f240 4212 	movw	r2, #1042	; 0x412
 80108c8:	fb03 f202 	mul.w	r2, r3, r2
 80108cc:	440a      	add	r2, r1
 80108ce:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80108d2:	7812      	ldrb	r2, [r2, #0]
 80108d4:	3201      	adds	r2, #1
 80108d6:	b2d0      	uxtb	r0, r2
 80108d8:	4a06      	ldr	r2, [pc, #24]	; (80108f4 <readCanToStructs+0x628>)
 80108da:	f240 4112 	movw	r1, #1042	; 0x412
 80108de:	fb01 f303 	mul.w	r3, r1, r3
 80108e2:	4413      	add	r3, r2
 80108e4:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80108e8:	4602      	mov	r2, r0
 80108ea:	701a      	strb	r2, [r3, #0]
				break;
 80108ec:	f000 be22 	b.w	8011534 <readCanToStructs+0x1268>
 80108f0:	20005afc 	.word	0x20005afc
 80108f4:	200052d8 	.word	0x200052d8
 80108f8:	20002878 	.word	0x20002878
 80108fc:	20002880 	.word	0x20002880
 8010900:	20000645 	.word	0x20000645
 8010904:	080270c0 	.word	0x080270c0
 8010908:	2000186c 	.word	0x2000186c
 801090c:	080270d8 	.word	0x080270d8
 8010910:	20001764 	.word	0x20001764
 8010914:	080270fc 	.word	0x080270fc
 8010918:	20000108 	.word	0x20000108
 801091c:	20000e40 	.word	0x20000e40
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8010920:	4b9f      	ldr	r3, [pc, #636]	; (8010ba0 <readCanToStructs+0x8d4>)
 8010922:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010924:	4b9f      	ldr	r3, [pc, #636]	; (8010ba4 <readCanToStructs+0x8d8>)
 8010926:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801092a:	885b      	ldrh	r3, [r3, #2]
 801092c:	4a9d      	ldr	r2, [pc, #628]	; (8010ba4 <readCanToStructs+0x8d8>)
 801092e:	011b      	lsls	r3, r3, #4
 8010930:	4413      	add	r3, r2
 8010932:	3304      	adds	r3, #4
 8010934:	781b      	ldrb	r3, [r3, #0]
 8010936:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801093a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801093e:	2b00      	cmp	r3, #0
 8010940:	d110      	bne.n	8010964 <readCanToStructs+0x698>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010942:	2218      	movs	r2, #24
 8010944:	2100      	movs	r1, #0
 8010946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010948:	f011 ff2a 	bl	80227a0 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801094c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010950:	4a95      	ldr	r2, [pc, #596]	; (8010ba8 <readCanToStructs+0x8dc>)
 8010952:	f240 4112 	movw	r1, #1042	; 0x412
 8010956:	fb01 f303 	mul.w	r3, r1, r3
 801095a:	4413      	add	r3, r2
 801095c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010960:	2200      	movs	r2, #0
 8010962:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8010964:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010968:	4a8f      	ldr	r2, [pc, #572]	; (8010ba8 <readCanToStructs+0x8dc>)
 801096a:	f240 4112 	movw	r1, #1042	; 0x412
 801096e:	fb01 f303 	mul.w	r3, r1, r3
 8010972:	4413      	add	r3, r2
 8010974:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801097e:	429a      	cmp	r2, r3
 8010980:	d015      	beq.n	80109ae <readCanToStructs+0x6e2>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 8010982:	488a      	ldr	r0, [pc, #552]	; (8010bac <readCanToStructs+0x8e0>)
 8010984:	f012 f890 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010988:	2218      	movs	r2, #24
 801098a:	2100      	movs	r1, #0
 801098c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801098e:	f011 ff07 	bl	80227a0 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8010992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010996:	4a84      	ldr	r2, [pc, #528]	; (8010ba8 <readCanToStructs+0x8dc>)
 8010998:	f240 4112 	movw	r1, #1042	; 0x412
 801099c:	fb01 f303 	mul.w	r3, r1, r3
 80109a0:	4413      	add	r3, r2
 80109a2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80109a6:	2200      	movs	r2, #0
 80109a8:	701a      	strb	r2, [r3, #0]
					break;
 80109aa:	f000 bdc3 	b.w	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80109ae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80109b2:	4613      	mov	r3, r2
 80109b4:	00db      	lsls	r3, r3, #3
 80109b6:	1a9b      	subs	r3, r3, r2
 80109b8:	461a      	mov	r2, r3
 80109ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109bc:	4413      	add	r3, r2
 80109be:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80109c0:	2301      	movs	r3, #1
 80109c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80109c6:	e016      	b.n	80109f6 <readCanToStructs+0x72a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80109c8:	4b76      	ldr	r3, [pc, #472]	; (8010ba4 <readCanToStructs+0x8d8>)
 80109ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80109ce:	885b      	ldrh	r3, [r3, #2]
 80109d0:	461a      	mov	r2, r3
 80109d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109d6:	4973      	ldr	r1, [pc, #460]	; (8010ba4 <readCanToStructs+0x8d8>)
 80109d8:	0112      	lsls	r2, r2, #4
 80109da:	440a      	add	r2, r1
 80109dc:	4413      	add	r3, r2
 80109de:	3304      	adds	r3, #4
 80109e0:	781a      	ldrb	r2, [r3, #0]
 80109e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80109e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e8:	3301      	adds	r3, #1
 80109ea:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80109ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109f0:	3301      	adds	r3, #1
 80109f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80109f6:	4b6b      	ldr	r3, [pc, #428]	; (8010ba4 <readCanToStructs+0x8d8>)
 80109f8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80109fc:	885b      	ldrh	r3, [r3, #2]
 80109fe:	4a69      	ldr	r2, [pc, #420]	; (8010ba4 <readCanToStructs+0x8d8>)
 8010a00:	011b      	lsls	r3, r3, #4
 8010a02:	4413      	add	r3, r2
 8010a04:	330c      	adds	r3, #12
 8010a06:	781b      	ldrb	r3, [r3, #0]
 8010a08:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d3db      	bcc.n	80109c8 <readCanToStructs+0x6fc>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8010a10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a14:	4a64      	ldr	r2, [pc, #400]	; (8010ba8 <readCanToStructs+0x8dc>)
 8010a16:	f240 4112 	movw	r1, #1042	; 0x412
 8010a1a:	fb01 f303 	mul.w	r3, r1, r3
 8010a1e:	4413      	add	r3, r2
 8010a20:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	461a      	mov	r2, r3
 8010a28:	4613      	mov	r3, r2
 8010a2a:	00db      	lsls	r3, r3, #3
 8010a2c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 8010a2e:	4b5d      	ldr	r3, [pc, #372]	; (8010ba4 <readCanToStructs+0x8d8>)
 8010a30:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010a34:	885b      	ldrh	r3, [r3, #2]
 8010a36:	495b      	ldr	r1, [pc, #364]	; (8010ba4 <readCanToStructs+0x8d8>)
 8010a38:	011b      	lsls	r3, r3, #4
 8010a3a:	440b      	add	r3, r1
 8010a3c:	330c      	adds	r3, #12
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	3b01      	subs	r3, #1
 8010a42:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8010a44:	2b17      	cmp	r3, #23
 8010a46:	d932      	bls.n	8010aae <readCanToStructs+0x7e2>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8010a48:	4b55      	ldr	r3, [pc, #340]	; (8010ba0 <readCanToStructs+0x8d4>)
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	4613      	mov	r3, r2
 8010a50:	005b      	lsls	r3, r3, #1
 8010a52:	4413      	add	r3, r2
 8010a54:	00db      	lsls	r3, r3, #3
 8010a56:	4a56      	ldr	r2, [pc, #344]	; (8010bb0 <readCanToStructs+0x8e4>)
 8010a58:	4413      	add	r3, r2
 8010a5a:	2218      	movs	r2, #24
 8010a5c:	4950      	ldr	r1, [pc, #320]	; (8010ba0 <readCanToStructs+0x8d4>)
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f011 fe76 	bl	8022750 <memcpy>
					if(Debug_flag == 1)
 8010a64:	4b53      	ldr	r3, [pc, #332]	; (8010bb4 <readCanToStructs+0x8e8>)
 8010a66:	781b      	ldrb	r3, [r3, #0]
 8010a68:	2b01      	cmp	r3, #1
 8010a6a:	d105      	bne.n	8010a78 <readCanToStructs+0x7ac>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010a6c:	4b4c      	ldr	r3, [pc, #304]	; (8010ba0 <readCanToStructs+0x8d4>)
 8010a6e:	781b      	ldrb	r3, [r3, #0]
 8010a70:	4619      	mov	r1, r3
 8010a72:	4851      	ldr	r0, [pc, #324]	; (8010bb8 <readCanToStructs+0x8ec>)
 8010a74:	f011 ff7c 	bl	8022970 <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8010a78:	f004 ff7c 	bl	8015974 <HAL_GetTick>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	4a4f      	ldr	r2, [pc, #316]	; (8010bbc <readCanToStructs+0x8f0>)
 8010a80:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 8010a82:	4b4f      	ldr	r3, [pc, #316]	; (8010bc0 <readCanToStructs+0x8f4>)
 8010a84:	2201      	movs	r2, #1
 8010a86:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010a88:	4b45      	ldr	r3, [pc, #276]	; (8010ba0 <readCanToStructs+0x8d4>)
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7f7 f92f 	bl	8007cf0 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8010a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a96:	4a44      	ldr	r2, [pc, #272]	; (8010ba8 <readCanToStructs+0x8dc>)
 8010a98:	f240 4112 	movw	r1, #1042	; 0x412
 8010a9c:	fb01 f303 	mul.w	r3, r1, r3
 8010aa0:	4413      	add	r3, r2
 8010aa2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	701a      	strb	r2, [r3, #0]
				break;
 8010aaa:	f000 bd43 	b.w	8011534 <readCanToStructs+0x1268>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8010aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ab2:	4a3d      	ldr	r2, [pc, #244]	; (8010ba8 <readCanToStructs+0x8dc>)
 8010ab4:	f240 4112 	movw	r1, #1042	; 0x412
 8010ab8:	fb01 f303 	mul.w	r3, r1, r3
 8010abc:	4413      	add	r3, r2
 8010abe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8010ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010aca:	4937      	ldr	r1, [pc, #220]	; (8010ba8 <readCanToStructs+0x8dc>)
 8010acc:	f240 4212 	movw	r2, #1042	; 0x412
 8010ad0:	fb03 f202 	mul.w	r2, r3, r2
 8010ad4:	440a      	add	r2, r1
 8010ad6:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8010ada:	7812      	ldrb	r2, [r2, #0]
 8010adc:	3201      	adds	r2, #1
 8010ade:	b2d0      	uxtb	r0, r2
 8010ae0:	4a31      	ldr	r2, [pc, #196]	; (8010ba8 <readCanToStructs+0x8dc>)
 8010ae2:	f240 4112 	movw	r1, #1042	; 0x412
 8010ae6:	fb01 f303 	mul.w	r3, r1, r3
 8010aea:	4413      	add	r3, r2
 8010aec:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010af0:	4602      	mov	r2, r0
 8010af2:	701a      	strb	r2, [r3, #0]
				break;
 8010af4:	f000 bd1e 	b.w	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8010af8:	4b32      	ldr	r3, [pc, #200]	; (8010bc4 <readCanToStructs+0x8f8>)
 8010afa:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010afc:	4b29      	ldr	r3, [pc, #164]	; (8010ba4 <readCanToStructs+0x8d8>)
 8010afe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010b02:	885b      	ldrh	r3, [r3, #2]
 8010b04:	4a27      	ldr	r2, [pc, #156]	; (8010ba4 <readCanToStructs+0x8d8>)
 8010b06:	011b      	lsls	r3, r3, #4
 8010b08:	4413      	add	r3, r2
 8010b0a:	3304      	adds	r3, #4
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010b12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d110      	bne.n	8010b3c <readCanToStructs+0x870>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010b1a:	2246      	movs	r2, #70	; 0x46
 8010b1c:	2100      	movs	r1, #0
 8010b1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b20:	f011 fe3e 	bl	80227a0 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010b24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b28:	4a1f      	ldr	r2, [pc, #124]	; (8010ba8 <readCanToStructs+0x8dc>)
 8010b2a:	f240 4112 	movw	r1, #1042	; 0x412
 8010b2e:	fb01 f303 	mul.w	r3, r1, r3
 8010b32:	4413      	add	r3, r2
 8010b34:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010b38:	2200      	movs	r2, #0
 8010b3a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 8010b3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b40:	4a19      	ldr	r2, [pc, #100]	; (8010ba8 <readCanToStructs+0x8dc>)
 8010b42:	f240 4112 	movw	r1, #1042	; 0x412
 8010b46:	fb01 f303 	mul.w	r3, r1, r3
 8010b4a:	4413      	add	r3, r2
 8010b4c:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d015      	beq.n	8010b86 <readCanToStructs+0x8ba>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 8010b5a:	481b      	ldr	r0, [pc, #108]	; (8010bc8 <readCanToStructs+0x8fc>)
 8010b5c:	f011 ffa4 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010b60:	2246      	movs	r2, #70	; 0x46
 8010b62:	2100      	movs	r1, #0
 8010b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b66:	f011 fe1b 	bl	80227a0 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b6e:	4a0e      	ldr	r2, [pc, #56]	; (8010ba8 <readCanToStructs+0x8dc>)
 8010b70:	f240 4112 	movw	r1, #1042	; 0x412
 8010b74:	fb01 f303 	mul.w	r3, r1, r3
 8010b78:	4413      	add	r3, r2
 8010b7a:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010b7e:	2200      	movs	r2, #0
 8010b80:	701a      	strb	r2, [r3, #0]
					break;
 8010b82:	f000 bcd7 	b.w	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010b86:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b8a:	4613      	mov	r3, r2
 8010b8c:	00db      	lsls	r3, r3, #3
 8010b8e:	1a9b      	subs	r3, r3, r2
 8010b90:	461a      	mov	r2, r3
 8010b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b94:	4413      	add	r3, r2
 8010b96:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010b98:	2301      	movs	r3, #1
 8010b9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010b9e:	e02c      	b.n	8010bfa <readCanToStructs+0x92e>
 8010ba0:	2000186c 	.word	0x2000186c
 8010ba4:	20005afc 	.word	0x20005afc
 8010ba8:	200052d8 	.word	0x200052d8
 8010bac:	0802710c 	.word	0x0802710c
 8010bb0:	20001764 	.word	0x20001764
 8010bb4:	20000645 	.word	0x20000645
 8010bb8:	08027130 	.word	0x08027130
 8010bbc:	20000e40 	.word	0x20000e40
 8010bc0:	20000108 	.word	0x20000108
 8010bc4:	20001914 	.word	0x20001914
 8010bc8:	08027140 	.word	0x08027140
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010bcc:	4bb9      	ldr	r3, [pc, #740]	; (8010eb4 <readCanToStructs+0xbe8>)
 8010bce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010bd2:	885b      	ldrh	r3, [r3, #2]
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bda:	49b6      	ldr	r1, [pc, #728]	; (8010eb4 <readCanToStructs+0xbe8>)
 8010bdc:	0112      	lsls	r2, r2, #4
 8010bde:	440a      	add	r2, r1
 8010be0:	4413      	add	r3, r2
 8010be2:	3304      	adds	r3, #4
 8010be4:	781a      	ldrb	r2, [r3, #0]
 8010be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bec:	3301      	adds	r3, #1
 8010bee:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010bf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010bfa:	4bae      	ldr	r3, [pc, #696]	; (8010eb4 <readCanToStructs+0xbe8>)
 8010bfc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c00:	885b      	ldrh	r3, [r3, #2]
 8010c02:	4aac      	ldr	r2, [pc, #688]	; (8010eb4 <readCanToStructs+0xbe8>)
 8010c04:	011b      	lsls	r3, r3, #4
 8010c06:	4413      	add	r3, r2
 8010c08:	330c      	adds	r3, #12
 8010c0a:	781b      	ldrb	r3, [r3, #0]
 8010c0c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d3db      	bcc.n	8010bcc <readCanToStructs+0x900>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8010c14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c18:	4aa7      	ldr	r2, [pc, #668]	; (8010eb8 <readCanToStructs+0xbec>)
 8010c1a:	f240 4112 	movw	r1, #1042	; 0x412
 8010c1e:	fb01 f303 	mul.w	r3, r1, r3
 8010c22:	4413      	add	r3, r2
 8010c24:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	4613      	mov	r3, r2
 8010c2e:	00db      	lsls	r3, r3, #3
 8010c30:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8010c32:	4ba0      	ldr	r3, [pc, #640]	; (8010eb4 <readCanToStructs+0xbe8>)
 8010c34:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c38:	885b      	ldrh	r3, [r3, #2]
 8010c3a:	499e      	ldr	r1, [pc, #632]	; (8010eb4 <readCanToStructs+0xbe8>)
 8010c3c:	011b      	lsls	r3, r3, #4
 8010c3e:	440b      	add	r3, r1
 8010c40:	330c      	adds	r3, #12
 8010c42:	781b      	ldrb	r3, [r3, #0]
 8010c44:	3b01      	subs	r3, #1
 8010c46:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8010c48:	2b45      	cmp	r3, #69	; 0x45
 8010c4a:	d93d      	bls.n	8010cc8 <readCanToStructs+0x9fc>
					if(Debug_flag == 1)
 8010c4c:	4b9b      	ldr	r3, [pc, #620]	; (8010ebc <readCanToStructs+0xbf0>)
 8010c4e:	781b      	ldrb	r3, [r3, #0]
 8010c50:	2b01      	cmp	r3, #1
 8010c52:	d102      	bne.n	8010c5a <readCanToStructs+0x98e>
						printf("RCV V-Message-1\n");
 8010c54:	489a      	ldr	r0, [pc, #616]	; (8010ec0 <readCanToStructs+0xbf4>)
 8010c56:	f011 ff27 	bl	8022aa8 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010c5a:	2246      	movs	r2, #70	; 0x46
 8010c5c:	2100      	movs	r1, #0
 8010c5e:	4899      	ldr	r0, [pc, #612]	; (8010ec4 <readCanToStructs+0xbf8>)
 8010c60:	f011 fd9e 	bl	80227a0 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010c64:	4a97      	ldr	r2, [pc, #604]	; (8010ec4 <readCanToStructs+0xbf8>)
 8010c66:	4b98      	ldr	r3, [pc, #608]	; (8010ec8 <readCanToStructs+0xbfc>)
 8010c68:	4610      	mov	r0, r2
 8010c6a:	4619      	mov	r1, r3
 8010c6c:	2346      	movs	r3, #70	; 0x46
 8010c6e:	461a      	mov	r2, r3
 8010c70:	f011 fd6e 	bl	8022750 <memcpy>
					Is_CAN_Exchange_happening = YES;
 8010c74:	4b95      	ldr	r3, [pc, #596]	; (8010ecc <readCanToStructs+0xc00>)
 8010c76:	2201      	movs	r2, #1
 8010c78:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 8010c7a:	4b92      	ldr	r3, [pc, #584]	; (8010ec4 <readCanToStructs+0xbf8>)
 8010c7c:	881b      	ldrh	r3, [r3, #0]
 8010c7e:	4619      	mov	r1, r3
 8010c80:	4a93      	ldr	r2, [pc, #588]	; (8010ed0 <readCanToStructs+0xc04>)
 8010c82:	460b      	mov	r3, r1
 8010c84:	005b      	lsls	r3, r3, #1
 8010c86:	440b      	add	r3, r1
 8010c88:	00db      	lsls	r3, r3, #3
 8010c8a:	4413      	add	r3, r2
 8010c8c:	3304      	adds	r3, #4
 8010c8e:	781b      	ldrb	r3, [r3, #0]
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d00b      	beq.n	8010cac <readCanToStructs+0x9e0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8010c94:	4b8b      	ldr	r3, [pc, #556]	; (8010ec4 <readCanToStructs+0xbf8>)
 8010c96:	889b      	ldrh	r3, [r3, #4]
 8010c98:	b2d9      	uxtb	r1, r3
 8010c9a:	4b8a      	ldr	r3, [pc, #552]	; (8010ec4 <readCanToStructs+0xbf8>)
 8010c9c:	881b      	ldrh	r3, [r3, #0]
 8010c9e:	b2da      	uxtb	r2, r3
 8010ca0:	4b88      	ldr	r3, [pc, #544]	; (8010ec4 <readCanToStructs+0xbf8>)
 8010ca2:	885b      	ldrh	r3, [r3, #2]
 8010ca4:	b2db      	uxtb	r3, r3
 8010ca6:	488b      	ldr	r0, [pc, #556]	; (8010ed4 <readCanToStructs+0xc08>)
 8010ca8:	f7f3 fcc6 	bl	8004638 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cb0:	4a81      	ldr	r2, [pc, #516]	; (8010eb8 <readCanToStructs+0xbec>)
 8010cb2:	f240 4112 	movw	r1, #1042	; 0x412
 8010cb6:	fb01 f303 	mul.w	r3, r1, r3
 8010cba:	4413      	add	r3, r2
 8010cbc:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	701a      	strb	r2, [r3, #0]
				break;
 8010cc4:	f000 bc36 	b.w	8011534 <readCanToStructs+0x1268>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 8010cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ccc:	4a7a      	ldr	r2, [pc, #488]	; (8010eb8 <readCanToStructs+0xbec>)
 8010cce:	f240 4112 	movw	r1, #1042	; 0x412
 8010cd2:	fb01 f303 	mul.w	r3, r1, r3
 8010cd6:	4413      	add	r3, r2
 8010cd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010cdc:	2201      	movs	r2, #1
 8010cde:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 8010ce0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ce4:	4974      	ldr	r1, [pc, #464]	; (8010eb8 <readCanToStructs+0xbec>)
 8010ce6:	f240 4212 	movw	r2, #1042	; 0x412
 8010cea:	fb03 f202 	mul.w	r2, r3, r2
 8010cee:	440a      	add	r2, r1
 8010cf0:	f202 4207 	addw	r2, r2, #1031	; 0x407
 8010cf4:	7812      	ldrb	r2, [r2, #0]
 8010cf6:	3201      	adds	r2, #1
 8010cf8:	b2d0      	uxtb	r0, r2
 8010cfa:	4a6f      	ldr	r2, [pc, #444]	; (8010eb8 <readCanToStructs+0xbec>)
 8010cfc:	f240 4112 	movw	r1, #1042	; 0x412
 8010d00:	fb01 f303 	mul.w	r3, r1, r3
 8010d04:	4413      	add	r3, r2
 8010d06:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010d0a:	4602      	mov	r2, r0
 8010d0c:	701a      	strb	r2, [r3, #0]
				break;
 8010d0e:	f000 bc11 	b.w	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8010d12:	4b6d      	ldr	r3, [pc, #436]	; (8010ec8 <readCanToStructs+0xbfc>)
 8010d14:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010d16:	4b67      	ldr	r3, [pc, #412]	; (8010eb4 <readCanToStructs+0xbe8>)
 8010d18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010d1c:	885b      	ldrh	r3, [r3, #2]
 8010d1e:	4a65      	ldr	r2, [pc, #404]	; (8010eb4 <readCanToStructs+0xbe8>)
 8010d20:	011b      	lsls	r3, r3, #4
 8010d22:	4413      	add	r3, r2
 8010d24:	3304      	adds	r3, #4
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010d2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d110      	bne.n	8010d56 <readCanToStructs+0xa8a>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010d34:	2246      	movs	r2, #70	; 0x46
 8010d36:	2100      	movs	r1, #0
 8010d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d3a:	f011 fd31 	bl	80227a0 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8010d3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d42:	4a5d      	ldr	r2, [pc, #372]	; (8010eb8 <readCanToStructs+0xbec>)
 8010d44:	f240 4112 	movw	r1, #1042	; 0x412
 8010d48:	fb01 f303 	mul.w	r3, r1, r3
 8010d4c:	4413      	add	r3, r2
 8010d4e:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010d52:	2200      	movs	r2, #0
 8010d54:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 8010d56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d5a:	4a57      	ldr	r2, [pc, #348]	; (8010eb8 <readCanToStructs+0xbec>)
 8010d5c:	f240 4112 	movw	r1, #1042	; 0x412
 8010d60:	fb01 f303 	mul.w	r3, r1, r3
 8010d64:	4413      	add	r3, r2
 8010d66:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d014      	beq.n	8010d9e <readCanToStructs+0xad2>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 8010d74:	4858      	ldr	r0, [pc, #352]	; (8010ed8 <readCanToStructs+0xc0c>)
 8010d76:	f011 fe97 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010d7a:	2246      	movs	r2, #70	; 0x46
 8010d7c:	2100      	movs	r1, #0
 8010d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d80:	f011 fd0e 	bl	80227a0 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8010d84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d88:	4a4b      	ldr	r2, [pc, #300]	; (8010eb8 <readCanToStructs+0xbec>)
 8010d8a:	f240 4112 	movw	r1, #1042	; 0x412
 8010d8e:	fb01 f303 	mul.w	r3, r1, r3
 8010d92:	4413      	add	r3, r2
 8010d94:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010d98:	2200      	movs	r2, #0
 8010d9a:	701a      	strb	r2, [r3, #0]
					break;
 8010d9c:	e3ca      	b.n	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010d9e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010da2:	4613      	mov	r3, r2
 8010da4:	00db      	lsls	r3, r3, #3
 8010da6:	1a9b      	subs	r3, r3, r2
 8010da8:	461a      	mov	r2, r3
 8010daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dac:	4413      	add	r3, r2
 8010dae:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010db0:	2301      	movs	r3, #1
 8010db2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010db6:	e016      	b.n	8010de6 <readCanToStructs+0xb1a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010db8:	4b3e      	ldr	r3, [pc, #248]	; (8010eb4 <readCanToStructs+0xbe8>)
 8010dba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010dbe:	885b      	ldrh	r3, [r3, #2]
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010dc6:	493b      	ldr	r1, [pc, #236]	; (8010eb4 <readCanToStructs+0xbe8>)
 8010dc8:	0112      	lsls	r2, r2, #4
 8010dca:	440a      	add	r2, r1
 8010dcc:	4413      	add	r3, r2
 8010dce:	3304      	adds	r3, #4
 8010dd0:	781a      	ldrb	r2, [r3, #0]
 8010dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd8:	3301      	adds	r3, #1
 8010dda:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010ddc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010de0:	3301      	adds	r3, #1
 8010de2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010de6:	4b33      	ldr	r3, [pc, #204]	; (8010eb4 <readCanToStructs+0xbe8>)
 8010de8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010dec:	885b      	ldrh	r3, [r3, #2]
 8010dee:	4a31      	ldr	r2, [pc, #196]	; (8010eb4 <readCanToStructs+0xbe8>)
 8010df0:	011b      	lsls	r3, r3, #4
 8010df2:	4413      	add	r3, r2
 8010df4:	330c      	adds	r3, #12
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d3db      	bcc.n	8010db8 <readCanToStructs+0xaec>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8010e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e04:	4a2c      	ldr	r2, [pc, #176]	; (8010eb8 <readCanToStructs+0xbec>)
 8010e06:	f240 4112 	movw	r1, #1042	; 0x412
 8010e0a:	fb01 f303 	mul.w	r3, r1, r3
 8010e0e:	4413      	add	r3, r2
 8010e10:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010e14:	781b      	ldrb	r3, [r3, #0]
 8010e16:	461a      	mov	r2, r3
 8010e18:	4613      	mov	r3, r2
 8010e1a:	00db      	lsls	r3, r3, #3
 8010e1c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8010e1e:	4b25      	ldr	r3, [pc, #148]	; (8010eb4 <readCanToStructs+0xbe8>)
 8010e20:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010e24:	885b      	ldrh	r3, [r3, #2]
 8010e26:	4923      	ldr	r1, [pc, #140]	; (8010eb4 <readCanToStructs+0xbe8>)
 8010e28:	011b      	lsls	r3, r3, #4
 8010e2a:	440b      	add	r3, r1
 8010e2c:	330c      	adds	r3, #12
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	3b01      	subs	r3, #1
 8010e32:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8010e34:	2b45      	cmp	r3, #69	; 0x45
 8010e36:	d953      	bls.n	8010ee0 <readCanToStructs+0xc14>
					if(Debug_flag == 1)
 8010e38:	4b20      	ldr	r3, [pc, #128]	; (8010ebc <readCanToStructs+0xbf0>)
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	2b01      	cmp	r3, #1
 8010e3e:	d102      	bne.n	8010e46 <readCanToStructs+0xb7a>
						printf("RCV V-Message-2\n");
 8010e40:	4826      	ldr	r0, [pc, #152]	; (8010edc <readCanToStructs+0xc10>)
 8010e42:	f011 fe31 	bl	8022aa8 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010e46:	2246      	movs	r2, #70	; 0x46
 8010e48:	2100      	movs	r1, #0
 8010e4a:	481e      	ldr	r0, [pc, #120]	; (8010ec4 <readCanToStructs+0xbf8>)
 8010e4c:	f011 fca8 	bl	80227a0 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010e50:	4a1c      	ldr	r2, [pc, #112]	; (8010ec4 <readCanToStructs+0xbf8>)
 8010e52:	4b1d      	ldr	r3, [pc, #116]	; (8010ec8 <readCanToStructs+0xbfc>)
 8010e54:	4610      	mov	r0, r2
 8010e56:	4619      	mov	r1, r3
 8010e58:	2346      	movs	r3, #70	; 0x46
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	f011 fc78 	bl	8022750 <memcpy>
					Is_CAN_Exchange_happening = YES;
 8010e60:	4b1a      	ldr	r3, [pc, #104]	; (8010ecc <readCanToStructs+0xc00>)
 8010e62:	2201      	movs	r2, #1
 8010e64:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 8010e66:	4b17      	ldr	r3, [pc, #92]	; (8010ec4 <readCanToStructs+0xbf8>)
 8010e68:	881b      	ldrh	r3, [r3, #0]
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	4a18      	ldr	r2, [pc, #96]	; (8010ed0 <readCanToStructs+0xc04>)
 8010e6e:	460b      	mov	r3, r1
 8010e70:	005b      	lsls	r3, r3, #1
 8010e72:	440b      	add	r3, r1
 8010e74:	00db      	lsls	r3, r3, #3
 8010e76:	4413      	add	r3, r2
 8010e78:	3303      	adds	r3, #3
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	d00b      	beq.n	8010e98 <readCanToStructs+0xbcc>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8010e80:	4b10      	ldr	r3, [pc, #64]	; (8010ec4 <readCanToStructs+0xbf8>)
 8010e82:	889b      	ldrh	r3, [r3, #4]
 8010e84:	b2d9      	uxtb	r1, r3
 8010e86:	4b0f      	ldr	r3, [pc, #60]	; (8010ec4 <readCanToStructs+0xbf8>)
 8010e88:	881b      	ldrh	r3, [r3, #0]
 8010e8a:	b2da      	uxtb	r2, r3
 8010e8c:	4b0d      	ldr	r3, [pc, #52]	; (8010ec4 <readCanToStructs+0xbf8>)
 8010e8e:	885b      	ldrh	r3, [r3, #2]
 8010e90:	b2db      	uxtb	r3, r3
 8010e92:	4810      	ldr	r0, [pc, #64]	; (8010ed4 <readCanToStructs+0xc08>)
 8010e94:	f7f3 fbd0 	bl	8004638 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8010e98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e9c:	4a06      	ldr	r2, [pc, #24]	; (8010eb8 <readCanToStructs+0xbec>)
 8010e9e:	f240 4112 	movw	r1, #1042	; 0x412
 8010ea2:	fb01 f303 	mul.w	r3, r1, r3
 8010ea6:	4413      	add	r3, r2
 8010ea8:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010eac:	2200      	movs	r2, #0
 8010eae:	701a      	strb	r2, [r3, #0]
				break;
 8010eb0:	e340      	b.n	8011534 <readCanToStructs+0x1268>
 8010eb2:	bf00      	nop
 8010eb4:	20005afc 	.word	0x20005afc
 8010eb8:	200052d8 	.word	0x200052d8
 8010ebc:	20000645 	.word	0x20000645
 8010ec0:	08027164 	.word	0x08027164
 8010ec4:	200018cc 	.word	0x200018cc
 8010ec8:	20001914 	.word	0x20001914
 8010ecc:	20000108 	.word	0x20000108
 8010ed0:	20001674 	.word	0x20001674
 8010ed4:	200018d2 	.word	0x200018d2
 8010ed8:	08027174 	.word	0x08027174
 8010edc:	08027198 	.word	0x08027198
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 8010ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ee4:	4a9f      	ldr	r2, [pc, #636]	; (8011164 <readCanToStructs+0xe98>)
 8010ee6:	f240 4112 	movw	r1, #1042	; 0x412
 8010eea:	fb01 f303 	mul.w	r3, r1, r3
 8010eee:	4413      	add	r3, r2
 8010ef0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 8010ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010efc:	4999      	ldr	r1, [pc, #612]	; (8011164 <readCanToStructs+0xe98>)
 8010efe:	f240 4212 	movw	r2, #1042	; 0x412
 8010f02:	fb03 f202 	mul.w	r2, r3, r2
 8010f06:	440a      	add	r2, r1
 8010f08:	f202 4209 	addw	r2, r2, #1033	; 0x409
 8010f0c:	7812      	ldrb	r2, [r2, #0]
 8010f0e:	3201      	adds	r2, #1
 8010f10:	b2d0      	uxtb	r0, r2
 8010f12:	4a94      	ldr	r2, [pc, #592]	; (8011164 <readCanToStructs+0xe98>)
 8010f14:	f240 4112 	movw	r1, #1042	; 0x412
 8010f18:	fb01 f303 	mul.w	r3, r1, r3
 8010f1c:	4413      	add	r3, r2
 8010f1e:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010f22:	4602      	mov	r2, r0
 8010f24:	701a      	strb	r2, [r3, #0]
				break;
 8010f26:	e305      	b.n	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 8010f28:	4b8f      	ldr	r3, [pc, #572]	; (8011168 <readCanToStructs+0xe9c>)
 8010f2a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010f2c:	4b8f      	ldr	r3, [pc, #572]	; (801116c <readCanToStructs+0xea0>)
 8010f2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010f32:	885b      	ldrh	r3, [r3, #2]
 8010f34:	4a8d      	ldr	r2, [pc, #564]	; (801116c <readCanToStructs+0xea0>)
 8010f36:	011b      	lsls	r3, r3, #4
 8010f38:	4413      	add	r3, r2
 8010f3a:	3304      	adds	r3, #4
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010f42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d110      	bne.n	8010f6c <readCanToStructs+0xca0>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8010f4a:	2208      	movs	r2, #8
 8010f4c:	2100      	movs	r1, #0
 8010f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f50:	f011 fc26 	bl	80227a0 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010f54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f58:	4a82      	ldr	r2, [pc, #520]	; (8011164 <readCanToStructs+0xe98>)
 8010f5a:	f240 4112 	movw	r1, #1042	; 0x412
 8010f5e:	fb01 f303 	mul.w	r3, r1, r3
 8010f62:	4413      	add	r3, r2
 8010f64:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010f68:	2200      	movs	r2, #0
 8010f6a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8010f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f70:	4a7c      	ldr	r2, [pc, #496]	; (8011164 <readCanToStructs+0xe98>)
 8010f72:	f240 4112 	movw	r1, #1042	; 0x412
 8010f76:	fb01 f303 	mul.w	r3, r1, r3
 8010f7a:	4413      	add	r3, r2
 8010f7c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010f80:	781b      	ldrb	r3, [r3, #0]
 8010f82:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d014      	beq.n	8010fb4 <readCanToStructs+0xce8>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8010f8a:	4879      	ldr	r0, [pc, #484]	; (8011170 <readCanToStructs+0xea4>)
 8010f8c:	f011 fd8c 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8010f90:	2208      	movs	r2, #8
 8010f92:	2100      	movs	r1, #0
 8010f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f96:	f011 fc03 	bl	80227a0 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f9e:	4a71      	ldr	r2, [pc, #452]	; (8011164 <readCanToStructs+0xe98>)
 8010fa0:	f240 4112 	movw	r1, #1042	; 0x412
 8010fa4:	fb01 f303 	mul.w	r3, r1, r3
 8010fa8:	4413      	add	r3, r2
 8010faa:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010fae:	2200      	movs	r2, #0
 8010fb0:	701a      	strb	r2, [r3, #0]
					break;
 8010fb2:	e2bf      	b.n	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010fb4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010fb8:	4613      	mov	r3, r2
 8010fba:	00db      	lsls	r3, r3, #3
 8010fbc:	1a9b      	subs	r3, r3, r2
 8010fbe:	461a      	mov	r2, r3
 8010fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc2:	4413      	add	r3, r2
 8010fc4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010fcc:	e016      	b.n	8010ffc <readCanToStructs+0xd30>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010fce:	4b67      	ldr	r3, [pc, #412]	; (801116c <readCanToStructs+0xea0>)
 8010fd0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010fd4:	885b      	ldrh	r3, [r3, #2]
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fdc:	4963      	ldr	r1, [pc, #396]	; (801116c <readCanToStructs+0xea0>)
 8010fde:	0112      	lsls	r2, r2, #4
 8010fe0:	440a      	add	r2, r1
 8010fe2:	4413      	add	r3, r2
 8010fe4:	3304      	adds	r3, #4
 8010fe6:	781a      	ldrb	r2, [r3, #0]
 8010fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fea:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fee:	3301      	adds	r3, #1
 8010ff0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010ff2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ff6:	3301      	adds	r3, #1
 8010ff8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010ffc:	4b5b      	ldr	r3, [pc, #364]	; (801116c <readCanToStructs+0xea0>)
 8010ffe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011002:	885b      	ldrh	r3, [r3, #2]
 8011004:	4a59      	ldr	r2, [pc, #356]	; (801116c <readCanToStructs+0xea0>)
 8011006:	011b      	lsls	r3, r3, #4
 8011008:	4413      	add	r3, r2
 801100a:	330c      	adds	r3, #12
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011012:	429a      	cmp	r2, r3
 8011014:	d3db      	bcc.n	8010fce <readCanToStructs+0xd02>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 8011016:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801101a:	4a52      	ldr	r2, [pc, #328]	; (8011164 <readCanToStructs+0xe98>)
 801101c:	f240 4112 	movw	r1, #1042	; 0x412
 8011020:	fb01 f303 	mul.w	r3, r1, r3
 8011024:	4413      	add	r3, r2
 8011026:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	461a      	mov	r2, r3
 801102e:	4613      	mov	r3, r2
 8011030:	00db      	lsls	r3, r3, #3
 8011032:	1a9a      	subs	r2, r3, r2
 8011034:	4b4d      	ldr	r3, [pc, #308]	; (801116c <readCanToStructs+0xea0>)
 8011036:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801103a:	885b      	ldrh	r3, [r3, #2]
 801103c:	494b      	ldr	r1, [pc, #300]	; (801116c <readCanToStructs+0xea0>)
 801103e:	011b      	lsls	r3, r3, #4
 8011040:	440b      	add	r3, r1
 8011042:	330c      	adds	r3, #12
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	3b01      	subs	r3, #1
 8011048:	4413      	add	r3, r2
 801104a:	2b07      	cmp	r3, #7
 801104c:	d912      	bls.n	8011074 <readCanToStructs+0xda8>
					printf("Received Fault Injection Data\n");
 801104e:	4849      	ldr	r0, [pc, #292]	; (8011174 <readCanToStructs+0xea8>)
 8011050:	f011 fd2a 	bl	8022aa8 <puts>
					Is_CAN_Exchange_happening = YES;
 8011054:	4b48      	ldr	r3, [pc, #288]	; (8011178 <readCanToStructs+0xeac>)
 8011056:	2201      	movs	r2, #1
 8011058:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801105a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801105e:	4a41      	ldr	r2, [pc, #260]	; (8011164 <readCanToStructs+0xe98>)
 8011060:	f240 4112 	movw	r1, #1042	; 0x412
 8011064:	fb01 f303 	mul.w	r3, r1, r3
 8011068:	4413      	add	r3, r2
 801106a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801106e:	2200      	movs	r2, #0
 8011070:	701a      	strb	r2, [r3, #0]
				break;
 8011072:	e25f      	b.n	8011534 <readCanToStructs+0x1268>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8011074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011078:	4a3a      	ldr	r2, [pc, #232]	; (8011164 <readCanToStructs+0xe98>)
 801107a:	f240 4112 	movw	r1, #1042	; 0x412
 801107e:	fb01 f303 	mul.w	r3, r1, r3
 8011082:	4413      	add	r3, r2
 8011084:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8011088:	2201      	movs	r2, #1
 801108a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 801108c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011090:	4934      	ldr	r1, [pc, #208]	; (8011164 <readCanToStructs+0xe98>)
 8011092:	f240 4212 	movw	r2, #1042	; 0x412
 8011096:	fb03 f202 	mul.w	r2, r3, r2
 801109a:	440a      	add	r2, r1
 801109c:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 80110a0:	7812      	ldrb	r2, [r2, #0]
 80110a2:	3201      	adds	r2, #1
 80110a4:	b2d0      	uxtb	r0, r2
 80110a6:	4a2f      	ldr	r2, [pc, #188]	; (8011164 <readCanToStructs+0xe98>)
 80110a8:	f240 4112 	movw	r1, #1042	; 0x412
 80110ac:	fb01 f303 	mul.w	r3, r1, r3
 80110b0:	4413      	add	r3, r2
 80110b2:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80110b6:	4602      	mov	r2, r0
 80110b8:	701a      	strb	r2, [r3, #0]
				break;
 80110ba:	e23b      	b.n	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 80110bc:	4b2f      	ldr	r3, [pc, #188]	; (801117c <readCanToStructs+0xeb0>)
 80110be:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80110c0:	4b2a      	ldr	r3, [pc, #168]	; (801116c <readCanToStructs+0xea0>)
 80110c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80110c6:	885b      	ldrh	r3, [r3, #2]
 80110c8:	4a28      	ldr	r2, [pc, #160]	; (801116c <readCanToStructs+0xea0>)
 80110ca:	011b      	lsls	r3, r3, #4
 80110cc:	4413      	add	r3, r2
 80110ce:	3304      	adds	r3, #4
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80110d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d110      	bne.n	8011100 <readCanToStructs+0xe34>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 80110de:	2214      	movs	r2, #20
 80110e0:	2100      	movs	r1, #0
 80110e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110e4:	f011 fb5c 	bl	80227a0 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80110e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80110ec:	4a1d      	ldr	r2, [pc, #116]	; (8011164 <readCanToStructs+0xe98>)
 80110ee:	f240 4112 	movw	r1, #1042	; 0x412
 80110f2:	fb01 f303 	mul.w	r3, r1, r3
 80110f6:	4413      	add	r3, r2
 80110f8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80110fc:	2200      	movs	r2, #0
 80110fe:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8011100:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011104:	4a17      	ldr	r2, [pc, #92]	; (8011164 <readCanToStructs+0xe98>)
 8011106:	f240 4112 	movw	r1, #1042	; 0x412
 801110a:	fb01 f303 	mul.w	r3, r1, r3
 801110e:	4413      	add	r3, r2
 8011110:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801111a:	429a      	cmp	r2, r3
 801111c:	d014      	beq.n	8011148 <readCanToStructs+0xe7c>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 801111e:	4818      	ldr	r0, [pc, #96]	; (8011180 <readCanToStructs+0xeb4>)
 8011120:	f011 fcc2 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8011124:	2214      	movs	r2, #20
 8011126:	2100      	movs	r1, #0
 8011128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801112a:	f011 fb39 	bl	80227a0 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801112e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011132:	4a0c      	ldr	r2, [pc, #48]	; (8011164 <readCanToStructs+0xe98>)
 8011134:	f240 4112 	movw	r1, #1042	; 0x412
 8011138:	fb01 f303 	mul.w	r3, r1, r3
 801113c:	4413      	add	r3, r2
 801113e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011142:	2200      	movs	r2, #0
 8011144:	701a      	strb	r2, [r3, #0]
					break;
 8011146:	e1f5      	b.n	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011148:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801114c:	4613      	mov	r3, r2
 801114e:	00db      	lsls	r3, r3, #3
 8011150:	1a9b      	subs	r3, r3, r2
 8011152:	461a      	mov	r2, r3
 8011154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011156:	4413      	add	r3, r2
 8011158:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801115a:	2301      	movs	r3, #1
 801115c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011160:	e027      	b.n	80111b2 <readCanToStructs+0xee6>
 8011162:	bf00      	nop
 8011164:	200052d8 	.word	0x200052d8
 8011168:	2000195c 	.word	0x2000195c
 801116c:	20005afc 	.word	0x20005afc
 8011170:	080271a8 	.word	0x080271a8
 8011174:	080271c8 	.word	0x080271c8
 8011178:	20000108 	.word	0x20000108
 801117c:	20002024 	.word	0x20002024
 8011180:	080271e8 	.word	0x080271e8
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011184:	4bb9      	ldr	r3, [pc, #740]	; (801146c <readCanToStructs+0x11a0>)
 8011186:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801118a:	885b      	ldrh	r3, [r3, #2]
 801118c:	461a      	mov	r2, r3
 801118e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011192:	49b6      	ldr	r1, [pc, #728]	; (801146c <readCanToStructs+0x11a0>)
 8011194:	0112      	lsls	r2, r2, #4
 8011196:	440a      	add	r2, r1
 8011198:	4413      	add	r3, r2
 801119a:	3304      	adds	r3, #4
 801119c:	781a      	ldrb	r2, [r3, #0]
 801119e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80111a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a4:	3301      	adds	r3, #1
 80111a6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80111a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80111ac:	3301      	adds	r3, #1
 80111ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80111b2:	4bae      	ldr	r3, [pc, #696]	; (801146c <readCanToStructs+0x11a0>)
 80111b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111b8:	885b      	ldrh	r3, [r3, #2]
 80111ba:	4aac      	ldr	r2, [pc, #688]	; (801146c <readCanToStructs+0x11a0>)
 80111bc:	011b      	lsls	r3, r3, #4
 80111be:	4413      	add	r3, r2
 80111c0:	330c      	adds	r3, #12
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d3db      	bcc.n	8011184 <readCanToStructs+0xeb8>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 80111cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111d0:	4aa7      	ldr	r2, [pc, #668]	; (8011470 <readCanToStructs+0x11a4>)
 80111d2:	f240 4112 	movw	r1, #1042	; 0x412
 80111d6:	fb01 f303 	mul.w	r3, r1, r3
 80111da:	4413      	add	r3, r2
 80111dc:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	461a      	mov	r2, r3
 80111e4:	4613      	mov	r3, r2
 80111e6:	00db      	lsls	r3, r3, #3
 80111e8:	1a9a      	subs	r2, r3, r2
 80111ea:	4ba0      	ldr	r3, [pc, #640]	; (801146c <readCanToStructs+0x11a0>)
 80111ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111f0:	885b      	ldrh	r3, [r3, #2]
 80111f2:	499e      	ldr	r1, [pc, #632]	; (801146c <readCanToStructs+0x11a0>)
 80111f4:	011b      	lsls	r3, r3, #4
 80111f6:	440b      	add	r3, r1
 80111f8:	330c      	adds	r3, #12
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	3b01      	subs	r3, #1
 80111fe:	4413      	add	r3, r2
 8011200:	2b13      	cmp	r3, #19
 8011202:	d954      	bls.n	80112ae <readCanToStructs+0xfe2>
					uint16_t CRC16 = 0;
 8011204:	2300      	movs	r3, #0
 8011206:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 8011208:	2300      	movs	r3, #0
 801120a:	603b      	str	r3, [r7, #0]
 801120c:	1d3b      	adds	r3, r7, #4
 801120e:	2224      	movs	r2, #36	; 0x24
 8011210:	2100      	movs	r1, #0
 8011212:	4618      	mov	r0, r3
 8011214:	f011 fac4 	bl	80227a0 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8011218:	463b      	mov	r3, r7
 801121a:	2214      	movs	r2, #20
 801121c:	4995      	ldr	r1, [pc, #596]	; (8011474 <readCanToStructs+0x11a8>)
 801121e:	4618      	mov	r0, r3
 8011220:	f011 fa96 	bl	8022750 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8011224:	463b      	mov	r3, r7
 8011226:	2214      	movs	r2, #20
 8011228:	4619      	mov	r1, r3
 801122a:	2000      	movs	r0, #0
 801122c:	f001 ff10 	bl	8013050 <GetCRC16>
 8011230:	4603      	mov	r3, r0
 8011232:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 8011234:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011236:	2b00      	cmp	r3, #0
 8011238:	d10c      	bne.n	8011254 <readCanToStructs+0xf88>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801123a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801123e:	4a8c      	ldr	r2, [pc, #560]	; (8011470 <readCanToStructs+0x11a4>)
 8011240:	f240 4112 	movw	r1, #1042	; 0x412
 8011244:	fb01 f303 	mul.w	r3, r1, r3
 8011248:	4413      	add	r3, r2
 801124a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801124e:	2200      	movs	r2, #0
 8011250:	701a      	strb	r2, [r3, #0]
				break;
 8011252:	e16f      	b.n	8011534 <readCanToStructs+0x1268>
						if(Debug_flag == 1)
 8011254:	4b88      	ldr	r3, [pc, #544]	; (8011478 <readCanToStructs+0x11ac>)
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	2b01      	cmp	r3, #1
 801125a:	d10a      	bne.n	8011272 <readCanToStructs+0xfa6>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 801125c:	4b85      	ldr	r3, [pc, #532]	; (8011474 <readCanToStructs+0x11a8>)
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	4a86      	ldr	r2, [pc, #536]	; (801147c <readCanToStructs+0x11b0>)
 8011262:	3366      	adds	r3, #102	; 0x66
 8011264:	009b      	lsls	r3, r3, #2
 8011266:	4413      	add	r3, r2
 8011268:	685b      	ldr	r3, [r3, #4]
 801126a:	4619      	mov	r1, r3
 801126c:	4884      	ldr	r0, [pc, #528]	; (8011480 <readCanToStructs+0x11b4>)
 801126e:	f011 fb7f 	bl	8022970 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8011272:	4b80      	ldr	r3, [pc, #512]	; (8011474 <readCanToStructs+0x11a8>)
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	461a      	mov	r2, r3
 8011278:	4613      	mov	r3, r2
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	4413      	add	r3, r2
 801127e:	009b      	lsls	r3, r3, #2
 8011280:	4a80      	ldr	r2, [pc, #512]	; (8011484 <readCanToStructs+0x11b8>)
 8011282:	4413      	add	r3, r2
 8011284:	2214      	movs	r2, #20
 8011286:	497b      	ldr	r1, [pc, #492]	; (8011474 <readCanToStructs+0x11a8>)
 8011288:	4618      	mov	r0, r3
 801128a:	f011 fa61 	bl	8022750 <memcpy>
						Is_CAN_Exchange_happening = YES;
 801128e:	4b7e      	ldr	r3, [pc, #504]	; (8011488 <readCanToStructs+0x11bc>)
 8011290:	2201      	movs	r2, #1
 8011292:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011294:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011298:	4a75      	ldr	r2, [pc, #468]	; (8011470 <readCanToStructs+0x11a4>)
 801129a:	f240 4112 	movw	r1, #1042	; 0x412
 801129e:	fb01 f303 	mul.w	r3, r1, r3
 80112a2:	4413      	add	r3, r2
 80112a4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80112a8:	2200      	movs	r2, #0
 80112aa:	701a      	strb	r2, [r3, #0]
				break;
 80112ac:	e142      	b.n	8011534 <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 80112ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112b2:	4a6f      	ldr	r2, [pc, #444]	; (8011470 <readCanToStructs+0x11a4>)
 80112b4:	f240 4112 	movw	r1, #1042	; 0x412
 80112b8:	fb01 f303 	mul.w	r3, r1, r3
 80112bc:	4413      	add	r3, r2
 80112be:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 80112c2:	2201      	movs	r2, #1
 80112c4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 80112c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112ca:	4969      	ldr	r1, [pc, #420]	; (8011470 <readCanToStructs+0x11a4>)
 80112cc:	f240 4212 	movw	r2, #1042	; 0x412
 80112d0:	fb03 f202 	mul.w	r2, r3, r2
 80112d4:	440a      	add	r2, r1
 80112d6:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 80112da:	7812      	ldrb	r2, [r2, #0]
 80112dc:	3201      	adds	r2, #1
 80112de:	b2d0      	uxtb	r0, r2
 80112e0:	4a63      	ldr	r2, [pc, #396]	; (8011470 <readCanToStructs+0x11a4>)
 80112e2:	f240 4112 	movw	r1, #1042	; 0x412
 80112e6:	fb01 f303 	mul.w	r3, r1, r3
 80112ea:	4413      	add	r3, r2
 80112ec:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80112f0:	4602      	mov	r2, r0
 80112f2:	701a      	strb	r2, [r3, #0]
				break;
 80112f4:	e11e      	b.n	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 80112f6:	4b5f      	ldr	r3, [pc, #380]	; (8011474 <readCanToStructs+0x11a8>)
 80112f8:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80112fa:	4b5c      	ldr	r3, [pc, #368]	; (801146c <readCanToStructs+0x11a0>)
 80112fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011300:	885b      	ldrh	r3, [r3, #2]
 8011302:	4a5a      	ldr	r2, [pc, #360]	; (801146c <readCanToStructs+0x11a0>)
 8011304:	011b      	lsls	r3, r3, #4
 8011306:	4413      	add	r3, r2
 8011308:	3304      	adds	r3, #4
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011310:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011314:	2b00      	cmp	r3, #0
 8011316:	d110      	bne.n	801133a <readCanToStructs+0x106e>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8011318:	2214      	movs	r2, #20
 801131a:	2100      	movs	r1, #0
 801131c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801131e:	f011 fa3f 	bl	80227a0 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011326:	4a52      	ldr	r2, [pc, #328]	; (8011470 <readCanToStructs+0x11a4>)
 8011328:	f240 4112 	movw	r1, #1042	; 0x412
 801132c:	fb01 f303 	mul.w	r3, r1, r3
 8011330:	4413      	add	r3, r2
 8011332:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011336:	2200      	movs	r2, #0
 8011338:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 801133a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801133e:	4a4c      	ldr	r2, [pc, #304]	; (8011470 <readCanToStructs+0x11a4>)
 8011340:	f240 4112 	movw	r1, #1042	; 0x412
 8011344:	fb01 f303 	mul.w	r3, r1, r3
 8011348:	4413      	add	r3, r2
 801134a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011354:	429a      	cmp	r2, r3
 8011356:	d014      	beq.n	8011382 <readCanToStructs+0x10b6>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 8011358:	484c      	ldr	r0, [pc, #304]	; (801148c <readCanToStructs+0x11c0>)
 801135a:	f011 fba5 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 801135e:	2214      	movs	r2, #20
 8011360:	2100      	movs	r1, #0
 8011362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011364:	f011 fa1c 	bl	80227a0 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801136c:	4a40      	ldr	r2, [pc, #256]	; (8011470 <readCanToStructs+0x11a4>)
 801136e:	f240 4112 	movw	r1, #1042	; 0x412
 8011372:	fb01 f303 	mul.w	r3, r1, r3
 8011376:	4413      	add	r3, r2
 8011378:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801137c:	2200      	movs	r2, #0
 801137e:	701a      	strb	r2, [r3, #0]
					break;
 8011380:	e0d8      	b.n	8011534 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011382:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011386:	4613      	mov	r3, r2
 8011388:	00db      	lsls	r3, r3, #3
 801138a:	1a9b      	subs	r3, r3, r2
 801138c:	461a      	mov	r2, r3
 801138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011390:	4413      	add	r3, r2
 8011392:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011394:	2301      	movs	r3, #1
 8011396:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801139a:	e016      	b.n	80113ca <readCanToStructs+0x10fe>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801139c:	4b33      	ldr	r3, [pc, #204]	; (801146c <readCanToStructs+0x11a0>)
 801139e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80113a2:	885b      	ldrh	r3, [r3, #2]
 80113a4:	461a      	mov	r2, r3
 80113a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113aa:	4930      	ldr	r1, [pc, #192]	; (801146c <readCanToStructs+0x11a0>)
 80113ac:	0112      	lsls	r2, r2, #4
 80113ae:	440a      	add	r2, r1
 80113b0:	4413      	add	r3, r2
 80113b2:	3304      	adds	r3, #4
 80113b4:	781a      	ldrb	r2, [r3, #0]
 80113b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80113ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113bc:	3301      	adds	r3, #1
 80113be:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80113c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113c4:	3301      	adds	r3, #1
 80113c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80113ca:	4b28      	ldr	r3, [pc, #160]	; (801146c <readCanToStructs+0x11a0>)
 80113cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80113d0:	885b      	ldrh	r3, [r3, #2]
 80113d2:	4a26      	ldr	r2, [pc, #152]	; (801146c <readCanToStructs+0x11a0>)
 80113d4:	011b      	lsls	r3, r3, #4
 80113d6:	4413      	add	r3, r2
 80113d8:	330c      	adds	r3, #12
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d3db      	bcc.n	801139c <readCanToStructs+0x10d0>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 80113e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113e8:	4a21      	ldr	r2, [pc, #132]	; (8011470 <readCanToStructs+0x11a4>)
 80113ea:	f240 4112 	movw	r1, #1042	; 0x412
 80113ee:	fb01 f303 	mul.w	r3, r1, r3
 80113f2:	4413      	add	r3, r2
 80113f4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80113f8:	781b      	ldrb	r3, [r3, #0]
 80113fa:	461a      	mov	r2, r3
 80113fc:	4613      	mov	r3, r2
 80113fe:	00db      	lsls	r3, r3, #3
 8011400:	1a9a      	subs	r2, r3, r2
 8011402:	4b1a      	ldr	r3, [pc, #104]	; (801146c <readCanToStructs+0x11a0>)
 8011404:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011408:	885b      	ldrh	r3, [r3, #2]
 801140a:	4918      	ldr	r1, [pc, #96]	; (801146c <readCanToStructs+0x11a0>)
 801140c:	011b      	lsls	r3, r3, #4
 801140e:	440b      	add	r3, r1
 8011410:	330c      	adds	r3, #12
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	3b01      	subs	r3, #1
 8011416:	4413      	add	r3, r2
 8011418:	2b13      	cmp	r3, #19
 801141a:	d966      	bls.n	80114ea <readCanToStructs+0x121e>
					uint16_t CRC16 = 0;
 801141c:	2300      	movs	r3, #0
 801141e:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 8011420:	2300      	movs	r3, #0
 8011422:	603b      	str	r3, [r7, #0]
 8011424:	1d3b      	adds	r3, r7, #4
 8011426:	2224      	movs	r2, #36	; 0x24
 8011428:	2100      	movs	r1, #0
 801142a:	4618      	mov	r0, r3
 801142c:	f011 f9b8 	bl	80227a0 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8011430:	463b      	mov	r3, r7
 8011432:	2214      	movs	r2, #20
 8011434:	490f      	ldr	r1, [pc, #60]	; (8011474 <readCanToStructs+0x11a8>)
 8011436:	4618      	mov	r0, r3
 8011438:	f011 f98a 	bl	8022750 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 801143c:	463b      	mov	r3, r7
 801143e:	2214      	movs	r2, #20
 8011440:	4619      	mov	r1, r3
 8011442:	2000      	movs	r0, #0
 8011444:	f001 fe04 	bl	8013050 <GetCRC16>
 8011448:	4603      	mov	r3, r0
 801144a:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 801144c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801144e:	2b00      	cmp	r3, #0
 8011450:	d11e      	bne.n	8011490 <readCanToStructs+0x11c4>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011456:	4a06      	ldr	r2, [pc, #24]	; (8011470 <readCanToStructs+0x11a4>)
 8011458:	f240 4112 	movw	r1, #1042	; 0x412
 801145c:	fb01 f303 	mul.w	r3, r1, r3
 8011460:	4413      	add	r3, r2
 8011462:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011466:	2200      	movs	r2, #0
 8011468:	701a      	strb	r2, [r3, #0]
				break;
 801146a:	e063      	b.n	8011534 <readCanToStructs+0x1268>
 801146c:	20005afc 	.word	0x20005afc
 8011470:	200052d8 	.word	0x200052d8
 8011474:	20002024 	.word	0x20002024
 8011478:	20000645 	.word	0x20000645
 801147c:	20000304 	.word	0x20000304
 8011480:	08027204 	.word	0x08027204
 8011484:	20001f48 	.word	0x20001f48
 8011488:	20000108 	.word	0x20000108
 801148c:	08027218 	.word	0x08027218
						if(Debug_flag == 1)
 8011490:	4bc7      	ldr	r3, [pc, #796]	; (80117b0 <readCanToStructs+0x14e4>)
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	2b01      	cmp	r3, #1
 8011496:	d10a      	bne.n	80114ae <readCanToStructs+0x11e2>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8011498:	4bc6      	ldr	r3, [pc, #792]	; (80117b4 <readCanToStructs+0x14e8>)
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	4ac6      	ldr	r2, [pc, #792]	; (80117b8 <readCanToStructs+0x14ec>)
 801149e:	3366      	adds	r3, #102	; 0x66
 80114a0:	009b      	lsls	r3, r3, #2
 80114a2:	4413      	add	r3, r2
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	4619      	mov	r1, r3
 80114a8:	48c4      	ldr	r0, [pc, #784]	; (80117bc <readCanToStructs+0x14f0>)
 80114aa:	f011 fa61 	bl	8022970 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 80114ae:	4bc1      	ldr	r3, [pc, #772]	; (80117b4 <readCanToStructs+0x14e8>)
 80114b0:	781b      	ldrb	r3, [r3, #0]
 80114b2:	461a      	mov	r2, r3
 80114b4:	4613      	mov	r3, r2
 80114b6:	009b      	lsls	r3, r3, #2
 80114b8:	4413      	add	r3, r2
 80114ba:	009b      	lsls	r3, r3, #2
 80114bc:	4ac0      	ldr	r2, [pc, #768]	; (80117c0 <readCanToStructs+0x14f4>)
 80114be:	4413      	add	r3, r2
 80114c0:	2214      	movs	r2, #20
 80114c2:	49bc      	ldr	r1, [pc, #752]	; (80117b4 <readCanToStructs+0x14e8>)
 80114c4:	4618      	mov	r0, r3
 80114c6:	f011 f943 	bl	8022750 <memcpy>
						Is_CAN_Exchange_happening = YES;
 80114ca:	4bbe      	ldr	r3, [pc, #760]	; (80117c4 <readCanToStructs+0x14f8>)
 80114cc:	2201      	movs	r2, #1
 80114ce:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80114d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114d4:	4abc      	ldr	r2, [pc, #752]	; (80117c8 <readCanToStructs+0x14fc>)
 80114d6:	f240 4112 	movw	r1, #1042	; 0x412
 80114da:	fb01 f303 	mul.w	r3, r1, r3
 80114de:	4413      	add	r3, r2
 80114e0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80114e4:	2200      	movs	r2, #0
 80114e6:	701a      	strb	r2, [r3, #0]
				break;
 80114e8:	e024      	b.n	8011534 <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 80114ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114ee:	4ab6      	ldr	r2, [pc, #728]	; (80117c8 <readCanToStructs+0x14fc>)
 80114f0:	f240 4112 	movw	r1, #1042	; 0x412
 80114f4:	fb01 f303 	mul.w	r3, r1, r3
 80114f8:	4413      	add	r3, r2
 80114fa:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80114fe:	2201      	movs	r2, #1
 8011500:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8011502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011506:	49b0      	ldr	r1, [pc, #704]	; (80117c8 <readCanToStructs+0x14fc>)
 8011508:	f240 4212 	movw	r2, #1042	; 0x412
 801150c:	fb03 f202 	mul.w	r2, r3, r2
 8011510:	440a      	add	r2, r1
 8011512:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8011516:	7812      	ldrb	r2, [r2, #0]
 8011518:	3201      	adds	r2, #1
 801151a:	b2d0      	uxtb	r0, r2
 801151c:	4aaa      	ldr	r2, [pc, #680]	; (80117c8 <readCanToStructs+0x14fc>)
 801151e:	f240 4112 	movw	r1, #1042	; 0x412
 8011522:	fb01 f303 	mul.w	r3, r1, r3
 8011526:	4413      	add	r3, r2
 8011528:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801152c:	4602      	mov	r2, r0
 801152e:	701a      	strb	r2, [r3, #0]
				break;
 8011530:	e000      	b.n	8011534 <readCanToStructs+0x1268>
				break;
 8011532:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8011534:	4ba5      	ldr	r3, [pc, #660]	; (80117cc <readCanToStructs+0x1500>)
 8011536:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801153a:	885b      	ldrh	r3, [r3, #2]
 801153c:	011b      	lsls	r3, r3, #4
 801153e:	4aa3      	ldr	r2, [pc, #652]	; (80117cc <readCanToStructs+0x1500>)
 8011540:	4413      	add	r3, r2
 8011542:	2210      	movs	r2, #16
 8011544:	2100      	movs	r1, #0
 8011546:	4618      	mov	r0, r3
 8011548:	f011 f92a 	bl	80227a0 <memset>
			canRead.Out++;
 801154c:	4b9f      	ldr	r3, [pc, #636]	; (80117cc <readCanToStructs+0x1500>)
 801154e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011552:	885b      	ldrh	r3, [r3, #2]
 8011554:	3301      	adds	r3, #1
 8011556:	b29a      	uxth	r2, r3
 8011558:	4b9c      	ldr	r3, [pc, #624]	; (80117cc <readCanToStructs+0x1500>)
 801155a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801155e:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8011560:	4b9a      	ldr	r3, [pc, #616]	; (80117cc <readCanToStructs+0x1500>)
 8011562:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011566:	885b      	ldrh	r3, [r3, #2]
 8011568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801156c:	d104      	bne.n	8011578 <readCanToStructs+0x12ac>
				canRead.Out = 0;
 801156e:	4b97      	ldr	r3, [pc, #604]	; (80117cc <readCanToStructs+0x1500>)
 8011570:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011574:	2200      	movs	r2, #0
 8011576:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8011578:	f7fe fe52 	bl	8010220 <canDataReady>
 801157c:	4603      	mov	r3, r0
 801157e:	2b00      	cmp	r3, #0
 8011580:	f47e aecb 	bne.w	801031a <readCanToStructs+0x4e>
	break;
 8011584:	f001 bcff 	b.w	8012f86 <readCanToStructs+0x2cba>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8011588:	4b90      	ldr	r3, [pc, #576]	; (80117cc <readCanToStructs+0x1500>)
 801158a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801158e:	885b      	ldrh	r3, [r3, #2]
 8011590:	4a8e      	ldr	r2, [pc, #568]	; (80117cc <readCanToStructs+0x1500>)
 8011592:	011b      	lsls	r3, r3, #4
 8011594:	4413      	add	r3, r2
 8011596:	330f      	adds	r3, #15
 8011598:	781b      	ldrb	r3, [r3, #0]
 801159a:	3b01      	subs	r3, #1
 801159c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 80115a0:	4b8a      	ldr	r3, [pc, #552]	; (80117cc <readCanToStructs+0x1500>)
 80115a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80115a6:	885b      	ldrh	r3, [r3, #2]
 80115a8:	4a88      	ldr	r2, [pc, #544]	; (80117cc <readCanToStructs+0x1500>)
 80115aa:	011b      	lsls	r3, r3, #4
 80115ac:	4413      	add	r3, r2
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80115b4:	f200 8672 	bhi.w	801229c <readCanToStructs+0x1fd0>
 80115b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115bc:	d80a      	bhi.n	80115d4 <readCanToStructs+0x1308>
 80115be:	f240 1203 	movw	r2, #259	; 0x103
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d01e      	beq.n	8011604 <readCanToStructs+0x1338>
 80115c6:	f240 1209 	movw	r2, #265	; 0x109
 80115ca:	4293      	cmp	r3, r2
 80115cc:	f000 8108 	beq.w	80117e0 <readCanToStructs+0x1514>
				break;
 80115d0:	f000 be64 	b.w	801229c <readCanToStructs+0x1fd0>
 80115d4:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80115d8:	2b07      	cmp	r3, #7
 80115da:	f200 865f 	bhi.w	801229c <readCanToStructs+0x1fd0>
 80115de:	a201      	add	r2, pc, #4	; (adr r2, 80115e4 <readCanToStructs+0x1318>)
 80115e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115e4:	0801198d 	.word	0x0801198d
 80115e8:	08011b71 	.word	0x08011b71
 80115ec:	0801229d 	.word	0x0801229d
 80115f0:	0801229d 	.word	0x0801229d
 80115f4:	080120ff 	.word	0x080120ff
 80115f8:	0801229d 	.word	0x0801229d
 80115fc:	08011d21 	.word	0x08011d21
 8011600:	08011f13 	.word	0x08011f13
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011604:	4b72      	ldr	r3, [pc, #456]	; (80117d0 <readCanToStructs+0x1504>)
 8011606:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011608:	4b70      	ldr	r3, [pc, #448]	; (80117cc <readCanToStructs+0x1500>)
 801160a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801160e:	885b      	ldrh	r3, [r3, #2]
 8011610:	4a6e      	ldr	r2, [pc, #440]	; (80117cc <readCanToStructs+0x1500>)
 8011612:	011b      	lsls	r3, r3, #4
 8011614:	4413      	add	r3, r2
 8011616:	3304      	adds	r3, #4
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801161e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011622:	2b00      	cmp	r3, #0
 8011624:	d110      	bne.n	8011648 <readCanToStructs+0x137c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011626:	2206      	movs	r2, #6
 8011628:	2100      	movs	r1, #0
 801162a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801162c:	f011 f8b8 	bl	80227a0 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011634:	4a64      	ldr	r2, [pc, #400]	; (80117c8 <readCanToStructs+0x14fc>)
 8011636:	f240 4112 	movw	r1, #1042	; 0x412
 801163a:	fb01 f303 	mul.w	r3, r1, r3
 801163e:	4413      	add	r3, r2
 8011640:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011644:	2200      	movs	r2, #0
 8011646:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8011648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801164c:	4a5e      	ldr	r2, [pc, #376]	; (80117c8 <readCanToStructs+0x14fc>)
 801164e:	f240 4112 	movw	r1, #1042	; 0x412
 8011652:	fb01 f303 	mul.w	r3, r1, r3
 8011656:	4413      	add	r3, r2
 8011658:	f203 2307 	addw	r3, r3, #519	; 0x207
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011662:	429a      	cmp	r2, r3
 8011664:	d015      	beq.n	8011692 <readCanToStructs+0x13c6>
					printf("GPS Packet Seq no MisMatch\n");
 8011666:	485b      	ldr	r0, [pc, #364]	; (80117d4 <readCanToStructs+0x1508>)
 8011668:	f011 fa1e 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801166c:	2206      	movs	r2, #6
 801166e:	2100      	movs	r1, #0
 8011670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011672:	f011 f895 	bl	80227a0 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801167a:	4a53      	ldr	r2, [pc, #332]	; (80117c8 <readCanToStructs+0x14fc>)
 801167c:	f240 4112 	movw	r1, #1042	; 0x412
 8011680:	fb01 f303 	mul.w	r3, r1, r3
 8011684:	4413      	add	r3, r2
 8011686:	f203 2307 	addw	r3, r3, #519	; 0x207
 801168a:	2200      	movs	r2, #0
 801168c:	701a      	strb	r2, [r3, #0]
					break;
 801168e:	f000 be0a 	b.w	80122a6 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011692:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011696:	4613      	mov	r3, r2
 8011698:	00db      	lsls	r3, r3, #3
 801169a:	1a9b      	subs	r3, r3, r2
 801169c:	461a      	mov	r2, r3
 801169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a0:	4413      	add	r3, r2
 80116a2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80116a4:	2301      	movs	r3, #1
 80116a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80116aa:	e016      	b.n	80116da <readCanToStructs+0x140e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80116ac:	4b47      	ldr	r3, [pc, #284]	; (80117cc <readCanToStructs+0x1500>)
 80116ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80116b2:	885b      	ldrh	r3, [r3, #2]
 80116b4:	461a      	mov	r2, r3
 80116b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80116ba:	4944      	ldr	r1, [pc, #272]	; (80117cc <readCanToStructs+0x1500>)
 80116bc:	0112      	lsls	r2, r2, #4
 80116be:	440a      	add	r2, r1
 80116c0:	4413      	add	r3, r2
 80116c2:	3304      	adds	r3, #4
 80116c4:	781a      	ldrb	r2, [r3, #0]
 80116c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80116ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116cc:	3301      	adds	r3, #1
 80116ce:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80116d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80116d4:	3301      	adds	r3, #1
 80116d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80116da:	4b3c      	ldr	r3, [pc, #240]	; (80117cc <readCanToStructs+0x1500>)
 80116dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80116e0:	885b      	ldrh	r3, [r3, #2]
 80116e2:	4a3a      	ldr	r2, [pc, #232]	; (80117cc <readCanToStructs+0x1500>)
 80116e4:	011b      	lsls	r3, r3, #4
 80116e6:	4413      	add	r3, r2
 80116e8:	330c      	adds	r3, #12
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80116f0:	429a      	cmp	r2, r3
 80116f2:	d3db      	bcc.n	80116ac <readCanToStructs+0x13e0>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80116f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116f8:	4a33      	ldr	r2, [pc, #204]	; (80117c8 <readCanToStructs+0x14fc>)
 80116fa:	f240 4112 	movw	r1, #1042	; 0x412
 80116fe:	fb01 f303 	mul.w	r3, r1, r3
 8011702:	4413      	add	r3, r2
 8011704:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011708:	781b      	ldrb	r3, [r3, #0]
 801170a:	461a      	mov	r2, r3
 801170c:	4613      	mov	r3, r2
 801170e:	00db      	lsls	r3, r3, #3
 8011710:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011712:	4b2e      	ldr	r3, [pc, #184]	; (80117cc <readCanToStructs+0x1500>)
 8011714:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011718:	885b      	ldrh	r3, [r3, #2]
 801171a:	492c      	ldr	r1, [pc, #176]	; (80117cc <readCanToStructs+0x1500>)
 801171c:	011b      	lsls	r3, r3, #4
 801171e:	440b      	add	r3, r1
 8011720:	330c      	adds	r3, #12
 8011722:	781b      	ldrb	r3, [r3, #0]
 8011724:	3b01      	subs	r3, #1
 8011726:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011728:	2b05      	cmp	r3, #5
 801172a:	d91c      	bls.n	8011766 <readCanToStructs+0x149a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 801172c:	4b2a      	ldr	r3, [pc, #168]	; (80117d8 <readCanToStructs+0x150c>)
 801172e:	4a28      	ldr	r2, [pc, #160]	; (80117d0 <readCanToStructs+0x1504>)
 8011730:	6811      	ldr	r1, [r2, #0]
 8011732:	6019      	str	r1, [r3, #0]
 8011734:	8892      	ldrh	r2, [r2, #4]
 8011736:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011738:	4b1d      	ldr	r3, [pc, #116]	; (80117b0 <readCanToStructs+0x14e4>)
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	2b01      	cmp	r3, #1
 801173e:	d102      	bne.n	8011746 <readCanToStructs+0x147a>
						printf("GPS_PACKET_RECEIVED\n");
 8011740:	4826      	ldr	r0, [pc, #152]	; (80117dc <readCanToStructs+0x1510>)
 8011742:	f011 f9b1 	bl	8022aa8 <puts>
					Write_RTC();
 8011746:	f7f9 fe6f 	bl	800b428 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801174a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801174e:	4a1e      	ldr	r2, [pc, #120]	; (80117c8 <readCanToStructs+0x14fc>)
 8011750:	f240 4112 	movw	r1, #1042	; 0x412
 8011754:	fb01 f303 	mul.w	r3, r1, r3
 8011758:	4413      	add	r3, r2
 801175a:	f203 2307 	addw	r3, r3, #519	; 0x207
 801175e:	2200      	movs	r2, #0
 8011760:	701a      	strb	r2, [r3, #0]
				break;
 8011762:	f000 bda0 	b.w	80122a6 <readCanToStructs+0x1fda>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8011766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801176a:	4a17      	ldr	r2, [pc, #92]	; (80117c8 <readCanToStructs+0x14fc>)
 801176c:	f240 4112 	movw	r1, #1042	; 0x412
 8011770:	fb01 f303 	mul.w	r3, r1, r3
 8011774:	4413      	add	r3, r2
 8011776:	f203 2306 	addw	r3, r3, #518	; 0x206
 801177a:	2201      	movs	r2, #1
 801177c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 801177e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011782:	4911      	ldr	r1, [pc, #68]	; (80117c8 <readCanToStructs+0x14fc>)
 8011784:	f240 4212 	movw	r2, #1042	; 0x412
 8011788:	fb03 f202 	mul.w	r2, r3, r2
 801178c:	440a      	add	r2, r1
 801178e:	f202 2207 	addw	r2, r2, #519	; 0x207
 8011792:	7812      	ldrb	r2, [r2, #0]
 8011794:	3201      	adds	r2, #1
 8011796:	b2d0      	uxtb	r0, r2
 8011798:	4a0b      	ldr	r2, [pc, #44]	; (80117c8 <readCanToStructs+0x14fc>)
 801179a:	f240 4112 	movw	r1, #1042	; 0x412
 801179e:	fb01 f303 	mul.w	r3, r1, r3
 80117a2:	4413      	add	r3, r2
 80117a4:	f203 2307 	addw	r3, r3, #519	; 0x207
 80117a8:	4602      	mov	r2, r0
 80117aa:	701a      	strb	r2, [r3, #0]
				break;
 80117ac:	f000 bd7b 	b.w	80122a6 <readCanToStructs+0x1fda>
 80117b0:	20000645 	.word	0x20000645
 80117b4:	20002024 	.word	0x20002024
 80117b8:	20000304 	.word	0x20000304
 80117bc:	08027238 	.word	0x08027238
 80117c0:	20001f48 	.word	0x20001f48
 80117c4:	20000108 	.word	0x20000108
 80117c8:	200052d8 	.word	0x200052d8
 80117cc:	20005afc 	.word	0x20005afc
 80117d0:	20002880 	.word	0x20002880
 80117d4:	08027074 	.word	0x08027074
 80117d8:	20002878 	.word	0x20002878
 80117dc:	08027090 	.word	0x08027090
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80117e0:	4bc5      	ldr	r3, [pc, #788]	; (8011af8 <readCanToStructs+0x182c>)
 80117e2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80117e4:	4bc5      	ldr	r3, [pc, #788]	; (8011afc <readCanToStructs+0x1830>)
 80117e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80117ea:	885b      	ldrh	r3, [r3, #2]
 80117ec:	4ac3      	ldr	r2, [pc, #780]	; (8011afc <readCanToStructs+0x1830>)
 80117ee:	011b      	lsls	r3, r3, #4
 80117f0:	4413      	add	r3, r2
 80117f2:	3304      	adds	r3, #4
 80117f4:	781b      	ldrb	r3, [r3, #0]
 80117f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80117fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d110      	bne.n	8011824 <readCanToStructs+0x1558>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011802:	2206      	movs	r2, #6
 8011804:	2100      	movs	r1, #0
 8011806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011808:	f010 ffca 	bl	80227a0 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801180c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011810:	4abb      	ldr	r2, [pc, #748]	; (8011b00 <readCanToStructs+0x1834>)
 8011812:	f240 4112 	movw	r1, #1042	; 0x412
 8011816:	fb01 f303 	mul.w	r3, r1, r3
 801181a:	4413      	add	r3, r2
 801181c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011820:	2200      	movs	r2, #0
 8011822:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8011824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011828:	4ab5      	ldr	r2, [pc, #724]	; (8011b00 <readCanToStructs+0x1834>)
 801182a:	f240 4112 	movw	r1, #1042	; 0x412
 801182e:	fb01 f303 	mul.w	r3, r1, r3
 8011832:	4413      	add	r3, r2
 8011834:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801183e:	429a      	cmp	r2, r3
 8011840:	d015      	beq.n	801186e <readCanToStructs+0x15a2>
					printf("GPS2 Packet Seq no MisMatch\n");
 8011842:	48b0      	ldr	r0, [pc, #704]	; (8011b04 <readCanToStructs+0x1838>)
 8011844:	f011 f930 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011848:	2206      	movs	r2, #6
 801184a:	2100      	movs	r1, #0
 801184c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801184e:	f010 ffa7 	bl	80227a0 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011856:	4aaa      	ldr	r2, [pc, #680]	; (8011b00 <readCanToStructs+0x1834>)
 8011858:	f240 4112 	movw	r1, #1042	; 0x412
 801185c:	fb01 f303 	mul.w	r3, r1, r3
 8011860:	4413      	add	r3, r2
 8011862:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011866:	2200      	movs	r2, #0
 8011868:	701a      	strb	r2, [r3, #0]
					break;
 801186a:	f000 bd1c 	b.w	80122a6 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 801186e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011872:	4613      	mov	r3, r2
 8011874:	00db      	lsls	r3, r3, #3
 8011876:	1a9b      	subs	r3, r3, r2
 8011878:	461a      	mov	r2, r3
 801187a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801187c:	4413      	add	r3, r2
 801187e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011880:	2301      	movs	r3, #1
 8011882:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011886:	e016      	b.n	80118b6 <readCanToStructs+0x15ea>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011888:	4b9c      	ldr	r3, [pc, #624]	; (8011afc <readCanToStructs+0x1830>)
 801188a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801188e:	885b      	ldrh	r3, [r3, #2]
 8011890:	461a      	mov	r2, r3
 8011892:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011896:	4999      	ldr	r1, [pc, #612]	; (8011afc <readCanToStructs+0x1830>)
 8011898:	0112      	lsls	r2, r2, #4
 801189a:	440a      	add	r2, r1
 801189c:	4413      	add	r3, r2
 801189e:	3304      	adds	r3, #4
 80118a0:	781a      	ldrb	r2, [r3, #0]
 80118a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118a4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80118a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118a8:	3301      	adds	r3, #1
 80118aa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80118ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80118b0:	3301      	adds	r3, #1
 80118b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80118b6:	4b91      	ldr	r3, [pc, #580]	; (8011afc <readCanToStructs+0x1830>)
 80118b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118bc:	885b      	ldrh	r3, [r3, #2]
 80118be:	4a8f      	ldr	r2, [pc, #572]	; (8011afc <readCanToStructs+0x1830>)
 80118c0:	011b      	lsls	r3, r3, #4
 80118c2:	4413      	add	r3, r2
 80118c4:	330c      	adds	r3, #12
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80118cc:	429a      	cmp	r2, r3
 80118ce:	d3db      	bcc.n	8011888 <readCanToStructs+0x15bc>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80118d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118d4:	4a8a      	ldr	r2, [pc, #552]	; (8011b00 <readCanToStructs+0x1834>)
 80118d6:	f240 4112 	movw	r1, #1042	; 0x412
 80118da:	fb01 f303 	mul.w	r3, r1, r3
 80118de:	4413      	add	r3, r2
 80118e0:	f203 2313 	addw	r3, r3, #531	; 0x213
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	461a      	mov	r2, r3
 80118e8:	4613      	mov	r3, r2
 80118ea:	00db      	lsls	r3, r3, #3
 80118ec:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80118ee:	4b83      	ldr	r3, [pc, #524]	; (8011afc <readCanToStructs+0x1830>)
 80118f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118f4:	885b      	ldrh	r3, [r3, #2]
 80118f6:	4981      	ldr	r1, [pc, #516]	; (8011afc <readCanToStructs+0x1830>)
 80118f8:	011b      	lsls	r3, r3, #4
 80118fa:	440b      	add	r3, r1
 80118fc:	330c      	adds	r3, #12
 80118fe:	781b      	ldrb	r3, [r3, #0]
 8011900:	3b01      	subs	r3, #1
 8011902:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011904:	2b05      	cmp	r3, #5
 8011906:	d91c      	bls.n	8011942 <readCanToStructs+0x1676>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011908:	4b7f      	ldr	r3, [pc, #508]	; (8011b08 <readCanToStructs+0x183c>)
 801190a:	4a7b      	ldr	r2, [pc, #492]	; (8011af8 <readCanToStructs+0x182c>)
 801190c:	6811      	ldr	r1, [r2, #0]
 801190e:	6019      	str	r1, [r3, #0]
 8011910:	8892      	ldrh	r2, [r2, #4]
 8011912:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011914:	4b7d      	ldr	r3, [pc, #500]	; (8011b0c <readCanToStructs+0x1840>)
 8011916:	781b      	ldrb	r3, [r3, #0]
 8011918:	2b01      	cmp	r3, #1
 801191a:	d102      	bne.n	8011922 <readCanToStructs+0x1656>
						printf("GPS2_PACKET_RECEIVED\n");
 801191c:	487c      	ldr	r0, [pc, #496]	; (8011b10 <readCanToStructs+0x1844>)
 801191e:	f011 f8c3 	bl	8022aa8 <puts>
					Write_RTC();
 8011922:	f7f9 fd81 	bl	800b428 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011926:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801192a:	4a75      	ldr	r2, [pc, #468]	; (8011b00 <readCanToStructs+0x1834>)
 801192c:	f240 4112 	movw	r1, #1042	; 0x412
 8011930:	fb01 f303 	mul.w	r3, r1, r3
 8011934:	4413      	add	r3, r2
 8011936:	f203 2313 	addw	r3, r3, #531	; 0x213
 801193a:	2200      	movs	r2, #0
 801193c:	701a      	strb	r2, [r3, #0]
				break;
 801193e:	f000 bcb2 	b.w	80122a6 <readCanToStructs+0x1fda>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8011942:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011946:	4a6e      	ldr	r2, [pc, #440]	; (8011b00 <readCanToStructs+0x1834>)
 8011948:	f240 4112 	movw	r1, #1042	; 0x412
 801194c:	fb01 f303 	mul.w	r3, r1, r3
 8011950:	4413      	add	r3, r2
 8011952:	f203 2312 	addw	r3, r3, #530	; 0x212
 8011956:	2201      	movs	r2, #1
 8011958:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 801195a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801195e:	4968      	ldr	r1, [pc, #416]	; (8011b00 <readCanToStructs+0x1834>)
 8011960:	f240 4212 	movw	r2, #1042	; 0x412
 8011964:	fb03 f202 	mul.w	r2, r3, r2
 8011968:	440a      	add	r2, r1
 801196a:	f202 2213 	addw	r2, r2, #531	; 0x213
 801196e:	7812      	ldrb	r2, [r2, #0]
 8011970:	3201      	adds	r2, #1
 8011972:	b2d0      	uxtb	r0, r2
 8011974:	4a62      	ldr	r2, [pc, #392]	; (8011b00 <readCanToStructs+0x1834>)
 8011976:	f240 4112 	movw	r1, #1042	; 0x412
 801197a:	fb01 f303 	mul.w	r3, r1, r3
 801197e:	4413      	add	r3, r2
 8011980:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011984:	4602      	mov	r2, r0
 8011986:	701a      	strb	r2, [r3, #0]
				break;
 8011988:	f000 bc8d 	b.w	80122a6 <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 801198c:	4b61      	ldr	r3, [pc, #388]	; (8011b14 <readCanToStructs+0x1848>)
 801198e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011990:	4b5a      	ldr	r3, [pc, #360]	; (8011afc <readCanToStructs+0x1830>)
 8011992:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011996:	885b      	ldrh	r3, [r3, #2]
 8011998:	4a58      	ldr	r2, [pc, #352]	; (8011afc <readCanToStructs+0x1830>)
 801199a:	011b      	lsls	r3, r3, #4
 801199c:	4413      	add	r3, r2
 801199e:	3304      	adds	r3, #4
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80119a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d110      	bne.n	80119d0 <readCanToStructs+0x1704>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80119ae:	2204      	movs	r2, #4
 80119b0:	2100      	movs	r1, #0
 80119b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119b4:	f010 fef4 	bl	80227a0 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80119b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119bc:	4a50      	ldr	r2, [pc, #320]	; (8011b00 <readCanToStructs+0x1834>)
 80119be:	f240 4112 	movw	r1, #1042	; 0x412
 80119c2:	fb01 f303 	mul.w	r3, r1, r3
 80119c6:	4413      	add	r3, r2
 80119c8:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80119cc:	2200      	movs	r2, #0
 80119ce:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 80119d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119d4:	4a4a      	ldr	r2, [pc, #296]	; (8011b00 <readCanToStructs+0x1834>)
 80119d6:	f240 4112 	movw	r1, #1042	; 0x412
 80119da:	fb01 f303 	mul.w	r3, r1, r3
 80119de:	4413      	add	r3, r2
 80119e0:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80119e4:	781b      	ldrb	r3, [r3, #0]
 80119e6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80119ea:	429a      	cmp	r2, r3
 80119ec:	d015      	beq.n	8011a1a <readCanToStructs+0x174e>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 80119ee:	484a      	ldr	r0, [pc, #296]	; (8011b18 <readCanToStructs+0x184c>)
 80119f0:	f011 f85a 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80119f4:	2204      	movs	r2, #4
 80119f6:	2100      	movs	r1, #0
 80119f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119fa:	f010 fed1 	bl	80227a0 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80119fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a02:	4a3f      	ldr	r2, [pc, #252]	; (8011b00 <readCanToStructs+0x1834>)
 8011a04:	f240 4112 	movw	r1, #1042	; 0x412
 8011a08:	fb01 f303 	mul.w	r3, r1, r3
 8011a0c:	4413      	add	r3, r2
 8011a0e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011a12:	2200      	movs	r2, #0
 8011a14:	701a      	strb	r2, [r3, #0]
					break;
 8011a16:	f000 bc46 	b.w	80122a6 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011a1a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011a1e:	4613      	mov	r3, r2
 8011a20:	00db      	lsls	r3, r3, #3
 8011a22:	1a9b      	subs	r3, r3, r2
 8011a24:	461a      	mov	r2, r3
 8011a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a28:	4413      	add	r3, r2
 8011a2a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a32:	e016      	b.n	8011a62 <readCanToStructs+0x1796>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011a34:	4b31      	ldr	r3, [pc, #196]	; (8011afc <readCanToStructs+0x1830>)
 8011a36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a3a:	885b      	ldrh	r3, [r3, #2]
 8011a3c:	461a      	mov	r2, r3
 8011a3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a42:	492e      	ldr	r1, [pc, #184]	; (8011afc <readCanToStructs+0x1830>)
 8011a44:	0112      	lsls	r2, r2, #4
 8011a46:	440a      	add	r2, r1
 8011a48:	4413      	add	r3, r2
 8011a4a:	3304      	adds	r3, #4
 8011a4c:	781a      	ldrb	r2, [r3, #0]
 8011a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a50:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a54:	3301      	adds	r3, #1
 8011a56:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011a58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a62:	4b26      	ldr	r3, [pc, #152]	; (8011afc <readCanToStructs+0x1830>)
 8011a64:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a68:	885b      	ldrh	r3, [r3, #2]
 8011a6a:	4a24      	ldr	r2, [pc, #144]	; (8011afc <readCanToStructs+0x1830>)
 8011a6c:	011b      	lsls	r3, r3, #4
 8011a6e:	4413      	add	r3, r2
 8011a70:	330c      	adds	r3, #12
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	d3db      	bcc.n	8011a34 <readCanToStructs+0x1768>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8011a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a80:	4a1f      	ldr	r2, [pc, #124]	; (8011b00 <readCanToStructs+0x1834>)
 8011a82:	f240 4112 	movw	r1, #1042	; 0x412
 8011a86:	fb01 f303 	mul.w	r3, r1, r3
 8011a8a:	4413      	add	r3, r2
 8011a8c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011a90:	781b      	ldrb	r3, [r3, #0]
 8011a92:	461a      	mov	r2, r3
 8011a94:	4613      	mov	r3, r2
 8011a96:	00db      	lsls	r3, r3, #3
 8011a98:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8011a9a:	4b18      	ldr	r3, [pc, #96]	; (8011afc <readCanToStructs+0x1830>)
 8011a9c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011aa0:	885b      	ldrh	r3, [r3, #2]
 8011aa2:	4916      	ldr	r1, [pc, #88]	; (8011afc <readCanToStructs+0x1830>)
 8011aa4:	011b      	lsls	r3, r3, #4
 8011aa6:	440b      	add	r3, r1
 8011aa8:	330c      	adds	r3, #12
 8011aaa:	781b      	ldrb	r3, [r3, #0]
 8011aac:	3b01      	subs	r3, #1
 8011aae:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8011ab0:	2b03      	cmp	r3, #3
 8011ab2:	d939      	bls.n	8011b28 <readCanToStructs+0x185c>
 8011ab4:	4b17      	ldr	r3, [pc, #92]	; (8011b14 <readCanToStructs+0x1848>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8011aba:	4b18      	ldr	r3, [pc, #96]	; (8011b1c <readCanToStructs+0x1850>)
 8011abc:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8011abe:	4b13      	ldr	r3, [pc, #76]	; (8011b0c <readCanToStructs+0x1840>)
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	2b01      	cmp	r3, #1
 8011ac4:	d102      	bne.n	8011acc <readCanToStructs+0x1800>
						printf("O_Info1_RCV\n");
 8011ac6:	4816      	ldr	r0, [pc, #88]	; (8011b20 <readCanToStructs+0x1854>)
 8011ac8:	f010 ffee 	bl	8022aa8 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011acc:	4b15      	ldr	r3, [pc, #84]	; (8011b24 <readCanToStructs+0x1858>)
 8011ace:	2201      	movs	r2, #1
 8011ad0:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011ad2:	f003 ff4f 	bl	8015974 <HAL_GetTick>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	4a12      	ldr	r2, [pc, #72]	; (8011b24 <readCanToStructs+0x1858>)
 8011ada:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011adc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ae0:	4a07      	ldr	r2, [pc, #28]	; (8011b00 <readCanToStructs+0x1834>)
 8011ae2:	f240 4112 	movw	r1, #1042	; 0x412
 8011ae6:	fb01 f303 	mul.w	r3, r1, r3
 8011aea:	4413      	add	r3, r2
 8011aec:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011af0:	2200      	movs	r2, #0
 8011af2:	701a      	strb	r2, [r3, #0]
				break;
 8011af4:	e3d7      	b.n	80122a6 <readCanToStructs+0x1fda>
 8011af6:	bf00      	nop
 8011af8:	20002880 	.word	0x20002880
 8011afc:	20005afc 	.word	0x20005afc
 8011b00:	200052d8 	.word	0x200052d8
 8011b04:	080270a4 	.word	0x080270a4
 8011b08:	20002878 	.word	0x20002878
 8011b0c:	20000645 	.word	0x20000645
 8011b10:	080270c0 	.word	0x080270c0
 8011b14:	20003528 	.word	0x20003528
 8011b18:	080270d8 	.word	0x080270d8
 8011b1c:	20003524 	.word	0x20003524
 8011b20:	0802724c 	.word	0x0802724c
 8011b24:	2000352c 	.word	0x2000352c
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8011b28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b2c:	4a98      	ldr	r2, [pc, #608]	; (8011d90 <readCanToStructs+0x1ac4>)
 8011b2e:	f240 4112 	movw	r1, #1042	; 0x412
 8011b32:	fb01 f303 	mul.w	r3, r1, r3
 8011b36:	4413      	add	r3, r2
 8011b38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8011b40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b44:	4992      	ldr	r1, [pc, #584]	; (8011d90 <readCanToStructs+0x1ac4>)
 8011b46:	f240 4212 	movw	r2, #1042	; 0x412
 8011b4a:	fb03 f202 	mul.w	r2, r3, r2
 8011b4e:	440a      	add	r2, r1
 8011b50:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8011b54:	7812      	ldrb	r2, [r2, #0]
 8011b56:	3201      	adds	r2, #1
 8011b58:	b2d0      	uxtb	r0, r2
 8011b5a:	4a8d      	ldr	r2, [pc, #564]	; (8011d90 <readCanToStructs+0x1ac4>)
 8011b5c:	f240 4112 	movw	r1, #1042	; 0x412
 8011b60:	fb01 f303 	mul.w	r3, r1, r3
 8011b64:	4413      	add	r3, r2
 8011b66:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011b6a:	4602      	mov	r2, r0
 8011b6c:	701a      	strb	r2, [r3, #0]
				break;
 8011b6e:	e39a      	b.n	80122a6 <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8011b70:	4b88      	ldr	r3, [pc, #544]	; (8011d94 <readCanToStructs+0x1ac8>)
 8011b72:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011b74:	4b88      	ldr	r3, [pc, #544]	; (8011d98 <readCanToStructs+0x1acc>)
 8011b76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b7a:	885b      	ldrh	r3, [r3, #2]
 8011b7c:	4a86      	ldr	r2, [pc, #536]	; (8011d98 <readCanToStructs+0x1acc>)
 8011b7e:	011b      	lsls	r3, r3, #4
 8011b80:	4413      	add	r3, r2
 8011b82:	3304      	adds	r3, #4
 8011b84:	781b      	ldrb	r3, [r3, #0]
 8011b86:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011b8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d110      	bne.n	8011bb4 <readCanToStructs+0x18e8>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8011b92:	2204      	movs	r2, #4
 8011b94:	2100      	movs	r1, #0
 8011b96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b98:	f010 fe02 	bl	80227a0 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ba0:	4a7b      	ldr	r2, [pc, #492]	; (8011d90 <readCanToStructs+0x1ac4>)
 8011ba2:	f240 4112 	movw	r1, #1042	; 0x412
 8011ba6:	fb01 f303 	mul.w	r3, r1, r3
 8011baa:	4413      	add	r3, r2
 8011bac:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8011bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bb8:	4a75      	ldr	r2, [pc, #468]	; (8011d90 <readCanToStructs+0x1ac4>)
 8011bba:	f240 4112 	movw	r1, #1042	; 0x412
 8011bbe:	fb01 f303 	mul.w	r3, r1, r3
 8011bc2:	4413      	add	r3, r2
 8011bc4:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d014      	beq.n	8011bfc <readCanToStructs+0x1930>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 8011bd2:	4872      	ldr	r0, [pc, #456]	; (8011d9c <readCanToStructs+0x1ad0>)
 8011bd4:	f010 ff68 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8011bd8:	2204      	movs	r2, #4
 8011bda:	2100      	movs	r1, #0
 8011bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bde:	f010 fddf 	bl	80227a0 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011be2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011be6:	4a6a      	ldr	r2, [pc, #424]	; (8011d90 <readCanToStructs+0x1ac4>)
 8011be8:	f240 4112 	movw	r1, #1042	; 0x412
 8011bec:	fb01 f303 	mul.w	r3, r1, r3
 8011bf0:	4413      	add	r3, r2
 8011bf2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	701a      	strb	r2, [r3, #0]
					break;
 8011bfa:	e354      	b.n	80122a6 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011bfc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011c00:	4613      	mov	r3, r2
 8011c02:	00db      	lsls	r3, r3, #3
 8011c04:	1a9b      	subs	r3, r3, r2
 8011c06:	461a      	mov	r2, r3
 8011c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c0a:	4413      	add	r3, r2
 8011c0c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011c0e:	2301      	movs	r3, #1
 8011c10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c14:	e016      	b.n	8011c44 <readCanToStructs+0x1978>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011c16:	4b60      	ldr	r3, [pc, #384]	; (8011d98 <readCanToStructs+0x1acc>)
 8011c18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c1c:	885b      	ldrh	r3, [r3, #2]
 8011c1e:	461a      	mov	r2, r3
 8011c20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c24:	495c      	ldr	r1, [pc, #368]	; (8011d98 <readCanToStructs+0x1acc>)
 8011c26:	0112      	lsls	r2, r2, #4
 8011c28:	440a      	add	r2, r1
 8011c2a:	4413      	add	r3, r2
 8011c2c:	3304      	adds	r3, #4
 8011c2e:	781a      	ldrb	r2, [r3, #0]
 8011c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c32:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c36:	3301      	adds	r3, #1
 8011c38:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011c3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c3e:	3301      	adds	r3, #1
 8011c40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c44:	4b54      	ldr	r3, [pc, #336]	; (8011d98 <readCanToStructs+0x1acc>)
 8011c46:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c4a:	885b      	ldrh	r3, [r3, #2]
 8011c4c:	4a52      	ldr	r2, [pc, #328]	; (8011d98 <readCanToStructs+0x1acc>)
 8011c4e:	011b      	lsls	r3, r3, #4
 8011c50:	4413      	add	r3, r2
 8011c52:	330c      	adds	r3, #12
 8011c54:	781b      	ldrb	r3, [r3, #0]
 8011c56:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d3db      	bcc.n	8011c16 <readCanToStructs+0x194a>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8011c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c62:	4a4b      	ldr	r2, [pc, #300]	; (8011d90 <readCanToStructs+0x1ac4>)
 8011c64:	f240 4112 	movw	r1, #1042	; 0x412
 8011c68:	fb01 f303 	mul.w	r3, r1, r3
 8011c6c:	4413      	add	r3, r2
 8011c6e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011c72:	781b      	ldrb	r3, [r3, #0]
 8011c74:	461a      	mov	r2, r3
 8011c76:	4613      	mov	r3, r2
 8011c78:	00db      	lsls	r3, r3, #3
 8011c7a:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8011c7c:	4b46      	ldr	r3, [pc, #280]	; (8011d98 <readCanToStructs+0x1acc>)
 8011c7e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c82:	885b      	ldrh	r3, [r3, #2]
 8011c84:	4944      	ldr	r1, [pc, #272]	; (8011d98 <readCanToStructs+0x1acc>)
 8011c86:	011b      	lsls	r3, r3, #4
 8011c88:	440b      	add	r3, r1
 8011c8a:	330c      	adds	r3, #12
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	3b01      	subs	r3, #1
 8011c90:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8011c92:	2b03      	cmp	r3, #3
 8011c94:	d920      	bls.n	8011cd8 <readCanToStructs+0x1a0c>
 8011c96:	4b3f      	ldr	r3, [pc, #252]	; (8011d94 <readCanToStructs+0x1ac8>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8011c9c:	4b40      	ldr	r3, [pc, #256]	; (8011da0 <readCanToStructs+0x1ad4>)
 8011c9e:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8011ca0:	4b40      	ldr	r3, [pc, #256]	; (8011da4 <readCanToStructs+0x1ad8>)
 8011ca2:	781b      	ldrb	r3, [r3, #0]
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	d102      	bne.n	8011cae <readCanToStructs+0x19e2>
						printf("O_Info2_RCV\n");
 8011ca8:	483f      	ldr	r0, [pc, #252]	; (8011da8 <readCanToStructs+0x1adc>)
 8011caa:	f010 fefd 	bl	8022aa8 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011cae:	4b3f      	ldr	r3, [pc, #252]	; (8011dac <readCanToStructs+0x1ae0>)
 8011cb0:	2201      	movs	r2, #1
 8011cb2:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011cb4:	f003 fe5e 	bl	8015974 <HAL_GetTick>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	4a3c      	ldr	r2, [pc, #240]	; (8011dac <readCanToStructs+0x1ae0>)
 8011cbc:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cc2:	4a33      	ldr	r2, [pc, #204]	; (8011d90 <readCanToStructs+0x1ac4>)
 8011cc4:	f240 4112 	movw	r1, #1042	; 0x412
 8011cc8:	fb01 f303 	mul.w	r3, r1, r3
 8011ccc:	4413      	add	r3, r2
 8011cce:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	701a      	strb	r2, [r3, #0]
				break;
 8011cd6:	e2e6      	b.n	80122a6 <readCanToStructs+0x1fda>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8011cd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cdc:	4a2c      	ldr	r2, [pc, #176]	; (8011d90 <readCanToStructs+0x1ac4>)
 8011cde:	f240 4112 	movw	r1, #1042	; 0x412
 8011ce2:	fb01 f303 	mul.w	r3, r1, r3
 8011ce6:	4413      	add	r3, r2
 8011ce8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011cec:	2201      	movs	r2, #1
 8011cee:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8011cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cf4:	4926      	ldr	r1, [pc, #152]	; (8011d90 <readCanToStructs+0x1ac4>)
 8011cf6:	f240 4212 	movw	r2, #1042	; 0x412
 8011cfa:	fb03 f202 	mul.w	r2, r3, r2
 8011cfe:	440a      	add	r2, r1
 8011d00:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8011d04:	7812      	ldrb	r2, [r2, #0]
 8011d06:	3201      	adds	r2, #1
 8011d08:	b2d0      	uxtb	r0, r2
 8011d0a:	4a21      	ldr	r2, [pc, #132]	; (8011d90 <readCanToStructs+0x1ac4>)
 8011d0c:	f240 4112 	movw	r1, #1042	; 0x412
 8011d10:	fb01 f303 	mul.w	r3, r1, r3
 8011d14:	4413      	add	r3, r2
 8011d16:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011d1a:	4602      	mov	r2, r0
 8011d1c:	701a      	strb	r2, [r3, #0]
				break;
 8011d1e:	e2c2      	b.n	80122a6 <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8011d20:	4b23      	ldr	r3, [pc, #140]	; (8011db0 <readCanToStructs+0x1ae4>)
 8011d22:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011d24:	4b1c      	ldr	r3, [pc, #112]	; (8011d98 <readCanToStructs+0x1acc>)
 8011d26:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d2a:	885b      	ldrh	r3, [r3, #2]
 8011d2c:	4a1a      	ldr	r2, [pc, #104]	; (8011d98 <readCanToStructs+0x1acc>)
 8011d2e:	011b      	lsls	r3, r3, #4
 8011d30:	4413      	add	r3, r2
 8011d32:	3304      	adds	r3, #4
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8011d3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d005      	beq.n	8011d4e <readCanToStructs+0x1a82>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8011d42:	4b1c      	ldr	r3, [pc, #112]	; (8011db4 <readCanToStructs+0x1ae8>)
 8011d44:	881b      	ldrh	r3, [r3, #0]
 8011d46:	461a      	mov	r2, r3
 8011d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d4a:	4413      	add	r3, r2
 8011d4c:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8011d4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d117      	bne.n	8011d86 <readCanToStructs+0x1aba>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011d56:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011d5a:	2100      	movs	r1, #0
 8011d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d5e:	f010 fd1f 	bl	80227a0 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d66:	4a0a      	ldr	r2, [pc, #40]	; (8011d90 <readCanToStructs+0x1ac4>)
 8011d68:	f240 4112 	movw	r1, #1042	; 0x412
 8011d6c:	fb01 f303 	mul.w	r3, r1, r3
 8011d70:	4413      	add	r3, r2
 8011d72:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011d76:	2200      	movs	r2, #0
 8011d78:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011d7a:	4b0e      	ldr	r3, [pc, #56]	; (8011db4 <readCanToStructs+0x1ae8>)
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8011d80:	4b0d      	ldr	r3, [pc, #52]	; (8011db8 <readCanToStructs+0x1aec>)
 8011d82:	2200      	movs	r2, #0
 8011d84:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011d86:	2301      	movs	r3, #1
 8011d88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011d8c:	e033      	b.n	8011df6 <readCanToStructs+0x1b2a>
 8011d8e:	bf00      	nop
 8011d90:	200052d8 	.word	0x200052d8
 8011d94:	20003528 	.word	0x20003528
 8011d98:	20005afc 	.word	0x20005afc
 8011d9c:	0802710c 	.word	0x0802710c
 8011da0:	20003524 	.word	0x20003524
 8011da4:	20000645 	.word	0x20000645
 8011da8:	08027258 	.word	0x08027258
 8011dac:	2000352c 	.word	0x2000352c
 8011db0:	20003b54 	.word	0x20003b54
 8011db4:	20009c54 	.word	0x20009c54
 8011db8:	20009c56 	.word	0x20009c56
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011dbc:	4ba0      	ldr	r3, [pc, #640]	; (8012040 <readCanToStructs+0x1d74>)
 8011dbe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011dc2:	885b      	ldrh	r3, [r3, #2]
 8011dc4:	461a      	mov	r2, r3
 8011dc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011dca:	499d      	ldr	r1, [pc, #628]	; (8012040 <readCanToStructs+0x1d74>)
 8011dcc:	0112      	lsls	r2, r2, #4
 8011dce:	440a      	add	r2, r1
 8011dd0:	4413      	add	r3, r2
 8011dd2:	3304      	adds	r3, #4
 8011dd4:	781a      	ldrb	r2, [r3, #0]
 8011dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ddc:	3301      	adds	r3, #1
 8011dde:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8011de0:	4b98      	ldr	r3, [pc, #608]	; (8012044 <readCanToStructs+0x1d78>)
 8011de2:	881b      	ldrh	r3, [r3, #0]
 8011de4:	3301      	adds	r3, #1
 8011de6:	b29a      	uxth	r2, r3
 8011de8:	4b96      	ldr	r3, [pc, #600]	; (8012044 <readCanToStructs+0x1d78>)
 8011dea:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011dec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011df0:	3301      	adds	r3, #1
 8011df2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011df6:	4b92      	ldr	r3, [pc, #584]	; (8012040 <readCanToStructs+0x1d74>)
 8011df8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011dfc:	885b      	ldrh	r3, [r3, #2]
 8011dfe:	4a90      	ldr	r2, [pc, #576]	; (8012040 <readCanToStructs+0x1d74>)
 8011e00:	011b      	lsls	r3, r3, #4
 8011e02:	4413      	add	r3, r2
 8011e04:	330c      	adds	r3, #12
 8011e06:	781b      	ldrb	r3, [r3, #0]
 8011e08:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d3d5      	bcc.n	8011dbc <readCanToStructs+0x1af0>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8011e10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e14:	4a8c      	ldr	r2, [pc, #560]	; (8012048 <readCanToStructs+0x1d7c>)
 8011e16:	f240 4112 	movw	r1, #1042	; 0x412
 8011e1a:	fb01 f303 	mul.w	r3, r1, r3
 8011e1e:	4413      	add	r3, r2
 8011e20:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011e24:	781b      	ldrb	r3, [r3, #0]
 8011e26:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d026      	beq.n	8011e7c <readCanToStructs+0x1bb0>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 8011e2e:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8011e32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e36:	4a84      	ldr	r2, [pc, #528]	; (8012048 <readCanToStructs+0x1d7c>)
 8011e38:	f240 4012 	movw	r0, #1042	; 0x412
 8011e3c:	fb00 f303 	mul.w	r3, r0, r3
 8011e40:	4413      	add	r3, r2
 8011e42:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	461a      	mov	r2, r3
 8011e4a:	4880      	ldr	r0, [pc, #512]	; (801204c <readCanToStructs+0x1d80>)
 8011e4c:	f010 fd90 	bl	8022970 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011e50:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011e54:	2100      	movs	r1, #0
 8011e56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e58:	f010 fca2 	bl	80227a0 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e60:	4a79      	ldr	r2, [pc, #484]	; (8012048 <readCanToStructs+0x1d7c>)
 8011e62:	f240 4112 	movw	r1, #1042	; 0x412
 8011e66:	fb01 f303 	mul.w	r3, r1, r3
 8011e6a:	4413      	add	r3, r2
 8011e6c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011e70:	2200      	movs	r2, #0
 8011e72:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011e74:	4b73      	ldr	r3, [pc, #460]	; (8012044 <readCanToStructs+0x1d78>)
 8011e76:	2200      	movs	r2, #0
 8011e78:	801a      	strh	r2, [r3, #0]
					break;
 8011e7a:	e214      	b.n	80122a6 <readCanToStructs+0x1fda>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8011e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e80:	4971      	ldr	r1, [pc, #452]	; (8012048 <readCanToStructs+0x1d7c>)
 8011e82:	f240 4212 	movw	r2, #1042	; 0x412
 8011e86:	fb03 f202 	mul.w	r2, r3, r2
 8011e8a:	440a      	add	r2, r1
 8011e8c:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8011e90:	7812      	ldrb	r2, [r2, #0]
 8011e92:	3201      	adds	r2, #1
 8011e94:	b2d0      	uxtb	r0, r2
 8011e96:	4a6c      	ldr	r2, [pc, #432]	; (8012048 <readCanToStructs+0x1d7c>)
 8011e98:	f240 4112 	movw	r1, #1042	; 0x412
 8011e9c:	fb01 f303 	mul.w	r3, r1, r3
 8011ea0:	4413      	add	r3, r2
 8011ea2:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8011eaa:	4b69      	ldr	r3, [pc, #420]	; (8012050 <readCanToStructs+0x1d84>)
 8011eac:	881b      	ldrh	r3, [r3, #0]
 8011eae:	3304      	adds	r3, #4
 8011eb0:	b29a      	uxth	r2, r3
 8011eb2:	4b68      	ldr	r3, [pc, #416]	; (8012054 <readCanToStructs+0x1d88>)
 8011eb4:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8011eb6:	4b63      	ldr	r3, [pc, #396]	; (8012044 <readCanToStructs+0x1d78>)
 8011eb8:	881a      	ldrh	r2, [r3, #0]
 8011eba:	4b66      	ldr	r3, [pc, #408]	; (8012054 <readCanToStructs+0x1d88>)
 8011ebc:	881b      	ldrh	r3, [r3, #0]
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	f0c0 81ee 	bcc.w	80122a0 <readCanToStructs+0x1fd4>
					printf("EI1 Relay Info Received\n");
 8011ec4:	4864      	ldr	r0, [pc, #400]	; (8012058 <readCanToStructs+0x1d8c>)
 8011ec6:	f010 fdef 	bl	8022aa8 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8011eca:	4a64      	ldr	r2, [pc, #400]	; (801205c <readCanToStructs+0x1d90>)
 8011ecc:	4b60      	ldr	r3, [pc, #384]	; (8012050 <readCanToStructs+0x1d84>)
 8011ece:	4610      	mov	r0, r2
 8011ed0:	4619      	mov	r1, r3
 8011ed2:	f44f 7301 	mov.w	r3, #516	; 0x204
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	f010 fc3a 	bl	8022750 <memcpy>
					DataTraverser = 0;
 8011edc:	4b59      	ldr	r3, [pc, #356]	; (8012044 <readCanToStructs+0x1d78>)
 8011ede:	2200      	movs	r2, #0
 8011ee0:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8011ee2:	4b5c      	ldr	r3, [pc, #368]	; (8012054 <readCanToStructs+0x1d88>)
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011ee8:	4b5d      	ldr	r3, [pc, #372]	; (8012060 <readCanToStructs+0x1d94>)
 8011eea:	2201      	movs	r2, #1
 8011eec:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011eee:	f003 fd41 	bl	8015974 <HAL_GetTick>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	4a5a      	ldr	r2, [pc, #360]	; (8012060 <readCanToStructs+0x1d94>)
 8011ef6:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011efc:	4a52      	ldr	r2, [pc, #328]	; (8012048 <readCanToStructs+0x1d7c>)
 8011efe:	f240 4112 	movw	r1, #1042	; 0x412
 8011f02:	fb01 f303 	mul.w	r3, r1, r3
 8011f06:	4413      	add	r3, r2
 8011f08:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	701a      	strb	r2, [r3, #0]
				break;
 8011f10:	e1c6      	b.n	80122a0 <readCanToStructs+0x1fd4>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8011f12:	4b4f      	ldr	r3, [pc, #316]	; (8012050 <readCanToStructs+0x1d84>)
 8011f14:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011f16:	4b4a      	ldr	r3, [pc, #296]	; (8012040 <readCanToStructs+0x1d74>)
 8011f18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f1c:	885b      	ldrh	r3, [r3, #2]
 8011f1e:	4a48      	ldr	r2, [pc, #288]	; (8012040 <readCanToStructs+0x1d74>)
 8011f20:	011b      	lsls	r3, r3, #4
 8011f22:	4413      	add	r3, r2
 8011f24:	3304      	adds	r3, #4
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8011f2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d005      	beq.n	8011f40 <readCanToStructs+0x1c74>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8011f34:	4b43      	ldr	r3, [pc, #268]	; (8012044 <readCanToStructs+0x1d78>)
 8011f36:	881b      	ldrh	r3, [r3, #0]
 8011f38:	461a      	mov	r2, r3
 8011f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f3c:	4413      	add	r3, r2
 8011f3e:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8011f40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d117      	bne.n	8011f78 <readCanToStructs+0x1cac>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011f48:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011f4c:	2100      	movs	r1, #0
 8011f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f50:	f010 fc26 	bl	80227a0 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011f54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f58:	4a3b      	ldr	r2, [pc, #236]	; (8012048 <readCanToStructs+0x1d7c>)
 8011f5a:	f240 4112 	movw	r1, #1042	; 0x412
 8011f5e:	fb01 f303 	mul.w	r3, r1, r3
 8011f62:	4413      	add	r3, r2
 8011f64:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011f68:	2200      	movs	r2, #0
 8011f6a:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011f6c:	4b35      	ldr	r3, [pc, #212]	; (8012044 <readCanToStructs+0x1d78>)
 8011f6e:	2200      	movs	r2, #0
 8011f70:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8011f72:	4b38      	ldr	r3, [pc, #224]	; (8012054 <readCanToStructs+0x1d88>)
 8011f74:	2200      	movs	r2, #0
 8011f76:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011f78:	2301      	movs	r3, #1
 8011f7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f7e:	e01c      	b.n	8011fba <readCanToStructs+0x1cee>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011f80:	4b2f      	ldr	r3, [pc, #188]	; (8012040 <readCanToStructs+0x1d74>)
 8011f82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f86:	885b      	ldrh	r3, [r3, #2]
 8011f88:	461a      	mov	r2, r3
 8011f8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f8e:	492c      	ldr	r1, [pc, #176]	; (8012040 <readCanToStructs+0x1d74>)
 8011f90:	0112      	lsls	r2, r2, #4
 8011f92:	440a      	add	r2, r1
 8011f94:	4413      	add	r3, r2
 8011f96:	3304      	adds	r3, #4
 8011f98:	781a      	ldrb	r2, [r3, #0]
 8011f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f9c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8011fa4:	4b27      	ldr	r3, [pc, #156]	; (8012044 <readCanToStructs+0x1d78>)
 8011fa6:	881b      	ldrh	r3, [r3, #0]
 8011fa8:	3301      	adds	r3, #1
 8011faa:	b29a      	uxth	r2, r3
 8011fac:	4b25      	ldr	r3, [pc, #148]	; (8012044 <readCanToStructs+0x1d78>)
 8011fae:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011fb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011fb4:	3301      	adds	r3, #1
 8011fb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011fba:	4b21      	ldr	r3, [pc, #132]	; (8012040 <readCanToStructs+0x1d74>)
 8011fbc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011fc0:	885b      	ldrh	r3, [r3, #2]
 8011fc2:	4a1f      	ldr	r2, [pc, #124]	; (8012040 <readCanToStructs+0x1d74>)
 8011fc4:	011b      	lsls	r3, r3, #4
 8011fc6:	4413      	add	r3, r2
 8011fc8:	330c      	adds	r3, #12
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011fd0:	429a      	cmp	r2, r3
 8011fd2:	d3d5      	bcc.n	8011f80 <readCanToStructs+0x1cb4>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8011fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fd8:	4a1b      	ldr	r2, [pc, #108]	; (8012048 <readCanToStructs+0x1d7c>)
 8011fda:	f240 4112 	movw	r1, #1042	; 0x412
 8011fde:	fb01 f303 	mul.w	r3, r1, r3
 8011fe2:	4413      	add	r3, r2
 8011fe4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011fe8:	781b      	ldrb	r3, [r3, #0]
 8011fea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d03a      	beq.n	8012068 <readCanToStructs+0x1d9c>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 8011ff2:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8011ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ffa:	4a13      	ldr	r2, [pc, #76]	; (8012048 <readCanToStructs+0x1d7c>)
 8011ffc:	f240 4012 	movw	r0, #1042	; 0x412
 8012000:	fb00 f303 	mul.w	r3, r0, r3
 8012004:	4413      	add	r3, r2
 8012006:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	461a      	mov	r2, r3
 801200e:	4815      	ldr	r0, [pc, #84]	; (8012064 <readCanToStructs+0x1d98>)
 8012010:	f010 fcae 	bl	8022970 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8012014:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012018:	2100      	movs	r1, #0
 801201a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801201c:	f010 fbc0 	bl	80227a0 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012020:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012024:	4a08      	ldr	r2, [pc, #32]	; (8012048 <readCanToStructs+0x1d7c>)
 8012026:	f240 4112 	movw	r1, #1042	; 0x412
 801202a:	fb01 f303 	mul.w	r3, r1, r3
 801202e:	4413      	add	r3, r2
 8012030:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012034:	2200      	movs	r2, #0
 8012036:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8012038:	4b02      	ldr	r3, [pc, #8]	; (8012044 <readCanToStructs+0x1d78>)
 801203a:	2200      	movs	r2, #0
 801203c:	801a      	strh	r2, [r3, #0]
					break;
 801203e:	e132      	b.n	80122a6 <readCanToStructs+0x1fda>
 8012040:	20005afc 	.word	0x20005afc
 8012044:	20009c54 	.word	0x20009c54
 8012048:	200052d8 	.word	0x200052d8
 801204c:	08027264 	.word	0x08027264
 8012050:	20003b54 	.word	0x20003b54
 8012054:	20009c56 	.word	0x20009c56
 8012058:	08027290 	.word	0x08027290
 801205c:	20003950 	.word	0x20003950
 8012060:	2000352c 	.word	0x2000352c
 8012064:	080272a8 	.word	0x080272a8
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8012068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801206c:	49c2      	ldr	r1, [pc, #776]	; (8012378 <readCanToStructs+0x20ac>)
 801206e:	f240 4212 	movw	r2, #1042	; 0x412
 8012072:	fb03 f202 	mul.w	r2, r3, r2
 8012076:	440a      	add	r2, r1
 8012078:	f202 4211 	addw	r2, r2, #1041	; 0x411
 801207c:	7812      	ldrb	r2, [r2, #0]
 801207e:	3201      	adds	r2, #1
 8012080:	b2d0      	uxtb	r0, r2
 8012082:	4abd      	ldr	r2, [pc, #756]	; (8012378 <readCanToStructs+0x20ac>)
 8012084:	f240 4112 	movw	r1, #1042	; 0x412
 8012088:	fb01 f303 	mul.w	r3, r1, r3
 801208c:	4413      	add	r3, r2
 801208e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012092:	4602      	mov	r2, r0
 8012094:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8012096:	4bb9      	ldr	r3, [pc, #740]	; (801237c <readCanToStructs+0x20b0>)
 8012098:	881b      	ldrh	r3, [r3, #0]
 801209a:	3304      	adds	r3, #4
 801209c:	b29a      	uxth	r2, r3
 801209e:	4bb8      	ldr	r3, [pc, #736]	; (8012380 <readCanToStructs+0x20b4>)
 80120a0:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 80120a2:	4bb8      	ldr	r3, [pc, #736]	; (8012384 <readCanToStructs+0x20b8>)
 80120a4:	881a      	ldrh	r2, [r3, #0]
 80120a6:	4bb6      	ldr	r3, [pc, #728]	; (8012380 <readCanToStructs+0x20b4>)
 80120a8:	881b      	ldrh	r3, [r3, #0]
 80120aa:	429a      	cmp	r2, r3
 80120ac:	f0c0 80fa 	bcc.w	80122a4 <readCanToStructs+0x1fd8>
					printf("EI2 Relay Info Received\n");
 80120b0:	48b5      	ldr	r0, [pc, #724]	; (8012388 <readCanToStructs+0x20bc>)
 80120b2:	f010 fcf9 	bl	8022aa8 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 80120b6:	4ab5      	ldr	r2, [pc, #724]	; (801238c <readCanToStructs+0x20c0>)
 80120b8:	4bb0      	ldr	r3, [pc, #704]	; (801237c <readCanToStructs+0x20b0>)
 80120ba:	4610      	mov	r0, r2
 80120bc:	4619      	mov	r1, r3
 80120be:	f44f 7301 	mov.w	r3, #516	; 0x204
 80120c2:	461a      	mov	r2, r3
 80120c4:	f010 fb44 	bl	8022750 <memcpy>
					DataTraverser = 0;
 80120c8:	4bae      	ldr	r3, [pc, #696]	; (8012384 <readCanToStructs+0x20b8>)
 80120ca:	2200      	movs	r2, #0
 80120cc:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 80120ce:	4bac      	ldr	r3, [pc, #688]	; (8012380 <readCanToStructs+0x20b4>)
 80120d0:	2200      	movs	r2, #0
 80120d2:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80120d4:	4bae      	ldr	r3, [pc, #696]	; (8012390 <readCanToStructs+0x20c4>)
 80120d6:	2201      	movs	r2, #1
 80120d8:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80120da:	f003 fc4b 	bl	8015974 <HAL_GetTick>
 80120de:	4603      	mov	r3, r0
 80120e0:	4aab      	ldr	r2, [pc, #684]	; (8012390 <readCanToStructs+0x20c4>)
 80120e2:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80120e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120e8:	4aa3      	ldr	r2, [pc, #652]	; (8012378 <readCanToStructs+0x20ac>)
 80120ea:	f240 4112 	movw	r1, #1042	; 0x412
 80120ee:	fb01 f303 	mul.w	r3, r1, r3
 80120f2:	4413      	add	r3, r2
 80120f4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80120f8:	2200      	movs	r2, #0
 80120fa:	701a      	strb	r2, [r3, #0]
				break;
 80120fc:	e0d2      	b.n	80122a4 <readCanToStructs+0x1fd8>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 80120fe:	4ba5      	ldr	r3, [pc, #660]	; (8012394 <readCanToStructs+0x20c8>)
 8012100:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012102:	4ba5      	ldr	r3, [pc, #660]	; (8012398 <readCanToStructs+0x20cc>)
 8012104:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012108:	885b      	ldrh	r3, [r3, #2]
 801210a:	4aa3      	ldr	r2, [pc, #652]	; (8012398 <readCanToStructs+0x20cc>)
 801210c:	011b      	lsls	r3, r3, #4
 801210e:	4413      	add	r3, r2
 8012110:	3304      	adds	r3, #4
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012118:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801211c:	2b00      	cmp	r3, #0
 801211e:	d110      	bne.n	8012142 <readCanToStructs+0x1e76>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8012120:	2208      	movs	r2, #8
 8012122:	2100      	movs	r1, #0
 8012124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012126:	f010 fb3b 	bl	80227a0 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801212a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801212e:	4a92      	ldr	r2, [pc, #584]	; (8012378 <readCanToStructs+0x20ac>)
 8012130:	f240 4112 	movw	r1, #1042	; 0x412
 8012134:	fb01 f303 	mul.w	r3, r1, r3
 8012138:	4413      	add	r3, r2
 801213a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801213e:	2200      	movs	r2, #0
 8012140:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8012142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012146:	4a8c      	ldr	r2, [pc, #560]	; (8012378 <readCanToStructs+0x20ac>)
 8012148:	f240 4112 	movw	r1, #1042	; 0x412
 801214c:	fb01 f303 	mul.w	r3, r1, r3
 8012150:	4413      	add	r3, r2
 8012152:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012156:	781b      	ldrb	r3, [r3, #0]
 8012158:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801215c:	429a      	cmp	r2, r3
 801215e:	d014      	beq.n	801218a <readCanToStructs+0x1ebe>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8012160:	488e      	ldr	r0, [pc, #568]	; (801239c <readCanToStructs+0x20d0>)
 8012162:	f010 fca1 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8012166:	2208      	movs	r2, #8
 8012168:	2100      	movs	r1, #0
 801216a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801216c:	f010 fb18 	bl	80227a0 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012170:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012174:	4a80      	ldr	r2, [pc, #512]	; (8012378 <readCanToStructs+0x20ac>)
 8012176:	f240 4112 	movw	r1, #1042	; 0x412
 801217a:	fb01 f303 	mul.w	r3, r1, r3
 801217e:	4413      	add	r3, r2
 8012180:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012184:	2200      	movs	r2, #0
 8012186:	701a      	strb	r2, [r3, #0]
					break;
 8012188:	e08d      	b.n	80122a6 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 801218a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801218e:	4613      	mov	r3, r2
 8012190:	00db      	lsls	r3, r3, #3
 8012192:	1a9b      	subs	r3, r3, r2
 8012194:	461a      	mov	r2, r3
 8012196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012198:	4413      	add	r3, r2
 801219a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801219c:	2301      	movs	r3, #1
 801219e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80121a2:	e016      	b.n	80121d2 <readCanToStructs+0x1f06>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80121a4:	4b7c      	ldr	r3, [pc, #496]	; (8012398 <readCanToStructs+0x20cc>)
 80121a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80121aa:	885b      	ldrh	r3, [r3, #2]
 80121ac:	461a      	mov	r2, r3
 80121ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121b2:	4979      	ldr	r1, [pc, #484]	; (8012398 <readCanToStructs+0x20cc>)
 80121b4:	0112      	lsls	r2, r2, #4
 80121b6:	440a      	add	r2, r1
 80121b8:	4413      	add	r3, r2
 80121ba:	3304      	adds	r3, #4
 80121bc:	781a      	ldrb	r2, [r3, #0]
 80121be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80121c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c4:	3301      	adds	r3, #1
 80121c6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80121c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121cc:	3301      	adds	r3, #1
 80121ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80121d2:	4b71      	ldr	r3, [pc, #452]	; (8012398 <readCanToStructs+0x20cc>)
 80121d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80121d8:	885b      	ldrh	r3, [r3, #2]
 80121da:	4a6f      	ldr	r2, [pc, #444]	; (8012398 <readCanToStructs+0x20cc>)
 80121dc:	011b      	lsls	r3, r3, #4
 80121de:	4413      	add	r3, r2
 80121e0:	330c      	adds	r3, #12
 80121e2:	781b      	ldrb	r3, [r3, #0]
 80121e4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d3db      	bcc.n	80121a4 <readCanToStructs+0x1ed8>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 80121ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121f0:	4a61      	ldr	r2, [pc, #388]	; (8012378 <readCanToStructs+0x20ac>)
 80121f2:	f240 4112 	movw	r1, #1042	; 0x412
 80121f6:	fb01 f303 	mul.w	r3, r1, r3
 80121fa:	4413      	add	r3, r2
 80121fc:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	461a      	mov	r2, r3
 8012204:	4613      	mov	r3, r2
 8012206:	00db      	lsls	r3, r3, #3
 8012208:	1a9a      	subs	r2, r3, r2
 801220a:	4b63      	ldr	r3, [pc, #396]	; (8012398 <readCanToStructs+0x20cc>)
 801220c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012210:	885b      	ldrh	r3, [r3, #2]
 8012212:	4961      	ldr	r1, [pc, #388]	; (8012398 <readCanToStructs+0x20cc>)
 8012214:	011b      	lsls	r3, r3, #4
 8012216:	440b      	add	r3, r1
 8012218:	330c      	adds	r3, #12
 801221a:	781b      	ldrb	r3, [r3, #0]
 801221c:	3b01      	subs	r3, #1
 801221e:	4413      	add	r3, r2
 8012220:	2b07      	cmp	r3, #7
 8012222:	d917      	bls.n	8012254 <readCanToStructs+0x1f88>
					printf("Received Fault Injection Data\n");
 8012224:	485e      	ldr	r0, [pc, #376]	; (80123a0 <readCanToStructs+0x20d4>)
 8012226:	f010 fc3f 	bl	8022aa8 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 801222a:	4b59      	ldr	r3, [pc, #356]	; (8012390 <readCanToStructs+0x20c4>)
 801222c:	2201      	movs	r2, #1
 801222e:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8012230:	f003 fba0 	bl	8015974 <HAL_GetTick>
 8012234:	4603      	mov	r3, r0
 8012236:	4a56      	ldr	r2, [pc, #344]	; (8012390 <readCanToStructs+0x20c4>)
 8012238:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801223a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801223e:	4a4e      	ldr	r2, [pc, #312]	; (8012378 <readCanToStructs+0x20ac>)
 8012240:	f240 4112 	movw	r1, #1042	; 0x412
 8012244:	fb01 f303 	mul.w	r3, r1, r3
 8012248:	4413      	add	r3, r2
 801224a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801224e:	2200      	movs	r2, #0
 8012250:	701a      	strb	r2, [r3, #0]
				break;
 8012252:	e028      	b.n	80122a6 <readCanToStructs+0x1fda>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8012254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012258:	4a47      	ldr	r2, [pc, #284]	; (8012378 <readCanToStructs+0x20ac>)
 801225a:	f240 4112 	movw	r1, #1042	; 0x412
 801225e:	fb01 f303 	mul.w	r3, r1, r3
 8012262:	4413      	add	r3, r2
 8012264:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8012268:	2201      	movs	r2, #1
 801226a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 801226c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012270:	4941      	ldr	r1, [pc, #260]	; (8012378 <readCanToStructs+0x20ac>)
 8012272:	f240 4212 	movw	r2, #1042	; 0x412
 8012276:	fb03 f202 	mul.w	r2, r3, r2
 801227a:	440a      	add	r2, r1
 801227c:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8012280:	7812      	ldrb	r2, [r2, #0]
 8012282:	3201      	adds	r2, #1
 8012284:	b2d0      	uxtb	r0, r2
 8012286:	4a3c      	ldr	r2, [pc, #240]	; (8012378 <readCanToStructs+0x20ac>)
 8012288:	f240 4112 	movw	r1, #1042	; 0x412
 801228c:	fb01 f303 	mul.w	r3, r1, r3
 8012290:	4413      	add	r3, r2
 8012292:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012296:	4602      	mov	r2, r0
 8012298:	701a      	strb	r2, [r3, #0]
				break;
 801229a:	e004      	b.n	80122a6 <readCanToStructs+0x1fda>
				break;
 801229c:	bf00      	nop
 801229e:	e002      	b.n	80122a6 <readCanToStructs+0x1fda>
				break;
 80122a0:	bf00      	nop
 80122a2:	e000      	b.n	80122a6 <readCanToStructs+0x1fda>
				break;
 80122a4:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 80122a6:	4b3c      	ldr	r3, [pc, #240]	; (8012398 <readCanToStructs+0x20cc>)
 80122a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122ac:	885b      	ldrh	r3, [r3, #2]
 80122ae:	011b      	lsls	r3, r3, #4
 80122b0:	4a39      	ldr	r2, [pc, #228]	; (8012398 <readCanToStructs+0x20cc>)
 80122b2:	4413      	add	r3, r2
 80122b4:	2210      	movs	r2, #16
 80122b6:	2100      	movs	r1, #0
 80122b8:	4618      	mov	r0, r3
 80122ba:	f010 fa71 	bl	80227a0 <memset>
			canRead.Out++;
 80122be:	4b36      	ldr	r3, [pc, #216]	; (8012398 <readCanToStructs+0x20cc>)
 80122c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122c4:	885b      	ldrh	r3, [r3, #2]
 80122c6:	3301      	adds	r3, #1
 80122c8:	b29a      	uxth	r2, r3
 80122ca:	4b33      	ldr	r3, [pc, #204]	; (8012398 <readCanToStructs+0x20cc>)
 80122cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122d0:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 80122d2:	4b31      	ldr	r3, [pc, #196]	; (8012398 <readCanToStructs+0x20cc>)
 80122d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122d8:	885b      	ldrh	r3, [r3, #2]
 80122da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80122de:	d104      	bne.n	80122ea <readCanToStructs+0x201e>
				canRead.Out = 0;
 80122e0:	4b2d      	ldr	r3, [pc, #180]	; (8012398 <readCanToStructs+0x20cc>)
 80122e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122e6:	2200      	movs	r2, #0
 80122e8:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 80122ea:	f7fd ff99 	bl	8010220 <canDataReady>
 80122ee:	4603      	mov	r3, r0
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	f47f a949 	bne.w	8011588 <readCanToStructs+0x12bc>
	break;
 80122f6:	f000 be46 	b.w	8012f86 <readCanToStructs+0x2cba>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 80122fa:	4b27      	ldr	r3, [pc, #156]	; (8012398 <readCanToStructs+0x20cc>)
 80122fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012300:	885b      	ldrh	r3, [r3, #2]
 8012302:	4a25      	ldr	r2, [pc, #148]	; (8012398 <readCanToStructs+0x20cc>)
 8012304:	011b      	lsls	r3, r3, #4
 8012306:	4413      	add	r3, r2
 8012308:	330f      	adds	r3, #15
 801230a:	781b      	ldrb	r3, [r3, #0]
 801230c:	3b01      	subs	r3, #1
 801230e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8012312:	4b21      	ldr	r3, [pc, #132]	; (8012398 <readCanToStructs+0x20cc>)
 8012314:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012318:	885b      	ldrh	r3, [r3, #2]
 801231a:	4a1f      	ldr	r2, [pc, #124]	; (8012398 <readCanToStructs+0x20cc>)
 801231c:	011b      	lsls	r3, r3, #4
 801231e:	4413      	add	r3, r2
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8012326:	f200 8624 	bhi.w	8012f72 <readCanToStructs+0x2ca6>
 801232a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801232e:	d80a      	bhi.n	8012346 <readCanToStructs+0x207a>
 8012330:	f240 1203 	movw	r2, #259	; 0x103
 8012334:	4293      	cmp	r3, r2
 8012336:	d035      	beq.n	80123a4 <readCanToStructs+0x20d8>
 8012338:	f240 1209 	movw	r2, #265	; 0x109
 801233c:	4293      	cmp	r3, r2
 801233e:	f000 8107 	beq.w	8012550 <readCanToStructs+0x2284>
 8012342:	f000 be16 	b.w	8012f72 <readCanToStructs+0x2ca6>
 8012346:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 801234a:	2b07      	cmp	r3, #7
 801234c:	f200 8611 	bhi.w	8012f72 <readCanToStructs+0x2ca6>
 8012350:	a201      	add	r2, pc, #4	; (adr r2, 8012358 <readCanToStructs+0x208c>)
 8012352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012356:	bf00      	nop
 8012358:	08012723 	.word	0x08012723
 801235c:	080128cd 	.word	0x080128cd
 8012360:	08012f73 	.word	0x08012f73
 8012364:	08012f73 	.word	0x08012f73
 8012368:	08012a99 	.word	0x08012a99
 801236c:	08012f73 	.word	0x08012f73
 8012370:	08012c21 	.word	0x08012c21
 8012374:	08012ddf 	.word	0x08012ddf
 8012378:	200052d8 	.word	0x200052d8
 801237c:	20003b54 	.word	0x20003b54
 8012380:	20009c56 	.word	0x20009c56
 8012384:	20009c54 	.word	0x20009c54
 8012388:	080272d4 	.word	0x080272d4
 801238c:	20003950 	.word	0x20003950
 8012390:	2000352c 	.word	0x2000352c
 8012394:	20003518 	.word	0x20003518
 8012398:	20005afc 	.word	0x20005afc
 801239c:	080271a8 	.word	0x080271a8
 80123a0:	080271c8 	.word	0x080271c8
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80123a4:	4bc3      	ldr	r3, [pc, #780]	; (80126b4 <readCanToStructs+0x23e8>)
 80123a6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80123a8:	4bc3      	ldr	r3, [pc, #780]	; (80126b8 <readCanToStructs+0x23ec>)
 80123aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123ae:	885b      	ldrh	r3, [r3, #2]
 80123b0:	4ac1      	ldr	r2, [pc, #772]	; (80126b8 <readCanToStructs+0x23ec>)
 80123b2:	011b      	lsls	r3, r3, #4
 80123b4:	4413      	add	r3, r2
 80123b6:	3304      	adds	r3, #4
 80123b8:	781b      	ldrb	r3, [r3, #0]
 80123ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80123be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d110      	bne.n	80123e8 <readCanToStructs+0x211c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80123c6:	2206      	movs	r2, #6
 80123c8:	2100      	movs	r1, #0
 80123ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123cc:	f010 f9e8 	bl	80227a0 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80123d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123d4:	4ab9      	ldr	r2, [pc, #740]	; (80126bc <readCanToStructs+0x23f0>)
 80123d6:	f240 4112 	movw	r1, #1042	; 0x412
 80123da:	fb01 f303 	mul.w	r3, r1, r3
 80123de:	4413      	add	r3, r2
 80123e0:	f203 2307 	addw	r3, r3, #519	; 0x207
 80123e4:	2200      	movs	r2, #0
 80123e6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 80123e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123ec:	4ab3      	ldr	r2, [pc, #716]	; (80126bc <readCanToStructs+0x23f0>)
 80123ee:	f240 4112 	movw	r1, #1042	; 0x412
 80123f2:	fb01 f303 	mul.w	r3, r1, r3
 80123f6:	4413      	add	r3, r2
 80123f8:	f203 2307 	addw	r3, r3, #519	; 0x207
 80123fc:	781b      	ldrb	r3, [r3, #0]
 80123fe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012402:	429a      	cmp	r2, r3
 8012404:	d015      	beq.n	8012432 <readCanToStructs+0x2166>
					printf("GPS Packet Seq no MisMatch\n");
 8012406:	48ae      	ldr	r0, [pc, #696]	; (80126c0 <readCanToStructs+0x23f4>)
 8012408:	f010 fb4e 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801240c:	2206      	movs	r2, #6
 801240e:	2100      	movs	r1, #0
 8012410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012412:	f010 f9c5 	bl	80227a0 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8012416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801241a:	4aa8      	ldr	r2, [pc, #672]	; (80126bc <readCanToStructs+0x23f0>)
 801241c:	f240 4112 	movw	r1, #1042	; 0x412
 8012420:	fb01 f303 	mul.w	r3, r1, r3
 8012424:	4413      	add	r3, r2
 8012426:	f203 2307 	addw	r3, r3, #519	; 0x207
 801242a:	2200      	movs	r2, #0
 801242c:	701a      	strb	r2, [r3, #0]
					break;
 801242e:	f000 bda0 	b.w	8012f72 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012432:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012436:	4613      	mov	r3, r2
 8012438:	00db      	lsls	r3, r3, #3
 801243a:	1a9b      	subs	r3, r3, r2
 801243c:	461a      	mov	r2, r3
 801243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012440:	4413      	add	r3, r2
 8012442:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012444:	2301      	movs	r3, #1
 8012446:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801244a:	e016      	b.n	801247a <readCanToStructs+0x21ae>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801244c:	4b9a      	ldr	r3, [pc, #616]	; (80126b8 <readCanToStructs+0x23ec>)
 801244e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012452:	885b      	ldrh	r3, [r3, #2]
 8012454:	461a      	mov	r2, r3
 8012456:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801245a:	4997      	ldr	r1, [pc, #604]	; (80126b8 <readCanToStructs+0x23ec>)
 801245c:	0112      	lsls	r2, r2, #4
 801245e:	440a      	add	r2, r1
 8012460:	4413      	add	r3, r2
 8012462:	3304      	adds	r3, #4
 8012464:	781a      	ldrb	r2, [r3, #0]
 8012466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012468:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801246a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801246c:	3301      	adds	r3, #1
 801246e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012470:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012474:	3301      	adds	r3, #1
 8012476:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801247a:	4b8f      	ldr	r3, [pc, #572]	; (80126b8 <readCanToStructs+0x23ec>)
 801247c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012480:	885b      	ldrh	r3, [r3, #2]
 8012482:	4a8d      	ldr	r2, [pc, #564]	; (80126b8 <readCanToStructs+0x23ec>)
 8012484:	011b      	lsls	r3, r3, #4
 8012486:	4413      	add	r3, r2
 8012488:	330c      	adds	r3, #12
 801248a:	781b      	ldrb	r3, [r3, #0]
 801248c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012490:	429a      	cmp	r2, r3
 8012492:	d3db      	bcc.n	801244c <readCanToStructs+0x2180>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8012494:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012498:	4a88      	ldr	r2, [pc, #544]	; (80126bc <readCanToStructs+0x23f0>)
 801249a:	f240 4112 	movw	r1, #1042	; 0x412
 801249e:	fb01 f303 	mul.w	r3, r1, r3
 80124a2:	4413      	add	r3, r2
 80124a4:	f203 2307 	addw	r3, r3, #519	; 0x207
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	461a      	mov	r2, r3
 80124ac:	4613      	mov	r3, r2
 80124ae:	00db      	lsls	r3, r3, #3
 80124b0:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80124b2:	4b81      	ldr	r3, [pc, #516]	; (80126b8 <readCanToStructs+0x23ec>)
 80124b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80124b8:	885b      	ldrh	r3, [r3, #2]
 80124ba:	497f      	ldr	r1, [pc, #508]	; (80126b8 <readCanToStructs+0x23ec>)
 80124bc:	011b      	lsls	r3, r3, #4
 80124be:	440b      	add	r3, r1
 80124c0:	330c      	adds	r3, #12
 80124c2:	781b      	ldrb	r3, [r3, #0]
 80124c4:	3b01      	subs	r3, #1
 80124c6:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80124c8:	2b05      	cmp	r3, #5
 80124ca:	d91c      	bls.n	8012506 <readCanToStructs+0x223a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80124cc:	4b7d      	ldr	r3, [pc, #500]	; (80126c4 <readCanToStructs+0x23f8>)
 80124ce:	4a79      	ldr	r2, [pc, #484]	; (80126b4 <readCanToStructs+0x23e8>)
 80124d0:	6811      	ldr	r1, [r2, #0]
 80124d2:	6019      	str	r1, [r3, #0]
 80124d4:	8892      	ldrh	r2, [r2, #4]
 80124d6:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80124d8:	4b7b      	ldr	r3, [pc, #492]	; (80126c8 <readCanToStructs+0x23fc>)
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	2b01      	cmp	r3, #1
 80124de:	d102      	bne.n	80124e6 <readCanToStructs+0x221a>
						printf("GPS_PACKET_RECEIVED\n");
 80124e0:	487a      	ldr	r0, [pc, #488]	; (80126cc <readCanToStructs+0x2400>)
 80124e2:	f010 fae1 	bl	8022aa8 <puts>
					Write_RTC();
 80124e6:	f7f8 ff9f 	bl	800b428 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80124ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124ee:	4a73      	ldr	r2, [pc, #460]	; (80126bc <readCanToStructs+0x23f0>)
 80124f0:	f240 4112 	movw	r1, #1042	; 0x412
 80124f4:	fb01 f303 	mul.w	r3, r1, r3
 80124f8:	4413      	add	r3, r2
 80124fa:	f203 2307 	addw	r3, r3, #519	; 0x207
 80124fe:	2200      	movs	r2, #0
 8012500:	701a      	strb	r2, [r3, #0]
 8012502:	f000 bd36 	b.w	8012f72 <readCanToStructs+0x2ca6>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8012506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801250a:	4a6c      	ldr	r2, [pc, #432]	; (80126bc <readCanToStructs+0x23f0>)
 801250c:	f240 4112 	movw	r1, #1042	; 0x412
 8012510:	fb01 f303 	mul.w	r3, r1, r3
 8012514:	4413      	add	r3, r2
 8012516:	f203 2306 	addw	r3, r3, #518	; 0x206
 801251a:	2201      	movs	r2, #1
 801251c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 801251e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012522:	4966      	ldr	r1, [pc, #408]	; (80126bc <readCanToStructs+0x23f0>)
 8012524:	f240 4212 	movw	r2, #1042	; 0x412
 8012528:	fb03 f202 	mul.w	r2, r3, r2
 801252c:	440a      	add	r2, r1
 801252e:	f202 2207 	addw	r2, r2, #519	; 0x207
 8012532:	7812      	ldrb	r2, [r2, #0]
 8012534:	3201      	adds	r2, #1
 8012536:	b2d0      	uxtb	r0, r2
 8012538:	4a60      	ldr	r2, [pc, #384]	; (80126bc <readCanToStructs+0x23f0>)
 801253a:	f240 4112 	movw	r1, #1042	; 0x412
 801253e:	fb01 f303 	mul.w	r3, r1, r3
 8012542:	4413      	add	r3, r2
 8012544:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012548:	4602      	mov	r2, r0
 801254a:	701a      	strb	r2, [r3, #0]
				break;
 801254c:	f000 bd11 	b.w	8012f72 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8012550:	4b58      	ldr	r3, [pc, #352]	; (80126b4 <readCanToStructs+0x23e8>)
 8012552:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012554:	4b58      	ldr	r3, [pc, #352]	; (80126b8 <readCanToStructs+0x23ec>)
 8012556:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801255a:	885b      	ldrh	r3, [r3, #2]
 801255c:	4a56      	ldr	r2, [pc, #344]	; (80126b8 <readCanToStructs+0x23ec>)
 801255e:	011b      	lsls	r3, r3, #4
 8012560:	4413      	add	r3, r2
 8012562:	3304      	adds	r3, #4
 8012564:	781b      	ldrb	r3, [r3, #0]
 8012566:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801256a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801256e:	2b00      	cmp	r3, #0
 8012570:	d110      	bne.n	8012594 <readCanToStructs+0x22c8>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012572:	2206      	movs	r2, #6
 8012574:	2100      	movs	r1, #0
 8012576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012578:	f010 f912 	bl	80227a0 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801257c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012580:	4a4e      	ldr	r2, [pc, #312]	; (80126bc <readCanToStructs+0x23f0>)
 8012582:	f240 4112 	movw	r1, #1042	; 0x412
 8012586:	fb01 f303 	mul.w	r3, r1, r3
 801258a:	4413      	add	r3, r2
 801258c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012590:	2200      	movs	r2, #0
 8012592:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8012594:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012598:	4a48      	ldr	r2, [pc, #288]	; (80126bc <readCanToStructs+0x23f0>)
 801259a:	f240 4112 	movw	r1, #1042	; 0x412
 801259e:	fb01 f303 	mul.w	r3, r1, r3
 80125a2:	4413      	add	r3, r2
 80125a4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80125a8:	781b      	ldrb	r3, [r3, #0]
 80125aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d015      	beq.n	80125de <readCanToStructs+0x2312>
					printf("GPS2 Packet Seq no MisMatch\n");
 80125b2:	4847      	ldr	r0, [pc, #284]	; (80126d0 <readCanToStructs+0x2404>)
 80125b4:	f010 fa78 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80125b8:	2206      	movs	r2, #6
 80125ba:	2100      	movs	r1, #0
 80125bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125be:	f010 f8ef 	bl	80227a0 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80125c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125c6:	4a3d      	ldr	r2, [pc, #244]	; (80126bc <readCanToStructs+0x23f0>)
 80125c8:	f240 4112 	movw	r1, #1042	; 0x412
 80125cc:	fb01 f303 	mul.w	r3, r1, r3
 80125d0:	4413      	add	r3, r2
 80125d2:	f203 2313 	addw	r3, r3, #531	; 0x213
 80125d6:	2200      	movs	r2, #0
 80125d8:	701a      	strb	r2, [r3, #0]
					break;
 80125da:	f000 bcca 	b.w	8012f72 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80125de:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80125e2:	4613      	mov	r3, r2
 80125e4:	00db      	lsls	r3, r3, #3
 80125e6:	1a9b      	subs	r3, r3, r2
 80125e8:	461a      	mov	r2, r3
 80125ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ec:	4413      	add	r3, r2
 80125ee:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80125f0:	2301      	movs	r3, #1
 80125f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80125f6:	e016      	b.n	8012626 <readCanToStructs+0x235a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80125f8:	4b2f      	ldr	r3, [pc, #188]	; (80126b8 <readCanToStructs+0x23ec>)
 80125fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80125fe:	885b      	ldrh	r3, [r3, #2]
 8012600:	461a      	mov	r2, r3
 8012602:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012606:	492c      	ldr	r1, [pc, #176]	; (80126b8 <readCanToStructs+0x23ec>)
 8012608:	0112      	lsls	r2, r2, #4
 801260a:	440a      	add	r2, r1
 801260c:	4413      	add	r3, r2
 801260e:	3304      	adds	r3, #4
 8012610:	781a      	ldrb	r2, [r3, #0]
 8012612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012614:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012618:	3301      	adds	r3, #1
 801261a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801261c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012620:	3301      	adds	r3, #1
 8012622:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012626:	4b24      	ldr	r3, [pc, #144]	; (80126b8 <readCanToStructs+0x23ec>)
 8012628:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801262c:	885b      	ldrh	r3, [r3, #2]
 801262e:	4a22      	ldr	r2, [pc, #136]	; (80126b8 <readCanToStructs+0x23ec>)
 8012630:	011b      	lsls	r3, r3, #4
 8012632:	4413      	add	r3, r2
 8012634:	330c      	adds	r3, #12
 8012636:	781b      	ldrb	r3, [r3, #0]
 8012638:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801263c:	429a      	cmp	r2, r3
 801263e:	d3db      	bcc.n	80125f8 <readCanToStructs+0x232c>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8012640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012644:	4a1d      	ldr	r2, [pc, #116]	; (80126bc <readCanToStructs+0x23f0>)
 8012646:	f240 4112 	movw	r1, #1042	; 0x412
 801264a:	fb01 f303 	mul.w	r3, r1, r3
 801264e:	4413      	add	r3, r2
 8012650:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012654:	781b      	ldrb	r3, [r3, #0]
 8012656:	461a      	mov	r2, r3
 8012658:	4613      	mov	r3, r2
 801265a:	00db      	lsls	r3, r3, #3
 801265c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801265e:	4b16      	ldr	r3, [pc, #88]	; (80126b8 <readCanToStructs+0x23ec>)
 8012660:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012664:	885b      	ldrh	r3, [r3, #2]
 8012666:	4914      	ldr	r1, [pc, #80]	; (80126b8 <readCanToStructs+0x23ec>)
 8012668:	011b      	lsls	r3, r3, #4
 801266a:	440b      	add	r3, r1
 801266c:	330c      	adds	r3, #12
 801266e:	781b      	ldrb	r3, [r3, #0]
 8012670:	3b01      	subs	r3, #1
 8012672:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8012674:	2b05      	cmp	r3, #5
 8012676:	d92f      	bls.n	80126d8 <readCanToStructs+0x240c>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012678:	4b12      	ldr	r3, [pc, #72]	; (80126c4 <readCanToStructs+0x23f8>)
 801267a:	4a0e      	ldr	r2, [pc, #56]	; (80126b4 <readCanToStructs+0x23e8>)
 801267c:	6811      	ldr	r1, [r2, #0]
 801267e:	6019      	str	r1, [r3, #0]
 8012680:	8892      	ldrh	r2, [r2, #4]
 8012682:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8012684:	4b10      	ldr	r3, [pc, #64]	; (80126c8 <readCanToStructs+0x23fc>)
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	2b01      	cmp	r3, #1
 801268a:	d102      	bne.n	8012692 <readCanToStructs+0x23c6>
						printf("GPS2_PACKET_RECEIVED\n");
 801268c:	4811      	ldr	r0, [pc, #68]	; (80126d4 <readCanToStructs+0x2408>)
 801268e:	f010 fa0b 	bl	8022aa8 <puts>
					Write_RTC();
 8012692:	f7f8 fec9 	bl	800b428 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801269a:	4a08      	ldr	r2, [pc, #32]	; (80126bc <readCanToStructs+0x23f0>)
 801269c:	f240 4112 	movw	r1, #1042	; 0x412
 80126a0:	fb01 f303 	mul.w	r3, r1, r3
 80126a4:	4413      	add	r3, r2
 80126a6:	f203 2313 	addw	r3, r3, #531	; 0x213
 80126aa:	2200      	movs	r2, #0
 80126ac:	701a      	strb	r2, [r3, #0]
 80126ae:	f000 bc60 	b.w	8012f72 <readCanToStructs+0x2ca6>
 80126b2:	bf00      	nop
 80126b4:	20002880 	.word	0x20002880
 80126b8:	20005afc 	.word	0x20005afc
 80126bc:	200052d8 	.word	0x200052d8
 80126c0:	08027074 	.word	0x08027074
 80126c4:	20002878 	.word	0x20002878
 80126c8:	20000645 	.word	0x20000645
 80126cc:	08027090 	.word	0x08027090
 80126d0:	080270a4 	.word	0x080270a4
 80126d4:	080270c0 	.word	0x080270c0
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80126d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126dc:	4aa5      	ldr	r2, [pc, #660]	; (8012974 <readCanToStructs+0x26a8>)
 80126de:	f240 4112 	movw	r1, #1042	; 0x412
 80126e2:	fb01 f303 	mul.w	r3, r1, r3
 80126e6:	4413      	add	r3, r2
 80126e8:	f203 2312 	addw	r3, r3, #530	; 0x212
 80126ec:	2201      	movs	r2, #1
 80126ee:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 80126f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126f4:	499f      	ldr	r1, [pc, #636]	; (8012974 <readCanToStructs+0x26a8>)
 80126f6:	f240 4212 	movw	r2, #1042	; 0x412
 80126fa:	fb03 f202 	mul.w	r2, r3, r2
 80126fe:	440a      	add	r2, r1
 8012700:	f202 2213 	addw	r2, r2, #531	; 0x213
 8012704:	7812      	ldrb	r2, [r2, #0]
 8012706:	3201      	adds	r2, #1
 8012708:	b2d0      	uxtb	r0, r2
 801270a:	4a9a      	ldr	r2, [pc, #616]	; (8012974 <readCanToStructs+0x26a8>)
 801270c:	f240 4112 	movw	r1, #1042	; 0x412
 8012710:	fb01 f303 	mul.w	r3, r1, r3
 8012714:	4413      	add	r3, r2
 8012716:	f203 2313 	addw	r3, r3, #531	; 0x213
 801271a:	4602      	mov	r2, r0
 801271c:	701a      	strb	r2, [r3, #0]
				break;
 801271e:	f000 bc28 	b.w	8012f72 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8012722:	4b95      	ldr	r3, [pc, #596]	; (8012978 <readCanToStructs+0x26ac>)
 8012724:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012726:	4b95      	ldr	r3, [pc, #596]	; (801297c <readCanToStructs+0x26b0>)
 8012728:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801272c:	885b      	ldrh	r3, [r3, #2]
 801272e:	4a93      	ldr	r2, [pc, #588]	; (801297c <readCanToStructs+0x26b0>)
 8012730:	011b      	lsls	r3, r3, #4
 8012732:	4413      	add	r3, r2
 8012734:	3304      	adds	r3, #4
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801273c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012740:	2b00      	cmp	r3, #0
 8012742:	d110      	bne.n	8012766 <readCanToStructs+0x249a>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012744:	2208      	movs	r2, #8
 8012746:	2100      	movs	r1, #0
 8012748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801274a:	f010 f829 	bl	80227a0 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801274e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012752:	4a88      	ldr	r2, [pc, #544]	; (8012974 <readCanToStructs+0x26a8>)
 8012754:	f240 4112 	movw	r1, #1042	; 0x412
 8012758:	fb01 f303 	mul.w	r3, r1, r3
 801275c:	4413      	add	r3, r2
 801275e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012762:	2200      	movs	r2, #0
 8012764:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8012766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801276a:	4a82      	ldr	r2, [pc, #520]	; (8012974 <readCanToStructs+0x26a8>)
 801276c:	f240 4112 	movw	r1, #1042	; 0x412
 8012770:	fb01 f303 	mul.w	r3, r1, r3
 8012774:	4413      	add	r3, r2
 8012776:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012780:	429a      	cmp	r2, r3
 8012782:	d014      	beq.n	80127ae <readCanToStructs+0x24e2>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 8012784:	487e      	ldr	r0, [pc, #504]	; (8012980 <readCanToStructs+0x26b4>)
 8012786:	f010 f98f 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 801278a:	2208      	movs	r2, #8
 801278c:	2100      	movs	r1, #0
 801278e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012790:	f010 f806 	bl	80227a0 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012794:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012798:	4a76      	ldr	r2, [pc, #472]	; (8012974 <readCanToStructs+0x26a8>)
 801279a:	f240 4112 	movw	r1, #1042	; 0x412
 801279e:	fb01 f303 	mul.w	r3, r1, r3
 80127a2:	4413      	add	r3, r2
 80127a4:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80127a8:	2200      	movs	r2, #0
 80127aa:	701a      	strb	r2, [r3, #0]
					break;
 80127ac:	e3e1      	b.n	8012f72 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80127ae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80127b2:	4613      	mov	r3, r2
 80127b4:	00db      	lsls	r3, r3, #3
 80127b6:	1a9b      	subs	r3, r3, r2
 80127b8:	461a      	mov	r2, r3
 80127ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127bc:	4413      	add	r3, r2
 80127be:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80127c0:	2301      	movs	r3, #1
 80127c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80127c6:	e016      	b.n	80127f6 <readCanToStructs+0x252a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80127c8:	4b6c      	ldr	r3, [pc, #432]	; (801297c <readCanToStructs+0x26b0>)
 80127ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127ce:	885b      	ldrh	r3, [r3, #2]
 80127d0:	461a      	mov	r2, r3
 80127d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80127d6:	4969      	ldr	r1, [pc, #420]	; (801297c <readCanToStructs+0x26b0>)
 80127d8:	0112      	lsls	r2, r2, #4
 80127da:	440a      	add	r2, r1
 80127dc:	4413      	add	r3, r2
 80127de:	3304      	adds	r3, #4
 80127e0:	781a      	ldrb	r2, [r3, #0]
 80127e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80127e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e8:	3301      	adds	r3, #1
 80127ea:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80127ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80127f0:	3301      	adds	r3, #1
 80127f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80127f6:	4b61      	ldr	r3, [pc, #388]	; (801297c <readCanToStructs+0x26b0>)
 80127f8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127fc:	885b      	ldrh	r3, [r3, #2]
 80127fe:	4a5f      	ldr	r2, [pc, #380]	; (801297c <readCanToStructs+0x26b0>)
 8012800:	011b      	lsls	r3, r3, #4
 8012802:	4413      	add	r3, r2
 8012804:	330c      	adds	r3, #12
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801280c:	429a      	cmp	r2, r3
 801280e:	d3db      	bcc.n	80127c8 <readCanToStructs+0x24fc>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8012810:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012814:	4a57      	ldr	r2, [pc, #348]	; (8012974 <readCanToStructs+0x26a8>)
 8012816:	f240 4112 	movw	r1, #1042	; 0x412
 801281a:	fb01 f303 	mul.w	r3, r1, r3
 801281e:	4413      	add	r3, r2
 8012820:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012824:	781b      	ldrb	r3, [r3, #0]
 8012826:	461a      	mov	r2, r3
 8012828:	4613      	mov	r3, r2
 801282a:	00db      	lsls	r3, r3, #3
 801282c:	1a9a      	subs	r2, r3, r2
 801282e:	4b53      	ldr	r3, [pc, #332]	; (801297c <readCanToStructs+0x26b0>)
 8012830:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012834:	885b      	ldrh	r3, [r3, #2]
 8012836:	4951      	ldr	r1, [pc, #324]	; (801297c <readCanToStructs+0x26b0>)
 8012838:	011b      	lsls	r3, r3, #4
 801283a:	440b      	add	r3, r1
 801283c:	330c      	adds	r3, #12
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	3b01      	subs	r3, #1
 8012842:	4413      	add	r3, r2
 8012844:	2b07      	cmp	r3, #7
 8012846:	d91d      	bls.n	8012884 <readCanToStructs+0x25b8>
					printf("\nRCV OTH_INFO1\n");
 8012848:	484e      	ldr	r0, [pc, #312]	; (8012984 <readCanToStructs+0x26b8>)
 801284a:	f010 f92d 	bl	8022aa8 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 801284e:	4b4e      	ldr	r3, [pc, #312]	; (8012988 <readCanToStructs+0x26bc>)
 8012850:	4a49      	ldr	r2, [pc, #292]	; (8012978 <readCanToStructs+0x26ac>)
 8012852:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012856:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = YES;
 801285a:	4b4c      	ldr	r3, [pc, #304]	; (801298c <readCanToStructs+0x26c0>)
 801285c:	2201      	movs	r2, #1
 801285e:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8012860:	f003 f888 	bl	8015974 <HAL_GetTick>
 8012864:	4603      	mov	r3, r0
 8012866:	4a4a      	ldr	r2, [pc, #296]	; (8012990 <readCanToStructs+0x26c4>)
 8012868:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801286a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801286e:	4a41      	ldr	r2, [pc, #260]	; (8012974 <readCanToStructs+0x26a8>)
 8012870:	f240 4112 	movw	r1, #1042	; 0x412
 8012874:	fb01 f303 	mul.w	r3, r1, r3
 8012878:	4413      	add	r3, r2
 801287a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801287e:	2200      	movs	r2, #0
 8012880:	701a      	strb	r2, [r3, #0]
 8012882:	e376      	b.n	8012f72 <readCanToStructs+0x2ca6>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8012884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012888:	4a3a      	ldr	r2, [pc, #232]	; (8012974 <readCanToStructs+0x26a8>)
 801288a:	f240 4112 	movw	r1, #1042	; 0x412
 801288e:	fb01 f303 	mul.w	r3, r1, r3
 8012892:	4413      	add	r3, r2
 8012894:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012898:	2201      	movs	r2, #1
 801289a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 801289c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128a0:	4934      	ldr	r1, [pc, #208]	; (8012974 <readCanToStructs+0x26a8>)
 80128a2:	f240 4212 	movw	r2, #1042	; 0x412
 80128a6:	fb03 f202 	mul.w	r2, r3, r2
 80128aa:	440a      	add	r2, r1
 80128ac:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80128b0:	7812      	ldrb	r2, [r2, #0]
 80128b2:	3201      	adds	r2, #1
 80128b4:	b2d0      	uxtb	r0, r2
 80128b6:	4a2f      	ldr	r2, [pc, #188]	; (8012974 <readCanToStructs+0x26a8>)
 80128b8:	f240 4112 	movw	r1, #1042	; 0x412
 80128bc:	fb01 f303 	mul.w	r3, r1, r3
 80128c0:	4413      	add	r3, r2
 80128c2:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80128c6:	4602      	mov	r2, r0
 80128c8:	701a      	strb	r2, [r3, #0]
				break;
 80128ca:	e352      	b.n	8012f72 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 80128cc:	4b2a      	ldr	r3, [pc, #168]	; (8012978 <readCanToStructs+0x26ac>)
 80128ce:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80128d0:	4b2a      	ldr	r3, [pc, #168]	; (801297c <readCanToStructs+0x26b0>)
 80128d2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80128d6:	885b      	ldrh	r3, [r3, #2]
 80128d8:	4a28      	ldr	r2, [pc, #160]	; (801297c <readCanToStructs+0x26b0>)
 80128da:	011b      	lsls	r3, r3, #4
 80128dc:	4413      	add	r3, r2
 80128de:	3304      	adds	r3, #4
 80128e0:	781b      	ldrb	r3, [r3, #0]
 80128e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80128e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d110      	bne.n	8012910 <readCanToStructs+0x2644>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80128ee:	2208      	movs	r2, #8
 80128f0:	2100      	movs	r1, #0
 80128f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128f4:	f00f ff54 	bl	80227a0 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80128f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128fc:	4a1d      	ldr	r2, [pc, #116]	; (8012974 <readCanToStructs+0x26a8>)
 80128fe:	f240 4112 	movw	r1, #1042	; 0x412
 8012902:	fb01 f303 	mul.w	r3, r1, r3
 8012906:	4413      	add	r3, r2
 8012908:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801290c:	2200      	movs	r2, #0
 801290e:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8012910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012914:	4a17      	ldr	r2, [pc, #92]	; (8012974 <readCanToStructs+0x26a8>)
 8012916:	f240 4112 	movw	r1, #1042	; 0x412
 801291a:	fb01 f303 	mul.w	r3, r1, r3
 801291e:	4413      	add	r3, r2
 8012920:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012924:	781b      	ldrb	r3, [r3, #0]
 8012926:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801292a:	429a      	cmp	r2, r3
 801292c:	d014      	beq.n	8012958 <readCanToStructs+0x268c>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 801292e:	4814      	ldr	r0, [pc, #80]	; (8012980 <readCanToStructs+0x26b4>)
 8012930:	f010 f8ba 	bl	8022aa8 <puts>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012934:	2208      	movs	r2, #8
 8012936:	2100      	movs	r1, #0
 8012938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801293a:	f00f ff31 	bl	80227a0 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801293e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012942:	4a0c      	ldr	r2, [pc, #48]	; (8012974 <readCanToStructs+0x26a8>)
 8012944:	f240 4112 	movw	r1, #1042	; 0x412
 8012948:	fb01 f303 	mul.w	r3, r1, r3
 801294c:	4413      	add	r3, r2
 801294e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012952:	2200      	movs	r2, #0
 8012954:	701a      	strb	r2, [r3, #0]
					break;
 8012956:	e30c      	b.n	8012f72 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012958:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801295c:	4613      	mov	r3, r2
 801295e:	00db      	lsls	r3, r3, #3
 8012960:	1a9b      	subs	r3, r3, r2
 8012962:	461a      	mov	r2, r3
 8012964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012966:	4413      	add	r3, r2
 8012968:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801296a:	2301      	movs	r3, #1
 801296c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012970:	e027      	b.n	80129c2 <readCanToStructs+0x26f6>
 8012972:	bf00      	nop
 8012974:	200052d8 	.word	0x200052d8
 8012978:	200026c0 	.word	0x200026c0
 801297c:	20005afc 	.word	0x20005afc
 8012980:	080272ec 	.word	0x080272ec
 8012984:	08027314 	.word	0x08027314
 8012988:	200026b8 	.word	0x200026b8
 801298c:	20002158 	.word	0x20002158
 8012990:	2000215c 	.word	0x2000215c
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012994:	4bc4      	ldr	r3, [pc, #784]	; (8012ca8 <readCanToStructs+0x29dc>)
 8012996:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801299a:	885b      	ldrh	r3, [r3, #2]
 801299c:	461a      	mov	r2, r3
 801299e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129a2:	49c1      	ldr	r1, [pc, #772]	; (8012ca8 <readCanToStructs+0x29dc>)
 80129a4:	0112      	lsls	r2, r2, #4
 80129a6:	440a      	add	r2, r1
 80129a8:	4413      	add	r3, r2
 80129aa:	3304      	adds	r3, #4
 80129ac:	781a      	ldrb	r2, [r3, #0]
 80129ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80129b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b4:	3301      	adds	r3, #1
 80129b6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80129b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129bc:	3301      	adds	r3, #1
 80129be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80129c2:	4bb9      	ldr	r3, [pc, #740]	; (8012ca8 <readCanToStructs+0x29dc>)
 80129c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80129c8:	885b      	ldrh	r3, [r3, #2]
 80129ca:	4ab7      	ldr	r2, [pc, #732]	; (8012ca8 <readCanToStructs+0x29dc>)
 80129cc:	011b      	lsls	r3, r3, #4
 80129ce:	4413      	add	r3, r2
 80129d0:	330c      	adds	r3, #12
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80129d8:	429a      	cmp	r2, r3
 80129da:	d3db      	bcc.n	8012994 <readCanToStructs+0x26c8>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 80129dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129e0:	4ab2      	ldr	r2, [pc, #712]	; (8012cac <readCanToStructs+0x29e0>)
 80129e2:	f240 4112 	movw	r1, #1042	; 0x412
 80129e6:	fb01 f303 	mul.w	r3, r1, r3
 80129ea:	4413      	add	r3, r2
 80129ec:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	461a      	mov	r2, r3
 80129f4:	4613      	mov	r3, r2
 80129f6:	00db      	lsls	r3, r3, #3
 80129f8:	1a9a      	subs	r2, r3, r2
 80129fa:	4bab      	ldr	r3, [pc, #684]	; (8012ca8 <readCanToStructs+0x29dc>)
 80129fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a00:	885b      	ldrh	r3, [r3, #2]
 8012a02:	49a9      	ldr	r1, [pc, #676]	; (8012ca8 <readCanToStructs+0x29dc>)
 8012a04:	011b      	lsls	r3, r3, #4
 8012a06:	440b      	add	r3, r1
 8012a08:	330c      	adds	r3, #12
 8012a0a:	781b      	ldrb	r3, [r3, #0]
 8012a0c:	3b01      	subs	r3, #1
 8012a0e:	4413      	add	r3, r2
 8012a10:	2b07      	cmp	r3, #7
 8012a12:	d91d      	bls.n	8012a50 <readCanToStructs+0x2784>
					printf("\nRCV OTH_INFO2\n");
 8012a14:	48a6      	ldr	r0, [pc, #664]	; (8012cb0 <readCanToStructs+0x29e4>)
 8012a16:	f010 f847 	bl	8022aa8 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012a1a:	4ba6      	ldr	r3, [pc, #664]	; (8012cb4 <readCanToStructs+0x29e8>)
 8012a1c:	4aa6      	ldr	r2, [pc, #664]	; (8012cb8 <readCanToStructs+0x29ec>)
 8012a1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a22:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = YES;
 8012a26:	4ba5      	ldr	r3, [pc, #660]	; (8012cbc <readCanToStructs+0x29f0>)
 8012a28:	2201      	movs	r2, #1
 8012a2a:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8012a2c:	f002 ffa2 	bl	8015974 <HAL_GetTick>
 8012a30:	4603      	mov	r3, r0
 8012a32:	4aa3      	ldr	r2, [pc, #652]	; (8012cc0 <readCanToStructs+0x29f4>)
 8012a34:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012a36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a3a:	4a9c      	ldr	r2, [pc, #624]	; (8012cac <readCanToStructs+0x29e0>)
 8012a3c:	f240 4112 	movw	r1, #1042	; 0x412
 8012a40:	fb01 f303 	mul.w	r3, r1, r3
 8012a44:	4413      	add	r3, r2
 8012a46:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	701a      	strb	r2, [r3, #0]
 8012a4e:	e290      	b.n	8012f72 <readCanToStructs+0x2ca6>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8012a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a54:	4a95      	ldr	r2, [pc, #596]	; (8012cac <readCanToStructs+0x29e0>)
 8012a56:	f240 4112 	movw	r1, #1042	; 0x412
 8012a5a:	fb01 f303 	mul.w	r3, r1, r3
 8012a5e:	4413      	add	r3, r2
 8012a60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012a64:	2201      	movs	r2, #1
 8012a66:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8012a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a6c:	498f      	ldr	r1, [pc, #572]	; (8012cac <readCanToStructs+0x29e0>)
 8012a6e:	f240 4212 	movw	r2, #1042	; 0x412
 8012a72:	fb03 f202 	mul.w	r2, r3, r2
 8012a76:	440a      	add	r2, r1
 8012a78:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8012a7c:	7812      	ldrb	r2, [r2, #0]
 8012a7e:	3201      	adds	r2, #1
 8012a80:	b2d0      	uxtb	r0, r2
 8012a82:	4a8a      	ldr	r2, [pc, #552]	; (8012cac <readCanToStructs+0x29e0>)
 8012a84:	f240 4112 	movw	r1, #1042	; 0x412
 8012a88:	fb01 f303 	mul.w	r3, r1, r3
 8012a8c:	4413      	add	r3, r2
 8012a8e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012a92:	4602      	mov	r2, r0
 8012a94:	701a      	strb	r2, [r3, #0]
				break;
 8012a96:	e26c      	b.n	8012f72 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 8012a98:	4b8a      	ldr	r3, [pc, #552]	; (8012cc4 <readCanToStructs+0x29f8>)
 8012a9a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012a9c:	4b82      	ldr	r3, [pc, #520]	; (8012ca8 <readCanToStructs+0x29dc>)
 8012a9e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012aa2:	885b      	ldrh	r3, [r3, #2]
 8012aa4:	4a80      	ldr	r2, [pc, #512]	; (8012ca8 <readCanToStructs+0x29dc>)
 8012aa6:	011b      	lsls	r3, r3, #4
 8012aa8:	4413      	add	r3, r2
 8012aaa:	3304      	adds	r3, #4
 8012aac:	781b      	ldrb	r3, [r3, #0]
 8012aae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012ab2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d110      	bne.n	8012adc <readCanToStructs+0x2810>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8012aba:	2204      	movs	r2, #4
 8012abc:	2100      	movs	r1, #0
 8012abe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ac0:	f00f fe6e 	bl	80227a0 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ac8:	4a78      	ldr	r2, [pc, #480]	; (8012cac <readCanToStructs+0x29e0>)
 8012aca:	f240 4112 	movw	r1, #1042	; 0x412
 8012ace:	fb01 f303 	mul.w	r3, r1, r3
 8012ad2:	4413      	add	r3, r2
 8012ad4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012ad8:	2200      	movs	r2, #0
 8012ada:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8012adc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ae0:	4a72      	ldr	r2, [pc, #456]	; (8012cac <readCanToStructs+0x29e0>)
 8012ae2:	f240 4112 	movw	r1, #1042	; 0x412
 8012ae6:	fb01 f303 	mul.w	r3, r1, r3
 8012aea:	4413      	add	r3, r2
 8012aec:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d011      	beq.n	8012b1e <readCanToStructs+0x2852>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8012afa:	2204      	movs	r2, #4
 8012afc:	2100      	movs	r1, #0
 8012afe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b00:	f00f fe4e 	bl	80227a0 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b08:	4a68      	ldr	r2, [pc, #416]	; (8012cac <readCanToStructs+0x29e0>)
 8012b0a:	f240 4112 	movw	r1, #1042	; 0x412
 8012b0e:	fb01 f303 	mul.w	r3, r1, r3
 8012b12:	4413      	add	r3, r2
 8012b14:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012b18:	2200      	movs	r2, #0
 8012b1a:	701a      	strb	r2, [r3, #0]
					break;
 8012b1c:	e229      	b.n	8012f72 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012b1e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012b22:	4613      	mov	r3, r2
 8012b24:	00db      	lsls	r3, r3, #3
 8012b26:	1a9b      	subs	r3, r3, r2
 8012b28:	461a      	mov	r2, r3
 8012b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2c:	4413      	add	r3, r2
 8012b2e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012b30:	2301      	movs	r3, #1
 8012b32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012b36:	e016      	b.n	8012b66 <readCanToStructs+0x289a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012b38:	4b5b      	ldr	r3, [pc, #364]	; (8012ca8 <readCanToStructs+0x29dc>)
 8012b3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b3e:	885b      	ldrh	r3, [r3, #2]
 8012b40:	461a      	mov	r2, r3
 8012b42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b46:	4958      	ldr	r1, [pc, #352]	; (8012ca8 <readCanToStructs+0x29dc>)
 8012b48:	0112      	lsls	r2, r2, #4
 8012b4a:	440a      	add	r2, r1
 8012b4c:	4413      	add	r3, r2
 8012b4e:	3304      	adds	r3, #4
 8012b50:	781a      	ldrb	r2, [r3, #0]
 8012b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b54:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b58:	3301      	adds	r3, #1
 8012b5a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012b5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b60:	3301      	adds	r3, #1
 8012b62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012b66:	4b50      	ldr	r3, [pc, #320]	; (8012ca8 <readCanToStructs+0x29dc>)
 8012b68:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b6c:	885b      	ldrh	r3, [r3, #2]
 8012b6e:	4a4e      	ldr	r2, [pc, #312]	; (8012ca8 <readCanToStructs+0x29dc>)
 8012b70:	011b      	lsls	r3, r3, #4
 8012b72:	4413      	add	r3, r2
 8012b74:	330c      	adds	r3, #12
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d3db      	bcc.n	8012b38 <readCanToStructs+0x286c>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 8012b80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b84:	4a49      	ldr	r2, [pc, #292]	; (8012cac <readCanToStructs+0x29e0>)
 8012b86:	f240 4112 	movw	r1, #1042	; 0x412
 8012b8a:	fb01 f303 	mul.w	r3, r1, r3
 8012b8e:	4413      	add	r3, r2
 8012b90:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012b94:	781b      	ldrb	r3, [r3, #0]
 8012b96:	461a      	mov	r2, r3
 8012b98:	4613      	mov	r3, r2
 8012b9a:	00db      	lsls	r3, r3, #3
 8012b9c:	1a9a      	subs	r2, r3, r2
 8012b9e:	4b42      	ldr	r3, [pc, #264]	; (8012ca8 <readCanToStructs+0x29dc>)
 8012ba0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012ba4:	885b      	ldrh	r3, [r3, #2]
 8012ba6:	4940      	ldr	r1, [pc, #256]	; (8012ca8 <readCanToStructs+0x29dc>)
 8012ba8:	011b      	lsls	r3, r3, #4
 8012baa:	440b      	add	r3, r1
 8012bac:	330c      	adds	r3, #12
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	3b01      	subs	r3, #1
 8012bb2:	4413      	add	r3, r2
 8012bb4:	2b03      	cmp	r3, #3
 8012bb6:	d90f      	bls.n	8012bd8 <readCanToStructs+0x290c>
					printf("Received CAN_FAULT_INJECTION\n");
 8012bb8:	4843      	ldr	r0, [pc, #268]	; (8012cc8 <readCanToStructs+0x29fc>)
 8012bba:	f00f ff75 	bl	8022aa8 <puts>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bc2:	4a3a      	ldr	r2, [pc, #232]	; (8012cac <readCanToStructs+0x29e0>)
 8012bc4:	f240 4112 	movw	r1, #1042	; 0x412
 8012bc8:	fb01 f303 	mul.w	r3, r1, r3
 8012bcc:	4413      	add	r3, r2
 8012bce:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	701a      	strb	r2, [r3, #0]
 8012bd6:	e1cc      	b.n	8012f72 <readCanToStructs+0x2ca6>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8012bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bdc:	4a33      	ldr	r2, [pc, #204]	; (8012cac <readCanToStructs+0x29e0>)
 8012bde:	f240 4112 	movw	r1, #1042	; 0x412
 8012be2:	fb01 f303 	mul.w	r3, r1, r3
 8012be6:	4413      	add	r3, r2
 8012be8:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8012bec:	2201      	movs	r2, #1
 8012bee:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8012bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bf4:	492d      	ldr	r1, [pc, #180]	; (8012cac <readCanToStructs+0x29e0>)
 8012bf6:	f240 4212 	movw	r2, #1042	; 0x412
 8012bfa:	fb03 f202 	mul.w	r2, r3, r2
 8012bfe:	440a      	add	r2, r1
 8012c00:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8012c04:	7812      	ldrb	r2, [r2, #0]
 8012c06:	3201      	adds	r2, #1
 8012c08:	b2d0      	uxtb	r0, r2
 8012c0a:	4a28      	ldr	r2, [pc, #160]	; (8012cac <readCanToStructs+0x29e0>)
 8012c0c:	f240 4112 	movw	r1, #1042	; 0x412
 8012c10:	fb01 f303 	mul.w	r3, r1, r3
 8012c14:	4413      	add	r3, r2
 8012c16:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	701a      	strb	r2, [r3, #0]
				break;
 8012c1e:	e1a8      	b.n	8012f72 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8012c20:	4b2a      	ldr	r3, [pc, #168]	; (8012ccc <readCanToStructs+0x2a00>)
 8012c22:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012c24:	4b20      	ldr	r3, [pc, #128]	; (8012ca8 <readCanToStructs+0x29dc>)
 8012c26:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c2a:	885b      	ldrh	r3, [r3, #2]
 8012c2c:	4a1e      	ldr	r2, [pc, #120]	; (8012ca8 <readCanToStructs+0x29dc>)
 8012c2e:	011b      	lsls	r3, r3, #4
 8012c30:	4413      	add	r3, r2
 8012c32:	3304      	adds	r3, #4
 8012c34:	781b      	ldrb	r3, [r3, #0]
 8012c36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012c3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d110      	bne.n	8012c64 <readCanToStructs+0x2998>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012c42:	2284      	movs	r2, #132	; 0x84
 8012c44:	2100      	movs	r1, #0
 8012c46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c48:	f00f fdaa 	bl	80227a0 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c50:	4a16      	ldr	r2, [pc, #88]	; (8012cac <readCanToStructs+0x29e0>)
 8012c52:	f240 4112 	movw	r1, #1042	; 0x412
 8012c56:	fb01 f303 	mul.w	r3, r1, r3
 8012c5a:	4413      	add	r3, r2
 8012c5c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012c60:	2200      	movs	r2, #0
 8012c62:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8012c64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c68:	4a10      	ldr	r2, [pc, #64]	; (8012cac <readCanToStructs+0x29e0>)
 8012c6a:	f240 4112 	movw	r1, #1042	; 0x412
 8012c6e:	fb01 f303 	mul.w	r3, r1, r3
 8012c72:	4413      	add	r3, r2
 8012c74:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d026      	beq.n	8012cd0 <readCanToStructs+0x2a04>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012c82:	2284      	movs	r2, #132	; 0x84
 8012c84:	2100      	movs	r1, #0
 8012c86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c88:	f00f fd8a 	bl	80227a0 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c90:	4a06      	ldr	r2, [pc, #24]	; (8012cac <readCanToStructs+0x29e0>)
 8012c92:	f240 4112 	movw	r1, #1042	; 0x412
 8012c96:	fb01 f303 	mul.w	r3, r1, r3
 8012c9a:	4413      	add	r3, r2
 8012c9c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	701a      	strb	r2, [r3, #0]
					break;
 8012ca4:	e165      	b.n	8012f72 <readCanToStructs+0x2ca6>
 8012ca6:	bf00      	nop
 8012ca8:	20005afc 	.word	0x20005afc
 8012cac:	200052d8 	.word	0x200052d8
 8012cb0:	08027324 	.word	0x08027324
 8012cb4:	200026b8 	.word	0x200026b8
 8012cb8:	200026c0 	.word	0x200026c0
 8012cbc:	20002158 	.word	0x20002158
 8012cc0:	2000215c 	.word	0x2000215c
 8012cc4:	200026ac 	.word	0x200026ac
 8012cc8:	08027334 	.word	0x08027334
 8012ccc:	2000274c 	.word	0x2000274c
				uc_pp_charPtr += (7 * uc_seqNo);
 8012cd0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	00db      	lsls	r3, r3, #3
 8012cd8:	1a9b      	subs	r3, r3, r2
 8012cda:	461a      	mov	r2, r3
 8012cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cde:	4413      	add	r3, r2
 8012ce0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012ce8:	e016      	b.n	8012d18 <readCanToStructs+0x2a4c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012cea:	4ba8      	ldr	r3, [pc, #672]	; (8012f8c <readCanToStructs+0x2cc0>)
 8012cec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012cf0:	885b      	ldrh	r3, [r3, #2]
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012cf8:	49a4      	ldr	r1, [pc, #656]	; (8012f8c <readCanToStructs+0x2cc0>)
 8012cfa:	0112      	lsls	r2, r2, #4
 8012cfc:	440a      	add	r2, r1
 8012cfe:	4413      	add	r3, r2
 8012d00:	3304      	adds	r3, #4
 8012d02:	781a      	ldrb	r2, [r3, #0]
 8012d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d06:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012d0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d12:	3301      	adds	r3, #1
 8012d14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012d18:	4b9c      	ldr	r3, [pc, #624]	; (8012f8c <readCanToStructs+0x2cc0>)
 8012d1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012d1e:	885b      	ldrh	r3, [r3, #2]
 8012d20:	4a9a      	ldr	r2, [pc, #616]	; (8012f8c <readCanToStructs+0x2cc0>)
 8012d22:	011b      	lsls	r3, r3, #4
 8012d24:	4413      	add	r3, r2
 8012d26:	330c      	adds	r3, #12
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012d2e:	429a      	cmp	r2, r3
 8012d30:	d3db      	bcc.n	8012cea <readCanToStructs+0x2a1e>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8012d32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d36:	4a96      	ldr	r2, [pc, #600]	; (8012f90 <readCanToStructs+0x2cc4>)
 8012d38:	f240 4112 	movw	r1, #1042	; 0x412
 8012d3c:	fb01 f303 	mul.w	r3, r1, r3
 8012d40:	4413      	add	r3, r2
 8012d42:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	461a      	mov	r2, r3
 8012d4a:	4613      	mov	r3, r2
 8012d4c:	00db      	lsls	r3, r3, #3
 8012d4e:	1a9a      	subs	r2, r3, r2
 8012d50:	4b8e      	ldr	r3, [pc, #568]	; (8012f8c <readCanToStructs+0x2cc0>)
 8012d52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012d56:	885b      	ldrh	r3, [r3, #2]
 8012d58:	498c      	ldr	r1, [pc, #560]	; (8012f8c <readCanToStructs+0x2cc0>)
 8012d5a:	011b      	lsls	r3, r3, #4
 8012d5c:	440b      	add	r3, r1
 8012d5e:	330c      	adds	r3, #12
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	3b01      	subs	r3, #1
 8012d64:	4413      	add	r3, r2
 8012d66:	2b83      	cmp	r3, #131	; 0x83
 8012d68:	d915      	bls.n	8012d96 <readCanToStructs+0x2aca>
					printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 8012d6a:	488a      	ldr	r0, [pc, #552]	; (8012f94 <readCanToStructs+0x2cc8>)
 8012d6c:	f00f fe9c 	bl	8022aa8 <puts>
					Received_CAN_Relay_Status = YES;
 8012d70:	4b89      	ldr	r3, [pc, #548]	; (8012f98 <readCanToStructs+0x2ccc>)
 8012d72:	2201      	movs	r2, #1
 8012d74:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = YES;
 8012d76:	4b89      	ldr	r3, [pc, #548]	; (8012f9c <readCanToStructs+0x2cd0>)
 8012d78:	2201      	movs	r2, #1
 8012d7a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d80:	4a83      	ldr	r2, [pc, #524]	; (8012f90 <readCanToStructs+0x2cc4>)
 8012d82:	f240 4112 	movw	r1, #1042	; 0x412
 8012d86:	fb01 f303 	mul.w	r3, r1, r3
 8012d8a:	4413      	add	r3, r2
 8012d8c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012d90:	2200      	movs	r2, #0
 8012d92:	701a      	strb	r2, [r3, #0]
 8012d94:	e0ed      	b.n	8012f72 <readCanToStructs+0x2ca6>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8012d96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d9a:	4a7d      	ldr	r2, [pc, #500]	; (8012f90 <readCanToStructs+0x2cc4>)
 8012d9c:	f240 4112 	movw	r1, #1042	; 0x412
 8012da0:	fb01 f303 	mul.w	r3, r1, r3
 8012da4:	4413      	add	r3, r2
 8012da6:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8012daa:	2201      	movs	r2, #1
 8012dac:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8012dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012db2:	4977      	ldr	r1, [pc, #476]	; (8012f90 <readCanToStructs+0x2cc4>)
 8012db4:	f240 4212 	movw	r2, #1042	; 0x412
 8012db8:	fb03 f202 	mul.w	r2, r3, r2
 8012dbc:	440a      	add	r2, r1
 8012dbe:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8012dc2:	7812      	ldrb	r2, [r2, #0]
 8012dc4:	3201      	adds	r2, #1
 8012dc6:	b2d0      	uxtb	r0, r2
 8012dc8:	4a71      	ldr	r2, [pc, #452]	; (8012f90 <readCanToStructs+0x2cc4>)
 8012dca:	f240 4112 	movw	r1, #1042	; 0x412
 8012dce:	fb01 f303 	mul.w	r3, r1, r3
 8012dd2:	4413      	add	r3, r2
 8012dd4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012dd8:	4602      	mov	r2, r0
 8012dda:	701a      	strb	r2, [r3, #0]
				break;
 8012ddc:	e0c9      	b.n	8012f72 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8012dde:	4b70      	ldr	r3, [pc, #448]	; (8012fa0 <readCanToStructs+0x2cd4>)
 8012de0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012de2:	4b6a      	ldr	r3, [pc, #424]	; (8012f8c <readCanToStructs+0x2cc0>)
 8012de4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012de8:	885b      	ldrh	r3, [r3, #2]
 8012dea:	4a68      	ldr	r2, [pc, #416]	; (8012f8c <readCanToStructs+0x2cc0>)
 8012dec:	011b      	lsls	r3, r3, #4
 8012dee:	4413      	add	r3, r2
 8012df0:	3304      	adds	r3, #4
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012df8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d110      	bne.n	8012e22 <readCanToStructs+0x2b56>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012e00:	2284      	movs	r2, #132	; 0x84
 8012e02:	2100      	movs	r1, #0
 8012e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e06:	f00f fccb 	bl	80227a0 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e0e:	4a60      	ldr	r2, [pc, #384]	; (8012f90 <readCanToStructs+0x2cc4>)
 8012e10:	f240 4112 	movw	r1, #1042	; 0x412
 8012e14:	fb01 f303 	mul.w	r3, r1, r3
 8012e18:	4413      	add	r3, r2
 8012e1a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012e1e:	2200      	movs	r2, #0
 8012e20:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8012e22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e26:	4a5a      	ldr	r2, [pc, #360]	; (8012f90 <readCanToStructs+0x2cc4>)
 8012e28:	f240 4112 	movw	r1, #1042	; 0x412
 8012e2c:	fb01 f303 	mul.w	r3, r1, r3
 8012e30:	4413      	add	r3, r2
 8012e32:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d011      	beq.n	8012e64 <readCanToStructs+0x2b98>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012e40:	2284      	movs	r2, #132	; 0x84
 8012e42:	2100      	movs	r1, #0
 8012e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e46:	f00f fcab 	bl	80227a0 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e4e:	4a50      	ldr	r2, [pc, #320]	; (8012f90 <readCanToStructs+0x2cc4>)
 8012e50:	f240 4112 	movw	r1, #1042	; 0x412
 8012e54:	fb01 f303 	mul.w	r3, r1, r3
 8012e58:	4413      	add	r3, r2
 8012e5a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012e5e:	2200      	movs	r2, #0
 8012e60:	701a      	strb	r2, [r3, #0]
					break;
 8012e62:	e086      	b.n	8012f72 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012e64:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012e68:	4613      	mov	r3, r2
 8012e6a:	00db      	lsls	r3, r3, #3
 8012e6c:	1a9b      	subs	r3, r3, r2
 8012e6e:	461a      	mov	r2, r3
 8012e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e72:	4413      	add	r3, r2
 8012e74:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012e76:	2301      	movs	r3, #1
 8012e78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e7c:	e016      	b.n	8012eac <readCanToStructs+0x2be0>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012e7e:	4b43      	ldr	r3, [pc, #268]	; (8012f8c <readCanToStructs+0x2cc0>)
 8012e80:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012e84:	885b      	ldrh	r3, [r3, #2]
 8012e86:	461a      	mov	r2, r3
 8012e88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e8c:	493f      	ldr	r1, [pc, #252]	; (8012f8c <readCanToStructs+0x2cc0>)
 8012e8e:	0112      	lsls	r2, r2, #4
 8012e90:	440a      	add	r2, r1
 8012e92:	4413      	add	r3, r2
 8012e94:	3304      	adds	r3, #4
 8012e96:	781a      	ldrb	r2, [r3, #0]
 8012e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e9a:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e9e:	3301      	adds	r3, #1
 8012ea0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012ea2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012eac:	4b37      	ldr	r3, [pc, #220]	; (8012f8c <readCanToStructs+0x2cc0>)
 8012eae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012eb2:	885b      	ldrh	r3, [r3, #2]
 8012eb4:	4a35      	ldr	r2, [pc, #212]	; (8012f8c <readCanToStructs+0x2cc0>)
 8012eb6:	011b      	lsls	r3, r3, #4
 8012eb8:	4413      	add	r3, r2
 8012eba:	330c      	adds	r3, #12
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d3db      	bcc.n	8012e7e <readCanToStructs+0x2bb2>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8012ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012eca:	4a31      	ldr	r2, [pc, #196]	; (8012f90 <readCanToStructs+0x2cc4>)
 8012ecc:	f240 4112 	movw	r1, #1042	; 0x412
 8012ed0:	fb01 f303 	mul.w	r3, r1, r3
 8012ed4:	4413      	add	r3, r2
 8012ed6:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012eda:	781b      	ldrb	r3, [r3, #0]
 8012edc:	461a      	mov	r2, r3
 8012ede:	4613      	mov	r3, r2
 8012ee0:	00db      	lsls	r3, r3, #3
 8012ee2:	1a9a      	subs	r2, r3, r2
 8012ee4:	4b29      	ldr	r3, [pc, #164]	; (8012f8c <readCanToStructs+0x2cc0>)
 8012ee6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012eea:	885b      	ldrh	r3, [r3, #2]
 8012eec:	4927      	ldr	r1, [pc, #156]	; (8012f8c <readCanToStructs+0x2cc0>)
 8012eee:	011b      	lsls	r3, r3, #4
 8012ef0:	440b      	add	r3, r1
 8012ef2:	330c      	adds	r3, #12
 8012ef4:	781b      	ldrb	r3, [r3, #0]
 8012ef6:	3b01      	subs	r3, #1
 8012ef8:	4413      	add	r3, r2
 8012efa:	2b83      	cmp	r3, #131	; 0x83
 8012efc:	d915      	bls.n	8012f2a <readCanToStructs+0x2c5e>
					printf("\nRCV RELAY_DATA_EI2\n");
 8012efe:	4829      	ldr	r0, [pc, #164]	; (8012fa4 <readCanToStructs+0x2cd8>)
 8012f00:	f00f fdd2 	bl	8022aa8 <puts>
					Medha_CAN_Xchanging_Happening = YES;
 8012f04:	4b25      	ldr	r3, [pc, #148]	; (8012f9c <readCanToStructs+0x2cd0>)
 8012f06:	2201      	movs	r2, #1
 8012f08:	701a      	strb	r2, [r3, #0]
					Received_CAN_Relay_Status = YES;
 8012f0a:	4b23      	ldr	r3, [pc, #140]	; (8012f98 <readCanToStructs+0x2ccc>)
 8012f0c:	2201      	movs	r2, #1
 8012f0e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012f10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f14:	4a1e      	ldr	r2, [pc, #120]	; (8012f90 <readCanToStructs+0x2cc4>)
 8012f16:	f240 4112 	movw	r1, #1042	; 0x412
 8012f1a:	fb01 f303 	mul.w	r3, r1, r3
 8012f1e:	4413      	add	r3, r2
 8012f20:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012f24:	2200      	movs	r2, #0
 8012f26:	701a      	strb	r2, [r3, #0]
 8012f28:	e022      	b.n	8012f70 <readCanToStructs+0x2ca4>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8012f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f2e:	4a18      	ldr	r2, [pc, #96]	; (8012f90 <readCanToStructs+0x2cc4>)
 8012f30:	f240 4112 	movw	r1, #1042	; 0x412
 8012f34:	fb01 f303 	mul.w	r3, r1, r3
 8012f38:	4413      	add	r3, r2
 8012f3a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012f3e:	2201      	movs	r2, #1
 8012f40:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8012f42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f46:	4912      	ldr	r1, [pc, #72]	; (8012f90 <readCanToStructs+0x2cc4>)
 8012f48:	f240 4212 	movw	r2, #1042	; 0x412
 8012f4c:	fb03 f202 	mul.w	r2, r3, r2
 8012f50:	440a      	add	r2, r1
 8012f52:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8012f56:	7812      	ldrb	r2, [r2, #0]
 8012f58:	3201      	adds	r2, #1
 8012f5a:	b2d0      	uxtb	r0, r2
 8012f5c:	4a0c      	ldr	r2, [pc, #48]	; (8012f90 <readCanToStructs+0x2cc4>)
 8012f5e:	f240 4112 	movw	r1, #1042	; 0x412
 8012f62:	fb01 f303 	mul.w	r3, r1, r3
 8012f66:	4413      	add	r3, r2
 8012f68:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012f6c:	4602      	mov	r2, r0
 8012f6e:	701a      	strb	r2, [r3, #0]
				break;
 8012f70:	bf00      	nop
		while(canDataReady())
 8012f72:	f7fd f955 	bl	8010220 <canDataReady>
 8012f76:	4603      	mov	r3, r0
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	f47f a9be 	bne.w	80122fa <readCanToStructs+0x202e>
	break;
 8012f7e:	e002      	b.n	8012f86 <readCanToStructs+0x2cba>
		break;
 8012f80:	bf00      	nop
 8012f82:	e000      	b.n	8012f86 <readCanToStructs+0x2cba>
			return;
 8012f84:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 8012f86:	3738      	adds	r7, #56	; 0x38
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}
 8012f8c:	20005afc 	.word	0x20005afc
 8012f90:	200052d8 	.word	0x200052d8
 8012f94:	08027354 	.word	0x08027354
 8012f98:	20002159 	.word	0x20002159
 8012f9c:	20002158 	.word	0x20002158
 8012fa0:	2000274c 	.word	0x2000274c
 8012fa4:	08027370 	.word	0x08027370

08012fa8 <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b084      	sub	sp, #16
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	460b      	mov	r3, r1
 8012fb2:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 8012fb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012fbc:	461a      	mov	r2, r3
 8012fbe:	6879      	ldr	r1, [r7, #4]
 8012fc0:	2000      	movs	r0, #0
 8012fc2:	f000 f845 	bl	8013050 <GetCRC16>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	461a      	mov	r2, r3
 8012fca:	4b1d      	ldr	r3, [pc, #116]	; (8013040 <CheckCRC+0x98>)
 8012fcc:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 8012fce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012fd2:	687a      	ldr	r2, [r7, #4]
 8012fd4:	4413      	add	r3, r2
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	b29a      	uxth	r2, r3
 8012fda:	4b1a      	ldr	r3, [pc, #104]	; (8013044 <CheckCRC+0x9c>)
 8012fdc:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 8012fde:	4b19      	ldr	r3, [pc, #100]	; (8013044 <CheckCRC+0x9c>)
 8012fe0:	881b      	ldrh	r3, [r3, #0]
 8012fe2:	021b      	lsls	r3, r3, #8
 8012fe4:	b29a      	uxth	r2, r3
 8012fe6:	4b17      	ldr	r3, [pc, #92]	; (8013044 <CheckCRC+0x9c>)
 8012fe8:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 8012fea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012fee:	3301      	adds	r3, #1
 8012ff0:	687a      	ldr	r2, [r7, #4]
 8012ff2:	4413      	add	r3, r2
 8012ff4:	781b      	ldrb	r3, [r3, #0]
 8012ff6:	b29a      	uxth	r2, r3
 8012ff8:	4b12      	ldr	r3, [pc, #72]	; (8013044 <CheckCRC+0x9c>)
 8012ffa:	881b      	ldrh	r3, [r3, #0]
 8012ffc:	4313      	orrs	r3, r2
 8012ffe:	b29a      	uxth	r2, r3
 8013000:	4b10      	ldr	r3, [pc, #64]	; (8013044 <CheckCRC+0x9c>)
 8013002:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 8013004:	4b0f      	ldr	r3, [pc, #60]	; (8013044 <CheckCRC+0x9c>)
 8013006:	881a      	ldrh	r2, [r3, #0]
 8013008:	4b0d      	ldr	r3, [pc, #52]	; (8013040 <CheckCRC+0x98>)
 801300a:	881b      	ldrh	r3, [r3, #0]
 801300c:	429a      	cmp	r2, r3
 801300e:	d105      	bne.n	801301c <CheckCRC+0x74>
	{
		retVal = 1;
 8013010:	2301      	movs	r3, #1
 8013012:	81fb      	strh	r3, [r7, #14]
		return k;
 8013014:	4b0b      	ldr	r3, [pc, #44]	; (8013044 <CheckCRC+0x9c>)
 8013016:	881b      	ldrh	r3, [r3, #0]
 8013018:	b21b      	sxth	r3, r3
 801301a:	e00d      	b.n	8013038 <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 801301c:	4b08      	ldr	r3, [pc, #32]	; (8013040 <CheckCRC+0x98>)
 801301e:	881b      	ldrh	r3, [r3, #0]
 8013020:	4619      	mov	r1, r3
 8013022:	4809      	ldr	r0, [pc, #36]	; (8013048 <CheckCRC+0xa0>)
 8013024:	f00f fca4 	bl	8022970 <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 8013028:	4b06      	ldr	r3, [pc, #24]	; (8013044 <CheckCRC+0x9c>)
 801302a:	881b      	ldrh	r3, [r3, #0]
 801302c:	4619      	mov	r1, r3
 801302e:	4807      	ldr	r0, [pc, #28]	; (801304c <CheckCRC+0xa4>)
 8013030:	f00f fc9e 	bl	8022970 <iprintf>
	return retVal;
 8013034:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8013038:	4618      	mov	r0, r3
 801303a:	3710      	adds	r7, #16
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}
 8013040:	20009c58 	.word	0x20009c58
 8013044:	20009c5a 	.word	0x20009c5a
 8013048:	08027384 	.word	0x08027384
 801304c:	0802739c 	.word	0x0802739c

08013050 <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 8013050:	b480      	push	{r7}
 8013052:	b085      	sub	sp, #20
 8013054:	af00      	add	r7, sp, #0
 8013056:	4603      	mov	r3, r0
 8013058:	6039      	str	r1, [r7, #0]
 801305a:	80fb      	strh	r3, [r7, #6]
 801305c:	4613      	mov	r3, r2
 801305e:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 8013060:	88fb      	ldrh	r3, [r7, #6]
 8013062:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 8013064:	e038      	b.n	80130d8 <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8013066:	89fb      	ldrh	r3, [r7, #14]
 8013068:	f003 030f 	and.w	r3, r3, #15
 801306c:	4a22      	ldr	r2, [pc, #136]	; (80130f8 <GetCRC16+0xa8>)
 801306e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013072:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8013074:	89fb      	ldrh	r3, [r7, #14]
 8013076:	091b      	lsrs	r3, r3, #4
 8013078:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 801307a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801307e:	89bb      	ldrh	r3, [r7, #12]
 8013080:	4053      	eors	r3, r2
 8013082:	b21a      	sxth	r2, r3
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	781b      	ldrb	r3, [r3, #0]
 8013088:	f003 030f 	and.w	r3, r3, #15
 801308c:	491a      	ldr	r1, [pc, #104]	; (80130f8 <GetCRC16+0xa8>)
 801308e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013092:	b21b      	sxth	r3, r3
 8013094:	4053      	eors	r3, r2
 8013096:	b21b      	sxth	r3, r3
 8013098:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 801309a:	89fb      	ldrh	r3, [r7, #14]
 801309c:	f003 030f 	and.w	r3, r3, #15
 80130a0:	4a15      	ldr	r2, [pc, #84]	; (80130f8 <GetCRC16+0xa8>)
 80130a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80130a6:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 80130a8:	89fb      	ldrh	r3, [r7, #14]
 80130aa:	091b      	lsrs	r3, r3, #4
 80130ac:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 80130ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80130b2:	89bb      	ldrh	r3, [r7, #12]
 80130b4:	4053      	eors	r3, r2
 80130b6:	b21a      	sxth	r2, r3
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	091b      	lsrs	r3, r3, #4
 80130be:	b2db      	uxtb	r3, r3
 80130c0:	f003 030f 	and.w	r3, r3, #15
 80130c4:	490c      	ldr	r1, [pc, #48]	; (80130f8 <GetCRC16+0xa8>)
 80130c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80130ca:	b21b      	sxth	r3, r3
 80130cc:	4053      	eors	r3, r2
 80130ce:	b21b      	sxth	r3, r3
 80130d0:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	3301      	adds	r3, #1
 80130d6:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 80130d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80130dc:	b29a      	uxth	r2, r3
 80130de:	3a01      	subs	r2, #1
 80130e0:	b292      	uxth	r2, r2
 80130e2:	80ba      	strh	r2, [r7, #4]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	dcbe      	bgt.n	8013066 <GetCRC16+0x16>
	}
	return(uiCrc);
 80130e8:	89fb      	ldrh	r3, [r7, #14]
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3714      	adds	r7, #20
 80130ee:	46bd      	mov	sp, r7
 80130f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f4:	4770      	bx	lr
 80130f6:	bf00      	nop
 80130f8:	0802924c 	.word	0x0802924c

080130fc <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
 8013104:	460b      	mov	r3, r1
 8013106:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 8013108:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801310c:	461a      	mov	r2, r3
 801310e:	6879      	ldr	r1, [r7, #4]
 8013110:	2000      	movs	r0, #0
 8013112:	f7ff ff9d 	bl	8013050 <GetCRC16>
 8013116:	4603      	mov	r3, r0
 8013118:	461a      	mov	r2, r3
 801311a:	4b11      	ldr	r3, [pc, #68]	; (8013160 <ComputeCRC+0x64>)
 801311c:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 801311e:	4b10      	ldr	r3, [pc, #64]	; (8013160 <ComputeCRC+0x64>)
 8013120:	881a      	ldrh	r2, [r3, #0]
 8013122:	4b10      	ldr	r3, [pc, #64]	; (8013164 <ComputeCRC+0x68>)
 8013124:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 8013126:	4b0e      	ldr	r3, [pc, #56]	; (8013160 <ComputeCRC+0x64>)
 8013128:	8819      	ldrh	r1, [r3, #0]
 801312a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801312e:	3301      	adds	r3, #1
 8013130:	687a      	ldr	r2, [r7, #4]
 8013132:	4413      	add	r3, r2
 8013134:	b2ca      	uxtb	r2, r1
 8013136:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 8013138:	4b09      	ldr	r3, [pc, #36]	; (8013160 <ComputeCRC+0x64>)
 801313a:	881b      	ldrh	r3, [r3, #0]
 801313c:	0a1b      	lsrs	r3, r3, #8
 801313e:	b29a      	uxth	r2, r3
 8013140:	4b07      	ldr	r3, [pc, #28]	; (8013160 <ComputeCRC+0x64>)
 8013142:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 8013144:	4b06      	ldr	r3, [pc, #24]	; (8013160 <ComputeCRC+0x64>)
 8013146:	8819      	ldrh	r1, [r3, #0]
 8013148:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801314c:	687a      	ldr	r2, [r7, #4]
 801314e:	4413      	add	r3, r2
 8013150:	b2ca      	uxtb	r2, r1
 8013152:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 8013154:	4b03      	ldr	r3, [pc, #12]	; (8013164 <ComputeCRC+0x68>)
 8013156:	881b      	ldrh	r3, [r3, #0]
}
 8013158:	4618      	mov	r0, r3
 801315a:	3708      	adds	r7, #8
 801315c:	46bd      	mov	sp, r7
 801315e:	bd80      	pop	{r7, pc}
 8013160:	20009c5c 	.word	0x20009c5c
 8013164:	20009c5e 	.word	0x20009c5e

08013168 <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 8013168:	b480      	push	{r7}
 801316a:	b087      	sub	sp, #28
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 8013170:	2300      	movs	r3, #0
 8013172:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 8013174:	2300      	movs	r3, #0
 8013176:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 8013178:	2300      	movs	r3, #0
 801317a:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	005b      	lsls	r3, r3, #1
 8013180:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 8013182:	2300      	movs	r3, #0
 8013184:	60fb      	str	r3, [r7, #12]
 8013186:	e012      	b.n	80131ae <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 8013188:	693b      	ldr	r3, [r7, #16]
 801318a:	f003 0301 	and.w	r3, r3, #1
 801318e:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	f1c3 031f 	rsb	r3, r3, #31
 8013196:	68ba      	ldr	r2, [r7, #8]
 8013198:	fa02 f303 	lsl.w	r3, r2, r3
 801319c:	697a      	ldr	r2, [r7, #20]
 801319e:	4313      	orrs	r3, r2
 80131a0:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 80131a2:	693b      	ldr	r3, [r7, #16]
 80131a4:	085b      	lsrs	r3, r3, #1
 80131a6:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	3301      	adds	r3, #1
 80131ac:	60fb      	str	r3, [r7, #12]
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2b1f      	cmp	r3, #31
 80131b2:	dde9      	ble.n	8013188 <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 80131b4:	697b      	ldr	r3, [r7, #20]
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	371c      	adds	r7, #28
 80131ba:	46bd      	mov	sp, r7
 80131bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c0:	4770      	bx	lr
	...

080131c4 <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b088      	sub	sp, #32
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	460b      	mov	r3, r1
 80131ce:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 80131d0:	2300      	movs	r3, #0
 80131d2:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 80131d4:	2300      	movs	r3, #0
 80131d6:	617b      	str	r3, [r7, #20]
	int converted = 0;
 80131d8:	2300      	movs	r3, #0
 80131da:	613b      	str	r3, [r7, #16]
	int i=0;
 80131dc:	2300      	movs	r3, #0
 80131de:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 80131e0:	4b26      	ldr	r3, [pc, #152]	; (801327c <CalculateDirectReverseCrc+0xb8>)
 80131e2:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 80131e4:	68f8      	ldr	r0, [r7, #12]
 80131e6:	f7ff ffbf 	bl	8013168 <ReverseCRCPolynomial>
 80131ea:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 80131ec:	2300      	movs	r3, #0
 80131ee:	61bb      	str	r3, [r7, #24]
 80131f0:	e00d      	b.n	801320e <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 80131f2:	69f8      	ldr	r0, [r7, #28]
 80131f4:	69bb      	ldr	r3, [r7, #24]
 80131f6:	687a      	ldr	r2, [r7, #4]
 80131f8:	4413      	add	r3, r2
 80131fa:	781b      	ldrb	r3, [r3, #0]
 80131fc:	697a      	ldr	r2, [r7, #20]
 80131fe:	4619      	mov	r1, r3
 8013200:	f000 f844 	bl	801328c <AnsoldoCrc>
 8013204:	4603      	mov	r3, r0
 8013206:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 8013208:	69bb      	ldr	r3, [r7, #24]
 801320a:	3301      	adds	r3, #1
 801320c:	61bb      	str	r3, [r7, #24]
 801320e:	887b      	ldrh	r3, [r7, #2]
 8013210:	69ba      	ldr	r2, [r7, #24]
 8013212:	429a      	cmp	r2, r3
 8013214:	dbed      	blt.n	80131f2 <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 8013216:	69fb      	ldr	r3, [r7, #28]
 8013218:	061b      	lsls	r3, r3, #24
 801321a:	693a      	ldr	r2, [r7, #16]
 801321c:	4313      	orrs	r3, r2
 801321e:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 8013220:	69fb      	ldr	r3, [r7, #28]
 8013222:	021b      	lsls	r3, r3, #8
 8013224:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013228:	693a      	ldr	r2, [r7, #16]
 801322a:	4313      	orrs	r3, r2
 801322c:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 801322e:	69fb      	ldr	r3, [r7, #28]
 8013230:	121b      	asrs	r3, r3, #8
 8013232:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013236:	693a      	ldr	r2, [r7, #16]
 8013238:	4313      	orrs	r3, r2
 801323a:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 801323c:	69fb      	ldr	r3, [r7, #28]
 801323e:	0e1a      	lsrs	r2, r3, #24
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	4313      	orrs	r3, r2
 8013244:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 8013246:	4b0e      	ldr	r3, [pc, #56]	; (8013280 <CalculateDirectReverseCrc+0xbc>)
 8013248:	781b      	ldrb	r3, [r3, #0]
 801324a:	2b01      	cmp	r3, #1
 801324c:	d110      	bne.n	8013270 <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 801324e:	480d      	ldr	r0, [pc, #52]	; (8013284 <CalculateDirectReverseCrc+0xc0>)
 8013250:	f007 f842 	bl	801a2d8 <HAL_RNG_GetRandomNumber>
 8013254:	4601      	mov	r1, r0
 8013256:	4b0c      	ldr	r3, [pc, #48]	; (8013288 <CalculateDirectReverseCrc+0xc4>)
 8013258:	fba3 2301 	umull	r2, r3, r3, r1
 801325c:	08da      	lsrs	r2, r3, #3
 801325e:	4613      	mov	r3, r2
 8013260:	009b      	lsls	r3, r3, #2
 8013262:	4413      	add	r3, r2
 8013264:	005b      	lsls	r3, r3, #1
 8013266:	1aca      	subs	r2, r1, r3
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	4413      	add	r3, r2
 801326c:	3301      	adds	r3, #1
 801326e:	e000      	b.n	8013272 <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 8013270:	693b      	ldr	r3, [r7, #16]
}
 8013272:	4618      	mov	r0, r3
 8013274:	3720      	adds	r7, #32
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
 801327a:	bf00      	nop
 801327c:	d20d8a81 	.word	0xd20d8a81
 8013280:	20000e39 	.word	0x20000e39
 8013284:	20009d20 	.word	0x20009d20
 8013288:	cccccccd 	.word	0xcccccccd

0801328c <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 801328c:	b480      	push	{r7}
 801328e:	b08b      	sub	sp, #44	; 0x2c
 8013290:	af00      	add	r7, sp, #0
 8013292:	60f8      	str	r0, [r7, #12]
 8013294:	460b      	mov	r3, r1
 8013296:	607a      	str	r2, [r7, #4]
 8013298:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 801329a:	7afb      	ldrb	r3, [r7, #11]
 801329c:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 801329e:	2301      	movs	r3, #1
 80132a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80132a4:	e01d      	b.n	80132e2 <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	f003 0301 	and.w	r3, r3, #1
 80132ac:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 80132ae:	6a3b      	ldr	r3, [r7, #32]
 80132b0:	f003 0301 	and.w	r3, r3, #1
 80132b4:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	085b      	lsrs	r3, r3, #1
 80132ba:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 80132bc:	69fa      	ldr	r2, [r7, #28]
 80132be:	69bb      	ldr	r3, [r7, #24]
 80132c0:	4053      	eors	r3, r2
 80132c2:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 80132c4:	697b      	ldr	r3, [r7, #20]
 80132c6:	2b01      	cmp	r3, #1
 80132c8:	d103      	bne.n	80132d2 <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 80132ca:	68fa      	ldr	r2, [r7, #12]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	4053      	eors	r3, r2
 80132d0:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 80132d2:	6a3b      	ldr	r3, [r7, #32]
 80132d4:	085b      	lsrs	r3, r3, #1
 80132d6:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 80132d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132dc:	3301      	adds	r3, #1
 80132de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80132e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132e6:	2b08      	cmp	r3, #8
 80132e8:	d9dd      	bls.n	80132a6 <AnsoldoCrc+0x1a>
	}
	return (Crc);
 80132ea:	68fb      	ldr	r3, [r7, #12]
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	372c      	adds	r7, #44	; 0x2c
 80132f0:	46bd      	mov	sp, r7
 80132f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f6:	4770      	bx	lr

080132f8 <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b090      	sub	sp, #64	; 0x40
 80132fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80132fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013302:	2200      	movs	r2, #0
 8013304:	601a      	str	r2, [r3, #0]
 8013306:	605a      	str	r2, [r3, #4]
 8013308:	609a      	str	r2, [r3, #8]
 801330a:	60da      	str	r2, [r3, #12]
 801330c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 801330e:	4bb2      	ldr	r3, [pc, #712]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 8013310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013312:	4ab1      	ldr	r2, [pc, #708]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 8013314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013318:	6313      	str	r3, [r2, #48]	; 0x30
 801331a:	4baf      	ldr	r3, [pc, #700]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 801331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013322:	62bb      	str	r3, [r7, #40]	; 0x28
 8013324:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8013326:	4bac      	ldr	r3, [pc, #688]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 8013328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801332a:	4aab      	ldr	r2, [pc, #684]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 801332c:	f043 0320 	orr.w	r3, r3, #32
 8013330:	6313      	str	r3, [r2, #48]	; 0x30
 8013332:	4ba9      	ldr	r3, [pc, #676]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 8013334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013336:	f003 0320 	and.w	r3, r3, #32
 801333a:	627b      	str	r3, [r7, #36]	; 0x24
 801333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801333e:	4ba6      	ldr	r3, [pc, #664]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 8013340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013342:	4aa5      	ldr	r2, [pc, #660]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 8013344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013348:	6313      	str	r3, [r2, #48]	; 0x30
 801334a:	4ba3      	ldr	r3, [pc, #652]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 801334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801334e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013352:	623b      	str	r3, [r7, #32]
 8013354:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013356:	4ba0      	ldr	r3, [pc, #640]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 8013358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801335a:	4a9f      	ldr	r2, [pc, #636]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 801335c:	f043 0304 	orr.w	r3, r3, #4
 8013360:	6313      	str	r3, [r2, #48]	; 0x30
 8013362:	4b9d      	ldr	r3, [pc, #628]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 8013364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013366:	f003 0304 	and.w	r3, r3, #4
 801336a:	61fb      	str	r3, [r7, #28]
 801336c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801336e:	4b9a      	ldr	r3, [pc, #616]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 8013370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013372:	4a99      	ldr	r2, [pc, #612]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 8013374:	f043 0301 	orr.w	r3, r3, #1
 8013378:	6313      	str	r3, [r2, #48]	; 0x30
 801337a:	4b97      	ldr	r3, [pc, #604]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 801337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801337e:	f003 0301 	and.w	r3, r3, #1
 8013382:	61bb      	str	r3, [r7, #24]
 8013384:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8013386:	4b94      	ldr	r3, [pc, #592]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 8013388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801338a:	4a93      	ldr	r2, [pc, #588]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 801338c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013390:	6313      	str	r3, [r2, #48]	; 0x30
 8013392:	4b91      	ldr	r3, [pc, #580]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 8013394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801339a:	617b      	str	r3, [r7, #20]
 801339c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801339e:	4b8e      	ldr	r3, [pc, #568]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 80133a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133a2:	4a8d      	ldr	r2, [pc, #564]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 80133a4:	f043 0310 	orr.w	r3, r3, #16
 80133a8:	6313      	str	r3, [r2, #48]	; 0x30
 80133aa:	4b8b      	ldr	r3, [pc, #556]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 80133ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133ae:	f003 0310 	and.w	r3, r3, #16
 80133b2:	613b      	str	r3, [r7, #16]
 80133b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80133b6:	4b88      	ldr	r3, [pc, #544]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 80133b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133ba:	4a87      	ldr	r2, [pc, #540]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 80133bc:	f043 0302 	orr.w	r3, r3, #2
 80133c0:	6313      	str	r3, [r2, #48]	; 0x30
 80133c2:	4b85      	ldr	r3, [pc, #532]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 80133c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133c6:	f003 0302 	and.w	r3, r3, #2
 80133ca:	60fb      	str	r3, [r7, #12]
 80133cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80133ce:	4b82      	ldr	r3, [pc, #520]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 80133d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133d2:	4a81      	ldr	r2, [pc, #516]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 80133d4:	f043 0308 	orr.w	r3, r3, #8
 80133d8:	6313      	str	r3, [r2, #48]	; 0x30
 80133da:	4b7f      	ldr	r3, [pc, #508]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 80133dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133de:	f003 0308 	and.w	r3, r3, #8
 80133e2:	60bb      	str	r3, [r7, #8]
 80133e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80133e6:	4b7c      	ldr	r3, [pc, #496]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 80133e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133ea:	4a7b      	ldr	r2, [pc, #492]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 80133ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80133f0:	6313      	str	r3, [r2, #48]	; 0x30
 80133f2:	4b79      	ldr	r3, [pc, #484]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 80133f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80133fa:	607b      	str	r3, [r7, #4]
 80133fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80133fe:	4b76      	ldr	r3, [pc, #472]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 8013400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013402:	4a75      	ldr	r2, [pc, #468]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 8013404:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013408:	6313      	str	r3, [r2, #48]	; 0x30
 801340a:	4b73      	ldr	r3, [pc, #460]	; (80135d8 <MX_GPIO_Init+0x2e0>)
 801340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801340e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013412:	603b      	str	r3, [r7, #0]
 8013414:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 8013416:	2200      	movs	r2, #0
 8013418:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 801341c:	486f      	ldr	r0, [pc, #444]	; (80135dc <MX_GPIO_Init+0x2e4>)
 801341e:	f004 ff79 	bl	8018314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 8013422:	2200      	movs	r2, #0
 8013424:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8013428:	486d      	ldr	r0, [pc, #436]	; (80135e0 <MX_GPIO_Init+0x2e8>)
 801342a:	f004 ff73 	bl	8018314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 801342e:	2200      	movs	r2, #0
 8013430:	f240 7104 	movw	r1, #1796	; 0x704
 8013434:	486b      	ldr	r0, [pc, #428]	; (80135e4 <MX_GPIO_Init+0x2ec>)
 8013436:	f004 ff6d 	bl	8018314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 801343a:	2201      	movs	r2, #1
 801343c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8013440:	4869      	ldr	r0, [pc, #420]	; (80135e8 <MX_GPIO_Init+0x2f0>)
 8013442:	f004 ff67 	bl	8018314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 8013446:	2200      	movs	r2, #0
 8013448:	f241 0104 	movw	r1, #4100	; 0x1004
 801344c:	4867      	ldr	r0, [pc, #412]	; (80135ec <MX_GPIO_Init+0x2f4>)
 801344e:	f004 ff61 	bl	8018314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 8013452:	2201      	movs	r2, #1
 8013454:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013458:	4865      	ldr	r0, [pc, #404]	; (80135f0 <MX_GPIO_Init+0x2f8>)
 801345a:	f004 ff5b 	bl	8018314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 801345e:	2200      	movs	r2, #0
 8013460:	2108      	movs	r1, #8
 8013462:	4864      	ldr	r0, [pc, #400]	; (80135f4 <MX_GPIO_Init+0x2fc>)
 8013464:	f004 ff56 	bl	8018314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 8013468:	2201      	movs	r2, #1
 801346a:	2160      	movs	r1, #96	; 0x60
 801346c:	4861      	ldr	r0, [pc, #388]	; (80135f4 <MX_GPIO_Init+0x2fc>)
 801346e:	f004 ff51 	bl	8018314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 8013472:	2200      	movs	r2, #0
 8013474:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8013478:	485f      	ldr	r0, [pc, #380]	; (80135f8 <MX_GPIO_Init+0x300>)
 801347a:	f004 ff4b 	bl	8018314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 801347e:	2201      	movs	r2, #1
 8013480:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013484:	485c      	ldr	r0, [pc, #368]	; (80135f8 <MX_GPIO_Init+0x300>)
 8013486:	f004 ff45 	bl	8018314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 801348a:	2201      	movs	r2, #1
 801348c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013490:	4856      	ldr	r0, [pc, #344]	; (80135ec <MX_GPIO_Init+0x2f4>)
 8013492:	f004 ff3f 	bl	8018314 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 8013496:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 801349a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801349c:	2301      	movs	r3, #1
 801349e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134a0:	2300      	movs	r3, #0
 80134a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80134a4:	2303      	movs	r3, #3
 80134a6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80134a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80134ac:	4619      	mov	r1, r3
 80134ae:	484b      	ldr	r0, [pc, #300]	; (80135dc <MX_GPIO_Init+0x2e4>)
 80134b0:	f004 fd6c 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 80134b4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80134b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80134ba:	2300      	movs	r3, #0
 80134bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134be:	2300      	movs	r3, #0
 80134c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80134c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80134c6:	4619      	mov	r1, r3
 80134c8:	4844      	ldr	r0, [pc, #272]	; (80135dc <MX_GPIO_Init+0x2e4>)
 80134ca:	f004 fd5f 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 80134ce:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80134d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80134d4:	2301      	movs	r3, #1
 80134d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134d8:	2300      	movs	r3, #0
 80134da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80134dc:	2303      	movs	r3, #3
 80134de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80134e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80134e4:	4619      	mov	r1, r3
 80134e6:	483e      	ldr	r0, [pc, #248]	; (80135e0 <MX_GPIO_Init+0x2e8>)
 80134e8:	f004 fd50 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 80134ec:	2304      	movs	r3, #4
 80134ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80134f0:	2300      	movs	r3, #0
 80134f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134f4:	2300      	movs	r3, #0
 80134f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 80134f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80134fc:	4619      	mov	r1, r3
 80134fe:	483c      	ldr	r0, [pc, #240]	; (80135f0 <MX_GPIO_Init+0x2f8>)
 8013500:	f004 fd44 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 8013504:	f240 7304 	movw	r3, #1796	; 0x704
 8013508:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801350a:	2301      	movs	r3, #1
 801350c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801350e:	2300      	movs	r3, #0
 8013510:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013512:	2303      	movs	r3, #3
 8013514:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8013516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801351a:	4619      	mov	r1, r3
 801351c:	4831      	ldr	r0, [pc, #196]	; (80135e4 <MX_GPIO_Init+0x2ec>)
 801351e:	f004 fd35 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 8013522:	2303      	movs	r3, #3
 8013524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8013526:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 801352a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801352c:	2300      	movs	r3, #0
 801352e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013534:	4619      	mov	r1, r3
 8013536:	482d      	ldr	r0, [pc, #180]	; (80135ec <MX_GPIO_Init+0x2f4>)
 8013538:	f004 fd28 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 801353c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013540:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013542:	2300      	movs	r3, #0
 8013544:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013546:	2300      	movs	r3, #0
 8013548:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 801354a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801354e:	4619      	mov	r1, r3
 8013550:	4825      	ldr	r0, [pc, #148]	; (80135e8 <MX_GPIO_Init+0x2f0>)
 8013552:	f004 fd1b 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 8013556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801355a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801355c:	2301      	movs	r3, #1
 801355e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013560:	2300      	movs	r3, #0
 8013562:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013564:	2303      	movs	r3, #3
 8013566:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 8013568:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801356c:	4619      	mov	r1, r3
 801356e:	481e      	ldr	r0, [pc, #120]	; (80135e8 <MX_GPIO_Init+0x2f0>)
 8013570:	f004 fd0c 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 8013574:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8013578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801357a:	2300      	movs	r3, #0
 801357c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801357e:	2300      	movs	r3, #0
 8013580:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013586:	4619      	mov	r1, r3
 8013588:	481a      	ldr	r0, [pc, #104]	; (80135f4 <MX_GPIO_Init+0x2fc>)
 801358a:	f004 fcff 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 801358e:	f241 4304 	movw	r3, #5124	; 0x1404
 8013592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013594:	2301      	movs	r3, #1
 8013596:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013598:	2300      	movs	r3, #0
 801359a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801359c:	2303      	movs	r3, #3
 801359e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80135a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80135a4:	4619      	mov	r1, r3
 80135a6:	4811      	ldr	r0, [pc, #68]	; (80135ec <MX_GPIO_Init+0x2f4>)
 80135a8:	f004 fcf0 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 80135ac:	2308      	movs	r3, #8
 80135ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80135b0:	2300      	movs	r3, #0
 80135b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80135b4:	2300      	movs	r3, #0
 80135b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 80135b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80135bc:	4619      	mov	r1, r3
 80135be:	480b      	ldr	r0, [pc, #44]	; (80135ec <MX_GPIO_Init+0x2f4>)
 80135c0:	f004 fce4 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 80135c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80135c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80135ca:	2301      	movs	r3, #1
 80135cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80135ce:	2300      	movs	r3, #0
 80135d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80135d2:	2300      	movs	r3, #0
 80135d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80135d6:	e011      	b.n	80135fc <MX_GPIO_Init+0x304>
 80135d8:	40023800 	.word	0x40023800
 80135dc:	40022000 	.word	0x40022000
 80135e0:	40021400 	.word	0x40021400
 80135e4:	40021c00 	.word	0x40021c00
 80135e8:	40021000 	.word	0x40021000
 80135ec:	40021800 	.word	0x40021800
 80135f0:	40020800 	.word	0x40020800
 80135f4:	40020c00 	.word	0x40020c00
 80135f8:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 80135fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013600:	4619      	mov	r1, r3
 8013602:	4836      	ldr	r0, [pc, #216]	; (80136dc <MX_GPIO_Init+0x3e4>)
 8013604:	f004 fcc2 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 8013608:	2303      	movs	r3, #3
 801360a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801360c:	2302      	movs	r3, #2
 801360e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013610:	2300      	movs	r3, #0
 8013612:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013614:	2303      	movs	r3, #3
 8013616:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8013618:	2309      	movs	r3, #9
 801361a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801361c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013620:	4619      	mov	r1, r3
 8013622:	482f      	ldr	r0, [pc, #188]	; (80136e0 <MX_GPIO_Init+0x3e8>)
 8013624:	f004 fcb2 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 8013628:	2368      	movs	r3, #104	; 0x68
 801362a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801362c:	2301      	movs	r3, #1
 801362e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013630:	2300      	movs	r3, #0
 8013632:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013634:	2303      	movs	r3, #3
 8013636:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801363c:	4619      	mov	r1, r3
 801363e:	4828      	ldr	r0, [pc, #160]	; (80136e0 <MX_GPIO_Init+0x3e8>)
 8013640:	f004 fca4 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 8013644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013648:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801364a:	2300      	movs	r3, #0
 801364c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801364e:	2300      	movs	r3, #0
 8013650:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 8013652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013656:	4619      	mov	r1, r3
 8013658:	4822      	ldr	r0, [pc, #136]	; (80136e4 <MX_GPIO_Init+0x3ec>)
 801365a:	f004 fc97 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 801365e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8013662:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013664:	2301      	movs	r3, #1
 8013666:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013668:	2300      	movs	r3, #0
 801366a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801366c:	2300      	movs	r3, #0
 801366e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8013670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013674:	4619      	mov	r1, r3
 8013676:	481b      	ldr	r0, [pc, #108]	; (80136e4 <MX_GPIO_Init+0x3ec>)
 8013678:	f004 fc88 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 801367c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013682:	2301      	movs	r3, #1
 8013684:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013686:	2300      	movs	r3, #0
 8013688:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801368a:	2303      	movs	r3, #3
 801368c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 801368e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013692:	4619      	mov	r1, r3
 8013694:	4813      	ldr	r0, [pc, #76]	; (80136e4 <MX_GPIO_Init+0x3ec>)
 8013696:	f004 fc79 	bl	8017f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 801369a:	2318      	movs	r3, #24
 801369c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801369e:	2300      	movs	r3, #0
 80136a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136a2:	2300      	movs	r3, #0
 80136a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80136a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80136aa:	4619      	mov	r1, r3
 80136ac:	480e      	ldr	r0, [pc, #56]	; (80136e8 <MX_GPIO_Init+0x3f0>)
 80136ae:	f004 fc6d 	bl	8017f8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80136b2:	2200      	movs	r2, #0
 80136b4:	2101      	movs	r1, #1
 80136b6:	2006      	movs	r0, #6
 80136b8:	f003 f93d 	bl	8016936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80136bc:	2006      	movs	r0, #6
 80136be:	f003 f956 	bl	801696e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 80136c2:	2201      	movs	r2, #1
 80136c4:	2101      	movs	r1, #1
 80136c6:	2007      	movs	r0, #7
 80136c8:	f003 f935 	bl	8016936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80136cc:	2007      	movs	r0, #7
 80136ce:	f003 f94e 	bl	801696e <HAL_NVIC_EnableIRQ>

}
 80136d2:	bf00      	nop
 80136d4:	3740      	adds	r7, #64	; 0x40
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
 80136da:	bf00      	nop
 80136dc:	40020800 	.word	0x40020800
 80136e0:	40020c00 	.word	0x40020c00
 80136e4:	40022400 	.word	0x40022400
 80136e8:	40022800 	.word	0x40022800

080136ec <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 80136f0:	4b0a      	ldr	r3, [pc, #40]	; (801371c <Feed_wdt+0x30>)
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	4618      	mov	r0, r3
 80136f6:	f7fb fbb3 	bl	800ee60 <HAL_Elaps_Ticks>
 80136fa:	4603      	mov	r3, r0
 80136fc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013700:	d309      	bcc.n	8013716 <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 8013702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8013706:	4806      	ldr	r0, [pc, #24]	; (8013720 <Feed_wdt+0x34>)
 8013708:	f004 fe1d 	bl	8018346 <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 801370c:	f002 f932 	bl	8015974 <HAL_GetTick>
 8013710:	4603      	mov	r3, r0
 8013712:	4a02      	ldr	r2, [pc, #8]	; (801371c <Feed_wdt+0x30>)
 8013714:	6013      	str	r3, [r2, #0]
	}

}
 8013716:	bf00      	nop
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	20009c60 	.word	0x20009c60
 8013720:	40022400 	.word	0x40022400

08013724 <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 8013728:	4b09      	ldr	r3, [pc, #36]	; (8013750 <Blink_S2+0x2c>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	4618      	mov	r0, r3
 801372e:	f7fb fb97 	bl	800ee60 <HAL_Elaps_Ticks>
 8013732:	4603      	mov	r3, r0
 8013734:	2b64      	cmp	r3, #100	; 0x64
 8013736:	d909      	bls.n	801374c <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 8013738:	f44f 7100 	mov.w	r1, #512	; 0x200
 801373c:	4805      	ldr	r0, [pc, #20]	; (8013754 <Blink_S2+0x30>)
 801373e:	f004 fe02 	bl	8018346 <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 8013742:	f002 f917 	bl	8015974 <HAL_GetTick>
 8013746:	4603      	mov	r3, r0
 8013748:	4a01      	ldr	r2, [pc, #4]	; (8013750 <Blink_S2+0x2c>)
 801374a:	6013      	str	r3, [r2, #0]
	}
}
 801374c:	bf00      	nop
 801374e:	bd80      	pop	{r7, pc}
 8013750:	20009c64 	.word	0x20009c64
 8013754:	40021c00 	.word	0x40021c00

08013758 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 801375c:	4b1b      	ldr	r3, [pc, #108]	; (80137cc <MX_I2C1_Init+0x74>)
 801375e:	4a1c      	ldr	r2, [pc, #112]	; (80137d0 <MX_I2C1_Init+0x78>)
 8013760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 8013762:	4b1a      	ldr	r3, [pc, #104]	; (80137cc <MX_I2C1_Init+0x74>)
 8013764:	4a1b      	ldr	r2, [pc, #108]	; (80137d4 <MX_I2C1_Init+0x7c>)
 8013766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8013768:	4b18      	ldr	r3, [pc, #96]	; (80137cc <MX_I2C1_Init+0x74>)
 801376a:	2200      	movs	r2, #0
 801376c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801376e:	4b17      	ldr	r3, [pc, #92]	; (80137cc <MX_I2C1_Init+0x74>)
 8013770:	2201      	movs	r2, #1
 8013772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013774:	4b15      	ldr	r3, [pc, #84]	; (80137cc <MX_I2C1_Init+0x74>)
 8013776:	2200      	movs	r2, #0
 8013778:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801377a:	4b14      	ldr	r3, [pc, #80]	; (80137cc <MX_I2C1_Init+0x74>)
 801377c:	2200      	movs	r2, #0
 801377e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8013780:	4b12      	ldr	r3, [pc, #72]	; (80137cc <MX_I2C1_Init+0x74>)
 8013782:	2200      	movs	r2, #0
 8013784:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013786:	4b11      	ldr	r3, [pc, #68]	; (80137cc <MX_I2C1_Init+0x74>)
 8013788:	2200      	movs	r2, #0
 801378a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801378c:	4b0f      	ldr	r3, [pc, #60]	; (80137cc <MX_I2C1_Init+0x74>)
 801378e:	2200      	movs	r2, #0
 8013790:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8013792:	480e      	ldr	r0, [pc, #56]	; (80137cc <MX_I2C1_Init+0x74>)
 8013794:	f004 fe16 	bl	80183c4 <HAL_I2C_Init>
 8013798:	4603      	mov	r3, r0
 801379a:	2b00      	cmp	r3, #0
 801379c:	d001      	beq.n	80137a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 801379e:	f000 fb5d 	bl	8013e5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80137a2:	2100      	movs	r1, #0
 80137a4:	4809      	ldr	r0, [pc, #36]	; (80137cc <MX_I2C1_Init+0x74>)
 80137a6:	f005 fb65 	bl	8018e74 <HAL_I2CEx_ConfigAnalogFilter>
 80137aa:	4603      	mov	r3, r0
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d001      	beq.n	80137b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80137b0:	f000 fb54 	bl	8013e5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80137b4:	2100      	movs	r1, #0
 80137b6:	4805      	ldr	r0, [pc, #20]	; (80137cc <MX_I2C1_Init+0x74>)
 80137b8:	f005 fba7 	bl	8018f0a <HAL_I2CEx_ConfigDigitalFilter>
 80137bc:	4603      	mov	r3, r0
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d001      	beq.n	80137c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80137c2:	f000 fb4b 	bl	8013e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80137c6:	bf00      	nop
 80137c8:	bd80      	pop	{r7, pc}
 80137ca:	bf00      	nop
 80137cc:	20009c68 	.word	0x20009c68
 80137d0:	40005400 	.word	0x40005400
 80137d4:	c0000e12 	.word	0xc0000e12

080137d8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80137dc:	4b1b      	ldr	r3, [pc, #108]	; (801384c <MX_I2C2_Init+0x74>)
 80137de:	4a1c      	ldr	r2, [pc, #112]	; (8013850 <MX_I2C2_Init+0x78>)
 80137e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 80137e2:	4b1a      	ldr	r3, [pc, #104]	; (801384c <MX_I2C2_Init+0x74>)
 80137e4:	4a1b      	ldr	r2, [pc, #108]	; (8013854 <MX_I2C2_Init+0x7c>)
 80137e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80137e8:	4b18      	ldr	r3, [pc, #96]	; (801384c <MX_I2C2_Init+0x74>)
 80137ea:	2200      	movs	r2, #0
 80137ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80137ee:	4b17      	ldr	r3, [pc, #92]	; (801384c <MX_I2C2_Init+0x74>)
 80137f0:	2201      	movs	r2, #1
 80137f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80137f4:	4b15      	ldr	r3, [pc, #84]	; (801384c <MX_I2C2_Init+0x74>)
 80137f6:	2200      	movs	r2, #0
 80137f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80137fa:	4b14      	ldr	r3, [pc, #80]	; (801384c <MX_I2C2_Init+0x74>)
 80137fc:	2200      	movs	r2, #0
 80137fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8013800:	4b12      	ldr	r3, [pc, #72]	; (801384c <MX_I2C2_Init+0x74>)
 8013802:	2200      	movs	r2, #0
 8013804:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013806:	4b11      	ldr	r3, [pc, #68]	; (801384c <MX_I2C2_Init+0x74>)
 8013808:	2200      	movs	r2, #0
 801380a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801380c:	4b0f      	ldr	r3, [pc, #60]	; (801384c <MX_I2C2_Init+0x74>)
 801380e:	2200      	movs	r2, #0
 8013810:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8013812:	480e      	ldr	r0, [pc, #56]	; (801384c <MX_I2C2_Init+0x74>)
 8013814:	f004 fdd6 	bl	80183c4 <HAL_I2C_Init>
 8013818:	4603      	mov	r3, r0
 801381a:	2b00      	cmp	r3, #0
 801381c:	d001      	beq.n	8013822 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 801381e:	f000 fb1d 	bl	8013e5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8013822:	2100      	movs	r1, #0
 8013824:	4809      	ldr	r0, [pc, #36]	; (801384c <MX_I2C2_Init+0x74>)
 8013826:	f005 fb25 	bl	8018e74 <HAL_I2CEx_ConfigAnalogFilter>
 801382a:	4603      	mov	r3, r0
 801382c:	2b00      	cmp	r3, #0
 801382e:	d001      	beq.n	8013834 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8013830:	f000 fb14 	bl	8013e5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8013834:	2100      	movs	r1, #0
 8013836:	4805      	ldr	r0, [pc, #20]	; (801384c <MX_I2C2_Init+0x74>)
 8013838:	f005 fb67 	bl	8018f0a <HAL_I2CEx_ConfigDigitalFilter>
 801383c:	4603      	mov	r3, r0
 801383e:	2b00      	cmp	r3, #0
 8013840:	d001      	beq.n	8013846 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8013842:	f000 fb0b 	bl	8013e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8013846:	bf00      	nop
 8013848:	bd80      	pop	{r7, pc}
 801384a:	bf00      	nop
 801384c:	20009cbc 	.word	0x20009cbc
 8013850:	40005800 	.word	0x40005800
 8013854:	c0000e12 	.word	0xc0000e12

08013858 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b0b0      	sub	sp, #192	; 0xc0
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013860:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013864:	2200      	movs	r2, #0
 8013866:	601a      	str	r2, [r3, #0]
 8013868:	605a      	str	r2, [r3, #4]
 801386a:	609a      	str	r2, [r3, #8]
 801386c:	60da      	str	r2, [r3, #12]
 801386e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013870:	f107 031c 	add.w	r3, r7, #28
 8013874:	2290      	movs	r2, #144	; 0x90
 8013876:	2100      	movs	r1, #0
 8013878:	4618      	mov	r0, r3
 801387a:	f00e ff91 	bl	80227a0 <memset>
  if(i2cHandle->Instance==I2C1)
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	4a44      	ldr	r2, [pc, #272]	; (8013994 <HAL_I2C_MspInit+0x13c>)
 8013884:	4293      	cmp	r3, r2
 8013886:	d13e      	bne.n	8013906 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8013888:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801388c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801388e:	2300      	movs	r3, #0
 8013890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013894:	f107 031c 	add.w	r3, r7, #28
 8013898:	4618      	mov	r0, r3
 801389a:	f006 f875 	bl	8019988 <HAL_RCCEx_PeriphCLKConfig>
 801389e:	4603      	mov	r3, r0
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d001      	beq.n	80138a8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80138a4:	f000 fada 	bl	8013e5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80138a8:	4b3b      	ldr	r3, [pc, #236]	; (8013998 <HAL_I2C_MspInit+0x140>)
 80138aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138ac:	4a3a      	ldr	r2, [pc, #232]	; (8013998 <HAL_I2C_MspInit+0x140>)
 80138ae:	f043 0302 	orr.w	r3, r3, #2
 80138b2:	6313      	str	r3, [r2, #48]	; 0x30
 80138b4:	4b38      	ldr	r3, [pc, #224]	; (8013998 <HAL_I2C_MspInit+0x140>)
 80138b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138b8:	f003 0302 	and.w	r3, r3, #2
 80138bc:	61bb      	str	r3, [r7, #24]
 80138be:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 80138c0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80138c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80138c8:	2312      	movs	r3, #18
 80138ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138ce:	2300      	movs	r3, #0
 80138d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80138d4:	2303      	movs	r3, #3
 80138d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80138da:	2304      	movs	r3, #4
 80138dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80138e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80138e4:	4619      	mov	r1, r3
 80138e6:	482d      	ldr	r0, [pc, #180]	; (801399c <HAL_I2C_MspInit+0x144>)
 80138e8:	f004 fb50 	bl	8017f8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80138ec:	4b2a      	ldr	r3, [pc, #168]	; (8013998 <HAL_I2C_MspInit+0x140>)
 80138ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138f0:	4a29      	ldr	r2, [pc, #164]	; (8013998 <HAL_I2C_MspInit+0x140>)
 80138f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80138f6:	6413      	str	r3, [r2, #64]	; 0x40
 80138f8:	4b27      	ldr	r3, [pc, #156]	; (8013998 <HAL_I2C_MspInit+0x140>)
 80138fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013900:	617b      	str	r3, [r7, #20]
 8013902:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8013904:	e041      	b.n	801398a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	4a25      	ldr	r2, [pc, #148]	; (80139a0 <HAL_I2C_MspInit+0x148>)
 801390c:	4293      	cmp	r3, r2
 801390e:	d13c      	bne.n	801398a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8013910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013914:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8013916:	2300      	movs	r3, #0
 8013918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801391c:	f107 031c 	add.w	r3, r7, #28
 8013920:	4618      	mov	r0, r3
 8013922:	f006 f831 	bl	8019988 <HAL_RCCEx_PeriphCLKConfig>
 8013926:	4603      	mov	r3, r0
 8013928:	2b00      	cmp	r3, #0
 801392a:	d001      	beq.n	8013930 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 801392c:	f000 fa96 	bl	8013e5c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8013930:	4b19      	ldr	r3, [pc, #100]	; (8013998 <HAL_I2C_MspInit+0x140>)
 8013932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013934:	4a18      	ldr	r2, [pc, #96]	; (8013998 <HAL_I2C_MspInit+0x140>)
 8013936:	f043 0320 	orr.w	r3, r3, #32
 801393a:	6313      	str	r3, [r2, #48]	; 0x30
 801393c:	4b16      	ldr	r3, [pc, #88]	; (8013998 <HAL_I2C_MspInit+0x140>)
 801393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013940:	f003 0320 	and.w	r3, r3, #32
 8013944:	613b      	str	r3, [r7, #16]
 8013946:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 8013948:	2303      	movs	r3, #3
 801394a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801394e:	2312      	movs	r3, #18
 8013950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013954:	2300      	movs	r3, #0
 8013956:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801395a:	2303      	movs	r3, #3
 801395c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8013960:	2304      	movs	r3, #4
 8013962:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013966:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801396a:	4619      	mov	r1, r3
 801396c:	480d      	ldr	r0, [pc, #52]	; (80139a4 <HAL_I2C_MspInit+0x14c>)
 801396e:	f004 fb0d 	bl	8017f8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8013972:	4b09      	ldr	r3, [pc, #36]	; (8013998 <HAL_I2C_MspInit+0x140>)
 8013974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013976:	4a08      	ldr	r2, [pc, #32]	; (8013998 <HAL_I2C_MspInit+0x140>)
 8013978:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801397c:	6413      	str	r3, [r2, #64]	; 0x40
 801397e:	4b06      	ldr	r3, [pc, #24]	; (8013998 <HAL_I2C_MspInit+0x140>)
 8013980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013986:	60fb      	str	r3, [r7, #12]
 8013988:	68fb      	ldr	r3, [r7, #12]
}
 801398a:	bf00      	nop
 801398c:	37c0      	adds	r7, #192	; 0xc0
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}
 8013992:	bf00      	nop
 8013994:	40005400 	.word	0x40005400
 8013998:	40023800 	.word	0x40023800
 801399c:	40020400 	.word	0x40020400
 80139a0:	40005800 	.word	0x40005800
 80139a4:	40021400 	.word	0x40021400

080139a8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80139ac:	4b0b      	ldr	r3, [pc, #44]	; (80139dc <MX_IWDG_Init+0x34>)
 80139ae:	4a0c      	ldr	r2, [pc, #48]	; (80139e0 <MX_IWDG_Init+0x38>)
 80139b0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80139b2:	4b0a      	ldr	r3, [pc, #40]	; (80139dc <MX_IWDG_Init+0x34>)
 80139b4:	2203      	movs	r2, #3
 80139b6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80139b8:	4b08      	ldr	r3, [pc, #32]	; (80139dc <MX_IWDG_Init+0x34>)
 80139ba:	f640 72ff 	movw	r2, #4095	; 0xfff
 80139be:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 80139c0:	4b06      	ldr	r3, [pc, #24]	; (80139dc <MX_IWDG_Init+0x34>)
 80139c2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80139c6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80139c8:	4804      	ldr	r0, [pc, #16]	; (80139dc <MX_IWDG_Init+0x34>)
 80139ca:	f005 faea 	bl	8018fa2 <HAL_IWDG_Init>
 80139ce:	4603      	mov	r3, r0
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d001      	beq.n	80139d8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80139d4:	f000 fa42 	bl	8013e5c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80139d8:	bf00      	nop
 80139da:	bd80      	pop	{r7, pc}
 80139dc:	20009d10 	.word	0x20009d10
 80139e0:	40003000 	.word	0x40003000

080139e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80139e4:	b480      	push	{r7}
 80139e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80139e8:	f3bf 8f4f 	dsb	sy
}
 80139ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80139ee:	f3bf 8f6f 	isb	sy
}
 80139f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80139f4:	4b0d      	ldr	r3, [pc, #52]	; (8013a2c <SCB_EnableICache+0x48>)
 80139f6:	2200      	movs	r2, #0
 80139f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80139fc:	f3bf 8f4f 	dsb	sy
}
 8013a00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013a02:	f3bf 8f6f 	isb	sy
}
 8013a06:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8013a08:	4b08      	ldr	r3, [pc, #32]	; (8013a2c <SCB_EnableICache+0x48>)
 8013a0a:	695b      	ldr	r3, [r3, #20]
 8013a0c:	4a07      	ldr	r2, [pc, #28]	; (8013a2c <SCB_EnableICache+0x48>)
 8013a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013a12:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8013a14:	f3bf 8f4f 	dsb	sy
}
 8013a18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013a1a:	f3bf 8f6f 	isb	sy
}
 8013a1e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8013a20:	bf00      	nop
 8013a22:	46bd      	mov	sp, r7
 8013a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a28:	4770      	bx	lr
 8013a2a:	bf00      	nop
 8013a2c:	e000ed00 	.word	0xe000ed00

08013a30 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8013a30:	b480      	push	{r7}
 8013a32:	b085      	sub	sp, #20
 8013a34:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8013a36:	4b1f      	ldr	r3, [pc, #124]	; (8013ab4 <SCB_EnableDCache+0x84>)
 8013a38:	2200      	movs	r2, #0
 8013a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8013a3e:	f3bf 8f4f 	dsb	sy
}
 8013a42:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8013a44:	4b1b      	ldr	r3, [pc, #108]	; (8013ab4 <SCB_EnableDCache+0x84>)
 8013a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a4a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	0b5b      	lsrs	r3, r3, #13
 8013a50:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013a54:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	08db      	lsrs	r3, r3, #3
 8013a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013a5e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	015a      	lsls	r2, r3, #5
 8013a64:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8013a68:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8013a6a:	68ba      	ldr	r2, [r7, #8]
 8013a6c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013a6e:	4911      	ldr	r1, [pc, #68]	; (8013ab4 <SCB_EnableDCache+0x84>)
 8013a70:	4313      	orrs	r3, r2
 8013a72:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	1e5a      	subs	r2, r3, #1
 8013a7a:	60ba      	str	r2, [r7, #8]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d1ef      	bne.n	8013a60 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	1e5a      	subs	r2, r3, #1
 8013a84:	60fa      	str	r2, [r7, #12]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d1e5      	bne.n	8013a56 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8013a8a:	f3bf 8f4f 	dsb	sy
}
 8013a8e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8013a90:	4b08      	ldr	r3, [pc, #32]	; (8013ab4 <SCB_EnableDCache+0x84>)
 8013a92:	695b      	ldr	r3, [r3, #20]
 8013a94:	4a07      	ldr	r2, [pc, #28]	; (8013ab4 <SCB_EnableDCache+0x84>)
 8013a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013a9a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8013a9c:	f3bf 8f4f 	dsb	sy
}
 8013aa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013aa2:	f3bf 8f6f 	isb	sy
}
 8013aa6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8013aa8:	bf00      	nop
 8013aaa:	3714      	adds	r7, #20
 8013aac:	46bd      	mov	sp, r7
 8013aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab2:	4770      	bx	lr
 8013ab4:	e000ed00 	.word	0xe000ed00

08013ab8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b082      	sub	sp, #8
 8013abc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 8013abe:	2300      	movs	r3, #0
 8013ac0:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8013ac2:	f000 f99f 	bl	8013e04 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8013ac6:	f7ff ff8d 	bl	80139e4 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8013aca:	f7ff ffb1 	bl	8013a30 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8013ace:	f001 fef1 	bl	80158b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8013ad2:	f000 f8d1 	bl	8013c78 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 8013ad6:	f7f5 fc29 	bl	800932c <reset_cause_get>
 8013ada:	4603      	mov	r3, r0
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7f5 fc77 	bl	80093d0 <reset_cause_get_name>
 8013ae2:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 8013ae4:	f7ff fc08 	bl	80132f8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8013ae8:	f001 f90a 	bl	8014d00 <MX_USART1_UART_Init>
	Get_Slot();
 8013aec:	f7ec ffee 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 8013af0:	f7fb fde0 	bl	800f6b4 <MX_CAN2_Init>
	MX_CAN3_Init();
 8013af4:	f7fb fe56 	bl	800f7a4 <MX_CAN3_Init>
	MX_I2C1_Init();
 8013af8:	f7ff fe2e 	bl	8013758 <MX_I2C1_Init>
	MX_I2C2_Init();
 8013afc:	f7ff fe6c 	bl	80137d8 <MX_I2C2_Init>
	MX_SPI1_Init();
 8013b00:	f000 fa10 	bl	8013f24 <MX_SPI1_Init>
	Get_Config();
 8013b04:	f000 fd7a 	bl	80145fc <Get_Config>
	MX_RNG_Init();
 8013b08:	f000 f9ae 	bl	8013e68 <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8013b0c:	2208      	movs	r2, #8
 8013b0e:	2100      	movs	r1, #0
 8013b10:	484c      	ldr	r0, [pc, #304]	; (8013c44 <main+0x18c>)
 8013b12:	f00e fe45 	bl	80227a0 <memset>
	HAL_Delay(250);
 8013b16:	20fa      	movs	r0, #250	; 0xfa
 8013b18:	f001 ff38 	bl	801598c <HAL_Delay>
	printf("\b\b\b\b\b\b\b\b\b\b");
 8013b1c:	484a      	ldr	r0, [pc, #296]	; (8013c48 <main+0x190>)
 8013b1e:	f00e ff27 	bl	8022970 <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 8013b22:	484a      	ldr	r0, [pc, #296]	; (8013c4c <main+0x194>)
 8013b24:	f00e ffc0 	bl	8022aa8 <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 8013b28:	6879      	ldr	r1, [r7, #4]
 8013b2a:	4849      	ldr	r0, [pc, #292]	; (8013c50 <main+0x198>)
 8013b2c:	f00e ff20 	bl	8022970 <iprintf>
	Get_Build_Details();
 8013b30:	f000 f90c 	bl	8013d4c <Get_Build_Details>
	switch(EI_data.ProtocolType)
 8013b34:	4b47      	ldr	r3, [pc, #284]	; (8013c54 <main+0x19c>)
 8013b36:	781b      	ldrb	r3, [r3, #0]
 8013b38:	3b01      	subs	r3, #1
 8013b3a:	2b03      	cmp	r3, #3
 8013b3c:	d85f      	bhi.n	8013bfe <main+0x146>
 8013b3e:	a201      	add	r2, pc, #4	; (adr r2, 8013b44 <main+0x8c>)
 8013b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b44:	08013b55 	.word	0x08013b55
 8013b48:	08013ba7 	.word	0x08013ba7
 8013b4c:	08013bcf 	.word	0x08013bcf
 8013b50:	08013c07 	.word	0x08013c07
	{
	case HITACHI:
		printf("Protocol Selected is HITACHI\n");
 8013b54:	4840      	ldr	r0, [pc, #256]	; (8013c58 <main+0x1a0>)
 8013b56:	f00e ffa7 	bl	8022aa8 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8013b5a:	4840      	ldr	r0, [pc, #256]	; (8013c5c <main+0x1a4>)
 8013b5c:	f00e ffa4 	bl	8022aa8 <puts>
		MX_LWIP_Init();
 8013b60:	f009 f832 	bl	801cbc8 <MX_LWIP_Init>
		udpServer_init();
 8013b64:	f7fb f98c 	bl	800ee80 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8013b68:	483d      	ldr	r0, [pc, #244]	; (8013c60 <main+0x1a8>)
 8013b6a:	f00e ff9d 	bl	8022aa8 <puts>
		if((EI_data.Hitachi_st.EnableSerialPort == 1) && (EI_data.Hitachi_st.BaudRate > 0) )
 8013b6e:	4b39      	ldr	r3, [pc, #228]	; (8013c54 <main+0x19c>)
 8013b70:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013b74:	2b01      	cmp	r3, #1
 8013b76:	d111      	bne.n	8013b9c <main+0xe4>
 8013b78:	4b36      	ldr	r3, [pc, #216]	; (8013c54 <main+0x19c>)
 8013b7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d00c      	beq.n	8013b9c <main+0xe4>
		{
			printf("Initializing UART with Baudrate:%lu\n",EI_data.Hitachi_st.BaudRate);
 8013b82:	4b34      	ldr	r3, [pc, #208]	; (8013c54 <main+0x19c>)
 8013b84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013b88:	4619      	mov	r1, r3
 8013b8a:	4836      	ldr	r0, [pc, #216]	; (8013c64 <main+0x1ac>)
 8013b8c:	f00e fef0 	bl	8022970 <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 8013b90:	4b30      	ldr	r3, [pc, #192]	; (8013c54 <main+0x19c>)
 8013b92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013b96:	4618      	mov	r0, r3
 8013b98:	f001 fa60 	bl	801505c <UART4_Init>
		}
		print_self_Details();
 8013b9c:	f7f4 fe28 	bl	80087f0 <print_self_Details>
		Update_HitachiCommands();
 8013ba0:	f7ec fe80 	bl	80008a4 <Update_HitachiCommands>
		break;
 8013ba4:	e030      	b.n	8013c08 <main+0x150>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 8013ba6:	4830      	ldr	r0, [pc, #192]	; (8013c68 <main+0x1b0>)
 8013ba8:	f00e ff7e 	bl	8022aa8 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8013bac:	482b      	ldr	r0, [pc, #172]	; (8013c5c <main+0x1a4>)
 8013bae:	f00e ff7b 	bl	8022aa8 <puts>
		MX_LWIP_Init();
 8013bb2:	f009 f809 	bl	801cbc8 <MX_LWIP_Init>
		udpServer_init();
 8013bb6:	f7fb f963 	bl	800ee80 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8013bba:	4829      	ldr	r0, [pc, #164]	; (8013c60 <main+0x1a8>)
 8013bbc:	f00e ff74 	bl	8022aa8 <puts>
		print_self_DetailsSiemens();
 8013bc0:	f7fb f844 	bl	800ec4c <print_self_DetailsSiemens>
		Update_SiemensCommands();
 8013bc4:	f7f9 fd4e 	bl	800d664 <Update_SiemensCommands>
		UpdateSIGNALSNames();
 8013bc8:	f7fa fb62 	bl	800e290 <UpdateSIGNALSNames>
		break;
 8013bcc:	e01c      	b.n	8013c08 <main+0x150>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 8013bce:	4827      	ldr	r0, [pc, #156]	; (8013c6c <main+0x1b4>)
 8013bd0:	f00e ff6a 	bl	8022aa8 <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 8013bd4:	4b1f      	ldr	r3, [pc, #124]	; (8013c54 <main+0x19c>)
 8013bd6:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d006      	beq.n	8013bec <main+0x134>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 8013bde:	4b1d      	ldr	r3, [pc, #116]	; (8013c54 <main+0x19c>)
 8013be0:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8013be4:	4618      	mov	r0, r3
 8013be6:	f001 fa39 	bl	801505c <UART4_Init>
 8013bea:	e003      	b.n	8013bf4 <main+0x13c>
		}
		else
		{
			UART4_Init(115200);
 8013bec:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8013bf0:	f001 fa34 	bl	801505c <UART4_Init>
		}
		Update_MedhaCommands();
 8013bf4:	f7f7 f80e 	bl	800ac14 <Update_MedhaCommands>
		Print_Medha_Self_Details();
 8013bf8:	f7f6 fdcc 	bl	800a794 <Print_Medha_Self_Details>
		break;
 8013bfc:	e004      	b.n	8013c08 <main+0x150>

	case KYOSAN:
		break;

	default:
		printf("Please Select Protocol Type\n");
 8013bfe:	481c      	ldr	r0, [pc, #112]	; (8013c70 <main+0x1b8>)
 8013c00:	f00e ff52 	bl	8022aa8 <puts>
		while(1);
 8013c04:	e7fe      	b.n	8013c04 <main+0x14c>
		break;
 8013c06:	bf00      	nop
	}


	printf("Initialization Success\n");
 8013c08:	481a      	ldr	r0, [pc, #104]	; (8013c74 <main+0x1bc>)
 8013c0a:	f00e ff4d 	bl	8022aa8 <puts>
	//	printf("start Ticks:%lu",Ticks);
	MX_IWDG_Init();
 8013c0e:	f7ff fecb 	bl	80139a8 <MX_IWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 8013c12:	4b10      	ldr	r3, [pc, #64]	; (8013c54 <main+0x19c>)
 8013c14:	781b      	ldrb	r3, [r3, #0]
 8013c16:	2b03      	cmp	r3, #3
 8013c18:	d00c      	beq.n	8013c34 <main+0x17c>
 8013c1a:	2b03      	cmp	r3, #3
 8013c1c:	dc0d      	bgt.n	8013c3a <main+0x182>
 8013c1e:	2b01      	cmp	r3, #1
 8013c20:	d002      	beq.n	8013c28 <main+0x170>
 8013c22:	2b02      	cmp	r3, #2
 8013c24:	d003      	beq.n	8013c2e <main+0x176>
 8013c26:	e008      	b.n	8013c3a <main+0x182>
		{
		case HITACHI:
			Process_HitachiEI();
 8013c28:	f7f5 fab2 	bl	8009190 <Process_HitachiEI>
			break;
 8013c2c:	e009      	b.n	8013c42 <main+0x18a>

		case SIEMENS:
			Process_SiemensEI();
 8013c2e:	f7f7 fd17 	bl	800b660 <Process_SiemensEI>
			break;
 8013c32:	e006      	b.n	8013c42 <main+0x18a>

		case MEDHA:
			Process_Medha_EI();
 8013c34:	f7f5 fc1c 	bl	8009470 <Process_Medha_EI>
			break;
 8013c38:	e003      	b.n	8013c42 <main+0x18a>

		default:
			printf("Please Select Protocol Type\n");
 8013c3a:	480d      	ldr	r0, [pc, #52]	; (8013c70 <main+0x1b8>)
 8013c3c:	f00e ff34 	bl	8022aa8 <puts>
			while(1);
 8013c40:	e7fe      	b.n	8013c40 <main+0x188>
		switch(EI_data.ProtocolType)
 8013c42:	e7e6      	b.n	8013c12 <main+0x15a>
 8013c44:	2000195c 	.word	0x2000195c
 8013c48:	080273b4 	.word	0x080273b4
 8013c4c:	080273c0 	.word	0x080273c0
 8013c50:	08027410 	.word	0x08027410
 8013c54:	20000304 	.word	0x20000304
 8013c58:	0802742c 	.word	0x0802742c
 8013c5c:	0802744c 	.word	0x0802744c
 8013c60:	08027474 	.word	0x08027474
 8013c64:	08027490 	.word	0x08027490
 8013c68:	080274b8 	.word	0x080274b8
 8013c6c:	080274d8 	.word	0x080274d8
 8013c70:	080274f4 	.word	0x080274f4
 8013c74:	08027510 	.word	0x08027510

08013c78 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b094      	sub	sp, #80	; 0x50
 8013c7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013c7e:	f107 031c 	add.w	r3, r7, #28
 8013c82:	2234      	movs	r2, #52	; 0x34
 8013c84:	2100      	movs	r1, #0
 8013c86:	4618      	mov	r0, r3
 8013c88:	f00e fd8a 	bl	80227a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013c8c:	f107 0308 	add.w	r3, r7, #8
 8013c90:	2200      	movs	r2, #0
 8013c92:	601a      	str	r2, [r3, #0]
 8013c94:	605a      	str	r2, [r3, #4]
 8013c96:	609a      	str	r2, [r3, #8]
 8013c98:	60da      	str	r2, [r3, #12]
 8013c9a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8013c9c:	4b29      	ldr	r3, [pc, #164]	; (8013d44 <SystemClock_Config+0xcc>)
 8013c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ca0:	4a28      	ldr	r2, [pc, #160]	; (8013d44 <SystemClock_Config+0xcc>)
 8013ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8013ca8:	4b26      	ldr	r3, [pc, #152]	; (8013d44 <SystemClock_Config+0xcc>)
 8013caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013cb0:	607b      	str	r3, [r7, #4]
 8013cb2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8013cb4:	4b24      	ldr	r3, [pc, #144]	; (8013d48 <SystemClock_Config+0xd0>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	4a23      	ldr	r2, [pc, #140]	; (8013d48 <SystemClock_Config+0xd0>)
 8013cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013cbe:	6013      	str	r3, [r2, #0]
 8013cc0:	4b21      	ldr	r3, [pc, #132]	; (8013d48 <SystemClock_Config+0xd0>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013cc8:	603b      	str	r3, [r7, #0]
 8013cca:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8013ccc:	2309      	movs	r3, #9
 8013cce:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8013cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013cd4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013cda:	2302      	movs	r3, #2
 8013cdc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013cde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013ce2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 8013ce4:	2306      	movs	r3, #6
 8013ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8013ce8:	23b4      	movs	r3, #180	; 0xb4
 8013cea:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013cec:	2302      	movs	r3, #2
 8013cee:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8013cf0:	2308      	movs	r3, #8
 8013cf2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8013cf4:	2302      	movs	r3, #2
 8013cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013cf8:	f107 031c 	add.w	r3, r7, #28
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f005 f9af 	bl	8019060 <HAL_RCC_OscConfig>
 8013d02:	4603      	mov	r3, r0
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d001      	beq.n	8013d0c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8013d08:	f000 f8a8 	bl	8013e5c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013d0c:	230f      	movs	r3, #15
 8013d0e:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013d10:	2302      	movs	r3, #2
 8013d12:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013d14:	2300      	movs	r3, #0
 8013d16:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013d18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013d1c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013d22:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013d24:	f107 0308 	add.w	r3, r7, #8
 8013d28:	2105      	movs	r1, #5
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f005 fc46 	bl	80195bc <HAL_RCC_ClockConfig>
 8013d30:	4603      	mov	r3, r0
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d001      	beq.n	8013d3a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8013d36:	f000 f891 	bl	8013e5c <Error_Handler>
	}
}
 8013d3a:	bf00      	nop
 8013d3c:	3750      	adds	r7, #80	; 0x50
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
 8013d42:	bf00      	nop
 8013d44:	40023800 	.word	0x40023800
 8013d48:	40007000 	.word	0x40007000

08013d4c <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b08e      	sub	sp, #56	; 0x38
 8013d50:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 8013d52:	2300      	movs	r3, #0
 8013d54:	607b      	str	r3, [r7, #4]
 8013d56:	f107 0308 	add.w	r3, r7, #8
 8013d5a:	222e      	movs	r2, #46	; 0x2e
 8013d5c:	2100      	movs	r1, #0
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f00e fd1e 	bl	80227a0 <memset>
	printf("\n_____________________________________________\n");
 8013d64:	481d      	ldr	r0, [pc, #116]	; (8013ddc <Get_Build_Details+0x90>)
 8013d66:	f00e fe9f 	bl	8022aa8 <puts>
	printf("Build Date:%s\n",__DATE__);
 8013d6a:	491d      	ldr	r1, [pc, #116]	; (8013de0 <Get_Build_Details+0x94>)
 8013d6c:	481d      	ldr	r0, [pc, #116]	; (8013de4 <Get_Build_Details+0x98>)
 8013d6e:	f00e fdff 	bl	8022970 <iprintf>
	printf("Build Time:%s\n",__TIME__);
 8013d72:	491d      	ldr	r1, [pc, #116]	; (8013de8 <Get_Build_Details+0x9c>)
 8013d74:	481d      	ldr	r0, [pc, #116]	; (8013dec <Get_Build_Details+0xa0>)
 8013d76:	f00e fdfb 	bl	8022970 <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 8013d7a:	1d3b      	adds	r3, r7, #4
 8013d7c:	4a18      	ldr	r2, [pc, #96]	; (8013de0 <Get_Build_Details+0x94>)
 8013d7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013d80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 8013d84:	1d3b      	adds	r3, r7, #4
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7ec fa64 	bl	8000254 <strlen>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	461a      	mov	r2, r3
 8013d90:	1d3b      	adds	r3, r7, #4
 8013d92:	4413      	add	r3, r2
 8013d94:	4914      	ldr	r1, [pc, #80]	; (8013de8 <Get_Build_Details+0x9c>)
 8013d96:	461a      	mov	r2, r3
 8013d98:	460b      	mov	r3, r1
 8013d9a:	cb03      	ldmia	r3!, {r0, r1}
 8013d9c:	6010      	str	r0, [r2, #0]
 8013d9e:	6051      	str	r1, [r2, #4]
 8013da0:	781b      	ldrb	r3, [r3, #0]
 8013da2:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 8013da4:	1d3b      	adds	r3, r7, #4
 8013da6:	4618      	mov	r0, r3
 8013da8:	f7ec fa54 	bl	8000254 <strlen>
 8013dac:	4603      	mov	r3, r0
 8013dae:	b21a      	sxth	r2, r3
 8013db0:	1d3b      	adds	r3, r7, #4
 8013db2:	4619      	mov	r1, r3
 8013db4:	2000      	movs	r0, #0
 8013db6:	f7ff f94b 	bl	8013050 <GetCRC16>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	461a      	mov	r2, r3
 8013dbe:	4b0c      	ldr	r3, [pc, #48]	; (8013df0 <Get_Build_Details+0xa4>)
 8013dc0:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 8013dc2:	4a0c      	ldr	r2, [pc, #48]	; (8013df4 <Get_Build_Details+0xa8>)
 8013dc4:	490c      	ldr	r1, [pc, #48]	; (8013df8 <Get_Build_Details+0xac>)
 8013dc6:	480d      	ldr	r0, [pc, #52]	; (8013dfc <Get_Build_Details+0xb0>)
 8013dc8:	f00e fdd2 	bl	8022970 <iprintf>
	printf("_____________________________________________\n");
 8013dcc:	480c      	ldr	r0, [pc, #48]	; (8013e00 <Get_Build_Details+0xb4>)
 8013dce:	f00e fe6b 	bl	8022aa8 <puts>

}
 8013dd2:	bf00      	nop
 8013dd4:	3738      	adds	r7, #56	; 0x38
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
 8013dda:	bf00      	nop
 8013ddc:	08027528 	.word	0x08027528
 8013de0:	08027558 	.word	0x08027558
 8013de4:	08027564 	.word	0x08027564
 8013de8:	08027574 	.word	0x08027574
 8013dec:	08027580 	.word	0x08027580
 8013df0:	20009d44 	.word	0x20009d44
 8013df4:	08027590 	.word	0x08027590
 8013df8:	08027598 	.word	0x08027598
 8013dfc:	080275b0 	.word	0x080275b0
 8013e00:	080275cc 	.word	0x080275cc

08013e04 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b084      	sub	sp, #16
 8013e08:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8013e0a:	463b      	mov	r3, r7
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	601a      	str	r2, [r3, #0]
 8013e10:	605a      	str	r2, [r3, #4]
 8013e12:	609a      	str	r2, [r3, #8]
 8013e14:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8013e16:	f002 fdc5 	bl	80169a4 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8013e1a:	2301      	movs	r3, #1
 8013e1c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8013e22:	2300      	movs	r3, #0
 8013e24:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8013e26:	231f      	movs	r3, #31
 8013e28:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8013e2a:	2387      	movs	r3, #135	; 0x87
 8013e2c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8013e32:	2300      	movs	r3, #0
 8013e34:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8013e36:	2301      	movs	r3, #1
 8013e38:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8013e3a:	2301      	movs	r3, #1
 8013e3c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8013e3e:	2300      	movs	r3, #0
 8013e40:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8013e42:	2300      	movs	r3, #0
 8013e44:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8013e46:	463b      	mov	r3, r7
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f002 fde3 	bl	8016a14 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8013e4e:	2004      	movs	r0, #4
 8013e50:	f002 fdc0 	bl	80169d4 <HAL_MPU_Enable>

}
 8013e54:	bf00      	nop
 8013e56:	3710      	adds	r7, #16
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}

08013e5c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8013e60:	b672      	cpsid	i
}
 8013e62:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8013e64:	e7fe      	b.n	8013e64 <Error_Handler+0x8>
	...

08013e68 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8013e6c:	4b06      	ldr	r3, [pc, #24]	; (8013e88 <MX_RNG_Init+0x20>)
 8013e6e:	4a07      	ldr	r2, [pc, #28]	; (8013e8c <MX_RNG_Init+0x24>)
 8013e70:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8013e72:	4805      	ldr	r0, [pc, #20]	; (8013e88 <MX_RNG_Init+0x20>)
 8013e74:	f006 f9b0 	bl	801a1d8 <HAL_RNG_Init>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d001      	beq.n	8013e82 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8013e7e:	f7ff ffed 	bl	8013e5c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8013e82:	bf00      	nop
 8013e84:	bd80      	pop	{r7, pc}
 8013e86:	bf00      	nop
 8013e88:	20009d20 	.word	0x20009d20
 8013e8c:	50060800 	.word	0x50060800

08013e90 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b0a8      	sub	sp, #160	; 0xa0
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013e98:	f107 0310 	add.w	r3, r7, #16
 8013e9c:	2290      	movs	r2, #144	; 0x90
 8013e9e:	2100      	movs	r1, #0
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f00e fc7d 	bl	80227a0 <memset>
  if(rngHandle->Instance==RNG)
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	4a11      	ldr	r2, [pc, #68]	; (8013ef0 <HAL_RNG_MspInit+0x60>)
 8013eac:	4293      	cmp	r3, r2
 8013eae:	d11b      	bne.n	8013ee8 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8013eb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013eb4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013ebc:	f107 0310 	add.w	r3, r7, #16
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f005 fd61 	bl	8019988 <HAL_RCCEx_PeriphCLKConfig>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d001      	beq.n	8013ed0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8013ecc:	f7ff ffc6 	bl	8013e5c <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8013ed0:	4b08      	ldr	r3, [pc, #32]	; (8013ef4 <HAL_RNG_MspInit+0x64>)
 8013ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ed4:	4a07      	ldr	r2, [pc, #28]	; (8013ef4 <HAL_RNG_MspInit+0x64>)
 8013ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013eda:	6353      	str	r3, [r2, #52]	; 0x34
 8013edc:	4b05      	ldr	r3, [pc, #20]	; (8013ef4 <HAL_RNG_MspInit+0x64>)
 8013ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ee4:	60fb      	str	r3, [r7, #12]
 8013ee6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8013ee8:	bf00      	nop
 8013eea:	37a0      	adds	r7, #160	; 0xa0
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}
 8013ef0:	50060800 	.word	0x50060800
 8013ef4:	40023800 	.word	0x40023800

08013ef8 <__NVIC_SystemReset>:
{
 8013ef8:	b480      	push	{r7}
 8013efa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8013efc:	f3bf 8f4f 	dsb	sy
}
 8013f00:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8013f02:	4b06      	ldr	r3, [pc, #24]	; (8013f1c <__NVIC_SystemReset+0x24>)
 8013f04:	68db      	ldr	r3, [r3, #12]
 8013f06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8013f0a:	4904      	ldr	r1, [pc, #16]	; (8013f1c <__NVIC_SystemReset+0x24>)
 8013f0c:	4b04      	ldr	r3, [pc, #16]	; (8013f20 <__NVIC_SystemReset+0x28>)
 8013f0e:	4313      	orrs	r3, r2
 8013f10:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8013f12:	f3bf 8f4f 	dsb	sy
}
 8013f16:	bf00      	nop
    __NOP();
 8013f18:	bf00      	nop
 8013f1a:	e7fd      	b.n	8013f18 <__NVIC_SystemReset+0x20>
 8013f1c:	e000ed00 	.word	0xe000ed00
 8013f20:	05fa0004 	.word	0x05fa0004

08013f24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8013f28:	4b1b      	ldr	r3, [pc, #108]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f2a:	4a1c      	ldr	r2, [pc, #112]	; (8013f9c <MX_SPI1_Init+0x78>)
 8013f2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8013f2e:	4b1a      	ldr	r3, [pc, #104]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8013f34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8013f36:	4b18      	ldr	r3, [pc, #96]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f38:	2200      	movs	r2, #0
 8013f3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8013f3c:	4b16      	ldr	r3, [pc, #88]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8013f42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8013f44:	4b14      	ldr	r3, [pc, #80]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f46:	2200      	movs	r2, #0
 8013f48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8013f4a:	4b13      	ldr	r3, [pc, #76]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8013f50:	4b11      	ldr	r3, [pc, #68]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8013f58:	4b0f      	ldr	r3, [pc, #60]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f5a:	2208      	movs	r2, #8
 8013f5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8013f5e:	4b0e      	ldr	r3, [pc, #56]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f60:	2200      	movs	r2, #0
 8013f62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8013f64:	4b0c      	ldr	r3, [pc, #48]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f66:	2200      	movs	r2, #0
 8013f68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013f6a:	4b0b      	ldr	r3, [pc, #44]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8013f70:	4b09      	ldr	r3, [pc, #36]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f72:	2207      	movs	r2, #7
 8013f74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8013f76:	4b08      	ldr	r3, [pc, #32]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f78:	2200      	movs	r2, #0
 8013f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8013f7c:	4b06      	ldr	r3, [pc, #24]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f7e:	2208      	movs	r2, #8
 8013f80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8013f82:	4805      	ldr	r0, [pc, #20]	; (8013f98 <MX_SPI1_Init+0x74>)
 8013f84:	f006 f9bd 	bl	801a302 <HAL_SPI_Init>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d001      	beq.n	8013f92 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8013f8e:	f7ff ff65 	bl	8013e5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8013f92:	bf00      	nop
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	20009d48 	.word	0x20009d48
 8013f9c:	40013000 	.word	0x40013000

08013fa0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b08c      	sub	sp, #48	; 0x30
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013fa8:	f107 031c 	add.w	r3, r7, #28
 8013fac:	2200      	movs	r2, #0
 8013fae:	601a      	str	r2, [r3, #0]
 8013fb0:	605a      	str	r2, [r3, #4]
 8013fb2:	609a      	str	r2, [r3, #8]
 8013fb4:	60da      	str	r2, [r3, #12]
 8013fb6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	4a33      	ldr	r2, [pc, #204]	; (801408c <HAL_SPI_MspInit+0xec>)
 8013fbe:	4293      	cmp	r3, r2
 8013fc0:	d160      	bne.n	8014084 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8013fc2:	4b33      	ldr	r3, [pc, #204]	; (8014090 <HAL_SPI_MspInit+0xf0>)
 8013fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fc6:	4a32      	ldr	r2, [pc, #200]	; (8014090 <HAL_SPI_MspInit+0xf0>)
 8013fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8013fce:	4b30      	ldr	r3, [pc, #192]	; (8014090 <HAL_SPI_MspInit+0xf0>)
 8013fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013fd6:	61bb      	str	r3, [r7, #24]
 8013fd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013fda:	4b2d      	ldr	r3, [pc, #180]	; (8014090 <HAL_SPI_MspInit+0xf0>)
 8013fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fde:	4a2c      	ldr	r2, [pc, #176]	; (8014090 <HAL_SPI_MspInit+0xf0>)
 8013fe0:	f043 0301 	orr.w	r3, r3, #1
 8013fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8013fe6:	4b2a      	ldr	r3, [pc, #168]	; (8014090 <HAL_SPI_MspInit+0xf0>)
 8013fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fea:	f003 0301 	and.w	r3, r3, #1
 8013fee:	617b      	str	r3, [r7, #20]
 8013ff0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013ff2:	4b27      	ldr	r3, [pc, #156]	; (8014090 <HAL_SPI_MspInit+0xf0>)
 8013ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ff6:	4a26      	ldr	r2, [pc, #152]	; (8014090 <HAL_SPI_MspInit+0xf0>)
 8013ff8:	f043 0308 	orr.w	r3, r3, #8
 8013ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8013ffe:	4b24      	ldr	r3, [pc, #144]	; (8014090 <HAL_SPI_MspInit+0xf0>)
 8014000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014002:	f003 0308 	and.w	r3, r3, #8
 8014006:	613b      	str	r3, [r7, #16]
 8014008:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801400a:	4b21      	ldr	r3, [pc, #132]	; (8014090 <HAL_SPI_MspInit+0xf0>)
 801400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801400e:	4a20      	ldr	r2, [pc, #128]	; (8014090 <HAL_SPI_MspInit+0xf0>)
 8014010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014014:	6313      	str	r3, [r2, #48]	; 0x30
 8014016:	4b1e      	ldr	r3, [pc, #120]	; (8014090 <HAL_SPI_MspInit+0xf0>)
 8014018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801401e:	60fb      	str	r3, [r7, #12]
 8014020:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8014022:	2320      	movs	r3, #32
 8014024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014026:	2302      	movs	r3, #2
 8014028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801402a:	2300      	movs	r3, #0
 801402c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801402e:	2303      	movs	r3, #3
 8014030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8014032:	2305      	movs	r3, #5
 8014034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8014036:	f107 031c 	add.w	r3, r7, #28
 801403a:	4619      	mov	r1, r3
 801403c:	4815      	ldr	r0, [pc, #84]	; (8014094 <HAL_SPI_MspInit+0xf4>)
 801403e:	f003 ffa5 	bl	8017f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8014042:	2380      	movs	r3, #128	; 0x80
 8014044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014046:	2302      	movs	r3, #2
 8014048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801404a:	2300      	movs	r3, #0
 801404c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801404e:	2303      	movs	r3, #3
 8014050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8014052:	2305      	movs	r3, #5
 8014054:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8014056:	f107 031c 	add.w	r3, r7, #28
 801405a:	4619      	mov	r1, r3
 801405c:	480e      	ldr	r0, [pc, #56]	; (8014098 <HAL_SPI_MspInit+0xf8>)
 801405e:	f003 ff95 	bl	8017f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8014062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014068:	2302      	movs	r3, #2
 801406a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801406c:	2300      	movs	r3, #0
 801406e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014070:	2303      	movs	r3, #3
 8014072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8014074:	2305      	movs	r3, #5
 8014076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8014078:	f107 031c 	add.w	r3, r7, #28
 801407c:	4619      	mov	r1, r3
 801407e:	4807      	ldr	r0, [pc, #28]	; (801409c <HAL_SPI_MspInit+0xfc>)
 8014080:	f003 ff84 	bl	8017f8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8014084:	bf00      	nop
 8014086:	3730      	adds	r7, #48	; 0x30
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}
 801408c:	40013000 	.word	0x40013000
 8014090:	40023800 	.word	0x40023800
 8014094:	40020000 	.word	0x40020000
 8014098:	40020c00 	.word	0x40020c00
 801409c:	40021800 	.word	0x40021800

080140a0 <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b086      	sub	sp, #24
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	60b9      	str	r1, [r7, #8]
 80140a8:	607b      	str	r3, [r7, #4]
 80140aa:	4603      	mov	r3, r0
 80140ac:	73fb      	strb	r3, [r7, #15]
 80140ae:	4613      	mov	r3, r2
 80140b0:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 80140b2:	2300      	movs	r3, #0
 80140b4:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 80140b6:	7bfb      	ldrb	r3, [r7, #15]
 80140b8:	3b01      	subs	r3, #1
 80140ba:	2b03      	cmp	r3, #3
 80140bc:	d828      	bhi.n	8014110 <SPI_WriteInFlash+0x70>
 80140be:	a201      	add	r2, pc, #4	; (adr r2, 80140c4 <SPI_WriteInFlash+0x24>)
 80140c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140c4:	080140d5 	.word	0x080140d5
 80140c8:	080140e5 	.word	0x080140e5
 80140cc:	080140f3 	.word	0x080140f3
 80140d0:	08014101 	.word	0x08014101
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 80140d4:	4b75      	ldr	r3, [pc, #468]	; (80142ac <SPI_WriteInFlash+0x20c>)
 80140d6:	4a76      	ldr	r2, [pc, #472]	; (80142b0 <SPI_WriteInFlash+0x210>)
 80140d8:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 80140da:	4b76      	ldr	r3, [pc, #472]	; (80142b4 <SPI_WriteInFlash+0x214>)
 80140dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80140e0:	601a      	str	r2, [r3, #0]
		break;
 80140e2:	e018      	b.n	8014116 <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 80140e4:	4b71      	ldr	r3, [pc, #452]	; (80142ac <SPI_WriteInFlash+0x20c>)
 80140e6:	4a74      	ldr	r2, [pc, #464]	; (80142b8 <SPI_WriteInFlash+0x218>)
 80140e8:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 80140ea:	4b72      	ldr	r3, [pc, #456]	; (80142b4 <SPI_WriteInFlash+0x214>)
 80140ec:	2220      	movs	r2, #32
 80140ee:	601a      	str	r2, [r3, #0]
		break;
 80140f0:	e011      	b.n	8014116 <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 80140f2:	4b6e      	ldr	r3, [pc, #440]	; (80142ac <SPI_WriteInFlash+0x20c>)
 80140f4:	4a70      	ldr	r2, [pc, #448]	; (80142b8 <SPI_WriteInFlash+0x218>)
 80140f6:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 80140f8:	4b6e      	ldr	r3, [pc, #440]	; (80142b4 <SPI_WriteInFlash+0x214>)
 80140fa:	2240      	movs	r2, #64	; 0x40
 80140fc:	601a      	str	r2, [r3, #0]
		break;
 80140fe:	e00a      	b.n	8014116 <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 8014100:	4b6a      	ldr	r3, [pc, #424]	; (80142ac <SPI_WriteInFlash+0x20c>)
 8014102:	4a6e      	ldr	r2, [pc, #440]	; (80142bc <SPI_WriteInFlash+0x21c>)
 8014104:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8014106:	4b6b      	ldr	r3, [pc, #428]	; (80142b4 <SPI_WriteInFlash+0x214>)
 8014108:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801410c:	601a      	str	r2, [r3, #0]
		break;
 801410e:	e002      	b.n	8014116 <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 8014110:	486b      	ldr	r0, [pc, #428]	; (80142c0 <SPI_WriteInFlash+0x220>)
 8014112:	f00e fcc9 	bl	8022aa8 <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8014116:	4b65      	ldr	r3, [pc, #404]	; (80142ac <SPI_WriteInFlash+0x20c>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	4a66      	ldr	r2, [pc, #408]	; (80142b4 <SPI_WriteInFlash+0x214>)
 801411c:	6812      	ldr	r2, [r2, #0]
 801411e:	b291      	uxth	r1, r2
 8014120:	2201      	movs	r2, #1
 8014122:	4618      	mov	r0, r3
 8014124:	f004 f8f6 	bl	8018314 <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014128:	4b60      	ldr	r3, [pc, #384]	; (80142ac <SPI_WriteInFlash+0x20c>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	4a61      	ldr	r2, [pc, #388]	; (80142b4 <SPI_WriteInFlash+0x214>)
 801412e:	6812      	ldr	r2, [r2, #0]
 8014130:	b291      	uxth	r1, r2
 8014132:	2200      	movs	r2, #0
 8014134:	4618      	mov	r0, r3
 8014136:	f004 f8ed 	bl	8018314 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 801413a:	2364      	movs	r3, #100	; 0x64
 801413c:	2201      	movs	r2, #1
 801413e:	4961      	ldr	r1, [pc, #388]	; (80142c4 <SPI_WriteInFlash+0x224>)
 8014140:	4861      	ldr	r0, [pc, #388]	; (80142c8 <SPI_WriteInFlash+0x228>)
 8014142:	f006 f989 	bl	801a458 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8014146:	4b59      	ldr	r3, [pc, #356]	; (80142ac <SPI_WriteInFlash+0x20c>)
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	4a5a      	ldr	r2, [pc, #360]	; (80142b4 <SPI_WriteInFlash+0x214>)
 801414c:	6812      	ldr	r2, [r2, #0]
 801414e:	b291      	uxth	r1, r2
 8014150:	2201      	movs	r2, #1
 8014152:	4618      	mov	r0, r3
 8014154:	f004 f8de 	bl	8018314 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014158:	4b54      	ldr	r3, [pc, #336]	; (80142ac <SPI_WriteInFlash+0x20c>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	4a55      	ldr	r2, [pc, #340]	; (80142b4 <SPI_WriteInFlash+0x214>)
 801415e:	6812      	ldr	r2, [r2, #0]
 8014160:	b291      	uxth	r1, r2
 8014162:	2200      	movs	r2, #0
 8014164:	4618      	mov	r0, r3
 8014166:	f004 f8d5 	bl	8018314 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 801416a:	2364      	movs	r3, #100	; 0x64
 801416c:	2201      	movs	r2, #1
 801416e:	4957      	ldr	r1, [pc, #348]	; (80142cc <SPI_WriteInFlash+0x22c>)
 8014170:	4855      	ldr	r0, [pc, #340]	; (80142c8 <SPI_WriteInFlash+0x228>)
 8014172:	f006 f971 	bl	801a458 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8014176:	2364      	movs	r3, #100	; 0x64
 8014178:	2201      	movs	r2, #1
 801417a:	4955      	ldr	r1, [pc, #340]	; (80142d0 <SPI_WriteInFlash+0x230>)
 801417c:	4852      	ldr	r0, [pc, #328]	; (80142c8 <SPI_WriteInFlash+0x228>)
 801417e:	f006 fad9 	bl	801a734 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8014182:	4b4a      	ldr	r3, [pc, #296]	; (80142ac <SPI_WriteInFlash+0x20c>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	4a4b      	ldr	r2, [pc, #300]	; (80142b4 <SPI_WriteInFlash+0x214>)
 8014188:	6812      	ldr	r2, [r2, #0]
 801418a:	b291      	uxth	r1, r2
 801418c:	2201      	movs	r2, #1
 801418e:	4618      	mov	r0, r3
 8014190:	f004 f8c0 	bl	8018314 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8014194:	4b4e      	ldr	r3, [pc, #312]	; (80142d0 <SPI_WriteInFlash+0x230>)
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	f003 0302 	and.w	r3, r3, #2
 801419c:	2b00      	cmp	r3, #0
 801419e:	d103      	bne.n	80141a8 <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 80141a0:	484c      	ldr	r0, [pc, #304]	; (80142d4 <SPI_WriteInFlash+0x234>)
 80141a2:	f00e fbe5 	bl	8022970 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80141a6:	e7d7      	b.n	8014158 <SPI_WriteInFlash+0xb8>
			break;
 80141a8:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80141aa:	4b40      	ldr	r3, [pc, #256]	; (80142ac <SPI_WriteInFlash+0x20c>)
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	4a41      	ldr	r2, [pc, #260]	; (80142b4 <SPI_WriteInFlash+0x214>)
 80141b0:	6812      	ldr	r2, [r2, #0]
 80141b2:	b291      	uxth	r1, r2
 80141b4:	2200      	movs	r2, #0
 80141b6:	4618      	mov	r0, r3
 80141b8:	f004 f8ac 	bl	8018314 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 80141bc:	2202      	movs	r2, #2
 80141be:	4b46      	ldr	r3, [pc, #280]	; (80142d8 <SPI_WriteInFlash+0x238>)
 80141c0:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 80141c2:	68bb      	ldr	r3, [r7, #8]
 80141c4:	0c1b      	lsrs	r3, r3, #16
 80141c6:	b2da      	uxtb	r2, r3
 80141c8:	4b43      	ldr	r3, [pc, #268]	; (80142d8 <SPI_WriteInFlash+0x238>)
 80141ca:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	0a1b      	lsrs	r3, r3, #8
 80141d0:	b2da      	uxtb	r2, r3
 80141d2:	4b41      	ldr	r3, [pc, #260]	; (80142d8 <SPI_WriteInFlash+0x238>)
 80141d4:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	b2da      	uxtb	r2, r3
 80141da:	4b3f      	ldr	r3, [pc, #252]	; (80142d8 <SPI_WriteInFlash+0x238>)
 80141dc:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 80141de:	2364      	movs	r3, #100	; 0x64
 80141e0:	2204      	movs	r2, #4
 80141e2:	493d      	ldr	r1, [pc, #244]	; (80142d8 <SPI_WriteInFlash+0x238>)
 80141e4:	4838      	ldr	r0, [pc, #224]	; (80142c8 <SPI_WriteInFlash+0x228>)
 80141e6:	f006 f937 	bl	801a458 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 80141ea:	89ba      	ldrh	r2, [r7, #12]
 80141ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80141f0:	6879      	ldr	r1, [r7, #4]
 80141f2:	4835      	ldr	r0, [pc, #212]	; (80142c8 <SPI_WriteInFlash+0x228>)
 80141f4:	f006 f930 	bl	801a458 <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80141f8:	4b2c      	ldr	r3, [pc, #176]	; (80142ac <SPI_WriteInFlash+0x20c>)
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	4a2d      	ldr	r2, [pc, #180]	; (80142b4 <SPI_WriteInFlash+0x214>)
 80141fe:	6812      	ldr	r2, [r2, #0]
 8014200:	b291      	uxth	r1, r2
 8014202:	2201      	movs	r2, #1
 8014204:	4618      	mov	r0, r3
 8014206:	f004 f885 	bl	8018314 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801420a:	4b28      	ldr	r3, [pc, #160]	; (80142ac <SPI_WriteInFlash+0x20c>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	4a29      	ldr	r2, [pc, #164]	; (80142b4 <SPI_WriteInFlash+0x214>)
 8014210:	6812      	ldr	r2, [r2, #0]
 8014212:	b291      	uxth	r1, r2
 8014214:	2200      	movs	r2, #0
 8014216:	4618      	mov	r0, r3
 8014218:	f004 f87c 	bl	8018314 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 801421c:	2205      	movs	r2, #5
 801421e:	4b2e      	ldr	r3, [pc, #184]	; (80142d8 <SPI_WriteInFlash+0x238>)
 8014220:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8014222:	2364      	movs	r3, #100	; 0x64
 8014224:	2201      	movs	r2, #1
 8014226:	492c      	ldr	r1, [pc, #176]	; (80142d8 <SPI_WriteInFlash+0x238>)
 8014228:	4827      	ldr	r0, [pc, #156]	; (80142c8 <SPI_WriteInFlash+0x228>)
 801422a:	f006 f915 	bl	801a458 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 801422e:	2364      	movs	r3, #100	; 0x64
 8014230:	2201      	movs	r2, #1
 8014232:	4927      	ldr	r1, [pc, #156]	; (80142d0 <SPI_WriteInFlash+0x230>)
 8014234:	4824      	ldr	r0, [pc, #144]	; (80142c8 <SPI_WriteInFlash+0x228>)
 8014236:	f006 fa7d 	bl	801a734 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801423a:	4b1c      	ldr	r3, [pc, #112]	; (80142ac <SPI_WriteInFlash+0x20c>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	4a1d      	ldr	r2, [pc, #116]	; (80142b4 <SPI_WriteInFlash+0x214>)
 8014240:	6812      	ldr	r2, [r2, #0]
 8014242:	b291      	uxth	r1, r2
 8014244:	2201      	movs	r2, #1
 8014246:	4618      	mov	r0, r3
 8014248:	f004 f864 	bl	8018314 <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 801424c:	4b20      	ldr	r3, [pc, #128]	; (80142d0 <SPI_WriteInFlash+0x230>)
 801424e:	781b      	ldrb	r3, [r3, #0]
 8014250:	f003 0301 	and.w	r3, r3, #1
 8014254:	2b00      	cmp	r3, #0
 8014256:	d1d8      	bne.n	801420a <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 8014258:	2301      	movs	r3, #1
 801425a:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 801425c:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801425e:	4b13      	ldr	r3, [pc, #76]	; (80142ac <SPI_WriteInFlash+0x20c>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	4a14      	ldr	r2, [pc, #80]	; (80142b4 <SPI_WriteInFlash+0x214>)
 8014264:	6812      	ldr	r2, [r2, #0]
 8014266:	b291      	uxth	r1, r2
 8014268:	2200      	movs	r2, #0
 801426a:	4618      	mov	r0, r3
 801426c:	f004 f852 	bl	8018314 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8014270:	2204      	movs	r2, #4
 8014272:	4b19      	ldr	r3, [pc, #100]	; (80142d8 <SPI_WriteInFlash+0x238>)
 8014274:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8014276:	2364      	movs	r3, #100	; 0x64
 8014278:	2201      	movs	r2, #1
 801427a:	4917      	ldr	r1, [pc, #92]	; (80142d8 <SPI_WriteInFlash+0x238>)
 801427c:	4812      	ldr	r0, [pc, #72]	; (80142c8 <SPI_WriteInFlash+0x228>)
 801427e:	f006 f8eb 	bl	801a458 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8014282:	2364      	movs	r3, #100	; 0x64
 8014284:	2201      	movs	r2, #1
 8014286:	4912      	ldr	r1, [pc, #72]	; (80142d0 <SPI_WriteInFlash+0x230>)
 8014288:	480f      	ldr	r0, [pc, #60]	; (80142c8 <SPI_WriteInFlash+0x228>)
 801428a:	f006 fa53 	bl	801a734 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801428e:	4b07      	ldr	r3, [pc, #28]	; (80142ac <SPI_WriteInFlash+0x20c>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	4a08      	ldr	r2, [pc, #32]	; (80142b4 <SPI_WriteInFlash+0x214>)
 8014294:	6812      	ldr	r2, [r2, #0]
 8014296:	b291      	uxth	r1, r2
 8014298:	2201      	movs	r2, #1
 801429a:	4618      	mov	r0, r3
 801429c:	f004 f83a 	bl	8018314 <HAL_GPIO_WritePin>

	return Return_Value;
 80142a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3718      	adds	r7, #24
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	20009d3c 	.word	0x20009d3c
 80142b0:	40021800 	.word	0x40021800
 80142b4:	20009d40 	.word	0x20009d40
 80142b8:	40020c00 	.word	0x40020c00
 80142bc:	40021000 	.word	0x40021000
 80142c0:	080275fc 	.word	0x080275fc
 80142c4:	0802926c 	.word	0x0802926c
 80142c8:	20009d48 	.word	0x20009d48
 80142cc:	0802926d 	.word	0x0802926d
 80142d0:	20009d38 	.word	0x20009d38
 80142d4:	08027614 	.word	0x08027614
 80142d8:	20009d34 	.word	0x20009d34

080142dc <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 80142dc:	b580      	push	{r7, lr}
 80142de:	b084      	sub	sp, #16
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	4603      	mov	r3, r0
 80142e4:	6039      	str	r1, [r7, #0]
 80142e6:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 80142e8:	2300      	movs	r3, #0
 80142ea:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 80142ec:	79fb      	ldrb	r3, [r7, #7]
 80142ee:	3b01      	subs	r3, #1
 80142f0:	2b03      	cmp	r3, #3
 80142f2:	d829      	bhi.n	8014348 <SPI_MemoryEraseBySector+0x6c>
 80142f4:	a201      	add	r2, pc, #4	; (adr r2, 80142fc <SPI_MemoryEraseBySector+0x20>)
 80142f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142fa:	bf00      	nop
 80142fc:	0801430d 	.word	0x0801430d
 8014300:	0801431d 	.word	0x0801431d
 8014304:	0801432b 	.word	0x0801432b
 8014308:	08014339 	.word	0x08014339
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 801430c:	4b6d      	ldr	r3, [pc, #436]	; (80144c4 <SPI_MemoryEraseBySector+0x1e8>)
 801430e:	4a6e      	ldr	r2, [pc, #440]	; (80144c8 <SPI_MemoryEraseBySector+0x1ec>)
 8014310:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8014312:	4b6e      	ldr	r3, [pc, #440]	; (80144cc <SPI_MemoryEraseBySector+0x1f0>)
 8014314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014318:	601a      	str	r2, [r3, #0]
		break;
 801431a:	e018      	b.n	801434e <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 801431c:	4b69      	ldr	r3, [pc, #420]	; (80144c4 <SPI_MemoryEraseBySector+0x1e8>)
 801431e:	4a6c      	ldr	r2, [pc, #432]	; (80144d0 <SPI_MemoryEraseBySector+0x1f4>)
 8014320:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8014322:	4b6a      	ldr	r3, [pc, #424]	; (80144cc <SPI_MemoryEraseBySector+0x1f0>)
 8014324:	2220      	movs	r2, #32
 8014326:	601a      	str	r2, [r3, #0]
		break;
 8014328:	e011      	b.n	801434e <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 801432a:	4b66      	ldr	r3, [pc, #408]	; (80144c4 <SPI_MemoryEraseBySector+0x1e8>)
 801432c:	4a68      	ldr	r2, [pc, #416]	; (80144d0 <SPI_MemoryEraseBySector+0x1f4>)
 801432e:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8014330:	4b66      	ldr	r3, [pc, #408]	; (80144cc <SPI_MemoryEraseBySector+0x1f0>)
 8014332:	2240      	movs	r2, #64	; 0x40
 8014334:	601a      	str	r2, [r3, #0]
		break;
 8014336:	e00a      	b.n	801434e <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8014338:	4b62      	ldr	r3, [pc, #392]	; (80144c4 <SPI_MemoryEraseBySector+0x1e8>)
 801433a:	4a66      	ldr	r2, [pc, #408]	; (80144d4 <SPI_MemoryEraseBySector+0x1f8>)
 801433c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 801433e:	4b63      	ldr	r3, [pc, #396]	; (80144cc <SPI_MemoryEraseBySector+0x1f0>)
 8014340:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014344:	601a      	str	r2, [r3, #0]
		break;
 8014346:	e002      	b.n	801434e <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 8014348:	4863      	ldr	r0, [pc, #396]	; (80144d8 <SPI_MemoryEraseBySector+0x1fc>)
 801434a:	f00e fbad 	bl	8022aa8 <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801434e:	4b5d      	ldr	r3, [pc, #372]	; (80144c4 <SPI_MemoryEraseBySector+0x1e8>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	4a5e      	ldr	r2, [pc, #376]	; (80144cc <SPI_MemoryEraseBySector+0x1f0>)
 8014354:	6812      	ldr	r2, [r2, #0]
 8014356:	b291      	uxth	r1, r2
 8014358:	2200      	movs	r2, #0
 801435a:	4618      	mov	r0, r3
 801435c:	f003 ffda 	bl	8018314 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 8014360:	2364      	movs	r3, #100	; 0x64
 8014362:	2201      	movs	r2, #1
 8014364:	495d      	ldr	r1, [pc, #372]	; (80144dc <SPI_MemoryEraseBySector+0x200>)
 8014366:	485e      	ldr	r0, [pc, #376]	; (80144e0 <SPI_MemoryEraseBySector+0x204>)
 8014368:	f006 f876 	bl	801a458 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801436c:	4b55      	ldr	r3, [pc, #340]	; (80144c4 <SPI_MemoryEraseBySector+0x1e8>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	4a56      	ldr	r2, [pc, #344]	; (80144cc <SPI_MemoryEraseBySector+0x1f0>)
 8014372:	6812      	ldr	r2, [r2, #0]
 8014374:	b291      	uxth	r1, r2
 8014376:	2201      	movs	r2, #1
 8014378:	4618      	mov	r0, r3
 801437a:	f003 ffcb 	bl	8018314 <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801437e:	4b51      	ldr	r3, [pc, #324]	; (80144c4 <SPI_MemoryEraseBySector+0x1e8>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	4a52      	ldr	r2, [pc, #328]	; (80144cc <SPI_MemoryEraseBySector+0x1f0>)
 8014384:	6812      	ldr	r2, [r2, #0]
 8014386:	b291      	uxth	r1, r2
 8014388:	2200      	movs	r2, #0
 801438a:	4618      	mov	r0, r3
 801438c:	f003 ffc2 	bl	8018314 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 8014390:	2364      	movs	r3, #100	; 0x64
 8014392:	2201      	movs	r2, #1
 8014394:	4953      	ldr	r1, [pc, #332]	; (80144e4 <SPI_MemoryEraseBySector+0x208>)
 8014396:	4852      	ldr	r0, [pc, #328]	; (80144e0 <SPI_MemoryEraseBySector+0x204>)
 8014398:	f006 f85e 	bl	801a458 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 801439c:	2364      	movs	r3, #100	; 0x64
 801439e:	2201      	movs	r2, #1
 80143a0:	4951      	ldr	r1, [pc, #324]	; (80144e8 <SPI_MemoryEraseBySector+0x20c>)
 80143a2:	484f      	ldr	r0, [pc, #316]	; (80144e0 <SPI_MemoryEraseBySector+0x204>)
 80143a4:	f006 f9c6 	bl	801a734 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80143a8:	4b46      	ldr	r3, [pc, #280]	; (80144c4 <SPI_MemoryEraseBySector+0x1e8>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	4a47      	ldr	r2, [pc, #284]	; (80144cc <SPI_MemoryEraseBySector+0x1f0>)
 80143ae:	6812      	ldr	r2, [r2, #0]
 80143b0:	b291      	uxth	r1, r2
 80143b2:	2201      	movs	r2, #1
 80143b4:	4618      	mov	r0, r3
 80143b6:	f003 ffad 	bl	8018314 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 80143ba:	4b4b      	ldr	r3, [pc, #300]	; (80144e8 <SPI_MemoryEraseBySector+0x20c>)
 80143bc:	781b      	ldrb	r3, [r3, #0]
 80143be:	f003 0302 	and.w	r3, r3, #2
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d103      	bne.n	80143ce <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 80143c6:	4849      	ldr	r0, [pc, #292]	; (80144ec <SPI_MemoryEraseBySector+0x210>)
 80143c8:	f00e fad2 	bl	8022970 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80143cc:	e7d7      	b.n	801437e <SPI_MemoryEraseBySector+0xa2>
			break;
 80143ce:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80143d0:	4b3c      	ldr	r3, [pc, #240]	; (80144c4 <SPI_MemoryEraseBySector+0x1e8>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	4a3d      	ldr	r2, [pc, #244]	; (80144cc <SPI_MemoryEraseBySector+0x1f0>)
 80143d6:	6812      	ldr	r2, [r2, #0]
 80143d8:	b291      	uxth	r1, r2
 80143da:	2200      	movs	r2, #0
 80143dc:	4618      	mov	r0, r3
 80143de:	f003 ff99 	bl	8018314 <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 80143e2:	4b43      	ldr	r3, [pc, #268]	; (80144f0 <SPI_MemoryEraseBySector+0x214>)
 80143e4:	2220      	movs	r2, #32
 80143e6:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	0c1b      	lsrs	r3, r3, #16
 80143ec:	b2da      	uxtb	r2, r3
 80143ee:	4b40      	ldr	r3, [pc, #256]	; (80144f0 <SPI_MemoryEraseBySector+0x214>)
 80143f0:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 80143f2:	683b      	ldr	r3, [r7, #0]
 80143f4:	0a1b      	lsrs	r3, r3, #8
 80143f6:	b2da      	uxtb	r2, r3
 80143f8:	4b3d      	ldr	r3, [pc, #244]	; (80144f0 <SPI_MemoryEraseBySector+0x214>)
 80143fa:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	b2da      	uxtb	r2, r3
 8014400:	4b3b      	ldr	r3, [pc, #236]	; (80144f0 <SPI_MemoryEraseBySector+0x214>)
 8014402:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8014404:	2364      	movs	r3, #100	; 0x64
 8014406:	2204      	movs	r2, #4
 8014408:	4939      	ldr	r1, [pc, #228]	; (80144f0 <SPI_MemoryEraseBySector+0x214>)
 801440a:	4835      	ldr	r0, [pc, #212]	; (80144e0 <SPI_MemoryEraseBySector+0x204>)
 801440c:	f006 f824 	bl	801a458 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8014410:	4b2c      	ldr	r3, [pc, #176]	; (80144c4 <SPI_MemoryEraseBySector+0x1e8>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	4a2d      	ldr	r2, [pc, #180]	; (80144cc <SPI_MemoryEraseBySector+0x1f0>)
 8014416:	6812      	ldr	r2, [r2, #0]
 8014418:	b291      	uxth	r1, r2
 801441a:	2201      	movs	r2, #1
 801441c:	4618      	mov	r0, r3
 801441e:	f003 ff79 	bl	8018314 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014422:	4b28      	ldr	r3, [pc, #160]	; (80144c4 <SPI_MemoryEraseBySector+0x1e8>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	4a29      	ldr	r2, [pc, #164]	; (80144cc <SPI_MemoryEraseBySector+0x1f0>)
 8014428:	6812      	ldr	r2, [r2, #0]
 801442a:	b291      	uxth	r1, r2
 801442c:	2200      	movs	r2, #0
 801442e:	4618      	mov	r0, r3
 8014430:	f003 ff70 	bl	8018314 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8014434:	2205      	movs	r2, #5
 8014436:	4b2e      	ldr	r3, [pc, #184]	; (80144f0 <SPI_MemoryEraseBySector+0x214>)
 8014438:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 801443a:	2364      	movs	r3, #100	; 0x64
 801443c:	2201      	movs	r2, #1
 801443e:	492c      	ldr	r1, [pc, #176]	; (80144f0 <SPI_MemoryEraseBySector+0x214>)
 8014440:	4827      	ldr	r0, [pc, #156]	; (80144e0 <SPI_MemoryEraseBySector+0x204>)
 8014442:	f006 f809 	bl	801a458 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8014446:	2364      	movs	r3, #100	; 0x64
 8014448:	2201      	movs	r2, #1
 801444a:	4927      	ldr	r1, [pc, #156]	; (80144e8 <SPI_MemoryEraseBySector+0x20c>)
 801444c:	4824      	ldr	r0, [pc, #144]	; (80144e0 <SPI_MemoryEraseBySector+0x204>)
 801444e:	f006 f971 	bl	801a734 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8014452:	4b1c      	ldr	r3, [pc, #112]	; (80144c4 <SPI_MemoryEraseBySector+0x1e8>)
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	4a1d      	ldr	r2, [pc, #116]	; (80144cc <SPI_MemoryEraseBySector+0x1f0>)
 8014458:	6812      	ldr	r2, [r2, #0]
 801445a:	b291      	uxth	r1, r2
 801445c:	2201      	movs	r2, #1
 801445e:	4618      	mov	r0, r3
 8014460:	f003 ff58 	bl	8018314 <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8014464:	4b20      	ldr	r3, [pc, #128]	; (80144e8 <SPI_MemoryEraseBySector+0x20c>)
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	f003 0301 	and.w	r3, r3, #1
 801446c:	2b00      	cmp	r3, #0
 801446e:	d1d8      	bne.n	8014422 <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 8014470:	2301      	movs	r3, #1
 8014472:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 8014474:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014476:	4b13      	ldr	r3, [pc, #76]	; (80144c4 <SPI_MemoryEraseBySector+0x1e8>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	4a14      	ldr	r2, [pc, #80]	; (80144cc <SPI_MemoryEraseBySector+0x1f0>)
 801447c:	6812      	ldr	r2, [r2, #0]
 801447e:	b291      	uxth	r1, r2
 8014480:	2200      	movs	r2, #0
 8014482:	4618      	mov	r0, r3
 8014484:	f003 ff46 	bl	8018314 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8014488:	2204      	movs	r2, #4
 801448a:	4b19      	ldr	r3, [pc, #100]	; (80144f0 <SPI_MemoryEraseBySector+0x214>)
 801448c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 801448e:	2364      	movs	r3, #100	; 0x64
 8014490:	2201      	movs	r2, #1
 8014492:	4917      	ldr	r1, [pc, #92]	; (80144f0 <SPI_MemoryEraseBySector+0x214>)
 8014494:	4812      	ldr	r0, [pc, #72]	; (80144e0 <SPI_MemoryEraseBySector+0x204>)
 8014496:	f005 ffdf 	bl	801a458 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 801449a:	2364      	movs	r3, #100	; 0x64
 801449c:	2201      	movs	r2, #1
 801449e:	4912      	ldr	r1, [pc, #72]	; (80144e8 <SPI_MemoryEraseBySector+0x20c>)
 80144a0:	480f      	ldr	r0, [pc, #60]	; (80144e0 <SPI_MemoryEraseBySector+0x204>)
 80144a2:	f006 f947 	bl	801a734 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80144a6:	4b07      	ldr	r3, [pc, #28]	; (80144c4 <SPI_MemoryEraseBySector+0x1e8>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	4a08      	ldr	r2, [pc, #32]	; (80144cc <SPI_MemoryEraseBySector+0x1f0>)
 80144ac:	6812      	ldr	r2, [r2, #0]
 80144ae:	b291      	uxth	r1, r2
 80144b0:	2201      	movs	r2, #1
 80144b2:	4618      	mov	r0, r3
 80144b4:	f003 ff2e 	bl	8018314 <HAL_GPIO_WritePin>
	return Flash_Erase;
 80144b8:	68fb      	ldr	r3, [r7, #12]

}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3710      	adds	r7, #16
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	20009d3c 	.word	0x20009d3c
 80144c8:	40021800 	.word	0x40021800
 80144cc:	20009d40 	.word	0x20009d40
 80144d0:	40020c00 	.word	0x40020c00
 80144d4:	40021000 	.word	0x40021000
 80144d8:	080275fc 	.word	0x080275fc
 80144dc:	0802926c 	.word	0x0802926c
 80144e0:	20009d48 	.word	0x20009d48
 80144e4:	0802926d 	.word	0x0802926d
 80144e8:	20009d38 	.word	0x20009d38
 80144ec:	08027638 	.word	0x08027638
 80144f0:	20009d34 	.word	0x20009d34

080144f4 <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b084      	sub	sp, #16
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	60b9      	str	r1, [r7, #8]
 80144fc:	607b      	str	r3, [r7, #4]
 80144fe:	4603      	mov	r3, r0
 8014500:	73fb      	strb	r3, [r7, #15]
 8014502:	4613      	mov	r3, r2
 8014504:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 8014506:	7bfb      	ldrb	r3, [r7, #15]
 8014508:	3b01      	subs	r3, #1
 801450a:	2b03      	cmp	r3, #3
 801450c:	d828      	bhi.n	8014560 <SPI_ReadFromFlash+0x6c>
 801450e:	a201      	add	r2, pc, #4	; (adr r2, 8014514 <SPI_ReadFromFlash+0x20>)
 8014510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014514:	08014525 	.word	0x08014525
 8014518:	08014535 	.word	0x08014535
 801451c:	08014543 	.word	0x08014543
 8014520:	08014551 	.word	0x08014551
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8014524:	4b2d      	ldr	r3, [pc, #180]	; (80145dc <SPI_ReadFromFlash+0xe8>)
 8014526:	4a2e      	ldr	r2, [pc, #184]	; (80145e0 <SPI_ReadFromFlash+0xec>)
 8014528:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 801452a:	4b2e      	ldr	r3, [pc, #184]	; (80145e4 <SPI_ReadFromFlash+0xf0>)
 801452c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014530:	601a      	str	r2, [r3, #0]
		break;
 8014532:	e018      	b.n	8014566 <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8014534:	4b29      	ldr	r3, [pc, #164]	; (80145dc <SPI_ReadFromFlash+0xe8>)
 8014536:	4a2c      	ldr	r2, [pc, #176]	; (80145e8 <SPI_ReadFromFlash+0xf4>)
 8014538:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 801453a:	4b2a      	ldr	r3, [pc, #168]	; (80145e4 <SPI_ReadFromFlash+0xf0>)
 801453c:	2220      	movs	r2, #32
 801453e:	601a      	str	r2, [r3, #0]
		break;
 8014540:	e011      	b.n	8014566 <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8014542:	4b26      	ldr	r3, [pc, #152]	; (80145dc <SPI_ReadFromFlash+0xe8>)
 8014544:	4a28      	ldr	r2, [pc, #160]	; (80145e8 <SPI_ReadFromFlash+0xf4>)
 8014546:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8014548:	4b26      	ldr	r3, [pc, #152]	; (80145e4 <SPI_ReadFromFlash+0xf0>)
 801454a:	2240      	movs	r2, #64	; 0x40
 801454c:	601a      	str	r2, [r3, #0]
		break;
 801454e:	e00a      	b.n	8014566 <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8014550:	4b22      	ldr	r3, [pc, #136]	; (80145dc <SPI_ReadFromFlash+0xe8>)
 8014552:	4a26      	ldr	r2, [pc, #152]	; (80145ec <SPI_ReadFromFlash+0xf8>)
 8014554:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8014556:	4b23      	ldr	r3, [pc, #140]	; (80145e4 <SPI_ReadFromFlash+0xf0>)
 8014558:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801455c:	601a      	str	r2, [r3, #0]
		break;
 801455e:	e002      	b.n	8014566 <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 8014560:	4823      	ldr	r0, [pc, #140]	; (80145f0 <SPI_ReadFromFlash+0xfc>)
 8014562:	f00e faa1 	bl	8022aa8 <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 8014566:	89bb      	ldrh	r3, [r7, #12]
 8014568:	461a      	mov	r2, r3
 801456a:	2100      	movs	r1, #0
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f00e f917 	bl	80227a0 <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014572:	4b1a      	ldr	r3, [pc, #104]	; (80145dc <SPI_ReadFromFlash+0xe8>)
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	4a1b      	ldr	r2, [pc, #108]	; (80145e4 <SPI_ReadFromFlash+0xf0>)
 8014578:	6812      	ldr	r2, [r2, #0]
 801457a:	b291      	uxth	r1, r2
 801457c:	2200      	movs	r2, #0
 801457e:	4618      	mov	r0, r3
 8014580:	f003 fec8 	bl	8018314 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 8014584:	2203      	movs	r2, #3
 8014586:	4b1b      	ldr	r3, [pc, #108]	; (80145f4 <SPI_ReadFromFlash+0x100>)
 8014588:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	0c1b      	lsrs	r3, r3, #16
 801458e:	b2da      	uxtb	r2, r3
 8014590:	4b18      	ldr	r3, [pc, #96]	; (80145f4 <SPI_ReadFromFlash+0x100>)
 8014592:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8014594:	68bb      	ldr	r3, [r7, #8]
 8014596:	0a1b      	lsrs	r3, r3, #8
 8014598:	b2da      	uxtb	r2, r3
 801459a:	4b16      	ldr	r3, [pc, #88]	; (80145f4 <SPI_ReadFromFlash+0x100>)
 801459c:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	b2da      	uxtb	r2, r3
 80145a2:	4b14      	ldr	r3, [pc, #80]	; (80145f4 <SPI_ReadFromFlash+0x100>)
 80145a4:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 80145a6:	2364      	movs	r3, #100	; 0x64
 80145a8:	2204      	movs	r2, #4
 80145aa:	4912      	ldr	r1, [pc, #72]	; (80145f4 <SPI_ReadFromFlash+0x100>)
 80145ac:	4812      	ldr	r0, [pc, #72]	; (80145f8 <SPI_ReadFromFlash+0x104>)
 80145ae:	f005 ff53 	bl	801a458 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 80145b2:	89ba      	ldrh	r2, [r7, #12]
 80145b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80145b8:	6879      	ldr	r1, [r7, #4]
 80145ba:	480f      	ldr	r0, [pc, #60]	; (80145f8 <SPI_ReadFromFlash+0x104>)
 80145bc:	f006 f8ba 	bl	801a734 <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80145c0:	4b06      	ldr	r3, [pc, #24]	; (80145dc <SPI_ReadFromFlash+0xe8>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	4a07      	ldr	r2, [pc, #28]	; (80145e4 <SPI_ReadFromFlash+0xf0>)
 80145c6:	6812      	ldr	r2, [r2, #0]
 80145c8:	b291      	uxth	r1, r2
 80145ca:	2201      	movs	r2, #1
 80145cc:	4618      	mov	r0, r3
 80145ce:	f003 fea1 	bl	8018314 <HAL_GPIO_WritePin>

}
 80145d2:	bf00      	nop
 80145d4:	3710      	adds	r7, #16
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	bf00      	nop
 80145dc:	20009d3c 	.word	0x20009d3c
 80145e0:	40021800 	.word	0x40021800
 80145e4:	20009d40 	.word	0x20009d40
 80145e8:	40020c00 	.word	0x40020c00
 80145ec:	40021000 	.word	0x40021000
 80145f0:	080275fc 	.word	0x080275fc
 80145f4:	20009d34 	.word	0x20009d34
 80145f8:	20009d48 	.word	0x20009d48

080145fc <Get_Config>:




void Get_Config(void)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 8014602:	2300      	movs	r3, #0
 8014604:	60fb      	str	r3, [r7, #12]
	//	unsigned char uc_SspIndex =0;//,uc_Block_Index = 0;


	size_t SIZE = (sizeof(EI_t))+6;
 8014606:	f240 3346 	movw	r3, #838	; 0x346
 801460a:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	60bb      	str	r3, [r7, #8]
	return;
#endif

#endif

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8014610:	2300      	movs	r3, #0
 8014612:	60fb      	str	r3, [r7, #12]
 8014614:	e01d      	b.n	8014652 <Get_Config+0x56>
	{
		HAL_Delay(20);
 8014616:	2014      	movs	r0, #20
 8014618:	f001 f9b8 	bl	801598c <HAL_Delay>
		if(SIZE_VAR <32)
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	2b1f      	cmp	r3, #31
 8014620:	d809      	bhi.n	8014636 <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 8014622:	68bb      	ldr	r3, [r7, #8]
 8014624:	b29a      	uxth	r2, r3
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	492c      	ldr	r1, [pc, #176]	; (80146dc <Get_Config+0xe0>)
 801462a:	440b      	add	r3, r1
 801462c:	68f9      	ldr	r1, [r7, #12]
 801462e:	2001      	movs	r0, #1
 8014630:	f7ff ff60 	bl	80144f4 <SPI_ReadFromFlash>
 8014634:	e00a      	b.n	801464c <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	4a28      	ldr	r2, [pc, #160]	; (80146dc <Get_Config+0xe0>)
 801463a:	4413      	add	r3, r2
 801463c:	2220      	movs	r2, #32
 801463e:	68f9      	ldr	r1, [r7, #12]
 8014640:	2001      	movs	r0, #1
 8014642:	f7ff ff57 	bl	80144f4 <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 8014646:	68bb      	ldr	r3, [r7, #8]
 8014648:	3b20      	subs	r3, #32
 801464a:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	3320      	adds	r3, #32
 8014650:	60fb      	str	r3, [r7, #12]
 8014652:	68fa      	ldr	r2, [r7, #12]
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	429a      	cmp	r2, r3
 8014658:	d3dd      	bcc.n	8014616 <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 801465a:	f44f 7151 	mov.w	r1, #836	; 0x344
 801465e:	481f      	ldr	r0, [pc, #124]	; (80146dc <Get_Config+0xe0>)
 8014660:	f7fe fca2 	bl	8012fa8 <CheckCRC>
 8014664:	4603      	mov	r3, r0
 8014666:	2b00      	cmp	r3, #0
 8014668:	d013      	beq.n	8014692 <Get_Config+0x96>
	{
		/* CRC OK From the Flash */
		//EI_Config_ptr = &EI_data+4;
		//memcpy(EI_Config_ptr,&Config_Buff[4],sizeof(EI_t));
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 801466a:	f44f 7250 	mov.w	r2, #832	; 0x340
 801466e:	491c      	ldr	r1, [pc, #112]	; (80146e0 <Get_Config+0xe4>)
 8014670:	481c      	ldr	r0, [pc, #112]	; (80146e4 <Get_Config+0xe8>)
 8014672:	f00e f86d 	bl	8022750 <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 8014676:	4a1c      	ldr	r2, [pc, #112]	; (80146e8 <Get_Config+0xec>)
 8014678:	2110      	movs	r1, #16
 801467a:	2000      	movs	r0, #0
 801467c:	f7eb ffca 	bl	8000614 <ExtractBits>
 8014680:	4603      	mov	r3, r0
 8014682:	b29a      	uxth	r2, r3
 8014684:	4b19      	ldr	r3, [pc, #100]	; (80146ec <Get_Config+0xf0>)
 8014686:	801a      	strh	r2, [r3, #0]
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 8014688:	4b19      	ldr	r3, [pc, #100]	; (80146f0 <Get_Config+0xf4>)
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d121      	bne.n	80146d4 <Get_Config+0xd8>
 8014690:	e01e      	b.n	80146d0 <Get_Config+0xd4>
		printf("\n EI Configuration CRC from Flash:%u\n",(sizeof(EI_t)+4));
 8014692:	f44f 7151 	mov.w	r1, #836	; 0x344
 8014696:	4817      	ldr	r0, [pc, #92]	; (80146f4 <Get_Config+0xf8>)
 8014698:	f00e f96a 	bl	8022970 <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 801469c:	4b16      	ldr	r3, [pc, #88]	; (80146f8 <Get_Config+0xfc>)
 801469e:	4a10      	ldr	r2, [pc, #64]	; (80146e0 <Get_Config+0xe4>)
 80146a0:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 80146a2:	4b0e      	ldr	r3, [pc, #56]	; (80146dc <Get_Config+0xe0>)
 80146a4:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80146a8:	4619      	mov	r1, r3
 80146aa:	4b0c      	ldr	r3, [pc, #48]	; (80146dc <Get_Config+0xe0>)
 80146ac:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 80146b0:	461a      	mov	r2, r3
 80146b2:	4812      	ldr	r0, [pc, #72]	; (80146fc <Get_Config+0x100>)
 80146b4:	f00e f95c 	bl	8022970 <iprintf>
		printf("\nCheck for CRC:");
 80146b8:	4811      	ldr	r0, [pc, #68]	; (8014700 <Get_Config+0x104>)
 80146ba:	f00e f959 	bl	8022970 <iprintf>
		gucFlagUpdate =3;
 80146be:	4b11      	ldr	r3, [pc, #68]	; (8014704 <Get_Config+0x108>)
 80146c0:	2203      	movs	r2, #3
 80146c2:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 80146c4:	4810      	ldr	r0, [pc, #64]	; (8014708 <Get_Config+0x10c>)
 80146c6:	f00e f9ef 	bl	8022aa8 <puts>
			Data_Processing();
 80146ca:	f000 f81f 	bl	801470c <Data_Processing>
 80146ce:	e7fc      	b.n	80146ca <Get_Config+0xce>
	{
		readCanToStructs();
 80146d0:	f7fb fdfc 	bl	80102cc <readCanToStructs>
	}
}
 80146d4:	bf00      	nop
 80146d6:	3710      	adds	r7, #16
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd80      	pop	{r7, pc}
 80146dc:	20000648 	.word	0x20000648
 80146e0:	2000064c 	.word	0x2000064c
 80146e4:	20000304 	.word	0x20000304
 80146e8:	2000098c 	.word	0x2000098c
 80146ec:	20009d46 	.word	0x20009d46
 80146f0:	20000a4b 	.word	0x20000a4b
 80146f4:	08027668 	.word	0x08027668
 80146f8:	20000300 	.word	0x20000300
 80146fc:	08027690 	.word	0x08027690
 8014700:	080276a4 	.word	0x080276a4
 8014704:	20000a49 	.word	0x20000a49
 8014708:	080276b4 	.word	0x080276b4

0801470c <Data_Processing>:


void Data_Processing(void)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 8014710:	4b0b      	ldr	r3, [pc, #44]	; (8014740 <Data_Processing+0x34>)
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	2b03      	cmp	r3, #3
 8014716:	d10e      	bne.n	8014736 <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 8014718:	2000      	movs	r0, #0
 801471a:	f7f6 fb9f 	bl	800ae5c <CheckForRqst>
 801471e:	4603      	mov	r3, r0
 8014720:	461a      	mov	r2, r3
 8014722:	4b08      	ldr	r3, [pc, #32]	; (8014744 <Data_Processing+0x38>)
 8014724:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 8014726:	4b07      	ldr	r3, [pc, #28]	; (8014744 <Data_Processing+0x38>)
 8014728:	781b      	ldrb	r3, [r3, #0]
 801472a:	2b01      	cmp	r3, #1
 801472c:	d105      	bne.n	801473a <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 801472e:	2000      	movs	r0, #0
 8014730:	f000 f80a 	bl	8014748 <AutoLoadDat>
		}
		break;
 8014734:	e001      	b.n	801473a <Data_Processing+0x2e>
	default:
		break;
 8014736:	bf00      	nop
 8014738:	e000      	b.n	801473c <Data_Processing+0x30>
		break;
 801473a:	bf00      	nop
	}
}
 801473c:	bf00      	nop
 801473e:	bd80      	pop	{r7, pc}
 8014740:	20000a49 	.word	0x20000a49
 8014744:	20000a4a 	.word	0x20000a4a

08014748 <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b084      	sub	sp, #16
 801474c:	af00      	add	r7, sp, #0
 801474e:	4603      	mov	r3, r0
 8014750:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 8014752:	2300      	movs	r3, #0
 8014754:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 8014756:	79fb      	ldrb	r3, [r7, #7]
 8014758:	b29b      	uxth	r3, r3
 801475a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801475e:	4934      	ldr	r1, [pc, #208]	; (8014830 <AutoLoadDat+0xe8>)
 8014760:	4618      	mov	r0, r3
 8014762:	f7f6 fd23 	bl	800b1ac <ReadAndFormConfig>
 8014766:	4603      	mov	r3, r0
 8014768:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 801476a:	4832      	ldr	r0, [pc, #200]	; (8014834 <AutoLoadDat+0xec>)
 801476c:	f004 fc68 	bl	8019040 <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 8014770:	7bbb      	ldrb	r3, [r7, #14]
 8014772:	2b01      	cmp	r3, #1
 8014774:	d921      	bls.n	80147ba <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 8014776:	4b30      	ldr	r3, [pc, #192]	; (8014838 <AutoLoadDat+0xf0>)
 8014778:	2200      	movs	r2, #0
 801477a:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 801477c:	4b2c      	ldr	r3, [pc, #176]	; (8014830 <AutoLoadDat+0xe8>)
 801477e:	785b      	ldrb	r3, [r3, #1]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d107      	bne.n	8014794 <AutoLoadDat+0x4c>
 8014784:	4b2a      	ldr	r3, [pc, #168]	; (8014830 <AutoLoadDat+0xe8>)
 8014786:	789b      	ldrb	r3, [r3, #2]
 8014788:	2b01      	cmp	r3, #1
 801478a:	d103      	bne.n	8014794 <AutoLoadDat+0x4c>
 801478c:	4b28      	ldr	r3, [pc, #160]	; (8014830 <AutoLoadDat+0xe8>)
 801478e:	78db      	ldrb	r3, [r3, #3]
 8014790:	2b04      	cmp	r3, #4
 8014792:	d003      	beq.n	801479c <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 8014794:	4829      	ldr	r0, [pc, #164]	; (801483c <AutoLoadDat+0xf4>)
 8014796:	f00e f987 	bl	8022aa8 <puts>
				return;
 801479a:	e046      	b.n	801482a <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 801479c:	4b28      	ldr	r3, [pc, #160]	; (8014840 <AutoLoadDat+0xf8>)
 801479e:	4a29      	ldr	r2, [pc, #164]	; (8014844 <AutoLoadDat+0xfc>)
 80147a0:	601a      	str	r2, [r3, #0]
			saveConfig();
 80147a2:	f000 f85b 	bl	801485c <saveConfig>
			gucFlagCheck =1;
 80147a6:	4b28      	ldr	r3, [pc, #160]	; (8014848 <AutoLoadDat+0x100>)
 80147a8:	2201      	movs	r2, #1
 80147aa:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 80147ac:	4b27      	ldr	r3, [pc, #156]	; (801484c <AutoLoadDat+0x104>)
 80147ae:	2201      	movs	r2, #1
 80147b0:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 80147b2:	4827      	ldr	r0, [pc, #156]	; (8014850 <AutoLoadDat+0x108>)
 80147b4:	f00e f978 	bl	8022aa8 <puts>
			break;
 80147b8:	e037      	b.n	801482a <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 80147ba:	7bbb      	ldrb	r3, [r7, #14]
 80147bc:	2b01      	cmp	r3, #1
 80147be:	d11b      	bne.n	80147f8 <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 80147c0:	7bfb      	ldrb	r3, [r7, #15]
 80147c2:	2b03      	cmp	r3, #3
 80147c4:	d109      	bne.n	80147da <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 80147c6:	4b1c      	ldr	r3, [pc, #112]	; (8014838 <AutoLoadDat+0xf0>)
 80147c8:	2200      	movs	r2, #0
 80147ca:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 80147cc:	79fb      	ldrb	r3, [r7, #7]
 80147ce:	2203      	movs	r2, #3
 80147d0:	2101      	movs	r1, #1
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7f6 fc9e 	bl	800b114 <SendAck>
				break;
 80147d8:	e027      	b.n	801482a <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 80147da:	79fb      	ldrb	r3, [r7, #7]
 80147dc:	2202      	movs	r2, #2
 80147de:	2101      	movs	r1, #1
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7f6 fc97 	bl	800b114 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 80147e6:	f001 f8c5 	bl	8015974 <HAL_GetTick>
 80147ea:	4603      	mov	r3, r0
 80147ec:	4a19      	ldr	r2, [pc, #100]	; (8014854 <AutoLoadDat+0x10c>)
 80147ee:	6013      	str	r3, [r2, #0]
			AckCount++;
 80147f0:	7bfb      	ldrb	r3, [r7, #15]
 80147f2:	3301      	adds	r3, #1
 80147f4:	73fb      	strb	r3, [r7, #15]
 80147f6:	e7ae      	b.n	8014756 <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 80147f8:	f001 f8bc 	bl	8015974 <HAL_GetTick>
 80147fc:	4602      	mov	r2, r0
 80147fe:	4b15      	ldr	r3, [pc, #84]	; (8014854 <AutoLoadDat+0x10c>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	1ad3      	subs	r3, r2, r3
 8014804:	2b00      	cmp	r3, #0
 8014806:	bfb8      	it	lt
 8014808:	425b      	neglt	r3, r3
 801480a:	f247 5230 	movw	r2, #30000	; 0x7530
 801480e:	4293      	cmp	r3, r2
 8014810:	dda1      	ble.n	8014756 <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 8014812:	4b09      	ldr	r3, [pc, #36]	; (8014838 <AutoLoadDat+0xf0>)
 8014814:	2200      	movs	r2, #0
 8014816:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 8014818:	480f      	ldr	r0, [pc, #60]	; (8014858 <AutoLoadDat+0x110>)
 801481a:	f00e f945 	bl	8022aa8 <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 801481e:	79fb      	ldrb	r3, [r7, #7]
 8014820:	2205      	movs	r2, #5
 8014822:	2101      	movs	r1, #1
 8014824:	4618      	mov	r0, r3
 8014826:	f7f6 fc75 	bl	800b114 <SendAck>
				break;
			}
		}
	}
}
 801482a:	3710      	adds	r7, #16
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}
 8014830:	20000648 	.word	0x20000648
 8014834:	20009d10 	.word	0x20009d10
 8014838:	20000a4a 	.word	0x20000a4a
 801483c:	080276f4 	.word	0x080276f4
 8014840:	20000300 	.word	0x20000300
 8014844:	2000064c 	.word	0x2000064c
 8014848:	20009d30 	.word	0x20009d30
 801484c:	20009d31 	.word	0x20009d31
 8014850:	0802770c 	.word	0x0802770c
 8014854:	20000a4c 	.word	0x20000a4c
 8014858:	0802771c 	.word	0x0802771c

0801485c <saveConfig>:

unsigned char saveConfig(void)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b084      	sub	sp, #16
 8014860:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 8014862:	2300      	movs	r3, #0
 8014864:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 8014866:	4825      	ldr	r0, [pc, #148]	; (80148fc <saveConfig+0xa0>)
 8014868:	f00e f91e 	bl	8022aa8 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 801486c:	2300      	movs	r3, #0
 801486e:	60fb      	str	r3, [r7, #12]
 8014870:	e011      	b.n	8014896 <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	031b      	lsls	r3, r3, #12
 8014876:	4619      	mov	r1, r3
 8014878:	2001      	movs	r0, #1
 801487a:	f7ff fd2f 	bl	80142dc <SPI_MemoryEraseBySector>
 801487e:	4603      	mov	r3, r0
 8014880:	2b00      	cmp	r3, #0
 8014882:	d005      	beq.n	8014890 <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 8014884:	481e      	ldr	r0, [pc, #120]	; (8014900 <saveConfig+0xa4>)
 8014886:	f004 fbdb 	bl	8019040 <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 801488a:	481e      	ldr	r0, [pc, #120]	; (8014904 <saveConfig+0xa8>)
 801488c:	f00e f90c 	bl	8022aa8 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	3301      	adds	r3, #1
 8014894:	60fb      	str	r3, [r7, #12]
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	2b05      	cmp	r3, #5
 801489a:	d9ea      	bls.n	8014872 <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 801489c:	f240 3347 	movw	r3, #839	; 0x347
 80148a0:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 80148a6:	2300      	movs	r3, #0
 80148a8:	60fb      	str	r3, [r7, #12]
 80148aa:	e01d      	b.n	80148e8 <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 80148ac:	4814      	ldr	r0, [pc, #80]	; (8014900 <saveConfig+0xa4>)
 80148ae:	f004 fbc7 	bl	8019040 <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 80148b2:	68bb      	ldr	r3, [r7, #8]
 80148b4:	2b1f      	cmp	r3, #31
 80148b6:	d809      	bhi.n	80148cc <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 80148b8:	68bb      	ldr	r3, [r7, #8]
 80148ba:	b29a      	uxth	r2, r3
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	4912      	ldr	r1, [pc, #72]	; (8014908 <saveConfig+0xac>)
 80148c0:	440b      	add	r3, r1
 80148c2:	68f9      	ldr	r1, [r7, #12]
 80148c4:	2001      	movs	r0, #1
 80148c6:	f7ff fbeb 	bl	80140a0 <SPI_WriteInFlash>
 80148ca:	e00a      	b.n	80148e2 <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	4a0e      	ldr	r2, [pc, #56]	; (8014908 <saveConfig+0xac>)
 80148d0:	4413      	add	r3, r2
 80148d2:	2220      	movs	r2, #32
 80148d4:	68f9      	ldr	r1, [r7, #12]
 80148d6:	2001      	movs	r0, #1
 80148d8:	f7ff fbe2 	bl	80140a0 <SPI_WriteInFlash>
			SIZE_VAR-=32;
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	3b20      	subs	r3, #32
 80148e0:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	3320      	adds	r3, #32
 80148e6:	60fb      	str	r3, [r7, #12]
 80148e8:	68fa      	ldr	r2, [r7, #12]
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	429a      	cmp	r2, r3
 80148ee:	d3dd      	bcc.n	80148ac <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 80148f0:	4806      	ldr	r0, [pc, #24]	; (801490c <saveConfig+0xb0>)
 80148f2:	f00e f83d 	bl	8022970 <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 80148f6:	f7ff faff 	bl	8013ef8 <__NVIC_SystemReset>
 80148fa:	bf00      	nop
 80148fc:	08027738 	.word	0x08027738
 8014900:	20009d10 	.word	0x20009d10
 8014904:	08027744 	.word	0x08027744
 8014908:	20000648 	.word	0x20000648
 801490c:	08027758 	.word	0x08027758

08014910 <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 8014914:	4b14      	ldr	r3, [pc, #80]	; (8014968 <Print_BuildDat_Details+0x58>)
 8014916:	781b      	ldrb	r3, [r3, #0]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d022      	beq.n	8014962 <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 801491c:	4b13      	ldr	r3, [pc, #76]	; (801496c <Print_BuildDat_Details+0x5c>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	4618      	mov	r0, r3
 8014922:	f7fa fa9d 	bl	800ee60 <HAL_Elaps_Ticks>
 8014926:	4603      	mov	r3, r0
 8014928:	f242 720f 	movw	r2, #9999	; 0x270f
 801492c:	4293      	cmp	r3, r2
 801492e:	d919      	bls.n	8014964 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 8014930:	480f      	ldr	r0, [pc, #60]	; (8014970 <Print_BuildDat_Details+0x60>)
 8014932:	f00e f8b9 	bl	8022aa8 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 8014936:	490f      	ldr	r1, [pc, #60]	; (8014974 <Print_BuildDat_Details+0x64>)
 8014938:	480f      	ldr	r0, [pc, #60]	; (8014978 <Print_BuildDat_Details+0x68>)
 801493a:	f00e f819 	bl	8022970 <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 801493e:	4b0f      	ldr	r3, [pc, #60]	; (801497c <Print_BuildDat_Details+0x6c>)
 8014940:	881b      	ldrh	r3, [r3, #0]
 8014942:	4619      	mov	r1, r3
 8014944:	480e      	ldr	r0, [pc, #56]	; (8014980 <Print_BuildDat_Details+0x70>)
 8014946:	f00e f813 	bl	8022970 <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 801494a:	4b0e      	ldr	r3, [pc, #56]	; (8014984 <Print_BuildDat_Details+0x74>)
 801494c:	881b      	ldrh	r3, [r3, #0]
 801494e:	4619      	mov	r1, r3
 8014950:	480d      	ldr	r0, [pc, #52]	; (8014988 <Print_BuildDat_Details+0x78>)
 8014952:	f00e f80d 	bl	8022970 <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 8014956:	f001 f80d 	bl	8015974 <HAL_GetTick>
 801495a:	4603      	mov	r3, r0
 801495c:	4a03      	ldr	r2, [pc, #12]	; (801496c <Print_BuildDat_Details+0x5c>)
 801495e:	6013      	str	r3, [r2, #0]
 8014960:	e000      	b.n	8014964 <Print_BuildDat_Details+0x54>
		return;
 8014962:	bf00      	nop
	}
}
 8014964:	bd80      	pop	{r7, pc}
 8014966:	bf00      	nop
 8014968:	20000645 	.word	0x20000645
 801496c:	20009dac 	.word	0x20009dac
 8014970:	08027774 	.word	0x08027774
 8014974:	20000305 	.word	0x20000305
 8014978:	080277a8 	.word	0x080277a8
 801497c:	20009d46 	.word	0x20009d46
 8014980:	080277bc 	.word	0x080277bc
 8014984:	20009d44 	.word	0x20009d44
 8014988:	080277cc 	.word	0x080277cc

0801498c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8014992:	4b0f      	ldr	r3, [pc, #60]	; (80149d0 <HAL_MspInit+0x44>)
 8014994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014996:	4a0e      	ldr	r2, [pc, #56]	; (80149d0 <HAL_MspInit+0x44>)
 8014998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801499c:	6413      	str	r3, [r2, #64]	; 0x40
 801499e:	4b0c      	ldr	r3, [pc, #48]	; (80149d0 <HAL_MspInit+0x44>)
 80149a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80149a6:	607b      	str	r3, [r7, #4]
 80149a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80149aa:	4b09      	ldr	r3, [pc, #36]	; (80149d0 <HAL_MspInit+0x44>)
 80149ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149ae:	4a08      	ldr	r2, [pc, #32]	; (80149d0 <HAL_MspInit+0x44>)
 80149b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80149b4:	6453      	str	r3, [r2, #68]	; 0x44
 80149b6:	4b06      	ldr	r3, [pc, #24]	; (80149d0 <HAL_MspInit+0x44>)
 80149b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80149be:	603b      	str	r3, [r7, #0]
 80149c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80149c2:	2004      	movs	r0, #4
 80149c4:	f001 ffac 	bl	8016920 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80149c8:	bf00      	nop
 80149ca:	3708      	adds	r7, #8
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd80      	pop	{r7, pc}
 80149d0:	40023800 	.word	0x40023800

080149d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80149d4:	b480      	push	{r7}
 80149d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80149d8:	e7fe      	b.n	80149d8 <NMI_Handler+0x4>

080149da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80149da:	b480      	push	{r7}
 80149dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80149de:	e7fe      	b.n	80149de <HardFault_Handler+0x4>

080149e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80149e0:	b480      	push	{r7}
 80149e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80149e4:	e7fe      	b.n	80149e4 <MemManage_Handler+0x4>

080149e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80149e6:	b480      	push	{r7}
 80149e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80149ea:	e7fe      	b.n	80149ea <BusFault_Handler+0x4>

080149ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80149ec:	b480      	push	{r7}
 80149ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80149f0:	e7fe      	b.n	80149f0 <UsageFault_Handler+0x4>

080149f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80149f2:	b480      	push	{r7}
 80149f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80149f6:	bf00      	nop
 80149f8:	46bd      	mov	sp, r7
 80149fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fe:	4770      	bx	lr

08014a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014a00:	b480      	push	{r7}
 8014a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014a04:	bf00      	nop
 8014a06:	46bd      	mov	sp, r7
 8014a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0c:	4770      	bx	lr

08014a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014a0e:	b480      	push	{r7}
 8014a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014a12:	bf00      	nop
 8014a14:	46bd      	mov	sp, r7
 8014a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1a:	4770      	bx	lr

08014a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014a20:	f000 ff94 	bl	801594c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014a24:	bf00      	nop
 8014a26:	bd80      	pop	{r7, pc}

08014a28 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 8014a2c:	2001      	movs	r0, #1
 8014a2e:	f003 fca5 	bl	801837c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8014a32:	bf00      	nop
 8014a34:	bd80      	pop	{r7, pc}

08014a36 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8014a36:	b580      	push	{r7, lr}
 8014a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 8014a3a:	2002      	movs	r0, #2
 8014a3c:	f003 fc9e 	bl	801837c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8014a40:	bf00      	nop
 8014a42:	bd80      	pop	{r7, pc}

08014a44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8014a48:	4802      	ldr	r0, [pc, #8]	; (8014a54 <TIM4_IRQHandler+0x10>)
 8014a4a:	f006 fbbb 	bl	801b1c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8014a4e:	bf00      	nop
 8014a50:	bd80      	pop	{r7, pc}
 8014a52:	bf00      	nop
 8014a54:	20009db4 	.word	0x20009db4

08014a58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8014a5c:	4802      	ldr	r0, [pc, #8]	; (8014a68 <USART1_IRQHandler+0x10>)
 8014a5e:	f006 fdd5 	bl	801b60c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8014a62:	bf00      	nop
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	2000bce8 	.word	0x2000bce8

08014a6c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8014a70:	4802      	ldr	r0, [pc, #8]	; (8014a7c <TIM5_IRQHandler+0x10>)
 8014a72:	f006 fba7 	bl	801b1c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8014a76:	bf00      	nop
 8014a78:	bd80      	pop	{r7, pc}
 8014a7a:	bf00      	nop
 8014a7c:	20009e70 	.word	0x20009e70

08014a80 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8014a84:	4802      	ldr	r0, [pc, #8]	; (8014a90 <UART4_IRQHandler+0x10>)
 8014a86:	f006 fdc1 	bl	801b60c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8014a8a:	bf00      	nop
 8014a8c:	bd80      	pop	{r7, pc}
 8014a8e:	bf00      	nop
 8014a90:	2000bac0 	.word	0x2000bac0

08014a94 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8014a98:	4802      	ldr	r0, [pc, #8]	; (8014aa4 <UART5_IRQHandler+0x10>)
 8014a9a:	f006 fdb7 	bl	801b60c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8014a9e:	bf00      	nop
 8014aa0:	bd80      	pop	{r7, pc}
 8014aa2:	bf00      	nop
 8014aa4:	2000bb78 	.word	0x2000bb78

08014aa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8014aac:	4802      	ldr	r0, [pc, #8]	; (8014ab8 <TIM6_DAC_IRQHandler+0x10>)
 8014aae:	f006 fb89 	bl	801b1c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8014ab2:	bf00      	nop
 8014ab4:	bd80      	pop	{r7, pc}
 8014ab6:	bf00      	nop
 8014ab8:	20009f2c 	.word	0x20009f2c

08014abc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8014ac0:	4802      	ldr	r0, [pc, #8]	; (8014acc <TIM7_IRQHandler+0x10>)
 8014ac2:	f006 fb7f 	bl	801b1c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8014ac6:	bf00      	nop
 8014ac8:	bd80      	pop	{r7, pc}
 8014aca:	bf00      	nop
 8014acc:	20009fe8 	.word	0x20009fe8

08014ad0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8014ad4:	4802      	ldr	r0, [pc, #8]	; (8014ae0 <ETH_IRQHandler+0x10>)
 8014ad6:	f002 fb73 	bl	80171c0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8014ada:	bf00      	nop
 8014adc:	bd80      	pop	{r7, pc}
 8014ade:	bf00      	nop
 8014ae0:	200106fc 	.word	0x200106fc

08014ae4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8014ae8:	4802      	ldr	r0, [pc, #8]	; (8014af4 <CAN2_RX0_IRQHandler+0x10>)
 8014aea:	f001 fc15 	bl	8016318 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8014aee:	bf00      	nop
 8014af0:	bd80      	pop	{r7, pc}
 8014af2:	bf00      	nop
 8014af4:	20009b8c 	.word	0x20009b8c

08014af8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8014afc:	4802      	ldr	r0, [pc, #8]	; (8014b08 <CAN2_RX1_IRQHandler+0x10>)
 8014afe:	f001 fc0b 	bl	8016318 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8014b02:	bf00      	nop
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	bf00      	nop
 8014b08:	20009b8c 	.word	0x20009b8c

08014b0c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8014b10:	4802      	ldr	r0, [pc, #8]	; (8014b1c <UART7_IRQHandler+0x10>)
 8014b12:	f006 fd7b 	bl	801b60c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8014b16:	bf00      	nop
 8014b18:	bd80      	pop	{r7, pc}
 8014b1a:	bf00      	nop
 8014b1c:	2000bc30 	.word	0x2000bc30

08014b20 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8014b24:	4802      	ldr	r0, [pc, #8]	; (8014b30 <CAN3_RX0_IRQHandler+0x10>)
 8014b26:	f001 fbf7 	bl	8016318 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8014b2a:	bf00      	nop
 8014b2c:	bd80      	pop	{r7, pc}
 8014b2e:	bf00      	nop
 8014b30:	20009bf0 	.word	0x20009bf0

08014b34 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8014b38:	4802      	ldr	r0, [pc, #8]	; (8014b44 <CAN3_RX1_IRQHandler+0x10>)
 8014b3a:	f001 fbed 	bl	8016318 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 8014b3e:	bf00      	nop
 8014b40:	bd80      	pop	{r7, pc}
 8014b42:	bf00      	nop
 8014b44:	20009bf0 	.word	0x20009bf0

08014b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8014b48:	b480      	push	{r7}
 8014b4a:	af00      	add	r7, sp, #0
	return 1;
 8014b4c:	2301      	movs	r3, #1
}
 8014b4e:	4618      	mov	r0, r3
 8014b50:	46bd      	mov	sp, r7
 8014b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b56:	4770      	bx	lr

08014b58 <_kill>:

int _kill(int pid, int sig)
{
 8014b58:	b480      	push	{r7}
 8014b5a:	b083      	sub	sp, #12
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
 8014b60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8014b62:	4b05      	ldr	r3, [pc, #20]	; (8014b78 <_kill+0x20>)
 8014b64:	2216      	movs	r2, #22
 8014b66:	601a      	str	r2, [r3, #0]
	return -1;
 8014b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	370c      	adds	r7, #12
 8014b70:	46bd      	mov	sp, r7
 8014b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b76:	4770      	bx	lr
 8014b78:	20014340 	.word	0x20014340

08014b7c <_exit>:

void _exit (int status)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b082      	sub	sp, #8
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8014b84:	f04f 31ff 	mov.w	r1, #4294967295
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f7ff ffe5 	bl	8014b58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8014b8e:	e7fe      	b.n	8014b8e <_exit+0x12>

08014b90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b086      	sub	sp, #24
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	60b9      	str	r1, [r7, #8]
 8014b9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	617b      	str	r3, [r7, #20]
 8014ba0:	e00a      	b.n	8014bb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8014ba2:	f3af 8000 	nop.w
 8014ba6:	4601      	mov	r1, r0
 8014ba8:	68bb      	ldr	r3, [r7, #8]
 8014baa:	1c5a      	adds	r2, r3, #1
 8014bac:	60ba      	str	r2, [r7, #8]
 8014bae:	b2ca      	uxtb	r2, r1
 8014bb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	3301      	adds	r3, #1
 8014bb6:	617b      	str	r3, [r7, #20]
 8014bb8:	697a      	ldr	r2, [r7, #20]
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	dbf0      	blt.n	8014ba2 <_read+0x12>
	}

return len;
 8014bc0:	687b      	ldr	r3, [r7, #4]
}
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	3718      	adds	r7, #24
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}

08014bca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8014bca:	b580      	push	{r7, lr}
 8014bcc:	b086      	sub	sp, #24
 8014bce:	af00      	add	r7, sp, #0
 8014bd0:	60f8      	str	r0, [r7, #12]
 8014bd2:	60b9      	str	r1, [r7, #8]
 8014bd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	617b      	str	r3, [r7, #20]
 8014bda:	e009      	b.n	8014bf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	1c5a      	adds	r2, r3, #1
 8014be0:	60ba      	str	r2, [r7, #8]
 8014be2:	781b      	ldrb	r3, [r3, #0]
 8014be4:	4618      	mov	r0, r3
 8014be6:	f7eb ff55 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014bea:	697b      	ldr	r3, [r7, #20]
 8014bec:	3301      	adds	r3, #1
 8014bee:	617b      	str	r3, [r7, #20]
 8014bf0:	697a      	ldr	r2, [r7, #20]
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	dbf1      	blt.n	8014bdc <_write+0x12>
	}
	return len;
 8014bf8:	687b      	ldr	r3, [r7, #4]
}
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	3718      	adds	r7, #24
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}

08014c02 <_close>:

int _close(int file)
{
 8014c02:	b480      	push	{r7}
 8014c04:	b083      	sub	sp, #12
 8014c06:	af00      	add	r7, sp, #0
 8014c08:	6078      	str	r0, [r7, #4]
	return -1;
 8014c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	370c      	adds	r7, #12
 8014c12:	46bd      	mov	sp, r7
 8014c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c18:	4770      	bx	lr

08014c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8014c1a:	b480      	push	{r7}
 8014c1c:	b083      	sub	sp, #12
 8014c1e:	af00      	add	r7, sp, #0
 8014c20:	6078      	str	r0, [r7, #4]
 8014c22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014c2a:	605a      	str	r2, [r3, #4]
	return 0;
 8014c2c:	2300      	movs	r3, #0
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	370c      	adds	r7, #12
 8014c32:	46bd      	mov	sp, r7
 8014c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c38:	4770      	bx	lr

08014c3a <_isatty>:

int _isatty(int file)
{
 8014c3a:	b480      	push	{r7}
 8014c3c:	b083      	sub	sp, #12
 8014c3e:	af00      	add	r7, sp, #0
 8014c40:	6078      	str	r0, [r7, #4]
	return 1;
 8014c42:	2301      	movs	r3, #1
}
 8014c44:	4618      	mov	r0, r3
 8014c46:	370c      	adds	r7, #12
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4e:	4770      	bx	lr

08014c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8014c50:	b480      	push	{r7}
 8014c52:	b085      	sub	sp, #20
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	60f8      	str	r0, [r7, #12]
 8014c58:	60b9      	str	r1, [r7, #8]
 8014c5a:	607a      	str	r2, [r7, #4]
	return 0;
 8014c5c:	2300      	movs	r3, #0
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3714      	adds	r7, #20
 8014c62:	46bd      	mov	sp, r7
 8014c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c68:	4770      	bx	lr
	...

08014c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8014c6c:	b480      	push	{r7}
 8014c6e:	b087      	sub	sp, #28
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8014c74:	4a14      	ldr	r2, [pc, #80]	; (8014cc8 <_sbrk+0x5c>)
 8014c76:	4b15      	ldr	r3, [pc, #84]	; (8014ccc <_sbrk+0x60>)
 8014c78:	1ad3      	subs	r3, r2, r3
 8014c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8014c7c:	697b      	ldr	r3, [r7, #20]
 8014c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8014c80:	4b13      	ldr	r3, [pc, #76]	; (8014cd0 <_sbrk+0x64>)
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d102      	bne.n	8014c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8014c88:	4b11      	ldr	r3, [pc, #68]	; (8014cd0 <_sbrk+0x64>)
 8014c8a:	4a12      	ldr	r2, [pc, #72]	; (8014cd4 <_sbrk+0x68>)
 8014c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8014c8e:	4b10      	ldr	r3, [pc, #64]	; (8014cd0 <_sbrk+0x64>)
 8014c90:	681a      	ldr	r2, [r3, #0]
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	4413      	add	r3, r2
 8014c96:	693a      	ldr	r2, [r7, #16]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d205      	bcs.n	8014ca8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8014c9c:	4b0e      	ldr	r3, [pc, #56]	; (8014cd8 <_sbrk+0x6c>)
 8014c9e:	220c      	movs	r2, #12
 8014ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8014ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ca6:	e009      	b.n	8014cbc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8014ca8:	4b09      	ldr	r3, [pc, #36]	; (8014cd0 <_sbrk+0x64>)
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8014cae:	4b08      	ldr	r3, [pc, #32]	; (8014cd0 <_sbrk+0x64>)
 8014cb0:	681a      	ldr	r2, [r3, #0]
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	4413      	add	r3, r2
 8014cb6:	4a06      	ldr	r2, [pc, #24]	; (8014cd0 <_sbrk+0x64>)
 8014cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8014cba:	68fb      	ldr	r3, [r7, #12]
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	371c      	adds	r7, #28
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc6:	4770      	bx	lr
 8014cc8:	20080000 	.word	0x20080000
 8014ccc:	00000400 	.word	0x00000400
 8014cd0:	20009db0 	.word	0x20009db0
 8014cd4:	20014348 	.word	0x20014348
 8014cd8:	20014340 	.word	0x20014340

08014cdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014cdc:	b480      	push	{r7}
 8014cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014ce0:	4b06      	ldr	r3, [pc, #24]	; (8014cfc <SystemInit+0x20>)
 8014ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014ce6:	4a05      	ldr	r2, [pc, #20]	; (8014cfc <SystemInit+0x20>)
 8014ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8014cf0:	bf00      	nop
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf8:	4770      	bx	lr
 8014cfa:	bf00      	nop
 8014cfc:	e000ed00 	.word	0xe000ed00

08014d00 <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8014d04:	4b16      	ldr	r3, [pc, #88]	; (8014d60 <MX_USART1_UART_Init+0x60>)
 8014d06:	4a17      	ldr	r2, [pc, #92]	; (8014d64 <MX_USART1_UART_Init+0x64>)
 8014d08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8014d0a:	4b15      	ldr	r3, [pc, #84]	; (8014d60 <MX_USART1_UART_Init+0x60>)
 8014d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014d10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8014d12:	4b13      	ldr	r3, [pc, #76]	; (8014d60 <MX_USART1_UART_Init+0x60>)
 8014d14:	2200      	movs	r2, #0
 8014d16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8014d18:	4b11      	ldr	r3, [pc, #68]	; (8014d60 <MX_USART1_UART_Init+0x60>)
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8014d1e:	4b10      	ldr	r3, [pc, #64]	; (8014d60 <MX_USART1_UART_Init+0x60>)
 8014d20:	2200      	movs	r2, #0
 8014d22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8014d24:	4b0e      	ldr	r3, [pc, #56]	; (8014d60 <MX_USART1_UART_Init+0x60>)
 8014d26:	220c      	movs	r2, #12
 8014d28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014d2a:	4b0d      	ldr	r3, [pc, #52]	; (8014d60 <MX_USART1_UART_Init+0x60>)
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8014d30:	4b0b      	ldr	r3, [pc, #44]	; (8014d60 <MX_USART1_UART_Init+0x60>)
 8014d32:	2200      	movs	r2, #0
 8014d34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014d36:	4b0a      	ldr	r3, [pc, #40]	; (8014d60 <MX_USART1_UART_Init+0x60>)
 8014d38:	2200      	movs	r2, #0
 8014d3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014d3c:	4b08      	ldr	r3, [pc, #32]	; (8014d60 <MX_USART1_UART_Init+0x60>)
 8014d3e:	2200      	movs	r2, #0
 8014d40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8014d42:	4807      	ldr	r0, [pc, #28]	; (8014d60 <MX_USART1_UART_Init+0x60>)
 8014d44:	f006 fb80 	bl	801b448 <HAL_UART_Init>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d001      	beq.n	8014d52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8014d4e:	f7ff f885 	bl	8013e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014d52:	2280      	movs	r2, #128	; 0x80
 8014d54:	4904      	ldr	r1, [pc, #16]	; (8014d68 <MX_USART1_UART_Init+0x68>)
 8014d56:	4802      	ldr	r0, [pc, #8]	; (8014d60 <MX_USART1_UART_Init+0x60>)
 8014d58:	f007 fee2 	bl	801cb20 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8014d5c:	bf00      	nop
 8014d5e:	bd80      	pop	{r7, pc}
 8014d60:	2000bce8 	.word	0x2000bce8
 8014d64:	40011000 	.word	0x40011000
 8014d68:	2000b8c0 	.word	0x2000b8c0

08014d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b0b4      	sub	sp, #208	; 0xd0
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014d74:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014d78:	2200      	movs	r2, #0
 8014d7a:	601a      	str	r2, [r3, #0]
 8014d7c:	605a      	str	r2, [r3, #4]
 8014d7e:	609a      	str	r2, [r3, #8]
 8014d80:	60da      	str	r2, [r3, #12]
 8014d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014d88:	2290      	movs	r2, #144	; 0x90
 8014d8a:	2100      	movs	r1, #0
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f00d fd07 	bl	80227a0 <memset>
  if(uartHandle->Instance==UART4)
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	4aa7      	ldr	r2, [pc, #668]	; (8015034 <HAL_UART_MspInit+0x2c8>)
 8014d98:	4293      	cmp	r3, r2
 8014d9a:	d145      	bne.n	8014e28 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8014d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8014da2:	2300      	movs	r3, #0
 8014da4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014daa:	4618      	mov	r0, r3
 8014dac:	f004 fdec 	bl	8019988 <HAL_RCCEx_PeriphCLKConfig>
 8014db0:	4603      	mov	r3, r0
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d001      	beq.n	8014dba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8014db6:	f7ff f851 	bl	8013e5c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8014dba:	4b9f      	ldr	r3, [pc, #636]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dbe:	4a9e      	ldr	r2, [pc, #632]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014dc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8014dc6:	4b9c      	ldr	r3, [pc, #624]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8014dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8014dd2:	4b99      	ldr	r3, [pc, #612]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dd6:	4a98      	ldr	r2, [pc, #608]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8014dde:	4b96      	ldr	r3, [pc, #600]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014de6:	627b      	str	r3, [r7, #36]	; 0x24
 8014de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 8014dea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8014dee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014df2:	2302      	movs	r3, #2
 8014df4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014df8:	2300      	movs	r3, #0
 8014dfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014dfe:	2303      	movs	r3, #3
 8014e00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8014e04:	2308      	movs	r3, #8
 8014e06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8014e0a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014e0e:	4619      	mov	r1, r3
 8014e10:	488a      	ldr	r0, [pc, #552]	; (801503c <HAL_UART_MspInit+0x2d0>)
 8014e12:	f003 f8bb 	bl	8017f8c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8014e16:	2200      	movs	r2, #0
 8014e18:	2105      	movs	r1, #5
 8014e1a:	2034      	movs	r0, #52	; 0x34
 8014e1c:	f001 fd8b 	bl	8016936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8014e20:	2034      	movs	r0, #52	; 0x34
 8014e22:	f001 fda4 	bl	801696e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8014e26:	e100      	b.n	801502a <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	4a84      	ldr	r2, [pc, #528]	; (8015040 <HAL_UART_MspInit+0x2d4>)
 8014e2e:	4293      	cmp	r3, r2
 8014e30:	d167      	bne.n	8014f02 <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8014e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8014e38:	2300      	movs	r3, #0
 8014e3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014e42:	4618      	mov	r0, r3
 8014e44:	f004 fda0 	bl	8019988 <HAL_RCCEx_PeriphCLKConfig>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d001      	beq.n	8014e52 <HAL_UART_MspInit+0xe6>
      Error_Handler();
 8014e4e:	f7ff f805 	bl	8013e5c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8014e52:	4b79      	ldr	r3, [pc, #484]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e56:	4a78      	ldr	r2, [pc, #480]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8014e5e:	4b76      	ldr	r3, [pc, #472]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014e66:	623b      	str	r3, [r7, #32]
 8014e68:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014e6a:	4b73      	ldr	r3, [pc, #460]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e6e:	4a72      	ldr	r2, [pc, #456]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014e70:	f043 0308 	orr.w	r3, r3, #8
 8014e74:	6313      	str	r3, [r2, #48]	; 0x30
 8014e76:	4b70      	ldr	r3, [pc, #448]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e7a:	f003 0308 	and.w	r3, r3, #8
 8014e7e:	61fb      	str	r3, [r7, #28]
 8014e80:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014e82:	4b6d      	ldr	r3, [pc, #436]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e86:	4a6c      	ldr	r2, [pc, #432]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014e88:	f043 0302 	orr.w	r3, r3, #2
 8014e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8014e8e:	4b6a      	ldr	r3, [pc, #424]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e92:	f003 0302 	and.w	r3, r3, #2
 8014e96:	61bb      	str	r3, [r7, #24]
 8014e98:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8014e9a:	2304      	movs	r3, #4
 8014e9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ea0:	2302      	movs	r3, #2
 8014ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014eac:	2303      	movs	r3, #3
 8014eae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8014eb2:	2308      	movs	r3, #8
 8014eb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8014eb8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014ebc:	4619      	mov	r1, r3
 8014ebe:	4861      	ldr	r0, [pc, #388]	; (8015044 <HAL_UART_MspInit+0x2d8>)
 8014ec0:	f003 f864 	bl	8017f8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8014ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014ec8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ecc:	2302      	movs	r3, #2
 8014ece:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014ed8:	2303      	movs	r3, #3
 8014eda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8014ede:	2307      	movs	r3, #7
 8014ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8014ee4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014ee8:	4619      	mov	r1, r3
 8014eea:	4857      	ldr	r0, [pc, #348]	; (8015048 <HAL_UART_MspInit+0x2dc>)
 8014eec:	f003 f84e 	bl	8017f8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	2105      	movs	r1, #5
 8014ef4:	2035      	movs	r0, #53	; 0x35
 8014ef6:	f001 fd1e 	bl	8016936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8014efa:	2035      	movs	r0, #53	; 0x35
 8014efc:	f001 fd37 	bl	801696e <HAL_NVIC_EnableIRQ>
}
 8014f00:	e093      	b.n	801502a <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	4a51      	ldr	r2, [pc, #324]	; (801504c <HAL_UART_MspInit+0x2e0>)
 8014f08:	4293      	cmp	r3, r2
 8014f0a:	d145      	bne.n	8014f98 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8014f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8014f12:	2300      	movs	r3, #0
 8014f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f004 fd33 	bl	8019988 <HAL_RCCEx_PeriphCLKConfig>
 8014f22:	4603      	mov	r3, r0
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d001      	beq.n	8014f2c <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8014f28:	f7fe ff98 	bl	8013e5c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8014f2c:	4b42      	ldr	r3, [pc, #264]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f30:	4a41      	ldr	r2, [pc, #260]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014f32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014f36:	6413      	str	r3, [r2, #64]	; 0x40
 8014f38:	4b3f      	ldr	r3, [pc, #252]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014f40:	617b      	str	r3, [r7, #20]
 8014f42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014f44:	4b3c      	ldr	r3, [pc, #240]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f48:	4a3b      	ldr	r2, [pc, #236]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014f4a:	f043 0320 	orr.w	r3, r3, #32
 8014f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8014f50:	4b39      	ldr	r3, [pc, #228]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f54:	f003 0320 	and.w	r3, r3, #32
 8014f58:	613b      	str	r3, [r7, #16]
 8014f5a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 8014f5c:	23c0      	movs	r3, #192	; 0xc0
 8014f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f62:	2302      	movs	r3, #2
 8014f64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f68:	2300      	movs	r3, #0
 8014f6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014f6e:	2303      	movs	r3, #3
 8014f70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8014f74:	2308      	movs	r3, #8
 8014f76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014f7a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014f7e:	4619      	mov	r1, r3
 8014f80:	4833      	ldr	r0, [pc, #204]	; (8015050 <HAL_UART_MspInit+0x2e4>)
 8014f82:	f003 f803 	bl	8017f8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8014f86:	2200      	movs	r2, #0
 8014f88:	2105      	movs	r1, #5
 8014f8a:	2052      	movs	r0, #82	; 0x52
 8014f8c:	f001 fcd3 	bl	8016936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8014f90:	2052      	movs	r0, #82	; 0x52
 8014f92:	f001 fcec 	bl	801696e <HAL_NVIC_EnableIRQ>
}
 8014f96:	e048      	b.n	801502a <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	4a2d      	ldr	r2, [pc, #180]	; (8015054 <HAL_UART_MspInit+0x2e8>)
 8014f9e:	4293      	cmp	r3, r2
 8014fa0:	d143      	bne.n	801502a <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8014fa2:	2340      	movs	r3, #64	; 0x40
 8014fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f004 fcea 	bl	8019988 <HAL_RCCEx_PeriphCLKConfig>
 8014fb4:	4603      	mov	r3, r0
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d001      	beq.n	8014fbe <HAL_UART_MspInit+0x252>
      Error_Handler();
 8014fba:	f7fe ff4f 	bl	8013e5c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8014fbe:	4b1e      	ldr	r3, [pc, #120]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fc2:	4a1d      	ldr	r2, [pc, #116]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014fc4:	f043 0310 	orr.w	r3, r3, #16
 8014fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8014fca:	4b1b      	ldr	r3, [pc, #108]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fce:	f003 0310 	and.w	r3, r3, #16
 8014fd2:	60fb      	str	r3, [r7, #12]
 8014fd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014fd6:	4b18      	ldr	r3, [pc, #96]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fda:	4a17      	ldr	r2, [pc, #92]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014fdc:	f043 0301 	orr.w	r3, r3, #1
 8014fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8014fe2:	4b15      	ldr	r3, [pc, #84]	; (8015038 <HAL_UART_MspInit+0x2cc>)
 8014fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fe6:	f003 0301 	and.w	r3, r3, #1
 8014fea:	60bb      	str	r3, [r7, #8]
 8014fec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8014fee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8014ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ff6:	2302      	movs	r3, #2
 8014ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015002:	2303      	movs	r3, #3
 8015004:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8015008:	2307      	movs	r3, #7
 801500a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801500e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015012:	4619      	mov	r1, r3
 8015014:	4810      	ldr	r0, [pc, #64]	; (8015058 <HAL_UART_MspInit+0x2ec>)
 8015016:	f002 ffb9 	bl	8017f8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 801501a:	2200      	movs	r2, #0
 801501c:	2107      	movs	r1, #7
 801501e:	2025      	movs	r0, #37	; 0x25
 8015020:	f001 fc89 	bl	8016936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8015024:	2025      	movs	r0, #37	; 0x25
 8015026:	f001 fca2 	bl	801696e <HAL_NVIC_EnableIRQ>
}
 801502a:	bf00      	nop
 801502c:	37d0      	adds	r7, #208	; 0xd0
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}
 8015032:	bf00      	nop
 8015034:	40004c00 	.word	0x40004c00
 8015038:	40023800 	.word	0x40023800
 801503c:	40021c00 	.word	0x40021c00
 8015040:	40005000 	.word	0x40005000
 8015044:	40020c00 	.word	0x40020c00
 8015048:	40020400 	.word	0x40020400
 801504c:	40007800 	.word	0x40007800
 8015050:	40021400 	.word	0x40021400
 8015054:	40011000 	.word	0x40011000
 8015058:	40020000 	.word	0x40020000

0801505c <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 801505c:	b580      	push	{r7, lr}
 801505e:	b082      	sub	sp, #8
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8015064:	4b17      	ldr	r3, [pc, #92]	; (80150c4 <UART4_Init+0x68>)
 8015066:	4a18      	ldr	r2, [pc, #96]	; (80150c8 <UART4_Init+0x6c>)
 8015068:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 801506a:	4a16      	ldr	r2, [pc, #88]	; (80150c4 <UART4_Init+0x68>)
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8015070:	4b14      	ldr	r3, [pc, #80]	; (80150c4 <UART4_Init+0x68>)
 8015072:	2200      	movs	r2, #0
 8015074:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8015076:	4b13      	ldr	r3, [pc, #76]	; (80150c4 <UART4_Init+0x68>)
 8015078:	2200      	movs	r2, #0
 801507a:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 801507c:	4b11      	ldr	r3, [pc, #68]	; (80150c4 <UART4_Init+0x68>)
 801507e:	2200      	movs	r2, #0
 8015080:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8015082:	4b10      	ldr	r3, [pc, #64]	; (80150c4 <UART4_Init+0x68>)
 8015084:	220c      	movs	r2, #12
 8015086:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8015088:	4b0e      	ldr	r3, [pc, #56]	; (80150c4 <UART4_Init+0x68>)
 801508a:	2200      	movs	r2, #0
 801508c:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 801508e:	4b0d      	ldr	r3, [pc, #52]	; (80150c4 <UART4_Init+0x68>)
 8015090:	2200      	movs	r2, #0
 8015092:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8015094:	4b0b      	ldr	r3, [pc, #44]	; (80150c4 <UART4_Init+0x68>)
 8015096:	2200      	movs	r2, #0
 8015098:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801509a:	4b0a      	ldr	r3, [pc, #40]	; (80150c4 <UART4_Init+0x68>)
 801509c:	2200      	movs	r2, #0
 801509e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80150a0:	4808      	ldr	r0, [pc, #32]	; (80150c4 <UART4_Init+0x68>)
 80150a2:	f006 f9d1 	bl	801b448 <HAL_UART_Init>
 80150a6:	4603      	mov	r3, r0
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d001      	beq.n	80150b0 <UART4_Init+0x54>
	{
		Error_Handler();
 80150ac:	f7fe fed6 	bl	8013e5c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80150b0:	2280      	movs	r2, #128	; 0x80
 80150b2:	4906      	ldr	r1, [pc, #24]	; (80150cc <UART4_Init+0x70>)
 80150b4:	4803      	ldr	r0, [pc, #12]	; (80150c4 <UART4_Init+0x68>)
 80150b6:	f007 fd33 	bl	801cb20 <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 80150ba:	bf00      	nop
 80150bc:	3708      	adds	r7, #8
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}
 80150c2:	bf00      	nop
 80150c4:	2000bac0 	.word	0x2000bac0
 80150c8:	40004c00 	.word	0x40004c00
 80150cc:	2000ba40 	.word	0x2000ba40

080150d0 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b084      	sub	sp, #16
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	460b      	mov	r3, r1
 80150da:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	4a60      	ldr	r2, [pc, #384]	; (8015264 <HAL_UARTEx_RxEventCallback+0x194>)
 80150e2:	4293      	cmp	r3, r2
 80150e4:	d129      	bne.n	801513a <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80150e6:	2280      	movs	r2, #128	; 0x80
 80150e8:	495f      	ldr	r1, [pc, #380]	; (8015268 <HAL_UARTEx_RxEventCallback+0x198>)
 80150ea:	4860      	ldr	r0, [pc, #384]	; (801526c <HAL_UARTEx_RxEventCallback+0x19c>)
 80150ec:	f007 fd18 	bl	801cb20 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 80150f0:	2300      	movs	r3, #0
 80150f2:	81fb      	strh	r3, [r7, #14]
 80150f4:	e017      	b.n	8015126 <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 80150f6:	89fa      	ldrh	r2, [r7, #14]
 80150f8:	4b5d      	ldr	r3, [pc, #372]	; (8015270 <HAL_UARTEx_RxEventCallback+0x1a0>)
 80150fa:	881b      	ldrh	r3, [r3, #0]
 80150fc:	1c59      	adds	r1, r3, #1
 80150fe:	b288      	uxth	r0, r1
 8015100:	495b      	ldr	r1, [pc, #364]	; (8015270 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8015102:	8008      	strh	r0, [r1, #0]
 8015104:	4619      	mov	r1, r3
 8015106:	4b58      	ldr	r3, [pc, #352]	; (8015268 <HAL_UARTEx_RxEventCallback+0x198>)
 8015108:	5c9a      	ldrb	r2, [r3, r2]
 801510a:	4b59      	ldr	r3, [pc, #356]	; (8015270 <HAL_UARTEx_RxEventCallback+0x1a0>)
 801510c:	440b      	add	r3, r1
 801510e:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 8015110:	4b57      	ldr	r3, [pc, #348]	; (8015270 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8015112:	881b      	ldrh	r3, [r3, #0]
 8015114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015118:	d302      	bcc.n	8015120 <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 801511a:	4b55      	ldr	r3, [pc, #340]	; (8015270 <HAL_UARTEx_RxEventCallback+0x1a0>)
 801511c:	2200      	movs	r2, #0
 801511e:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 8015120:	89fb      	ldrh	r3, [r7, #14]
 8015122:	3301      	adds	r3, #1
 8015124:	81fb      	strh	r3, [r7, #14]
 8015126:	89fa      	ldrh	r2, [r7, #14]
 8015128:	887b      	ldrh	r3, [r7, #2]
 801512a:	429a      	cmp	r2, r3
 801512c:	d3e3      	bcc.n	80150f6 <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 801512e:	f000 fc21 	bl	8015974 <HAL_GetTick>
 8015132:	4603      	mov	r3, r0
 8015134:	4a4f      	ldr	r2, [pc, #316]	; (8015274 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8015136:	6013      	str	r3, [r2, #0]
				UART_BUFFS[THREE_PORT].Write_End = 0;
			}
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 8015138:	e090      	b.n	801525c <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART5)
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	4a4e      	ldr	r2, [pc, #312]	; (8015278 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8015140:	4293      	cmp	r3, r2
 8015142:	d129      	bne.n	8015198 <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015144:	2280      	movs	r2, #128	; 0x80
 8015146:	494d      	ldr	r1, [pc, #308]	; (801527c <HAL_UARTEx_RxEventCallback+0x1ac>)
 8015148:	484d      	ldr	r0, [pc, #308]	; (8015280 <HAL_UARTEx_RxEventCallback+0x1b0>)
 801514a:	f007 fce9 	bl	801cb20 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 801514e:	2300      	movs	r3, #0
 8015150:	81bb      	strh	r3, [r7, #12]
 8015152:	e01c      	b.n	801518e <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 8015154:	89ba      	ldrh	r2, [r7, #12]
 8015156:	4b4b      	ldr	r3, [pc, #300]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015158:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 801515c:	1c59      	adds	r1, r3, #1
 801515e:	b288      	uxth	r0, r1
 8015160:	4948      	ldr	r1, [pc, #288]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015162:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 8015166:	4619      	mov	r1, r3
 8015168:	4b44      	ldr	r3, [pc, #272]	; (801527c <HAL_UARTEx_RxEventCallback+0x1ac>)
 801516a:	5c9a      	ldrb	r2, [r3, r2]
 801516c:	4b45      	ldr	r3, [pc, #276]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 801516e:	440b      	add	r3, r1
 8015170:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 8015174:	4b43      	ldr	r3, [pc, #268]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015176:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 801517a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801517e:	d303      	bcc.n	8015188 <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 8015180:	4b40      	ldr	r3, [pc, #256]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015182:	2200      	movs	r2, #0
 8015184:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 8015188:	89bb      	ldrh	r3, [r7, #12]
 801518a:	3301      	adds	r3, #1
 801518c:	81bb      	strh	r3, [r7, #12]
 801518e:	89ba      	ldrh	r2, [r7, #12]
 8015190:	887b      	ldrh	r3, [r7, #2]
 8015192:	429a      	cmp	r2, r3
 8015194:	d3de      	bcc.n	8015154 <HAL_UARTEx_RxEventCallback+0x84>
}
 8015196:	e061      	b.n	801525c <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART7)
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	4a3a      	ldr	r2, [pc, #232]	; (8015288 <HAL_UARTEx_RxEventCallback+0x1b8>)
 801519e:	4293      	cmp	r3, r2
 80151a0:	d129      	bne.n	80151f6 <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80151a2:	2280      	movs	r2, #128	; 0x80
 80151a4:	4939      	ldr	r1, [pc, #228]	; (801528c <HAL_UARTEx_RxEventCallback+0x1bc>)
 80151a6:	483a      	ldr	r0, [pc, #232]	; (8015290 <HAL_UARTEx_RxEventCallback+0x1c0>)
 80151a8:	f007 fcba 	bl	801cb20 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 80151ac:	2300      	movs	r3, #0
 80151ae:	817b      	strh	r3, [r7, #10]
 80151b0:	e01c      	b.n	80151ec <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 80151b2:	897a      	ldrh	r2, [r7, #10]
 80151b4:	4b33      	ldr	r3, [pc, #204]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80151b6:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 80151ba:	1c59      	adds	r1, r3, #1
 80151bc:	b288      	uxth	r0, r1
 80151be:	4931      	ldr	r1, [pc, #196]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80151c0:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 80151c4:	4619      	mov	r1, r3
 80151c6:	4b31      	ldr	r3, [pc, #196]	; (801528c <HAL_UARTEx_RxEventCallback+0x1bc>)
 80151c8:	5c9a      	ldrb	r2, [r3, r2]
 80151ca:	4b2e      	ldr	r3, [pc, #184]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80151cc:	440b      	add	r3, r1
 80151ce:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 80151d2:	4b2c      	ldr	r3, [pc, #176]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80151d4:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 80151d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80151dc:	d303      	bcc.n	80151e6 <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 80151de:	4b29      	ldr	r3, [pc, #164]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80151e0:	2200      	movs	r2, #0
 80151e2:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 80151e6:	897b      	ldrh	r3, [r7, #10]
 80151e8:	3301      	adds	r3, #1
 80151ea:	817b      	strh	r3, [r7, #10]
 80151ec:	897a      	ldrh	r2, [r7, #10]
 80151ee:	887b      	ldrh	r3, [r7, #2]
 80151f0:	429a      	cmp	r2, r3
 80151f2:	d3de      	bcc.n	80151b2 <HAL_UARTEx_RxEventCallback+0xe2>
}
 80151f4:	e032      	b.n	801525c <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART4)
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	4a26      	ldr	r2, [pc, #152]	; (8015294 <HAL_UARTEx_RxEventCallback+0x1c4>)
 80151fc:	4293      	cmp	r3, r2
 80151fe:	d12d      	bne.n	801525c <HAL_UARTEx_RxEventCallback+0x18c>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015200:	2280      	movs	r2, #128	; 0x80
 8015202:	4925      	ldr	r1, [pc, #148]	; (8015298 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8015204:	4825      	ldr	r0, [pc, #148]	; (801529c <HAL_UARTEx_RxEventCallback+0x1cc>)
 8015206:	f007 fc8b 	bl	801cb20 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 801520a:	2300      	movs	r3, #0
 801520c:	813b      	strh	r3, [r7, #8]
 801520e:	e01c      	b.n	801524a <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 8015210:	893a      	ldrh	r2, [r7, #8]
 8015212:	4b1c      	ldr	r3, [pc, #112]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015214:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8015218:	1c59      	adds	r1, r3, #1
 801521a:	b288      	uxth	r0, r1
 801521c:	4919      	ldr	r1, [pc, #100]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 801521e:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 8015222:	4619      	mov	r1, r3
 8015224:	4b1c      	ldr	r3, [pc, #112]	; (8015298 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8015226:	5c9a      	ldrb	r2, [r3, r2]
 8015228:	4b16      	ldr	r3, [pc, #88]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 801522a:	440b      	add	r3, r1
 801522c:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 8015230:	4b14      	ldr	r3, [pc, #80]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015232:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8015236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801523a:	d303      	bcc.n	8015244 <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 801523c:	4b11      	ldr	r3, [pc, #68]	; (8015284 <HAL_UARTEx_RxEventCallback+0x1b4>)
 801523e:	2200      	movs	r2, #0
 8015240:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 8015244:	893b      	ldrh	r3, [r7, #8]
 8015246:	3301      	adds	r3, #1
 8015248:	813b      	strh	r3, [r7, #8]
 801524a:	893a      	ldrh	r2, [r7, #8]
 801524c:	887b      	ldrh	r3, [r7, #2]
 801524e:	429a      	cmp	r2, r3
 8015250:	d3de      	bcc.n	8015210 <HAL_UARTEx_RxEventCallback+0x140>
		UART4_Intr_Clk = HAL_GetTick();
 8015252:	f000 fb8f 	bl	8015974 <HAL_GetTick>
 8015256:	4603      	mov	r3, r0
 8015258:	4a11      	ldr	r2, [pc, #68]	; (80152a0 <HAL_UARTEx_RxEventCallback+0x1d0>)
 801525a:	6013      	str	r3, [r2, #0]
}
 801525c:	bf00      	nop
 801525e:	3710      	adds	r7, #16
 8015260:	46bd      	mov	sp, r7
 8015262:	bd80      	pop	{r7, pc}
 8015264:	40011000 	.word	0x40011000
 8015268:	2000b8c0 	.word	0x2000b8c0
 801526c:	2000bce8 	.word	0x2000bce8
 8015270:	2000b0bc 	.word	0x2000b0bc
 8015274:	2000a0a8 	.word	0x2000a0a8
 8015278:	40005000 	.word	0x40005000
 801527c:	2000b940 	.word	0x2000b940
 8015280:	2000bb78 	.word	0x2000bb78
 8015284:	2000a0ac 	.word	0x2000a0ac
 8015288:	40007800 	.word	0x40007800
 801528c:	2000b9c0 	.word	0x2000b9c0
 8015290:	2000bc30 	.word	0x2000bc30
 8015294:	40004c00 	.word	0x40004c00
 8015298:	2000ba40 	.word	0x2000ba40
 801529c:	2000bac0 	.word	0x2000bac0
 80152a0:	2000a0a4 	.word	0x2000a0a4

080152a4 <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 80152a4:	b480      	push	{r7}
 80152a6:	b085      	sub	sp, #20
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	4603      	mov	r3, r0
 80152ac:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 80152ae:	2300      	movs	r3, #0
 80152b0:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 80152b2:	79fb      	ldrb	r3, [r7, #7]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d115      	bne.n	80152e4 <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 80152b8:	79fa      	ldrb	r2, [r7, #7]
 80152ba:	4918      	ldr	r1, [pc, #96]	; (801531c <Com_DataReady+0x78>)
 80152bc:	4613      	mov	r3, r2
 80152be:	025b      	lsls	r3, r3, #9
 80152c0:	4413      	add	r3, r2
 80152c2:	009b      	lsls	r3, r3, #2
 80152c4:	440b      	add	r3, r1
 80152c6:	8819      	ldrh	r1, [r3, #0]
 80152c8:	79fa      	ldrb	r2, [r7, #7]
 80152ca:	4814      	ldr	r0, [pc, #80]	; (801531c <Com_DataReady+0x78>)
 80152cc:	4613      	mov	r3, r2
 80152ce:	025b      	lsls	r3, r3, #9
 80152d0:	4413      	add	r3, r2
 80152d2:	009b      	lsls	r3, r3, #2
 80152d4:	4403      	add	r3, r0
 80152d6:	3302      	adds	r3, #2
 80152d8:	881b      	ldrh	r3, [r3, #0]
 80152da:	4299      	cmp	r1, r3
 80152dc:	d017      	beq.n	801530e <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 80152de:	2301      	movs	r3, #1
 80152e0:	73fb      	strb	r3, [r7, #15]
 80152e2:	e014      	b.n	801530e <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 80152e4:	79fa      	ldrb	r2, [r7, #7]
 80152e6:	490e      	ldr	r1, [pc, #56]	; (8015320 <Com_DataReady+0x7c>)
 80152e8:	4613      	mov	r3, r2
 80152ea:	021b      	lsls	r3, r3, #8
 80152ec:	4413      	add	r3, r2
 80152ee:	009b      	lsls	r3, r3, #2
 80152f0:	440b      	add	r3, r1
 80152f2:	8819      	ldrh	r1, [r3, #0]
 80152f4:	79fa      	ldrb	r2, [r7, #7]
 80152f6:	480a      	ldr	r0, [pc, #40]	; (8015320 <Com_DataReady+0x7c>)
 80152f8:	4613      	mov	r3, r2
 80152fa:	021b      	lsls	r3, r3, #8
 80152fc:	4413      	add	r3, r2
 80152fe:	009b      	lsls	r3, r3, #2
 8015300:	4403      	add	r3, r0
 8015302:	3302      	adds	r3, #2
 8015304:	881b      	ldrh	r3, [r3, #0]
 8015306:	4299      	cmp	r1, r3
 8015308:	d001      	beq.n	801530e <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 801530a:	2301      	movs	r3, #1
 801530c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 801530e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015310:	4618      	mov	r0, r3
 8015312:	3714      	adds	r7, #20
 8015314:	46bd      	mov	sp, r7
 8015316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531a:	4770      	bx	lr
 801531c:	2000b0bc 	.word	0x2000b0bc
 8015320:	2000a0ac 	.word	0x2000a0ac

08015324 <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 8015324:	b4b0      	push	{r4, r5, r7}
 8015326:	b085      	sub	sp, #20
 8015328:	af00      	add	r7, sp, #0
 801532a:	4603      	mov	r3, r0
 801532c:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 801532e:	2300      	movs	r3, #0
 8015330:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 8015332:	79fb      	ldrb	r3, [r7, #7]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d135      	bne.n	80153a4 <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 8015338:	79f9      	ldrb	r1, [r7, #7]
 801533a:	79fa      	ldrb	r2, [r7, #7]
 801533c:	4837      	ldr	r0, [pc, #220]	; (801541c <Com_Get_Byte+0xf8>)
 801533e:	4613      	mov	r3, r2
 8015340:	025b      	lsls	r3, r3, #9
 8015342:	4413      	add	r3, r2
 8015344:	009b      	lsls	r3, r3, #2
 8015346:	4403      	add	r3, r0
 8015348:	3302      	adds	r3, #2
 801534a:	8818      	ldrh	r0, [r3, #0]
 801534c:	1c43      	adds	r3, r0, #1
 801534e:	b29d      	uxth	r5, r3
 8015350:	4c32      	ldr	r4, [pc, #200]	; (801541c <Com_Get_Byte+0xf8>)
 8015352:	4613      	mov	r3, r2
 8015354:	025b      	lsls	r3, r3, #9
 8015356:	4413      	add	r3, r2
 8015358:	009b      	lsls	r3, r3, #2
 801535a:	4423      	add	r3, r4
 801535c:	3302      	adds	r3, #2
 801535e:	462a      	mov	r2, r5
 8015360:	801a      	strh	r2, [r3, #0]
 8015362:	4a2e      	ldr	r2, [pc, #184]	; (801541c <Com_Get_Byte+0xf8>)
 8015364:	460b      	mov	r3, r1
 8015366:	025b      	lsls	r3, r3, #9
 8015368:	440b      	add	r3, r1
 801536a:	009b      	lsls	r3, r3, #2
 801536c:	4413      	add	r3, r2
 801536e:	4403      	add	r3, r0
 8015370:	3304      	adds	r3, #4
 8015372:	781b      	ldrb	r3, [r3, #0]
 8015374:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 8015376:	79fa      	ldrb	r2, [r7, #7]
 8015378:	4928      	ldr	r1, [pc, #160]	; (801541c <Com_Get_Byte+0xf8>)
 801537a:	4613      	mov	r3, r2
 801537c:	025b      	lsls	r3, r3, #9
 801537e:	4413      	add	r3, r2
 8015380:	009b      	lsls	r3, r3, #2
 8015382:	440b      	add	r3, r1
 8015384:	3302      	adds	r3, #2
 8015386:	881b      	ldrh	r3, [r3, #0]
 8015388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801538c:	d33f      	bcc.n	801540e <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 801538e:	79fa      	ldrb	r2, [r7, #7]
 8015390:	4922      	ldr	r1, [pc, #136]	; (801541c <Com_Get_Byte+0xf8>)
 8015392:	4613      	mov	r3, r2
 8015394:	025b      	lsls	r3, r3, #9
 8015396:	4413      	add	r3, r2
 8015398:	009b      	lsls	r3, r3, #2
 801539a:	440b      	add	r3, r1
 801539c:	3302      	adds	r3, #2
 801539e:	2200      	movs	r2, #0
 80153a0:	801a      	strh	r2, [r3, #0]
 80153a2:	e034      	b.n	801540e <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 80153a4:	79f9      	ldrb	r1, [r7, #7]
 80153a6:	79fa      	ldrb	r2, [r7, #7]
 80153a8:	481d      	ldr	r0, [pc, #116]	; (8015420 <Com_Get_Byte+0xfc>)
 80153aa:	4613      	mov	r3, r2
 80153ac:	021b      	lsls	r3, r3, #8
 80153ae:	4413      	add	r3, r2
 80153b0:	009b      	lsls	r3, r3, #2
 80153b2:	4403      	add	r3, r0
 80153b4:	3302      	adds	r3, #2
 80153b6:	8818      	ldrh	r0, [r3, #0]
 80153b8:	1c43      	adds	r3, r0, #1
 80153ba:	b29d      	uxth	r5, r3
 80153bc:	4c18      	ldr	r4, [pc, #96]	; (8015420 <Com_Get_Byte+0xfc>)
 80153be:	4613      	mov	r3, r2
 80153c0:	021b      	lsls	r3, r3, #8
 80153c2:	4413      	add	r3, r2
 80153c4:	009b      	lsls	r3, r3, #2
 80153c6:	4423      	add	r3, r4
 80153c8:	3302      	adds	r3, #2
 80153ca:	462a      	mov	r2, r5
 80153cc:	801a      	strh	r2, [r3, #0]
 80153ce:	4a14      	ldr	r2, [pc, #80]	; (8015420 <Com_Get_Byte+0xfc>)
 80153d0:	460b      	mov	r3, r1
 80153d2:	021b      	lsls	r3, r3, #8
 80153d4:	440b      	add	r3, r1
 80153d6:	009b      	lsls	r3, r3, #2
 80153d8:	4413      	add	r3, r2
 80153da:	4403      	add	r3, r0
 80153dc:	3304      	adds	r3, #4
 80153de:	781b      	ldrb	r3, [r3, #0]
 80153e0:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 80153e2:	79fa      	ldrb	r2, [r7, #7]
 80153e4:	490e      	ldr	r1, [pc, #56]	; (8015420 <Com_Get_Byte+0xfc>)
 80153e6:	4613      	mov	r3, r2
 80153e8:	021b      	lsls	r3, r3, #8
 80153ea:	4413      	add	r3, r2
 80153ec:	009b      	lsls	r3, r3, #2
 80153ee:	440b      	add	r3, r1
 80153f0:	3302      	adds	r3, #2
 80153f2:	881b      	ldrh	r3, [r3, #0]
 80153f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80153f8:	d309      	bcc.n	801540e <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 80153fa:	79fa      	ldrb	r2, [r7, #7]
 80153fc:	4908      	ldr	r1, [pc, #32]	; (8015420 <Com_Get_Byte+0xfc>)
 80153fe:	4613      	mov	r3, r2
 8015400:	021b      	lsls	r3, r3, #8
 8015402:	4413      	add	r3, r2
 8015404:	009b      	lsls	r3, r3, #2
 8015406:	440b      	add	r3, r1
 8015408:	3302      	adds	r3, #2
 801540a:	2200      	movs	r2, #0
 801540c:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 801540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015410:	4618      	mov	r0, r3
 8015412:	3714      	adds	r7, #20
 8015414:	46bd      	mov	sp, r7
 8015416:	bcb0      	pop	{r4, r5, r7}
 8015418:	4770      	bx	lr
 801541a:	bf00      	nop
 801541c:	2000b0bc 	.word	0x2000b0bc
 8015420:	2000a0ac 	.word	0x2000a0ac

08015424 <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b084      	sub	sp, #16
 8015428:	af00      	add	r7, sp, #0
 801542a:	4603      	mov	r3, r0
 801542c:	6039      	str	r1, [r7, #0]
 801542e:	71fb      	strb	r3, [r7, #7]
 8015430:	4613      	mov	r3, r2
 8015432:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 8015434:	2300      	movs	r3, #0
 8015436:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8015438:	2300      	movs	r3, #0
 801543a:	81fb      	strh	r3, [r7, #14]
 801543c:	e03a      	b.n	80154b4 <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 801543e:	89fb      	ldrh	r3, [r7, #14]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d00a      	beq.n	801545a <CommTransmitMessage+0x36>
 8015444:	89fb      	ldrh	r3, [r7, #14]
 8015446:	683a      	ldr	r2, [r7, #0]
 8015448:	4413      	add	r3, r2
 801544a:	781b      	ldrb	r3, [r3, #0]
 801544c:	2b24      	cmp	r3, #36	; 0x24
 801544e:	d104      	bne.n	801545a <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 8015450:	79fb      	ldrb	r3, [r7, #7]
 8015452:	2105      	movs	r1, #5
 8015454:	4618      	mov	r0, r3
 8015456:	f000 f835 	bl	80154c4 <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 801545a:	89fb      	ldrh	r3, [r7, #14]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d00e      	beq.n	801547e <CommTransmitMessage+0x5a>
 8015460:	89fa      	ldrh	r2, [r7, #14]
 8015462:	88bb      	ldrh	r3, [r7, #4]
 8015464:	429a      	cmp	r2, r3
 8015466:	d20a      	bcs.n	801547e <CommTransmitMessage+0x5a>
 8015468:	89fb      	ldrh	r3, [r7, #14]
 801546a:	683a      	ldr	r2, [r7, #0]
 801546c:	4413      	add	r3, r2
 801546e:	781b      	ldrb	r3, [r3, #0]
 8015470:	2b05      	cmp	r3, #5
 8015472:	d104      	bne.n	801547e <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 8015474:	79fb      	ldrb	r3, [r7, #7]
 8015476:	2105      	movs	r1, #5
 8015478:	4618      	mov	r0, r3
 801547a:	f000 f823 	bl	80154c4 <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 801547e:	89fb      	ldrh	r3, [r7, #14]
 8015480:	683a      	ldr	r2, [r7, #0]
 8015482:	4413      	add	r3, r2
 8015484:	781b      	ldrb	r3, [r3, #0]
 8015486:	2b26      	cmp	r3, #38	; 0x26
 8015488:	d108      	bne.n	801549c <CommTransmitMessage+0x78>
 801548a:	89fa      	ldrh	r2, [r7, #14]
 801548c:	88bb      	ldrh	r3, [r7, #4]
 801548e:	429a      	cmp	r2, r3
 8015490:	d004      	beq.n	801549c <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 8015492:	79fb      	ldrb	r3, [r7, #7]
 8015494:	2105      	movs	r1, #5
 8015496:	4618      	mov	r0, r3
 8015498:	f000 f814 	bl	80154c4 <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 801549c:	89fb      	ldrh	r3, [r7, #14]
 801549e:	683a      	ldr	r2, [r7, #0]
 80154a0:	4413      	add	r3, r2
 80154a2:	781a      	ldrb	r2, [r3, #0]
 80154a4:	79fb      	ldrb	r3, [r7, #7]
 80154a6:	4611      	mov	r1, r2
 80154a8:	4618      	mov	r0, r3
 80154aa:	f000 f80b 	bl	80154c4 <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 80154ae:	89fb      	ldrh	r3, [r7, #14]
 80154b0:	3301      	adds	r3, #1
 80154b2:	81fb      	strh	r3, [r7, #14]
 80154b4:	89fa      	ldrh	r2, [r7, #14]
 80154b6:	88bb      	ldrh	r3, [r7, #4]
 80154b8:	429a      	cmp	r2, r3
 80154ba:	d9c0      	bls.n	801543e <CommTransmitMessage+0x1a>
	}

	return;
 80154bc:	bf00      	nop
}
 80154be:	3710      	adds	r7, #16
 80154c0:	46bd      	mov	sp, r7
 80154c2:	bd80      	pop	{r7, pc}

080154c4 <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b084      	sub	sp, #16
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	4603      	mov	r3, r0
 80154cc:	460a      	mov	r2, r1
 80154ce:	71fb      	strb	r3, [r7, #7]
 80154d0:	4613      	mov	r3, r2
 80154d2:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 80154d4:	1dbb      	adds	r3, r7, #6
 80154d6:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 80154d8:	79fb      	ldrb	r3, [r7, #7]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d107      	bne.n	80154ee <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 80154de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80154e2:	2201      	movs	r2, #1
 80154e4:	68f9      	ldr	r1, [r7, #12]
 80154e6:	4816      	ldr	r0, [pc, #88]	; (8015540 <Com_SendByte+0x7c>)
 80154e8:	f006 f80c 	bl	801b504 <HAL_UART_Transmit>
 80154ec:	e01f      	b.n	801552e <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 80154ee:	79fb      	ldrb	r3, [r7, #7]
 80154f0:	2b01      	cmp	r3, #1
 80154f2:	d107      	bne.n	8015504 <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 80154f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80154f8:	2201      	movs	r2, #1
 80154fa:	68f9      	ldr	r1, [r7, #12]
 80154fc:	4811      	ldr	r0, [pc, #68]	; (8015544 <Com_SendByte+0x80>)
 80154fe:	f006 f801 	bl	801b504 <HAL_UART_Transmit>
 8015502:	e014      	b.n	801552e <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 8015504:	79fb      	ldrb	r3, [r7, #7]
 8015506:	2b02      	cmp	r3, #2
 8015508:	d107      	bne.n	801551a <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 801550a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801550e:	2201      	movs	r2, #1
 8015510:	68f9      	ldr	r1, [r7, #12]
 8015512:	480d      	ldr	r0, [pc, #52]	; (8015548 <Com_SendByte+0x84>)
 8015514:	f005 fff6 	bl	801b504 <HAL_UART_Transmit>
 8015518:	e009      	b.n	801552e <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 801551a:	79fb      	ldrb	r3, [r7, #7]
 801551c:	2b03      	cmp	r3, #3
 801551e:	d106      	bne.n	801552e <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 8015520:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015524:	2201      	movs	r2, #1
 8015526:	68f9      	ldr	r1, [r7, #12]
 8015528:	4808      	ldr	r0, [pc, #32]	; (801554c <Com_SendByte+0x88>)
 801552a:	f005 ffeb 	bl	801b504 <HAL_UART_Transmit>
	}

	ptr=NULL;
 801552e:	2300      	movs	r3, #0
 8015530:	60fb      	str	r3, [r7, #12]
	free(ptr);
 8015532:	68f8      	ldr	r0, [r7, #12]
 8015534:	f00d f8f4 	bl	8022720 <free>
}
 8015538:	bf00      	nop
 801553a:	3710      	adds	r7, #16
 801553c:	46bd      	mov	sp, r7
 801553e:	bd80      	pop	{r7, pc}
 8015540:	2000bce8 	.word	0x2000bce8
 8015544:	2000bb78 	.word	0x2000bb78
 8015548:	2000bc30 	.word	0x2000bc30
 801554c:	2000bac0 	.word	0x2000bac0

08015550 <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015554:	2280      	movs	r2, #128	; 0x80
 8015556:	490a      	ldr	r1, [pc, #40]	; (8015580 <Enable_UART_Interrupts+0x30>)
 8015558:	480a      	ldr	r0, [pc, #40]	; (8015584 <Enable_UART_Interrupts+0x34>)
 801555a:	f007 fae1 	bl	801cb20 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801555e:	2280      	movs	r2, #128	; 0x80
 8015560:	4909      	ldr	r1, [pc, #36]	; (8015588 <Enable_UART_Interrupts+0x38>)
 8015562:	480a      	ldr	r0, [pc, #40]	; (801558c <Enable_UART_Interrupts+0x3c>)
 8015564:	f007 fadc 	bl	801cb20 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015568:	2280      	movs	r2, #128	; 0x80
 801556a:	4909      	ldr	r1, [pc, #36]	; (8015590 <Enable_UART_Interrupts+0x40>)
 801556c:	4809      	ldr	r0, [pc, #36]	; (8015594 <Enable_UART_Interrupts+0x44>)
 801556e:	f007 fad7 	bl	801cb20 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015572:	2280      	movs	r2, #128	; 0x80
 8015574:	4908      	ldr	r1, [pc, #32]	; (8015598 <Enable_UART_Interrupts+0x48>)
 8015576:	4809      	ldr	r0, [pc, #36]	; (801559c <Enable_UART_Interrupts+0x4c>)
 8015578:	f007 fad2 	bl	801cb20 <HAL_UARTEx_ReceiveToIdle_IT>
}
 801557c:	bf00      	nop
 801557e:	bd80      	pop	{r7, pc}
 8015580:	2000b8c0 	.word	0x2000b8c0
 8015584:	2000bce8 	.word	0x2000bce8
 8015588:	2000b940 	.word	0x2000b940
 801558c:	2000bb78 	.word	0x2000bb78
 8015590:	2000b9c0 	.word	0x2000b9c0
 8015594:	2000bc30 	.word	0x2000bc30
 8015598:	2000ba40 	.word	0x2000ba40
 801559c:	2000bac0 	.word	0x2000bac0

080155a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80155a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80155d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80155a4:	480d      	ldr	r0, [pc, #52]	; (80155dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80155a6:	490e      	ldr	r1, [pc, #56]	; (80155e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80155a8:	4a0e      	ldr	r2, [pc, #56]	; (80155e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80155aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80155ac:	e002      	b.n	80155b4 <LoopCopyDataInit>

080155ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80155ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80155b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80155b2:	3304      	adds	r3, #4

080155b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80155b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80155b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80155b8:	d3f9      	bcc.n	80155ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80155ba:	4a0b      	ldr	r2, [pc, #44]	; (80155e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80155bc:	4c0b      	ldr	r4, [pc, #44]	; (80155ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80155be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80155c0:	e001      	b.n	80155c6 <LoopFillZerobss>

080155c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80155c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80155c4:	3204      	adds	r2, #4

080155c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80155c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80155c8:	d3fb      	bcc.n	80155c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80155ca:	f7ff fb87 	bl	8014cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80155ce:	f00d f87b 	bl	80226c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80155d2:	f7fe fa71 	bl	8013ab8 <main>
  bx  lr    
 80155d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80155d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80155dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80155e0:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 80155e4:	08029470 	.word	0x08029470
  ldr r2, =_sbss
 80155e8:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 80155ec:	20014348 	.word	0x20014348

080155f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80155f0:	e7fe      	b.n	80155f0 <ADC_IRQHandler>

080155f2 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 80155f2:	b480      	push	{r7}
 80155f4:	b083      	sub	sp, #12
 80155f6:	af00      	add	r7, sp, #0
 80155f8:	6078      	str	r0, [r7, #4]
 80155fa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d00b      	beq.n	801561a <DP83848_RegisterBusIO+0x28>
 8015602:	683b      	ldr	r3, [r7, #0]
 8015604:	68db      	ldr	r3, [r3, #12]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d007      	beq.n	801561a <DP83848_RegisterBusIO+0x28>
 801560a:	683b      	ldr	r3, [r7, #0]
 801560c:	689b      	ldr	r3, [r3, #8]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d003      	beq.n	801561a <DP83848_RegisterBusIO+0x28>
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	691b      	ldr	r3, [r3, #16]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d102      	bne.n	8015620 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 801561a:	f04f 33ff 	mov.w	r3, #4294967295
 801561e:	e014      	b.n	801564a <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	681a      	ldr	r2, [r3, #0]
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	685a      	ldr	r2, [r3, #4]
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	68da      	ldr	r2, [r3, #12]
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8015638:	683b      	ldr	r3, [r7, #0]
 801563a:	689a      	ldr	r2, [r3, #8]
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	691a      	ldr	r2, [r3, #16]
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8015648:	2300      	movs	r3, #0
}
 801564a:	4618      	mov	r0, r3
 801564c:	370c      	adds	r7, #12
 801564e:	46bd      	mov	sp, r7
 8015650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015654:	4770      	bx	lr

08015656 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8015656:	b580      	push	{r7, lr}
 8015658:	b086      	sub	sp, #24
 801565a:	af00      	add	r7, sp, #0
 801565c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 801565e:	2300      	movs	r3, #0
 8015660:	60fb      	str	r3, [r7, #12]
 8015662:	2300      	movs	r3, #0
 8015664:	60bb      	str	r3, [r7, #8]
 8015666:	2300      	movs	r3, #0
 8015668:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 801566a:	2300      	movs	r3, #0
 801566c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	685b      	ldr	r3, [r3, #4]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d17c      	bne.n	8015770 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	689b      	ldr	r3, [r3, #8]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d002      	beq.n	8015684 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	689b      	ldr	r3, [r3, #8]
 8015682:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2220      	movs	r2, #32
 8015688:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 801568a:	2300      	movs	r3, #0
 801568c:	617b      	str	r3, [r7, #20]
 801568e:	e01c      	b.n	80156ca <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	695b      	ldr	r3, [r3, #20]
 8015694:	f107 0208 	add.w	r2, r7, #8
 8015698:	2119      	movs	r1, #25
 801569a:	6978      	ldr	r0, [r7, #20]
 801569c:	4798      	blx	r3
 801569e:	4603      	mov	r3, r0
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	da03      	bge.n	80156ac <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 80156a4:	f06f 0304 	mvn.w	r3, #4
 80156a8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80156aa:	e00b      	b.n	80156c4 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	f003 031f 	and.w	r3, r3, #31
 80156b2:	697a      	ldr	r2, [r7, #20]
 80156b4:	429a      	cmp	r2, r3
 80156b6:	d105      	bne.n	80156c4 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	697a      	ldr	r2, [r7, #20]
 80156bc:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80156be:	2300      	movs	r3, #0
 80156c0:	613b      	str	r3, [r7, #16]
         break;
 80156c2:	e005      	b.n	80156d0 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80156c4:	697b      	ldr	r3, [r7, #20]
 80156c6:	3301      	adds	r3, #1
 80156c8:	617b      	str	r3, [r7, #20]
 80156ca:	697b      	ldr	r3, [r7, #20]
 80156cc:	2b1f      	cmp	r3, #31
 80156ce:	d9df      	bls.n	8015690 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	2b1f      	cmp	r3, #31
 80156d6:	d902      	bls.n	80156de <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 80156d8:	f06f 0302 	mvn.w	r3, #2
 80156dc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 80156de:	693b      	ldr	r3, [r7, #16]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d145      	bne.n	8015770 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	691b      	ldr	r3, [r3, #16]
 80156e8:	687a      	ldr	r2, [r7, #4]
 80156ea:	6810      	ldr	r0, [r2, #0]
 80156ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80156f0:	2100      	movs	r1, #0
 80156f2:	4798      	blx	r3
 80156f4:	4603      	mov	r3, r0
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	db37      	blt.n	801576a <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	695b      	ldr	r3, [r3, #20]
 80156fe:	687a      	ldr	r2, [r7, #4]
 8015700:	6810      	ldr	r0, [r2, #0]
 8015702:	f107 0208 	add.w	r2, r7, #8
 8015706:	2100      	movs	r1, #0
 8015708:	4798      	blx	r3
 801570a:	4603      	mov	r3, r0
 801570c:	2b00      	cmp	r3, #0
 801570e:	db28      	blt.n	8015762 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	699b      	ldr	r3, [r3, #24]
 8015714:	4798      	blx	r3
 8015716:	4603      	mov	r3, r0
 8015718:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 801571a:	e01c      	b.n	8015756 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	699b      	ldr	r3, [r3, #24]
 8015720:	4798      	blx	r3
 8015722:	4603      	mov	r3, r0
 8015724:	461a      	mov	r2, r3
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	1ad3      	subs	r3, r2, r3
 801572a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801572e:	d80e      	bhi.n	801574e <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	695b      	ldr	r3, [r3, #20]
 8015734:	687a      	ldr	r2, [r7, #4]
 8015736:	6810      	ldr	r0, [r2, #0]
 8015738:	f107 0208 	add.w	r2, r7, #8
 801573c:	2100      	movs	r1, #0
 801573e:	4798      	blx	r3
 8015740:	4603      	mov	r3, r0
 8015742:	2b00      	cmp	r3, #0
 8015744:	da07      	bge.n	8015756 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8015746:	f06f 0304 	mvn.w	r3, #4
 801574a:	613b      	str	r3, [r7, #16]
                 break;
 801574c:	e010      	b.n	8015770 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 801574e:	f06f 0301 	mvn.w	r3, #1
 8015752:	613b      	str	r3, [r7, #16]
               break;
 8015754:	e00c      	b.n	8015770 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8015756:	68bb      	ldr	r3, [r7, #8]
 8015758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801575c:	2b00      	cmp	r3, #0
 801575e:	d1dd      	bne.n	801571c <DP83848_Init+0xc6>
 8015760:	e006      	b.n	8015770 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8015762:	f06f 0304 	mvn.w	r3, #4
 8015766:	613b      	str	r3, [r7, #16]
 8015768:	e002      	b.n	8015770 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 801576a:	f06f 0303 	mvn.w	r3, #3
 801576e:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8015770:	693b      	ldr	r3, [r7, #16]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d112      	bne.n	801579c <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	699b      	ldr	r3, [r3, #24]
 801577a:	4798      	blx	r3
 801577c:	4603      	mov	r3, r0
 801577e:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8015780:	bf00      	nop
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	699b      	ldr	r3, [r3, #24]
 8015786:	4798      	blx	r3
 8015788:	4603      	mov	r3, r0
 801578a:	461a      	mov	r2, r3
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	1ad3      	subs	r3, r2, r3
 8015790:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8015794:	d9f5      	bls.n	8015782 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2201      	movs	r2, #1
 801579a:	605a      	str	r2, [r3, #4]
   }

   return status;
 801579c:	693b      	ldr	r3, [r7, #16]
 }
 801579e:	4618      	mov	r0, r3
 80157a0:	3718      	adds	r7, #24
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}

080157a6 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 80157a6:	b580      	push	{r7, lr}
 80157a8:	b084      	sub	sp, #16
 80157aa:	af00      	add	r7, sp, #0
 80157ac:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80157ae:	2300      	movs	r3, #0
 80157b0:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	695b      	ldr	r3, [r3, #20]
 80157b6:	687a      	ldr	r2, [r7, #4]
 80157b8:	6810      	ldr	r0, [r2, #0]
 80157ba:	f107 020c 	add.w	r2, r7, #12
 80157be:	2101      	movs	r1, #1
 80157c0:	4798      	blx	r3
 80157c2:	4603      	mov	r3, r0
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	da02      	bge.n	80157ce <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80157c8:	f06f 0304 	mvn.w	r3, #4
 80157cc:	e06e      	b.n	80158ac <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	695b      	ldr	r3, [r3, #20]
 80157d2:	687a      	ldr	r2, [r7, #4]
 80157d4:	6810      	ldr	r0, [r2, #0]
 80157d6:	f107 020c 	add.w	r2, r7, #12
 80157da:	2101      	movs	r1, #1
 80157dc:	4798      	blx	r3
 80157de:	4603      	mov	r3, r0
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	da02      	bge.n	80157ea <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80157e4:	f06f 0304 	mvn.w	r3, #4
 80157e8:	e060      	b.n	80158ac <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	f003 0304 	and.w	r3, r3, #4
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d101      	bne.n	80157f8 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80157f4:	2301      	movs	r3, #1
 80157f6:	e059      	b.n	80158ac <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	695b      	ldr	r3, [r3, #20]
 80157fc:	687a      	ldr	r2, [r7, #4]
 80157fe:	6810      	ldr	r0, [r2, #0]
 8015800:	f107 020c 	add.w	r2, r7, #12
 8015804:	2100      	movs	r1, #0
 8015806:	4798      	blx	r3
 8015808:	4603      	mov	r3, r0
 801580a:	2b00      	cmp	r3, #0
 801580c:	da02      	bge.n	8015814 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 801580e:	f06f 0304 	mvn.w	r3, #4
 8015812:	e04b      	b.n	80158ac <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801581a:	2b00      	cmp	r3, #0
 801581c:	d11b      	bne.n	8015856 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015824:	2b00      	cmp	r3, #0
 8015826:	d006      	beq.n	8015836 <DP83848_GetLinkState+0x90>
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801582e:	2b00      	cmp	r3, #0
 8015830:	d001      	beq.n	8015836 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8015832:	2302      	movs	r3, #2
 8015834:	e03a      	b.n	80158ac <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801583c:	2b00      	cmp	r3, #0
 801583e:	d001      	beq.n	8015844 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8015840:	2303      	movs	r3, #3
 8015842:	e033      	b.n	80158ac <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801584a:	2b00      	cmp	r3, #0
 801584c:	d001      	beq.n	8015852 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 801584e:	2304      	movs	r3, #4
 8015850:	e02c      	b.n	80158ac <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8015852:	2305      	movs	r3, #5
 8015854:	e02a      	b.n	80158ac <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	695b      	ldr	r3, [r3, #20]
 801585a:	687a      	ldr	r2, [r7, #4]
 801585c:	6810      	ldr	r0, [r2, #0]
 801585e:	f107 020c 	add.w	r2, r7, #12
 8015862:	2110      	movs	r1, #16
 8015864:	4798      	blx	r3
 8015866:	4603      	mov	r3, r0
 8015868:	2b00      	cmp	r3, #0
 801586a:	da02      	bge.n	8015872 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 801586c:	f06f 0304 	mvn.w	r3, #4
 8015870:	e01c      	b.n	80158ac <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015878:	2b00      	cmp	r3, #0
 801587a:	d101      	bne.n	8015880 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 801587c:	2306      	movs	r3, #6
 801587e:	e015      	b.n	80158ac <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	f003 0306 	and.w	r3, r3, #6
 8015886:	2b04      	cmp	r3, #4
 8015888:	d101      	bne.n	801588e <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 801588a:	2302      	movs	r3, #2
 801588c:	e00e      	b.n	80158ac <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	f003 0306 	and.w	r3, r3, #6
 8015894:	2b00      	cmp	r3, #0
 8015896:	d101      	bne.n	801589c <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8015898:	2303      	movs	r3, #3
 801589a:	e007      	b.n	80158ac <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	f003 0306 	and.w	r3, r3, #6
 80158a2:	2b06      	cmp	r3, #6
 80158a4:	d101      	bne.n	80158aa <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80158a6:	2304      	movs	r3, #4
 80158a8:	e000      	b.n	80158ac <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80158aa:	2305      	movs	r3, #5
    }
  }
}
 80158ac:	4618      	mov	r0, r3
 80158ae:	3710      	adds	r7, #16
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}

080158b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80158b8:	4b0b      	ldr	r3, [pc, #44]	; (80158e8 <HAL_Init+0x34>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	4a0a      	ldr	r2, [pc, #40]	; (80158e8 <HAL_Init+0x34>)
 80158be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80158c2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80158c4:	4b08      	ldr	r3, [pc, #32]	; (80158e8 <HAL_Init+0x34>)
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	4a07      	ldr	r2, [pc, #28]	; (80158e8 <HAL_Init+0x34>)
 80158ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80158ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80158d0:	2003      	movs	r0, #3
 80158d2:	f001 f825 	bl	8016920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80158d6:	2007      	movs	r0, #7
 80158d8:	f000 f808 	bl	80158ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80158dc:	f7ff f856 	bl	801498c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80158e0:	2300      	movs	r3, #0
}
 80158e2:	4618      	mov	r0, r3
 80158e4:	bd80      	pop	{r7, pc}
 80158e6:	bf00      	nop
 80158e8:	40023c00 	.word	0x40023c00

080158ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b082      	sub	sp, #8
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80158f4:	4b12      	ldr	r3, [pc, #72]	; (8015940 <HAL_InitTick+0x54>)
 80158f6:	681a      	ldr	r2, [r3, #0]
 80158f8:	4b12      	ldr	r3, [pc, #72]	; (8015944 <HAL_InitTick+0x58>)
 80158fa:	781b      	ldrb	r3, [r3, #0]
 80158fc:	4619      	mov	r1, r3
 80158fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015902:	fbb3 f3f1 	udiv	r3, r3, r1
 8015906:	fbb2 f3f3 	udiv	r3, r2, r3
 801590a:	4618      	mov	r0, r3
 801590c:	f001 f83d 	bl	801698a <HAL_SYSTICK_Config>
 8015910:	4603      	mov	r3, r0
 8015912:	2b00      	cmp	r3, #0
 8015914:	d001      	beq.n	801591a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8015916:	2301      	movs	r3, #1
 8015918:	e00e      	b.n	8015938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	2b0f      	cmp	r3, #15
 801591e:	d80a      	bhi.n	8015936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8015920:	2200      	movs	r2, #0
 8015922:	6879      	ldr	r1, [r7, #4]
 8015924:	f04f 30ff 	mov.w	r0, #4294967295
 8015928:	f001 f805 	bl	8016936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801592c:	4a06      	ldr	r2, [pc, #24]	; (8015948 <HAL_InitTick+0x5c>)
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8015932:	2300      	movs	r3, #0
 8015934:	e000      	b.n	8015938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8015936:	2301      	movs	r3, #1
}
 8015938:	4618      	mov	r0, r3
 801593a:	3708      	adds	r7, #8
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}
 8015940:	2000011c 	.word	0x2000011c
 8015944:	20000124 	.word	0x20000124
 8015948:	20000120 	.word	0x20000120

0801594c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801594c:	b480      	push	{r7}
 801594e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015950:	4b06      	ldr	r3, [pc, #24]	; (801596c <HAL_IncTick+0x20>)
 8015952:	781b      	ldrb	r3, [r3, #0]
 8015954:	461a      	mov	r2, r3
 8015956:	4b06      	ldr	r3, [pc, #24]	; (8015970 <HAL_IncTick+0x24>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	4413      	add	r3, r2
 801595c:	4a04      	ldr	r2, [pc, #16]	; (8015970 <HAL_IncTick+0x24>)
 801595e:	6013      	str	r3, [r2, #0]
}
 8015960:	bf00      	nop
 8015962:	46bd      	mov	sp, r7
 8015964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015968:	4770      	bx	lr
 801596a:	bf00      	nop
 801596c:	20000124 	.word	0x20000124
 8015970:	2000bda0 	.word	0x2000bda0

08015974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015974:	b480      	push	{r7}
 8015976:	af00      	add	r7, sp, #0
  return uwTick;
 8015978:	4b03      	ldr	r3, [pc, #12]	; (8015988 <HAL_GetTick+0x14>)
 801597a:	681b      	ldr	r3, [r3, #0]
}
 801597c:	4618      	mov	r0, r3
 801597e:	46bd      	mov	sp, r7
 8015980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015984:	4770      	bx	lr
 8015986:	bf00      	nop
 8015988:	2000bda0 	.word	0x2000bda0

0801598c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b084      	sub	sp, #16
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015994:	f7ff ffee 	bl	8015974 <HAL_GetTick>
 8015998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159a4:	d005      	beq.n	80159b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80159a6:	4b0a      	ldr	r3, [pc, #40]	; (80159d0 <HAL_Delay+0x44>)
 80159a8:	781b      	ldrb	r3, [r3, #0]
 80159aa:	461a      	mov	r2, r3
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	4413      	add	r3, r2
 80159b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80159b2:	bf00      	nop
 80159b4:	f7ff ffde 	bl	8015974 <HAL_GetTick>
 80159b8:	4602      	mov	r2, r0
 80159ba:	68bb      	ldr	r3, [r7, #8]
 80159bc:	1ad3      	subs	r3, r2, r3
 80159be:	68fa      	ldr	r2, [r7, #12]
 80159c0:	429a      	cmp	r2, r3
 80159c2:	d8f7      	bhi.n	80159b4 <HAL_Delay+0x28>
  {
  }
}
 80159c4:	bf00      	nop
 80159c6:	bf00      	nop
 80159c8:	3710      	adds	r7, #16
 80159ca:	46bd      	mov	sp, r7
 80159cc:	bd80      	pop	{r7, pc}
 80159ce:	bf00      	nop
 80159d0:	20000124 	.word	0x20000124

080159d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b084      	sub	sp, #16
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d101      	bne.n	80159e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80159e2:	2301      	movs	r3, #1
 80159e4:	e11c      	b.n	8015c20 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80159ec:	b2db      	uxtb	r3, r3
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d131      	bne.n	8015a56 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	4a8c      	ldr	r2, [pc, #560]	; (8015c28 <HAL_CAN_Init+0x254>)
 80159f6:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	4a8c      	ldr	r2, [pc, #560]	; (8015c2c <HAL_CAN_Init+0x258>)
 80159fc:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	4a8b      	ldr	r2, [pc, #556]	; (8015c30 <HAL_CAN_Init+0x25c>)
 8015a02:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	4a8b      	ldr	r2, [pc, #556]	; (8015c34 <HAL_CAN_Init+0x260>)
 8015a08:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	4a8a      	ldr	r2, [pc, #552]	; (8015c38 <HAL_CAN_Init+0x264>)
 8015a0e:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	4a8a      	ldr	r2, [pc, #552]	; (8015c3c <HAL_CAN_Init+0x268>)
 8015a14:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	4a89      	ldr	r2, [pc, #548]	; (8015c40 <HAL_CAN_Init+0x26c>)
 8015a1a:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	4a89      	ldr	r2, [pc, #548]	; (8015c44 <HAL_CAN_Init+0x270>)
 8015a20:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	4a88      	ldr	r2, [pc, #544]	; (8015c48 <HAL_CAN_Init+0x274>)
 8015a26:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	4a88      	ldr	r2, [pc, #544]	; (8015c4c <HAL_CAN_Init+0x278>)
 8015a2c:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	4a87      	ldr	r2, [pc, #540]	; (8015c50 <HAL_CAN_Init+0x27c>)
 8015a32:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	4a87      	ldr	r2, [pc, #540]	; (8015c54 <HAL_CAN_Init+0x280>)
 8015a38:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	4a86      	ldr	r2, [pc, #536]	; (8015c58 <HAL_CAN_Init+0x284>)
 8015a3e:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d102      	bne.n	8015a4e <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	4a84      	ldr	r2, [pc, #528]	; (8015c5c <HAL_CAN_Init+0x288>)
 8015a4c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015a52:	6878      	ldr	r0, [r7, #4]
 8015a54:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	681a      	ldr	r2, [r3, #0]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	f042 0201 	orr.w	r2, r2, #1
 8015a64:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015a66:	f7ff ff85 	bl	8015974 <HAL_GetTick>
 8015a6a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8015a6c:	e012      	b.n	8015a94 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015a6e:	f7ff ff81 	bl	8015974 <HAL_GetTick>
 8015a72:	4602      	mov	r2, r0
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	1ad3      	subs	r3, r2, r3
 8015a78:	2b0a      	cmp	r3, #10
 8015a7a:	d90b      	bls.n	8015a94 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a80:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2205      	movs	r2, #5
 8015a8c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8015a90:	2301      	movs	r3, #1
 8015a92:	e0c5      	b.n	8015c20 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	685b      	ldr	r3, [r3, #4]
 8015a9a:	f003 0301 	and.w	r3, r3, #1
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d0e5      	beq.n	8015a6e <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	681a      	ldr	r2, [r3, #0]
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	f022 0202 	bic.w	r2, r2, #2
 8015ab0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015ab2:	f7ff ff5f 	bl	8015974 <HAL_GetTick>
 8015ab6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8015ab8:	e012      	b.n	8015ae0 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015aba:	f7ff ff5b 	bl	8015974 <HAL_GetTick>
 8015abe:	4602      	mov	r2, r0
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	1ad3      	subs	r3, r2, r3
 8015ac4:	2b0a      	cmp	r3, #10
 8015ac6:	d90b      	bls.n	8015ae0 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015acc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	2205      	movs	r2, #5
 8015ad8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8015adc:	2301      	movs	r3, #1
 8015ade:	e09f      	b.n	8015c20 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	685b      	ldr	r3, [r3, #4]
 8015ae6:	f003 0302 	and.w	r3, r3, #2
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d1e5      	bne.n	8015aba <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	7e1b      	ldrb	r3, [r3, #24]
 8015af2:	2b01      	cmp	r3, #1
 8015af4:	d108      	bne.n	8015b08 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	681a      	ldr	r2, [r3, #0]
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015b04:	601a      	str	r2, [r3, #0]
 8015b06:	e007      	b.n	8015b18 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	681a      	ldr	r2, [r3, #0]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	7e5b      	ldrb	r3, [r3, #25]
 8015b1c:	2b01      	cmp	r3, #1
 8015b1e:	d108      	bne.n	8015b32 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	681a      	ldr	r2, [r3, #0]
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015b2e:	601a      	str	r2, [r3, #0]
 8015b30:	e007      	b.n	8015b42 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	681a      	ldr	r2, [r3, #0]
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	7e9b      	ldrb	r3, [r3, #26]
 8015b46:	2b01      	cmp	r3, #1
 8015b48:	d108      	bne.n	8015b5c <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	681a      	ldr	r2, [r3, #0]
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	f042 0220 	orr.w	r2, r2, #32
 8015b58:	601a      	str	r2, [r3, #0]
 8015b5a:	e007      	b.n	8015b6c <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	681a      	ldr	r2, [r3, #0]
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	f022 0220 	bic.w	r2, r2, #32
 8015b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	7edb      	ldrb	r3, [r3, #27]
 8015b70:	2b01      	cmp	r3, #1
 8015b72:	d108      	bne.n	8015b86 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	681a      	ldr	r2, [r3, #0]
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	f022 0210 	bic.w	r2, r2, #16
 8015b82:	601a      	str	r2, [r3, #0]
 8015b84:	e007      	b.n	8015b96 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	681a      	ldr	r2, [r3, #0]
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	f042 0210 	orr.w	r2, r2, #16
 8015b94:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	7f1b      	ldrb	r3, [r3, #28]
 8015b9a:	2b01      	cmp	r3, #1
 8015b9c:	d108      	bne.n	8015bb0 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	681a      	ldr	r2, [r3, #0]
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	f042 0208 	orr.w	r2, r2, #8
 8015bac:	601a      	str	r2, [r3, #0]
 8015bae:	e007      	b.n	8015bc0 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	681a      	ldr	r2, [r3, #0]
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	f022 0208 	bic.w	r2, r2, #8
 8015bbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	7f5b      	ldrb	r3, [r3, #29]
 8015bc4:	2b01      	cmp	r3, #1
 8015bc6:	d108      	bne.n	8015bda <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	681a      	ldr	r2, [r3, #0]
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	f042 0204 	orr.w	r2, r2, #4
 8015bd6:	601a      	str	r2, [r3, #0]
 8015bd8:	e007      	b.n	8015bea <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	681a      	ldr	r2, [r3, #0]
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	f022 0204 	bic.w	r2, r2, #4
 8015be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	689a      	ldr	r2, [r3, #8]
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	68db      	ldr	r3, [r3, #12]
 8015bf2:	431a      	orrs	r2, r3
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	691b      	ldr	r3, [r3, #16]
 8015bf8:	431a      	orrs	r2, r3
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	695b      	ldr	r3, [r3, #20]
 8015bfe:	ea42 0103 	orr.w	r1, r2, r3
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	685b      	ldr	r3, [r3, #4]
 8015c06:	1e5a      	subs	r2, r3, #1
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	430a      	orrs	r2, r1
 8015c0e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	2200      	movs	r2, #0
 8015c14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	2201      	movs	r2, #1
 8015c1a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8015c1e:	2300      	movs	r3, #0
}
 8015c20:	4618      	mov	r0, r3
 8015c22:	3710      	adds	r7, #16
 8015c24:	46bd      	mov	sp, r7
 8015c26:	bd80      	pop	{r7, pc}
 8015c28:	0800ffd9 	.word	0x0800ffd9
 8015c2c:	0801671b 	.word	0x0801671b
 8015c30:	080100f5 	.word	0x080100f5
 8015c34:	0801672f 	.word	0x0801672f
 8015c38:	080166a3 	.word	0x080166a3
 8015c3c:	080166b7 	.word	0x080166b7
 8015c40:	080166cb 	.word	0x080166cb
 8015c44:	080166df 	.word	0x080166df
 8015c48:	080166f3 	.word	0x080166f3
 8015c4c:	08016707 	.word	0x08016707
 8015c50:	08016743 	.word	0x08016743
 8015c54:	08016757 	.word	0x08016757
 8015c58:	0801676b 	.word	0x0801676b
 8015c5c:	0800f885 	.word	0x0800f885

08015c60 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8015c60:	b480      	push	{r7}
 8015c62:	b087      	sub	sp, #28
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
 8015c68:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c76:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8015c78:	7cfb      	ldrb	r3, [r7, #19]
 8015c7a:	2b01      	cmp	r3, #1
 8015c7c:	d003      	beq.n	8015c86 <HAL_CAN_ConfigFilter+0x26>
 8015c7e:	7cfb      	ldrb	r3, [r7, #19]
 8015c80:	2b02      	cmp	r3, #2
 8015c82:	f040 80c7 	bne.w	8015e14 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	4a69      	ldr	r2, [pc, #420]	; (8015e30 <HAL_CAN_ConfigFilter+0x1d0>)
 8015c8c:	4293      	cmp	r3, r2
 8015c8e:	d001      	beq.n	8015c94 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8015c90:	4b68      	ldr	r3, [pc, #416]	; (8015e34 <HAL_CAN_ConfigFilter+0x1d4>)
 8015c92:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8015c94:	697b      	ldr	r3, [r7, #20]
 8015c96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015c9a:	f043 0201 	orr.w	r2, r3, #1
 8015c9e:	697b      	ldr	r3, [r7, #20]
 8015ca0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8015ca4:	697b      	ldr	r3, [r7, #20]
 8015ca6:	4a63      	ldr	r2, [pc, #396]	; (8015e34 <HAL_CAN_ConfigFilter+0x1d4>)
 8015ca8:	4293      	cmp	r3, r2
 8015caa:	d111      	bne.n	8015cd0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8015cac:	697b      	ldr	r3, [r7, #20]
 8015cae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015cb2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8015cb6:	697b      	ldr	r3, [r7, #20]
 8015cb8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8015cbc:	697b      	ldr	r3, [r7, #20]
 8015cbe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8015cc2:	683b      	ldr	r3, [r7, #0]
 8015cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cc6:	021b      	lsls	r3, r3, #8
 8015cc8:	431a      	orrs	r2, r3
 8015cca:	697b      	ldr	r3, [r7, #20]
 8015ccc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	695b      	ldr	r3, [r3, #20]
 8015cd4:	f003 031f 	and.w	r3, r3, #31
 8015cd8:	2201      	movs	r2, #1
 8015cda:	fa02 f303 	lsl.w	r3, r2, r3
 8015cde:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8015ce0:	697b      	ldr	r3, [r7, #20]
 8015ce2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	43db      	mvns	r3, r3
 8015cea:	401a      	ands	r2, r3
 8015cec:	697b      	ldr	r3, [r7, #20]
 8015cee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	69db      	ldr	r3, [r3, #28]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d123      	bne.n	8015d42 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8015cfa:	697b      	ldr	r3, [r7, #20]
 8015cfc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	43db      	mvns	r3, r3
 8015d04:	401a      	ands	r2, r3
 8015d06:	697b      	ldr	r3, [r7, #20]
 8015d08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8015d0c:	683b      	ldr	r3, [r7, #0]
 8015d0e:	68db      	ldr	r3, [r3, #12]
 8015d10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8015d12:	683b      	ldr	r3, [r7, #0]
 8015d14:	685b      	ldr	r3, [r3, #4]
 8015d16:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015d18:	683a      	ldr	r2, [r7, #0]
 8015d1a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8015d1c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015d1e:	697b      	ldr	r3, [r7, #20]
 8015d20:	3248      	adds	r2, #72	; 0x48
 8015d22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	689b      	ldr	r3, [r3, #8]
 8015d2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8015d2c:	683b      	ldr	r3, [r7, #0]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015d36:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015d38:	6979      	ldr	r1, [r7, #20]
 8015d3a:	3348      	adds	r3, #72	; 0x48
 8015d3c:	00db      	lsls	r3, r3, #3
 8015d3e:	440b      	add	r3, r1
 8015d40:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8015d42:	683b      	ldr	r3, [r7, #0]
 8015d44:	69db      	ldr	r3, [r3, #28]
 8015d46:	2b01      	cmp	r3, #1
 8015d48:	d122      	bne.n	8015d90 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8015d4a:	697b      	ldr	r3, [r7, #20]
 8015d4c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	431a      	orrs	r2, r3
 8015d54:	697b      	ldr	r3, [r7, #20]
 8015d56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8015d5a:	683b      	ldr	r3, [r7, #0]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8015d60:	683b      	ldr	r3, [r7, #0]
 8015d62:	685b      	ldr	r3, [r3, #4]
 8015d64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015d66:	683a      	ldr	r2, [r7, #0]
 8015d68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8015d6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015d6c:	697b      	ldr	r3, [r7, #20]
 8015d6e:	3248      	adds	r2, #72	; 0x48
 8015d70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	689b      	ldr	r3, [r3, #8]
 8015d78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	68db      	ldr	r3, [r3, #12]
 8015d7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015d80:	683b      	ldr	r3, [r7, #0]
 8015d82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015d84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015d86:	6979      	ldr	r1, [r7, #20]
 8015d88:	3348      	adds	r3, #72	; 0x48
 8015d8a:	00db      	lsls	r3, r3, #3
 8015d8c:	440b      	add	r3, r1
 8015d8e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	699b      	ldr	r3, [r3, #24]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d109      	bne.n	8015dac <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8015d98:	697b      	ldr	r3, [r7, #20]
 8015d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	43db      	mvns	r3, r3
 8015da2:	401a      	ands	r2, r3
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8015daa:	e007      	b.n	8015dbc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8015dac:	697b      	ldr	r3, [r7, #20]
 8015dae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	431a      	orrs	r2, r3
 8015db6:	697b      	ldr	r3, [r7, #20]
 8015db8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	691b      	ldr	r3, [r3, #16]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d109      	bne.n	8015dd8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8015dc4:	697b      	ldr	r3, [r7, #20]
 8015dc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	43db      	mvns	r3, r3
 8015dce:	401a      	ands	r2, r3
 8015dd0:	697b      	ldr	r3, [r7, #20]
 8015dd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8015dd6:	e007      	b.n	8015de8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8015dd8:	697b      	ldr	r3, [r7, #20]
 8015dda:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	431a      	orrs	r2, r3
 8015de2:	697b      	ldr	r3, [r7, #20]
 8015de4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	6a1b      	ldr	r3, [r3, #32]
 8015dec:	2b01      	cmp	r3, #1
 8015dee:	d107      	bne.n	8015e00 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8015df0:	697b      	ldr	r3, [r7, #20]
 8015df2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	431a      	orrs	r2, r3
 8015dfa:	697b      	ldr	r3, [r7, #20]
 8015dfc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8015e00:	697b      	ldr	r3, [r7, #20]
 8015e02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015e06:	f023 0201 	bic.w	r2, r3, #1
 8015e0a:	697b      	ldr	r3, [r7, #20]
 8015e0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8015e10:	2300      	movs	r3, #0
 8015e12:	e006      	b.n	8015e22 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015e20:	2301      	movs	r3, #1
  }
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	371c      	adds	r7, #28
 8015e26:	46bd      	mov	sp, r7
 8015e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2c:	4770      	bx	lr
 8015e2e:	bf00      	nop
 8015e30:	40003400 	.word	0x40003400
 8015e34:	40006400 	.word	0x40006400

08015e38 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b084      	sub	sp, #16
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015e46:	b2db      	uxtb	r3, r3
 8015e48:	2b01      	cmp	r3, #1
 8015e4a:	d12e      	bne.n	8015eaa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	2202      	movs	r2, #2
 8015e50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	681a      	ldr	r2, [r3, #0]
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	f022 0201 	bic.w	r2, r2, #1
 8015e62:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015e64:	f7ff fd86 	bl	8015974 <HAL_GetTick>
 8015e68:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8015e6a:	e012      	b.n	8015e92 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015e6c:	f7ff fd82 	bl	8015974 <HAL_GetTick>
 8015e70:	4602      	mov	r2, r0
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	1ad3      	subs	r3, r2, r3
 8015e76:	2b0a      	cmp	r3, #10
 8015e78:	d90b      	bls.n	8015e92 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	2205      	movs	r2, #5
 8015e8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8015e8e:	2301      	movs	r3, #1
 8015e90:	e012      	b.n	8015eb8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	685b      	ldr	r3, [r3, #4]
 8015e98:	f003 0301 	and.w	r3, r3, #1
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d1e5      	bne.n	8015e6c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	e006      	b.n	8015eb8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015eb6:	2301      	movs	r3, #1
  }
}
 8015eb8:	4618      	mov	r0, r3
 8015eba:	3710      	adds	r7, #16
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bd80      	pop	{r7, pc}

08015ec0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8015ec0:	b480      	push	{r7}
 8015ec2:	b089      	sub	sp, #36	; 0x24
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	60f8      	str	r0, [r7, #12]
 8015ec8:	60b9      	str	r1, [r7, #8]
 8015eca:	607a      	str	r2, [r7, #4]
 8015ecc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ed4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	689b      	ldr	r3, [r3, #8]
 8015edc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8015ede:	7ffb      	ldrb	r3, [r7, #31]
 8015ee0:	2b01      	cmp	r3, #1
 8015ee2:	d003      	beq.n	8015eec <HAL_CAN_AddTxMessage+0x2c>
 8015ee4:	7ffb      	ldrb	r3, [r7, #31]
 8015ee6:	2b02      	cmp	r3, #2
 8015ee8:	f040 80ad 	bne.w	8016046 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8015eec:	69bb      	ldr	r3, [r7, #24]
 8015eee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d10a      	bne.n	8015f0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8015ef6:	69bb      	ldr	r3, [r7, #24]
 8015ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d105      	bne.n	8015f0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8015f00:	69bb      	ldr	r3, [r7, #24]
 8015f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	f000 8095 	beq.w	8016036 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8015f0c:	69bb      	ldr	r3, [r7, #24]
 8015f0e:	0e1b      	lsrs	r3, r3, #24
 8015f10:	f003 0303 	and.w	r3, r3, #3
 8015f14:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8015f16:	2201      	movs	r2, #1
 8015f18:	697b      	ldr	r3, [r7, #20]
 8015f1a:	409a      	lsls	r2, r3
 8015f1c:	683b      	ldr	r3, [r7, #0]
 8015f1e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8015f20:	68bb      	ldr	r3, [r7, #8]
 8015f22:	689b      	ldr	r3, [r3, #8]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d10d      	bne.n	8015f44 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8015f28:	68bb      	ldr	r3, [r7, #8]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8015f2e:	68bb      	ldr	r3, [r7, #8]
 8015f30:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8015f32:	68f9      	ldr	r1, [r7, #12]
 8015f34:	6809      	ldr	r1, [r1, #0]
 8015f36:	431a      	orrs	r2, r3
 8015f38:	697b      	ldr	r3, [r7, #20]
 8015f3a:	3318      	adds	r3, #24
 8015f3c:	011b      	lsls	r3, r3, #4
 8015f3e:	440b      	add	r3, r1
 8015f40:	601a      	str	r2, [r3, #0]
 8015f42:	e00f      	b.n	8015f64 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015f44:	68bb      	ldr	r3, [r7, #8]
 8015f46:	685b      	ldr	r3, [r3, #4]
 8015f48:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8015f4a:	68bb      	ldr	r3, [r7, #8]
 8015f4c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015f4e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8015f50:	68bb      	ldr	r3, [r7, #8]
 8015f52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015f54:	68f9      	ldr	r1, [r7, #12]
 8015f56:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8015f58:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015f5a:	697b      	ldr	r3, [r7, #20]
 8015f5c:	3318      	adds	r3, #24
 8015f5e:	011b      	lsls	r3, r3, #4
 8015f60:	440b      	add	r3, r1
 8015f62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	6819      	ldr	r1, [r3, #0]
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	691a      	ldr	r2, [r3, #16]
 8015f6c:	697b      	ldr	r3, [r7, #20]
 8015f6e:	3318      	adds	r3, #24
 8015f70:	011b      	lsls	r3, r3, #4
 8015f72:	440b      	add	r3, r1
 8015f74:	3304      	adds	r3, #4
 8015f76:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8015f78:	68bb      	ldr	r3, [r7, #8]
 8015f7a:	7d1b      	ldrb	r3, [r3, #20]
 8015f7c:	2b01      	cmp	r3, #1
 8015f7e:	d111      	bne.n	8015fa4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	681a      	ldr	r2, [r3, #0]
 8015f84:	697b      	ldr	r3, [r7, #20]
 8015f86:	3318      	adds	r3, #24
 8015f88:	011b      	lsls	r3, r3, #4
 8015f8a:	4413      	add	r3, r2
 8015f8c:	3304      	adds	r3, #4
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	68fa      	ldr	r2, [r7, #12]
 8015f92:	6811      	ldr	r1, [r2, #0]
 8015f94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8015f98:	697b      	ldr	r3, [r7, #20]
 8015f9a:	3318      	adds	r3, #24
 8015f9c:	011b      	lsls	r3, r3, #4
 8015f9e:	440b      	add	r3, r1
 8015fa0:	3304      	adds	r3, #4
 8015fa2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	3307      	adds	r3, #7
 8015fa8:	781b      	ldrb	r3, [r3, #0]
 8015faa:	061a      	lsls	r2, r3, #24
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	3306      	adds	r3, #6
 8015fb0:	781b      	ldrb	r3, [r3, #0]
 8015fb2:	041b      	lsls	r3, r3, #16
 8015fb4:	431a      	orrs	r2, r3
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	3305      	adds	r3, #5
 8015fba:	781b      	ldrb	r3, [r3, #0]
 8015fbc:	021b      	lsls	r3, r3, #8
 8015fbe:	4313      	orrs	r3, r2
 8015fc0:	687a      	ldr	r2, [r7, #4]
 8015fc2:	3204      	adds	r2, #4
 8015fc4:	7812      	ldrb	r2, [r2, #0]
 8015fc6:	4610      	mov	r0, r2
 8015fc8:	68fa      	ldr	r2, [r7, #12]
 8015fca:	6811      	ldr	r1, [r2, #0]
 8015fcc:	ea43 0200 	orr.w	r2, r3, r0
 8015fd0:	697b      	ldr	r3, [r7, #20]
 8015fd2:	011b      	lsls	r3, r3, #4
 8015fd4:	440b      	add	r3, r1
 8015fd6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8015fda:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	3303      	adds	r3, #3
 8015fe0:	781b      	ldrb	r3, [r3, #0]
 8015fe2:	061a      	lsls	r2, r3, #24
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	3302      	adds	r3, #2
 8015fe8:	781b      	ldrb	r3, [r3, #0]
 8015fea:	041b      	lsls	r3, r3, #16
 8015fec:	431a      	orrs	r2, r3
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	3301      	adds	r3, #1
 8015ff2:	781b      	ldrb	r3, [r3, #0]
 8015ff4:	021b      	lsls	r3, r3, #8
 8015ff6:	4313      	orrs	r3, r2
 8015ff8:	687a      	ldr	r2, [r7, #4]
 8015ffa:	7812      	ldrb	r2, [r2, #0]
 8015ffc:	4610      	mov	r0, r2
 8015ffe:	68fa      	ldr	r2, [r7, #12]
 8016000:	6811      	ldr	r1, [r2, #0]
 8016002:	ea43 0200 	orr.w	r2, r3, r0
 8016006:	697b      	ldr	r3, [r7, #20]
 8016008:	011b      	lsls	r3, r3, #4
 801600a:	440b      	add	r3, r1
 801600c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8016010:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	681a      	ldr	r2, [r3, #0]
 8016016:	697b      	ldr	r3, [r7, #20]
 8016018:	3318      	adds	r3, #24
 801601a:	011b      	lsls	r3, r3, #4
 801601c:	4413      	add	r3, r2
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	68fa      	ldr	r2, [r7, #12]
 8016022:	6811      	ldr	r1, [r2, #0]
 8016024:	f043 0201 	orr.w	r2, r3, #1
 8016028:	697b      	ldr	r3, [r7, #20]
 801602a:	3318      	adds	r3, #24
 801602c:	011b      	lsls	r3, r3, #4
 801602e:	440b      	add	r3, r1
 8016030:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8016032:	2300      	movs	r3, #0
 8016034:	e00e      	b.n	8016054 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801603a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8016042:	2301      	movs	r3, #1
 8016044:	e006      	b.n	8016054 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801604a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8016052:	2301      	movs	r3, #1
  }
}
 8016054:	4618      	mov	r0, r3
 8016056:	3724      	adds	r7, #36	; 0x24
 8016058:	46bd      	mov	sp, r7
 801605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605e:	4770      	bx	lr

08016060 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8016060:	b480      	push	{r7}
 8016062:	b085      	sub	sp, #20
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
 8016068:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 801606a:	2300      	movs	r3, #0
 801606c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016074:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8016076:	7afb      	ldrb	r3, [r7, #11]
 8016078:	2b01      	cmp	r3, #1
 801607a:	d002      	beq.n	8016082 <HAL_CAN_IsTxMessagePending+0x22>
 801607c:	7afb      	ldrb	r3, [r7, #11]
 801607e:	2b02      	cmp	r3, #2
 8016080:	d10b      	bne.n	801609a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	689a      	ldr	r2, [r3, #8]
 8016088:	683b      	ldr	r3, [r7, #0]
 801608a:	069b      	lsls	r3, r3, #26
 801608c:	401a      	ands	r2, r3
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	069b      	lsls	r3, r3, #26
 8016092:	429a      	cmp	r2, r3
 8016094:	d001      	beq.n	801609a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8016096:	2301      	movs	r3, #1
 8016098:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 801609a:	68fb      	ldr	r3, [r7, #12]
}
 801609c:	4618      	mov	r0, r3
 801609e:	3714      	adds	r7, #20
 80160a0:	46bd      	mov	sp, r7
 80160a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a6:	4770      	bx	lr

080160a8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80160a8:	b480      	push	{r7}
 80160aa:	b087      	sub	sp, #28
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	60f8      	str	r0, [r7, #12]
 80160b0:	60b9      	str	r1, [r7, #8]
 80160b2:	607a      	str	r2, [r7, #4]
 80160b4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160bc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80160be:	7dfb      	ldrb	r3, [r7, #23]
 80160c0:	2b01      	cmp	r3, #1
 80160c2:	d003      	beq.n	80160cc <HAL_CAN_GetRxMessage+0x24>
 80160c4:	7dfb      	ldrb	r3, [r7, #23]
 80160c6:	2b02      	cmp	r3, #2
 80160c8:	f040 80f3 	bne.w	80162b2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d10e      	bne.n	80160f0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	68db      	ldr	r3, [r3, #12]
 80160d8:	f003 0303 	and.w	r3, r3, #3
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d116      	bne.n	801610e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80160ec:	2301      	movs	r3, #1
 80160ee:	e0e7      	b.n	80162c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	691b      	ldr	r3, [r3, #16]
 80160f6:	f003 0303 	and.w	r3, r3, #3
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d107      	bne.n	801610e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016102:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801610a:	2301      	movs	r3, #1
 801610c:	e0d8      	b.n	80162c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	681a      	ldr	r2, [r3, #0]
 8016112:	68bb      	ldr	r3, [r7, #8]
 8016114:	331b      	adds	r3, #27
 8016116:	011b      	lsls	r3, r3, #4
 8016118:	4413      	add	r3, r2
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	f003 0204 	and.w	r2, r3, #4
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	689b      	ldr	r3, [r3, #8]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d10c      	bne.n	8016146 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	681a      	ldr	r2, [r3, #0]
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	331b      	adds	r3, #27
 8016134:	011b      	lsls	r3, r3, #4
 8016136:	4413      	add	r3, r2
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	0d5b      	lsrs	r3, r3, #21
 801613c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	601a      	str	r2, [r3, #0]
 8016144:	e00b      	b.n	801615e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	681a      	ldr	r2, [r3, #0]
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	331b      	adds	r3, #27
 801614e:	011b      	lsls	r3, r3, #4
 8016150:	4413      	add	r3, r2
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	08db      	lsrs	r3, r3, #3
 8016156:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	681a      	ldr	r2, [r3, #0]
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	331b      	adds	r3, #27
 8016166:	011b      	lsls	r3, r3, #4
 8016168:	4413      	add	r3, r2
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	f003 0202 	and.w	r2, r3, #2
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	681a      	ldr	r2, [r3, #0]
 8016178:	68bb      	ldr	r3, [r7, #8]
 801617a:	331b      	adds	r3, #27
 801617c:	011b      	lsls	r3, r3, #4
 801617e:	4413      	add	r3, r2
 8016180:	3304      	adds	r3, #4
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	f003 020f 	and.w	r2, r3, #15
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	681a      	ldr	r2, [r3, #0]
 8016190:	68bb      	ldr	r3, [r7, #8]
 8016192:	331b      	adds	r3, #27
 8016194:	011b      	lsls	r3, r3, #4
 8016196:	4413      	add	r3, r2
 8016198:	3304      	adds	r3, #4
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	0a1b      	lsrs	r3, r3, #8
 801619e:	b2da      	uxtb	r2, r3
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	681a      	ldr	r2, [r3, #0]
 80161a8:	68bb      	ldr	r3, [r7, #8]
 80161aa:	331b      	adds	r3, #27
 80161ac:	011b      	lsls	r3, r3, #4
 80161ae:	4413      	add	r3, r2
 80161b0:	3304      	adds	r3, #4
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	0c1b      	lsrs	r3, r3, #16
 80161b6:	b29a      	uxth	r2, r3
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	681a      	ldr	r2, [r3, #0]
 80161c0:	68bb      	ldr	r3, [r7, #8]
 80161c2:	011b      	lsls	r3, r3, #4
 80161c4:	4413      	add	r3, r2
 80161c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	b2da      	uxtb	r2, r3
 80161ce:	683b      	ldr	r3, [r7, #0]
 80161d0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	681a      	ldr	r2, [r3, #0]
 80161d6:	68bb      	ldr	r3, [r7, #8]
 80161d8:	011b      	lsls	r3, r3, #4
 80161da:	4413      	add	r3, r2
 80161dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	0a1a      	lsrs	r2, r3, #8
 80161e4:	683b      	ldr	r3, [r7, #0]
 80161e6:	3301      	adds	r3, #1
 80161e8:	b2d2      	uxtb	r2, r2
 80161ea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	681a      	ldr	r2, [r3, #0]
 80161f0:	68bb      	ldr	r3, [r7, #8]
 80161f2:	011b      	lsls	r3, r3, #4
 80161f4:	4413      	add	r3, r2
 80161f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	0c1a      	lsrs	r2, r3, #16
 80161fe:	683b      	ldr	r3, [r7, #0]
 8016200:	3302      	adds	r3, #2
 8016202:	b2d2      	uxtb	r2, r2
 8016204:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	681a      	ldr	r2, [r3, #0]
 801620a:	68bb      	ldr	r3, [r7, #8]
 801620c:	011b      	lsls	r3, r3, #4
 801620e:	4413      	add	r3, r2
 8016210:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	0e1a      	lsrs	r2, r3, #24
 8016218:	683b      	ldr	r3, [r7, #0]
 801621a:	3303      	adds	r3, #3
 801621c:	b2d2      	uxtb	r2, r2
 801621e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	681a      	ldr	r2, [r3, #0]
 8016224:	68bb      	ldr	r3, [r7, #8]
 8016226:	011b      	lsls	r3, r3, #4
 8016228:	4413      	add	r3, r2
 801622a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801622e:	681a      	ldr	r2, [r3, #0]
 8016230:	683b      	ldr	r3, [r7, #0]
 8016232:	3304      	adds	r3, #4
 8016234:	b2d2      	uxtb	r2, r2
 8016236:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	681a      	ldr	r2, [r3, #0]
 801623c:	68bb      	ldr	r3, [r7, #8]
 801623e:	011b      	lsls	r3, r3, #4
 8016240:	4413      	add	r3, r2
 8016242:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	0a1a      	lsrs	r2, r3, #8
 801624a:	683b      	ldr	r3, [r7, #0]
 801624c:	3305      	adds	r3, #5
 801624e:	b2d2      	uxtb	r2, r2
 8016250:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	681a      	ldr	r2, [r3, #0]
 8016256:	68bb      	ldr	r3, [r7, #8]
 8016258:	011b      	lsls	r3, r3, #4
 801625a:	4413      	add	r3, r2
 801625c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	0c1a      	lsrs	r2, r3, #16
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	3306      	adds	r3, #6
 8016268:	b2d2      	uxtb	r2, r2
 801626a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	681a      	ldr	r2, [r3, #0]
 8016270:	68bb      	ldr	r3, [r7, #8]
 8016272:	011b      	lsls	r3, r3, #4
 8016274:	4413      	add	r3, r2
 8016276:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	0e1a      	lsrs	r2, r3, #24
 801627e:	683b      	ldr	r3, [r7, #0]
 8016280:	3307      	adds	r3, #7
 8016282:	b2d2      	uxtb	r2, r2
 8016284:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d108      	bne.n	801629e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	68da      	ldr	r2, [r3, #12]
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	f042 0220 	orr.w	r2, r2, #32
 801629a:	60da      	str	r2, [r3, #12]
 801629c:	e007      	b.n	80162ae <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	691a      	ldr	r2, [r3, #16]
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	f042 0220 	orr.w	r2, r2, #32
 80162ac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80162ae:	2300      	movs	r3, #0
 80162b0:	e006      	b.n	80162c0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80162be:	2301      	movs	r3, #1
  }
}
 80162c0:	4618      	mov	r0, r3
 80162c2:	371c      	adds	r7, #28
 80162c4:	46bd      	mov	sp, r7
 80162c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ca:	4770      	bx	lr

080162cc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80162cc:	b480      	push	{r7}
 80162ce:	b085      	sub	sp, #20
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80162dc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80162de:	7bfb      	ldrb	r3, [r7, #15]
 80162e0:	2b01      	cmp	r3, #1
 80162e2:	d002      	beq.n	80162ea <HAL_CAN_ActivateNotification+0x1e>
 80162e4:	7bfb      	ldrb	r3, [r7, #15]
 80162e6:	2b02      	cmp	r3, #2
 80162e8:	d109      	bne.n	80162fe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	6959      	ldr	r1, [r3, #20]
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	683a      	ldr	r2, [r7, #0]
 80162f6:	430a      	orrs	r2, r1
 80162f8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80162fa:	2300      	movs	r3, #0
 80162fc:	e006      	b.n	801630c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016302:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801630a:	2301      	movs	r3, #1
  }
}
 801630c:	4618      	mov	r0, r3
 801630e:	3714      	adds	r7, #20
 8016310:	46bd      	mov	sp, r7
 8016312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016316:	4770      	bx	lr

08016318 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b08a      	sub	sp, #40	; 0x28
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8016320:	2300      	movs	r3, #0
 8016322:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	695b      	ldr	r3, [r3, #20]
 801632a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	685b      	ldr	r3, [r3, #4]
 8016332:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	689b      	ldr	r3, [r3, #8]
 801633a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	68db      	ldr	r3, [r3, #12]
 8016342:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	691b      	ldr	r3, [r3, #16]
 801634a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	699b      	ldr	r3, [r3, #24]
 8016352:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8016354:	6a3b      	ldr	r3, [r7, #32]
 8016356:	f003 0301 	and.w	r3, r3, #1
 801635a:	2b00      	cmp	r3, #0
 801635c:	f000 8083 	beq.w	8016466 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8016360:	69bb      	ldr	r3, [r7, #24]
 8016362:	f003 0301 	and.w	r3, r3, #1
 8016366:	2b00      	cmp	r3, #0
 8016368:	d025      	beq.n	80163b6 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	2201      	movs	r2, #1
 8016370:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8016372:	69bb      	ldr	r3, [r7, #24]
 8016374:	f003 0302 	and.w	r3, r3, #2
 8016378:	2b00      	cmp	r3, #0
 801637a:	d004      	beq.n	8016386 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016380:	6878      	ldr	r0, [r7, #4]
 8016382:	4798      	blx	r3
 8016384:	e017      	b.n	80163b6 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8016386:	69bb      	ldr	r3, [r7, #24]
 8016388:	f003 0304 	and.w	r3, r3, #4
 801638c:	2b00      	cmp	r3, #0
 801638e:	d004      	beq.n	801639a <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8016390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016392:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016396:	627b      	str	r3, [r7, #36]	; 0x24
 8016398:	e00d      	b.n	80163b6 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 801639a:	69bb      	ldr	r3, [r7, #24]
 801639c:	f003 0308 	and.w	r3, r3, #8
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d004      	beq.n	80163ae <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80163a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80163aa:	627b      	str	r3, [r7, #36]	; 0x24
 80163ac:	e003      	b.n	80163b6 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80163b2:	6878      	ldr	r0, [r7, #4]
 80163b4:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80163b6:	69bb      	ldr	r3, [r7, #24]
 80163b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d026      	beq.n	801640e <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80163c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80163ca:	69bb      	ldr	r3, [r7, #24]
 80163cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d004      	beq.n	80163de <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163d8:	6878      	ldr	r0, [r7, #4]
 80163da:	4798      	blx	r3
 80163dc:	e017      	b.n	801640e <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80163de:	69bb      	ldr	r3, [r7, #24]
 80163e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d004      	beq.n	80163f2 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80163e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80163ee:	627b      	str	r3, [r7, #36]	; 0x24
 80163f0:	e00d      	b.n	801640e <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80163f2:	69bb      	ldr	r3, [r7, #24]
 80163f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d004      	beq.n	8016406 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80163fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016402:	627b      	str	r3, [r7, #36]	; 0x24
 8016404:	e003      	b.n	801640e <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801640a:	6878      	ldr	r0, [r7, #4]
 801640c:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 801640e:	69bb      	ldr	r3, [r7, #24]
 8016410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016414:	2b00      	cmp	r3, #0
 8016416:	d026      	beq.n	8016466 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8016420:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8016422:	69bb      	ldr	r3, [r7, #24]
 8016424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016428:	2b00      	cmp	r3, #0
 801642a:	d004      	beq.n	8016436 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	4798      	blx	r3
 8016434:	e017      	b.n	8016466 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8016436:	69bb      	ldr	r3, [r7, #24]
 8016438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801643c:	2b00      	cmp	r3, #0
 801643e:	d004      	beq.n	801644a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8016440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016446:	627b      	str	r3, [r7, #36]	; 0x24
 8016448:	e00d      	b.n	8016466 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 801644a:	69bb      	ldr	r3, [r7, #24]
 801644c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016450:	2b00      	cmp	r3, #0
 8016452:	d004      	beq.n	801645e <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8016454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801645a:	627b      	str	r3, [r7, #36]	; 0x24
 801645c:	e003      	b.n	8016466 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016462:	6878      	ldr	r0, [r7, #4]
 8016464:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8016466:	6a3b      	ldr	r3, [r7, #32]
 8016468:	f003 0308 	and.w	r3, r3, #8
 801646c:	2b00      	cmp	r3, #0
 801646e:	d00c      	beq.n	801648a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8016470:	697b      	ldr	r3, [r7, #20]
 8016472:	f003 0310 	and.w	r3, r3, #16
 8016476:	2b00      	cmp	r3, #0
 8016478:	d007      	beq.n	801648a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 801647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801647c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016480:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	2210      	movs	r2, #16
 8016488:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 801648a:	6a3b      	ldr	r3, [r7, #32]
 801648c:	f003 0304 	and.w	r3, r3, #4
 8016490:	2b00      	cmp	r3, #0
 8016492:	d00c      	beq.n	80164ae <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8016494:	697b      	ldr	r3, [r7, #20]
 8016496:	f003 0308 	and.w	r3, r3, #8
 801649a:	2b00      	cmp	r3, #0
 801649c:	d007      	beq.n	80164ae <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	2208      	movs	r2, #8
 80164a4:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80164aa:	6878      	ldr	r0, [r7, #4]
 80164ac:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80164ae:	6a3b      	ldr	r3, [r7, #32]
 80164b0:	f003 0302 	and.w	r3, r3, #2
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d00a      	beq.n	80164ce <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	68db      	ldr	r3, [r3, #12]
 80164be:	f003 0303 	and.w	r3, r3, #3
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d003      	beq.n	80164ce <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164ca:	6878      	ldr	r0, [r7, #4]
 80164cc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80164ce:	6a3b      	ldr	r3, [r7, #32]
 80164d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d00c      	beq.n	80164f2 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80164d8:	693b      	ldr	r3, [r7, #16]
 80164da:	f003 0310 	and.w	r3, r3, #16
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d007      	beq.n	80164f2 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80164e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80164e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	2210      	movs	r2, #16
 80164f0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80164f2:	6a3b      	ldr	r3, [r7, #32]
 80164f4:	f003 0320 	and.w	r3, r3, #32
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d00c      	beq.n	8016516 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80164fc:	693b      	ldr	r3, [r7, #16]
 80164fe:	f003 0308 	and.w	r3, r3, #8
 8016502:	2b00      	cmp	r3, #0
 8016504:	d007      	beq.n	8016516 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	2208      	movs	r2, #8
 801650c:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016512:	6878      	ldr	r0, [r7, #4]
 8016514:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8016516:	6a3b      	ldr	r3, [r7, #32]
 8016518:	f003 0310 	and.w	r3, r3, #16
 801651c:	2b00      	cmp	r3, #0
 801651e:	d00a      	beq.n	8016536 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	691b      	ldr	r3, [r3, #16]
 8016526:	f003 0303 	and.w	r3, r3, #3
 801652a:	2b00      	cmp	r3, #0
 801652c:	d003      	beq.n	8016536 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016532:	6878      	ldr	r0, [r7, #4]
 8016534:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8016536:	6a3b      	ldr	r3, [r7, #32]
 8016538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801653c:	2b00      	cmp	r3, #0
 801653e:	d00c      	beq.n	801655a <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8016540:	69fb      	ldr	r3, [r7, #28]
 8016542:	f003 0310 	and.w	r3, r3, #16
 8016546:	2b00      	cmp	r3, #0
 8016548:	d007      	beq.n	801655a <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	2210      	movs	r2, #16
 8016550:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 801655a:	6a3b      	ldr	r3, [r7, #32]
 801655c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016560:	2b00      	cmp	r3, #0
 8016562:	d00c      	beq.n	801657e <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8016564:	69fb      	ldr	r3, [r7, #28]
 8016566:	f003 0308 	and.w	r3, r3, #8
 801656a:	2b00      	cmp	r3, #0
 801656c:	d007      	beq.n	801657e <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	2208      	movs	r2, #8
 8016574:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801657a:	6878      	ldr	r0, [r7, #4]
 801657c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 801657e:	6a3b      	ldr	r3, [r7, #32]
 8016580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016584:	2b00      	cmp	r3, #0
 8016586:	d07b      	beq.n	8016680 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8016588:	69fb      	ldr	r3, [r7, #28]
 801658a:	f003 0304 	and.w	r3, r3, #4
 801658e:	2b00      	cmp	r3, #0
 8016590:	d072      	beq.n	8016678 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8016592:	6a3b      	ldr	r3, [r7, #32]
 8016594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016598:	2b00      	cmp	r3, #0
 801659a:	d008      	beq.n	80165ae <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d003      	beq.n	80165ae <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80165a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165a8:	f043 0301 	orr.w	r3, r3, #1
 80165ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80165ae:	6a3b      	ldr	r3, [r7, #32]
 80165b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d008      	beq.n	80165ca <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d003      	beq.n	80165ca <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80165c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c4:	f043 0302 	orr.w	r3, r3, #2
 80165c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80165ca:	6a3b      	ldr	r3, [r7, #32]
 80165cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d008      	beq.n	80165e6 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d003      	beq.n	80165e6 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80165de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165e0:	f043 0304 	orr.w	r3, r3, #4
 80165e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80165e6:	6a3b      	ldr	r3, [r7, #32]
 80165e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d043      	beq.n	8016678 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d03e      	beq.n	8016678 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8016600:	2b60      	cmp	r3, #96	; 0x60
 8016602:	d02b      	beq.n	801665c <HAL_CAN_IRQHandler+0x344>
 8016604:	2b60      	cmp	r3, #96	; 0x60
 8016606:	d82e      	bhi.n	8016666 <HAL_CAN_IRQHandler+0x34e>
 8016608:	2b50      	cmp	r3, #80	; 0x50
 801660a:	d022      	beq.n	8016652 <HAL_CAN_IRQHandler+0x33a>
 801660c:	2b50      	cmp	r3, #80	; 0x50
 801660e:	d82a      	bhi.n	8016666 <HAL_CAN_IRQHandler+0x34e>
 8016610:	2b40      	cmp	r3, #64	; 0x40
 8016612:	d019      	beq.n	8016648 <HAL_CAN_IRQHandler+0x330>
 8016614:	2b40      	cmp	r3, #64	; 0x40
 8016616:	d826      	bhi.n	8016666 <HAL_CAN_IRQHandler+0x34e>
 8016618:	2b30      	cmp	r3, #48	; 0x30
 801661a:	d010      	beq.n	801663e <HAL_CAN_IRQHandler+0x326>
 801661c:	2b30      	cmp	r3, #48	; 0x30
 801661e:	d822      	bhi.n	8016666 <HAL_CAN_IRQHandler+0x34e>
 8016620:	2b10      	cmp	r3, #16
 8016622:	d002      	beq.n	801662a <HAL_CAN_IRQHandler+0x312>
 8016624:	2b20      	cmp	r3, #32
 8016626:	d005      	beq.n	8016634 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8016628:	e01d      	b.n	8016666 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 801662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801662c:	f043 0308 	orr.w	r3, r3, #8
 8016630:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016632:	e019      	b.n	8016668 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8016634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016636:	f043 0310 	orr.w	r3, r3, #16
 801663a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801663c:	e014      	b.n	8016668 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 801663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016640:	f043 0320 	orr.w	r3, r3, #32
 8016644:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016646:	e00f      	b.n	8016668 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8016648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801664a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801664e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016650:	e00a      	b.n	8016668 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8016652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016658:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801665a:	e005      	b.n	8016668 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 801665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801665e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016662:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016664:	e000      	b.n	8016668 <HAL_CAN_IRQHandler+0x350>
            break;
 8016666:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	699a      	ldr	r2, [r3, #24]
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8016676:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	2204      	movs	r2, #4
 801667e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8016680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016682:	2b00      	cmp	r3, #0
 8016684:	d009      	beq.n	801669a <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801668c:	431a      	orrs	r2, r3
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016696:	6878      	ldr	r0, [r7, #4]
 8016698:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 801669a:	bf00      	nop
 801669c:	3728      	adds	r7, #40	; 0x28
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}

080166a2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80166a2:	b480      	push	{r7}
 80166a4:	b083      	sub	sp, #12
 80166a6:	af00      	add	r7, sp, #0
 80166a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80166aa:	bf00      	nop
 80166ac:	370c      	adds	r7, #12
 80166ae:	46bd      	mov	sp, r7
 80166b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b4:	4770      	bx	lr

080166b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80166b6:	b480      	push	{r7}
 80166b8:	b083      	sub	sp, #12
 80166ba:	af00      	add	r7, sp, #0
 80166bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80166be:	bf00      	nop
 80166c0:	370c      	adds	r7, #12
 80166c2:	46bd      	mov	sp, r7
 80166c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c8:	4770      	bx	lr

080166ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80166ca:	b480      	push	{r7}
 80166cc:	b083      	sub	sp, #12
 80166ce:	af00      	add	r7, sp, #0
 80166d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80166d2:	bf00      	nop
 80166d4:	370c      	adds	r7, #12
 80166d6:	46bd      	mov	sp, r7
 80166d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166dc:	4770      	bx	lr

080166de <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80166de:	b480      	push	{r7}
 80166e0:	b083      	sub	sp, #12
 80166e2:	af00      	add	r7, sp, #0
 80166e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80166e6:	bf00      	nop
 80166e8:	370c      	adds	r7, #12
 80166ea:	46bd      	mov	sp, r7
 80166ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f0:	4770      	bx	lr

080166f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80166f2:	b480      	push	{r7}
 80166f4:	b083      	sub	sp, #12
 80166f6:	af00      	add	r7, sp, #0
 80166f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80166fa:	bf00      	nop
 80166fc:	370c      	adds	r7, #12
 80166fe:	46bd      	mov	sp, r7
 8016700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016704:	4770      	bx	lr

08016706 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8016706:	b480      	push	{r7}
 8016708:	b083      	sub	sp, #12
 801670a:	af00      	add	r7, sp, #0
 801670c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 801670e:	bf00      	nop
 8016710:	370c      	adds	r7, #12
 8016712:	46bd      	mov	sp, r7
 8016714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016718:	4770      	bx	lr

0801671a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 801671a:	b480      	push	{r7}
 801671c:	b083      	sub	sp, #12
 801671e:	af00      	add	r7, sp, #0
 8016720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8016722:	bf00      	nop
 8016724:	370c      	adds	r7, #12
 8016726:	46bd      	mov	sp, r7
 8016728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672c:	4770      	bx	lr

0801672e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 801672e:	b480      	push	{r7}
 8016730:	b083      	sub	sp, #12
 8016732:	af00      	add	r7, sp, #0
 8016734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8016736:	bf00      	nop
 8016738:	370c      	adds	r7, #12
 801673a:	46bd      	mov	sp, r7
 801673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016740:	4770      	bx	lr

08016742 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8016742:	b480      	push	{r7}
 8016744:	b083      	sub	sp, #12
 8016746:	af00      	add	r7, sp, #0
 8016748:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 801674a:	bf00      	nop
 801674c:	370c      	adds	r7, #12
 801674e:	46bd      	mov	sp, r7
 8016750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016754:	4770      	bx	lr

08016756 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8016756:	b480      	push	{r7}
 8016758:	b083      	sub	sp, #12
 801675a:	af00      	add	r7, sp, #0
 801675c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 801675e:	bf00      	nop
 8016760:	370c      	adds	r7, #12
 8016762:	46bd      	mov	sp, r7
 8016764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016768:	4770      	bx	lr

0801676a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 801676a:	b480      	push	{r7}
 801676c:	b083      	sub	sp, #12
 801676e:	af00      	add	r7, sp, #0
 8016770:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8016772:	bf00      	nop
 8016774:	370c      	adds	r7, #12
 8016776:	46bd      	mov	sp, r7
 8016778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677c:	4770      	bx	lr
	...

08016780 <__NVIC_SetPriorityGrouping>:
{
 8016780:	b480      	push	{r7}
 8016782:	b085      	sub	sp, #20
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	f003 0307 	and.w	r3, r3, #7
 801678e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016790:	4b0b      	ldr	r3, [pc, #44]	; (80167c0 <__NVIC_SetPriorityGrouping+0x40>)
 8016792:	68db      	ldr	r3, [r3, #12]
 8016794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8016796:	68ba      	ldr	r2, [r7, #8]
 8016798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801679c:	4013      	ands	r3, r2
 801679e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80167a4:	68bb      	ldr	r3, [r7, #8]
 80167a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80167a8:	4b06      	ldr	r3, [pc, #24]	; (80167c4 <__NVIC_SetPriorityGrouping+0x44>)
 80167aa:	4313      	orrs	r3, r2
 80167ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80167ae:	4a04      	ldr	r2, [pc, #16]	; (80167c0 <__NVIC_SetPriorityGrouping+0x40>)
 80167b0:	68bb      	ldr	r3, [r7, #8]
 80167b2:	60d3      	str	r3, [r2, #12]
}
 80167b4:	bf00      	nop
 80167b6:	3714      	adds	r7, #20
 80167b8:	46bd      	mov	sp, r7
 80167ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167be:	4770      	bx	lr
 80167c0:	e000ed00 	.word	0xe000ed00
 80167c4:	05fa0000 	.word	0x05fa0000

080167c8 <__NVIC_GetPriorityGrouping>:
{
 80167c8:	b480      	push	{r7}
 80167ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80167cc:	4b04      	ldr	r3, [pc, #16]	; (80167e0 <__NVIC_GetPriorityGrouping+0x18>)
 80167ce:	68db      	ldr	r3, [r3, #12]
 80167d0:	0a1b      	lsrs	r3, r3, #8
 80167d2:	f003 0307 	and.w	r3, r3, #7
}
 80167d6:	4618      	mov	r0, r3
 80167d8:	46bd      	mov	sp, r7
 80167da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167de:	4770      	bx	lr
 80167e0:	e000ed00 	.word	0xe000ed00

080167e4 <__NVIC_EnableIRQ>:
{
 80167e4:	b480      	push	{r7}
 80167e6:	b083      	sub	sp, #12
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	4603      	mov	r3, r0
 80167ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80167ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	db0b      	blt.n	801680e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80167f6:	79fb      	ldrb	r3, [r7, #7]
 80167f8:	f003 021f 	and.w	r2, r3, #31
 80167fc:	4907      	ldr	r1, [pc, #28]	; (801681c <__NVIC_EnableIRQ+0x38>)
 80167fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016802:	095b      	lsrs	r3, r3, #5
 8016804:	2001      	movs	r0, #1
 8016806:	fa00 f202 	lsl.w	r2, r0, r2
 801680a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801680e:	bf00      	nop
 8016810:	370c      	adds	r7, #12
 8016812:	46bd      	mov	sp, r7
 8016814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016818:	4770      	bx	lr
 801681a:	bf00      	nop
 801681c:	e000e100 	.word	0xe000e100

08016820 <__NVIC_SetPriority>:
{
 8016820:	b480      	push	{r7}
 8016822:	b083      	sub	sp, #12
 8016824:	af00      	add	r7, sp, #0
 8016826:	4603      	mov	r3, r0
 8016828:	6039      	str	r1, [r7, #0]
 801682a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801682c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016830:	2b00      	cmp	r3, #0
 8016832:	db0a      	blt.n	801684a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016834:	683b      	ldr	r3, [r7, #0]
 8016836:	b2da      	uxtb	r2, r3
 8016838:	490c      	ldr	r1, [pc, #48]	; (801686c <__NVIC_SetPriority+0x4c>)
 801683a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801683e:	0112      	lsls	r2, r2, #4
 8016840:	b2d2      	uxtb	r2, r2
 8016842:	440b      	add	r3, r1
 8016844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016848:	e00a      	b.n	8016860 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801684a:	683b      	ldr	r3, [r7, #0]
 801684c:	b2da      	uxtb	r2, r3
 801684e:	4908      	ldr	r1, [pc, #32]	; (8016870 <__NVIC_SetPriority+0x50>)
 8016850:	79fb      	ldrb	r3, [r7, #7]
 8016852:	f003 030f 	and.w	r3, r3, #15
 8016856:	3b04      	subs	r3, #4
 8016858:	0112      	lsls	r2, r2, #4
 801685a:	b2d2      	uxtb	r2, r2
 801685c:	440b      	add	r3, r1
 801685e:	761a      	strb	r2, [r3, #24]
}
 8016860:	bf00      	nop
 8016862:	370c      	adds	r7, #12
 8016864:	46bd      	mov	sp, r7
 8016866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686a:	4770      	bx	lr
 801686c:	e000e100 	.word	0xe000e100
 8016870:	e000ed00 	.word	0xe000ed00

08016874 <NVIC_EncodePriority>:
{
 8016874:	b480      	push	{r7}
 8016876:	b089      	sub	sp, #36	; 0x24
 8016878:	af00      	add	r7, sp, #0
 801687a:	60f8      	str	r0, [r7, #12]
 801687c:	60b9      	str	r1, [r7, #8]
 801687e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	f003 0307 	and.w	r3, r3, #7
 8016886:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016888:	69fb      	ldr	r3, [r7, #28]
 801688a:	f1c3 0307 	rsb	r3, r3, #7
 801688e:	2b04      	cmp	r3, #4
 8016890:	bf28      	it	cs
 8016892:	2304      	movcs	r3, #4
 8016894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016896:	69fb      	ldr	r3, [r7, #28]
 8016898:	3304      	adds	r3, #4
 801689a:	2b06      	cmp	r3, #6
 801689c:	d902      	bls.n	80168a4 <NVIC_EncodePriority+0x30>
 801689e:	69fb      	ldr	r3, [r7, #28]
 80168a0:	3b03      	subs	r3, #3
 80168a2:	e000      	b.n	80168a6 <NVIC_EncodePriority+0x32>
 80168a4:	2300      	movs	r3, #0
 80168a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80168a8:	f04f 32ff 	mov.w	r2, #4294967295
 80168ac:	69bb      	ldr	r3, [r7, #24]
 80168ae:	fa02 f303 	lsl.w	r3, r2, r3
 80168b2:	43da      	mvns	r2, r3
 80168b4:	68bb      	ldr	r3, [r7, #8]
 80168b6:	401a      	ands	r2, r3
 80168b8:	697b      	ldr	r3, [r7, #20]
 80168ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80168bc:	f04f 31ff 	mov.w	r1, #4294967295
 80168c0:	697b      	ldr	r3, [r7, #20]
 80168c2:	fa01 f303 	lsl.w	r3, r1, r3
 80168c6:	43d9      	mvns	r1, r3
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80168cc:	4313      	orrs	r3, r2
}
 80168ce:	4618      	mov	r0, r3
 80168d0:	3724      	adds	r7, #36	; 0x24
 80168d2:	46bd      	mov	sp, r7
 80168d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d8:	4770      	bx	lr
	...

080168dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b082      	sub	sp, #8
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	3b01      	subs	r3, #1
 80168e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80168ec:	d301      	bcc.n	80168f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80168ee:	2301      	movs	r3, #1
 80168f0:	e00f      	b.n	8016912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80168f2:	4a0a      	ldr	r2, [pc, #40]	; (801691c <SysTick_Config+0x40>)
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	3b01      	subs	r3, #1
 80168f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80168fa:	210f      	movs	r1, #15
 80168fc:	f04f 30ff 	mov.w	r0, #4294967295
 8016900:	f7ff ff8e 	bl	8016820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016904:	4b05      	ldr	r3, [pc, #20]	; (801691c <SysTick_Config+0x40>)
 8016906:	2200      	movs	r2, #0
 8016908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801690a:	4b04      	ldr	r3, [pc, #16]	; (801691c <SysTick_Config+0x40>)
 801690c:	2207      	movs	r2, #7
 801690e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016910:	2300      	movs	r3, #0
}
 8016912:	4618      	mov	r0, r3
 8016914:	3708      	adds	r7, #8
 8016916:	46bd      	mov	sp, r7
 8016918:	bd80      	pop	{r7, pc}
 801691a:	bf00      	nop
 801691c:	e000e010 	.word	0xe000e010

08016920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b082      	sub	sp, #8
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016928:	6878      	ldr	r0, [r7, #4]
 801692a:	f7ff ff29 	bl	8016780 <__NVIC_SetPriorityGrouping>
}
 801692e:	bf00      	nop
 8016930:	3708      	adds	r7, #8
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}

08016936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016936:	b580      	push	{r7, lr}
 8016938:	b086      	sub	sp, #24
 801693a:	af00      	add	r7, sp, #0
 801693c:	4603      	mov	r3, r0
 801693e:	60b9      	str	r1, [r7, #8]
 8016940:	607a      	str	r2, [r7, #4]
 8016942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8016944:	2300      	movs	r3, #0
 8016946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8016948:	f7ff ff3e 	bl	80167c8 <__NVIC_GetPriorityGrouping>
 801694c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801694e:	687a      	ldr	r2, [r7, #4]
 8016950:	68b9      	ldr	r1, [r7, #8]
 8016952:	6978      	ldr	r0, [r7, #20]
 8016954:	f7ff ff8e 	bl	8016874 <NVIC_EncodePriority>
 8016958:	4602      	mov	r2, r0
 801695a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801695e:	4611      	mov	r1, r2
 8016960:	4618      	mov	r0, r3
 8016962:	f7ff ff5d 	bl	8016820 <__NVIC_SetPriority>
}
 8016966:	bf00      	nop
 8016968:	3718      	adds	r7, #24
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}

0801696e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801696e:	b580      	push	{r7, lr}
 8016970:	b082      	sub	sp, #8
 8016972:	af00      	add	r7, sp, #0
 8016974:	4603      	mov	r3, r0
 8016976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801697c:	4618      	mov	r0, r3
 801697e:	f7ff ff31 	bl	80167e4 <__NVIC_EnableIRQ>
}
 8016982:	bf00      	nop
 8016984:	3708      	adds	r7, #8
 8016986:	46bd      	mov	sp, r7
 8016988:	bd80      	pop	{r7, pc}

0801698a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801698a:	b580      	push	{r7, lr}
 801698c:	b082      	sub	sp, #8
 801698e:	af00      	add	r7, sp, #0
 8016990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8016992:	6878      	ldr	r0, [r7, #4]
 8016994:	f7ff ffa2 	bl	80168dc <SysTick_Config>
 8016998:	4603      	mov	r3, r0
}
 801699a:	4618      	mov	r0, r3
 801699c:	3708      	adds	r7, #8
 801699e:	46bd      	mov	sp, r7
 80169a0:	bd80      	pop	{r7, pc}
	...

080169a4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80169a4:	b480      	push	{r7}
 80169a6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80169a8:	f3bf 8f5f 	dmb	sy
}
 80169ac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80169ae:	4b07      	ldr	r3, [pc, #28]	; (80169cc <HAL_MPU_Disable+0x28>)
 80169b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169b2:	4a06      	ldr	r2, [pc, #24]	; (80169cc <HAL_MPU_Disable+0x28>)
 80169b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80169b8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80169ba:	4b05      	ldr	r3, [pc, #20]	; (80169d0 <HAL_MPU_Disable+0x2c>)
 80169bc:	2200      	movs	r2, #0
 80169be:	605a      	str	r2, [r3, #4]
}
 80169c0:	bf00      	nop
 80169c2:	46bd      	mov	sp, r7
 80169c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c8:	4770      	bx	lr
 80169ca:	bf00      	nop
 80169cc:	e000ed00 	.word	0xe000ed00
 80169d0:	e000ed90 	.word	0xe000ed90

080169d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80169d4:	b480      	push	{r7}
 80169d6:	b083      	sub	sp, #12
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80169dc:	4a0b      	ldr	r2, [pc, #44]	; (8016a0c <HAL_MPU_Enable+0x38>)
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f043 0301 	orr.w	r3, r3, #1
 80169e4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80169e6:	4b0a      	ldr	r3, [pc, #40]	; (8016a10 <HAL_MPU_Enable+0x3c>)
 80169e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169ea:	4a09      	ldr	r2, [pc, #36]	; (8016a10 <HAL_MPU_Enable+0x3c>)
 80169ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80169f0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80169f2:	f3bf 8f4f 	dsb	sy
}
 80169f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80169f8:	f3bf 8f6f 	isb	sy
}
 80169fc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80169fe:	bf00      	nop
 8016a00:	370c      	adds	r7, #12
 8016a02:	46bd      	mov	sp, r7
 8016a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a08:	4770      	bx	lr
 8016a0a:	bf00      	nop
 8016a0c:	e000ed90 	.word	0xe000ed90
 8016a10:	e000ed00 	.word	0xe000ed00

08016a14 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8016a14:	b480      	push	{r7}
 8016a16:	b083      	sub	sp, #12
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	785a      	ldrb	r2, [r3, #1]
 8016a20:	4b1d      	ldr	r3, [pc, #116]	; (8016a98 <HAL_MPU_ConfigRegion+0x84>)
 8016a22:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d029      	beq.n	8016a80 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8016a2c:	4a1a      	ldr	r2, [pc, #104]	; (8016a98 <HAL_MPU_ConfigRegion+0x84>)
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	685b      	ldr	r3, [r3, #4]
 8016a32:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	7b1b      	ldrb	r3, [r3, #12]
 8016a38:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	7adb      	ldrb	r3, [r3, #11]
 8016a3e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016a40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	7a9b      	ldrb	r3, [r3, #10]
 8016a46:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8016a48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	7b5b      	ldrb	r3, [r3, #13]
 8016a4e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8016a50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	7b9b      	ldrb	r3, [r3, #14]
 8016a56:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8016a58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	7bdb      	ldrb	r3, [r3, #15]
 8016a5e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8016a60:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	7a5b      	ldrb	r3, [r3, #9]
 8016a66:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8016a68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	7a1b      	ldrb	r3, [r3, #8]
 8016a6e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8016a70:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8016a72:	687a      	ldr	r2, [r7, #4]
 8016a74:	7812      	ldrb	r2, [r2, #0]
 8016a76:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016a78:	4a07      	ldr	r2, [pc, #28]	; (8016a98 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8016a7a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016a7c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8016a7e:	e005      	b.n	8016a8c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8016a80:	4b05      	ldr	r3, [pc, #20]	; (8016a98 <HAL_MPU_ConfigRegion+0x84>)
 8016a82:	2200      	movs	r2, #0
 8016a84:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8016a86:	4b04      	ldr	r3, [pc, #16]	; (8016a98 <HAL_MPU_ConfigRegion+0x84>)
 8016a88:	2200      	movs	r2, #0
 8016a8a:	611a      	str	r2, [r3, #16]
}
 8016a8c:	bf00      	nop
 8016a8e:	370c      	adds	r7, #12
 8016a90:	46bd      	mov	sp, r7
 8016a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a96:	4770      	bx	lr
 8016a98:	e000ed90 	.word	0xe000ed90

08016a9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b084      	sub	sp, #16
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016aa8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8016aaa:	f7fe ff63 	bl	8015974 <HAL_GetTick>
 8016aae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016ab6:	b2db      	uxtb	r3, r3
 8016ab8:	2b02      	cmp	r3, #2
 8016aba:	d008      	beq.n	8016ace <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	2280      	movs	r2, #128	; 0x80
 8016ac0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	2200      	movs	r2, #0
 8016ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8016aca:	2301      	movs	r3, #1
 8016acc:	e052      	b.n	8016b74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	681a      	ldr	r2, [r3, #0]
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	f022 0216 	bic.w	r2, r2, #22
 8016adc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	695a      	ldr	r2, [r3, #20]
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016aec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d103      	bne.n	8016afe <HAL_DMA_Abort+0x62>
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d007      	beq.n	8016b0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	681a      	ldr	r2, [r3, #0]
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	f022 0208 	bic.w	r2, r2, #8
 8016b0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	681a      	ldr	r2, [r3, #0]
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	f022 0201 	bic.w	r2, r2, #1
 8016b1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016b1e:	e013      	b.n	8016b48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016b20:	f7fe ff28 	bl	8015974 <HAL_GetTick>
 8016b24:	4602      	mov	r2, r0
 8016b26:	68bb      	ldr	r3, [r7, #8]
 8016b28:	1ad3      	subs	r3, r2, r3
 8016b2a:	2b05      	cmp	r3, #5
 8016b2c:	d90c      	bls.n	8016b48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	2220      	movs	r2, #32
 8016b32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	2203      	movs	r2, #3
 8016b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	2200      	movs	r2, #0
 8016b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8016b44:	2303      	movs	r3, #3
 8016b46:	e015      	b.n	8016b74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	f003 0301 	and.w	r3, r3, #1
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d1e4      	bne.n	8016b20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b5a:	223f      	movs	r2, #63	; 0x3f
 8016b5c:	409a      	lsls	r2, r3
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	2201      	movs	r2, #1
 8016b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8016b72:	2300      	movs	r3, #0
}
 8016b74:	4618      	mov	r0, r3
 8016b76:	3710      	adds	r7, #16
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}

08016b7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016b7c:	b480      	push	{r7}
 8016b7e:	b083      	sub	sp, #12
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016b8a:	b2db      	uxtb	r3, r3
 8016b8c:	2b02      	cmp	r3, #2
 8016b8e:	d004      	beq.n	8016b9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	2280      	movs	r2, #128	; 0x80
 8016b94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8016b96:	2301      	movs	r3, #1
 8016b98:	e00c      	b.n	8016bb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	2205      	movs	r2, #5
 8016b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	681a      	ldr	r2, [r3, #0]
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	f022 0201 	bic.w	r2, r2, #1
 8016bb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8016bb2:	2300      	movs	r3, #0
}
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	370c      	adds	r7, #12
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bbe:	4770      	bx	lr

08016bc0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b084      	sub	sp, #16
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d101      	bne.n	8016bd2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8016bce:	2301      	movs	r3, #1
 8016bd0:	e06a      	b.n	8016ca8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d106      	bne.n	8016bea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2223      	movs	r2, #35	; 0x23
 8016be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f006 fba3 	bl	801d330 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016bea:	4b31      	ldr	r3, [pc, #196]	; (8016cb0 <HAL_ETH_Init+0xf0>)
 8016bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016bee:	4a30      	ldr	r2, [pc, #192]	; (8016cb0 <HAL_ETH_Init+0xf0>)
 8016bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8016bf6:	4b2e      	ldr	r3, [pc, #184]	; (8016cb0 <HAL_ETH_Init+0xf0>)
 8016bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016bfe:	60bb      	str	r3, [r7, #8]
 8016c00:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8016c02:	4b2c      	ldr	r3, [pc, #176]	; (8016cb4 <HAL_ETH_Init+0xf4>)
 8016c04:	685b      	ldr	r3, [r3, #4]
 8016c06:	4a2b      	ldr	r2, [pc, #172]	; (8016cb4 <HAL_ETH_Init+0xf4>)
 8016c08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8016c0c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8016c0e:	4b29      	ldr	r3, [pc, #164]	; (8016cb4 <HAL_ETH_Init+0xf4>)
 8016c10:	685a      	ldr	r2, [r3, #4]
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	689b      	ldr	r3, [r3, #8]
 8016c16:	4927      	ldr	r1, [pc, #156]	; (8016cb4 <HAL_ETH_Init+0xf4>)
 8016c18:	4313      	orrs	r3, r2
 8016c1a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8016c1c:	4b25      	ldr	r3, [pc, #148]	; (8016cb4 <HAL_ETH_Init+0xf4>)
 8016c1e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	687a      	ldr	r2, [r7, #4]
 8016c2c:	6812      	ldr	r2, [r2, #0]
 8016c2e:	f043 0301 	orr.w	r3, r3, #1
 8016c32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016c36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016c38:	f7fe fe9c 	bl	8015974 <HAL_GetTick>
 8016c3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8016c3e:	e011      	b.n	8016c64 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8016c40:	f7fe fe98 	bl	8015974 <HAL_GetTick>
 8016c44:	4602      	mov	r2, r0
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	1ad3      	subs	r3, r2, r3
 8016c4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8016c4e:	d909      	bls.n	8016c64 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	2204      	movs	r2, #4
 8016c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	22e0      	movs	r2, #224	; 0xe0
 8016c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8016c60:	2301      	movs	r3, #1
 8016c62:	e021      	b.n	8016ca8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	f003 0301 	and.w	r3, r3, #1
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d1e4      	bne.n	8016c40 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8016c76:	6878      	ldr	r0, [r7, #4]
 8016c78:	f000 fee4 	bl	8017a44 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8016c7c:	6878      	ldr	r0, [r7, #4]
 8016c7e:	f000 ff8b 	bl	8017b98 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8016c82:	6878      	ldr	r0, [r7, #4]
 8016c84:	f000 ffe1 	bl	8017c4a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	685b      	ldr	r3, [r3, #4]
 8016c8c:	461a      	mov	r2, r3
 8016c8e:	2100      	movs	r1, #0
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f000 ff49 	bl	8017b28 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	2200      	movs	r2, #0
 8016c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	2210      	movs	r2, #16
 8016ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016ca6:	2300      	movs	r3, #0
}
 8016ca8:	4618      	mov	r0, r3
 8016caa:	3710      	adds	r7, #16
 8016cac:	46bd      	mov	sp, r7
 8016cae:	bd80      	pop	{r7, pc}
 8016cb0:	40023800 	.word	0x40023800
 8016cb4:	40013800 	.word	0x40013800

08016cb8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b084      	sub	sp, #16
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016cc6:	2b10      	cmp	r3, #16
 8016cc8:	d150      	bne.n	8016d6c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	2223      	movs	r2, #35	; 0x23
 8016cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	2204      	movs	r2, #4
 8016cd6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8016cd8:	6878      	ldr	r0, [r7, #4]
 8016cda:	f000 f9fd 	bl	80170d8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	681a      	ldr	r2, [r3, #0]
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	f042 0208 	orr.w	r2, r2, #8
 8016cec:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016cf6:	2001      	movs	r0, #1
 8016cf8:	f7fe fe48 	bl	801598c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	68fa      	ldr	r2, [r7, #12]
 8016d02:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	681a      	ldr	r2, [r3, #0]
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	f042 0204 	orr.w	r2, r2, #4
 8016d12:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016d1c:	2001      	movs	r0, #1
 8016d1e:	f7fe fe35 	bl	801598c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	68fa      	ldr	r2, [r7, #12]
 8016d28:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8016d2a:	6878      	ldr	r0, [r7, #4]
 8016d2c:	f000 fd2a 	bl	8017784 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016d38:	699b      	ldr	r3, [r3, #24]
 8016d3a:	687a      	ldr	r2, [r7, #4]
 8016d3c:	6812      	ldr	r2, [r2, #0]
 8016d3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016d42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016d46:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016d50:	699b      	ldr	r3, [r3, #24]
 8016d52:	687a      	ldr	r2, [r7, #4]
 8016d54:	6812      	ldr	r2, [r2, #0]
 8016d56:	f043 0302 	orr.w	r3, r3, #2
 8016d5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016d5e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	2223      	movs	r2, #35	; 0x23
 8016d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8016d68:	2300      	movs	r3, #0
 8016d6a:	e000      	b.n	8016d6e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8016d6c:	2301      	movs	r3, #1
  }
}
 8016d6e:	4618      	mov	r0, r3
 8016d70:	3710      	adds	r7, #16
 8016d72:	46bd      	mov	sp, r7
 8016d74:	bd80      	pop	{r7, pc}

08016d76 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8016d76:	b580      	push	{r7, lr}
 8016d78:	b084      	sub	sp, #16
 8016d7a:	af00      	add	r7, sp, #0
 8016d7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016d84:	2b23      	cmp	r3, #35	; 0x23
 8016d86:	d14a      	bne.n	8016e1e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	2223      	movs	r2, #35	; 0x23
 8016d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016d98:	699b      	ldr	r3, [r3, #24]
 8016d9a:	687a      	ldr	r2, [r7, #4]
 8016d9c:	6812      	ldr	r2, [r2, #0]
 8016d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016da2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016da6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016db0:	699b      	ldr	r3, [r3, #24]
 8016db2:	687a      	ldr	r2, [r7, #4]
 8016db4:	6812      	ldr	r2, [r2, #0]
 8016db6:	f023 0302 	bic.w	r3, r3, #2
 8016dba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016dbe:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	681a      	ldr	r2, [r3, #0]
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	f022 0204 	bic.w	r2, r2, #4
 8016dce:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016dd8:	2001      	movs	r0, #1
 8016dda:	f7fe fdd7 	bl	801598c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	68fa      	ldr	r2, [r7, #12]
 8016de4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8016de6:	6878      	ldr	r0, [r7, #4]
 8016de8:	f000 fccc 	bl	8017784 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	681a      	ldr	r2, [r3, #0]
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	f022 0208 	bic.w	r2, r2, #8
 8016dfa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016e04:	2001      	movs	r0, #1
 8016e06:	f7fe fdc1 	bl	801598c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	68fa      	ldr	r2, [r7, #12]
 8016e10:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2210      	movs	r2, #16
 8016e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	e000      	b.n	8016e20 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8016e1e:	2301      	movs	r3, #1
  }
}
 8016e20:	4618      	mov	r0, r3
 8016e22:	3710      	adds	r7, #16
 8016e24:	46bd      	mov	sp, r7
 8016e26:	bd80      	pop	{r7, pc}

08016e28 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b086      	sub	sp, #24
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	60f8      	str	r0, [r7, #12]
 8016e30:	60b9      	str	r1, [r7, #8]
 8016e32:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8016e34:	68bb      	ldr	r3, [r7, #8]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d109      	bne.n	8016e4e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016e40:	f043 0201 	orr.w	r2, r3, #1
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8016e4a:	2301      	movs	r3, #1
 8016e4c:	e07c      	b.n	8016f48 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016e54:	2b23      	cmp	r3, #35	; 0x23
 8016e56:	d176      	bne.n	8016f46 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8016e58:	2200      	movs	r2, #0
 8016e5a:	68b9      	ldr	r1, [r7, #8]
 8016e5c:	68f8      	ldr	r0, [r7, #12]
 8016e5e:	f000 ff61 	bl	8017d24 <ETH_Prepare_Tx_Descriptors>
 8016e62:	4603      	mov	r3, r0
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d009      	beq.n	8016e7c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016e6e:	f043 0202 	orr.w	r2, r3, #2
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8016e78:	2301      	movs	r3, #1
 8016e7a:	e065      	b.n	8016f48 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8016e7c:	f3bf 8f4f 	dsb	sy
}
 8016e80:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	3206      	adds	r2, #6
 8016e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e8e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e94:	1c5a      	adds	r2, r3, #1
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	629a      	str	r2, [r3, #40]	; 0x28
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e9e:	2b03      	cmp	r3, #3
 8016ea0:	d904      	bls.n	8016eac <HAL_ETH_Transmit+0x84>
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ea6:	1f1a      	subs	r2, r3, #4
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	681a      	ldr	r2, [r3, #0]
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	3106      	adds	r1, #6
 8016eb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016ebc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016ec0:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8016ec2:	f7fe fd57 	bl	8015974 <HAL_GetTick>
 8016ec6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8016ec8:	e037      	b.n	8016f3a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ed2:	695b      	ldr	r3, [r3, #20]
 8016ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d011      	beq.n	8016f00 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016ee2:	f043 0208 	orr.w	r2, r3, #8
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ef4:	695a      	ldr	r2, [r3, #20]
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8016efc:	2301      	movs	r3, #1
 8016efe:	e023      	b.n	8016f48 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f06:	d018      	beq.n	8016f3a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016f08:	f7fe fd34 	bl	8015974 <HAL_GetTick>
 8016f0c:	4602      	mov	r2, r0
 8016f0e:	693b      	ldr	r3, [r7, #16]
 8016f10:	1ad3      	subs	r3, r2, r3
 8016f12:	687a      	ldr	r2, [r7, #4]
 8016f14:	429a      	cmp	r2, r3
 8016f16:	d302      	bcc.n	8016f1e <HAL_ETH_Transmit+0xf6>
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d10d      	bne.n	8016f3a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016f24:	f043 0204 	orr.w	r2, r3, #4
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8016f2e:	697b      	ldr	r3, [r7, #20]
 8016f30:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8016f34:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8016f36:	2301      	movs	r3, #1
 8016f38:	e006      	b.n	8016f48 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8016f3a:	697b      	ldr	r3, [r7, #20]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	dbc3      	blt.n	8016eca <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8016f42:	2300      	movs	r3, #0
 8016f44:	e000      	b.n	8016f48 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8016f46:	2301      	movs	r3, #1
  }
}
 8016f48:	4618      	mov	r0, r3
 8016f4a:	3718      	adds	r7, #24
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	bd80      	pop	{r7, pc}

08016f50 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b088      	sub	sp, #32
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
 8016f58:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8016f5e:	2300      	movs	r3, #0
 8016f60:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8016f62:	683b      	ldr	r3, [r7, #0]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d109      	bne.n	8016f7c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016f6e:	f043 0201 	orr.w	r2, r3, #1
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8016f78:	2301      	movs	r3, #1
 8016f7a:	e0a8      	b.n	80170ce <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016f82:	2b23      	cmp	r3, #35	; 0x23
 8016f84:	d001      	beq.n	8016f8a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8016f86:	2301      	movs	r3, #1
 8016f88:	e0a1      	b.n	80170ce <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f8e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	69fa      	ldr	r2, [r7, #28]
 8016f94:	3212      	adds	r2, #18
 8016f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f9a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fa0:	f1c3 0304 	rsb	r3, r3, #4
 8016fa4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8016fa6:	e06a      	b.n	801707e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8016fa8:	69bb      	ldr	r3, [r7, #24]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d007      	beq.n	8016fc4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8016fb4:	69bb      	ldr	r3, [r7, #24]
 8016fb6:	699a      	ldr	r2, [r3, #24]
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8016fbc:	69bb      	ldr	r3, [r7, #24]
 8016fbe:	69da      	ldr	r2, [r3, #28]
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8016fc4:	69bb      	ldr	r3, [r7, #24]
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d103      	bne.n	8016fd8 <HAL_ETH_ReadData+0x88>
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d040      	beq.n	801705a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8016fd8:	69bb      	ldr	r3, [r7, #24]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d005      	beq.n	8016ff0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	2200      	movs	r2, #0
 8016fee:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	695b      	ldr	r3, [r3, #20]
 8016ff4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8016ff6:	69bb      	ldr	r3, [r7, #24]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d00c      	beq.n	801701c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8017002:	69bb      	ldr	r3, [r7, #24]
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	0c1b      	lsrs	r3, r3, #16
 8017008:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801700c:	3b04      	subs	r3, #4
 801700e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8017010:	69bb      	ldr	r3, [r7, #24]
 8017012:	681a      	ldr	r2, [r3, #0]
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8017018:	2301      	movs	r3, #1
 801701a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 801701c:	69bb      	ldr	r3, [r7, #24]
 801701e:	689a      	ldr	r2, [r3, #8]
 8017020:	69bb      	ldr	r3, [r7, #24]
 8017022:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8017030:	69bb      	ldr	r3, [r7, #24]
 8017032:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8017034:	461a      	mov	r2, r3
 8017036:	693b      	ldr	r3, [r7, #16]
 8017038:	b29b      	uxth	r3, r3
 801703a:	f006 fb43 	bl	801d6c4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017042:	1c5a      	adds	r2, r3, #1
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801704c:	693b      	ldr	r3, [r7, #16]
 801704e:	441a      	add	r2, r3
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8017054:	69bb      	ldr	r3, [r7, #24]
 8017056:	2200      	movs	r2, #0
 8017058:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 801705a:	69fb      	ldr	r3, [r7, #28]
 801705c:	3301      	adds	r3, #1
 801705e:	61fb      	str	r3, [r7, #28]
 8017060:	69fb      	ldr	r3, [r7, #28]
 8017062:	2b03      	cmp	r3, #3
 8017064:	d902      	bls.n	801706c <HAL_ETH_ReadData+0x11c>
 8017066:	69fb      	ldr	r3, [r7, #28]
 8017068:	3b04      	subs	r3, #4
 801706a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	69fa      	ldr	r2, [r7, #28]
 8017070:	3212      	adds	r2, #18
 8017072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017076:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	3301      	adds	r3, #1
 801707c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801707e:	69bb      	ldr	r3, [r7, #24]
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	2b00      	cmp	r3, #0
 8017084:	db06      	blt.n	8017094 <HAL_ETH_ReadData+0x144>
 8017086:	697a      	ldr	r2, [r7, #20]
 8017088:	68bb      	ldr	r3, [r7, #8]
 801708a:	429a      	cmp	r2, r3
 801708c:	d202      	bcs.n	8017094 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 801708e:	7bfb      	ldrb	r3, [r7, #15]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d089      	beq.n	8016fa8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017098:	697b      	ldr	r3, [r7, #20]
 801709a:	441a      	add	r2, r3
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d002      	beq.n	80170ae <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80170a8:	6878      	ldr	r0, [r7, #4]
 80170aa:	f000 f815 	bl	80170d8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	69fa      	ldr	r2, [r7, #28]
 80170b2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80170b4:	7bfb      	ldrb	r3, [r7, #15]
 80170b6:	2b01      	cmp	r3, #1
 80170b8:	d108      	bne.n	80170cc <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80170be:	683b      	ldr	r3, [r7, #0]
 80170c0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	2200      	movs	r2, #0
 80170c6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80170c8:	2300      	movs	r3, #0
 80170ca:	e000      	b.n	80170ce <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80170cc:	2301      	movs	r3, #1
}
 80170ce:	4618      	mov	r0, r3
 80170d0:	3720      	adds	r7, #32
 80170d2:	46bd      	mov	sp, r7
 80170d4:	bd80      	pop	{r7, pc}
	...

080170d8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80170d8:	b580      	push	{r7, lr}
 80170da:	b088      	sub	sp, #32
 80170dc:	af00      	add	r7, sp, #0
 80170de:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80170e0:	2300      	movs	r3, #0
 80170e2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80170e4:	2301      	movs	r3, #1
 80170e6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80170ec:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	69fa      	ldr	r2, [r7, #28]
 80170f2:	3212      	adds	r2, #18
 80170f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170f8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170fe:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8017100:	e040      	b.n	8017184 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8017102:	697b      	ldr	r3, [r7, #20]
 8017104:	6a1b      	ldr	r3, [r3, #32]
 8017106:	2b00      	cmp	r3, #0
 8017108:	d112      	bne.n	8017130 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 801710a:	f107 030c 	add.w	r3, r7, #12
 801710e:	4618      	mov	r0, r3
 8017110:	f006 faa8 	bl	801d664 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d102      	bne.n	8017120 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 801711a:	2300      	movs	r3, #0
 801711c:	74fb      	strb	r3, [r7, #19]
 801711e:	e007      	b.n	8017130 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	461a      	mov	r2, r3
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	461a      	mov	r2, r3
 801712c:	697b      	ldr	r3, [r7, #20]
 801712e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8017130:	7cfb      	ldrb	r3, [r7, #19]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d026      	beq.n	8017184 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801713a:	2b00      	cmp	r3, #0
 801713c:	d103      	bne.n	8017146 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 801713e:	697b      	ldr	r3, [r7, #20]
 8017140:	4a1e      	ldr	r2, [pc, #120]	; (80171bc <ETH_UpdateDescriptor+0xe4>)
 8017142:	605a      	str	r2, [r3, #4]
 8017144:	e003      	b.n	801714e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8017146:	697b      	ldr	r3, [r7, #20]
 8017148:	f244 52f8 	movw	r2, #17912	; 0x45f8
 801714c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 801714e:	f3bf 8f5f 	dmb	sy
}
 8017152:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8017154:	697b      	ldr	r3, [r7, #20]
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801715c:	697b      	ldr	r3, [r7, #20]
 801715e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8017160:	69fb      	ldr	r3, [r7, #28]
 8017162:	3301      	adds	r3, #1
 8017164:	61fb      	str	r3, [r7, #28]
 8017166:	69fb      	ldr	r3, [r7, #28]
 8017168:	2b03      	cmp	r3, #3
 801716a:	d902      	bls.n	8017172 <ETH_UpdateDescriptor+0x9a>
 801716c:	69fb      	ldr	r3, [r7, #28]
 801716e:	3b04      	subs	r3, #4
 8017170:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	69fa      	ldr	r2, [r7, #28]
 8017176:	3212      	adds	r2, #18
 8017178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801717c:	617b      	str	r3, [r7, #20]
      desccount--;
 801717e:	69bb      	ldr	r3, [r7, #24]
 8017180:	3b01      	subs	r3, #1
 8017182:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8017184:	69bb      	ldr	r3, [r7, #24]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d002      	beq.n	8017190 <ETH_UpdateDescriptor+0xb8>
 801718a:	7cfb      	ldrb	r3, [r7, #19]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d1b8      	bne.n	8017102 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017194:	69ba      	ldr	r2, [r7, #24]
 8017196:	429a      	cmp	r2, r3
 8017198:	d00c      	beq.n	80171b4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171a2:	461a      	mov	r2, r3
 80171a4:	2300      	movs	r3, #0
 80171a6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	69fa      	ldr	r2, [r7, #28]
 80171ac:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	69ba      	ldr	r2, [r7, #24]
 80171b2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80171b4:	bf00      	nop
 80171b6:	3720      	adds	r7, #32
 80171b8:	46bd      	mov	sp, r7
 80171ba:	bd80      	pop	{r7, pc}
 80171bc:	800045f8 	.word	0x800045f8

080171c0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b082      	sub	sp, #8
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171d0:	695b      	ldr	r3, [r3, #20]
 80171d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80171d6:	2b40      	cmp	r3, #64	; 0x40
 80171d8:	d112      	bne.n	8017200 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171e2:	69db      	ldr	r3, [r3, #28]
 80171e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80171e8:	2b40      	cmp	r3, #64	; 0x40
 80171ea:	d109      	bne.n	8017200 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171f4:	461a      	mov	r2, r3
 80171f6:	4b50      	ldr	r3, [pc, #320]	; (8017338 <HAL_ETH_IRQHandler+0x178>)
 80171f8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80171fa:	6878      	ldr	r0, [r7, #4]
 80171fc:	f000 f8ac 	bl	8017358 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017208:	695b      	ldr	r3, [r3, #20]
 801720a:	f003 0301 	and.w	r3, r3, #1
 801720e:	2b01      	cmp	r3, #1
 8017210:	d113      	bne.n	801723a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801721a:	69db      	ldr	r3, [r3, #28]
 801721c:	f003 0301 	and.w	r3, r3, #1
 8017220:	2b01      	cmp	r3, #1
 8017222:	d10a      	bne.n	801723a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801722c:	461a      	mov	r2, r3
 801722e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8017232:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8017234:	6878      	ldr	r0, [r7, #4]
 8017236:	f000 f885 	bl	8017344 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017242:	695b      	ldr	r3, [r3, #20]
 8017244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801724c:	d14c      	bne.n	80172e8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017256:	69db      	ldr	r3, [r3, #28]
 8017258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801725c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017260:	d142      	bne.n	80172e8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017268:	f043 0208 	orr.w	r2, r3, #8
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801727a:	695b      	ldr	r3, [r3, #20]
 801727c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017284:	d11a      	bne.n	80172bc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801728e:	695a      	ldr	r2, [r3, #20]
 8017290:	4b2a      	ldr	r3, [pc, #168]	; (801733c <HAL_ETH_IRQHandler+0x17c>)
 8017292:	4013      	ands	r3, r2
 8017294:	687a      	ldr	r2, [r7, #4]
 8017296:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80172a2:	69db      	ldr	r3, [r3, #28]
 80172a4:	687a      	ldr	r2, [r7, #4]
 80172a6:	6812      	ldr	r2, [r2, #0]
 80172a8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80172ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80172b0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	22e0      	movs	r2, #224	; 0xe0
 80172b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80172ba:	e012      	b.n	80172e2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80172c4:	695a      	ldr	r2, [r3, #20]
 80172c6:	f248 6380 	movw	r3, #34432	; 0x8680
 80172ca:	4013      	ands	r3, r2
 80172cc:	687a      	ldr	r2, [r7, #4]
 80172ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80172da:	461a      	mov	r2, r3
 80172dc:	f248 6380 	movw	r3, #34432	; 0x8680
 80172e0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80172e2:	6878      	ldr	r0, [r7, #4]
 80172e4:	f000 f842 	bl	801736c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172ee:	f003 0308 	and.w	r3, r3, #8
 80172f2:	2b08      	cmp	r3, #8
 80172f4:	d10e      	bne.n	8017314 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172fc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8017306:	6878      	ldr	r0, [r7, #4]
 8017308:	f000 f83a 	bl	8017380 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	2200      	movs	r2, #0
 8017310:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8017314:	4b0a      	ldr	r3, [pc, #40]	; (8017340 <HAL_ETH_IRQHandler+0x180>)
 8017316:	695b      	ldr	r3, [r3, #20]
 8017318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801731c:	2b00      	cmp	r3, #0
 801731e:	d006      	beq.n	801732e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8017320:	4b07      	ldr	r3, [pc, #28]	; (8017340 <HAL_ETH_IRQHandler+0x180>)
 8017322:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017326:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8017328:	6878      	ldr	r0, [r7, #4]
 801732a:	f000 f833 	bl	8017394 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 801732e:	bf00      	nop
 8017330:	3708      	adds	r7, #8
 8017332:	46bd      	mov	sp, r7
 8017334:	bd80      	pop	{r7, pc}
 8017336:	bf00      	nop
 8017338:	00010040 	.word	0x00010040
 801733c:	007e2000 	.word	0x007e2000
 8017340:	40013c00 	.word	0x40013c00

08017344 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8017344:	b480      	push	{r7}
 8017346:	b083      	sub	sp, #12
 8017348:	af00      	add	r7, sp, #0
 801734a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 801734c:	bf00      	nop
 801734e:	370c      	adds	r7, #12
 8017350:	46bd      	mov	sp, r7
 8017352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017356:	4770      	bx	lr

08017358 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8017358:	b480      	push	{r7}
 801735a:	b083      	sub	sp, #12
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8017360:	bf00      	nop
 8017362:	370c      	adds	r7, #12
 8017364:	46bd      	mov	sp, r7
 8017366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801736a:	4770      	bx	lr

0801736c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 801736c:	b480      	push	{r7}
 801736e:	b083      	sub	sp, #12
 8017370:	af00      	add	r7, sp, #0
 8017372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8017374:	bf00      	nop
 8017376:	370c      	adds	r7, #12
 8017378:	46bd      	mov	sp, r7
 801737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737e:	4770      	bx	lr

08017380 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8017380:	b480      	push	{r7}
 8017382:	b083      	sub	sp, #12
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8017388:	bf00      	nop
 801738a:	370c      	adds	r7, #12
 801738c:	46bd      	mov	sp, r7
 801738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017392:	4770      	bx	lr

08017394 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8017394:	b480      	push	{r7}
 8017396:	b083      	sub	sp, #12
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 801739c:	bf00      	nop
 801739e:	370c      	adds	r7, #12
 80173a0:	46bd      	mov	sp, r7
 80173a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a6:	4770      	bx	lr

080173a8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b086      	sub	sp, #24
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	60f8      	str	r0, [r7, #12]
 80173b0:	60b9      	str	r1, [r7, #8]
 80173b2:	607a      	str	r2, [r7, #4]
 80173b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	691b      	ldr	r3, [r3, #16]
 80173bc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80173be:	697b      	ldr	r3, [r7, #20]
 80173c0:	f003 031c 	and.w	r3, r3, #28
 80173c4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80173c6:	68bb      	ldr	r3, [r7, #8]
 80173c8:	02db      	lsls	r3, r3, #11
 80173ca:	b29b      	uxth	r3, r3
 80173cc:	697a      	ldr	r2, [r7, #20]
 80173ce:	4313      	orrs	r3, r2
 80173d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	019b      	lsls	r3, r3, #6
 80173d6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80173da:	697a      	ldr	r2, [r7, #20]
 80173dc:	4313      	orrs	r3, r2
 80173de:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80173e0:	697b      	ldr	r3, [r7, #20]
 80173e2:	f023 0302 	bic.w	r3, r3, #2
 80173e6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80173e8:	697b      	ldr	r3, [r7, #20]
 80173ea:	f043 0301 	orr.w	r3, r3, #1
 80173ee:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	697a      	ldr	r2, [r7, #20]
 80173f6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80173f8:	f7fe fabc 	bl	8015974 <HAL_GetTick>
 80173fc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80173fe:	e00d      	b.n	801741c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8017400:	f7fe fab8 	bl	8015974 <HAL_GetTick>
 8017404:	4602      	mov	r2, r0
 8017406:	693b      	ldr	r3, [r7, #16]
 8017408:	1ad3      	subs	r3, r2, r3
 801740a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801740e:	d301      	bcc.n	8017414 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8017410:	2301      	movs	r3, #1
 8017412:	e010      	b.n	8017436 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	691b      	ldr	r3, [r3, #16]
 801741a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801741c:	697b      	ldr	r3, [r7, #20]
 801741e:	f003 0301 	and.w	r3, r3, #1
 8017422:	2b00      	cmp	r3, #0
 8017424:	d1ec      	bne.n	8017400 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	695b      	ldr	r3, [r3, #20]
 801742c:	b29b      	uxth	r3, r3
 801742e:	461a      	mov	r2, r3
 8017430:	683b      	ldr	r3, [r7, #0]
 8017432:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8017434:	2300      	movs	r3, #0
}
 8017436:	4618      	mov	r0, r3
 8017438:	3718      	adds	r7, #24
 801743a:	46bd      	mov	sp, r7
 801743c:	bd80      	pop	{r7, pc}

0801743e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 801743e:	b580      	push	{r7, lr}
 8017440:	b086      	sub	sp, #24
 8017442:	af00      	add	r7, sp, #0
 8017444:	60f8      	str	r0, [r7, #12]
 8017446:	60b9      	str	r1, [r7, #8]
 8017448:	607a      	str	r2, [r7, #4]
 801744a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	691b      	ldr	r3, [r3, #16]
 8017452:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8017454:	697b      	ldr	r3, [r7, #20]
 8017456:	f003 031c 	and.w	r3, r3, #28
 801745a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 801745c:	68bb      	ldr	r3, [r7, #8]
 801745e:	02db      	lsls	r3, r3, #11
 8017460:	b29b      	uxth	r3, r3
 8017462:	697a      	ldr	r2, [r7, #20]
 8017464:	4313      	orrs	r3, r2
 8017466:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	019b      	lsls	r3, r3, #6
 801746c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8017470:	697a      	ldr	r2, [r7, #20]
 8017472:	4313      	orrs	r3, r2
 8017474:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8017476:	697b      	ldr	r3, [r7, #20]
 8017478:	f043 0302 	orr.w	r3, r3, #2
 801747c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 801747e:	697b      	ldr	r3, [r7, #20]
 8017480:	f043 0301 	orr.w	r3, r3, #1
 8017484:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	b29a      	uxth	r2, r3
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	697a      	ldr	r2, [r7, #20]
 8017496:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8017498:	f7fe fa6c 	bl	8015974 <HAL_GetTick>
 801749c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801749e:	e00d      	b.n	80174bc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80174a0:	f7fe fa68 	bl	8015974 <HAL_GetTick>
 80174a4:	4602      	mov	r2, r0
 80174a6:	693b      	ldr	r3, [r7, #16]
 80174a8:	1ad3      	subs	r3, r2, r3
 80174aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80174ae:	d301      	bcc.n	80174b4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80174b0:	2301      	movs	r3, #1
 80174b2:	e009      	b.n	80174c8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	691b      	ldr	r3, [r3, #16]
 80174ba:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80174bc:	697b      	ldr	r3, [r7, #20]
 80174be:	f003 0301 	and.w	r3, r3, #1
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d1ec      	bne.n	80174a0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80174c6:	2300      	movs	r3, #0
}
 80174c8:	4618      	mov	r0, r3
 80174ca:	3718      	adds	r7, #24
 80174cc:	46bd      	mov	sp, r7
 80174ce:	bd80      	pop	{r7, pc}

080174d0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80174d0:	b480      	push	{r7}
 80174d2:	b083      	sub	sp, #12
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
 80174d8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80174da:	683b      	ldr	r3, [r7, #0]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d101      	bne.n	80174e4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80174e0:	2301      	movs	r3, #1
 80174e2:	e0d9      	b.n	8017698 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	f003 0310 	and.w	r3, r3, #16
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	bf14      	ite	ne
 80174f2:	2301      	movne	r3, #1
 80174f4:	2300      	moveq	r3, #0
 80174f6:	b2db      	uxtb	r3, r3
 80174f8:	461a      	mov	r2, r3
 80174fa:	683b      	ldr	r3, [r7, #0]
 80174fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017518:	2b00      	cmp	r3, #0
 801751a:	bf0c      	ite	eq
 801751c:	2301      	moveq	r3, #1
 801751e:	2300      	movne	r3, #0
 8017520:	b2db      	uxtb	r3, r3
 8017522:	461a      	mov	r2, r3
 8017524:	683b      	ldr	r3, [r7, #0]
 8017526:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8017534:	2b00      	cmp	r3, #0
 8017536:	bf14      	ite	ne
 8017538:	2301      	movne	r3, #1
 801753a:	2300      	moveq	r3, #0
 801753c:	b2db      	uxtb	r3, r3
 801753e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8017540:	683b      	ldr	r3, [r7, #0]
 8017542:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801754e:	2b00      	cmp	r3, #0
 8017550:	bf0c      	ite	eq
 8017552:	2301      	moveq	r3, #1
 8017554:	2300      	movne	r3, #0
 8017556:	b2db      	uxtb	r3, r3
 8017558:	461a      	mov	r2, r3
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017568:	2b00      	cmp	r3, #0
 801756a:	bf14      	ite	ne
 801756c:	2301      	movne	r3, #1
 801756e:	2300      	moveq	r3, #0
 8017570:	b2db      	uxtb	r3, r3
 8017572:	461a      	mov	r2, r3
 8017574:	683b      	ldr	r3, [r7, #0]
 8017576:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8017582:	683b      	ldr	r3, [r7, #0]
 8017584:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8017590:	683b      	ldr	r3, [r7, #0]
 8017592:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801759e:	2b00      	cmp	r3, #0
 80175a0:	bf0c      	ite	eq
 80175a2:	2301      	moveq	r3, #1
 80175a4:	2300      	movne	r3, #0
 80175a6:	b2db      	uxtb	r3, r3
 80175a8:	461a      	mov	r2, r3
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	bf0c      	ite	eq
 80175bc:	2301      	moveq	r3, #1
 80175be:	2300      	movne	r3, #0
 80175c0:	b2db      	uxtb	r3, r3
 80175c2:	461a      	mov	r2, r3
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	bf14      	ite	ne
 80175d6:	2301      	movne	r3, #1
 80175d8:	2300      	moveq	r3, #0
 80175da:	b2db      	uxtb	r3, r3
 80175dc:	461a      	mov	r2, r3
 80175de:	683b      	ldr	r3, [r7, #0]
 80175e0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80175ec:	683b      	ldr	r3, [r7, #0]
 80175ee:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	bf14      	ite	ne
 80175fe:	2301      	movne	r3, #1
 8017600:	2300      	moveq	r3, #0
 8017602:	b2db      	uxtb	r3, r3
 8017604:	461a      	mov	r2, r3
 8017606:	683b      	ldr	r3, [r7, #0]
 8017608:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	699b      	ldr	r3, [r3, #24]
 8017610:	f003 0302 	and.w	r3, r3, #2
 8017614:	2b00      	cmp	r3, #0
 8017616:	bf14      	ite	ne
 8017618:	2301      	movne	r3, #1
 801761a:	2300      	moveq	r3, #0
 801761c:	b2db      	uxtb	r3, r3
 801761e:	461a      	mov	r2, r3
 8017620:	683b      	ldr	r3, [r7, #0]
 8017622:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	699b      	ldr	r3, [r3, #24]
 801762c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017630:	2b00      	cmp	r3, #0
 8017632:	bf0c      	ite	eq
 8017634:	2301      	moveq	r3, #1
 8017636:	2300      	movne	r3, #0
 8017638:	b2db      	uxtb	r3, r3
 801763a:	461a      	mov	r2, r3
 801763c:	683b      	ldr	r3, [r7, #0]
 801763e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	699b      	ldr	r3, [r3, #24]
 8017648:	f003 0230 	and.w	r2, r3, #48	; 0x30
 801764c:	683b      	ldr	r3, [r7, #0]
 801764e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	699b      	ldr	r3, [r3, #24]
 8017656:	0c1b      	lsrs	r3, r3, #16
 8017658:	b29a      	uxth	r2, r3
 801765a:	683b      	ldr	r3, [r7, #0]
 801765c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	699b      	ldr	r3, [r3, #24]
 8017664:	f003 0304 	and.w	r3, r3, #4
 8017668:	2b00      	cmp	r3, #0
 801766a:	bf14      	ite	ne
 801766c:	2301      	movne	r3, #1
 801766e:	2300      	moveq	r3, #0
 8017670:	b2db      	uxtb	r3, r3
 8017672:	461a      	mov	r2, r3
 8017674:	683b      	ldr	r3, [r7, #0]
 8017676:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	699b      	ldr	r3, [r3, #24]
 8017680:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8017684:	2b00      	cmp	r3, #0
 8017686:	bf14      	ite	ne
 8017688:	2301      	movne	r3, #1
 801768a:	2300      	moveq	r3, #0
 801768c:	b2db      	uxtb	r3, r3
 801768e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8017690:	683b      	ldr	r3, [r7, #0]
 8017692:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8017696:	2300      	movs	r3, #0
}
 8017698:	4618      	mov	r0, r3
 801769a:	370c      	adds	r7, #12
 801769c:	46bd      	mov	sp, r7
 801769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a2:	4770      	bx	lr

080176a4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b082      	sub	sp, #8
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	6078      	str	r0, [r7, #4]
 80176ac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80176ae:	683b      	ldr	r3, [r7, #0]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d101      	bne.n	80176b8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80176b4:	2301      	movs	r3, #1
 80176b6:	e00b      	b.n	80176d0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80176be:	2b10      	cmp	r3, #16
 80176c0:	d105      	bne.n	80176ce <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80176c2:	6839      	ldr	r1, [r7, #0]
 80176c4:	6878      	ldr	r0, [r7, #4]
 80176c6:	f000 f883 	bl	80177d0 <ETH_SetMACConfig>

    return HAL_OK;
 80176ca:	2300      	movs	r3, #0
 80176cc:	e000      	b.n	80176d0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80176ce:	2301      	movs	r3, #1
  }
}
 80176d0:	4618      	mov	r0, r3
 80176d2:	3708      	adds	r7, #8
 80176d4:	46bd      	mov	sp, r7
 80176d6:	bd80      	pop	{r7, pc}

080176d8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b084      	sub	sp, #16
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	691b      	ldr	r3, [r3, #16]
 80176e6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	f023 031c 	bic.w	r3, r3, #28
 80176ee:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80176f0:	f002 f916 	bl	8019920 <HAL_RCC_GetHCLKFreq>
 80176f4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80176f6:	68bb      	ldr	r3, [r7, #8]
 80176f8:	4a1d      	ldr	r2, [pc, #116]	; (8017770 <HAL_ETH_SetMDIOClockRange+0x98>)
 80176fa:	4293      	cmp	r3, r2
 80176fc:	d908      	bls.n	8017710 <HAL_ETH_SetMDIOClockRange+0x38>
 80176fe:	68bb      	ldr	r3, [r7, #8]
 8017700:	4a1c      	ldr	r2, [pc, #112]	; (8017774 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8017702:	4293      	cmp	r3, r2
 8017704:	d804      	bhi.n	8017710 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	f043 0308 	orr.w	r3, r3, #8
 801770c:	60fb      	str	r3, [r7, #12]
 801770e:	e027      	b.n	8017760 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8017710:	68bb      	ldr	r3, [r7, #8]
 8017712:	4a18      	ldr	r2, [pc, #96]	; (8017774 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8017714:	4293      	cmp	r3, r2
 8017716:	d908      	bls.n	801772a <HAL_ETH_SetMDIOClockRange+0x52>
 8017718:	68bb      	ldr	r3, [r7, #8]
 801771a:	4a17      	ldr	r2, [pc, #92]	; (8017778 <HAL_ETH_SetMDIOClockRange+0xa0>)
 801771c:	4293      	cmp	r3, r2
 801771e:	d204      	bcs.n	801772a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	f043 030c 	orr.w	r3, r3, #12
 8017726:	60fb      	str	r3, [r7, #12]
 8017728:	e01a      	b.n	8017760 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 801772a:	68bb      	ldr	r3, [r7, #8]
 801772c:	4a12      	ldr	r2, [pc, #72]	; (8017778 <HAL_ETH_SetMDIOClockRange+0xa0>)
 801772e:	4293      	cmp	r3, r2
 8017730:	d303      	bcc.n	801773a <HAL_ETH_SetMDIOClockRange+0x62>
 8017732:	68bb      	ldr	r3, [r7, #8]
 8017734:	4a11      	ldr	r2, [pc, #68]	; (801777c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8017736:	4293      	cmp	r3, r2
 8017738:	d911      	bls.n	801775e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 801773a:	68bb      	ldr	r3, [r7, #8]
 801773c:	4a0f      	ldr	r2, [pc, #60]	; (801777c <HAL_ETH_SetMDIOClockRange+0xa4>)
 801773e:	4293      	cmp	r3, r2
 8017740:	d908      	bls.n	8017754 <HAL_ETH_SetMDIOClockRange+0x7c>
 8017742:	68bb      	ldr	r3, [r7, #8]
 8017744:	4a0e      	ldr	r2, [pc, #56]	; (8017780 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8017746:	4293      	cmp	r3, r2
 8017748:	d804      	bhi.n	8017754 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	f043 0304 	orr.w	r3, r3, #4
 8017750:	60fb      	str	r3, [r7, #12]
 8017752:	e005      	b.n	8017760 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	f043 0310 	orr.w	r3, r3, #16
 801775a:	60fb      	str	r3, [r7, #12]
 801775c:	e000      	b.n	8017760 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 801775e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	68fa      	ldr	r2, [r7, #12]
 8017766:	611a      	str	r2, [r3, #16]
}
 8017768:	bf00      	nop
 801776a:	3710      	adds	r7, #16
 801776c:	46bd      	mov	sp, r7
 801776e:	bd80      	pop	{r7, pc}
 8017770:	01312cff 	.word	0x01312cff
 8017774:	02160ebf 	.word	0x02160ebf
 8017778:	03938700 	.word	0x03938700
 801777c:	05f5e0ff 	.word	0x05f5e0ff
 8017780:	08f0d17f 	.word	0x08f0d17f

08017784 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b084      	sub	sp, #16
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 801778c:	2300      	movs	r3, #0
 801778e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017798:	699b      	ldr	r3, [r3, #24]
 801779a:	687a      	ldr	r2, [r7, #4]
 801779c:	6812      	ldr	r2, [r2, #0]
 801779e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80177a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80177a6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80177b0:	699b      	ldr	r3, [r3, #24]
 80177b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80177b4:	2001      	movs	r0, #1
 80177b6:	f7fe f8e9 	bl	801598c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	681a      	ldr	r2, [r3, #0]
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80177c4:	6193      	str	r3, [r2, #24]
}
 80177c6:	bf00      	nop
 80177c8:	3710      	adds	r7, #16
 80177ca:	46bd      	mov	sp, r7
 80177cc:	bd80      	pop	{r7, pc}
	...

080177d0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80177d0:	b580      	push	{r7, lr}
 80177d2:	b084      	sub	sp, #16
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	6078      	str	r0, [r7, #4]
 80177d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80177e2:	68fa      	ldr	r2, [r7, #12]
 80177e4:	4b51      	ldr	r3, [pc, #324]	; (801792c <ETH_SetMACConfig+0x15c>)
 80177e6:	4013      	ands	r3, r2
 80177e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80177ea:	683b      	ldr	r3, [r7, #0]
 80177ec:	7c1b      	ldrb	r3, [r3, #16]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d102      	bne.n	80177f8 <ETH_SetMACConfig+0x28>
 80177f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80177f6:	e000      	b.n	80177fa <ETH_SetMACConfig+0x2a>
 80177f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80177fa:	683b      	ldr	r3, [r7, #0]
 80177fc:	7c5b      	ldrb	r3, [r3, #17]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d102      	bne.n	8017808 <ETH_SetMACConfig+0x38>
 8017802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017806:	e000      	b.n	801780a <ETH_SetMACConfig+0x3a>
 8017808:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801780a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 801780c:	683b      	ldr	r3, [r7, #0]
 801780e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8017810:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8017812:	683b      	ldr	r3, [r7, #0]
 8017814:	7fdb      	ldrb	r3, [r3, #31]
 8017816:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8017818:	431a      	orrs	r2, r3
                        macconf->Speed |
 801781a:	683b      	ldr	r3, [r7, #0]
 801781c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801781e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8017820:	683a      	ldr	r2, [r7, #0]
 8017822:	7f92      	ldrb	r2, [r2, #30]
 8017824:	2a00      	cmp	r2, #0
 8017826:	d102      	bne.n	801782e <ETH_SetMACConfig+0x5e>
 8017828:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801782c:	e000      	b.n	8017830 <ETH_SetMACConfig+0x60>
 801782e:	2200      	movs	r2, #0
                        macconf->Speed |
 8017830:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8017832:	683b      	ldr	r3, [r7, #0]
 8017834:	7f1b      	ldrb	r3, [r3, #28]
 8017836:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8017838:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 801783a:	683b      	ldr	r3, [r7, #0]
 801783c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801783e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8017840:	683b      	ldr	r3, [r7, #0]
 8017842:	791b      	ldrb	r3, [r3, #4]
 8017844:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8017846:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8017848:	683a      	ldr	r2, [r7, #0]
 801784a:	f892 2020 	ldrb.w	r2, [r2, #32]
 801784e:	2a00      	cmp	r2, #0
 8017850:	d102      	bne.n	8017858 <ETH_SetMACConfig+0x88>
 8017852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017856:	e000      	b.n	801785a <ETH_SetMACConfig+0x8a>
 8017858:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801785a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801785c:	683b      	ldr	r3, [r7, #0]
 801785e:	7bdb      	ldrb	r3, [r3, #15]
 8017860:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8017862:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8017864:	683b      	ldr	r3, [r7, #0]
 8017866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8017868:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 801786a:	683b      	ldr	r3, [r7, #0]
 801786c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017870:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8017872:	4313      	orrs	r3, r2
 8017874:	68fa      	ldr	r2, [r7, #12]
 8017876:	4313      	orrs	r3, r2
 8017878:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	68fa      	ldr	r2, [r7, #12]
 8017880:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801788a:	2001      	movs	r0, #1
 801788c:	f7fe f87e 	bl	801598c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	68fa      	ldr	r2, [r7, #12]
 8017896:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	699b      	ldr	r3, [r3, #24]
 801789e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80178a0:	68fa      	ldr	r2, [r7, #12]
 80178a2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80178a6:	4013      	ands	r3, r2
 80178a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80178aa:	683b      	ldr	r3, [r7, #0]
 80178ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80178ae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80178b0:	683a      	ldr	r2, [r7, #0]
 80178b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80178b6:	2a00      	cmp	r2, #0
 80178b8:	d101      	bne.n	80178be <ETH_SetMACConfig+0xee>
 80178ba:	2280      	movs	r2, #128	; 0x80
 80178bc:	e000      	b.n	80178c0 <ETH_SetMACConfig+0xf0>
 80178be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80178c0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80178c2:	683b      	ldr	r3, [r7, #0]
 80178c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80178c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80178c8:	683a      	ldr	r2, [r7, #0]
 80178ca:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80178ce:	2a01      	cmp	r2, #1
 80178d0:	d101      	bne.n	80178d6 <ETH_SetMACConfig+0x106>
 80178d2:	2208      	movs	r2, #8
 80178d4:	e000      	b.n	80178d8 <ETH_SetMACConfig+0x108>
 80178d6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80178d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80178da:	683a      	ldr	r2, [r7, #0]
 80178dc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80178e0:	2a01      	cmp	r2, #1
 80178e2:	d101      	bne.n	80178e8 <ETH_SetMACConfig+0x118>
 80178e4:	2204      	movs	r2, #4
 80178e6:	e000      	b.n	80178ea <ETH_SetMACConfig+0x11a>
 80178e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80178ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80178ec:	683a      	ldr	r2, [r7, #0]
 80178ee:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80178f2:	2a01      	cmp	r2, #1
 80178f4:	d101      	bne.n	80178fa <ETH_SetMACConfig+0x12a>
 80178f6:	2202      	movs	r2, #2
 80178f8:	e000      	b.n	80178fc <ETH_SetMACConfig+0x12c>
 80178fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80178fc:	4313      	orrs	r3, r2
 80178fe:	68fa      	ldr	r2, [r7, #12]
 8017900:	4313      	orrs	r3, r2
 8017902:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	68fa      	ldr	r2, [r7, #12]
 801790a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	699b      	ldr	r3, [r3, #24]
 8017912:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017914:	2001      	movs	r0, #1
 8017916:	f7fe f839 	bl	801598c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	68fa      	ldr	r2, [r7, #12]
 8017920:	619a      	str	r2, [r3, #24]
}
 8017922:	bf00      	nop
 8017924:	3710      	adds	r7, #16
 8017926:	46bd      	mov	sp, r7
 8017928:	bd80      	pop	{r7, pc}
 801792a:	bf00      	nop
 801792c:	ff20810f 	.word	0xff20810f

08017930 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8017930:	b580      	push	{r7, lr}
 8017932:	b084      	sub	sp, #16
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
 8017938:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017942:	699b      	ldr	r3, [r3, #24]
 8017944:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8017946:	68fa      	ldr	r2, [r7, #12]
 8017948:	4b3d      	ldr	r3, [pc, #244]	; (8017a40 <ETH_SetDMAConfig+0x110>)
 801794a:	4013      	ands	r3, r2
 801794c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801794e:	683b      	ldr	r3, [r7, #0]
 8017950:	7b1b      	ldrb	r3, [r3, #12]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d102      	bne.n	801795c <ETH_SetDMAConfig+0x2c>
 8017956:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801795a:	e000      	b.n	801795e <ETH_SetDMAConfig+0x2e>
 801795c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801795e:	683b      	ldr	r3, [r7, #0]
 8017960:	7b5b      	ldrb	r3, [r3, #13]
 8017962:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8017964:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8017966:	683a      	ldr	r2, [r7, #0]
 8017968:	7f52      	ldrb	r2, [r2, #29]
 801796a:	2a00      	cmp	r2, #0
 801796c:	d102      	bne.n	8017974 <ETH_SetDMAConfig+0x44>
 801796e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8017972:	e000      	b.n	8017976 <ETH_SetDMAConfig+0x46>
 8017974:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8017976:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8017978:	683b      	ldr	r3, [r7, #0]
 801797a:	7b9b      	ldrb	r3, [r3, #14]
 801797c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801797e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8017980:	683b      	ldr	r3, [r7, #0]
 8017982:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8017984:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8017986:	683b      	ldr	r3, [r7, #0]
 8017988:	7f1b      	ldrb	r3, [r3, #28]
 801798a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 801798c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801798e:	683b      	ldr	r3, [r7, #0]
 8017990:	7f9b      	ldrb	r3, [r3, #30]
 8017992:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8017994:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8017996:	683b      	ldr	r3, [r7, #0]
 8017998:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801799a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 801799c:	683b      	ldr	r3, [r7, #0]
 801799e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80179a2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80179a4:	4313      	orrs	r3, r2
 80179a6:	68fa      	ldr	r2, [r7, #12]
 80179a8:	4313      	orrs	r3, r2
 80179aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80179b4:	461a      	mov	r2, r3
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80179c2:	699b      	ldr	r3, [r3, #24]
 80179c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80179c6:	2001      	movs	r0, #1
 80179c8:	f7fd ffe0 	bl	801598c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80179d4:	461a      	mov	r2, r3
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80179da:	683b      	ldr	r3, [r7, #0]
 80179dc:	791b      	ldrb	r3, [r3, #4]
 80179de:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80179e0:	683b      	ldr	r3, [r7, #0]
 80179e2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80179e4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80179e6:	683b      	ldr	r3, [r7, #0]
 80179e8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80179ea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80179ec:	683b      	ldr	r3, [r7, #0]
 80179ee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80179f0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80179f2:	683b      	ldr	r3, [r7, #0]
 80179f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80179f8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80179fa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80179fc:	683b      	ldr	r3, [r7, #0]
 80179fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a00:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8017a02:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8017a04:	683b      	ldr	r3, [r7, #0]
 8017a06:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8017a08:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8017a0a:	687a      	ldr	r2, [r7, #4]
 8017a0c:	6812      	ldr	r2, [r2, #0]
 8017a0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017a12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8017a16:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017a24:	2001      	movs	r0, #1
 8017a26:	f7fd ffb1 	bl	801598c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017a32:	461a      	mov	r2, r3
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	6013      	str	r3, [r2, #0]
}
 8017a38:	bf00      	nop
 8017a3a:	3710      	adds	r7, #16
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}
 8017a40:	f8de3f23 	.word	0xf8de3f23

08017a44 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b0a6      	sub	sp, #152	; 0x98
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8017a4c:	2301      	movs	r3, #1
 8017a4e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8017a52:	2301      	movs	r3, #1
 8017a54:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8017a58:	2300      	movs	r3, #0
 8017a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8017a62:	2301      	movs	r3, #1
 8017a64:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8017a68:	2300      	movs	r3, #0
 8017a6a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8017a6e:	2301      	movs	r3, #1
 8017a70:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8017a74:	2300      	movs	r3, #0
 8017a76:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8017a80:	2300      	movs	r3, #0
 8017a82:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8017a84:	2300      	movs	r3, #0
 8017a86:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8017a8e:	2300      	movs	r3, #0
 8017a90:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8017a94:	2300      	movs	r3, #0
 8017a96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8017aa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8017aac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8017ab8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017abc:	4619      	mov	r1, r3
 8017abe:	6878      	ldr	r0, [r7, #4]
 8017ac0:	f7ff fe86 	bl	80177d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8017ac4:	2301      	movs	r3, #1
 8017ac6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8017ac8:	2301      	movs	r3, #1
 8017aca:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8017acc:	2301      	movs	r3, #1
 8017ace:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8017ad2:	2301      	movs	r3, #1
 8017ad4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8017ada:	2300      	movs	r3, #0
 8017adc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8017aea:	2301      	movs	r3, #1
 8017aec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8017af0:	2301      	movs	r3, #1
 8017af2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8017af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017af8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8017afa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017afe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8017b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017b04:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8017b06:	2301      	movs	r3, #1
 8017b08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8017b10:	2300      	movs	r3, #0
 8017b12:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8017b14:	f107 0308 	add.w	r3, r7, #8
 8017b18:	4619      	mov	r1, r3
 8017b1a:	6878      	ldr	r0, [r7, #4]
 8017b1c:	f7ff ff08 	bl	8017930 <ETH_SetDMAConfig>
}
 8017b20:	bf00      	nop
 8017b22:	3798      	adds	r7, #152	; 0x98
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}

08017b28 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8017b28:	b480      	push	{r7}
 8017b2a:	b087      	sub	sp, #28
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	60f8      	str	r0, [r7, #12]
 8017b30:	60b9      	str	r1, [r7, #8]
 8017b32:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	3305      	adds	r3, #5
 8017b38:	781b      	ldrb	r3, [r3, #0]
 8017b3a:	021b      	lsls	r3, r3, #8
 8017b3c:	687a      	ldr	r2, [r7, #4]
 8017b3e:	3204      	adds	r2, #4
 8017b40:	7812      	ldrb	r2, [r2, #0]
 8017b42:	4313      	orrs	r3, r2
 8017b44:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8017b46:	68ba      	ldr	r2, [r7, #8]
 8017b48:	4b11      	ldr	r3, [pc, #68]	; (8017b90 <ETH_MACAddressConfig+0x68>)
 8017b4a:	4413      	add	r3, r2
 8017b4c:	461a      	mov	r2, r3
 8017b4e:	697b      	ldr	r3, [r7, #20]
 8017b50:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	3303      	adds	r3, #3
 8017b56:	781b      	ldrb	r3, [r3, #0]
 8017b58:	061a      	lsls	r2, r3, #24
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	3302      	adds	r3, #2
 8017b5e:	781b      	ldrb	r3, [r3, #0]
 8017b60:	041b      	lsls	r3, r3, #16
 8017b62:	431a      	orrs	r2, r3
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	3301      	adds	r3, #1
 8017b68:	781b      	ldrb	r3, [r3, #0]
 8017b6a:	021b      	lsls	r3, r3, #8
 8017b6c:	4313      	orrs	r3, r2
 8017b6e:	687a      	ldr	r2, [r7, #4]
 8017b70:	7812      	ldrb	r2, [r2, #0]
 8017b72:	4313      	orrs	r3, r2
 8017b74:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8017b76:	68ba      	ldr	r2, [r7, #8]
 8017b78:	4b06      	ldr	r3, [pc, #24]	; (8017b94 <ETH_MACAddressConfig+0x6c>)
 8017b7a:	4413      	add	r3, r2
 8017b7c:	461a      	mov	r2, r3
 8017b7e:	697b      	ldr	r3, [r7, #20]
 8017b80:	6013      	str	r3, [r2, #0]
}
 8017b82:	bf00      	nop
 8017b84:	371c      	adds	r7, #28
 8017b86:	46bd      	mov	sp, r7
 8017b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8c:	4770      	bx	lr
 8017b8e:	bf00      	nop
 8017b90:	40028040 	.word	0x40028040
 8017b94:	40028044 	.word	0x40028044

08017b98 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8017b98:	b480      	push	{r7}
 8017b9a:	b085      	sub	sp, #20
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	60fb      	str	r3, [r7, #12]
 8017ba4:	e03e      	b.n	8017c24 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	68d9      	ldr	r1, [r3, #12]
 8017baa:	68fa      	ldr	r2, [r7, #12]
 8017bac:	4613      	mov	r3, r2
 8017bae:	009b      	lsls	r3, r3, #2
 8017bb0:	4413      	add	r3, r2
 8017bb2:	00db      	lsls	r3, r3, #3
 8017bb4:	440b      	add	r3, r1
 8017bb6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8017bb8:	68bb      	ldr	r3, [r7, #8]
 8017bba:	2200      	movs	r2, #0
 8017bbc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8017bbe:	68bb      	ldr	r3, [r7, #8]
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8017bc4:	68bb      	ldr	r3, [r7, #8]
 8017bc6:	2200      	movs	r2, #0
 8017bc8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8017bca:	68bb      	ldr	r3, [r7, #8]
 8017bcc:	2200      	movs	r2, #0
 8017bce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8017bd0:	68b9      	ldr	r1, [r7, #8]
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	68fa      	ldr	r2, [r7, #12]
 8017bd6:	3206      	adds	r2, #6
 8017bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8017bdc:	68bb      	ldr	r3, [r7, #8]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8017be4:	68bb      	ldr	r3, [r7, #8]
 8017be6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	2b02      	cmp	r3, #2
 8017bec:	d80c      	bhi.n	8017c08 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	68d9      	ldr	r1, [r3, #12]
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	1c5a      	adds	r2, r3, #1
 8017bf6:	4613      	mov	r3, r2
 8017bf8:	009b      	lsls	r3, r3, #2
 8017bfa:	4413      	add	r3, r2
 8017bfc:	00db      	lsls	r3, r3, #3
 8017bfe:	440b      	add	r3, r1
 8017c00:	461a      	mov	r2, r3
 8017c02:	68bb      	ldr	r3, [r7, #8]
 8017c04:	60da      	str	r2, [r3, #12]
 8017c06:	e004      	b.n	8017c12 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	68db      	ldr	r3, [r3, #12]
 8017c0c:	461a      	mov	r2, r3
 8017c0e:	68bb      	ldr	r3, [r7, #8]
 8017c10:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8017c12:	68bb      	ldr	r3, [r7, #8]
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8017c1a:	68bb      	ldr	r3, [r7, #8]
 8017c1c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	3301      	adds	r3, #1
 8017c22:	60fb      	str	r3, [r7, #12]
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	2b03      	cmp	r3, #3
 8017c28:	d9bd      	bls.n	8017ba6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	68da      	ldr	r2, [r3, #12]
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017c3c:	611a      	str	r2, [r3, #16]
}
 8017c3e:	bf00      	nop
 8017c40:	3714      	adds	r7, #20
 8017c42:	46bd      	mov	sp, r7
 8017c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c48:	4770      	bx	lr

08017c4a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8017c4a:	b480      	push	{r7}
 8017c4c:	b085      	sub	sp, #20
 8017c4e:	af00      	add	r7, sp, #0
 8017c50:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8017c52:	2300      	movs	r3, #0
 8017c54:	60fb      	str	r3, [r7, #12]
 8017c56:	e046      	b.n	8017ce6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	6919      	ldr	r1, [r3, #16]
 8017c5c:	68fa      	ldr	r2, [r7, #12]
 8017c5e:	4613      	mov	r3, r2
 8017c60:	009b      	lsls	r3, r3, #2
 8017c62:	4413      	add	r3, r2
 8017c64:	00db      	lsls	r3, r3, #3
 8017c66:	440b      	add	r3, r1
 8017c68:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8017c6a:	68bb      	ldr	r3, [r7, #8]
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8017c70:	68bb      	ldr	r3, [r7, #8]
 8017c72:	2200      	movs	r2, #0
 8017c74:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8017c76:	68bb      	ldr	r3, [r7, #8]
 8017c78:	2200      	movs	r2, #0
 8017c7a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8017c7c:	68bb      	ldr	r3, [r7, #8]
 8017c7e:	2200      	movs	r2, #0
 8017c80:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8017c82:	68bb      	ldr	r3, [r7, #8]
 8017c84:	2200      	movs	r2, #0
 8017c86:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8017c88:	68bb      	ldr	r3, [r7, #8]
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8017c8e:	68bb      	ldr	r3, [r7, #8]
 8017c90:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017c94:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8017c96:	68bb      	ldr	r3, [r7, #8]
 8017c98:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8017c9c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8017c9e:	68bb      	ldr	r3, [r7, #8]
 8017ca0:	685b      	ldr	r3, [r3, #4]
 8017ca2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017ca6:	68bb      	ldr	r3, [r7, #8]
 8017ca8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8017caa:	68b9      	ldr	r1, [r7, #8]
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	68fa      	ldr	r2, [r7, #12]
 8017cb0:	3212      	adds	r2, #18
 8017cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	2b02      	cmp	r3, #2
 8017cba:	d80c      	bhi.n	8017cd6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	6919      	ldr	r1, [r3, #16]
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	1c5a      	adds	r2, r3, #1
 8017cc4:	4613      	mov	r3, r2
 8017cc6:	009b      	lsls	r3, r3, #2
 8017cc8:	4413      	add	r3, r2
 8017cca:	00db      	lsls	r3, r3, #3
 8017ccc:	440b      	add	r3, r1
 8017cce:	461a      	mov	r2, r3
 8017cd0:	68bb      	ldr	r3, [r7, #8]
 8017cd2:	60da      	str	r2, [r3, #12]
 8017cd4:	e004      	b.n	8017ce0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	691b      	ldr	r3, [r3, #16]
 8017cda:	461a      	mov	r2, r3
 8017cdc:	68bb      	ldr	r3, [r7, #8]
 8017cde:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	3301      	adds	r3, #1
 8017ce4:	60fb      	str	r3, [r7, #12]
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	2b03      	cmp	r3, #3
 8017cea:	d9b5      	bls.n	8017c58 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	2200      	movs	r2, #0
 8017cf0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	2200      	movs	r2, #0
 8017cf6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	2200      	movs	r2, #0
 8017d02:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	2200      	movs	r2, #0
 8017d08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	691a      	ldr	r2, [r3, #16]
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017d16:	60da      	str	r2, [r3, #12]
}
 8017d18:	bf00      	nop
 8017d1a:	3714      	adds	r7, #20
 8017d1c:	46bd      	mov	sp, r7
 8017d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d22:	4770      	bx	lr

08017d24 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8017d24:	b480      	push	{r7}
 8017d26:	b08d      	sub	sp, #52	; 0x34
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	60f8      	str	r0, [r7, #12]
 8017d2c:	60b9      	str	r1, [r7, #8]
 8017d2e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	3318      	adds	r3, #24
 8017d34:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8017d36:	697b      	ldr	r3, [r7, #20]
 8017d38:	691b      	ldr	r3, [r3, #16]
 8017d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	691b      	ldr	r3, [r3, #16]
 8017d40:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8017d42:	2300      	movs	r3, #0
 8017d44:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017d46:	697b      	ldr	r3, [r7, #20]
 8017d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d4e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8017d50:	68bb      	ldr	r3, [r7, #8]
 8017d52:	689b      	ldr	r3, [r3, #8]
 8017d54:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8017d56:	2300      	movs	r3, #0
 8017d58:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8017d5a:	6a3b      	ldr	r3, [r7, #32]
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017d66:	d007      	beq.n	8017d78 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8017d68:	697a      	ldr	r2, [r7, #20]
 8017d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d6c:	3304      	adds	r3, #4
 8017d6e:	009b      	lsls	r3, r3, #2
 8017d70:	4413      	add	r3, r2
 8017d72:	685b      	ldr	r3, [r3, #4]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d001      	beq.n	8017d7c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8017d78:	2302      	movs	r3, #2
 8017d7a:	e0ff      	b.n	8017f7c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8017d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d7e:	3301      	adds	r3, #1
 8017d80:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8017d82:	69fb      	ldr	r3, [r7, #28]
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	461a      	mov	r2, r3
 8017d88:	6a3b      	ldr	r3, [r7, #32]
 8017d8a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8017d8c:	6a3b      	ldr	r3, [r7, #32]
 8017d8e:	685a      	ldr	r2, [r3, #4]
 8017d90:	4b7d      	ldr	r3, [pc, #500]	; (8017f88 <ETH_Prepare_Tx_Descriptors+0x264>)
 8017d92:	4013      	ands	r3, r2
 8017d94:	69fa      	ldr	r2, [r7, #28]
 8017d96:	6852      	ldr	r2, [r2, #4]
 8017d98:	431a      	orrs	r2, r3
 8017d9a:	6a3b      	ldr	r3, [r7, #32]
 8017d9c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8017d9e:	68bb      	ldr	r3, [r7, #8]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	f003 0301 	and.w	r3, r3, #1
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d008      	beq.n	8017dbc <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8017daa:	6a3b      	ldr	r3, [r7, #32]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8017db2:	68bb      	ldr	r3, [r7, #8]
 8017db4:	695b      	ldr	r3, [r3, #20]
 8017db6:	431a      	orrs	r2, r3
 8017db8:	6a3b      	ldr	r3, [r7, #32]
 8017dba:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8017dbc:	68bb      	ldr	r3, [r7, #8]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	f003 0320 	and.w	r3, r3, #32
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d008      	beq.n	8017dda <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8017dc8:	6a3b      	ldr	r3, [r7, #32]
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017dd0:	68bb      	ldr	r3, [r7, #8]
 8017dd2:	691b      	ldr	r3, [r3, #16]
 8017dd4:	431a      	orrs	r2, r3
 8017dd6:	6a3b      	ldr	r3, [r7, #32]
 8017dd8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8017dda:	68bb      	ldr	r3, [r7, #8]
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	f003 0304 	and.w	r3, r3, #4
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d005      	beq.n	8017df2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8017de6:	6a3b      	ldr	r3, [r7, #32]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8017dee:	6a3b      	ldr	r3, [r7, #32]
 8017df0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8017df2:	6a3b      	ldr	r3, [r7, #32]
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8017dfa:	6a3b      	ldr	r3, [r7, #32]
 8017dfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8017dfe:	f3bf 8f5f 	dmb	sy
}
 8017e02:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017e04:	6a3b      	ldr	r3, [r7, #32]
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017e0c:	6a3b      	ldr	r3, [r7, #32]
 8017e0e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8017e10:	e082      	b.n	8017f18 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8017e12:	6a3b      	ldr	r3, [r7, #32]
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8017e1a:	6a3b      	ldr	r3, [r7, #32]
 8017e1c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d006      	beq.n	8017e32 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017e24:	6a3b      	ldr	r3, [r7, #32]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8017e2c:	6a3b      	ldr	r3, [r7, #32]
 8017e2e:	601a      	str	r2, [r3, #0]
 8017e30:	e005      	b.n	8017e3e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017e32:	6a3b      	ldr	r3, [r7, #32]
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8017e3a:	6a3b      	ldr	r3, [r7, #32]
 8017e3c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8017e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e40:	3301      	adds	r3, #1
 8017e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e46:	2b03      	cmp	r3, #3
 8017e48:	d902      	bls.n	8017e50 <ETH_Prepare_Tx_Descriptors+0x12c>
 8017e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e4c:	3b04      	subs	r3, #4
 8017e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017e50:	697b      	ldr	r3, [r7, #20]
 8017e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e58:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8017e5a:	6a3b      	ldr	r3, [r7, #32]
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8017e62:	6a3b      	ldr	r3, [r7, #32]
 8017e64:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8017e66:	6a3b      	ldr	r3, [r7, #32]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017e72:	d007      	beq.n	8017e84 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8017e74:	697a      	ldr	r2, [r7, #20]
 8017e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e78:	3304      	adds	r3, #4
 8017e7a:	009b      	lsls	r3, r3, #2
 8017e7c:	4413      	add	r3, r2
 8017e7e:	685b      	ldr	r3, [r3, #4]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d029      	beq.n	8017ed8 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8017e84:	693b      	ldr	r3, [r7, #16]
 8017e86:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017e88:	697b      	ldr	r3, [r7, #20]
 8017e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e90:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8017e92:	2300      	movs	r3, #0
 8017e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8017e96:	e019      	b.n	8017ecc <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8017e98:	f3bf 8f5f 	dmb	sy
}
 8017e9c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017e9e:	6a3b      	ldr	r3, [r7, #32]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017ea6:	6a3b      	ldr	r3, [r7, #32]
 8017ea8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8017eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eac:	3301      	adds	r3, #1
 8017eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eb2:	2b03      	cmp	r3, #3
 8017eb4:	d902      	bls.n	8017ebc <ETH_Prepare_Tx_Descriptors+0x198>
 8017eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eb8:	3b04      	subs	r3, #4
 8017eba:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017ebc:	697b      	ldr	r3, [r7, #20]
 8017ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ec4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8017ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec8:	3301      	adds	r3, #1
 8017eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8017ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed0:	429a      	cmp	r2, r3
 8017ed2:	d3e1      	bcc.n	8017e98 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8017ed4:	2302      	movs	r3, #2
 8017ed6:	e051      	b.n	8017f7c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8017ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eda:	3301      	adds	r3, #1
 8017edc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8017ede:	69fb      	ldr	r3, [r7, #28]
 8017ee0:	689b      	ldr	r3, [r3, #8]
 8017ee2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8017ee4:	69fb      	ldr	r3, [r7, #28]
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	461a      	mov	r2, r3
 8017eea:	6a3b      	ldr	r3, [r7, #32]
 8017eec:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8017eee:	6a3b      	ldr	r3, [r7, #32]
 8017ef0:	685a      	ldr	r2, [r3, #4]
 8017ef2:	4b25      	ldr	r3, [pc, #148]	; (8017f88 <ETH_Prepare_Tx_Descriptors+0x264>)
 8017ef4:	4013      	ands	r3, r2
 8017ef6:	69fa      	ldr	r2, [r7, #28]
 8017ef8:	6852      	ldr	r2, [r2, #4]
 8017efa:	431a      	orrs	r2, r3
 8017efc:	6a3b      	ldr	r3, [r7, #32]
 8017efe:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8017f00:	69bb      	ldr	r3, [r7, #24]
 8017f02:	3301      	adds	r3, #1
 8017f04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8017f06:	f3bf 8f5f 	dmb	sy
}
 8017f0a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017f0c:	6a3b      	ldr	r3, [r7, #32]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017f14:	6a3b      	ldr	r3, [r7, #32]
 8017f16:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8017f18:	69fb      	ldr	r3, [r7, #28]
 8017f1a:	689b      	ldr	r3, [r3, #8]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	f47f af78 	bne.w	8017e12 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d006      	beq.n	8017f36 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017f28:	6a3b      	ldr	r3, [r7, #32]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8017f30:	6a3b      	ldr	r3, [r7, #32]
 8017f32:	601a      	str	r2, [r3, #0]
 8017f34:	e005      	b.n	8017f42 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017f36:	6a3b      	ldr	r3, [r7, #32]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8017f3e:	6a3b      	ldr	r3, [r7, #32]
 8017f40:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8017f42:	6a3b      	ldr	r3, [r7, #32]
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8017f4a:	6a3b      	ldr	r3, [r7, #32]
 8017f4c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8017f4e:	697b      	ldr	r3, [r7, #20]
 8017f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017f52:	6979      	ldr	r1, [r7, #20]
 8017f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f56:	3304      	adds	r3, #4
 8017f58:	009b      	lsls	r3, r3, #2
 8017f5a:	440b      	add	r3, r1
 8017f5c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8017f5e:	697b      	ldr	r3, [r7, #20]
 8017f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f62:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8017f64:	b672      	cpsid	i
}
 8017f66:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8017f68:	697b      	ldr	r3, [r7, #20]
 8017f6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f6c:	69bb      	ldr	r3, [r7, #24]
 8017f6e:	4413      	add	r3, r2
 8017f70:	1c5a      	adds	r2, r3, #1
 8017f72:	697b      	ldr	r3, [r7, #20]
 8017f74:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8017f76:	b662      	cpsie	i
}
 8017f78:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8017f7a:	2300      	movs	r3, #0
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3734      	adds	r7, #52	; 0x34
 8017f80:	46bd      	mov	sp, r7
 8017f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f86:	4770      	bx	lr
 8017f88:	ffffe000 	.word	0xffffe000

08017f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8017f8c:	b480      	push	{r7}
 8017f8e:	b089      	sub	sp, #36	; 0x24
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
 8017f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8017f96:	2300      	movs	r3, #0
 8017f98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	61fb      	str	r3, [r7, #28]
 8017faa:	e175      	b.n	8018298 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8017fac:	2201      	movs	r2, #1
 8017fae:	69fb      	ldr	r3, [r7, #28]
 8017fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8017fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8017fb6:	683b      	ldr	r3, [r7, #0]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	697a      	ldr	r2, [r7, #20]
 8017fbc:	4013      	ands	r3, r2
 8017fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8017fc0:	693a      	ldr	r2, [r7, #16]
 8017fc2:	697b      	ldr	r3, [r7, #20]
 8017fc4:	429a      	cmp	r2, r3
 8017fc6:	f040 8164 	bne.w	8018292 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8017fca:	683b      	ldr	r3, [r7, #0]
 8017fcc:	685b      	ldr	r3, [r3, #4]
 8017fce:	f003 0303 	and.w	r3, r3, #3
 8017fd2:	2b01      	cmp	r3, #1
 8017fd4:	d005      	beq.n	8017fe2 <HAL_GPIO_Init+0x56>
 8017fd6:	683b      	ldr	r3, [r7, #0]
 8017fd8:	685b      	ldr	r3, [r3, #4]
 8017fda:	f003 0303 	and.w	r3, r3, #3
 8017fde:	2b02      	cmp	r3, #2
 8017fe0:	d130      	bne.n	8018044 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	689b      	ldr	r3, [r3, #8]
 8017fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8017fe8:	69fb      	ldr	r3, [r7, #28]
 8017fea:	005b      	lsls	r3, r3, #1
 8017fec:	2203      	movs	r2, #3
 8017fee:	fa02 f303 	lsl.w	r3, r2, r3
 8017ff2:	43db      	mvns	r3, r3
 8017ff4:	69ba      	ldr	r2, [r7, #24]
 8017ff6:	4013      	ands	r3, r2
 8017ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8017ffa:	683b      	ldr	r3, [r7, #0]
 8017ffc:	68da      	ldr	r2, [r3, #12]
 8017ffe:	69fb      	ldr	r3, [r7, #28]
 8018000:	005b      	lsls	r3, r3, #1
 8018002:	fa02 f303 	lsl.w	r3, r2, r3
 8018006:	69ba      	ldr	r2, [r7, #24]
 8018008:	4313      	orrs	r3, r2
 801800a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	69ba      	ldr	r2, [r7, #24]
 8018010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	685b      	ldr	r3, [r3, #4]
 8018016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8018018:	2201      	movs	r2, #1
 801801a:	69fb      	ldr	r3, [r7, #28]
 801801c:	fa02 f303 	lsl.w	r3, r2, r3
 8018020:	43db      	mvns	r3, r3
 8018022:	69ba      	ldr	r2, [r7, #24]
 8018024:	4013      	ands	r3, r2
 8018026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8018028:	683b      	ldr	r3, [r7, #0]
 801802a:	685b      	ldr	r3, [r3, #4]
 801802c:	091b      	lsrs	r3, r3, #4
 801802e:	f003 0201 	and.w	r2, r3, #1
 8018032:	69fb      	ldr	r3, [r7, #28]
 8018034:	fa02 f303 	lsl.w	r3, r2, r3
 8018038:	69ba      	ldr	r2, [r7, #24]
 801803a:	4313      	orrs	r3, r2
 801803c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	69ba      	ldr	r2, [r7, #24]
 8018042:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8018044:	683b      	ldr	r3, [r7, #0]
 8018046:	685b      	ldr	r3, [r3, #4]
 8018048:	f003 0303 	and.w	r3, r3, #3
 801804c:	2b03      	cmp	r3, #3
 801804e:	d017      	beq.n	8018080 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	68db      	ldr	r3, [r3, #12]
 8018054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8018056:	69fb      	ldr	r3, [r7, #28]
 8018058:	005b      	lsls	r3, r3, #1
 801805a:	2203      	movs	r2, #3
 801805c:	fa02 f303 	lsl.w	r3, r2, r3
 8018060:	43db      	mvns	r3, r3
 8018062:	69ba      	ldr	r2, [r7, #24]
 8018064:	4013      	ands	r3, r2
 8018066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8018068:	683b      	ldr	r3, [r7, #0]
 801806a:	689a      	ldr	r2, [r3, #8]
 801806c:	69fb      	ldr	r3, [r7, #28]
 801806e:	005b      	lsls	r3, r3, #1
 8018070:	fa02 f303 	lsl.w	r3, r2, r3
 8018074:	69ba      	ldr	r2, [r7, #24]
 8018076:	4313      	orrs	r3, r2
 8018078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	69ba      	ldr	r2, [r7, #24]
 801807e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8018080:	683b      	ldr	r3, [r7, #0]
 8018082:	685b      	ldr	r3, [r3, #4]
 8018084:	f003 0303 	and.w	r3, r3, #3
 8018088:	2b02      	cmp	r3, #2
 801808a:	d123      	bne.n	80180d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 801808c:	69fb      	ldr	r3, [r7, #28]
 801808e:	08da      	lsrs	r2, r3, #3
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	3208      	adds	r2, #8
 8018094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801809a:	69fb      	ldr	r3, [r7, #28]
 801809c:	f003 0307 	and.w	r3, r3, #7
 80180a0:	009b      	lsls	r3, r3, #2
 80180a2:	220f      	movs	r2, #15
 80180a4:	fa02 f303 	lsl.w	r3, r2, r3
 80180a8:	43db      	mvns	r3, r3
 80180aa:	69ba      	ldr	r2, [r7, #24]
 80180ac:	4013      	ands	r3, r2
 80180ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80180b0:	683b      	ldr	r3, [r7, #0]
 80180b2:	691a      	ldr	r2, [r3, #16]
 80180b4:	69fb      	ldr	r3, [r7, #28]
 80180b6:	f003 0307 	and.w	r3, r3, #7
 80180ba:	009b      	lsls	r3, r3, #2
 80180bc:	fa02 f303 	lsl.w	r3, r2, r3
 80180c0:	69ba      	ldr	r2, [r7, #24]
 80180c2:	4313      	orrs	r3, r2
 80180c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80180c6:	69fb      	ldr	r3, [r7, #28]
 80180c8:	08da      	lsrs	r2, r3, #3
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	3208      	adds	r2, #8
 80180ce:	69b9      	ldr	r1, [r7, #24]
 80180d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80180da:	69fb      	ldr	r3, [r7, #28]
 80180dc:	005b      	lsls	r3, r3, #1
 80180de:	2203      	movs	r2, #3
 80180e0:	fa02 f303 	lsl.w	r3, r2, r3
 80180e4:	43db      	mvns	r3, r3
 80180e6:	69ba      	ldr	r2, [r7, #24]
 80180e8:	4013      	ands	r3, r2
 80180ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80180ec:	683b      	ldr	r3, [r7, #0]
 80180ee:	685b      	ldr	r3, [r3, #4]
 80180f0:	f003 0203 	and.w	r2, r3, #3
 80180f4:	69fb      	ldr	r3, [r7, #28]
 80180f6:	005b      	lsls	r3, r3, #1
 80180f8:	fa02 f303 	lsl.w	r3, r2, r3
 80180fc:	69ba      	ldr	r2, [r7, #24]
 80180fe:	4313      	orrs	r3, r2
 8018100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	69ba      	ldr	r2, [r7, #24]
 8018106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8018108:	683b      	ldr	r3, [r7, #0]
 801810a:	685b      	ldr	r3, [r3, #4]
 801810c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8018110:	2b00      	cmp	r3, #0
 8018112:	f000 80be 	beq.w	8018292 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018116:	4b66      	ldr	r3, [pc, #408]	; (80182b0 <HAL_GPIO_Init+0x324>)
 8018118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801811a:	4a65      	ldr	r2, [pc, #404]	; (80182b0 <HAL_GPIO_Init+0x324>)
 801811c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018120:	6453      	str	r3, [r2, #68]	; 0x44
 8018122:	4b63      	ldr	r3, [pc, #396]	; (80182b0 <HAL_GPIO_Init+0x324>)
 8018124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801812a:	60fb      	str	r3, [r7, #12]
 801812c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 801812e:	4a61      	ldr	r2, [pc, #388]	; (80182b4 <HAL_GPIO_Init+0x328>)
 8018130:	69fb      	ldr	r3, [r7, #28]
 8018132:	089b      	lsrs	r3, r3, #2
 8018134:	3302      	adds	r3, #2
 8018136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801813a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801813c:	69fb      	ldr	r3, [r7, #28]
 801813e:	f003 0303 	and.w	r3, r3, #3
 8018142:	009b      	lsls	r3, r3, #2
 8018144:	220f      	movs	r2, #15
 8018146:	fa02 f303 	lsl.w	r3, r2, r3
 801814a:	43db      	mvns	r3, r3
 801814c:	69ba      	ldr	r2, [r7, #24]
 801814e:	4013      	ands	r3, r2
 8018150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	4a58      	ldr	r2, [pc, #352]	; (80182b8 <HAL_GPIO_Init+0x32c>)
 8018156:	4293      	cmp	r3, r2
 8018158:	d037      	beq.n	80181ca <HAL_GPIO_Init+0x23e>
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	4a57      	ldr	r2, [pc, #348]	; (80182bc <HAL_GPIO_Init+0x330>)
 801815e:	4293      	cmp	r3, r2
 8018160:	d031      	beq.n	80181c6 <HAL_GPIO_Init+0x23a>
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	4a56      	ldr	r2, [pc, #344]	; (80182c0 <HAL_GPIO_Init+0x334>)
 8018166:	4293      	cmp	r3, r2
 8018168:	d02b      	beq.n	80181c2 <HAL_GPIO_Init+0x236>
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	4a55      	ldr	r2, [pc, #340]	; (80182c4 <HAL_GPIO_Init+0x338>)
 801816e:	4293      	cmp	r3, r2
 8018170:	d025      	beq.n	80181be <HAL_GPIO_Init+0x232>
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	4a54      	ldr	r2, [pc, #336]	; (80182c8 <HAL_GPIO_Init+0x33c>)
 8018176:	4293      	cmp	r3, r2
 8018178:	d01f      	beq.n	80181ba <HAL_GPIO_Init+0x22e>
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	4a53      	ldr	r2, [pc, #332]	; (80182cc <HAL_GPIO_Init+0x340>)
 801817e:	4293      	cmp	r3, r2
 8018180:	d019      	beq.n	80181b6 <HAL_GPIO_Init+0x22a>
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	4a52      	ldr	r2, [pc, #328]	; (80182d0 <HAL_GPIO_Init+0x344>)
 8018186:	4293      	cmp	r3, r2
 8018188:	d013      	beq.n	80181b2 <HAL_GPIO_Init+0x226>
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	4a51      	ldr	r2, [pc, #324]	; (80182d4 <HAL_GPIO_Init+0x348>)
 801818e:	4293      	cmp	r3, r2
 8018190:	d00d      	beq.n	80181ae <HAL_GPIO_Init+0x222>
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	4a50      	ldr	r2, [pc, #320]	; (80182d8 <HAL_GPIO_Init+0x34c>)
 8018196:	4293      	cmp	r3, r2
 8018198:	d007      	beq.n	80181aa <HAL_GPIO_Init+0x21e>
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	4a4f      	ldr	r2, [pc, #316]	; (80182dc <HAL_GPIO_Init+0x350>)
 801819e:	4293      	cmp	r3, r2
 80181a0:	d101      	bne.n	80181a6 <HAL_GPIO_Init+0x21a>
 80181a2:	2309      	movs	r3, #9
 80181a4:	e012      	b.n	80181cc <HAL_GPIO_Init+0x240>
 80181a6:	230a      	movs	r3, #10
 80181a8:	e010      	b.n	80181cc <HAL_GPIO_Init+0x240>
 80181aa:	2308      	movs	r3, #8
 80181ac:	e00e      	b.n	80181cc <HAL_GPIO_Init+0x240>
 80181ae:	2307      	movs	r3, #7
 80181b0:	e00c      	b.n	80181cc <HAL_GPIO_Init+0x240>
 80181b2:	2306      	movs	r3, #6
 80181b4:	e00a      	b.n	80181cc <HAL_GPIO_Init+0x240>
 80181b6:	2305      	movs	r3, #5
 80181b8:	e008      	b.n	80181cc <HAL_GPIO_Init+0x240>
 80181ba:	2304      	movs	r3, #4
 80181bc:	e006      	b.n	80181cc <HAL_GPIO_Init+0x240>
 80181be:	2303      	movs	r3, #3
 80181c0:	e004      	b.n	80181cc <HAL_GPIO_Init+0x240>
 80181c2:	2302      	movs	r3, #2
 80181c4:	e002      	b.n	80181cc <HAL_GPIO_Init+0x240>
 80181c6:	2301      	movs	r3, #1
 80181c8:	e000      	b.n	80181cc <HAL_GPIO_Init+0x240>
 80181ca:	2300      	movs	r3, #0
 80181cc:	69fa      	ldr	r2, [r7, #28]
 80181ce:	f002 0203 	and.w	r2, r2, #3
 80181d2:	0092      	lsls	r2, r2, #2
 80181d4:	4093      	lsls	r3, r2
 80181d6:	69ba      	ldr	r2, [r7, #24]
 80181d8:	4313      	orrs	r3, r2
 80181da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80181dc:	4935      	ldr	r1, [pc, #212]	; (80182b4 <HAL_GPIO_Init+0x328>)
 80181de:	69fb      	ldr	r3, [r7, #28]
 80181e0:	089b      	lsrs	r3, r3, #2
 80181e2:	3302      	adds	r3, #2
 80181e4:	69ba      	ldr	r2, [r7, #24]
 80181e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80181ea:	4b3d      	ldr	r3, [pc, #244]	; (80182e0 <HAL_GPIO_Init+0x354>)
 80181ec:	689b      	ldr	r3, [r3, #8]
 80181ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80181f0:	693b      	ldr	r3, [r7, #16]
 80181f2:	43db      	mvns	r3, r3
 80181f4:	69ba      	ldr	r2, [r7, #24]
 80181f6:	4013      	ands	r3, r2
 80181f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80181fa:	683b      	ldr	r3, [r7, #0]
 80181fc:	685b      	ldr	r3, [r3, #4]
 80181fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018202:	2b00      	cmp	r3, #0
 8018204:	d003      	beq.n	801820e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8018206:	69ba      	ldr	r2, [r7, #24]
 8018208:	693b      	ldr	r3, [r7, #16]
 801820a:	4313      	orrs	r3, r2
 801820c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801820e:	4a34      	ldr	r2, [pc, #208]	; (80182e0 <HAL_GPIO_Init+0x354>)
 8018210:	69bb      	ldr	r3, [r7, #24]
 8018212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8018214:	4b32      	ldr	r3, [pc, #200]	; (80182e0 <HAL_GPIO_Init+0x354>)
 8018216:	68db      	ldr	r3, [r3, #12]
 8018218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801821a:	693b      	ldr	r3, [r7, #16]
 801821c:	43db      	mvns	r3, r3
 801821e:	69ba      	ldr	r2, [r7, #24]
 8018220:	4013      	ands	r3, r2
 8018222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8018224:	683b      	ldr	r3, [r7, #0]
 8018226:	685b      	ldr	r3, [r3, #4]
 8018228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801822c:	2b00      	cmp	r3, #0
 801822e:	d003      	beq.n	8018238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8018230:	69ba      	ldr	r2, [r7, #24]
 8018232:	693b      	ldr	r3, [r7, #16]
 8018234:	4313      	orrs	r3, r2
 8018236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8018238:	4a29      	ldr	r2, [pc, #164]	; (80182e0 <HAL_GPIO_Init+0x354>)
 801823a:	69bb      	ldr	r3, [r7, #24]
 801823c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801823e:	4b28      	ldr	r3, [pc, #160]	; (80182e0 <HAL_GPIO_Init+0x354>)
 8018240:	685b      	ldr	r3, [r3, #4]
 8018242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8018244:	693b      	ldr	r3, [r7, #16]
 8018246:	43db      	mvns	r3, r3
 8018248:	69ba      	ldr	r2, [r7, #24]
 801824a:	4013      	ands	r3, r2
 801824c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801824e:	683b      	ldr	r3, [r7, #0]
 8018250:	685b      	ldr	r3, [r3, #4]
 8018252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018256:	2b00      	cmp	r3, #0
 8018258:	d003      	beq.n	8018262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801825a:	69ba      	ldr	r2, [r7, #24]
 801825c:	693b      	ldr	r3, [r7, #16]
 801825e:	4313      	orrs	r3, r2
 8018260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8018262:	4a1f      	ldr	r2, [pc, #124]	; (80182e0 <HAL_GPIO_Init+0x354>)
 8018264:	69bb      	ldr	r3, [r7, #24]
 8018266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8018268:	4b1d      	ldr	r3, [pc, #116]	; (80182e0 <HAL_GPIO_Init+0x354>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801826e:	693b      	ldr	r3, [r7, #16]
 8018270:	43db      	mvns	r3, r3
 8018272:	69ba      	ldr	r2, [r7, #24]
 8018274:	4013      	ands	r3, r2
 8018276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8018278:	683b      	ldr	r3, [r7, #0]
 801827a:	685b      	ldr	r3, [r3, #4]
 801827c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018280:	2b00      	cmp	r3, #0
 8018282:	d003      	beq.n	801828c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8018284:	69ba      	ldr	r2, [r7, #24]
 8018286:	693b      	ldr	r3, [r7, #16]
 8018288:	4313      	orrs	r3, r2
 801828a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801828c:	4a14      	ldr	r2, [pc, #80]	; (80182e0 <HAL_GPIO_Init+0x354>)
 801828e:	69bb      	ldr	r3, [r7, #24]
 8018290:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8018292:	69fb      	ldr	r3, [r7, #28]
 8018294:	3301      	adds	r3, #1
 8018296:	61fb      	str	r3, [r7, #28]
 8018298:	69fb      	ldr	r3, [r7, #28]
 801829a:	2b0f      	cmp	r3, #15
 801829c:	f67f ae86 	bls.w	8017fac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80182a0:	bf00      	nop
 80182a2:	bf00      	nop
 80182a4:	3724      	adds	r7, #36	; 0x24
 80182a6:	46bd      	mov	sp, r7
 80182a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ac:	4770      	bx	lr
 80182ae:	bf00      	nop
 80182b0:	40023800 	.word	0x40023800
 80182b4:	40013800 	.word	0x40013800
 80182b8:	40020000 	.word	0x40020000
 80182bc:	40020400 	.word	0x40020400
 80182c0:	40020800 	.word	0x40020800
 80182c4:	40020c00 	.word	0x40020c00
 80182c8:	40021000 	.word	0x40021000
 80182cc:	40021400 	.word	0x40021400
 80182d0:	40021800 	.word	0x40021800
 80182d4:	40021c00 	.word	0x40021c00
 80182d8:	40022000 	.word	0x40022000
 80182dc:	40022400 	.word	0x40022400
 80182e0:	40013c00 	.word	0x40013c00

080182e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80182e4:	b480      	push	{r7}
 80182e6:	b085      	sub	sp, #20
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
 80182ec:	460b      	mov	r3, r1
 80182ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	691a      	ldr	r2, [r3, #16]
 80182f4:	887b      	ldrh	r3, [r7, #2]
 80182f6:	4013      	ands	r3, r2
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d002      	beq.n	8018302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80182fc:	2301      	movs	r3, #1
 80182fe:	73fb      	strb	r3, [r7, #15]
 8018300:	e001      	b.n	8018306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8018302:	2300      	movs	r3, #0
 8018304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8018306:	7bfb      	ldrb	r3, [r7, #15]
}
 8018308:	4618      	mov	r0, r3
 801830a:	3714      	adds	r7, #20
 801830c:	46bd      	mov	sp, r7
 801830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018312:	4770      	bx	lr

08018314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8018314:	b480      	push	{r7}
 8018316:	b083      	sub	sp, #12
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
 801831c:	460b      	mov	r3, r1
 801831e:	807b      	strh	r3, [r7, #2]
 8018320:	4613      	mov	r3, r2
 8018322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8018324:	787b      	ldrb	r3, [r7, #1]
 8018326:	2b00      	cmp	r3, #0
 8018328:	d003      	beq.n	8018332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801832a:	887a      	ldrh	r2, [r7, #2]
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8018330:	e003      	b.n	801833a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8018332:	887b      	ldrh	r3, [r7, #2]
 8018334:	041a      	lsls	r2, r3, #16
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	619a      	str	r2, [r3, #24]
}
 801833a:	bf00      	nop
 801833c:	370c      	adds	r7, #12
 801833e:	46bd      	mov	sp, r7
 8018340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018344:	4770      	bx	lr

08018346 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8018346:	b480      	push	{r7}
 8018348:	b085      	sub	sp, #20
 801834a:	af00      	add	r7, sp, #0
 801834c:	6078      	str	r0, [r7, #4]
 801834e:	460b      	mov	r3, r1
 8018350:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	695b      	ldr	r3, [r3, #20]
 8018356:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8018358:	887a      	ldrh	r2, [r7, #2]
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	4013      	ands	r3, r2
 801835e:	041a      	lsls	r2, r3, #16
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	43d9      	mvns	r1, r3
 8018364:	887b      	ldrh	r3, [r7, #2]
 8018366:	400b      	ands	r3, r1
 8018368:	431a      	orrs	r2, r3
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	619a      	str	r2, [r3, #24]
}
 801836e:	bf00      	nop
 8018370:	3714      	adds	r7, #20
 8018372:	46bd      	mov	sp, r7
 8018374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018378:	4770      	bx	lr
	...

0801837c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801837c:	b580      	push	{r7, lr}
 801837e:	b082      	sub	sp, #8
 8018380:	af00      	add	r7, sp, #0
 8018382:	4603      	mov	r3, r0
 8018384:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8018386:	4b08      	ldr	r3, [pc, #32]	; (80183a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8018388:	695a      	ldr	r2, [r3, #20]
 801838a:	88fb      	ldrh	r3, [r7, #6]
 801838c:	4013      	ands	r3, r2
 801838e:	2b00      	cmp	r3, #0
 8018390:	d006      	beq.n	80183a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8018392:	4a05      	ldr	r2, [pc, #20]	; (80183a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8018394:	88fb      	ldrh	r3, [r7, #6]
 8018396:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8018398:	88fb      	ldrh	r3, [r7, #6]
 801839a:	4618      	mov	r0, r3
 801839c:	f000 f806 	bl	80183ac <HAL_GPIO_EXTI_Callback>
  }
}
 80183a0:	bf00      	nop
 80183a2:	3708      	adds	r7, #8
 80183a4:	46bd      	mov	sp, r7
 80183a6:	bd80      	pop	{r7, pc}
 80183a8:	40013c00 	.word	0x40013c00

080183ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80183ac:	b480      	push	{r7}
 80183ae:	b083      	sub	sp, #12
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	4603      	mov	r3, r0
 80183b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80183b6:	bf00      	nop
 80183b8:	370c      	adds	r7, #12
 80183ba:	46bd      	mov	sp, r7
 80183bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c0:	4770      	bx	lr
	...

080183c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b082      	sub	sp, #8
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d101      	bne.n	80183d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80183d2:	2301      	movs	r3, #1
 80183d4:	e07f      	b.n	80184d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80183dc:	b2db      	uxtb	r3, r3
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d106      	bne.n	80183f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	2200      	movs	r2, #0
 80183e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80183ea:	6878      	ldr	r0, [r7, #4]
 80183ec:	f7fb fa34 	bl	8013858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	2224      	movs	r2, #36	; 0x24
 80183f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	681a      	ldr	r2, [r3, #0]
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	f022 0201 	bic.w	r2, r2, #1
 8018406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	685a      	ldr	r2, [r3, #4]
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018414:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	689a      	ldr	r2, [r3, #8]
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018424:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	68db      	ldr	r3, [r3, #12]
 801842a:	2b01      	cmp	r3, #1
 801842c:	d107      	bne.n	801843e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	689a      	ldr	r2, [r3, #8]
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801843a:	609a      	str	r2, [r3, #8]
 801843c:	e006      	b.n	801844c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	689a      	ldr	r2, [r3, #8]
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801844a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	68db      	ldr	r3, [r3, #12]
 8018450:	2b02      	cmp	r3, #2
 8018452:	d104      	bne.n	801845e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801845c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	6859      	ldr	r1, [r3, #4]
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	681a      	ldr	r2, [r3, #0]
 8018468:	4b1d      	ldr	r3, [pc, #116]	; (80184e0 <HAL_I2C_Init+0x11c>)
 801846a:	430b      	orrs	r3, r1
 801846c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	68da      	ldr	r2, [r3, #12]
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801847c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	691a      	ldr	r2, [r3, #16]
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	695b      	ldr	r3, [r3, #20]
 8018486:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	699b      	ldr	r3, [r3, #24]
 801848e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	430a      	orrs	r2, r1
 8018496:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	69d9      	ldr	r1, [r3, #28]
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	6a1a      	ldr	r2, [r3, #32]
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	430a      	orrs	r2, r1
 80184a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	681a      	ldr	r2, [r3, #0]
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	f042 0201 	orr.w	r2, r2, #1
 80184b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	2200      	movs	r2, #0
 80184bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	2220      	movs	r2, #32
 80184c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	2200      	movs	r2, #0
 80184ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	2200      	movs	r2, #0
 80184d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80184d4:	2300      	movs	r3, #0
}
 80184d6:	4618      	mov	r0, r3
 80184d8:	3708      	adds	r7, #8
 80184da:	46bd      	mov	sp, r7
 80184dc:	bd80      	pop	{r7, pc}
 80184de:	bf00      	nop
 80184e0:	02008000 	.word	0x02008000

080184e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80184e4:	b580      	push	{r7, lr}
 80184e6:	b088      	sub	sp, #32
 80184e8:	af02      	add	r7, sp, #8
 80184ea:	60f8      	str	r0, [r7, #12]
 80184ec:	4608      	mov	r0, r1
 80184ee:	4611      	mov	r1, r2
 80184f0:	461a      	mov	r2, r3
 80184f2:	4603      	mov	r3, r0
 80184f4:	817b      	strh	r3, [r7, #10]
 80184f6:	460b      	mov	r3, r1
 80184f8:	813b      	strh	r3, [r7, #8]
 80184fa:	4613      	mov	r3, r2
 80184fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018504:	b2db      	uxtb	r3, r3
 8018506:	2b20      	cmp	r3, #32
 8018508:	f040 80f9 	bne.w	80186fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 801850c:	6a3b      	ldr	r3, [r7, #32]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d002      	beq.n	8018518 <HAL_I2C_Mem_Write+0x34>
 8018512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018514:	2b00      	cmp	r3, #0
 8018516:	d105      	bne.n	8018524 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801851e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8018520:	2301      	movs	r3, #1
 8018522:	e0ed      	b.n	8018700 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801852a:	2b01      	cmp	r3, #1
 801852c:	d101      	bne.n	8018532 <HAL_I2C_Mem_Write+0x4e>
 801852e:	2302      	movs	r3, #2
 8018530:	e0e6      	b.n	8018700 <HAL_I2C_Mem_Write+0x21c>
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	2201      	movs	r2, #1
 8018536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801853a:	f7fd fa1b 	bl	8015974 <HAL_GetTick>
 801853e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018540:	697b      	ldr	r3, [r7, #20]
 8018542:	9300      	str	r3, [sp, #0]
 8018544:	2319      	movs	r3, #25
 8018546:	2201      	movs	r2, #1
 8018548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801854c:	68f8      	ldr	r0, [r7, #12]
 801854e:	f000 fac3 	bl	8018ad8 <I2C_WaitOnFlagUntilTimeout>
 8018552:	4603      	mov	r3, r0
 8018554:	2b00      	cmp	r3, #0
 8018556:	d001      	beq.n	801855c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8018558:	2301      	movs	r3, #1
 801855a:	e0d1      	b.n	8018700 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	2221      	movs	r2, #33	; 0x21
 8018560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	2240      	movs	r2, #64	; 0x40
 8018568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	2200      	movs	r2, #0
 8018570:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	6a3a      	ldr	r2, [r7, #32]
 8018576:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801857c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	2200      	movs	r2, #0
 8018582:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8018584:	88f8      	ldrh	r0, [r7, #6]
 8018586:	893a      	ldrh	r2, [r7, #8]
 8018588:	8979      	ldrh	r1, [r7, #10]
 801858a:	697b      	ldr	r3, [r7, #20]
 801858c:	9301      	str	r3, [sp, #4]
 801858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018590:	9300      	str	r3, [sp, #0]
 8018592:	4603      	mov	r3, r0
 8018594:	68f8      	ldr	r0, [r7, #12]
 8018596:	f000 f9d3 	bl	8018940 <I2C_RequestMemoryWrite>
 801859a:	4603      	mov	r3, r0
 801859c:	2b00      	cmp	r3, #0
 801859e:	d005      	beq.n	80185ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	2200      	movs	r2, #0
 80185a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80185a8:	2301      	movs	r3, #1
 80185aa:	e0a9      	b.n	8018700 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80185b0:	b29b      	uxth	r3, r3
 80185b2:	2bff      	cmp	r3, #255	; 0xff
 80185b4:	d90e      	bls.n	80185d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	22ff      	movs	r2, #255	; 0xff
 80185ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80185c0:	b2da      	uxtb	r2, r3
 80185c2:	8979      	ldrh	r1, [r7, #10]
 80185c4:	2300      	movs	r3, #0
 80185c6:	9300      	str	r3, [sp, #0]
 80185c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80185cc:	68f8      	ldr	r0, [r7, #12]
 80185ce:	f000 fc1f 	bl	8018e10 <I2C_TransferConfig>
 80185d2:	e00f      	b.n	80185f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80185d8:	b29a      	uxth	r2, r3
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80185e2:	b2da      	uxtb	r2, r3
 80185e4:	8979      	ldrh	r1, [r7, #10]
 80185e6:	2300      	movs	r3, #0
 80185e8:	9300      	str	r3, [sp, #0]
 80185ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80185ee:	68f8      	ldr	r0, [r7, #12]
 80185f0:	f000 fc0e 	bl	8018e10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80185f4:	697a      	ldr	r2, [r7, #20]
 80185f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80185f8:	68f8      	ldr	r0, [r7, #12]
 80185fa:	f000 faad 	bl	8018b58 <I2C_WaitOnTXISFlagUntilTimeout>
 80185fe:	4603      	mov	r3, r0
 8018600:	2b00      	cmp	r3, #0
 8018602:	d001      	beq.n	8018608 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8018604:	2301      	movs	r3, #1
 8018606:	e07b      	b.n	8018700 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801860c:	781a      	ldrb	r2, [r3, #0]
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018618:	1c5a      	adds	r2, r3, #1
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018622:	b29b      	uxth	r3, r3
 8018624:	3b01      	subs	r3, #1
 8018626:	b29a      	uxth	r2, r3
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018630:	3b01      	subs	r3, #1
 8018632:	b29a      	uxth	r2, r3
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801863c:	b29b      	uxth	r3, r3
 801863e:	2b00      	cmp	r3, #0
 8018640:	d034      	beq.n	80186ac <HAL_I2C_Mem_Write+0x1c8>
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018646:	2b00      	cmp	r3, #0
 8018648:	d130      	bne.n	80186ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	9300      	str	r3, [sp, #0]
 801864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018650:	2200      	movs	r2, #0
 8018652:	2180      	movs	r1, #128	; 0x80
 8018654:	68f8      	ldr	r0, [r7, #12]
 8018656:	f000 fa3f 	bl	8018ad8 <I2C_WaitOnFlagUntilTimeout>
 801865a:	4603      	mov	r3, r0
 801865c:	2b00      	cmp	r3, #0
 801865e:	d001      	beq.n	8018664 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8018660:	2301      	movs	r3, #1
 8018662:	e04d      	b.n	8018700 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018668:	b29b      	uxth	r3, r3
 801866a:	2bff      	cmp	r3, #255	; 0xff
 801866c:	d90e      	bls.n	801868c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	22ff      	movs	r2, #255	; 0xff
 8018672:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018678:	b2da      	uxtb	r2, r3
 801867a:	8979      	ldrh	r1, [r7, #10]
 801867c:	2300      	movs	r3, #0
 801867e:	9300      	str	r3, [sp, #0]
 8018680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018684:	68f8      	ldr	r0, [r7, #12]
 8018686:	f000 fbc3 	bl	8018e10 <I2C_TransferConfig>
 801868a:	e00f      	b.n	80186ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018690:	b29a      	uxth	r2, r3
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801869a:	b2da      	uxtb	r2, r3
 801869c:	8979      	ldrh	r1, [r7, #10]
 801869e:	2300      	movs	r3, #0
 80186a0:	9300      	str	r3, [sp, #0]
 80186a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80186a6:	68f8      	ldr	r0, [r7, #12]
 80186a8:	f000 fbb2 	bl	8018e10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186b0:	b29b      	uxth	r3, r3
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d19e      	bne.n	80185f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80186b6:	697a      	ldr	r2, [r7, #20]
 80186b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80186ba:	68f8      	ldr	r0, [r7, #12]
 80186bc:	f000 fa8c 	bl	8018bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80186c0:	4603      	mov	r3, r0
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d001      	beq.n	80186ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80186c6:	2301      	movs	r3, #1
 80186c8:	e01a      	b.n	8018700 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	2220      	movs	r2, #32
 80186d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	6859      	ldr	r1, [r3, #4]
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	681a      	ldr	r2, [r3, #0]
 80186dc:	4b0a      	ldr	r3, [pc, #40]	; (8018708 <HAL_I2C_Mem_Write+0x224>)
 80186de:	400b      	ands	r3, r1
 80186e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	2220      	movs	r2, #32
 80186e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	2200      	movs	r2, #0
 80186ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	2200      	movs	r2, #0
 80186f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80186fa:	2300      	movs	r3, #0
 80186fc:	e000      	b.n	8018700 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80186fe:	2302      	movs	r3, #2
  }
}
 8018700:	4618      	mov	r0, r3
 8018702:	3718      	adds	r7, #24
 8018704:	46bd      	mov	sp, r7
 8018706:	bd80      	pop	{r7, pc}
 8018708:	fe00e800 	.word	0xfe00e800

0801870c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b088      	sub	sp, #32
 8018710:	af02      	add	r7, sp, #8
 8018712:	60f8      	str	r0, [r7, #12]
 8018714:	4608      	mov	r0, r1
 8018716:	4611      	mov	r1, r2
 8018718:	461a      	mov	r2, r3
 801871a:	4603      	mov	r3, r0
 801871c:	817b      	strh	r3, [r7, #10]
 801871e:	460b      	mov	r3, r1
 8018720:	813b      	strh	r3, [r7, #8]
 8018722:	4613      	mov	r3, r2
 8018724:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801872c:	b2db      	uxtb	r3, r3
 801872e:	2b20      	cmp	r3, #32
 8018730:	f040 80fd 	bne.w	801892e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8018734:	6a3b      	ldr	r3, [r7, #32]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d002      	beq.n	8018740 <HAL_I2C_Mem_Read+0x34>
 801873a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801873c:	2b00      	cmp	r3, #0
 801873e:	d105      	bne.n	801874c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018746:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8018748:	2301      	movs	r3, #1
 801874a:	e0f1      	b.n	8018930 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018752:	2b01      	cmp	r3, #1
 8018754:	d101      	bne.n	801875a <HAL_I2C_Mem_Read+0x4e>
 8018756:	2302      	movs	r3, #2
 8018758:	e0ea      	b.n	8018930 <HAL_I2C_Mem_Read+0x224>
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	2201      	movs	r2, #1
 801875e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018762:	f7fd f907 	bl	8015974 <HAL_GetTick>
 8018766:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018768:	697b      	ldr	r3, [r7, #20]
 801876a:	9300      	str	r3, [sp, #0]
 801876c:	2319      	movs	r3, #25
 801876e:	2201      	movs	r2, #1
 8018770:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018774:	68f8      	ldr	r0, [r7, #12]
 8018776:	f000 f9af 	bl	8018ad8 <I2C_WaitOnFlagUntilTimeout>
 801877a:	4603      	mov	r3, r0
 801877c:	2b00      	cmp	r3, #0
 801877e:	d001      	beq.n	8018784 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8018780:	2301      	movs	r3, #1
 8018782:	e0d5      	b.n	8018930 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	2222      	movs	r2, #34	; 0x22
 8018788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	2240      	movs	r2, #64	; 0x40
 8018790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	2200      	movs	r2, #0
 8018798:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801879a:	68fb      	ldr	r3, [r7, #12]
 801879c:	6a3a      	ldr	r2, [r7, #32]
 801879e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80187a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	2200      	movs	r2, #0
 80187aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80187ac:	88f8      	ldrh	r0, [r7, #6]
 80187ae:	893a      	ldrh	r2, [r7, #8]
 80187b0:	8979      	ldrh	r1, [r7, #10]
 80187b2:	697b      	ldr	r3, [r7, #20]
 80187b4:	9301      	str	r3, [sp, #4]
 80187b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b8:	9300      	str	r3, [sp, #0]
 80187ba:	4603      	mov	r3, r0
 80187bc:	68f8      	ldr	r0, [r7, #12]
 80187be:	f000 f913 	bl	80189e8 <I2C_RequestMemoryRead>
 80187c2:	4603      	mov	r3, r0
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d005      	beq.n	80187d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	2200      	movs	r2, #0
 80187cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80187d0:	2301      	movs	r3, #1
 80187d2:	e0ad      	b.n	8018930 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187d8:	b29b      	uxth	r3, r3
 80187da:	2bff      	cmp	r3, #255	; 0xff
 80187dc:	d90e      	bls.n	80187fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	22ff      	movs	r2, #255	; 0xff
 80187e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80187e8:	b2da      	uxtb	r2, r3
 80187ea:	8979      	ldrh	r1, [r7, #10]
 80187ec:	4b52      	ldr	r3, [pc, #328]	; (8018938 <HAL_I2C_Mem_Read+0x22c>)
 80187ee:	9300      	str	r3, [sp, #0]
 80187f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80187f4:	68f8      	ldr	r0, [r7, #12]
 80187f6:	f000 fb0b 	bl	8018e10 <I2C_TransferConfig>
 80187fa:	e00f      	b.n	801881c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018800:	b29a      	uxth	r2, r3
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801880a:	b2da      	uxtb	r2, r3
 801880c:	8979      	ldrh	r1, [r7, #10]
 801880e:	4b4a      	ldr	r3, [pc, #296]	; (8018938 <HAL_I2C_Mem_Read+0x22c>)
 8018810:	9300      	str	r3, [sp, #0]
 8018812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018816:	68f8      	ldr	r0, [r7, #12]
 8018818:	f000 fafa 	bl	8018e10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801881c:	697b      	ldr	r3, [r7, #20]
 801881e:	9300      	str	r3, [sp, #0]
 8018820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018822:	2200      	movs	r2, #0
 8018824:	2104      	movs	r1, #4
 8018826:	68f8      	ldr	r0, [r7, #12]
 8018828:	f000 f956 	bl	8018ad8 <I2C_WaitOnFlagUntilTimeout>
 801882c:	4603      	mov	r3, r0
 801882e:	2b00      	cmp	r3, #0
 8018830:	d001      	beq.n	8018836 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8018832:	2301      	movs	r3, #1
 8018834:	e07c      	b.n	8018930 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018840:	b2d2      	uxtb	r2, r2
 8018842:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018848:	1c5a      	adds	r2, r3, #1
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018852:	3b01      	subs	r3, #1
 8018854:	b29a      	uxth	r2, r3
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801885e:	b29b      	uxth	r3, r3
 8018860:	3b01      	subs	r3, #1
 8018862:	b29a      	uxth	r2, r3
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801886c:	b29b      	uxth	r3, r3
 801886e:	2b00      	cmp	r3, #0
 8018870:	d034      	beq.n	80188dc <HAL_I2C_Mem_Read+0x1d0>
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018876:	2b00      	cmp	r3, #0
 8018878:	d130      	bne.n	80188dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801887a:	697b      	ldr	r3, [r7, #20]
 801887c:	9300      	str	r3, [sp, #0]
 801887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018880:	2200      	movs	r2, #0
 8018882:	2180      	movs	r1, #128	; 0x80
 8018884:	68f8      	ldr	r0, [r7, #12]
 8018886:	f000 f927 	bl	8018ad8 <I2C_WaitOnFlagUntilTimeout>
 801888a:	4603      	mov	r3, r0
 801888c:	2b00      	cmp	r3, #0
 801888e:	d001      	beq.n	8018894 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8018890:	2301      	movs	r3, #1
 8018892:	e04d      	b.n	8018930 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018898:	b29b      	uxth	r3, r3
 801889a:	2bff      	cmp	r3, #255	; 0xff
 801889c:	d90e      	bls.n	80188bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	22ff      	movs	r2, #255	; 0xff
 80188a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80188a8:	b2da      	uxtb	r2, r3
 80188aa:	8979      	ldrh	r1, [r7, #10]
 80188ac:	2300      	movs	r3, #0
 80188ae:	9300      	str	r3, [sp, #0]
 80188b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80188b4:	68f8      	ldr	r0, [r7, #12]
 80188b6:	f000 faab 	bl	8018e10 <I2C_TransferConfig>
 80188ba:	e00f      	b.n	80188dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80188c0:	b29a      	uxth	r2, r3
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80188ca:	b2da      	uxtb	r2, r3
 80188cc:	8979      	ldrh	r1, [r7, #10]
 80188ce:	2300      	movs	r3, #0
 80188d0:	9300      	str	r3, [sp, #0]
 80188d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80188d6:	68f8      	ldr	r0, [r7, #12]
 80188d8:	f000 fa9a 	bl	8018e10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80188e0:	b29b      	uxth	r3, r3
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d19a      	bne.n	801881c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80188e6:	697a      	ldr	r2, [r7, #20]
 80188e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80188ea:	68f8      	ldr	r0, [r7, #12]
 80188ec:	f000 f974 	bl	8018bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80188f0:	4603      	mov	r3, r0
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d001      	beq.n	80188fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80188f6:	2301      	movs	r3, #1
 80188f8:	e01a      	b.n	8018930 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80188fa:	68fb      	ldr	r3, [r7, #12]
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	2220      	movs	r2, #32
 8018900:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	6859      	ldr	r1, [r3, #4]
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	681a      	ldr	r2, [r3, #0]
 801890c:	4b0b      	ldr	r3, [pc, #44]	; (801893c <HAL_I2C_Mem_Read+0x230>)
 801890e:	400b      	ands	r3, r1
 8018910:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	2220      	movs	r2, #32
 8018916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	2200      	movs	r2, #0
 801891e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	2200      	movs	r2, #0
 8018926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801892a:	2300      	movs	r3, #0
 801892c:	e000      	b.n	8018930 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801892e:	2302      	movs	r3, #2
  }
}
 8018930:	4618      	mov	r0, r3
 8018932:	3718      	adds	r7, #24
 8018934:	46bd      	mov	sp, r7
 8018936:	bd80      	pop	{r7, pc}
 8018938:	80002400 	.word	0x80002400
 801893c:	fe00e800 	.word	0xfe00e800

08018940 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b086      	sub	sp, #24
 8018944:	af02      	add	r7, sp, #8
 8018946:	60f8      	str	r0, [r7, #12]
 8018948:	4608      	mov	r0, r1
 801894a:	4611      	mov	r1, r2
 801894c:	461a      	mov	r2, r3
 801894e:	4603      	mov	r3, r0
 8018950:	817b      	strh	r3, [r7, #10]
 8018952:	460b      	mov	r3, r1
 8018954:	813b      	strh	r3, [r7, #8]
 8018956:	4613      	mov	r3, r2
 8018958:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801895a:	88fb      	ldrh	r3, [r7, #6]
 801895c:	b2da      	uxtb	r2, r3
 801895e:	8979      	ldrh	r1, [r7, #10]
 8018960:	4b20      	ldr	r3, [pc, #128]	; (80189e4 <I2C_RequestMemoryWrite+0xa4>)
 8018962:	9300      	str	r3, [sp, #0]
 8018964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018968:	68f8      	ldr	r0, [r7, #12]
 801896a:	f000 fa51 	bl	8018e10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801896e:	69fa      	ldr	r2, [r7, #28]
 8018970:	69b9      	ldr	r1, [r7, #24]
 8018972:	68f8      	ldr	r0, [r7, #12]
 8018974:	f000 f8f0 	bl	8018b58 <I2C_WaitOnTXISFlagUntilTimeout>
 8018978:	4603      	mov	r3, r0
 801897a:	2b00      	cmp	r3, #0
 801897c:	d001      	beq.n	8018982 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801897e:	2301      	movs	r3, #1
 8018980:	e02c      	b.n	80189dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018982:	88fb      	ldrh	r3, [r7, #6]
 8018984:	2b01      	cmp	r3, #1
 8018986:	d105      	bne.n	8018994 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018988:	893b      	ldrh	r3, [r7, #8]
 801898a:	b2da      	uxtb	r2, r3
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	629a      	str	r2, [r3, #40]	; 0x28
 8018992:	e015      	b.n	80189c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8018994:	893b      	ldrh	r3, [r7, #8]
 8018996:	0a1b      	lsrs	r3, r3, #8
 8018998:	b29b      	uxth	r3, r3
 801899a:	b2da      	uxtb	r2, r3
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80189a2:	69fa      	ldr	r2, [r7, #28]
 80189a4:	69b9      	ldr	r1, [r7, #24]
 80189a6:	68f8      	ldr	r0, [r7, #12]
 80189a8:	f000 f8d6 	bl	8018b58 <I2C_WaitOnTXISFlagUntilTimeout>
 80189ac:	4603      	mov	r3, r0
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d001      	beq.n	80189b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80189b2:	2301      	movs	r3, #1
 80189b4:	e012      	b.n	80189dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80189b6:	893b      	ldrh	r3, [r7, #8]
 80189b8:	b2da      	uxtb	r2, r3
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80189c0:	69fb      	ldr	r3, [r7, #28]
 80189c2:	9300      	str	r3, [sp, #0]
 80189c4:	69bb      	ldr	r3, [r7, #24]
 80189c6:	2200      	movs	r2, #0
 80189c8:	2180      	movs	r1, #128	; 0x80
 80189ca:	68f8      	ldr	r0, [r7, #12]
 80189cc:	f000 f884 	bl	8018ad8 <I2C_WaitOnFlagUntilTimeout>
 80189d0:	4603      	mov	r3, r0
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d001      	beq.n	80189da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80189d6:	2301      	movs	r3, #1
 80189d8:	e000      	b.n	80189dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80189da:	2300      	movs	r3, #0
}
 80189dc:	4618      	mov	r0, r3
 80189de:	3710      	adds	r7, #16
 80189e0:	46bd      	mov	sp, r7
 80189e2:	bd80      	pop	{r7, pc}
 80189e4:	80002000 	.word	0x80002000

080189e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80189e8:	b580      	push	{r7, lr}
 80189ea:	b086      	sub	sp, #24
 80189ec:	af02      	add	r7, sp, #8
 80189ee:	60f8      	str	r0, [r7, #12]
 80189f0:	4608      	mov	r0, r1
 80189f2:	4611      	mov	r1, r2
 80189f4:	461a      	mov	r2, r3
 80189f6:	4603      	mov	r3, r0
 80189f8:	817b      	strh	r3, [r7, #10]
 80189fa:	460b      	mov	r3, r1
 80189fc:	813b      	strh	r3, [r7, #8]
 80189fe:	4613      	mov	r3, r2
 8018a00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8018a02:	88fb      	ldrh	r3, [r7, #6]
 8018a04:	b2da      	uxtb	r2, r3
 8018a06:	8979      	ldrh	r1, [r7, #10]
 8018a08:	4b20      	ldr	r3, [pc, #128]	; (8018a8c <I2C_RequestMemoryRead+0xa4>)
 8018a0a:	9300      	str	r3, [sp, #0]
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	68f8      	ldr	r0, [r7, #12]
 8018a10:	f000 f9fe 	bl	8018e10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018a14:	69fa      	ldr	r2, [r7, #28]
 8018a16:	69b9      	ldr	r1, [r7, #24]
 8018a18:	68f8      	ldr	r0, [r7, #12]
 8018a1a:	f000 f89d 	bl	8018b58 <I2C_WaitOnTXISFlagUntilTimeout>
 8018a1e:	4603      	mov	r3, r0
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d001      	beq.n	8018a28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8018a24:	2301      	movs	r3, #1
 8018a26:	e02c      	b.n	8018a82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018a28:	88fb      	ldrh	r3, [r7, #6]
 8018a2a:	2b01      	cmp	r3, #1
 8018a2c:	d105      	bne.n	8018a3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018a2e:	893b      	ldrh	r3, [r7, #8]
 8018a30:	b2da      	uxtb	r2, r3
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	629a      	str	r2, [r3, #40]	; 0x28
 8018a38:	e015      	b.n	8018a66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8018a3a:	893b      	ldrh	r3, [r7, #8]
 8018a3c:	0a1b      	lsrs	r3, r3, #8
 8018a3e:	b29b      	uxth	r3, r3
 8018a40:	b2da      	uxtb	r2, r3
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018a48:	69fa      	ldr	r2, [r7, #28]
 8018a4a:	69b9      	ldr	r1, [r7, #24]
 8018a4c:	68f8      	ldr	r0, [r7, #12]
 8018a4e:	f000 f883 	bl	8018b58 <I2C_WaitOnTXISFlagUntilTimeout>
 8018a52:	4603      	mov	r3, r0
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d001      	beq.n	8018a5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8018a58:	2301      	movs	r3, #1
 8018a5a:	e012      	b.n	8018a82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018a5c:	893b      	ldrh	r3, [r7, #8]
 8018a5e:	b2da      	uxtb	r2, r3
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8018a66:	69fb      	ldr	r3, [r7, #28]
 8018a68:	9300      	str	r3, [sp, #0]
 8018a6a:	69bb      	ldr	r3, [r7, #24]
 8018a6c:	2200      	movs	r2, #0
 8018a6e:	2140      	movs	r1, #64	; 0x40
 8018a70:	68f8      	ldr	r0, [r7, #12]
 8018a72:	f000 f831 	bl	8018ad8 <I2C_WaitOnFlagUntilTimeout>
 8018a76:	4603      	mov	r3, r0
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d001      	beq.n	8018a80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8018a7c:	2301      	movs	r3, #1
 8018a7e:	e000      	b.n	8018a82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8018a80:	2300      	movs	r3, #0
}
 8018a82:	4618      	mov	r0, r3
 8018a84:	3710      	adds	r7, #16
 8018a86:	46bd      	mov	sp, r7
 8018a88:	bd80      	pop	{r7, pc}
 8018a8a:	bf00      	nop
 8018a8c:	80002000 	.word	0x80002000

08018a90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8018a90:	b480      	push	{r7}
 8018a92:	b083      	sub	sp, #12
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	699b      	ldr	r3, [r3, #24]
 8018a9e:	f003 0302 	and.w	r3, r3, #2
 8018aa2:	2b02      	cmp	r3, #2
 8018aa4:	d103      	bne.n	8018aae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	2200      	movs	r2, #0
 8018aac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	699b      	ldr	r3, [r3, #24]
 8018ab4:	f003 0301 	and.w	r3, r3, #1
 8018ab8:	2b01      	cmp	r3, #1
 8018aba:	d007      	beq.n	8018acc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	699a      	ldr	r2, [r3, #24]
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	f042 0201 	orr.w	r2, r2, #1
 8018aca:	619a      	str	r2, [r3, #24]
  }
}
 8018acc:	bf00      	nop
 8018ace:	370c      	adds	r7, #12
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad6:	4770      	bx	lr

08018ad8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b084      	sub	sp, #16
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	60f8      	str	r0, [r7, #12]
 8018ae0:	60b9      	str	r1, [r7, #8]
 8018ae2:	603b      	str	r3, [r7, #0]
 8018ae4:	4613      	mov	r3, r2
 8018ae6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018ae8:	e022      	b.n	8018b30 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018aea:	683b      	ldr	r3, [r7, #0]
 8018aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018af0:	d01e      	beq.n	8018b30 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018af2:	f7fc ff3f 	bl	8015974 <HAL_GetTick>
 8018af6:	4602      	mov	r2, r0
 8018af8:	69bb      	ldr	r3, [r7, #24]
 8018afa:	1ad3      	subs	r3, r2, r3
 8018afc:	683a      	ldr	r2, [r7, #0]
 8018afe:	429a      	cmp	r2, r3
 8018b00:	d302      	bcc.n	8018b08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8018b02:	683b      	ldr	r3, [r7, #0]
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d113      	bne.n	8018b30 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b0c:	f043 0220 	orr.w	r2, r3, #32
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	2220      	movs	r2, #32
 8018b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	2200      	movs	r2, #0
 8018b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	2200      	movs	r2, #0
 8018b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8018b2c:	2301      	movs	r3, #1
 8018b2e:	e00f      	b.n	8018b50 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	699a      	ldr	r2, [r3, #24]
 8018b36:	68bb      	ldr	r3, [r7, #8]
 8018b38:	4013      	ands	r3, r2
 8018b3a:	68ba      	ldr	r2, [r7, #8]
 8018b3c:	429a      	cmp	r2, r3
 8018b3e:	bf0c      	ite	eq
 8018b40:	2301      	moveq	r3, #1
 8018b42:	2300      	movne	r3, #0
 8018b44:	b2db      	uxtb	r3, r3
 8018b46:	461a      	mov	r2, r3
 8018b48:	79fb      	ldrb	r3, [r7, #7]
 8018b4a:	429a      	cmp	r2, r3
 8018b4c:	d0cd      	beq.n	8018aea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8018b4e:	2300      	movs	r3, #0
}
 8018b50:	4618      	mov	r0, r3
 8018b52:	3710      	adds	r7, #16
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd80      	pop	{r7, pc}

08018b58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b084      	sub	sp, #16
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	60f8      	str	r0, [r7, #12]
 8018b60:	60b9      	str	r1, [r7, #8]
 8018b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018b64:	e02c      	b.n	8018bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018b66:	687a      	ldr	r2, [r7, #4]
 8018b68:	68b9      	ldr	r1, [r7, #8]
 8018b6a:	68f8      	ldr	r0, [r7, #12]
 8018b6c:	f000 f870 	bl	8018c50 <I2C_IsErrorOccurred>
 8018b70:	4603      	mov	r3, r0
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d001      	beq.n	8018b7a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018b76:	2301      	movs	r3, #1
 8018b78:	e02a      	b.n	8018bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018b7a:	68bb      	ldr	r3, [r7, #8]
 8018b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b80:	d01e      	beq.n	8018bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018b82:	f7fc fef7 	bl	8015974 <HAL_GetTick>
 8018b86:	4602      	mov	r2, r0
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	1ad3      	subs	r3, r2, r3
 8018b8c:	68ba      	ldr	r2, [r7, #8]
 8018b8e:	429a      	cmp	r2, r3
 8018b90:	d302      	bcc.n	8018b98 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8018b92:	68bb      	ldr	r3, [r7, #8]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d113      	bne.n	8018bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b9c:	f043 0220 	orr.w	r2, r3, #32
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	2220      	movs	r2, #32
 8018ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	2200      	movs	r2, #0
 8018bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8018bbc:	2301      	movs	r3, #1
 8018bbe:	e007      	b.n	8018bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	699b      	ldr	r3, [r3, #24]
 8018bc6:	f003 0302 	and.w	r3, r3, #2
 8018bca:	2b02      	cmp	r3, #2
 8018bcc:	d1cb      	bne.n	8018b66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018bce:	2300      	movs	r3, #0
}
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	3710      	adds	r7, #16
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	bd80      	pop	{r7, pc}

08018bd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b084      	sub	sp, #16
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	60f8      	str	r0, [r7, #12]
 8018be0:	60b9      	str	r1, [r7, #8]
 8018be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018be4:	e028      	b.n	8018c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018be6:	687a      	ldr	r2, [r7, #4]
 8018be8:	68b9      	ldr	r1, [r7, #8]
 8018bea:	68f8      	ldr	r0, [r7, #12]
 8018bec:	f000 f830 	bl	8018c50 <I2C_IsErrorOccurred>
 8018bf0:	4603      	mov	r3, r0
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d001      	beq.n	8018bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018bf6:	2301      	movs	r3, #1
 8018bf8:	e026      	b.n	8018c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018bfa:	f7fc febb 	bl	8015974 <HAL_GetTick>
 8018bfe:	4602      	mov	r2, r0
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	1ad3      	subs	r3, r2, r3
 8018c04:	68ba      	ldr	r2, [r7, #8]
 8018c06:	429a      	cmp	r2, r3
 8018c08:	d302      	bcc.n	8018c10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8018c0a:	68bb      	ldr	r3, [r7, #8]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d113      	bne.n	8018c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c14:	f043 0220 	orr.w	r2, r3, #32
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	2220      	movs	r2, #32
 8018c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	2200      	movs	r2, #0
 8018c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	2200      	movs	r2, #0
 8018c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8018c34:	2301      	movs	r3, #1
 8018c36:	e007      	b.n	8018c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	699b      	ldr	r3, [r3, #24]
 8018c3e:	f003 0320 	and.w	r3, r3, #32
 8018c42:	2b20      	cmp	r3, #32
 8018c44:	d1cf      	bne.n	8018be6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8018c46:	2300      	movs	r3, #0
}
 8018c48:	4618      	mov	r0, r3
 8018c4a:	3710      	adds	r7, #16
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	bd80      	pop	{r7, pc}

08018c50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b08a      	sub	sp, #40	; 0x28
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	60f8      	str	r0, [r7, #12]
 8018c58:	60b9      	str	r1, [r7, #8]
 8018c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	699b      	ldr	r3, [r3, #24]
 8018c68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8018c72:	69bb      	ldr	r3, [r7, #24]
 8018c74:	f003 0310 	and.w	r3, r3, #16
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d068      	beq.n	8018d4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	2210      	movs	r2, #16
 8018c82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018c84:	e049      	b.n	8018d1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8018c86:	68bb      	ldr	r3, [r7, #8]
 8018c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c8c:	d045      	beq.n	8018d1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8018c8e:	f7fc fe71 	bl	8015974 <HAL_GetTick>
 8018c92:	4602      	mov	r2, r0
 8018c94:	69fb      	ldr	r3, [r7, #28]
 8018c96:	1ad3      	subs	r3, r2, r3
 8018c98:	68ba      	ldr	r2, [r7, #8]
 8018c9a:	429a      	cmp	r2, r3
 8018c9c:	d302      	bcc.n	8018ca4 <I2C_IsErrorOccurred+0x54>
 8018c9e:	68bb      	ldr	r3, [r7, #8]
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d13a      	bne.n	8018d1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	685b      	ldr	r3, [r3, #4]
 8018caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018cae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018cb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8018cb8:	68fb      	ldr	r3, [r7, #12]
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	699b      	ldr	r3, [r3, #24]
 8018cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018cc6:	d121      	bne.n	8018d0c <I2C_IsErrorOccurred+0xbc>
 8018cc8:	697b      	ldr	r3, [r7, #20]
 8018cca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018cce:	d01d      	beq.n	8018d0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8018cd0:	7cfb      	ldrb	r3, [r7, #19]
 8018cd2:	2b20      	cmp	r3, #32
 8018cd4:	d01a      	beq.n	8018d0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	685a      	ldr	r2, [r3, #4]
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8018ce4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8018ce6:	f7fc fe45 	bl	8015974 <HAL_GetTick>
 8018cea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018cec:	e00e      	b.n	8018d0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8018cee:	f7fc fe41 	bl	8015974 <HAL_GetTick>
 8018cf2:	4602      	mov	r2, r0
 8018cf4:	69fb      	ldr	r3, [r7, #28]
 8018cf6:	1ad3      	subs	r3, r2, r3
 8018cf8:	2b19      	cmp	r3, #25
 8018cfa:	d907      	bls.n	8018d0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8018cfc:	6a3b      	ldr	r3, [r7, #32]
 8018cfe:	f043 0320 	orr.w	r3, r3, #32
 8018d02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8018d04:	2301      	movs	r3, #1
 8018d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8018d0a:	e006      	b.n	8018d1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	699b      	ldr	r3, [r3, #24]
 8018d12:	f003 0320 	and.w	r3, r3, #32
 8018d16:	2b20      	cmp	r3, #32
 8018d18:	d1e9      	bne.n	8018cee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	699b      	ldr	r3, [r3, #24]
 8018d20:	f003 0320 	and.w	r3, r3, #32
 8018d24:	2b20      	cmp	r3, #32
 8018d26:	d003      	beq.n	8018d30 <I2C_IsErrorOccurred+0xe0>
 8018d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d0aa      	beq.n	8018c86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8018d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d103      	bne.n	8018d40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	2220      	movs	r2, #32
 8018d3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8018d40:	6a3b      	ldr	r3, [r7, #32]
 8018d42:	f043 0304 	orr.w	r3, r3, #4
 8018d46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8018d48:	2301      	movs	r3, #1
 8018d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8018d4e:	68fb      	ldr	r3, [r7, #12]
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	699b      	ldr	r3, [r3, #24]
 8018d54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8018d56:	69bb      	ldr	r3, [r7, #24]
 8018d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d00b      	beq.n	8018d78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8018d60:	6a3b      	ldr	r3, [r7, #32]
 8018d62:	f043 0301 	orr.w	r3, r3, #1
 8018d66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018d70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018d72:	2301      	movs	r3, #1
 8018d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8018d78:	69bb      	ldr	r3, [r7, #24]
 8018d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d00b      	beq.n	8018d9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8018d82:	6a3b      	ldr	r3, [r7, #32]
 8018d84:	f043 0308 	orr.w	r3, r3, #8
 8018d88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018d8a:	68fb      	ldr	r3, [r7, #12]
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018d92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018d94:	2301      	movs	r3, #1
 8018d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8018d9a:	69bb      	ldr	r3, [r7, #24]
 8018d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d00b      	beq.n	8018dbc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018da4:	6a3b      	ldr	r3, [r7, #32]
 8018da6:	f043 0302 	orr.w	r3, r3, #2
 8018daa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018db4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018db6:	2301      	movs	r3, #1
 8018db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8018dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d01c      	beq.n	8018dfe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018dc4:	68f8      	ldr	r0, [r7, #12]
 8018dc6:	f7ff fe63 	bl	8018a90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	6859      	ldr	r1, [r3, #4]
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	681a      	ldr	r2, [r3, #0]
 8018dd4:	4b0d      	ldr	r3, [pc, #52]	; (8018e0c <I2C_IsErrorOccurred+0x1bc>)
 8018dd6:	400b      	ands	r3, r1
 8018dd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018dde:	6a3b      	ldr	r3, [r7, #32]
 8018de0:	431a      	orrs	r2, r3
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	2220      	movs	r2, #32
 8018dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	2200      	movs	r2, #0
 8018df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	2200      	movs	r2, #0
 8018dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8018dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8018e02:	4618      	mov	r0, r3
 8018e04:	3728      	adds	r7, #40	; 0x28
 8018e06:	46bd      	mov	sp, r7
 8018e08:	bd80      	pop	{r7, pc}
 8018e0a:	bf00      	nop
 8018e0c:	fe00e800 	.word	0xfe00e800

08018e10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018e10:	b480      	push	{r7}
 8018e12:	b087      	sub	sp, #28
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	60f8      	str	r0, [r7, #12]
 8018e18:	607b      	str	r3, [r7, #4]
 8018e1a:	460b      	mov	r3, r1
 8018e1c:	817b      	strh	r3, [r7, #10]
 8018e1e:	4613      	mov	r3, r2
 8018e20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018e22:	897b      	ldrh	r3, [r7, #10]
 8018e24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018e28:	7a7b      	ldrb	r3, [r7, #9]
 8018e2a:	041b      	lsls	r3, r3, #16
 8018e2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018e30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018e36:	6a3b      	ldr	r3, [r7, #32]
 8018e38:	4313      	orrs	r3, r2
 8018e3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018e3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	685a      	ldr	r2, [r3, #4]
 8018e46:	6a3b      	ldr	r3, [r7, #32]
 8018e48:	0d5b      	lsrs	r3, r3, #21
 8018e4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8018e4e:	4b08      	ldr	r3, [pc, #32]	; (8018e70 <I2C_TransferConfig+0x60>)
 8018e50:	430b      	orrs	r3, r1
 8018e52:	43db      	mvns	r3, r3
 8018e54:	ea02 0103 	and.w	r1, r2, r3
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	697a      	ldr	r2, [r7, #20]
 8018e5e:	430a      	orrs	r2, r1
 8018e60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018e62:	bf00      	nop
 8018e64:	371c      	adds	r7, #28
 8018e66:	46bd      	mov	sp, r7
 8018e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e6c:	4770      	bx	lr
 8018e6e:	bf00      	nop
 8018e70:	03ff63ff 	.word	0x03ff63ff

08018e74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018e74:	b480      	push	{r7}
 8018e76:	b083      	sub	sp, #12
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	6078      	str	r0, [r7, #4]
 8018e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018e84:	b2db      	uxtb	r3, r3
 8018e86:	2b20      	cmp	r3, #32
 8018e88:	d138      	bne.n	8018efc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018e90:	2b01      	cmp	r3, #1
 8018e92:	d101      	bne.n	8018e98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8018e94:	2302      	movs	r3, #2
 8018e96:	e032      	b.n	8018efe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	2201      	movs	r2, #1
 8018e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	2224      	movs	r2, #36	; 0x24
 8018ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	681a      	ldr	r2, [r3, #0]
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	f022 0201 	bic.w	r2, r2, #1
 8018eb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	681a      	ldr	r2, [r3, #0]
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8018ec6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	6819      	ldr	r1, [r3, #0]
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	683a      	ldr	r2, [r7, #0]
 8018ed4:	430a      	orrs	r2, r1
 8018ed6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	681a      	ldr	r2, [r3, #0]
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	f042 0201 	orr.w	r2, r2, #1
 8018ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	2220      	movs	r2, #32
 8018eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	2200      	movs	r2, #0
 8018ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018ef8:	2300      	movs	r3, #0
 8018efa:	e000      	b.n	8018efe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018efc:	2302      	movs	r3, #2
  }
}
 8018efe:	4618      	mov	r0, r3
 8018f00:	370c      	adds	r7, #12
 8018f02:	46bd      	mov	sp, r7
 8018f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f08:	4770      	bx	lr

08018f0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018f0a:	b480      	push	{r7}
 8018f0c:	b085      	sub	sp, #20
 8018f0e:	af00      	add	r7, sp, #0
 8018f10:	6078      	str	r0, [r7, #4]
 8018f12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018f1a:	b2db      	uxtb	r3, r3
 8018f1c:	2b20      	cmp	r3, #32
 8018f1e:	d139      	bne.n	8018f94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018f26:	2b01      	cmp	r3, #1
 8018f28:	d101      	bne.n	8018f2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8018f2a:	2302      	movs	r3, #2
 8018f2c:	e033      	b.n	8018f96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	2201      	movs	r2, #1
 8018f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	2224      	movs	r2, #36	; 0x24
 8018f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	681a      	ldr	r2, [r3, #0]
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	f022 0201 	bic.w	r2, r2, #1
 8018f4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8018f5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	021b      	lsls	r3, r3, #8
 8018f62:	68fa      	ldr	r2, [r7, #12]
 8018f64:	4313      	orrs	r3, r2
 8018f66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	68fa      	ldr	r2, [r7, #12]
 8018f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	681a      	ldr	r2, [r3, #0]
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	f042 0201 	orr.w	r2, r2, #1
 8018f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	2220      	movs	r2, #32
 8018f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018f90:	2300      	movs	r3, #0
 8018f92:	e000      	b.n	8018f96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018f94:	2302      	movs	r3, #2
  }
}
 8018f96:	4618      	mov	r0, r3
 8018f98:	3714      	adds	r7, #20
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fa0:	4770      	bx	lr

08018fa2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8018fa2:	b580      	push	{r7, lr}
 8018fa4:	b084      	sub	sp, #16
 8018fa6:	af00      	add	r7, sp, #0
 8018fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d101      	bne.n	8018fb4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8018fb0:	2301      	movs	r3, #1
 8018fb2:	e041      	b.n	8019038 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8018fbc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	f245 5255 	movw	r2, #21845	; 0x5555
 8018fc6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	687a      	ldr	r2, [r7, #4]
 8018fce:	6852      	ldr	r2, [r2, #4]
 8018fd0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	687a      	ldr	r2, [r7, #4]
 8018fd8:	6892      	ldr	r2, [r2, #8]
 8018fda:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8018fdc:	f7fc fcca 	bl	8015974 <HAL_GetTick>
 8018fe0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8018fe2:	e00f      	b.n	8019004 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8018fe4:	f7fc fcc6 	bl	8015974 <HAL_GetTick>
 8018fe8:	4602      	mov	r2, r0
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	1ad3      	subs	r3, r2, r3
 8018fee:	2b31      	cmp	r3, #49	; 0x31
 8018ff0:	d908      	bls.n	8019004 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	68db      	ldr	r3, [r3, #12]
 8018ff8:	f003 0307 	and.w	r3, r3, #7
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d001      	beq.n	8019004 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8019000:	2303      	movs	r3, #3
 8019002:	e019      	b.n	8019038 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	68db      	ldr	r3, [r3, #12]
 801900a:	f003 0307 	and.w	r3, r3, #7
 801900e:	2b00      	cmp	r3, #0
 8019010:	d1e8      	bne.n	8018fe4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	691a      	ldr	r2, [r3, #16]
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	68db      	ldr	r3, [r3, #12]
 801901c:	429a      	cmp	r2, r3
 801901e:	d005      	beq.n	801902c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	687a      	ldr	r2, [r7, #4]
 8019026:	68d2      	ldr	r2, [r2, #12]
 8019028:	611a      	str	r2, [r3, #16]
 801902a:	e004      	b.n	8019036 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8019034:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8019036:	2300      	movs	r3, #0
}
 8019038:	4618      	mov	r0, r3
 801903a:	3710      	adds	r7, #16
 801903c:	46bd      	mov	sp, r7
 801903e:	bd80      	pop	{r7, pc}

08019040 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8019040:	b480      	push	{r7}
 8019042:	b083      	sub	sp, #12
 8019044:	af00      	add	r7, sp, #0
 8019046:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8019050:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8019052:	2300      	movs	r3, #0
}
 8019054:	4618      	mov	r0, r3
 8019056:	370c      	adds	r7, #12
 8019058:	46bd      	mov	sp, r7
 801905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801905e:	4770      	bx	lr

08019060 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019060:	b580      	push	{r7, lr}
 8019062:	b086      	sub	sp, #24
 8019064:	af00      	add	r7, sp, #0
 8019066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8019068:	2300      	movs	r3, #0
 801906a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d101      	bne.n	8019076 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8019072:	2301      	movs	r3, #1
 8019074:	e29b      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	f003 0301 	and.w	r3, r3, #1
 801907e:	2b00      	cmp	r3, #0
 8019080:	f000 8087 	beq.w	8019192 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8019084:	4b96      	ldr	r3, [pc, #600]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 8019086:	689b      	ldr	r3, [r3, #8]
 8019088:	f003 030c 	and.w	r3, r3, #12
 801908c:	2b04      	cmp	r3, #4
 801908e:	d00c      	beq.n	80190aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019090:	4b93      	ldr	r3, [pc, #588]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 8019092:	689b      	ldr	r3, [r3, #8]
 8019094:	f003 030c 	and.w	r3, r3, #12
 8019098:	2b08      	cmp	r3, #8
 801909a:	d112      	bne.n	80190c2 <HAL_RCC_OscConfig+0x62>
 801909c:	4b90      	ldr	r3, [pc, #576]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 801909e:	685b      	ldr	r3, [r3, #4]
 80190a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80190a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80190a8:	d10b      	bne.n	80190c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80190aa:	4b8d      	ldr	r3, [pc, #564]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d06c      	beq.n	8019190 <HAL_RCC_OscConfig+0x130>
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	685b      	ldr	r3, [r3, #4]
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d168      	bne.n	8019190 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80190be:	2301      	movs	r3, #1
 80190c0:	e275      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	685b      	ldr	r3, [r3, #4]
 80190c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80190ca:	d106      	bne.n	80190da <HAL_RCC_OscConfig+0x7a>
 80190cc:	4b84      	ldr	r3, [pc, #528]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	4a83      	ldr	r2, [pc, #524]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80190d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80190d6:	6013      	str	r3, [r2, #0]
 80190d8:	e02e      	b.n	8019138 <HAL_RCC_OscConfig+0xd8>
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	685b      	ldr	r3, [r3, #4]
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d10c      	bne.n	80190fc <HAL_RCC_OscConfig+0x9c>
 80190e2:	4b7f      	ldr	r3, [pc, #508]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80190e4:	681b      	ldr	r3, [r3, #0]
 80190e6:	4a7e      	ldr	r2, [pc, #504]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80190e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80190ec:	6013      	str	r3, [r2, #0]
 80190ee:	4b7c      	ldr	r3, [pc, #496]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	4a7b      	ldr	r2, [pc, #492]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80190f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80190f8:	6013      	str	r3, [r2, #0]
 80190fa:	e01d      	b.n	8019138 <HAL_RCC_OscConfig+0xd8>
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	685b      	ldr	r3, [r3, #4]
 8019100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8019104:	d10c      	bne.n	8019120 <HAL_RCC_OscConfig+0xc0>
 8019106:	4b76      	ldr	r3, [pc, #472]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	4a75      	ldr	r2, [pc, #468]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 801910c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8019110:	6013      	str	r3, [r2, #0]
 8019112:	4b73      	ldr	r3, [pc, #460]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	4a72      	ldr	r2, [pc, #456]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 8019118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801911c:	6013      	str	r3, [r2, #0]
 801911e:	e00b      	b.n	8019138 <HAL_RCC_OscConfig+0xd8>
 8019120:	4b6f      	ldr	r3, [pc, #444]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	4a6e      	ldr	r2, [pc, #440]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 8019126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801912a:	6013      	str	r3, [r2, #0]
 801912c:	4b6c      	ldr	r3, [pc, #432]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	4a6b      	ldr	r2, [pc, #428]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 8019132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8019136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	685b      	ldr	r3, [r3, #4]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d013      	beq.n	8019168 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019140:	f7fc fc18 	bl	8015974 <HAL_GetTick>
 8019144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019146:	e008      	b.n	801915a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8019148:	f7fc fc14 	bl	8015974 <HAL_GetTick>
 801914c:	4602      	mov	r2, r0
 801914e:	693b      	ldr	r3, [r7, #16]
 8019150:	1ad3      	subs	r3, r2, r3
 8019152:	2b64      	cmp	r3, #100	; 0x64
 8019154:	d901      	bls.n	801915a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8019156:	2303      	movs	r3, #3
 8019158:	e229      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801915a:	4b61      	ldr	r3, [pc, #388]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019162:	2b00      	cmp	r3, #0
 8019164:	d0f0      	beq.n	8019148 <HAL_RCC_OscConfig+0xe8>
 8019166:	e014      	b.n	8019192 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019168:	f7fc fc04 	bl	8015974 <HAL_GetTick>
 801916c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801916e:	e008      	b.n	8019182 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8019170:	f7fc fc00 	bl	8015974 <HAL_GetTick>
 8019174:	4602      	mov	r2, r0
 8019176:	693b      	ldr	r3, [r7, #16]
 8019178:	1ad3      	subs	r3, r2, r3
 801917a:	2b64      	cmp	r3, #100	; 0x64
 801917c:	d901      	bls.n	8019182 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801917e:	2303      	movs	r3, #3
 8019180:	e215      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019182:	4b57      	ldr	r3, [pc, #348]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801918a:	2b00      	cmp	r3, #0
 801918c:	d1f0      	bne.n	8019170 <HAL_RCC_OscConfig+0x110>
 801918e:	e000      	b.n	8019192 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	f003 0302 	and.w	r3, r3, #2
 801919a:	2b00      	cmp	r3, #0
 801919c:	d069      	beq.n	8019272 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801919e:	4b50      	ldr	r3, [pc, #320]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80191a0:	689b      	ldr	r3, [r3, #8]
 80191a2:	f003 030c 	and.w	r3, r3, #12
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d00b      	beq.n	80191c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80191aa:	4b4d      	ldr	r3, [pc, #308]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80191ac:	689b      	ldr	r3, [r3, #8]
 80191ae:	f003 030c 	and.w	r3, r3, #12
 80191b2:	2b08      	cmp	r3, #8
 80191b4:	d11c      	bne.n	80191f0 <HAL_RCC_OscConfig+0x190>
 80191b6:	4b4a      	ldr	r3, [pc, #296]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80191b8:	685b      	ldr	r3, [r3, #4]
 80191ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d116      	bne.n	80191f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80191c2:	4b47      	ldr	r3, [pc, #284]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	f003 0302 	and.w	r3, r3, #2
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d005      	beq.n	80191da <HAL_RCC_OscConfig+0x17a>
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	68db      	ldr	r3, [r3, #12]
 80191d2:	2b01      	cmp	r3, #1
 80191d4:	d001      	beq.n	80191da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80191d6:	2301      	movs	r3, #1
 80191d8:	e1e9      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80191da:	4b41      	ldr	r3, [pc, #260]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	691b      	ldr	r3, [r3, #16]
 80191e6:	00db      	lsls	r3, r3, #3
 80191e8:	493d      	ldr	r1, [pc, #244]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80191ea:	4313      	orrs	r3, r2
 80191ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80191ee:	e040      	b.n	8019272 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	68db      	ldr	r3, [r3, #12]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d023      	beq.n	8019240 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80191f8:	4b39      	ldr	r3, [pc, #228]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	4a38      	ldr	r2, [pc, #224]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80191fe:	f043 0301 	orr.w	r3, r3, #1
 8019202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019204:	f7fc fbb6 	bl	8015974 <HAL_GetTick>
 8019208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801920a:	e008      	b.n	801921e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801920c:	f7fc fbb2 	bl	8015974 <HAL_GetTick>
 8019210:	4602      	mov	r2, r0
 8019212:	693b      	ldr	r3, [r7, #16]
 8019214:	1ad3      	subs	r3, r2, r3
 8019216:	2b02      	cmp	r3, #2
 8019218:	d901      	bls.n	801921e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 801921a:	2303      	movs	r3, #3
 801921c:	e1c7      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801921e:	4b30      	ldr	r3, [pc, #192]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	f003 0302 	and.w	r3, r3, #2
 8019226:	2b00      	cmp	r3, #0
 8019228:	d0f0      	beq.n	801920c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801922a:	4b2d      	ldr	r3, [pc, #180]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	691b      	ldr	r3, [r3, #16]
 8019236:	00db      	lsls	r3, r3, #3
 8019238:	4929      	ldr	r1, [pc, #164]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 801923a:	4313      	orrs	r3, r2
 801923c:	600b      	str	r3, [r1, #0]
 801923e:	e018      	b.n	8019272 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8019240:	4b27      	ldr	r3, [pc, #156]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	4a26      	ldr	r2, [pc, #152]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 8019246:	f023 0301 	bic.w	r3, r3, #1
 801924a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801924c:	f7fc fb92 	bl	8015974 <HAL_GetTick>
 8019250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019252:	e008      	b.n	8019266 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8019254:	f7fc fb8e 	bl	8015974 <HAL_GetTick>
 8019258:	4602      	mov	r2, r0
 801925a:	693b      	ldr	r3, [r7, #16]
 801925c:	1ad3      	subs	r3, r2, r3
 801925e:	2b02      	cmp	r3, #2
 8019260:	d901      	bls.n	8019266 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8019262:	2303      	movs	r3, #3
 8019264:	e1a3      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019266:	4b1e      	ldr	r3, [pc, #120]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	f003 0302 	and.w	r3, r3, #2
 801926e:	2b00      	cmp	r3, #0
 8019270:	d1f0      	bne.n	8019254 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	f003 0308 	and.w	r3, r3, #8
 801927a:	2b00      	cmp	r3, #0
 801927c:	d038      	beq.n	80192f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	695b      	ldr	r3, [r3, #20]
 8019282:	2b00      	cmp	r3, #0
 8019284:	d019      	beq.n	80192ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8019286:	4b16      	ldr	r3, [pc, #88]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 8019288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801928a:	4a15      	ldr	r2, [pc, #84]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 801928c:	f043 0301 	orr.w	r3, r3, #1
 8019290:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019292:	f7fc fb6f 	bl	8015974 <HAL_GetTick>
 8019296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8019298:	e008      	b.n	80192ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801929a:	f7fc fb6b 	bl	8015974 <HAL_GetTick>
 801929e:	4602      	mov	r2, r0
 80192a0:	693b      	ldr	r3, [r7, #16]
 80192a2:	1ad3      	subs	r3, r2, r3
 80192a4:	2b02      	cmp	r3, #2
 80192a6:	d901      	bls.n	80192ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80192a8:	2303      	movs	r3, #3
 80192aa:	e180      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80192ac:	4b0c      	ldr	r3, [pc, #48]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80192ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80192b0:	f003 0302 	and.w	r3, r3, #2
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d0f0      	beq.n	801929a <HAL_RCC_OscConfig+0x23a>
 80192b8:	e01a      	b.n	80192f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80192ba:	4b09      	ldr	r3, [pc, #36]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80192bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80192be:	4a08      	ldr	r2, [pc, #32]	; (80192e0 <HAL_RCC_OscConfig+0x280>)
 80192c0:	f023 0301 	bic.w	r3, r3, #1
 80192c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80192c6:	f7fc fb55 	bl	8015974 <HAL_GetTick>
 80192ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80192cc:	e00a      	b.n	80192e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80192ce:	f7fc fb51 	bl	8015974 <HAL_GetTick>
 80192d2:	4602      	mov	r2, r0
 80192d4:	693b      	ldr	r3, [r7, #16]
 80192d6:	1ad3      	subs	r3, r2, r3
 80192d8:	2b02      	cmp	r3, #2
 80192da:	d903      	bls.n	80192e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80192dc:	2303      	movs	r3, #3
 80192de:	e166      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
 80192e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80192e4:	4b92      	ldr	r3, [pc, #584]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80192e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80192e8:	f003 0302 	and.w	r3, r3, #2
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d1ee      	bne.n	80192ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	f003 0304 	and.w	r3, r3, #4
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	f000 80a4 	beq.w	8019446 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80192fe:	4b8c      	ldr	r3, [pc, #560]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 8019300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019306:	2b00      	cmp	r3, #0
 8019308:	d10d      	bne.n	8019326 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801930a:	4b89      	ldr	r3, [pc, #548]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 801930c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801930e:	4a88      	ldr	r2, [pc, #544]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 8019310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019314:	6413      	str	r3, [r2, #64]	; 0x40
 8019316:	4b86      	ldr	r3, [pc, #536]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 8019318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801931a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801931e:	60bb      	str	r3, [r7, #8]
 8019320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8019322:	2301      	movs	r3, #1
 8019324:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8019326:	4b83      	ldr	r3, [pc, #524]	; (8019534 <HAL_RCC_OscConfig+0x4d4>)
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801932e:	2b00      	cmp	r3, #0
 8019330:	d118      	bne.n	8019364 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8019332:	4b80      	ldr	r3, [pc, #512]	; (8019534 <HAL_RCC_OscConfig+0x4d4>)
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	4a7f      	ldr	r2, [pc, #508]	; (8019534 <HAL_RCC_OscConfig+0x4d4>)
 8019338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801933c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801933e:	f7fc fb19 	bl	8015974 <HAL_GetTick>
 8019342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8019344:	e008      	b.n	8019358 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019346:	f7fc fb15 	bl	8015974 <HAL_GetTick>
 801934a:	4602      	mov	r2, r0
 801934c:	693b      	ldr	r3, [r7, #16]
 801934e:	1ad3      	subs	r3, r2, r3
 8019350:	2b64      	cmp	r3, #100	; 0x64
 8019352:	d901      	bls.n	8019358 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8019354:	2303      	movs	r3, #3
 8019356:	e12a      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8019358:	4b76      	ldr	r3, [pc, #472]	; (8019534 <HAL_RCC_OscConfig+0x4d4>)
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019360:	2b00      	cmp	r3, #0
 8019362:	d0f0      	beq.n	8019346 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	689b      	ldr	r3, [r3, #8]
 8019368:	2b01      	cmp	r3, #1
 801936a:	d106      	bne.n	801937a <HAL_RCC_OscConfig+0x31a>
 801936c:	4b70      	ldr	r3, [pc, #448]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 801936e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019370:	4a6f      	ldr	r2, [pc, #444]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 8019372:	f043 0301 	orr.w	r3, r3, #1
 8019376:	6713      	str	r3, [r2, #112]	; 0x70
 8019378:	e02d      	b.n	80193d6 <HAL_RCC_OscConfig+0x376>
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	689b      	ldr	r3, [r3, #8]
 801937e:	2b00      	cmp	r3, #0
 8019380:	d10c      	bne.n	801939c <HAL_RCC_OscConfig+0x33c>
 8019382:	4b6b      	ldr	r3, [pc, #428]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 8019384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019386:	4a6a      	ldr	r2, [pc, #424]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 8019388:	f023 0301 	bic.w	r3, r3, #1
 801938c:	6713      	str	r3, [r2, #112]	; 0x70
 801938e:	4b68      	ldr	r3, [pc, #416]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 8019390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019392:	4a67      	ldr	r2, [pc, #412]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 8019394:	f023 0304 	bic.w	r3, r3, #4
 8019398:	6713      	str	r3, [r2, #112]	; 0x70
 801939a:	e01c      	b.n	80193d6 <HAL_RCC_OscConfig+0x376>
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	689b      	ldr	r3, [r3, #8]
 80193a0:	2b05      	cmp	r3, #5
 80193a2:	d10c      	bne.n	80193be <HAL_RCC_OscConfig+0x35e>
 80193a4:	4b62      	ldr	r3, [pc, #392]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80193a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193a8:	4a61      	ldr	r2, [pc, #388]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80193aa:	f043 0304 	orr.w	r3, r3, #4
 80193ae:	6713      	str	r3, [r2, #112]	; 0x70
 80193b0:	4b5f      	ldr	r3, [pc, #380]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80193b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193b4:	4a5e      	ldr	r2, [pc, #376]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80193b6:	f043 0301 	orr.w	r3, r3, #1
 80193ba:	6713      	str	r3, [r2, #112]	; 0x70
 80193bc:	e00b      	b.n	80193d6 <HAL_RCC_OscConfig+0x376>
 80193be:	4b5c      	ldr	r3, [pc, #368]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80193c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193c2:	4a5b      	ldr	r2, [pc, #364]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80193c4:	f023 0301 	bic.w	r3, r3, #1
 80193c8:	6713      	str	r3, [r2, #112]	; 0x70
 80193ca:	4b59      	ldr	r3, [pc, #356]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80193cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193ce:	4a58      	ldr	r2, [pc, #352]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80193d0:	f023 0304 	bic.w	r3, r3, #4
 80193d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	689b      	ldr	r3, [r3, #8]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d015      	beq.n	801940a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80193de:	f7fc fac9 	bl	8015974 <HAL_GetTick>
 80193e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80193e4:	e00a      	b.n	80193fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80193e6:	f7fc fac5 	bl	8015974 <HAL_GetTick>
 80193ea:	4602      	mov	r2, r0
 80193ec:	693b      	ldr	r3, [r7, #16]
 80193ee:	1ad3      	subs	r3, r2, r3
 80193f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80193f4:	4293      	cmp	r3, r2
 80193f6:	d901      	bls.n	80193fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80193f8:	2303      	movs	r3, #3
 80193fa:	e0d8      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80193fc:	4b4c      	ldr	r3, [pc, #304]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80193fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019400:	f003 0302 	and.w	r3, r3, #2
 8019404:	2b00      	cmp	r3, #0
 8019406:	d0ee      	beq.n	80193e6 <HAL_RCC_OscConfig+0x386>
 8019408:	e014      	b.n	8019434 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801940a:	f7fc fab3 	bl	8015974 <HAL_GetTick>
 801940e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019410:	e00a      	b.n	8019428 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8019412:	f7fc faaf 	bl	8015974 <HAL_GetTick>
 8019416:	4602      	mov	r2, r0
 8019418:	693b      	ldr	r3, [r7, #16]
 801941a:	1ad3      	subs	r3, r2, r3
 801941c:	f241 3288 	movw	r2, #5000	; 0x1388
 8019420:	4293      	cmp	r3, r2
 8019422:	d901      	bls.n	8019428 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8019424:	2303      	movs	r3, #3
 8019426:	e0c2      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019428:	4b41      	ldr	r3, [pc, #260]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 801942a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801942c:	f003 0302 	and.w	r3, r3, #2
 8019430:	2b00      	cmp	r3, #0
 8019432:	d1ee      	bne.n	8019412 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8019434:	7dfb      	ldrb	r3, [r7, #23]
 8019436:	2b01      	cmp	r3, #1
 8019438:	d105      	bne.n	8019446 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801943a:	4b3d      	ldr	r3, [pc, #244]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 801943c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801943e:	4a3c      	ldr	r2, [pc, #240]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 8019440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019444:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	699b      	ldr	r3, [r3, #24]
 801944a:	2b00      	cmp	r3, #0
 801944c:	f000 80ae 	beq.w	80195ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8019450:	4b37      	ldr	r3, [pc, #220]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 8019452:	689b      	ldr	r3, [r3, #8]
 8019454:	f003 030c 	and.w	r3, r3, #12
 8019458:	2b08      	cmp	r3, #8
 801945a:	d06d      	beq.n	8019538 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	699b      	ldr	r3, [r3, #24]
 8019460:	2b02      	cmp	r3, #2
 8019462:	d14b      	bne.n	80194fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019464:	4b32      	ldr	r3, [pc, #200]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	4a31      	ldr	r2, [pc, #196]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 801946a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801946e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019470:	f7fc fa80 	bl	8015974 <HAL_GetTick>
 8019474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019476:	e008      	b.n	801948a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8019478:	f7fc fa7c 	bl	8015974 <HAL_GetTick>
 801947c:	4602      	mov	r2, r0
 801947e:	693b      	ldr	r3, [r7, #16]
 8019480:	1ad3      	subs	r3, r2, r3
 8019482:	2b02      	cmp	r3, #2
 8019484:	d901      	bls.n	801948a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8019486:	2303      	movs	r3, #3
 8019488:	e091      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801948a:	4b29      	ldr	r3, [pc, #164]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019492:	2b00      	cmp	r3, #0
 8019494:	d1f0      	bne.n	8019478 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	69da      	ldr	r2, [r3, #28]
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	6a1b      	ldr	r3, [r3, #32]
 801949e:	431a      	orrs	r2, r3
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194a4:	019b      	lsls	r3, r3, #6
 80194a6:	431a      	orrs	r2, r3
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194ac:	085b      	lsrs	r3, r3, #1
 80194ae:	3b01      	subs	r3, #1
 80194b0:	041b      	lsls	r3, r3, #16
 80194b2:	431a      	orrs	r2, r3
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194b8:	061b      	lsls	r3, r3, #24
 80194ba:	431a      	orrs	r2, r3
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194c0:	071b      	lsls	r3, r3, #28
 80194c2:	491b      	ldr	r1, [pc, #108]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80194c4:	4313      	orrs	r3, r2
 80194c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80194c8:	4b19      	ldr	r3, [pc, #100]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	4a18      	ldr	r2, [pc, #96]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80194ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80194d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80194d4:	f7fc fa4e 	bl	8015974 <HAL_GetTick>
 80194d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80194da:	e008      	b.n	80194ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80194dc:	f7fc fa4a 	bl	8015974 <HAL_GetTick>
 80194e0:	4602      	mov	r2, r0
 80194e2:	693b      	ldr	r3, [r7, #16]
 80194e4:	1ad3      	subs	r3, r2, r3
 80194e6:	2b02      	cmp	r3, #2
 80194e8:	d901      	bls.n	80194ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80194ea:	2303      	movs	r3, #3
 80194ec:	e05f      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80194ee:	4b10      	ldr	r3, [pc, #64]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d0f0      	beq.n	80194dc <HAL_RCC_OscConfig+0x47c>
 80194fa:	e057      	b.n	80195ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80194fc:	4b0c      	ldr	r3, [pc, #48]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	4a0b      	ldr	r2, [pc, #44]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 8019502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8019506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019508:	f7fc fa34 	bl	8015974 <HAL_GetTick>
 801950c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801950e:	e008      	b.n	8019522 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8019510:	f7fc fa30 	bl	8015974 <HAL_GetTick>
 8019514:	4602      	mov	r2, r0
 8019516:	693b      	ldr	r3, [r7, #16]
 8019518:	1ad3      	subs	r3, r2, r3
 801951a:	2b02      	cmp	r3, #2
 801951c:	d901      	bls.n	8019522 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 801951e:	2303      	movs	r3, #3
 8019520:	e045      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019522:	4b03      	ldr	r3, [pc, #12]	; (8019530 <HAL_RCC_OscConfig+0x4d0>)
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801952a:	2b00      	cmp	r3, #0
 801952c:	d1f0      	bne.n	8019510 <HAL_RCC_OscConfig+0x4b0>
 801952e:	e03d      	b.n	80195ac <HAL_RCC_OscConfig+0x54c>
 8019530:	40023800 	.word	0x40023800
 8019534:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8019538:	4b1f      	ldr	r3, [pc, #124]	; (80195b8 <HAL_RCC_OscConfig+0x558>)
 801953a:	685b      	ldr	r3, [r3, #4]
 801953c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	699b      	ldr	r3, [r3, #24]
 8019542:	2b01      	cmp	r3, #1
 8019544:	d030      	beq.n	80195a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8019550:	429a      	cmp	r2, r3
 8019552:	d129      	bne.n	80195a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801955e:	429a      	cmp	r2, r3
 8019560:	d122      	bne.n	80195a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8019562:	68fa      	ldr	r2, [r7, #12]
 8019564:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8019568:	4013      	ands	r3, r2
 801956a:	687a      	ldr	r2, [r7, #4]
 801956c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801956e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8019570:	4293      	cmp	r3, r2
 8019572:	d119      	bne.n	80195a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801957e:	085b      	lsrs	r3, r3, #1
 8019580:	3b01      	subs	r3, #1
 8019582:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8019584:	429a      	cmp	r2, r3
 8019586:	d10f      	bne.n	80195a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019592:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8019594:	429a      	cmp	r2, r3
 8019596:	d107      	bne.n	80195a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80195a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80195a4:	429a      	cmp	r2, r3
 80195a6:	d001      	beq.n	80195ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80195a8:	2301      	movs	r3, #1
 80195aa:	e000      	b.n	80195ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80195ac:	2300      	movs	r3, #0
}
 80195ae:	4618      	mov	r0, r3
 80195b0:	3718      	adds	r7, #24
 80195b2:	46bd      	mov	sp, r7
 80195b4:	bd80      	pop	{r7, pc}
 80195b6:	bf00      	nop
 80195b8:	40023800 	.word	0x40023800

080195bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80195bc:	b580      	push	{r7, lr}
 80195be:	b084      	sub	sp, #16
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	6078      	str	r0, [r7, #4]
 80195c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80195c6:	2300      	movs	r3, #0
 80195c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d101      	bne.n	80195d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80195d0:	2301      	movs	r3, #1
 80195d2:	e0d0      	b.n	8019776 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80195d4:	4b6a      	ldr	r3, [pc, #424]	; (8019780 <HAL_RCC_ClockConfig+0x1c4>)
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	f003 030f 	and.w	r3, r3, #15
 80195dc:	683a      	ldr	r2, [r7, #0]
 80195de:	429a      	cmp	r2, r3
 80195e0:	d910      	bls.n	8019604 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80195e2:	4b67      	ldr	r3, [pc, #412]	; (8019780 <HAL_RCC_ClockConfig+0x1c4>)
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	f023 020f 	bic.w	r2, r3, #15
 80195ea:	4965      	ldr	r1, [pc, #404]	; (8019780 <HAL_RCC_ClockConfig+0x1c4>)
 80195ec:	683b      	ldr	r3, [r7, #0]
 80195ee:	4313      	orrs	r3, r2
 80195f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80195f2:	4b63      	ldr	r3, [pc, #396]	; (8019780 <HAL_RCC_ClockConfig+0x1c4>)
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	f003 030f 	and.w	r3, r3, #15
 80195fa:	683a      	ldr	r2, [r7, #0]
 80195fc:	429a      	cmp	r2, r3
 80195fe:	d001      	beq.n	8019604 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8019600:	2301      	movs	r3, #1
 8019602:	e0b8      	b.n	8019776 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	f003 0302 	and.w	r3, r3, #2
 801960c:	2b00      	cmp	r3, #0
 801960e:	d020      	beq.n	8019652 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	f003 0304 	and.w	r3, r3, #4
 8019618:	2b00      	cmp	r3, #0
 801961a:	d005      	beq.n	8019628 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801961c:	4b59      	ldr	r3, [pc, #356]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 801961e:	689b      	ldr	r3, [r3, #8]
 8019620:	4a58      	ldr	r2, [pc, #352]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 8019622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8019626:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	f003 0308 	and.w	r3, r3, #8
 8019630:	2b00      	cmp	r3, #0
 8019632:	d005      	beq.n	8019640 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8019634:	4b53      	ldr	r3, [pc, #332]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 8019636:	689b      	ldr	r3, [r3, #8]
 8019638:	4a52      	ldr	r2, [pc, #328]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 801963a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801963e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8019640:	4b50      	ldr	r3, [pc, #320]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 8019642:	689b      	ldr	r3, [r3, #8]
 8019644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	689b      	ldr	r3, [r3, #8]
 801964c:	494d      	ldr	r1, [pc, #308]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 801964e:	4313      	orrs	r3, r2
 8019650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	f003 0301 	and.w	r3, r3, #1
 801965a:	2b00      	cmp	r3, #0
 801965c:	d040      	beq.n	80196e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	685b      	ldr	r3, [r3, #4]
 8019662:	2b01      	cmp	r3, #1
 8019664:	d107      	bne.n	8019676 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019666:	4b47      	ldr	r3, [pc, #284]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801966e:	2b00      	cmp	r3, #0
 8019670:	d115      	bne.n	801969e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8019672:	2301      	movs	r3, #1
 8019674:	e07f      	b.n	8019776 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	685b      	ldr	r3, [r3, #4]
 801967a:	2b02      	cmp	r3, #2
 801967c:	d107      	bne.n	801968e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801967e:	4b41      	ldr	r3, [pc, #260]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019686:	2b00      	cmp	r3, #0
 8019688:	d109      	bne.n	801969e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801968a:	2301      	movs	r3, #1
 801968c:	e073      	b.n	8019776 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801968e:	4b3d      	ldr	r3, [pc, #244]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	f003 0302 	and.w	r3, r3, #2
 8019696:	2b00      	cmp	r3, #0
 8019698:	d101      	bne.n	801969e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801969a:	2301      	movs	r3, #1
 801969c:	e06b      	b.n	8019776 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801969e:	4b39      	ldr	r3, [pc, #228]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 80196a0:	689b      	ldr	r3, [r3, #8]
 80196a2:	f023 0203 	bic.w	r2, r3, #3
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	685b      	ldr	r3, [r3, #4]
 80196aa:	4936      	ldr	r1, [pc, #216]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 80196ac:	4313      	orrs	r3, r2
 80196ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80196b0:	f7fc f960 	bl	8015974 <HAL_GetTick>
 80196b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80196b6:	e00a      	b.n	80196ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80196b8:	f7fc f95c 	bl	8015974 <HAL_GetTick>
 80196bc:	4602      	mov	r2, r0
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	1ad3      	subs	r3, r2, r3
 80196c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80196c6:	4293      	cmp	r3, r2
 80196c8:	d901      	bls.n	80196ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80196ca:	2303      	movs	r3, #3
 80196cc:	e053      	b.n	8019776 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80196ce:	4b2d      	ldr	r3, [pc, #180]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 80196d0:	689b      	ldr	r3, [r3, #8]
 80196d2:	f003 020c 	and.w	r2, r3, #12
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	685b      	ldr	r3, [r3, #4]
 80196da:	009b      	lsls	r3, r3, #2
 80196dc:	429a      	cmp	r2, r3
 80196de:	d1eb      	bne.n	80196b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80196e0:	4b27      	ldr	r3, [pc, #156]	; (8019780 <HAL_RCC_ClockConfig+0x1c4>)
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	f003 030f 	and.w	r3, r3, #15
 80196e8:	683a      	ldr	r2, [r7, #0]
 80196ea:	429a      	cmp	r2, r3
 80196ec:	d210      	bcs.n	8019710 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80196ee:	4b24      	ldr	r3, [pc, #144]	; (8019780 <HAL_RCC_ClockConfig+0x1c4>)
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	f023 020f 	bic.w	r2, r3, #15
 80196f6:	4922      	ldr	r1, [pc, #136]	; (8019780 <HAL_RCC_ClockConfig+0x1c4>)
 80196f8:	683b      	ldr	r3, [r7, #0]
 80196fa:	4313      	orrs	r3, r2
 80196fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80196fe:	4b20      	ldr	r3, [pc, #128]	; (8019780 <HAL_RCC_ClockConfig+0x1c4>)
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	f003 030f 	and.w	r3, r3, #15
 8019706:	683a      	ldr	r2, [r7, #0]
 8019708:	429a      	cmp	r2, r3
 801970a:	d001      	beq.n	8019710 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 801970c:	2301      	movs	r3, #1
 801970e:	e032      	b.n	8019776 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	f003 0304 	and.w	r3, r3, #4
 8019718:	2b00      	cmp	r3, #0
 801971a:	d008      	beq.n	801972e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801971c:	4b19      	ldr	r3, [pc, #100]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 801971e:	689b      	ldr	r3, [r3, #8]
 8019720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	68db      	ldr	r3, [r3, #12]
 8019728:	4916      	ldr	r1, [pc, #88]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 801972a:	4313      	orrs	r3, r2
 801972c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	f003 0308 	and.w	r3, r3, #8
 8019736:	2b00      	cmp	r3, #0
 8019738:	d009      	beq.n	801974e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801973a:	4b12      	ldr	r3, [pc, #72]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 801973c:	689b      	ldr	r3, [r3, #8]
 801973e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	691b      	ldr	r3, [r3, #16]
 8019746:	00db      	lsls	r3, r3, #3
 8019748:	490e      	ldr	r1, [pc, #56]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 801974a:	4313      	orrs	r3, r2
 801974c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801974e:	f000 f821 	bl	8019794 <HAL_RCC_GetSysClockFreq>
 8019752:	4602      	mov	r2, r0
 8019754:	4b0b      	ldr	r3, [pc, #44]	; (8019784 <HAL_RCC_ClockConfig+0x1c8>)
 8019756:	689b      	ldr	r3, [r3, #8]
 8019758:	091b      	lsrs	r3, r3, #4
 801975a:	f003 030f 	and.w	r3, r3, #15
 801975e:	490a      	ldr	r1, [pc, #40]	; (8019788 <HAL_RCC_ClockConfig+0x1cc>)
 8019760:	5ccb      	ldrb	r3, [r1, r3]
 8019762:	fa22 f303 	lsr.w	r3, r2, r3
 8019766:	4a09      	ldr	r2, [pc, #36]	; (801978c <HAL_RCC_ClockConfig+0x1d0>)
 8019768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801976a:	4b09      	ldr	r3, [pc, #36]	; (8019790 <HAL_RCC_ClockConfig+0x1d4>)
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	4618      	mov	r0, r3
 8019770:	f7fc f8bc 	bl	80158ec <HAL_InitTick>

  return HAL_OK;
 8019774:	2300      	movs	r3, #0
}
 8019776:	4618      	mov	r0, r3
 8019778:	3710      	adds	r7, #16
 801977a:	46bd      	mov	sp, r7
 801977c:	bd80      	pop	{r7, pc}
 801977e:	bf00      	nop
 8019780:	40023c00 	.word	0x40023c00
 8019784:	40023800 	.word	0x40023800
 8019788:	08029270 	.word	0x08029270
 801978c:	2000011c 	.word	0x2000011c
 8019790:	20000120 	.word	0x20000120

08019794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8019794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019798:	b090      	sub	sp, #64	; 0x40
 801979a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 801979c:	2300      	movs	r3, #0
 801979e:	637b      	str	r3, [r7, #52]	; 0x34
 80197a0:	2300      	movs	r3, #0
 80197a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80197a4:	2300      	movs	r3, #0
 80197a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80197a8:	2300      	movs	r3, #0
 80197aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80197ac:	4b59      	ldr	r3, [pc, #356]	; (8019914 <HAL_RCC_GetSysClockFreq+0x180>)
 80197ae:	689b      	ldr	r3, [r3, #8]
 80197b0:	f003 030c 	and.w	r3, r3, #12
 80197b4:	2b08      	cmp	r3, #8
 80197b6:	d00d      	beq.n	80197d4 <HAL_RCC_GetSysClockFreq+0x40>
 80197b8:	2b08      	cmp	r3, #8
 80197ba:	f200 80a1 	bhi.w	8019900 <HAL_RCC_GetSysClockFreq+0x16c>
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d002      	beq.n	80197c8 <HAL_RCC_GetSysClockFreq+0x34>
 80197c2:	2b04      	cmp	r3, #4
 80197c4:	d003      	beq.n	80197ce <HAL_RCC_GetSysClockFreq+0x3a>
 80197c6:	e09b      	b.n	8019900 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80197c8:	4b53      	ldr	r3, [pc, #332]	; (8019918 <HAL_RCC_GetSysClockFreq+0x184>)
 80197ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80197cc:	e09b      	b.n	8019906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80197ce:	4b53      	ldr	r3, [pc, #332]	; (801991c <HAL_RCC_GetSysClockFreq+0x188>)
 80197d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80197d2:	e098      	b.n	8019906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80197d4:	4b4f      	ldr	r3, [pc, #316]	; (8019914 <HAL_RCC_GetSysClockFreq+0x180>)
 80197d6:	685b      	ldr	r3, [r3, #4]
 80197d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80197dc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80197de:	4b4d      	ldr	r3, [pc, #308]	; (8019914 <HAL_RCC_GetSysClockFreq+0x180>)
 80197e0:	685b      	ldr	r3, [r3, #4]
 80197e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d028      	beq.n	801983c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80197ea:	4b4a      	ldr	r3, [pc, #296]	; (8019914 <HAL_RCC_GetSysClockFreq+0x180>)
 80197ec:	685b      	ldr	r3, [r3, #4]
 80197ee:	099b      	lsrs	r3, r3, #6
 80197f0:	2200      	movs	r2, #0
 80197f2:	623b      	str	r3, [r7, #32]
 80197f4:	627a      	str	r2, [r7, #36]	; 0x24
 80197f6:	6a3b      	ldr	r3, [r7, #32]
 80197f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80197fc:	2100      	movs	r1, #0
 80197fe:	4b47      	ldr	r3, [pc, #284]	; (801991c <HAL_RCC_GetSysClockFreq+0x188>)
 8019800:	fb03 f201 	mul.w	r2, r3, r1
 8019804:	2300      	movs	r3, #0
 8019806:	fb00 f303 	mul.w	r3, r0, r3
 801980a:	4413      	add	r3, r2
 801980c:	4a43      	ldr	r2, [pc, #268]	; (801991c <HAL_RCC_GetSysClockFreq+0x188>)
 801980e:	fba0 1202 	umull	r1, r2, r0, r2
 8019812:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019814:	460a      	mov	r2, r1
 8019816:	62ba      	str	r2, [r7, #40]	; 0x28
 8019818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801981a:	4413      	add	r3, r2
 801981c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801981e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019820:	2200      	movs	r2, #0
 8019822:	61bb      	str	r3, [r7, #24]
 8019824:	61fa      	str	r2, [r7, #28]
 8019826:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801982a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801982e:	f7e6 fd6f 	bl	8000310 <__aeabi_uldivmod>
 8019832:	4602      	mov	r2, r0
 8019834:	460b      	mov	r3, r1
 8019836:	4613      	mov	r3, r2
 8019838:	63fb      	str	r3, [r7, #60]	; 0x3c
 801983a:	e053      	b.n	80198e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801983c:	4b35      	ldr	r3, [pc, #212]	; (8019914 <HAL_RCC_GetSysClockFreq+0x180>)
 801983e:	685b      	ldr	r3, [r3, #4]
 8019840:	099b      	lsrs	r3, r3, #6
 8019842:	2200      	movs	r2, #0
 8019844:	613b      	str	r3, [r7, #16]
 8019846:	617a      	str	r2, [r7, #20]
 8019848:	693b      	ldr	r3, [r7, #16]
 801984a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801984e:	f04f 0b00 	mov.w	fp, #0
 8019852:	4652      	mov	r2, sl
 8019854:	465b      	mov	r3, fp
 8019856:	f04f 0000 	mov.w	r0, #0
 801985a:	f04f 0100 	mov.w	r1, #0
 801985e:	0159      	lsls	r1, r3, #5
 8019860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8019864:	0150      	lsls	r0, r2, #5
 8019866:	4602      	mov	r2, r0
 8019868:	460b      	mov	r3, r1
 801986a:	ebb2 080a 	subs.w	r8, r2, sl
 801986e:	eb63 090b 	sbc.w	r9, r3, fp
 8019872:	f04f 0200 	mov.w	r2, #0
 8019876:	f04f 0300 	mov.w	r3, #0
 801987a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801987e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8019882:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8019886:	ebb2 0408 	subs.w	r4, r2, r8
 801988a:	eb63 0509 	sbc.w	r5, r3, r9
 801988e:	f04f 0200 	mov.w	r2, #0
 8019892:	f04f 0300 	mov.w	r3, #0
 8019896:	00eb      	lsls	r3, r5, #3
 8019898:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801989c:	00e2      	lsls	r2, r4, #3
 801989e:	4614      	mov	r4, r2
 80198a0:	461d      	mov	r5, r3
 80198a2:	eb14 030a 	adds.w	r3, r4, sl
 80198a6:	603b      	str	r3, [r7, #0]
 80198a8:	eb45 030b 	adc.w	r3, r5, fp
 80198ac:	607b      	str	r3, [r7, #4]
 80198ae:	f04f 0200 	mov.w	r2, #0
 80198b2:	f04f 0300 	mov.w	r3, #0
 80198b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80198ba:	4629      	mov	r1, r5
 80198bc:	028b      	lsls	r3, r1, #10
 80198be:	4621      	mov	r1, r4
 80198c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80198c4:	4621      	mov	r1, r4
 80198c6:	028a      	lsls	r2, r1, #10
 80198c8:	4610      	mov	r0, r2
 80198ca:	4619      	mov	r1, r3
 80198cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198ce:	2200      	movs	r2, #0
 80198d0:	60bb      	str	r3, [r7, #8]
 80198d2:	60fa      	str	r2, [r7, #12]
 80198d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80198d8:	f7e6 fd1a 	bl	8000310 <__aeabi_uldivmod>
 80198dc:	4602      	mov	r2, r0
 80198de:	460b      	mov	r3, r1
 80198e0:	4613      	mov	r3, r2
 80198e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80198e4:	4b0b      	ldr	r3, [pc, #44]	; (8019914 <HAL_RCC_GetSysClockFreq+0x180>)
 80198e6:	685b      	ldr	r3, [r3, #4]
 80198e8:	0c1b      	lsrs	r3, r3, #16
 80198ea:	f003 0303 	and.w	r3, r3, #3
 80198ee:	3301      	adds	r3, #1
 80198f0:	005b      	lsls	r3, r3, #1
 80198f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80198f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80198f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80198fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80198fe:	e002      	b.n	8019906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8019900:	4b05      	ldr	r3, [pc, #20]	; (8019918 <HAL_RCC_GetSysClockFreq+0x184>)
 8019902:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8019904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8019906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8019908:	4618      	mov	r0, r3
 801990a:	3740      	adds	r7, #64	; 0x40
 801990c:	46bd      	mov	sp, r7
 801990e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019912:	bf00      	nop
 8019914:	40023800 	.word	0x40023800
 8019918:	00f42400 	.word	0x00f42400
 801991c:	00b71b00 	.word	0x00b71b00

08019920 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8019920:	b480      	push	{r7}
 8019922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8019924:	4b03      	ldr	r3, [pc, #12]	; (8019934 <HAL_RCC_GetHCLKFreq+0x14>)
 8019926:	681b      	ldr	r3, [r3, #0]
}
 8019928:	4618      	mov	r0, r3
 801992a:	46bd      	mov	sp, r7
 801992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019930:	4770      	bx	lr
 8019932:	bf00      	nop
 8019934:	2000011c 	.word	0x2000011c

08019938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8019938:	b580      	push	{r7, lr}
 801993a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801993c:	f7ff fff0 	bl	8019920 <HAL_RCC_GetHCLKFreq>
 8019940:	4602      	mov	r2, r0
 8019942:	4b05      	ldr	r3, [pc, #20]	; (8019958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8019944:	689b      	ldr	r3, [r3, #8]
 8019946:	0a9b      	lsrs	r3, r3, #10
 8019948:	f003 0307 	and.w	r3, r3, #7
 801994c:	4903      	ldr	r1, [pc, #12]	; (801995c <HAL_RCC_GetPCLK1Freq+0x24>)
 801994e:	5ccb      	ldrb	r3, [r1, r3]
 8019950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019954:	4618      	mov	r0, r3
 8019956:	bd80      	pop	{r7, pc}
 8019958:	40023800 	.word	0x40023800
 801995c:	08029280 	.word	0x08029280

08019960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019960:	b580      	push	{r7, lr}
 8019962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8019964:	f7ff ffdc 	bl	8019920 <HAL_RCC_GetHCLKFreq>
 8019968:	4602      	mov	r2, r0
 801996a:	4b05      	ldr	r3, [pc, #20]	; (8019980 <HAL_RCC_GetPCLK2Freq+0x20>)
 801996c:	689b      	ldr	r3, [r3, #8]
 801996e:	0b5b      	lsrs	r3, r3, #13
 8019970:	f003 0307 	and.w	r3, r3, #7
 8019974:	4903      	ldr	r1, [pc, #12]	; (8019984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8019976:	5ccb      	ldrb	r3, [r1, r3]
 8019978:	fa22 f303 	lsr.w	r3, r2, r3
}
 801997c:	4618      	mov	r0, r3
 801997e:	bd80      	pop	{r7, pc}
 8019980:	40023800 	.word	0x40023800
 8019984:	08029280 	.word	0x08029280

08019988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8019988:	b580      	push	{r7, lr}
 801998a:	b088      	sub	sp, #32
 801998c:	af00      	add	r7, sp, #0
 801998e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8019990:	2300      	movs	r3, #0
 8019992:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8019994:	2300      	movs	r3, #0
 8019996:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8019998:	2300      	movs	r3, #0
 801999a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801999c:	2300      	movs	r3, #0
 801999e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80199a0:	2300      	movs	r3, #0
 80199a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	f003 0301 	and.w	r3, r3, #1
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d012      	beq.n	80199d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80199b0:	4b69      	ldr	r3, [pc, #420]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80199b2:	689b      	ldr	r3, [r3, #8]
 80199b4:	4a68      	ldr	r2, [pc, #416]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80199b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80199ba:	6093      	str	r3, [r2, #8]
 80199bc:	4b66      	ldr	r3, [pc, #408]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80199be:	689a      	ldr	r2, [r3, #8]
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80199c4:	4964      	ldr	r1, [pc, #400]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80199c6:	4313      	orrs	r3, r2
 80199c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d101      	bne.n	80199d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80199d2:	2301      	movs	r3, #1
 80199d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d017      	beq.n	8019a12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80199e2:	4b5d      	ldr	r3, [pc, #372]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80199e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80199e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199f0:	4959      	ldr	r1, [pc, #356]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80199f2:	4313      	orrs	r3, r2
 80199f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019a00:	d101      	bne.n	8019a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8019a02:	2301      	movs	r3, #1
 8019a04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d101      	bne.n	8019a12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8019a0e:	2301      	movs	r3, #1
 8019a10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d017      	beq.n	8019a4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8019a1e:	4b4e      	ldr	r3, [pc, #312]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019a24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a2c:	494a      	ldr	r1, [pc, #296]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019a2e:	4313      	orrs	r3, r2
 8019a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019a3c:	d101      	bne.n	8019a42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8019a3e:	2301      	movs	r3, #1
 8019a40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d101      	bne.n	8019a4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8019a4a:	2301      	movs	r3, #1
 8019a4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d001      	beq.n	8019a5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8019a5a:	2301      	movs	r3, #1
 8019a5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	f003 0320 	and.w	r3, r3, #32
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	f000 808b 	beq.w	8019b82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8019a6c:	4b3a      	ldr	r3, [pc, #232]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a70:	4a39      	ldr	r2, [pc, #228]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019a76:	6413      	str	r3, [r2, #64]	; 0x40
 8019a78:	4b37      	ldr	r3, [pc, #220]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019a80:	60bb      	str	r3, [r7, #8]
 8019a82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8019a84:	4b35      	ldr	r3, [pc, #212]	; (8019b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	4a34      	ldr	r2, [pc, #208]	; (8019b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8019a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019a90:	f7fb ff70 	bl	8015974 <HAL_GetTick>
 8019a94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8019a96:	e008      	b.n	8019aaa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019a98:	f7fb ff6c 	bl	8015974 <HAL_GetTick>
 8019a9c:	4602      	mov	r2, r0
 8019a9e:	697b      	ldr	r3, [r7, #20]
 8019aa0:	1ad3      	subs	r3, r2, r3
 8019aa2:	2b64      	cmp	r3, #100	; 0x64
 8019aa4:	d901      	bls.n	8019aaa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8019aa6:	2303      	movs	r3, #3
 8019aa8:	e38f      	b.n	801a1ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8019aaa:	4b2c      	ldr	r3, [pc, #176]	; (8019b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d0f0      	beq.n	8019a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8019ab6:	4b28      	ldr	r3, [pc, #160]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019abe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8019ac0:	693b      	ldr	r3, [r7, #16]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d035      	beq.n	8019b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019ace:	693a      	ldr	r2, [r7, #16]
 8019ad0:	429a      	cmp	r2, r3
 8019ad2:	d02e      	beq.n	8019b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8019ad4:	4b20      	ldr	r3, [pc, #128]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019adc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8019ade:	4b1e      	ldr	r3, [pc, #120]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ae2:	4a1d      	ldr	r2, [pc, #116]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019ae8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8019aea:	4b1b      	ldr	r3, [pc, #108]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019aee:	4a1a      	ldr	r2, [pc, #104]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019af4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8019af6:	4a18      	ldr	r2, [pc, #96]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019af8:	693b      	ldr	r3, [r7, #16]
 8019afa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8019afc:	4b16      	ldr	r3, [pc, #88]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b00:	f003 0301 	and.w	r3, r3, #1
 8019b04:	2b01      	cmp	r3, #1
 8019b06:	d114      	bne.n	8019b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019b08:	f7fb ff34 	bl	8015974 <HAL_GetTick>
 8019b0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019b0e:	e00a      	b.n	8019b26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019b10:	f7fb ff30 	bl	8015974 <HAL_GetTick>
 8019b14:	4602      	mov	r2, r0
 8019b16:	697b      	ldr	r3, [r7, #20]
 8019b18:	1ad3      	subs	r3, r2, r3
 8019b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8019b1e:	4293      	cmp	r3, r2
 8019b20:	d901      	bls.n	8019b26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8019b22:	2303      	movs	r3, #3
 8019b24:	e351      	b.n	801a1ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019b26:	4b0c      	ldr	r3, [pc, #48]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b2a:	f003 0302 	and.w	r3, r3, #2
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d0ee      	beq.n	8019b10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019b3e:	d111      	bne.n	8019b64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8019b40:	4b05      	ldr	r3, [pc, #20]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019b42:	689b      	ldr	r3, [r3, #8]
 8019b44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8019b4c:	4b04      	ldr	r3, [pc, #16]	; (8019b60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8019b4e:	400b      	ands	r3, r1
 8019b50:	4901      	ldr	r1, [pc, #4]	; (8019b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019b52:	4313      	orrs	r3, r2
 8019b54:	608b      	str	r3, [r1, #8]
 8019b56:	e00b      	b.n	8019b70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8019b58:	40023800 	.word	0x40023800
 8019b5c:	40007000 	.word	0x40007000
 8019b60:	0ffffcff 	.word	0x0ffffcff
 8019b64:	4bac      	ldr	r3, [pc, #688]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b66:	689b      	ldr	r3, [r3, #8]
 8019b68:	4aab      	ldr	r2, [pc, #684]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8019b6e:	6093      	str	r3, [r2, #8]
 8019b70:	4ba9      	ldr	r3, [pc, #676]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019b7c:	49a6      	ldr	r1, [pc, #664]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b7e:	4313      	orrs	r3, r2
 8019b80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	f003 0310 	and.w	r3, r3, #16
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d010      	beq.n	8019bb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8019b8e:	4ba2      	ldr	r3, [pc, #648]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019b94:	4aa0      	ldr	r2, [pc, #640]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8019b9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8019b9e:	4b9e      	ldr	r3, [pc, #632]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019ba0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ba8:	499b      	ldr	r1, [pc, #620]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019baa:	4313      	orrs	r3, r2
 8019bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d00a      	beq.n	8019bd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8019bbc:	4b96      	ldr	r3, [pc, #600]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019bc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019bca:	4993      	ldr	r1, [pc, #588]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019bcc:	4313      	orrs	r3, r2
 8019bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d00a      	beq.n	8019bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8019bde:	4b8e      	ldr	r3, [pc, #568]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019be4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019bec:	498a      	ldr	r1, [pc, #552]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019bee:	4313      	orrs	r3, r2
 8019bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d00a      	beq.n	8019c16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8019c00:	4b85      	ldr	r3, [pc, #532]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019c06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c0e:	4982      	ldr	r1, [pc, #520]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c10:	4313      	orrs	r3, r2
 8019c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d00a      	beq.n	8019c38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8019c22:	4b7d      	ldr	r3, [pc, #500]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019c28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c30:	4979      	ldr	r1, [pc, #484]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c32:	4313      	orrs	r3, r2
 8019c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	d00a      	beq.n	8019c5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8019c44:	4b74      	ldr	r3, [pc, #464]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019c4a:	f023 0203 	bic.w	r2, r3, #3
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c52:	4971      	ldr	r1, [pc, #452]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c54:	4313      	orrs	r3, r2
 8019c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d00a      	beq.n	8019c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8019c66:	4b6c      	ldr	r3, [pc, #432]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019c6c:	f023 020c 	bic.w	r2, r3, #12
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019c74:	4968      	ldr	r1, [pc, #416]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c76:	4313      	orrs	r3, r2
 8019c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d00a      	beq.n	8019c9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8019c88:	4b63      	ldr	r3, [pc, #396]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019c8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019c96:	4960      	ldr	r1, [pc, #384]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c98:	4313      	orrs	r3, r2
 8019c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d00a      	beq.n	8019cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8019caa:	4b5b      	ldr	r3, [pc, #364]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019cb0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019cb8:	4957      	ldr	r1, [pc, #348]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019cba:	4313      	orrs	r3, r2
 8019cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d00a      	beq.n	8019ce2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8019ccc:	4b52      	ldr	r3, [pc, #328]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019cd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019cda:	494f      	ldr	r1, [pc, #316]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019cdc:	4313      	orrs	r3, r2
 8019cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d00a      	beq.n	8019d04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8019cee:	4b4a      	ldr	r3, [pc, #296]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019cf4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019cfc:	4946      	ldr	r1, [pc, #280]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019cfe:	4313      	orrs	r3, r2
 8019d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d00a      	beq.n	8019d26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8019d10:	4b41      	ldr	r3, [pc, #260]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019d16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d1e:	493e      	ldr	r1, [pc, #248]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d20:	4313      	orrs	r3, r2
 8019d22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d00a      	beq.n	8019d48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8019d32:	4b39      	ldr	r3, [pc, #228]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019d38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019d40:	4935      	ldr	r1, [pc, #212]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d42:	4313      	orrs	r3, r2
 8019d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d00a      	beq.n	8019d6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8019d54:	4b30      	ldr	r3, [pc, #192]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019d5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019d62:	492d      	ldr	r1, [pc, #180]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d64:	4313      	orrs	r3, r2
 8019d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d011      	beq.n	8019d9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8019d76:	4b28      	ldr	r3, [pc, #160]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019d7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019d84:	4924      	ldr	r1, [pc, #144]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d86:	4313      	orrs	r3, r2
 8019d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8019d94:	d101      	bne.n	8019d9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8019d96:	2301      	movs	r3, #1
 8019d98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	f003 0308 	and.w	r3, r3, #8
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d001      	beq.n	8019daa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8019da6:	2301      	movs	r3, #1
 8019da8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d00a      	beq.n	8019dcc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8019db6:	4b18      	ldr	r3, [pc, #96]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019dbc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019dc4:	4914      	ldr	r1, [pc, #80]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019dc6:	4313      	orrs	r3, r2
 8019dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d00b      	beq.n	8019df0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8019dd8:	4b0f      	ldr	r3, [pc, #60]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019dde:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019de8:	490b      	ldr	r1, [pc, #44]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019dea:	4313      	orrs	r3, r2
 8019dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d00f      	beq.n	8019e1c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8019dfc:	4b06      	ldr	r3, [pc, #24]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019e02:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019e0c:	4902      	ldr	r1, [pc, #8]	; (8019e18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019e0e:	4313      	orrs	r3, r2
 8019e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8019e14:	e002      	b.n	8019e1c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8019e16:	bf00      	nop
 8019e18:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d00b      	beq.n	8019e40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8019e28:	4b8a      	ldr	r3, [pc, #552]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019e2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019e38:	4986      	ldr	r1, [pc, #536]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019e3a:	4313      	orrs	r3, r2
 8019e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d00b      	beq.n	8019e64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8019e4c:	4b81      	ldr	r3, [pc, #516]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019e52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019e5c:	497d      	ldr	r1, [pc, #500]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019e5e:	4313      	orrs	r3, r2
 8019e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8019e64:	69fb      	ldr	r3, [r7, #28]
 8019e66:	2b01      	cmp	r3, #1
 8019e68:	d006      	beq.n	8019e78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	f000 80d6 	beq.w	801a024 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8019e78:	4b76      	ldr	r3, [pc, #472]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	4a75      	ldr	r2, [pc, #468]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019e7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8019e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019e84:	f7fb fd76 	bl	8015974 <HAL_GetTick>
 8019e88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8019e8a:	e008      	b.n	8019e9e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8019e8c:	f7fb fd72 	bl	8015974 <HAL_GetTick>
 8019e90:	4602      	mov	r2, r0
 8019e92:	697b      	ldr	r3, [r7, #20]
 8019e94:	1ad3      	subs	r3, r2, r3
 8019e96:	2b64      	cmp	r3, #100	; 0x64
 8019e98:	d901      	bls.n	8019e9e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019e9a:	2303      	movs	r3, #3
 8019e9c:	e195      	b.n	801a1ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8019e9e:	4b6d      	ldr	r3, [pc, #436]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d1f0      	bne.n	8019e8c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	f003 0301 	and.w	r3, r3, #1
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d021      	beq.n	8019efa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d11d      	bne.n	8019efa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8019ebe:	4b65      	ldr	r3, [pc, #404]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019ec4:	0c1b      	lsrs	r3, r3, #16
 8019ec6:	f003 0303 	and.w	r3, r3, #3
 8019eca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8019ecc:	4b61      	ldr	r3, [pc, #388]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019ed2:	0e1b      	lsrs	r3, r3, #24
 8019ed4:	f003 030f 	and.w	r3, r3, #15
 8019ed8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	685b      	ldr	r3, [r3, #4]
 8019ede:	019a      	lsls	r2, r3, #6
 8019ee0:	693b      	ldr	r3, [r7, #16]
 8019ee2:	041b      	lsls	r3, r3, #16
 8019ee4:	431a      	orrs	r2, r3
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	061b      	lsls	r3, r3, #24
 8019eea:	431a      	orrs	r2, r3
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	689b      	ldr	r3, [r3, #8]
 8019ef0:	071b      	lsls	r3, r3, #28
 8019ef2:	4958      	ldr	r1, [pc, #352]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019ef4:	4313      	orrs	r3, r2
 8019ef6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d004      	beq.n	8019f10 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019f0e:	d00a      	beq.n	8019f26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d02e      	beq.n	8019f7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019f24:	d129      	bne.n	8019f7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8019f26:	4b4b      	ldr	r3, [pc, #300]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019f2c:	0c1b      	lsrs	r3, r3, #16
 8019f2e:	f003 0303 	and.w	r3, r3, #3
 8019f32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8019f34:	4b47      	ldr	r3, [pc, #284]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019f3a:	0f1b      	lsrs	r3, r3, #28
 8019f3c:	f003 0307 	and.w	r3, r3, #7
 8019f40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	685b      	ldr	r3, [r3, #4]
 8019f46:	019a      	lsls	r2, r3, #6
 8019f48:	693b      	ldr	r3, [r7, #16]
 8019f4a:	041b      	lsls	r3, r3, #16
 8019f4c:	431a      	orrs	r2, r3
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	68db      	ldr	r3, [r3, #12]
 8019f52:	061b      	lsls	r3, r3, #24
 8019f54:	431a      	orrs	r2, r3
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	071b      	lsls	r3, r3, #28
 8019f5a:	493e      	ldr	r1, [pc, #248]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019f5c:	4313      	orrs	r3, r2
 8019f5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8019f62:	4b3c      	ldr	r3, [pc, #240]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019f68:	f023 021f 	bic.w	r2, r3, #31
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f70:	3b01      	subs	r3, #1
 8019f72:	4938      	ldr	r1, [pc, #224]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019f74:	4313      	orrs	r3, r2
 8019f76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d01d      	beq.n	8019fc2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8019f86:	4b33      	ldr	r3, [pc, #204]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019f8c:	0e1b      	lsrs	r3, r3, #24
 8019f8e:	f003 030f 	and.w	r3, r3, #15
 8019f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8019f94:	4b2f      	ldr	r3, [pc, #188]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019f9a:	0f1b      	lsrs	r3, r3, #28
 8019f9c:	f003 0307 	and.w	r3, r3, #7
 8019fa0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	685b      	ldr	r3, [r3, #4]
 8019fa6:	019a      	lsls	r2, r3, #6
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	691b      	ldr	r3, [r3, #16]
 8019fac:	041b      	lsls	r3, r3, #16
 8019fae:	431a      	orrs	r2, r3
 8019fb0:	693b      	ldr	r3, [r7, #16]
 8019fb2:	061b      	lsls	r3, r3, #24
 8019fb4:	431a      	orrs	r2, r3
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	071b      	lsls	r3, r3, #28
 8019fba:	4926      	ldr	r1, [pc, #152]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019fbc:	4313      	orrs	r3, r2
 8019fbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d011      	beq.n	8019ff2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	685b      	ldr	r3, [r3, #4]
 8019fd2:	019a      	lsls	r2, r3, #6
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	691b      	ldr	r3, [r3, #16]
 8019fd8:	041b      	lsls	r3, r3, #16
 8019fda:	431a      	orrs	r2, r3
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	68db      	ldr	r3, [r3, #12]
 8019fe0:	061b      	lsls	r3, r3, #24
 8019fe2:	431a      	orrs	r2, r3
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	689b      	ldr	r3, [r3, #8]
 8019fe8:	071b      	lsls	r3, r3, #28
 8019fea:	491a      	ldr	r1, [pc, #104]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019fec:	4313      	orrs	r3, r2
 8019fee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8019ff2:	4b18      	ldr	r3, [pc, #96]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	4a17      	ldr	r2, [pc, #92]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019ff8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8019ffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019ffe:	f7fb fcb9 	bl	8015974 <HAL_GetTick>
 801a002:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801a004:	e008      	b.n	801a018 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801a006:	f7fb fcb5 	bl	8015974 <HAL_GetTick>
 801a00a:	4602      	mov	r2, r0
 801a00c:	697b      	ldr	r3, [r7, #20]
 801a00e:	1ad3      	subs	r3, r2, r3
 801a010:	2b64      	cmp	r3, #100	; 0x64
 801a012:	d901      	bls.n	801a018 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801a014:	2303      	movs	r3, #3
 801a016:	e0d8      	b.n	801a1ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801a018:	4b0e      	ldr	r3, [pc, #56]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a020:	2b00      	cmp	r3, #0
 801a022:	d0f0      	beq.n	801a006 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 801a024:	69bb      	ldr	r3, [r7, #24]
 801a026:	2b01      	cmp	r3, #1
 801a028:	f040 80ce 	bne.w	801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801a02c:	4b09      	ldr	r3, [pc, #36]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	4a08      	ldr	r2, [pc, #32]	; (801a054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a036:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801a038:	f7fb fc9c 	bl	8015974 <HAL_GetTick>
 801a03c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801a03e:	e00b      	b.n	801a058 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801a040:	f7fb fc98 	bl	8015974 <HAL_GetTick>
 801a044:	4602      	mov	r2, r0
 801a046:	697b      	ldr	r3, [r7, #20]
 801a048:	1ad3      	subs	r3, r2, r3
 801a04a:	2b64      	cmp	r3, #100	; 0x64
 801a04c:	d904      	bls.n	801a058 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801a04e:	2303      	movs	r3, #3
 801a050:	e0bb      	b.n	801a1ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 801a052:	bf00      	nop
 801a054:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801a058:	4b5e      	ldr	r3, [pc, #376]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801a060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801a064:	d0ec      	beq.n	801a040 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d003      	beq.n	801a07a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a076:	2b00      	cmp	r3, #0
 801a078:	d009      	beq.n	801a08e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801a082:	2b00      	cmp	r3, #0
 801a084:	d02e      	beq.n	801a0e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d12a      	bne.n	801a0e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801a08e:	4b51      	ldr	r3, [pc, #324]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a094:	0c1b      	lsrs	r3, r3, #16
 801a096:	f003 0303 	and.w	r3, r3, #3
 801a09a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801a09c:	4b4d      	ldr	r3, [pc, #308]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a09e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a0a2:	0f1b      	lsrs	r3, r3, #28
 801a0a4:	f003 0307 	and.w	r3, r3, #7
 801a0a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	695b      	ldr	r3, [r3, #20]
 801a0ae:	019a      	lsls	r2, r3, #6
 801a0b0:	693b      	ldr	r3, [r7, #16]
 801a0b2:	041b      	lsls	r3, r3, #16
 801a0b4:	431a      	orrs	r2, r3
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	699b      	ldr	r3, [r3, #24]
 801a0ba:	061b      	lsls	r3, r3, #24
 801a0bc:	431a      	orrs	r2, r3
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	071b      	lsls	r3, r3, #28
 801a0c2:	4944      	ldr	r1, [pc, #272]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a0c4:	4313      	orrs	r3, r2
 801a0c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801a0ca:	4b42      	ldr	r3, [pc, #264]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a0cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a0d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a0d8:	3b01      	subs	r3, #1
 801a0da:	021b      	lsls	r3, r3, #8
 801a0dc:	493d      	ldr	r1, [pc, #244]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a0de:	4313      	orrs	r3, r2
 801a0e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d022      	beq.n	801a136 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a0f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801a0f8:	d11d      	bne.n	801a136 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801a0fa:	4b36      	ldr	r3, [pc, #216]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a0fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a100:	0e1b      	lsrs	r3, r3, #24
 801a102:	f003 030f 	and.w	r3, r3, #15
 801a106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801a108:	4b32      	ldr	r3, [pc, #200]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a10e:	0f1b      	lsrs	r3, r3, #28
 801a110:	f003 0307 	and.w	r3, r3, #7
 801a114:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	695b      	ldr	r3, [r3, #20]
 801a11a:	019a      	lsls	r2, r3, #6
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	6a1b      	ldr	r3, [r3, #32]
 801a120:	041b      	lsls	r3, r3, #16
 801a122:	431a      	orrs	r2, r3
 801a124:	693b      	ldr	r3, [r7, #16]
 801a126:	061b      	lsls	r3, r3, #24
 801a128:	431a      	orrs	r2, r3
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	071b      	lsls	r3, r3, #28
 801a12e:	4929      	ldr	r1, [pc, #164]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a130:	4313      	orrs	r3, r2
 801a132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	f003 0308 	and.w	r3, r3, #8
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d028      	beq.n	801a194 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801a142:	4b24      	ldr	r3, [pc, #144]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a148:	0e1b      	lsrs	r3, r3, #24
 801a14a:	f003 030f 	and.w	r3, r3, #15
 801a14e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801a150:	4b20      	ldr	r3, [pc, #128]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a156:	0c1b      	lsrs	r3, r3, #16
 801a158:	f003 0303 	and.w	r3, r3, #3
 801a15c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	695b      	ldr	r3, [r3, #20]
 801a162:	019a      	lsls	r2, r3, #6
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	041b      	lsls	r3, r3, #16
 801a168:	431a      	orrs	r2, r3
 801a16a:	693b      	ldr	r3, [r7, #16]
 801a16c:	061b      	lsls	r3, r3, #24
 801a16e:	431a      	orrs	r2, r3
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	69db      	ldr	r3, [r3, #28]
 801a174:	071b      	lsls	r3, r3, #28
 801a176:	4917      	ldr	r1, [pc, #92]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a178:	4313      	orrs	r3, r2
 801a17a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801a17e:	4b15      	ldr	r3, [pc, #84]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a184:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a18c:	4911      	ldr	r1, [pc, #68]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a18e:	4313      	orrs	r3, r2
 801a190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801a194:	4b0f      	ldr	r3, [pc, #60]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	4a0e      	ldr	r2, [pc, #56]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a19a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a19e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801a1a0:	f7fb fbe8 	bl	8015974 <HAL_GetTick>
 801a1a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801a1a6:	e008      	b.n	801a1ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801a1a8:	f7fb fbe4 	bl	8015974 <HAL_GetTick>
 801a1ac:	4602      	mov	r2, r0
 801a1ae:	697b      	ldr	r3, [r7, #20]
 801a1b0:	1ad3      	subs	r3, r2, r3
 801a1b2:	2b64      	cmp	r3, #100	; 0x64
 801a1b4:	d901      	bls.n	801a1ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801a1b6:	2303      	movs	r3, #3
 801a1b8:	e007      	b.n	801a1ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801a1ba:	4b06      	ldr	r3, [pc, #24]	; (801a1d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801a1c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801a1c6:	d1ef      	bne.n	801a1a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 801a1c8:	2300      	movs	r3, #0
}
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	3720      	adds	r7, #32
 801a1ce:	46bd      	mov	sp, r7
 801a1d0:	bd80      	pop	{r7, pc}
 801a1d2:	bf00      	nop
 801a1d4:	40023800 	.word	0x40023800

0801a1d8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801a1d8:	b580      	push	{r7, lr}
 801a1da:	b082      	sub	sp, #8
 801a1dc:	af00      	add	r7, sp, #0
 801a1de:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d101      	bne.n	801a1ea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	e01c      	b.n	801a224 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	795b      	ldrb	r3, [r3, #5]
 801a1ee:	b2db      	uxtb	r3, r3
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d105      	bne.n	801a200 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801a1fa:	6878      	ldr	r0, [r7, #4]
 801a1fc:	f7f9 fe48 	bl	8013e90 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	2202      	movs	r2, #2
 801a204:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	681a      	ldr	r2, [r3, #0]
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	f042 0204 	orr.w	r2, r2, #4
 801a214:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	2201      	movs	r2, #1
 801a21a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	2200      	movs	r2, #0
 801a220:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801a222:	2300      	movs	r3, #0
}
 801a224:	4618      	mov	r0, r3
 801a226:	3708      	adds	r7, #8
 801a228:	46bd      	mov	sp, r7
 801a22a:	bd80      	pop	{r7, pc}

0801a22c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801a22c:	b580      	push	{r7, lr}
 801a22e:	b084      	sub	sp, #16
 801a230:	af00      	add	r7, sp, #0
 801a232:	6078      	str	r0, [r7, #4]
 801a234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801a236:	2300      	movs	r3, #0
 801a238:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	791b      	ldrb	r3, [r3, #4]
 801a23e:	2b01      	cmp	r3, #1
 801a240:	d101      	bne.n	801a246 <HAL_RNG_GenerateRandomNumber+0x1a>
 801a242:	2302      	movs	r3, #2
 801a244:	e044      	b.n	801a2d0 <HAL_RNG_GenerateRandomNumber+0xa4>
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	2201      	movs	r2, #1
 801a24a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	795b      	ldrb	r3, [r3, #5]
 801a250:	b2db      	uxtb	r3, r3
 801a252:	2b01      	cmp	r3, #1
 801a254:	d133      	bne.n	801a2be <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	2202      	movs	r2, #2
 801a25a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 801a25c:	f7fb fb8a 	bl	8015974 <HAL_GetTick>
 801a260:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801a262:	e018      	b.n	801a296 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801a264:	f7fb fb86 	bl	8015974 <HAL_GetTick>
 801a268:	4602      	mov	r2, r0
 801a26a:	68bb      	ldr	r3, [r7, #8]
 801a26c:	1ad3      	subs	r3, r2, r3
 801a26e:	2b02      	cmp	r3, #2
 801a270:	d911      	bls.n	801a296 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	685b      	ldr	r3, [r3, #4]
 801a278:	f003 0301 	and.w	r3, r3, #1
 801a27c:	2b01      	cmp	r3, #1
 801a27e:	d00a      	beq.n	801a296 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	2201      	movs	r2, #1
 801a284:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	2202      	movs	r2, #2
 801a28a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	2200      	movs	r2, #0
 801a290:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 801a292:	2301      	movs	r3, #1
 801a294:	e01c      	b.n	801a2d0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	685b      	ldr	r3, [r3, #4]
 801a29c:	f003 0301 	and.w	r3, r3, #1
 801a2a0:	2b01      	cmp	r3, #1
 801a2a2:	d1df      	bne.n	801a264 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	689a      	ldr	r2, [r3, #8]
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	68da      	ldr	r2, [r3, #12]
 801a2b2:	683b      	ldr	r3, [r7, #0]
 801a2b4:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	2201      	movs	r2, #1
 801a2ba:	715a      	strb	r2, [r3, #5]
 801a2bc:	e004      	b.n	801a2c8 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	2204      	movs	r2, #4
 801a2c2:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 801a2c4:	2301      	movs	r3, #1
 801a2c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	2200      	movs	r2, #0
 801a2cc:	711a      	strb	r2, [r3, #4]

  return status;
 801a2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	3710      	adds	r7, #16
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	bd80      	pop	{r7, pc}

0801a2d8 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	b082      	sub	sp, #8
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	330c      	adds	r3, #12
 801a2e4:	4619      	mov	r1, r3
 801a2e6:	6878      	ldr	r0, [r7, #4]
 801a2e8:	f7ff ffa0 	bl	801a22c <HAL_RNG_GenerateRandomNumber>
 801a2ec:	4603      	mov	r3, r0
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d102      	bne.n	801a2f8 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	68db      	ldr	r3, [r3, #12]
 801a2f6:	e000      	b.n	801a2fa <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 801a2f8:	2300      	movs	r3, #0
  }
}
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	3708      	adds	r7, #8
 801a2fe:	46bd      	mov	sp, r7
 801a300:	bd80      	pop	{r7, pc}

0801a302 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801a302:	b580      	push	{r7, lr}
 801a304:	b084      	sub	sp, #16
 801a306:	af00      	add	r7, sp, #0
 801a308:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d101      	bne.n	801a314 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801a310:	2301      	movs	r3, #1
 801a312:	e09d      	b.n	801a450 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d108      	bne.n	801a32e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	685b      	ldr	r3, [r3, #4]
 801a320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a324:	d009      	beq.n	801a33a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	2200      	movs	r2, #0
 801a32a:	61da      	str	r2, [r3, #28]
 801a32c:	e005      	b.n	801a33a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	2200      	movs	r2, #0
 801a332:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	2200      	movs	r2, #0
 801a338:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	2200      	movs	r2, #0
 801a33e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a346:	b2db      	uxtb	r3, r3
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d106      	bne.n	801a35a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	2200      	movs	r2, #0
 801a350:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801a354:	6878      	ldr	r0, [r7, #4]
 801a356:	f7f9 fe23 	bl	8013fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	2202      	movs	r2, #2
 801a35e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	681a      	ldr	r2, [r3, #0]
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a370:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	68db      	ldr	r3, [r3, #12]
 801a376:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a37a:	d902      	bls.n	801a382 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801a37c:	2300      	movs	r3, #0
 801a37e:	60fb      	str	r3, [r7, #12]
 801a380:	e002      	b.n	801a388 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801a382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a386:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	68db      	ldr	r3, [r3, #12]
 801a38c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801a390:	d007      	beq.n	801a3a2 <HAL_SPI_Init+0xa0>
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	68db      	ldr	r3, [r3, #12]
 801a396:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a39a:	d002      	beq.n	801a3a2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	2200      	movs	r2, #0
 801a3a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	685b      	ldr	r3, [r3, #4]
 801a3a6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	689b      	ldr	r3, [r3, #8]
 801a3ae:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801a3b2:	431a      	orrs	r2, r3
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	691b      	ldr	r3, [r3, #16]
 801a3b8:	f003 0302 	and.w	r3, r3, #2
 801a3bc:	431a      	orrs	r2, r3
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	695b      	ldr	r3, [r3, #20]
 801a3c2:	f003 0301 	and.w	r3, r3, #1
 801a3c6:	431a      	orrs	r2, r3
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	699b      	ldr	r3, [r3, #24]
 801a3cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a3d0:	431a      	orrs	r2, r3
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	69db      	ldr	r3, [r3, #28]
 801a3d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a3da:	431a      	orrs	r2, r3
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	6a1b      	ldr	r3, [r3, #32]
 801a3e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a3e4:	ea42 0103 	orr.w	r1, r2, r3
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	430a      	orrs	r2, r1
 801a3f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	699b      	ldr	r3, [r3, #24]
 801a3fc:	0c1b      	lsrs	r3, r3, #16
 801a3fe:	f003 0204 	and.w	r2, r3, #4
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a406:	f003 0310 	and.w	r3, r3, #16
 801a40a:	431a      	orrs	r2, r3
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a410:	f003 0308 	and.w	r3, r3, #8
 801a414:	431a      	orrs	r2, r3
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	68db      	ldr	r3, [r3, #12]
 801a41a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801a41e:	ea42 0103 	orr.w	r1, r2, r3
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	681b      	ldr	r3, [r3, #0]
 801a42c:	430a      	orrs	r2, r1
 801a42e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	69da      	ldr	r2, [r3, #28]
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801a43e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	2200      	movs	r2, #0
 801a444:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	2201      	movs	r2, #1
 801a44a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801a44e:	2300      	movs	r3, #0
}
 801a450:	4618      	mov	r0, r3
 801a452:	3710      	adds	r7, #16
 801a454:	46bd      	mov	sp, r7
 801a456:	bd80      	pop	{r7, pc}

0801a458 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a458:	b580      	push	{r7, lr}
 801a45a:	b088      	sub	sp, #32
 801a45c:	af00      	add	r7, sp, #0
 801a45e:	60f8      	str	r0, [r7, #12]
 801a460:	60b9      	str	r1, [r7, #8]
 801a462:	603b      	str	r3, [r7, #0]
 801a464:	4613      	mov	r3, r2
 801a466:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801a468:	2300      	movs	r3, #0
 801a46a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a472:	2b01      	cmp	r3, #1
 801a474:	d101      	bne.n	801a47a <HAL_SPI_Transmit+0x22>
 801a476:	2302      	movs	r3, #2
 801a478:	e158      	b.n	801a72c <HAL_SPI_Transmit+0x2d4>
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	2201      	movs	r2, #1
 801a47e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a482:	f7fb fa77 	bl	8015974 <HAL_GetTick>
 801a486:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801a488:	88fb      	ldrh	r3, [r7, #6]
 801a48a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801a48c:	68fb      	ldr	r3, [r7, #12]
 801a48e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a492:	b2db      	uxtb	r3, r3
 801a494:	2b01      	cmp	r3, #1
 801a496:	d002      	beq.n	801a49e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801a498:	2302      	movs	r3, #2
 801a49a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801a49c:	e13d      	b.n	801a71a <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801a49e:	68bb      	ldr	r3, [r7, #8]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d002      	beq.n	801a4aa <HAL_SPI_Transmit+0x52>
 801a4a4:	88fb      	ldrh	r3, [r7, #6]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d102      	bne.n	801a4b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801a4aa:	2301      	movs	r3, #1
 801a4ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 801a4ae:	e134      	b.n	801a71a <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801a4b0:	68fb      	ldr	r3, [r7, #12]
 801a4b2:	2203      	movs	r2, #3
 801a4b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	2200      	movs	r2, #0
 801a4bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801a4be:	68fb      	ldr	r3, [r7, #12]
 801a4c0:	68ba      	ldr	r2, [r7, #8]
 801a4c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801a4c4:	68fb      	ldr	r3, [r7, #12]
 801a4c6:	88fa      	ldrh	r2, [r7, #6]
 801a4c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	88fa      	ldrh	r2, [r7, #6]
 801a4ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	2200      	movs	r2, #0
 801a4d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801a4d6:	68fb      	ldr	r3, [r7, #12]
 801a4d8:	2200      	movs	r2, #0
 801a4da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	2200      	movs	r2, #0
 801a4e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801a4e6:	68fb      	ldr	r3, [r7, #12]
 801a4e8:	2200      	movs	r2, #0
 801a4ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	2200      	movs	r2, #0
 801a4f0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	689b      	ldr	r3, [r3, #8]
 801a4f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a4fa:	d10f      	bne.n	801a51c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801a4fc:	68fb      	ldr	r3, [r7, #12]
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	681a      	ldr	r2, [r3, #0]
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a50a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	681a      	ldr	r2, [r3, #0]
 801a512:	68fb      	ldr	r3, [r7, #12]
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a51a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a526:	2b40      	cmp	r3, #64	; 0x40
 801a528:	d007      	beq.n	801a53a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	681a      	ldr	r2, [r3, #0]
 801a530:	68fb      	ldr	r3, [r7, #12]
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a538:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	68db      	ldr	r3, [r3, #12]
 801a53e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a542:	d94b      	bls.n	801a5dc <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	685b      	ldr	r3, [r3, #4]
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d002      	beq.n	801a552 <HAL_SPI_Transmit+0xfa>
 801a54c:	8afb      	ldrh	r3, [r7, #22]
 801a54e:	2b01      	cmp	r3, #1
 801a550:	d13e      	bne.n	801a5d0 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a556:	881a      	ldrh	r2, [r3, #0]
 801a558:	68fb      	ldr	r3, [r7, #12]
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a562:	1c9a      	adds	r2, r3, #2
 801a564:	68fb      	ldr	r3, [r7, #12]
 801a566:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a56c:	b29b      	uxth	r3, r3
 801a56e:	3b01      	subs	r3, #1
 801a570:	b29a      	uxth	r2, r3
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801a576:	e02b      	b.n	801a5d0 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	689b      	ldr	r3, [r3, #8]
 801a57e:	f003 0302 	and.w	r3, r3, #2
 801a582:	2b02      	cmp	r3, #2
 801a584:	d112      	bne.n	801a5ac <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a586:	68fb      	ldr	r3, [r7, #12]
 801a588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a58a:	881a      	ldrh	r2, [r3, #0]
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a592:	68fb      	ldr	r3, [r7, #12]
 801a594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a596:	1c9a      	adds	r2, r3, #2
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a59c:	68fb      	ldr	r3, [r7, #12]
 801a59e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a5a0:	b29b      	uxth	r3, r3
 801a5a2:	3b01      	subs	r3, #1
 801a5a4:	b29a      	uxth	r2, r3
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a5aa:	e011      	b.n	801a5d0 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a5ac:	f7fb f9e2 	bl	8015974 <HAL_GetTick>
 801a5b0:	4602      	mov	r2, r0
 801a5b2:	69bb      	ldr	r3, [r7, #24]
 801a5b4:	1ad3      	subs	r3, r2, r3
 801a5b6:	683a      	ldr	r2, [r7, #0]
 801a5b8:	429a      	cmp	r2, r3
 801a5ba:	d803      	bhi.n	801a5c4 <HAL_SPI_Transmit+0x16c>
 801a5bc:	683b      	ldr	r3, [r7, #0]
 801a5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a5c2:	d102      	bne.n	801a5ca <HAL_SPI_Transmit+0x172>
 801a5c4:	683b      	ldr	r3, [r7, #0]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d102      	bne.n	801a5d0 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801a5ca:	2303      	movs	r3, #3
 801a5cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 801a5ce:	e0a4      	b.n	801a71a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a5d4:	b29b      	uxth	r3, r3
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d1ce      	bne.n	801a578 <HAL_SPI_Transmit+0x120>
 801a5da:	e07c      	b.n	801a6d6 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	685b      	ldr	r3, [r3, #4]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d002      	beq.n	801a5ea <HAL_SPI_Transmit+0x192>
 801a5e4:	8afb      	ldrh	r3, [r7, #22]
 801a5e6:	2b01      	cmp	r3, #1
 801a5e8:	d170      	bne.n	801a6cc <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a5ee:	b29b      	uxth	r3, r3
 801a5f0:	2b01      	cmp	r3, #1
 801a5f2:	d912      	bls.n	801a61a <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a5f4:	68fb      	ldr	r3, [r7, #12]
 801a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5f8:	881a      	ldrh	r2, [r3, #0]
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a604:	1c9a      	adds	r2, r3, #2
 801a606:	68fb      	ldr	r3, [r7, #12]
 801a608:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a60e:	b29b      	uxth	r3, r3
 801a610:	3b02      	subs	r3, #2
 801a612:	b29a      	uxth	r2, r3
 801a614:	68fb      	ldr	r3, [r7, #12]
 801a616:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a618:	e058      	b.n	801a6cc <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a61e:	68fb      	ldr	r3, [r7, #12]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	330c      	adds	r3, #12
 801a624:	7812      	ldrb	r2, [r2, #0]
 801a626:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801a628:	68fb      	ldr	r3, [r7, #12]
 801a62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a62c:	1c5a      	adds	r2, r3, #1
 801a62e:	68fb      	ldr	r3, [r7, #12]
 801a630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a632:	68fb      	ldr	r3, [r7, #12]
 801a634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a636:	b29b      	uxth	r3, r3
 801a638:	3b01      	subs	r3, #1
 801a63a:	b29a      	uxth	r2, r3
 801a63c:	68fb      	ldr	r3, [r7, #12]
 801a63e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801a640:	e044      	b.n	801a6cc <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a642:	68fb      	ldr	r3, [r7, #12]
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	689b      	ldr	r3, [r3, #8]
 801a648:	f003 0302 	and.w	r3, r3, #2
 801a64c:	2b02      	cmp	r3, #2
 801a64e:	d12b      	bne.n	801a6a8 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a654:	b29b      	uxth	r3, r3
 801a656:	2b01      	cmp	r3, #1
 801a658:	d912      	bls.n	801a680 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a65e:	881a      	ldrh	r2, [r3, #0]
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a66a:	1c9a      	adds	r2, r3, #2
 801a66c:	68fb      	ldr	r3, [r7, #12]
 801a66e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a674:	b29b      	uxth	r3, r3
 801a676:	3b02      	subs	r3, #2
 801a678:	b29a      	uxth	r2, r3
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a67e:	e025      	b.n	801a6cc <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	330c      	adds	r3, #12
 801a68a:	7812      	ldrb	r2, [r2, #0]
 801a68c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a692:	1c5a      	adds	r2, r3, #1
 801a694:	68fb      	ldr	r3, [r7, #12]
 801a696:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a69c:	b29b      	uxth	r3, r3
 801a69e:	3b01      	subs	r3, #1
 801a6a0:	b29a      	uxth	r2, r3
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a6a6:	e011      	b.n	801a6cc <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a6a8:	f7fb f964 	bl	8015974 <HAL_GetTick>
 801a6ac:	4602      	mov	r2, r0
 801a6ae:	69bb      	ldr	r3, [r7, #24]
 801a6b0:	1ad3      	subs	r3, r2, r3
 801a6b2:	683a      	ldr	r2, [r7, #0]
 801a6b4:	429a      	cmp	r2, r3
 801a6b6:	d803      	bhi.n	801a6c0 <HAL_SPI_Transmit+0x268>
 801a6b8:	683b      	ldr	r3, [r7, #0]
 801a6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6be:	d102      	bne.n	801a6c6 <HAL_SPI_Transmit+0x26e>
 801a6c0:	683b      	ldr	r3, [r7, #0]
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d102      	bne.n	801a6cc <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801a6c6:	2303      	movs	r3, #3
 801a6c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 801a6ca:	e026      	b.n	801a71a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a6d0:	b29b      	uxth	r3, r3
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d1b5      	bne.n	801a642 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a6d6:	69ba      	ldr	r2, [r7, #24]
 801a6d8:	6839      	ldr	r1, [r7, #0]
 801a6da:	68f8      	ldr	r0, [r7, #12]
 801a6dc:	f000 fd08 	bl	801b0f0 <SPI_EndRxTxTransaction>
 801a6e0:	4603      	mov	r3, r0
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d002      	beq.n	801a6ec <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a6e6:	68fb      	ldr	r3, [r7, #12]
 801a6e8:	2220      	movs	r2, #32
 801a6ea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	689b      	ldr	r3, [r3, #8]
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	d10a      	bne.n	801a70a <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801a6f4:	2300      	movs	r3, #0
 801a6f6:	613b      	str	r3, [r7, #16]
 801a6f8:	68fb      	ldr	r3, [r7, #12]
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	68db      	ldr	r3, [r3, #12]
 801a6fe:	613b      	str	r3, [r7, #16]
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	689b      	ldr	r3, [r3, #8]
 801a706:	613b      	str	r3, [r7, #16]
 801a708:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d002      	beq.n	801a718 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801a712:	2301      	movs	r3, #1
 801a714:	77fb      	strb	r3, [r7, #31]
 801a716:	e000      	b.n	801a71a <HAL_SPI_Transmit+0x2c2>
  }

error:
 801a718:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	2201      	movs	r2, #1
 801a71e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801a722:	68fb      	ldr	r3, [r7, #12]
 801a724:	2200      	movs	r2, #0
 801a726:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a72a:	7ffb      	ldrb	r3, [r7, #31]
}
 801a72c:	4618      	mov	r0, r3
 801a72e:	3720      	adds	r7, #32
 801a730:	46bd      	mov	sp, r7
 801a732:	bd80      	pop	{r7, pc}

0801a734 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a734:	b580      	push	{r7, lr}
 801a736:	b088      	sub	sp, #32
 801a738:	af02      	add	r7, sp, #8
 801a73a:	60f8      	str	r0, [r7, #12]
 801a73c:	60b9      	str	r1, [r7, #8]
 801a73e:	603b      	str	r3, [r7, #0]
 801a740:	4613      	mov	r3, r2
 801a742:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801a744:	2300      	movs	r3, #0
 801a746:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	685b      	ldr	r3, [r3, #4]
 801a74c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a750:	d112      	bne.n	801a778 <HAL_SPI_Receive+0x44>
 801a752:	68fb      	ldr	r3, [r7, #12]
 801a754:	689b      	ldr	r3, [r3, #8]
 801a756:	2b00      	cmp	r3, #0
 801a758:	d10e      	bne.n	801a778 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	2204      	movs	r2, #4
 801a75e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801a762:	88fa      	ldrh	r2, [r7, #6]
 801a764:	683b      	ldr	r3, [r7, #0]
 801a766:	9300      	str	r3, [sp, #0]
 801a768:	4613      	mov	r3, r2
 801a76a:	68ba      	ldr	r2, [r7, #8]
 801a76c:	68b9      	ldr	r1, [r7, #8]
 801a76e:	68f8      	ldr	r0, [r7, #12]
 801a770:	f000 f910 	bl	801a994 <HAL_SPI_TransmitReceive>
 801a774:	4603      	mov	r3, r0
 801a776:	e109      	b.n	801a98c <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a778:	68fb      	ldr	r3, [r7, #12]
 801a77a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a77e:	2b01      	cmp	r3, #1
 801a780:	d101      	bne.n	801a786 <HAL_SPI_Receive+0x52>
 801a782:	2302      	movs	r3, #2
 801a784:	e102      	b.n	801a98c <HAL_SPI_Receive+0x258>
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	2201      	movs	r2, #1
 801a78a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a78e:	f7fb f8f1 	bl	8015974 <HAL_GetTick>
 801a792:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a79a:	b2db      	uxtb	r3, r3
 801a79c:	2b01      	cmp	r3, #1
 801a79e:	d002      	beq.n	801a7a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801a7a0:	2302      	movs	r3, #2
 801a7a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 801a7a4:	e0e9      	b.n	801a97a <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801a7a6:	68bb      	ldr	r3, [r7, #8]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d002      	beq.n	801a7b2 <HAL_SPI_Receive+0x7e>
 801a7ac:	88fb      	ldrh	r3, [r7, #6]
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d102      	bne.n	801a7b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801a7b2:	2301      	movs	r3, #1
 801a7b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 801a7b6:	e0e0      	b.n	801a97a <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	2204      	movs	r2, #4
 801a7bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	68ba      	ldr	r2, [r7, #8]
 801a7ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	88fa      	ldrh	r2, [r7, #6]
 801a7d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	88fa      	ldrh	r2, [r7, #6]
 801a7d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	2200      	movs	r2, #0
 801a7e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	2200      	movs	r2, #0
 801a7e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801a7e8:	68fb      	ldr	r3, [r7, #12]
 801a7ea:	2200      	movs	r2, #0
 801a7ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	2200      	movs	r2, #0
 801a7f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	2200      	movs	r2, #0
 801a7f8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	68db      	ldr	r3, [r3, #12]
 801a7fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a802:	d908      	bls.n	801a816 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a804:	68fb      	ldr	r3, [r7, #12]
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	685a      	ldr	r2, [r3, #4]
 801a80a:	68fb      	ldr	r3, [r7, #12]
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a812:	605a      	str	r2, [r3, #4]
 801a814:	e007      	b.n	801a826 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a816:	68fb      	ldr	r3, [r7, #12]
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	685a      	ldr	r2, [r3, #4]
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a824:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	689b      	ldr	r3, [r3, #8]
 801a82a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a82e:	d10f      	bne.n	801a850 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	681a      	ldr	r2, [r3, #0]
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a83e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	681a      	ldr	r2, [r3, #0]
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801a84e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	681b      	ldr	r3, [r3, #0]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a85a:	2b40      	cmp	r3, #64	; 0x40
 801a85c:	d007      	beq.n	801a86e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	681a      	ldr	r2, [r3, #0]
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a86c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	68db      	ldr	r3, [r3, #12]
 801a872:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a876:	d867      	bhi.n	801a948 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801a878:	e030      	b.n	801a8dc <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a87a:	68fb      	ldr	r3, [r7, #12]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	689b      	ldr	r3, [r3, #8]
 801a880:	f003 0301 	and.w	r3, r3, #1
 801a884:	2b01      	cmp	r3, #1
 801a886:	d117      	bne.n	801a8b8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801a888:	68fb      	ldr	r3, [r7, #12]
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	f103 020c 	add.w	r2, r3, #12
 801a890:	68fb      	ldr	r3, [r7, #12]
 801a892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a894:	7812      	ldrb	r2, [r2, #0]
 801a896:	b2d2      	uxtb	r2, r2
 801a898:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a89e:	1c5a      	adds	r2, r3, #1
 801a8a0:	68fb      	ldr	r3, [r7, #12]
 801a8a2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a8a4:	68fb      	ldr	r3, [r7, #12]
 801a8a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a8aa:	b29b      	uxth	r3, r3
 801a8ac:	3b01      	subs	r3, #1
 801a8ae:	b29a      	uxth	r2, r3
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801a8b6:	e011      	b.n	801a8dc <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a8b8:	f7fb f85c 	bl	8015974 <HAL_GetTick>
 801a8bc:	4602      	mov	r2, r0
 801a8be:	693b      	ldr	r3, [r7, #16]
 801a8c0:	1ad3      	subs	r3, r2, r3
 801a8c2:	683a      	ldr	r2, [r7, #0]
 801a8c4:	429a      	cmp	r2, r3
 801a8c6:	d803      	bhi.n	801a8d0 <HAL_SPI_Receive+0x19c>
 801a8c8:	683b      	ldr	r3, [r7, #0]
 801a8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a8ce:	d102      	bne.n	801a8d6 <HAL_SPI_Receive+0x1a2>
 801a8d0:	683b      	ldr	r3, [r7, #0]
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d102      	bne.n	801a8dc <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801a8d6:	2303      	movs	r3, #3
 801a8d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 801a8da:	e04e      	b.n	801a97a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a8e2:	b29b      	uxth	r3, r3
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d1c8      	bne.n	801a87a <HAL_SPI_Receive+0x146>
 801a8e8:	e034      	b.n	801a954 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	689b      	ldr	r3, [r3, #8]
 801a8f0:	f003 0301 	and.w	r3, r3, #1
 801a8f4:	2b01      	cmp	r3, #1
 801a8f6:	d115      	bne.n	801a924 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	68da      	ldr	r2, [r3, #12]
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a902:	b292      	uxth	r2, r2
 801a904:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801a906:	68fb      	ldr	r3, [r7, #12]
 801a908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a90a:	1c9a      	adds	r2, r3, #2
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a916:	b29b      	uxth	r3, r3
 801a918:	3b01      	subs	r3, #1
 801a91a:	b29a      	uxth	r2, r3
 801a91c:	68fb      	ldr	r3, [r7, #12]
 801a91e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801a922:	e011      	b.n	801a948 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a924:	f7fb f826 	bl	8015974 <HAL_GetTick>
 801a928:	4602      	mov	r2, r0
 801a92a:	693b      	ldr	r3, [r7, #16]
 801a92c:	1ad3      	subs	r3, r2, r3
 801a92e:	683a      	ldr	r2, [r7, #0]
 801a930:	429a      	cmp	r2, r3
 801a932:	d803      	bhi.n	801a93c <HAL_SPI_Receive+0x208>
 801a934:	683b      	ldr	r3, [r7, #0]
 801a936:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a93a:	d102      	bne.n	801a942 <HAL_SPI_Receive+0x20e>
 801a93c:	683b      	ldr	r3, [r7, #0]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d102      	bne.n	801a948 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801a942:	2303      	movs	r3, #3
 801a944:	75fb      	strb	r3, [r7, #23]
          goto error;
 801a946:	e018      	b.n	801a97a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801a948:	68fb      	ldr	r3, [r7, #12]
 801a94a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a94e:	b29b      	uxth	r3, r3
 801a950:	2b00      	cmp	r3, #0
 801a952:	d1ca      	bne.n	801a8ea <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a954:	693a      	ldr	r2, [r7, #16]
 801a956:	6839      	ldr	r1, [r7, #0]
 801a958:	68f8      	ldr	r0, [r7, #12]
 801a95a:	f000 fb4d 	bl	801aff8 <SPI_EndRxTransaction>
 801a95e:	4603      	mov	r3, r0
 801a960:	2b00      	cmp	r3, #0
 801a962:	d002      	beq.n	801a96a <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	2220      	movs	r2, #32
 801a968:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d002      	beq.n	801a978 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801a972:	2301      	movs	r3, #1
 801a974:	75fb      	strb	r3, [r7, #23]
 801a976:	e000      	b.n	801a97a <HAL_SPI_Receive+0x246>
  }

error :
 801a978:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	2201      	movs	r2, #1
 801a97e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	2200      	movs	r2, #0
 801a986:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a98a:	7dfb      	ldrb	r3, [r7, #23]
}
 801a98c:	4618      	mov	r0, r3
 801a98e:	3718      	adds	r7, #24
 801a990:	46bd      	mov	sp, r7
 801a992:	bd80      	pop	{r7, pc}

0801a994 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801a994:	b580      	push	{r7, lr}
 801a996:	b08a      	sub	sp, #40	; 0x28
 801a998:	af00      	add	r7, sp, #0
 801a99a:	60f8      	str	r0, [r7, #12]
 801a99c:	60b9      	str	r1, [r7, #8]
 801a99e:	607a      	str	r2, [r7, #4]
 801a9a0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801a9a2:	2301      	movs	r3, #1
 801a9a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801a9a6:	2300      	movs	r3, #0
 801a9a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a9b2:	2b01      	cmp	r3, #1
 801a9b4:	d101      	bne.n	801a9ba <HAL_SPI_TransmitReceive+0x26>
 801a9b6:	2302      	movs	r3, #2
 801a9b8:	e1fb      	b.n	801adb2 <HAL_SPI_TransmitReceive+0x41e>
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	2201      	movs	r2, #1
 801a9be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a9c2:	f7fa ffd7 	bl	8015974 <HAL_GetTick>
 801a9c6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a9ce:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801a9d0:	68fb      	ldr	r3, [r7, #12]
 801a9d2:	685b      	ldr	r3, [r3, #4]
 801a9d4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801a9d6:	887b      	ldrh	r3, [r7, #2]
 801a9d8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801a9da:	887b      	ldrh	r3, [r7, #2]
 801a9dc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801a9de:	7efb      	ldrb	r3, [r7, #27]
 801a9e0:	2b01      	cmp	r3, #1
 801a9e2:	d00e      	beq.n	801aa02 <HAL_SPI_TransmitReceive+0x6e>
 801a9e4:	697b      	ldr	r3, [r7, #20]
 801a9e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a9ea:	d106      	bne.n	801a9fa <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	689b      	ldr	r3, [r3, #8]
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d102      	bne.n	801a9fa <HAL_SPI_TransmitReceive+0x66>
 801a9f4:	7efb      	ldrb	r3, [r7, #27]
 801a9f6:	2b04      	cmp	r3, #4
 801a9f8:	d003      	beq.n	801aa02 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801a9fa:	2302      	movs	r3, #2
 801a9fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801aa00:	e1cd      	b.n	801ad9e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801aa02:	68bb      	ldr	r3, [r7, #8]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d005      	beq.n	801aa14 <HAL_SPI_TransmitReceive+0x80>
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d002      	beq.n	801aa14 <HAL_SPI_TransmitReceive+0x80>
 801aa0e:	887b      	ldrh	r3, [r7, #2]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d103      	bne.n	801aa1c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801aa14:	2301      	movs	r3, #1
 801aa16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801aa1a:	e1c0      	b.n	801ad9e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801aa1c:	68fb      	ldr	r3, [r7, #12]
 801aa1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801aa22:	b2db      	uxtb	r3, r3
 801aa24:	2b04      	cmp	r3, #4
 801aa26:	d003      	beq.n	801aa30 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801aa28:	68fb      	ldr	r3, [r7, #12]
 801aa2a:	2205      	movs	r2, #5
 801aa2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	2200      	movs	r2, #0
 801aa34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	687a      	ldr	r2, [r7, #4]
 801aa3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	887a      	ldrh	r2, [r7, #2]
 801aa40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	887a      	ldrh	r2, [r7, #2]
 801aa48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801aa4c:	68fb      	ldr	r3, [r7, #12]
 801aa4e:	68ba      	ldr	r2, [r7, #8]
 801aa50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801aa52:	68fb      	ldr	r3, [r7, #12]
 801aa54:	887a      	ldrh	r2, [r7, #2]
 801aa56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	887a      	ldrh	r2, [r7, #2]
 801aa5c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	2200      	movs	r2, #0
 801aa62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	2200      	movs	r2, #0
 801aa68:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	68db      	ldr	r3, [r3, #12]
 801aa6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801aa72:	d802      	bhi.n	801aa7a <HAL_SPI_TransmitReceive+0xe6>
 801aa74:	8a3b      	ldrh	r3, [r7, #16]
 801aa76:	2b01      	cmp	r3, #1
 801aa78:	d908      	bls.n	801aa8c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	685a      	ldr	r2, [r3, #4]
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801aa88:	605a      	str	r2, [r3, #4]
 801aa8a:	e007      	b.n	801aa9c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	685a      	ldr	r2, [r3, #4]
 801aa92:	68fb      	ldr	r3, [r7, #12]
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801aa9a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	681b      	ldr	r3, [r3, #0]
 801aaa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aaa6:	2b40      	cmp	r3, #64	; 0x40
 801aaa8:	d007      	beq.n	801aaba <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	681a      	ldr	r2, [r3, #0]
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	681b      	ldr	r3, [r3, #0]
 801aab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801aab8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	68db      	ldr	r3, [r3, #12]
 801aabe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801aac2:	d97c      	bls.n	801abbe <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	685b      	ldr	r3, [r3, #4]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d002      	beq.n	801aad2 <HAL_SPI_TransmitReceive+0x13e>
 801aacc:	8a7b      	ldrh	r3, [r7, #18]
 801aace:	2b01      	cmp	r3, #1
 801aad0:	d169      	bne.n	801aba6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aad6:	881a      	ldrh	r2, [r3, #0]
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aae2:	1c9a      	adds	r2, r3, #2
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801aaec:	b29b      	uxth	r3, r3
 801aaee:	3b01      	subs	r3, #1
 801aaf0:	b29a      	uxth	r2, r3
 801aaf2:	68fb      	ldr	r3, [r7, #12]
 801aaf4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801aaf6:	e056      	b.n	801aba6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	689b      	ldr	r3, [r3, #8]
 801aafe:	f003 0302 	and.w	r3, r3, #2
 801ab02:	2b02      	cmp	r3, #2
 801ab04:	d11b      	bne.n	801ab3e <HAL_SPI_TransmitReceive+0x1aa>
 801ab06:	68fb      	ldr	r3, [r7, #12]
 801ab08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ab0a:	b29b      	uxth	r3, r3
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d016      	beq.n	801ab3e <HAL_SPI_TransmitReceive+0x1aa>
 801ab10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab12:	2b01      	cmp	r3, #1
 801ab14:	d113      	bne.n	801ab3e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ab16:	68fb      	ldr	r3, [r7, #12]
 801ab18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab1a:	881a      	ldrh	r2, [r3, #0]
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab26:	1c9a      	adds	r2, r3, #2
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ab30:	b29b      	uxth	r3, r3
 801ab32:	3b01      	subs	r3, #1
 801ab34:	b29a      	uxth	r2, r3
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801ab3a:	2300      	movs	r3, #0
 801ab3c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	689b      	ldr	r3, [r3, #8]
 801ab44:	f003 0301 	and.w	r3, r3, #1
 801ab48:	2b01      	cmp	r3, #1
 801ab4a:	d11c      	bne.n	801ab86 <HAL_SPI_TransmitReceive+0x1f2>
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ab52:	b29b      	uxth	r3, r3
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d016      	beq.n	801ab86 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801ab58:	68fb      	ldr	r3, [r7, #12]
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	68da      	ldr	r2, [r3, #12]
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab62:	b292      	uxth	r2, r2
 801ab64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab6a:	1c9a      	adds	r2, r3, #2
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ab76:	b29b      	uxth	r3, r3
 801ab78:	3b01      	subs	r3, #1
 801ab7a:	b29a      	uxth	r2, r3
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801ab82:	2301      	movs	r3, #1
 801ab84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801ab86:	f7fa fef5 	bl	8015974 <HAL_GetTick>
 801ab8a:	4602      	mov	r2, r0
 801ab8c:	69fb      	ldr	r3, [r7, #28]
 801ab8e:	1ad3      	subs	r3, r2, r3
 801ab90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ab92:	429a      	cmp	r2, r3
 801ab94:	d807      	bhi.n	801aba6 <HAL_SPI_TransmitReceive+0x212>
 801ab96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab98:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab9c:	d003      	beq.n	801aba6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801ab9e:	2303      	movs	r3, #3
 801aba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801aba4:	e0fb      	b.n	801ad9e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801abaa:	b29b      	uxth	r3, r3
 801abac:	2b00      	cmp	r3, #0
 801abae:	d1a3      	bne.n	801aaf8 <HAL_SPI_TransmitReceive+0x164>
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801abb6:	b29b      	uxth	r3, r3
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d19d      	bne.n	801aaf8 <HAL_SPI_TransmitReceive+0x164>
 801abbc:	e0df      	b.n	801ad7e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801abbe:	68fb      	ldr	r3, [r7, #12]
 801abc0:	685b      	ldr	r3, [r3, #4]
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d003      	beq.n	801abce <HAL_SPI_TransmitReceive+0x23a>
 801abc6:	8a7b      	ldrh	r3, [r7, #18]
 801abc8:	2b01      	cmp	r3, #1
 801abca:	f040 80cb 	bne.w	801ad64 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801abce:	68fb      	ldr	r3, [r7, #12]
 801abd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801abd2:	b29b      	uxth	r3, r3
 801abd4:	2b01      	cmp	r3, #1
 801abd6:	d912      	bls.n	801abfe <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801abdc:	881a      	ldrh	r2, [r3, #0]
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801abe8:	1c9a      	adds	r2, r3, #2
 801abea:	68fb      	ldr	r3, [r7, #12]
 801abec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801abf2:	b29b      	uxth	r3, r3
 801abf4:	3b02      	subs	r3, #2
 801abf6:	b29a      	uxth	r2, r3
 801abf8:	68fb      	ldr	r3, [r7, #12]
 801abfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 801abfc:	e0b2      	b.n	801ad64 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ac02:	68fb      	ldr	r3, [r7, #12]
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	330c      	adds	r3, #12
 801ac08:	7812      	ldrb	r2, [r2, #0]
 801ac0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac10:	1c5a      	adds	r2, r3, #1
 801ac12:	68fb      	ldr	r3, [r7, #12]
 801ac14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ac1a:	b29b      	uxth	r3, r3
 801ac1c:	3b01      	subs	r3, #1
 801ac1e:	b29a      	uxth	r2, r3
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ac24:	e09e      	b.n	801ad64 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	689b      	ldr	r3, [r3, #8]
 801ac2c:	f003 0302 	and.w	r3, r3, #2
 801ac30:	2b02      	cmp	r3, #2
 801ac32:	d134      	bne.n	801ac9e <HAL_SPI_TransmitReceive+0x30a>
 801ac34:	68fb      	ldr	r3, [r7, #12]
 801ac36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ac38:	b29b      	uxth	r3, r3
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d02f      	beq.n	801ac9e <HAL_SPI_TransmitReceive+0x30a>
 801ac3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac40:	2b01      	cmp	r3, #1
 801ac42:	d12c      	bne.n	801ac9e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ac48:	b29b      	uxth	r3, r3
 801ac4a:	2b01      	cmp	r3, #1
 801ac4c:	d912      	bls.n	801ac74 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac52:	881a      	ldrh	r2, [r3, #0]
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac5e:	1c9a      	adds	r2, r3, #2
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ac68:	b29b      	uxth	r3, r3
 801ac6a:	3b02      	subs	r3, #2
 801ac6c:	b29a      	uxth	r2, r3
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	87da      	strh	r2, [r3, #62]	; 0x3e
 801ac72:	e012      	b.n	801ac9a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ac78:	68fb      	ldr	r3, [r7, #12]
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	330c      	adds	r3, #12
 801ac7e:	7812      	ldrb	r2, [r2, #0]
 801ac80:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac86:	1c5a      	adds	r2, r3, #1
 801ac88:	68fb      	ldr	r3, [r7, #12]
 801ac8a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801ac8c:	68fb      	ldr	r3, [r7, #12]
 801ac8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ac90:	b29b      	uxth	r3, r3
 801ac92:	3b01      	subs	r3, #1
 801ac94:	b29a      	uxth	r2, r3
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801ac9a:	2300      	movs	r3, #0
 801ac9c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801ac9e:	68fb      	ldr	r3, [r7, #12]
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	689b      	ldr	r3, [r3, #8]
 801aca4:	f003 0301 	and.w	r3, r3, #1
 801aca8:	2b01      	cmp	r3, #1
 801acaa:	d148      	bne.n	801ad3e <HAL_SPI_TransmitReceive+0x3aa>
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801acb2:	b29b      	uxth	r3, r3
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d042      	beq.n	801ad3e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801acbe:	b29b      	uxth	r3, r3
 801acc0:	2b01      	cmp	r3, #1
 801acc2:	d923      	bls.n	801ad0c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	68da      	ldr	r2, [r3, #12]
 801acca:	68fb      	ldr	r3, [r7, #12]
 801accc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801acce:	b292      	uxth	r2, r2
 801acd0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801acd6:	1c9a      	adds	r2, r3, #2
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ace2:	b29b      	uxth	r3, r3
 801ace4:	3b02      	subs	r3, #2
 801ace6:	b29a      	uxth	r2, r3
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801acee:	68fb      	ldr	r3, [r7, #12]
 801acf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801acf4:	b29b      	uxth	r3, r3
 801acf6:	2b01      	cmp	r3, #1
 801acf8:	d81f      	bhi.n	801ad3a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	685a      	ldr	r2, [r3, #4]
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	681b      	ldr	r3, [r3, #0]
 801ad04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ad08:	605a      	str	r2, [r3, #4]
 801ad0a:	e016      	b.n	801ad3a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	f103 020c 	add.w	r2, r3, #12
 801ad14:	68fb      	ldr	r3, [r7, #12]
 801ad16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad18:	7812      	ldrb	r2, [r2, #0]
 801ad1a:	b2d2      	uxtb	r2, r2
 801ad1c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad22:	1c5a      	adds	r2, r3, #1
 801ad24:	68fb      	ldr	r3, [r7, #12]
 801ad26:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801ad28:	68fb      	ldr	r3, [r7, #12]
 801ad2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ad2e:	b29b      	uxth	r3, r3
 801ad30:	3b01      	subs	r3, #1
 801ad32:	b29a      	uxth	r2, r3
 801ad34:	68fb      	ldr	r3, [r7, #12]
 801ad36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801ad3a:	2301      	movs	r3, #1
 801ad3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801ad3e:	f7fa fe19 	bl	8015974 <HAL_GetTick>
 801ad42:	4602      	mov	r2, r0
 801ad44:	69fb      	ldr	r3, [r7, #28]
 801ad46:	1ad3      	subs	r3, r2, r3
 801ad48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ad4a:	429a      	cmp	r2, r3
 801ad4c:	d803      	bhi.n	801ad56 <HAL_SPI_TransmitReceive+0x3c2>
 801ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad50:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad54:	d102      	bne.n	801ad5c <HAL_SPI_TransmitReceive+0x3c8>
 801ad56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d103      	bne.n	801ad64 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801ad5c:	2303      	movs	r3, #3
 801ad5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801ad62:	e01c      	b.n	801ad9e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ad68:	b29b      	uxth	r3, r3
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	f47f af5b 	bne.w	801ac26 <HAL_SPI_TransmitReceive+0x292>
 801ad70:	68fb      	ldr	r3, [r7, #12]
 801ad72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ad76:	b29b      	uxth	r3, r3
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	f47f af54 	bne.w	801ac26 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801ad7e:	69fa      	ldr	r2, [r7, #28]
 801ad80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ad82:	68f8      	ldr	r0, [r7, #12]
 801ad84:	f000 f9b4 	bl	801b0f0 <SPI_EndRxTxTransaction>
 801ad88:	4603      	mov	r3, r0
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d006      	beq.n	801ad9c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801ad8e:	2301      	movs	r3, #1
 801ad90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801ad94:	68fb      	ldr	r3, [r7, #12]
 801ad96:	2220      	movs	r2, #32
 801ad98:	661a      	str	r2, [r3, #96]	; 0x60
 801ad9a:	e000      	b.n	801ad9e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801ad9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801ad9e:	68fb      	ldr	r3, [r7, #12]
 801ada0:	2201      	movs	r2, #1
 801ada2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	2200      	movs	r2, #0
 801adaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801adae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801adb2:	4618      	mov	r0, r3
 801adb4:	3728      	adds	r7, #40	; 0x28
 801adb6:	46bd      	mov	sp, r7
 801adb8:	bd80      	pop	{r7, pc}
	...

0801adbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801adbc:	b580      	push	{r7, lr}
 801adbe:	b088      	sub	sp, #32
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	60f8      	str	r0, [r7, #12]
 801adc4:	60b9      	str	r1, [r7, #8]
 801adc6:	603b      	str	r3, [r7, #0]
 801adc8:	4613      	mov	r3, r2
 801adca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801adcc:	f7fa fdd2 	bl	8015974 <HAL_GetTick>
 801add0:	4602      	mov	r2, r0
 801add2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801add4:	1a9b      	subs	r3, r3, r2
 801add6:	683a      	ldr	r2, [r7, #0]
 801add8:	4413      	add	r3, r2
 801adda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801addc:	f7fa fdca 	bl	8015974 <HAL_GetTick>
 801ade0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801ade2:	4b39      	ldr	r3, [pc, #228]	; (801aec8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	015b      	lsls	r3, r3, #5
 801ade8:	0d1b      	lsrs	r3, r3, #20
 801adea:	69fa      	ldr	r2, [r7, #28]
 801adec:	fb02 f303 	mul.w	r3, r2, r3
 801adf0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801adf2:	e054      	b.n	801ae9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801adf4:	683b      	ldr	r3, [r7, #0]
 801adf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801adfa:	d050      	beq.n	801ae9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801adfc:	f7fa fdba 	bl	8015974 <HAL_GetTick>
 801ae00:	4602      	mov	r2, r0
 801ae02:	69bb      	ldr	r3, [r7, #24]
 801ae04:	1ad3      	subs	r3, r2, r3
 801ae06:	69fa      	ldr	r2, [r7, #28]
 801ae08:	429a      	cmp	r2, r3
 801ae0a:	d902      	bls.n	801ae12 <SPI_WaitFlagStateUntilTimeout+0x56>
 801ae0c:	69fb      	ldr	r3, [r7, #28]
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d13d      	bne.n	801ae8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	685a      	ldr	r2, [r3, #4]
 801ae18:	68fb      	ldr	r3, [r7, #12]
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ae20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ae22:	68fb      	ldr	r3, [r7, #12]
 801ae24:	685b      	ldr	r3, [r3, #4]
 801ae26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ae2a:	d111      	bne.n	801ae50 <SPI_WaitFlagStateUntilTimeout+0x94>
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	689b      	ldr	r3, [r3, #8]
 801ae30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ae34:	d004      	beq.n	801ae40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ae36:	68fb      	ldr	r3, [r7, #12]
 801ae38:	689b      	ldr	r3, [r3, #8]
 801ae3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ae3e:	d107      	bne.n	801ae50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801ae40:	68fb      	ldr	r3, [r7, #12]
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	681a      	ldr	r2, [r3, #0]
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ae4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ae58:	d10f      	bne.n	801ae7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	681a      	ldr	r2, [r3, #0]
 801ae60:	68fb      	ldr	r3, [r7, #12]
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801ae68:	601a      	str	r2, [r3, #0]
 801ae6a:	68fb      	ldr	r3, [r7, #12]
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	681a      	ldr	r2, [r3, #0]
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	681b      	ldr	r3, [r3, #0]
 801ae74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ae78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	2201      	movs	r2, #1
 801ae7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	2200      	movs	r2, #0
 801ae86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801ae8a:	2303      	movs	r3, #3
 801ae8c:	e017      	b.n	801aebe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801ae8e:	697b      	ldr	r3, [r7, #20]
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d101      	bne.n	801ae98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801ae94:	2300      	movs	r3, #0
 801ae96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801ae98:	697b      	ldr	r3, [r7, #20]
 801ae9a:	3b01      	subs	r3, #1
 801ae9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	689a      	ldr	r2, [r3, #8]
 801aea4:	68bb      	ldr	r3, [r7, #8]
 801aea6:	4013      	ands	r3, r2
 801aea8:	68ba      	ldr	r2, [r7, #8]
 801aeaa:	429a      	cmp	r2, r3
 801aeac:	bf0c      	ite	eq
 801aeae:	2301      	moveq	r3, #1
 801aeb0:	2300      	movne	r3, #0
 801aeb2:	b2db      	uxtb	r3, r3
 801aeb4:	461a      	mov	r2, r3
 801aeb6:	79fb      	ldrb	r3, [r7, #7]
 801aeb8:	429a      	cmp	r2, r3
 801aeba:	d19b      	bne.n	801adf4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801aebc:	2300      	movs	r3, #0
}
 801aebe:	4618      	mov	r0, r3
 801aec0:	3720      	adds	r7, #32
 801aec2:	46bd      	mov	sp, r7
 801aec4:	bd80      	pop	{r7, pc}
 801aec6:	bf00      	nop
 801aec8:	2000011c 	.word	0x2000011c

0801aecc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801aecc:	b580      	push	{r7, lr}
 801aece:	b08a      	sub	sp, #40	; 0x28
 801aed0:	af00      	add	r7, sp, #0
 801aed2:	60f8      	str	r0, [r7, #12]
 801aed4:	60b9      	str	r1, [r7, #8]
 801aed6:	607a      	str	r2, [r7, #4]
 801aed8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801aeda:	2300      	movs	r3, #0
 801aedc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801aede:	f7fa fd49 	bl	8015974 <HAL_GetTick>
 801aee2:	4602      	mov	r2, r0
 801aee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aee6:	1a9b      	subs	r3, r3, r2
 801aee8:	683a      	ldr	r2, [r7, #0]
 801aeea:	4413      	add	r3, r2
 801aeec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801aeee:	f7fa fd41 	bl	8015974 <HAL_GetTick>
 801aef2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801aef4:	68fb      	ldr	r3, [r7, #12]
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	330c      	adds	r3, #12
 801aefa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801aefc:	4b3d      	ldr	r3, [pc, #244]	; (801aff4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801aefe:	681a      	ldr	r2, [r3, #0]
 801af00:	4613      	mov	r3, r2
 801af02:	009b      	lsls	r3, r3, #2
 801af04:	4413      	add	r3, r2
 801af06:	00da      	lsls	r2, r3, #3
 801af08:	1ad3      	subs	r3, r2, r3
 801af0a:	0d1b      	lsrs	r3, r3, #20
 801af0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801af0e:	fb02 f303 	mul.w	r3, r2, r3
 801af12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801af14:	e060      	b.n	801afd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801af16:	68bb      	ldr	r3, [r7, #8]
 801af18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801af1c:	d107      	bne.n	801af2e <SPI_WaitFifoStateUntilTimeout+0x62>
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d104      	bne.n	801af2e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801af24:	69fb      	ldr	r3, [r7, #28]
 801af26:	781b      	ldrb	r3, [r3, #0]
 801af28:	b2db      	uxtb	r3, r3
 801af2a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801af2c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801af2e:	683b      	ldr	r3, [r7, #0]
 801af30:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af34:	d050      	beq.n	801afd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801af36:	f7fa fd1d 	bl	8015974 <HAL_GetTick>
 801af3a:	4602      	mov	r2, r0
 801af3c:	6a3b      	ldr	r3, [r7, #32]
 801af3e:	1ad3      	subs	r3, r2, r3
 801af40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801af42:	429a      	cmp	r2, r3
 801af44:	d902      	bls.n	801af4c <SPI_WaitFifoStateUntilTimeout+0x80>
 801af46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d13d      	bne.n	801afc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	685a      	ldr	r2, [r3, #4]
 801af52:	68fb      	ldr	r3, [r7, #12]
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801af5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	685b      	ldr	r3, [r3, #4]
 801af60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801af64:	d111      	bne.n	801af8a <SPI_WaitFifoStateUntilTimeout+0xbe>
 801af66:	68fb      	ldr	r3, [r7, #12]
 801af68:	689b      	ldr	r3, [r3, #8]
 801af6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801af6e:	d004      	beq.n	801af7a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	689b      	ldr	r3, [r3, #8]
 801af74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801af78:	d107      	bne.n	801af8a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	681a      	ldr	r2, [r3, #0]
 801af80:	68fb      	ldr	r3, [r7, #12]
 801af82:	681b      	ldr	r3, [r3, #0]
 801af84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801af88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801af92:	d10f      	bne.n	801afb4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	681a      	ldr	r2, [r3, #0]
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801afa2:	601a      	str	r2, [r3, #0]
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	681a      	ldr	r2, [r3, #0]
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801afb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	2201      	movs	r2, #1
 801afb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801afbc:	68fb      	ldr	r3, [r7, #12]
 801afbe:	2200      	movs	r2, #0
 801afc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801afc4:	2303      	movs	r3, #3
 801afc6:	e010      	b.n	801afea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801afc8:	69bb      	ldr	r3, [r7, #24]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d101      	bne.n	801afd2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801afce:	2300      	movs	r3, #0
 801afd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801afd2:	69bb      	ldr	r3, [r7, #24]
 801afd4:	3b01      	subs	r3, #1
 801afd6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	689a      	ldr	r2, [r3, #8]
 801afde:	68bb      	ldr	r3, [r7, #8]
 801afe0:	4013      	ands	r3, r2
 801afe2:	687a      	ldr	r2, [r7, #4]
 801afe4:	429a      	cmp	r2, r3
 801afe6:	d196      	bne.n	801af16 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801afe8:	2300      	movs	r3, #0
}
 801afea:	4618      	mov	r0, r3
 801afec:	3728      	adds	r7, #40	; 0x28
 801afee:	46bd      	mov	sp, r7
 801aff0:	bd80      	pop	{r7, pc}
 801aff2:	bf00      	nop
 801aff4:	2000011c 	.word	0x2000011c

0801aff8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801aff8:	b580      	push	{r7, lr}
 801affa:	b088      	sub	sp, #32
 801affc:	af02      	add	r7, sp, #8
 801affe:	60f8      	str	r0, [r7, #12]
 801b000:	60b9      	str	r1, [r7, #8]
 801b002:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	685b      	ldr	r3, [r3, #4]
 801b008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801b00c:	d111      	bne.n	801b032 <SPI_EndRxTransaction+0x3a>
 801b00e:	68fb      	ldr	r3, [r7, #12]
 801b010:	689b      	ldr	r3, [r3, #8]
 801b012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b016:	d004      	beq.n	801b022 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801b018:	68fb      	ldr	r3, [r7, #12]
 801b01a:	689b      	ldr	r3, [r3, #8]
 801b01c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b020:	d107      	bne.n	801b032 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801b022:	68fb      	ldr	r3, [r7, #12]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	681a      	ldr	r2, [r3, #0]
 801b028:	68fb      	ldr	r3, [r7, #12]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801b030:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801b032:	68fb      	ldr	r3, [r7, #12]
 801b034:	685b      	ldr	r3, [r3, #4]
 801b036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801b03a:	d112      	bne.n	801b062 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	9300      	str	r3, [sp, #0]
 801b040:	68bb      	ldr	r3, [r7, #8]
 801b042:	2200      	movs	r2, #0
 801b044:	2180      	movs	r1, #128	; 0x80
 801b046:	68f8      	ldr	r0, [r7, #12]
 801b048:	f7ff feb8 	bl	801adbc <SPI_WaitFlagStateUntilTimeout>
 801b04c:	4603      	mov	r3, r0
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d021      	beq.n	801b096 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b052:	68fb      	ldr	r3, [r7, #12]
 801b054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b056:	f043 0220 	orr.w	r2, r3, #32
 801b05a:	68fb      	ldr	r3, [r7, #12]
 801b05c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801b05e:	2303      	movs	r3, #3
 801b060:	e03d      	b.n	801b0de <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801b062:	4b21      	ldr	r3, [pc, #132]	; (801b0e8 <SPI_EndRxTransaction+0xf0>)
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	4a21      	ldr	r2, [pc, #132]	; (801b0ec <SPI_EndRxTransaction+0xf4>)
 801b068:	fba2 2303 	umull	r2, r3, r2, r3
 801b06c:	0d5b      	lsrs	r3, r3, #21
 801b06e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b072:	fb02 f303 	mul.w	r3, r2, r3
 801b076:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801b078:	697b      	ldr	r3, [r7, #20]
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d00a      	beq.n	801b094 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 801b07e:	697b      	ldr	r3, [r7, #20]
 801b080:	3b01      	subs	r3, #1
 801b082:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801b084:	68fb      	ldr	r3, [r7, #12]
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	689b      	ldr	r3, [r3, #8]
 801b08a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b08e:	2b80      	cmp	r3, #128	; 0x80
 801b090:	d0f2      	beq.n	801b078 <SPI_EndRxTransaction+0x80>
 801b092:	e000      	b.n	801b096 <SPI_EndRxTransaction+0x9e>
        break;
 801b094:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801b096:	68fb      	ldr	r3, [r7, #12]
 801b098:	685b      	ldr	r3, [r3, #4]
 801b09a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801b09e:	d11d      	bne.n	801b0dc <SPI_EndRxTransaction+0xe4>
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	689b      	ldr	r3, [r3, #8]
 801b0a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b0a8:	d004      	beq.n	801b0b4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	689b      	ldr	r3, [r3, #8]
 801b0ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b0b2:	d113      	bne.n	801b0dc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	9300      	str	r3, [sp, #0]
 801b0b8:	68bb      	ldr	r3, [r7, #8]
 801b0ba:	2200      	movs	r2, #0
 801b0bc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801b0c0:	68f8      	ldr	r0, [r7, #12]
 801b0c2:	f7ff ff03 	bl	801aecc <SPI_WaitFifoStateUntilTimeout>
 801b0c6:	4603      	mov	r3, r0
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d007      	beq.n	801b0dc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b0d0:	f043 0220 	orr.w	r2, r3, #32
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801b0d8:	2303      	movs	r3, #3
 801b0da:	e000      	b.n	801b0de <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801b0dc:	2300      	movs	r3, #0
}
 801b0de:	4618      	mov	r0, r3
 801b0e0:	3718      	adds	r7, #24
 801b0e2:	46bd      	mov	sp, r7
 801b0e4:	bd80      	pop	{r7, pc}
 801b0e6:	bf00      	nop
 801b0e8:	2000011c 	.word	0x2000011c
 801b0ec:	165e9f81 	.word	0x165e9f81

0801b0f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801b0f0:	b580      	push	{r7, lr}
 801b0f2:	b088      	sub	sp, #32
 801b0f4:	af02      	add	r7, sp, #8
 801b0f6:	60f8      	str	r0, [r7, #12]
 801b0f8:	60b9      	str	r1, [r7, #8]
 801b0fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	9300      	str	r3, [sp, #0]
 801b100:	68bb      	ldr	r3, [r7, #8]
 801b102:	2200      	movs	r2, #0
 801b104:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801b108:	68f8      	ldr	r0, [r7, #12]
 801b10a:	f7ff fedf 	bl	801aecc <SPI_WaitFifoStateUntilTimeout>
 801b10e:	4603      	mov	r3, r0
 801b110:	2b00      	cmp	r3, #0
 801b112:	d007      	beq.n	801b124 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b118:	f043 0220 	orr.w	r2, r3, #32
 801b11c:	68fb      	ldr	r3, [r7, #12]
 801b11e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801b120:	2303      	movs	r3, #3
 801b122:	e046      	b.n	801b1b2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801b124:	4b25      	ldr	r3, [pc, #148]	; (801b1bc <SPI_EndRxTxTransaction+0xcc>)
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	4a25      	ldr	r2, [pc, #148]	; (801b1c0 <SPI_EndRxTxTransaction+0xd0>)
 801b12a:	fba2 2303 	umull	r2, r3, r2, r3
 801b12e:	0d5b      	lsrs	r3, r3, #21
 801b130:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b134:	fb02 f303 	mul.w	r3, r2, r3
 801b138:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	685b      	ldr	r3, [r3, #4]
 801b13e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801b142:	d112      	bne.n	801b16a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	9300      	str	r3, [sp, #0]
 801b148:	68bb      	ldr	r3, [r7, #8]
 801b14a:	2200      	movs	r2, #0
 801b14c:	2180      	movs	r1, #128	; 0x80
 801b14e:	68f8      	ldr	r0, [r7, #12]
 801b150:	f7ff fe34 	bl	801adbc <SPI_WaitFlagStateUntilTimeout>
 801b154:	4603      	mov	r3, r0
 801b156:	2b00      	cmp	r3, #0
 801b158:	d016      	beq.n	801b188 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b15a:	68fb      	ldr	r3, [r7, #12]
 801b15c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b15e:	f043 0220 	orr.w	r2, r3, #32
 801b162:	68fb      	ldr	r3, [r7, #12]
 801b164:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801b166:	2303      	movs	r3, #3
 801b168:	e023      	b.n	801b1b2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801b16a:	697b      	ldr	r3, [r7, #20]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d00a      	beq.n	801b186 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 801b170:	697b      	ldr	r3, [r7, #20]
 801b172:	3b01      	subs	r3, #1
 801b174:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	681b      	ldr	r3, [r3, #0]
 801b17a:	689b      	ldr	r3, [r3, #8]
 801b17c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b180:	2b80      	cmp	r3, #128	; 0x80
 801b182:	d0f2      	beq.n	801b16a <SPI_EndRxTxTransaction+0x7a>
 801b184:	e000      	b.n	801b188 <SPI_EndRxTxTransaction+0x98>
        break;
 801b186:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	9300      	str	r3, [sp, #0]
 801b18c:	68bb      	ldr	r3, [r7, #8]
 801b18e:	2200      	movs	r2, #0
 801b190:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801b194:	68f8      	ldr	r0, [r7, #12]
 801b196:	f7ff fe99 	bl	801aecc <SPI_WaitFifoStateUntilTimeout>
 801b19a:	4603      	mov	r3, r0
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d007      	beq.n	801b1b0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b1a0:	68fb      	ldr	r3, [r7, #12]
 801b1a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b1a4:	f043 0220 	orr.w	r2, r3, #32
 801b1a8:	68fb      	ldr	r3, [r7, #12]
 801b1aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801b1ac:	2303      	movs	r3, #3
 801b1ae:	e000      	b.n	801b1b2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 801b1b0:	2300      	movs	r3, #0
}
 801b1b2:	4618      	mov	r0, r3
 801b1b4:	3718      	adds	r7, #24
 801b1b6:	46bd      	mov	sp, r7
 801b1b8:	bd80      	pop	{r7, pc}
 801b1ba:	bf00      	nop
 801b1bc:	2000011c 	.word	0x2000011c
 801b1c0:	165e9f81 	.word	0x165e9f81

0801b1c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801b1c4:	b580      	push	{r7, lr}
 801b1c6:	b082      	sub	sp, #8
 801b1c8:	af00      	add	r7, sp, #0
 801b1ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	691b      	ldr	r3, [r3, #16]
 801b1d2:	f003 0302 	and.w	r3, r3, #2
 801b1d6:	2b02      	cmp	r3, #2
 801b1d8:	d128      	bne.n	801b22c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	68db      	ldr	r3, [r3, #12]
 801b1e0:	f003 0302 	and.w	r3, r3, #2
 801b1e4:	2b02      	cmp	r3, #2
 801b1e6:	d121      	bne.n	801b22c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	f06f 0202 	mvn.w	r2, #2
 801b1f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	2201      	movs	r2, #1
 801b1f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	699b      	ldr	r3, [r3, #24]
 801b1fe:	f003 0303 	and.w	r3, r3, #3
 801b202:	2b00      	cmp	r3, #0
 801b204:	d005      	beq.n	801b212 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b20c:	6878      	ldr	r0, [r7, #4]
 801b20e:	4798      	blx	r3
 801b210:	e009      	b.n	801b226 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b218:	6878      	ldr	r0, [r7, #4]
 801b21a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b222:	6878      	ldr	r0, [r7, #4]
 801b224:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	2200      	movs	r2, #0
 801b22a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	691b      	ldr	r3, [r3, #16]
 801b232:	f003 0304 	and.w	r3, r3, #4
 801b236:	2b04      	cmp	r3, #4
 801b238:	d128      	bne.n	801b28c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	68db      	ldr	r3, [r3, #12]
 801b240:	f003 0304 	and.w	r3, r3, #4
 801b244:	2b04      	cmp	r3, #4
 801b246:	d121      	bne.n	801b28c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	f06f 0204 	mvn.w	r2, #4
 801b250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	2202      	movs	r2, #2
 801b256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	699b      	ldr	r3, [r3, #24]
 801b25e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b262:	2b00      	cmp	r3, #0
 801b264:	d005      	beq.n	801b272 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b26c:	6878      	ldr	r0, [r7, #4]
 801b26e:	4798      	blx	r3
 801b270:	e009      	b.n	801b286 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b278:	6878      	ldr	r0, [r7, #4]
 801b27a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b282:	6878      	ldr	r0, [r7, #4]
 801b284:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	2200      	movs	r2, #0
 801b28a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	691b      	ldr	r3, [r3, #16]
 801b292:	f003 0308 	and.w	r3, r3, #8
 801b296:	2b08      	cmp	r3, #8
 801b298:	d128      	bne.n	801b2ec <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	68db      	ldr	r3, [r3, #12]
 801b2a0:	f003 0308 	and.w	r3, r3, #8
 801b2a4:	2b08      	cmp	r3, #8
 801b2a6:	d121      	bne.n	801b2ec <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	f06f 0208 	mvn.w	r2, #8
 801b2b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	2204      	movs	r2, #4
 801b2b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	681b      	ldr	r3, [r3, #0]
 801b2bc:	69db      	ldr	r3, [r3, #28]
 801b2be:	f003 0303 	and.w	r3, r3, #3
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d005      	beq.n	801b2d2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b2cc:	6878      	ldr	r0, [r7, #4]
 801b2ce:	4798      	blx	r3
 801b2d0:	e009      	b.n	801b2e6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b2d8:	6878      	ldr	r0, [r7, #4]
 801b2da:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b2e2:	6878      	ldr	r0, [r7, #4]
 801b2e4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	2200      	movs	r2, #0
 801b2ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	691b      	ldr	r3, [r3, #16]
 801b2f2:	f003 0310 	and.w	r3, r3, #16
 801b2f6:	2b10      	cmp	r3, #16
 801b2f8:	d128      	bne.n	801b34c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	68db      	ldr	r3, [r3, #12]
 801b300:	f003 0310 	and.w	r3, r3, #16
 801b304:	2b10      	cmp	r3, #16
 801b306:	d121      	bne.n	801b34c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	f06f 0210 	mvn.w	r2, #16
 801b310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	2208      	movs	r2, #8
 801b316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	69db      	ldr	r3, [r3, #28]
 801b31e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b322:	2b00      	cmp	r3, #0
 801b324:	d005      	beq.n	801b332 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b32c:	6878      	ldr	r0, [r7, #4]
 801b32e:	4798      	blx	r3
 801b330:	e009      	b.n	801b346 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b338:	6878      	ldr	r0, [r7, #4]
 801b33a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b342:	6878      	ldr	r0, [r7, #4]
 801b344:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	2200      	movs	r2, #0
 801b34a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	691b      	ldr	r3, [r3, #16]
 801b352:	f003 0301 	and.w	r3, r3, #1
 801b356:	2b01      	cmp	r3, #1
 801b358:	d110      	bne.n	801b37c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	68db      	ldr	r3, [r3, #12]
 801b360:	f003 0301 	and.w	r3, r3, #1
 801b364:	2b01      	cmp	r3, #1
 801b366:	d109      	bne.n	801b37c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	f06f 0201 	mvn.w	r2, #1
 801b370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b378:	6878      	ldr	r0, [r7, #4]
 801b37a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	691b      	ldr	r3, [r3, #16]
 801b382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b386:	2b80      	cmp	r3, #128	; 0x80
 801b388:	d110      	bne.n	801b3ac <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	681b      	ldr	r3, [r3, #0]
 801b38e:	68db      	ldr	r3, [r3, #12]
 801b390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b394:	2b80      	cmp	r3, #128	; 0x80
 801b396:	d109      	bne.n	801b3ac <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801b3a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b3a8:	6878      	ldr	r0, [r7, #4]
 801b3aa:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	691b      	ldr	r3, [r3, #16]
 801b3b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b3b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b3ba:	d110      	bne.n	801b3de <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	68db      	ldr	r3, [r3, #12]
 801b3c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b3c6:	2b80      	cmp	r3, #128	; 0x80
 801b3c8:	d109      	bne.n	801b3de <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801b3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b3da:	6878      	ldr	r0, [r7, #4]
 801b3dc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	691b      	ldr	r3, [r3, #16]
 801b3e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3e8:	2b40      	cmp	r3, #64	; 0x40
 801b3ea:	d110      	bne.n	801b40e <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	68db      	ldr	r3, [r3, #12]
 801b3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3f6:	2b40      	cmp	r3, #64	; 0x40
 801b3f8:	d109      	bne.n	801b40e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801b402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b40a:	6878      	ldr	r0, [r7, #4]
 801b40c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	691b      	ldr	r3, [r3, #16]
 801b414:	f003 0320 	and.w	r3, r3, #32
 801b418:	2b20      	cmp	r3, #32
 801b41a:	d110      	bne.n	801b43e <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	68db      	ldr	r3, [r3, #12]
 801b422:	f003 0320 	and.w	r3, r3, #32
 801b426:	2b20      	cmp	r3, #32
 801b428:	d109      	bne.n	801b43e <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	f06f 0220 	mvn.w	r2, #32
 801b432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b43a:	6878      	ldr	r0, [r7, #4]
 801b43c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801b43e:	bf00      	nop
 801b440:	3708      	adds	r7, #8
 801b442:	46bd      	mov	sp, r7
 801b444:	bd80      	pop	{r7, pc}
	...

0801b448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b448:	b580      	push	{r7, lr}
 801b44a:	b082      	sub	sp, #8
 801b44c:	af00      	add	r7, sp, #0
 801b44e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	2b00      	cmp	r3, #0
 801b454:	d101      	bne.n	801b45a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b456:	2301      	movs	r3, #1
 801b458:	e04e      	b.n	801b4f8 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d114      	bne.n	801b48c <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	2200      	movs	r2, #0
 801b466:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801b46a:	6878      	ldr	r0, [r7, #4]
 801b46c:	f000 fc1c 	bl	801bca8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b476:	2b00      	cmp	r3, #0
 801b478:	d103      	bne.n	801b482 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	4a20      	ldr	r2, [pc, #128]	; (801b500 <HAL_UART_Init+0xb8>)
 801b47e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b488:	6878      	ldr	r0, [r7, #4]
 801b48a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	2224      	movs	r2, #36	; 0x24
 801b490:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	681a      	ldr	r2, [r3, #0]
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	f022 0201 	bic.w	r2, r2, #1
 801b4a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801b4a2:	6878      	ldr	r0, [r7, #4]
 801b4a4:	f000 fc46 	bl	801bd34 <UART_SetConfig>
 801b4a8:	4603      	mov	r3, r0
 801b4aa:	2b01      	cmp	r3, #1
 801b4ac:	d101      	bne.n	801b4b2 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 801b4ae:	2301      	movs	r3, #1
 801b4b0:	e022      	b.n	801b4f8 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d002      	beq.n	801b4c0 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 801b4ba:	6878      	ldr	r0, [r7, #4]
 801b4bc:	f000 fe9e 	bl	801c1fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	685a      	ldr	r2, [r3, #4]
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b4ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	689a      	ldr	r2, [r3, #8]
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b4de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	681a      	ldr	r2, [r3, #0]
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	f042 0201 	orr.w	r2, r2, #1
 801b4ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801b4f0:	6878      	ldr	r0, [r7, #4]
 801b4f2:	f000 ff25 	bl	801c340 <UART_CheckIdleState>
 801b4f6:	4603      	mov	r3, r0
}
 801b4f8:	4618      	mov	r0, r3
 801b4fa:	3708      	adds	r7, #8
 801b4fc:	46bd      	mov	sp, r7
 801b4fe:	bd80      	pop	{r7, pc}
 801b500:	08014d6d 	.word	0x08014d6d

0801b504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b504:	b580      	push	{r7, lr}
 801b506:	b08a      	sub	sp, #40	; 0x28
 801b508:	af02      	add	r7, sp, #8
 801b50a:	60f8      	str	r0, [r7, #12]
 801b50c:	60b9      	str	r1, [r7, #8]
 801b50e:	603b      	str	r3, [r7, #0]
 801b510:	4613      	mov	r3, r2
 801b512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b514:	68fb      	ldr	r3, [r7, #12]
 801b516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b518:	2b20      	cmp	r3, #32
 801b51a:	d171      	bne.n	801b600 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801b51c:	68bb      	ldr	r3, [r7, #8]
 801b51e:	2b00      	cmp	r3, #0
 801b520:	d002      	beq.n	801b528 <HAL_UART_Transmit+0x24>
 801b522:	88fb      	ldrh	r3, [r7, #6]
 801b524:	2b00      	cmp	r3, #0
 801b526:	d101      	bne.n	801b52c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801b528:	2301      	movs	r3, #1
 801b52a:	e06a      	b.n	801b602 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	2200      	movs	r2, #0
 801b530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b534:	68fb      	ldr	r3, [r7, #12]
 801b536:	2221      	movs	r2, #33	; 0x21
 801b538:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801b53a:	f7fa fa1b 	bl	8015974 <HAL_GetTick>
 801b53e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	88fa      	ldrh	r2, [r7, #6]
 801b544:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	88fa      	ldrh	r2, [r7, #6]
 801b54c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	689b      	ldr	r3, [r3, #8]
 801b554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b558:	d108      	bne.n	801b56c <HAL_UART_Transmit+0x68>
 801b55a:	68fb      	ldr	r3, [r7, #12]
 801b55c:	691b      	ldr	r3, [r3, #16]
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d104      	bne.n	801b56c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801b562:	2300      	movs	r3, #0
 801b564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801b566:	68bb      	ldr	r3, [r7, #8]
 801b568:	61bb      	str	r3, [r7, #24]
 801b56a:	e003      	b.n	801b574 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801b56c:	68bb      	ldr	r3, [r7, #8]
 801b56e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801b570:	2300      	movs	r3, #0
 801b572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801b574:	e02c      	b.n	801b5d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b576:	683b      	ldr	r3, [r7, #0]
 801b578:	9300      	str	r3, [sp, #0]
 801b57a:	697b      	ldr	r3, [r7, #20]
 801b57c:	2200      	movs	r2, #0
 801b57e:	2180      	movs	r1, #128	; 0x80
 801b580:	68f8      	ldr	r0, [r7, #12]
 801b582:	f000 ff2a 	bl	801c3da <UART_WaitOnFlagUntilTimeout>
 801b586:	4603      	mov	r3, r0
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d001      	beq.n	801b590 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801b58c:	2303      	movs	r3, #3
 801b58e:	e038      	b.n	801b602 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801b590:	69fb      	ldr	r3, [r7, #28]
 801b592:	2b00      	cmp	r3, #0
 801b594:	d10b      	bne.n	801b5ae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801b596:	69bb      	ldr	r3, [r7, #24]
 801b598:	881b      	ldrh	r3, [r3, #0]
 801b59a:	461a      	mov	r2, r3
 801b59c:	68fb      	ldr	r3, [r7, #12]
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b5a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801b5a6:	69bb      	ldr	r3, [r7, #24]
 801b5a8:	3302      	adds	r3, #2
 801b5aa:	61bb      	str	r3, [r7, #24]
 801b5ac:	e007      	b.n	801b5be <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801b5ae:	69fb      	ldr	r3, [r7, #28]
 801b5b0:	781a      	ldrb	r2, [r3, #0]
 801b5b2:	68fb      	ldr	r3, [r7, #12]
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801b5b8:	69fb      	ldr	r3, [r7, #28]
 801b5ba:	3301      	adds	r3, #1
 801b5bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801b5c4:	b29b      	uxth	r3, r3
 801b5c6:	3b01      	subs	r3, #1
 801b5c8:	b29a      	uxth	r2, r3
 801b5ca:	68fb      	ldr	r3, [r7, #12]
 801b5cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801b5d0:	68fb      	ldr	r3, [r7, #12]
 801b5d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801b5d6:	b29b      	uxth	r3, r3
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d1cc      	bne.n	801b576 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801b5dc:	683b      	ldr	r3, [r7, #0]
 801b5de:	9300      	str	r3, [sp, #0]
 801b5e0:	697b      	ldr	r3, [r7, #20]
 801b5e2:	2200      	movs	r2, #0
 801b5e4:	2140      	movs	r1, #64	; 0x40
 801b5e6:	68f8      	ldr	r0, [r7, #12]
 801b5e8:	f000 fef7 	bl	801c3da <UART_WaitOnFlagUntilTimeout>
 801b5ec:	4603      	mov	r3, r0
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d001      	beq.n	801b5f6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801b5f2:	2303      	movs	r3, #3
 801b5f4:	e005      	b.n	801b602 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801b5f6:	68fb      	ldr	r3, [r7, #12]
 801b5f8:	2220      	movs	r2, #32
 801b5fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801b5fc:	2300      	movs	r3, #0
 801b5fe:	e000      	b.n	801b602 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801b600:	2302      	movs	r3, #2
  }
}
 801b602:	4618      	mov	r0, r3
 801b604:	3720      	adds	r7, #32
 801b606:	46bd      	mov	sp, r7
 801b608:	bd80      	pop	{r7, pc}
	...

0801b60c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801b60c:	b580      	push	{r7, lr}
 801b60e:	b0ba      	sub	sp, #232	; 0xe8
 801b610:	af00      	add	r7, sp, #0
 801b612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	681b      	ldr	r3, [r3, #0]
 801b618:	69db      	ldr	r3, [r3, #28]
 801b61a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	681b      	ldr	r3, [r3, #0]
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	681b      	ldr	r3, [r3, #0]
 801b62c:	689b      	ldr	r3, [r3, #8]
 801b62e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801b632:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801b636:	f640 030f 	movw	r3, #2063	; 0x80f
 801b63a:	4013      	ands	r3, r2
 801b63c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801b640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b644:	2b00      	cmp	r3, #0
 801b646:	d115      	bne.n	801b674 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801b648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b64c:	f003 0320 	and.w	r3, r3, #32
 801b650:	2b00      	cmp	r3, #0
 801b652:	d00f      	beq.n	801b674 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b658:	f003 0320 	and.w	r3, r3, #32
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d009      	beq.n	801b674 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b664:	2b00      	cmp	r3, #0
 801b666:	f000 82b8 	beq.w	801bbda <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b66e:	6878      	ldr	r0, [r7, #4]
 801b670:	4798      	blx	r3
      }
      return;
 801b672:	e2b2      	b.n	801bbda <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801b674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b678:	2b00      	cmp	r3, #0
 801b67a:	f000 811d 	beq.w	801b8b8 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801b67e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b682:	f003 0301 	and.w	r3, r3, #1
 801b686:	2b00      	cmp	r3, #0
 801b688:	d106      	bne.n	801b698 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801b68a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801b68e:	4b88      	ldr	r3, [pc, #544]	; (801b8b0 <HAL_UART_IRQHandler+0x2a4>)
 801b690:	4013      	ands	r3, r2
 801b692:	2b00      	cmp	r3, #0
 801b694:	f000 8110 	beq.w	801b8b8 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801b698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b69c:	f003 0301 	and.w	r3, r3, #1
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	d011      	beq.n	801b6c8 <HAL_UART_IRQHandler+0xbc>
 801b6a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b6a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d00b      	beq.n	801b6c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	2201      	movs	r2, #1
 801b6b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b6be:	f043 0201 	orr.w	r2, r3, #1
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b6c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b6cc:	f003 0302 	and.w	r3, r3, #2
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d011      	beq.n	801b6f8 <HAL_UART_IRQHandler+0xec>
 801b6d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b6d8:	f003 0301 	and.w	r3, r3, #1
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d00b      	beq.n	801b6f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	2202      	movs	r2, #2
 801b6e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b6ee:	f043 0204 	orr.w	r2, r3, #4
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b6f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b6fc:	f003 0304 	and.w	r3, r3, #4
 801b700:	2b00      	cmp	r3, #0
 801b702:	d011      	beq.n	801b728 <HAL_UART_IRQHandler+0x11c>
 801b704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b708:	f003 0301 	and.w	r3, r3, #1
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d00b      	beq.n	801b728 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	2204      	movs	r2, #4
 801b716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b71e:	f043 0202 	orr.w	r2, r3, #2
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801b728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b72c:	f003 0308 	and.w	r3, r3, #8
 801b730:	2b00      	cmp	r3, #0
 801b732:	d017      	beq.n	801b764 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b738:	f003 0320 	and.w	r3, r3, #32
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d105      	bne.n	801b74c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801b740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b744:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d00b      	beq.n	801b764 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	2208      	movs	r2, #8
 801b752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b75a:	f043 0208 	orr.w	r2, r3, #8
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801b764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d012      	beq.n	801b796 <HAL_UART_IRQHandler+0x18a>
 801b770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d00c      	beq.n	801b796 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b77c:	687b      	ldr	r3, [r7, #4]
 801b77e:	681b      	ldr	r3, [r3, #0]
 801b780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b78c:	f043 0220 	orr.w	r2, r3, #32
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	f000 821e 	beq.w	801bbde <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801b7a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b7a6:	f003 0320 	and.w	r3, r3, #32
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d00d      	beq.n	801b7ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b7ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b7b2:	f003 0320 	and.w	r3, r3, #32
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d007      	beq.n	801b7ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d003      	beq.n	801b7ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b7c6:	6878      	ldr	r0, [r7, #4]
 801b7c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b7d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	689b      	ldr	r3, [r3, #8]
 801b7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b7de:	2b40      	cmp	r3, #64	; 0x40
 801b7e0:	d005      	beq.n	801b7ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801b7e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b7e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d053      	beq.n	801b896 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b7ee:	6878      	ldr	r0, [r7, #4]
 801b7f0:	f000 ff80 	bl	801c6f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	681b      	ldr	r3, [r3, #0]
 801b7f8:	689b      	ldr	r3, [r3, #8]
 801b7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b7fe:	2b40      	cmp	r3, #64	; 0x40
 801b800:	d143      	bne.n	801b88a <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	3308      	adds	r3, #8
 801b808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b80c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b810:	e853 3f00 	ldrex	r3, [r3]
 801b814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801b818:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b81c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b820:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	3308      	adds	r3, #8
 801b82a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801b82e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801b832:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b836:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b83a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b83e:	e841 2300 	strex	r3, r2, [r1]
 801b842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801b846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d1d9      	bne.n	801b802 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b852:	2b00      	cmp	r3, #0
 801b854:	d013      	beq.n	801b87e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b856:	687b      	ldr	r3, [r7, #4]
 801b858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b85a:	4a16      	ldr	r2, [pc, #88]	; (801b8b4 <HAL_UART_IRQHandler+0x2a8>)
 801b85c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b862:	4618      	mov	r0, r3
 801b864:	f7fb f98a 	bl	8016b7c <HAL_DMA_Abort_IT>
 801b868:	4603      	mov	r3, r0
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d01d      	beq.n	801b8aa <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b874:	687a      	ldr	r2, [r7, #4]
 801b876:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801b878:	4610      	mov	r0, r2
 801b87a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b87c:	e015      	b.n	801b8aa <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b884:	6878      	ldr	r0, [r7, #4]
 801b886:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b888:	e00f      	b.n	801b8aa <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b890:	6878      	ldr	r0, [r7, #4]
 801b892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b894:	e009      	b.n	801b8aa <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b89c:	6878      	ldr	r0, [r7, #4]
 801b89e:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	2200      	movs	r2, #0
 801b8a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801b8a8:	e199      	b.n	801bbde <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b8aa:	bf00      	nop
    return;
 801b8ac:	e197      	b.n	801bbde <HAL_UART_IRQHandler+0x5d2>
 801b8ae:	bf00      	nop
 801b8b0:	04000120 	.word	0x04000120
 801b8b4:	0801c7bd 	.word	0x0801c7bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b8bc:	2b01      	cmp	r3, #1
 801b8be:	f040 8150 	bne.w	801bb62 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b8c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b8c6:	f003 0310 	and.w	r3, r3, #16
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	f000 8149 	beq.w	801bb62 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b8d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b8d4:	f003 0310 	and.w	r3, r3, #16
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	f000 8142 	beq.w	801bb62 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	2210      	movs	r2, #16
 801b8e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	681b      	ldr	r3, [r3, #0]
 801b8ea:	689b      	ldr	r3, [r3, #8]
 801b8ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b8f0:	2b40      	cmp	r3, #64	; 0x40
 801b8f2:	f040 80b8 	bne.w	801ba66 <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	685b      	ldr	r3, [r3, #4]
 801b8fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801b902:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801b906:	2b00      	cmp	r3, #0
 801b908:	f000 816b 	beq.w	801bbe2 <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801b912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b916:	429a      	cmp	r2, r3
 801b918:	f080 8163 	bcs.w	801bbe2 <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b922:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b92a:	69db      	ldr	r3, [r3, #28]
 801b92c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b930:	f000 8086 	beq.w	801ba40 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b93c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b940:	e853 3f00 	ldrex	r3, [r3]
 801b944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801b948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b94c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b950:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	461a      	mov	r2, r3
 801b95a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b95e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b962:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b966:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801b96a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b96e:	e841 2300 	strex	r3, r2, [r1]
 801b972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801b976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d1da      	bne.n	801b934 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	3308      	adds	r3, #8
 801b984:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b988:	e853 3f00 	ldrex	r3, [r3]
 801b98c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801b98e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b990:	f023 0301 	bic.w	r3, r3, #1
 801b994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	3308      	adds	r3, #8
 801b99e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b9a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801b9a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b9a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801b9aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b9ae:	e841 2300 	strex	r3, r2, [r1]
 801b9b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801b9b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d1e1      	bne.n	801b97e <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	3308      	adds	r3, #8
 801b9c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b9c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b9c4:	e853 3f00 	ldrex	r3, [r3]
 801b9c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801b9ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b9cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b9d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	3308      	adds	r3, #8
 801b9da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801b9de:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b9e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b9e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801b9e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b9e6:	e841 2300 	strex	r3, r2, [r1]
 801b9ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801b9ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d1e3      	bne.n	801b9ba <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	2220      	movs	r2, #32
 801b9f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	2200      	movs	r2, #0
 801b9fe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ba08:	e853 3f00 	ldrex	r3, [r3]
 801ba0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801ba0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ba10:	f023 0310 	bic.w	r3, r3, #16
 801ba14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	461a      	mov	r2, r3
 801ba1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ba22:	65bb      	str	r3, [r7, #88]	; 0x58
 801ba24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ba28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ba2a:	e841 2300 	strex	r3, r2, [r1]
 801ba2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801ba30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	d1e4      	bne.n	801ba00 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	f7fb f82e 	bl	8016a9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	2202      	movs	r2, #2
 801ba44:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801ba4c:	687a      	ldr	r2, [r7, #4]
 801ba4e:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 801ba52:	687a      	ldr	r2, [r7, #4]
 801ba54:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 801ba58:	b292      	uxth	r2, r2
 801ba5a:	1a8a      	subs	r2, r1, r2
 801ba5c:	b292      	uxth	r2, r2
 801ba5e:	4611      	mov	r1, r2
 801ba60:	6878      	ldr	r0, [r7, #4]
 801ba62:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801ba64:	e0bd      	b.n	801bbe2 <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801ba72:	b29b      	uxth	r3, r3
 801ba74:	1ad3      	subs	r3, r2, r3
 801ba76:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801ba80:	b29b      	uxth	r3, r3
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	f000 80af 	beq.w	801bbe6 <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 801ba88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	f000 80aa 	beq.w	801bbe6 <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba9a:	e853 3f00 	ldrex	r3, [r3]
 801ba9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801baa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801baa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801baa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	681b      	ldr	r3, [r3, #0]
 801baae:	461a      	mov	r2, r3
 801bab0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801bab4:	647b      	str	r3, [r7, #68]	; 0x44
 801bab6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bab8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801baba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801babc:	e841 2300 	strex	r3, r2, [r1]
 801bac0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801bac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d1e4      	bne.n	801ba92 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	3308      	adds	r3, #8
 801bace:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bad2:	e853 3f00 	ldrex	r3, [r3]
 801bad6:	623b      	str	r3, [r7, #32]
   return(result);
 801bad8:	6a3b      	ldr	r3, [r7, #32]
 801bada:	f023 0301 	bic.w	r3, r3, #1
 801bade:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	3308      	adds	r3, #8
 801bae8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801baec:	633a      	str	r2, [r7, #48]	; 0x30
 801baee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801baf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801baf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801baf4:	e841 2300 	strex	r3, r2, [r1]
 801baf8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801bafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d1e3      	bne.n	801bac8 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	2220      	movs	r2, #32
 801bb04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	2200      	movs	r2, #0
 801bb0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	2200      	movs	r2, #0
 801bb12:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb1a:	693b      	ldr	r3, [r7, #16]
 801bb1c:	e853 3f00 	ldrex	r3, [r3]
 801bb20:	60fb      	str	r3, [r7, #12]
   return(result);
 801bb22:	68fb      	ldr	r3, [r7, #12]
 801bb24:	f023 0310 	bic.w	r3, r3, #16
 801bb28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	461a      	mov	r2, r3
 801bb32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801bb36:	61fb      	str	r3, [r7, #28]
 801bb38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb3a:	69b9      	ldr	r1, [r7, #24]
 801bb3c:	69fa      	ldr	r2, [r7, #28]
 801bb3e:	e841 2300 	strex	r3, r2, [r1]
 801bb42:	617b      	str	r3, [r7, #20]
   return(result);
 801bb44:	697b      	ldr	r3, [r7, #20]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d1e4      	bne.n	801bb14 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	2202      	movs	r2, #2
 801bb4e:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801bb56:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801bb5a:	4611      	mov	r1, r2
 801bb5c:	6878      	ldr	r0, [r7, #4]
 801bb5e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801bb60:	e041      	b.n	801bbe6 <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801bb62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bb66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d010      	beq.n	801bb90 <HAL_UART_IRQHandler+0x584>
 801bb6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bb72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d00a      	beq.n	801bb90 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801bb82:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801bb8a:	6878      	ldr	r0, [r7, #4]
 801bb8c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801bb8e:	e02d      	b.n	801bbec <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801bb90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bb94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d00e      	beq.n	801bbba <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801bb9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d008      	beq.n	801bbba <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d01c      	beq.n	801bbea <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bbb4:	6878      	ldr	r0, [r7, #4]
 801bbb6:	4798      	blx	r3
    }
    return;
 801bbb8:	e017      	b.n	801bbea <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801bbba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d012      	beq.n	801bbec <HAL_UART_IRQHandler+0x5e0>
 801bbc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bbca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	d00c      	beq.n	801bbec <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 801bbd2:	6878      	ldr	r0, [r7, #4]
 801bbd4:	f000 fe0a 	bl	801c7ec <UART_EndTransmit_IT>
    return;
 801bbd8:	e008      	b.n	801bbec <HAL_UART_IRQHandler+0x5e0>
      return;
 801bbda:	bf00      	nop
 801bbdc:	e006      	b.n	801bbec <HAL_UART_IRQHandler+0x5e0>
    return;
 801bbde:	bf00      	nop
 801bbe0:	e004      	b.n	801bbec <HAL_UART_IRQHandler+0x5e0>
      return;
 801bbe2:	bf00      	nop
 801bbe4:	e002      	b.n	801bbec <HAL_UART_IRQHandler+0x5e0>
      return;
 801bbe6:	bf00      	nop
 801bbe8:	e000      	b.n	801bbec <HAL_UART_IRQHandler+0x5e0>
    return;
 801bbea:	bf00      	nop
  }

}
 801bbec:	37e8      	adds	r7, #232	; 0xe8
 801bbee:	46bd      	mov	sp, r7
 801bbf0:	bd80      	pop	{r7, pc}
 801bbf2:	bf00      	nop

0801bbf4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801bbf4:	b480      	push	{r7}
 801bbf6:	b083      	sub	sp, #12
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801bbfc:	bf00      	nop
 801bbfe:	370c      	adds	r7, #12
 801bc00:	46bd      	mov	sp, r7
 801bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc06:	4770      	bx	lr

0801bc08 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801bc08:	b480      	push	{r7}
 801bc0a:	b083      	sub	sp, #12
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801bc10:	bf00      	nop
 801bc12:	370c      	adds	r7, #12
 801bc14:	46bd      	mov	sp, r7
 801bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc1a:	4770      	bx	lr

0801bc1c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801bc1c:	b480      	push	{r7}
 801bc1e:	b083      	sub	sp, #12
 801bc20:	af00      	add	r7, sp, #0
 801bc22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801bc24:	bf00      	nop
 801bc26:	370c      	adds	r7, #12
 801bc28:	46bd      	mov	sp, r7
 801bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc2e:	4770      	bx	lr

0801bc30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801bc30:	b480      	push	{r7}
 801bc32:	b083      	sub	sp, #12
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801bc38:	bf00      	nop
 801bc3a:	370c      	adds	r7, #12
 801bc3c:	46bd      	mov	sp, r7
 801bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc42:	4770      	bx	lr

0801bc44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801bc44:	b480      	push	{r7}
 801bc46:	b083      	sub	sp, #12
 801bc48:	af00      	add	r7, sp, #0
 801bc4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801bc4c:	bf00      	nop
 801bc4e:	370c      	adds	r7, #12
 801bc50:	46bd      	mov	sp, r7
 801bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc56:	4770      	bx	lr

0801bc58 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801bc58:	b480      	push	{r7}
 801bc5a:	b083      	sub	sp, #12
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801bc60:	bf00      	nop
 801bc62:	370c      	adds	r7, #12
 801bc64:	46bd      	mov	sp, r7
 801bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc6a:	4770      	bx	lr

0801bc6c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801bc6c:	b480      	push	{r7}
 801bc6e:	b083      	sub	sp, #12
 801bc70:	af00      	add	r7, sp, #0
 801bc72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801bc74:	bf00      	nop
 801bc76:	370c      	adds	r7, #12
 801bc78:	46bd      	mov	sp, r7
 801bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc7e:	4770      	bx	lr

0801bc80 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801bc80:	b480      	push	{r7}
 801bc82:	b083      	sub	sp, #12
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801bc88:	bf00      	nop
 801bc8a:	370c      	adds	r7, #12
 801bc8c:	46bd      	mov	sp, r7
 801bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc92:	4770      	bx	lr

0801bc94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801bc94:	b480      	push	{r7}
 801bc96:	b083      	sub	sp, #12
 801bc98:	af00      	add	r7, sp, #0
 801bc9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801bc9c:	bf00      	nop
 801bc9e:	370c      	adds	r7, #12
 801bca0:	46bd      	mov	sp, r7
 801bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bca6:	4770      	bx	lr

0801bca8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801bca8:	b480      	push	{r7}
 801bcaa:	b083      	sub	sp, #12
 801bcac:	af00      	add	r7, sp, #0
 801bcae:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	4a16      	ldr	r2, [pc, #88]	; (801bd0c <UART_InitCallbacksToDefault+0x64>)
 801bcb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	4a15      	ldr	r2, [pc, #84]	; (801bd10 <UART_InitCallbacksToDefault+0x68>)
 801bcbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	4a14      	ldr	r2, [pc, #80]	; (801bd14 <UART_InitCallbacksToDefault+0x6c>)
 801bcc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	4a13      	ldr	r2, [pc, #76]	; (801bd18 <UART_InitCallbacksToDefault+0x70>)
 801bccc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	4a12      	ldr	r2, [pc, #72]	; (801bd1c <UART_InitCallbacksToDefault+0x74>)
 801bcd4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	4a11      	ldr	r2, [pc, #68]	; (801bd20 <UART_InitCallbacksToDefault+0x78>)
 801bcdc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	4a10      	ldr	r2, [pc, #64]	; (801bd24 <UART_InitCallbacksToDefault+0x7c>)
 801bce4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	4a0f      	ldr	r2, [pc, #60]	; (801bd28 <UART_InitCallbacksToDefault+0x80>)
 801bcec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	4a0e      	ldr	r2, [pc, #56]	; (801bd2c <UART_InitCallbacksToDefault+0x84>)
 801bcf4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	4a0d      	ldr	r2, [pc, #52]	; (801bd30 <UART_InitCallbacksToDefault+0x88>)
 801bcfc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 801bd00:	bf00      	nop
 801bd02:	370c      	adds	r7, #12
 801bd04:	46bd      	mov	sp, r7
 801bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd0a:	4770      	bx	lr
 801bd0c:	0801bc09 	.word	0x0801bc09
 801bd10:	0801bbf5 	.word	0x0801bbf5
 801bd14:	0801bc31 	.word	0x0801bc31
 801bd18:	0801bc1d 	.word	0x0801bc1d
 801bd1c:	0801bc45 	.word	0x0801bc45
 801bd20:	0801bc59 	.word	0x0801bc59
 801bd24:	0801bc6d 	.word	0x0801bc6d
 801bd28:	0801bc81 	.word	0x0801bc81
 801bd2c:	0801bc95 	.word	0x0801bc95
 801bd30:	080150d1 	.word	0x080150d1

0801bd34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801bd34:	b580      	push	{r7, lr}
 801bd36:	b088      	sub	sp, #32
 801bd38:	af00      	add	r7, sp, #0
 801bd3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801bd3c:	2300      	movs	r3, #0
 801bd3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	689a      	ldr	r2, [r3, #8]
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	691b      	ldr	r3, [r3, #16]
 801bd48:	431a      	orrs	r2, r3
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	695b      	ldr	r3, [r3, #20]
 801bd4e:	431a      	orrs	r2, r3
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	69db      	ldr	r3, [r3, #28]
 801bd54:	4313      	orrs	r3, r2
 801bd56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	681a      	ldr	r2, [r3, #0]
 801bd5e:	4ba6      	ldr	r3, [pc, #664]	; (801bff8 <UART_SetConfig+0x2c4>)
 801bd60:	4013      	ands	r3, r2
 801bd62:	687a      	ldr	r2, [r7, #4]
 801bd64:	6812      	ldr	r2, [r2, #0]
 801bd66:	6979      	ldr	r1, [r7, #20]
 801bd68:	430b      	orrs	r3, r1
 801bd6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	685b      	ldr	r3, [r3, #4]
 801bd72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	68da      	ldr	r2, [r3, #12]
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	430a      	orrs	r2, r1
 801bd80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	699b      	ldr	r3, [r3, #24]
 801bd86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	6a1b      	ldr	r3, [r3, #32]
 801bd8c:	697a      	ldr	r2, [r7, #20]
 801bd8e:	4313      	orrs	r3, r2
 801bd90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	681b      	ldr	r3, [r3, #0]
 801bd96:	689b      	ldr	r3, [r3, #8]
 801bd98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	681b      	ldr	r3, [r3, #0]
 801bda0:	697a      	ldr	r2, [r7, #20]
 801bda2:	430a      	orrs	r2, r1
 801bda4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	681b      	ldr	r3, [r3, #0]
 801bdaa:	4a94      	ldr	r2, [pc, #592]	; (801bffc <UART_SetConfig+0x2c8>)
 801bdac:	4293      	cmp	r3, r2
 801bdae:	d120      	bne.n	801bdf2 <UART_SetConfig+0xbe>
 801bdb0:	4b93      	ldr	r3, [pc, #588]	; (801c000 <UART_SetConfig+0x2cc>)
 801bdb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bdb6:	f003 0303 	and.w	r3, r3, #3
 801bdba:	2b03      	cmp	r3, #3
 801bdbc:	d816      	bhi.n	801bdec <UART_SetConfig+0xb8>
 801bdbe:	a201      	add	r2, pc, #4	; (adr r2, 801bdc4 <UART_SetConfig+0x90>)
 801bdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bdc4:	0801bdd5 	.word	0x0801bdd5
 801bdc8:	0801bde1 	.word	0x0801bde1
 801bdcc:	0801bddb 	.word	0x0801bddb
 801bdd0:	0801bde7 	.word	0x0801bde7
 801bdd4:	2301      	movs	r3, #1
 801bdd6:	77fb      	strb	r3, [r7, #31]
 801bdd8:	e150      	b.n	801c07c <UART_SetConfig+0x348>
 801bdda:	2302      	movs	r3, #2
 801bddc:	77fb      	strb	r3, [r7, #31]
 801bdde:	e14d      	b.n	801c07c <UART_SetConfig+0x348>
 801bde0:	2304      	movs	r3, #4
 801bde2:	77fb      	strb	r3, [r7, #31]
 801bde4:	e14a      	b.n	801c07c <UART_SetConfig+0x348>
 801bde6:	2308      	movs	r3, #8
 801bde8:	77fb      	strb	r3, [r7, #31]
 801bdea:	e147      	b.n	801c07c <UART_SetConfig+0x348>
 801bdec:	2310      	movs	r3, #16
 801bdee:	77fb      	strb	r3, [r7, #31]
 801bdf0:	e144      	b.n	801c07c <UART_SetConfig+0x348>
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	4a83      	ldr	r2, [pc, #524]	; (801c004 <UART_SetConfig+0x2d0>)
 801bdf8:	4293      	cmp	r3, r2
 801bdfa:	d132      	bne.n	801be62 <UART_SetConfig+0x12e>
 801bdfc:	4b80      	ldr	r3, [pc, #512]	; (801c000 <UART_SetConfig+0x2cc>)
 801bdfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801be02:	f003 030c 	and.w	r3, r3, #12
 801be06:	2b0c      	cmp	r3, #12
 801be08:	d828      	bhi.n	801be5c <UART_SetConfig+0x128>
 801be0a:	a201      	add	r2, pc, #4	; (adr r2, 801be10 <UART_SetConfig+0xdc>)
 801be0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be10:	0801be45 	.word	0x0801be45
 801be14:	0801be5d 	.word	0x0801be5d
 801be18:	0801be5d 	.word	0x0801be5d
 801be1c:	0801be5d 	.word	0x0801be5d
 801be20:	0801be51 	.word	0x0801be51
 801be24:	0801be5d 	.word	0x0801be5d
 801be28:	0801be5d 	.word	0x0801be5d
 801be2c:	0801be5d 	.word	0x0801be5d
 801be30:	0801be4b 	.word	0x0801be4b
 801be34:	0801be5d 	.word	0x0801be5d
 801be38:	0801be5d 	.word	0x0801be5d
 801be3c:	0801be5d 	.word	0x0801be5d
 801be40:	0801be57 	.word	0x0801be57
 801be44:	2300      	movs	r3, #0
 801be46:	77fb      	strb	r3, [r7, #31]
 801be48:	e118      	b.n	801c07c <UART_SetConfig+0x348>
 801be4a:	2302      	movs	r3, #2
 801be4c:	77fb      	strb	r3, [r7, #31]
 801be4e:	e115      	b.n	801c07c <UART_SetConfig+0x348>
 801be50:	2304      	movs	r3, #4
 801be52:	77fb      	strb	r3, [r7, #31]
 801be54:	e112      	b.n	801c07c <UART_SetConfig+0x348>
 801be56:	2308      	movs	r3, #8
 801be58:	77fb      	strb	r3, [r7, #31]
 801be5a:	e10f      	b.n	801c07c <UART_SetConfig+0x348>
 801be5c:	2310      	movs	r3, #16
 801be5e:	77fb      	strb	r3, [r7, #31]
 801be60:	e10c      	b.n	801c07c <UART_SetConfig+0x348>
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	4a68      	ldr	r2, [pc, #416]	; (801c008 <UART_SetConfig+0x2d4>)
 801be68:	4293      	cmp	r3, r2
 801be6a:	d120      	bne.n	801beae <UART_SetConfig+0x17a>
 801be6c:	4b64      	ldr	r3, [pc, #400]	; (801c000 <UART_SetConfig+0x2cc>)
 801be6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801be72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801be76:	2b30      	cmp	r3, #48	; 0x30
 801be78:	d013      	beq.n	801bea2 <UART_SetConfig+0x16e>
 801be7a:	2b30      	cmp	r3, #48	; 0x30
 801be7c:	d814      	bhi.n	801bea8 <UART_SetConfig+0x174>
 801be7e:	2b20      	cmp	r3, #32
 801be80:	d009      	beq.n	801be96 <UART_SetConfig+0x162>
 801be82:	2b20      	cmp	r3, #32
 801be84:	d810      	bhi.n	801bea8 <UART_SetConfig+0x174>
 801be86:	2b00      	cmp	r3, #0
 801be88:	d002      	beq.n	801be90 <UART_SetConfig+0x15c>
 801be8a:	2b10      	cmp	r3, #16
 801be8c:	d006      	beq.n	801be9c <UART_SetConfig+0x168>
 801be8e:	e00b      	b.n	801bea8 <UART_SetConfig+0x174>
 801be90:	2300      	movs	r3, #0
 801be92:	77fb      	strb	r3, [r7, #31]
 801be94:	e0f2      	b.n	801c07c <UART_SetConfig+0x348>
 801be96:	2302      	movs	r3, #2
 801be98:	77fb      	strb	r3, [r7, #31]
 801be9a:	e0ef      	b.n	801c07c <UART_SetConfig+0x348>
 801be9c:	2304      	movs	r3, #4
 801be9e:	77fb      	strb	r3, [r7, #31]
 801bea0:	e0ec      	b.n	801c07c <UART_SetConfig+0x348>
 801bea2:	2308      	movs	r3, #8
 801bea4:	77fb      	strb	r3, [r7, #31]
 801bea6:	e0e9      	b.n	801c07c <UART_SetConfig+0x348>
 801bea8:	2310      	movs	r3, #16
 801beaa:	77fb      	strb	r3, [r7, #31]
 801beac:	e0e6      	b.n	801c07c <UART_SetConfig+0x348>
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	4a56      	ldr	r2, [pc, #344]	; (801c00c <UART_SetConfig+0x2d8>)
 801beb4:	4293      	cmp	r3, r2
 801beb6:	d120      	bne.n	801befa <UART_SetConfig+0x1c6>
 801beb8:	4b51      	ldr	r3, [pc, #324]	; (801c000 <UART_SetConfig+0x2cc>)
 801beba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bebe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801bec2:	2bc0      	cmp	r3, #192	; 0xc0
 801bec4:	d013      	beq.n	801beee <UART_SetConfig+0x1ba>
 801bec6:	2bc0      	cmp	r3, #192	; 0xc0
 801bec8:	d814      	bhi.n	801bef4 <UART_SetConfig+0x1c0>
 801beca:	2b80      	cmp	r3, #128	; 0x80
 801becc:	d009      	beq.n	801bee2 <UART_SetConfig+0x1ae>
 801bece:	2b80      	cmp	r3, #128	; 0x80
 801bed0:	d810      	bhi.n	801bef4 <UART_SetConfig+0x1c0>
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d002      	beq.n	801bedc <UART_SetConfig+0x1a8>
 801bed6:	2b40      	cmp	r3, #64	; 0x40
 801bed8:	d006      	beq.n	801bee8 <UART_SetConfig+0x1b4>
 801beda:	e00b      	b.n	801bef4 <UART_SetConfig+0x1c0>
 801bedc:	2300      	movs	r3, #0
 801bede:	77fb      	strb	r3, [r7, #31]
 801bee0:	e0cc      	b.n	801c07c <UART_SetConfig+0x348>
 801bee2:	2302      	movs	r3, #2
 801bee4:	77fb      	strb	r3, [r7, #31]
 801bee6:	e0c9      	b.n	801c07c <UART_SetConfig+0x348>
 801bee8:	2304      	movs	r3, #4
 801beea:	77fb      	strb	r3, [r7, #31]
 801beec:	e0c6      	b.n	801c07c <UART_SetConfig+0x348>
 801beee:	2308      	movs	r3, #8
 801bef0:	77fb      	strb	r3, [r7, #31]
 801bef2:	e0c3      	b.n	801c07c <UART_SetConfig+0x348>
 801bef4:	2310      	movs	r3, #16
 801bef6:	77fb      	strb	r3, [r7, #31]
 801bef8:	e0c0      	b.n	801c07c <UART_SetConfig+0x348>
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	4a44      	ldr	r2, [pc, #272]	; (801c010 <UART_SetConfig+0x2dc>)
 801bf00:	4293      	cmp	r3, r2
 801bf02:	d125      	bne.n	801bf50 <UART_SetConfig+0x21c>
 801bf04:	4b3e      	ldr	r3, [pc, #248]	; (801c000 <UART_SetConfig+0x2cc>)
 801bf06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bf0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801bf0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bf12:	d017      	beq.n	801bf44 <UART_SetConfig+0x210>
 801bf14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bf18:	d817      	bhi.n	801bf4a <UART_SetConfig+0x216>
 801bf1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bf1e:	d00b      	beq.n	801bf38 <UART_SetConfig+0x204>
 801bf20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bf24:	d811      	bhi.n	801bf4a <UART_SetConfig+0x216>
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d003      	beq.n	801bf32 <UART_SetConfig+0x1fe>
 801bf2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bf2e:	d006      	beq.n	801bf3e <UART_SetConfig+0x20a>
 801bf30:	e00b      	b.n	801bf4a <UART_SetConfig+0x216>
 801bf32:	2300      	movs	r3, #0
 801bf34:	77fb      	strb	r3, [r7, #31]
 801bf36:	e0a1      	b.n	801c07c <UART_SetConfig+0x348>
 801bf38:	2302      	movs	r3, #2
 801bf3a:	77fb      	strb	r3, [r7, #31]
 801bf3c:	e09e      	b.n	801c07c <UART_SetConfig+0x348>
 801bf3e:	2304      	movs	r3, #4
 801bf40:	77fb      	strb	r3, [r7, #31]
 801bf42:	e09b      	b.n	801c07c <UART_SetConfig+0x348>
 801bf44:	2308      	movs	r3, #8
 801bf46:	77fb      	strb	r3, [r7, #31]
 801bf48:	e098      	b.n	801c07c <UART_SetConfig+0x348>
 801bf4a:	2310      	movs	r3, #16
 801bf4c:	77fb      	strb	r3, [r7, #31]
 801bf4e:	e095      	b.n	801c07c <UART_SetConfig+0x348>
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	4a2f      	ldr	r2, [pc, #188]	; (801c014 <UART_SetConfig+0x2e0>)
 801bf56:	4293      	cmp	r3, r2
 801bf58:	d125      	bne.n	801bfa6 <UART_SetConfig+0x272>
 801bf5a:	4b29      	ldr	r3, [pc, #164]	; (801c000 <UART_SetConfig+0x2cc>)
 801bf5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bf60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801bf64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801bf68:	d017      	beq.n	801bf9a <UART_SetConfig+0x266>
 801bf6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801bf6e:	d817      	bhi.n	801bfa0 <UART_SetConfig+0x26c>
 801bf70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bf74:	d00b      	beq.n	801bf8e <UART_SetConfig+0x25a>
 801bf76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bf7a:	d811      	bhi.n	801bfa0 <UART_SetConfig+0x26c>
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d003      	beq.n	801bf88 <UART_SetConfig+0x254>
 801bf80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bf84:	d006      	beq.n	801bf94 <UART_SetConfig+0x260>
 801bf86:	e00b      	b.n	801bfa0 <UART_SetConfig+0x26c>
 801bf88:	2301      	movs	r3, #1
 801bf8a:	77fb      	strb	r3, [r7, #31]
 801bf8c:	e076      	b.n	801c07c <UART_SetConfig+0x348>
 801bf8e:	2302      	movs	r3, #2
 801bf90:	77fb      	strb	r3, [r7, #31]
 801bf92:	e073      	b.n	801c07c <UART_SetConfig+0x348>
 801bf94:	2304      	movs	r3, #4
 801bf96:	77fb      	strb	r3, [r7, #31]
 801bf98:	e070      	b.n	801c07c <UART_SetConfig+0x348>
 801bf9a:	2308      	movs	r3, #8
 801bf9c:	77fb      	strb	r3, [r7, #31]
 801bf9e:	e06d      	b.n	801c07c <UART_SetConfig+0x348>
 801bfa0:	2310      	movs	r3, #16
 801bfa2:	77fb      	strb	r3, [r7, #31]
 801bfa4:	e06a      	b.n	801c07c <UART_SetConfig+0x348>
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	681b      	ldr	r3, [r3, #0]
 801bfaa:	4a1b      	ldr	r2, [pc, #108]	; (801c018 <UART_SetConfig+0x2e4>)
 801bfac:	4293      	cmp	r3, r2
 801bfae:	d138      	bne.n	801c022 <UART_SetConfig+0x2ee>
 801bfb0:	4b13      	ldr	r3, [pc, #76]	; (801c000 <UART_SetConfig+0x2cc>)
 801bfb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bfb6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801bfba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801bfbe:	d017      	beq.n	801bff0 <UART_SetConfig+0x2bc>
 801bfc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801bfc4:	d82a      	bhi.n	801c01c <UART_SetConfig+0x2e8>
 801bfc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801bfca:	d00b      	beq.n	801bfe4 <UART_SetConfig+0x2b0>
 801bfcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801bfd0:	d824      	bhi.n	801c01c <UART_SetConfig+0x2e8>
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d003      	beq.n	801bfde <UART_SetConfig+0x2aa>
 801bfd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bfda:	d006      	beq.n	801bfea <UART_SetConfig+0x2b6>
 801bfdc:	e01e      	b.n	801c01c <UART_SetConfig+0x2e8>
 801bfde:	2300      	movs	r3, #0
 801bfe0:	77fb      	strb	r3, [r7, #31]
 801bfe2:	e04b      	b.n	801c07c <UART_SetConfig+0x348>
 801bfe4:	2302      	movs	r3, #2
 801bfe6:	77fb      	strb	r3, [r7, #31]
 801bfe8:	e048      	b.n	801c07c <UART_SetConfig+0x348>
 801bfea:	2304      	movs	r3, #4
 801bfec:	77fb      	strb	r3, [r7, #31]
 801bfee:	e045      	b.n	801c07c <UART_SetConfig+0x348>
 801bff0:	2308      	movs	r3, #8
 801bff2:	77fb      	strb	r3, [r7, #31]
 801bff4:	e042      	b.n	801c07c <UART_SetConfig+0x348>
 801bff6:	bf00      	nop
 801bff8:	efff69f3 	.word	0xefff69f3
 801bffc:	40011000 	.word	0x40011000
 801c000:	40023800 	.word	0x40023800
 801c004:	40004400 	.word	0x40004400
 801c008:	40004800 	.word	0x40004800
 801c00c:	40004c00 	.word	0x40004c00
 801c010:	40005000 	.word	0x40005000
 801c014:	40011400 	.word	0x40011400
 801c018:	40007800 	.word	0x40007800
 801c01c:	2310      	movs	r3, #16
 801c01e:	77fb      	strb	r3, [r7, #31]
 801c020:	e02c      	b.n	801c07c <UART_SetConfig+0x348>
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	4a72      	ldr	r2, [pc, #456]	; (801c1f0 <UART_SetConfig+0x4bc>)
 801c028:	4293      	cmp	r3, r2
 801c02a:	d125      	bne.n	801c078 <UART_SetConfig+0x344>
 801c02c:	4b71      	ldr	r3, [pc, #452]	; (801c1f4 <UART_SetConfig+0x4c0>)
 801c02e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c032:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801c036:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801c03a:	d017      	beq.n	801c06c <UART_SetConfig+0x338>
 801c03c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801c040:	d817      	bhi.n	801c072 <UART_SetConfig+0x33e>
 801c042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c046:	d00b      	beq.n	801c060 <UART_SetConfig+0x32c>
 801c048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c04c:	d811      	bhi.n	801c072 <UART_SetConfig+0x33e>
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d003      	beq.n	801c05a <UART_SetConfig+0x326>
 801c052:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c056:	d006      	beq.n	801c066 <UART_SetConfig+0x332>
 801c058:	e00b      	b.n	801c072 <UART_SetConfig+0x33e>
 801c05a:	2300      	movs	r3, #0
 801c05c:	77fb      	strb	r3, [r7, #31]
 801c05e:	e00d      	b.n	801c07c <UART_SetConfig+0x348>
 801c060:	2302      	movs	r3, #2
 801c062:	77fb      	strb	r3, [r7, #31]
 801c064:	e00a      	b.n	801c07c <UART_SetConfig+0x348>
 801c066:	2304      	movs	r3, #4
 801c068:	77fb      	strb	r3, [r7, #31]
 801c06a:	e007      	b.n	801c07c <UART_SetConfig+0x348>
 801c06c:	2308      	movs	r3, #8
 801c06e:	77fb      	strb	r3, [r7, #31]
 801c070:	e004      	b.n	801c07c <UART_SetConfig+0x348>
 801c072:	2310      	movs	r3, #16
 801c074:	77fb      	strb	r3, [r7, #31]
 801c076:	e001      	b.n	801c07c <UART_SetConfig+0x348>
 801c078:	2310      	movs	r3, #16
 801c07a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	69db      	ldr	r3, [r3, #28]
 801c080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c084:	d15b      	bne.n	801c13e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801c086:	7ffb      	ldrb	r3, [r7, #31]
 801c088:	2b08      	cmp	r3, #8
 801c08a:	d828      	bhi.n	801c0de <UART_SetConfig+0x3aa>
 801c08c:	a201      	add	r2, pc, #4	; (adr r2, 801c094 <UART_SetConfig+0x360>)
 801c08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c092:	bf00      	nop
 801c094:	0801c0b9 	.word	0x0801c0b9
 801c098:	0801c0c1 	.word	0x0801c0c1
 801c09c:	0801c0c9 	.word	0x0801c0c9
 801c0a0:	0801c0df 	.word	0x0801c0df
 801c0a4:	0801c0cf 	.word	0x0801c0cf
 801c0a8:	0801c0df 	.word	0x0801c0df
 801c0ac:	0801c0df 	.word	0x0801c0df
 801c0b0:	0801c0df 	.word	0x0801c0df
 801c0b4:	0801c0d7 	.word	0x0801c0d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c0b8:	f7fd fc3e 	bl	8019938 <HAL_RCC_GetPCLK1Freq>
 801c0bc:	61b8      	str	r0, [r7, #24]
        break;
 801c0be:	e013      	b.n	801c0e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c0c0:	f7fd fc4e 	bl	8019960 <HAL_RCC_GetPCLK2Freq>
 801c0c4:	61b8      	str	r0, [r7, #24]
        break;
 801c0c6:	e00f      	b.n	801c0e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c0c8:	4b4b      	ldr	r3, [pc, #300]	; (801c1f8 <UART_SetConfig+0x4c4>)
 801c0ca:	61bb      	str	r3, [r7, #24]
        break;
 801c0cc:	e00c      	b.n	801c0e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c0ce:	f7fd fb61 	bl	8019794 <HAL_RCC_GetSysClockFreq>
 801c0d2:	61b8      	str	r0, [r7, #24]
        break;
 801c0d4:	e008      	b.n	801c0e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c0d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c0da:	61bb      	str	r3, [r7, #24]
        break;
 801c0dc:	e004      	b.n	801c0e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801c0de:	2300      	movs	r3, #0
 801c0e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801c0e2:	2301      	movs	r3, #1
 801c0e4:	77bb      	strb	r3, [r7, #30]
        break;
 801c0e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801c0e8:	69bb      	ldr	r3, [r7, #24]
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d074      	beq.n	801c1d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801c0ee:	69bb      	ldr	r3, [r7, #24]
 801c0f0:	005a      	lsls	r2, r3, #1
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	685b      	ldr	r3, [r3, #4]
 801c0f6:	085b      	lsrs	r3, r3, #1
 801c0f8:	441a      	add	r2, r3
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	685b      	ldr	r3, [r3, #4]
 801c0fe:	fbb2 f3f3 	udiv	r3, r2, r3
 801c102:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801c104:	693b      	ldr	r3, [r7, #16]
 801c106:	2b0f      	cmp	r3, #15
 801c108:	d916      	bls.n	801c138 <UART_SetConfig+0x404>
 801c10a:	693b      	ldr	r3, [r7, #16]
 801c10c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c110:	d212      	bcs.n	801c138 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801c112:	693b      	ldr	r3, [r7, #16]
 801c114:	b29b      	uxth	r3, r3
 801c116:	f023 030f 	bic.w	r3, r3, #15
 801c11a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801c11c:	693b      	ldr	r3, [r7, #16]
 801c11e:	085b      	lsrs	r3, r3, #1
 801c120:	b29b      	uxth	r3, r3
 801c122:	f003 0307 	and.w	r3, r3, #7
 801c126:	b29a      	uxth	r2, r3
 801c128:	89fb      	ldrh	r3, [r7, #14]
 801c12a:	4313      	orrs	r3, r2
 801c12c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	681b      	ldr	r3, [r3, #0]
 801c132:	89fa      	ldrh	r2, [r7, #14]
 801c134:	60da      	str	r2, [r3, #12]
 801c136:	e04f      	b.n	801c1d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801c138:	2301      	movs	r3, #1
 801c13a:	77bb      	strb	r3, [r7, #30]
 801c13c:	e04c      	b.n	801c1d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801c13e:	7ffb      	ldrb	r3, [r7, #31]
 801c140:	2b08      	cmp	r3, #8
 801c142:	d828      	bhi.n	801c196 <UART_SetConfig+0x462>
 801c144:	a201      	add	r2, pc, #4	; (adr r2, 801c14c <UART_SetConfig+0x418>)
 801c146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c14a:	bf00      	nop
 801c14c:	0801c171 	.word	0x0801c171
 801c150:	0801c179 	.word	0x0801c179
 801c154:	0801c181 	.word	0x0801c181
 801c158:	0801c197 	.word	0x0801c197
 801c15c:	0801c187 	.word	0x0801c187
 801c160:	0801c197 	.word	0x0801c197
 801c164:	0801c197 	.word	0x0801c197
 801c168:	0801c197 	.word	0x0801c197
 801c16c:	0801c18f 	.word	0x0801c18f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c170:	f7fd fbe2 	bl	8019938 <HAL_RCC_GetPCLK1Freq>
 801c174:	61b8      	str	r0, [r7, #24]
        break;
 801c176:	e013      	b.n	801c1a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c178:	f7fd fbf2 	bl	8019960 <HAL_RCC_GetPCLK2Freq>
 801c17c:	61b8      	str	r0, [r7, #24]
        break;
 801c17e:	e00f      	b.n	801c1a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c180:	4b1d      	ldr	r3, [pc, #116]	; (801c1f8 <UART_SetConfig+0x4c4>)
 801c182:	61bb      	str	r3, [r7, #24]
        break;
 801c184:	e00c      	b.n	801c1a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c186:	f7fd fb05 	bl	8019794 <HAL_RCC_GetSysClockFreq>
 801c18a:	61b8      	str	r0, [r7, #24]
        break;
 801c18c:	e008      	b.n	801c1a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c18e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c192:	61bb      	str	r3, [r7, #24]
        break;
 801c194:	e004      	b.n	801c1a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801c196:	2300      	movs	r3, #0
 801c198:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801c19a:	2301      	movs	r3, #1
 801c19c:	77bb      	strb	r3, [r7, #30]
        break;
 801c19e:	bf00      	nop
    }

    if (pclk != 0U)
 801c1a0:	69bb      	ldr	r3, [r7, #24]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d018      	beq.n	801c1d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	685b      	ldr	r3, [r3, #4]
 801c1aa:	085a      	lsrs	r2, r3, #1
 801c1ac:	69bb      	ldr	r3, [r7, #24]
 801c1ae:	441a      	add	r2, r3
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	685b      	ldr	r3, [r3, #4]
 801c1b4:	fbb2 f3f3 	udiv	r3, r2, r3
 801c1b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801c1ba:	693b      	ldr	r3, [r7, #16]
 801c1bc:	2b0f      	cmp	r3, #15
 801c1be:	d909      	bls.n	801c1d4 <UART_SetConfig+0x4a0>
 801c1c0:	693b      	ldr	r3, [r7, #16]
 801c1c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c1c6:	d205      	bcs.n	801c1d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801c1c8:	693b      	ldr	r3, [r7, #16]
 801c1ca:	b29a      	uxth	r2, r3
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	60da      	str	r2, [r3, #12]
 801c1d2:	e001      	b.n	801c1d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801c1d4:	2301      	movs	r3, #1
 801c1d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	2200      	movs	r2, #0
 801c1dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	2200      	movs	r2, #0
 801c1e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 801c1e4:	7fbb      	ldrb	r3, [r7, #30]
}
 801c1e6:	4618      	mov	r0, r3
 801c1e8:	3720      	adds	r7, #32
 801c1ea:	46bd      	mov	sp, r7
 801c1ec:	bd80      	pop	{r7, pc}
 801c1ee:	bf00      	nop
 801c1f0:	40007c00 	.word	0x40007c00
 801c1f4:	40023800 	.word	0x40023800
 801c1f8:	00f42400 	.word	0x00f42400

0801c1fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801c1fc:	b480      	push	{r7}
 801c1fe:	b083      	sub	sp, #12
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c208:	f003 0301 	and.w	r3, r3, #1
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d00a      	beq.n	801c226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	685b      	ldr	r3, [r3, #4]
 801c216:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	681b      	ldr	r3, [r3, #0]
 801c222:	430a      	orrs	r2, r1
 801c224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c22a:	f003 0302 	and.w	r3, r3, #2
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d00a      	beq.n	801c248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	685b      	ldr	r3, [r3, #4]
 801c238:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	681b      	ldr	r3, [r3, #0]
 801c244:	430a      	orrs	r2, r1
 801c246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c24c:	f003 0304 	and.w	r3, r3, #4
 801c250:	2b00      	cmp	r3, #0
 801c252:	d00a      	beq.n	801c26a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	685b      	ldr	r3, [r3, #4]
 801c25a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	430a      	orrs	r2, r1
 801c268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c26e:	f003 0308 	and.w	r3, r3, #8
 801c272:	2b00      	cmp	r3, #0
 801c274:	d00a      	beq.n	801c28c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	685b      	ldr	r3, [r3, #4]
 801c27c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	681b      	ldr	r3, [r3, #0]
 801c288:	430a      	orrs	r2, r1
 801c28a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c290:	f003 0310 	and.w	r3, r3, #16
 801c294:	2b00      	cmp	r3, #0
 801c296:	d00a      	beq.n	801c2ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	681b      	ldr	r3, [r3, #0]
 801c29c:	689b      	ldr	r3, [r3, #8]
 801c29e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	430a      	orrs	r2, r1
 801c2ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2b2:	f003 0320 	and.w	r3, r3, #32
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d00a      	beq.n	801c2d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	689b      	ldr	r3, [r3, #8]
 801c2c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	430a      	orrs	r2, r1
 801c2ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	d01a      	beq.n	801c312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	681b      	ldr	r3, [r3, #0]
 801c2e0:	685b      	ldr	r3, [r3, #4]
 801c2e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	681b      	ldr	r3, [r3, #0]
 801c2ee:	430a      	orrs	r2, r1
 801c2f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c2f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c2fa:	d10a      	bne.n	801c312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	681b      	ldr	r3, [r3, #0]
 801c300:	685b      	ldr	r3, [r3, #4]
 801c302:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	681b      	ldr	r3, [r3, #0]
 801c30e:	430a      	orrs	r2, r1
 801c310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d00a      	beq.n	801c334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	685b      	ldr	r3, [r3, #4]
 801c324:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	681b      	ldr	r3, [r3, #0]
 801c330:	430a      	orrs	r2, r1
 801c332:	605a      	str	r2, [r3, #4]
  }
}
 801c334:	bf00      	nop
 801c336:	370c      	adds	r7, #12
 801c338:	46bd      	mov	sp, r7
 801c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c33e:	4770      	bx	lr

0801c340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801c340:	b580      	push	{r7, lr}
 801c342:	b086      	sub	sp, #24
 801c344:	af02      	add	r7, sp, #8
 801c346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	2200      	movs	r2, #0
 801c34c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801c350:	f7f9 fb10 	bl	8015974 <HAL_GetTick>
 801c354:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	681b      	ldr	r3, [r3, #0]
 801c35c:	f003 0308 	and.w	r3, r3, #8
 801c360:	2b08      	cmp	r3, #8
 801c362:	d10e      	bne.n	801c382 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801c364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801c368:	9300      	str	r3, [sp, #0]
 801c36a:	68fb      	ldr	r3, [r7, #12]
 801c36c:	2200      	movs	r2, #0
 801c36e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801c372:	6878      	ldr	r0, [r7, #4]
 801c374:	f000 f831 	bl	801c3da <UART_WaitOnFlagUntilTimeout>
 801c378:	4603      	mov	r3, r0
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d001      	beq.n	801c382 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801c37e:	2303      	movs	r3, #3
 801c380:	e027      	b.n	801c3d2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	f003 0304 	and.w	r3, r3, #4
 801c38c:	2b04      	cmp	r3, #4
 801c38e:	d10e      	bne.n	801c3ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801c390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801c394:	9300      	str	r3, [sp, #0]
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	2200      	movs	r2, #0
 801c39a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801c39e:	6878      	ldr	r0, [r7, #4]
 801c3a0:	f000 f81b 	bl	801c3da <UART_WaitOnFlagUntilTimeout>
 801c3a4:	4603      	mov	r3, r0
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d001      	beq.n	801c3ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801c3aa:	2303      	movs	r3, #3
 801c3ac:	e011      	b.n	801c3d2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	2220      	movs	r2, #32
 801c3b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	2220      	movs	r2, #32
 801c3b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	2200      	movs	r2, #0
 801c3c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	2200      	movs	r2, #0
 801c3c6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	2200      	movs	r2, #0
 801c3cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 801c3d0:	2300      	movs	r3, #0
}
 801c3d2:	4618      	mov	r0, r3
 801c3d4:	3710      	adds	r7, #16
 801c3d6:	46bd      	mov	sp, r7
 801c3d8:	bd80      	pop	{r7, pc}

0801c3da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801c3da:	b580      	push	{r7, lr}
 801c3dc:	b09c      	sub	sp, #112	; 0x70
 801c3de:	af00      	add	r7, sp, #0
 801c3e0:	60f8      	str	r0, [r7, #12]
 801c3e2:	60b9      	str	r1, [r7, #8]
 801c3e4:	603b      	str	r3, [r7, #0]
 801c3e6:	4613      	mov	r3, r2
 801c3e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c3ea:	e0a7      	b.n	801c53c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c3ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3f2:	f000 80a3 	beq.w	801c53c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c3f6:	f7f9 fabd 	bl	8015974 <HAL_GetTick>
 801c3fa:	4602      	mov	r2, r0
 801c3fc:	683b      	ldr	r3, [r7, #0]
 801c3fe:	1ad3      	subs	r3, r2, r3
 801c400:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801c402:	429a      	cmp	r2, r3
 801c404:	d302      	bcc.n	801c40c <UART_WaitOnFlagUntilTimeout+0x32>
 801c406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d13f      	bne.n	801c48c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c40c:	68fb      	ldr	r3, [r7, #12]
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c414:	e853 3f00 	ldrex	r3, [r3]
 801c418:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801c41a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c41c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c420:	667b      	str	r3, [r7, #100]	; 0x64
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	461a      	mov	r2, r3
 801c428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c42a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c42c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c42e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c430:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c432:	e841 2300 	strex	r3, r2, [r1]
 801c436:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801c438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d1e6      	bne.n	801c40c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c43e:	68fb      	ldr	r3, [r7, #12]
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	3308      	adds	r3, #8
 801c444:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c448:	e853 3f00 	ldrex	r3, [r3]
 801c44c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c450:	f023 0301 	bic.w	r3, r3, #1
 801c454:	663b      	str	r3, [r7, #96]	; 0x60
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	3308      	adds	r3, #8
 801c45c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c45e:	64ba      	str	r2, [r7, #72]	; 0x48
 801c460:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c466:	e841 2300 	strex	r3, r2, [r1]
 801c46a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801c46c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d1e5      	bne.n	801c43e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	2220      	movs	r2, #32
 801c476:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	2220      	movs	r2, #32
 801c47c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	2200      	movs	r2, #0
 801c484:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 801c488:	2303      	movs	r3, #3
 801c48a:	e068      	b.n	801c55e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	f003 0304 	and.w	r3, r3, #4
 801c496:	2b00      	cmp	r3, #0
 801c498:	d050      	beq.n	801c53c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801c49a:	68fb      	ldr	r3, [r7, #12]
 801c49c:	681b      	ldr	r3, [r3, #0]
 801c49e:	69db      	ldr	r3, [r3, #28]
 801c4a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c4a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c4a8:	d148      	bne.n	801c53c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	681b      	ldr	r3, [r3, #0]
 801c4ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c4b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c4b4:	68fb      	ldr	r3, [r7, #12]
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4bc:	e853 3f00 	ldrex	r3, [r3]
 801c4c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c4c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c4ca:	68fb      	ldr	r3, [r7, #12]
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	461a      	mov	r2, r3
 801c4d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c4d2:	637b      	str	r3, [r7, #52]	; 0x34
 801c4d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c4d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c4da:	e841 2300 	strex	r3, r2, [r1]
 801c4de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d1e6      	bne.n	801c4b4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c4e6:	68fb      	ldr	r3, [r7, #12]
 801c4e8:	681b      	ldr	r3, [r3, #0]
 801c4ea:	3308      	adds	r3, #8
 801c4ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4ee:	697b      	ldr	r3, [r7, #20]
 801c4f0:	e853 3f00 	ldrex	r3, [r3]
 801c4f4:	613b      	str	r3, [r7, #16]
   return(result);
 801c4f6:	693b      	ldr	r3, [r7, #16]
 801c4f8:	f023 0301 	bic.w	r3, r3, #1
 801c4fc:	66bb      	str	r3, [r7, #104]	; 0x68
 801c4fe:	68fb      	ldr	r3, [r7, #12]
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	3308      	adds	r3, #8
 801c504:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c506:	623a      	str	r2, [r7, #32]
 801c508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c50a:	69f9      	ldr	r1, [r7, #28]
 801c50c:	6a3a      	ldr	r2, [r7, #32]
 801c50e:	e841 2300 	strex	r3, r2, [r1]
 801c512:	61bb      	str	r3, [r7, #24]
   return(result);
 801c514:	69bb      	ldr	r3, [r7, #24]
 801c516:	2b00      	cmp	r3, #0
 801c518:	d1e5      	bne.n	801c4e6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801c51a:	68fb      	ldr	r3, [r7, #12]
 801c51c:	2220      	movs	r2, #32
 801c51e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	2220      	movs	r2, #32
 801c524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	2220      	movs	r2, #32
 801c52c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	2200      	movs	r2, #0
 801c534:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801c538:	2303      	movs	r3, #3
 801c53a:	e010      	b.n	801c55e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	681b      	ldr	r3, [r3, #0]
 801c540:	69da      	ldr	r2, [r3, #28]
 801c542:	68bb      	ldr	r3, [r7, #8]
 801c544:	4013      	ands	r3, r2
 801c546:	68ba      	ldr	r2, [r7, #8]
 801c548:	429a      	cmp	r2, r3
 801c54a:	bf0c      	ite	eq
 801c54c:	2301      	moveq	r3, #1
 801c54e:	2300      	movne	r3, #0
 801c550:	b2db      	uxtb	r3, r3
 801c552:	461a      	mov	r2, r3
 801c554:	79fb      	ldrb	r3, [r7, #7]
 801c556:	429a      	cmp	r2, r3
 801c558:	f43f af48 	beq.w	801c3ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801c55c:	2300      	movs	r3, #0
}
 801c55e:	4618      	mov	r0, r3
 801c560:	3770      	adds	r7, #112	; 0x70
 801c562:	46bd      	mov	sp, r7
 801c564:	bd80      	pop	{r7, pc}
	...

0801c568 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c568:	b480      	push	{r7}
 801c56a:	b097      	sub	sp, #92	; 0x5c
 801c56c:	af00      	add	r7, sp, #0
 801c56e:	60f8      	str	r0, [r7, #12]
 801c570:	60b9      	str	r1, [r7, #8]
 801c572:	4613      	mov	r3, r2
 801c574:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	68ba      	ldr	r2, [r7, #8]
 801c57a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801c57c:	68fb      	ldr	r3, [r7, #12]
 801c57e:	88fa      	ldrh	r2, [r7, #6]
 801c580:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801c584:	68fb      	ldr	r3, [r7, #12]
 801c586:	88fa      	ldrh	r2, [r7, #6]
 801c588:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801c58c:	68fb      	ldr	r3, [r7, #12]
 801c58e:	2200      	movs	r2, #0
 801c590:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801c592:	68fb      	ldr	r3, [r7, #12]
 801c594:	689b      	ldr	r3, [r3, #8]
 801c596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c59a:	d10e      	bne.n	801c5ba <UART_Start_Receive_IT+0x52>
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	691b      	ldr	r3, [r3, #16]
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d105      	bne.n	801c5b0 <UART_Start_Receive_IT+0x48>
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 801c5aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c5ae:	e02d      	b.n	801c60c <UART_Start_Receive_IT+0xa4>
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	22ff      	movs	r2, #255	; 0xff
 801c5b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c5b8:	e028      	b.n	801c60c <UART_Start_Receive_IT+0xa4>
 801c5ba:	68fb      	ldr	r3, [r7, #12]
 801c5bc:	689b      	ldr	r3, [r3, #8]
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	d10d      	bne.n	801c5de <UART_Start_Receive_IT+0x76>
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	691b      	ldr	r3, [r3, #16]
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d104      	bne.n	801c5d4 <UART_Start_Receive_IT+0x6c>
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	22ff      	movs	r2, #255	; 0xff
 801c5ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c5d2:	e01b      	b.n	801c60c <UART_Start_Receive_IT+0xa4>
 801c5d4:	68fb      	ldr	r3, [r7, #12]
 801c5d6:	227f      	movs	r2, #127	; 0x7f
 801c5d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c5dc:	e016      	b.n	801c60c <UART_Start_Receive_IT+0xa4>
 801c5de:	68fb      	ldr	r3, [r7, #12]
 801c5e0:	689b      	ldr	r3, [r3, #8]
 801c5e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c5e6:	d10d      	bne.n	801c604 <UART_Start_Receive_IT+0x9c>
 801c5e8:	68fb      	ldr	r3, [r7, #12]
 801c5ea:	691b      	ldr	r3, [r3, #16]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d104      	bne.n	801c5fa <UART_Start_Receive_IT+0x92>
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	227f      	movs	r2, #127	; 0x7f
 801c5f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c5f8:	e008      	b.n	801c60c <UART_Start_Receive_IT+0xa4>
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	223f      	movs	r2, #63	; 0x3f
 801c5fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c602:	e003      	b.n	801c60c <UART_Start_Receive_IT+0xa4>
 801c604:	68fb      	ldr	r3, [r7, #12]
 801c606:	2200      	movs	r2, #0
 801c608:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c60c:	68fb      	ldr	r3, [r7, #12]
 801c60e:	2200      	movs	r2, #0
 801c610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	2222      	movs	r2, #34	; 0x22
 801c618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	681b      	ldr	r3, [r3, #0]
 801c620:	3308      	adds	r3, #8
 801c622:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c626:	e853 3f00 	ldrex	r3, [r3]
 801c62a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c62e:	f043 0301 	orr.w	r3, r3, #1
 801c632:	657b      	str	r3, [r7, #84]	; 0x54
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	3308      	adds	r3, #8
 801c63a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c63c:	64ba      	str	r2, [r7, #72]	; 0x48
 801c63e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c640:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c644:	e841 2300 	strex	r3, r2, [r1]
 801c648:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801c64a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d1e5      	bne.n	801c61c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	689b      	ldr	r3, [r3, #8]
 801c654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c658:	d107      	bne.n	801c66a <UART_Start_Receive_IT+0x102>
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	691b      	ldr	r3, [r3, #16]
 801c65e:	2b00      	cmp	r3, #0
 801c660:	d103      	bne.n	801c66a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801c662:	68fb      	ldr	r3, [r7, #12]
 801c664:	4a21      	ldr	r2, [pc, #132]	; (801c6ec <UART_Start_Receive_IT+0x184>)
 801c666:	669a      	str	r2, [r3, #104]	; 0x68
 801c668:	e002      	b.n	801c670 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801c66a:	68fb      	ldr	r3, [r7, #12]
 801c66c:	4a20      	ldr	r2, [pc, #128]	; (801c6f0 <UART_Start_Receive_IT+0x188>)
 801c66e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801c670:	68fb      	ldr	r3, [r7, #12]
 801c672:	691b      	ldr	r3, [r3, #16]
 801c674:	2b00      	cmp	r3, #0
 801c676:	d019      	beq.n	801c6ac <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801c678:	68fb      	ldr	r3, [r7, #12]
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c680:	e853 3f00 	ldrex	r3, [r3]
 801c684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c688:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801c68c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c68e:	68fb      	ldr	r3, [r7, #12]
 801c690:	681b      	ldr	r3, [r3, #0]
 801c692:	461a      	mov	r2, r3
 801c694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c696:	637b      	str	r3, [r7, #52]	; 0x34
 801c698:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c69a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c69c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c69e:	e841 2300 	strex	r3, r2, [r1]
 801c6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d1e6      	bne.n	801c678 <UART_Start_Receive_IT+0x110>
 801c6aa:	e018      	b.n	801c6de <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	681b      	ldr	r3, [r3, #0]
 801c6b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c6b2:	697b      	ldr	r3, [r7, #20]
 801c6b4:	e853 3f00 	ldrex	r3, [r3]
 801c6b8:	613b      	str	r3, [r7, #16]
   return(result);
 801c6ba:	693b      	ldr	r3, [r7, #16]
 801c6bc:	f043 0320 	orr.w	r3, r3, #32
 801c6c0:	653b      	str	r3, [r7, #80]	; 0x50
 801c6c2:	68fb      	ldr	r3, [r7, #12]
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	461a      	mov	r2, r3
 801c6c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6ca:	623b      	str	r3, [r7, #32]
 801c6cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c6ce:	69f9      	ldr	r1, [r7, #28]
 801c6d0:	6a3a      	ldr	r2, [r7, #32]
 801c6d2:	e841 2300 	strex	r3, r2, [r1]
 801c6d6:	61bb      	str	r3, [r7, #24]
   return(result);
 801c6d8:	69bb      	ldr	r3, [r7, #24]
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d1e6      	bne.n	801c6ac <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 801c6de:	2300      	movs	r3, #0
}
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	375c      	adds	r7, #92	; 0x5c
 801c6e4:	46bd      	mov	sp, r7
 801c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6ea:	4770      	bx	lr
 801c6ec:	0801c9b3 	.word	0x0801c9b3
 801c6f0:	0801c845 	.word	0x0801c845

0801c6f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c6f4:	b480      	push	{r7}
 801c6f6:	b095      	sub	sp, #84	; 0x54
 801c6f8:	af00      	add	r7, sp, #0
 801c6fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c704:	e853 3f00 	ldrex	r3, [r3]
 801c708:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c70c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c710:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	681b      	ldr	r3, [r3, #0]
 801c716:	461a      	mov	r2, r3
 801c718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c71a:	643b      	str	r3, [r7, #64]	; 0x40
 801c71c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c71e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c720:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c722:	e841 2300 	strex	r3, r2, [r1]
 801c726:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d1e6      	bne.n	801c6fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	681b      	ldr	r3, [r3, #0]
 801c732:	3308      	adds	r3, #8
 801c734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c736:	6a3b      	ldr	r3, [r7, #32]
 801c738:	e853 3f00 	ldrex	r3, [r3]
 801c73c:	61fb      	str	r3, [r7, #28]
   return(result);
 801c73e:	69fb      	ldr	r3, [r7, #28]
 801c740:	f023 0301 	bic.w	r3, r3, #1
 801c744:	64bb      	str	r3, [r7, #72]	; 0x48
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	3308      	adds	r3, #8
 801c74c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c74e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c750:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c756:	e841 2300 	strex	r3, r2, [r1]
 801c75a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c75e:	2b00      	cmp	r3, #0
 801c760:	d1e5      	bne.n	801c72e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c766:	2b01      	cmp	r3, #1
 801c768:	d118      	bne.n	801c79c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	681b      	ldr	r3, [r3, #0]
 801c76e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	e853 3f00 	ldrex	r3, [r3]
 801c776:	60bb      	str	r3, [r7, #8]
   return(result);
 801c778:	68bb      	ldr	r3, [r7, #8]
 801c77a:	f023 0310 	bic.w	r3, r3, #16
 801c77e:	647b      	str	r3, [r7, #68]	; 0x44
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	681b      	ldr	r3, [r3, #0]
 801c784:	461a      	mov	r2, r3
 801c786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c788:	61bb      	str	r3, [r7, #24]
 801c78a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c78c:	6979      	ldr	r1, [r7, #20]
 801c78e:	69ba      	ldr	r2, [r7, #24]
 801c790:	e841 2300 	strex	r3, r2, [r1]
 801c794:	613b      	str	r3, [r7, #16]
   return(result);
 801c796:	693b      	ldr	r3, [r7, #16]
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d1e6      	bne.n	801c76a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	2220      	movs	r2, #32
 801c7a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	2200      	movs	r2, #0
 801c7a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	2200      	movs	r2, #0
 801c7ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 801c7b0:	bf00      	nop
 801c7b2:	3754      	adds	r7, #84	; 0x54
 801c7b4:	46bd      	mov	sp, r7
 801c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7ba:	4770      	bx	lr

0801c7bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c7bc:	b580      	push	{r7, lr}
 801c7be:	b084      	sub	sp, #16
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	2200      	movs	r2, #0
 801c7ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801c7d2:	68fb      	ldr	r3, [r7, #12]
 801c7d4:	2200      	movs	r2, #0
 801c7d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c7e0:	68f8      	ldr	r0, [r7, #12]
 801c7e2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c7e4:	bf00      	nop
 801c7e6:	3710      	adds	r7, #16
 801c7e8:	46bd      	mov	sp, r7
 801c7ea:	bd80      	pop	{r7, pc}

0801c7ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c7ec:	b580      	push	{r7, lr}
 801c7ee:	b088      	sub	sp, #32
 801c7f0:	af00      	add	r7, sp, #0
 801c7f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	e853 3f00 	ldrex	r3, [r3]
 801c800:	60bb      	str	r3, [r7, #8]
   return(result);
 801c802:	68bb      	ldr	r3, [r7, #8]
 801c804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c808:	61fb      	str	r3, [r7, #28]
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	681b      	ldr	r3, [r3, #0]
 801c80e:	461a      	mov	r2, r3
 801c810:	69fb      	ldr	r3, [r7, #28]
 801c812:	61bb      	str	r3, [r7, #24]
 801c814:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c816:	6979      	ldr	r1, [r7, #20]
 801c818:	69ba      	ldr	r2, [r7, #24]
 801c81a:	e841 2300 	strex	r3, r2, [r1]
 801c81e:	613b      	str	r3, [r7, #16]
   return(result);
 801c820:	693b      	ldr	r3, [r7, #16]
 801c822:	2b00      	cmp	r3, #0
 801c824:	d1e6      	bne.n	801c7f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c826:	687b      	ldr	r3, [r7, #4]
 801c828:	2220      	movs	r2, #32
 801c82a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	2200      	movs	r2, #0
 801c830:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c838:	6878      	ldr	r0, [r7, #4]
 801c83a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c83c:	bf00      	nop
 801c83e:	3720      	adds	r7, #32
 801c840:	46bd      	mov	sp, r7
 801c842:	bd80      	pop	{r7, pc}

0801c844 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801c844:	b580      	push	{r7, lr}
 801c846:	b096      	sub	sp, #88	; 0x58
 801c848:	af00      	add	r7, sp, #0
 801c84a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801c84c:	687b      	ldr	r3, [r7, #4]
 801c84e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c852:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c85c:	2b22      	cmp	r3, #34	; 0x22
 801c85e:	f040 809c 	bne.w	801c99a <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c868:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801c86c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801c870:	b2d9      	uxtb	r1, r3
 801c872:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801c876:	b2da      	uxtb	r2, r3
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c87c:	400a      	ands	r2, r1
 801c87e:	b2d2      	uxtb	r2, r2
 801c880:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c886:	1c5a      	adds	r2, r3, #1
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c892:	b29b      	uxth	r3, r3
 801c894:	3b01      	subs	r3, #1
 801c896:	b29a      	uxth	r2, r3
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c8a4:	b29b      	uxth	r3, r3
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d17f      	bne.n	801c9aa <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	681b      	ldr	r3, [r3, #0]
 801c8ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8b2:	e853 3f00 	ldrex	r3, [r3]
 801c8b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c8ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c8be:	653b      	str	r3, [r7, #80]	; 0x50
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	461a      	mov	r2, r3
 801c8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c8c8:	647b      	str	r3, [r7, #68]	; 0x44
 801c8ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c8cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c8ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c8d0:	e841 2300 	strex	r3, r2, [r1]
 801c8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d1e6      	bne.n	801c8aa <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	3308      	adds	r3, #8
 801c8e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8e6:	e853 3f00 	ldrex	r3, [r3]
 801c8ea:	623b      	str	r3, [r7, #32]
   return(result);
 801c8ec:	6a3b      	ldr	r3, [r7, #32]
 801c8ee:	f023 0301 	bic.w	r3, r3, #1
 801c8f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	681b      	ldr	r3, [r3, #0]
 801c8f8:	3308      	adds	r3, #8
 801c8fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c8fc:	633a      	str	r2, [r7, #48]	; 0x30
 801c8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c904:	e841 2300 	strex	r3, r2, [r1]
 801c908:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d1e5      	bne.n	801c8dc <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	2220      	movs	r2, #32
 801c914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	2200      	movs	r2, #0
 801c91c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	2200      	movs	r2, #0
 801c922:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c928:	2b01      	cmp	r3, #1
 801c92a:	d130      	bne.n	801c98e <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	2200      	movs	r2, #0
 801c930:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c938:	693b      	ldr	r3, [r7, #16]
 801c93a:	e853 3f00 	ldrex	r3, [r3]
 801c93e:	60fb      	str	r3, [r7, #12]
   return(result);
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	f023 0310 	bic.w	r3, r3, #16
 801c946:	64bb      	str	r3, [r7, #72]	; 0x48
 801c948:	687b      	ldr	r3, [r7, #4]
 801c94a:	681b      	ldr	r3, [r3, #0]
 801c94c:	461a      	mov	r2, r3
 801c94e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c950:	61fb      	str	r3, [r7, #28]
 801c952:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c954:	69b9      	ldr	r1, [r7, #24]
 801c956:	69fa      	ldr	r2, [r7, #28]
 801c958:	e841 2300 	strex	r3, r2, [r1]
 801c95c:	617b      	str	r3, [r7, #20]
   return(result);
 801c95e:	697b      	ldr	r3, [r7, #20]
 801c960:	2b00      	cmp	r3, #0
 801c962:	d1e6      	bne.n	801c932 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	681b      	ldr	r3, [r3, #0]
 801c968:	69db      	ldr	r3, [r3, #28]
 801c96a:	f003 0310 	and.w	r3, r3, #16
 801c96e:	2b10      	cmp	r3, #16
 801c970:	d103      	bne.n	801c97a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	2210      	movs	r2, #16
 801c978:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c980:	687a      	ldr	r2, [r7, #4]
 801c982:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801c986:	4611      	mov	r1, r2
 801c988:	6878      	ldr	r0, [r7, #4]
 801c98a:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c98c:	e00d      	b.n	801c9aa <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c994:	6878      	ldr	r0, [r7, #4]
 801c996:	4798      	blx	r3
}
 801c998:	e007      	b.n	801c9aa <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	699a      	ldr	r2, [r3, #24]
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	f042 0208 	orr.w	r2, r2, #8
 801c9a8:	619a      	str	r2, [r3, #24]
}
 801c9aa:	bf00      	nop
 801c9ac:	3758      	adds	r7, #88	; 0x58
 801c9ae:	46bd      	mov	sp, r7
 801c9b0:	bd80      	pop	{r7, pc}

0801c9b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801c9b2:	b580      	push	{r7, lr}
 801c9b4:	b096      	sub	sp, #88	; 0x58
 801c9b6:	af00      	add	r7, sp, #0
 801c9b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c9c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c9ca:	2b22      	cmp	r3, #34	; 0x22
 801c9cc:	f040 809c 	bne.w	801cb08 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	681b      	ldr	r3, [r3, #0]
 801c9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c9de:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801c9e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801c9e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801c9e8:	4013      	ands	r3, r2
 801c9ea:	b29a      	uxth	r2, r3
 801c9ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c9ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c9f4:	1c9a      	adds	r2, r3, #2
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801ca00:	b29b      	uxth	r3, r3
 801ca02:	3b01      	subs	r3, #1
 801ca04:	b29a      	uxth	r2, r3
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801ca12:	b29b      	uxth	r3, r3
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d17f      	bne.n	801cb18 <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	681b      	ldr	r3, [r3, #0]
 801ca1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ca1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca20:	e853 3f00 	ldrex	r3, [r3]
 801ca24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801ca2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	461a      	mov	r2, r3
 801ca34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ca36:	643b      	str	r3, [r7, #64]	; 0x40
 801ca38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ca3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801ca3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ca3e:	e841 2300 	strex	r3, r2, [r1]
 801ca42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ca44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d1e6      	bne.n	801ca18 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	3308      	adds	r3, #8
 801ca50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ca52:	6a3b      	ldr	r3, [r7, #32]
 801ca54:	e853 3f00 	ldrex	r3, [r3]
 801ca58:	61fb      	str	r3, [r7, #28]
   return(result);
 801ca5a:	69fb      	ldr	r3, [r7, #28]
 801ca5c:	f023 0301 	bic.w	r3, r3, #1
 801ca60:	64bb      	str	r3, [r7, #72]	; 0x48
 801ca62:	687b      	ldr	r3, [r7, #4]
 801ca64:	681b      	ldr	r3, [r3, #0]
 801ca66:	3308      	adds	r3, #8
 801ca68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ca6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ca6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ca6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ca70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ca72:	e841 2300 	strex	r3, r2, [r1]
 801ca76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801ca78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d1e5      	bne.n	801ca4a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	2220      	movs	r2, #32
 801ca82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	2200      	movs	r2, #0
 801ca8a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	2200      	movs	r2, #0
 801ca90:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ca96:	2b01      	cmp	r3, #1
 801ca98:	d130      	bne.n	801cafc <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	2200      	movs	r2, #0
 801ca9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801caa6:	68fb      	ldr	r3, [r7, #12]
 801caa8:	e853 3f00 	ldrex	r3, [r3]
 801caac:	60bb      	str	r3, [r7, #8]
   return(result);
 801caae:	68bb      	ldr	r3, [r7, #8]
 801cab0:	f023 0310 	bic.w	r3, r3, #16
 801cab4:	647b      	str	r3, [r7, #68]	; 0x44
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	461a      	mov	r2, r3
 801cabc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cabe:	61bb      	str	r3, [r7, #24]
 801cac0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cac2:	6979      	ldr	r1, [r7, #20]
 801cac4:	69ba      	ldr	r2, [r7, #24]
 801cac6:	e841 2300 	strex	r3, r2, [r1]
 801caca:	613b      	str	r3, [r7, #16]
   return(result);
 801cacc:	693b      	ldr	r3, [r7, #16]
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d1e6      	bne.n	801caa0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	69db      	ldr	r3, [r3, #28]
 801cad8:	f003 0310 	and.w	r3, r3, #16
 801cadc:	2b10      	cmp	r3, #16
 801cade:	d103      	bne.n	801cae8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	681b      	ldr	r3, [r3, #0]
 801cae4:	2210      	movs	r2, #16
 801cae6:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801caee:	687a      	ldr	r2, [r7, #4]
 801caf0:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801caf4:	4611      	mov	r1, r2
 801caf6:	6878      	ldr	r0, [r7, #4]
 801caf8:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801cafa:	e00d      	b.n	801cb18 <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cb02:	6878      	ldr	r0, [r7, #4]
 801cb04:	4798      	blx	r3
}
 801cb06:	e007      	b.n	801cb18 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	699a      	ldr	r2, [r3, #24]
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	f042 0208 	orr.w	r2, r2, #8
 801cb16:	619a      	str	r2, [r3, #24]
}
 801cb18:	bf00      	nop
 801cb1a:	3758      	adds	r7, #88	; 0x58
 801cb1c:	46bd      	mov	sp, r7
 801cb1e:	bd80      	pop	{r7, pc}

0801cb20 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801cb20:	b580      	push	{r7, lr}
 801cb22:	b08c      	sub	sp, #48	; 0x30
 801cb24:	af00      	add	r7, sp, #0
 801cb26:	60f8      	str	r0, [r7, #12]
 801cb28:	60b9      	str	r1, [r7, #8]
 801cb2a:	4613      	mov	r3, r2
 801cb2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cb34:	2b20      	cmp	r3, #32
 801cb36:	d142      	bne.n	801cbbe <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801cb38:	68bb      	ldr	r3, [r7, #8]
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d002      	beq.n	801cb44 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 801cb3e:	88fb      	ldrh	r3, [r7, #6]
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d101      	bne.n	801cb48 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 801cb44:	2301      	movs	r3, #1
 801cb46:	e03b      	b.n	801cbc0 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801cb48:	68fb      	ldr	r3, [r7, #12]
 801cb4a:	2201      	movs	r2, #1
 801cb4c:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801cb4e:	68fb      	ldr	r3, [r7, #12]
 801cb50:	2200      	movs	r2, #0
 801cb52:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801cb54:	88fb      	ldrh	r3, [r7, #6]
 801cb56:	461a      	mov	r2, r3
 801cb58:	68b9      	ldr	r1, [r7, #8]
 801cb5a:	68f8      	ldr	r0, [r7, #12]
 801cb5c:	f7ff fd04 	bl	801c568 <UART_Start_Receive_IT>
 801cb60:	4603      	mov	r3, r0
 801cb62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801cb66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d124      	bne.n	801cbb8 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cb6e:	68fb      	ldr	r3, [r7, #12]
 801cb70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cb72:	2b01      	cmp	r3, #1
 801cb74:	d11d      	bne.n	801cbb2 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801cb76:	68fb      	ldr	r3, [r7, #12]
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	2210      	movs	r2, #16
 801cb7c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cb7e:	68fb      	ldr	r3, [r7, #12]
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cb84:	69bb      	ldr	r3, [r7, #24]
 801cb86:	e853 3f00 	ldrex	r3, [r3]
 801cb8a:	617b      	str	r3, [r7, #20]
   return(result);
 801cb8c:	697b      	ldr	r3, [r7, #20]
 801cb8e:	f043 0310 	orr.w	r3, r3, #16
 801cb92:	62bb      	str	r3, [r7, #40]	; 0x28
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	461a      	mov	r2, r3
 801cb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb9c:	627b      	str	r3, [r7, #36]	; 0x24
 801cb9e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cba0:	6a39      	ldr	r1, [r7, #32]
 801cba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cba4:	e841 2300 	strex	r3, r2, [r1]
 801cba8:	61fb      	str	r3, [r7, #28]
   return(result);
 801cbaa:	69fb      	ldr	r3, [r7, #28]
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	d1e6      	bne.n	801cb7e <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 801cbb0:	e002      	b.n	801cbb8 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801cbb2:	2301      	movs	r3, #1
 801cbb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801cbb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cbbc:	e000      	b.n	801cbc0 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801cbbe:	2302      	movs	r3, #2
  }
}
 801cbc0:	4618      	mov	r0, r3
 801cbc2:	3730      	adds	r7, #48	; 0x30
 801cbc4:	46bd      	mov	sp, r7
 801cbc6:	bd80      	pop	{r7, pc}

0801cbc8 <MX_LWIP_Init>:

/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void)
{
 801cbc8:	b580      	push	{r7, lr}
 801cbca:	b084      	sub	sp, #16
 801cbcc:	af04      	add	r7, sp, #16
	/* IP addresses initialization */
	IP_ADDRESS[0] = 192;
 801cbce:	4b29      	ldr	r3, [pc, #164]	; (801cc74 <MX_LWIP_Init+0xac>)
 801cbd0:	22c0      	movs	r2, #192	; 0xc0
 801cbd2:	701a      	strb	r2, [r3, #0]
	IP_ADDRESS[1] = 168;
 801cbd4:	4b27      	ldr	r3, [pc, #156]	; (801cc74 <MX_LWIP_Init+0xac>)
 801cbd6:	22a8      	movs	r2, #168	; 0xa8
 801cbd8:	705a      	strb	r2, [r3, #1]
	IP_ADDRESS[2] = 12;
 801cbda:	4b26      	ldr	r3, [pc, #152]	; (801cc74 <MX_LWIP_Init+0xac>)
 801cbdc:	220c      	movs	r2, #12
 801cbde:	709a      	strb	r2, [r3, #2]
	IP_ADDRESS[3] = 100;
 801cbe0:	4b24      	ldr	r3, [pc, #144]	; (801cc74 <MX_LWIP_Init+0xac>)
 801cbe2:	2264      	movs	r2, #100	; 0x64
 801cbe4:	70da      	strb	r2, [r3, #3]
	NETMASK_ADDRESS[0] = 255;
 801cbe6:	4b24      	ldr	r3, [pc, #144]	; (801cc78 <MX_LWIP_Init+0xb0>)
 801cbe8:	22ff      	movs	r2, #255	; 0xff
 801cbea:	701a      	strb	r2, [r3, #0]
	NETMASK_ADDRESS[1] = 255;
 801cbec:	4b22      	ldr	r3, [pc, #136]	; (801cc78 <MX_LWIP_Init+0xb0>)
 801cbee:	22ff      	movs	r2, #255	; 0xff
 801cbf0:	705a      	strb	r2, [r3, #1]
	NETMASK_ADDRESS[2] = 255;
 801cbf2:	4b21      	ldr	r3, [pc, #132]	; (801cc78 <MX_LWIP_Init+0xb0>)
 801cbf4:	22ff      	movs	r2, #255	; 0xff
 801cbf6:	709a      	strb	r2, [r3, #2]
	NETMASK_ADDRESS[3] = 0;
 801cbf8:	4b1f      	ldr	r3, [pc, #124]	; (801cc78 <MX_LWIP_Init+0xb0>)
 801cbfa:	2200      	movs	r2, #0
 801cbfc:	70da      	strb	r2, [r3, #3]
	GATEWAY_ADDRESS[0] = 192;
 801cbfe:	4b1f      	ldr	r3, [pc, #124]	; (801cc7c <MX_LWIP_Init+0xb4>)
 801cc00:	22c0      	movs	r2, #192	; 0xc0
 801cc02:	701a      	strb	r2, [r3, #0]
	GATEWAY_ADDRESS[1] = 168;
 801cc04:	4b1d      	ldr	r3, [pc, #116]	; (801cc7c <MX_LWIP_Init+0xb4>)
 801cc06:	22a8      	movs	r2, #168	; 0xa8
 801cc08:	705a      	strb	r2, [r3, #1]
	GATEWAY_ADDRESS[2] = 12;
 801cc0a:	4b1c      	ldr	r3, [pc, #112]	; (801cc7c <MX_LWIP_Init+0xb4>)
 801cc0c:	220c      	movs	r2, #12
 801cc0e:	709a      	strb	r2, [r3, #2]
	GATEWAY_ADDRESS[3] = 1;
 801cc10:	4b1a      	ldr	r3, [pc, #104]	; (801cc7c <MX_LWIP_Init+0xb4>)
 801cc12:	2201      	movs	r2, #1
 801cc14:	70da      	strb	r2, [r3, #3]

	/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 801cc16:	4b1a      	ldr	r3, [pc, #104]	; (801cc80 <MX_LWIP_Init+0xb8>)
 801cc18:	781b      	ldrb	r3, [r3, #0]
 801cc1a:	2b01      	cmp	r3, #1
 801cc1c:	d002      	beq.n	801cc24 <MX_LWIP_Init+0x5c>
 801cc1e:	2b02      	cmp	r3, #2
 801cc20:	d030      	beq.n	801cc84 <MX_LWIP_Init+0xbc>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 801cc22:	e156      	b.n	801ced2 <MX_LWIP_Init+0x30a>
		IP_ADDRESS[0] = 10;
 801cc24:	4b13      	ldr	r3, [pc, #76]	; (801cc74 <MX_LWIP_Init+0xac>)
 801cc26:	220a      	movs	r2, #10
 801cc28:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = 78;
 801cc2a:	4b12      	ldr	r3, [pc, #72]	; (801cc74 <MX_LWIP_Init+0xac>)
 801cc2c:	224e      	movs	r2, #78	; 0x4e
 801cc2e:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = 84;
 801cc30:	4b10      	ldr	r3, [pc, #64]	; (801cc74 <MX_LWIP_Init+0xac>)
 801cc32:	2254      	movs	r2, #84	; 0x54
 801cc34:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 801cc36:	4b12      	ldr	r3, [pc, #72]	; (801cc80 <MX_LWIP_Init+0xb8>)
 801cc38:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 801cc3c:	4b0d      	ldr	r3, [pc, #52]	; (801cc74 <MX_LWIP_Init+0xac>)
 801cc3e:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801cc40:	4b0d      	ldr	r3, [pc, #52]	; (801cc78 <MX_LWIP_Init+0xb0>)
 801cc42:	22ff      	movs	r2, #255	; 0xff
 801cc44:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801cc46:	4b0c      	ldr	r3, [pc, #48]	; (801cc78 <MX_LWIP_Init+0xb0>)
 801cc48:	22ff      	movs	r2, #255	; 0xff
 801cc4a:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801cc4c:	4b0a      	ldr	r3, [pc, #40]	; (801cc78 <MX_LWIP_Init+0xb0>)
 801cc4e:	22ff      	movs	r2, #255	; 0xff
 801cc50:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801cc52:	4b09      	ldr	r3, [pc, #36]	; (801cc78 <MX_LWIP_Init+0xb0>)
 801cc54:	2200      	movs	r2, #0
 801cc56:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = 10;
 801cc58:	4b08      	ldr	r3, [pc, #32]	; (801cc7c <MX_LWIP_Init+0xb4>)
 801cc5a:	220a      	movs	r2, #10
 801cc5c:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = 78;
 801cc5e:	4b07      	ldr	r3, [pc, #28]	; (801cc7c <MX_LWIP_Init+0xb4>)
 801cc60:	224e      	movs	r2, #78	; 0x4e
 801cc62:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = 84;
 801cc64:	4b05      	ldr	r3, [pc, #20]	; (801cc7c <MX_LWIP_Init+0xb4>)
 801cc66:	2254      	movs	r2, #84	; 0x54
 801cc68:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801cc6a:	4b04      	ldr	r3, [pc, #16]	; (801cc7c <MX_LWIP_Init+0xb4>)
 801cc6c:	2201      	movs	r2, #1
 801cc6e:	70da      	strb	r2, [r3, #3]
		break;
 801cc70:	e03b      	b.n	801ccea <MX_LWIP_Init+0x122>
 801cc72:	bf00      	nop
 801cc74:	2000bdf4 	.word	0x2000bdf4
 801cc78:	2000bdf8 	.word	0x2000bdf8
 801cc7c:	2000bdfc 	.word	0x2000bdfc
 801cc80:	20000304 	.word	0x20000304
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 801cc84:	4b94      	ldr	r3, [pc, #592]	; (801ced8 <MX_LWIP_Init+0x310>)
 801cc86:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 801cc8a:	4b94      	ldr	r3, [pc, #592]	; (801cedc <MX_LWIP_Init+0x314>)
 801cc8c:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801cc8e:	4b92      	ldr	r3, [pc, #584]	; (801ced8 <MX_LWIP_Init+0x310>)
 801cc90:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 801cc94:	4b91      	ldr	r3, [pc, #580]	; (801cedc <MX_LWIP_Init+0x314>)
 801cc96:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801cc98:	4b8f      	ldr	r3, [pc, #572]	; (801ced8 <MX_LWIP_Init+0x310>)
 801cc9a:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 801cc9e:	4b8f      	ldr	r3, [pc, #572]	; (801cedc <MX_LWIP_Init+0x314>)
 801cca0:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 801cca2:	4b8d      	ldr	r3, [pc, #564]	; (801ced8 <MX_LWIP_Init+0x310>)
 801cca4:	f893 22a8 	ldrb.w	r2, [r3, #680]	; 0x2a8
 801cca8:	4b8c      	ldr	r3, [pc, #560]	; (801cedc <MX_LWIP_Init+0x314>)
 801ccaa:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801ccac:	4b8c      	ldr	r3, [pc, #560]	; (801cee0 <MX_LWIP_Init+0x318>)
 801ccae:	22ff      	movs	r2, #255	; 0xff
 801ccb0:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801ccb2:	4b8b      	ldr	r3, [pc, #556]	; (801cee0 <MX_LWIP_Init+0x318>)
 801ccb4:	22ff      	movs	r2, #255	; 0xff
 801ccb6:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801ccb8:	4b89      	ldr	r3, [pc, #548]	; (801cee0 <MX_LWIP_Init+0x318>)
 801ccba:	22ff      	movs	r2, #255	; 0xff
 801ccbc:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801ccbe:	4b88      	ldr	r3, [pc, #544]	; (801cee0 <MX_LWIP_Init+0x318>)
 801ccc0:	2200      	movs	r2, #0
 801ccc2:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 801ccc4:	4b84      	ldr	r3, [pc, #528]	; (801ced8 <MX_LWIP_Init+0x310>)
 801ccc6:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 801ccca:	4b86      	ldr	r3, [pc, #536]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801cccc:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801ccce:	4b82      	ldr	r3, [pc, #520]	; (801ced8 <MX_LWIP_Init+0x310>)
 801ccd0:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 801ccd4:	4b83      	ldr	r3, [pc, #524]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ccd6:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801ccd8:	4b7f      	ldr	r3, [pc, #508]	; (801ced8 <MX_LWIP_Init+0x310>)
 801ccda:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 801ccde:	4b81      	ldr	r3, [pc, #516]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801cce0:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801cce2:	4b80      	ldr	r3, [pc, #512]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801cce4:	2201      	movs	r2, #1
 801cce6:	70da      	strb	r2, [r3, #3]
		break;
 801cce8:	bf00      	nop
	}

	/* USER CODE END IP_ADDRESSES */

	/* Initilialize the LwIP stack without RTOS */
	lwip_init();
 801ccea:	f000 fd42 	bl	801d772 <lwip_init>

	/* IP addresses initialization without DHCP (IPv4) */
	IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801ccee:	4b7b      	ldr	r3, [pc, #492]	; (801cedc <MX_LWIP_Init+0x314>)
 801ccf0:	781b      	ldrb	r3, [r3, #0]
 801ccf2:	061a      	lsls	r2, r3, #24
 801ccf4:	4b79      	ldr	r3, [pc, #484]	; (801cedc <MX_LWIP_Init+0x314>)
 801ccf6:	785b      	ldrb	r3, [r3, #1]
 801ccf8:	041b      	lsls	r3, r3, #16
 801ccfa:	431a      	orrs	r2, r3
 801ccfc:	4b77      	ldr	r3, [pc, #476]	; (801cedc <MX_LWIP_Init+0x314>)
 801ccfe:	789b      	ldrb	r3, [r3, #2]
 801cd00:	021b      	lsls	r3, r3, #8
 801cd02:	4313      	orrs	r3, r2
 801cd04:	4a75      	ldr	r2, [pc, #468]	; (801cedc <MX_LWIP_Init+0x314>)
 801cd06:	78d2      	ldrb	r2, [r2, #3]
 801cd08:	4313      	orrs	r3, r2
 801cd0a:	061a      	lsls	r2, r3, #24
 801cd0c:	4b73      	ldr	r3, [pc, #460]	; (801cedc <MX_LWIP_Init+0x314>)
 801cd0e:	781b      	ldrb	r3, [r3, #0]
 801cd10:	0619      	lsls	r1, r3, #24
 801cd12:	4b72      	ldr	r3, [pc, #456]	; (801cedc <MX_LWIP_Init+0x314>)
 801cd14:	785b      	ldrb	r3, [r3, #1]
 801cd16:	041b      	lsls	r3, r3, #16
 801cd18:	4319      	orrs	r1, r3
 801cd1a:	4b70      	ldr	r3, [pc, #448]	; (801cedc <MX_LWIP_Init+0x314>)
 801cd1c:	789b      	ldrb	r3, [r3, #2]
 801cd1e:	021b      	lsls	r3, r3, #8
 801cd20:	430b      	orrs	r3, r1
 801cd22:	496e      	ldr	r1, [pc, #440]	; (801cedc <MX_LWIP_Init+0x314>)
 801cd24:	78c9      	ldrb	r1, [r1, #3]
 801cd26:	430b      	orrs	r3, r1
 801cd28:	021b      	lsls	r3, r3, #8
 801cd2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801cd2e:	431a      	orrs	r2, r3
 801cd30:	4b6a      	ldr	r3, [pc, #424]	; (801cedc <MX_LWIP_Init+0x314>)
 801cd32:	781b      	ldrb	r3, [r3, #0]
 801cd34:	0619      	lsls	r1, r3, #24
 801cd36:	4b69      	ldr	r3, [pc, #420]	; (801cedc <MX_LWIP_Init+0x314>)
 801cd38:	785b      	ldrb	r3, [r3, #1]
 801cd3a:	041b      	lsls	r3, r3, #16
 801cd3c:	4319      	orrs	r1, r3
 801cd3e:	4b67      	ldr	r3, [pc, #412]	; (801cedc <MX_LWIP_Init+0x314>)
 801cd40:	789b      	ldrb	r3, [r3, #2]
 801cd42:	021b      	lsls	r3, r3, #8
 801cd44:	430b      	orrs	r3, r1
 801cd46:	4965      	ldr	r1, [pc, #404]	; (801cedc <MX_LWIP_Init+0x314>)
 801cd48:	78c9      	ldrb	r1, [r1, #3]
 801cd4a:	430b      	orrs	r3, r1
 801cd4c:	0a1b      	lsrs	r3, r3, #8
 801cd4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cd52:	431a      	orrs	r2, r3
 801cd54:	4b61      	ldr	r3, [pc, #388]	; (801cedc <MX_LWIP_Init+0x314>)
 801cd56:	781b      	ldrb	r3, [r3, #0]
 801cd58:	0619      	lsls	r1, r3, #24
 801cd5a:	4b60      	ldr	r3, [pc, #384]	; (801cedc <MX_LWIP_Init+0x314>)
 801cd5c:	785b      	ldrb	r3, [r3, #1]
 801cd5e:	041b      	lsls	r3, r3, #16
 801cd60:	4319      	orrs	r1, r3
 801cd62:	4b5e      	ldr	r3, [pc, #376]	; (801cedc <MX_LWIP_Init+0x314>)
 801cd64:	789b      	ldrb	r3, [r3, #2]
 801cd66:	021b      	lsls	r3, r3, #8
 801cd68:	430b      	orrs	r3, r1
 801cd6a:	495c      	ldr	r1, [pc, #368]	; (801cedc <MX_LWIP_Init+0x314>)
 801cd6c:	78c9      	ldrb	r1, [r1, #3]
 801cd6e:	430b      	orrs	r3, r1
 801cd70:	0e1b      	lsrs	r3, r3, #24
 801cd72:	4313      	orrs	r3, r2
 801cd74:	4a5c      	ldr	r2, [pc, #368]	; (801cee8 <MX_LWIP_Init+0x320>)
 801cd76:	6013      	str	r3, [r2, #0]
	IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801cd78:	4b59      	ldr	r3, [pc, #356]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cd7a:	781b      	ldrb	r3, [r3, #0]
 801cd7c:	061a      	lsls	r2, r3, #24
 801cd7e:	4b58      	ldr	r3, [pc, #352]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cd80:	785b      	ldrb	r3, [r3, #1]
 801cd82:	041b      	lsls	r3, r3, #16
 801cd84:	431a      	orrs	r2, r3
 801cd86:	4b56      	ldr	r3, [pc, #344]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cd88:	789b      	ldrb	r3, [r3, #2]
 801cd8a:	021b      	lsls	r3, r3, #8
 801cd8c:	4313      	orrs	r3, r2
 801cd8e:	4a54      	ldr	r2, [pc, #336]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cd90:	78d2      	ldrb	r2, [r2, #3]
 801cd92:	4313      	orrs	r3, r2
 801cd94:	061a      	lsls	r2, r3, #24
 801cd96:	4b52      	ldr	r3, [pc, #328]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cd98:	781b      	ldrb	r3, [r3, #0]
 801cd9a:	0619      	lsls	r1, r3, #24
 801cd9c:	4b50      	ldr	r3, [pc, #320]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cd9e:	785b      	ldrb	r3, [r3, #1]
 801cda0:	041b      	lsls	r3, r3, #16
 801cda2:	4319      	orrs	r1, r3
 801cda4:	4b4e      	ldr	r3, [pc, #312]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cda6:	789b      	ldrb	r3, [r3, #2]
 801cda8:	021b      	lsls	r3, r3, #8
 801cdaa:	430b      	orrs	r3, r1
 801cdac:	494c      	ldr	r1, [pc, #304]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cdae:	78c9      	ldrb	r1, [r1, #3]
 801cdb0:	430b      	orrs	r3, r1
 801cdb2:	021b      	lsls	r3, r3, #8
 801cdb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801cdb8:	431a      	orrs	r2, r3
 801cdba:	4b49      	ldr	r3, [pc, #292]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cdbc:	781b      	ldrb	r3, [r3, #0]
 801cdbe:	0619      	lsls	r1, r3, #24
 801cdc0:	4b47      	ldr	r3, [pc, #284]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cdc2:	785b      	ldrb	r3, [r3, #1]
 801cdc4:	041b      	lsls	r3, r3, #16
 801cdc6:	4319      	orrs	r1, r3
 801cdc8:	4b45      	ldr	r3, [pc, #276]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cdca:	789b      	ldrb	r3, [r3, #2]
 801cdcc:	021b      	lsls	r3, r3, #8
 801cdce:	430b      	orrs	r3, r1
 801cdd0:	4943      	ldr	r1, [pc, #268]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cdd2:	78c9      	ldrb	r1, [r1, #3]
 801cdd4:	430b      	orrs	r3, r1
 801cdd6:	0a1b      	lsrs	r3, r3, #8
 801cdd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cddc:	431a      	orrs	r2, r3
 801cdde:	4b40      	ldr	r3, [pc, #256]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cde0:	781b      	ldrb	r3, [r3, #0]
 801cde2:	0619      	lsls	r1, r3, #24
 801cde4:	4b3e      	ldr	r3, [pc, #248]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cde6:	785b      	ldrb	r3, [r3, #1]
 801cde8:	041b      	lsls	r3, r3, #16
 801cdea:	4319      	orrs	r1, r3
 801cdec:	4b3c      	ldr	r3, [pc, #240]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cdee:	789b      	ldrb	r3, [r3, #2]
 801cdf0:	021b      	lsls	r3, r3, #8
 801cdf2:	430b      	orrs	r3, r1
 801cdf4:	493a      	ldr	r1, [pc, #232]	; (801cee0 <MX_LWIP_Init+0x318>)
 801cdf6:	78c9      	ldrb	r1, [r1, #3]
 801cdf8:	430b      	orrs	r3, r1
 801cdfa:	0e1b      	lsrs	r3, r3, #24
 801cdfc:	4313      	orrs	r3, r2
 801cdfe:	4a3b      	ldr	r2, [pc, #236]	; (801ceec <MX_LWIP_Init+0x324>)
 801ce00:	6013      	str	r3, [r2, #0]
	IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801ce02:	4b38      	ldr	r3, [pc, #224]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce04:	781b      	ldrb	r3, [r3, #0]
 801ce06:	061a      	lsls	r2, r3, #24
 801ce08:	4b36      	ldr	r3, [pc, #216]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce0a:	785b      	ldrb	r3, [r3, #1]
 801ce0c:	041b      	lsls	r3, r3, #16
 801ce0e:	431a      	orrs	r2, r3
 801ce10:	4b34      	ldr	r3, [pc, #208]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce12:	789b      	ldrb	r3, [r3, #2]
 801ce14:	021b      	lsls	r3, r3, #8
 801ce16:	4313      	orrs	r3, r2
 801ce18:	4a32      	ldr	r2, [pc, #200]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce1a:	78d2      	ldrb	r2, [r2, #3]
 801ce1c:	4313      	orrs	r3, r2
 801ce1e:	061a      	lsls	r2, r3, #24
 801ce20:	4b30      	ldr	r3, [pc, #192]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce22:	781b      	ldrb	r3, [r3, #0]
 801ce24:	0619      	lsls	r1, r3, #24
 801ce26:	4b2f      	ldr	r3, [pc, #188]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce28:	785b      	ldrb	r3, [r3, #1]
 801ce2a:	041b      	lsls	r3, r3, #16
 801ce2c:	4319      	orrs	r1, r3
 801ce2e:	4b2d      	ldr	r3, [pc, #180]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce30:	789b      	ldrb	r3, [r3, #2]
 801ce32:	021b      	lsls	r3, r3, #8
 801ce34:	430b      	orrs	r3, r1
 801ce36:	492b      	ldr	r1, [pc, #172]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce38:	78c9      	ldrb	r1, [r1, #3]
 801ce3a:	430b      	orrs	r3, r1
 801ce3c:	021b      	lsls	r3, r3, #8
 801ce3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801ce42:	431a      	orrs	r2, r3
 801ce44:	4b27      	ldr	r3, [pc, #156]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce46:	781b      	ldrb	r3, [r3, #0]
 801ce48:	0619      	lsls	r1, r3, #24
 801ce4a:	4b26      	ldr	r3, [pc, #152]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce4c:	785b      	ldrb	r3, [r3, #1]
 801ce4e:	041b      	lsls	r3, r3, #16
 801ce50:	4319      	orrs	r1, r3
 801ce52:	4b24      	ldr	r3, [pc, #144]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce54:	789b      	ldrb	r3, [r3, #2]
 801ce56:	021b      	lsls	r3, r3, #8
 801ce58:	430b      	orrs	r3, r1
 801ce5a:	4922      	ldr	r1, [pc, #136]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce5c:	78c9      	ldrb	r1, [r1, #3]
 801ce5e:	430b      	orrs	r3, r1
 801ce60:	0a1b      	lsrs	r3, r3, #8
 801ce62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ce66:	431a      	orrs	r2, r3
 801ce68:	4b1e      	ldr	r3, [pc, #120]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce6a:	781b      	ldrb	r3, [r3, #0]
 801ce6c:	0619      	lsls	r1, r3, #24
 801ce6e:	4b1d      	ldr	r3, [pc, #116]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce70:	785b      	ldrb	r3, [r3, #1]
 801ce72:	041b      	lsls	r3, r3, #16
 801ce74:	4319      	orrs	r1, r3
 801ce76:	4b1b      	ldr	r3, [pc, #108]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce78:	789b      	ldrb	r3, [r3, #2]
 801ce7a:	021b      	lsls	r3, r3, #8
 801ce7c:	430b      	orrs	r3, r1
 801ce7e:	4919      	ldr	r1, [pc, #100]	; (801cee4 <MX_LWIP_Init+0x31c>)
 801ce80:	78c9      	ldrb	r1, [r1, #3]
 801ce82:	430b      	orrs	r3, r1
 801ce84:	0e1b      	lsrs	r3, r3, #24
 801ce86:	4313      	orrs	r3, r2
 801ce88:	4a19      	ldr	r2, [pc, #100]	; (801cef0 <MX_LWIP_Init+0x328>)
 801ce8a:	6013      	str	r3, [r2, #0]

	/* add the network interface (IPv4/IPv6) without RTOS */
	netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 801ce8c:	4b19      	ldr	r3, [pc, #100]	; (801cef4 <MX_LWIP_Init+0x32c>)
 801ce8e:	9302      	str	r3, [sp, #8]
 801ce90:	4b19      	ldr	r3, [pc, #100]	; (801cef8 <MX_LWIP_Init+0x330>)
 801ce92:	9301      	str	r3, [sp, #4]
 801ce94:	2300      	movs	r3, #0
 801ce96:	9300      	str	r3, [sp, #0]
 801ce98:	4b15      	ldr	r3, [pc, #84]	; (801cef0 <MX_LWIP_Init+0x328>)
 801ce9a:	4a14      	ldr	r2, [pc, #80]	; (801ceec <MX_LWIP_Init+0x324>)
 801ce9c:	4912      	ldr	r1, [pc, #72]	; (801cee8 <MX_LWIP_Init+0x320>)
 801ce9e:	4817      	ldr	r0, [pc, #92]	; (801cefc <MX_LWIP_Init+0x334>)
 801cea0:	f001 f998 	bl	801e1d4 <netif_add>

	/* Registers the default network interface */
	netif_set_default(&gnetif);
 801cea4:	4815      	ldr	r0, [pc, #84]	; (801cefc <MX_LWIP_Init+0x334>)
 801cea6:	f001 fb49 	bl	801e53c <netif_set_default>

	if (netif_is_link_up(&gnetif))
 801ceaa:	4b14      	ldr	r3, [pc, #80]	; (801cefc <MX_LWIP_Init+0x334>)
 801ceac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ceb0:	089b      	lsrs	r3, r3, #2
 801ceb2:	f003 0301 	and.w	r3, r3, #1
 801ceb6:	b2db      	uxtb	r3, r3
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	d003      	beq.n	801cec4 <MX_LWIP_Init+0x2fc>
	{
		/* When the netif is fully configured this function must be called */
		netif_set_up(&gnetif);
 801cebc:	480f      	ldr	r0, [pc, #60]	; (801cefc <MX_LWIP_Init+0x334>)
 801cebe:	f001 fb4d 	bl	801e55c <netif_set_up>
 801cec2:	e002      	b.n	801ceca <MX_LWIP_Init+0x302>
	}
	else
	{
		/* When the netif link is down this function must be called */
		netif_set_down(&gnetif);
 801cec4:	480d      	ldr	r0, [pc, #52]	; (801cefc <MX_LWIP_Init+0x334>)
 801cec6:	f001 fbb5 	bl	801e634 <netif_set_down>
	}

	/* Set the link callback function, this function is called on change of link status*/
	netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 801ceca:	490d      	ldr	r1, [pc, #52]	; (801cf00 <MX_LWIP_Init+0x338>)
 801cecc:	480b      	ldr	r0, [pc, #44]	; (801cefc <MX_LWIP_Init+0x334>)
 801cece:	f001 fc47 	bl	801e760 <netif_set_link_callback>
	/* Create the Ethernet link handler thread */

	/* USER CODE BEGIN 3 */

	/* USER CODE END 3 */
}
 801ced2:	46bd      	mov	sp, r7
 801ced4:	bd80      	pop	{r7, pc}
 801ced6:	bf00      	nop
 801ced8:	20000304 	.word	0x20000304
 801cedc:	2000bdf4 	.word	0x2000bdf4
 801cee0:	2000bdf8 	.word	0x2000bdf8
 801cee4:	2000bdfc 	.word	0x2000bdfc
 801cee8:	2000bde8 	.word	0x2000bde8
 801ceec:	2000bdec 	.word	0x2000bdec
 801cef0:	2000bdf0 	.word	0x2000bdf0
 801cef4:	0802251d 	.word	0x0802251d
 801cef8:	0801d291 	.word	0x0801d291
 801cefc:	2000bda8 	.word	0x2000bda8
 801cf00:	0801cf55 	.word	0x0801cf55

0801cf04 <Ethernet_Link_Periodic_Handle>:
 * @brief  Ethernet Link periodic check
 * @param  netif
 * @retval None
 */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 801cf04:	b580      	push	{r7, lr}
 801cf06:	b082      	sub	sp, #8
 801cf08:	af00      	add	r7, sp, #0
 801cf0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 4_4_1 */
	/* USER CODE END 4_4_1 */

	/* Ethernet Link every 100ms */
	if (HAL_GetTick() - EthernetLinkTimer >= 100)
 801cf0c:	f7f8 fd32 	bl	8015974 <HAL_GetTick>
 801cf10:	4602      	mov	r2, r0
 801cf12:	4b08      	ldr	r3, [pc, #32]	; (801cf34 <Ethernet_Link_Periodic_Handle+0x30>)
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	1ad3      	subs	r3, r2, r3
 801cf18:	2b63      	cmp	r3, #99	; 0x63
 801cf1a:	d907      	bls.n	801cf2c <Ethernet_Link_Periodic_Handle+0x28>
	{
		EthernetLinkTimer = HAL_GetTick();
 801cf1c:	f7f8 fd2a 	bl	8015974 <HAL_GetTick>
 801cf20:	4603      	mov	r3, r0
 801cf22:	4a04      	ldr	r2, [pc, #16]	; (801cf34 <Ethernet_Link_Periodic_Handle+0x30>)
 801cf24:	6013      	str	r3, [r2, #0]
		ethernet_link_check_state(netif);
 801cf26:	6878      	ldr	r0, [r7, #4]
 801cf28:	f000 fb10 	bl	801d54c <ethernet_link_check_state>
	}
	/* USER CODE BEGIN 4_4 */
	/* USER CODE END 4_4 */
}
 801cf2c:	bf00      	nop
 801cf2e:	3708      	adds	r7, #8
 801cf30:	46bd      	mov	sp, r7
 801cf32:	bd80      	pop	{r7, pc}
 801cf34:	2000bda4 	.word	0x2000bda4

0801cf38 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 801cf38:	b580      	push	{r7, lr}
 801cf3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4_1 */
	/* USER CODE END 4_1 */
	ethernetif_input(&gnetif);
 801cf3c:	4804      	ldr	r0, [pc, #16]	; (801cf50 <MX_LWIP_Process+0x18>)
 801cf3e:	f000 f987 	bl	801d250 <ethernetif_input>

	/* USER CODE BEGIN 4_2 */
	/* USER CODE END 4_2 */
	/* Handle timeouts */
	sys_check_timeouts();
 801cf42:	f002 fb83 	bl	801f64c <sys_check_timeouts>

	Ethernet_Link_Periodic_Handle(&gnetif);
 801cf46:	4802      	ldr	r0, [pc, #8]	; (801cf50 <MX_LWIP_Process+0x18>)
 801cf48:	f7ff ffdc 	bl	801cf04 <Ethernet_Link_Periodic_Handle>

	/* USER CODE BEGIN 4_3 */
	/* USER CODE END 4_3 */
}
 801cf4c:	bf00      	nop
 801cf4e:	bd80      	pop	{r7, pc}
 801cf50:	2000bda8 	.word	0x2000bda8

0801cf54 <ethernet_link_status_updated>:
 * @brief  Notify the User about the network interface config status
 * @param  netif: the network interface
 * @retval None
 */
static void ethernet_link_status_updated(struct netif *netif)
{
 801cf54:	b480      	push	{r7}
 801cf56:	b083      	sub	sp, #12
 801cf58:	af00      	add	r7, sp, #0
 801cf5a:	6078      	str	r0, [r7, #4]
	else /* netif is down */
	{
		/* USER CODE BEGIN 6 */
		/* USER CODE END 6 */
	}
}
 801cf5c:	bf00      	nop
 801cf5e:	370c      	adds	r7, #12
 801cf60:	46bd      	mov	sp, r7
 801cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf66:	4770      	bx	lr

0801cf68 <SCB_InvalidateDCache_by_Addr>:
{
 801cf68:	b480      	push	{r7}
 801cf6a:	b087      	sub	sp, #28
 801cf6c:	af00      	add	r7, sp, #0
 801cf6e:	6078      	str	r0, [r7, #4]
 801cf70:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 801cf72:	683b      	ldr	r3, [r7, #0]
 801cf74:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801cf7a:	2320      	movs	r3, #32
 801cf7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801cf7e:	f3bf 8f4f 	dsb	sy
}
 801cf82:	bf00      	nop
    while (op_size > 0) {
 801cf84:	e00b      	b.n	801cf9e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 801cf86:	4a0d      	ldr	r2, [pc, #52]	; (801cfbc <SCB_InvalidateDCache_by_Addr+0x54>)
 801cf88:	693b      	ldr	r3, [r7, #16]
 801cf8a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 801cf8e:	68fb      	ldr	r3, [r7, #12]
 801cf90:	693a      	ldr	r2, [r7, #16]
 801cf92:	4413      	add	r3, r2
 801cf94:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801cf96:	697a      	ldr	r2, [r7, #20]
 801cf98:	68fb      	ldr	r3, [r7, #12]
 801cf9a:	1ad3      	subs	r3, r2, r3
 801cf9c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801cf9e:	697b      	ldr	r3, [r7, #20]
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	dcf0      	bgt.n	801cf86 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801cfa4:	f3bf 8f4f 	dsb	sy
}
 801cfa8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801cfaa:	f3bf 8f6f 	isb	sy
}
 801cfae:	bf00      	nop
}
 801cfb0:	bf00      	nop
 801cfb2:	371c      	adds	r7, #28
 801cfb4:	46bd      	mov	sp, r7
 801cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfba:	4770      	bx	lr
 801cfbc:	e000ed00 	.word	0xe000ed00

0801cfc0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 801cfc0:	b580      	push	{r7, lr}
 801cfc2:	b084      	sub	sp, #16
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 801cfc8:	2300      	movs	r3, #0
 801cfca:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801cfcc:	4b47      	ldr	r3, [pc, #284]	; (801d0ec <low_level_init+0x12c>)
 801cfce:	4a48      	ldr	r2, [pc, #288]	; (801d0f0 <low_level_init+0x130>)
 801cfd0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 801cfd2:	2300      	movs	r3, #0
 801cfd4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 801cfd6:	2380      	movs	r3, #128	; 0x80
 801cfd8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 801cfda:	23e1      	movs	r3, #225	; 0xe1
 801cfdc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 801cfde:	2300      	movs	r3, #0
 801cfe0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 801cfe2:	2300      	movs	r3, #0
 801cfe4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 801cfe6:	2300      	movs	r3, #0
 801cfe8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 801cfea:	4a40      	ldr	r2, [pc, #256]	; (801d0ec <low_level_init+0x12c>)
 801cfec:	f107 0308 	add.w	r3, r7, #8
 801cff0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801cff2:	4b3e      	ldr	r3, [pc, #248]	; (801d0ec <low_level_init+0x12c>)
 801cff4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801cff8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 801cffa:	4b3c      	ldr	r3, [pc, #240]	; (801d0ec <low_level_init+0x12c>)
 801cffc:	4a3d      	ldr	r2, [pc, #244]	; (801d0f4 <low_level_init+0x134>)
 801cffe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 801d000:	4b3a      	ldr	r3, [pc, #232]	; (801d0ec <low_level_init+0x12c>)
 801d002:	4a3d      	ldr	r2, [pc, #244]	; (801d0f8 <low_level_init+0x138>)
 801d004:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 801d006:	4b39      	ldr	r3, [pc, #228]	; (801d0ec <low_level_init+0x12c>)
 801d008:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801d00c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
	switch(EI_data.ProtocolType)
 801d00e:	4b3b      	ldr	r3, [pc, #236]	; (801d0fc <low_level_init+0x13c>)
 801d010:	781b      	ldrb	r3, [r3, #0]
 801d012:	2b01      	cmp	r3, #1
 801d014:	d002      	beq.n	801d01c <low_level_init+0x5c>
 801d016:	2b02      	cmp	r3, #2
 801d018:	d004      	beq.n	801d024 <low_level_init+0x64>
		break;
	case SIEMENS:
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
		break;
	default:
		return;
 801d01a:	e063      	b.n	801d0e4 <low_level_init+0x124>
		heth.Init.MACAddr = &EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0];
 801d01c:	4b33      	ldr	r3, [pc, #204]	; (801d0ec <low_level_init+0x12c>)
 801d01e:	4a38      	ldr	r2, [pc, #224]	; (801d100 <low_level_init+0x140>)
 801d020:	605a      	str	r2, [r3, #4]
		break;
 801d022:	e003      	b.n	801d02c <low_level_init+0x6c>
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
 801d024:	4b31      	ldr	r3, [pc, #196]	; (801d0ec <low_level_init+0x12c>)
 801d026:	4a37      	ldr	r2, [pc, #220]	; (801d104 <low_level_init+0x144>)
 801d028:	605a      	str	r2, [r3, #4]
		break;
 801d02a:	bf00      	nop
	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801d02c:	482f      	ldr	r0, [pc, #188]	; (801d0ec <low_level_init+0x12c>)
 801d02e:	f7f9 fdc7 	bl	8016bc0 <HAL_ETH_Init>
 801d032:	4603      	mov	r3, r0
 801d034:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 801d036:	2238      	movs	r2, #56	; 0x38
 801d038:	2100      	movs	r1, #0
 801d03a:	4833      	ldr	r0, [pc, #204]	; (801d108 <low_level_init+0x148>)
 801d03c:	f005 fbb0 	bl	80227a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 801d040:	4b31      	ldr	r3, [pc, #196]	; (801d108 <low_level_init+0x148>)
 801d042:	2221      	movs	r2, #33	; 0x21
 801d044:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801d046:	4b30      	ldr	r3, [pc, #192]	; (801d108 <low_level_init+0x148>)
 801d048:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 801d04c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 801d04e:	4b2e      	ldr	r3, [pc, #184]	; (801d108 <low_level_init+0x148>)
 801d050:	2200      	movs	r2, #0
 801d052:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 801d054:	482d      	ldr	r0, [pc, #180]	; (801d10c <low_level_init+0x14c>)
 801d056:	f000 ff3d 	bl	801ded4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	2206      	movs	r2, #6
 801d05e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801d062:	4b22      	ldr	r3, [pc, #136]	; (801d0ec <low_level_init+0x12c>)
 801d064:	685b      	ldr	r3, [r3, #4]
 801d066:	781a      	ldrb	r2, [r3, #0]
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801d06e:	4b1f      	ldr	r3, [pc, #124]	; (801d0ec <low_level_init+0x12c>)
 801d070:	685b      	ldr	r3, [r3, #4]
 801d072:	785a      	ldrb	r2, [r3, #1]
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801d07a:	4b1c      	ldr	r3, [pc, #112]	; (801d0ec <low_level_init+0x12c>)
 801d07c:	685b      	ldr	r3, [r3, #4]
 801d07e:	789a      	ldrb	r2, [r3, #2]
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801d086:	4b19      	ldr	r3, [pc, #100]	; (801d0ec <low_level_init+0x12c>)
 801d088:	685b      	ldr	r3, [r3, #4]
 801d08a:	78da      	ldrb	r2, [r3, #3]
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801d092:	4b16      	ldr	r3, [pc, #88]	; (801d0ec <low_level_init+0x12c>)
 801d094:	685b      	ldr	r3, [r3, #4]
 801d096:	791a      	ldrb	r2, [r3, #4]
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801d09e:	4b13      	ldr	r3, [pc, #76]	; (801d0ec <low_level_init+0x12c>)
 801d0a0:	685b      	ldr	r3, [r3, #4]
 801d0a2:	795a      	ldrb	r2, [r3, #5]
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 801d0aa:	687b      	ldr	r3, [r7, #4]
 801d0ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801d0b0:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801d0b2:	687b      	ldr	r3, [r7, #4]
 801d0b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d0b8:	f043 030a 	orr.w	r3, r3, #10
 801d0bc:	b2da      	uxtb	r2, r3
 801d0be:	687b      	ldr	r3, [r7, #4]
 801d0c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 801d0c4:	4912      	ldr	r1, [pc, #72]	; (801d110 <low_level_init+0x150>)
 801d0c6:	4813      	ldr	r0, [pc, #76]	; (801d114 <low_level_init+0x154>)
 801d0c8:	f7f8 fa93 	bl	80155f2 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 801d0cc:	4811      	ldr	r0, [pc, #68]	; (801d114 <low_level_init+0x154>)
 801d0ce:	f7f8 fac2 	bl	8015656 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 801d0d2:	7bfb      	ldrb	r3, [r7, #15]
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d103      	bne.n	801d0e0 <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 801d0d8:	6878      	ldr	r0, [r7, #4]
 801d0da:	f000 fa37 	bl	801d54c <ethernet_link_check_state>
 801d0de:	e001      	b.n	801d0e4 <low_level_init+0x124>
  }
  else
  {
    Error_Handler();
 801d0e0:	f7f6 febc 	bl	8013e5c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 801d0e4:	3710      	adds	r7, #16
 801d0e6:	46bd      	mov	sp, r7
 801d0e8:	bd80      	pop	{r7, pc}
 801d0ea:	bf00      	nop
 801d0ec:	200106fc 	.word	0x200106fc
 801d0f0:	40028000 	.word	0x40028000
 801d0f4:	20000244 	.word	0x20000244
 801d0f8:	200001a4 	.word	0x200001a4
 801d0fc:	20000304 	.word	0x20000304
 801d100:	20000343 	.word	0x20000343
 801d104:	200005b1 	.word	0x200005b1
 801d108:	200107ac 	.word	0x200107ac
 801d10c:	08029288 	.word	0x08029288
 801d110:	20000128 	.word	0x20000128
 801d114:	200107e4 	.word	0x200107e4

0801d118 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801d118:	b580      	push	{r7, lr}
 801d11a:	b092      	sub	sp, #72	; 0x48
 801d11c:	af00      	add	r7, sp, #0
 801d11e:	6078      	str	r0, [r7, #4]
 801d120:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 801d122:	2300      	movs	r3, #0
 801d124:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 801d126:	2300      	movs	r3, #0
 801d128:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 801d12a:	2300      	movs	r3, #0
 801d12c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 801d130:	f107 030c 	add.w	r3, r7, #12
 801d134:	2230      	movs	r2, #48	; 0x30
 801d136:	2100      	movs	r1, #0
 801d138:	4618      	mov	r0, r3
 801d13a:	f005 fb31 	bl	80227a0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801d13e:	f107 030c 	add.w	r3, r7, #12
 801d142:	2230      	movs	r2, #48	; 0x30
 801d144:	2100      	movs	r1, #0
 801d146:	4618      	mov	r0, r3
 801d148:	f005 fb2a 	bl	80227a0 <memset>

  for(q = p; q != NULL; q = q->next)
 801d14c:	683b      	ldr	r3, [r7, #0]
 801d14e:	643b      	str	r3, [r7, #64]	; 0x40
 801d150:	e045      	b.n	801d1de <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 801d152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d154:	2b03      	cmp	r3, #3
 801d156:	d902      	bls.n	801d15e <low_level_output+0x46>
      return ERR_IF;
 801d158:	f06f 030b 	mvn.w	r3, #11
 801d15c:	e055      	b.n	801d20a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 801d15e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d160:	6859      	ldr	r1, [r3, #4]
 801d162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d164:	4613      	mov	r3, r2
 801d166:	005b      	lsls	r3, r3, #1
 801d168:	4413      	add	r3, r2
 801d16a:	009b      	lsls	r3, r3, #2
 801d16c:	3348      	adds	r3, #72	; 0x48
 801d16e:	443b      	add	r3, r7
 801d170:	3b3c      	subs	r3, #60	; 0x3c
 801d172:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 801d174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d176:	895b      	ldrh	r3, [r3, #10]
 801d178:	4619      	mov	r1, r3
 801d17a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d17c:	4613      	mov	r3, r2
 801d17e:	005b      	lsls	r3, r3, #1
 801d180:	4413      	add	r3, r2
 801d182:	009b      	lsls	r3, r3, #2
 801d184:	3348      	adds	r3, #72	; 0x48
 801d186:	443b      	add	r3, r7
 801d188:	3b38      	subs	r3, #56	; 0x38
 801d18a:	6019      	str	r1, [r3, #0]

    if(i>0)
 801d18c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d011      	beq.n	801d1b6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 801d192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d194:	1e5a      	subs	r2, r3, #1
 801d196:	f107 000c 	add.w	r0, r7, #12
 801d19a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801d19c:	460b      	mov	r3, r1
 801d19e:	005b      	lsls	r3, r3, #1
 801d1a0:	440b      	add	r3, r1
 801d1a2:	009b      	lsls	r3, r3, #2
 801d1a4:	18c1      	adds	r1, r0, r3
 801d1a6:	4613      	mov	r3, r2
 801d1a8:	005b      	lsls	r3, r3, #1
 801d1aa:	4413      	add	r3, r2
 801d1ac:	009b      	lsls	r3, r3, #2
 801d1ae:	3348      	adds	r3, #72	; 0x48
 801d1b0:	443b      	add	r3, r7
 801d1b2:	3b34      	subs	r3, #52	; 0x34
 801d1b4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 801d1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d1b8:	681b      	ldr	r3, [r3, #0]
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	d109      	bne.n	801d1d2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 801d1be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d1c0:	4613      	mov	r3, r2
 801d1c2:	005b      	lsls	r3, r3, #1
 801d1c4:	4413      	add	r3, r2
 801d1c6:	009b      	lsls	r3, r3, #2
 801d1c8:	3348      	adds	r3, #72	; 0x48
 801d1ca:	443b      	add	r3, r7
 801d1cc:	3b34      	subs	r3, #52	; 0x34
 801d1ce:	2200      	movs	r2, #0
 801d1d0:	601a      	str	r2, [r3, #0]
    }

    i++;
 801d1d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d1d4:	3301      	adds	r3, #1
 801d1d6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 801d1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d1da:	681b      	ldr	r3, [r3, #0]
 801d1dc:	643b      	str	r3, [r7, #64]	; 0x40
 801d1de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	d1b6      	bne.n	801d152 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 801d1e4:	683b      	ldr	r3, [r7, #0]
 801d1e6:	891b      	ldrh	r3, [r3, #8]
 801d1e8:	461a      	mov	r2, r3
 801d1ea:	4b0a      	ldr	r3, [pc, #40]	; (801d214 <low_level_output+0xfc>)
 801d1ec:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 801d1ee:	4a09      	ldr	r2, [pc, #36]	; (801d214 <low_level_output+0xfc>)
 801d1f0:	f107 030c 	add.w	r3, r7, #12
 801d1f4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801d1f6:	4a07      	ldr	r2, [pc, #28]	; (801d214 <low_level_output+0xfc>)
 801d1f8:	683b      	ldr	r3, [r7, #0]
 801d1fa:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 801d1fc:	2214      	movs	r2, #20
 801d1fe:	4905      	ldr	r1, [pc, #20]	; (801d214 <low_level_output+0xfc>)
 801d200:	4805      	ldr	r0, [pc, #20]	; (801d218 <low_level_output+0x100>)
 801d202:	f7f9 fe11 	bl	8016e28 <HAL_ETH_Transmit>

  return errval;
 801d206:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801d20a:	4618      	mov	r0, r3
 801d20c:	3748      	adds	r7, #72	; 0x48
 801d20e:	46bd      	mov	sp, r7
 801d210:	bd80      	pop	{r7, pc}
 801d212:	bf00      	nop
 801d214:	200107ac 	.word	0x200107ac
 801d218:	200106fc 	.word	0x200106fc

0801d21c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801d21c:	b580      	push	{r7, lr}
 801d21e:	b084      	sub	sp, #16
 801d220:	af00      	add	r7, sp, #0
 801d222:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801d224:	2300      	movs	r3, #0
 801d226:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 801d228:	4b07      	ldr	r3, [pc, #28]	; (801d248 <low_level_input+0x2c>)
 801d22a:	781b      	ldrb	r3, [r3, #0]
 801d22c:	2b00      	cmp	r3, #0
 801d22e:	d105      	bne.n	801d23c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 801d230:	f107 030c 	add.w	r3, r7, #12
 801d234:	4619      	mov	r1, r3
 801d236:	4805      	ldr	r0, [pc, #20]	; (801d24c <low_level_input+0x30>)
 801d238:	f7f9 fe8a 	bl	8016f50 <HAL_ETH_ReadData>
  }

  return p;
 801d23c:	68fb      	ldr	r3, [r7, #12]
}
 801d23e:	4618      	mov	r0, r3
 801d240:	3710      	adds	r7, #16
 801d242:	46bd      	mov	sp, r7
 801d244:	bd80      	pop	{r7, pc}
 801d246:	bf00      	nop
 801d248:	200106f8 	.word	0x200106f8
 801d24c:	200106fc 	.word	0x200106fc

0801d250 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 801d250:	b580      	push	{r7, lr}
 801d252:	b084      	sub	sp, #16
 801d254:	af00      	add	r7, sp, #0
 801d256:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801d258:	2300      	movs	r3, #0
 801d25a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 801d25c:	6878      	ldr	r0, [r7, #4]
 801d25e:	f7ff ffdd 	bl	801d21c <low_level_input>
 801d262:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 801d264:	68fb      	ldr	r3, [r7, #12]
 801d266:	2b00      	cmp	r3, #0
 801d268:	d00a      	beq.n	801d280 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	691b      	ldr	r3, [r3, #16]
 801d26e:	6879      	ldr	r1, [r7, #4]
 801d270:	68f8      	ldr	r0, [r7, #12]
 801d272:	4798      	blx	r3
 801d274:	4603      	mov	r3, r0
 801d276:	2b00      	cmp	r3, #0
 801d278:	d002      	beq.n	801d280 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 801d27a:	68f8      	ldr	r0, [r7, #12]
 801d27c:	f001 fe40 	bl	801ef00 <pbuf_free>
      }
    }
  } while(p!=NULL);
 801d280:	68fb      	ldr	r3, [r7, #12]
 801d282:	2b00      	cmp	r3, #0
 801d284:	d1ea      	bne.n	801d25c <ethernetif_input+0xc>
}
 801d286:	bf00      	nop
 801d288:	bf00      	nop
 801d28a:	3710      	adds	r7, #16
 801d28c:	46bd      	mov	sp, r7
 801d28e:	bd80      	pop	{r7, pc}

0801d290 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801d290:	b580      	push	{r7, lr}
 801d292:	b082      	sub	sp, #8
 801d294:	af00      	add	r7, sp, #0
 801d296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	d106      	bne.n	801d2ac <ethernetif_init+0x1c>
 801d29e:	4b0e      	ldr	r3, [pc, #56]	; (801d2d8 <ethernetif_init+0x48>)
 801d2a0:	f240 1287 	movw	r2, #391	; 0x187
 801d2a4:	490d      	ldr	r1, [pc, #52]	; (801d2dc <ethernetif_init+0x4c>)
 801d2a6:	480e      	ldr	r0, [pc, #56]	; (801d2e0 <ethernetif_init+0x50>)
 801d2a8:	f005 fb62 	bl	8022970 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	2273      	movs	r2, #115	; 0x73
 801d2b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	2274      	movs	r2, #116	; 0x74
 801d2b8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	4a09      	ldr	r2, [pc, #36]	; (801d2e4 <ethernetif_init+0x54>)
 801d2c0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	4a08      	ldr	r2, [pc, #32]	; (801d2e8 <ethernetif_init+0x58>)
 801d2c6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801d2c8:	6878      	ldr	r0, [r7, #4]
 801d2ca:	f7ff fe79 	bl	801cfc0 <low_level_init>

  return ERR_OK;
 801d2ce:	2300      	movs	r3, #0
}
 801d2d0:	4618      	mov	r0, r3
 801d2d2:	3708      	adds	r7, #8
 801d2d4:	46bd      	mov	sp, r7
 801d2d6:	bd80      	pop	{r7, pc}
 801d2d8:	080277e0 	.word	0x080277e0
 801d2dc:	080277fc 	.word	0x080277fc
 801d2e0:	0802780c 	.word	0x0802780c
 801d2e4:	080208ad 	.word	0x080208ad
 801d2e8:	0801d119 	.word	0x0801d119

0801d2ec <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 801d2ec:	b580      	push	{r7, lr}
 801d2ee:	b084      	sub	sp, #16
 801d2f0:	af00      	add	r7, sp, #0
 801d2f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 801d2f8:	68f9      	ldr	r1, [r7, #12]
 801d2fa:	4807      	ldr	r0, [pc, #28]	; (801d318 <pbuf_free_custom+0x2c>)
 801d2fc:	f000 fecc 	bl	801e098 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 801d300:	4b06      	ldr	r3, [pc, #24]	; (801d31c <pbuf_free_custom+0x30>)
 801d302:	781b      	ldrb	r3, [r3, #0]
 801d304:	2b01      	cmp	r3, #1
 801d306:	d102      	bne.n	801d30e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 801d308:	4b04      	ldr	r3, [pc, #16]	; (801d31c <pbuf_free_custom+0x30>)
 801d30a:	2200      	movs	r2, #0
 801d30c:	701a      	strb	r2, [r3, #0]
  }
}
 801d30e:	bf00      	nop
 801d310:	3710      	adds	r7, #16
 801d312:	46bd      	mov	sp, r7
 801d314:	bd80      	pop	{r7, pc}
 801d316:	bf00      	nop
 801d318:	08029288 	.word	0x08029288
 801d31c:	200106f8 	.word	0x200106f8

0801d320 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 801d320:	b580      	push	{r7, lr}
 801d322:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 801d324:	f7f8 fb26 	bl	8015974 <HAL_GetTick>
 801d328:	4603      	mov	r3, r0
}
 801d32a:	4618      	mov	r0, r3
 801d32c:	bd80      	pop	{r7, pc}
	...

0801d330 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 801d330:	b580      	push	{r7, lr}
 801d332:	b08e      	sub	sp, #56	; 0x38
 801d334:	af00      	add	r7, sp, #0
 801d336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d33c:	2200      	movs	r2, #0
 801d33e:	601a      	str	r2, [r3, #0]
 801d340:	605a      	str	r2, [r3, #4]
 801d342:	609a      	str	r2, [r3, #8]
 801d344:	60da      	str	r2, [r3, #12]
 801d346:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	4a52      	ldr	r2, [pc, #328]	; (801d498 <HAL_ETH_MspInit+0x168>)
 801d34e:	4293      	cmp	r3, r2
 801d350:	f040 809e 	bne.w	801d490 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801d354:	4b51      	ldr	r3, [pc, #324]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d358:	4a50      	ldr	r2, [pc, #320]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d35a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801d35e:	6313      	str	r3, [r2, #48]	; 0x30
 801d360:	4b4e      	ldr	r3, [pc, #312]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d368:	623b      	str	r3, [r7, #32]
 801d36a:	6a3b      	ldr	r3, [r7, #32]
 801d36c:	4b4b      	ldr	r3, [pc, #300]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d370:	4a4a      	ldr	r2, [pc, #296]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d372:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801d376:	6313      	str	r3, [r2, #48]	; 0x30
 801d378:	4b48      	ldr	r3, [pc, #288]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d37c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801d380:	61fb      	str	r3, [r7, #28]
 801d382:	69fb      	ldr	r3, [r7, #28]
 801d384:	4b45      	ldr	r3, [pc, #276]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d388:	4a44      	ldr	r2, [pc, #272]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d38a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801d38e:	6313      	str	r3, [r2, #48]	; 0x30
 801d390:	4b42      	ldr	r3, [pc, #264]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d398:	61bb      	str	r3, [r7, #24]
 801d39a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801d39c:	4b3f      	ldr	r3, [pc, #252]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3a0:	4a3e      	ldr	r2, [pc, #248]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d3a2:	f043 0304 	orr.w	r3, r3, #4
 801d3a6:	6313      	str	r3, [r2, #48]	; 0x30
 801d3a8:	4b3c      	ldr	r3, [pc, #240]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3ac:	f003 0304 	and.w	r3, r3, #4
 801d3b0:	617b      	str	r3, [r7, #20]
 801d3b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d3b4:	4b39      	ldr	r3, [pc, #228]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3b8:	4a38      	ldr	r2, [pc, #224]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d3ba:	f043 0301 	orr.w	r3, r3, #1
 801d3be:	6313      	str	r3, [r2, #48]	; 0x30
 801d3c0:	4b36      	ldr	r3, [pc, #216]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3c4:	f003 0301 	and.w	r3, r3, #1
 801d3c8:	613b      	str	r3, [r7, #16]
 801d3ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801d3cc:	4b33      	ldr	r3, [pc, #204]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3d0:	4a32      	ldr	r2, [pc, #200]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d3d2:	f043 0302 	orr.w	r3, r3, #2
 801d3d6:	6313      	str	r3, [r2, #48]	; 0x30
 801d3d8:	4b30      	ldr	r3, [pc, #192]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3dc:	f003 0302 	and.w	r3, r3, #2
 801d3e0:	60fb      	str	r3, [r7, #12]
 801d3e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801d3e4:	4b2d      	ldr	r3, [pc, #180]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3e8:	4a2c      	ldr	r2, [pc, #176]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d3ee:	6313      	str	r3, [r2, #48]	; 0x30
 801d3f0:	4b2a      	ldr	r3, [pc, #168]	; (801d49c <HAL_ETH_MspInit+0x16c>)
 801d3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3f8:	60bb      	str	r3, [r7, #8]
 801d3fa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 801d3fc:	2332      	movs	r3, #50	; 0x32
 801d3fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d400:	2302      	movs	r3, #2
 801d402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d404:	2300      	movs	r3, #0
 801d406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d408:	2303      	movs	r3, #3
 801d40a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d40c:	230b      	movs	r3, #11
 801d40e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d414:	4619      	mov	r1, r3
 801d416:	4822      	ldr	r0, [pc, #136]	; (801d4a0 <HAL_ETH_MspInit+0x170>)
 801d418:	f7fa fdb8 	bl	8017f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 801d41c:	2386      	movs	r3, #134	; 0x86
 801d41e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d420:	2302      	movs	r3, #2
 801d422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d424:	2300      	movs	r3, #0
 801d426:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d428:	2303      	movs	r3, #3
 801d42a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d42c:	230b      	movs	r3, #11
 801d42e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d434:	4619      	mov	r1, r3
 801d436:	481b      	ldr	r0, [pc, #108]	; (801d4a4 <HAL_ETH_MspInit+0x174>)
 801d438:	f7fa fda8 	bl	8017f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 801d43c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d442:	2302      	movs	r3, #2
 801d444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d446:	2300      	movs	r3, #0
 801d448:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d44a:	2303      	movs	r3, #3
 801d44c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d44e:	230b      	movs	r3, #11
 801d450:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 801d452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d456:	4619      	mov	r1, r3
 801d458:	4813      	ldr	r0, [pc, #76]	; (801d4a8 <HAL_ETH_MspInit+0x178>)
 801d45a:	f7fa fd97 	bl	8017f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 801d45e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801d462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d464:	2302      	movs	r3, #2
 801d466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d468:	2300      	movs	r3, #0
 801d46a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d46c:	2303      	movs	r3, #3
 801d46e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d470:	230b      	movs	r3, #11
 801d472:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801d474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d478:	4619      	mov	r1, r3
 801d47a:	480c      	ldr	r0, [pc, #48]	; (801d4ac <HAL_ETH_MspInit+0x17c>)
 801d47c:	f7fa fd86 	bl	8017f8c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 801d480:	2200      	movs	r2, #0
 801d482:	2101      	movs	r1, #1
 801d484:	203d      	movs	r0, #61	; 0x3d
 801d486:	f7f9 fa56 	bl	8016936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801d48a:	203d      	movs	r0, #61	; 0x3d
 801d48c:	f7f9 fa6f 	bl	801696e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801d490:	bf00      	nop
 801d492:	3738      	adds	r7, #56	; 0x38
 801d494:	46bd      	mov	sp, r7
 801d496:	bd80      	pop	{r7, pc}
 801d498:	40028000 	.word	0x40028000
 801d49c:	40023800 	.word	0x40023800
 801d4a0:	40020800 	.word	0x40020800
 801d4a4:	40020000 	.word	0x40020000
 801d4a8:	40020400 	.word	0x40020400
 801d4ac:	40021800 	.word	0x40021800

0801d4b0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 801d4b0:	b580      	push	{r7, lr}
 801d4b2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801d4b4:	4802      	ldr	r0, [pc, #8]	; (801d4c0 <ETH_PHY_IO_Init+0x10>)
 801d4b6:	f7fa f90f 	bl	80176d8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 801d4ba:	2300      	movs	r3, #0
}
 801d4bc:	4618      	mov	r0, r3
 801d4be:	bd80      	pop	{r7, pc}
 801d4c0:	200106fc 	.word	0x200106fc

0801d4c4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801d4c4:	b480      	push	{r7}
 801d4c6:	af00      	add	r7, sp, #0
  return 0;
 801d4c8:	2300      	movs	r3, #0
}
 801d4ca:	4618      	mov	r0, r3
 801d4cc:	46bd      	mov	sp, r7
 801d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4d2:	4770      	bx	lr

0801d4d4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801d4d4:	b580      	push	{r7, lr}
 801d4d6:	b084      	sub	sp, #16
 801d4d8:	af00      	add	r7, sp, #0
 801d4da:	60f8      	str	r0, [r7, #12]
 801d4dc:	60b9      	str	r1, [r7, #8]
 801d4de:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	68ba      	ldr	r2, [r7, #8]
 801d4e4:	68f9      	ldr	r1, [r7, #12]
 801d4e6:	4807      	ldr	r0, [pc, #28]	; (801d504 <ETH_PHY_IO_ReadReg+0x30>)
 801d4e8:	f7f9 ff5e 	bl	80173a8 <HAL_ETH_ReadPHYRegister>
 801d4ec:	4603      	mov	r3, r0
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	d002      	beq.n	801d4f8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801d4f2:	f04f 33ff 	mov.w	r3, #4294967295
 801d4f6:	e000      	b.n	801d4fa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 801d4f8:	2300      	movs	r3, #0
}
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	3710      	adds	r7, #16
 801d4fe:	46bd      	mov	sp, r7
 801d500:	bd80      	pop	{r7, pc}
 801d502:	bf00      	nop
 801d504:	200106fc 	.word	0x200106fc

0801d508 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 801d508:	b580      	push	{r7, lr}
 801d50a:	b084      	sub	sp, #16
 801d50c:	af00      	add	r7, sp, #0
 801d50e:	60f8      	str	r0, [r7, #12]
 801d510:	60b9      	str	r1, [r7, #8]
 801d512:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	68ba      	ldr	r2, [r7, #8]
 801d518:	68f9      	ldr	r1, [r7, #12]
 801d51a:	4807      	ldr	r0, [pc, #28]	; (801d538 <ETH_PHY_IO_WriteReg+0x30>)
 801d51c:	f7f9 ff8f 	bl	801743e <HAL_ETH_WritePHYRegister>
 801d520:	4603      	mov	r3, r0
 801d522:	2b00      	cmp	r3, #0
 801d524:	d002      	beq.n	801d52c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801d526:	f04f 33ff 	mov.w	r3, #4294967295
 801d52a:	e000      	b.n	801d52e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 801d52c:	2300      	movs	r3, #0
}
 801d52e:	4618      	mov	r0, r3
 801d530:	3710      	adds	r7, #16
 801d532:	46bd      	mov	sp, r7
 801d534:	bd80      	pop	{r7, pc}
 801d536:	bf00      	nop
 801d538:	200106fc 	.word	0x200106fc

0801d53c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 801d53c:	b580      	push	{r7, lr}
 801d53e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801d540:	f7f8 fa18 	bl	8015974 <HAL_GetTick>
 801d544:	4603      	mov	r3, r0
}
 801d546:	4618      	mov	r0, r3
 801d548:	bd80      	pop	{r7, pc}
	...

0801d54c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 801d54c:	b580      	push	{r7, lr}
 801d54e:	b0a0      	sub	sp, #128	; 0x80
 801d550:	af00      	add	r7, sp, #0
 801d552:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 801d554:	f107 030c 	add.w	r3, r7, #12
 801d558:	2264      	movs	r2, #100	; 0x64
 801d55a:	2100      	movs	r1, #0
 801d55c:	4618      	mov	r0, r3
 801d55e:	f005 f91f 	bl	80227a0 <memset>
  int32_t PHYLinkState = 0;
 801d562:	2300      	movs	r3, #0
 801d564:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 801d566:	2300      	movs	r3, #0
 801d568:	67fb      	str	r3, [r7, #124]	; 0x7c
 801d56a:	2300      	movs	r3, #0
 801d56c:	67bb      	str	r3, [r7, #120]	; 0x78
 801d56e:	2300      	movs	r3, #0
 801d570:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 801d572:	483a      	ldr	r0, [pc, #232]	; (801d65c <ethernet_link_check_state+0x110>)
 801d574:	f7f8 f917 	bl	80157a6 <DP83848_GetLinkState>
 801d578:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d580:	089b      	lsrs	r3, r3, #2
 801d582:	f003 0301 	and.w	r3, r3, #1
 801d586:	b2db      	uxtb	r3, r3
 801d588:	2b00      	cmp	r3, #0
 801d58a:	d00c      	beq.n	801d5a6 <ethernet_link_check_state+0x5a>
 801d58c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d58e:	2b01      	cmp	r3, #1
 801d590:	dc09      	bgt.n	801d5a6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 801d592:	4833      	ldr	r0, [pc, #204]	; (801d660 <ethernet_link_check_state+0x114>)
 801d594:	f7f9 fbef 	bl	8016d76 <HAL_ETH_Stop>
    netif_set_down(netif);
 801d598:	6878      	ldr	r0, [r7, #4]
 801d59a:	f001 f84b 	bl	801e634 <netif_set_down>
    netif_set_link_down(netif);
 801d59e:	6878      	ldr	r0, [r7, #4]
 801d5a0:	f001 f8ae 	bl	801e700 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 801d5a4:	e055      	b.n	801d652 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 801d5a6:	687b      	ldr	r3, [r7, #4]
 801d5a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d5ac:	f003 0304 	and.w	r3, r3, #4
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d14e      	bne.n	801d652 <ethernet_link_check_state+0x106>
 801d5b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d5b6:	2b01      	cmp	r3, #1
 801d5b8:	dd4b      	ble.n	801d652 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 801d5ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d5bc:	3b02      	subs	r3, #2
 801d5be:	2b03      	cmp	r3, #3
 801d5c0:	d82a      	bhi.n	801d618 <ethernet_link_check_state+0xcc>
 801d5c2:	a201      	add	r2, pc, #4	; (adr r2, 801d5c8 <ethernet_link_check_state+0x7c>)
 801d5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d5c8:	0801d5d9 	.word	0x0801d5d9
 801d5cc:	0801d5eb 	.word	0x0801d5eb
 801d5d0:	0801d5fb 	.word	0x0801d5fb
 801d5d4:	0801d60b 	.word	0x0801d60b
      duplex = ETH_FULLDUPLEX_MODE;
 801d5d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d5dc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801d5de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d5e2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d5e4:	2301      	movs	r3, #1
 801d5e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d5e8:	e017      	b.n	801d61a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801d5ea:	2300      	movs	r3, #0
 801d5ec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801d5ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d5f2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d5f4:	2301      	movs	r3, #1
 801d5f6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d5f8:	e00f      	b.n	801d61a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 801d5fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d5fe:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801d600:	2300      	movs	r3, #0
 801d602:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d604:	2301      	movs	r3, #1
 801d606:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d608:	e007      	b.n	801d61a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801d60a:	2300      	movs	r3, #0
 801d60c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801d60e:	2300      	movs	r3, #0
 801d610:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d612:	2301      	movs	r3, #1
 801d614:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d616:	e000      	b.n	801d61a <ethernet_link_check_state+0xce>
      break;
 801d618:	bf00      	nop
    if(linkchanged)
 801d61a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	d018      	beq.n	801d652 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 801d620:	f107 030c 	add.w	r3, r7, #12
 801d624:	4619      	mov	r1, r3
 801d626:	480e      	ldr	r0, [pc, #56]	; (801d660 <ethernet_link_check_state+0x114>)
 801d628:	f7f9 ff52 	bl	80174d0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 801d62c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d62e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 801d630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d632:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801d634:	f107 030c 	add.w	r3, r7, #12
 801d638:	4619      	mov	r1, r3
 801d63a:	4809      	ldr	r0, [pc, #36]	; (801d660 <ethernet_link_check_state+0x114>)
 801d63c:	f7fa f832 	bl	80176a4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 801d640:	4807      	ldr	r0, [pc, #28]	; (801d660 <ethernet_link_check_state+0x114>)
 801d642:	f7f9 fb39 	bl	8016cb8 <HAL_ETH_Start>
      netif_set_up(netif);
 801d646:	6878      	ldr	r0, [r7, #4]
 801d648:	f000 ff88 	bl	801e55c <netif_set_up>
      netif_set_link_up(netif);
 801d64c:	6878      	ldr	r0, [r7, #4]
 801d64e:	f001 f823 	bl	801e698 <netif_set_link_up>
}
 801d652:	bf00      	nop
 801d654:	3780      	adds	r7, #128	; 0x80
 801d656:	46bd      	mov	sp, r7
 801d658:	bd80      	pop	{r7, pc}
 801d65a:	bf00      	nop
 801d65c:	200107e4 	.word	0x200107e4
 801d660:	200106fc 	.word	0x200106fc

0801d664 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 801d664:	b580      	push	{r7, lr}
 801d666:	b086      	sub	sp, #24
 801d668:	af02      	add	r7, sp, #8
 801d66a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 801d66c:	4812      	ldr	r0, [pc, #72]	; (801d6b8 <HAL_ETH_RxAllocateCallback+0x54>)
 801d66e:	f000 fca5 	bl	801dfbc <memp_malloc_pool>
 801d672:	60f8      	str	r0, [r7, #12]
	if (p)
 801d674:	68fb      	ldr	r3, [r7, #12]
 801d676:	2b00      	cmp	r3, #0
 801d678:	d014      	beq.n	801d6a4 <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 801d67a:	68fb      	ldr	r3, [r7, #12]
 801d67c:	f103 0214 	add.w	r2, r3, #20
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	4a0d      	ldr	r2, [pc, #52]	; (801d6bc <HAL_ETH_RxAllocateCallback+0x58>)
 801d688:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 801d68a:	687b      	ldr	r3, [r7, #4]
 801d68c:	681b      	ldr	r3, [r3, #0]
 801d68e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801d692:	9201      	str	r2, [sp, #4]
 801d694:	9300      	str	r3, [sp, #0]
 801d696:	68fb      	ldr	r3, [r7, #12]
 801d698:	2241      	movs	r2, #65	; 0x41
 801d69a:	2100      	movs	r1, #0
 801d69c:	2000      	movs	r0, #0
 801d69e:	f001 fa75 	bl	801eb8c <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 801d6a2:	e005      	b.n	801d6b0 <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 801d6a4:	4b06      	ldr	r3, [pc, #24]	; (801d6c0 <HAL_ETH_RxAllocateCallback+0x5c>)
 801d6a6:	2201      	movs	r2, #1
 801d6a8:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	2200      	movs	r2, #0
 801d6ae:	601a      	str	r2, [r3, #0]
}
 801d6b0:	bf00      	nop
 801d6b2:	3710      	adds	r7, #16
 801d6b4:	46bd      	mov	sp, r7
 801d6b6:	bd80      	pop	{r7, pc}
 801d6b8:	08029288 	.word	0x08029288
 801d6bc:	0801d2ed 	.word	0x0801d2ed
 801d6c0:	200106f8 	.word	0x200106f8

0801d6c4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 801d6c4:	b580      	push	{r7, lr}
 801d6c6:	b088      	sub	sp, #32
 801d6c8:	af00      	add	r7, sp, #0
 801d6ca:	60f8      	str	r0, [r7, #12]
 801d6cc:	60b9      	str	r1, [r7, #8]
 801d6ce:	607a      	str	r2, [r7, #4]
 801d6d0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 801d6d2:	68fb      	ldr	r3, [r7, #12]
 801d6d4:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 801d6d6:	68bb      	ldr	r3, [r7, #8]
 801d6d8:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 801d6da:	2300      	movs	r3, #0
 801d6dc:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	3b14      	subs	r3, #20
 801d6e2:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 801d6e4:	69fb      	ldr	r3, [r7, #28]
 801d6e6:	2200      	movs	r2, #0
 801d6e8:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 801d6ea:	69fb      	ldr	r3, [r7, #28]
 801d6ec:	2200      	movs	r2, #0
 801d6ee:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 801d6f0:	69fb      	ldr	r3, [r7, #28]
 801d6f2:	887a      	ldrh	r2, [r7, #2]
 801d6f4:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 801d6f6:	69bb      	ldr	r3, [r7, #24]
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	d103      	bne.n	801d706 <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 801d6fe:	69bb      	ldr	r3, [r7, #24]
 801d700:	69fa      	ldr	r2, [r7, #28]
 801d702:	601a      	str	r2, [r3, #0]
 801d704:	e003      	b.n	801d70e <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 801d706:	697b      	ldr	r3, [r7, #20]
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	69fa      	ldr	r2, [r7, #28]
 801d70c:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 801d70e:	697b      	ldr	r3, [r7, #20]
 801d710:	69fa      	ldr	r2, [r7, #28]
 801d712:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 801d714:	69bb      	ldr	r3, [r7, #24]
 801d716:	681b      	ldr	r3, [r3, #0]
 801d718:	61fb      	str	r3, [r7, #28]
 801d71a:	e009      	b.n	801d730 <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 801d71c:	69fb      	ldr	r3, [r7, #28]
 801d71e:	891a      	ldrh	r2, [r3, #8]
 801d720:	887b      	ldrh	r3, [r7, #2]
 801d722:	4413      	add	r3, r2
 801d724:	b29a      	uxth	r2, r3
 801d726:	69fb      	ldr	r3, [r7, #28]
 801d728:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 801d72a:	69fb      	ldr	r3, [r7, #28]
 801d72c:	681b      	ldr	r3, [r3, #0]
 801d72e:	61fb      	str	r3, [r7, #28]
 801d730:	69fb      	ldr	r3, [r7, #28]
 801d732:	2b00      	cmp	r3, #0
 801d734:	d1f2      	bne.n	801d71c <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 801d736:	887b      	ldrh	r3, [r7, #2]
 801d738:	4619      	mov	r1, r3
 801d73a:	6878      	ldr	r0, [r7, #4]
 801d73c:	f7ff fc14 	bl	801cf68 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 801d740:	bf00      	nop
 801d742:	3720      	adds	r7, #32
 801d744:	46bd      	mov	sp, r7
 801d746:	bd80      	pop	{r7, pc}

0801d748 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801d748:	b480      	push	{r7}
 801d74a:	b083      	sub	sp, #12
 801d74c:	af00      	add	r7, sp, #0
 801d74e:	4603      	mov	r3, r0
 801d750:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801d752:	88fb      	ldrh	r3, [r7, #6]
 801d754:	021b      	lsls	r3, r3, #8
 801d756:	b21a      	sxth	r2, r3
 801d758:	88fb      	ldrh	r3, [r7, #6]
 801d75a:	0a1b      	lsrs	r3, r3, #8
 801d75c:	b29b      	uxth	r3, r3
 801d75e:	b21b      	sxth	r3, r3
 801d760:	4313      	orrs	r3, r2
 801d762:	b21b      	sxth	r3, r3
 801d764:	b29b      	uxth	r3, r3
}
 801d766:	4618      	mov	r0, r3
 801d768:	370c      	adds	r7, #12
 801d76a:	46bd      	mov	sp, r7
 801d76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d770:	4770      	bx	lr

0801d772 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801d772:	b580      	push	{r7, lr}
 801d774:	b082      	sub	sp, #8
 801d776:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801d778:	2300      	movs	r3, #0
 801d77a:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801d77c:	f000 f8d2 	bl	801d924 <mem_init>
  memp_init();
 801d780:	f000 fbd8 	bl	801df34 <memp_init>
  pbuf_init();
  netif_init();
 801d784:	f000 fcfc 	bl	801e180 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801d788:	f001 ff9a 	bl	801f6c0 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801d78c:	f001 ff16 	bl	801f5bc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801d790:	bf00      	nop
 801d792:	3708      	adds	r7, #8
 801d794:	46bd      	mov	sp, r7
 801d796:	bd80      	pop	{r7, pc}

0801d798 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801d798:	b480      	push	{r7}
 801d79a:	b083      	sub	sp, #12
 801d79c:	af00      	add	r7, sp, #0
 801d79e:	4603      	mov	r3, r0
 801d7a0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801d7a2:	4b05      	ldr	r3, [pc, #20]	; (801d7b8 <ptr_to_mem+0x20>)
 801d7a4:	681a      	ldr	r2, [r3, #0]
 801d7a6:	88fb      	ldrh	r3, [r7, #6]
 801d7a8:	4413      	add	r3, r2
}
 801d7aa:	4618      	mov	r0, r3
 801d7ac:	370c      	adds	r7, #12
 801d7ae:	46bd      	mov	sp, r7
 801d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7b4:	4770      	bx	lr
 801d7b6:	bf00      	nop
 801d7b8:	20010e70 	.word	0x20010e70

0801d7bc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801d7bc:	b480      	push	{r7}
 801d7be:	b083      	sub	sp, #12
 801d7c0:	af00      	add	r7, sp, #0
 801d7c2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801d7c4:	4b05      	ldr	r3, [pc, #20]	; (801d7dc <mem_to_ptr+0x20>)
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	687a      	ldr	r2, [r7, #4]
 801d7ca:	1ad3      	subs	r3, r2, r3
 801d7cc:	b29b      	uxth	r3, r3
}
 801d7ce:	4618      	mov	r0, r3
 801d7d0:	370c      	adds	r7, #12
 801d7d2:	46bd      	mov	sp, r7
 801d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7d8:	4770      	bx	lr
 801d7da:	bf00      	nop
 801d7dc:	20010e70 	.word	0x20010e70

0801d7e0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801d7e0:	b590      	push	{r4, r7, lr}
 801d7e2:	b085      	sub	sp, #20
 801d7e4:	af00      	add	r7, sp, #0
 801d7e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801d7e8:	4b45      	ldr	r3, [pc, #276]	; (801d900 <plug_holes+0x120>)
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	687a      	ldr	r2, [r7, #4]
 801d7ee:	429a      	cmp	r2, r3
 801d7f0:	d206      	bcs.n	801d800 <plug_holes+0x20>
 801d7f2:	4b44      	ldr	r3, [pc, #272]	; (801d904 <plug_holes+0x124>)
 801d7f4:	f240 12df 	movw	r2, #479	; 0x1df
 801d7f8:	4943      	ldr	r1, [pc, #268]	; (801d908 <plug_holes+0x128>)
 801d7fa:	4844      	ldr	r0, [pc, #272]	; (801d90c <plug_holes+0x12c>)
 801d7fc:	f005 f8b8 	bl	8022970 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801d800:	4b43      	ldr	r3, [pc, #268]	; (801d910 <plug_holes+0x130>)
 801d802:	681b      	ldr	r3, [r3, #0]
 801d804:	687a      	ldr	r2, [r7, #4]
 801d806:	429a      	cmp	r2, r3
 801d808:	d306      	bcc.n	801d818 <plug_holes+0x38>
 801d80a:	4b3e      	ldr	r3, [pc, #248]	; (801d904 <plug_holes+0x124>)
 801d80c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d810:	4940      	ldr	r1, [pc, #256]	; (801d914 <plug_holes+0x134>)
 801d812:	483e      	ldr	r0, [pc, #248]	; (801d90c <plug_holes+0x12c>)
 801d814:	f005 f8ac 	bl	8022970 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	791b      	ldrb	r3, [r3, #4]
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d006      	beq.n	801d82e <plug_holes+0x4e>
 801d820:	4b38      	ldr	r3, [pc, #224]	; (801d904 <plug_holes+0x124>)
 801d822:	f240 12e1 	movw	r2, #481	; 0x1e1
 801d826:	493c      	ldr	r1, [pc, #240]	; (801d918 <plug_holes+0x138>)
 801d828:	4838      	ldr	r0, [pc, #224]	; (801d90c <plug_holes+0x12c>)
 801d82a:	f005 f8a1 	bl	8022970 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	881b      	ldrh	r3, [r3, #0]
 801d832:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d836:	d906      	bls.n	801d846 <plug_holes+0x66>
 801d838:	4b32      	ldr	r3, [pc, #200]	; (801d904 <plug_holes+0x124>)
 801d83a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801d83e:	4937      	ldr	r1, [pc, #220]	; (801d91c <plug_holes+0x13c>)
 801d840:	4832      	ldr	r0, [pc, #200]	; (801d90c <plug_holes+0x12c>)
 801d842:	f005 f895 	bl	8022970 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	881b      	ldrh	r3, [r3, #0]
 801d84a:	4618      	mov	r0, r3
 801d84c:	f7ff ffa4 	bl	801d798 <ptr_to_mem>
 801d850:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801d852:	687a      	ldr	r2, [r7, #4]
 801d854:	68fb      	ldr	r3, [r7, #12]
 801d856:	429a      	cmp	r2, r3
 801d858:	d024      	beq.n	801d8a4 <plug_holes+0xc4>
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	791b      	ldrb	r3, [r3, #4]
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d120      	bne.n	801d8a4 <plug_holes+0xc4>
 801d862:	4b2b      	ldr	r3, [pc, #172]	; (801d910 <plug_holes+0x130>)
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	68fa      	ldr	r2, [r7, #12]
 801d868:	429a      	cmp	r2, r3
 801d86a:	d01b      	beq.n	801d8a4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801d86c:	4b2c      	ldr	r3, [pc, #176]	; (801d920 <plug_holes+0x140>)
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	68fa      	ldr	r2, [r7, #12]
 801d872:	429a      	cmp	r2, r3
 801d874:	d102      	bne.n	801d87c <plug_holes+0x9c>
      lfree = mem;
 801d876:	4a2a      	ldr	r2, [pc, #168]	; (801d920 <plug_holes+0x140>)
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801d87c:	68fb      	ldr	r3, [r7, #12]
 801d87e:	881a      	ldrh	r2, [r3, #0]
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801d884:	68fb      	ldr	r3, [r7, #12]
 801d886:	881b      	ldrh	r3, [r3, #0]
 801d888:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d88c:	d00a      	beq.n	801d8a4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801d88e:	68fb      	ldr	r3, [r7, #12]
 801d890:	881b      	ldrh	r3, [r3, #0]
 801d892:	4618      	mov	r0, r3
 801d894:	f7ff ff80 	bl	801d798 <ptr_to_mem>
 801d898:	4604      	mov	r4, r0
 801d89a:	6878      	ldr	r0, [r7, #4]
 801d89c:	f7ff ff8e 	bl	801d7bc <mem_to_ptr>
 801d8a0:	4603      	mov	r3, r0
 801d8a2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	885b      	ldrh	r3, [r3, #2]
 801d8a8:	4618      	mov	r0, r3
 801d8aa:	f7ff ff75 	bl	801d798 <ptr_to_mem>
 801d8ae:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801d8b0:	68ba      	ldr	r2, [r7, #8]
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	429a      	cmp	r2, r3
 801d8b6:	d01f      	beq.n	801d8f8 <plug_holes+0x118>
 801d8b8:	68bb      	ldr	r3, [r7, #8]
 801d8ba:	791b      	ldrb	r3, [r3, #4]
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	d11b      	bne.n	801d8f8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801d8c0:	4b17      	ldr	r3, [pc, #92]	; (801d920 <plug_holes+0x140>)
 801d8c2:	681b      	ldr	r3, [r3, #0]
 801d8c4:	687a      	ldr	r2, [r7, #4]
 801d8c6:	429a      	cmp	r2, r3
 801d8c8:	d102      	bne.n	801d8d0 <plug_holes+0xf0>
      lfree = pmem;
 801d8ca:	4a15      	ldr	r2, [pc, #84]	; (801d920 <plug_holes+0x140>)
 801d8cc:	68bb      	ldr	r3, [r7, #8]
 801d8ce:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	881a      	ldrh	r2, [r3, #0]
 801d8d4:	68bb      	ldr	r3, [r7, #8]
 801d8d6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	881b      	ldrh	r3, [r3, #0]
 801d8dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d8e0:	d00a      	beq.n	801d8f8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	881b      	ldrh	r3, [r3, #0]
 801d8e6:	4618      	mov	r0, r3
 801d8e8:	f7ff ff56 	bl	801d798 <ptr_to_mem>
 801d8ec:	4604      	mov	r4, r0
 801d8ee:	68b8      	ldr	r0, [r7, #8]
 801d8f0:	f7ff ff64 	bl	801d7bc <mem_to_ptr>
 801d8f4:	4603      	mov	r3, r0
 801d8f6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801d8f8:	bf00      	nop
 801d8fa:	3714      	adds	r7, #20
 801d8fc:	46bd      	mov	sp, r7
 801d8fe:	bd90      	pop	{r4, r7, pc}
 801d900:	20010e70 	.word	0x20010e70
 801d904:	08027834 	.word	0x08027834
 801d908:	08027864 	.word	0x08027864
 801d90c:	0802787c 	.word	0x0802787c
 801d910:	20010e74 	.word	0x20010e74
 801d914:	080278a4 	.word	0x080278a4
 801d918:	080278c0 	.word	0x080278c0
 801d91c:	080278dc 	.word	0x080278dc
 801d920:	20010e78 	.word	0x20010e78

0801d924 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801d924:	b580      	push	{r7, lr}
 801d926:	b082      	sub	sp, #8
 801d928:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801d92a:	4b18      	ldr	r3, [pc, #96]	; (801d98c <mem_init+0x68>)
 801d92c:	3303      	adds	r3, #3
 801d92e:	f023 0303 	bic.w	r3, r3, #3
 801d932:	461a      	mov	r2, r3
 801d934:	4b16      	ldr	r3, [pc, #88]	; (801d990 <mem_init+0x6c>)
 801d936:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801d938:	4b15      	ldr	r3, [pc, #84]	; (801d990 <mem_init+0x6c>)
 801d93a:	681b      	ldr	r3, [r3, #0]
 801d93c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d944:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	2200      	movs	r2, #0
 801d94a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	2200      	movs	r2, #0
 801d950:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801d952:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801d956:	f7ff ff1f 	bl	801d798 <ptr_to_mem>
 801d95a:	4603      	mov	r3, r0
 801d95c:	4a0d      	ldr	r2, [pc, #52]	; (801d994 <mem_init+0x70>)
 801d95e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801d960:	4b0c      	ldr	r3, [pc, #48]	; (801d994 <mem_init+0x70>)
 801d962:	681b      	ldr	r3, [r3, #0]
 801d964:	2201      	movs	r2, #1
 801d966:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801d968:	4b0a      	ldr	r3, [pc, #40]	; (801d994 <mem_init+0x70>)
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d970:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801d972:	4b08      	ldr	r3, [pc, #32]	; (801d994 <mem_init+0x70>)
 801d974:	681b      	ldr	r3, [r3, #0]
 801d976:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d97a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801d97c:	4b04      	ldr	r3, [pc, #16]	; (801d990 <mem_init+0x6c>)
 801d97e:	681b      	ldr	r3, [r3, #0]
 801d980:	4a05      	ldr	r2, [pc, #20]	; (801d998 <mem_init+0x74>)
 801d982:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 801d984:	bf00      	nop
 801d986:	3708      	adds	r7, #8
 801d988:	46bd      	mov	sp, r7
 801d98a:	bd80      	pop	{r7, pc}
 801d98c:	2001081c 	.word	0x2001081c
 801d990:	20010e70 	.word	0x20010e70
 801d994:	20010e74 	.word	0x20010e74
 801d998:	20010e78 	.word	0x20010e78

0801d99c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801d99c:	b580      	push	{r7, lr}
 801d99e:	b086      	sub	sp, #24
 801d9a0:	af00      	add	r7, sp, #0
 801d9a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801d9a4:	6878      	ldr	r0, [r7, #4]
 801d9a6:	f7ff ff09 	bl	801d7bc <mem_to_ptr>
 801d9aa:	4603      	mov	r3, r0
 801d9ac:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	881b      	ldrh	r3, [r3, #0]
 801d9b2:	4618      	mov	r0, r3
 801d9b4:	f7ff fef0 	bl	801d798 <ptr_to_mem>
 801d9b8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	885b      	ldrh	r3, [r3, #2]
 801d9be:	4618      	mov	r0, r3
 801d9c0:	f7ff feea 	bl	801d798 <ptr_to_mem>
 801d9c4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	881b      	ldrh	r3, [r3, #0]
 801d9ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d9ce:	d818      	bhi.n	801da02 <mem_link_valid+0x66>
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	885b      	ldrh	r3, [r3, #2]
 801d9d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d9d8:	d813      	bhi.n	801da02 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801d9de:	8afa      	ldrh	r2, [r7, #22]
 801d9e0:	429a      	cmp	r2, r3
 801d9e2:	d004      	beq.n	801d9ee <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d9e4:	68fb      	ldr	r3, [r7, #12]
 801d9e6:	881b      	ldrh	r3, [r3, #0]
 801d9e8:	8afa      	ldrh	r2, [r7, #22]
 801d9ea:	429a      	cmp	r2, r3
 801d9ec:	d109      	bne.n	801da02 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801d9ee:	4b08      	ldr	r3, [pc, #32]	; (801da10 <mem_link_valid+0x74>)
 801d9f0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d9f2:	693a      	ldr	r2, [r7, #16]
 801d9f4:	429a      	cmp	r2, r3
 801d9f6:	d006      	beq.n	801da06 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801d9f8:	693b      	ldr	r3, [r7, #16]
 801d9fa:	885b      	ldrh	r3, [r3, #2]
 801d9fc:	8afa      	ldrh	r2, [r7, #22]
 801d9fe:	429a      	cmp	r2, r3
 801da00:	d001      	beq.n	801da06 <mem_link_valid+0x6a>
    return 0;
 801da02:	2300      	movs	r3, #0
 801da04:	e000      	b.n	801da08 <mem_link_valid+0x6c>
  }
  return 1;
 801da06:	2301      	movs	r3, #1
}
 801da08:	4618      	mov	r0, r3
 801da0a:	3718      	adds	r7, #24
 801da0c:	46bd      	mov	sp, r7
 801da0e:	bd80      	pop	{r7, pc}
 801da10:	20010e74 	.word	0x20010e74

0801da14 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801da14:	b580      	push	{r7, lr}
 801da16:	b084      	sub	sp, #16
 801da18:	af00      	add	r7, sp, #0
 801da1a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	2b00      	cmp	r3, #0
 801da20:	d04c      	beq.n	801dabc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	f003 0303 	and.w	r3, r3, #3
 801da28:	2b00      	cmp	r3, #0
 801da2a:	d007      	beq.n	801da3c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801da2c:	4b25      	ldr	r3, [pc, #148]	; (801dac4 <mem_free+0xb0>)
 801da2e:	f240 2273 	movw	r2, #627	; 0x273
 801da32:	4925      	ldr	r1, [pc, #148]	; (801dac8 <mem_free+0xb4>)
 801da34:	4825      	ldr	r0, [pc, #148]	; (801dacc <mem_free+0xb8>)
 801da36:	f004 ff9b 	bl	8022970 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801da3a:	e040      	b.n	801dabe <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	3b08      	subs	r3, #8
 801da40:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801da42:	4b23      	ldr	r3, [pc, #140]	; (801dad0 <mem_free+0xbc>)
 801da44:	681b      	ldr	r3, [r3, #0]
 801da46:	68fa      	ldr	r2, [r7, #12]
 801da48:	429a      	cmp	r2, r3
 801da4a:	d306      	bcc.n	801da5a <mem_free+0x46>
 801da4c:	687b      	ldr	r3, [r7, #4]
 801da4e:	f103 020c 	add.w	r2, r3, #12
 801da52:	4b20      	ldr	r3, [pc, #128]	; (801dad4 <mem_free+0xc0>)
 801da54:	681b      	ldr	r3, [r3, #0]
 801da56:	429a      	cmp	r2, r3
 801da58:	d907      	bls.n	801da6a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801da5a:	4b1a      	ldr	r3, [pc, #104]	; (801dac4 <mem_free+0xb0>)
 801da5c:	f240 227f 	movw	r2, #639	; 0x27f
 801da60:	491d      	ldr	r1, [pc, #116]	; (801dad8 <mem_free+0xc4>)
 801da62:	481a      	ldr	r0, [pc, #104]	; (801dacc <mem_free+0xb8>)
 801da64:	f004 ff84 	bl	8022970 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801da68:	e029      	b.n	801dabe <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 801da6a:	68fb      	ldr	r3, [r7, #12]
 801da6c:	791b      	ldrb	r3, [r3, #4]
 801da6e:	2b00      	cmp	r3, #0
 801da70:	d107      	bne.n	801da82 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801da72:	4b14      	ldr	r3, [pc, #80]	; (801dac4 <mem_free+0xb0>)
 801da74:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801da78:	4918      	ldr	r1, [pc, #96]	; (801dadc <mem_free+0xc8>)
 801da7a:	4814      	ldr	r0, [pc, #80]	; (801dacc <mem_free+0xb8>)
 801da7c:	f004 ff78 	bl	8022970 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801da80:	e01d      	b.n	801dabe <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801da82:	68f8      	ldr	r0, [r7, #12]
 801da84:	f7ff ff8a 	bl	801d99c <mem_link_valid>
 801da88:	4603      	mov	r3, r0
 801da8a:	2b00      	cmp	r3, #0
 801da8c:	d107      	bne.n	801da9e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801da8e:	4b0d      	ldr	r3, [pc, #52]	; (801dac4 <mem_free+0xb0>)
 801da90:	f240 2295 	movw	r2, #661	; 0x295
 801da94:	4912      	ldr	r1, [pc, #72]	; (801dae0 <mem_free+0xcc>)
 801da96:	480d      	ldr	r0, [pc, #52]	; (801dacc <mem_free+0xb8>)
 801da98:	f004 ff6a 	bl	8022970 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801da9c:	e00f      	b.n	801dabe <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801da9e:	68fb      	ldr	r3, [r7, #12]
 801daa0:	2200      	movs	r2, #0
 801daa2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801daa4:	4b0f      	ldr	r3, [pc, #60]	; (801dae4 <mem_free+0xd0>)
 801daa6:	681b      	ldr	r3, [r3, #0]
 801daa8:	68fa      	ldr	r2, [r7, #12]
 801daaa:	429a      	cmp	r2, r3
 801daac:	d202      	bcs.n	801dab4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801daae:	4a0d      	ldr	r2, [pc, #52]	; (801dae4 <mem_free+0xd0>)
 801dab0:	68fb      	ldr	r3, [r7, #12]
 801dab2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801dab4:	68f8      	ldr	r0, [r7, #12]
 801dab6:	f7ff fe93 	bl	801d7e0 <plug_holes>
 801daba:	e000      	b.n	801dabe <mem_free+0xaa>
    return;
 801dabc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801dabe:	3710      	adds	r7, #16
 801dac0:	46bd      	mov	sp, r7
 801dac2:	bd80      	pop	{r7, pc}
 801dac4:	08027834 	.word	0x08027834
 801dac8:	08027908 	.word	0x08027908
 801dacc:	0802787c 	.word	0x0802787c
 801dad0:	20010e70 	.word	0x20010e70
 801dad4:	20010e74 	.word	0x20010e74
 801dad8:	0802792c 	.word	0x0802792c
 801dadc:	08027948 	.word	0x08027948
 801dae0:	08027970 	.word	0x08027970
 801dae4:	20010e78 	.word	0x20010e78

0801dae8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801dae8:	b580      	push	{r7, lr}
 801daea:	b088      	sub	sp, #32
 801daec:	af00      	add	r7, sp, #0
 801daee:	6078      	str	r0, [r7, #4]
 801daf0:	460b      	mov	r3, r1
 801daf2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801daf4:	887b      	ldrh	r3, [r7, #2]
 801daf6:	3303      	adds	r3, #3
 801daf8:	b29b      	uxth	r3, r3
 801dafa:	f023 0303 	bic.w	r3, r3, #3
 801dafe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801db00:	8bfb      	ldrh	r3, [r7, #30]
 801db02:	2b0b      	cmp	r3, #11
 801db04:	d801      	bhi.n	801db0a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801db06:	230c      	movs	r3, #12
 801db08:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801db0a:	8bfb      	ldrh	r3, [r7, #30]
 801db0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801db10:	d803      	bhi.n	801db1a <mem_trim+0x32>
 801db12:	8bfa      	ldrh	r2, [r7, #30]
 801db14:	887b      	ldrh	r3, [r7, #2]
 801db16:	429a      	cmp	r2, r3
 801db18:	d201      	bcs.n	801db1e <mem_trim+0x36>
    return NULL;
 801db1a:	2300      	movs	r3, #0
 801db1c:	e0cc      	b.n	801dcb8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801db1e:	4b68      	ldr	r3, [pc, #416]	; (801dcc0 <mem_trim+0x1d8>)
 801db20:	681b      	ldr	r3, [r3, #0]
 801db22:	687a      	ldr	r2, [r7, #4]
 801db24:	429a      	cmp	r2, r3
 801db26:	d304      	bcc.n	801db32 <mem_trim+0x4a>
 801db28:	4b66      	ldr	r3, [pc, #408]	; (801dcc4 <mem_trim+0x1dc>)
 801db2a:	681b      	ldr	r3, [r3, #0]
 801db2c:	687a      	ldr	r2, [r7, #4]
 801db2e:	429a      	cmp	r2, r3
 801db30:	d306      	bcc.n	801db40 <mem_trim+0x58>
 801db32:	4b65      	ldr	r3, [pc, #404]	; (801dcc8 <mem_trim+0x1e0>)
 801db34:	f240 22d1 	movw	r2, #721	; 0x2d1
 801db38:	4964      	ldr	r1, [pc, #400]	; (801dccc <mem_trim+0x1e4>)
 801db3a:	4865      	ldr	r0, [pc, #404]	; (801dcd0 <mem_trim+0x1e8>)
 801db3c:	f004 ff18 	bl	8022970 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801db40:	4b5f      	ldr	r3, [pc, #380]	; (801dcc0 <mem_trim+0x1d8>)
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	687a      	ldr	r2, [r7, #4]
 801db46:	429a      	cmp	r2, r3
 801db48:	d304      	bcc.n	801db54 <mem_trim+0x6c>
 801db4a:	4b5e      	ldr	r3, [pc, #376]	; (801dcc4 <mem_trim+0x1dc>)
 801db4c:	681b      	ldr	r3, [r3, #0]
 801db4e:	687a      	ldr	r2, [r7, #4]
 801db50:	429a      	cmp	r2, r3
 801db52:	d301      	bcc.n	801db58 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	e0af      	b.n	801dcb8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	3b08      	subs	r3, #8
 801db5c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801db5e:	69b8      	ldr	r0, [r7, #24]
 801db60:	f7ff fe2c 	bl	801d7bc <mem_to_ptr>
 801db64:	4603      	mov	r3, r0
 801db66:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801db68:	69bb      	ldr	r3, [r7, #24]
 801db6a:	881a      	ldrh	r2, [r3, #0]
 801db6c:	8afb      	ldrh	r3, [r7, #22]
 801db6e:	1ad3      	subs	r3, r2, r3
 801db70:	b29b      	uxth	r3, r3
 801db72:	3b08      	subs	r3, #8
 801db74:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801db76:	8bfa      	ldrh	r2, [r7, #30]
 801db78:	8abb      	ldrh	r3, [r7, #20]
 801db7a:	429a      	cmp	r2, r3
 801db7c:	d906      	bls.n	801db8c <mem_trim+0xa4>
 801db7e:	4b52      	ldr	r3, [pc, #328]	; (801dcc8 <mem_trim+0x1e0>)
 801db80:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801db84:	4953      	ldr	r1, [pc, #332]	; (801dcd4 <mem_trim+0x1ec>)
 801db86:	4852      	ldr	r0, [pc, #328]	; (801dcd0 <mem_trim+0x1e8>)
 801db88:	f004 fef2 	bl	8022970 <iprintf>
  if (newsize > size) {
 801db8c:	8bfa      	ldrh	r2, [r7, #30]
 801db8e:	8abb      	ldrh	r3, [r7, #20]
 801db90:	429a      	cmp	r2, r3
 801db92:	d901      	bls.n	801db98 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 801db94:	2300      	movs	r3, #0
 801db96:	e08f      	b.n	801dcb8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 801db98:	8bfa      	ldrh	r2, [r7, #30]
 801db9a:	8abb      	ldrh	r3, [r7, #20]
 801db9c:	429a      	cmp	r2, r3
 801db9e:	d101      	bne.n	801dba4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 801dba0:	687b      	ldr	r3, [r7, #4]
 801dba2:	e089      	b.n	801dcb8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 801dba4:	69bb      	ldr	r3, [r7, #24]
 801dba6:	881b      	ldrh	r3, [r3, #0]
 801dba8:	4618      	mov	r0, r3
 801dbaa:	f7ff fdf5 	bl	801d798 <ptr_to_mem>
 801dbae:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801dbb0:	693b      	ldr	r3, [r7, #16]
 801dbb2:	791b      	ldrb	r3, [r3, #4]
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d13f      	bne.n	801dc38 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801dbb8:	69bb      	ldr	r3, [r7, #24]
 801dbba:	881b      	ldrh	r3, [r3, #0]
 801dbbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801dbc0:	d106      	bne.n	801dbd0 <mem_trim+0xe8>
 801dbc2:	4b41      	ldr	r3, [pc, #260]	; (801dcc8 <mem_trim+0x1e0>)
 801dbc4:	f240 22f5 	movw	r2, #757	; 0x2f5
 801dbc8:	4943      	ldr	r1, [pc, #268]	; (801dcd8 <mem_trim+0x1f0>)
 801dbca:	4841      	ldr	r0, [pc, #260]	; (801dcd0 <mem_trim+0x1e8>)
 801dbcc:	f004 fed0 	bl	8022970 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801dbd0:	693b      	ldr	r3, [r7, #16]
 801dbd2:	881b      	ldrh	r3, [r3, #0]
 801dbd4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801dbd6:	8afa      	ldrh	r2, [r7, #22]
 801dbd8:	8bfb      	ldrh	r3, [r7, #30]
 801dbda:	4413      	add	r3, r2
 801dbdc:	b29b      	uxth	r3, r3
 801dbde:	3308      	adds	r3, #8
 801dbe0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801dbe2:	4b3e      	ldr	r3, [pc, #248]	; (801dcdc <mem_trim+0x1f4>)
 801dbe4:	681b      	ldr	r3, [r3, #0]
 801dbe6:	693a      	ldr	r2, [r7, #16]
 801dbe8:	429a      	cmp	r2, r3
 801dbea:	d106      	bne.n	801dbfa <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 801dbec:	89fb      	ldrh	r3, [r7, #14]
 801dbee:	4618      	mov	r0, r3
 801dbf0:	f7ff fdd2 	bl	801d798 <ptr_to_mem>
 801dbf4:	4603      	mov	r3, r0
 801dbf6:	4a39      	ldr	r2, [pc, #228]	; (801dcdc <mem_trim+0x1f4>)
 801dbf8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801dbfa:	89fb      	ldrh	r3, [r7, #14]
 801dbfc:	4618      	mov	r0, r3
 801dbfe:	f7ff fdcb 	bl	801d798 <ptr_to_mem>
 801dc02:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801dc04:	693b      	ldr	r3, [r7, #16]
 801dc06:	2200      	movs	r2, #0
 801dc08:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801dc0a:	693b      	ldr	r3, [r7, #16]
 801dc0c:	89ba      	ldrh	r2, [r7, #12]
 801dc0e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801dc10:	693b      	ldr	r3, [r7, #16]
 801dc12:	8afa      	ldrh	r2, [r7, #22]
 801dc14:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801dc16:	69bb      	ldr	r3, [r7, #24]
 801dc18:	89fa      	ldrh	r2, [r7, #14]
 801dc1a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801dc1c:	693b      	ldr	r3, [r7, #16]
 801dc1e:	881b      	ldrh	r3, [r3, #0]
 801dc20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801dc24:	d047      	beq.n	801dcb6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801dc26:	693b      	ldr	r3, [r7, #16]
 801dc28:	881b      	ldrh	r3, [r3, #0]
 801dc2a:	4618      	mov	r0, r3
 801dc2c:	f7ff fdb4 	bl	801d798 <ptr_to_mem>
 801dc30:	4602      	mov	r2, r0
 801dc32:	89fb      	ldrh	r3, [r7, #14]
 801dc34:	8053      	strh	r3, [r2, #2]
 801dc36:	e03e      	b.n	801dcb6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801dc38:	8bfb      	ldrh	r3, [r7, #30]
 801dc3a:	f103 0214 	add.w	r2, r3, #20
 801dc3e:	8abb      	ldrh	r3, [r7, #20]
 801dc40:	429a      	cmp	r2, r3
 801dc42:	d838      	bhi.n	801dcb6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801dc44:	8afa      	ldrh	r2, [r7, #22]
 801dc46:	8bfb      	ldrh	r3, [r7, #30]
 801dc48:	4413      	add	r3, r2
 801dc4a:	b29b      	uxth	r3, r3
 801dc4c:	3308      	adds	r3, #8
 801dc4e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801dc50:	69bb      	ldr	r3, [r7, #24]
 801dc52:	881b      	ldrh	r3, [r3, #0]
 801dc54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801dc58:	d106      	bne.n	801dc68 <mem_trim+0x180>
 801dc5a:	4b1b      	ldr	r3, [pc, #108]	; (801dcc8 <mem_trim+0x1e0>)
 801dc5c:	f240 3216 	movw	r2, #790	; 0x316
 801dc60:	491d      	ldr	r1, [pc, #116]	; (801dcd8 <mem_trim+0x1f0>)
 801dc62:	481b      	ldr	r0, [pc, #108]	; (801dcd0 <mem_trim+0x1e8>)
 801dc64:	f004 fe84 	bl	8022970 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801dc68:	89fb      	ldrh	r3, [r7, #14]
 801dc6a:	4618      	mov	r0, r3
 801dc6c:	f7ff fd94 	bl	801d798 <ptr_to_mem>
 801dc70:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801dc72:	4b1a      	ldr	r3, [pc, #104]	; (801dcdc <mem_trim+0x1f4>)
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	693a      	ldr	r2, [r7, #16]
 801dc78:	429a      	cmp	r2, r3
 801dc7a:	d202      	bcs.n	801dc82 <mem_trim+0x19a>
      lfree = mem2;
 801dc7c:	4a17      	ldr	r2, [pc, #92]	; (801dcdc <mem_trim+0x1f4>)
 801dc7e:	693b      	ldr	r3, [r7, #16]
 801dc80:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801dc82:	693b      	ldr	r3, [r7, #16]
 801dc84:	2200      	movs	r2, #0
 801dc86:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801dc88:	69bb      	ldr	r3, [r7, #24]
 801dc8a:	881a      	ldrh	r2, [r3, #0]
 801dc8c:	693b      	ldr	r3, [r7, #16]
 801dc8e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801dc90:	693b      	ldr	r3, [r7, #16]
 801dc92:	8afa      	ldrh	r2, [r7, #22]
 801dc94:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801dc96:	69bb      	ldr	r3, [r7, #24]
 801dc98:	89fa      	ldrh	r2, [r7, #14]
 801dc9a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801dc9c:	693b      	ldr	r3, [r7, #16]
 801dc9e:	881b      	ldrh	r3, [r3, #0]
 801dca0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801dca4:	d007      	beq.n	801dcb6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801dca6:	693b      	ldr	r3, [r7, #16]
 801dca8:	881b      	ldrh	r3, [r3, #0]
 801dcaa:	4618      	mov	r0, r3
 801dcac:	f7ff fd74 	bl	801d798 <ptr_to_mem>
 801dcb0:	4602      	mov	r2, r0
 801dcb2:	89fb      	ldrh	r3, [r7, #14]
 801dcb4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801dcb6:	687b      	ldr	r3, [r7, #4]
}
 801dcb8:	4618      	mov	r0, r3
 801dcba:	3720      	adds	r7, #32
 801dcbc:	46bd      	mov	sp, r7
 801dcbe:	bd80      	pop	{r7, pc}
 801dcc0:	20010e70 	.word	0x20010e70
 801dcc4:	20010e74 	.word	0x20010e74
 801dcc8:	08027834 	.word	0x08027834
 801dccc:	080279a4 	.word	0x080279a4
 801dcd0:	0802787c 	.word	0x0802787c
 801dcd4:	080279bc 	.word	0x080279bc
 801dcd8:	080279dc 	.word	0x080279dc
 801dcdc:	20010e78 	.word	0x20010e78

0801dce0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801dce0:	b580      	push	{r7, lr}
 801dce2:	b088      	sub	sp, #32
 801dce4:	af00      	add	r7, sp, #0
 801dce6:	4603      	mov	r3, r0
 801dce8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801dcea:	88fb      	ldrh	r3, [r7, #6]
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	d101      	bne.n	801dcf4 <mem_malloc+0x14>
    return NULL;
 801dcf0:	2300      	movs	r3, #0
 801dcf2:	e0d9      	b.n	801dea8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801dcf4:	88fb      	ldrh	r3, [r7, #6]
 801dcf6:	3303      	adds	r3, #3
 801dcf8:	b29b      	uxth	r3, r3
 801dcfa:	f023 0303 	bic.w	r3, r3, #3
 801dcfe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801dd00:	8bbb      	ldrh	r3, [r7, #28]
 801dd02:	2b0b      	cmp	r3, #11
 801dd04:	d801      	bhi.n	801dd0a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801dd06:	230c      	movs	r3, #12
 801dd08:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801dd0a:	8bbb      	ldrh	r3, [r7, #28]
 801dd0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801dd10:	d803      	bhi.n	801dd1a <mem_malloc+0x3a>
 801dd12:	8bba      	ldrh	r2, [r7, #28]
 801dd14:	88fb      	ldrh	r3, [r7, #6]
 801dd16:	429a      	cmp	r2, r3
 801dd18:	d201      	bcs.n	801dd1e <mem_malloc+0x3e>
    return NULL;
 801dd1a:	2300      	movs	r3, #0
 801dd1c:	e0c4      	b.n	801dea8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801dd1e:	4b64      	ldr	r3, [pc, #400]	; (801deb0 <mem_malloc+0x1d0>)
 801dd20:	681b      	ldr	r3, [r3, #0]
 801dd22:	4618      	mov	r0, r3
 801dd24:	f7ff fd4a 	bl	801d7bc <mem_to_ptr>
 801dd28:	4603      	mov	r3, r0
 801dd2a:	83fb      	strh	r3, [r7, #30]
 801dd2c:	e0b4      	b.n	801de98 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801dd2e:	8bfb      	ldrh	r3, [r7, #30]
 801dd30:	4618      	mov	r0, r3
 801dd32:	f7ff fd31 	bl	801d798 <ptr_to_mem>
 801dd36:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801dd38:	697b      	ldr	r3, [r7, #20]
 801dd3a:	791b      	ldrb	r3, [r3, #4]
 801dd3c:	2b00      	cmp	r3, #0
 801dd3e:	f040 80a4 	bne.w	801de8a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801dd42:	697b      	ldr	r3, [r7, #20]
 801dd44:	881b      	ldrh	r3, [r3, #0]
 801dd46:	461a      	mov	r2, r3
 801dd48:	8bfb      	ldrh	r3, [r7, #30]
 801dd4a:	1ad3      	subs	r3, r2, r3
 801dd4c:	f1a3 0208 	sub.w	r2, r3, #8
 801dd50:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801dd52:	429a      	cmp	r2, r3
 801dd54:	f0c0 8099 	bcc.w	801de8a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801dd58:	697b      	ldr	r3, [r7, #20]
 801dd5a:	881b      	ldrh	r3, [r3, #0]
 801dd5c:	461a      	mov	r2, r3
 801dd5e:	8bfb      	ldrh	r3, [r7, #30]
 801dd60:	1ad3      	subs	r3, r2, r3
 801dd62:	f1a3 0208 	sub.w	r2, r3, #8
 801dd66:	8bbb      	ldrh	r3, [r7, #28]
 801dd68:	3314      	adds	r3, #20
 801dd6a:	429a      	cmp	r2, r3
 801dd6c:	d333      	bcc.n	801ddd6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801dd6e:	8bfa      	ldrh	r2, [r7, #30]
 801dd70:	8bbb      	ldrh	r3, [r7, #28]
 801dd72:	4413      	add	r3, r2
 801dd74:	b29b      	uxth	r3, r3
 801dd76:	3308      	adds	r3, #8
 801dd78:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801dd7a:	8a7b      	ldrh	r3, [r7, #18]
 801dd7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801dd80:	d106      	bne.n	801dd90 <mem_malloc+0xb0>
 801dd82:	4b4c      	ldr	r3, [pc, #304]	; (801deb4 <mem_malloc+0x1d4>)
 801dd84:	f240 3287 	movw	r2, #903	; 0x387
 801dd88:	494b      	ldr	r1, [pc, #300]	; (801deb8 <mem_malloc+0x1d8>)
 801dd8a:	484c      	ldr	r0, [pc, #304]	; (801debc <mem_malloc+0x1dc>)
 801dd8c:	f004 fdf0 	bl	8022970 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801dd90:	8a7b      	ldrh	r3, [r7, #18]
 801dd92:	4618      	mov	r0, r3
 801dd94:	f7ff fd00 	bl	801d798 <ptr_to_mem>
 801dd98:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801dd9a:	68fb      	ldr	r3, [r7, #12]
 801dd9c:	2200      	movs	r2, #0
 801dd9e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801dda0:	697b      	ldr	r3, [r7, #20]
 801dda2:	881a      	ldrh	r2, [r3, #0]
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801dda8:	68fb      	ldr	r3, [r7, #12]
 801ddaa:	8bfa      	ldrh	r2, [r7, #30]
 801ddac:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801ddae:	697b      	ldr	r3, [r7, #20]
 801ddb0:	8a7a      	ldrh	r2, [r7, #18]
 801ddb2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801ddb4:	697b      	ldr	r3, [r7, #20]
 801ddb6:	2201      	movs	r2, #1
 801ddb8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801ddba:	68fb      	ldr	r3, [r7, #12]
 801ddbc:	881b      	ldrh	r3, [r3, #0]
 801ddbe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801ddc2:	d00b      	beq.n	801dddc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801ddc4:	68fb      	ldr	r3, [r7, #12]
 801ddc6:	881b      	ldrh	r3, [r3, #0]
 801ddc8:	4618      	mov	r0, r3
 801ddca:	f7ff fce5 	bl	801d798 <ptr_to_mem>
 801ddce:	4602      	mov	r2, r0
 801ddd0:	8a7b      	ldrh	r3, [r7, #18]
 801ddd2:	8053      	strh	r3, [r2, #2]
 801ddd4:	e002      	b.n	801dddc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801ddd6:	697b      	ldr	r3, [r7, #20]
 801ddd8:	2201      	movs	r2, #1
 801ddda:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801dddc:	4b34      	ldr	r3, [pc, #208]	; (801deb0 <mem_malloc+0x1d0>)
 801ddde:	681b      	ldr	r3, [r3, #0]
 801dde0:	697a      	ldr	r2, [r7, #20]
 801dde2:	429a      	cmp	r2, r3
 801dde4:	d127      	bne.n	801de36 <mem_malloc+0x156>
          struct mem *cur = lfree;
 801dde6:	4b32      	ldr	r3, [pc, #200]	; (801deb0 <mem_malloc+0x1d0>)
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801ddec:	e005      	b.n	801ddfa <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801ddee:	69bb      	ldr	r3, [r7, #24]
 801ddf0:	881b      	ldrh	r3, [r3, #0]
 801ddf2:	4618      	mov	r0, r3
 801ddf4:	f7ff fcd0 	bl	801d798 <ptr_to_mem>
 801ddf8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801ddfa:	69bb      	ldr	r3, [r7, #24]
 801ddfc:	791b      	ldrb	r3, [r3, #4]
 801ddfe:	2b00      	cmp	r3, #0
 801de00:	d004      	beq.n	801de0c <mem_malloc+0x12c>
 801de02:	4b2f      	ldr	r3, [pc, #188]	; (801dec0 <mem_malloc+0x1e0>)
 801de04:	681b      	ldr	r3, [r3, #0]
 801de06:	69ba      	ldr	r2, [r7, #24]
 801de08:	429a      	cmp	r2, r3
 801de0a:	d1f0      	bne.n	801ddee <mem_malloc+0x10e>
          }
          lfree = cur;
 801de0c:	4a28      	ldr	r2, [pc, #160]	; (801deb0 <mem_malloc+0x1d0>)
 801de0e:	69bb      	ldr	r3, [r7, #24]
 801de10:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801de12:	4b27      	ldr	r3, [pc, #156]	; (801deb0 <mem_malloc+0x1d0>)
 801de14:	681a      	ldr	r2, [r3, #0]
 801de16:	4b2a      	ldr	r3, [pc, #168]	; (801dec0 <mem_malloc+0x1e0>)
 801de18:	681b      	ldr	r3, [r3, #0]
 801de1a:	429a      	cmp	r2, r3
 801de1c:	d00b      	beq.n	801de36 <mem_malloc+0x156>
 801de1e:	4b24      	ldr	r3, [pc, #144]	; (801deb0 <mem_malloc+0x1d0>)
 801de20:	681b      	ldr	r3, [r3, #0]
 801de22:	791b      	ldrb	r3, [r3, #4]
 801de24:	2b00      	cmp	r3, #0
 801de26:	d006      	beq.n	801de36 <mem_malloc+0x156>
 801de28:	4b22      	ldr	r3, [pc, #136]	; (801deb4 <mem_malloc+0x1d4>)
 801de2a:	f240 32b5 	movw	r2, #949	; 0x3b5
 801de2e:	4925      	ldr	r1, [pc, #148]	; (801dec4 <mem_malloc+0x1e4>)
 801de30:	4822      	ldr	r0, [pc, #136]	; (801debc <mem_malloc+0x1dc>)
 801de32:	f004 fd9d 	bl	8022970 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801de36:	8bba      	ldrh	r2, [r7, #28]
 801de38:	697b      	ldr	r3, [r7, #20]
 801de3a:	4413      	add	r3, r2
 801de3c:	3308      	adds	r3, #8
 801de3e:	4a20      	ldr	r2, [pc, #128]	; (801dec0 <mem_malloc+0x1e0>)
 801de40:	6812      	ldr	r2, [r2, #0]
 801de42:	4293      	cmp	r3, r2
 801de44:	d906      	bls.n	801de54 <mem_malloc+0x174>
 801de46:	4b1b      	ldr	r3, [pc, #108]	; (801deb4 <mem_malloc+0x1d4>)
 801de48:	f240 32b9 	movw	r2, #953	; 0x3b9
 801de4c:	491e      	ldr	r1, [pc, #120]	; (801dec8 <mem_malloc+0x1e8>)
 801de4e:	481b      	ldr	r0, [pc, #108]	; (801debc <mem_malloc+0x1dc>)
 801de50:	f004 fd8e 	bl	8022970 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801de54:	697b      	ldr	r3, [r7, #20]
 801de56:	f003 0303 	and.w	r3, r3, #3
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d006      	beq.n	801de6c <mem_malloc+0x18c>
 801de5e:	4b15      	ldr	r3, [pc, #84]	; (801deb4 <mem_malloc+0x1d4>)
 801de60:	f240 32bb 	movw	r2, #955	; 0x3bb
 801de64:	4919      	ldr	r1, [pc, #100]	; (801decc <mem_malloc+0x1ec>)
 801de66:	4815      	ldr	r0, [pc, #84]	; (801debc <mem_malloc+0x1dc>)
 801de68:	f004 fd82 	bl	8022970 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801de6c:	697b      	ldr	r3, [r7, #20]
 801de6e:	f003 0303 	and.w	r3, r3, #3
 801de72:	2b00      	cmp	r3, #0
 801de74:	d006      	beq.n	801de84 <mem_malloc+0x1a4>
 801de76:	4b0f      	ldr	r3, [pc, #60]	; (801deb4 <mem_malloc+0x1d4>)
 801de78:	f240 32bd 	movw	r2, #957	; 0x3bd
 801de7c:	4914      	ldr	r1, [pc, #80]	; (801ded0 <mem_malloc+0x1f0>)
 801de7e:	480f      	ldr	r0, [pc, #60]	; (801debc <mem_malloc+0x1dc>)
 801de80:	f004 fd76 	bl	8022970 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801de84:	697b      	ldr	r3, [r7, #20]
 801de86:	3308      	adds	r3, #8
 801de88:	e00e      	b.n	801dea8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 801de8a:	8bfb      	ldrh	r3, [r7, #30]
 801de8c:	4618      	mov	r0, r3
 801de8e:	f7ff fc83 	bl	801d798 <ptr_to_mem>
 801de92:	4603      	mov	r3, r0
 801de94:	881b      	ldrh	r3, [r3, #0]
 801de96:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801de98:	8bfa      	ldrh	r2, [r7, #30]
 801de9a:	8bbb      	ldrh	r3, [r7, #28]
 801de9c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801dea0:	429a      	cmp	r2, r3
 801dea2:	f4ff af44 	bcc.w	801dd2e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801dea6:	2300      	movs	r3, #0
}
 801dea8:	4618      	mov	r0, r3
 801deaa:	3720      	adds	r7, #32
 801deac:	46bd      	mov	sp, r7
 801deae:	bd80      	pop	{r7, pc}
 801deb0:	20010e78 	.word	0x20010e78
 801deb4:	08027834 	.word	0x08027834
 801deb8:	080279dc 	.word	0x080279dc
 801debc:	0802787c 	.word	0x0802787c
 801dec0:	20010e74 	.word	0x20010e74
 801dec4:	080279f0 	.word	0x080279f0
 801dec8:	08027a0c 	.word	0x08027a0c
 801decc:	08027a3c 	.word	0x08027a3c
 801ded0:	08027a6c 	.word	0x08027a6c

0801ded4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801ded4:	b480      	push	{r7}
 801ded6:	b085      	sub	sp, #20
 801ded8:	af00      	add	r7, sp, #0
 801deda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	689b      	ldr	r3, [r3, #8]
 801dee0:	2200      	movs	r2, #0
 801dee2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	685b      	ldr	r3, [r3, #4]
 801dee8:	3303      	adds	r3, #3
 801deea:	f023 0303 	bic.w	r3, r3, #3
 801deee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801def0:	2300      	movs	r3, #0
 801def2:	60fb      	str	r3, [r7, #12]
 801def4:	e011      	b.n	801df1a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	689b      	ldr	r3, [r3, #8]
 801defa:	681a      	ldr	r2, [r3, #0]
 801defc:	68bb      	ldr	r3, [r7, #8]
 801defe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	689b      	ldr	r3, [r3, #8]
 801df04:	68ba      	ldr	r2, [r7, #8]
 801df06:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	881b      	ldrh	r3, [r3, #0]
 801df0c:	461a      	mov	r2, r3
 801df0e:	68bb      	ldr	r3, [r7, #8]
 801df10:	4413      	add	r3, r2
 801df12:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801df14:	68fb      	ldr	r3, [r7, #12]
 801df16:	3301      	adds	r3, #1
 801df18:	60fb      	str	r3, [r7, #12]
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	885b      	ldrh	r3, [r3, #2]
 801df1e:	461a      	mov	r2, r3
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	4293      	cmp	r3, r2
 801df24:	dbe7      	blt.n	801def6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801df26:	bf00      	nop
 801df28:	bf00      	nop
 801df2a:	3714      	adds	r7, #20
 801df2c:	46bd      	mov	sp, r7
 801df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df32:	4770      	bx	lr

0801df34 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801df34:	b580      	push	{r7, lr}
 801df36:	b082      	sub	sp, #8
 801df38:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801df3a:	2300      	movs	r3, #0
 801df3c:	80fb      	strh	r3, [r7, #6]
 801df3e:	e009      	b.n	801df54 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801df40:	88fb      	ldrh	r3, [r7, #6]
 801df42:	4a08      	ldr	r2, [pc, #32]	; (801df64 <memp_init+0x30>)
 801df44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801df48:	4618      	mov	r0, r3
 801df4a:	f7ff ffc3 	bl	801ded4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801df4e:	88fb      	ldrh	r3, [r7, #6]
 801df50:	3301      	adds	r3, #1
 801df52:	80fb      	strh	r3, [r7, #6]
 801df54:	88fb      	ldrh	r3, [r7, #6]
 801df56:	2b05      	cmp	r3, #5
 801df58:	d9f2      	bls.n	801df40 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801df5a:	bf00      	nop
 801df5c:	bf00      	nop
 801df5e:	3708      	adds	r7, #8
 801df60:	46bd      	mov	sp, r7
 801df62:	bd80      	pop	{r7, pc}
 801df64:	080292dc 	.word	0x080292dc

0801df68 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801df68:	b580      	push	{r7, lr}
 801df6a:	b084      	sub	sp, #16
 801df6c:	af00      	add	r7, sp, #0
 801df6e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 801df70:	687b      	ldr	r3, [r7, #4]
 801df72:	689b      	ldr	r3, [r3, #8]
 801df74:	681b      	ldr	r3, [r3, #0]
 801df76:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801df78:	68fb      	ldr	r3, [r7, #12]
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	d012      	beq.n	801dfa4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	689b      	ldr	r3, [r3, #8]
 801df82:	68fa      	ldr	r2, [r7, #12]
 801df84:	6812      	ldr	r2, [r2, #0]
 801df86:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801df88:	68fb      	ldr	r3, [r7, #12]
 801df8a:	f003 0303 	and.w	r3, r3, #3
 801df8e:	2b00      	cmp	r3, #0
 801df90:	d006      	beq.n	801dfa0 <do_memp_malloc_pool+0x38>
 801df92:	4b07      	ldr	r3, [pc, #28]	; (801dfb0 <do_memp_malloc_pool+0x48>)
 801df94:	f44f 728c 	mov.w	r2, #280	; 0x118
 801df98:	4906      	ldr	r1, [pc, #24]	; (801dfb4 <do_memp_malloc_pool+0x4c>)
 801df9a:	4807      	ldr	r0, [pc, #28]	; (801dfb8 <do_memp_malloc_pool+0x50>)
 801df9c:	f004 fce8 	bl	8022970 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801dfa0:	68fb      	ldr	r3, [r7, #12]
 801dfa2:	e000      	b.n	801dfa6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801dfa4:	2300      	movs	r3, #0
}
 801dfa6:	4618      	mov	r0, r3
 801dfa8:	3710      	adds	r7, #16
 801dfaa:	46bd      	mov	sp, r7
 801dfac:	bd80      	pop	{r7, pc}
 801dfae:	bf00      	nop
 801dfb0:	08027a90 	.word	0x08027a90
 801dfb4:	08027ac0 	.word	0x08027ac0
 801dfb8:	08027ae4 	.word	0x08027ae4

0801dfbc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801dfbc:	b580      	push	{r7, lr}
 801dfbe:	b082      	sub	sp, #8
 801dfc0:	af00      	add	r7, sp, #0
 801dfc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	d106      	bne.n	801dfd8 <memp_malloc_pool+0x1c>
 801dfca:	4b0a      	ldr	r3, [pc, #40]	; (801dff4 <memp_malloc_pool+0x38>)
 801dfcc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801dfd0:	4909      	ldr	r1, [pc, #36]	; (801dff8 <memp_malloc_pool+0x3c>)
 801dfd2:	480a      	ldr	r0, [pc, #40]	; (801dffc <memp_malloc_pool+0x40>)
 801dfd4:	f004 fccc 	bl	8022970 <iprintf>
  if (desc == NULL) {
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	d101      	bne.n	801dfe2 <memp_malloc_pool+0x26>
    return NULL;
 801dfde:	2300      	movs	r3, #0
 801dfe0:	e003      	b.n	801dfea <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801dfe2:	6878      	ldr	r0, [r7, #4]
 801dfe4:	f7ff ffc0 	bl	801df68 <do_memp_malloc_pool>
 801dfe8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801dfea:	4618      	mov	r0, r3
 801dfec:	3708      	adds	r7, #8
 801dfee:	46bd      	mov	sp, r7
 801dff0:	bd80      	pop	{r7, pc}
 801dff2:	bf00      	nop
 801dff4:	08027a90 	.word	0x08027a90
 801dff8:	08027b0c 	.word	0x08027b0c
 801dffc:	08027ae4 	.word	0x08027ae4

0801e000 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801e000:	b580      	push	{r7, lr}
 801e002:	b084      	sub	sp, #16
 801e004:	af00      	add	r7, sp, #0
 801e006:	4603      	mov	r3, r0
 801e008:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801e00a:	79fb      	ldrb	r3, [r7, #7]
 801e00c:	2b05      	cmp	r3, #5
 801e00e:	d908      	bls.n	801e022 <memp_malloc+0x22>
 801e010:	4b0a      	ldr	r3, [pc, #40]	; (801e03c <memp_malloc+0x3c>)
 801e012:	f240 1257 	movw	r2, #343	; 0x157
 801e016:	490a      	ldr	r1, [pc, #40]	; (801e040 <memp_malloc+0x40>)
 801e018:	480a      	ldr	r0, [pc, #40]	; (801e044 <memp_malloc+0x44>)
 801e01a:	f004 fca9 	bl	8022970 <iprintf>
 801e01e:	2300      	movs	r3, #0
 801e020:	e008      	b.n	801e034 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801e022:	79fb      	ldrb	r3, [r7, #7]
 801e024:	4a08      	ldr	r2, [pc, #32]	; (801e048 <memp_malloc+0x48>)
 801e026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e02a:	4618      	mov	r0, r3
 801e02c:	f7ff ff9c 	bl	801df68 <do_memp_malloc_pool>
 801e030:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801e032:	68fb      	ldr	r3, [r7, #12]
}
 801e034:	4618      	mov	r0, r3
 801e036:	3710      	adds	r7, #16
 801e038:	46bd      	mov	sp, r7
 801e03a:	bd80      	pop	{r7, pc}
 801e03c:	08027a90 	.word	0x08027a90
 801e040:	08027b20 	.word	0x08027b20
 801e044:	08027ae4 	.word	0x08027ae4
 801e048:	080292dc 	.word	0x080292dc

0801e04c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801e04c:	b580      	push	{r7, lr}
 801e04e:	b084      	sub	sp, #16
 801e050:	af00      	add	r7, sp, #0
 801e052:	6078      	str	r0, [r7, #4]
 801e054:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801e056:	683b      	ldr	r3, [r7, #0]
 801e058:	f003 0303 	and.w	r3, r3, #3
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	d006      	beq.n	801e06e <do_memp_free_pool+0x22>
 801e060:	4b0a      	ldr	r3, [pc, #40]	; (801e08c <do_memp_free_pool+0x40>)
 801e062:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801e066:	490a      	ldr	r1, [pc, #40]	; (801e090 <do_memp_free_pool+0x44>)
 801e068:	480a      	ldr	r0, [pc, #40]	; (801e094 <do_memp_free_pool+0x48>)
 801e06a:	f004 fc81 	bl	8022970 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801e06e:	683b      	ldr	r3, [r7, #0]
 801e070:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	689b      	ldr	r3, [r3, #8]
 801e076:	681a      	ldr	r2, [r3, #0]
 801e078:	68fb      	ldr	r3, [r7, #12]
 801e07a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	689b      	ldr	r3, [r3, #8]
 801e080:	68fa      	ldr	r2, [r7, #12]
 801e082:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801e084:	bf00      	nop
 801e086:	3710      	adds	r7, #16
 801e088:	46bd      	mov	sp, r7
 801e08a:	bd80      	pop	{r7, pc}
 801e08c:	08027a90 	.word	0x08027a90
 801e090:	08027b40 	.word	0x08027b40
 801e094:	08027ae4 	.word	0x08027ae4

0801e098 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801e098:	b580      	push	{r7, lr}
 801e09a:	b082      	sub	sp, #8
 801e09c:	af00      	add	r7, sp, #0
 801e09e:	6078      	str	r0, [r7, #4]
 801e0a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801e0a2:	687b      	ldr	r3, [r7, #4]
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	d106      	bne.n	801e0b6 <memp_free_pool+0x1e>
 801e0a8:	4b0a      	ldr	r3, [pc, #40]	; (801e0d4 <memp_free_pool+0x3c>)
 801e0aa:	f240 1295 	movw	r2, #405	; 0x195
 801e0ae:	490a      	ldr	r1, [pc, #40]	; (801e0d8 <memp_free_pool+0x40>)
 801e0b0:	480a      	ldr	r0, [pc, #40]	; (801e0dc <memp_free_pool+0x44>)
 801e0b2:	f004 fc5d 	bl	8022970 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801e0b6:	687b      	ldr	r3, [r7, #4]
 801e0b8:	2b00      	cmp	r3, #0
 801e0ba:	d007      	beq.n	801e0cc <memp_free_pool+0x34>
 801e0bc:	683b      	ldr	r3, [r7, #0]
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d004      	beq.n	801e0cc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801e0c2:	6839      	ldr	r1, [r7, #0]
 801e0c4:	6878      	ldr	r0, [r7, #4]
 801e0c6:	f7ff ffc1 	bl	801e04c <do_memp_free_pool>
 801e0ca:	e000      	b.n	801e0ce <memp_free_pool+0x36>
    return;
 801e0cc:	bf00      	nop
}
 801e0ce:	3708      	adds	r7, #8
 801e0d0:	46bd      	mov	sp, r7
 801e0d2:	bd80      	pop	{r7, pc}
 801e0d4:	08027a90 	.word	0x08027a90
 801e0d8:	08027b0c 	.word	0x08027b0c
 801e0dc:	08027ae4 	.word	0x08027ae4

0801e0e0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801e0e0:	b580      	push	{r7, lr}
 801e0e2:	b082      	sub	sp, #8
 801e0e4:	af00      	add	r7, sp, #0
 801e0e6:	4603      	mov	r3, r0
 801e0e8:	6039      	str	r1, [r7, #0]
 801e0ea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801e0ec:	79fb      	ldrb	r3, [r7, #7]
 801e0ee:	2b05      	cmp	r3, #5
 801e0f0:	d907      	bls.n	801e102 <memp_free+0x22>
 801e0f2:	4b0c      	ldr	r3, [pc, #48]	; (801e124 <memp_free+0x44>)
 801e0f4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801e0f8:	490b      	ldr	r1, [pc, #44]	; (801e128 <memp_free+0x48>)
 801e0fa:	480c      	ldr	r0, [pc, #48]	; (801e12c <memp_free+0x4c>)
 801e0fc:	f004 fc38 	bl	8022970 <iprintf>
 801e100:	e00c      	b.n	801e11c <memp_free+0x3c>

  if (mem == NULL) {
 801e102:	683b      	ldr	r3, [r7, #0]
 801e104:	2b00      	cmp	r3, #0
 801e106:	d008      	beq.n	801e11a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801e108:	79fb      	ldrb	r3, [r7, #7]
 801e10a:	4a09      	ldr	r2, [pc, #36]	; (801e130 <memp_free+0x50>)
 801e10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e110:	6839      	ldr	r1, [r7, #0]
 801e112:	4618      	mov	r0, r3
 801e114:	f7ff ff9a 	bl	801e04c <do_memp_free_pool>
 801e118:	e000      	b.n	801e11c <memp_free+0x3c>
    return;
 801e11a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801e11c:	3708      	adds	r7, #8
 801e11e:	46bd      	mov	sp, r7
 801e120:	bd80      	pop	{r7, pc}
 801e122:	bf00      	nop
 801e124:	08027a90 	.word	0x08027a90
 801e128:	08027b60 	.word	0x08027b60
 801e12c:	08027ae4 	.word	0x08027ae4
 801e130:	080292dc 	.word	0x080292dc

0801e134 <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 801e134:	b580      	push	{r7, lr}
 801e136:	b082      	sub	sp, #8
 801e138:	af00      	add	r7, sp, #0
 801e13a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	2b00      	cmp	r3, #0
 801e140:	d105      	bne.n	801e14e <netif_loopif_init+0x1a>
 801e142:	4b0b      	ldr	r3, [pc, #44]	; (801e170 <netif_loopif_init+0x3c>)
 801e144:	2299      	movs	r2, #153	; 0x99
 801e146:	490b      	ldr	r1, [pc, #44]	; (801e174 <netif_loopif_init+0x40>)
 801e148:	480b      	ldr	r0, [pc, #44]	; (801e178 <netif_loopif_init+0x44>)
 801e14a:	f004 fc11 	bl	8022970 <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 801e14e:	687b      	ldr	r3, [r7, #4]
 801e150:	226c      	movs	r2, #108	; 0x6c
 801e152:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	226f      	movs	r2, #111	; 0x6f
 801e15a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	4a06      	ldr	r2, [pc, #24]	; (801e17c <netif_loopif_init+0x48>)
 801e162:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 801e164:	2300      	movs	r3, #0
}
 801e166:	4618      	mov	r0, r3
 801e168:	3708      	adds	r7, #8
 801e16a:	46bd      	mov	sp, r7
 801e16c:	bd80      	pop	{r7, pc}
 801e16e:	bf00      	nop
 801e170:	08027b7c 	.word	0x08027b7c
 801e174:	08027bb0 	.word	0x08027bb0
 801e178:	08027bd4 	.word	0x08027bd4
 801e17c:	0801e861 	.word	0x0801e861

0801e180 <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801e180:	b580      	push	{r7, lr}
 801e182:	b088      	sub	sp, #32
 801e184:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 801e186:	4b0f      	ldr	r3, [pc, #60]	; (801e1c4 <netif_init+0x44>)
 801e188:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 801e18a:	4b0e      	ldr	r3, [pc, #56]	; (801e1c4 <netif_init+0x44>)
 801e18c:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 801e18e:	23ff      	movs	r3, #255	; 0xff
 801e190:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 801e192:	1d3b      	adds	r3, r7, #4
 801e194:	f107 0208 	add.w	r2, r7, #8
 801e198:	f107 010c 	add.w	r1, r7, #12
 801e19c:	480a      	ldr	r0, [pc, #40]	; (801e1c8 <netif_init+0x48>)
 801e19e:	9002      	str	r0, [sp, #8]
 801e1a0:	480a      	ldr	r0, [pc, #40]	; (801e1cc <netif_init+0x4c>)
 801e1a2:	9001      	str	r0, [sp, #4]
 801e1a4:	2000      	movs	r0, #0
 801e1a6:	9000      	str	r0, [sp, #0]
 801e1a8:	4809      	ldr	r0, [pc, #36]	; (801e1d0 <netif_init+0x50>)
 801e1aa:	f000 f813 	bl	801e1d4 <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 801e1ae:	4808      	ldr	r0, [pc, #32]	; (801e1d0 <netif_init+0x50>)
 801e1b0:	f000 fa72 	bl	801e698 <netif_set_link_up>
  netif_set_up(&loop_netif);
 801e1b4:	4806      	ldr	r0, [pc, #24]	; (801e1d0 <netif_init+0x50>)
 801e1b6:	f000 f9d1 	bl	801e55c <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 801e1ba:	bf00      	nop
 801e1bc:	3710      	adds	r7, #16
 801e1be:	46bd      	mov	sp, r7
 801e1c0:	bd80      	pop	{r7, pc}
 801e1c2:	bf00      	nop
 801e1c4:	0100007f 	.word	0x0100007f
 801e1c8:	080212fd 	.word	0x080212fd
 801e1cc:	0801e135 	.word	0x0801e135
 801e1d0:	20013e20 	.word	0x20013e20

0801e1d4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801e1d4:	b580      	push	{r7, lr}
 801e1d6:	b086      	sub	sp, #24
 801e1d8:	af00      	add	r7, sp, #0
 801e1da:	60f8      	str	r0, [r7, #12]
 801e1dc:	60b9      	str	r1, [r7, #8]
 801e1de:	607a      	str	r2, [r7, #4]
 801e1e0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801e1e2:	68fb      	ldr	r3, [r7, #12]
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d108      	bne.n	801e1fa <netif_add+0x26>
 801e1e8:	4b5a      	ldr	r3, [pc, #360]	; (801e354 <netif_add+0x180>)
 801e1ea:	f240 1227 	movw	r2, #295	; 0x127
 801e1ee:	495a      	ldr	r1, [pc, #360]	; (801e358 <netif_add+0x184>)
 801e1f0:	485a      	ldr	r0, [pc, #360]	; (801e35c <netif_add+0x188>)
 801e1f2:	f004 fbbd 	bl	8022970 <iprintf>
 801e1f6:	2300      	movs	r3, #0
 801e1f8:	e0a8      	b.n	801e34c <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801e1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	d108      	bne.n	801e212 <netif_add+0x3e>
 801e200:	4b54      	ldr	r3, [pc, #336]	; (801e354 <netif_add+0x180>)
 801e202:	f44f 7294 	mov.w	r2, #296	; 0x128
 801e206:	4956      	ldr	r1, [pc, #344]	; (801e360 <netif_add+0x18c>)
 801e208:	4854      	ldr	r0, [pc, #336]	; (801e35c <netif_add+0x188>)
 801e20a:	f004 fbb1 	bl	8022970 <iprintf>
 801e20e:	2300      	movs	r3, #0
 801e210:	e09c      	b.n	801e34c <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801e212:	68bb      	ldr	r3, [r7, #8]
 801e214:	2b00      	cmp	r3, #0
 801e216:	d101      	bne.n	801e21c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801e218:	4b52      	ldr	r3, [pc, #328]	; (801e364 <netif_add+0x190>)
 801e21a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801e21c:	687b      	ldr	r3, [r7, #4]
 801e21e:	2b00      	cmp	r3, #0
 801e220:	d101      	bne.n	801e226 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801e222:	4b50      	ldr	r3, [pc, #320]	; (801e364 <netif_add+0x190>)
 801e224:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801e226:	683b      	ldr	r3, [r7, #0]
 801e228:	2b00      	cmp	r3, #0
 801e22a:	d101      	bne.n	801e230 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801e22c:	4b4d      	ldr	r3, [pc, #308]	; (801e364 <netif_add+0x190>)
 801e22e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801e230:	68fb      	ldr	r3, [r7, #12]
 801e232:	2200      	movs	r2, #0
 801e234:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801e236:	68fb      	ldr	r3, [r7, #12]
 801e238:	2200      	movs	r2, #0
 801e23a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801e23c:	68fb      	ldr	r3, [r7, #12]
 801e23e:	2200      	movs	r2, #0
 801e240:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801e242:	68fb      	ldr	r3, [r7, #12]
 801e244:	4a48      	ldr	r2, [pc, #288]	; (801e368 <netif_add+0x194>)
 801e246:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801e248:	68fb      	ldr	r3, [r7, #12]
 801e24a:	2200      	movs	r2, #0
 801e24c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801e24e:	68fb      	ldr	r3, [r7, #12]
 801e250:	2200      	movs	r2, #0
 801e252:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801e256:	68fb      	ldr	r3, [r7, #12]
 801e258:	2200      	movs	r2, #0
 801e25a:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 801e25c:	68fb      	ldr	r3, [r7, #12]
 801e25e:	2200      	movs	r2, #0
 801e260:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 801e262:	68fb      	ldr	r3, [r7, #12]
 801e264:	2200      	movs	r2, #0
 801e266:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801e268:	68fb      	ldr	r3, [r7, #12]
 801e26a:	6a3a      	ldr	r2, [r7, #32]
 801e26c:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 801e26e:	4b3f      	ldr	r3, [pc, #252]	; (801e36c <netif_add+0x198>)
 801e270:	781a      	ldrb	r2, [r3, #0]
 801e272:	68fb      	ldr	r3, [r7, #12]
 801e274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801e278:	68fb      	ldr	r3, [r7, #12]
 801e27a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e27c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801e27e:	683b      	ldr	r3, [r7, #0]
 801e280:	687a      	ldr	r2, [r7, #4]
 801e282:	68b9      	ldr	r1, [r7, #8]
 801e284:	68f8      	ldr	r0, [r7, #12]
 801e286:	f000 f90f 	bl	801e4a8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801e28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e28c:	68f8      	ldr	r0, [r7, #12]
 801e28e:	4798      	blx	r3
 801e290:	4603      	mov	r3, r0
 801e292:	2b00      	cmp	r3, #0
 801e294:	d001      	beq.n	801e29a <netif_add+0xc6>
    return NULL;
 801e296:	2300      	movs	r3, #0
 801e298:	e058      	b.n	801e34c <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801e29a:	68fb      	ldr	r3, [r7, #12]
 801e29c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e2a0:	2bff      	cmp	r3, #255	; 0xff
 801e2a2:	d103      	bne.n	801e2ac <netif_add+0xd8>
        netif->num = 0;
 801e2a4:	68fb      	ldr	r3, [r7, #12]
 801e2a6:	2200      	movs	r2, #0
 801e2a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801e2ac:	2300      	movs	r3, #0
 801e2ae:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801e2b0:	4b2f      	ldr	r3, [pc, #188]	; (801e370 <netif_add+0x19c>)
 801e2b2:	681b      	ldr	r3, [r3, #0]
 801e2b4:	617b      	str	r3, [r7, #20]
 801e2b6:	e02b      	b.n	801e310 <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801e2b8:	697a      	ldr	r2, [r7, #20]
 801e2ba:	68fb      	ldr	r3, [r7, #12]
 801e2bc:	429a      	cmp	r2, r3
 801e2be:	d106      	bne.n	801e2ce <netif_add+0xfa>
 801e2c0:	4b24      	ldr	r3, [pc, #144]	; (801e354 <netif_add+0x180>)
 801e2c2:	f240 128b 	movw	r2, #395	; 0x18b
 801e2c6:	492b      	ldr	r1, [pc, #172]	; (801e374 <netif_add+0x1a0>)
 801e2c8:	4824      	ldr	r0, [pc, #144]	; (801e35c <netif_add+0x188>)
 801e2ca:	f004 fb51 	bl	8022970 <iprintf>
        num_netifs++;
 801e2ce:	693b      	ldr	r3, [r7, #16]
 801e2d0:	3301      	adds	r3, #1
 801e2d2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801e2d4:	693b      	ldr	r3, [r7, #16]
 801e2d6:	2bff      	cmp	r3, #255	; 0xff
 801e2d8:	dd06      	ble.n	801e2e8 <netif_add+0x114>
 801e2da:	4b1e      	ldr	r3, [pc, #120]	; (801e354 <netif_add+0x180>)
 801e2dc:	f240 128d 	movw	r2, #397	; 0x18d
 801e2e0:	4925      	ldr	r1, [pc, #148]	; (801e378 <netif_add+0x1a4>)
 801e2e2:	481e      	ldr	r0, [pc, #120]	; (801e35c <netif_add+0x188>)
 801e2e4:	f004 fb44 	bl	8022970 <iprintf>
        if (netif2->num == netif->num) {
 801e2e8:	697b      	ldr	r3, [r7, #20]
 801e2ea:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801e2ee:	68fb      	ldr	r3, [r7, #12]
 801e2f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e2f4:	429a      	cmp	r2, r3
 801e2f6:	d108      	bne.n	801e30a <netif_add+0x136>
          netif->num++;
 801e2f8:	68fb      	ldr	r3, [r7, #12]
 801e2fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e2fe:	3301      	adds	r3, #1
 801e300:	b2da      	uxtb	r2, r3
 801e302:	68fb      	ldr	r3, [r7, #12]
 801e304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801e308:	e005      	b.n	801e316 <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801e30a:	697b      	ldr	r3, [r7, #20]
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	617b      	str	r3, [r7, #20]
 801e310:	697b      	ldr	r3, [r7, #20]
 801e312:	2b00      	cmp	r3, #0
 801e314:	d1d0      	bne.n	801e2b8 <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 801e316:	697b      	ldr	r3, [r7, #20]
 801e318:	2b00      	cmp	r3, #0
 801e31a:	d1be      	bne.n	801e29a <netif_add+0xc6>
  }
  if (netif->num == 254) {
 801e31c:	68fb      	ldr	r3, [r7, #12]
 801e31e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e322:	2bfe      	cmp	r3, #254	; 0xfe
 801e324:	d103      	bne.n	801e32e <netif_add+0x15a>
    netif_num = 0;
 801e326:	4b11      	ldr	r3, [pc, #68]	; (801e36c <netif_add+0x198>)
 801e328:	2200      	movs	r2, #0
 801e32a:	701a      	strb	r2, [r3, #0]
 801e32c:	e006      	b.n	801e33c <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801e32e:	68fb      	ldr	r3, [r7, #12]
 801e330:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e334:	3301      	adds	r3, #1
 801e336:	b2da      	uxtb	r2, r3
 801e338:	4b0c      	ldr	r3, [pc, #48]	; (801e36c <netif_add+0x198>)
 801e33a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801e33c:	4b0c      	ldr	r3, [pc, #48]	; (801e370 <netif_add+0x19c>)
 801e33e:	681a      	ldr	r2, [r3, #0]
 801e340:	68fb      	ldr	r3, [r7, #12]
 801e342:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801e344:	4a0a      	ldr	r2, [pc, #40]	; (801e370 <netif_add+0x19c>)
 801e346:	68fb      	ldr	r3, [r7, #12]
 801e348:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801e34a:	68fb      	ldr	r3, [r7, #12]
}
 801e34c:	4618      	mov	r0, r3
 801e34e:	3718      	adds	r7, #24
 801e350:	46bd      	mov	sp, r7
 801e352:	bd80      	pop	{r7, pc}
 801e354:	08027b7c 	.word	0x08027b7c
 801e358:	08027c34 	.word	0x08027c34
 801e35c:	08027bd4 	.word	0x08027bd4
 801e360:	08027c50 	.word	0x08027c50
 801e364:	08029304 	.word	0x08029304
 801e368:	0801e87f 	.word	0x0801e87f
 801e36c:	20013e1c 	.word	0x20013e1c
 801e370:	20013e14 	.word	0x20013e14
 801e374:	08027c74 	.word	0x08027c74
 801e378:	08027c88 	.word	0x08027c88

0801e37c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801e37c:	b580      	push	{r7, lr}
 801e37e:	b082      	sub	sp, #8
 801e380:	af00      	add	r7, sp, #0
 801e382:	6078      	str	r0, [r7, #4]
 801e384:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801e386:	6839      	ldr	r1, [r7, #0]
 801e388:	6878      	ldr	r0, [r7, #4]
 801e38a:	f001 fe13 	bl	801ffb4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801e38e:	bf00      	nop
 801e390:	3708      	adds	r7, #8
 801e392:	46bd      	mov	sp, r7
 801e394:	bd80      	pop	{r7, pc}
	...

0801e398 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801e398:	b580      	push	{r7, lr}
 801e39a:	b086      	sub	sp, #24
 801e39c:	af00      	add	r7, sp, #0
 801e39e:	60f8      	str	r0, [r7, #12]
 801e3a0:	60b9      	str	r1, [r7, #8]
 801e3a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801e3a4:	68bb      	ldr	r3, [r7, #8]
 801e3a6:	2b00      	cmp	r3, #0
 801e3a8:	d106      	bne.n	801e3b8 <netif_do_set_ipaddr+0x20>
 801e3aa:	4b1d      	ldr	r3, [pc, #116]	; (801e420 <netif_do_set_ipaddr+0x88>)
 801e3ac:	f240 12cb 	movw	r2, #459	; 0x1cb
 801e3b0:	491c      	ldr	r1, [pc, #112]	; (801e424 <netif_do_set_ipaddr+0x8c>)
 801e3b2:	481d      	ldr	r0, [pc, #116]	; (801e428 <netif_do_set_ipaddr+0x90>)
 801e3b4:	f004 fadc 	bl	8022970 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801e3b8:	687b      	ldr	r3, [r7, #4]
 801e3ba:	2b00      	cmp	r3, #0
 801e3bc:	d106      	bne.n	801e3cc <netif_do_set_ipaddr+0x34>
 801e3be:	4b18      	ldr	r3, [pc, #96]	; (801e420 <netif_do_set_ipaddr+0x88>)
 801e3c0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801e3c4:	4917      	ldr	r1, [pc, #92]	; (801e424 <netif_do_set_ipaddr+0x8c>)
 801e3c6:	4818      	ldr	r0, [pc, #96]	; (801e428 <netif_do_set_ipaddr+0x90>)
 801e3c8:	f004 fad2 	bl	8022970 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801e3cc:	68bb      	ldr	r3, [r7, #8]
 801e3ce:	681a      	ldr	r2, [r3, #0]
 801e3d0:	68fb      	ldr	r3, [r7, #12]
 801e3d2:	3304      	adds	r3, #4
 801e3d4:	681b      	ldr	r3, [r3, #0]
 801e3d6:	429a      	cmp	r2, r3
 801e3d8:	d01c      	beq.n	801e414 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801e3da:	68bb      	ldr	r3, [r7, #8]
 801e3dc:	681b      	ldr	r3, [r3, #0]
 801e3de:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801e3e0:	68fb      	ldr	r3, [r7, #12]
 801e3e2:	3304      	adds	r3, #4
 801e3e4:	681a      	ldr	r2, [r3, #0]
 801e3e6:	687b      	ldr	r3, [r7, #4]
 801e3e8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801e3ea:	f107 0314 	add.w	r3, r7, #20
 801e3ee:	4619      	mov	r1, r3
 801e3f0:	6878      	ldr	r0, [r7, #4]
 801e3f2:	f7ff ffc3 	bl	801e37c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801e3f6:	68bb      	ldr	r3, [r7, #8]
 801e3f8:	2b00      	cmp	r3, #0
 801e3fa:	d002      	beq.n	801e402 <netif_do_set_ipaddr+0x6a>
 801e3fc:	68bb      	ldr	r3, [r7, #8]
 801e3fe:	681b      	ldr	r3, [r3, #0]
 801e400:	e000      	b.n	801e404 <netif_do_set_ipaddr+0x6c>
 801e402:	2300      	movs	r3, #0
 801e404:	68fa      	ldr	r2, [r7, #12]
 801e406:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801e408:	2101      	movs	r1, #1
 801e40a:	68f8      	ldr	r0, [r7, #12]
 801e40c:	f000 f8d2 	bl	801e5b4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801e410:	2301      	movs	r3, #1
 801e412:	e000      	b.n	801e416 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801e414:	2300      	movs	r3, #0
}
 801e416:	4618      	mov	r0, r3
 801e418:	3718      	adds	r7, #24
 801e41a:	46bd      	mov	sp, r7
 801e41c:	bd80      	pop	{r7, pc}
 801e41e:	bf00      	nop
 801e420:	08027b7c 	.word	0x08027b7c
 801e424:	08027cb8 	.word	0x08027cb8
 801e428:	08027bd4 	.word	0x08027bd4

0801e42c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801e42c:	b480      	push	{r7}
 801e42e:	b085      	sub	sp, #20
 801e430:	af00      	add	r7, sp, #0
 801e432:	60f8      	str	r0, [r7, #12]
 801e434:	60b9      	str	r1, [r7, #8]
 801e436:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801e438:	68bb      	ldr	r3, [r7, #8]
 801e43a:	681a      	ldr	r2, [r3, #0]
 801e43c:	68fb      	ldr	r3, [r7, #12]
 801e43e:	3308      	adds	r3, #8
 801e440:	681b      	ldr	r3, [r3, #0]
 801e442:	429a      	cmp	r2, r3
 801e444:	d00a      	beq.n	801e45c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801e446:	68bb      	ldr	r3, [r7, #8]
 801e448:	2b00      	cmp	r3, #0
 801e44a:	d002      	beq.n	801e452 <netif_do_set_netmask+0x26>
 801e44c:	68bb      	ldr	r3, [r7, #8]
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	e000      	b.n	801e454 <netif_do_set_netmask+0x28>
 801e452:	2300      	movs	r3, #0
 801e454:	68fa      	ldr	r2, [r7, #12]
 801e456:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801e458:	2301      	movs	r3, #1
 801e45a:	e000      	b.n	801e45e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801e45c:	2300      	movs	r3, #0
}
 801e45e:	4618      	mov	r0, r3
 801e460:	3714      	adds	r7, #20
 801e462:	46bd      	mov	sp, r7
 801e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e468:	4770      	bx	lr

0801e46a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801e46a:	b480      	push	{r7}
 801e46c:	b085      	sub	sp, #20
 801e46e:	af00      	add	r7, sp, #0
 801e470:	60f8      	str	r0, [r7, #12]
 801e472:	60b9      	str	r1, [r7, #8]
 801e474:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801e476:	68bb      	ldr	r3, [r7, #8]
 801e478:	681a      	ldr	r2, [r3, #0]
 801e47a:	68fb      	ldr	r3, [r7, #12]
 801e47c:	330c      	adds	r3, #12
 801e47e:	681b      	ldr	r3, [r3, #0]
 801e480:	429a      	cmp	r2, r3
 801e482:	d00a      	beq.n	801e49a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801e484:	68bb      	ldr	r3, [r7, #8]
 801e486:	2b00      	cmp	r3, #0
 801e488:	d002      	beq.n	801e490 <netif_do_set_gw+0x26>
 801e48a:	68bb      	ldr	r3, [r7, #8]
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	e000      	b.n	801e492 <netif_do_set_gw+0x28>
 801e490:	2300      	movs	r3, #0
 801e492:	68fa      	ldr	r2, [r7, #12]
 801e494:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801e496:	2301      	movs	r3, #1
 801e498:	e000      	b.n	801e49c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801e49a:	2300      	movs	r3, #0
}
 801e49c:	4618      	mov	r0, r3
 801e49e:	3714      	adds	r7, #20
 801e4a0:	46bd      	mov	sp, r7
 801e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4a6:	4770      	bx	lr

0801e4a8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801e4a8:	b580      	push	{r7, lr}
 801e4aa:	b088      	sub	sp, #32
 801e4ac:	af00      	add	r7, sp, #0
 801e4ae:	60f8      	str	r0, [r7, #12]
 801e4b0:	60b9      	str	r1, [r7, #8]
 801e4b2:	607a      	str	r2, [r7, #4]
 801e4b4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801e4b6:	2300      	movs	r3, #0
 801e4b8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801e4ba:	2300      	movs	r3, #0
 801e4bc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801e4be:	68bb      	ldr	r3, [r7, #8]
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	d101      	bne.n	801e4c8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801e4c4:	4b1c      	ldr	r3, [pc, #112]	; (801e538 <netif_set_addr+0x90>)
 801e4c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	d101      	bne.n	801e4d2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801e4ce:	4b1a      	ldr	r3, [pc, #104]	; (801e538 <netif_set_addr+0x90>)
 801e4d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801e4d2:	683b      	ldr	r3, [r7, #0]
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d101      	bne.n	801e4dc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801e4d8:	4b17      	ldr	r3, [pc, #92]	; (801e538 <netif_set_addr+0x90>)
 801e4da:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801e4dc:	68bb      	ldr	r3, [r7, #8]
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	d003      	beq.n	801e4ea <netif_set_addr+0x42>
 801e4e2:	68bb      	ldr	r3, [r7, #8]
 801e4e4:	681b      	ldr	r3, [r3, #0]
 801e4e6:	2b00      	cmp	r3, #0
 801e4e8:	d101      	bne.n	801e4ee <netif_set_addr+0x46>
 801e4ea:	2301      	movs	r3, #1
 801e4ec:	e000      	b.n	801e4f0 <netif_set_addr+0x48>
 801e4ee:	2300      	movs	r3, #0
 801e4f0:	617b      	str	r3, [r7, #20]
  if (remove) {
 801e4f2:	697b      	ldr	r3, [r7, #20]
 801e4f4:	2b00      	cmp	r3, #0
 801e4f6:	d006      	beq.n	801e506 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801e4f8:	f107 0310 	add.w	r3, r7, #16
 801e4fc:	461a      	mov	r2, r3
 801e4fe:	68b9      	ldr	r1, [r7, #8]
 801e500:	68f8      	ldr	r0, [r7, #12]
 801e502:	f7ff ff49 	bl	801e398 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801e506:	69fa      	ldr	r2, [r7, #28]
 801e508:	6879      	ldr	r1, [r7, #4]
 801e50a:	68f8      	ldr	r0, [r7, #12]
 801e50c:	f7ff ff8e 	bl	801e42c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801e510:	69ba      	ldr	r2, [r7, #24]
 801e512:	6839      	ldr	r1, [r7, #0]
 801e514:	68f8      	ldr	r0, [r7, #12]
 801e516:	f7ff ffa8 	bl	801e46a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801e51a:	697b      	ldr	r3, [r7, #20]
 801e51c:	2b00      	cmp	r3, #0
 801e51e:	d106      	bne.n	801e52e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801e520:	f107 0310 	add.w	r3, r7, #16
 801e524:	461a      	mov	r2, r3
 801e526:	68b9      	ldr	r1, [r7, #8]
 801e528:	68f8      	ldr	r0, [r7, #12]
 801e52a:	f7ff ff35 	bl	801e398 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801e52e:	bf00      	nop
 801e530:	3720      	adds	r7, #32
 801e532:	46bd      	mov	sp, r7
 801e534:	bd80      	pop	{r7, pc}
 801e536:	bf00      	nop
 801e538:	08029304 	.word	0x08029304

0801e53c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801e53c:	b480      	push	{r7}
 801e53e:	b083      	sub	sp, #12
 801e540:	af00      	add	r7, sp, #0
 801e542:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801e544:	4a04      	ldr	r2, [pc, #16]	; (801e558 <netif_set_default+0x1c>)
 801e546:	687b      	ldr	r3, [r7, #4]
 801e548:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801e54a:	bf00      	nop
 801e54c:	370c      	adds	r7, #12
 801e54e:	46bd      	mov	sp, r7
 801e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e554:	4770      	bx	lr
 801e556:	bf00      	nop
 801e558:	20013e18 	.word	0x20013e18

0801e55c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801e55c:	b580      	push	{r7, lr}
 801e55e:	b082      	sub	sp, #8
 801e560:	af00      	add	r7, sp, #0
 801e562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801e564:	687b      	ldr	r3, [r7, #4]
 801e566:	2b00      	cmp	r3, #0
 801e568:	d107      	bne.n	801e57a <netif_set_up+0x1e>
 801e56a:	4b0f      	ldr	r3, [pc, #60]	; (801e5a8 <netif_set_up+0x4c>)
 801e56c:	f44f 7254 	mov.w	r2, #848	; 0x350
 801e570:	490e      	ldr	r1, [pc, #56]	; (801e5ac <netif_set_up+0x50>)
 801e572:	480f      	ldr	r0, [pc, #60]	; (801e5b0 <netif_set_up+0x54>)
 801e574:	f004 f9fc 	bl	8022970 <iprintf>
 801e578:	e013      	b.n	801e5a2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801e57a:	687b      	ldr	r3, [r7, #4]
 801e57c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e580:	f003 0301 	and.w	r3, r3, #1
 801e584:	2b00      	cmp	r3, #0
 801e586:	d10c      	bne.n	801e5a2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e58e:	f043 0301 	orr.w	r3, r3, #1
 801e592:	b2da      	uxtb	r2, r3
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801e59a:	2103      	movs	r1, #3
 801e59c:	6878      	ldr	r0, [r7, #4]
 801e59e:	f000 f809 	bl	801e5b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801e5a2:	3708      	adds	r7, #8
 801e5a4:	46bd      	mov	sp, r7
 801e5a6:	bd80      	pop	{r7, pc}
 801e5a8:	08027b7c 	.word	0x08027b7c
 801e5ac:	08027d28 	.word	0x08027d28
 801e5b0:	08027bd4 	.word	0x08027bd4

0801e5b4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801e5b4:	b580      	push	{r7, lr}
 801e5b6:	b082      	sub	sp, #8
 801e5b8:	af00      	add	r7, sp, #0
 801e5ba:	6078      	str	r0, [r7, #4]
 801e5bc:	460b      	mov	r3, r1
 801e5be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	2b00      	cmp	r3, #0
 801e5c4:	d106      	bne.n	801e5d4 <netif_issue_reports+0x20>
 801e5c6:	4b18      	ldr	r3, [pc, #96]	; (801e628 <netif_issue_reports+0x74>)
 801e5c8:	f240 326d 	movw	r2, #877	; 0x36d
 801e5cc:	4917      	ldr	r1, [pc, #92]	; (801e62c <netif_issue_reports+0x78>)
 801e5ce:	4818      	ldr	r0, [pc, #96]	; (801e630 <netif_issue_reports+0x7c>)
 801e5d0:	f004 f9ce 	bl	8022970 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e5da:	f003 0304 	and.w	r3, r3, #4
 801e5de:	2b00      	cmp	r3, #0
 801e5e0:	d01e      	beq.n	801e620 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801e5e2:	687b      	ldr	r3, [r7, #4]
 801e5e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e5e8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d017      	beq.n	801e620 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801e5f0:	78fb      	ldrb	r3, [r7, #3]
 801e5f2:	f003 0301 	and.w	r3, r3, #1
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d013      	beq.n	801e622 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	3304      	adds	r3, #4
 801e5fe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801e600:	2b00      	cmp	r3, #0
 801e602:	d00e      	beq.n	801e622 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e60a:	f003 0308 	and.w	r3, r3, #8
 801e60e:	2b00      	cmp	r3, #0
 801e610:	d007      	beq.n	801e622 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	3304      	adds	r3, #4
 801e616:	4619      	mov	r1, r3
 801e618:	6878      	ldr	r0, [r7, #4]
 801e61a:	f002 fc35 	bl	8020e88 <etharp_request>
 801e61e:	e000      	b.n	801e622 <netif_issue_reports+0x6e>
    return;
 801e620:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801e622:	3708      	adds	r7, #8
 801e624:	46bd      	mov	sp, r7
 801e626:	bd80      	pop	{r7, pc}
 801e628:	08027b7c 	.word	0x08027b7c
 801e62c:	08027d44 	.word	0x08027d44
 801e630:	08027bd4 	.word	0x08027bd4

0801e634 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801e634:	b580      	push	{r7, lr}
 801e636:	b082      	sub	sp, #8
 801e638:	af00      	add	r7, sp, #0
 801e63a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801e63c:	687b      	ldr	r3, [r7, #4]
 801e63e:	2b00      	cmp	r3, #0
 801e640:	d107      	bne.n	801e652 <netif_set_down+0x1e>
 801e642:	4b12      	ldr	r3, [pc, #72]	; (801e68c <netif_set_down+0x58>)
 801e644:	f240 329b 	movw	r2, #923	; 0x39b
 801e648:	4911      	ldr	r1, [pc, #68]	; (801e690 <netif_set_down+0x5c>)
 801e64a:	4812      	ldr	r0, [pc, #72]	; (801e694 <netif_set_down+0x60>)
 801e64c:	f004 f990 	bl	8022970 <iprintf>
 801e650:	e019      	b.n	801e686 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e658:	f003 0301 	and.w	r3, r3, #1
 801e65c:	2b00      	cmp	r3, #0
 801e65e:	d012      	beq.n	801e686 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e666:	f023 0301 	bic.w	r3, r3, #1
 801e66a:	b2da      	uxtb	r2, r3
 801e66c:	687b      	ldr	r3, [r7, #4]
 801e66e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e678:	f003 0308 	and.w	r3, r3, #8
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	d002      	beq.n	801e686 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801e680:	6878      	ldr	r0, [r7, #4]
 801e682:	f001 ffbf 	bl	8020604 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801e686:	3708      	adds	r7, #8
 801e688:	46bd      	mov	sp, r7
 801e68a:	bd80      	pop	{r7, pc}
 801e68c:	08027b7c 	.word	0x08027b7c
 801e690:	08027d68 	.word	0x08027d68
 801e694:	08027bd4 	.word	0x08027bd4

0801e698 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801e698:	b580      	push	{r7, lr}
 801e69a:	b082      	sub	sp, #8
 801e69c:	af00      	add	r7, sp, #0
 801e69e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	d107      	bne.n	801e6b6 <netif_set_link_up+0x1e>
 801e6a6:	4b13      	ldr	r3, [pc, #76]	; (801e6f4 <netif_set_link_up+0x5c>)
 801e6a8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801e6ac:	4912      	ldr	r1, [pc, #72]	; (801e6f8 <netif_set_link_up+0x60>)
 801e6ae:	4813      	ldr	r0, [pc, #76]	; (801e6fc <netif_set_link_up+0x64>)
 801e6b0:	f004 f95e 	bl	8022970 <iprintf>
 801e6b4:	e01b      	b.n	801e6ee <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801e6b6:	687b      	ldr	r3, [r7, #4]
 801e6b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e6bc:	f003 0304 	and.w	r3, r3, #4
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	d114      	bne.n	801e6ee <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801e6c4:	687b      	ldr	r3, [r7, #4]
 801e6c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e6ca:	f043 0304 	orr.w	r3, r3, #4
 801e6ce:	b2da      	uxtb	r2, r3
 801e6d0:	687b      	ldr	r3, [r7, #4]
 801e6d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801e6d6:	2103      	movs	r1, #3
 801e6d8:	6878      	ldr	r0, [r7, #4]
 801e6da:	f7ff ff6b 	bl	801e5b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	69db      	ldr	r3, [r3, #28]
 801e6e2:	2b00      	cmp	r3, #0
 801e6e4:	d003      	beq.n	801e6ee <netif_set_link_up+0x56>
 801e6e6:	687b      	ldr	r3, [r7, #4]
 801e6e8:	69db      	ldr	r3, [r3, #28]
 801e6ea:	6878      	ldr	r0, [r7, #4]
 801e6ec:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801e6ee:	3708      	adds	r7, #8
 801e6f0:	46bd      	mov	sp, r7
 801e6f2:	bd80      	pop	{r7, pc}
 801e6f4:	08027b7c 	.word	0x08027b7c
 801e6f8:	08027d88 	.word	0x08027d88
 801e6fc:	08027bd4 	.word	0x08027bd4

0801e700 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801e700:	b580      	push	{r7, lr}
 801e702:	b082      	sub	sp, #8
 801e704:	af00      	add	r7, sp, #0
 801e706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	d107      	bne.n	801e71e <netif_set_link_down+0x1e>
 801e70e:	4b11      	ldr	r3, [pc, #68]	; (801e754 <netif_set_link_down+0x54>)
 801e710:	f240 4206 	movw	r2, #1030	; 0x406
 801e714:	4910      	ldr	r1, [pc, #64]	; (801e758 <netif_set_link_down+0x58>)
 801e716:	4811      	ldr	r0, [pc, #68]	; (801e75c <netif_set_link_down+0x5c>)
 801e718:	f004 f92a 	bl	8022970 <iprintf>
 801e71c:	e017      	b.n	801e74e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e724:	f003 0304 	and.w	r3, r3, #4
 801e728:	2b00      	cmp	r3, #0
 801e72a:	d010      	beq.n	801e74e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e732:	f023 0304 	bic.w	r3, r3, #4
 801e736:	b2da      	uxtb	r2, r3
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801e73e:	687b      	ldr	r3, [r7, #4]
 801e740:	69db      	ldr	r3, [r3, #28]
 801e742:	2b00      	cmp	r3, #0
 801e744:	d003      	beq.n	801e74e <netif_set_link_down+0x4e>
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	69db      	ldr	r3, [r3, #28]
 801e74a:	6878      	ldr	r0, [r7, #4]
 801e74c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801e74e:	3708      	adds	r7, #8
 801e750:	46bd      	mov	sp, r7
 801e752:	bd80      	pop	{r7, pc}
 801e754:	08027b7c 	.word	0x08027b7c
 801e758:	08027dac 	.word	0x08027dac
 801e75c:	08027bd4 	.word	0x08027bd4

0801e760 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801e760:	b480      	push	{r7}
 801e762:	b083      	sub	sp, #12
 801e764:	af00      	add	r7, sp, #0
 801e766:	6078      	str	r0, [r7, #4]
 801e768:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d002      	beq.n	801e776 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	683a      	ldr	r2, [r7, #0]
 801e774:	61da      	str	r2, [r3, #28]
  }
}
 801e776:	bf00      	nop
 801e778:	370c      	adds	r7, #12
 801e77a:	46bd      	mov	sp, r7
 801e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e780:	4770      	bx	lr
	...

0801e784 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 801e784:	b580      	push	{r7, lr}
 801e786:	b086      	sub	sp, #24
 801e788:	af00      	add	r7, sp, #0
 801e78a:	6078      	str	r0, [r7, #4]
 801e78c:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 801e78e:	687b      	ldr	r3, [r7, #4]
 801e790:	2b00      	cmp	r3, #0
 801e792:	d106      	bne.n	801e7a2 <netif_loop_output+0x1e>
 801e794:	4b2d      	ldr	r3, [pc, #180]	; (801e84c <netif_loop_output+0xc8>)
 801e796:	f240 424b 	movw	r2, #1099	; 0x44b
 801e79a:	492d      	ldr	r1, [pc, #180]	; (801e850 <netif_loop_output+0xcc>)
 801e79c:	482d      	ldr	r0, [pc, #180]	; (801e854 <netif_loop_output+0xd0>)
 801e79e:	f004 f8e7 	bl	8022970 <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 801e7a2:	683b      	ldr	r3, [r7, #0]
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d106      	bne.n	801e7b6 <netif_loop_output+0x32>
 801e7a8:	4b28      	ldr	r3, [pc, #160]	; (801e84c <netif_loop_output+0xc8>)
 801e7aa:	f240 424c 	movw	r2, #1100	; 0x44c
 801e7ae:	492a      	ldr	r1, [pc, #168]	; (801e858 <netif_loop_output+0xd4>)
 801e7b0:	4828      	ldr	r0, [pc, #160]	; (801e854 <netif_loop_output+0xd0>)
 801e7b2:	f004 f8dd 	bl	8022970 <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801e7b6:	683b      	ldr	r3, [r7, #0]
 801e7b8:	891b      	ldrh	r3, [r3, #8]
 801e7ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e7be:	4619      	mov	r1, r3
 801e7c0:	200e      	movs	r0, #14
 801e7c2:	f000 f8bb 	bl	801e93c <pbuf_alloc>
 801e7c6:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 801e7c8:	693b      	ldr	r3, [r7, #16]
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	d102      	bne.n	801e7d4 <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 801e7ce:	f04f 33ff 	mov.w	r3, #4294967295
 801e7d2:	e037      	b.n	801e844 <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 801e7d4:	6839      	ldr	r1, [r7, #0]
 801e7d6:	6938      	ldr	r0, [r7, #16]
 801e7d8:	f000 fcba 	bl	801f150 <pbuf_copy>
 801e7dc:	4603      	mov	r3, r0
 801e7de:	73fb      	strb	r3, [r7, #15]
 801e7e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e7e4:	2b00      	cmp	r3, #0
 801e7e6:	d005      	beq.n	801e7f4 <netif_loop_output+0x70>
    pbuf_free(r);
 801e7e8:	6938      	ldr	r0, [r7, #16]
 801e7ea:	f000 fb89 	bl	801ef00 <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 801e7ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e7f2:	e027      	b.n	801e844 <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 801e7f4:	693b      	ldr	r3, [r7, #16]
 801e7f6:	617b      	str	r3, [r7, #20]
 801e7f8:	e002      	b.n	801e800 <netif_loop_output+0x7c>
 801e7fa:	697b      	ldr	r3, [r7, #20]
 801e7fc:	681b      	ldr	r3, [r3, #0]
 801e7fe:	617b      	str	r3, [r7, #20]
 801e800:	697b      	ldr	r3, [r7, #20]
 801e802:	681b      	ldr	r3, [r3, #0]
 801e804:	2b00      	cmp	r3, #0
 801e806:	d1f8      	bne.n	801e7fa <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 801e808:	687b      	ldr	r3, [r7, #4]
 801e80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e80c:	2b00      	cmp	r3, #0
 801e80e:	d012      	beq.n	801e836 <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e814:	2b00      	cmp	r3, #0
 801e816:	d106      	bne.n	801e826 <netif_loop_output+0xa2>
 801e818:	4b0c      	ldr	r3, [pc, #48]	; (801e84c <netif_loop_output+0xc8>)
 801e81a:	f240 4277 	movw	r2, #1143	; 0x477
 801e81e:	490f      	ldr	r1, [pc, #60]	; (801e85c <netif_loop_output+0xd8>)
 801e820:	480c      	ldr	r0, [pc, #48]	; (801e854 <netif_loop_output+0xd0>)
 801e822:	f004 f8a5 	bl	8022970 <iprintf>
    netif->loop_last->next = r;
 801e826:	687b      	ldr	r3, [r7, #4]
 801e828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e82a:	693a      	ldr	r2, [r7, #16]
 801e82c:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 801e82e:	687b      	ldr	r3, [r7, #4]
 801e830:	697a      	ldr	r2, [r7, #20]
 801e832:	63da      	str	r2, [r3, #60]	; 0x3c
 801e834:	e005      	b.n	801e842 <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 801e836:	687b      	ldr	r3, [r7, #4]
 801e838:	693a      	ldr	r2, [r7, #16]
 801e83a:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 801e83c:	687b      	ldr	r3, [r7, #4]
 801e83e:	697a      	ldr	r2, [r7, #20]
 801e840:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 801e842:	2300      	movs	r3, #0
}
 801e844:	4618      	mov	r0, r3
 801e846:	3718      	adds	r7, #24
 801e848:	46bd      	mov	sp, r7
 801e84a:	bd80      	pop	{r7, pc}
 801e84c:	08027b7c 	.word	0x08027b7c
 801e850:	08027dd0 	.word	0x08027dd0
 801e854:	08027bd4 	.word	0x08027bd4
 801e858:	08027df4 	.word	0x08027df4
 801e85c:	08027e14 	.word	0x08027e14

0801e860 <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 801e860:	b580      	push	{r7, lr}
 801e862:	b084      	sub	sp, #16
 801e864:	af00      	add	r7, sp, #0
 801e866:	60f8      	str	r0, [r7, #12]
 801e868:	60b9      	str	r1, [r7, #8]
 801e86a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 801e86c:	68b9      	ldr	r1, [r7, #8]
 801e86e:	68f8      	ldr	r0, [r7, #12]
 801e870:	f7ff ff88 	bl	801e784 <netif_loop_output>
 801e874:	4603      	mov	r3, r0
}
 801e876:	4618      	mov	r0, r3
 801e878:	3710      	adds	r7, #16
 801e87a:	46bd      	mov	sp, r7
 801e87c:	bd80      	pop	{r7, pc}

0801e87e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801e87e:	b480      	push	{r7}
 801e880:	b085      	sub	sp, #20
 801e882:	af00      	add	r7, sp, #0
 801e884:	60f8      	str	r0, [r7, #12]
 801e886:	60b9      	str	r1, [r7, #8]
 801e888:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801e88a:	f06f 030b 	mvn.w	r3, #11
}
 801e88e:	4618      	mov	r0, r3
 801e890:	3714      	adds	r7, #20
 801e892:	46bd      	mov	sp, r7
 801e894:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e898:	4770      	bx	lr
	...

0801e89c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801e89c:	b480      	push	{r7}
 801e89e:	b085      	sub	sp, #20
 801e8a0:	af00      	add	r7, sp, #0
 801e8a2:	4603      	mov	r3, r0
 801e8a4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801e8a6:	79fb      	ldrb	r3, [r7, #7]
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	d013      	beq.n	801e8d4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801e8ac:	4b0d      	ldr	r3, [pc, #52]	; (801e8e4 <netif_get_by_index+0x48>)
 801e8ae:	681b      	ldr	r3, [r3, #0]
 801e8b0:	60fb      	str	r3, [r7, #12]
 801e8b2:	e00c      	b.n	801e8ce <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801e8b4:	68fb      	ldr	r3, [r7, #12]
 801e8b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e8ba:	3301      	adds	r3, #1
 801e8bc:	b2db      	uxtb	r3, r3
 801e8be:	79fa      	ldrb	r2, [r7, #7]
 801e8c0:	429a      	cmp	r2, r3
 801e8c2:	d101      	bne.n	801e8c8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801e8c4:	68fb      	ldr	r3, [r7, #12]
 801e8c6:	e006      	b.n	801e8d6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801e8c8:	68fb      	ldr	r3, [r7, #12]
 801e8ca:	681b      	ldr	r3, [r3, #0]
 801e8cc:	60fb      	str	r3, [r7, #12]
 801e8ce:	68fb      	ldr	r3, [r7, #12]
 801e8d0:	2b00      	cmp	r3, #0
 801e8d2:	d1ef      	bne.n	801e8b4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801e8d4:	2300      	movs	r3, #0
}
 801e8d6:	4618      	mov	r0, r3
 801e8d8:	3714      	adds	r7, #20
 801e8da:	46bd      	mov	sp, r7
 801e8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8e0:	4770      	bx	lr
 801e8e2:	bf00      	nop
 801e8e4:	20013e14 	.word	0x20013e14

0801e8e8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801e8e8:	b480      	push	{r7}
 801e8ea:	b085      	sub	sp, #20
 801e8ec:	af00      	add	r7, sp, #0
 801e8ee:	60f8      	str	r0, [r7, #12]
 801e8f0:	60b9      	str	r1, [r7, #8]
 801e8f2:	4611      	mov	r1, r2
 801e8f4:	461a      	mov	r2, r3
 801e8f6:	460b      	mov	r3, r1
 801e8f8:	80fb      	strh	r3, [r7, #6]
 801e8fa:	4613      	mov	r3, r2
 801e8fc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801e8fe:	68fb      	ldr	r3, [r7, #12]
 801e900:	2200      	movs	r2, #0
 801e902:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801e904:	68fb      	ldr	r3, [r7, #12]
 801e906:	68ba      	ldr	r2, [r7, #8]
 801e908:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801e90a:	68fb      	ldr	r3, [r7, #12]
 801e90c:	88fa      	ldrh	r2, [r7, #6]
 801e90e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801e910:	68fb      	ldr	r3, [r7, #12]
 801e912:	88ba      	ldrh	r2, [r7, #4]
 801e914:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801e916:	8b3b      	ldrh	r3, [r7, #24]
 801e918:	b2da      	uxtb	r2, r3
 801e91a:	68fb      	ldr	r3, [r7, #12]
 801e91c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801e91e:	68fb      	ldr	r3, [r7, #12]
 801e920:	7f3a      	ldrb	r2, [r7, #28]
 801e922:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801e924:	68fb      	ldr	r3, [r7, #12]
 801e926:	2201      	movs	r2, #1
 801e928:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801e92a:	68fb      	ldr	r3, [r7, #12]
 801e92c:	2200      	movs	r2, #0
 801e92e:	73da      	strb	r2, [r3, #15]
}
 801e930:	bf00      	nop
 801e932:	3714      	adds	r7, #20
 801e934:	46bd      	mov	sp, r7
 801e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e93a:	4770      	bx	lr

0801e93c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801e93c:	b580      	push	{r7, lr}
 801e93e:	b08c      	sub	sp, #48	; 0x30
 801e940:	af02      	add	r7, sp, #8
 801e942:	4603      	mov	r3, r0
 801e944:	71fb      	strb	r3, [r7, #7]
 801e946:	460b      	mov	r3, r1
 801e948:	80bb      	strh	r3, [r7, #4]
 801e94a:	4613      	mov	r3, r2
 801e94c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801e94e:	79fb      	ldrb	r3, [r7, #7]
 801e950:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801e952:	887b      	ldrh	r3, [r7, #2]
 801e954:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801e958:	d07d      	beq.n	801ea56 <pbuf_alloc+0x11a>
 801e95a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801e95e:	f300 80c6 	bgt.w	801eaee <pbuf_alloc+0x1b2>
 801e962:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801e966:	d010      	beq.n	801e98a <pbuf_alloc+0x4e>
 801e968:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801e96c:	f300 80bf 	bgt.w	801eaee <pbuf_alloc+0x1b2>
 801e970:	2b01      	cmp	r3, #1
 801e972:	d002      	beq.n	801e97a <pbuf_alloc+0x3e>
 801e974:	2b41      	cmp	r3, #65	; 0x41
 801e976:	f040 80ba 	bne.w	801eaee <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801e97a:	887a      	ldrh	r2, [r7, #2]
 801e97c:	88bb      	ldrh	r3, [r7, #4]
 801e97e:	4619      	mov	r1, r3
 801e980:	2000      	movs	r0, #0
 801e982:	f000 f8cf 	bl	801eb24 <pbuf_alloc_reference>
 801e986:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801e988:	e0bb      	b.n	801eb02 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801e98a:	2300      	movs	r3, #0
 801e98c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801e98e:	2300      	movs	r3, #0
 801e990:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801e992:	88bb      	ldrh	r3, [r7, #4]
 801e994:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801e996:	2005      	movs	r0, #5
 801e998:	f7ff fb32 	bl	801e000 <memp_malloc>
 801e99c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801e99e:	693b      	ldr	r3, [r7, #16]
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	d107      	bne.n	801e9b4 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 801e9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d002      	beq.n	801e9b0 <pbuf_alloc+0x74>
            pbuf_free(p);
 801e9aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e9ac:	f000 faa8 	bl	801ef00 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801e9b0:	2300      	movs	r3, #0
 801e9b2:	e0a7      	b.n	801eb04 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801e9b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e9b6:	3303      	adds	r3, #3
 801e9b8:	b29b      	uxth	r3, r3
 801e9ba:	f023 0303 	bic.w	r3, r3, #3
 801e9be:	b29b      	uxth	r3, r3
 801e9c0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801e9c4:	b29b      	uxth	r3, r3
 801e9c6:	8b7a      	ldrh	r2, [r7, #26]
 801e9c8:	4293      	cmp	r3, r2
 801e9ca:	bf28      	it	cs
 801e9cc:	4613      	movcs	r3, r2
 801e9ce:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801e9d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e9d2:	3310      	adds	r3, #16
 801e9d4:	693a      	ldr	r2, [r7, #16]
 801e9d6:	4413      	add	r3, r2
 801e9d8:	3303      	adds	r3, #3
 801e9da:	f023 0303 	bic.w	r3, r3, #3
 801e9de:	4618      	mov	r0, r3
 801e9e0:	89f9      	ldrh	r1, [r7, #14]
 801e9e2:	8b7a      	ldrh	r2, [r7, #26]
 801e9e4:	2300      	movs	r3, #0
 801e9e6:	9301      	str	r3, [sp, #4]
 801e9e8:	887b      	ldrh	r3, [r7, #2]
 801e9ea:	9300      	str	r3, [sp, #0]
 801e9ec:	460b      	mov	r3, r1
 801e9ee:	4601      	mov	r1, r0
 801e9f0:	6938      	ldr	r0, [r7, #16]
 801e9f2:	f7ff ff79 	bl	801e8e8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801e9f6:	693b      	ldr	r3, [r7, #16]
 801e9f8:	685b      	ldr	r3, [r3, #4]
 801e9fa:	f003 0303 	and.w	r3, r3, #3
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d006      	beq.n	801ea10 <pbuf_alloc+0xd4>
 801ea02:	4b42      	ldr	r3, [pc, #264]	; (801eb0c <pbuf_alloc+0x1d0>)
 801ea04:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ea08:	4941      	ldr	r1, [pc, #260]	; (801eb10 <pbuf_alloc+0x1d4>)
 801ea0a:	4842      	ldr	r0, [pc, #264]	; (801eb14 <pbuf_alloc+0x1d8>)
 801ea0c:	f003 ffb0 	bl	8022970 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801ea10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ea12:	3303      	adds	r3, #3
 801ea14:	f023 0303 	bic.w	r3, r3, #3
 801ea18:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801ea1c:	d106      	bne.n	801ea2c <pbuf_alloc+0xf0>
 801ea1e:	4b3b      	ldr	r3, [pc, #236]	; (801eb0c <pbuf_alloc+0x1d0>)
 801ea20:	f44f 7281 	mov.w	r2, #258	; 0x102
 801ea24:	493c      	ldr	r1, [pc, #240]	; (801eb18 <pbuf_alloc+0x1dc>)
 801ea26:	483b      	ldr	r0, [pc, #236]	; (801eb14 <pbuf_alloc+0x1d8>)
 801ea28:	f003 ffa2 	bl	8022970 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801ea2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea2e:	2b00      	cmp	r3, #0
 801ea30:	d102      	bne.n	801ea38 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801ea32:	693b      	ldr	r3, [r7, #16]
 801ea34:	627b      	str	r3, [r7, #36]	; 0x24
 801ea36:	e002      	b.n	801ea3e <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801ea38:	69fb      	ldr	r3, [r7, #28]
 801ea3a:	693a      	ldr	r2, [r7, #16]
 801ea3c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801ea3e:	693b      	ldr	r3, [r7, #16]
 801ea40:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801ea42:	8b7a      	ldrh	r2, [r7, #26]
 801ea44:	89fb      	ldrh	r3, [r7, #14]
 801ea46:	1ad3      	subs	r3, r2, r3
 801ea48:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801ea4a:	2300      	movs	r3, #0
 801ea4c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801ea4e:	8b7b      	ldrh	r3, [r7, #26]
 801ea50:	2b00      	cmp	r3, #0
 801ea52:	d1a0      	bne.n	801e996 <pbuf_alloc+0x5a>
      break;
 801ea54:	e055      	b.n	801eb02 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801ea56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ea58:	3303      	adds	r3, #3
 801ea5a:	b29b      	uxth	r3, r3
 801ea5c:	f023 0303 	bic.w	r3, r3, #3
 801ea60:	b29a      	uxth	r2, r3
 801ea62:	88bb      	ldrh	r3, [r7, #4]
 801ea64:	3303      	adds	r3, #3
 801ea66:	b29b      	uxth	r3, r3
 801ea68:	f023 0303 	bic.w	r3, r3, #3
 801ea6c:	b29b      	uxth	r3, r3
 801ea6e:	4413      	add	r3, r2
 801ea70:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801ea72:	8b3b      	ldrh	r3, [r7, #24]
 801ea74:	3310      	adds	r3, #16
 801ea76:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801ea78:	8b3a      	ldrh	r2, [r7, #24]
 801ea7a:	88bb      	ldrh	r3, [r7, #4]
 801ea7c:	3303      	adds	r3, #3
 801ea7e:	f023 0303 	bic.w	r3, r3, #3
 801ea82:	429a      	cmp	r2, r3
 801ea84:	d306      	bcc.n	801ea94 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801ea86:	8afa      	ldrh	r2, [r7, #22]
 801ea88:	88bb      	ldrh	r3, [r7, #4]
 801ea8a:	3303      	adds	r3, #3
 801ea8c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801ea90:	429a      	cmp	r2, r3
 801ea92:	d201      	bcs.n	801ea98 <pbuf_alloc+0x15c>
        return NULL;
 801ea94:	2300      	movs	r3, #0
 801ea96:	e035      	b.n	801eb04 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801ea98:	8afb      	ldrh	r3, [r7, #22]
 801ea9a:	4618      	mov	r0, r3
 801ea9c:	f7ff f920 	bl	801dce0 <mem_malloc>
 801eaa0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801eaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	d101      	bne.n	801eaac <pbuf_alloc+0x170>
        return NULL;
 801eaa8:	2300      	movs	r3, #0
 801eaaa:	e02b      	b.n	801eb04 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801eaac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801eaae:	3310      	adds	r3, #16
 801eab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eab2:	4413      	add	r3, r2
 801eab4:	3303      	adds	r3, #3
 801eab6:	f023 0303 	bic.w	r3, r3, #3
 801eaba:	4618      	mov	r0, r3
 801eabc:	88b9      	ldrh	r1, [r7, #4]
 801eabe:	88ba      	ldrh	r2, [r7, #4]
 801eac0:	2300      	movs	r3, #0
 801eac2:	9301      	str	r3, [sp, #4]
 801eac4:	887b      	ldrh	r3, [r7, #2]
 801eac6:	9300      	str	r3, [sp, #0]
 801eac8:	460b      	mov	r3, r1
 801eaca:	4601      	mov	r1, r0
 801eacc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eace:	f7ff ff0b 	bl	801e8e8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801ead2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ead4:	685b      	ldr	r3, [r3, #4]
 801ead6:	f003 0303 	and.w	r3, r3, #3
 801eada:	2b00      	cmp	r3, #0
 801eadc:	d010      	beq.n	801eb00 <pbuf_alloc+0x1c4>
 801eade:	4b0b      	ldr	r3, [pc, #44]	; (801eb0c <pbuf_alloc+0x1d0>)
 801eae0:	f44f 7291 	mov.w	r2, #290	; 0x122
 801eae4:	490d      	ldr	r1, [pc, #52]	; (801eb1c <pbuf_alloc+0x1e0>)
 801eae6:	480b      	ldr	r0, [pc, #44]	; (801eb14 <pbuf_alloc+0x1d8>)
 801eae8:	f003 ff42 	bl	8022970 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801eaec:	e008      	b.n	801eb00 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801eaee:	4b07      	ldr	r3, [pc, #28]	; (801eb0c <pbuf_alloc+0x1d0>)
 801eaf0:	f240 1227 	movw	r2, #295	; 0x127
 801eaf4:	490a      	ldr	r1, [pc, #40]	; (801eb20 <pbuf_alloc+0x1e4>)
 801eaf6:	4807      	ldr	r0, [pc, #28]	; (801eb14 <pbuf_alloc+0x1d8>)
 801eaf8:	f003 ff3a 	bl	8022970 <iprintf>
      return NULL;
 801eafc:	2300      	movs	r3, #0
 801eafe:	e001      	b.n	801eb04 <pbuf_alloc+0x1c8>
      break;
 801eb00:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801eb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801eb04:	4618      	mov	r0, r3
 801eb06:	3728      	adds	r7, #40	; 0x28
 801eb08:	46bd      	mov	sp, r7
 801eb0a:	bd80      	pop	{r7, pc}
 801eb0c:	08027eb4 	.word	0x08027eb4
 801eb10:	08027ee4 	.word	0x08027ee4
 801eb14:	08027f14 	.word	0x08027f14
 801eb18:	08027f3c 	.word	0x08027f3c
 801eb1c:	08027f70 	.word	0x08027f70
 801eb20:	08027f9c 	.word	0x08027f9c

0801eb24 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801eb24:	b580      	push	{r7, lr}
 801eb26:	b086      	sub	sp, #24
 801eb28:	af02      	add	r7, sp, #8
 801eb2a:	6078      	str	r0, [r7, #4]
 801eb2c:	460b      	mov	r3, r1
 801eb2e:	807b      	strh	r3, [r7, #2]
 801eb30:	4613      	mov	r3, r2
 801eb32:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801eb34:	883b      	ldrh	r3, [r7, #0]
 801eb36:	2b41      	cmp	r3, #65	; 0x41
 801eb38:	d009      	beq.n	801eb4e <pbuf_alloc_reference+0x2a>
 801eb3a:	883b      	ldrh	r3, [r7, #0]
 801eb3c:	2b01      	cmp	r3, #1
 801eb3e:	d006      	beq.n	801eb4e <pbuf_alloc_reference+0x2a>
 801eb40:	4b0f      	ldr	r3, [pc, #60]	; (801eb80 <pbuf_alloc_reference+0x5c>)
 801eb42:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801eb46:	490f      	ldr	r1, [pc, #60]	; (801eb84 <pbuf_alloc_reference+0x60>)
 801eb48:	480f      	ldr	r0, [pc, #60]	; (801eb88 <pbuf_alloc_reference+0x64>)
 801eb4a:	f003 ff11 	bl	8022970 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801eb4e:	2004      	movs	r0, #4
 801eb50:	f7ff fa56 	bl	801e000 <memp_malloc>
 801eb54:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801eb56:	68fb      	ldr	r3, [r7, #12]
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	d101      	bne.n	801eb60 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801eb5c:	2300      	movs	r3, #0
 801eb5e:	e00b      	b.n	801eb78 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801eb60:	8879      	ldrh	r1, [r7, #2]
 801eb62:	887a      	ldrh	r2, [r7, #2]
 801eb64:	2300      	movs	r3, #0
 801eb66:	9301      	str	r3, [sp, #4]
 801eb68:	883b      	ldrh	r3, [r7, #0]
 801eb6a:	9300      	str	r3, [sp, #0]
 801eb6c:	460b      	mov	r3, r1
 801eb6e:	6879      	ldr	r1, [r7, #4]
 801eb70:	68f8      	ldr	r0, [r7, #12]
 801eb72:	f7ff feb9 	bl	801e8e8 <pbuf_init_alloced_pbuf>
  return p;
 801eb76:	68fb      	ldr	r3, [r7, #12]
}
 801eb78:	4618      	mov	r0, r3
 801eb7a:	3710      	adds	r7, #16
 801eb7c:	46bd      	mov	sp, r7
 801eb7e:	bd80      	pop	{r7, pc}
 801eb80:	08027eb4 	.word	0x08027eb4
 801eb84:	08027fb8 	.word	0x08027fb8
 801eb88:	08027f14 	.word	0x08027f14

0801eb8c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801eb8c:	b580      	push	{r7, lr}
 801eb8e:	b088      	sub	sp, #32
 801eb90:	af02      	add	r7, sp, #8
 801eb92:	607b      	str	r3, [r7, #4]
 801eb94:	4603      	mov	r3, r0
 801eb96:	73fb      	strb	r3, [r7, #15]
 801eb98:	460b      	mov	r3, r1
 801eb9a:	81bb      	strh	r3, [r7, #12]
 801eb9c:	4613      	mov	r3, r2
 801eb9e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801eba0:	7bfb      	ldrb	r3, [r7, #15]
 801eba2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801eba4:	8a7b      	ldrh	r3, [r7, #18]
 801eba6:	3303      	adds	r3, #3
 801eba8:	f023 0203 	bic.w	r2, r3, #3
 801ebac:	89bb      	ldrh	r3, [r7, #12]
 801ebae:	441a      	add	r2, r3
 801ebb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ebb2:	429a      	cmp	r2, r3
 801ebb4:	d901      	bls.n	801ebba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801ebb6:	2300      	movs	r3, #0
 801ebb8:	e018      	b.n	801ebec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801ebba:	6a3b      	ldr	r3, [r7, #32]
 801ebbc:	2b00      	cmp	r3, #0
 801ebbe:	d007      	beq.n	801ebd0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801ebc0:	8a7b      	ldrh	r3, [r7, #18]
 801ebc2:	3303      	adds	r3, #3
 801ebc4:	f023 0303 	bic.w	r3, r3, #3
 801ebc8:	6a3a      	ldr	r2, [r7, #32]
 801ebca:	4413      	add	r3, r2
 801ebcc:	617b      	str	r3, [r7, #20]
 801ebce:	e001      	b.n	801ebd4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801ebd0:	2300      	movs	r3, #0
 801ebd2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801ebd4:	6878      	ldr	r0, [r7, #4]
 801ebd6:	89b9      	ldrh	r1, [r7, #12]
 801ebd8:	89ba      	ldrh	r2, [r7, #12]
 801ebda:	2302      	movs	r3, #2
 801ebdc:	9301      	str	r3, [sp, #4]
 801ebde:	897b      	ldrh	r3, [r7, #10]
 801ebe0:	9300      	str	r3, [sp, #0]
 801ebe2:	460b      	mov	r3, r1
 801ebe4:	6979      	ldr	r1, [r7, #20]
 801ebe6:	f7ff fe7f 	bl	801e8e8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801ebea:	687b      	ldr	r3, [r7, #4]
}
 801ebec:	4618      	mov	r0, r3
 801ebee:	3718      	adds	r7, #24
 801ebf0:	46bd      	mov	sp, r7
 801ebf2:	bd80      	pop	{r7, pc}

0801ebf4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801ebf4:	b580      	push	{r7, lr}
 801ebf6:	b084      	sub	sp, #16
 801ebf8:	af00      	add	r7, sp, #0
 801ebfa:	6078      	str	r0, [r7, #4]
 801ebfc:	460b      	mov	r3, r1
 801ebfe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801ec00:	687b      	ldr	r3, [r7, #4]
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	d106      	bne.n	801ec14 <pbuf_realloc+0x20>
 801ec06:	4b3a      	ldr	r3, [pc, #232]	; (801ecf0 <pbuf_realloc+0xfc>)
 801ec08:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801ec0c:	4939      	ldr	r1, [pc, #228]	; (801ecf4 <pbuf_realloc+0x100>)
 801ec0e:	483a      	ldr	r0, [pc, #232]	; (801ecf8 <pbuf_realloc+0x104>)
 801ec10:	f003 feae 	bl	8022970 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	891b      	ldrh	r3, [r3, #8]
 801ec18:	887a      	ldrh	r2, [r7, #2]
 801ec1a:	429a      	cmp	r2, r3
 801ec1c:	d263      	bcs.n	801ece6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801ec1e:	687b      	ldr	r3, [r7, #4]
 801ec20:	891a      	ldrh	r2, [r3, #8]
 801ec22:	887b      	ldrh	r3, [r7, #2]
 801ec24:	1ad3      	subs	r3, r2, r3
 801ec26:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801ec28:	887b      	ldrh	r3, [r7, #2]
 801ec2a:	817b      	strh	r3, [r7, #10]
  q = p;
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801ec30:	e018      	b.n	801ec64 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801ec32:	68fb      	ldr	r3, [r7, #12]
 801ec34:	895b      	ldrh	r3, [r3, #10]
 801ec36:	897a      	ldrh	r2, [r7, #10]
 801ec38:	1ad3      	subs	r3, r2, r3
 801ec3a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801ec3c:	68fb      	ldr	r3, [r7, #12]
 801ec3e:	891a      	ldrh	r2, [r3, #8]
 801ec40:	893b      	ldrh	r3, [r7, #8]
 801ec42:	1ad3      	subs	r3, r2, r3
 801ec44:	b29a      	uxth	r2, r3
 801ec46:	68fb      	ldr	r3, [r7, #12]
 801ec48:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801ec4a:	68fb      	ldr	r3, [r7, #12]
 801ec4c:	681b      	ldr	r3, [r3, #0]
 801ec4e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801ec50:	68fb      	ldr	r3, [r7, #12]
 801ec52:	2b00      	cmp	r3, #0
 801ec54:	d106      	bne.n	801ec64 <pbuf_realloc+0x70>
 801ec56:	4b26      	ldr	r3, [pc, #152]	; (801ecf0 <pbuf_realloc+0xfc>)
 801ec58:	f240 12af 	movw	r2, #431	; 0x1af
 801ec5c:	4927      	ldr	r1, [pc, #156]	; (801ecfc <pbuf_realloc+0x108>)
 801ec5e:	4826      	ldr	r0, [pc, #152]	; (801ecf8 <pbuf_realloc+0x104>)
 801ec60:	f003 fe86 	bl	8022970 <iprintf>
  while (rem_len > q->len) {
 801ec64:	68fb      	ldr	r3, [r7, #12]
 801ec66:	895b      	ldrh	r3, [r3, #10]
 801ec68:	897a      	ldrh	r2, [r7, #10]
 801ec6a:	429a      	cmp	r2, r3
 801ec6c:	d8e1      	bhi.n	801ec32 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801ec6e:	68fb      	ldr	r3, [r7, #12]
 801ec70:	7b1b      	ldrb	r3, [r3, #12]
 801ec72:	f003 030f 	and.w	r3, r3, #15
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	d121      	bne.n	801ecbe <pbuf_realloc+0xca>
 801ec7a:	68fb      	ldr	r3, [r7, #12]
 801ec7c:	895b      	ldrh	r3, [r3, #10]
 801ec7e:	897a      	ldrh	r2, [r7, #10]
 801ec80:	429a      	cmp	r2, r3
 801ec82:	d01c      	beq.n	801ecbe <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801ec84:	68fb      	ldr	r3, [r7, #12]
 801ec86:	7b5b      	ldrb	r3, [r3, #13]
 801ec88:	f003 0302 	and.w	r3, r3, #2
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	d116      	bne.n	801ecbe <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801ec90:	68fb      	ldr	r3, [r7, #12]
 801ec92:	685a      	ldr	r2, [r3, #4]
 801ec94:	68fb      	ldr	r3, [r7, #12]
 801ec96:	1ad3      	subs	r3, r2, r3
 801ec98:	b29a      	uxth	r2, r3
 801ec9a:	897b      	ldrh	r3, [r7, #10]
 801ec9c:	4413      	add	r3, r2
 801ec9e:	b29b      	uxth	r3, r3
 801eca0:	4619      	mov	r1, r3
 801eca2:	68f8      	ldr	r0, [r7, #12]
 801eca4:	f7fe ff20 	bl	801dae8 <mem_trim>
 801eca8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801ecaa:	68fb      	ldr	r3, [r7, #12]
 801ecac:	2b00      	cmp	r3, #0
 801ecae:	d106      	bne.n	801ecbe <pbuf_realloc+0xca>
 801ecb0:	4b0f      	ldr	r3, [pc, #60]	; (801ecf0 <pbuf_realloc+0xfc>)
 801ecb2:	f240 12bd 	movw	r2, #445	; 0x1bd
 801ecb6:	4912      	ldr	r1, [pc, #72]	; (801ed00 <pbuf_realloc+0x10c>)
 801ecb8:	480f      	ldr	r0, [pc, #60]	; (801ecf8 <pbuf_realloc+0x104>)
 801ecba:	f003 fe59 	bl	8022970 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801ecbe:	68fb      	ldr	r3, [r7, #12]
 801ecc0:	897a      	ldrh	r2, [r7, #10]
 801ecc2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801ecc4:	68fb      	ldr	r3, [r7, #12]
 801ecc6:	895a      	ldrh	r2, [r3, #10]
 801ecc8:	68fb      	ldr	r3, [r7, #12]
 801ecca:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801eccc:	68fb      	ldr	r3, [r7, #12]
 801ecce:	681b      	ldr	r3, [r3, #0]
 801ecd0:	2b00      	cmp	r3, #0
 801ecd2:	d004      	beq.n	801ecde <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801ecd4:	68fb      	ldr	r3, [r7, #12]
 801ecd6:	681b      	ldr	r3, [r3, #0]
 801ecd8:	4618      	mov	r0, r3
 801ecda:	f000 f911 	bl	801ef00 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801ecde:	68fb      	ldr	r3, [r7, #12]
 801ece0:	2200      	movs	r2, #0
 801ece2:	601a      	str	r2, [r3, #0]
 801ece4:	e000      	b.n	801ece8 <pbuf_realloc+0xf4>
    return;
 801ece6:	bf00      	nop

}
 801ece8:	3710      	adds	r7, #16
 801ecea:	46bd      	mov	sp, r7
 801ecec:	bd80      	pop	{r7, pc}
 801ecee:	bf00      	nop
 801ecf0:	08027eb4 	.word	0x08027eb4
 801ecf4:	08027fcc 	.word	0x08027fcc
 801ecf8:	08027f14 	.word	0x08027f14
 801ecfc:	08027fe4 	.word	0x08027fe4
 801ed00:	08027ffc 	.word	0x08027ffc

0801ed04 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801ed04:	b580      	push	{r7, lr}
 801ed06:	b086      	sub	sp, #24
 801ed08:	af00      	add	r7, sp, #0
 801ed0a:	60f8      	str	r0, [r7, #12]
 801ed0c:	60b9      	str	r1, [r7, #8]
 801ed0e:	4613      	mov	r3, r2
 801ed10:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801ed12:	68fb      	ldr	r3, [r7, #12]
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	d106      	bne.n	801ed26 <pbuf_add_header_impl+0x22>
 801ed18:	4b2b      	ldr	r3, [pc, #172]	; (801edc8 <pbuf_add_header_impl+0xc4>)
 801ed1a:	f240 12df 	movw	r2, #479	; 0x1df
 801ed1e:	492b      	ldr	r1, [pc, #172]	; (801edcc <pbuf_add_header_impl+0xc8>)
 801ed20:	482b      	ldr	r0, [pc, #172]	; (801edd0 <pbuf_add_header_impl+0xcc>)
 801ed22:	f003 fe25 	bl	8022970 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801ed26:	68fb      	ldr	r3, [r7, #12]
 801ed28:	2b00      	cmp	r3, #0
 801ed2a:	d003      	beq.n	801ed34 <pbuf_add_header_impl+0x30>
 801ed2c:	68bb      	ldr	r3, [r7, #8]
 801ed2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ed32:	d301      	bcc.n	801ed38 <pbuf_add_header_impl+0x34>
    return 1;
 801ed34:	2301      	movs	r3, #1
 801ed36:	e043      	b.n	801edc0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801ed38:	68bb      	ldr	r3, [r7, #8]
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	d101      	bne.n	801ed42 <pbuf_add_header_impl+0x3e>
    return 0;
 801ed3e:	2300      	movs	r3, #0
 801ed40:	e03e      	b.n	801edc0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801ed42:	68bb      	ldr	r3, [r7, #8]
 801ed44:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801ed46:	68fb      	ldr	r3, [r7, #12]
 801ed48:	891a      	ldrh	r2, [r3, #8]
 801ed4a:	8a7b      	ldrh	r3, [r7, #18]
 801ed4c:	4413      	add	r3, r2
 801ed4e:	b29b      	uxth	r3, r3
 801ed50:	8a7a      	ldrh	r2, [r7, #18]
 801ed52:	429a      	cmp	r2, r3
 801ed54:	d901      	bls.n	801ed5a <pbuf_add_header_impl+0x56>
    return 1;
 801ed56:	2301      	movs	r3, #1
 801ed58:	e032      	b.n	801edc0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801ed5a:	68fb      	ldr	r3, [r7, #12]
 801ed5c:	7b1b      	ldrb	r3, [r3, #12]
 801ed5e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801ed60:	8a3b      	ldrh	r3, [r7, #16]
 801ed62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ed66:	2b00      	cmp	r3, #0
 801ed68:	d00c      	beq.n	801ed84 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801ed6a:	68fb      	ldr	r3, [r7, #12]
 801ed6c:	685a      	ldr	r2, [r3, #4]
 801ed6e:	68bb      	ldr	r3, [r7, #8]
 801ed70:	425b      	negs	r3, r3
 801ed72:	4413      	add	r3, r2
 801ed74:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801ed76:	68fb      	ldr	r3, [r7, #12]
 801ed78:	3310      	adds	r3, #16
 801ed7a:	697a      	ldr	r2, [r7, #20]
 801ed7c:	429a      	cmp	r2, r3
 801ed7e:	d20d      	bcs.n	801ed9c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801ed80:	2301      	movs	r3, #1
 801ed82:	e01d      	b.n	801edc0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801ed84:	79fb      	ldrb	r3, [r7, #7]
 801ed86:	2b00      	cmp	r3, #0
 801ed88:	d006      	beq.n	801ed98 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801ed8a:	68fb      	ldr	r3, [r7, #12]
 801ed8c:	685a      	ldr	r2, [r3, #4]
 801ed8e:	68bb      	ldr	r3, [r7, #8]
 801ed90:	425b      	negs	r3, r3
 801ed92:	4413      	add	r3, r2
 801ed94:	617b      	str	r3, [r7, #20]
 801ed96:	e001      	b.n	801ed9c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801ed98:	2301      	movs	r3, #1
 801ed9a:	e011      	b.n	801edc0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801ed9c:	68fb      	ldr	r3, [r7, #12]
 801ed9e:	697a      	ldr	r2, [r7, #20]
 801eda0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801eda2:	68fb      	ldr	r3, [r7, #12]
 801eda4:	895a      	ldrh	r2, [r3, #10]
 801eda6:	8a7b      	ldrh	r3, [r7, #18]
 801eda8:	4413      	add	r3, r2
 801edaa:	b29a      	uxth	r2, r3
 801edac:	68fb      	ldr	r3, [r7, #12]
 801edae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801edb0:	68fb      	ldr	r3, [r7, #12]
 801edb2:	891a      	ldrh	r2, [r3, #8]
 801edb4:	8a7b      	ldrh	r3, [r7, #18]
 801edb6:	4413      	add	r3, r2
 801edb8:	b29a      	uxth	r2, r3
 801edba:	68fb      	ldr	r3, [r7, #12]
 801edbc:	811a      	strh	r2, [r3, #8]


  return 0;
 801edbe:	2300      	movs	r3, #0
}
 801edc0:	4618      	mov	r0, r3
 801edc2:	3718      	adds	r7, #24
 801edc4:	46bd      	mov	sp, r7
 801edc6:	bd80      	pop	{r7, pc}
 801edc8:	08027eb4 	.word	0x08027eb4
 801edcc:	08028018 	.word	0x08028018
 801edd0:	08027f14 	.word	0x08027f14

0801edd4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801edd4:	b580      	push	{r7, lr}
 801edd6:	b082      	sub	sp, #8
 801edd8:	af00      	add	r7, sp, #0
 801edda:	6078      	str	r0, [r7, #4]
 801eddc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801edde:	2200      	movs	r2, #0
 801ede0:	6839      	ldr	r1, [r7, #0]
 801ede2:	6878      	ldr	r0, [r7, #4]
 801ede4:	f7ff ff8e 	bl	801ed04 <pbuf_add_header_impl>
 801ede8:	4603      	mov	r3, r0
}
 801edea:	4618      	mov	r0, r3
 801edec:	3708      	adds	r7, #8
 801edee:	46bd      	mov	sp, r7
 801edf0:	bd80      	pop	{r7, pc}
	...

0801edf4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801edf4:	b580      	push	{r7, lr}
 801edf6:	b084      	sub	sp, #16
 801edf8:	af00      	add	r7, sp, #0
 801edfa:	6078      	str	r0, [r7, #4]
 801edfc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	d106      	bne.n	801ee12 <pbuf_remove_header+0x1e>
 801ee04:	4b20      	ldr	r3, [pc, #128]	; (801ee88 <pbuf_remove_header+0x94>)
 801ee06:	f240 224b 	movw	r2, #587	; 0x24b
 801ee0a:	4920      	ldr	r1, [pc, #128]	; (801ee8c <pbuf_remove_header+0x98>)
 801ee0c:	4820      	ldr	r0, [pc, #128]	; (801ee90 <pbuf_remove_header+0x9c>)
 801ee0e:	f003 fdaf 	bl	8022970 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	2b00      	cmp	r3, #0
 801ee16:	d003      	beq.n	801ee20 <pbuf_remove_header+0x2c>
 801ee18:	683b      	ldr	r3, [r7, #0]
 801ee1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ee1e:	d301      	bcc.n	801ee24 <pbuf_remove_header+0x30>
    return 1;
 801ee20:	2301      	movs	r3, #1
 801ee22:	e02c      	b.n	801ee7e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801ee24:	683b      	ldr	r3, [r7, #0]
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	d101      	bne.n	801ee2e <pbuf_remove_header+0x3a>
    return 0;
 801ee2a:	2300      	movs	r3, #0
 801ee2c:	e027      	b.n	801ee7e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801ee2e:	683b      	ldr	r3, [r7, #0]
 801ee30:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801ee32:	687b      	ldr	r3, [r7, #4]
 801ee34:	895b      	ldrh	r3, [r3, #10]
 801ee36:	89fa      	ldrh	r2, [r7, #14]
 801ee38:	429a      	cmp	r2, r3
 801ee3a:	d908      	bls.n	801ee4e <pbuf_remove_header+0x5a>
 801ee3c:	4b12      	ldr	r3, [pc, #72]	; (801ee88 <pbuf_remove_header+0x94>)
 801ee3e:	f240 2255 	movw	r2, #597	; 0x255
 801ee42:	4914      	ldr	r1, [pc, #80]	; (801ee94 <pbuf_remove_header+0xa0>)
 801ee44:	4812      	ldr	r0, [pc, #72]	; (801ee90 <pbuf_remove_header+0x9c>)
 801ee46:	f003 fd93 	bl	8022970 <iprintf>
 801ee4a:	2301      	movs	r3, #1
 801ee4c:	e017      	b.n	801ee7e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	685b      	ldr	r3, [r3, #4]
 801ee52:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	685a      	ldr	r2, [r3, #4]
 801ee58:	683b      	ldr	r3, [r7, #0]
 801ee5a:	441a      	add	r2, r3
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801ee60:	687b      	ldr	r3, [r7, #4]
 801ee62:	895a      	ldrh	r2, [r3, #10]
 801ee64:	89fb      	ldrh	r3, [r7, #14]
 801ee66:	1ad3      	subs	r3, r2, r3
 801ee68:	b29a      	uxth	r2, r3
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801ee6e:	687b      	ldr	r3, [r7, #4]
 801ee70:	891a      	ldrh	r2, [r3, #8]
 801ee72:	89fb      	ldrh	r3, [r7, #14]
 801ee74:	1ad3      	subs	r3, r2, r3
 801ee76:	b29a      	uxth	r2, r3
 801ee78:	687b      	ldr	r3, [r7, #4]
 801ee7a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801ee7c:	2300      	movs	r3, #0
}
 801ee7e:	4618      	mov	r0, r3
 801ee80:	3710      	adds	r7, #16
 801ee82:	46bd      	mov	sp, r7
 801ee84:	bd80      	pop	{r7, pc}
 801ee86:	bf00      	nop
 801ee88:	08027eb4 	.word	0x08027eb4
 801ee8c:	08028018 	.word	0x08028018
 801ee90:	08027f14 	.word	0x08027f14
 801ee94:	08028024 	.word	0x08028024

0801ee98 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801ee98:	b580      	push	{r7, lr}
 801ee9a:	b082      	sub	sp, #8
 801ee9c:	af00      	add	r7, sp, #0
 801ee9e:	6078      	str	r0, [r7, #4]
 801eea0:	460b      	mov	r3, r1
 801eea2:	807b      	strh	r3, [r7, #2]
 801eea4:	4613      	mov	r3, r2
 801eea6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801eea8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	da08      	bge.n	801eec2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801eeb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eeb4:	425b      	negs	r3, r3
 801eeb6:	4619      	mov	r1, r3
 801eeb8:	6878      	ldr	r0, [r7, #4]
 801eeba:	f7ff ff9b 	bl	801edf4 <pbuf_remove_header>
 801eebe:	4603      	mov	r3, r0
 801eec0:	e007      	b.n	801eed2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801eec2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eec6:	787a      	ldrb	r2, [r7, #1]
 801eec8:	4619      	mov	r1, r3
 801eeca:	6878      	ldr	r0, [r7, #4]
 801eecc:	f7ff ff1a 	bl	801ed04 <pbuf_add_header_impl>
 801eed0:	4603      	mov	r3, r0
  }
}
 801eed2:	4618      	mov	r0, r3
 801eed4:	3708      	adds	r7, #8
 801eed6:	46bd      	mov	sp, r7
 801eed8:	bd80      	pop	{r7, pc}

0801eeda <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801eeda:	b580      	push	{r7, lr}
 801eedc:	b082      	sub	sp, #8
 801eede:	af00      	add	r7, sp, #0
 801eee0:	6078      	str	r0, [r7, #4]
 801eee2:	460b      	mov	r3, r1
 801eee4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801eee6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eeea:	2201      	movs	r2, #1
 801eeec:	4619      	mov	r1, r3
 801eeee:	6878      	ldr	r0, [r7, #4]
 801eef0:	f7ff ffd2 	bl	801ee98 <pbuf_header_impl>
 801eef4:	4603      	mov	r3, r0
}
 801eef6:	4618      	mov	r0, r3
 801eef8:	3708      	adds	r7, #8
 801eefa:	46bd      	mov	sp, r7
 801eefc:	bd80      	pop	{r7, pc}
	...

0801ef00 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801ef00:	b580      	push	{r7, lr}
 801ef02:	b086      	sub	sp, #24
 801ef04:	af00      	add	r7, sp, #0
 801ef06:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801ef08:	687b      	ldr	r3, [r7, #4]
 801ef0a:	2b00      	cmp	r3, #0
 801ef0c:	d10b      	bne.n	801ef26 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801ef0e:	687b      	ldr	r3, [r7, #4]
 801ef10:	2b00      	cmp	r3, #0
 801ef12:	d106      	bne.n	801ef22 <pbuf_free+0x22>
 801ef14:	4b38      	ldr	r3, [pc, #224]	; (801eff8 <pbuf_free+0xf8>)
 801ef16:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801ef1a:	4938      	ldr	r1, [pc, #224]	; (801effc <pbuf_free+0xfc>)
 801ef1c:	4838      	ldr	r0, [pc, #224]	; (801f000 <pbuf_free+0x100>)
 801ef1e:	f003 fd27 	bl	8022970 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801ef22:	2300      	movs	r3, #0
 801ef24:	e063      	b.n	801efee <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801ef26:	2300      	movs	r3, #0
 801ef28:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801ef2a:	e05c      	b.n	801efe6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801ef2c:	687b      	ldr	r3, [r7, #4]
 801ef2e:	7b9b      	ldrb	r3, [r3, #14]
 801ef30:	2b00      	cmp	r3, #0
 801ef32:	d106      	bne.n	801ef42 <pbuf_free+0x42>
 801ef34:	4b30      	ldr	r3, [pc, #192]	; (801eff8 <pbuf_free+0xf8>)
 801ef36:	f240 22f1 	movw	r2, #753	; 0x2f1
 801ef3a:	4932      	ldr	r1, [pc, #200]	; (801f004 <pbuf_free+0x104>)
 801ef3c:	4830      	ldr	r0, [pc, #192]	; (801f000 <pbuf_free+0x100>)
 801ef3e:	f003 fd17 	bl	8022970 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801ef42:	687b      	ldr	r3, [r7, #4]
 801ef44:	7b9b      	ldrb	r3, [r3, #14]
 801ef46:	3b01      	subs	r3, #1
 801ef48:	b2da      	uxtb	r2, r3
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	739a      	strb	r2, [r3, #14]
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	7b9b      	ldrb	r3, [r3, #14]
 801ef52:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801ef54:	7dbb      	ldrb	r3, [r7, #22]
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	d143      	bne.n	801efe2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	681b      	ldr	r3, [r3, #0]
 801ef5e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	7b1b      	ldrb	r3, [r3, #12]
 801ef64:	f003 030f 	and.w	r3, r3, #15
 801ef68:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	7b5b      	ldrb	r3, [r3, #13]
 801ef6e:	f003 0302 	and.w	r3, r3, #2
 801ef72:	2b00      	cmp	r3, #0
 801ef74:	d011      	beq.n	801ef9a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801ef76:	687b      	ldr	r3, [r7, #4]
 801ef78:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801ef7a:	68bb      	ldr	r3, [r7, #8]
 801ef7c:	691b      	ldr	r3, [r3, #16]
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d106      	bne.n	801ef90 <pbuf_free+0x90>
 801ef82:	4b1d      	ldr	r3, [pc, #116]	; (801eff8 <pbuf_free+0xf8>)
 801ef84:	f240 22ff 	movw	r2, #767	; 0x2ff
 801ef88:	491f      	ldr	r1, [pc, #124]	; (801f008 <pbuf_free+0x108>)
 801ef8a:	481d      	ldr	r0, [pc, #116]	; (801f000 <pbuf_free+0x100>)
 801ef8c:	f003 fcf0 	bl	8022970 <iprintf>
        pc->custom_free_function(p);
 801ef90:	68bb      	ldr	r3, [r7, #8]
 801ef92:	691b      	ldr	r3, [r3, #16]
 801ef94:	6878      	ldr	r0, [r7, #4]
 801ef96:	4798      	blx	r3
 801ef98:	e01d      	b.n	801efd6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801ef9a:	7bfb      	ldrb	r3, [r7, #15]
 801ef9c:	2b02      	cmp	r3, #2
 801ef9e:	d104      	bne.n	801efaa <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 801efa0:	6879      	ldr	r1, [r7, #4]
 801efa2:	2005      	movs	r0, #5
 801efa4:	f7ff f89c 	bl	801e0e0 <memp_free>
 801efa8:	e015      	b.n	801efd6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801efaa:	7bfb      	ldrb	r3, [r7, #15]
 801efac:	2b01      	cmp	r3, #1
 801efae:	d104      	bne.n	801efba <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 801efb0:	6879      	ldr	r1, [r7, #4]
 801efb2:	2004      	movs	r0, #4
 801efb4:	f7ff f894 	bl	801e0e0 <memp_free>
 801efb8:	e00d      	b.n	801efd6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801efba:	7bfb      	ldrb	r3, [r7, #15]
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d103      	bne.n	801efc8 <pbuf_free+0xc8>
          mem_free(p);
 801efc0:	6878      	ldr	r0, [r7, #4]
 801efc2:	f7fe fd27 	bl	801da14 <mem_free>
 801efc6:	e006      	b.n	801efd6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801efc8:	4b0b      	ldr	r3, [pc, #44]	; (801eff8 <pbuf_free+0xf8>)
 801efca:	f240 320f 	movw	r2, #783	; 0x30f
 801efce:	490f      	ldr	r1, [pc, #60]	; (801f00c <pbuf_free+0x10c>)
 801efd0:	480b      	ldr	r0, [pc, #44]	; (801f000 <pbuf_free+0x100>)
 801efd2:	f003 fccd 	bl	8022970 <iprintf>
        }
      }
      count++;
 801efd6:	7dfb      	ldrb	r3, [r7, #23]
 801efd8:	3301      	adds	r3, #1
 801efda:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801efdc:	693b      	ldr	r3, [r7, #16]
 801efde:	607b      	str	r3, [r7, #4]
 801efe0:	e001      	b.n	801efe6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801efe2:	2300      	movs	r3, #0
 801efe4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801efe6:	687b      	ldr	r3, [r7, #4]
 801efe8:	2b00      	cmp	r3, #0
 801efea:	d19f      	bne.n	801ef2c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801efec:	7dfb      	ldrb	r3, [r7, #23]
}
 801efee:	4618      	mov	r0, r3
 801eff0:	3718      	adds	r7, #24
 801eff2:	46bd      	mov	sp, r7
 801eff4:	bd80      	pop	{r7, pc}
 801eff6:	bf00      	nop
 801eff8:	08027eb4 	.word	0x08027eb4
 801effc:	08028018 	.word	0x08028018
 801f000:	08027f14 	.word	0x08027f14
 801f004:	08028044 	.word	0x08028044
 801f008:	0802805c 	.word	0x0802805c
 801f00c:	08028080 	.word	0x08028080

0801f010 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801f010:	b480      	push	{r7}
 801f012:	b085      	sub	sp, #20
 801f014:	af00      	add	r7, sp, #0
 801f016:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801f018:	2300      	movs	r3, #0
 801f01a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801f01c:	e005      	b.n	801f02a <pbuf_clen+0x1a>
    ++len;
 801f01e:	89fb      	ldrh	r3, [r7, #14]
 801f020:	3301      	adds	r3, #1
 801f022:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	681b      	ldr	r3, [r3, #0]
 801f028:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	2b00      	cmp	r3, #0
 801f02e:	d1f6      	bne.n	801f01e <pbuf_clen+0xe>
  }
  return len;
 801f030:	89fb      	ldrh	r3, [r7, #14]
}
 801f032:	4618      	mov	r0, r3
 801f034:	3714      	adds	r7, #20
 801f036:	46bd      	mov	sp, r7
 801f038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f03c:	4770      	bx	lr
	...

0801f040 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801f040:	b580      	push	{r7, lr}
 801f042:	b082      	sub	sp, #8
 801f044:	af00      	add	r7, sp, #0
 801f046:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801f048:	687b      	ldr	r3, [r7, #4]
 801f04a:	2b00      	cmp	r3, #0
 801f04c:	d010      	beq.n	801f070 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	7b9b      	ldrb	r3, [r3, #14]
 801f052:	3301      	adds	r3, #1
 801f054:	b2da      	uxtb	r2, r3
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801f05a:	687b      	ldr	r3, [r7, #4]
 801f05c:	7b9b      	ldrb	r3, [r3, #14]
 801f05e:	2b00      	cmp	r3, #0
 801f060:	d106      	bne.n	801f070 <pbuf_ref+0x30>
 801f062:	4b05      	ldr	r3, [pc, #20]	; (801f078 <pbuf_ref+0x38>)
 801f064:	f240 3242 	movw	r2, #834	; 0x342
 801f068:	4904      	ldr	r1, [pc, #16]	; (801f07c <pbuf_ref+0x3c>)
 801f06a:	4805      	ldr	r0, [pc, #20]	; (801f080 <pbuf_ref+0x40>)
 801f06c:	f003 fc80 	bl	8022970 <iprintf>
  }
}
 801f070:	bf00      	nop
 801f072:	3708      	adds	r7, #8
 801f074:	46bd      	mov	sp, r7
 801f076:	bd80      	pop	{r7, pc}
 801f078:	08027eb4 	.word	0x08027eb4
 801f07c:	08028094 	.word	0x08028094
 801f080:	08027f14 	.word	0x08027f14

0801f084 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801f084:	b580      	push	{r7, lr}
 801f086:	b084      	sub	sp, #16
 801f088:	af00      	add	r7, sp, #0
 801f08a:	6078      	str	r0, [r7, #4]
 801f08c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	2b00      	cmp	r3, #0
 801f092:	d002      	beq.n	801f09a <pbuf_cat+0x16>
 801f094:	683b      	ldr	r3, [r7, #0]
 801f096:	2b00      	cmp	r3, #0
 801f098:	d107      	bne.n	801f0aa <pbuf_cat+0x26>
 801f09a:	4b20      	ldr	r3, [pc, #128]	; (801f11c <pbuf_cat+0x98>)
 801f09c:	f240 3259 	movw	r2, #857	; 0x359
 801f0a0:	491f      	ldr	r1, [pc, #124]	; (801f120 <pbuf_cat+0x9c>)
 801f0a2:	4820      	ldr	r0, [pc, #128]	; (801f124 <pbuf_cat+0xa0>)
 801f0a4:	f003 fc64 	bl	8022970 <iprintf>
 801f0a8:	e034      	b.n	801f114 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801f0aa:	687b      	ldr	r3, [r7, #4]
 801f0ac:	60fb      	str	r3, [r7, #12]
 801f0ae:	e00a      	b.n	801f0c6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801f0b0:	68fb      	ldr	r3, [r7, #12]
 801f0b2:	891a      	ldrh	r2, [r3, #8]
 801f0b4:	683b      	ldr	r3, [r7, #0]
 801f0b6:	891b      	ldrh	r3, [r3, #8]
 801f0b8:	4413      	add	r3, r2
 801f0ba:	b29a      	uxth	r2, r3
 801f0bc:	68fb      	ldr	r3, [r7, #12]
 801f0be:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801f0c0:	68fb      	ldr	r3, [r7, #12]
 801f0c2:	681b      	ldr	r3, [r3, #0]
 801f0c4:	60fb      	str	r3, [r7, #12]
 801f0c6:	68fb      	ldr	r3, [r7, #12]
 801f0c8:	681b      	ldr	r3, [r3, #0]
 801f0ca:	2b00      	cmp	r3, #0
 801f0cc:	d1f0      	bne.n	801f0b0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801f0ce:	68fb      	ldr	r3, [r7, #12]
 801f0d0:	891a      	ldrh	r2, [r3, #8]
 801f0d2:	68fb      	ldr	r3, [r7, #12]
 801f0d4:	895b      	ldrh	r3, [r3, #10]
 801f0d6:	429a      	cmp	r2, r3
 801f0d8:	d006      	beq.n	801f0e8 <pbuf_cat+0x64>
 801f0da:	4b10      	ldr	r3, [pc, #64]	; (801f11c <pbuf_cat+0x98>)
 801f0dc:	f240 3262 	movw	r2, #866	; 0x362
 801f0e0:	4911      	ldr	r1, [pc, #68]	; (801f128 <pbuf_cat+0xa4>)
 801f0e2:	4810      	ldr	r0, [pc, #64]	; (801f124 <pbuf_cat+0xa0>)
 801f0e4:	f003 fc44 	bl	8022970 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801f0e8:	68fb      	ldr	r3, [r7, #12]
 801f0ea:	681b      	ldr	r3, [r3, #0]
 801f0ec:	2b00      	cmp	r3, #0
 801f0ee:	d006      	beq.n	801f0fe <pbuf_cat+0x7a>
 801f0f0:	4b0a      	ldr	r3, [pc, #40]	; (801f11c <pbuf_cat+0x98>)
 801f0f2:	f240 3263 	movw	r2, #867	; 0x363
 801f0f6:	490d      	ldr	r1, [pc, #52]	; (801f12c <pbuf_cat+0xa8>)
 801f0f8:	480a      	ldr	r0, [pc, #40]	; (801f124 <pbuf_cat+0xa0>)
 801f0fa:	f003 fc39 	bl	8022970 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801f0fe:	68fb      	ldr	r3, [r7, #12]
 801f100:	891a      	ldrh	r2, [r3, #8]
 801f102:	683b      	ldr	r3, [r7, #0]
 801f104:	891b      	ldrh	r3, [r3, #8]
 801f106:	4413      	add	r3, r2
 801f108:	b29a      	uxth	r2, r3
 801f10a:	68fb      	ldr	r3, [r7, #12]
 801f10c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801f10e:	68fb      	ldr	r3, [r7, #12]
 801f110:	683a      	ldr	r2, [r7, #0]
 801f112:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801f114:	3710      	adds	r7, #16
 801f116:	46bd      	mov	sp, r7
 801f118:	bd80      	pop	{r7, pc}
 801f11a:	bf00      	nop
 801f11c:	08027eb4 	.word	0x08027eb4
 801f120:	080280a8 	.word	0x080280a8
 801f124:	08027f14 	.word	0x08027f14
 801f128:	080280e0 	.word	0x080280e0
 801f12c:	08028110 	.word	0x08028110

0801f130 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801f130:	b580      	push	{r7, lr}
 801f132:	b082      	sub	sp, #8
 801f134:	af00      	add	r7, sp, #0
 801f136:	6078      	str	r0, [r7, #4]
 801f138:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801f13a:	6839      	ldr	r1, [r7, #0]
 801f13c:	6878      	ldr	r0, [r7, #4]
 801f13e:	f7ff ffa1 	bl	801f084 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801f142:	6838      	ldr	r0, [r7, #0]
 801f144:	f7ff ff7c 	bl	801f040 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801f148:	bf00      	nop
 801f14a:	3708      	adds	r7, #8
 801f14c:	46bd      	mov	sp, r7
 801f14e:	bd80      	pop	{r7, pc}

0801f150 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801f150:	b580      	push	{r7, lr}
 801f152:	b086      	sub	sp, #24
 801f154:	af00      	add	r7, sp, #0
 801f156:	6078      	str	r0, [r7, #4]
 801f158:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801f15a:	2300      	movs	r3, #0
 801f15c:	617b      	str	r3, [r7, #20]
 801f15e:	2300      	movs	r3, #0
 801f160:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801f162:	687b      	ldr	r3, [r7, #4]
 801f164:	2b00      	cmp	r3, #0
 801f166:	d008      	beq.n	801f17a <pbuf_copy+0x2a>
 801f168:	683b      	ldr	r3, [r7, #0]
 801f16a:	2b00      	cmp	r3, #0
 801f16c:	d005      	beq.n	801f17a <pbuf_copy+0x2a>
 801f16e:	687b      	ldr	r3, [r7, #4]
 801f170:	891a      	ldrh	r2, [r3, #8]
 801f172:	683b      	ldr	r3, [r7, #0]
 801f174:	891b      	ldrh	r3, [r3, #8]
 801f176:	429a      	cmp	r2, r3
 801f178:	d209      	bcs.n	801f18e <pbuf_copy+0x3e>
 801f17a:	4b57      	ldr	r3, [pc, #348]	; (801f2d8 <pbuf_copy+0x188>)
 801f17c:	f240 32c9 	movw	r2, #969	; 0x3c9
 801f180:	4956      	ldr	r1, [pc, #344]	; (801f2dc <pbuf_copy+0x18c>)
 801f182:	4857      	ldr	r0, [pc, #348]	; (801f2e0 <pbuf_copy+0x190>)
 801f184:	f003 fbf4 	bl	8022970 <iprintf>
 801f188:	f06f 030f 	mvn.w	r3, #15
 801f18c:	e09f      	b.n	801f2ce <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	895b      	ldrh	r3, [r3, #10]
 801f192:	461a      	mov	r2, r3
 801f194:	697b      	ldr	r3, [r7, #20]
 801f196:	1ad2      	subs	r2, r2, r3
 801f198:	683b      	ldr	r3, [r7, #0]
 801f19a:	895b      	ldrh	r3, [r3, #10]
 801f19c:	4619      	mov	r1, r3
 801f19e:	693b      	ldr	r3, [r7, #16]
 801f1a0:	1acb      	subs	r3, r1, r3
 801f1a2:	429a      	cmp	r2, r3
 801f1a4:	d306      	bcc.n	801f1b4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801f1a6:	683b      	ldr	r3, [r7, #0]
 801f1a8:	895b      	ldrh	r3, [r3, #10]
 801f1aa:	461a      	mov	r2, r3
 801f1ac:	693b      	ldr	r3, [r7, #16]
 801f1ae:	1ad3      	subs	r3, r2, r3
 801f1b0:	60fb      	str	r3, [r7, #12]
 801f1b2:	e005      	b.n	801f1c0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	895b      	ldrh	r3, [r3, #10]
 801f1b8:	461a      	mov	r2, r3
 801f1ba:	697b      	ldr	r3, [r7, #20]
 801f1bc:	1ad3      	subs	r3, r2, r3
 801f1be:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	685a      	ldr	r2, [r3, #4]
 801f1c4:	697b      	ldr	r3, [r7, #20]
 801f1c6:	18d0      	adds	r0, r2, r3
 801f1c8:	683b      	ldr	r3, [r7, #0]
 801f1ca:	685a      	ldr	r2, [r3, #4]
 801f1cc:	693b      	ldr	r3, [r7, #16]
 801f1ce:	4413      	add	r3, r2
 801f1d0:	68fa      	ldr	r2, [r7, #12]
 801f1d2:	4619      	mov	r1, r3
 801f1d4:	f003 fabc 	bl	8022750 <memcpy>
    offset_to += len;
 801f1d8:	697a      	ldr	r2, [r7, #20]
 801f1da:	68fb      	ldr	r3, [r7, #12]
 801f1dc:	4413      	add	r3, r2
 801f1de:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801f1e0:	693a      	ldr	r2, [r7, #16]
 801f1e2:	68fb      	ldr	r3, [r7, #12]
 801f1e4:	4413      	add	r3, r2
 801f1e6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	895b      	ldrh	r3, [r3, #10]
 801f1ec:	461a      	mov	r2, r3
 801f1ee:	697b      	ldr	r3, [r7, #20]
 801f1f0:	4293      	cmp	r3, r2
 801f1f2:	d906      	bls.n	801f202 <pbuf_copy+0xb2>
 801f1f4:	4b38      	ldr	r3, [pc, #224]	; (801f2d8 <pbuf_copy+0x188>)
 801f1f6:	f240 32d9 	movw	r2, #985	; 0x3d9
 801f1fa:	493a      	ldr	r1, [pc, #232]	; (801f2e4 <pbuf_copy+0x194>)
 801f1fc:	4838      	ldr	r0, [pc, #224]	; (801f2e0 <pbuf_copy+0x190>)
 801f1fe:	f003 fbb7 	bl	8022970 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801f202:	683b      	ldr	r3, [r7, #0]
 801f204:	895b      	ldrh	r3, [r3, #10]
 801f206:	461a      	mov	r2, r3
 801f208:	693b      	ldr	r3, [r7, #16]
 801f20a:	4293      	cmp	r3, r2
 801f20c:	d906      	bls.n	801f21c <pbuf_copy+0xcc>
 801f20e:	4b32      	ldr	r3, [pc, #200]	; (801f2d8 <pbuf_copy+0x188>)
 801f210:	f240 32da 	movw	r2, #986	; 0x3da
 801f214:	4934      	ldr	r1, [pc, #208]	; (801f2e8 <pbuf_copy+0x198>)
 801f216:	4832      	ldr	r0, [pc, #200]	; (801f2e0 <pbuf_copy+0x190>)
 801f218:	f003 fbaa 	bl	8022970 <iprintf>
    if (offset_from >= p_from->len) {
 801f21c:	683b      	ldr	r3, [r7, #0]
 801f21e:	895b      	ldrh	r3, [r3, #10]
 801f220:	461a      	mov	r2, r3
 801f222:	693b      	ldr	r3, [r7, #16]
 801f224:	4293      	cmp	r3, r2
 801f226:	d304      	bcc.n	801f232 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801f228:	2300      	movs	r3, #0
 801f22a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801f22c:	683b      	ldr	r3, [r7, #0]
 801f22e:	681b      	ldr	r3, [r3, #0]
 801f230:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801f232:	687b      	ldr	r3, [r7, #4]
 801f234:	895b      	ldrh	r3, [r3, #10]
 801f236:	461a      	mov	r2, r3
 801f238:	697b      	ldr	r3, [r7, #20]
 801f23a:	4293      	cmp	r3, r2
 801f23c:	d114      	bne.n	801f268 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801f23e:	2300      	movs	r3, #0
 801f240:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	681b      	ldr	r3, [r3, #0]
 801f246:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	2b00      	cmp	r3, #0
 801f24c:	d10c      	bne.n	801f268 <pbuf_copy+0x118>
 801f24e:	683b      	ldr	r3, [r7, #0]
 801f250:	2b00      	cmp	r3, #0
 801f252:	d009      	beq.n	801f268 <pbuf_copy+0x118>
 801f254:	4b20      	ldr	r3, [pc, #128]	; (801f2d8 <pbuf_copy+0x188>)
 801f256:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801f25a:	4924      	ldr	r1, [pc, #144]	; (801f2ec <pbuf_copy+0x19c>)
 801f25c:	4820      	ldr	r0, [pc, #128]	; (801f2e0 <pbuf_copy+0x190>)
 801f25e:	f003 fb87 	bl	8022970 <iprintf>
 801f262:	f06f 030f 	mvn.w	r3, #15
 801f266:	e032      	b.n	801f2ce <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801f268:	683b      	ldr	r3, [r7, #0]
 801f26a:	2b00      	cmp	r3, #0
 801f26c:	d013      	beq.n	801f296 <pbuf_copy+0x146>
 801f26e:	683b      	ldr	r3, [r7, #0]
 801f270:	895a      	ldrh	r2, [r3, #10]
 801f272:	683b      	ldr	r3, [r7, #0]
 801f274:	891b      	ldrh	r3, [r3, #8]
 801f276:	429a      	cmp	r2, r3
 801f278:	d10d      	bne.n	801f296 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801f27a:	683b      	ldr	r3, [r7, #0]
 801f27c:	681b      	ldr	r3, [r3, #0]
 801f27e:	2b00      	cmp	r3, #0
 801f280:	d009      	beq.n	801f296 <pbuf_copy+0x146>
 801f282:	4b15      	ldr	r3, [pc, #84]	; (801f2d8 <pbuf_copy+0x188>)
 801f284:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801f288:	4919      	ldr	r1, [pc, #100]	; (801f2f0 <pbuf_copy+0x1a0>)
 801f28a:	4815      	ldr	r0, [pc, #84]	; (801f2e0 <pbuf_copy+0x190>)
 801f28c:	f003 fb70 	bl	8022970 <iprintf>
 801f290:	f06f 0305 	mvn.w	r3, #5
 801f294:	e01b      	b.n	801f2ce <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801f296:	687b      	ldr	r3, [r7, #4]
 801f298:	2b00      	cmp	r3, #0
 801f29a:	d013      	beq.n	801f2c4 <pbuf_copy+0x174>
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	895a      	ldrh	r2, [r3, #10]
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	891b      	ldrh	r3, [r3, #8]
 801f2a4:	429a      	cmp	r2, r3
 801f2a6:	d10d      	bne.n	801f2c4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801f2a8:	687b      	ldr	r3, [r7, #4]
 801f2aa:	681b      	ldr	r3, [r3, #0]
 801f2ac:	2b00      	cmp	r3, #0
 801f2ae:	d009      	beq.n	801f2c4 <pbuf_copy+0x174>
 801f2b0:	4b09      	ldr	r3, [pc, #36]	; (801f2d8 <pbuf_copy+0x188>)
 801f2b2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801f2b6:	490e      	ldr	r1, [pc, #56]	; (801f2f0 <pbuf_copy+0x1a0>)
 801f2b8:	4809      	ldr	r0, [pc, #36]	; (801f2e0 <pbuf_copy+0x190>)
 801f2ba:	f003 fb59 	bl	8022970 <iprintf>
 801f2be:	f06f 0305 	mvn.w	r3, #5
 801f2c2:	e004      	b.n	801f2ce <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801f2c4:	683b      	ldr	r3, [r7, #0]
 801f2c6:	2b00      	cmp	r3, #0
 801f2c8:	f47f af61 	bne.w	801f18e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801f2cc:	2300      	movs	r3, #0
}
 801f2ce:	4618      	mov	r0, r3
 801f2d0:	3718      	adds	r7, #24
 801f2d2:	46bd      	mov	sp, r7
 801f2d4:	bd80      	pop	{r7, pc}
 801f2d6:	bf00      	nop
 801f2d8:	08027eb4 	.word	0x08027eb4
 801f2dc:	0802815c 	.word	0x0802815c
 801f2e0:	08027f14 	.word	0x08027f14
 801f2e4:	0802818c 	.word	0x0802818c
 801f2e8:	080281a4 	.word	0x080281a4
 801f2ec:	080281c0 	.word	0x080281c0
 801f2f0:	080281d0 	.word	0x080281d0

0801f2f4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801f2f4:	b580      	push	{r7, lr}
 801f2f6:	b088      	sub	sp, #32
 801f2f8:	af00      	add	r7, sp, #0
 801f2fa:	60f8      	str	r0, [r7, #12]
 801f2fc:	60b9      	str	r1, [r7, #8]
 801f2fe:	4613      	mov	r3, r2
 801f300:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801f302:	88fb      	ldrh	r3, [r7, #6]
 801f304:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801f306:	2300      	movs	r3, #0
 801f308:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801f30a:	68fb      	ldr	r3, [r7, #12]
 801f30c:	2b00      	cmp	r3, #0
 801f30e:	d109      	bne.n	801f324 <pbuf_take+0x30>
 801f310:	4b3a      	ldr	r3, [pc, #232]	; (801f3fc <pbuf_take+0x108>)
 801f312:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801f316:	493a      	ldr	r1, [pc, #232]	; (801f400 <pbuf_take+0x10c>)
 801f318:	483a      	ldr	r0, [pc, #232]	; (801f404 <pbuf_take+0x110>)
 801f31a:	f003 fb29 	bl	8022970 <iprintf>
 801f31e:	f06f 030f 	mvn.w	r3, #15
 801f322:	e067      	b.n	801f3f4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801f324:	68bb      	ldr	r3, [r7, #8]
 801f326:	2b00      	cmp	r3, #0
 801f328:	d109      	bne.n	801f33e <pbuf_take+0x4a>
 801f32a:	4b34      	ldr	r3, [pc, #208]	; (801f3fc <pbuf_take+0x108>)
 801f32c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801f330:	4935      	ldr	r1, [pc, #212]	; (801f408 <pbuf_take+0x114>)
 801f332:	4834      	ldr	r0, [pc, #208]	; (801f404 <pbuf_take+0x110>)
 801f334:	f003 fb1c 	bl	8022970 <iprintf>
 801f338:	f06f 030f 	mvn.w	r3, #15
 801f33c:	e05a      	b.n	801f3f4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801f33e:	68fb      	ldr	r3, [r7, #12]
 801f340:	891b      	ldrh	r3, [r3, #8]
 801f342:	88fa      	ldrh	r2, [r7, #6]
 801f344:	429a      	cmp	r2, r3
 801f346:	d909      	bls.n	801f35c <pbuf_take+0x68>
 801f348:	4b2c      	ldr	r3, [pc, #176]	; (801f3fc <pbuf_take+0x108>)
 801f34a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801f34e:	492f      	ldr	r1, [pc, #188]	; (801f40c <pbuf_take+0x118>)
 801f350:	482c      	ldr	r0, [pc, #176]	; (801f404 <pbuf_take+0x110>)
 801f352:	f003 fb0d 	bl	8022970 <iprintf>
 801f356:	f04f 33ff 	mov.w	r3, #4294967295
 801f35a:	e04b      	b.n	801f3f4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801f35c:	68fb      	ldr	r3, [r7, #12]
 801f35e:	2b00      	cmp	r3, #0
 801f360:	d007      	beq.n	801f372 <pbuf_take+0x7e>
 801f362:	68bb      	ldr	r3, [r7, #8]
 801f364:	2b00      	cmp	r3, #0
 801f366:	d004      	beq.n	801f372 <pbuf_take+0x7e>
 801f368:	68fb      	ldr	r3, [r7, #12]
 801f36a:	891b      	ldrh	r3, [r3, #8]
 801f36c:	88fa      	ldrh	r2, [r7, #6]
 801f36e:	429a      	cmp	r2, r3
 801f370:	d902      	bls.n	801f378 <pbuf_take+0x84>
    return ERR_ARG;
 801f372:	f06f 030f 	mvn.w	r3, #15
 801f376:	e03d      	b.n	801f3f4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801f378:	68fb      	ldr	r3, [r7, #12]
 801f37a:	61fb      	str	r3, [r7, #28]
 801f37c:	e028      	b.n	801f3d0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801f37e:	69fb      	ldr	r3, [r7, #28]
 801f380:	2b00      	cmp	r3, #0
 801f382:	d106      	bne.n	801f392 <pbuf_take+0x9e>
 801f384:	4b1d      	ldr	r3, [pc, #116]	; (801f3fc <pbuf_take+0x108>)
 801f386:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801f38a:	4921      	ldr	r1, [pc, #132]	; (801f410 <pbuf_take+0x11c>)
 801f38c:	481d      	ldr	r0, [pc, #116]	; (801f404 <pbuf_take+0x110>)
 801f38e:	f003 faef 	bl	8022970 <iprintf>
    buf_copy_len = total_copy_len;
 801f392:	697b      	ldr	r3, [r7, #20]
 801f394:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801f396:	69fb      	ldr	r3, [r7, #28]
 801f398:	895b      	ldrh	r3, [r3, #10]
 801f39a:	461a      	mov	r2, r3
 801f39c:	69bb      	ldr	r3, [r7, #24]
 801f39e:	4293      	cmp	r3, r2
 801f3a0:	d902      	bls.n	801f3a8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801f3a2:	69fb      	ldr	r3, [r7, #28]
 801f3a4:	895b      	ldrh	r3, [r3, #10]
 801f3a6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801f3a8:	69fb      	ldr	r3, [r7, #28]
 801f3aa:	6858      	ldr	r0, [r3, #4]
 801f3ac:	68ba      	ldr	r2, [r7, #8]
 801f3ae:	693b      	ldr	r3, [r7, #16]
 801f3b0:	4413      	add	r3, r2
 801f3b2:	69ba      	ldr	r2, [r7, #24]
 801f3b4:	4619      	mov	r1, r3
 801f3b6:	f003 f9cb 	bl	8022750 <memcpy>
    total_copy_len -= buf_copy_len;
 801f3ba:	697a      	ldr	r2, [r7, #20]
 801f3bc:	69bb      	ldr	r3, [r7, #24]
 801f3be:	1ad3      	subs	r3, r2, r3
 801f3c0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801f3c2:	693a      	ldr	r2, [r7, #16]
 801f3c4:	69bb      	ldr	r3, [r7, #24]
 801f3c6:	4413      	add	r3, r2
 801f3c8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801f3ca:	69fb      	ldr	r3, [r7, #28]
 801f3cc:	681b      	ldr	r3, [r3, #0]
 801f3ce:	61fb      	str	r3, [r7, #28]
 801f3d0:	697b      	ldr	r3, [r7, #20]
 801f3d2:	2b00      	cmp	r3, #0
 801f3d4:	d1d3      	bne.n	801f37e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801f3d6:	697b      	ldr	r3, [r7, #20]
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	d103      	bne.n	801f3e4 <pbuf_take+0xf0>
 801f3dc:	88fb      	ldrh	r3, [r7, #6]
 801f3de:	693a      	ldr	r2, [r7, #16]
 801f3e0:	429a      	cmp	r2, r3
 801f3e2:	d006      	beq.n	801f3f2 <pbuf_take+0xfe>
 801f3e4:	4b05      	ldr	r3, [pc, #20]	; (801f3fc <pbuf_take+0x108>)
 801f3e6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801f3ea:	490a      	ldr	r1, [pc, #40]	; (801f414 <pbuf_take+0x120>)
 801f3ec:	4805      	ldr	r0, [pc, #20]	; (801f404 <pbuf_take+0x110>)
 801f3ee:	f003 fabf 	bl	8022970 <iprintf>
  return ERR_OK;
 801f3f2:	2300      	movs	r3, #0
}
 801f3f4:	4618      	mov	r0, r3
 801f3f6:	3720      	adds	r7, #32
 801f3f8:	46bd      	mov	sp, r7
 801f3fa:	bd80      	pop	{r7, pc}
 801f3fc:	08027eb4 	.word	0x08027eb4
 801f400:	0802828c 	.word	0x0802828c
 801f404:	08027f14 	.word	0x08027f14
 801f408:	080282a4 	.word	0x080282a4
 801f40c:	080282c0 	.word	0x080282c0
 801f410:	080282e0 	.word	0x080282e0
 801f414:	080282f8 	.word	0x080282f8

0801f418 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801f418:	b580      	push	{r7, lr}
 801f41a:	b084      	sub	sp, #16
 801f41c:	af00      	add	r7, sp, #0
 801f41e:	4603      	mov	r3, r0
 801f420:	603a      	str	r2, [r7, #0]
 801f422:	71fb      	strb	r3, [r7, #7]
 801f424:	460b      	mov	r3, r1
 801f426:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801f428:	683b      	ldr	r3, [r7, #0]
 801f42a:	8919      	ldrh	r1, [r3, #8]
 801f42c:	88ba      	ldrh	r2, [r7, #4]
 801f42e:	79fb      	ldrb	r3, [r7, #7]
 801f430:	4618      	mov	r0, r3
 801f432:	f7ff fa83 	bl	801e93c <pbuf_alloc>
 801f436:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801f438:	68fb      	ldr	r3, [r7, #12]
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	d101      	bne.n	801f442 <pbuf_clone+0x2a>
    return NULL;
 801f43e:	2300      	movs	r3, #0
 801f440:	e011      	b.n	801f466 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801f442:	6839      	ldr	r1, [r7, #0]
 801f444:	68f8      	ldr	r0, [r7, #12]
 801f446:	f7ff fe83 	bl	801f150 <pbuf_copy>
 801f44a:	4603      	mov	r3, r0
 801f44c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801f44e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801f452:	2b00      	cmp	r3, #0
 801f454:	d006      	beq.n	801f464 <pbuf_clone+0x4c>
 801f456:	4b06      	ldr	r3, [pc, #24]	; (801f470 <pbuf_clone+0x58>)
 801f458:	f240 5224 	movw	r2, #1316	; 0x524
 801f45c:	4905      	ldr	r1, [pc, #20]	; (801f474 <pbuf_clone+0x5c>)
 801f45e:	4806      	ldr	r0, [pc, #24]	; (801f478 <pbuf_clone+0x60>)
 801f460:	f003 fa86 	bl	8022970 <iprintf>
  return q;
 801f464:	68fb      	ldr	r3, [r7, #12]
}
 801f466:	4618      	mov	r0, r3
 801f468:	3710      	adds	r7, #16
 801f46a:	46bd      	mov	sp, r7
 801f46c:	bd80      	pop	{r7, pc}
 801f46e:	bf00      	nop
 801f470:	08027eb4 	.word	0x08027eb4
 801f474:	08028328 	.word	0x08028328
 801f478:	08027f14 	.word	0x08027f14

0801f47c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f47c:	b580      	push	{r7, lr}
 801f47e:	b086      	sub	sp, #24
 801f480:	af00      	add	r7, sp, #0
 801f482:	60f8      	str	r0, [r7, #12]
 801f484:	60b9      	str	r1, [r7, #8]
 801f486:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f488:	2003      	movs	r0, #3
 801f48a:	f7fe fdb9 	bl	801e000 <memp_malloc>
 801f48e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f490:	693b      	ldr	r3, [r7, #16]
 801f492:	2b00      	cmp	r3, #0
 801f494:	d109      	bne.n	801f4aa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f496:	693b      	ldr	r3, [r7, #16]
 801f498:	2b00      	cmp	r3, #0
 801f49a:	d151      	bne.n	801f540 <sys_timeout_abs+0xc4>
 801f49c:	4b2a      	ldr	r3, [pc, #168]	; (801f548 <sys_timeout_abs+0xcc>)
 801f49e:	22be      	movs	r2, #190	; 0xbe
 801f4a0:	492a      	ldr	r1, [pc, #168]	; (801f54c <sys_timeout_abs+0xd0>)
 801f4a2:	482b      	ldr	r0, [pc, #172]	; (801f550 <sys_timeout_abs+0xd4>)
 801f4a4:	f003 fa64 	bl	8022970 <iprintf>
    return;
 801f4a8:	e04a      	b.n	801f540 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f4aa:	693b      	ldr	r3, [r7, #16]
 801f4ac:	2200      	movs	r2, #0
 801f4ae:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f4b0:	693b      	ldr	r3, [r7, #16]
 801f4b2:	68ba      	ldr	r2, [r7, #8]
 801f4b4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f4b6:	693b      	ldr	r3, [r7, #16]
 801f4b8:	687a      	ldr	r2, [r7, #4]
 801f4ba:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f4bc:	693b      	ldr	r3, [r7, #16]
 801f4be:	68fa      	ldr	r2, [r7, #12]
 801f4c0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f4c2:	4b24      	ldr	r3, [pc, #144]	; (801f554 <sys_timeout_abs+0xd8>)
 801f4c4:	681b      	ldr	r3, [r3, #0]
 801f4c6:	2b00      	cmp	r3, #0
 801f4c8:	d103      	bne.n	801f4d2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f4ca:	4a22      	ldr	r2, [pc, #136]	; (801f554 <sys_timeout_abs+0xd8>)
 801f4cc:	693b      	ldr	r3, [r7, #16]
 801f4ce:	6013      	str	r3, [r2, #0]
    return;
 801f4d0:	e037      	b.n	801f542 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f4d2:	693b      	ldr	r3, [r7, #16]
 801f4d4:	685a      	ldr	r2, [r3, #4]
 801f4d6:	4b1f      	ldr	r3, [pc, #124]	; (801f554 <sys_timeout_abs+0xd8>)
 801f4d8:	681b      	ldr	r3, [r3, #0]
 801f4da:	685b      	ldr	r3, [r3, #4]
 801f4dc:	1ad3      	subs	r3, r2, r3
 801f4de:	0fdb      	lsrs	r3, r3, #31
 801f4e0:	f003 0301 	and.w	r3, r3, #1
 801f4e4:	b2db      	uxtb	r3, r3
 801f4e6:	2b00      	cmp	r3, #0
 801f4e8:	d007      	beq.n	801f4fa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f4ea:	4b1a      	ldr	r3, [pc, #104]	; (801f554 <sys_timeout_abs+0xd8>)
 801f4ec:	681a      	ldr	r2, [r3, #0]
 801f4ee:	693b      	ldr	r3, [r7, #16]
 801f4f0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f4f2:	4a18      	ldr	r2, [pc, #96]	; (801f554 <sys_timeout_abs+0xd8>)
 801f4f4:	693b      	ldr	r3, [r7, #16]
 801f4f6:	6013      	str	r3, [r2, #0]
 801f4f8:	e023      	b.n	801f542 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f4fa:	4b16      	ldr	r3, [pc, #88]	; (801f554 <sys_timeout_abs+0xd8>)
 801f4fc:	681b      	ldr	r3, [r3, #0]
 801f4fe:	617b      	str	r3, [r7, #20]
 801f500:	e01a      	b.n	801f538 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f502:	697b      	ldr	r3, [r7, #20]
 801f504:	681b      	ldr	r3, [r3, #0]
 801f506:	2b00      	cmp	r3, #0
 801f508:	d00b      	beq.n	801f522 <sys_timeout_abs+0xa6>
 801f50a:	693b      	ldr	r3, [r7, #16]
 801f50c:	685a      	ldr	r2, [r3, #4]
 801f50e:	697b      	ldr	r3, [r7, #20]
 801f510:	681b      	ldr	r3, [r3, #0]
 801f512:	685b      	ldr	r3, [r3, #4]
 801f514:	1ad3      	subs	r3, r2, r3
 801f516:	0fdb      	lsrs	r3, r3, #31
 801f518:	f003 0301 	and.w	r3, r3, #1
 801f51c:	b2db      	uxtb	r3, r3
 801f51e:	2b00      	cmp	r3, #0
 801f520:	d007      	beq.n	801f532 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f522:	697b      	ldr	r3, [r7, #20]
 801f524:	681a      	ldr	r2, [r3, #0]
 801f526:	693b      	ldr	r3, [r7, #16]
 801f528:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f52a:	697b      	ldr	r3, [r7, #20]
 801f52c:	693a      	ldr	r2, [r7, #16]
 801f52e:	601a      	str	r2, [r3, #0]
        break;
 801f530:	e007      	b.n	801f542 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f532:	697b      	ldr	r3, [r7, #20]
 801f534:	681b      	ldr	r3, [r3, #0]
 801f536:	617b      	str	r3, [r7, #20]
 801f538:	697b      	ldr	r3, [r7, #20]
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	d1e1      	bne.n	801f502 <sys_timeout_abs+0x86>
 801f53e:	e000      	b.n	801f542 <sys_timeout_abs+0xc6>
    return;
 801f540:	bf00      	nop
      }
    }
  }
}
 801f542:	3718      	adds	r7, #24
 801f544:	46bd      	mov	sp, r7
 801f546:	bd80      	pop	{r7, pc}
 801f548:	0802833c 	.word	0x0802833c
 801f54c:	08028370 	.word	0x08028370
 801f550:	080283b0 	.word	0x080283b0
 801f554:	20013e60 	.word	0x20013e60

0801f558 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f558:	b580      	push	{r7, lr}
 801f55a:	b086      	sub	sp, #24
 801f55c:	af00      	add	r7, sp, #0
 801f55e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f564:	697b      	ldr	r3, [r7, #20]
 801f566:	685b      	ldr	r3, [r3, #4]
 801f568:	4798      	blx	r3

  now = sys_now();
 801f56a:	f7fd fed9 	bl	801d320 <sys_now>
 801f56e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f570:	697b      	ldr	r3, [r7, #20]
 801f572:	681a      	ldr	r2, [r3, #0]
 801f574:	4b0f      	ldr	r3, [pc, #60]	; (801f5b4 <lwip_cyclic_timer+0x5c>)
 801f576:	681b      	ldr	r3, [r3, #0]
 801f578:	4413      	add	r3, r2
 801f57a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f57c:	68fa      	ldr	r2, [r7, #12]
 801f57e:	693b      	ldr	r3, [r7, #16]
 801f580:	1ad3      	subs	r3, r2, r3
 801f582:	0fdb      	lsrs	r3, r3, #31
 801f584:	f003 0301 	and.w	r3, r3, #1
 801f588:	b2db      	uxtb	r3, r3
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	d009      	beq.n	801f5a2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f58e:	697b      	ldr	r3, [r7, #20]
 801f590:	681a      	ldr	r2, [r3, #0]
 801f592:	693b      	ldr	r3, [r7, #16]
 801f594:	4413      	add	r3, r2
 801f596:	687a      	ldr	r2, [r7, #4]
 801f598:	4907      	ldr	r1, [pc, #28]	; (801f5b8 <lwip_cyclic_timer+0x60>)
 801f59a:	4618      	mov	r0, r3
 801f59c:	f7ff ff6e 	bl	801f47c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f5a0:	e004      	b.n	801f5ac <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f5a2:	687a      	ldr	r2, [r7, #4]
 801f5a4:	4904      	ldr	r1, [pc, #16]	; (801f5b8 <lwip_cyclic_timer+0x60>)
 801f5a6:	68f8      	ldr	r0, [r7, #12]
 801f5a8:	f7ff ff68 	bl	801f47c <sys_timeout_abs>
}
 801f5ac:	bf00      	nop
 801f5ae:	3718      	adds	r7, #24
 801f5b0:	46bd      	mov	sp, r7
 801f5b2:	bd80      	pop	{r7, pc}
 801f5b4:	20013e64 	.word	0x20013e64
 801f5b8:	0801f559 	.word	0x0801f559

0801f5bc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f5bc:	b580      	push	{r7, lr}
 801f5be:	b082      	sub	sp, #8
 801f5c0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f5c2:	2300      	movs	r3, #0
 801f5c4:	607b      	str	r3, [r7, #4]
 801f5c6:	e00e      	b.n	801f5e6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f5c8:	4a0b      	ldr	r2, [pc, #44]	; (801f5f8 <sys_timeouts_init+0x3c>)
 801f5ca:	687b      	ldr	r3, [r7, #4]
 801f5cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	00db      	lsls	r3, r3, #3
 801f5d4:	4a08      	ldr	r2, [pc, #32]	; (801f5f8 <sys_timeouts_init+0x3c>)
 801f5d6:	4413      	add	r3, r2
 801f5d8:	461a      	mov	r2, r3
 801f5da:	4908      	ldr	r1, [pc, #32]	; (801f5fc <sys_timeouts_init+0x40>)
 801f5dc:	f000 f810 	bl	801f600 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f5e0:	687b      	ldr	r3, [r7, #4]
 801f5e2:	3301      	adds	r3, #1
 801f5e4:	607b      	str	r3, [r7, #4]
 801f5e6:	687b      	ldr	r3, [r7, #4]
 801f5e8:	2b01      	cmp	r3, #1
 801f5ea:	d9ed      	bls.n	801f5c8 <sys_timeouts_init+0xc>
  }
}
 801f5ec:	bf00      	nop
 801f5ee:	bf00      	nop
 801f5f0:	3708      	adds	r7, #8
 801f5f2:	46bd      	mov	sp, r7
 801f5f4:	bd80      	pop	{r7, pc}
 801f5f6:	bf00      	nop
 801f5f8:	080292f4 	.word	0x080292f4
 801f5fc:	0801f559 	.word	0x0801f559

0801f600 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f600:	b580      	push	{r7, lr}
 801f602:	b086      	sub	sp, #24
 801f604:	af00      	add	r7, sp, #0
 801f606:	60f8      	str	r0, [r7, #12]
 801f608:	60b9      	str	r1, [r7, #8]
 801f60a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f60c:	68fb      	ldr	r3, [r7, #12]
 801f60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f612:	d306      	bcc.n	801f622 <sys_timeout+0x22>
 801f614:	4b0a      	ldr	r3, [pc, #40]	; (801f640 <sys_timeout+0x40>)
 801f616:	f240 1229 	movw	r2, #297	; 0x129
 801f61a:	490a      	ldr	r1, [pc, #40]	; (801f644 <sys_timeout+0x44>)
 801f61c:	480a      	ldr	r0, [pc, #40]	; (801f648 <sys_timeout+0x48>)
 801f61e:	f003 f9a7 	bl	8022970 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f622:	f7fd fe7d 	bl	801d320 <sys_now>
 801f626:	4602      	mov	r2, r0
 801f628:	68fb      	ldr	r3, [r7, #12]
 801f62a:	4413      	add	r3, r2
 801f62c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f62e:	687a      	ldr	r2, [r7, #4]
 801f630:	68b9      	ldr	r1, [r7, #8]
 801f632:	6978      	ldr	r0, [r7, #20]
 801f634:	f7ff ff22 	bl	801f47c <sys_timeout_abs>
#endif
}
 801f638:	bf00      	nop
 801f63a:	3718      	adds	r7, #24
 801f63c:	46bd      	mov	sp, r7
 801f63e:	bd80      	pop	{r7, pc}
 801f640:	0802833c 	.word	0x0802833c
 801f644:	080283d8 	.word	0x080283d8
 801f648:	080283b0 	.word	0x080283b0

0801f64c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f64c:	b580      	push	{r7, lr}
 801f64e:	b084      	sub	sp, #16
 801f650:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f652:	f7fd fe65 	bl	801d320 <sys_now>
 801f656:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801f658:	4b17      	ldr	r3, [pc, #92]	; (801f6b8 <sys_check_timeouts+0x6c>)
 801f65a:	681b      	ldr	r3, [r3, #0]
 801f65c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801f65e:	68bb      	ldr	r3, [r7, #8]
 801f660:	2b00      	cmp	r3, #0
 801f662:	d022      	beq.n	801f6aa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f664:	68bb      	ldr	r3, [r7, #8]
 801f666:	685b      	ldr	r3, [r3, #4]
 801f668:	68fa      	ldr	r2, [r7, #12]
 801f66a:	1ad3      	subs	r3, r2, r3
 801f66c:	0fdb      	lsrs	r3, r3, #31
 801f66e:	f003 0301 	and.w	r3, r3, #1
 801f672:	b2db      	uxtb	r3, r3
 801f674:	2b00      	cmp	r3, #0
 801f676:	d11a      	bne.n	801f6ae <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801f678:	68bb      	ldr	r3, [r7, #8]
 801f67a:	681b      	ldr	r3, [r3, #0]
 801f67c:	4a0e      	ldr	r2, [pc, #56]	; (801f6b8 <sys_check_timeouts+0x6c>)
 801f67e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801f680:	68bb      	ldr	r3, [r7, #8]
 801f682:	689b      	ldr	r3, [r3, #8]
 801f684:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801f686:	68bb      	ldr	r3, [r7, #8]
 801f688:	68db      	ldr	r3, [r3, #12]
 801f68a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801f68c:	68bb      	ldr	r3, [r7, #8]
 801f68e:	685b      	ldr	r3, [r3, #4]
 801f690:	4a0a      	ldr	r2, [pc, #40]	; (801f6bc <sys_check_timeouts+0x70>)
 801f692:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f694:	68b9      	ldr	r1, [r7, #8]
 801f696:	2003      	movs	r0, #3
 801f698:	f7fe fd22 	bl	801e0e0 <memp_free>
    if (handler != NULL) {
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	d0da      	beq.n	801f658 <sys_check_timeouts+0xc>
      handler(arg);
 801f6a2:	687b      	ldr	r3, [r7, #4]
 801f6a4:	6838      	ldr	r0, [r7, #0]
 801f6a6:	4798      	blx	r3
  do {
 801f6a8:	e7d6      	b.n	801f658 <sys_check_timeouts+0xc>
      return;
 801f6aa:	bf00      	nop
 801f6ac:	e000      	b.n	801f6b0 <sys_check_timeouts+0x64>
      return;
 801f6ae:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f6b0:	3710      	adds	r7, #16
 801f6b2:	46bd      	mov	sp, r7
 801f6b4:	bd80      	pop	{r7, pc}
 801f6b6:	bf00      	nop
 801f6b8:	20013e60 	.word	0x20013e60
 801f6bc:	20013e64 	.word	0x20013e64

0801f6c0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f6c0:	b580      	push	{r7, lr}
 801f6c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f6c4:	f003 f9f8 	bl	8022ab8 <rand>
 801f6c8:	4603      	mov	r3, r0
 801f6ca:	b29b      	uxth	r3, r3
 801f6cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f6d0:	b29b      	uxth	r3, r3
 801f6d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f6d6:	b29a      	uxth	r2, r3
 801f6d8:	4b01      	ldr	r3, [pc, #4]	; (801f6e0 <udp_init+0x20>)
 801f6da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f6dc:	bf00      	nop
 801f6de:	bd80      	pop	{r7, pc}
 801f6e0:	2000013c 	.word	0x2000013c

0801f6e4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f6e4:	b480      	push	{r7}
 801f6e6:	b083      	sub	sp, #12
 801f6e8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f6ea:	2300      	movs	r3, #0
 801f6ec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f6ee:	4b17      	ldr	r3, [pc, #92]	; (801f74c <udp_new_port+0x68>)
 801f6f0:	881b      	ldrh	r3, [r3, #0]
 801f6f2:	1c5a      	adds	r2, r3, #1
 801f6f4:	b291      	uxth	r1, r2
 801f6f6:	4a15      	ldr	r2, [pc, #84]	; (801f74c <udp_new_port+0x68>)
 801f6f8:	8011      	strh	r1, [r2, #0]
 801f6fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f6fe:	4293      	cmp	r3, r2
 801f700:	d103      	bne.n	801f70a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f702:	4b12      	ldr	r3, [pc, #72]	; (801f74c <udp_new_port+0x68>)
 801f704:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f708:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f70a:	4b11      	ldr	r3, [pc, #68]	; (801f750 <udp_new_port+0x6c>)
 801f70c:	681b      	ldr	r3, [r3, #0]
 801f70e:	603b      	str	r3, [r7, #0]
 801f710:	e011      	b.n	801f736 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f712:	683b      	ldr	r3, [r7, #0]
 801f714:	8a5a      	ldrh	r2, [r3, #18]
 801f716:	4b0d      	ldr	r3, [pc, #52]	; (801f74c <udp_new_port+0x68>)
 801f718:	881b      	ldrh	r3, [r3, #0]
 801f71a:	429a      	cmp	r2, r3
 801f71c:	d108      	bne.n	801f730 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f71e:	88fb      	ldrh	r3, [r7, #6]
 801f720:	3301      	adds	r3, #1
 801f722:	80fb      	strh	r3, [r7, #6]
 801f724:	88fb      	ldrh	r3, [r7, #6]
 801f726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f72a:	d3e0      	bcc.n	801f6ee <udp_new_port+0xa>
        return 0;
 801f72c:	2300      	movs	r3, #0
 801f72e:	e007      	b.n	801f740 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f730:	683b      	ldr	r3, [r7, #0]
 801f732:	68db      	ldr	r3, [r3, #12]
 801f734:	603b      	str	r3, [r7, #0]
 801f736:	683b      	ldr	r3, [r7, #0]
 801f738:	2b00      	cmp	r3, #0
 801f73a:	d1ea      	bne.n	801f712 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f73c:	4b03      	ldr	r3, [pc, #12]	; (801f74c <udp_new_port+0x68>)
 801f73e:	881b      	ldrh	r3, [r3, #0]
}
 801f740:	4618      	mov	r0, r3
 801f742:	370c      	adds	r7, #12
 801f744:	46bd      	mov	sp, r7
 801f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f74a:	4770      	bx	lr
 801f74c:	2000013c 	.word	0x2000013c
 801f750:	20013e68 	.word	0x20013e68

0801f754 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f754:	b580      	push	{r7, lr}
 801f756:	b084      	sub	sp, #16
 801f758:	af00      	add	r7, sp, #0
 801f75a:	60f8      	str	r0, [r7, #12]
 801f75c:	60b9      	str	r1, [r7, #8]
 801f75e:	4613      	mov	r3, r2
 801f760:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f762:	68fb      	ldr	r3, [r7, #12]
 801f764:	2b00      	cmp	r3, #0
 801f766:	d105      	bne.n	801f774 <udp_input_local_match+0x20>
 801f768:	4b27      	ldr	r3, [pc, #156]	; (801f808 <udp_input_local_match+0xb4>)
 801f76a:	2287      	movs	r2, #135	; 0x87
 801f76c:	4927      	ldr	r1, [pc, #156]	; (801f80c <udp_input_local_match+0xb8>)
 801f76e:	4828      	ldr	r0, [pc, #160]	; (801f810 <udp_input_local_match+0xbc>)
 801f770:	f003 f8fe 	bl	8022970 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f774:	68bb      	ldr	r3, [r7, #8]
 801f776:	2b00      	cmp	r3, #0
 801f778:	d105      	bne.n	801f786 <udp_input_local_match+0x32>
 801f77a:	4b23      	ldr	r3, [pc, #140]	; (801f808 <udp_input_local_match+0xb4>)
 801f77c:	2288      	movs	r2, #136	; 0x88
 801f77e:	4925      	ldr	r1, [pc, #148]	; (801f814 <udp_input_local_match+0xc0>)
 801f780:	4823      	ldr	r0, [pc, #140]	; (801f810 <udp_input_local_match+0xbc>)
 801f782:	f003 f8f5 	bl	8022970 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f786:	68fb      	ldr	r3, [r7, #12]
 801f788:	7a1b      	ldrb	r3, [r3, #8]
 801f78a:	2b00      	cmp	r3, #0
 801f78c:	d00b      	beq.n	801f7a6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f78e:	68fb      	ldr	r3, [r7, #12]
 801f790:	7a1a      	ldrb	r2, [r3, #8]
 801f792:	4b21      	ldr	r3, [pc, #132]	; (801f818 <udp_input_local_match+0xc4>)
 801f794:	685b      	ldr	r3, [r3, #4]
 801f796:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801f79a:	3301      	adds	r3, #1
 801f79c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f79e:	429a      	cmp	r2, r3
 801f7a0:	d001      	beq.n	801f7a6 <udp_input_local_match+0x52>
    return 0;
 801f7a2:	2300      	movs	r3, #0
 801f7a4:	e02b      	b.n	801f7fe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f7a6:	79fb      	ldrb	r3, [r7, #7]
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	d018      	beq.n	801f7de <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f7ac:	68fb      	ldr	r3, [r7, #12]
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	d013      	beq.n	801f7da <udp_input_local_match+0x86>
 801f7b2:	68fb      	ldr	r3, [r7, #12]
 801f7b4:	681b      	ldr	r3, [r3, #0]
 801f7b6:	2b00      	cmp	r3, #0
 801f7b8:	d00f      	beq.n	801f7da <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f7ba:	4b17      	ldr	r3, [pc, #92]	; (801f818 <udp_input_local_match+0xc4>)
 801f7bc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f7c2:	d00a      	beq.n	801f7da <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f7c4:	68fb      	ldr	r3, [r7, #12]
 801f7c6:	681a      	ldr	r2, [r3, #0]
 801f7c8:	4b13      	ldr	r3, [pc, #76]	; (801f818 <udp_input_local_match+0xc4>)
 801f7ca:	695b      	ldr	r3, [r3, #20]
 801f7cc:	405a      	eors	r2, r3
 801f7ce:	68bb      	ldr	r3, [r7, #8]
 801f7d0:	3308      	adds	r3, #8
 801f7d2:	681b      	ldr	r3, [r3, #0]
 801f7d4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	d110      	bne.n	801f7fc <udp_input_local_match+0xa8>
          return 1;
 801f7da:	2301      	movs	r3, #1
 801f7dc:	e00f      	b.n	801f7fe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f7de:	68fb      	ldr	r3, [r7, #12]
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d009      	beq.n	801f7f8 <udp_input_local_match+0xa4>
 801f7e4:	68fb      	ldr	r3, [r7, #12]
 801f7e6:	681b      	ldr	r3, [r3, #0]
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	d005      	beq.n	801f7f8 <udp_input_local_match+0xa4>
 801f7ec:	68fb      	ldr	r3, [r7, #12]
 801f7ee:	681a      	ldr	r2, [r3, #0]
 801f7f0:	4b09      	ldr	r3, [pc, #36]	; (801f818 <udp_input_local_match+0xc4>)
 801f7f2:	695b      	ldr	r3, [r3, #20]
 801f7f4:	429a      	cmp	r2, r3
 801f7f6:	d101      	bne.n	801f7fc <udp_input_local_match+0xa8>
        return 1;
 801f7f8:	2301      	movs	r3, #1
 801f7fa:	e000      	b.n	801f7fe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f7fc:	2300      	movs	r3, #0
}
 801f7fe:	4618      	mov	r0, r3
 801f800:	3710      	adds	r7, #16
 801f802:	46bd      	mov	sp, r7
 801f804:	bd80      	pop	{r7, pc}
 801f806:	bf00      	nop
 801f808:	08028424 	.word	0x08028424
 801f80c:	08028454 	.word	0x08028454
 801f810:	08028478 	.word	0x08028478
 801f814:	080284a0 	.word	0x080284a0
 801f818:	20010804 	.word	0x20010804

0801f81c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f81c:	b590      	push	{r4, r7, lr}
 801f81e:	b08d      	sub	sp, #52	; 0x34
 801f820:	af02      	add	r7, sp, #8
 801f822:	6078      	str	r0, [r7, #4]
 801f824:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f826:	2300      	movs	r3, #0
 801f828:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	2b00      	cmp	r3, #0
 801f82e:	d105      	bne.n	801f83c <udp_input+0x20>
 801f830:	4b7c      	ldr	r3, [pc, #496]	; (801fa24 <udp_input+0x208>)
 801f832:	22cf      	movs	r2, #207	; 0xcf
 801f834:	497c      	ldr	r1, [pc, #496]	; (801fa28 <udp_input+0x20c>)
 801f836:	487d      	ldr	r0, [pc, #500]	; (801fa2c <udp_input+0x210>)
 801f838:	f003 f89a 	bl	8022970 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f83c:	683b      	ldr	r3, [r7, #0]
 801f83e:	2b00      	cmp	r3, #0
 801f840:	d105      	bne.n	801f84e <udp_input+0x32>
 801f842:	4b78      	ldr	r3, [pc, #480]	; (801fa24 <udp_input+0x208>)
 801f844:	22d0      	movs	r2, #208	; 0xd0
 801f846:	497a      	ldr	r1, [pc, #488]	; (801fa30 <udp_input+0x214>)
 801f848:	4878      	ldr	r0, [pc, #480]	; (801fa2c <udp_input+0x210>)
 801f84a:	f003 f891 	bl	8022970 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f84e:	687b      	ldr	r3, [r7, #4]
 801f850:	895b      	ldrh	r3, [r3, #10]
 801f852:	2b07      	cmp	r3, #7
 801f854:	d803      	bhi.n	801f85e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f856:	6878      	ldr	r0, [r7, #4]
 801f858:	f7ff fb52 	bl	801ef00 <pbuf_free>
    goto end;
 801f85c:	e0de      	b.n	801fa1c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f85e:	687b      	ldr	r3, [r7, #4]
 801f860:	685b      	ldr	r3, [r3, #4]
 801f862:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f864:	4b73      	ldr	r3, [pc, #460]	; (801fa34 <udp_input+0x218>)
 801f866:	695b      	ldr	r3, [r3, #20]
 801f868:	4a72      	ldr	r2, [pc, #456]	; (801fa34 <udp_input+0x218>)
 801f86a:	6812      	ldr	r2, [r2, #0]
 801f86c:	4611      	mov	r1, r2
 801f86e:	4618      	mov	r0, r3
 801f870:	f001 ff44 	bl	80216fc <ip4_addr_isbroadcast_u32>
 801f874:	4603      	mov	r3, r0
 801f876:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f878:	697b      	ldr	r3, [r7, #20]
 801f87a:	881b      	ldrh	r3, [r3, #0]
 801f87c:	b29b      	uxth	r3, r3
 801f87e:	4618      	mov	r0, r3
 801f880:	f7fd ff62 	bl	801d748 <lwip_htons>
 801f884:	4603      	mov	r3, r0
 801f886:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f888:	697b      	ldr	r3, [r7, #20]
 801f88a:	885b      	ldrh	r3, [r3, #2]
 801f88c:	b29b      	uxth	r3, r3
 801f88e:	4618      	mov	r0, r3
 801f890:	f7fd ff5a 	bl	801d748 <lwip_htons>
 801f894:	4603      	mov	r3, r0
 801f896:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f898:	2300      	movs	r3, #0
 801f89a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f89c:	2300      	movs	r3, #0
 801f89e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f8a0:	2300      	movs	r3, #0
 801f8a2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f8a4:	4b64      	ldr	r3, [pc, #400]	; (801fa38 <udp_input+0x21c>)
 801f8a6:	681b      	ldr	r3, [r3, #0]
 801f8a8:	627b      	str	r3, [r7, #36]	; 0x24
 801f8aa:	e054      	b.n	801f956 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8ae:	8a5b      	ldrh	r3, [r3, #18]
 801f8b0:	89fa      	ldrh	r2, [r7, #14]
 801f8b2:	429a      	cmp	r2, r3
 801f8b4:	d14a      	bne.n	801f94c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f8b6:	7cfb      	ldrb	r3, [r7, #19]
 801f8b8:	461a      	mov	r2, r3
 801f8ba:	6839      	ldr	r1, [r7, #0]
 801f8bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f8be:	f7ff ff49 	bl	801f754 <udp_input_local_match>
 801f8c2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f8c4:	2b00      	cmp	r3, #0
 801f8c6:	d041      	beq.n	801f94c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8ca:	7c1b      	ldrb	r3, [r3, #16]
 801f8cc:	f003 0304 	and.w	r3, r3, #4
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	d11d      	bne.n	801f910 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801f8d4:	69fb      	ldr	r3, [r7, #28]
 801f8d6:	2b00      	cmp	r3, #0
 801f8d8:	d102      	bne.n	801f8e0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801f8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8dc:	61fb      	str	r3, [r7, #28]
 801f8de:	e017      	b.n	801f910 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f8e0:	7cfb      	ldrb	r3, [r7, #19]
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	d014      	beq.n	801f910 <udp_input+0xf4>
 801f8e6:	4b53      	ldr	r3, [pc, #332]	; (801fa34 <udp_input+0x218>)
 801f8e8:	695b      	ldr	r3, [r3, #20]
 801f8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f8ee:	d10f      	bne.n	801f910 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f8f0:	69fb      	ldr	r3, [r7, #28]
 801f8f2:	681a      	ldr	r2, [r3, #0]
 801f8f4:	683b      	ldr	r3, [r7, #0]
 801f8f6:	3304      	adds	r3, #4
 801f8f8:	681b      	ldr	r3, [r3, #0]
 801f8fa:	429a      	cmp	r2, r3
 801f8fc:	d008      	beq.n	801f910 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f900:	681a      	ldr	r2, [r3, #0]
 801f902:	683b      	ldr	r3, [r7, #0]
 801f904:	3304      	adds	r3, #4
 801f906:	681b      	ldr	r3, [r3, #0]
 801f908:	429a      	cmp	r2, r3
 801f90a:	d101      	bne.n	801f910 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801f90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f90e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f912:	8a9b      	ldrh	r3, [r3, #20]
 801f914:	8a3a      	ldrh	r2, [r7, #16]
 801f916:	429a      	cmp	r2, r3
 801f918:	d118      	bne.n	801f94c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f91c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801f91e:	2b00      	cmp	r3, #0
 801f920:	d005      	beq.n	801f92e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801f922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f924:	685a      	ldr	r2, [r3, #4]
 801f926:	4b43      	ldr	r3, [pc, #268]	; (801fa34 <udp_input+0x218>)
 801f928:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f92a:	429a      	cmp	r2, r3
 801f92c:	d10e      	bne.n	801f94c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f92e:	6a3b      	ldr	r3, [r7, #32]
 801f930:	2b00      	cmp	r3, #0
 801f932:	d014      	beq.n	801f95e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f936:	68da      	ldr	r2, [r3, #12]
 801f938:	6a3b      	ldr	r3, [r7, #32]
 801f93a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801f93c:	4b3e      	ldr	r3, [pc, #248]	; (801fa38 <udp_input+0x21c>)
 801f93e:	681a      	ldr	r2, [r3, #0]
 801f940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f942:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801f944:	4a3c      	ldr	r2, [pc, #240]	; (801fa38 <udp_input+0x21c>)
 801f946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f948:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801f94a:	e008      	b.n	801f95e <udp_input+0x142>
      }
    }

    prev = pcb;
 801f94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f94e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f952:	68db      	ldr	r3, [r3, #12]
 801f954:	627b      	str	r3, [r7, #36]	; 0x24
 801f956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f958:	2b00      	cmp	r3, #0
 801f95a:	d1a7      	bne.n	801f8ac <udp_input+0x90>
 801f95c:	e000      	b.n	801f960 <udp_input+0x144>
        break;
 801f95e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801f960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f962:	2b00      	cmp	r3, #0
 801f964:	d101      	bne.n	801f96a <udp_input+0x14e>
    pcb = uncon_pcb;
 801f966:	69fb      	ldr	r3, [r7, #28]
 801f968:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801f96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f96c:	2b00      	cmp	r3, #0
 801f96e:	d002      	beq.n	801f976 <udp_input+0x15a>
    for_us = 1;
 801f970:	2301      	movs	r3, #1
 801f972:	76fb      	strb	r3, [r7, #27]
 801f974:	e00a      	b.n	801f98c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801f976:	683b      	ldr	r3, [r7, #0]
 801f978:	3304      	adds	r3, #4
 801f97a:	681a      	ldr	r2, [r3, #0]
 801f97c:	4b2d      	ldr	r3, [pc, #180]	; (801fa34 <udp_input+0x218>)
 801f97e:	695b      	ldr	r3, [r3, #20]
 801f980:	429a      	cmp	r2, r3
 801f982:	bf0c      	ite	eq
 801f984:	2301      	moveq	r3, #1
 801f986:	2300      	movne	r3, #0
 801f988:	b2db      	uxtb	r3, r3
 801f98a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801f98c:	7efb      	ldrb	r3, [r7, #27]
 801f98e:	2b00      	cmp	r3, #0
 801f990:	d041      	beq.n	801fa16 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f992:	2108      	movs	r1, #8
 801f994:	6878      	ldr	r0, [r7, #4]
 801f996:	f7ff fa2d 	bl	801edf4 <pbuf_remove_header>
 801f99a:	4603      	mov	r3, r0
 801f99c:	2b00      	cmp	r3, #0
 801f99e:	d00a      	beq.n	801f9b6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f9a0:	4b20      	ldr	r3, [pc, #128]	; (801fa24 <udp_input+0x208>)
 801f9a2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f9a6:	4925      	ldr	r1, [pc, #148]	; (801fa3c <udp_input+0x220>)
 801f9a8:	4820      	ldr	r0, [pc, #128]	; (801fa2c <udp_input+0x210>)
 801f9aa:	f002 ffe1 	bl	8022970 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801f9ae:	6878      	ldr	r0, [r7, #4]
 801f9b0:	f7ff faa6 	bl	801ef00 <pbuf_free>
      goto end;
 801f9b4:	e032      	b.n	801fa1c <udp_input+0x200>
    }

    if (pcb != NULL) {
 801f9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9b8:	2b00      	cmp	r3, #0
 801f9ba:	d012      	beq.n	801f9e2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9be:	699b      	ldr	r3, [r3, #24]
 801f9c0:	2b00      	cmp	r3, #0
 801f9c2:	d00a      	beq.n	801f9da <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9c6:	699c      	ldr	r4, [r3, #24]
 801f9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9ca:	69d8      	ldr	r0, [r3, #28]
 801f9cc:	8a3b      	ldrh	r3, [r7, #16]
 801f9ce:	9300      	str	r3, [sp, #0]
 801f9d0:	4b1b      	ldr	r3, [pc, #108]	; (801fa40 <udp_input+0x224>)
 801f9d2:	687a      	ldr	r2, [r7, #4]
 801f9d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f9d6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801f9d8:	e021      	b.n	801fa1e <udp_input+0x202>
        pbuf_free(p);
 801f9da:	6878      	ldr	r0, [r7, #4]
 801f9dc:	f7ff fa90 	bl	801ef00 <pbuf_free>
        goto end;
 801f9e0:	e01c      	b.n	801fa1c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f9e2:	7cfb      	ldrb	r3, [r7, #19]
 801f9e4:	2b00      	cmp	r3, #0
 801f9e6:	d112      	bne.n	801fa0e <udp_input+0x1f2>
 801f9e8:	4b12      	ldr	r3, [pc, #72]	; (801fa34 <udp_input+0x218>)
 801f9ea:	695b      	ldr	r3, [r3, #20]
 801f9ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f9f0:	2be0      	cmp	r3, #224	; 0xe0
 801f9f2:	d00c      	beq.n	801fa0e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f9f4:	4b0f      	ldr	r3, [pc, #60]	; (801fa34 <udp_input+0x218>)
 801f9f6:	899b      	ldrh	r3, [r3, #12]
 801f9f8:	3308      	adds	r3, #8
 801f9fa:	b29b      	uxth	r3, r3
 801f9fc:	b21b      	sxth	r3, r3
 801f9fe:	4619      	mov	r1, r3
 801fa00:	6878      	ldr	r0, [r7, #4]
 801fa02:	f7ff fa6a 	bl	801eeda <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801fa06:	2103      	movs	r1, #3
 801fa08:	6878      	ldr	r0, [r7, #4]
 801fa0a:	f001 fb53 	bl	80210b4 <icmp_dest_unreach>
      pbuf_free(p);
 801fa0e:	6878      	ldr	r0, [r7, #4]
 801fa10:	f7ff fa76 	bl	801ef00 <pbuf_free>
  return;
 801fa14:	e003      	b.n	801fa1e <udp_input+0x202>
    pbuf_free(p);
 801fa16:	6878      	ldr	r0, [r7, #4]
 801fa18:	f7ff fa72 	bl	801ef00 <pbuf_free>
  return;
 801fa1c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801fa1e:	372c      	adds	r7, #44	; 0x2c
 801fa20:	46bd      	mov	sp, r7
 801fa22:	bd90      	pop	{r4, r7, pc}
 801fa24:	08028424 	.word	0x08028424
 801fa28:	080284c8 	.word	0x080284c8
 801fa2c:	08028478 	.word	0x08028478
 801fa30:	080284e0 	.word	0x080284e0
 801fa34:	20010804 	.word	0x20010804
 801fa38:	20013e68 	.word	0x20013e68
 801fa3c:	080284fc 	.word	0x080284fc
 801fa40:	20010814 	.word	0x20010814

0801fa44 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801fa44:	b580      	push	{r7, lr}
 801fa46:	b088      	sub	sp, #32
 801fa48:	af02      	add	r7, sp, #8
 801fa4a:	60f8      	str	r0, [r7, #12]
 801fa4c:	60b9      	str	r1, [r7, #8]
 801fa4e:	607a      	str	r2, [r7, #4]
 801fa50:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801fa52:	68fb      	ldr	r3, [r7, #12]
 801fa54:	2b00      	cmp	r3, #0
 801fa56:	d109      	bne.n	801fa6c <udp_sendto+0x28>
 801fa58:	4b23      	ldr	r3, [pc, #140]	; (801fae8 <udp_sendto+0xa4>)
 801fa5a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801fa5e:	4923      	ldr	r1, [pc, #140]	; (801faec <udp_sendto+0xa8>)
 801fa60:	4823      	ldr	r0, [pc, #140]	; (801faf0 <udp_sendto+0xac>)
 801fa62:	f002 ff85 	bl	8022970 <iprintf>
 801fa66:	f06f 030f 	mvn.w	r3, #15
 801fa6a:	e038      	b.n	801fade <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801fa6c:	68bb      	ldr	r3, [r7, #8]
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	d109      	bne.n	801fa86 <udp_sendto+0x42>
 801fa72:	4b1d      	ldr	r3, [pc, #116]	; (801fae8 <udp_sendto+0xa4>)
 801fa74:	f240 2219 	movw	r2, #537	; 0x219
 801fa78:	491e      	ldr	r1, [pc, #120]	; (801faf4 <udp_sendto+0xb0>)
 801fa7a:	481d      	ldr	r0, [pc, #116]	; (801faf0 <udp_sendto+0xac>)
 801fa7c:	f002 ff78 	bl	8022970 <iprintf>
 801fa80:	f06f 030f 	mvn.w	r3, #15
 801fa84:	e02b      	b.n	801fade <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fa86:	687b      	ldr	r3, [r7, #4]
 801fa88:	2b00      	cmp	r3, #0
 801fa8a:	d109      	bne.n	801faa0 <udp_sendto+0x5c>
 801fa8c:	4b16      	ldr	r3, [pc, #88]	; (801fae8 <udp_sendto+0xa4>)
 801fa8e:	f240 221a 	movw	r2, #538	; 0x21a
 801fa92:	4919      	ldr	r1, [pc, #100]	; (801faf8 <udp_sendto+0xb4>)
 801fa94:	4816      	ldr	r0, [pc, #88]	; (801faf0 <udp_sendto+0xac>)
 801fa96:	f002 ff6b 	bl	8022970 <iprintf>
 801fa9a:	f06f 030f 	mvn.w	r3, #15
 801fa9e:	e01e      	b.n	801fade <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801faa0:	68fb      	ldr	r3, [r7, #12]
 801faa2:	7a1b      	ldrb	r3, [r3, #8]
 801faa4:	2b00      	cmp	r3, #0
 801faa6:	d006      	beq.n	801fab6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801faa8:	68fb      	ldr	r3, [r7, #12]
 801faaa:	7a1b      	ldrb	r3, [r3, #8]
 801faac:	4618      	mov	r0, r3
 801faae:	f7fe fef5 	bl	801e89c <netif_get_by_index>
 801fab2:	6178      	str	r0, [r7, #20]
 801fab4:	e003      	b.n	801fabe <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801fab6:	6878      	ldr	r0, [r7, #4]
 801fab8:	f001 fb86 	bl	80211c8 <ip4_route>
 801fabc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801fabe:	697b      	ldr	r3, [r7, #20]
 801fac0:	2b00      	cmp	r3, #0
 801fac2:	d102      	bne.n	801faca <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801fac4:	f06f 0303 	mvn.w	r3, #3
 801fac8:	e009      	b.n	801fade <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801faca:	887a      	ldrh	r2, [r7, #2]
 801facc:	697b      	ldr	r3, [r7, #20]
 801face:	9300      	str	r3, [sp, #0]
 801fad0:	4613      	mov	r3, r2
 801fad2:	687a      	ldr	r2, [r7, #4]
 801fad4:	68b9      	ldr	r1, [r7, #8]
 801fad6:	68f8      	ldr	r0, [r7, #12]
 801fad8:	f000 f810 	bl	801fafc <udp_sendto_if>
 801fadc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801fade:	4618      	mov	r0, r3
 801fae0:	3718      	adds	r7, #24
 801fae2:	46bd      	mov	sp, r7
 801fae4:	bd80      	pop	{r7, pc}
 801fae6:	bf00      	nop
 801fae8:	08028424 	.word	0x08028424
 801faec:	08028548 	.word	0x08028548
 801faf0:	08028478 	.word	0x08028478
 801faf4:	08028560 	.word	0x08028560
 801faf8:	0802857c 	.word	0x0802857c

0801fafc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801fafc:	b580      	push	{r7, lr}
 801fafe:	b088      	sub	sp, #32
 801fb00:	af02      	add	r7, sp, #8
 801fb02:	60f8      	str	r0, [r7, #12]
 801fb04:	60b9      	str	r1, [r7, #8]
 801fb06:	607a      	str	r2, [r7, #4]
 801fb08:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801fb0a:	68fb      	ldr	r3, [r7, #12]
 801fb0c:	2b00      	cmp	r3, #0
 801fb0e:	d109      	bne.n	801fb24 <udp_sendto_if+0x28>
 801fb10:	4b2e      	ldr	r3, [pc, #184]	; (801fbcc <udp_sendto_if+0xd0>)
 801fb12:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fb16:	492e      	ldr	r1, [pc, #184]	; (801fbd0 <udp_sendto_if+0xd4>)
 801fb18:	482e      	ldr	r0, [pc, #184]	; (801fbd4 <udp_sendto_if+0xd8>)
 801fb1a:	f002 ff29 	bl	8022970 <iprintf>
 801fb1e:	f06f 030f 	mvn.w	r3, #15
 801fb22:	e04f      	b.n	801fbc4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801fb24:	68bb      	ldr	r3, [r7, #8]
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	d109      	bne.n	801fb3e <udp_sendto_if+0x42>
 801fb2a:	4b28      	ldr	r3, [pc, #160]	; (801fbcc <udp_sendto_if+0xd0>)
 801fb2c:	f240 2281 	movw	r2, #641	; 0x281
 801fb30:	4929      	ldr	r1, [pc, #164]	; (801fbd8 <udp_sendto_if+0xdc>)
 801fb32:	4828      	ldr	r0, [pc, #160]	; (801fbd4 <udp_sendto_if+0xd8>)
 801fb34:	f002 ff1c 	bl	8022970 <iprintf>
 801fb38:	f06f 030f 	mvn.w	r3, #15
 801fb3c:	e042      	b.n	801fbc4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fb3e:	687b      	ldr	r3, [r7, #4]
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d109      	bne.n	801fb58 <udp_sendto_if+0x5c>
 801fb44:	4b21      	ldr	r3, [pc, #132]	; (801fbcc <udp_sendto_if+0xd0>)
 801fb46:	f240 2282 	movw	r2, #642	; 0x282
 801fb4a:	4924      	ldr	r1, [pc, #144]	; (801fbdc <udp_sendto_if+0xe0>)
 801fb4c:	4821      	ldr	r0, [pc, #132]	; (801fbd4 <udp_sendto_if+0xd8>)
 801fb4e:	f002 ff0f 	bl	8022970 <iprintf>
 801fb52:	f06f 030f 	mvn.w	r3, #15
 801fb56:	e035      	b.n	801fbc4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801fb58:	6a3b      	ldr	r3, [r7, #32]
 801fb5a:	2b00      	cmp	r3, #0
 801fb5c:	d109      	bne.n	801fb72 <udp_sendto_if+0x76>
 801fb5e:	4b1b      	ldr	r3, [pc, #108]	; (801fbcc <udp_sendto_if+0xd0>)
 801fb60:	f240 2283 	movw	r2, #643	; 0x283
 801fb64:	491e      	ldr	r1, [pc, #120]	; (801fbe0 <udp_sendto_if+0xe4>)
 801fb66:	481b      	ldr	r0, [pc, #108]	; (801fbd4 <udp_sendto_if+0xd8>)
 801fb68:	f002 ff02 	bl	8022970 <iprintf>
 801fb6c:	f06f 030f 	mvn.w	r3, #15
 801fb70:	e028      	b.n	801fbc4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fb72:	68fb      	ldr	r3, [r7, #12]
 801fb74:	2b00      	cmp	r3, #0
 801fb76:	d009      	beq.n	801fb8c <udp_sendto_if+0x90>
 801fb78:	68fb      	ldr	r3, [r7, #12]
 801fb7a:	681b      	ldr	r3, [r3, #0]
 801fb7c:	2b00      	cmp	r3, #0
 801fb7e:	d005      	beq.n	801fb8c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801fb80:	68fb      	ldr	r3, [r7, #12]
 801fb82:	681b      	ldr	r3, [r3, #0]
 801fb84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fb88:	2be0      	cmp	r3, #224	; 0xe0
 801fb8a:	d103      	bne.n	801fb94 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801fb8c:	6a3b      	ldr	r3, [r7, #32]
 801fb8e:	3304      	adds	r3, #4
 801fb90:	617b      	str	r3, [r7, #20]
 801fb92:	e00b      	b.n	801fbac <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801fb94:	68fb      	ldr	r3, [r7, #12]
 801fb96:	681a      	ldr	r2, [r3, #0]
 801fb98:	6a3b      	ldr	r3, [r7, #32]
 801fb9a:	3304      	adds	r3, #4
 801fb9c:	681b      	ldr	r3, [r3, #0]
 801fb9e:	429a      	cmp	r2, r3
 801fba0:	d002      	beq.n	801fba8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801fba2:	f06f 0303 	mvn.w	r3, #3
 801fba6:	e00d      	b.n	801fbc4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801fba8:	68fb      	ldr	r3, [r7, #12]
 801fbaa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801fbac:	887a      	ldrh	r2, [r7, #2]
 801fbae:	697b      	ldr	r3, [r7, #20]
 801fbb0:	9301      	str	r3, [sp, #4]
 801fbb2:	6a3b      	ldr	r3, [r7, #32]
 801fbb4:	9300      	str	r3, [sp, #0]
 801fbb6:	4613      	mov	r3, r2
 801fbb8:	687a      	ldr	r2, [r7, #4]
 801fbba:	68b9      	ldr	r1, [r7, #8]
 801fbbc:	68f8      	ldr	r0, [r7, #12]
 801fbbe:	f000 f811 	bl	801fbe4 <udp_sendto_if_src>
 801fbc2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801fbc4:	4618      	mov	r0, r3
 801fbc6:	3718      	adds	r7, #24
 801fbc8:	46bd      	mov	sp, r7
 801fbca:	bd80      	pop	{r7, pc}
 801fbcc:	08028424 	.word	0x08028424
 801fbd0:	08028598 	.word	0x08028598
 801fbd4:	08028478 	.word	0x08028478
 801fbd8:	080285b4 	.word	0x080285b4
 801fbdc:	080285d0 	.word	0x080285d0
 801fbe0:	080285f0 	.word	0x080285f0

0801fbe4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801fbe4:	b580      	push	{r7, lr}
 801fbe6:	b08c      	sub	sp, #48	; 0x30
 801fbe8:	af04      	add	r7, sp, #16
 801fbea:	60f8      	str	r0, [r7, #12]
 801fbec:	60b9      	str	r1, [r7, #8]
 801fbee:	607a      	str	r2, [r7, #4]
 801fbf0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801fbf2:	68fb      	ldr	r3, [r7, #12]
 801fbf4:	2b00      	cmp	r3, #0
 801fbf6:	d109      	bne.n	801fc0c <udp_sendto_if_src+0x28>
 801fbf8:	4b65      	ldr	r3, [pc, #404]	; (801fd90 <udp_sendto_if_src+0x1ac>)
 801fbfa:	f240 22d1 	movw	r2, #721	; 0x2d1
 801fbfe:	4965      	ldr	r1, [pc, #404]	; (801fd94 <udp_sendto_if_src+0x1b0>)
 801fc00:	4865      	ldr	r0, [pc, #404]	; (801fd98 <udp_sendto_if_src+0x1b4>)
 801fc02:	f002 feb5 	bl	8022970 <iprintf>
 801fc06:	f06f 030f 	mvn.w	r3, #15
 801fc0a:	e0bc      	b.n	801fd86 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801fc0c:	68bb      	ldr	r3, [r7, #8]
 801fc0e:	2b00      	cmp	r3, #0
 801fc10:	d109      	bne.n	801fc26 <udp_sendto_if_src+0x42>
 801fc12:	4b5f      	ldr	r3, [pc, #380]	; (801fd90 <udp_sendto_if_src+0x1ac>)
 801fc14:	f240 22d2 	movw	r2, #722	; 0x2d2
 801fc18:	4960      	ldr	r1, [pc, #384]	; (801fd9c <udp_sendto_if_src+0x1b8>)
 801fc1a:	485f      	ldr	r0, [pc, #380]	; (801fd98 <udp_sendto_if_src+0x1b4>)
 801fc1c:	f002 fea8 	bl	8022970 <iprintf>
 801fc20:	f06f 030f 	mvn.w	r3, #15
 801fc24:	e0af      	b.n	801fd86 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fc26:	687b      	ldr	r3, [r7, #4]
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	d109      	bne.n	801fc40 <udp_sendto_if_src+0x5c>
 801fc2c:	4b58      	ldr	r3, [pc, #352]	; (801fd90 <udp_sendto_if_src+0x1ac>)
 801fc2e:	f240 22d3 	movw	r2, #723	; 0x2d3
 801fc32:	495b      	ldr	r1, [pc, #364]	; (801fda0 <udp_sendto_if_src+0x1bc>)
 801fc34:	4858      	ldr	r0, [pc, #352]	; (801fd98 <udp_sendto_if_src+0x1b4>)
 801fc36:	f002 fe9b 	bl	8022970 <iprintf>
 801fc3a:	f06f 030f 	mvn.w	r3, #15
 801fc3e:	e0a2      	b.n	801fd86 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801fc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fc42:	2b00      	cmp	r3, #0
 801fc44:	d109      	bne.n	801fc5a <udp_sendto_if_src+0x76>
 801fc46:	4b52      	ldr	r3, [pc, #328]	; (801fd90 <udp_sendto_if_src+0x1ac>)
 801fc48:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801fc4c:	4955      	ldr	r1, [pc, #340]	; (801fda4 <udp_sendto_if_src+0x1c0>)
 801fc4e:	4852      	ldr	r0, [pc, #328]	; (801fd98 <udp_sendto_if_src+0x1b4>)
 801fc50:	f002 fe8e 	bl	8022970 <iprintf>
 801fc54:	f06f 030f 	mvn.w	r3, #15
 801fc58:	e095      	b.n	801fd86 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801fc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc5c:	2b00      	cmp	r3, #0
 801fc5e:	d109      	bne.n	801fc74 <udp_sendto_if_src+0x90>
 801fc60:	4b4b      	ldr	r3, [pc, #300]	; (801fd90 <udp_sendto_if_src+0x1ac>)
 801fc62:	f240 22d5 	movw	r2, #725	; 0x2d5
 801fc66:	4950      	ldr	r1, [pc, #320]	; (801fda8 <udp_sendto_if_src+0x1c4>)
 801fc68:	484b      	ldr	r0, [pc, #300]	; (801fd98 <udp_sendto_if_src+0x1b4>)
 801fc6a:	f002 fe81 	bl	8022970 <iprintf>
 801fc6e:	f06f 030f 	mvn.w	r3, #15
 801fc72:	e088      	b.n	801fd86 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801fc74:	68fb      	ldr	r3, [r7, #12]
 801fc76:	8a5b      	ldrh	r3, [r3, #18]
 801fc78:	2b00      	cmp	r3, #0
 801fc7a:	d10f      	bne.n	801fc9c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fc7c:	68f9      	ldr	r1, [r7, #12]
 801fc7e:	68fb      	ldr	r3, [r7, #12]
 801fc80:	8a5b      	ldrh	r3, [r3, #18]
 801fc82:	461a      	mov	r2, r3
 801fc84:	68f8      	ldr	r0, [r7, #12]
 801fc86:	f000 f893 	bl	801fdb0 <udp_bind>
 801fc8a:	4603      	mov	r3, r0
 801fc8c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801fc8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fc92:	2b00      	cmp	r3, #0
 801fc94:	d002      	beq.n	801fc9c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801fc96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fc9a:	e074      	b.n	801fd86 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801fc9c:	68bb      	ldr	r3, [r7, #8]
 801fc9e:	891b      	ldrh	r3, [r3, #8]
 801fca0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801fca4:	4293      	cmp	r3, r2
 801fca6:	d902      	bls.n	801fcae <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801fca8:	f04f 33ff 	mov.w	r3, #4294967295
 801fcac:	e06b      	b.n	801fd86 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801fcae:	2108      	movs	r1, #8
 801fcb0:	68b8      	ldr	r0, [r7, #8]
 801fcb2:	f7ff f88f 	bl	801edd4 <pbuf_add_header>
 801fcb6:	4603      	mov	r3, r0
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	d015      	beq.n	801fce8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801fcbc:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fcc0:	2108      	movs	r1, #8
 801fcc2:	2022      	movs	r0, #34	; 0x22
 801fcc4:	f7fe fe3a 	bl	801e93c <pbuf_alloc>
 801fcc8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801fcca:	69fb      	ldr	r3, [r7, #28]
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	d102      	bne.n	801fcd6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801fcd0:	f04f 33ff 	mov.w	r3, #4294967295
 801fcd4:	e057      	b.n	801fd86 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801fcd6:	68bb      	ldr	r3, [r7, #8]
 801fcd8:	891b      	ldrh	r3, [r3, #8]
 801fcda:	2b00      	cmp	r3, #0
 801fcdc:	d006      	beq.n	801fcec <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801fcde:	68b9      	ldr	r1, [r7, #8]
 801fce0:	69f8      	ldr	r0, [r7, #28]
 801fce2:	f7ff fa25 	bl	801f130 <pbuf_chain>
 801fce6:	e001      	b.n	801fcec <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801fce8:	68bb      	ldr	r3, [r7, #8]
 801fcea:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801fcec:	69fb      	ldr	r3, [r7, #28]
 801fcee:	895b      	ldrh	r3, [r3, #10]
 801fcf0:	2b07      	cmp	r3, #7
 801fcf2:	d806      	bhi.n	801fd02 <udp_sendto_if_src+0x11e>
 801fcf4:	4b26      	ldr	r3, [pc, #152]	; (801fd90 <udp_sendto_if_src+0x1ac>)
 801fcf6:	f240 320d 	movw	r2, #781	; 0x30d
 801fcfa:	492c      	ldr	r1, [pc, #176]	; (801fdac <udp_sendto_if_src+0x1c8>)
 801fcfc:	4826      	ldr	r0, [pc, #152]	; (801fd98 <udp_sendto_if_src+0x1b4>)
 801fcfe:	f002 fe37 	bl	8022970 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801fd02:	69fb      	ldr	r3, [r7, #28]
 801fd04:	685b      	ldr	r3, [r3, #4]
 801fd06:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801fd08:	68fb      	ldr	r3, [r7, #12]
 801fd0a:	8a5b      	ldrh	r3, [r3, #18]
 801fd0c:	4618      	mov	r0, r3
 801fd0e:	f7fd fd1b 	bl	801d748 <lwip_htons>
 801fd12:	4603      	mov	r3, r0
 801fd14:	461a      	mov	r2, r3
 801fd16:	697b      	ldr	r3, [r7, #20]
 801fd18:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801fd1a:	887b      	ldrh	r3, [r7, #2]
 801fd1c:	4618      	mov	r0, r3
 801fd1e:	f7fd fd13 	bl	801d748 <lwip_htons>
 801fd22:	4603      	mov	r3, r0
 801fd24:	461a      	mov	r2, r3
 801fd26:	697b      	ldr	r3, [r7, #20]
 801fd28:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801fd2a:	697b      	ldr	r3, [r7, #20]
 801fd2c:	2200      	movs	r2, #0
 801fd2e:	719a      	strb	r2, [r3, #6]
 801fd30:	2200      	movs	r2, #0
 801fd32:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801fd34:	69fb      	ldr	r3, [r7, #28]
 801fd36:	891b      	ldrh	r3, [r3, #8]
 801fd38:	4618      	mov	r0, r3
 801fd3a:	f7fd fd05 	bl	801d748 <lwip_htons>
 801fd3e:	4603      	mov	r3, r0
 801fd40:	461a      	mov	r2, r3
 801fd42:	697b      	ldr	r3, [r7, #20]
 801fd44:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801fd46:	2311      	movs	r3, #17
 801fd48:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801fd4a:	68fb      	ldr	r3, [r7, #12]
 801fd4c:	7adb      	ldrb	r3, [r3, #11]
 801fd4e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801fd50:	68fb      	ldr	r3, [r7, #12]
 801fd52:	7a9b      	ldrb	r3, [r3, #10]
 801fd54:	7cb9      	ldrb	r1, [r7, #18]
 801fd56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fd58:	9202      	str	r2, [sp, #8]
 801fd5a:	7cfa      	ldrb	r2, [r7, #19]
 801fd5c:	9201      	str	r2, [sp, #4]
 801fd5e:	9300      	str	r3, [sp, #0]
 801fd60:	460b      	mov	r3, r1
 801fd62:	687a      	ldr	r2, [r7, #4]
 801fd64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801fd66:	69f8      	ldr	r0, [r7, #28]
 801fd68:	f001 fc0c 	bl	8021584 <ip4_output_if_src>
 801fd6c:	4603      	mov	r3, r0
 801fd6e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801fd70:	69fa      	ldr	r2, [r7, #28]
 801fd72:	68bb      	ldr	r3, [r7, #8]
 801fd74:	429a      	cmp	r2, r3
 801fd76:	d004      	beq.n	801fd82 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801fd78:	69f8      	ldr	r0, [r7, #28]
 801fd7a:	f7ff f8c1 	bl	801ef00 <pbuf_free>
    q = NULL;
 801fd7e:	2300      	movs	r3, #0
 801fd80:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801fd82:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801fd86:	4618      	mov	r0, r3
 801fd88:	3720      	adds	r7, #32
 801fd8a:	46bd      	mov	sp, r7
 801fd8c:	bd80      	pop	{r7, pc}
 801fd8e:	bf00      	nop
 801fd90:	08028424 	.word	0x08028424
 801fd94:	08028610 	.word	0x08028610
 801fd98:	08028478 	.word	0x08028478
 801fd9c:	08028630 	.word	0x08028630
 801fda0:	08028650 	.word	0x08028650
 801fda4:	08028674 	.word	0x08028674
 801fda8:	08028698 	.word	0x08028698
 801fdac:	080286bc 	.word	0x080286bc

0801fdb0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fdb0:	b580      	push	{r7, lr}
 801fdb2:	b086      	sub	sp, #24
 801fdb4:	af00      	add	r7, sp, #0
 801fdb6:	60f8      	str	r0, [r7, #12]
 801fdb8:	60b9      	str	r1, [r7, #8]
 801fdba:	4613      	mov	r3, r2
 801fdbc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801fdbe:	68bb      	ldr	r3, [r7, #8]
 801fdc0:	2b00      	cmp	r3, #0
 801fdc2:	d101      	bne.n	801fdc8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801fdc4:	4b39      	ldr	r3, [pc, #228]	; (801feac <udp_bind+0xfc>)
 801fdc6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801fdc8:	68fb      	ldr	r3, [r7, #12]
 801fdca:	2b00      	cmp	r3, #0
 801fdcc:	d109      	bne.n	801fde2 <udp_bind+0x32>
 801fdce:	4b38      	ldr	r3, [pc, #224]	; (801feb0 <udp_bind+0x100>)
 801fdd0:	f240 32b7 	movw	r2, #951	; 0x3b7
 801fdd4:	4937      	ldr	r1, [pc, #220]	; (801feb4 <udp_bind+0x104>)
 801fdd6:	4838      	ldr	r0, [pc, #224]	; (801feb8 <udp_bind+0x108>)
 801fdd8:	f002 fdca 	bl	8022970 <iprintf>
 801fddc:	f06f 030f 	mvn.w	r3, #15
 801fde0:	e060      	b.n	801fea4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801fde2:	2300      	movs	r3, #0
 801fde4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fde6:	4b35      	ldr	r3, [pc, #212]	; (801febc <udp_bind+0x10c>)
 801fde8:	681b      	ldr	r3, [r3, #0]
 801fdea:	617b      	str	r3, [r7, #20]
 801fdec:	e009      	b.n	801fe02 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801fdee:	68fa      	ldr	r2, [r7, #12]
 801fdf0:	697b      	ldr	r3, [r7, #20]
 801fdf2:	429a      	cmp	r2, r3
 801fdf4:	d102      	bne.n	801fdfc <udp_bind+0x4c>
      rebind = 1;
 801fdf6:	2301      	movs	r3, #1
 801fdf8:	74fb      	strb	r3, [r7, #19]
      break;
 801fdfa:	e005      	b.n	801fe08 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fdfc:	697b      	ldr	r3, [r7, #20]
 801fdfe:	68db      	ldr	r3, [r3, #12]
 801fe00:	617b      	str	r3, [r7, #20]
 801fe02:	697b      	ldr	r3, [r7, #20]
 801fe04:	2b00      	cmp	r3, #0
 801fe06:	d1f2      	bne.n	801fdee <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801fe08:	88fb      	ldrh	r3, [r7, #6]
 801fe0a:	2b00      	cmp	r3, #0
 801fe0c:	d109      	bne.n	801fe22 <udp_bind+0x72>
    port = udp_new_port();
 801fe0e:	f7ff fc69 	bl	801f6e4 <udp_new_port>
 801fe12:	4603      	mov	r3, r0
 801fe14:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801fe16:	88fb      	ldrh	r3, [r7, #6]
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	d12c      	bne.n	801fe76 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801fe1c:	f06f 0307 	mvn.w	r3, #7
 801fe20:	e040      	b.n	801fea4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fe22:	4b26      	ldr	r3, [pc, #152]	; (801febc <udp_bind+0x10c>)
 801fe24:	681b      	ldr	r3, [r3, #0]
 801fe26:	617b      	str	r3, [r7, #20]
 801fe28:	e022      	b.n	801fe70 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801fe2a:	68fa      	ldr	r2, [r7, #12]
 801fe2c:	697b      	ldr	r3, [r7, #20]
 801fe2e:	429a      	cmp	r2, r3
 801fe30:	d01b      	beq.n	801fe6a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801fe32:	697b      	ldr	r3, [r7, #20]
 801fe34:	8a5b      	ldrh	r3, [r3, #18]
 801fe36:	88fa      	ldrh	r2, [r7, #6]
 801fe38:	429a      	cmp	r2, r3
 801fe3a:	d116      	bne.n	801fe6a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fe3c:	697b      	ldr	r3, [r7, #20]
 801fe3e:	681a      	ldr	r2, [r3, #0]
 801fe40:	68bb      	ldr	r3, [r7, #8]
 801fe42:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801fe44:	429a      	cmp	r2, r3
 801fe46:	d00d      	beq.n	801fe64 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fe48:	68bb      	ldr	r3, [r7, #8]
 801fe4a:	2b00      	cmp	r3, #0
 801fe4c:	d00a      	beq.n	801fe64 <udp_bind+0xb4>
 801fe4e:	68bb      	ldr	r3, [r7, #8]
 801fe50:	681b      	ldr	r3, [r3, #0]
 801fe52:	2b00      	cmp	r3, #0
 801fe54:	d006      	beq.n	801fe64 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fe56:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fe58:	2b00      	cmp	r3, #0
 801fe5a:	d003      	beq.n	801fe64 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fe5c:	697b      	ldr	r3, [r7, #20]
 801fe5e:	681b      	ldr	r3, [r3, #0]
 801fe60:	2b00      	cmp	r3, #0
 801fe62:	d102      	bne.n	801fe6a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801fe64:	f06f 0307 	mvn.w	r3, #7
 801fe68:	e01c      	b.n	801fea4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fe6a:	697b      	ldr	r3, [r7, #20]
 801fe6c:	68db      	ldr	r3, [r3, #12]
 801fe6e:	617b      	str	r3, [r7, #20]
 801fe70:	697b      	ldr	r3, [r7, #20]
 801fe72:	2b00      	cmp	r3, #0
 801fe74:	d1d9      	bne.n	801fe2a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801fe76:	68bb      	ldr	r3, [r7, #8]
 801fe78:	2b00      	cmp	r3, #0
 801fe7a:	d002      	beq.n	801fe82 <udp_bind+0xd2>
 801fe7c:	68bb      	ldr	r3, [r7, #8]
 801fe7e:	681b      	ldr	r3, [r3, #0]
 801fe80:	e000      	b.n	801fe84 <udp_bind+0xd4>
 801fe82:	2300      	movs	r3, #0
 801fe84:	68fa      	ldr	r2, [r7, #12]
 801fe86:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801fe88:	68fb      	ldr	r3, [r7, #12]
 801fe8a:	88fa      	ldrh	r2, [r7, #6]
 801fe8c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801fe8e:	7cfb      	ldrb	r3, [r7, #19]
 801fe90:	2b00      	cmp	r3, #0
 801fe92:	d106      	bne.n	801fea2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801fe94:	4b09      	ldr	r3, [pc, #36]	; (801febc <udp_bind+0x10c>)
 801fe96:	681a      	ldr	r2, [r3, #0]
 801fe98:	68fb      	ldr	r3, [r7, #12]
 801fe9a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801fe9c:	4a07      	ldr	r2, [pc, #28]	; (801febc <udp_bind+0x10c>)
 801fe9e:	68fb      	ldr	r3, [r7, #12]
 801fea0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801fea2:	2300      	movs	r3, #0
}
 801fea4:	4618      	mov	r0, r3
 801fea6:	3718      	adds	r7, #24
 801fea8:	46bd      	mov	sp, r7
 801feaa:	bd80      	pop	{r7, pc}
 801feac:	08029304 	.word	0x08029304
 801feb0:	08028424 	.word	0x08028424
 801feb4:	080286ec 	.word	0x080286ec
 801feb8:	08028478 	.word	0x08028478
 801febc:	20013e68 	.word	0x20013e68

0801fec0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801fec0:	b580      	push	{r7, lr}
 801fec2:	b084      	sub	sp, #16
 801fec4:	af00      	add	r7, sp, #0
 801fec6:	60f8      	str	r0, [r7, #12]
 801fec8:	60b9      	str	r1, [r7, #8]
 801feca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801fecc:	68fb      	ldr	r3, [r7, #12]
 801fece:	2b00      	cmp	r3, #0
 801fed0:	d107      	bne.n	801fee2 <udp_recv+0x22>
 801fed2:	4b08      	ldr	r3, [pc, #32]	; (801fef4 <udp_recv+0x34>)
 801fed4:	f240 428a 	movw	r2, #1162	; 0x48a
 801fed8:	4907      	ldr	r1, [pc, #28]	; (801fef8 <udp_recv+0x38>)
 801feda:	4808      	ldr	r0, [pc, #32]	; (801fefc <udp_recv+0x3c>)
 801fedc:	f002 fd48 	bl	8022970 <iprintf>
 801fee0:	e005      	b.n	801feee <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801fee2:	68fb      	ldr	r3, [r7, #12]
 801fee4:	68ba      	ldr	r2, [r7, #8]
 801fee6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801fee8:	68fb      	ldr	r3, [r7, #12]
 801feea:	687a      	ldr	r2, [r7, #4]
 801feec:	61da      	str	r2, [r3, #28]
}
 801feee:	3710      	adds	r7, #16
 801fef0:	46bd      	mov	sp, r7
 801fef2:	bd80      	pop	{r7, pc}
 801fef4:	08028424 	.word	0x08028424
 801fef8:	08028758 	.word	0x08028758
 801fefc:	08028478 	.word	0x08028478

0801ff00 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801ff00:	b580      	push	{r7, lr}
 801ff02:	b084      	sub	sp, #16
 801ff04:	af00      	add	r7, sp, #0
 801ff06:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801ff08:	687b      	ldr	r3, [r7, #4]
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	d107      	bne.n	801ff1e <udp_remove+0x1e>
 801ff0e:	4b19      	ldr	r3, [pc, #100]	; (801ff74 <udp_remove+0x74>)
 801ff10:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801ff14:	4918      	ldr	r1, [pc, #96]	; (801ff78 <udp_remove+0x78>)
 801ff16:	4819      	ldr	r0, [pc, #100]	; (801ff7c <udp_remove+0x7c>)
 801ff18:	f002 fd2a 	bl	8022970 <iprintf>
 801ff1c:	e026      	b.n	801ff6c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801ff1e:	4b18      	ldr	r3, [pc, #96]	; (801ff80 <udp_remove+0x80>)
 801ff20:	681b      	ldr	r3, [r3, #0]
 801ff22:	687a      	ldr	r2, [r7, #4]
 801ff24:	429a      	cmp	r2, r3
 801ff26:	d105      	bne.n	801ff34 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801ff28:	4b15      	ldr	r3, [pc, #84]	; (801ff80 <udp_remove+0x80>)
 801ff2a:	681b      	ldr	r3, [r3, #0]
 801ff2c:	68db      	ldr	r3, [r3, #12]
 801ff2e:	4a14      	ldr	r2, [pc, #80]	; (801ff80 <udp_remove+0x80>)
 801ff30:	6013      	str	r3, [r2, #0]
 801ff32:	e017      	b.n	801ff64 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ff34:	4b12      	ldr	r3, [pc, #72]	; (801ff80 <udp_remove+0x80>)
 801ff36:	681b      	ldr	r3, [r3, #0]
 801ff38:	60fb      	str	r3, [r7, #12]
 801ff3a:	e010      	b.n	801ff5e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801ff3c:	68fb      	ldr	r3, [r7, #12]
 801ff3e:	68db      	ldr	r3, [r3, #12]
 801ff40:	2b00      	cmp	r3, #0
 801ff42:	d009      	beq.n	801ff58 <udp_remove+0x58>
 801ff44:	68fb      	ldr	r3, [r7, #12]
 801ff46:	68db      	ldr	r3, [r3, #12]
 801ff48:	687a      	ldr	r2, [r7, #4]
 801ff4a:	429a      	cmp	r2, r3
 801ff4c:	d104      	bne.n	801ff58 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801ff4e:	687b      	ldr	r3, [r7, #4]
 801ff50:	68da      	ldr	r2, [r3, #12]
 801ff52:	68fb      	ldr	r3, [r7, #12]
 801ff54:	60da      	str	r2, [r3, #12]
        break;
 801ff56:	e005      	b.n	801ff64 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ff58:	68fb      	ldr	r3, [r7, #12]
 801ff5a:	68db      	ldr	r3, [r3, #12]
 801ff5c:	60fb      	str	r3, [r7, #12]
 801ff5e:	68fb      	ldr	r3, [r7, #12]
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d1eb      	bne.n	801ff3c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801ff64:	6879      	ldr	r1, [r7, #4]
 801ff66:	2000      	movs	r0, #0
 801ff68:	f7fe f8ba 	bl	801e0e0 <memp_free>
}
 801ff6c:	3710      	adds	r7, #16
 801ff6e:	46bd      	mov	sp, r7
 801ff70:	bd80      	pop	{r7, pc}
 801ff72:	bf00      	nop
 801ff74:	08028424 	.word	0x08028424
 801ff78:	08028770 	.word	0x08028770
 801ff7c:	08028478 	.word	0x08028478
 801ff80:	20013e68 	.word	0x20013e68

0801ff84 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801ff84:	b580      	push	{r7, lr}
 801ff86:	b082      	sub	sp, #8
 801ff88:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801ff8a:	2000      	movs	r0, #0
 801ff8c:	f7fe f838 	bl	801e000 <memp_malloc>
 801ff90:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801ff92:	687b      	ldr	r3, [r7, #4]
 801ff94:	2b00      	cmp	r3, #0
 801ff96:	d007      	beq.n	801ffa8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801ff98:	2220      	movs	r2, #32
 801ff9a:	2100      	movs	r1, #0
 801ff9c:	6878      	ldr	r0, [r7, #4]
 801ff9e:	f002 fbff 	bl	80227a0 <memset>
    pcb->ttl = UDP_TTL;
 801ffa2:	687b      	ldr	r3, [r7, #4]
 801ffa4:	22ff      	movs	r2, #255	; 0xff
 801ffa6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801ffa8:	687b      	ldr	r3, [r7, #4]
}
 801ffaa:	4618      	mov	r0, r3
 801ffac:	3708      	adds	r7, #8
 801ffae:	46bd      	mov	sp, r7
 801ffb0:	bd80      	pop	{r7, pc}
	...

0801ffb4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ffb4:	b480      	push	{r7}
 801ffb6:	b085      	sub	sp, #20
 801ffb8:	af00      	add	r7, sp, #0
 801ffba:	6078      	str	r0, [r7, #4]
 801ffbc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ffbe:	687b      	ldr	r3, [r7, #4]
 801ffc0:	2b00      	cmp	r3, #0
 801ffc2:	d01e      	beq.n	8020002 <udp_netif_ip_addr_changed+0x4e>
 801ffc4:	687b      	ldr	r3, [r7, #4]
 801ffc6:	681b      	ldr	r3, [r3, #0]
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d01a      	beq.n	8020002 <udp_netif_ip_addr_changed+0x4e>
 801ffcc:	683b      	ldr	r3, [r7, #0]
 801ffce:	2b00      	cmp	r3, #0
 801ffd0:	d017      	beq.n	8020002 <udp_netif_ip_addr_changed+0x4e>
 801ffd2:	683b      	ldr	r3, [r7, #0]
 801ffd4:	681b      	ldr	r3, [r3, #0]
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	d013      	beq.n	8020002 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ffda:	4b0d      	ldr	r3, [pc, #52]	; (8020010 <udp_netif_ip_addr_changed+0x5c>)
 801ffdc:	681b      	ldr	r3, [r3, #0]
 801ffde:	60fb      	str	r3, [r7, #12]
 801ffe0:	e00c      	b.n	801fffc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ffe2:	68fb      	ldr	r3, [r7, #12]
 801ffe4:	681a      	ldr	r2, [r3, #0]
 801ffe6:	687b      	ldr	r3, [r7, #4]
 801ffe8:	681b      	ldr	r3, [r3, #0]
 801ffea:	429a      	cmp	r2, r3
 801ffec:	d103      	bne.n	801fff6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ffee:	683b      	ldr	r3, [r7, #0]
 801fff0:	681a      	ldr	r2, [r3, #0]
 801fff2:	68fb      	ldr	r3, [r7, #12]
 801fff4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fff6:	68fb      	ldr	r3, [r7, #12]
 801fff8:	68db      	ldr	r3, [r3, #12]
 801fffa:	60fb      	str	r3, [r7, #12]
 801fffc:	68fb      	ldr	r3, [r7, #12]
 801fffe:	2b00      	cmp	r3, #0
 8020000:	d1ef      	bne.n	801ffe2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8020002:	bf00      	nop
 8020004:	3714      	adds	r7, #20
 8020006:	46bd      	mov	sp, r7
 8020008:	f85d 7b04 	ldr.w	r7, [sp], #4
 802000c:	4770      	bx	lr
 802000e:	bf00      	nop
 8020010:	20013e68 	.word	0x20013e68

08020014 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8020014:	b580      	push	{r7, lr}
 8020016:	b082      	sub	sp, #8
 8020018:	af00      	add	r7, sp, #0
 802001a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 802001c:	4915      	ldr	r1, [pc, #84]	; (8020074 <etharp_free_entry+0x60>)
 802001e:	687a      	ldr	r2, [r7, #4]
 8020020:	4613      	mov	r3, r2
 8020022:	005b      	lsls	r3, r3, #1
 8020024:	4413      	add	r3, r2
 8020026:	00db      	lsls	r3, r3, #3
 8020028:	440b      	add	r3, r1
 802002a:	681b      	ldr	r3, [r3, #0]
 802002c:	2b00      	cmp	r3, #0
 802002e:	d013      	beq.n	8020058 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8020030:	4910      	ldr	r1, [pc, #64]	; (8020074 <etharp_free_entry+0x60>)
 8020032:	687a      	ldr	r2, [r7, #4]
 8020034:	4613      	mov	r3, r2
 8020036:	005b      	lsls	r3, r3, #1
 8020038:	4413      	add	r3, r2
 802003a:	00db      	lsls	r3, r3, #3
 802003c:	440b      	add	r3, r1
 802003e:	681b      	ldr	r3, [r3, #0]
 8020040:	4618      	mov	r0, r3
 8020042:	f7fe ff5d 	bl	801ef00 <pbuf_free>
    arp_table[i].q = NULL;
 8020046:	490b      	ldr	r1, [pc, #44]	; (8020074 <etharp_free_entry+0x60>)
 8020048:	687a      	ldr	r2, [r7, #4]
 802004a:	4613      	mov	r3, r2
 802004c:	005b      	lsls	r3, r3, #1
 802004e:	4413      	add	r3, r2
 8020050:	00db      	lsls	r3, r3, #3
 8020052:	440b      	add	r3, r1
 8020054:	2200      	movs	r2, #0
 8020056:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8020058:	4906      	ldr	r1, [pc, #24]	; (8020074 <etharp_free_entry+0x60>)
 802005a:	687a      	ldr	r2, [r7, #4]
 802005c:	4613      	mov	r3, r2
 802005e:	005b      	lsls	r3, r3, #1
 8020060:	4413      	add	r3, r2
 8020062:	00db      	lsls	r3, r3, #3
 8020064:	440b      	add	r3, r1
 8020066:	3314      	adds	r3, #20
 8020068:	2200      	movs	r2, #0
 802006a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 802006c:	bf00      	nop
 802006e:	3708      	adds	r7, #8
 8020070:	46bd      	mov	sp, r7
 8020072:	bd80      	pop	{r7, pc}
 8020074:	20013e6c 	.word	0x20013e6c

08020078 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8020078:	b580      	push	{r7, lr}
 802007a:	b082      	sub	sp, #8
 802007c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802007e:	2300      	movs	r3, #0
 8020080:	607b      	str	r3, [r7, #4]
 8020082:	e096      	b.n	80201b2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8020084:	494f      	ldr	r1, [pc, #316]	; (80201c4 <etharp_tmr+0x14c>)
 8020086:	687a      	ldr	r2, [r7, #4]
 8020088:	4613      	mov	r3, r2
 802008a:	005b      	lsls	r3, r3, #1
 802008c:	4413      	add	r3, r2
 802008e:	00db      	lsls	r3, r3, #3
 8020090:	440b      	add	r3, r1
 8020092:	3314      	adds	r3, #20
 8020094:	781b      	ldrb	r3, [r3, #0]
 8020096:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8020098:	78fb      	ldrb	r3, [r7, #3]
 802009a:	2b00      	cmp	r3, #0
 802009c:	f000 8086 	beq.w	80201ac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80200a0:	4948      	ldr	r1, [pc, #288]	; (80201c4 <etharp_tmr+0x14c>)
 80200a2:	687a      	ldr	r2, [r7, #4]
 80200a4:	4613      	mov	r3, r2
 80200a6:	005b      	lsls	r3, r3, #1
 80200a8:	4413      	add	r3, r2
 80200aa:	00db      	lsls	r3, r3, #3
 80200ac:	440b      	add	r3, r1
 80200ae:	3312      	adds	r3, #18
 80200b0:	881b      	ldrh	r3, [r3, #0]
 80200b2:	3301      	adds	r3, #1
 80200b4:	b298      	uxth	r0, r3
 80200b6:	4943      	ldr	r1, [pc, #268]	; (80201c4 <etharp_tmr+0x14c>)
 80200b8:	687a      	ldr	r2, [r7, #4]
 80200ba:	4613      	mov	r3, r2
 80200bc:	005b      	lsls	r3, r3, #1
 80200be:	4413      	add	r3, r2
 80200c0:	00db      	lsls	r3, r3, #3
 80200c2:	440b      	add	r3, r1
 80200c4:	3312      	adds	r3, #18
 80200c6:	4602      	mov	r2, r0
 80200c8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80200ca:	493e      	ldr	r1, [pc, #248]	; (80201c4 <etharp_tmr+0x14c>)
 80200cc:	687a      	ldr	r2, [r7, #4]
 80200ce:	4613      	mov	r3, r2
 80200d0:	005b      	lsls	r3, r3, #1
 80200d2:	4413      	add	r3, r2
 80200d4:	00db      	lsls	r3, r3, #3
 80200d6:	440b      	add	r3, r1
 80200d8:	3312      	adds	r3, #18
 80200da:	881b      	ldrh	r3, [r3, #0]
 80200dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80200e0:	d215      	bcs.n	802010e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80200e2:	4938      	ldr	r1, [pc, #224]	; (80201c4 <etharp_tmr+0x14c>)
 80200e4:	687a      	ldr	r2, [r7, #4]
 80200e6:	4613      	mov	r3, r2
 80200e8:	005b      	lsls	r3, r3, #1
 80200ea:	4413      	add	r3, r2
 80200ec:	00db      	lsls	r3, r3, #3
 80200ee:	440b      	add	r3, r1
 80200f0:	3314      	adds	r3, #20
 80200f2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80200f4:	2b01      	cmp	r3, #1
 80200f6:	d10e      	bne.n	8020116 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80200f8:	4932      	ldr	r1, [pc, #200]	; (80201c4 <etharp_tmr+0x14c>)
 80200fa:	687a      	ldr	r2, [r7, #4]
 80200fc:	4613      	mov	r3, r2
 80200fe:	005b      	lsls	r3, r3, #1
 8020100:	4413      	add	r3, r2
 8020102:	00db      	lsls	r3, r3, #3
 8020104:	440b      	add	r3, r1
 8020106:	3312      	adds	r3, #18
 8020108:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802010a:	2b04      	cmp	r3, #4
 802010c:	d903      	bls.n	8020116 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 802010e:	6878      	ldr	r0, [r7, #4]
 8020110:	f7ff ff80 	bl	8020014 <etharp_free_entry>
 8020114:	e04a      	b.n	80201ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8020116:	492b      	ldr	r1, [pc, #172]	; (80201c4 <etharp_tmr+0x14c>)
 8020118:	687a      	ldr	r2, [r7, #4]
 802011a:	4613      	mov	r3, r2
 802011c:	005b      	lsls	r3, r3, #1
 802011e:	4413      	add	r3, r2
 8020120:	00db      	lsls	r3, r3, #3
 8020122:	440b      	add	r3, r1
 8020124:	3314      	adds	r3, #20
 8020126:	781b      	ldrb	r3, [r3, #0]
 8020128:	2b03      	cmp	r3, #3
 802012a:	d10a      	bne.n	8020142 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 802012c:	4925      	ldr	r1, [pc, #148]	; (80201c4 <etharp_tmr+0x14c>)
 802012e:	687a      	ldr	r2, [r7, #4]
 8020130:	4613      	mov	r3, r2
 8020132:	005b      	lsls	r3, r3, #1
 8020134:	4413      	add	r3, r2
 8020136:	00db      	lsls	r3, r3, #3
 8020138:	440b      	add	r3, r1
 802013a:	3314      	adds	r3, #20
 802013c:	2204      	movs	r2, #4
 802013e:	701a      	strb	r2, [r3, #0]
 8020140:	e034      	b.n	80201ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8020142:	4920      	ldr	r1, [pc, #128]	; (80201c4 <etharp_tmr+0x14c>)
 8020144:	687a      	ldr	r2, [r7, #4]
 8020146:	4613      	mov	r3, r2
 8020148:	005b      	lsls	r3, r3, #1
 802014a:	4413      	add	r3, r2
 802014c:	00db      	lsls	r3, r3, #3
 802014e:	440b      	add	r3, r1
 8020150:	3314      	adds	r3, #20
 8020152:	781b      	ldrb	r3, [r3, #0]
 8020154:	2b04      	cmp	r3, #4
 8020156:	d10a      	bne.n	802016e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8020158:	491a      	ldr	r1, [pc, #104]	; (80201c4 <etharp_tmr+0x14c>)
 802015a:	687a      	ldr	r2, [r7, #4]
 802015c:	4613      	mov	r3, r2
 802015e:	005b      	lsls	r3, r3, #1
 8020160:	4413      	add	r3, r2
 8020162:	00db      	lsls	r3, r3, #3
 8020164:	440b      	add	r3, r1
 8020166:	3314      	adds	r3, #20
 8020168:	2202      	movs	r2, #2
 802016a:	701a      	strb	r2, [r3, #0]
 802016c:	e01e      	b.n	80201ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802016e:	4915      	ldr	r1, [pc, #84]	; (80201c4 <etharp_tmr+0x14c>)
 8020170:	687a      	ldr	r2, [r7, #4]
 8020172:	4613      	mov	r3, r2
 8020174:	005b      	lsls	r3, r3, #1
 8020176:	4413      	add	r3, r2
 8020178:	00db      	lsls	r3, r3, #3
 802017a:	440b      	add	r3, r1
 802017c:	3314      	adds	r3, #20
 802017e:	781b      	ldrb	r3, [r3, #0]
 8020180:	2b01      	cmp	r3, #1
 8020182:	d113      	bne.n	80201ac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8020184:	490f      	ldr	r1, [pc, #60]	; (80201c4 <etharp_tmr+0x14c>)
 8020186:	687a      	ldr	r2, [r7, #4]
 8020188:	4613      	mov	r3, r2
 802018a:	005b      	lsls	r3, r3, #1
 802018c:	4413      	add	r3, r2
 802018e:	00db      	lsls	r3, r3, #3
 8020190:	440b      	add	r3, r1
 8020192:	3308      	adds	r3, #8
 8020194:	6818      	ldr	r0, [r3, #0]
 8020196:	687a      	ldr	r2, [r7, #4]
 8020198:	4613      	mov	r3, r2
 802019a:	005b      	lsls	r3, r3, #1
 802019c:	4413      	add	r3, r2
 802019e:	00db      	lsls	r3, r3, #3
 80201a0:	4a08      	ldr	r2, [pc, #32]	; (80201c4 <etharp_tmr+0x14c>)
 80201a2:	4413      	add	r3, r2
 80201a4:	3304      	adds	r3, #4
 80201a6:	4619      	mov	r1, r3
 80201a8:	f000 fe6e 	bl	8020e88 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80201ac:	687b      	ldr	r3, [r7, #4]
 80201ae:	3301      	adds	r3, #1
 80201b0:	607b      	str	r3, [r7, #4]
 80201b2:	687b      	ldr	r3, [r7, #4]
 80201b4:	2b31      	cmp	r3, #49	; 0x31
 80201b6:	f77f af65 	ble.w	8020084 <etharp_tmr+0xc>
      }
    }
  }
}
 80201ba:	bf00      	nop
 80201bc:	bf00      	nop
 80201be:	3708      	adds	r7, #8
 80201c0:	46bd      	mov	sp, r7
 80201c2:	bd80      	pop	{r7, pc}
 80201c4:	20013e6c 	.word	0x20013e6c

080201c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80201c8:	b580      	push	{r7, lr}
 80201ca:	b08a      	sub	sp, #40	; 0x28
 80201cc:	af00      	add	r7, sp, #0
 80201ce:	60f8      	str	r0, [r7, #12]
 80201d0:	460b      	mov	r3, r1
 80201d2:	607a      	str	r2, [r7, #4]
 80201d4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80201d6:	2332      	movs	r3, #50	; 0x32
 80201d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80201da:	2332      	movs	r3, #50	; 0x32
 80201dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80201de:	2332      	movs	r3, #50	; 0x32
 80201e0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80201e2:	2300      	movs	r3, #0
 80201e4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80201e6:	2332      	movs	r3, #50	; 0x32
 80201e8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80201ea:	2300      	movs	r3, #0
 80201ec:	83bb      	strh	r3, [r7, #28]
 80201ee:	2300      	movs	r3, #0
 80201f0:	837b      	strh	r3, [r7, #26]
 80201f2:	2300      	movs	r3, #0
 80201f4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80201f6:	2300      	movs	r3, #0
 80201f8:	843b      	strh	r3, [r7, #32]
 80201fa:	e0ae      	b.n	802035a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80201fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020200:	49a6      	ldr	r1, [pc, #664]	; (802049c <etharp_find_entry+0x2d4>)
 8020202:	4613      	mov	r3, r2
 8020204:	005b      	lsls	r3, r3, #1
 8020206:	4413      	add	r3, r2
 8020208:	00db      	lsls	r3, r3, #3
 802020a:	440b      	add	r3, r1
 802020c:	3314      	adds	r3, #20
 802020e:	781b      	ldrb	r3, [r3, #0]
 8020210:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8020212:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020216:	2b32      	cmp	r3, #50	; 0x32
 8020218:	d105      	bne.n	8020226 <etharp_find_entry+0x5e>
 802021a:	7dfb      	ldrb	r3, [r7, #23]
 802021c:	2b00      	cmp	r3, #0
 802021e:	d102      	bne.n	8020226 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8020220:	8c3b      	ldrh	r3, [r7, #32]
 8020222:	847b      	strh	r3, [r7, #34]	; 0x22
 8020224:	e095      	b.n	8020352 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8020226:	7dfb      	ldrb	r3, [r7, #23]
 8020228:	2b00      	cmp	r3, #0
 802022a:	f000 8092 	beq.w	8020352 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 802022e:	7dfb      	ldrb	r3, [r7, #23]
 8020230:	2b01      	cmp	r3, #1
 8020232:	d009      	beq.n	8020248 <etharp_find_entry+0x80>
 8020234:	7dfb      	ldrb	r3, [r7, #23]
 8020236:	2b01      	cmp	r3, #1
 8020238:	d806      	bhi.n	8020248 <etharp_find_entry+0x80>
 802023a:	4b99      	ldr	r3, [pc, #612]	; (80204a0 <etharp_find_entry+0x2d8>)
 802023c:	f240 1223 	movw	r2, #291	; 0x123
 8020240:	4998      	ldr	r1, [pc, #608]	; (80204a4 <etharp_find_entry+0x2dc>)
 8020242:	4899      	ldr	r0, [pc, #612]	; (80204a8 <etharp_find_entry+0x2e0>)
 8020244:	f002 fb94 	bl	8022970 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8020248:	68fb      	ldr	r3, [r7, #12]
 802024a:	2b00      	cmp	r3, #0
 802024c:	d020      	beq.n	8020290 <etharp_find_entry+0xc8>
 802024e:	68fb      	ldr	r3, [r7, #12]
 8020250:	6819      	ldr	r1, [r3, #0]
 8020252:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020256:	4891      	ldr	r0, [pc, #580]	; (802049c <etharp_find_entry+0x2d4>)
 8020258:	4613      	mov	r3, r2
 802025a:	005b      	lsls	r3, r3, #1
 802025c:	4413      	add	r3, r2
 802025e:	00db      	lsls	r3, r3, #3
 8020260:	4403      	add	r3, r0
 8020262:	3304      	adds	r3, #4
 8020264:	681b      	ldr	r3, [r3, #0]
 8020266:	4299      	cmp	r1, r3
 8020268:	d112      	bne.n	8020290 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 802026a:	687b      	ldr	r3, [r7, #4]
 802026c:	2b00      	cmp	r3, #0
 802026e:	d00c      	beq.n	802028a <etharp_find_entry+0xc2>
 8020270:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020274:	4989      	ldr	r1, [pc, #548]	; (802049c <etharp_find_entry+0x2d4>)
 8020276:	4613      	mov	r3, r2
 8020278:	005b      	lsls	r3, r3, #1
 802027a:	4413      	add	r3, r2
 802027c:	00db      	lsls	r3, r3, #3
 802027e:	440b      	add	r3, r1
 8020280:	3308      	adds	r3, #8
 8020282:	681b      	ldr	r3, [r3, #0]
 8020284:	687a      	ldr	r2, [r7, #4]
 8020286:	429a      	cmp	r2, r3
 8020288:	d102      	bne.n	8020290 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 802028a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802028e:	e100      	b.n	8020492 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8020290:	7dfb      	ldrb	r3, [r7, #23]
 8020292:	2b01      	cmp	r3, #1
 8020294:	d140      	bne.n	8020318 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8020296:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802029a:	4980      	ldr	r1, [pc, #512]	; (802049c <etharp_find_entry+0x2d4>)
 802029c:	4613      	mov	r3, r2
 802029e:	005b      	lsls	r3, r3, #1
 80202a0:	4413      	add	r3, r2
 80202a2:	00db      	lsls	r3, r3, #3
 80202a4:	440b      	add	r3, r1
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	2b00      	cmp	r3, #0
 80202aa:	d01a      	beq.n	80202e2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80202ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80202b0:	497a      	ldr	r1, [pc, #488]	; (802049c <etharp_find_entry+0x2d4>)
 80202b2:	4613      	mov	r3, r2
 80202b4:	005b      	lsls	r3, r3, #1
 80202b6:	4413      	add	r3, r2
 80202b8:	00db      	lsls	r3, r3, #3
 80202ba:	440b      	add	r3, r1
 80202bc:	3312      	adds	r3, #18
 80202be:	881b      	ldrh	r3, [r3, #0]
 80202c0:	8bba      	ldrh	r2, [r7, #28]
 80202c2:	429a      	cmp	r2, r3
 80202c4:	d845      	bhi.n	8020352 <etharp_find_entry+0x18a>
            old_queue = i;
 80202c6:	8c3b      	ldrh	r3, [r7, #32]
 80202c8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80202ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80202ce:	4973      	ldr	r1, [pc, #460]	; (802049c <etharp_find_entry+0x2d4>)
 80202d0:	4613      	mov	r3, r2
 80202d2:	005b      	lsls	r3, r3, #1
 80202d4:	4413      	add	r3, r2
 80202d6:	00db      	lsls	r3, r3, #3
 80202d8:	440b      	add	r3, r1
 80202da:	3312      	adds	r3, #18
 80202dc:	881b      	ldrh	r3, [r3, #0]
 80202de:	83bb      	strh	r3, [r7, #28]
 80202e0:	e037      	b.n	8020352 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80202e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80202e6:	496d      	ldr	r1, [pc, #436]	; (802049c <etharp_find_entry+0x2d4>)
 80202e8:	4613      	mov	r3, r2
 80202ea:	005b      	lsls	r3, r3, #1
 80202ec:	4413      	add	r3, r2
 80202ee:	00db      	lsls	r3, r3, #3
 80202f0:	440b      	add	r3, r1
 80202f2:	3312      	adds	r3, #18
 80202f4:	881b      	ldrh	r3, [r3, #0]
 80202f6:	8b7a      	ldrh	r2, [r7, #26]
 80202f8:	429a      	cmp	r2, r3
 80202fa:	d82a      	bhi.n	8020352 <etharp_find_entry+0x18a>
            old_pending = i;
 80202fc:	8c3b      	ldrh	r3, [r7, #32]
 80202fe:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8020300:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020304:	4965      	ldr	r1, [pc, #404]	; (802049c <etharp_find_entry+0x2d4>)
 8020306:	4613      	mov	r3, r2
 8020308:	005b      	lsls	r3, r3, #1
 802030a:	4413      	add	r3, r2
 802030c:	00db      	lsls	r3, r3, #3
 802030e:	440b      	add	r3, r1
 8020310:	3312      	adds	r3, #18
 8020312:	881b      	ldrh	r3, [r3, #0]
 8020314:	837b      	strh	r3, [r7, #26]
 8020316:	e01c      	b.n	8020352 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8020318:	7dfb      	ldrb	r3, [r7, #23]
 802031a:	2b01      	cmp	r3, #1
 802031c:	d919      	bls.n	8020352 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 802031e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020322:	495e      	ldr	r1, [pc, #376]	; (802049c <etharp_find_entry+0x2d4>)
 8020324:	4613      	mov	r3, r2
 8020326:	005b      	lsls	r3, r3, #1
 8020328:	4413      	add	r3, r2
 802032a:	00db      	lsls	r3, r3, #3
 802032c:	440b      	add	r3, r1
 802032e:	3312      	adds	r3, #18
 8020330:	881b      	ldrh	r3, [r3, #0]
 8020332:	8b3a      	ldrh	r2, [r7, #24]
 8020334:	429a      	cmp	r2, r3
 8020336:	d80c      	bhi.n	8020352 <etharp_find_entry+0x18a>
            old_stable = i;
 8020338:	8c3b      	ldrh	r3, [r7, #32]
 802033a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 802033c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020340:	4956      	ldr	r1, [pc, #344]	; (802049c <etharp_find_entry+0x2d4>)
 8020342:	4613      	mov	r3, r2
 8020344:	005b      	lsls	r3, r3, #1
 8020346:	4413      	add	r3, r2
 8020348:	00db      	lsls	r3, r3, #3
 802034a:	440b      	add	r3, r1
 802034c:	3312      	adds	r3, #18
 802034e:	881b      	ldrh	r3, [r3, #0]
 8020350:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020352:	8c3b      	ldrh	r3, [r7, #32]
 8020354:	3301      	adds	r3, #1
 8020356:	b29b      	uxth	r3, r3
 8020358:	843b      	strh	r3, [r7, #32]
 802035a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802035e:	2b31      	cmp	r3, #49	; 0x31
 8020360:	f77f af4c 	ble.w	80201fc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8020364:	7afb      	ldrb	r3, [r7, #11]
 8020366:	f003 0302 	and.w	r3, r3, #2
 802036a:	2b00      	cmp	r3, #0
 802036c:	d108      	bne.n	8020380 <etharp_find_entry+0x1b8>
 802036e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020372:	2b32      	cmp	r3, #50	; 0x32
 8020374:	d107      	bne.n	8020386 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8020376:	7afb      	ldrb	r3, [r7, #11]
 8020378:	f003 0301 	and.w	r3, r3, #1
 802037c:	2b00      	cmp	r3, #0
 802037e:	d102      	bne.n	8020386 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8020380:	f04f 33ff 	mov.w	r3, #4294967295
 8020384:	e085      	b.n	8020492 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8020386:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802038a:	2b31      	cmp	r3, #49	; 0x31
 802038c:	dc02      	bgt.n	8020394 <etharp_find_entry+0x1cc>
    i = empty;
 802038e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020390:	843b      	strh	r3, [r7, #32]
 8020392:	e039      	b.n	8020408 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8020394:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8020398:	2b31      	cmp	r3, #49	; 0x31
 802039a:	dc14      	bgt.n	80203c6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 802039c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802039e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80203a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80203a4:	493d      	ldr	r1, [pc, #244]	; (802049c <etharp_find_entry+0x2d4>)
 80203a6:	4613      	mov	r3, r2
 80203a8:	005b      	lsls	r3, r3, #1
 80203aa:	4413      	add	r3, r2
 80203ac:	00db      	lsls	r3, r3, #3
 80203ae:	440b      	add	r3, r1
 80203b0:	681b      	ldr	r3, [r3, #0]
 80203b2:	2b00      	cmp	r3, #0
 80203b4:	d018      	beq.n	80203e8 <etharp_find_entry+0x220>
 80203b6:	4b3a      	ldr	r3, [pc, #232]	; (80204a0 <etharp_find_entry+0x2d8>)
 80203b8:	f240 126d 	movw	r2, #365	; 0x16d
 80203bc:	493b      	ldr	r1, [pc, #236]	; (80204ac <etharp_find_entry+0x2e4>)
 80203be:	483a      	ldr	r0, [pc, #232]	; (80204a8 <etharp_find_entry+0x2e0>)
 80203c0:	f002 fad6 	bl	8022970 <iprintf>
 80203c4:	e010      	b.n	80203e8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80203c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80203ca:	2b31      	cmp	r3, #49	; 0x31
 80203cc:	dc02      	bgt.n	80203d4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80203ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80203d0:	843b      	strh	r3, [r7, #32]
 80203d2:	e009      	b.n	80203e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80203d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80203d8:	2b31      	cmp	r3, #49	; 0x31
 80203da:	dc02      	bgt.n	80203e2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80203dc:	8bfb      	ldrh	r3, [r7, #30]
 80203de:	843b      	strh	r3, [r7, #32]
 80203e0:	e002      	b.n	80203e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80203e2:	f04f 33ff 	mov.w	r3, #4294967295
 80203e6:	e054      	b.n	8020492 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80203e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80203ec:	2b31      	cmp	r3, #49	; 0x31
 80203ee:	dd06      	ble.n	80203fe <etharp_find_entry+0x236>
 80203f0:	4b2b      	ldr	r3, [pc, #172]	; (80204a0 <etharp_find_entry+0x2d8>)
 80203f2:	f240 127f 	movw	r2, #383	; 0x17f
 80203f6:	492e      	ldr	r1, [pc, #184]	; (80204b0 <etharp_find_entry+0x2e8>)
 80203f8:	482b      	ldr	r0, [pc, #172]	; (80204a8 <etharp_find_entry+0x2e0>)
 80203fa:	f002 fab9 	bl	8022970 <iprintf>
    etharp_free_entry(i);
 80203fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020402:	4618      	mov	r0, r3
 8020404:	f7ff fe06 	bl	8020014 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020408:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802040c:	2b31      	cmp	r3, #49	; 0x31
 802040e:	dd06      	ble.n	802041e <etharp_find_entry+0x256>
 8020410:	4b23      	ldr	r3, [pc, #140]	; (80204a0 <etharp_find_entry+0x2d8>)
 8020412:	f240 1283 	movw	r2, #387	; 0x183
 8020416:	4926      	ldr	r1, [pc, #152]	; (80204b0 <etharp_find_entry+0x2e8>)
 8020418:	4823      	ldr	r0, [pc, #140]	; (80204a8 <etharp_find_entry+0x2e0>)
 802041a:	f002 faa9 	bl	8022970 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 802041e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020422:	491e      	ldr	r1, [pc, #120]	; (802049c <etharp_find_entry+0x2d4>)
 8020424:	4613      	mov	r3, r2
 8020426:	005b      	lsls	r3, r3, #1
 8020428:	4413      	add	r3, r2
 802042a:	00db      	lsls	r3, r3, #3
 802042c:	440b      	add	r3, r1
 802042e:	3314      	adds	r3, #20
 8020430:	781b      	ldrb	r3, [r3, #0]
 8020432:	2b00      	cmp	r3, #0
 8020434:	d006      	beq.n	8020444 <etharp_find_entry+0x27c>
 8020436:	4b1a      	ldr	r3, [pc, #104]	; (80204a0 <etharp_find_entry+0x2d8>)
 8020438:	f44f 72c2 	mov.w	r2, #388	; 0x184
 802043c:	491d      	ldr	r1, [pc, #116]	; (80204b4 <etharp_find_entry+0x2ec>)
 802043e:	481a      	ldr	r0, [pc, #104]	; (80204a8 <etharp_find_entry+0x2e0>)
 8020440:	f002 fa96 	bl	8022970 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8020444:	68fb      	ldr	r3, [r7, #12]
 8020446:	2b00      	cmp	r3, #0
 8020448:	d00b      	beq.n	8020462 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 802044a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802044e:	68fb      	ldr	r3, [r7, #12]
 8020450:	6819      	ldr	r1, [r3, #0]
 8020452:	4812      	ldr	r0, [pc, #72]	; (802049c <etharp_find_entry+0x2d4>)
 8020454:	4613      	mov	r3, r2
 8020456:	005b      	lsls	r3, r3, #1
 8020458:	4413      	add	r3, r2
 802045a:	00db      	lsls	r3, r3, #3
 802045c:	4403      	add	r3, r0
 802045e:	3304      	adds	r3, #4
 8020460:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8020462:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020466:	490d      	ldr	r1, [pc, #52]	; (802049c <etharp_find_entry+0x2d4>)
 8020468:	4613      	mov	r3, r2
 802046a:	005b      	lsls	r3, r3, #1
 802046c:	4413      	add	r3, r2
 802046e:	00db      	lsls	r3, r3, #3
 8020470:	440b      	add	r3, r1
 8020472:	3312      	adds	r3, #18
 8020474:	2200      	movs	r2, #0
 8020476:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8020478:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802047c:	4907      	ldr	r1, [pc, #28]	; (802049c <etharp_find_entry+0x2d4>)
 802047e:	4613      	mov	r3, r2
 8020480:	005b      	lsls	r3, r3, #1
 8020482:	4413      	add	r3, r2
 8020484:	00db      	lsls	r3, r3, #3
 8020486:	440b      	add	r3, r1
 8020488:	3308      	adds	r3, #8
 802048a:	687a      	ldr	r2, [r7, #4]
 802048c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 802048e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8020492:	4618      	mov	r0, r3
 8020494:	3728      	adds	r7, #40	; 0x28
 8020496:	46bd      	mov	sp, r7
 8020498:	bd80      	pop	{r7, pc}
 802049a:	bf00      	nop
 802049c:	20013e6c 	.word	0x20013e6c
 80204a0:	08028788 	.word	0x08028788
 80204a4:	080287c0 	.word	0x080287c0
 80204a8:	08028800 	.word	0x08028800
 80204ac:	08028828 	.word	0x08028828
 80204b0:	08028840 	.word	0x08028840
 80204b4:	08028854 	.word	0x08028854

080204b8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80204b8:	b580      	push	{r7, lr}
 80204ba:	b088      	sub	sp, #32
 80204bc:	af02      	add	r7, sp, #8
 80204be:	60f8      	str	r0, [r7, #12]
 80204c0:	60b9      	str	r1, [r7, #8]
 80204c2:	607a      	str	r2, [r7, #4]
 80204c4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80204c6:	68fb      	ldr	r3, [r7, #12]
 80204c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80204cc:	2b06      	cmp	r3, #6
 80204ce:	d006      	beq.n	80204de <etharp_update_arp_entry+0x26>
 80204d0:	4b48      	ldr	r3, [pc, #288]	; (80205f4 <etharp_update_arp_entry+0x13c>)
 80204d2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80204d6:	4948      	ldr	r1, [pc, #288]	; (80205f8 <etharp_update_arp_entry+0x140>)
 80204d8:	4848      	ldr	r0, [pc, #288]	; (80205fc <etharp_update_arp_entry+0x144>)
 80204da:	f002 fa49 	bl	8022970 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80204de:	68bb      	ldr	r3, [r7, #8]
 80204e0:	2b00      	cmp	r3, #0
 80204e2:	d012      	beq.n	802050a <etharp_update_arp_entry+0x52>
 80204e4:	68bb      	ldr	r3, [r7, #8]
 80204e6:	681b      	ldr	r3, [r3, #0]
 80204e8:	2b00      	cmp	r3, #0
 80204ea:	d00e      	beq.n	802050a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80204ec:	68bb      	ldr	r3, [r7, #8]
 80204ee:	681b      	ldr	r3, [r3, #0]
 80204f0:	68f9      	ldr	r1, [r7, #12]
 80204f2:	4618      	mov	r0, r3
 80204f4:	f001 f902 	bl	80216fc <ip4_addr_isbroadcast_u32>
 80204f8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80204fa:	2b00      	cmp	r3, #0
 80204fc:	d105      	bne.n	802050a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80204fe:	68bb      	ldr	r3, [r7, #8]
 8020500:	681b      	ldr	r3, [r3, #0]
 8020502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020506:	2be0      	cmp	r3, #224	; 0xe0
 8020508:	d102      	bne.n	8020510 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 802050a:	f06f 030f 	mvn.w	r3, #15
 802050e:	e06c      	b.n	80205ea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8020510:	78fb      	ldrb	r3, [r7, #3]
 8020512:	68fa      	ldr	r2, [r7, #12]
 8020514:	4619      	mov	r1, r3
 8020516:	68b8      	ldr	r0, [r7, #8]
 8020518:	f7ff fe56 	bl	80201c8 <etharp_find_entry>
 802051c:	4603      	mov	r3, r0
 802051e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8020520:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020524:	2b00      	cmp	r3, #0
 8020526:	da02      	bge.n	802052e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8020528:	8afb      	ldrh	r3, [r7, #22]
 802052a:	b25b      	sxtb	r3, r3
 802052c:	e05d      	b.n	80205ea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 802052e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020532:	4933      	ldr	r1, [pc, #204]	; (8020600 <etharp_update_arp_entry+0x148>)
 8020534:	4613      	mov	r3, r2
 8020536:	005b      	lsls	r3, r3, #1
 8020538:	4413      	add	r3, r2
 802053a:	00db      	lsls	r3, r3, #3
 802053c:	440b      	add	r3, r1
 802053e:	3314      	adds	r3, #20
 8020540:	2202      	movs	r2, #2
 8020542:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8020544:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020548:	492d      	ldr	r1, [pc, #180]	; (8020600 <etharp_update_arp_entry+0x148>)
 802054a:	4613      	mov	r3, r2
 802054c:	005b      	lsls	r3, r3, #1
 802054e:	4413      	add	r3, r2
 8020550:	00db      	lsls	r3, r3, #3
 8020552:	440b      	add	r3, r1
 8020554:	3308      	adds	r3, #8
 8020556:	68fa      	ldr	r2, [r7, #12]
 8020558:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 802055a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802055e:	4613      	mov	r3, r2
 8020560:	005b      	lsls	r3, r3, #1
 8020562:	4413      	add	r3, r2
 8020564:	00db      	lsls	r3, r3, #3
 8020566:	3308      	adds	r3, #8
 8020568:	4a25      	ldr	r2, [pc, #148]	; (8020600 <etharp_update_arp_entry+0x148>)
 802056a:	4413      	add	r3, r2
 802056c:	3304      	adds	r3, #4
 802056e:	2206      	movs	r2, #6
 8020570:	6879      	ldr	r1, [r7, #4]
 8020572:	4618      	mov	r0, r3
 8020574:	f002 f8ec 	bl	8022750 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8020578:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802057c:	4920      	ldr	r1, [pc, #128]	; (8020600 <etharp_update_arp_entry+0x148>)
 802057e:	4613      	mov	r3, r2
 8020580:	005b      	lsls	r3, r3, #1
 8020582:	4413      	add	r3, r2
 8020584:	00db      	lsls	r3, r3, #3
 8020586:	440b      	add	r3, r1
 8020588:	3312      	adds	r3, #18
 802058a:	2200      	movs	r2, #0
 802058c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 802058e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020592:	491b      	ldr	r1, [pc, #108]	; (8020600 <etharp_update_arp_entry+0x148>)
 8020594:	4613      	mov	r3, r2
 8020596:	005b      	lsls	r3, r3, #1
 8020598:	4413      	add	r3, r2
 802059a:	00db      	lsls	r3, r3, #3
 802059c:	440b      	add	r3, r1
 802059e:	681b      	ldr	r3, [r3, #0]
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	d021      	beq.n	80205e8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80205a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80205a8:	4915      	ldr	r1, [pc, #84]	; (8020600 <etharp_update_arp_entry+0x148>)
 80205aa:	4613      	mov	r3, r2
 80205ac:	005b      	lsls	r3, r3, #1
 80205ae:	4413      	add	r3, r2
 80205b0:	00db      	lsls	r3, r3, #3
 80205b2:	440b      	add	r3, r1
 80205b4:	681b      	ldr	r3, [r3, #0]
 80205b6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80205b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80205bc:	4910      	ldr	r1, [pc, #64]	; (8020600 <etharp_update_arp_entry+0x148>)
 80205be:	4613      	mov	r3, r2
 80205c0:	005b      	lsls	r3, r3, #1
 80205c2:	4413      	add	r3, r2
 80205c4:	00db      	lsls	r3, r3, #3
 80205c6:	440b      	add	r3, r1
 80205c8:	2200      	movs	r2, #0
 80205ca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80205cc:	68fb      	ldr	r3, [r7, #12]
 80205ce:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80205d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80205d6:	9300      	str	r3, [sp, #0]
 80205d8:	687b      	ldr	r3, [r7, #4]
 80205da:	6939      	ldr	r1, [r7, #16]
 80205dc:	68f8      	ldr	r0, [r7, #12]
 80205de:	f002 f82b 	bl	8022638 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80205e2:	6938      	ldr	r0, [r7, #16]
 80205e4:	f7fe fc8c 	bl	801ef00 <pbuf_free>
  }
  return ERR_OK;
 80205e8:	2300      	movs	r3, #0
}
 80205ea:	4618      	mov	r0, r3
 80205ec:	3718      	adds	r7, #24
 80205ee:	46bd      	mov	sp, r7
 80205f0:	bd80      	pop	{r7, pc}
 80205f2:	bf00      	nop
 80205f4:	08028788 	.word	0x08028788
 80205f8:	08028880 	.word	0x08028880
 80205fc:	08028800 	.word	0x08028800
 8020600:	20013e6c 	.word	0x20013e6c

08020604 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8020604:	b580      	push	{r7, lr}
 8020606:	b084      	sub	sp, #16
 8020608:	af00      	add	r7, sp, #0
 802060a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802060c:	2300      	movs	r3, #0
 802060e:	60fb      	str	r3, [r7, #12]
 8020610:	e01e      	b.n	8020650 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8020612:	4913      	ldr	r1, [pc, #76]	; (8020660 <etharp_cleanup_netif+0x5c>)
 8020614:	68fa      	ldr	r2, [r7, #12]
 8020616:	4613      	mov	r3, r2
 8020618:	005b      	lsls	r3, r3, #1
 802061a:	4413      	add	r3, r2
 802061c:	00db      	lsls	r3, r3, #3
 802061e:	440b      	add	r3, r1
 8020620:	3314      	adds	r3, #20
 8020622:	781b      	ldrb	r3, [r3, #0]
 8020624:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8020626:	7afb      	ldrb	r3, [r7, #11]
 8020628:	2b00      	cmp	r3, #0
 802062a:	d00e      	beq.n	802064a <etharp_cleanup_netif+0x46>
 802062c:	490c      	ldr	r1, [pc, #48]	; (8020660 <etharp_cleanup_netif+0x5c>)
 802062e:	68fa      	ldr	r2, [r7, #12]
 8020630:	4613      	mov	r3, r2
 8020632:	005b      	lsls	r3, r3, #1
 8020634:	4413      	add	r3, r2
 8020636:	00db      	lsls	r3, r3, #3
 8020638:	440b      	add	r3, r1
 802063a:	3308      	adds	r3, #8
 802063c:	681b      	ldr	r3, [r3, #0]
 802063e:	687a      	ldr	r2, [r7, #4]
 8020640:	429a      	cmp	r2, r3
 8020642:	d102      	bne.n	802064a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8020644:	68f8      	ldr	r0, [r7, #12]
 8020646:	f7ff fce5 	bl	8020014 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802064a:	68fb      	ldr	r3, [r7, #12]
 802064c:	3301      	adds	r3, #1
 802064e:	60fb      	str	r3, [r7, #12]
 8020650:	68fb      	ldr	r3, [r7, #12]
 8020652:	2b31      	cmp	r3, #49	; 0x31
 8020654:	dddd      	ble.n	8020612 <etharp_cleanup_netif+0xe>
    }
  }
}
 8020656:	bf00      	nop
 8020658:	bf00      	nop
 802065a:	3710      	adds	r7, #16
 802065c:	46bd      	mov	sp, r7
 802065e:	bd80      	pop	{r7, pc}
 8020660:	20013e6c 	.word	0x20013e6c

08020664 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8020664:	b5b0      	push	{r4, r5, r7, lr}
 8020666:	b08a      	sub	sp, #40	; 0x28
 8020668:	af04      	add	r7, sp, #16
 802066a:	6078      	str	r0, [r7, #4]
 802066c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802066e:	683b      	ldr	r3, [r7, #0]
 8020670:	2b00      	cmp	r3, #0
 8020672:	d107      	bne.n	8020684 <etharp_input+0x20>
 8020674:	4b3d      	ldr	r3, [pc, #244]	; (802076c <etharp_input+0x108>)
 8020676:	f240 228a 	movw	r2, #650	; 0x28a
 802067a:	493d      	ldr	r1, [pc, #244]	; (8020770 <etharp_input+0x10c>)
 802067c:	483d      	ldr	r0, [pc, #244]	; (8020774 <etharp_input+0x110>)
 802067e:	f002 f977 	bl	8022970 <iprintf>
 8020682:	e06f      	b.n	8020764 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8020684:	687b      	ldr	r3, [r7, #4]
 8020686:	685b      	ldr	r3, [r3, #4]
 8020688:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 802068a:	693b      	ldr	r3, [r7, #16]
 802068c:	881b      	ldrh	r3, [r3, #0]
 802068e:	b29b      	uxth	r3, r3
 8020690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020694:	d10c      	bne.n	80206b0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8020696:	693b      	ldr	r3, [r7, #16]
 8020698:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 802069a:	2b06      	cmp	r3, #6
 802069c:	d108      	bne.n	80206b0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 802069e:	693b      	ldr	r3, [r7, #16]
 80206a0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80206a2:	2b04      	cmp	r3, #4
 80206a4:	d104      	bne.n	80206b0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80206a6:	693b      	ldr	r3, [r7, #16]
 80206a8:	885b      	ldrh	r3, [r3, #2]
 80206aa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80206ac:	2b08      	cmp	r3, #8
 80206ae:	d003      	beq.n	80206b8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80206b0:	6878      	ldr	r0, [r7, #4]
 80206b2:	f7fe fc25 	bl	801ef00 <pbuf_free>
    return;
 80206b6:	e055      	b.n	8020764 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80206b8:	693b      	ldr	r3, [r7, #16]
 80206ba:	330e      	adds	r3, #14
 80206bc:	681b      	ldr	r3, [r3, #0]
 80206be:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80206c0:	693b      	ldr	r3, [r7, #16]
 80206c2:	3318      	adds	r3, #24
 80206c4:	681b      	ldr	r3, [r3, #0]
 80206c6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80206c8:	683b      	ldr	r3, [r7, #0]
 80206ca:	3304      	adds	r3, #4
 80206cc:	681b      	ldr	r3, [r3, #0]
 80206ce:	2b00      	cmp	r3, #0
 80206d0:	d102      	bne.n	80206d8 <etharp_input+0x74>
    for_us = 0;
 80206d2:	2300      	movs	r3, #0
 80206d4:	75fb      	strb	r3, [r7, #23]
 80206d6:	e009      	b.n	80206ec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80206d8:	68ba      	ldr	r2, [r7, #8]
 80206da:	683b      	ldr	r3, [r7, #0]
 80206dc:	3304      	adds	r3, #4
 80206de:	681b      	ldr	r3, [r3, #0]
 80206e0:	429a      	cmp	r2, r3
 80206e2:	bf0c      	ite	eq
 80206e4:	2301      	moveq	r3, #1
 80206e6:	2300      	movne	r3, #0
 80206e8:	b2db      	uxtb	r3, r3
 80206ea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80206ec:	693b      	ldr	r3, [r7, #16]
 80206ee:	f103 0208 	add.w	r2, r3, #8
 80206f2:	7dfb      	ldrb	r3, [r7, #23]
 80206f4:	2b00      	cmp	r3, #0
 80206f6:	d001      	beq.n	80206fc <etharp_input+0x98>
 80206f8:	2301      	movs	r3, #1
 80206fa:	e000      	b.n	80206fe <etharp_input+0x9a>
 80206fc:	2302      	movs	r3, #2
 80206fe:	f107 010c 	add.w	r1, r7, #12
 8020702:	6838      	ldr	r0, [r7, #0]
 8020704:	f7ff fed8 	bl	80204b8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8020708:	693b      	ldr	r3, [r7, #16]
 802070a:	88db      	ldrh	r3, [r3, #6]
 802070c:	b29b      	uxth	r3, r3
 802070e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020712:	d003      	beq.n	802071c <etharp_input+0xb8>
 8020714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020718:	d01e      	beq.n	8020758 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 802071a:	e020      	b.n	802075e <etharp_input+0xfa>
      if (for_us) {
 802071c:	7dfb      	ldrb	r3, [r7, #23]
 802071e:	2b00      	cmp	r3, #0
 8020720:	d01c      	beq.n	802075c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8020722:	683b      	ldr	r3, [r7, #0]
 8020724:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8020728:	693b      	ldr	r3, [r7, #16]
 802072a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 802072e:	683b      	ldr	r3, [r7, #0]
 8020730:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8020734:	683b      	ldr	r3, [r7, #0]
 8020736:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8020738:	693a      	ldr	r2, [r7, #16]
 802073a:	3208      	adds	r2, #8
        etharp_raw(netif,
 802073c:	2102      	movs	r1, #2
 802073e:	9103      	str	r1, [sp, #12]
 8020740:	f107 010c 	add.w	r1, r7, #12
 8020744:	9102      	str	r1, [sp, #8]
 8020746:	9201      	str	r2, [sp, #4]
 8020748:	9300      	str	r3, [sp, #0]
 802074a:	462b      	mov	r3, r5
 802074c:	4622      	mov	r2, r4
 802074e:	4601      	mov	r1, r0
 8020750:	6838      	ldr	r0, [r7, #0]
 8020752:	f000 faeb 	bl	8020d2c <etharp_raw>
      break;
 8020756:	e001      	b.n	802075c <etharp_input+0xf8>
      break;
 8020758:	bf00      	nop
 802075a:	e000      	b.n	802075e <etharp_input+0xfa>
      break;
 802075c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 802075e:	6878      	ldr	r0, [r7, #4]
 8020760:	f7fe fbce 	bl	801ef00 <pbuf_free>
}
 8020764:	3718      	adds	r7, #24
 8020766:	46bd      	mov	sp, r7
 8020768:	bdb0      	pop	{r4, r5, r7, pc}
 802076a:	bf00      	nop
 802076c:	08028788 	.word	0x08028788
 8020770:	080288d8 	.word	0x080288d8
 8020774:	08028800 	.word	0x08028800

08020778 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8020778:	b580      	push	{r7, lr}
 802077a:	b086      	sub	sp, #24
 802077c:	af02      	add	r7, sp, #8
 802077e:	60f8      	str	r0, [r7, #12]
 8020780:	60b9      	str	r1, [r7, #8]
 8020782:	4613      	mov	r3, r2
 8020784:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8020786:	79fa      	ldrb	r2, [r7, #7]
 8020788:	4944      	ldr	r1, [pc, #272]	; (802089c <etharp_output_to_arp_index+0x124>)
 802078a:	4613      	mov	r3, r2
 802078c:	005b      	lsls	r3, r3, #1
 802078e:	4413      	add	r3, r2
 8020790:	00db      	lsls	r3, r3, #3
 8020792:	440b      	add	r3, r1
 8020794:	3314      	adds	r3, #20
 8020796:	781b      	ldrb	r3, [r3, #0]
 8020798:	2b01      	cmp	r3, #1
 802079a:	d806      	bhi.n	80207aa <etharp_output_to_arp_index+0x32>
 802079c:	4b40      	ldr	r3, [pc, #256]	; (80208a0 <etharp_output_to_arp_index+0x128>)
 802079e:	f240 22ee 	movw	r2, #750	; 0x2ee
 80207a2:	4940      	ldr	r1, [pc, #256]	; (80208a4 <etharp_output_to_arp_index+0x12c>)
 80207a4:	4840      	ldr	r0, [pc, #256]	; (80208a8 <etharp_output_to_arp_index+0x130>)
 80207a6:	f002 f8e3 	bl	8022970 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80207aa:	79fa      	ldrb	r2, [r7, #7]
 80207ac:	493b      	ldr	r1, [pc, #236]	; (802089c <etharp_output_to_arp_index+0x124>)
 80207ae:	4613      	mov	r3, r2
 80207b0:	005b      	lsls	r3, r3, #1
 80207b2:	4413      	add	r3, r2
 80207b4:	00db      	lsls	r3, r3, #3
 80207b6:	440b      	add	r3, r1
 80207b8:	3314      	adds	r3, #20
 80207ba:	781b      	ldrb	r3, [r3, #0]
 80207bc:	2b02      	cmp	r3, #2
 80207be:	d153      	bne.n	8020868 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80207c0:	79fa      	ldrb	r2, [r7, #7]
 80207c2:	4936      	ldr	r1, [pc, #216]	; (802089c <etharp_output_to_arp_index+0x124>)
 80207c4:	4613      	mov	r3, r2
 80207c6:	005b      	lsls	r3, r3, #1
 80207c8:	4413      	add	r3, r2
 80207ca:	00db      	lsls	r3, r3, #3
 80207cc:	440b      	add	r3, r1
 80207ce:	3312      	adds	r3, #18
 80207d0:	881b      	ldrh	r3, [r3, #0]
 80207d2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80207d6:	d919      	bls.n	802080c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80207d8:	79fa      	ldrb	r2, [r7, #7]
 80207da:	4613      	mov	r3, r2
 80207dc:	005b      	lsls	r3, r3, #1
 80207de:	4413      	add	r3, r2
 80207e0:	00db      	lsls	r3, r3, #3
 80207e2:	4a2e      	ldr	r2, [pc, #184]	; (802089c <etharp_output_to_arp_index+0x124>)
 80207e4:	4413      	add	r3, r2
 80207e6:	3304      	adds	r3, #4
 80207e8:	4619      	mov	r1, r3
 80207ea:	68f8      	ldr	r0, [r7, #12]
 80207ec:	f000 fb4c 	bl	8020e88 <etharp_request>
 80207f0:	4603      	mov	r3, r0
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d138      	bne.n	8020868 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80207f6:	79fa      	ldrb	r2, [r7, #7]
 80207f8:	4928      	ldr	r1, [pc, #160]	; (802089c <etharp_output_to_arp_index+0x124>)
 80207fa:	4613      	mov	r3, r2
 80207fc:	005b      	lsls	r3, r3, #1
 80207fe:	4413      	add	r3, r2
 8020800:	00db      	lsls	r3, r3, #3
 8020802:	440b      	add	r3, r1
 8020804:	3314      	adds	r3, #20
 8020806:	2203      	movs	r2, #3
 8020808:	701a      	strb	r2, [r3, #0]
 802080a:	e02d      	b.n	8020868 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 802080c:	79fa      	ldrb	r2, [r7, #7]
 802080e:	4923      	ldr	r1, [pc, #140]	; (802089c <etharp_output_to_arp_index+0x124>)
 8020810:	4613      	mov	r3, r2
 8020812:	005b      	lsls	r3, r3, #1
 8020814:	4413      	add	r3, r2
 8020816:	00db      	lsls	r3, r3, #3
 8020818:	440b      	add	r3, r1
 802081a:	3312      	adds	r3, #18
 802081c:	881b      	ldrh	r3, [r3, #0]
 802081e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8020822:	d321      	bcc.n	8020868 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8020824:	79fa      	ldrb	r2, [r7, #7]
 8020826:	4613      	mov	r3, r2
 8020828:	005b      	lsls	r3, r3, #1
 802082a:	4413      	add	r3, r2
 802082c:	00db      	lsls	r3, r3, #3
 802082e:	4a1b      	ldr	r2, [pc, #108]	; (802089c <etharp_output_to_arp_index+0x124>)
 8020830:	4413      	add	r3, r2
 8020832:	1d19      	adds	r1, r3, #4
 8020834:	79fa      	ldrb	r2, [r7, #7]
 8020836:	4613      	mov	r3, r2
 8020838:	005b      	lsls	r3, r3, #1
 802083a:	4413      	add	r3, r2
 802083c:	00db      	lsls	r3, r3, #3
 802083e:	3308      	adds	r3, #8
 8020840:	4a16      	ldr	r2, [pc, #88]	; (802089c <etharp_output_to_arp_index+0x124>)
 8020842:	4413      	add	r3, r2
 8020844:	3304      	adds	r3, #4
 8020846:	461a      	mov	r2, r3
 8020848:	68f8      	ldr	r0, [r7, #12]
 802084a:	f000 fafb 	bl	8020e44 <etharp_request_dst>
 802084e:	4603      	mov	r3, r0
 8020850:	2b00      	cmp	r3, #0
 8020852:	d109      	bne.n	8020868 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020854:	79fa      	ldrb	r2, [r7, #7]
 8020856:	4911      	ldr	r1, [pc, #68]	; (802089c <etharp_output_to_arp_index+0x124>)
 8020858:	4613      	mov	r3, r2
 802085a:	005b      	lsls	r3, r3, #1
 802085c:	4413      	add	r3, r2
 802085e:	00db      	lsls	r3, r3, #3
 8020860:	440b      	add	r3, r1
 8020862:	3314      	adds	r3, #20
 8020864:	2203      	movs	r2, #3
 8020866:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8020868:	68fb      	ldr	r3, [r7, #12]
 802086a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 802086e:	79fa      	ldrb	r2, [r7, #7]
 8020870:	4613      	mov	r3, r2
 8020872:	005b      	lsls	r3, r3, #1
 8020874:	4413      	add	r3, r2
 8020876:	00db      	lsls	r3, r3, #3
 8020878:	3308      	adds	r3, #8
 802087a:	4a08      	ldr	r2, [pc, #32]	; (802089c <etharp_output_to_arp_index+0x124>)
 802087c:	4413      	add	r3, r2
 802087e:	3304      	adds	r3, #4
 8020880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020884:	9200      	str	r2, [sp, #0]
 8020886:	460a      	mov	r2, r1
 8020888:	68b9      	ldr	r1, [r7, #8]
 802088a:	68f8      	ldr	r0, [r7, #12]
 802088c:	f001 fed4 	bl	8022638 <ethernet_output>
 8020890:	4603      	mov	r3, r0
}
 8020892:	4618      	mov	r0, r3
 8020894:	3710      	adds	r7, #16
 8020896:	46bd      	mov	sp, r7
 8020898:	bd80      	pop	{r7, pc}
 802089a:	bf00      	nop
 802089c:	20013e6c 	.word	0x20013e6c
 80208a0:	08028788 	.word	0x08028788
 80208a4:	080288f8 	.word	0x080288f8
 80208a8:	08028800 	.word	0x08028800

080208ac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80208ac:	b580      	push	{r7, lr}
 80208ae:	b08a      	sub	sp, #40	; 0x28
 80208b0:	af02      	add	r7, sp, #8
 80208b2:	60f8      	str	r0, [r7, #12]
 80208b4:	60b9      	str	r1, [r7, #8]
 80208b6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80208b8:	687b      	ldr	r3, [r7, #4]
 80208ba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80208bc:	68fb      	ldr	r3, [r7, #12]
 80208be:	2b00      	cmp	r3, #0
 80208c0:	d106      	bne.n	80208d0 <etharp_output+0x24>
 80208c2:	4b73      	ldr	r3, [pc, #460]	; (8020a90 <etharp_output+0x1e4>)
 80208c4:	f240 321e 	movw	r2, #798	; 0x31e
 80208c8:	4972      	ldr	r1, [pc, #456]	; (8020a94 <etharp_output+0x1e8>)
 80208ca:	4873      	ldr	r0, [pc, #460]	; (8020a98 <etharp_output+0x1ec>)
 80208cc:	f002 f850 	bl	8022970 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80208d0:	68bb      	ldr	r3, [r7, #8]
 80208d2:	2b00      	cmp	r3, #0
 80208d4:	d106      	bne.n	80208e4 <etharp_output+0x38>
 80208d6:	4b6e      	ldr	r3, [pc, #440]	; (8020a90 <etharp_output+0x1e4>)
 80208d8:	f240 321f 	movw	r2, #799	; 0x31f
 80208dc:	496f      	ldr	r1, [pc, #444]	; (8020a9c <etharp_output+0x1f0>)
 80208de:	486e      	ldr	r0, [pc, #440]	; (8020a98 <etharp_output+0x1ec>)
 80208e0:	f002 f846 	bl	8022970 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80208e4:	687b      	ldr	r3, [r7, #4]
 80208e6:	2b00      	cmp	r3, #0
 80208e8:	d106      	bne.n	80208f8 <etharp_output+0x4c>
 80208ea:	4b69      	ldr	r3, [pc, #420]	; (8020a90 <etharp_output+0x1e4>)
 80208ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80208f0:	496b      	ldr	r1, [pc, #428]	; (8020aa0 <etharp_output+0x1f4>)
 80208f2:	4869      	ldr	r0, [pc, #420]	; (8020a98 <etharp_output+0x1ec>)
 80208f4:	f002 f83c 	bl	8022970 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80208f8:	687b      	ldr	r3, [r7, #4]
 80208fa:	681b      	ldr	r3, [r3, #0]
 80208fc:	68f9      	ldr	r1, [r7, #12]
 80208fe:	4618      	mov	r0, r3
 8020900:	f000 fefc 	bl	80216fc <ip4_addr_isbroadcast_u32>
 8020904:	4603      	mov	r3, r0
 8020906:	2b00      	cmp	r3, #0
 8020908:	d002      	beq.n	8020910 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 802090a:	4b66      	ldr	r3, [pc, #408]	; (8020aa4 <etharp_output+0x1f8>)
 802090c:	61fb      	str	r3, [r7, #28]
 802090e:	e0af      	b.n	8020a70 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	681b      	ldr	r3, [r3, #0]
 8020914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020918:	2be0      	cmp	r3, #224	; 0xe0
 802091a:	d118      	bne.n	802094e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 802091c:	2301      	movs	r3, #1
 802091e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8020920:	2300      	movs	r3, #0
 8020922:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8020924:	235e      	movs	r3, #94	; 0x5e
 8020926:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8020928:	687b      	ldr	r3, [r7, #4]
 802092a:	3301      	adds	r3, #1
 802092c:	781b      	ldrb	r3, [r3, #0]
 802092e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020932:	b2db      	uxtb	r3, r3
 8020934:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	3302      	adds	r3, #2
 802093a:	781b      	ldrb	r3, [r3, #0]
 802093c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802093e:	687b      	ldr	r3, [r7, #4]
 8020940:	3303      	adds	r3, #3
 8020942:	781b      	ldrb	r3, [r3, #0]
 8020944:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8020946:	f107 0310 	add.w	r3, r7, #16
 802094a:	61fb      	str	r3, [r7, #28]
 802094c:	e090      	b.n	8020a70 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802094e:	687b      	ldr	r3, [r7, #4]
 8020950:	681a      	ldr	r2, [r3, #0]
 8020952:	68fb      	ldr	r3, [r7, #12]
 8020954:	3304      	adds	r3, #4
 8020956:	681b      	ldr	r3, [r3, #0]
 8020958:	405a      	eors	r2, r3
 802095a:	68fb      	ldr	r3, [r7, #12]
 802095c:	3308      	adds	r3, #8
 802095e:	681b      	ldr	r3, [r3, #0]
 8020960:	4013      	ands	r3, r2
 8020962:	2b00      	cmp	r3, #0
 8020964:	d012      	beq.n	802098c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8020966:	687b      	ldr	r3, [r7, #4]
 8020968:	681b      	ldr	r3, [r3, #0]
 802096a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802096c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8020970:	4293      	cmp	r3, r2
 8020972:	d00b      	beq.n	802098c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8020974:	68fb      	ldr	r3, [r7, #12]
 8020976:	330c      	adds	r3, #12
 8020978:	681b      	ldr	r3, [r3, #0]
 802097a:	2b00      	cmp	r3, #0
 802097c:	d003      	beq.n	8020986 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 802097e:	68fb      	ldr	r3, [r7, #12]
 8020980:	330c      	adds	r3, #12
 8020982:	61bb      	str	r3, [r7, #24]
 8020984:	e002      	b.n	802098c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8020986:	f06f 0303 	mvn.w	r3, #3
 802098a:	e07d      	b.n	8020a88 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 802098c:	4b46      	ldr	r3, [pc, #280]	; (8020aa8 <etharp_output+0x1fc>)
 802098e:	781b      	ldrb	r3, [r3, #0]
 8020990:	4619      	mov	r1, r3
 8020992:	4a46      	ldr	r2, [pc, #280]	; (8020aac <etharp_output+0x200>)
 8020994:	460b      	mov	r3, r1
 8020996:	005b      	lsls	r3, r3, #1
 8020998:	440b      	add	r3, r1
 802099a:	00db      	lsls	r3, r3, #3
 802099c:	4413      	add	r3, r2
 802099e:	3314      	adds	r3, #20
 80209a0:	781b      	ldrb	r3, [r3, #0]
 80209a2:	2b01      	cmp	r3, #1
 80209a4:	d925      	bls.n	80209f2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80209a6:	4b40      	ldr	r3, [pc, #256]	; (8020aa8 <etharp_output+0x1fc>)
 80209a8:	781b      	ldrb	r3, [r3, #0]
 80209aa:	4619      	mov	r1, r3
 80209ac:	4a3f      	ldr	r2, [pc, #252]	; (8020aac <etharp_output+0x200>)
 80209ae:	460b      	mov	r3, r1
 80209b0:	005b      	lsls	r3, r3, #1
 80209b2:	440b      	add	r3, r1
 80209b4:	00db      	lsls	r3, r3, #3
 80209b6:	4413      	add	r3, r2
 80209b8:	3308      	adds	r3, #8
 80209ba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80209bc:	68fa      	ldr	r2, [r7, #12]
 80209be:	429a      	cmp	r2, r3
 80209c0:	d117      	bne.n	80209f2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80209c2:	69bb      	ldr	r3, [r7, #24]
 80209c4:	681a      	ldr	r2, [r3, #0]
 80209c6:	4b38      	ldr	r3, [pc, #224]	; (8020aa8 <etharp_output+0x1fc>)
 80209c8:	781b      	ldrb	r3, [r3, #0]
 80209ca:	4618      	mov	r0, r3
 80209cc:	4937      	ldr	r1, [pc, #220]	; (8020aac <etharp_output+0x200>)
 80209ce:	4603      	mov	r3, r0
 80209d0:	005b      	lsls	r3, r3, #1
 80209d2:	4403      	add	r3, r0
 80209d4:	00db      	lsls	r3, r3, #3
 80209d6:	440b      	add	r3, r1
 80209d8:	3304      	adds	r3, #4
 80209da:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80209dc:	429a      	cmp	r2, r3
 80209de:	d108      	bne.n	80209f2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80209e0:	4b31      	ldr	r3, [pc, #196]	; (8020aa8 <etharp_output+0x1fc>)
 80209e2:	781b      	ldrb	r3, [r3, #0]
 80209e4:	461a      	mov	r2, r3
 80209e6:	68b9      	ldr	r1, [r7, #8]
 80209e8:	68f8      	ldr	r0, [r7, #12]
 80209ea:	f7ff fec5 	bl	8020778 <etharp_output_to_arp_index>
 80209ee:	4603      	mov	r3, r0
 80209f0:	e04a      	b.n	8020a88 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80209f2:	2300      	movs	r3, #0
 80209f4:	75fb      	strb	r3, [r7, #23]
 80209f6:	e031      	b.n	8020a5c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80209f8:	7dfa      	ldrb	r2, [r7, #23]
 80209fa:	492c      	ldr	r1, [pc, #176]	; (8020aac <etharp_output+0x200>)
 80209fc:	4613      	mov	r3, r2
 80209fe:	005b      	lsls	r3, r3, #1
 8020a00:	4413      	add	r3, r2
 8020a02:	00db      	lsls	r3, r3, #3
 8020a04:	440b      	add	r3, r1
 8020a06:	3314      	adds	r3, #20
 8020a08:	781b      	ldrb	r3, [r3, #0]
 8020a0a:	2b01      	cmp	r3, #1
 8020a0c:	d923      	bls.n	8020a56 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8020a0e:	7dfa      	ldrb	r2, [r7, #23]
 8020a10:	4926      	ldr	r1, [pc, #152]	; (8020aac <etharp_output+0x200>)
 8020a12:	4613      	mov	r3, r2
 8020a14:	005b      	lsls	r3, r3, #1
 8020a16:	4413      	add	r3, r2
 8020a18:	00db      	lsls	r3, r3, #3
 8020a1a:	440b      	add	r3, r1
 8020a1c:	3308      	adds	r3, #8
 8020a1e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020a20:	68fa      	ldr	r2, [r7, #12]
 8020a22:	429a      	cmp	r2, r3
 8020a24:	d117      	bne.n	8020a56 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8020a26:	69bb      	ldr	r3, [r7, #24]
 8020a28:	6819      	ldr	r1, [r3, #0]
 8020a2a:	7dfa      	ldrb	r2, [r7, #23]
 8020a2c:	481f      	ldr	r0, [pc, #124]	; (8020aac <etharp_output+0x200>)
 8020a2e:	4613      	mov	r3, r2
 8020a30:	005b      	lsls	r3, r3, #1
 8020a32:	4413      	add	r3, r2
 8020a34:	00db      	lsls	r3, r3, #3
 8020a36:	4403      	add	r3, r0
 8020a38:	3304      	adds	r3, #4
 8020a3a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8020a3c:	4299      	cmp	r1, r3
 8020a3e:	d10a      	bne.n	8020a56 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8020a40:	4a19      	ldr	r2, [pc, #100]	; (8020aa8 <etharp_output+0x1fc>)
 8020a42:	7dfb      	ldrb	r3, [r7, #23]
 8020a44:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8020a46:	7dfb      	ldrb	r3, [r7, #23]
 8020a48:	461a      	mov	r2, r3
 8020a4a:	68b9      	ldr	r1, [r7, #8]
 8020a4c:	68f8      	ldr	r0, [r7, #12]
 8020a4e:	f7ff fe93 	bl	8020778 <etharp_output_to_arp_index>
 8020a52:	4603      	mov	r3, r0
 8020a54:	e018      	b.n	8020a88 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020a56:	7dfb      	ldrb	r3, [r7, #23]
 8020a58:	3301      	adds	r3, #1
 8020a5a:	75fb      	strb	r3, [r7, #23]
 8020a5c:	7dfb      	ldrb	r3, [r7, #23]
 8020a5e:	2b31      	cmp	r3, #49	; 0x31
 8020a60:	d9ca      	bls.n	80209f8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8020a62:	68ba      	ldr	r2, [r7, #8]
 8020a64:	69b9      	ldr	r1, [r7, #24]
 8020a66:	68f8      	ldr	r0, [r7, #12]
 8020a68:	f000 f822 	bl	8020ab0 <etharp_query>
 8020a6c:	4603      	mov	r3, r0
 8020a6e:	e00b      	b.n	8020a88 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8020a70:	68fb      	ldr	r3, [r7, #12]
 8020a72:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8020a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020a7a:	9300      	str	r3, [sp, #0]
 8020a7c:	69fb      	ldr	r3, [r7, #28]
 8020a7e:	68b9      	ldr	r1, [r7, #8]
 8020a80:	68f8      	ldr	r0, [r7, #12]
 8020a82:	f001 fdd9 	bl	8022638 <ethernet_output>
 8020a86:	4603      	mov	r3, r0
}
 8020a88:	4618      	mov	r0, r3
 8020a8a:	3720      	adds	r7, #32
 8020a8c:	46bd      	mov	sp, r7
 8020a8e:	bd80      	pop	{r7, pc}
 8020a90:	08028788 	.word	0x08028788
 8020a94:	080288d8 	.word	0x080288d8
 8020a98:	08028800 	.word	0x08028800
 8020a9c:	08028928 	.word	0x08028928
 8020aa0:	080288c8 	.word	0x080288c8
 8020aa4:	08029308 	.word	0x08029308
 8020aa8:	2001431c 	.word	0x2001431c
 8020aac:	20013e6c 	.word	0x20013e6c

08020ab0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8020ab0:	b580      	push	{r7, lr}
 8020ab2:	b08c      	sub	sp, #48	; 0x30
 8020ab4:	af02      	add	r7, sp, #8
 8020ab6:	60f8      	str	r0, [r7, #12]
 8020ab8:	60b9      	str	r1, [r7, #8]
 8020aba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8020abc:	68fb      	ldr	r3, [r7, #12]
 8020abe:	332a      	adds	r3, #42	; 0x2a
 8020ac0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8020ac2:	23ff      	movs	r3, #255	; 0xff
 8020ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8020ac8:	2300      	movs	r3, #0
 8020aca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020acc:	68bb      	ldr	r3, [r7, #8]
 8020ace:	681b      	ldr	r3, [r3, #0]
 8020ad0:	68f9      	ldr	r1, [r7, #12]
 8020ad2:	4618      	mov	r0, r3
 8020ad4:	f000 fe12 	bl	80216fc <ip4_addr_isbroadcast_u32>
 8020ad8:	4603      	mov	r3, r0
 8020ada:	2b00      	cmp	r3, #0
 8020adc:	d10c      	bne.n	8020af8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020ade:	68bb      	ldr	r3, [r7, #8]
 8020ae0:	681b      	ldr	r3, [r3, #0]
 8020ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020ae6:	2be0      	cmp	r3, #224	; 0xe0
 8020ae8:	d006      	beq.n	8020af8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020aea:	68bb      	ldr	r3, [r7, #8]
 8020aec:	2b00      	cmp	r3, #0
 8020aee:	d003      	beq.n	8020af8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8020af0:	68bb      	ldr	r3, [r7, #8]
 8020af2:	681b      	ldr	r3, [r3, #0]
 8020af4:	2b00      	cmp	r3, #0
 8020af6:	d102      	bne.n	8020afe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8020af8:	f06f 030f 	mvn.w	r3, #15
 8020afc:	e101      	b.n	8020d02 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8020afe:	68fa      	ldr	r2, [r7, #12]
 8020b00:	2101      	movs	r1, #1
 8020b02:	68b8      	ldr	r0, [r7, #8]
 8020b04:	f7ff fb60 	bl	80201c8 <etharp_find_entry>
 8020b08:	4603      	mov	r3, r0
 8020b0a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8020b0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020b10:	2b00      	cmp	r3, #0
 8020b12:	da02      	bge.n	8020b1a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8020b14:	8a7b      	ldrh	r3, [r7, #18]
 8020b16:	b25b      	sxtb	r3, r3
 8020b18:	e0f3      	b.n	8020d02 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8020b1a:	8a7b      	ldrh	r3, [r7, #18]
 8020b1c:	2b7e      	cmp	r3, #126	; 0x7e
 8020b1e:	d906      	bls.n	8020b2e <etharp_query+0x7e>
 8020b20:	4b7a      	ldr	r3, [pc, #488]	; (8020d0c <etharp_query+0x25c>)
 8020b22:	f240 32c1 	movw	r2, #961	; 0x3c1
 8020b26:	497a      	ldr	r1, [pc, #488]	; (8020d10 <etharp_query+0x260>)
 8020b28:	487a      	ldr	r0, [pc, #488]	; (8020d14 <etharp_query+0x264>)
 8020b2a:	f001 ff21 	bl	8022970 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8020b2e:	8a7b      	ldrh	r3, [r7, #18]
 8020b30:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8020b32:	7c7a      	ldrb	r2, [r7, #17]
 8020b34:	4978      	ldr	r1, [pc, #480]	; (8020d18 <etharp_query+0x268>)
 8020b36:	4613      	mov	r3, r2
 8020b38:	005b      	lsls	r3, r3, #1
 8020b3a:	4413      	add	r3, r2
 8020b3c:	00db      	lsls	r3, r3, #3
 8020b3e:	440b      	add	r3, r1
 8020b40:	3314      	adds	r3, #20
 8020b42:	781b      	ldrb	r3, [r3, #0]
 8020b44:	2b00      	cmp	r3, #0
 8020b46:	d115      	bne.n	8020b74 <etharp_query+0xc4>
    is_new_entry = 1;
 8020b48:	2301      	movs	r3, #1
 8020b4a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8020b4c:	7c7a      	ldrb	r2, [r7, #17]
 8020b4e:	4972      	ldr	r1, [pc, #456]	; (8020d18 <etharp_query+0x268>)
 8020b50:	4613      	mov	r3, r2
 8020b52:	005b      	lsls	r3, r3, #1
 8020b54:	4413      	add	r3, r2
 8020b56:	00db      	lsls	r3, r3, #3
 8020b58:	440b      	add	r3, r1
 8020b5a:	3314      	adds	r3, #20
 8020b5c:	2201      	movs	r2, #1
 8020b5e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8020b60:	7c7a      	ldrb	r2, [r7, #17]
 8020b62:	496d      	ldr	r1, [pc, #436]	; (8020d18 <etharp_query+0x268>)
 8020b64:	4613      	mov	r3, r2
 8020b66:	005b      	lsls	r3, r3, #1
 8020b68:	4413      	add	r3, r2
 8020b6a:	00db      	lsls	r3, r3, #3
 8020b6c:	440b      	add	r3, r1
 8020b6e:	3308      	adds	r3, #8
 8020b70:	68fa      	ldr	r2, [r7, #12]
 8020b72:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8020b74:	7c7a      	ldrb	r2, [r7, #17]
 8020b76:	4968      	ldr	r1, [pc, #416]	; (8020d18 <etharp_query+0x268>)
 8020b78:	4613      	mov	r3, r2
 8020b7a:	005b      	lsls	r3, r3, #1
 8020b7c:	4413      	add	r3, r2
 8020b7e:	00db      	lsls	r3, r3, #3
 8020b80:	440b      	add	r3, r1
 8020b82:	3314      	adds	r3, #20
 8020b84:	781b      	ldrb	r3, [r3, #0]
 8020b86:	2b01      	cmp	r3, #1
 8020b88:	d011      	beq.n	8020bae <etharp_query+0xfe>
 8020b8a:	7c7a      	ldrb	r2, [r7, #17]
 8020b8c:	4962      	ldr	r1, [pc, #392]	; (8020d18 <etharp_query+0x268>)
 8020b8e:	4613      	mov	r3, r2
 8020b90:	005b      	lsls	r3, r3, #1
 8020b92:	4413      	add	r3, r2
 8020b94:	00db      	lsls	r3, r3, #3
 8020b96:	440b      	add	r3, r1
 8020b98:	3314      	adds	r3, #20
 8020b9a:	781b      	ldrb	r3, [r3, #0]
 8020b9c:	2b01      	cmp	r3, #1
 8020b9e:	d806      	bhi.n	8020bae <etharp_query+0xfe>
 8020ba0:	4b5a      	ldr	r3, [pc, #360]	; (8020d0c <etharp_query+0x25c>)
 8020ba2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8020ba6:	495d      	ldr	r1, [pc, #372]	; (8020d1c <etharp_query+0x26c>)
 8020ba8:	485a      	ldr	r0, [pc, #360]	; (8020d14 <etharp_query+0x264>)
 8020baa:	f001 fee1 	bl	8022970 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8020bae:	6a3b      	ldr	r3, [r7, #32]
 8020bb0:	2b00      	cmp	r3, #0
 8020bb2:	d102      	bne.n	8020bba <etharp_query+0x10a>
 8020bb4:	687b      	ldr	r3, [r7, #4]
 8020bb6:	2b00      	cmp	r3, #0
 8020bb8:	d10c      	bne.n	8020bd4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8020bba:	68b9      	ldr	r1, [r7, #8]
 8020bbc:	68f8      	ldr	r0, [r7, #12]
 8020bbe:	f000 f963 	bl	8020e88 <etharp_request>
 8020bc2:	4603      	mov	r3, r0
 8020bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8020bc8:	687b      	ldr	r3, [r7, #4]
 8020bca:	2b00      	cmp	r3, #0
 8020bcc:	d102      	bne.n	8020bd4 <etharp_query+0x124>
      return result;
 8020bce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8020bd2:	e096      	b.n	8020d02 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8020bd4:	687b      	ldr	r3, [r7, #4]
 8020bd6:	2b00      	cmp	r3, #0
 8020bd8:	d106      	bne.n	8020be8 <etharp_query+0x138>
 8020bda:	4b4c      	ldr	r3, [pc, #304]	; (8020d0c <etharp_query+0x25c>)
 8020bdc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8020be0:	494f      	ldr	r1, [pc, #316]	; (8020d20 <etharp_query+0x270>)
 8020be2:	484c      	ldr	r0, [pc, #304]	; (8020d14 <etharp_query+0x264>)
 8020be4:	f001 fec4 	bl	8022970 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8020be8:	7c7a      	ldrb	r2, [r7, #17]
 8020bea:	494b      	ldr	r1, [pc, #300]	; (8020d18 <etharp_query+0x268>)
 8020bec:	4613      	mov	r3, r2
 8020bee:	005b      	lsls	r3, r3, #1
 8020bf0:	4413      	add	r3, r2
 8020bf2:	00db      	lsls	r3, r3, #3
 8020bf4:	440b      	add	r3, r1
 8020bf6:	3314      	adds	r3, #20
 8020bf8:	781b      	ldrb	r3, [r3, #0]
 8020bfa:	2b01      	cmp	r3, #1
 8020bfc:	d917      	bls.n	8020c2e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8020bfe:	4a49      	ldr	r2, [pc, #292]	; (8020d24 <etharp_query+0x274>)
 8020c00:	7c7b      	ldrb	r3, [r7, #17]
 8020c02:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8020c04:	7c7a      	ldrb	r2, [r7, #17]
 8020c06:	4613      	mov	r3, r2
 8020c08:	005b      	lsls	r3, r3, #1
 8020c0a:	4413      	add	r3, r2
 8020c0c:	00db      	lsls	r3, r3, #3
 8020c0e:	3308      	adds	r3, #8
 8020c10:	4a41      	ldr	r2, [pc, #260]	; (8020d18 <etharp_query+0x268>)
 8020c12:	4413      	add	r3, r2
 8020c14:	3304      	adds	r3, #4
 8020c16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020c1a:	9200      	str	r2, [sp, #0]
 8020c1c:	697a      	ldr	r2, [r7, #20]
 8020c1e:	6879      	ldr	r1, [r7, #4]
 8020c20:	68f8      	ldr	r0, [r7, #12]
 8020c22:	f001 fd09 	bl	8022638 <ethernet_output>
 8020c26:	4603      	mov	r3, r0
 8020c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020c2c:	e067      	b.n	8020cfe <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8020c2e:	7c7a      	ldrb	r2, [r7, #17]
 8020c30:	4939      	ldr	r1, [pc, #228]	; (8020d18 <etharp_query+0x268>)
 8020c32:	4613      	mov	r3, r2
 8020c34:	005b      	lsls	r3, r3, #1
 8020c36:	4413      	add	r3, r2
 8020c38:	00db      	lsls	r3, r3, #3
 8020c3a:	440b      	add	r3, r1
 8020c3c:	3314      	adds	r3, #20
 8020c3e:	781b      	ldrb	r3, [r3, #0]
 8020c40:	2b01      	cmp	r3, #1
 8020c42:	d15c      	bne.n	8020cfe <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8020c44:	2300      	movs	r3, #0
 8020c46:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8020c48:	687b      	ldr	r3, [r7, #4]
 8020c4a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020c4c:	e01c      	b.n	8020c88 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8020c4e:	69fb      	ldr	r3, [r7, #28]
 8020c50:	895a      	ldrh	r2, [r3, #10]
 8020c52:	69fb      	ldr	r3, [r7, #28]
 8020c54:	891b      	ldrh	r3, [r3, #8]
 8020c56:	429a      	cmp	r2, r3
 8020c58:	d10a      	bne.n	8020c70 <etharp_query+0x1c0>
 8020c5a:	69fb      	ldr	r3, [r7, #28]
 8020c5c:	681b      	ldr	r3, [r3, #0]
 8020c5e:	2b00      	cmp	r3, #0
 8020c60:	d006      	beq.n	8020c70 <etharp_query+0x1c0>
 8020c62:	4b2a      	ldr	r3, [pc, #168]	; (8020d0c <etharp_query+0x25c>)
 8020c64:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8020c68:	492f      	ldr	r1, [pc, #188]	; (8020d28 <etharp_query+0x278>)
 8020c6a:	482a      	ldr	r0, [pc, #168]	; (8020d14 <etharp_query+0x264>)
 8020c6c:	f001 fe80 	bl	8022970 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8020c70:	69fb      	ldr	r3, [r7, #28]
 8020c72:	7b1b      	ldrb	r3, [r3, #12]
 8020c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020c78:	2b00      	cmp	r3, #0
 8020c7a:	d002      	beq.n	8020c82 <etharp_query+0x1d2>
        copy_needed = 1;
 8020c7c:	2301      	movs	r3, #1
 8020c7e:	61bb      	str	r3, [r7, #24]
        break;
 8020c80:	e005      	b.n	8020c8e <etharp_query+0x1de>
      }
      p = p->next;
 8020c82:	69fb      	ldr	r3, [r7, #28]
 8020c84:	681b      	ldr	r3, [r3, #0]
 8020c86:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020c88:	69fb      	ldr	r3, [r7, #28]
 8020c8a:	2b00      	cmp	r3, #0
 8020c8c:	d1df      	bne.n	8020c4e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8020c8e:	69bb      	ldr	r3, [r7, #24]
 8020c90:	2b00      	cmp	r3, #0
 8020c92:	d007      	beq.n	8020ca4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8020c94:	687a      	ldr	r2, [r7, #4]
 8020c96:	f44f 7120 	mov.w	r1, #640	; 0x280
 8020c9a:	200e      	movs	r0, #14
 8020c9c:	f7fe fbbc 	bl	801f418 <pbuf_clone>
 8020ca0:	61f8      	str	r0, [r7, #28]
 8020ca2:	e004      	b.n	8020cae <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8020ca8:	69f8      	ldr	r0, [r7, #28]
 8020caa:	f7fe f9c9 	bl	801f040 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8020cae:	69fb      	ldr	r3, [r7, #28]
 8020cb0:	2b00      	cmp	r3, #0
 8020cb2:	d021      	beq.n	8020cf8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8020cb4:	7c7a      	ldrb	r2, [r7, #17]
 8020cb6:	4918      	ldr	r1, [pc, #96]	; (8020d18 <etharp_query+0x268>)
 8020cb8:	4613      	mov	r3, r2
 8020cba:	005b      	lsls	r3, r3, #1
 8020cbc:	4413      	add	r3, r2
 8020cbe:	00db      	lsls	r3, r3, #3
 8020cc0:	440b      	add	r3, r1
 8020cc2:	681b      	ldr	r3, [r3, #0]
 8020cc4:	2b00      	cmp	r3, #0
 8020cc6:	d00a      	beq.n	8020cde <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8020cc8:	7c7a      	ldrb	r2, [r7, #17]
 8020cca:	4913      	ldr	r1, [pc, #76]	; (8020d18 <etharp_query+0x268>)
 8020ccc:	4613      	mov	r3, r2
 8020cce:	005b      	lsls	r3, r3, #1
 8020cd0:	4413      	add	r3, r2
 8020cd2:	00db      	lsls	r3, r3, #3
 8020cd4:	440b      	add	r3, r1
 8020cd6:	681b      	ldr	r3, [r3, #0]
 8020cd8:	4618      	mov	r0, r3
 8020cda:	f7fe f911 	bl	801ef00 <pbuf_free>
      }
      arp_table[i].q = p;
 8020cde:	7c7a      	ldrb	r2, [r7, #17]
 8020ce0:	490d      	ldr	r1, [pc, #52]	; (8020d18 <etharp_query+0x268>)
 8020ce2:	4613      	mov	r3, r2
 8020ce4:	005b      	lsls	r3, r3, #1
 8020ce6:	4413      	add	r3, r2
 8020ce8:	00db      	lsls	r3, r3, #3
 8020cea:	440b      	add	r3, r1
 8020cec:	69fa      	ldr	r2, [r7, #28]
 8020cee:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8020cf0:	2300      	movs	r3, #0
 8020cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020cf6:	e002      	b.n	8020cfe <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8020cf8:	23ff      	movs	r3, #255	; 0xff
 8020cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8020cfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8020d02:	4618      	mov	r0, r3
 8020d04:	3728      	adds	r7, #40	; 0x28
 8020d06:	46bd      	mov	sp, r7
 8020d08:	bd80      	pop	{r7, pc}
 8020d0a:	bf00      	nop
 8020d0c:	08028788 	.word	0x08028788
 8020d10:	08028934 	.word	0x08028934
 8020d14:	08028800 	.word	0x08028800
 8020d18:	20013e6c 	.word	0x20013e6c
 8020d1c:	08028944 	.word	0x08028944
 8020d20:	08028928 	.word	0x08028928
 8020d24:	2001431c 	.word	0x2001431c
 8020d28:	0802896c 	.word	0x0802896c

08020d2c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020d2c:	b580      	push	{r7, lr}
 8020d2e:	b08a      	sub	sp, #40	; 0x28
 8020d30:	af02      	add	r7, sp, #8
 8020d32:	60f8      	str	r0, [r7, #12]
 8020d34:	60b9      	str	r1, [r7, #8]
 8020d36:	607a      	str	r2, [r7, #4]
 8020d38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8020d3a:	2300      	movs	r3, #0
 8020d3c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020d3e:	68fb      	ldr	r3, [r7, #12]
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	d106      	bne.n	8020d52 <etharp_raw+0x26>
 8020d44:	4b3a      	ldr	r3, [pc, #232]	; (8020e30 <etharp_raw+0x104>)
 8020d46:	f240 4257 	movw	r2, #1111	; 0x457
 8020d4a:	493a      	ldr	r1, [pc, #232]	; (8020e34 <etharp_raw+0x108>)
 8020d4c:	483a      	ldr	r0, [pc, #232]	; (8020e38 <etharp_raw+0x10c>)
 8020d4e:	f001 fe0f 	bl	8022970 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8020d52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020d56:	211c      	movs	r1, #28
 8020d58:	200e      	movs	r0, #14
 8020d5a:	f7fd fdef 	bl	801e93c <pbuf_alloc>
 8020d5e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8020d60:	69bb      	ldr	r3, [r7, #24]
 8020d62:	2b00      	cmp	r3, #0
 8020d64:	d102      	bne.n	8020d6c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8020d66:	f04f 33ff 	mov.w	r3, #4294967295
 8020d6a:	e05d      	b.n	8020e28 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8020d6c:	69bb      	ldr	r3, [r7, #24]
 8020d6e:	895b      	ldrh	r3, [r3, #10]
 8020d70:	2b1b      	cmp	r3, #27
 8020d72:	d806      	bhi.n	8020d82 <etharp_raw+0x56>
 8020d74:	4b2e      	ldr	r3, [pc, #184]	; (8020e30 <etharp_raw+0x104>)
 8020d76:	f240 4262 	movw	r2, #1122	; 0x462
 8020d7a:	4930      	ldr	r1, [pc, #192]	; (8020e3c <etharp_raw+0x110>)
 8020d7c:	482e      	ldr	r0, [pc, #184]	; (8020e38 <etharp_raw+0x10c>)
 8020d7e:	f001 fdf7 	bl	8022970 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8020d82:	69bb      	ldr	r3, [r7, #24]
 8020d84:	685b      	ldr	r3, [r3, #4]
 8020d86:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8020d88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8020d8a:	4618      	mov	r0, r3
 8020d8c:	f7fc fcdc 	bl	801d748 <lwip_htons>
 8020d90:	4603      	mov	r3, r0
 8020d92:	461a      	mov	r2, r3
 8020d94:	697b      	ldr	r3, [r7, #20]
 8020d96:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8020d98:	68fb      	ldr	r3, [r7, #12]
 8020d9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8020d9e:	2b06      	cmp	r3, #6
 8020da0:	d006      	beq.n	8020db0 <etharp_raw+0x84>
 8020da2:	4b23      	ldr	r3, [pc, #140]	; (8020e30 <etharp_raw+0x104>)
 8020da4:	f240 4269 	movw	r2, #1129	; 0x469
 8020da8:	4925      	ldr	r1, [pc, #148]	; (8020e40 <etharp_raw+0x114>)
 8020daa:	4823      	ldr	r0, [pc, #140]	; (8020e38 <etharp_raw+0x10c>)
 8020dac:	f001 fde0 	bl	8022970 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8020db0:	697b      	ldr	r3, [r7, #20]
 8020db2:	3308      	adds	r3, #8
 8020db4:	2206      	movs	r2, #6
 8020db6:	6839      	ldr	r1, [r7, #0]
 8020db8:	4618      	mov	r0, r3
 8020dba:	f001 fcc9 	bl	8022750 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8020dbe:	697b      	ldr	r3, [r7, #20]
 8020dc0:	3312      	adds	r3, #18
 8020dc2:	2206      	movs	r2, #6
 8020dc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020dc6:	4618      	mov	r0, r3
 8020dc8:	f001 fcc2 	bl	8022750 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8020dcc:	697b      	ldr	r3, [r7, #20]
 8020dce:	330e      	adds	r3, #14
 8020dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020dd2:	6812      	ldr	r2, [r2, #0]
 8020dd4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8020dd6:	697b      	ldr	r3, [r7, #20]
 8020dd8:	3318      	adds	r3, #24
 8020dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020ddc:	6812      	ldr	r2, [r2, #0]
 8020dde:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8020de0:	697b      	ldr	r3, [r7, #20]
 8020de2:	2200      	movs	r2, #0
 8020de4:	701a      	strb	r2, [r3, #0]
 8020de6:	2200      	movs	r2, #0
 8020de8:	f042 0201 	orr.w	r2, r2, #1
 8020dec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8020dee:	697b      	ldr	r3, [r7, #20]
 8020df0:	2200      	movs	r2, #0
 8020df2:	f042 0208 	orr.w	r2, r2, #8
 8020df6:	709a      	strb	r2, [r3, #2]
 8020df8:	2200      	movs	r2, #0
 8020dfa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8020dfc:	697b      	ldr	r3, [r7, #20]
 8020dfe:	2206      	movs	r2, #6
 8020e00:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8020e02:	697b      	ldr	r3, [r7, #20]
 8020e04:	2204      	movs	r2, #4
 8020e06:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8020e08:	f640 0306 	movw	r3, #2054	; 0x806
 8020e0c:	9300      	str	r3, [sp, #0]
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	68ba      	ldr	r2, [r7, #8]
 8020e12:	69b9      	ldr	r1, [r7, #24]
 8020e14:	68f8      	ldr	r0, [r7, #12]
 8020e16:	f001 fc0f 	bl	8022638 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8020e1a:	69b8      	ldr	r0, [r7, #24]
 8020e1c:	f7fe f870 	bl	801ef00 <pbuf_free>
  p = NULL;
 8020e20:	2300      	movs	r3, #0
 8020e22:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8020e24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020e28:	4618      	mov	r0, r3
 8020e2a:	3720      	adds	r7, #32
 8020e2c:	46bd      	mov	sp, r7
 8020e2e:	bd80      	pop	{r7, pc}
 8020e30:	08028788 	.word	0x08028788
 8020e34:	080288d8 	.word	0x080288d8
 8020e38:	08028800 	.word	0x08028800
 8020e3c:	08028988 	.word	0x08028988
 8020e40:	080289bc 	.word	0x080289bc

08020e44 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8020e44:	b580      	push	{r7, lr}
 8020e46:	b088      	sub	sp, #32
 8020e48:	af04      	add	r7, sp, #16
 8020e4a:	60f8      	str	r0, [r7, #12]
 8020e4c:	60b9      	str	r1, [r7, #8]
 8020e4e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020e50:	68fb      	ldr	r3, [r7, #12]
 8020e52:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8020e56:	68fb      	ldr	r3, [r7, #12]
 8020e58:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8020e5c:	68fb      	ldr	r3, [r7, #12]
 8020e5e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020e60:	2201      	movs	r2, #1
 8020e62:	9203      	str	r2, [sp, #12]
 8020e64:	68ba      	ldr	r2, [r7, #8]
 8020e66:	9202      	str	r2, [sp, #8]
 8020e68:	4a06      	ldr	r2, [pc, #24]	; (8020e84 <etharp_request_dst+0x40>)
 8020e6a:	9201      	str	r2, [sp, #4]
 8020e6c:	9300      	str	r3, [sp, #0]
 8020e6e:	4603      	mov	r3, r0
 8020e70:	687a      	ldr	r2, [r7, #4]
 8020e72:	68f8      	ldr	r0, [r7, #12]
 8020e74:	f7ff ff5a 	bl	8020d2c <etharp_raw>
 8020e78:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8020e7a:	4618      	mov	r0, r3
 8020e7c:	3710      	adds	r7, #16
 8020e7e:	46bd      	mov	sp, r7
 8020e80:	bd80      	pop	{r7, pc}
 8020e82:	bf00      	nop
 8020e84:	08029310 	.word	0x08029310

08020e88 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8020e88:	b580      	push	{r7, lr}
 8020e8a:	b082      	sub	sp, #8
 8020e8c:	af00      	add	r7, sp, #0
 8020e8e:	6078      	str	r0, [r7, #4]
 8020e90:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8020e92:	4a05      	ldr	r2, [pc, #20]	; (8020ea8 <etharp_request+0x20>)
 8020e94:	6839      	ldr	r1, [r7, #0]
 8020e96:	6878      	ldr	r0, [r7, #4]
 8020e98:	f7ff ffd4 	bl	8020e44 <etharp_request_dst>
 8020e9c:	4603      	mov	r3, r0
}
 8020e9e:	4618      	mov	r0, r3
 8020ea0:	3708      	adds	r7, #8
 8020ea2:	46bd      	mov	sp, r7
 8020ea4:	bd80      	pop	{r7, pc}
 8020ea6:	bf00      	nop
 8020ea8:	08029308 	.word	0x08029308

08020eac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8020eac:	b580      	push	{r7, lr}
 8020eae:	b08e      	sub	sp, #56	; 0x38
 8020eb0:	af04      	add	r7, sp, #16
 8020eb2:	6078      	str	r0, [r7, #4]
 8020eb4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8020eb6:	4b79      	ldr	r3, [pc, #484]	; (802109c <icmp_input+0x1f0>)
 8020eb8:	689b      	ldr	r3, [r3, #8]
 8020eba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8020ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ebe:	781b      	ldrb	r3, [r3, #0]
 8020ec0:	f003 030f 	and.w	r3, r3, #15
 8020ec4:	b2db      	uxtb	r3, r3
 8020ec6:	009b      	lsls	r3, r3, #2
 8020ec8:	b2db      	uxtb	r3, r3
 8020eca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8020ecc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020ece:	2b13      	cmp	r3, #19
 8020ed0:	f240 80cd 	bls.w	802106e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	895b      	ldrh	r3, [r3, #10]
 8020ed8:	2b03      	cmp	r3, #3
 8020eda:	f240 80ca 	bls.w	8021072 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8020ede:	687b      	ldr	r3, [r7, #4]
 8020ee0:	685b      	ldr	r3, [r3, #4]
 8020ee2:	781b      	ldrb	r3, [r3, #0]
 8020ee4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8020ee8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	f000 80b7 	beq.w	8021060 <icmp_input+0x1b4>
 8020ef2:	2b08      	cmp	r3, #8
 8020ef4:	f040 80b7 	bne.w	8021066 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8020ef8:	4b69      	ldr	r3, [pc, #420]	; (80210a0 <icmp_input+0x1f4>)
 8020efa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020efc:	4b67      	ldr	r3, [pc, #412]	; (802109c <icmp_input+0x1f0>)
 8020efe:	695b      	ldr	r3, [r3, #20]
 8020f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020f04:	2be0      	cmp	r3, #224	; 0xe0
 8020f06:	f000 80bb 	beq.w	8021080 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8020f0a:	4b64      	ldr	r3, [pc, #400]	; (802109c <icmp_input+0x1f0>)
 8020f0c:	695b      	ldr	r3, [r3, #20]
 8020f0e:	4a63      	ldr	r2, [pc, #396]	; (802109c <icmp_input+0x1f0>)
 8020f10:	6812      	ldr	r2, [r2, #0]
 8020f12:	4611      	mov	r1, r2
 8020f14:	4618      	mov	r0, r3
 8020f16:	f000 fbf1 	bl	80216fc <ip4_addr_isbroadcast_u32>
 8020f1a:	4603      	mov	r3, r0
 8020f1c:	2b00      	cmp	r3, #0
 8020f1e:	f040 80b1 	bne.w	8021084 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8020f22:	687b      	ldr	r3, [r7, #4]
 8020f24:	891b      	ldrh	r3, [r3, #8]
 8020f26:	2b07      	cmp	r3, #7
 8020f28:	f240 80a5 	bls.w	8021076 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020f2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020f2e:	330e      	adds	r3, #14
 8020f30:	4619      	mov	r1, r3
 8020f32:	6878      	ldr	r0, [r7, #4]
 8020f34:	f7fd ff4e 	bl	801edd4 <pbuf_add_header>
 8020f38:	4603      	mov	r3, r0
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	d04b      	beq.n	8020fd6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8020f3e:	687b      	ldr	r3, [r7, #4]
 8020f40:	891a      	ldrh	r2, [r3, #8]
 8020f42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020f44:	4413      	add	r3, r2
 8020f46:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8020f48:	687b      	ldr	r3, [r7, #4]
 8020f4a:	891b      	ldrh	r3, [r3, #8]
 8020f4c:	8b7a      	ldrh	r2, [r7, #26]
 8020f4e:	429a      	cmp	r2, r3
 8020f50:	f0c0 809a 	bcc.w	8021088 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8020f54:	8b7b      	ldrh	r3, [r7, #26]
 8020f56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020f5a:	4619      	mov	r1, r3
 8020f5c:	200e      	movs	r0, #14
 8020f5e:	f7fd fced 	bl	801e93c <pbuf_alloc>
 8020f62:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8020f64:	697b      	ldr	r3, [r7, #20]
 8020f66:	2b00      	cmp	r3, #0
 8020f68:	f000 8090 	beq.w	802108c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8020f6c:	697b      	ldr	r3, [r7, #20]
 8020f6e:	895b      	ldrh	r3, [r3, #10]
 8020f70:	461a      	mov	r2, r3
 8020f72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020f74:	3308      	adds	r3, #8
 8020f76:	429a      	cmp	r2, r3
 8020f78:	d203      	bcs.n	8020f82 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8020f7a:	6978      	ldr	r0, [r7, #20]
 8020f7c:	f7fd ffc0 	bl	801ef00 <pbuf_free>
          goto icmperr;
 8020f80:	e085      	b.n	802108e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8020f82:	697b      	ldr	r3, [r7, #20]
 8020f84:	685b      	ldr	r3, [r3, #4]
 8020f86:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8020f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020f8a:	4618      	mov	r0, r3
 8020f8c:	f001 fbe0 	bl	8022750 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8020f90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020f92:	4619      	mov	r1, r3
 8020f94:	6978      	ldr	r0, [r7, #20]
 8020f96:	f7fd ff2d 	bl	801edf4 <pbuf_remove_header>
 8020f9a:	4603      	mov	r3, r0
 8020f9c:	2b00      	cmp	r3, #0
 8020f9e:	d009      	beq.n	8020fb4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8020fa0:	4b40      	ldr	r3, [pc, #256]	; (80210a4 <icmp_input+0x1f8>)
 8020fa2:	22b6      	movs	r2, #182	; 0xb6
 8020fa4:	4940      	ldr	r1, [pc, #256]	; (80210a8 <icmp_input+0x1fc>)
 8020fa6:	4841      	ldr	r0, [pc, #260]	; (80210ac <icmp_input+0x200>)
 8020fa8:	f001 fce2 	bl	8022970 <iprintf>
          pbuf_free(r);
 8020fac:	6978      	ldr	r0, [r7, #20]
 8020fae:	f7fd ffa7 	bl	801ef00 <pbuf_free>
          goto icmperr;
 8020fb2:	e06c      	b.n	802108e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8020fb4:	6879      	ldr	r1, [r7, #4]
 8020fb6:	6978      	ldr	r0, [r7, #20]
 8020fb8:	f7fe f8ca 	bl	801f150 <pbuf_copy>
 8020fbc:	4603      	mov	r3, r0
 8020fbe:	2b00      	cmp	r3, #0
 8020fc0:	d003      	beq.n	8020fca <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8020fc2:	6978      	ldr	r0, [r7, #20]
 8020fc4:	f7fd ff9c 	bl	801ef00 <pbuf_free>
          goto icmperr;
 8020fc8:	e061      	b.n	802108e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8020fca:	6878      	ldr	r0, [r7, #4]
 8020fcc:	f7fd ff98 	bl	801ef00 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8020fd0:	697b      	ldr	r3, [r7, #20]
 8020fd2:	607b      	str	r3, [r7, #4]
 8020fd4:	e00f      	b.n	8020ff6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020fd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020fd8:	330e      	adds	r3, #14
 8020fda:	4619      	mov	r1, r3
 8020fdc:	6878      	ldr	r0, [r7, #4]
 8020fde:	f7fd ff09 	bl	801edf4 <pbuf_remove_header>
 8020fe2:	4603      	mov	r3, r0
 8020fe4:	2b00      	cmp	r3, #0
 8020fe6:	d006      	beq.n	8020ff6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8020fe8:	4b2e      	ldr	r3, [pc, #184]	; (80210a4 <icmp_input+0x1f8>)
 8020fea:	22c7      	movs	r2, #199	; 0xc7
 8020fec:	4930      	ldr	r1, [pc, #192]	; (80210b0 <icmp_input+0x204>)
 8020fee:	482f      	ldr	r0, [pc, #188]	; (80210ac <icmp_input+0x200>)
 8020ff0:	f001 fcbe 	bl	8022970 <iprintf>
          goto icmperr;
 8020ff4:	e04b      	b.n	802108e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8020ff6:	687b      	ldr	r3, [r7, #4]
 8020ff8:	685b      	ldr	r3, [r3, #4]
 8020ffa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8020ffc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020ffe:	4619      	mov	r1, r3
 8021000:	6878      	ldr	r0, [r7, #4]
 8021002:	f7fd fee7 	bl	801edd4 <pbuf_add_header>
 8021006:	4603      	mov	r3, r0
 8021008:	2b00      	cmp	r3, #0
 802100a:	d12b      	bne.n	8021064 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 802100c:	687b      	ldr	r3, [r7, #4]
 802100e:	685b      	ldr	r3, [r3, #4]
 8021010:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8021012:	69fb      	ldr	r3, [r7, #28]
 8021014:	681a      	ldr	r2, [r3, #0]
 8021016:	68fb      	ldr	r3, [r7, #12]
 8021018:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 802101a:	4b20      	ldr	r3, [pc, #128]	; (802109c <icmp_input+0x1f0>)
 802101c:	691a      	ldr	r2, [r3, #16]
 802101e:	68fb      	ldr	r3, [r7, #12]
 8021020:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8021022:	693b      	ldr	r3, [r7, #16]
 8021024:	2200      	movs	r2, #0
 8021026:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8021028:	693b      	ldr	r3, [r7, #16]
 802102a:	2200      	movs	r2, #0
 802102c:	709a      	strb	r2, [r3, #2]
 802102e:	2200      	movs	r2, #0
 8021030:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8021032:	68fb      	ldr	r3, [r7, #12]
 8021034:	22ff      	movs	r2, #255	; 0xff
 8021036:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8021038:	68fb      	ldr	r3, [r7, #12]
 802103a:	2200      	movs	r2, #0
 802103c:	729a      	strb	r2, [r3, #10]
 802103e:	2200      	movs	r2, #0
 8021040:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8021042:	683b      	ldr	r3, [r7, #0]
 8021044:	9302      	str	r3, [sp, #8]
 8021046:	2301      	movs	r3, #1
 8021048:	9301      	str	r3, [sp, #4]
 802104a:	2300      	movs	r3, #0
 802104c:	9300      	str	r3, [sp, #0]
 802104e:	23ff      	movs	r3, #255	; 0xff
 8021050:	2200      	movs	r2, #0
 8021052:	69f9      	ldr	r1, [r7, #28]
 8021054:	6878      	ldr	r0, [r7, #4]
 8021056:	f000 fa6b 	bl	8021530 <ip4_output_if>
 802105a:	4603      	mov	r3, r0
 802105c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 802105e:	e001      	b.n	8021064 <icmp_input+0x1b8>
      break;
 8021060:	bf00      	nop
 8021062:	e000      	b.n	8021066 <icmp_input+0x1ba>
      break;
 8021064:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8021066:	6878      	ldr	r0, [r7, #4]
 8021068:	f7fd ff4a 	bl	801ef00 <pbuf_free>
  return;
 802106c:	e013      	b.n	8021096 <icmp_input+0x1ea>
    goto lenerr;
 802106e:	bf00      	nop
 8021070:	e002      	b.n	8021078 <icmp_input+0x1cc>
    goto lenerr;
 8021072:	bf00      	nop
 8021074:	e000      	b.n	8021078 <icmp_input+0x1cc>
        goto lenerr;
 8021076:	bf00      	nop
lenerr:
  pbuf_free(p);
 8021078:	6878      	ldr	r0, [r7, #4]
 802107a:	f7fd ff41 	bl	801ef00 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802107e:	e00a      	b.n	8021096 <icmp_input+0x1ea>
        goto icmperr;
 8021080:	bf00      	nop
 8021082:	e004      	b.n	802108e <icmp_input+0x1e2>
        goto icmperr;
 8021084:	bf00      	nop
 8021086:	e002      	b.n	802108e <icmp_input+0x1e2>
          goto icmperr;
 8021088:	bf00      	nop
 802108a:	e000      	b.n	802108e <icmp_input+0x1e2>
          goto icmperr;
 802108c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 802108e:	6878      	ldr	r0, [r7, #4]
 8021090:	f7fd ff36 	bl	801ef00 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8021094:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8021096:	3728      	adds	r7, #40	; 0x28
 8021098:	46bd      	mov	sp, r7
 802109a:	bd80      	pop	{r7, pc}
 802109c:	20010804 	.word	0x20010804
 80210a0:	20010818 	.word	0x20010818
 80210a4:	08028a00 	.word	0x08028a00
 80210a8:	08028a38 	.word	0x08028a38
 80210ac:	08028a70 	.word	0x08028a70
 80210b0:	08028a98 	.word	0x08028a98

080210b4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80210b4:	b580      	push	{r7, lr}
 80210b6:	b082      	sub	sp, #8
 80210b8:	af00      	add	r7, sp, #0
 80210ba:	6078      	str	r0, [r7, #4]
 80210bc:	460b      	mov	r3, r1
 80210be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80210c0:	78fb      	ldrb	r3, [r7, #3]
 80210c2:	461a      	mov	r2, r3
 80210c4:	2103      	movs	r1, #3
 80210c6:	6878      	ldr	r0, [r7, #4]
 80210c8:	f000 f814 	bl	80210f4 <icmp_send_response>
}
 80210cc:	bf00      	nop
 80210ce:	3708      	adds	r7, #8
 80210d0:	46bd      	mov	sp, r7
 80210d2:	bd80      	pop	{r7, pc}

080210d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80210d4:	b580      	push	{r7, lr}
 80210d6:	b082      	sub	sp, #8
 80210d8:	af00      	add	r7, sp, #0
 80210da:	6078      	str	r0, [r7, #4]
 80210dc:	460b      	mov	r3, r1
 80210de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80210e0:	78fb      	ldrb	r3, [r7, #3]
 80210e2:	461a      	mov	r2, r3
 80210e4:	210b      	movs	r1, #11
 80210e6:	6878      	ldr	r0, [r7, #4]
 80210e8:	f000 f804 	bl	80210f4 <icmp_send_response>
}
 80210ec:	bf00      	nop
 80210ee:	3708      	adds	r7, #8
 80210f0:	46bd      	mov	sp, r7
 80210f2:	bd80      	pop	{r7, pc}

080210f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80210f4:	b580      	push	{r7, lr}
 80210f6:	b08c      	sub	sp, #48	; 0x30
 80210f8:	af04      	add	r7, sp, #16
 80210fa:	6078      	str	r0, [r7, #4]
 80210fc:	460b      	mov	r3, r1
 80210fe:	70fb      	strb	r3, [r7, #3]
 8021100:	4613      	mov	r3, r2
 8021102:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8021104:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021108:	2124      	movs	r1, #36	; 0x24
 802110a:	2022      	movs	r0, #34	; 0x22
 802110c:	f7fd fc16 	bl	801e93c <pbuf_alloc>
 8021110:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8021112:	69fb      	ldr	r3, [r7, #28]
 8021114:	2b00      	cmp	r3, #0
 8021116:	d04c      	beq.n	80211b2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8021118:	69fb      	ldr	r3, [r7, #28]
 802111a:	895b      	ldrh	r3, [r3, #10]
 802111c:	2b23      	cmp	r3, #35	; 0x23
 802111e:	d806      	bhi.n	802112e <icmp_send_response+0x3a>
 8021120:	4b26      	ldr	r3, [pc, #152]	; (80211bc <icmp_send_response+0xc8>)
 8021122:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8021126:	4926      	ldr	r1, [pc, #152]	; (80211c0 <icmp_send_response+0xcc>)
 8021128:	4826      	ldr	r0, [pc, #152]	; (80211c4 <icmp_send_response+0xd0>)
 802112a:	f001 fc21 	bl	8022970 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 802112e:	687b      	ldr	r3, [r7, #4]
 8021130:	685b      	ldr	r3, [r3, #4]
 8021132:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8021134:	69fb      	ldr	r3, [r7, #28]
 8021136:	685b      	ldr	r3, [r3, #4]
 8021138:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 802113a:	697b      	ldr	r3, [r7, #20]
 802113c:	78fa      	ldrb	r2, [r7, #3]
 802113e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8021140:	697b      	ldr	r3, [r7, #20]
 8021142:	78ba      	ldrb	r2, [r7, #2]
 8021144:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8021146:	697b      	ldr	r3, [r7, #20]
 8021148:	2200      	movs	r2, #0
 802114a:	711a      	strb	r2, [r3, #4]
 802114c:	2200      	movs	r2, #0
 802114e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8021150:	697b      	ldr	r3, [r7, #20]
 8021152:	2200      	movs	r2, #0
 8021154:	719a      	strb	r2, [r3, #6]
 8021156:	2200      	movs	r2, #0
 8021158:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 802115a:	69fb      	ldr	r3, [r7, #28]
 802115c:	685b      	ldr	r3, [r3, #4]
 802115e:	f103 0008 	add.w	r0, r3, #8
 8021162:	687b      	ldr	r3, [r7, #4]
 8021164:	685b      	ldr	r3, [r3, #4]
 8021166:	221c      	movs	r2, #28
 8021168:	4619      	mov	r1, r3
 802116a:	f001 faf1 	bl	8022750 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 802116e:	69bb      	ldr	r3, [r7, #24]
 8021170:	68db      	ldr	r3, [r3, #12]
 8021172:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8021174:	f107 030c 	add.w	r3, r7, #12
 8021178:	4618      	mov	r0, r3
 802117a:	f000 f825 	bl	80211c8 <ip4_route>
 802117e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8021180:	693b      	ldr	r3, [r7, #16]
 8021182:	2b00      	cmp	r3, #0
 8021184:	d011      	beq.n	80211aa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8021186:	697b      	ldr	r3, [r7, #20]
 8021188:	2200      	movs	r2, #0
 802118a:	709a      	strb	r2, [r3, #2]
 802118c:	2200      	movs	r2, #0
 802118e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8021190:	f107 020c 	add.w	r2, r7, #12
 8021194:	693b      	ldr	r3, [r7, #16]
 8021196:	9302      	str	r3, [sp, #8]
 8021198:	2301      	movs	r3, #1
 802119a:	9301      	str	r3, [sp, #4]
 802119c:	2300      	movs	r3, #0
 802119e:	9300      	str	r3, [sp, #0]
 80211a0:	23ff      	movs	r3, #255	; 0xff
 80211a2:	2100      	movs	r1, #0
 80211a4:	69f8      	ldr	r0, [r7, #28]
 80211a6:	f000 f9c3 	bl	8021530 <ip4_output_if>
  }
  pbuf_free(q);
 80211aa:	69f8      	ldr	r0, [r7, #28]
 80211ac:	f7fd fea8 	bl	801ef00 <pbuf_free>
 80211b0:	e000      	b.n	80211b4 <icmp_send_response+0xc0>
    return;
 80211b2:	bf00      	nop
}
 80211b4:	3720      	adds	r7, #32
 80211b6:	46bd      	mov	sp, r7
 80211b8:	bd80      	pop	{r7, pc}
 80211ba:	bf00      	nop
 80211bc:	08028a00 	.word	0x08028a00
 80211c0:	08028acc 	.word	0x08028acc
 80211c4:	08028a70 	.word	0x08028a70

080211c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80211c8:	b480      	push	{r7}
 80211ca:	b085      	sub	sp, #20
 80211cc:	af00      	add	r7, sp, #0
 80211ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80211d0:	4b33      	ldr	r3, [pc, #204]	; (80212a0 <ip4_route+0xd8>)
 80211d2:	681b      	ldr	r3, [r3, #0]
 80211d4:	60fb      	str	r3, [r7, #12]
 80211d6:	e036      	b.n	8021246 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80211d8:	68fb      	ldr	r3, [r7, #12]
 80211da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80211de:	f003 0301 	and.w	r3, r3, #1
 80211e2:	b2db      	uxtb	r3, r3
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	d02b      	beq.n	8021240 <ip4_route+0x78>
 80211e8:	68fb      	ldr	r3, [r7, #12]
 80211ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80211ee:	089b      	lsrs	r3, r3, #2
 80211f0:	f003 0301 	and.w	r3, r3, #1
 80211f4:	b2db      	uxtb	r3, r3
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	d022      	beq.n	8021240 <ip4_route+0x78>
 80211fa:	68fb      	ldr	r3, [r7, #12]
 80211fc:	3304      	adds	r3, #4
 80211fe:	681b      	ldr	r3, [r3, #0]
 8021200:	2b00      	cmp	r3, #0
 8021202:	d01d      	beq.n	8021240 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	681a      	ldr	r2, [r3, #0]
 8021208:	68fb      	ldr	r3, [r7, #12]
 802120a:	3304      	adds	r3, #4
 802120c:	681b      	ldr	r3, [r3, #0]
 802120e:	405a      	eors	r2, r3
 8021210:	68fb      	ldr	r3, [r7, #12]
 8021212:	3308      	adds	r3, #8
 8021214:	681b      	ldr	r3, [r3, #0]
 8021216:	4013      	ands	r3, r2
 8021218:	2b00      	cmp	r3, #0
 802121a:	d101      	bne.n	8021220 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 802121c:	68fb      	ldr	r3, [r7, #12]
 802121e:	e038      	b.n	8021292 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8021220:	68fb      	ldr	r3, [r7, #12]
 8021222:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021226:	f003 0302 	and.w	r3, r3, #2
 802122a:	2b00      	cmp	r3, #0
 802122c:	d108      	bne.n	8021240 <ip4_route+0x78>
 802122e:	687b      	ldr	r3, [r7, #4]
 8021230:	681a      	ldr	r2, [r3, #0]
 8021232:	68fb      	ldr	r3, [r7, #12]
 8021234:	330c      	adds	r3, #12
 8021236:	681b      	ldr	r3, [r3, #0]
 8021238:	429a      	cmp	r2, r3
 802123a:	d101      	bne.n	8021240 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 802123c:	68fb      	ldr	r3, [r7, #12]
 802123e:	e028      	b.n	8021292 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8021240:	68fb      	ldr	r3, [r7, #12]
 8021242:	681b      	ldr	r3, [r3, #0]
 8021244:	60fb      	str	r3, [r7, #12]
 8021246:	68fb      	ldr	r3, [r7, #12]
 8021248:	2b00      	cmp	r3, #0
 802124a:	d1c5      	bne.n	80211d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802124c:	4b15      	ldr	r3, [pc, #84]	; (80212a4 <ip4_route+0xdc>)
 802124e:	681b      	ldr	r3, [r3, #0]
 8021250:	2b00      	cmp	r3, #0
 8021252:	d01a      	beq.n	802128a <ip4_route+0xc2>
 8021254:	4b13      	ldr	r3, [pc, #76]	; (80212a4 <ip4_route+0xdc>)
 8021256:	681b      	ldr	r3, [r3, #0]
 8021258:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802125c:	f003 0301 	and.w	r3, r3, #1
 8021260:	2b00      	cmp	r3, #0
 8021262:	d012      	beq.n	802128a <ip4_route+0xc2>
 8021264:	4b0f      	ldr	r3, [pc, #60]	; (80212a4 <ip4_route+0xdc>)
 8021266:	681b      	ldr	r3, [r3, #0]
 8021268:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802126c:	f003 0304 	and.w	r3, r3, #4
 8021270:	2b00      	cmp	r3, #0
 8021272:	d00a      	beq.n	802128a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8021274:	4b0b      	ldr	r3, [pc, #44]	; (80212a4 <ip4_route+0xdc>)
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	3304      	adds	r3, #4
 802127a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802127c:	2b00      	cmp	r3, #0
 802127e:	d004      	beq.n	802128a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8021280:	687b      	ldr	r3, [r7, #4]
 8021282:	681b      	ldr	r3, [r3, #0]
 8021284:	b2db      	uxtb	r3, r3
 8021286:	2b7f      	cmp	r3, #127	; 0x7f
 8021288:	d101      	bne.n	802128e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 802128a:	2300      	movs	r3, #0
 802128c:	e001      	b.n	8021292 <ip4_route+0xca>
  }

  return netif_default;
 802128e:	4b05      	ldr	r3, [pc, #20]	; (80212a4 <ip4_route+0xdc>)
 8021290:	681b      	ldr	r3, [r3, #0]
}
 8021292:	4618      	mov	r0, r3
 8021294:	3714      	adds	r7, #20
 8021296:	46bd      	mov	sp, r7
 8021298:	f85d 7b04 	ldr.w	r7, [sp], #4
 802129c:	4770      	bx	lr
 802129e:	bf00      	nop
 80212a0:	20013e14 	.word	0x20013e14
 80212a4:	20013e18 	.word	0x20013e18

080212a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80212a8:	b580      	push	{r7, lr}
 80212aa:	b082      	sub	sp, #8
 80212ac:	af00      	add	r7, sp, #0
 80212ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80212b0:	687b      	ldr	r3, [r7, #4]
 80212b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80212b6:	f003 0301 	and.w	r3, r3, #1
 80212ba:	b2db      	uxtb	r3, r3
 80212bc:	2b00      	cmp	r3, #0
 80212be:	d016      	beq.n	80212ee <ip4_input_accept+0x46>
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	3304      	adds	r3, #4
 80212c4:	681b      	ldr	r3, [r3, #0]
 80212c6:	2b00      	cmp	r3, #0
 80212c8:	d011      	beq.n	80212ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80212ca:	4b0b      	ldr	r3, [pc, #44]	; (80212f8 <ip4_input_accept+0x50>)
 80212cc:	695a      	ldr	r2, [r3, #20]
 80212ce:	687b      	ldr	r3, [r7, #4]
 80212d0:	3304      	adds	r3, #4
 80212d2:	681b      	ldr	r3, [r3, #0]
 80212d4:	429a      	cmp	r2, r3
 80212d6:	d008      	beq.n	80212ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80212d8:	4b07      	ldr	r3, [pc, #28]	; (80212f8 <ip4_input_accept+0x50>)
 80212da:	695b      	ldr	r3, [r3, #20]
 80212dc:	6879      	ldr	r1, [r7, #4]
 80212de:	4618      	mov	r0, r3
 80212e0:	f000 fa0c 	bl	80216fc <ip4_addr_isbroadcast_u32>
 80212e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	d001      	beq.n	80212ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80212ea:	2301      	movs	r3, #1
 80212ec:	e000      	b.n	80212f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80212ee:	2300      	movs	r3, #0
}
 80212f0:	4618      	mov	r0, r3
 80212f2:	3708      	adds	r7, #8
 80212f4:	46bd      	mov	sp, r7
 80212f6:	bd80      	pop	{r7, pc}
 80212f8:	20010804 	.word	0x20010804

080212fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80212fc:	b580      	push	{r7, lr}
 80212fe:	b086      	sub	sp, #24
 8021300:	af00      	add	r7, sp, #0
 8021302:	6078      	str	r0, [r7, #4]
 8021304:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8021306:	687b      	ldr	r3, [r7, #4]
 8021308:	685b      	ldr	r3, [r3, #4]
 802130a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 802130c:	697b      	ldr	r3, [r7, #20]
 802130e:	781b      	ldrb	r3, [r3, #0]
 8021310:	091b      	lsrs	r3, r3, #4
 8021312:	b2db      	uxtb	r3, r3
 8021314:	2b04      	cmp	r3, #4
 8021316:	d004      	beq.n	8021322 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8021318:	6878      	ldr	r0, [r7, #4]
 802131a:	f7fd fdf1 	bl	801ef00 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 802131e:	2300      	movs	r3, #0
 8021320:	e0fd      	b.n	802151e <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8021322:	697b      	ldr	r3, [r7, #20]
 8021324:	781b      	ldrb	r3, [r3, #0]
 8021326:	f003 030f 	and.w	r3, r3, #15
 802132a:	b2db      	uxtb	r3, r3
 802132c:	009b      	lsls	r3, r3, #2
 802132e:	b2db      	uxtb	r3, r3
 8021330:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8021332:	697b      	ldr	r3, [r7, #20]
 8021334:	885b      	ldrh	r3, [r3, #2]
 8021336:	b29b      	uxth	r3, r3
 8021338:	4618      	mov	r0, r3
 802133a:	f7fc fa05 	bl	801d748 <lwip_htons>
 802133e:	4603      	mov	r3, r0
 8021340:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8021342:	687b      	ldr	r3, [r7, #4]
 8021344:	891b      	ldrh	r3, [r3, #8]
 8021346:	89ba      	ldrh	r2, [r7, #12]
 8021348:	429a      	cmp	r2, r3
 802134a:	d204      	bcs.n	8021356 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 802134c:	89bb      	ldrh	r3, [r7, #12]
 802134e:	4619      	mov	r1, r3
 8021350:	6878      	ldr	r0, [r7, #4]
 8021352:	f7fd fc4f 	bl	801ebf4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8021356:	687b      	ldr	r3, [r7, #4]
 8021358:	895b      	ldrh	r3, [r3, #10]
 802135a:	89fa      	ldrh	r2, [r7, #14]
 802135c:	429a      	cmp	r2, r3
 802135e:	d807      	bhi.n	8021370 <ip4_input+0x74>
 8021360:	687b      	ldr	r3, [r7, #4]
 8021362:	891b      	ldrh	r3, [r3, #8]
 8021364:	89ba      	ldrh	r2, [r7, #12]
 8021366:	429a      	cmp	r2, r3
 8021368:	d802      	bhi.n	8021370 <ip4_input+0x74>
 802136a:	89fb      	ldrh	r3, [r7, #14]
 802136c:	2b13      	cmp	r3, #19
 802136e:	d804      	bhi.n	802137a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8021370:	6878      	ldr	r0, [r7, #4]
 8021372:	f7fd fdc5 	bl	801ef00 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8021376:	2300      	movs	r3, #0
 8021378:	e0d1      	b.n	802151e <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 802137a:	697b      	ldr	r3, [r7, #20]
 802137c:	691b      	ldr	r3, [r3, #16]
 802137e:	4a6a      	ldr	r2, [pc, #424]	; (8021528 <ip4_input+0x22c>)
 8021380:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8021382:	697b      	ldr	r3, [r7, #20]
 8021384:	68db      	ldr	r3, [r3, #12]
 8021386:	4a68      	ldr	r2, [pc, #416]	; (8021528 <ip4_input+0x22c>)
 8021388:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802138a:	4b67      	ldr	r3, [pc, #412]	; (8021528 <ip4_input+0x22c>)
 802138c:	695b      	ldr	r3, [r3, #20]
 802138e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021392:	2be0      	cmp	r3, #224	; 0xe0
 8021394:	d112      	bne.n	80213bc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8021396:	683b      	ldr	r3, [r7, #0]
 8021398:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802139c:	f003 0301 	and.w	r3, r3, #1
 80213a0:	b2db      	uxtb	r3, r3
 80213a2:	2b00      	cmp	r3, #0
 80213a4:	d007      	beq.n	80213b6 <ip4_input+0xba>
 80213a6:	683b      	ldr	r3, [r7, #0]
 80213a8:	3304      	adds	r3, #4
 80213aa:	681b      	ldr	r3, [r3, #0]
 80213ac:	2b00      	cmp	r3, #0
 80213ae:	d002      	beq.n	80213b6 <ip4_input+0xba>
      netif = inp;
 80213b0:	683b      	ldr	r3, [r7, #0]
 80213b2:	613b      	str	r3, [r7, #16]
 80213b4:	e02a      	b.n	802140c <ip4_input+0x110>
    } else {
      netif = NULL;
 80213b6:	2300      	movs	r3, #0
 80213b8:	613b      	str	r3, [r7, #16]
 80213ba:	e027      	b.n	802140c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80213bc:	6838      	ldr	r0, [r7, #0]
 80213be:	f7ff ff73 	bl	80212a8 <ip4_input_accept>
 80213c2:	4603      	mov	r3, r0
 80213c4:	2b00      	cmp	r3, #0
 80213c6:	d002      	beq.n	80213ce <ip4_input+0xd2>
      netif = inp;
 80213c8:	683b      	ldr	r3, [r7, #0]
 80213ca:	613b      	str	r3, [r7, #16]
 80213cc:	e01e      	b.n	802140c <ip4_input+0x110>
    } else {
      netif = NULL;
 80213ce:	2300      	movs	r3, #0
 80213d0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80213d2:	4b55      	ldr	r3, [pc, #340]	; (8021528 <ip4_input+0x22c>)
 80213d4:	695b      	ldr	r3, [r3, #20]
 80213d6:	b2db      	uxtb	r3, r3
 80213d8:	2b7f      	cmp	r3, #127	; 0x7f
 80213da:	d017      	beq.n	802140c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80213dc:	4b53      	ldr	r3, [pc, #332]	; (802152c <ip4_input+0x230>)
 80213de:	681b      	ldr	r3, [r3, #0]
 80213e0:	613b      	str	r3, [r7, #16]
 80213e2:	e00e      	b.n	8021402 <ip4_input+0x106>
          if (netif == inp) {
 80213e4:	693a      	ldr	r2, [r7, #16]
 80213e6:	683b      	ldr	r3, [r7, #0]
 80213e8:	429a      	cmp	r2, r3
 80213ea:	d006      	beq.n	80213fa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80213ec:	6938      	ldr	r0, [r7, #16]
 80213ee:	f7ff ff5b 	bl	80212a8 <ip4_input_accept>
 80213f2:	4603      	mov	r3, r0
 80213f4:	2b00      	cmp	r3, #0
 80213f6:	d108      	bne.n	802140a <ip4_input+0x10e>
 80213f8:	e000      	b.n	80213fc <ip4_input+0x100>
            continue;
 80213fa:	bf00      	nop
        NETIF_FOREACH(netif) {
 80213fc:	693b      	ldr	r3, [r7, #16]
 80213fe:	681b      	ldr	r3, [r3, #0]
 8021400:	613b      	str	r3, [r7, #16]
 8021402:	693b      	ldr	r3, [r7, #16]
 8021404:	2b00      	cmp	r3, #0
 8021406:	d1ed      	bne.n	80213e4 <ip4_input+0xe8>
 8021408:	e000      	b.n	802140c <ip4_input+0x110>
            break;
 802140a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 802140c:	4b46      	ldr	r3, [pc, #280]	; (8021528 <ip4_input+0x22c>)
 802140e:	691b      	ldr	r3, [r3, #16]
 8021410:	6839      	ldr	r1, [r7, #0]
 8021412:	4618      	mov	r0, r3
 8021414:	f000 f972 	bl	80216fc <ip4_addr_isbroadcast_u32>
 8021418:	4603      	mov	r3, r0
 802141a:	2b00      	cmp	r3, #0
 802141c:	d105      	bne.n	802142a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 802141e:	4b42      	ldr	r3, [pc, #264]	; (8021528 <ip4_input+0x22c>)
 8021420:	691b      	ldr	r3, [r3, #16]
 8021422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021426:	2be0      	cmp	r3, #224	; 0xe0
 8021428:	d104      	bne.n	8021434 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 802142a:	6878      	ldr	r0, [r7, #4]
 802142c:	f7fd fd68 	bl	801ef00 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8021430:	2300      	movs	r3, #0
 8021432:	e074      	b.n	802151e <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8021434:	693b      	ldr	r3, [r7, #16]
 8021436:	2b00      	cmp	r3, #0
 8021438:	d104      	bne.n	8021444 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 802143a:	6878      	ldr	r0, [r7, #4]
 802143c:	f7fd fd60 	bl	801ef00 <pbuf_free>
    return ERR_OK;
 8021440:	2300      	movs	r3, #0
 8021442:	e06c      	b.n	802151e <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8021444:	697b      	ldr	r3, [r7, #20]
 8021446:	88db      	ldrh	r3, [r3, #6]
 8021448:	b29b      	uxth	r3, r3
 802144a:	461a      	mov	r2, r3
 802144c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8021450:	4013      	ands	r3, r2
 8021452:	2b00      	cmp	r3, #0
 8021454:	d00b      	beq.n	802146e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8021456:	6878      	ldr	r0, [r7, #4]
 8021458:	f000 fd26 	bl	8021ea8 <ip4_reass>
 802145c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802145e:	687b      	ldr	r3, [r7, #4]
 8021460:	2b00      	cmp	r3, #0
 8021462:	d101      	bne.n	8021468 <ip4_input+0x16c>
      return ERR_OK;
 8021464:	2300      	movs	r3, #0
 8021466:	e05a      	b.n	802151e <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8021468:	687b      	ldr	r3, [r7, #4]
 802146a:	685b      	ldr	r3, [r3, #4]
 802146c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 802146e:	4a2e      	ldr	r2, [pc, #184]	; (8021528 <ip4_input+0x22c>)
 8021470:	693b      	ldr	r3, [r7, #16]
 8021472:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8021474:	4a2c      	ldr	r2, [pc, #176]	; (8021528 <ip4_input+0x22c>)
 8021476:	683b      	ldr	r3, [r7, #0]
 8021478:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 802147a:	4a2b      	ldr	r2, [pc, #172]	; (8021528 <ip4_input+0x22c>)
 802147c:	697b      	ldr	r3, [r7, #20]
 802147e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8021480:	697b      	ldr	r3, [r7, #20]
 8021482:	781b      	ldrb	r3, [r3, #0]
 8021484:	f003 030f 	and.w	r3, r3, #15
 8021488:	b2db      	uxtb	r3, r3
 802148a:	009b      	lsls	r3, r3, #2
 802148c:	b2db      	uxtb	r3, r3
 802148e:	b29a      	uxth	r2, r3
 8021490:	4b25      	ldr	r3, [pc, #148]	; (8021528 <ip4_input+0x22c>)
 8021492:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8021494:	89fb      	ldrh	r3, [r7, #14]
 8021496:	4619      	mov	r1, r3
 8021498:	6878      	ldr	r0, [r7, #4]
 802149a:	f7fd fcab 	bl	801edf4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802149e:	697b      	ldr	r3, [r7, #20]
 80214a0:	7a5b      	ldrb	r3, [r3, #9]
 80214a2:	2b01      	cmp	r3, #1
 80214a4:	d006      	beq.n	80214b4 <ip4_input+0x1b8>
 80214a6:	2b11      	cmp	r3, #17
 80214a8:	d109      	bne.n	80214be <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80214aa:	6839      	ldr	r1, [r7, #0]
 80214ac:	6878      	ldr	r0, [r7, #4]
 80214ae:	f7fe f9b5 	bl	801f81c <udp_input>
        break;
 80214b2:	e021      	b.n	80214f8 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80214b4:	6839      	ldr	r1, [r7, #0]
 80214b6:	6878      	ldr	r0, [r7, #4]
 80214b8:	f7ff fcf8 	bl	8020eac <icmp_input>
        break;
 80214bc:	e01c      	b.n	80214f8 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80214be:	4b1a      	ldr	r3, [pc, #104]	; (8021528 <ip4_input+0x22c>)
 80214c0:	695b      	ldr	r3, [r3, #20]
 80214c2:	6939      	ldr	r1, [r7, #16]
 80214c4:	4618      	mov	r0, r3
 80214c6:	f000 f919 	bl	80216fc <ip4_addr_isbroadcast_u32>
 80214ca:	4603      	mov	r3, r0
 80214cc:	2b00      	cmp	r3, #0
 80214ce:	d10f      	bne.n	80214f0 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80214d0:	4b15      	ldr	r3, [pc, #84]	; (8021528 <ip4_input+0x22c>)
 80214d2:	695b      	ldr	r3, [r3, #20]
 80214d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80214d8:	2be0      	cmp	r3, #224	; 0xe0
 80214da:	d009      	beq.n	80214f0 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80214dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80214e0:	4619      	mov	r1, r3
 80214e2:	6878      	ldr	r0, [r7, #4]
 80214e4:	f7fd fcf9 	bl	801eeda <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80214e8:	2102      	movs	r1, #2
 80214ea:	6878      	ldr	r0, [r7, #4]
 80214ec:	f7ff fde2 	bl	80210b4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80214f0:	6878      	ldr	r0, [r7, #4]
 80214f2:	f7fd fd05 	bl	801ef00 <pbuf_free>
        break;
 80214f6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80214f8:	4b0b      	ldr	r3, [pc, #44]	; (8021528 <ip4_input+0x22c>)
 80214fa:	2200      	movs	r2, #0
 80214fc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80214fe:	4b0a      	ldr	r3, [pc, #40]	; (8021528 <ip4_input+0x22c>)
 8021500:	2200      	movs	r2, #0
 8021502:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8021504:	4b08      	ldr	r3, [pc, #32]	; (8021528 <ip4_input+0x22c>)
 8021506:	2200      	movs	r2, #0
 8021508:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 802150a:	4b07      	ldr	r3, [pc, #28]	; (8021528 <ip4_input+0x22c>)
 802150c:	2200      	movs	r2, #0
 802150e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8021510:	4b05      	ldr	r3, [pc, #20]	; (8021528 <ip4_input+0x22c>)
 8021512:	2200      	movs	r2, #0
 8021514:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8021516:	4b04      	ldr	r3, [pc, #16]	; (8021528 <ip4_input+0x22c>)
 8021518:	2200      	movs	r2, #0
 802151a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 802151c:	2300      	movs	r3, #0
}
 802151e:	4618      	mov	r0, r3
 8021520:	3718      	adds	r7, #24
 8021522:	46bd      	mov	sp, r7
 8021524:	bd80      	pop	{r7, pc}
 8021526:	bf00      	nop
 8021528:	20010804 	.word	0x20010804
 802152c:	20013e14 	.word	0x20013e14

08021530 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8021530:	b580      	push	{r7, lr}
 8021532:	b08a      	sub	sp, #40	; 0x28
 8021534:	af04      	add	r7, sp, #16
 8021536:	60f8      	str	r0, [r7, #12]
 8021538:	60b9      	str	r1, [r7, #8]
 802153a:	607a      	str	r2, [r7, #4]
 802153c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 802153e:	68bb      	ldr	r3, [r7, #8]
 8021540:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8021542:	687b      	ldr	r3, [r7, #4]
 8021544:	2b00      	cmp	r3, #0
 8021546:	d009      	beq.n	802155c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8021548:	68bb      	ldr	r3, [r7, #8]
 802154a:	2b00      	cmp	r3, #0
 802154c:	d003      	beq.n	8021556 <ip4_output_if+0x26>
 802154e:	68bb      	ldr	r3, [r7, #8]
 8021550:	681b      	ldr	r3, [r3, #0]
 8021552:	2b00      	cmp	r3, #0
 8021554:	d102      	bne.n	802155c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8021556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021558:	3304      	adds	r3, #4
 802155a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 802155c:	78fa      	ldrb	r2, [r7, #3]
 802155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021560:	9302      	str	r3, [sp, #8]
 8021562:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8021566:	9301      	str	r3, [sp, #4]
 8021568:	f897 3020 	ldrb.w	r3, [r7, #32]
 802156c:	9300      	str	r3, [sp, #0]
 802156e:	4613      	mov	r3, r2
 8021570:	687a      	ldr	r2, [r7, #4]
 8021572:	6979      	ldr	r1, [r7, #20]
 8021574:	68f8      	ldr	r0, [r7, #12]
 8021576:	f000 f805 	bl	8021584 <ip4_output_if_src>
 802157a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 802157c:	4618      	mov	r0, r3
 802157e:	3718      	adds	r7, #24
 8021580:	46bd      	mov	sp, r7
 8021582:	bd80      	pop	{r7, pc}

08021584 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8021584:	b580      	push	{r7, lr}
 8021586:	b088      	sub	sp, #32
 8021588:	af00      	add	r7, sp, #0
 802158a:	60f8      	str	r0, [r7, #12]
 802158c:	60b9      	str	r1, [r7, #8]
 802158e:	607a      	str	r2, [r7, #4]
 8021590:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8021592:	68fb      	ldr	r3, [r7, #12]
 8021594:	7b9b      	ldrb	r3, [r3, #14]
 8021596:	2b01      	cmp	r3, #1
 8021598:	d006      	beq.n	80215a8 <ip4_output_if_src+0x24>
 802159a:	4b52      	ldr	r3, [pc, #328]	; (80216e4 <ip4_output_if_src+0x160>)
 802159c:	f44f 7255 	mov.w	r2, #852	; 0x354
 80215a0:	4951      	ldr	r1, [pc, #324]	; (80216e8 <ip4_output_if_src+0x164>)
 80215a2:	4852      	ldr	r0, [pc, #328]	; (80216ec <ip4_output_if_src+0x168>)
 80215a4:	f001 f9e4 	bl	8022970 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80215a8:	687b      	ldr	r3, [r7, #4]
 80215aa:	2b00      	cmp	r3, #0
 80215ac:	d060      	beq.n	8021670 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80215ae:	2314      	movs	r3, #20
 80215b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80215b2:	2114      	movs	r1, #20
 80215b4:	68f8      	ldr	r0, [r7, #12]
 80215b6:	f7fd fc0d 	bl	801edd4 <pbuf_add_header>
 80215ba:	4603      	mov	r3, r0
 80215bc:	2b00      	cmp	r3, #0
 80215be:	d002      	beq.n	80215c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80215c0:	f06f 0301 	mvn.w	r3, #1
 80215c4:	e089      	b.n	80216da <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80215c6:	68fb      	ldr	r3, [r7, #12]
 80215c8:	685b      	ldr	r3, [r3, #4]
 80215ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80215cc:	68fb      	ldr	r3, [r7, #12]
 80215ce:	895b      	ldrh	r3, [r3, #10]
 80215d0:	2b13      	cmp	r3, #19
 80215d2:	d806      	bhi.n	80215e2 <ip4_output_if_src+0x5e>
 80215d4:	4b43      	ldr	r3, [pc, #268]	; (80216e4 <ip4_output_if_src+0x160>)
 80215d6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80215da:	4945      	ldr	r1, [pc, #276]	; (80216f0 <ip4_output_if_src+0x16c>)
 80215dc:	4843      	ldr	r0, [pc, #268]	; (80216ec <ip4_output_if_src+0x168>)
 80215de:	f001 f9c7 	bl	8022970 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80215e2:	69fb      	ldr	r3, [r7, #28]
 80215e4:	78fa      	ldrb	r2, [r7, #3]
 80215e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80215e8:	69fb      	ldr	r3, [r7, #28]
 80215ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80215ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80215f0:	687b      	ldr	r3, [r7, #4]
 80215f2:	681a      	ldr	r2, [r3, #0]
 80215f4:	69fb      	ldr	r3, [r7, #28]
 80215f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80215f8:	8b7b      	ldrh	r3, [r7, #26]
 80215fa:	089b      	lsrs	r3, r3, #2
 80215fc:	b29b      	uxth	r3, r3
 80215fe:	b2db      	uxtb	r3, r3
 8021600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021604:	b2da      	uxtb	r2, r3
 8021606:	69fb      	ldr	r3, [r7, #28]
 8021608:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 802160a:	69fb      	ldr	r3, [r7, #28]
 802160c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8021610:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8021612:	68fb      	ldr	r3, [r7, #12]
 8021614:	891b      	ldrh	r3, [r3, #8]
 8021616:	4618      	mov	r0, r3
 8021618:	f7fc f896 	bl	801d748 <lwip_htons>
 802161c:	4603      	mov	r3, r0
 802161e:	461a      	mov	r2, r3
 8021620:	69fb      	ldr	r3, [r7, #28]
 8021622:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8021624:	69fb      	ldr	r3, [r7, #28]
 8021626:	2200      	movs	r2, #0
 8021628:	719a      	strb	r2, [r3, #6]
 802162a:	2200      	movs	r2, #0
 802162c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802162e:	4b31      	ldr	r3, [pc, #196]	; (80216f4 <ip4_output_if_src+0x170>)
 8021630:	881b      	ldrh	r3, [r3, #0]
 8021632:	4618      	mov	r0, r3
 8021634:	f7fc f888 	bl	801d748 <lwip_htons>
 8021638:	4603      	mov	r3, r0
 802163a:	461a      	mov	r2, r3
 802163c:	69fb      	ldr	r3, [r7, #28]
 802163e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8021640:	4b2c      	ldr	r3, [pc, #176]	; (80216f4 <ip4_output_if_src+0x170>)
 8021642:	881b      	ldrh	r3, [r3, #0]
 8021644:	3301      	adds	r3, #1
 8021646:	b29a      	uxth	r2, r3
 8021648:	4b2a      	ldr	r3, [pc, #168]	; (80216f4 <ip4_output_if_src+0x170>)
 802164a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 802164c:	68bb      	ldr	r3, [r7, #8]
 802164e:	2b00      	cmp	r3, #0
 8021650:	d104      	bne.n	802165c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8021652:	4b29      	ldr	r3, [pc, #164]	; (80216f8 <ip4_output_if_src+0x174>)
 8021654:	681a      	ldr	r2, [r3, #0]
 8021656:	69fb      	ldr	r3, [r7, #28]
 8021658:	60da      	str	r2, [r3, #12]
 802165a:	e003      	b.n	8021664 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 802165c:	68bb      	ldr	r3, [r7, #8]
 802165e:	681a      	ldr	r2, [r3, #0]
 8021660:	69fb      	ldr	r3, [r7, #28]
 8021662:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8021664:	69fb      	ldr	r3, [r7, #28]
 8021666:	2200      	movs	r2, #0
 8021668:	729a      	strb	r2, [r3, #10]
 802166a:	2200      	movs	r2, #0
 802166c:	72da      	strb	r2, [r3, #11]
 802166e:	e00f      	b.n	8021690 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8021670:	68fb      	ldr	r3, [r7, #12]
 8021672:	895b      	ldrh	r3, [r3, #10]
 8021674:	2b13      	cmp	r3, #19
 8021676:	d802      	bhi.n	802167e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8021678:	f06f 0301 	mvn.w	r3, #1
 802167c:	e02d      	b.n	80216da <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 802167e:	68fb      	ldr	r3, [r7, #12]
 8021680:	685b      	ldr	r3, [r3, #4]
 8021682:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8021684:	69fb      	ldr	r3, [r7, #28]
 8021686:	691b      	ldr	r3, [r3, #16]
 8021688:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 802168a:	f107 0314 	add.w	r3, r7, #20
 802168e:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 8021690:	687b      	ldr	r3, [r7, #4]
 8021692:	681a      	ldr	r2, [r3, #0]
 8021694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021696:	3304      	adds	r3, #4
 8021698:	681b      	ldr	r3, [r3, #0]
 802169a:	429a      	cmp	r2, r3
 802169c:	d105      	bne.n	80216aa <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 802169e:	68f9      	ldr	r1, [r7, #12]
 80216a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80216a2:	f7fd f86f 	bl	801e784 <netif_loop_output>
 80216a6:	4603      	mov	r3, r0
 80216a8:	e017      	b.n	80216da <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80216aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	d00c      	beq.n	80216cc <ip4_output_if_src+0x148>
 80216b2:	68fb      	ldr	r3, [r7, #12]
 80216b4:	891a      	ldrh	r2, [r3, #8]
 80216b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80216ba:	429a      	cmp	r2, r3
 80216bc:	d906      	bls.n	80216cc <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 80216be:	687a      	ldr	r2, [r7, #4]
 80216c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80216c2:	68f8      	ldr	r0, [r7, #12]
 80216c4:	f000 fde4 	bl	8022290 <ip4_frag>
 80216c8:	4603      	mov	r3, r0
 80216ca:	e006      	b.n	80216da <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80216cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216ce:	695b      	ldr	r3, [r3, #20]
 80216d0:	687a      	ldr	r2, [r7, #4]
 80216d2:	68f9      	ldr	r1, [r7, #12]
 80216d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80216d6:	4798      	blx	r3
 80216d8:	4603      	mov	r3, r0
}
 80216da:	4618      	mov	r0, r3
 80216dc:	3720      	adds	r7, #32
 80216de:	46bd      	mov	sp, r7
 80216e0:	bd80      	pop	{r7, pc}
 80216e2:	bf00      	nop
 80216e4:	08028af8 	.word	0x08028af8
 80216e8:	08028b2c 	.word	0x08028b2c
 80216ec:	08028b38 	.word	0x08028b38
 80216f0:	08028b60 	.word	0x08028b60
 80216f4:	2001431e 	.word	0x2001431e
 80216f8:	08029304 	.word	0x08029304

080216fc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80216fc:	b480      	push	{r7}
 80216fe:	b085      	sub	sp, #20
 8021700:	af00      	add	r7, sp, #0
 8021702:	6078      	str	r0, [r7, #4]
 8021704:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8021706:	687b      	ldr	r3, [r7, #4]
 8021708:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021710:	d002      	beq.n	8021718 <ip4_addr_isbroadcast_u32+0x1c>
 8021712:	687b      	ldr	r3, [r7, #4]
 8021714:	2b00      	cmp	r3, #0
 8021716:	d101      	bne.n	802171c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8021718:	2301      	movs	r3, #1
 802171a:	e02a      	b.n	8021772 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 802171c:	683b      	ldr	r3, [r7, #0]
 802171e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021722:	f003 0302 	and.w	r3, r3, #2
 8021726:	2b00      	cmp	r3, #0
 8021728:	d101      	bne.n	802172e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 802172a:	2300      	movs	r3, #0
 802172c:	e021      	b.n	8021772 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 802172e:	683b      	ldr	r3, [r7, #0]
 8021730:	3304      	adds	r3, #4
 8021732:	681b      	ldr	r3, [r3, #0]
 8021734:	687a      	ldr	r2, [r7, #4]
 8021736:	429a      	cmp	r2, r3
 8021738:	d101      	bne.n	802173e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 802173a:	2300      	movs	r3, #0
 802173c:	e019      	b.n	8021772 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 802173e:	68fa      	ldr	r2, [r7, #12]
 8021740:	683b      	ldr	r3, [r7, #0]
 8021742:	3304      	adds	r3, #4
 8021744:	681b      	ldr	r3, [r3, #0]
 8021746:	405a      	eors	r2, r3
 8021748:	683b      	ldr	r3, [r7, #0]
 802174a:	3308      	adds	r3, #8
 802174c:	681b      	ldr	r3, [r3, #0]
 802174e:	4013      	ands	r3, r2
 8021750:	2b00      	cmp	r3, #0
 8021752:	d10d      	bne.n	8021770 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021754:	683b      	ldr	r3, [r7, #0]
 8021756:	3308      	adds	r3, #8
 8021758:	681b      	ldr	r3, [r3, #0]
 802175a:	43da      	mvns	r2, r3
 802175c:	687b      	ldr	r3, [r7, #4]
 802175e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8021760:	683b      	ldr	r3, [r7, #0]
 8021762:	3308      	adds	r3, #8
 8021764:	681b      	ldr	r3, [r3, #0]
 8021766:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021768:	429a      	cmp	r2, r3
 802176a:	d101      	bne.n	8021770 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 802176c:	2301      	movs	r3, #1
 802176e:	e000      	b.n	8021772 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8021770:	2300      	movs	r3, #0
  }
}
 8021772:	4618      	mov	r0, r3
 8021774:	3714      	adds	r7, #20
 8021776:	46bd      	mov	sp, r7
 8021778:	f85d 7b04 	ldr.w	r7, [sp], #4
 802177c:	4770      	bx	lr
	...

08021780 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8021780:	b580      	push	{r7, lr}
 8021782:	b082      	sub	sp, #8
 8021784:	af00      	add	r7, sp, #0
 8021786:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8021788:	2210      	movs	r2, #16
 802178a:	4904      	ldr	r1, [pc, #16]	; (802179c <ip4addr_ntoa+0x1c>)
 802178c:	6878      	ldr	r0, [r7, #4]
 802178e:	f000 f807 	bl	80217a0 <ip4addr_ntoa_r>
 8021792:	4603      	mov	r3, r0
}
 8021794:	4618      	mov	r0, r3
 8021796:	3708      	adds	r7, #8
 8021798:	46bd      	mov	sp, r7
 802179a:	bd80      	pop	{r7, pc}
 802179c:	20014320 	.word	0x20014320

080217a0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80217a0:	b480      	push	{r7}
 80217a2:	b08d      	sub	sp, #52	; 0x34
 80217a4:	af00      	add	r7, sp, #0
 80217a6:	60f8      	str	r0, [r7, #12]
 80217a8:	60b9      	str	r1, [r7, #8]
 80217aa:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80217ac:	2300      	movs	r3, #0
 80217ae:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80217b0:	68fb      	ldr	r3, [r7, #12]
 80217b2:	681b      	ldr	r3, [r3, #0]
 80217b4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80217b6:	68bb      	ldr	r3, [r7, #8]
 80217b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80217ba:	f107 0318 	add.w	r3, r7, #24
 80217be:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80217c0:	2300      	movs	r3, #0
 80217c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80217c6:	e058      	b.n	802187a <ip4addr_ntoa_r+0xda>
    i = 0;
 80217c8:	2300      	movs	r3, #0
 80217ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80217ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217d0:	781a      	ldrb	r2, [r3, #0]
 80217d2:	4b32      	ldr	r3, [pc, #200]	; (802189c <ip4addr_ntoa_r+0xfc>)
 80217d4:	fba3 1302 	umull	r1, r3, r3, r2
 80217d8:	08d9      	lsrs	r1, r3, #3
 80217da:	460b      	mov	r3, r1
 80217dc:	009b      	lsls	r3, r3, #2
 80217de:	440b      	add	r3, r1
 80217e0:	005b      	lsls	r3, r3, #1
 80217e2:	1ad3      	subs	r3, r2, r3
 80217e4:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80217e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217e8:	781b      	ldrb	r3, [r3, #0]
 80217ea:	4a2c      	ldr	r2, [pc, #176]	; (802189c <ip4addr_ntoa_r+0xfc>)
 80217ec:	fba2 2303 	umull	r2, r3, r2, r3
 80217f0:	08db      	lsrs	r3, r3, #3
 80217f2:	b2da      	uxtb	r2, r3
 80217f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217f6:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80217f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80217fc:	1c5a      	adds	r2, r3, #1
 80217fe:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8021802:	4619      	mov	r1, r3
 8021804:	7ffb      	ldrb	r3, [r7, #31]
 8021806:	3330      	adds	r3, #48	; 0x30
 8021808:	b2da      	uxtb	r2, r3
 802180a:	f101 0330 	add.w	r3, r1, #48	; 0x30
 802180e:	443b      	add	r3, r7
 8021810:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8021814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021816:	781b      	ldrb	r3, [r3, #0]
 8021818:	2b00      	cmp	r3, #0
 802181a:	d1d8      	bne.n	80217ce <ip4addr_ntoa_r+0x2e>
    while (i--) {
 802181c:	e011      	b.n	8021842 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 802181e:	6a3b      	ldr	r3, [r7, #32]
 8021820:	1c5a      	adds	r2, r3, #1
 8021822:	623a      	str	r2, [r7, #32]
 8021824:	687a      	ldr	r2, [r7, #4]
 8021826:	429a      	cmp	r2, r3
 8021828:	dc01      	bgt.n	802182e <ip4addr_ntoa_r+0x8e>
        return NULL;
 802182a:	2300      	movs	r3, #0
 802182c:	e030      	b.n	8021890 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 802182e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8021832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021834:	1c59      	adds	r1, r3, #1
 8021836:	62f9      	str	r1, [r7, #44]	; 0x2c
 8021838:	3230      	adds	r2, #48	; 0x30
 802183a:	443a      	add	r2, r7
 802183c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8021840:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8021842:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021846:	1e5a      	subs	r2, r3, #1
 8021848:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 802184c:	2b00      	cmp	r3, #0
 802184e:	d1e6      	bne.n	802181e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8021850:	6a3b      	ldr	r3, [r7, #32]
 8021852:	1c5a      	adds	r2, r3, #1
 8021854:	623a      	str	r2, [r7, #32]
 8021856:	687a      	ldr	r2, [r7, #4]
 8021858:	429a      	cmp	r2, r3
 802185a:	dc01      	bgt.n	8021860 <ip4addr_ntoa_r+0xc0>
      return NULL;
 802185c:	2300      	movs	r3, #0
 802185e:	e017      	b.n	8021890 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8021860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021862:	1c5a      	adds	r2, r3, #1
 8021864:	62fa      	str	r2, [r7, #44]	; 0x2c
 8021866:	222e      	movs	r2, #46	; 0x2e
 8021868:	701a      	strb	r2, [r3, #0]
    ap++;
 802186a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802186c:	3301      	adds	r3, #1
 802186e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8021870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021874:	3301      	adds	r3, #1
 8021876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802187a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802187e:	2b03      	cmp	r3, #3
 8021880:	d9a2      	bls.n	80217c8 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8021882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021884:	3b01      	subs	r3, #1
 8021886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802188a:	2200      	movs	r2, #0
 802188c:	701a      	strb	r2, [r3, #0]
  return buf;
 802188e:	68bb      	ldr	r3, [r7, #8]
}
 8021890:	4618      	mov	r0, r3
 8021892:	3734      	adds	r7, #52	; 0x34
 8021894:	46bd      	mov	sp, r7
 8021896:	f85d 7b04 	ldr.w	r7, [sp], #4
 802189a:	4770      	bx	lr
 802189c:	cccccccd 	.word	0xcccccccd

080218a0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80218a0:	b580      	push	{r7, lr}
 80218a2:	b084      	sub	sp, #16
 80218a4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80218a6:	2300      	movs	r3, #0
 80218a8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80218aa:	4b12      	ldr	r3, [pc, #72]	; (80218f4 <ip_reass_tmr+0x54>)
 80218ac:	681b      	ldr	r3, [r3, #0]
 80218ae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80218b0:	e018      	b.n	80218e4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80218b2:	68fb      	ldr	r3, [r7, #12]
 80218b4:	7fdb      	ldrb	r3, [r3, #31]
 80218b6:	2b00      	cmp	r3, #0
 80218b8:	d00b      	beq.n	80218d2 <ip_reass_tmr+0x32>
      r->timer--;
 80218ba:	68fb      	ldr	r3, [r7, #12]
 80218bc:	7fdb      	ldrb	r3, [r3, #31]
 80218be:	3b01      	subs	r3, #1
 80218c0:	b2da      	uxtb	r2, r3
 80218c2:	68fb      	ldr	r3, [r7, #12]
 80218c4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80218c6:	68fb      	ldr	r3, [r7, #12]
 80218c8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80218ca:	68fb      	ldr	r3, [r7, #12]
 80218cc:	681b      	ldr	r3, [r3, #0]
 80218ce:	60fb      	str	r3, [r7, #12]
 80218d0:	e008      	b.n	80218e4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80218d2:	68fb      	ldr	r3, [r7, #12]
 80218d4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80218d6:	68fb      	ldr	r3, [r7, #12]
 80218d8:	681b      	ldr	r3, [r3, #0]
 80218da:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80218dc:	68b9      	ldr	r1, [r7, #8]
 80218de:	6878      	ldr	r0, [r7, #4]
 80218e0:	f000 f80a 	bl	80218f8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80218e4:	68fb      	ldr	r3, [r7, #12]
 80218e6:	2b00      	cmp	r3, #0
 80218e8:	d1e3      	bne.n	80218b2 <ip_reass_tmr+0x12>
    }
  }
}
 80218ea:	bf00      	nop
 80218ec:	bf00      	nop
 80218ee:	3710      	adds	r7, #16
 80218f0:	46bd      	mov	sp, r7
 80218f2:	bd80      	pop	{r7, pc}
 80218f4:	20014330 	.word	0x20014330

080218f8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80218f8:	b580      	push	{r7, lr}
 80218fa:	b088      	sub	sp, #32
 80218fc:	af00      	add	r7, sp, #0
 80218fe:	6078      	str	r0, [r7, #4]
 8021900:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8021902:	2300      	movs	r3, #0
 8021904:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8021906:	683a      	ldr	r2, [r7, #0]
 8021908:	687b      	ldr	r3, [r7, #4]
 802190a:	429a      	cmp	r2, r3
 802190c:	d105      	bne.n	802191a <ip_reass_free_complete_datagram+0x22>
 802190e:	4b45      	ldr	r3, [pc, #276]	; (8021a24 <ip_reass_free_complete_datagram+0x12c>)
 8021910:	22ab      	movs	r2, #171	; 0xab
 8021912:	4945      	ldr	r1, [pc, #276]	; (8021a28 <ip_reass_free_complete_datagram+0x130>)
 8021914:	4845      	ldr	r0, [pc, #276]	; (8021a2c <ip_reass_free_complete_datagram+0x134>)
 8021916:	f001 f82b 	bl	8022970 <iprintf>
  if (prev != NULL) {
 802191a:	683b      	ldr	r3, [r7, #0]
 802191c:	2b00      	cmp	r3, #0
 802191e:	d00a      	beq.n	8021936 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8021920:	683b      	ldr	r3, [r7, #0]
 8021922:	681b      	ldr	r3, [r3, #0]
 8021924:	687a      	ldr	r2, [r7, #4]
 8021926:	429a      	cmp	r2, r3
 8021928:	d005      	beq.n	8021936 <ip_reass_free_complete_datagram+0x3e>
 802192a:	4b3e      	ldr	r3, [pc, #248]	; (8021a24 <ip_reass_free_complete_datagram+0x12c>)
 802192c:	22ad      	movs	r2, #173	; 0xad
 802192e:	4940      	ldr	r1, [pc, #256]	; (8021a30 <ip_reass_free_complete_datagram+0x138>)
 8021930:	483e      	ldr	r0, [pc, #248]	; (8021a2c <ip_reass_free_complete_datagram+0x134>)
 8021932:	f001 f81d 	bl	8022970 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8021936:	687b      	ldr	r3, [r7, #4]
 8021938:	685b      	ldr	r3, [r3, #4]
 802193a:	685b      	ldr	r3, [r3, #4]
 802193c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 802193e:	697b      	ldr	r3, [r7, #20]
 8021940:	889b      	ldrh	r3, [r3, #4]
 8021942:	b29b      	uxth	r3, r3
 8021944:	2b00      	cmp	r3, #0
 8021946:	d12a      	bne.n	802199e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8021948:	687b      	ldr	r3, [r7, #4]
 802194a:	685b      	ldr	r3, [r3, #4]
 802194c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 802194e:	697b      	ldr	r3, [r7, #20]
 8021950:	681a      	ldr	r2, [r3, #0]
 8021952:	687b      	ldr	r3, [r7, #4]
 8021954:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8021956:	69bb      	ldr	r3, [r7, #24]
 8021958:	6858      	ldr	r0, [r3, #4]
 802195a:	687b      	ldr	r3, [r7, #4]
 802195c:	3308      	adds	r3, #8
 802195e:	2214      	movs	r2, #20
 8021960:	4619      	mov	r1, r3
 8021962:	f000 fef5 	bl	8022750 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8021966:	2101      	movs	r1, #1
 8021968:	69b8      	ldr	r0, [r7, #24]
 802196a:	f7ff fbb3 	bl	80210d4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 802196e:	69b8      	ldr	r0, [r7, #24]
 8021970:	f7fd fb4e 	bl	801f010 <pbuf_clen>
 8021974:	4603      	mov	r3, r0
 8021976:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021978:	8bfa      	ldrh	r2, [r7, #30]
 802197a:	8a7b      	ldrh	r3, [r7, #18]
 802197c:	4413      	add	r3, r2
 802197e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021982:	db05      	blt.n	8021990 <ip_reass_free_complete_datagram+0x98>
 8021984:	4b27      	ldr	r3, [pc, #156]	; (8021a24 <ip_reass_free_complete_datagram+0x12c>)
 8021986:	22bc      	movs	r2, #188	; 0xbc
 8021988:	492a      	ldr	r1, [pc, #168]	; (8021a34 <ip_reass_free_complete_datagram+0x13c>)
 802198a:	4828      	ldr	r0, [pc, #160]	; (8021a2c <ip_reass_free_complete_datagram+0x134>)
 802198c:	f000 fff0 	bl	8022970 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021990:	8bfa      	ldrh	r2, [r7, #30]
 8021992:	8a7b      	ldrh	r3, [r7, #18]
 8021994:	4413      	add	r3, r2
 8021996:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8021998:	69b8      	ldr	r0, [r7, #24]
 802199a:	f7fd fab1 	bl	801ef00 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 802199e:	687b      	ldr	r3, [r7, #4]
 80219a0:	685b      	ldr	r3, [r3, #4]
 80219a2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80219a4:	e01f      	b.n	80219e6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80219a6:	69bb      	ldr	r3, [r7, #24]
 80219a8:	685b      	ldr	r3, [r3, #4]
 80219aa:	617b      	str	r3, [r7, #20]
    pcur = p;
 80219ac:	69bb      	ldr	r3, [r7, #24]
 80219ae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80219b0:	697b      	ldr	r3, [r7, #20]
 80219b2:	681b      	ldr	r3, [r3, #0]
 80219b4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80219b6:	68f8      	ldr	r0, [r7, #12]
 80219b8:	f7fd fb2a 	bl	801f010 <pbuf_clen>
 80219bc:	4603      	mov	r3, r0
 80219be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80219c0:	8bfa      	ldrh	r2, [r7, #30]
 80219c2:	8a7b      	ldrh	r3, [r7, #18]
 80219c4:	4413      	add	r3, r2
 80219c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80219ca:	db05      	blt.n	80219d8 <ip_reass_free_complete_datagram+0xe0>
 80219cc:	4b15      	ldr	r3, [pc, #84]	; (8021a24 <ip_reass_free_complete_datagram+0x12c>)
 80219ce:	22cc      	movs	r2, #204	; 0xcc
 80219d0:	4918      	ldr	r1, [pc, #96]	; (8021a34 <ip_reass_free_complete_datagram+0x13c>)
 80219d2:	4816      	ldr	r0, [pc, #88]	; (8021a2c <ip_reass_free_complete_datagram+0x134>)
 80219d4:	f000 ffcc 	bl	8022970 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80219d8:	8bfa      	ldrh	r2, [r7, #30]
 80219da:	8a7b      	ldrh	r3, [r7, #18]
 80219dc:	4413      	add	r3, r2
 80219de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80219e0:	68f8      	ldr	r0, [r7, #12]
 80219e2:	f7fd fa8d 	bl	801ef00 <pbuf_free>
  while (p != NULL) {
 80219e6:	69bb      	ldr	r3, [r7, #24]
 80219e8:	2b00      	cmp	r3, #0
 80219ea:	d1dc      	bne.n	80219a6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80219ec:	6839      	ldr	r1, [r7, #0]
 80219ee:	6878      	ldr	r0, [r7, #4]
 80219f0:	f000 f8c2 	bl	8021b78 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80219f4:	4b10      	ldr	r3, [pc, #64]	; (8021a38 <ip_reass_free_complete_datagram+0x140>)
 80219f6:	881b      	ldrh	r3, [r3, #0]
 80219f8:	8bfa      	ldrh	r2, [r7, #30]
 80219fa:	429a      	cmp	r2, r3
 80219fc:	d905      	bls.n	8021a0a <ip_reass_free_complete_datagram+0x112>
 80219fe:	4b09      	ldr	r3, [pc, #36]	; (8021a24 <ip_reass_free_complete_datagram+0x12c>)
 8021a00:	22d2      	movs	r2, #210	; 0xd2
 8021a02:	490e      	ldr	r1, [pc, #56]	; (8021a3c <ip_reass_free_complete_datagram+0x144>)
 8021a04:	4809      	ldr	r0, [pc, #36]	; (8021a2c <ip_reass_free_complete_datagram+0x134>)
 8021a06:	f000 ffb3 	bl	8022970 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8021a0a:	4b0b      	ldr	r3, [pc, #44]	; (8021a38 <ip_reass_free_complete_datagram+0x140>)
 8021a0c:	881a      	ldrh	r2, [r3, #0]
 8021a0e:	8bfb      	ldrh	r3, [r7, #30]
 8021a10:	1ad3      	subs	r3, r2, r3
 8021a12:	b29a      	uxth	r2, r3
 8021a14:	4b08      	ldr	r3, [pc, #32]	; (8021a38 <ip_reass_free_complete_datagram+0x140>)
 8021a16:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8021a18:	8bfb      	ldrh	r3, [r7, #30]
}
 8021a1a:	4618      	mov	r0, r3
 8021a1c:	3720      	adds	r7, #32
 8021a1e:	46bd      	mov	sp, r7
 8021a20:	bd80      	pop	{r7, pc}
 8021a22:	bf00      	nop
 8021a24:	08028b90 	.word	0x08028b90
 8021a28:	08028bcc 	.word	0x08028bcc
 8021a2c:	08028bd8 	.word	0x08028bd8
 8021a30:	08028c00 	.word	0x08028c00
 8021a34:	08028c14 	.word	0x08028c14
 8021a38:	20014334 	.word	0x20014334
 8021a3c:	08028c34 	.word	0x08028c34

08021a40 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8021a40:	b580      	push	{r7, lr}
 8021a42:	b08a      	sub	sp, #40	; 0x28
 8021a44:	af00      	add	r7, sp, #0
 8021a46:	6078      	str	r0, [r7, #4]
 8021a48:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8021a4a:	2300      	movs	r3, #0
 8021a4c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8021a4e:	2300      	movs	r3, #0
 8021a50:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8021a52:	2300      	movs	r3, #0
 8021a54:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8021a56:	2300      	movs	r3, #0
 8021a58:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8021a5a:	2300      	movs	r3, #0
 8021a5c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8021a5e:	4b28      	ldr	r3, [pc, #160]	; (8021b00 <ip_reass_remove_oldest_datagram+0xc0>)
 8021a60:	681b      	ldr	r3, [r3, #0]
 8021a62:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021a64:	e030      	b.n	8021ac8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8021a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a68:	695a      	ldr	r2, [r3, #20]
 8021a6a:	687b      	ldr	r3, [r7, #4]
 8021a6c:	68db      	ldr	r3, [r3, #12]
 8021a6e:	429a      	cmp	r2, r3
 8021a70:	d10c      	bne.n	8021a8c <ip_reass_remove_oldest_datagram+0x4c>
 8021a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a74:	699a      	ldr	r2, [r3, #24]
 8021a76:	687b      	ldr	r3, [r7, #4]
 8021a78:	691b      	ldr	r3, [r3, #16]
 8021a7a:	429a      	cmp	r2, r3
 8021a7c:	d106      	bne.n	8021a8c <ip_reass_remove_oldest_datagram+0x4c>
 8021a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a80:	899a      	ldrh	r2, [r3, #12]
 8021a82:	687b      	ldr	r3, [r7, #4]
 8021a84:	889b      	ldrh	r3, [r3, #4]
 8021a86:	b29b      	uxth	r3, r3
 8021a88:	429a      	cmp	r2, r3
 8021a8a:	d014      	beq.n	8021ab6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8021a8c:	693b      	ldr	r3, [r7, #16]
 8021a8e:	3301      	adds	r3, #1
 8021a90:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8021a92:	6a3b      	ldr	r3, [r7, #32]
 8021a94:	2b00      	cmp	r3, #0
 8021a96:	d104      	bne.n	8021aa2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8021a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a9a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021a9c:	69fb      	ldr	r3, [r7, #28]
 8021a9e:	61bb      	str	r3, [r7, #24]
 8021aa0:	e009      	b.n	8021ab6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8021aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021aa4:	7fda      	ldrb	r2, [r3, #31]
 8021aa6:	6a3b      	ldr	r3, [r7, #32]
 8021aa8:	7fdb      	ldrb	r3, [r3, #31]
 8021aaa:	429a      	cmp	r2, r3
 8021aac:	d803      	bhi.n	8021ab6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8021aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ab0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021ab2:	69fb      	ldr	r3, [r7, #28]
 8021ab4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8021ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ab8:	681b      	ldr	r3, [r3, #0]
 8021aba:	2b00      	cmp	r3, #0
 8021abc:	d001      	beq.n	8021ac2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8021abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ac0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8021ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ac4:	681b      	ldr	r3, [r3, #0]
 8021ac6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021aca:	2b00      	cmp	r3, #0
 8021acc:	d1cb      	bne.n	8021a66 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8021ace:	6a3b      	ldr	r3, [r7, #32]
 8021ad0:	2b00      	cmp	r3, #0
 8021ad2:	d008      	beq.n	8021ae6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8021ad4:	69b9      	ldr	r1, [r7, #24]
 8021ad6:	6a38      	ldr	r0, [r7, #32]
 8021ad8:	f7ff ff0e 	bl	80218f8 <ip_reass_free_complete_datagram>
 8021adc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8021ade:	697a      	ldr	r2, [r7, #20]
 8021ae0:	68fb      	ldr	r3, [r7, #12]
 8021ae2:	4413      	add	r3, r2
 8021ae4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8021ae6:	697a      	ldr	r2, [r7, #20]
 8021ae8:	683b      	ldr	r3, [r7, #0]
 8021aea:	429a      	cmp	r2, r3
 8021aec:	da02      	bge.n	8021af4 <ip_reass_remove_oldest_datagram+0xb4>
 8021aee:	693b      	ldr	r3, [r7, #16]
 8021af0:	2b01      	cmp	r3, #1
 8021af2:	dcac      	bgt.n	8021a4e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8021af4:	697b      	ldr	r3, [r7, #20]
}
 8021af6:	4618      	mov	r0, r3
 8021af8:	3728      	adds	r7, #40	; 0x28
 8021afa:	46bd      	mov	sp, r7
 8021afc:	bd80      	pop	{r7, pc}
 8021afe:	bf00      	nop
 8021b00:	20014330 	.word	0x20014330

08021b04 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8021b04:	b580      	push	{r7, lr}
 8021b06:	b084      	sub	sp, #16
 8021b08:	af00      	add	r7, sp, #0
 8021b0a:	6078      	str	r0, [r7, #4]
 8021b0c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021b0e:	2001      	movs	r0, #1
 8021b10:	f7fc fa76 	bl	801e000 <memp_malloc>
 8021b14:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8021b16:	68fb      	ldr	r3, [r7, #12]
 8021b18:	2b00      	cmp	r3, #0
 8021b1a:	d110      	bne.n	8021b3e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8021b1c:	6839      	ldr	r1, [r7, #0]
 8021b1e:	6878      	ldr	r0, [r7, #4]
 8021b20:	f7ff ff8e 	bl	8021a40 <ip_reass_remove_oldest_datagram>
 8021b24:	4602      	mov	r2, r0
 8021b26:	683b      	ldr	r3, [r7, #0]
 8021b28:	4293      	cmp	r3, r2
 8021b2a:	dc03      	bgt.n	8021b34 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021b2c:	2001      	movs	r0, #1
 8021b2e:	f7fc fa67 	bl	801e000 <memp_malloc>
 8021b32:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8021b34:	68fb      	ldr	r3, [r7, #12]
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	d101      	bne.n	8021b3e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8021b3a:	2300      	movs	r3, #0
 8021b3c:	e016      	b.n	8021b6c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8021b3e:	2220      	movs	r2, #32
 8021b40:	2100      	movs	r1, #0
 8021b42:	68f8      	ldr	r0, [r7, #12]
 8021b44:	f000 fe2c 	bl	80227a0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8021b48:	68fb      	ldr	r3, [r7, #12]
 8021b4a:	220f      	movs	r2, #15
 8021b4c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8021b4e:	4b09      	ldr	r3, [pc, #36]	; (8021b74 <ip_reass_enqueue_new_datagram+0x70>)
 8021b50:	681a      	ldr	r2, [r3, #0]
 8021b52:	68fb      	ldr	r3, [r7, #12]
 8021b54:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8021b56:	4a07      	ldr	r2, [pc, #28]	; (8021b74 <ip_reass_enqueue_new_datagram+0x70>)
 8021b58:	68fb      	ldr	r3, [r7, #12]
 8021b5a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8021b5c:	68fb      	ldr	r3, [r7, #12]
 8021b5e:	3308      	adds	r3, #8
 8021b60:	2214      	movs	r2, #20
 8021b62:	6879      	ldr	r1, [r7, #4]
 8021b64:	4618      	mov	r0, r3
 8021b66:	f000 fdf3 	bl	8022750 <memcpy>
  return ipr;
 8021b6a:	68fb      	ldr	r3, [r7, #12]
}
 8021b6c:	4618      	mov	r0, r3
 8021b6e:	3710      	adds	r7, #16
 8021b70:	46bd      	mov	sp, r7
 8021b72:	bd80      	pop	{r7, pc}
 8021b74:	20014330 	.word	0x20014330

08021b78 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021b78:	b580      	push	{r7, lr}
 8021b7a:	b082      	sub	sp, #8
 8021b7c:	af00      	add	r7, sp, #0
 8021b7e:	6078      	str	r0, [r7, #4]
 8021b80:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8021b82:	4b10      	ldr	r3, [pc, #64]	; (8021bc4 <ip_reass_dequeue_datagram+0x4c>)
 8021b84:	681b      	ldr	r3, [r3, #0]
 8021b86:	687a      	ldr	r2, [r7, #4]
 8021b88:	429a      	cmp	r2, r3
 8021b8a:	d104      	bne.n	8021b96 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8021b8c:	687b      	ldr	r3, [r7, #4]
 8021b8e:	681b      	ldr	r3, [r3, #0]
 8021b90:	4a0c      	ldr	r2, [pc, #48]	; (8021bc4 <ip_reass_dequeue_datagram+0x4c>)
 8021b92:	6013      	str	r3, [r2, #0]
 8021b94:	e00d      	b.n	8021bb2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8021b96:	683b      	ldr	r3, [r7, #0]
 8021b98:	2b00      	cmp	r3, #0
 8021b9a:	d106      	bne.n	8021baa <ip_reass_dequeue_datagram+0x32>
 8021b9c:	4b0a      	ldr	r3, [pc, #40]	; (8021bc8 <ip_reass_dequeue_datagram+0x50>)
 8021b9e:	f240 1245 	movw	r2, #325	; 0x145
 8021ba2:	490a      	ldr	r1, [pc, #40]	; (8021bcc <ip_reass_dequeue_datagram+0x54>)
 8021ba4:	480a      	ldr	r0, [pc, #40]	; (8021bd0 <ip_reass_dequeue_datagram+0x58>)
 8021ba6:	f000 fee3 	bl	8022970 <iprintf>
    prev->next = ipr->next;
 8021baa:	687b      	ldr	r3, [r7, #4]
 8021bac:	681a      	ldr	r2, [r3, #0]
 8021bae:	683b      	ldr	r3, [r7, #0]
 8021bb0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8021bb2:	6879      	ldr	r1, [r7, #4]
 8021bb4:	2001      	movs	r0, #1
 8021bb6:	f7fc fa93 	bl	801e0e0 <memp_free>
}
 8021bba:	bf00      	nop
 8021bbc:	3708      	adds	r7, #8
 8021bbe:	46bd      	mov	sp, r7
 8021bc0:	bd80      	pop	{r7, pc}
 8021bc2:	bf00      	nop
 8021bc4:	20014330 	.word	0x20014330
 8021bc8:	08028b90 	.word	0x08028b90
 8021bcc:	08028c58 	.word	0x08028c58
 8021bd0:	08028bd8 	.word	0x08028bd8

08021bd4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8021bd4:	b580      	push	{r7, lr}
 8021bd6:	b08c      	sub	sp, #48	; 0x30
 8021bd8:	af00      	add	r7, sp, #0
 8021bda:	60f8      	str	r0, [r7, #12]
 8021bdc:	60b9      	str	r1, [r7, #8]
 8021bde:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8021be0:	2300      	movs	r3, #0
 8021be2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8021be4:	2301      	movs	r3, #1
 8021be6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8021be8:	68bb      	ldr	r3, [r7, #8]
 8021bea:	685b      	ldr	r3, [r3, #4]
 8021bec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021bee:	69fb      	ldr	r3, [r7, #28]
 8021bf0:	885b      	ldrh	r3, [r3, #2]
 8021bf2:	b29b      	uxth	r3, r3
 8021bf4:	4618      	mov	r0, r3
 8021bf6:	f7fb fda7 	bl	801d748 <lwip_htons>
 8021bfa:	4603      	mov	r3, r0
 8021bfc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8021bfe:	69fb      	ldr	r3, [r7, #28]
 8021c00:	781b      	ldrb	r3, [r3, #0]
 8021c02:	f003 030f 	and.w	r3, r3, #15
 8021c06:	b2db      	uxtb	r3, r3
 8021c08:	009b      	lsls	r3, r3, #2
 8021c0a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8021c0c:	7e7b      	ldrb	r3, [r7, #25]
 8021c0e:	b29b      	uxth	r3, r3
 8021c10:	8b7a      	ldrh	r2, [r7, #26]
 8021c12:	429a      	cmp	r2, r3
 8021c14:	d202      	bcs.n	8021c1c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021c16:	f04f 33ff 	mov.w	r3, #4294967295
 8021c1a:	e135      	b.n	8021e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8021c1c:	7e7b      	ldrb	r3, [r7, #25]
 8021c1e:	b29b      	uxth	r3, r3
 8021c20:	8b7a      	ldrh	r2, [r7, #26]
 8021c22:	1ad3      	subs	r3, r2, r3
 8021c24:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8021c26:	69fb      	ldr	r3, [r7, #28]
 8021c28:	88db      	ldrh	r3, [r3, #6]
 8021c2a:	b29b      	uxth	r3, r3
 8021c2c:	4618      	mov	r0, r3
 8021c2e:	f7fb fd8b 	bl	801d748 <lwip_htons>
 8021c32:	4603      	mov	r3, r0
 8021c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021c38:	b29b      	uxth	r3, r3
 8021c3a:	00db      	lsls	r3, r3, #3
 8021c3c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8021c3e:	68bb      	ldr	r3, [r7, #8]
 8021c40:	685b      	ldr	r3, [r3, #4]
 8021c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8021c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c46:	2200      	movs	r2, #0
 8021c48:	701a      	strb	r2, [r3, #0]
 8021c4a:	2200      	movs	r2, #0
 8021c4c:	705a      	strb	r2, [r3, #1]
 8021c4e:	2200      	movs	r2, #0
 8021c50:	709a      	strb	r2, [r3, #2]
 8021c52:	2200      	movs	r2, #0
 8021c54:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8021c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c58:	8afa      	ldrh	r2, [r7, #22]
 8021c5a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8021c5c:	8afa      	ldrh	r2, [r7, #22]
 8021c5e:	8b7b      	ldrh	r3, [r7, #26]
 8021c60:	4413      	add	r3, r2
 8021c62:	b29a      	uxth	r2, r3
 8021c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c66:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8021c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c6a:	88db      	ldrh	r3, [r3, #6]
 8021c6c:	b29b      	uxth	r3, r3
 8021c6e:	8afa      	ldrh	r2, [r7, #22]
 8021c70:	429a      	cmp	r2, r3
 8021c72:	d902      	bls.n	8021c7a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021c74:	f04f 33ff 	mov.w	r3, #4294967295
 8021c78:	e106      	b.n	8021e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8021c7a:	68fb      	ldr	r3, [r7, #12]
 8021c7c:	685b      	ldr	r3, [r3, #4]
 8021c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8021c80:	e068      	b.n	8021d54 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8021c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c84:	685b      	ldr	r3, [r3, #4]
 8021c86:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8021c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c8a:	889b      	ldrh	r3, [r3, #4]
 8021c8c:	b29a      	uxth	r2, r3
 8021c8e:	693b      	ldr	r3, [r7, #16]
 8021c90:	889b      	ldrh	r3, [r3, #4]
 8021c92:	b29b      	uxth	r3, r3
 8021c94:	429a      	cmp	r2, r3
 8021c96:	d235      	bcs.n	8021d04 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8021c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021c9c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8021c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ca0:	2b00      	cmp	r3, #0
 8021ca2:	d020      	beq.n	8021ce6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8021ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ca6:	889b      	ldrh	r3, [r3, #4]
 8021ca8:	b29a      	uxth	r2, r3
 8021caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cac:	88db      	ldrh	r3, [r3, #6]
 8021cae:	b29b      	uxth	r3, r3
 8021cb0:	429a      	cmp	r2, r3
 8021cb2:	d307      	bcc.n	8021cc4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8021cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021cb6:	88db      	ldrh	r3, [r3, #6]
 8021cb8:	b29a      	uxth	r2, r3
 8021cba:	693b      	ldr	r3, [r7, #16]
 8021cbc:	889b      	ldrh	r3, [r3, #4]
 8021cbe:	b29b      	uxth	r3, r3
 8021cc0:	429a      	cmp	r2, r3
 8021cc2:	d902      	bls.n	8021cca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8021cc8:	e0de      	b.n	8021e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8021cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ccc:	68ba      	ldr	r2, [r7, #8]
 8021cce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8021cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cd2:	88db      	ldrh	r3, [r3, #6]
 8021cd4:	b29a      	uxth	r2, r3
 8021cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021cd8:	889b      	ldrh	r3, [r3, #4]
 8021cda:	b29b      	uxth	r3, r3
 8021cdc:	429a      	cmp	r2, r3
 8021cde:	d03d      	beq.n	8021d5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021ce0:	2300      	movs	r3, #0
 8021ce2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8021ce4:	e03a      	b.n	8021d5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8021ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ce8:	88db      	ldrh	r3, [r3, #6]
 8021cea:	b29a      	uxth	r2, r3
 8021cec:	693b      	ldr	r3, [r7, #16]
 8021cee:	889b      	ldrh	r3, [r3, #4]
 8021cf0:	b29b      	uxth	r3, r3
 8021cf2:	429a      	cmp	r2, r3
 8021cf4:	d902      	bls.n	8021cfc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8021cfa:	e0c5      	b.n	8021e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8021cfc:	68fb      	ldr	r3, [r7, #12]
 8021cfe:	68ba      	ldr	r2, [r7, #8]
 8021d00:	605a      	str	r2, [r3, #4]
      break;
 8021d02:	e02b      	b.n	8021d5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8021d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d06:	889b      	ldrh	r3, [r3, #4]
 8021d08:	b29a      	uxth	r2, r3
 8021d0a:	693b      	ldr	r3, [r7, #16]
 8021d0c:	889b      	ldrh	r3, [r3, #4]
 8021d0e:	b29b      	uxth	r3, r3
 8021d10:	429a      	cmp	r2, r3
 8021d12:	d102      	bne.n	8021d1a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021d14:	f04f 33ff 	mov.w	r3, #4294967295
 8021d18:	e0b6      	b.n	8021e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8021d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d1c:	889b      	ldrh	r3, [r3, #4]
 8021d1e:	b29a      	uxth	r2, r3
 8021d20:	693b      	ldr	r3, [r7, #16]
 8021d22:	88db      	ldrh	r3, [r3, #6]
 8021d24:	b29b      	uxth	r3, r3
 8021d26:	429a      	cmp	r2, r3
 8021d28:	d202      	bcs.n	8021d30 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8021d2e:	e0ab      	b.n	8021e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8021d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d32:	2b00      	cmp	r3, #0
 8021d34:	d009      	beq.n	8021d4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8021d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d38:	88db      	ldrh	r3, [r3, #6]
 8021d3a:	b29a      	uxth	r2, r3
 8021d3c:	693b      	ldr	r3, [r7, #16]
 8021d3e:	889b      	ldrh	r3, [r3, #4]
 8021d40:	b29b      	uxth	r3, r3
 8021d42:	429a      	cmp	r2, r3
 8021d44:	d001      	beq.n	8021d4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021d46:	2300      	movs	r3, #0
 8021d48:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8021d4a:	693b      	ldr	r3, [r7, #16]
 8021d4c:	681b      	ldr	r3, [r3, #0]
 8021d4e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8021d50:	693b      	ldr	r3, [r7, #16]
 8021d52:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8021d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	d193      	bne.n	8021c82 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8021d5a:	e000      	b.n	8021d5e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8021d5c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8021d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d60:	2b00      	cmp	r3, #0
 8021d62:	d12d      	bne.n	8021dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8021d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d66:	2b00      	cmp	r3, #0
 8021d68:	d01c      	beq.n	8021da4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8021d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d6c:	88db      	ldrh	r3, [r3, #6]
 8021d6e:	b29a      	uxth	r2, r3
 8021d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d72:	889b      	ldrh	r3, [r3, #4]
 8021d74:	b29b      	uxth	r3, r3
 8021d76:	429a      	cmp	r2, r3
 8021d78:	d906      	bls.n	8021d88 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8021d7a:	4b45      	ldr	r3, [pc, #276]	; (8021e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021d7c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8021d80:	4944      	ldr	r1, [pc, #272]	; (8021e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8021d82:	4845      	ldr	r0, [pc, #276]	; (8021e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021d84:	f000 fdf4 	bl	8022970 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8021d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d8a:	68ba      	ldr	r2, [r7, #8]
 8021d8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8021d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d90:	88db      	ldrh	r3, [r3, #6]
 8021d92:	b29a      	uxth	r2, r3
 8021d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d96:	889b      	ldrh	r3, [r3, #4]
 8021d98:	b29b      	uxth	r3, r3
 8021d9a:	429a      	cmp	r2, r3
 8021d9c:	d010      	beq.n	8021dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8021d9e:	2300      	movs	r3, #0
 8021da0:	623b      	str	r3, [r7, #32]
 8021da2:	e00d      	b.n	8021dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8021da4:	68fb      	ldr	r3, [r7, #12]
 8021da6:	685b      	ldr	r3, [r3, #4]
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	d006      	beq.n	8021dba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8021dac:	4b38      	ldr	r3, [pc, #224]	; (8021e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021dae:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8021db2:	493a      	ldr	r1, [pc, #232]	; (8021e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8021db4:	4838      	ldr	r0, [pc, #224]	; (8021e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021db6:	f000 fddb 	bl	8022970 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8021dba:	68fb      	ldr	r3, [r7, #12]
 8021dbc:	68ba      	ldr	r2, [r7, #8]
 8021dbe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8021dc0:	687b      	ldr	r3, [r7, #4]
 8021dc2:	2b00      	cmp	r3, #0
 8021dc4:	d105      	bne.n	8021dd2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8021dc6:	68fb      	ldr	r3, [r7, #12]
 8021dc8:	7f9b      	ldrb	r3, [r3, #30]
 8021dca:	f003 0301 	and.w	r3, r3, #1
 8021dce:	2b00      	cmp	r3, #0
 8021dd0:	d059      	beq.n	8021e86 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8021dd2:	6a3b      	ldr	r3, [r7, #32]
 8021dd4:	2b00      	cmp	r3, #0
 8021dd6:	d04f      	beq.n	8021e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8021dd8:	68fb      	ldr	r3, [r7, #12]
 8021dda:	685b      	ldr	r3, [r3, #4]
 8021ddc:	2b00      	cmp	r3, #0
 8021dde:	d006      	beq.n	8021dee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8021de0:	68fb      	ldr	r3, [r7, #12]
 8021de2:	685b      	ldr	r3, [r3, #4]
 8021de4:	685b      	ldr	r3, [r3, #4]
 8021de6:	889b      	ldrh	r3, [r3, #4]
 8021de8:	b29b      	uxth	r3, r3
 8021dea:	2b00      	cmp	r3, #0
 8021dec:	d002      	beq.n	8021df4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8021dee:	2300      	movs	r3, #0
 8021df0:	623b      	str	r3, [r7, #32]
 8021df2:	e041      	b.n	8021e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8021df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021df6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8021df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021dfa:	681b      	ldr	r3, [r3, #0]
 8021dfc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021dfe:	e012      	b.n	8021e26 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8021e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e02:	685b      	ldr	r3, [r3, #4]
 8021e04:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8021e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e08:	88db      	ldrh	r3, [r3, #6]
 8021e0a:	b29a      	uxth	r2, r3
 8021e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e0e:	889b      	ldrh	r3, [r3, #4]
 8021e10:	b29b      	uxth	r3, r3
 8021e12:	429a      	cmp	r2, r3
 8021e14:	d002      	beq.n	8021e1c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8021e16:	2300      	movs	r3, #0
 8021e18:	623b      	str	r3, [r7, #32]
            break;
 8021e1a:	e007      	b.n	8021e2c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8021e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e1e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8021e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e22:	681b      	ldr	r3, [r3, #0]
 8021e24:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e28:	2b00      	cmp	r3, #0
 8021e2a:	d1e9      	bne.n	8021e00 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8021e2c:	6a3b      	ldr	r3, [r7, #32]
 8021e2e:	2b00      	cmp	r3, #0
 8021e30:	d022      	beq.n	8021e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8021e32:	68fb      	ldr	r3, [r7, #12]
 8021e34:	685b      	ldr	r3, [r3, #4]
 8021e36:	2b00      	cmp	r3, #0
 8021e38:	d106      	bne.n	8021e48 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8021e3a:	4b15      	ldr	r3, [pc, #84]	; (8021e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021e3c:	f240 12df 	movw	r2, #479	; 0x1df
 8021e40:	4917      	ldr	r1, [pc, #92]	; (8021ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021e42:	4815      	ldr	r0, [pc, #84]	; (8021e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021e44:	f000 fd94 	bl	8022970 <iprintf>
          LWIP_ASSERT("sanity check",
 8021e48:	68fb      	ldr	r3, [r7, #12]
 8021e4a:	685b      	ldr	r3, [r3, #4]
 8021e4c:	685b      	ldr	r3, [r3, #4]
 8021e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021e50:	429a      	cmp	r2, r3
 8021e52:	d106      	bne.n	8021e62 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8021e54:	4b0e      	ldr	r3, [pc, #56]	; (8021e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021e56:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8021e5a:	4911      	ldr	r1, [pc, #68]	; (8021ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021e5c:	480e      	ldr	r0, [pc, #56]	; (8021e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021e5e:	f000 fd87 	bl	8022970 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8021e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e64:	681b      	ldr	r3, [r3, #0]
 8021e66:	2b00      	cmp	r3, #0
 8021e68:	d006      	beq.n	8021e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8021e6a:	4b09      	ldr	r3, [pc, #36]	; (8021e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021e6c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8021e70:	490c      	ldr	r1, [pc, #48]	; (8021ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8021e72:	4809      	ldr	r0, [pc, #36]	; (8021e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021e74:	f000 fd7c 	bl	8022970 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8021e78:	6a3b      	ldr	r3, [r7, #32]
 8021e7a:	2b00      	cmp	r3, #0
 8021e7c:	bf14      	ite	ne
 8021e7e:	2301      	movne	r3, #1
 8021e80:	2300      	moveq	r3, #0
 8021e82:	b2db      	uxtb	r3, r3
 8021e84:	e000      	b.n	8021e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8021e86:	2300      	movs	r3, #0
}
 8021e88:	4618      	mov	r0, r3
 8021e8a:	3730      	adds	r7, #48	; 0x30
 8021e8c:	46bd      	mov	sp, r7
 8021e8e:	bd80      	pop	{r7, pc}
 8021e90:	08028b90 	.word	0x08028b90
 8021e94:	08028c74 	.word	0x08028c74
 8021e98:	08028bd8 	.word	0x08028bd8
 8021e9c:	08028c94 	.word	0x08028c94
 8021ea0:	08028ccc 	.word	0x08028ccc
 8021ea4:	08028cdc 	.word	0x08028cdc

08021ea8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8021ea8:	b580      	push	{r7, lr}
 8021eaa:	b08e      	sub	sp, #56	; 0x38
 8021eac:	af00      	add	r7, sp, #0
 8021eae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8021eb0:	687b      	ldr	r3, [r7, #4]
 8021eb2:	685b      	ldr	r3, [r3, #4]
 8021eb4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8021eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021eb8:	781b      	ldrb	r3, [r3, #0]
 8021eba:	f003 030f 	and.w	r3, r3, #15
 8021ebe:	b2db      	uxtb	r3, r3
 8021ec0:	009b      	lsls	r3, r3, #2
 8021ec2:	b2db      	uxtb	r3, r3
 8021ec4:	2b14      	cmp	r3, #20
 8021ec6:	f040 8171 	bne.w	80221ac <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8021eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ecc:	88db      	ldrh	r3, [r3, #6]
 8021ece:	b29b      	uxth	r3, r3
 8021ed0:	4618      	mov	r0, r3
 8021ed2:	f7fb fc39 	bl	801d748 <lwip_htons>
 8021ed6:	4603      	mov	r3, r0
 8021ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021edc:	b29b      	uxth	r3, r3
 8021ede:	00db      	lsls	r3, r3, #3
 8021ee0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ee4:	885b      	ldrh	r3, [r3, #2]
 8021ee6:	b29b      	uxth	r3, r3
 8021ee8:	4618      	mov	r0, r3
 8021eea:	f7fb fc2d 	bl	801d748 <lwip_htons>
 8021eee:	4603      	mov	r3, r0
 8021ef0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8021ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ef4:	781b      	ldrb	r3, [r3, #0]
 8021ef6:	f003 030f 	and.w	r3, r3, #15
 8021efa:	b2db      	uxtb	r3, r3
 8021efc:	009b      	lsls	r3, r3, #2
 8021efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8021f02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021f06:	b29b      	uxth	r3, r3
 8021f08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021f0a:	429a      	cmp	r2, r3
 8021f0c:	f0c0 8150 	bcc.w	80221b0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8021f10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021f14:	b29b      	uxth	r3, r3
 8021f16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021f18:	1ad3      	subs	r3, r2, r3
 8021f1a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8021f1c:	6878      	ldr	r0, [r7, #4]
 8021f1e:	f7fd f877 	bl	801f010 <pbuf_clen>
 8021f22:	4603      	mov	r3, r0
 8021f24:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8021f26:	4b8c      	ldr	r3, [pc, #560]	; (8022158 <ip4_reass+0x2b0>)
 8021f28:	881b      	ldrh	r3, [r3, #0]
 8021f2a:	461a      	mov	r2, r3
 8021f2c:	8c3b      	ldrh	r3, [r7, #32]
 8021f2e:	4413      	add	r3, r2
 8021f30:	2b0a      	cmp	r3, #10
 8021f32:	dd10      	ble.n	8021f56 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021f34:	8c3b      	ldrh	r3, [r7, #32]
 8021f36:	4619      	mov	r1, r3
 8021f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021f3a:	f7ff fd81 	bl	8021a40 <ip_reass_remove_oldest_datagram>
 8021f3e:	4603      	mov	r3, r0
 8021f40:	2b00      	cmp	r3, #0
 8021f42:	f000 8137 	beq.w	80221b4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8021f46:	4b84      	ldr	r3, [pc, #528]	; (8022158 <ip4_reass+0x2b0>)
 8021f48:	881b      	ldrh	r3, [r3, #0]
 8021f4a:	461a      	mov	r2, r3
 8021f4c:	8c3b      	ldrh	r3, [r7, #32]
 8021f4e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021f50:	2b0a      	cmp	r3, #10
 8021f52:	f300 812f 	bgt.w	80221b4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021f56:	4b81      	ldr	r3, [pc, #516]	; (802215c <ip4_reass+0x2b4>)
 8021f58:	681b      	ldr	r3, [r3, #0]
 8021f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8021f5c:	e015      	b.n	8021f8a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8021f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f60:	695a      	ldr	r2, [r3, #20]
 8021f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f64:	68db      	ldr	r3, [r3, #12]
 8021f66:	429a      	cmp	r2, r3
 8021f68:	d10c      	bne.n	8021f84 <ip4_reass+0xdc>
 8021f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f6c:	699a      	ldr	r2, [r3, #24]
 8021f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f70:	691b      	ldr	r3, [r3, #16]
 8021f72:	429a      	cmp	r2, r3
 8021f74:	d106      	bne.n	8021f84 <ip4_reass+0xdc>
 8021f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f78:	899a      	ldrh	r2, [r3, #12]
 8021f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f7c:	889b      	ldrh	r3, [r3, #4]
 8021f7e:	b29b      	uxth	r3, r3
 8021f80:	429a      	cmp	r2, r3
 8021f82:	d006      	beq.n	8021f92 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f86:	681b      	ldr	r3, [r3, #0]
 8021f88:	633b      	str	r3, [r7, #48]	; 0x30
 8021f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f8c:	2b00      	cmp	r3, #0
 8021f8e:	d1e6      	bne.n	8021f5e <ip4_reass+0xb6>
 8021f90:	e000      	b.n	8021f94 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8021f92:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8021f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f96:	2b00      	cmp	r3, #0
 8021f98:	d109      	bne.n	8021fae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8021f9a:	8c3b      	ldrh	r3, [r7, #32]
 8021f9c:	4619      	mov	r1, r3
 8021f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021fa0:	f7ff fdb0 	bl	8021b04 <ip_reass_enqueue_new_datagram>
 8021fa4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8021fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021fa8:	2b00      	cmp	r3, #0
 8021faa:	d11c      	bne.n	8021fe6 <ip4_reass+0x13e>
      goto nullreturn;
 8021fac:	e105      	b.n	80221ba <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021fb0:	88db      	ldrh	r3, [r3, #6]
 8021fb2:	b29b      	uxth	r3, r3
 8021fb4:	4618      	mov	r0, r3
 8021fb6:	f7fb fbc7 	bl	801d748 <lwip_htons>
 8021fba:	4603      	mov	r3, r0
 8021fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021fc0:	2b00      	cmp	r3, #0
 8021fc2:	d110      	bne.n	8021fe6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8021fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021fc6:	89db      	ldrh	r3, [r3, #14]
 8021fc8:	4618      	mov	r0, r3
 8021fca:	f7fb fbbd 	bl	801d748 <lwip_htons>
 8021fce:	4603      	mov	r3, r0
 8021fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	d006      	beq.n	8021fe6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8021fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021fda:	3308      	adds	r3, #8
 8021fdc:	2214      	movs	r2, #20
 8021fde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021fe0:	4618      	mov	r0, r3
 8021fe2:	f000 fbb5 	bl	8022750 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8021fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021fe8:	88db      	ldrh	r3, [r3, #6]
 8021fea:	b29b      	uxth	r3, r3
 8021fec:	f003 0320 	and.w	r3, r3, #32
 8021ff0:	2b00      	cmp	r3, #0
 8021ff2:	bf0c      	ite	eq
 8021ff4:	2301      	moveq	r3, #1
 8021ff6:	2300      	movne	r3, #0
 8021ff8:	b2db      	uxtb	r3, r3
 8021ffa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8021ffc:	69fb      	ldr	r3, [r7, #28]
 8021ffe:	2b00      	cmp	r3, #0
 8022000:	d00e      	beq.n	8022020 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8022002:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8022004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022006:	4413      	add	r3, r2
 8022008:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 802200a:	8b7a      	ldrh	r2, [r7, #26]
 802200c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802200e:	429a      	cmp	r2, r3
 8022010:	f0c0 80a0 	bcc.w	8022154 <ip4_reass+0x2ac>
 8022014:	8b7b      	ldrh	r3, [r7, #26]
 8022016:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802201a:	4293      	cmp	r3, r2
 802201c:	f200 809a 	bhi.w	8022154 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8022020:	69fa      	ldr	r2, [r7, #28]
 8022022:	6879      	ldr	r1, [r7, #4]
 8022024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022026:	f7ff fdd5 	bl	8021bd4 <ip_reass_chain_frag_into_datagram_and_validate>
 802202a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 802202c:	697b      	ldr	r3, [r7, #20]
 802202e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022032:	f000 809b 	beq.w	802216c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022036:	4b48      	ldr	r3, [pc, #288]	; (8022158 <ip4_reass+0x2b0>)
 8022038:	881a      	ldrh	r2, [r3, #0]
 802203a:	8c3b      	ldrh	r3, [r7, #32]
 802203c:	4413      	add	r3, r2
 802203e:	b29a      	uxth	r2, r3
 8022040:	4b45      	ldr	r3, [pc, #276]	; (8022158 <ip4_reass+0x2b0>)
 8022042:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8022044:	69fb      	ldr	r3, [r7, #28]
 8022046:	2b00      	cmp	r3, #0
 8022048:	d00d      	beq.n	8022066 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 802204a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802204c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802204e:	4413      	add	r3, r2
 8022050:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8022052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022054:	8a7a      	ldrh	r2, [r7, #18]
 8022056:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802205a:	7f9b      	ldrb	r3, [r3, #30]
 802205c:	f043 0301 	orr.w	r3, r3, #1
 8022060:	b2da      	uxtb	r2, r3
 8022062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022064:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8022066:	697b      	ldr	r3, [r7, #20]
 8022068:	2b01      	cmp	r3, #1
 802206a:	d171      	bne.n	8022150 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 802206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802206e:	8b9b      	ldrh	r3, [r3, #28]
 8022070:	3314      	adds	r3, #20
 8022072:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8022074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022076:	685b      	ldr	r3, [r3, #4]
 8022078:	685b      	ldr	r3, [r3, #4]
 802207a:	681b      	ldr	r3, [r3, #0]
 802207c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 802207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022080:	685b      	ldr	r3, [r3, #4]
 8022082:	685b      	ldr	r3, [r3, #4]
 8022084:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8022086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022088:	3308      	adds	r3, #8
 802208a:	2214      	movs	r2, #20
 802208c:	4619      	mov	r1, r3
 802208e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022090:	f000 fb5e 	bl	8022750 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8022094:	8a3b      	ldrh	r3, [r7, #16]
 8022096:	4618      	mov	r0, r3
 8022098:	f7fb fb56 	bl	801d748 <lwip_htons>
 802209c:	4603      	mov	r3, r0
 802209e:	461a      	mov	r2, r3
 80220a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80220a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80220a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80220a6:	2200      	movs	r2, #0
 80220a8:	719a      	strb	r2, [r3, #6]
 80220aa:	2200      	movs	r2, #0
 80220ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80220ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80220b0:	2200      	movs	r2, #0
 80220b2:	729a      	strb	r2, [r3, #10]
 80220b4:	2200      	movs	r2, #0
 80220b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80220b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220ba:	685b      	ldr	r3, [r3, #4]
 80220bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80220be:	e00d      	b.n	80220dc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80220c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80220c2:	685b      	ldr	r3, [r3, #4]
 80220c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80220c6:	2114      	movs	r1, #20
 80220c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80220ca:	f7fc fe93 	bl	801edf4 <pbuf_remove_header>
      pbuf_cat(p, r);
 80220ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80220d0:	6878      	ldr	r0, [r7, #4]
 80220d2:	f7fc ffd7 	bl	801f084 <pbuf_cat>
      r = iprh->next_pbuf;
 80220d6:	68fb      	ldr	r3, [r7, #12]
 80220d8:	681b      	ldr	r3, [r3, #0]
 80220da:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80220dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80220de:	2b00      	cmp	r3, #0
 80220e0:	d1ee      	bne.n	80220c0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80220e2:	4b1e      	ldr	r3, [pc, #120]	; (802215c <ip4_reass+0x2b4>)
 80220e4:	681b      	ldr	r3, [r3, #0]
 80220e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80220e8:	429a      	cmp	r2, r3
 80220ea:	d102      	bne.n	80220f2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80220ec:	2300      	movs	r3, #0
 80220ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80220f0:	e010      	b.n	8022114 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80220f2:	4b1a      	ldr	r3, [pc, #104]	; (802215c <ip4_reass+0x2b4>)
 80220f4:	681b      	ldr	r3, [r3, #0]
 80220f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80220f8:	e007      	b.n	802210a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80220fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80220fc:	681b      	ldr	r3, [r3, #0]
 80220fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022100:	429a      	cmp	r2, r3
 8022102:	d006      	beq.n	8022112 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8022104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022106:	681b      	ldr	r3, [r3, #0]
 8022108:	62fb      	str	r3, [r7, #44]	; 0x2c
 802210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802210c:	2b00      	cmp	r3, #0
 802210e:	d1f4      	bne.n	80220fa <ip4_reass+0x252>
 8022110:	e000      	b.n	8022114 <ip4_reass+0x26c>
          break;
 8022112:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8022114:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022116:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022118:	f7ff fd2e 	bl	8021b78 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 802211c:	6878      	ldr	r0, [r7, #4]
 802211e:	f7fc ff77 	bl	801f010 <pbuf_clen>
 8022122:	4603      	mov	r3, r0
 8022124:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8022126:	4b0c      	ldr	r3, [pc, #48]	; (8022158 <ip4_reass+0x2b0>)
 8022128:	881b      	ldrh	r3, [r3, #0]
 802212a:	8c3a      	ldrh	r2, [r7, #32]
 802212c:	429a      	cmp	r2, r3
 802212e:	d906      	bls.n	802213e <ip4_reass+0x296>
 8022130:	4b0b      	ldr	r3, [pc, #44]	; (8022160 <ip4_reass+0x2b8>)
 8022132:	f240 229b 	movw	r2, #667	; 0x29b
 8022136:	490b      	ldr	r1, [pc, #44]	; (8022164 <ip4_reass+0x2bc>)
 8022138:	480b      	ldr	r0, [pc, #44]	; (8022168 <ip4_reass+0x2c0>)
 802213a:	f000 fc19 	bl	8022970 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802213e:	4b06      	ldr	r3, [pc, #24]	; (8022158 <ip4_reass+0x2b0>)
 8022140:	881a      	ldrh	r2, [r3, #0]
 8022142:	8c3b      	ldrh	r3, [r7, #32]
 8022144:	1ad3      	subs	r3, r2, r3
 8022146:	b29a      	uxth	r2, r3
 8022148:	4b03      	ldr	r3, [pc, #12]	; (8022158 <ip4_reass+0x2b0>)
 802214a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 802214c:	687b      	ldr	r3, [r7, #4]
 802214e:	e038      	b.n	80221c2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8022150:	2300      	movs	r3, #0
 8022152:	e036      	b.n	80221c2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8022154:	bf00      	nop
 8022156:	e00a      	b.n	802216e <ip4_reass+0x2c6>
 8022158:	20014334 	.word	0x20014334
 802215c:	20014330 	.word	0x20014330
 8022160:	08028b90 	.word	0x08028b90
 8022164:	08028d00 	.word	0x08028d00
 8022168:	08028bd8 	.word	0x08028bd8
    goto nullreturn_ipr;
 802216c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 802216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022170:	2b00      	cmp	r3, #0
 8022172:	d106      	bne.n	8022182 <ip4_reass+0x2da>
 8022174:	4b15      	ldr	r3, [pc, #84]	; (80221cc <ip4_reass+0x324>)
 8022176:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 802217a:	4915      	ldr	r1, [pc, #84]	; (80221d0 <ip4_reass+0x328>)
 802217c:	4815      	ldr	r0, [pc, #84]	; (80221d4 <ip4_reass+0x32c>)
 802217e:	f000 fbf7 	bl	8022970 <iprintf>
  if (ipr->p == NULL) {
 8022182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022184:	685b      	ldr	r3, [r3, #4]
 8022186:	2b00      	cmp	r3, #0
 8022188:	d116      	bne.n	80221b8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 802218a:	4b13      	ldr	r3, [pc, #76]	; (80221d8 <ip4_reass+0x330>)
 802218c:	681b      	ldr	r3, [r3, #0]
 802218e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022190:	429a      	cmp	r2, r3
 8022192:	d006      	beq.n	80221a2 <ip4_reass+0x2fa>
 8022194:	4b0d      	ldr	r3, [pc, #52]	; (80221cc <ip4_reass+0x324>)
 8022196:	f240 22ab 	movw	r2, #683	; 0x2ab
 802219a:	4910      	ldr	r1, [pc, #64]	; (80221dc <ip4_reass+0x334>)
 802219c:	480d      	ldr	r0, [pc, #52]	; (80221d4 <ip4_reass+0x32c>)
 802219e:	f000 fbe7 	bl	8022970 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80221a2:	2100      	movs	r1, #0
 80221a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80221a6:	f7ff fce7 	bl	8021b78 <ip_reass_dequeue_datagram>
 80221aa:	e006      	b.n	80221ba <ip4_reass+0x312>
    goto nullreturn;
 80221ac:	bf00      	nop
 80221ae:	e004      	b.n	80221ba <ip4_reass+0x312>
    goto nullreturn;
 80221b0:	bf00      	nop
 80221b2:	e002      	b.n	80221ba <ip4_reass+0x312>
      goto nullreturn;
 80221b4:	bf00      	nop
 80221b6:	e000      	b.n	80221ba <ip4_reass+0x312>
  }

nullreturn:
 80221b8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80221ba:	6878      	ldr	r0, [r7, #4]
 80221bc:	f7fc fea0 	bl	801ef00 <pbuf_free>
  return NULL;
 80221c0:	2300      	movs	r3, #0
}
 80221c2:	4618      	mov	r0, r3
 80221c4:	3738      	adds	r7, #56	; 0x38
 80221c6:	46bd      	mov	sp, r7
 80221c8:	bd80      	pop	{r7, pc}
 80221ca:	bf00      	nop
 80221cc:	08028b90 	.word	0x08028b90
 80221d0:	08028d1c 	.word	0x08028d1c
 80221d4:	08028bd8 	.word	0x08028bd8
 80221d8:	20014330 	.word	0x20014330
 80221dc:	08028d28 	.word	0x08028d28

080221e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80221e0:	b580      	push	{r7, lr}
 80221e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80221e4:	2002      	movs	r0, #2
 80221e6:	f7fb ff0b 	bl	801e000 <memp_malloc>
 80221ea:	4603      	mov	r3, r0
}
 80221ec:	4618      	mov	r0, r3
 80221ee:	bd80      	pop	{r7, pc}

080221f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80221f0:	b580      	push	{r7, lr}
 80221f2:	b082      	sub	sp, #8
 80221f4:	af00      	add	r7, sp, #0
 80221f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80221f8:	687b      	ldr	r3, [r7, #4]
 80221fa:	2b00      	cmp	r3, #0
 80221fc:	d106      	bne.n	802220c <ip_frag_free_pbuf_custom_ref+0x1c>
 80221fe:	4b07      	ldr	r3, [pc, #28]	; (802221c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8022200:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8022204:	4906      	ldr	r1, [pc, #24]	; (8022220 <ip_frag_free_pbuf_custom_ref+0x30>)
 8022206:	4807      	ldr	r0, [pc, #28]	; (8022224 <ip_frag_free_pbuf_custom_ref+0x34>)
 8022208:	f000 fbb2 	bl	8022970 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 802220c:	6879      	ldr	r1, [r7, #4]
 802220e:	2002      	movs	r0, #2
 8022210:	f7fb ff66 	bl	801e0e0 <memp_free>
}
 8022214:	bf00      	nop
 8022216:	3708      	adds	r7, #8
 8022218:	46bd      	mov	sp, r7
 802221a:	bd80      	pop	{r7, pc}
 802221c:	08028b90 	.word	0x08028b90
 8022220:	08028d48 	.word	0x08028d48
 8022224:	08028bd8 	.word	0x08028bd8

08022228 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8022228:	b580      	push	{r7, lr}
 802222a:	b084      	sub	sp, #16
 802222c:	af00      	add	r7, sp, #0
 802222e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8022230:	687b      	ldr	r3, [r7, #4]
 8022232:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8022234:	68fb      	ldr	r3, [r7, #12]
 8022236:	2b00      	cmp	r3, #0
 8022238:	d106      	bne.n	8022248 <ipfrag_free_pbuf_custom+0x20>
 802223a:	4b11      	ldr	r3, [pc, #68]	; (8022280 <ipfrag_free_pbuf_custom+0x58>)
 802223c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8022240:	4910      	ldr	r1, [pc, #64]	; (8022284 <ipfrag_free_pbuf_custom+0x5c>)
 8022242:	4811      	ldr	r0, [pc, #68]	; (8022288 <ipfrag_free_pbuf_custom+0x60>)
 8022244:	f000 fb94 	bl	8022970 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8022248:	68fa      	ldr	r2, [r7, #12]
 802224a:	687b      	ldr	r3, [r7, #4]
 802224c:	429a      	cmp	r2, r3
 802224e:	d006      	beq.n	802225e <ipfrag_free_pbuf_custom+0x36>
 8022250:	4b0b      	ldr	r3, [pc, #44]	; (8022280 <ipfrag_free_pbuf_custom+0x58>)
 8022252:	f240 22cf 	movw	r2, #719	; 0x2cf
 8022256:	490d      	ldr	r1, [pc, #52]	; (802228c <ipfrag_free_pbuf_custom+0x64>)
 8022258:	480b      	ldr	r0, [pc, #44]	; (8022288 <ipfrag_free_pbuf_custom+0x60>)
 802225a:	f000 fb89 	bl	8022970 <iprintf>
  if (pcr->original != NULL) {
 802225e:	68fb      	ldr	r3, [r7, #12]
 8022260:	695b      	ldr	r3, [r3, #20]
 8022262:	2b00      	cmp	r3, #0
 8022264:	d004      	beq.n	8022270 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8022266:	68fb      	ldr	r3, [r7, #12]
 8022268:	695b      	ldr	r3, [r3, #20]
 802226a:	4618      	mov	r0, r3
 802226c:	f7fc fe48 	bl	801ef00 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8022270:	68f8      	ldr	r0, [r7, #12]
 8022272:	f7ff ffbd 	bl	80221f0 <ip_frag_free_pbuf_custom_ref>
}
 8022276:	bf00      	nop
 8022278:	3710      	adds	r7, #16
 802227a:	46bd      	mov	sp, r7
 802227c:	bd80      	pop	{r7, pc}
 802227e:	bf00      	nop
 8022280:	08028b90 	.word	0x08028b90
 8022284:	08028d54 	.word	0x08028d54
 8022288:	08028bd8 	.word	0x08028bd8
 802228c:	08028d60 	.word	0x08028d60

08022290 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8022290:	b580      	push	{r7, lr}
 8022292:	b094      	sub	sp, #80	; 0x50
 8022294:	af02      	add	r7, sp, #8
 8022296:	60f8      	str	r0, [r7, #12]
 8022298:	60b9      	str	r1, [r7, #8]
 802229a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 802229c:	2300      	movs	r3, #0
 802229e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80222a2:	68bb      	ldr	r3, [r7, #8]
 80222a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80222a6:	3b14      	subs	r3, #20
 80222a8:	2b00      	cmp	r3, #0
 80222aa:	da00      	bge.n	80222ae <ip4_frag+0x1e>
 80222ac:	3307      	adds	r3, #7
 80222ae:	10db      	asrs	r3, r3, #3
 80222b0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80222b2:	2314      	movs	r3, #20
 80222b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80222b6:	68fb      	ldr	r3, [r7, #12]
 80222b8:	685b      	ldr	r3, [r3, #4]
 80222ba:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80222bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80222be:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80222c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222c2:	781b      	ldrb	r3, [r3, #0]
 80222c4:	f003 030f 	and.w	r3, r3, #15
 80222c8:	b2db      	uxtb	r3, r3
 80222ca:	009b      	lsls	r3, r3, #2
 80222cc:	b2db      	uxtb	r3, r3
 80222ce:	2b14      	cmp	r3, #20
 80222d0:	d002      	beq.n	80222d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80222d2:	f06f 0305 	mvn.w	r3, #5
 80222d6:	e110      	b.n	80224fa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80222d8:	68fb      	ldr	r3, [r7, #12]
 80222da:	895b      	ldrh	r3, [r3, #10]
 80222dc:	2b13      	cmp	r3, #19
 80222de:	d809      	bhi.n	80222f4 <ip4_frag+0x64>
 80222e0:	4b88      	ldr	r3, [pc, #544]	; (8022504 <ip4_frag+0x274>)
 80222e2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80222e6:	4988      	ldr	r1, [pc, #544]	; (8022508 <ip4_frag+0x278>)
 80222e8:	4888      	ldr	r0, [pc, #544]	; (802250c <ip4_frag+0x27c>)
 80222ea:	f000 fb41 	bl	8022970 <iprintf>
 80222ee:	f06f 0305 	mvn.w	r3, #5
 80222f2:	e102      	b.n	80224fa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80222f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222f6:	88db      	ldrh	r3, [r3, #6]
 80222f8:	b29b      	uxth	r3, r3
 80222fa:	4618      	mov	r0, r3
 80222fc:	f7fb fa24 	bl	801d748 <lwip_htons>
 8022300:	4603      	mov	r3, r0
 8022302:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8022304:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022306:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802230a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802230e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8022314:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8022316:	68fb      	ldr	r3, [r7, #12]
 8022318:	891b      	ldrh	r3, [r3, #8]
 802231a:	3b14      	subs	r3, #20
 802231c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8022320:	e0e1      	b.n	80224e6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8022322:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8022324:	00db      	lsls	r3, r3, #3
 8022326:	b29b      	uxth	r3, r3
 8022328:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802232c:	4293      	cmp	r3, r2
 802232e:	bf28      	it	cs
 8022330:	4613      	movcs	r3, r2
 8022332:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8022334:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022338:	2114      	movs	r1, #20
 802233a:	200e      	movs	r0, #14
 802233c:	f7fc fafe 	bl	801e93c <pbuf_alloc>
 8022340:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8022342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022344:	2b00      	cmp	r3, #0
 8022346:	f000 80d5 	beq.w	80224f4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802234c:	895b      	ldrh	r3, [r3, #10]
 802234e:	2b13      	cmp	r3, #19
 8022350:	d806      	bhi.n	8022360 <ip4_frag+0xd0>
 8022352:	4b6c      	ldr	r3, [pc, #432]	; (8022504 <ip4_frag+0x274>)
 8022354:	f44f 7249 	mov.w	r2, #804	; 0x324
 8022358:	496d      	ldr	r1, [pc, #436]	; (8022510 <ip4_frag+0x280>)
 802235a:	486c      	ldr	r0, [pc, #432]	; (802250c <ip4_frag+0x27c>)
 802235c:	f000 fb08 	bl	8022970 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8022360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022362:	685b      	ldr	r3, [r3, #4]
 8022364:	2214      	movs	r2, #20
 8022366:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8022368:	4618      	mov	r0, r3
 802236a:	f000 f9f1 	bl	8022750 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 802236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022370:	685b      	ldr	r3, [r3, #4]
 8022372:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8022374:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8022376:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 802237a:	e064      	b.n	8022446 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 802237c:	68fb      	ldr	r3, [r7, #12]
 802237e:	895a      	ldrh	r2, [r3, #10]
 8022380:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8022382:	1ad3      	subs	r3, r2, r3
 8022384:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8022386:	68fb      	ldr	r3, [r7, #12]
 8022388:	895b      	ldrh	r3, [r3, #10]
 802238a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 802238c:	429a      	cmp	r2, r3
 802238e:	d906      	bls.n	802239e <ip4_frag+0x10e>
 8022390:	4b5c      	ldr	r3, [pc, #368]	; (8022504 <ip4_frag+0x274>)
 8022392:	f240 322d 	movw	r2, #813	; 0x32d
 8022396:	495f      	ldr	r1, [pc, #380]	; (8022514 <ip4_frag+0x284>)
 8022398:	485c      	ldr	r0, [pc, #368]	; (802250c <ip4_frag+0x27c>)
 802239a:	f000 fae9 	bl	8022970 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 802239e:	8bfa      	ldrh	r2, [r7, #30]
 80223a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80223a4:	4293      	cmp	r3, r2
 80223a6:	bf28      	it	cs
 80223a8:	4613      	movcs	r3, r2
 80223aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80223ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80223b2:	2b00      	cmp	r3, #0
 80223b4:	d105      	bne.n	80223c2 <ip4_frag+0x132>
        poff = 0;
 80223b6:	2300      	movs	r3, #0
 80223b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80223ba:	68fb      	ldr	r3, [r7, #12]
 80223bc:	681b      	ldr	r3, [r3, #0]
 80223be:	60fb      	str	r3, [r7, #12]
        continue;
 80223c0:	e041      	b.n	8022446 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80223c2:	f7ff ff0d 	bl	80221e0 <ip_frag_alloc_pbuf_custom_ref>
 80223c6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80223c8:	69bb      	ldr	r3, [r7, #24]
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	d103      	bne.n	80223d6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80223ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80223d0:	f7fc fd96 	bl	801ef00 <pbuf_free>
        goto memerr;
 80223d4:	e08f      	b.n	80224f6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80223d6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80223d8:	68fb      	ldr	r3, [r7, #12]
 80223da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80223dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80223de:	4413      	add	r3, r2
 80223e0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80223e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80223e8:	9201      	str	r2, [sp, #4]
 80223ea:	9300      	str	r3, [sp, #0]
 80223ec:	4603      	mov	r3, r0
 80223ee:	2241      	movs	r2, #65	; 0x41
 80223f0:	2000      	movs	r0, #0
 80223f2:	f7fc fbcb 	bl	801eb8c <pbuf_alloced_custom>
 80223f6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80223f8:	697b      	ldr	r3, [r7, #20]
 80223fa:	2b00      	cmp	r3, #0
 80223fc:	d106      	bne.n	802240c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80223fe:	69b8      	ldr	r0, [r7, #24]
 8022400:	f7ff fef6 	bl	80221f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8022404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022406:	f7fc fd7b 	bl	801ef00 <pbuf_free>
        goto memerr;
 802240a:	e074      	b.n	80224f6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 802240c:	68f8      	ldr	r0, [r7, #12]
 802240e:	f7fc fe17 	bl	801f040 <pbuf_ref>
      pcr->original = p;
 8022412:	69bb      	ldr	r3, [r7, #24]
 8022414:	68fa      	ldr	r2, [r7, #12]
 8022416:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8022418:	69bb      	ldr	r3, [r7, #24]
 802241a:	4a3f      	ldr	r2, [pc, #252]	; (8022518 <ip4_frag+0x288>)
 802241c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 802241e:	6979      	ldr	r1, [r7, #20]
 8022420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022422:	f7fc fe2f 	bl	801f084 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8022426:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 802242a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802242e:	1ad3      	subs	r3, r2, r3
 8022430:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8022434:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8022438:	2b00      	cmp	r3, #0
 802243a:	d004      	beq.n	8022446 <ip4_frag+0x1b6>
        poff = 0;
 802243c:	2300      	movs	r3, #0
 802243e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8022440:	68fb      	ldr	r3, [r7, #12]
 8022442:	681b      	ldr	r3, [r3, #0]
 8022444:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8022446:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802244a:	2b00      	cmp	r3, #0
 802244c:	d196      	bne.n	802237c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 802244e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8022450:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8022454:	4413      	add	r3, r2
 8022456:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8022458:	68bb      	ldr	r3, [r7, #8]
 802245a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802245c:	f1a3 0213 	sub.w	r2, r3, #19
 8022460:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8022464:	429a      	cmp	r2, r3
 8022466:	bfcc      	ite	gt
 8022468:	2301      	movgt	r3, #1
 802246a:	2300      	movle	r3, #0
 802246c:	b2db      	uxtb	r3, r3
 802246e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8022470:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8022474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022478:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 802247a:	6a3b      	ldr	r3, [r7, #32]
 802247c:	2b00      	cmp	r3, #0
 802247e:	d002      	beq.n	8022486 <ip4_frag+0x1f6>
 8022480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022482:	2b00      	cmp	r3, #0
 8022484:	d003      	beq.n	802248e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8022486:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022488:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802248c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 802248e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022490:	4618      	mov	r0, r3
 8022492:	f7fb f959 	bl	801d748 <lwip_htons>
 8022496:	4603      	mov	r3, r0
 8022498:	461a      	mov	r2, r3
 802249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802249c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802249e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80224a0:	3314      	adds	r3, #20
 80224a2:	b29b      	uxth	r3, r3
 80224a4:	4618      	mov	r0, r3
 80224a6:	f7fb f94f 	bl	801d748 <lwip_htons>
 80224aa:	4603      	mov	r3, r0
 80224ac:	461a      	mov	r2, r3
 80224ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224b0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80224b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224b4:	2200      	movs	r2, #0
 80224b6:	729a      	strb	r2, [r3, #10]
 80224b8:	2200      	movs	r2, #0
 80224ba:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80224bc:	68bb      	ldr	r3, [r7, #8]
 80224be:	695b      	ldr	r3, [r3, #20]
 80224c0:	687a      	ldr	r2, [r7, #4]
 80224c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80224c4:	68b8      	ldr	r0, [r7, #8]
 80224c6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80224c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80224ca:	f7fc fd19 	bl	801ef00 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80224ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80224d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80224d4:	1ad3      	subs	r3, r2, r3
 80224d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80224da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80224de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80224e0:	4413      	add	r3, r2
 80224e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80224e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80224ea:	2b00      	cmp	r3, #0
 80224ec:	f47f af19 	bne.w	8022322 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80224f0:	2300      	movs	r3, #0
 80224f2:	e002      	b.n	80224fa <ip4_frag+0x26a>
      goto memerr;
 80224f4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80224f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80224fa:	4618      	mov	r0, r3
 80224fc:	3748      	adds	r7, #72	; 0x48
 80224fe:	46bd      	mov	sp, r7
 8022500:	bd80      	pop	{r7, pc}
 8022502:	bf00      	nop
 8022504:	08028b90 	.word	0x08028b90
 8022508:	08028d6c 	.word	0x08028d6c
 802250c:	08028bd8 	.word	0x08028bd8
 8022510:	08028d88 	.word	0x08028d88
 8022514:	08028da8 	.word	0x08028da8
 8022518:	08022229 	.word	0x08022229

0802251c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 802251c:	b580      	push	{r7, lr}
 802251e:	b086      	sub	sp, #24
 8022520:	af00      	add	r7, sp, #0
 8022522:	6078      	str	r0, [r7, #4]
 8022524:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8022526:	230e      	movs	r3, #14
 8022528:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802252a:	687b      	ldr	r3, [r7, #4]
 802252c:	895b      	ldrh	r3, [r3, #10]
 802252e:	2b0e      	cmp	r3, #14
 8022530:	d96e      	bls.n	8022610 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8022532:	687b      	ldr	r3, [r7, #4]
 8022534:	7bdb      	ldrb	r3, [r3, #15]
 8022536:	2b00      	cmp	r3, #0
 8022538:	d106      	bne.n	8022548 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 802253a:	683b      	ldr	r3, [r7, #0]
 802253c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8022540:	3301      	adds	r3, #1
 8022542:	b2da      	uxtb	r2, r3
 8022544:	687b      	ldr	r3, [r7, #4]
 8022546:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8022548:	687b      	ldr	r3, [r7, #4]
 802254a:	685b      	ldr	r3, [r3, #4]
 802254c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 802254e:	693b      	ldr	r3, [r7, #16]
 8022550:	7b1a      	ldrb	r2, [r3, #12]
 8022552:	7b5b      	ldrb	r3, [r3, #13]
 8022554:	021b      	lsls	r3, r3, #8
 8022556:	4313      	orrs	r3, r2
 8022558:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 802255a:	693b      	ldr	r3, [r7, #16]
 802255c:	781b      	ldrb	r3, [r3, #0]
 802255e:	f003 0301 	and.w	r3, r3, #1
 8022562:	2b00      	cmp	r3, #0
 8022564:	d023      	beq.n	80225ae <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8022566:	693b      	ldr	r3, [r7, #16]
 8022568:	781b      	ldrb	r3, [r3, #0]
 802256a:	2b01      	cmp	r3, #1
 802256c:	d10f      	bne.n	802258e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802256e:	693b      	ldr	r3, [r7, #16]
 8022570:	785b      	ldrb	r3, [r3, #1]
 8022572:	2b00      	cmp	r3, #0
 8022574:	d11b      	bne.n	80225ae <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8022576:	693b      	ldr	r3, [r7, #16]
 8022578:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802257a:	2b5e      	cmp	r3, #94	; 0x5e
 802257c:	d117      	bne.n	80225ae <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 802257e:	687b      	ldr	r3, [r7, #4]
 8022580:	7b5b      	ldrb	r3, [r3, #13]
 8022582:	f043 0310 	orr.w	r3, r3, #16
 8022586:	b2da      	uxtb	r2, r3
 8022588:	687b      	ldr	r3, [r7, #4]
 802258a:	735a      	strb	r2, [r3, #13]
 802258c:	e00f      	b.n	80225ae <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 802258e:	693b      	ldr	r3, [r7, #16]
 8022590:	2206      	movs	r2, #6
 8022592:	4928      	ldr	r1, [pc, #160]	; (8022634 <ethernet_input+0x118>)
 8022594:	4618      	mov	r0, r3
 8022596:	f000 f8cb 	bl	8022730 <memcmp>
 802259a:	4603      	mov	r3, r0
 802259c:	2b00      	cmp	r3, #0
 802259e:	d106      	bne.n	80225ae <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80225a0:	687b      	ldr	r3, [r7, #4]
 80225a2:	7b5b      	ldrb	r3, [r3, #13]
 80225a4:	f043 0308 	orr.w	r3, r3, #8
 80225a8:	b2da      	uxtb	r2, r3
 80225aa:	687b      	ldr	r3, [r7, #4]
 80225ac:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80225ae:	89fb      	ldrh	r3, [r7, #14]
 80225b0:	2b08      	cmp	r3, #8
 80225b2:	d003      	beq.n	80225bc <ethernet_input+0xa0>
 80225b4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80225b8:	d014      	beq.n	80225e4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80225ba:	e032      	b.n	8022622 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80225bc:	683b      	ldr	r3, [r7, #0]
 80225be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80225c2:	f003 0308 	and.w	r3, r3, #8
 80225c6:	2b00      	cmp	r3, #0
 80225c8:	d024      	beq.n	8022614 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80225ca:	8afb      	ldrh	r3, [r7, #22]
 80225cc:	4619      	mov	r1, r3
 80225ce:	6878      	ldr	r0, [r7, #4]
 80225d0:	f7fc fc10 	bl	801edf4 <pbuf_remove_header>
 80225d4:	4603      	mov	r3, r0
 80225d6:	2b00      	cmp	r3, #0
 80225d8:	d11e      	bne.n	8022618 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80225da:	6839      	ldr	r1, [r7, #0]
 80225dc:	6878      	ldr	r0, [r7, #4]
 80225de:	f7fe fe8d 	bl	80212fc <ip4_input>
      break;
 80225e2:	e013      	b.n	802260c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80225e4:	683b      	ldr	r3, [r7, #0]
 80225e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80225ea:	f003 0308 	and.w	r3, r3, #8
 80225ee:	2b00      	cmp	r3, #0
 80225f0:	d014      	beq.n	802261c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80225f2:	8afb      	ldrh	r3, [r7, #22]
 80225f4:	4619      	mov	r1, r3
 80225f6:	6878      	ldr	r0, [r7, #4]
 80225f8:	f7fc fbfc 	bl	801edf4 <pbuf_remove_header>
 80225fc:	4603      	mov	r3, r0
 80225fe:	2b00      	cmp	r3, #0
 8022600:	d10e      	bne.n	8022620 <ethernet_input+0x104>
        etharp_input(p, netif);
 8022602:	6839      	ldr	r1, [r7, #0]
 8022604:	6878      	ldr	r0, [r7, #4]
 8022606:	f7fe f82d 	bl	8020664 <etharp_input>
      break;
 802260a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 802260c:	2300      	movs	r3, #0
 802260e:	e00c      	b.n	802262a <ethernet_input+0x10e>
    goto free_and_return;
 8022610:	bf00      	nop
 8022612:	e006      	b.n	8022622 <ethernet_input+0x106>
        goto free_and_return;
 8022614:	bf00      	nop
 8022616:	e004      	b.n	8022622 <ethernet_input+0x106>
        goto free_and_return;
 8022618:	bf00      	nop
 802261a:	e002      	b.n	8022622 <ethernet_input+0x106>
        goto free_and_return;
 802261c:	bf00      	nop
 802261e:	e000      	b.n	8022622 <ethernet_input+0x106>
        goto free_and_return;
 8022620:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8022622:	6878      	ldr	r0, [r7, #4]
 8022624:	f7fc fc6c 	bl	801ef00 <pbuf_free>
  return ERR_OK;
 8022628:	2300      	movs	r3, #0
}
 802262a:	4618      	mov	r0, r3
 802262c:	3718      	adds	r7, #24
 802262e:	46bd      	mov	sp, r7
 8022630:	bd80      	pop	{r7, pc}
 8022632:	bf00      	nop
 8022634:	08029308 	.word	0x08029308

08022638 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8022638:	b580      	push	{r7, lr}
 802263a:	b086      	sub	sp, #24
 802263c:	af00      	add	r7, sp, #0
 802263e:	60f8      	str	r0, [r7, #12]
 8022640:	60b9      	str	r1, [r7, #8]
 8022642:	607a      	str	r2, [r7, #4]
 8022644:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8022646:	8c3b      	ldrh	r3, [r7, #32]
 8022648:	4618      	mov	r0, r3
 802264a:	f7fb f87d 	bl	801d748 <lwip_htons>
 802264e:	4603      	mov	r3, r0
 8022650:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8022652:	210e      	movs	r1, #14
 8022654:	68b8      	ldr	r0, [r7, #8]
 8022656:	f7fc fbbd 	bl	801edd4 <pbuf_add_header>
 802265a:	4603      	mov	r3, r0
 802265c:	2b00      	cmp	r3, #0
 802265e:	d125      	bne.n	80226ac <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8022660:	68bb      	ldr	r3, [r7, #8]
 8022662:	685b      	ldr	r3, [r3, #4]
 8022664:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8022666:	693b      	ldr	r3, [r7, #16]
 8022668:	8afa      	ldrh	r2, [r7, #22]
 802266a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 802266c:	693b      	ldr	r3, [r7, #16]
 802266e:	2206      	movs	r2, #6
 8022670:	6839      	ldr	r1, [r7, #0]
 8022672:	4618      	mov	r0, r3
 8022674:	f000 f86c 	bl	8022750 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8022678:	693b      	ldr	r3, [r7, #16]
 802267a:	3306      	adds	r3, #6
 802267c:	2206      	movs	r2, #6
 802267e:	6879      	ldr	r1, [r7, #4]
 8022680:	4618      	mov	r0, r3
 8022682:	f000 f865 	bl	8022750 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8022686:	68fb      	ldr	r3, [r7, #12]
 8022688:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802268c:	2b06      	cmp	r3, #6
 802268e:	d006      	beq.n	802269e <ethernet_output+0x66>
 8022690:	4b0a      	ldr	r3, [pc, #40]	; (80226bc <ethernet_output+0x84>)
 8022692:	f44f 7299 	mov.w	r2, #306	; 0x132
 8022696:	490a      	ldr	r1, [pc, #40]	; (80226c0 <ethernet_output+0x88>)
 8022698:	480a      	ldr	r0, [pc, #40]	; (80226c4 <ethernet_output+0x8c>)
 802269a:	f000 f969 	bl	8022970 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802269e:	68fb      	ldr	r3, [r7, #12]
 80226a0:	699b      	ldr	r3, [r3, #24]
 80226a2:	68b9      	ldr	r1, [r7, #8]
 80226a4:	68f8      	ldr	r0, [r7, #12]
 80226a6:	4798      	blx	r3
 80226a8:	4603      	mov	r3, r0
 80226aa:	e002      	b.n	80226b2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80226ac:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80226ae:	f06f 0301 	mvn.w	r3, #1
}
 80226b2:	4618      	mov	r0, r3
 80226b4:	3718      	adds	r7, #24
 80226b6:	46bd      	mov	sp, r7
 80226b8:	bd80      	pop	{r7, pc}
 80226ba:	bf00      	nop
 80226bc:	08028db8 	.word	0x08028db8
 80226c0:	08028df0 	.word	0x08028df0
 80226c4:	08028e24 	.word	0x08028e24

080226c8 <__libc_init_array>:
 80226c8:	b570      	push	{r4, r5, r6, lr}
 80226ca:	4d0d      	ldr	r5, [pc, #52]	; (8022700 <__libc_init_array+0x38>)
 80226cc:	4c0d      	ldr	r4, [pc, #52]	; (8022704 <__libc_init_array+0x3c>)
 80226ce:	1b64      	subs	r4, r4, r5
 80226d0:	10a4      	asrs	r4, r4, #2
 80226d2:	2600      	movs	r6, #0
 80226d4:	42a6      	cmp	r6, r4
 80226d6:	d109      	bne.n	80226ec <__libc_init_array+0x24>
 80226d8:	4d0b      	ldr	r5, [pc, #44]	; (8022708 <__libc_init_array+0x40>)
 80226da:	4c0c      	ldr	r4, [pc, #48]	; (802270c <__libc_init_array+0x44>)
 80226dc:	f001 fbfe 	bl	8023edc <_init>
 80226e0:	1b64      	subs	r4, r4, r5
 80226e2:	10a4      	asrs	r4, r4, #2
 80226e4:	2600      	movs	r6, #0
 80226e6:	42a6      	cmp	r6, r4
 80226e8:	d105      	bne.n	80226f6 <__libc_init_array+0x2e>
 80226ea:	bd70      	pop	{r4, r5, r6, pc}
 80226ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80226f0:	4798      	blx	r3
 80226f2:	3601      	adds	r6, #1
 80226f4:	e7ee      	b.n	80226d4 <__libc_init_array+0xc>
 80226f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80226fa:	4798      	blx	r3
 80226fc:	3601      	adds	r6, #1
 80226fe:	e7f2      	b.n	80226e6 <__libc_init_array+0x1e>
 8022700:	08029468 	.word	0x08029468
 8022704:	08029468 	.word	0x08029468
 8022708:	08029468 	.word	0x08029468
 802270c:	0802946c 	.word	0x0802946c

08022710 <malloc>:
 8022710:	4b02      	ldr	r3, [pc, #8]	; (802271c <malloc+0xc>)
 8022712:	4601      	mov	r1, r0
 8022714:	6818      	ldr	r0, [r3, #0]
 8022716:	f000 b8b7 	b.w	8022888 <_malloc_r>
 802271a:	bf00      	nop
 802271c:	20000140 	.word	0x20000140

08022720 <free>:
 8022720:	4b02      	ldr	r3, [pc, #8]	; (802272c <free+0xc>)
 8022722:	4601      	mov	r1, r0
 8022724:	6818      	ldr	r0, [r3, #0]
 8022726:	f000 b843 	b.w	80227b0 <_free_r>
 802272a:	bf00      	nop
 802272c:	20000140 	.word	0x20000140

08022730 <memcmp>:
 8022730:	b510      	push	{r4, lr}
 8022732:	3901      	subs	r1, #1
 8022734:	4402      	add	r2, r0
 8022736:	4290      	cmp	r0, r2
 8022738:	d101      	bne.n	802273e <memcmp+0xe>
 802273a:	2000      	movs	r0, #0
 802273c:	e005      	b.n	802274a <memcmp+0x1a>
 802273e:	7803      	ldrb	r3, [r0, #0]
 8022740:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022744:	42a3      	cmp	r3, r4
 8022746:	d001      	beq.n	802274c <memcmp+0x1c>
 8022748:	1b18      	subs	r0, r3, r4
 802274a:	bd10      	pop	{r4, pc}
 802274c:	3001      	adds	r0, #1
 802274e:	e7f2      	b.n	8022736 <memcmp+0x6>

08022750 <memcpy>:
 8022750:	440a      	add	r2, r1
 8022752:	4291      	cmp	r1, r2
 8022754:	f100 33ff 	add.w	r3, r0, #4294967295
 8022758:	d100      	bne.n	802275c <memcpy+0xc>
 802275a:	4770      	bx	lr
 802275c:	b510      	push	{r4, lr}
 802275e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022766:	4291      	cmp	r1, r2
 8022768:	d1f9      	bne.n	802275e <memcpy+0xe>
 802276a:	bd10      	pop	{r4, pc}

0802276c <memmove>:
 802276c:	4288      	cmp	r0, r1
 802276e:	b510      	push	{r4, lr}
 8022770:	eb01 0402 	add.w	r4, r1, r2
 8022774:	d902      	bls.n	802277c <memmove+0x10>
 8022776:	4284      	cmp	r4, r0
 8022778:	4623      	mov	r3, r4
 802277a:	d807      	bhi.n	802278c <memmove+0x20>
 802277c:	1e43      	subs	r3, r0, #1
 802277e:	42a1      	cmp	r1, r4
 8022780:	d008      	beq.n	8022794 <memmove+0x28>
 8022782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022786:	f803 2f01 	strb.w	r2, [r3, #1]!
 802278a:	e7f8      	b.n	802277e <memmove+0x12>
 802278c:	4402      	add	r2, r0
 802278e:	4601      	mov	r1, r0
 8022790:	428a      	cmp	r2, r1
 8022792:	d100      	bne.n	8022796 <memmove+0x2a>
 8022794:	bd10      	pop	{r4, pc}
 8022796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802279a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802279e:	e7f7      	b.n	8022790 <memmove+0x24>

080227a0 <memset>:
 80227a0:	4402      	add	r2, r0
 80227a2:	4603      	mov	r3, r0
 80227a4:	4293      	cmp	r3, r2
 80227a6:	d100      	bne.n	80227aa <memset+0xa>
 80227a8:	4770      	bx	lr
 80227aa:	f803 1b01 	strb.w	r1, [r3], #1
 80227ae:	e7f9      	b.n	80227a4 <memset+0x4>

080227b0 <_free_r>:
 80227b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80227b2:	2900      	cmp	r1, #0
 80227b4:	d044      	beq.n	8022840 <_free_r+0x90>
 80227b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80227ba:	9001      	str	r0, [sp, #4]
 80227bc:	2b00      	cmp	r3, #0
 80227be:	f1a1 0404 	sub.w	r4, r1, #4
 80227c2:	bfb8      	it	lt
 80227c4:	18e4      	addlt	r4, r4, r3
 80227c6:	f000 fdbb 	bl	8023340 <__malloc_lock>
 80227ca:	4a1e      	ldr	r2, [pc, #120]	; (8022844 <_free_r+0x94>)
 80227cc:	9801      	ldr	r0, [sp, #4]
 80227ce:	6813      	ldr	r3, [r2, #0]
 80227d0:	b933      	cbnz	r3, 80227e0 <_free_r+0x30>
 80227d2:	6063      	str	r3, [r4, #4]
 80227d4:	6014      	str	r4, [r2, #0]
 80227d6:	b003      	add	sp, #12
 80227d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80227dc:	f000 bdb6 	b.w	802334c <__malloc_unlock>
 80227e0:	42a3      	cmp	r3, r4
 80227e2:	d908      	bls.n	80227f6 <_free_r+0x46>
 80227e4:	6825      	ldr	r5, [r4, #0]
 80227e6:	1961      	adds	r1, r4, r5
 80227e8:	428b      	cmp	r3, r1
 80227ea:	bf01      	itttt	eq
 80227ec:	6819      	ldreq	r1, [r3, #0]
 80227ee:	685b      	ldreq	r3, [r3, #4]
 80227f0:	1949      	addeq	r1, r1, r5
 80227f2:	6021      	streq	r1, [r4, #0]
 80227f4:	e7ed      	b.n	80227d2 <_free_r+0x22>
 80227f6:	461a      	mov	r2, r3
 80227f8:	685b      	ldr	r3, [r3, #4]
 80227fa:	b10b      	cbz	r3, 8022800 <_free_r+0x50>
 80227fc:	42a3      	cmp	r3, r4
 80227fe:	d9fa      	bls.n	80227f6 <_free_r+0x46>
 8022800:	6811      	ldr	r1, [r2, #0]
 8022802:	1855      	adds	r5, r2, r1
 8022804:	42a5      	cmp	r5, r4
 8022806:	d10b      	bne.n	8022820 <_free_r+0x70>
 8022808:	6824      	ldr	r4, [r4, #0]
 802280a:	4421      	add	r1, r4
 802280c:	1854      	adds	r4, r2, r1
 802280e:	42a3      	cmp	r3, r4
 8022810:	6011      	str	r1, [r2, #0]
 8022812:	d1e0      	bne.n	80227d6 <_free_r+0x26>
 8022814:	681c      	ldr	r4, [r3, #0]
 8022816:	685b      	ldr	r3, [r3, #4]
 8022818:	6053      	str	r3, [r2, #4]
 802281a:	4421      	add	r1, r4
 802281c:	6011      	str	r1, [r2, #0]
 802281e:	e7da      	b.n	80227d6 <_free_r+0x26>
 8022820:	d902      	bls.n	8022828 <_free_r+0x78>
 8022822:	230c      	movs	r3, #12
 8022824:	6003      	str	r3, [r0, #0]
 8022826:	e7d6      	b.n	80227d6 <_free_r+0x26>
 8022828:	6825      	ldr	r5, [r4, #0]
 802282a:	1961      	adds	r1, r4, r5
 802282c:	428b      	cmp	r3, r1
 802282e:	bf04      	itt	eq
 8022830:	6819      	ldreq	r1, [r3, #0]
 8022832:	685b      	ldreq	r3, [r3, #4]
 8022834:	6063      	str	r3, [r4, #4]
 8022836:	bf04      	itt	eq
 8022838:	1949      	addeq	r1, r1, r5
 802283a:	6021      	streq	r1, [r4, #0]
 802283c:	6054      	str	r4, [r2, #4]
 802283e:	e7ca      	b.n	80227d6 <_free_r+0x26>
 8022840:	b003      	add	sp, #12
 8022842:	bd30      	pop	{r4, r5, pc}
 8022844:	20014338 	.word	0x20014338

08022848 <sbrk_aligned>:
 8022848:	b570      	push	{r4, r5, r6, lr}
 802284a:	4e0e      	ldr	r6, [pc, #56]	; (8022884 <sbrk_aligned+0x3c>)
 802284c:	460c      	mov	r4, r1
 802284e:	6831      	ldr	r1, [r6, #0]
 8022850:	4605      	mov	r5, r0
 8022852:	b911      	cbnz	r1, 802285a <sbrk_aligned+0x12>
 8022854:	f000 f96e 	bl	8022b34 <_sbrk_r>
 8022858:	6030      	str	r0, [r6, #0]
 802285a:	4621      	mov	r1, r4
 802285c:	4628      	mov	r0, r5
 802285e:	f000 f969 	bl	8022b34 <_sbrk_r>
 8022862:	1c43      	adds	r3, r0, #1
 8022864:	d00a      	beq.n	802287c <sbrk_aligned+0x34>
 8022866:	1cc4      	adds	r4, r0, #3
 8022868:	f024 0403 	bic.w	r4, r4, #3
 802286c:	42a0      	cmp	r0, r4
 802286e:	d007      	beq.n	8022880 <sbrk_aligned+0x38>
 8022870:	1a21      	subs	r1, r4, r0
 8022872:	4628      	mov	r0, r5
 8022874:	f000 f95e 	bl	8022b34 <_sbrk_r>
 8022878:	3001      	adds	r0, #1
 802287a:	d101      	bne.n	8022880 <sbrk_aligned+0x38>
 802287c:	f04f 34ff 	mov.w	r4, #4294967295
 8022880:	4620      	mov	r0, r4
 8022882:	bd70      	pop	{r4, r5, r6, pc}
 8022884:	2001433c 	.word	0x2001433c

08022888 <_malloc_r>:
 8022888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802288c:	1ccd      	adds	r5, r1, #3
 802288e:	f025 0503 	bic.w	r5, r5, #3
 8022892:	3508      	adds	r5, #8
 8022894:	2d0c      	cmp	r5, #12
 8022896:	bf38      	it	cc
 8022898:	250c      	movcc	r5, #12
 802289a:	2d00      	cmp	r5, #0
 802289c:	4607      	mov	r7, r0
 802289e:	db01      	blt.n	80228a4 <_malloc_r+0x1c>
 80228a0:	42a9      	cmp	r1, r5
 80228a2:	d905      	bls.n	80228b0 <_malloc_r+0x28>
 80228a4:	230c      	movs	r3, #12
 80228a6:	603b      	str	r3, [r7, #0]
 80228a8:	2600      	movs	r6, #0
 80228aa:	4630      	mov	r0, r6
 80228ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80228b0:	4e2e      	ldr	r6, [pc, #184]	; (802296c <_malloc_r+0xe4>)
 80228b2:	f000 fd45 	bl	8023340 <__malloc_lock>
 80228b6:	6833      	ldr	r3, [r6, #0]
 80228b8:	461c      	mov	r4, r3
 80228ba:	bb34      	cbnz	r4, 802290a <_malloc_r+0x82>
 80228bc:	4629      	mov	r1, r5
 80228be:	4638      	mov	r0, r7
 80228c0:	f7ff ffc2 	bl	8022848 <sbrk_aligned>
 80228c4:	1c43      	adds	r3, r0, #1
 80228c6:	4604      	mov	r4, r0
 80228c8:	d14d      	bne.n	8022966 <_malloc_r+0xde>
 80228ca:	6834      	ldr	r4, [r6, #0]
 80228cc:	4626      	mov	r6, r4
 80228ce:	2e00      	cmp	r6, #0
 80228d0:	d140      	bne.n	8022954 <_malloc_r+0xcc>
 80228d2:	6823      	ldr	r3, [r4, #0]
 80228d4:	4631      	mov	r1, r6
 80228d6:	4638      	mov	r0, r7
 80228d8:	eb04 0803 	add.w	r8, r4, r3
 80228dc:	f000 f92a 	bl	8022b34 <_sbrk_r>
 80228e0:	4580      	cmp	r8, r0
 80228e2:	d13a      	bne.n	802295a <_malloc_r+0xd2>
 80228e4:	6821      	ldr	r1, [r4, #0]
 80228e6:	3503      	adds	r5, #3
 80228e8:	1a6d      	subs	r5, r5, r1
 80228ea:	f025 0503 	bic.w	r5, r5, #3
 80228ee:	3508      	adds	r5, #8
 80228f0:	2d0c      	cmp	r5, #12
 80228f2:	bf38      	it	cc
 80228f4:	250c      	movcc	r5, #12
 80228f6:	4629      	mov	r1, r5
 80228f8:	4638      	mov	r0, r7
 80228fa:	f7ff ffa5 	bl	8022848 <sbrk_aligned>
 80228fe:	3001      	adds	r0, #1
 8022900:	d02b      	beq.n	802295a <_malloc_r+0xd2>
 8022902:	6823      	ldr	r3, [r4, #0]
 8022904:	442b      	add	r3, r5
 8022906:	6023      	str	r3, [r4, #0]
 8022908:	e00e      	b.n	8022928 <_malloc_r+0xa0>
 802290a:	6822      	ldr	r2, [r4, #0]
 802290c:	1b52      	subs	r2, r2, r5
 802290e:	d41e      	bmi.n	802294e <_malloc_r+0xc6>
 8022910:	2a0b      	cmp	r2, #11
 8022912:	d916      	bls.n	8022942 <_malloc_r+0xba>
 8022914:	1961      	adds	r1, r4, r5
 8022916:	42a3      	cmp	r3, r4
 8022918:	6025      	str	r5, [r4, #0]
 802291a:	bf18      	it	ne
 802291c:	6059      	strne	r1, [r3, #4]
 802291e:	6863      	ldr	r3, [r4, #4]
 8022920:	bf08      	it	eq
 8022922:	6031      	streq	r1, [r6, #0]
 8022924:	5162      	str	r2, [r4, r5]
 8022926:	604b      	str	r3, [r1, #4]
 8022928:	4638      	mov	r0, r7
 802292a:	f104 060b 	add.w	r6, r4, #11
 802292e:	f000 fd0d 	bl	802334c <__malloc_unlock>
 8022932:	f026 0607 	bic.w	r6, r6, #7
 8022936:	1d23      	adds	r3, r4, #4
 8022938:	1af2      	subs	r2, r6, r3
 802293a:	d0b6      	beq.n	80228aa <_malloc_r+0x22>
 802293c:	1b9b      	subs	r3, r3, r6
 802293e:	50a3      	str	r3, [r4, r2]
 8022940:	e7b3      	b.n	80228aa <_malloc_r+0x22>
 8022942:	6862      	ldr	r2, [r4, #4]
 8022944:	42a3      	cmp	r3, r4
 8022946:	bf0c      	ite	eq
 8022948:	6032      	streq	r2, [r6, #0]
 802294a:	605a      	strne	r2, [r3, #4]
 802294c:	e7ec      	b.n	8022928 <_malloc_r+0xa0>
 802294e:	4623      	mov	r3, r4
 8022950:	6864      	ldr	r4, [r4, #4]
 8022952:	e7b2      	b.n	80228ba <_malloc_r+0x32>
 8022954:	4634      	mov	r4, r6
 8022956:	6876      	ldr	r6, [r6, #4]
 8022958:	e7b9      	b.n	80228ce <_malloc_r+0x46>
 802295a:	230c      	movs	r3, #12
 802295c:	603b      	str	r3, [r7, #0]
 802295e:	4638      	mov	r0, r7
 8022960:	f000 fcf4 	bl	802334c <__malloc_unlock>
 8022964:	e7a1      	b.n	80228aa <_malloc_r+0x22>
 8022966:	6025      	str	r5, [r4, #0]
 8022968:	e7de      	b.n	8022928 <_malloc_r+0xa0>
 802296a:	bf00      	nop
 802296c:	20014338 	.word	0x20014338

08022970 <iprintf>:
 8022970:	b40f      	push	{r0, r1, r2, r3}
 8022972:	4b0a      	ldr	r3, [pc, #40]	; (802299c <iprintf+0x2c>)
 8022974:	b513      	push	{r0, r1, r4, lr}
 8022976:	681c      	ldr	r4, [r3, #0]
 8022978:	b124      	cbz	r4, 8022984 <iprintf+0x14>
 802297a:	69a3      	ldr	r3, [r4, #24]
 802297c:	b913      	cbnz	r3, 8022984 <iprintf+0x14>
 802297e:	4620      	mov	r0, r4
 8022980:	f000 fbc6 	bl	8023110 <__sinit>
 8022984:	ab05      	add	r3, sp, #20
 8022986:	9a04      	ldr	r2, [sp, #16]
 8022988:	68a1      	ldr	r1, [r4, #8]
 802298a:	9301      	str	r3, [sp, #4]
 802298c:	4620      	mov	r0, r4
 802298e:	f000 fe69 	bl	8023664 <_vfiprintf_r>
 8022992:	b002      	add	sp, #8
 8022994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022998:	b004      	add	sp, #16
 802299a:	4770      	bx	lr
 802299c:	20000140 	.word	0x20000140

080229a0 <putchar>:
 80229a0:	4b09      	ldr	r3, [pc, #36]	; (80229c8 <putchar+0x28>)
 80229a2:	b513      	push	{r0, r1, r4, lr}
 80229a4:	681c      	ldr	r4, [r3, #0]
 80229a6:	4601      	mov	r1, r0
 80229a8:	b134      	cbz	r4, 80229b8 <putchar+0x18>
 80229aa:	69a3      	ldr	r3, [r4, #24]
 80229ac:	b923      	cbnz	r3, 80229b8 <putchar+0x18>
 80229ae:	9001      	str	r0, [sp, #4]
 80229b0:	4620      	mov	r0, r4
 80229b2:	f000 fbad 	bl	8023110 <__sinit>
 80229b6:	9901      	ldr	r1, [sp, #4]
 80229b8:	68a2      	ldr	r2, [r4, #8]
 80229ba:	4620      	mov	r0, r4
 80229bc:	b002      	add	sp, #8
 80229be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80229c2:	f001 b913 	b.w	8023bec <_putc_r>
 80229c6:	bf00      	nop
 80229c8:	20000140 	.word	0x20000140

080229cc <_puts_r>:
 80229cc:	b570      	push	{r4, r5, r6, lr}
 80229ce:	460e      	mov	r6, r1
 80229d0:	4605      	mov	r5, r0
 80229d2:	b118      	cbz	r0, 80229dc <_puts_r+0x10>
 80229d4:	6983      	ldr	r3, [r0, #24]
 80229d6:	b90b      	cbnz	r3, 80229dc <_puts_r+0x10>
 80229d8:	f000 fb9a 	bl	8023110 <__sinit>
 80229dc:	69ab      	ldr	r3, [r5, #24]
 80229de:	68ac      	ldr	r4, [r5, #8]
 80229e0:	b913      	cbnz	r3, 80229e8 <_puts_r+0x1c>
 80229e2:	4628      	mov	r0, r5
 80229e4:	f000 fb94 	bl	8023110 <__sinit>
 80229e8:	4b2c      	ldr	r3, [pc, #176]	; (8022a9c <_puts_r+0xd0>)
 80229ea:	429c      	cmp	r4, r3
 80229ec:	d120      	bne.n	8022a30 <_puts_r+0x64>
 80229ee:	686c      	ldr	r4, [r5, #4]
 80229f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80229f2:	07db      	lsls	r3, r3, #31
 80229f4:	d405      	bmi.n	8022a02 <_puts_r+0x36>
 80229f6:	89a3      	ldrh	r3, [r4, #12]
 80229f8:	0598      	lsls	r0, r3, #22
 80229fa:	d402      	bmi.n	8022a02 <_puts_r+0x36>
 80229fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80229fe:	f000 fc37 	bl	8023270 <__retarget_lock_acquire_recursive>
 8022a02:	89a3      	ldrh	r3, [r4, #12]
 8022a04:	0719      	lsls	r1, r3, #28
 8022a06:	d51d      	bpl.n	8022a44 <_puts_r+0x78>
 8022a08:	6923      	ldr	r3, [r4, #16]
 8022a0a:	b1db      	cbz	r3, 8022a44 <_puts_r+0x78>
 8022a0c:	3e01      	subs	r6, #1
 8022a0e:	68a3      	ldr	r3, [r4, #8]
 8022a10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8022a14:	3b01      	subs	r3, #1
 8022a16:	60a3      	str	r3, [r4, #8]
 8022a18:	bb39      	cbnz	r1, 8022a6a <_puts_r+0x9e>
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	da38      	bge.n	8022a90 <_puts_r+0xc4>
 8022a1e:	4622      	mov	r2, r4
 8022a20:	210a      	movs	r1, #10
 8022a22:	4628      	mov	r0, r5
 8022a24:	f000 f97c 	bl	8022d20 <__swbuf_r>
 8022a28:	3001      	adds	r0, #1
 8022a2a:	d011      	beq.n	8022a50 <_puts_r+0x84>
 8022a2c:	250a      	movs	r5, #10
 8022a2e:	e011      	b.n	8022a54 <_puts_r+0x88>
 8022a30:	4b1b      	ldr	r3, [pc, #108]	; (8022aa0 <_puts_r+0xd4>)
 8022a32:	429c      	cmp	r4, r3
 8022a34:	d101      	bne.n	8022a3a <_puts_r+0x6e>
 8022a36:	68ac      	ldr	r4, [r5, #8]
 8022a38:	e7da      	b.n	80229f0 <_puts_r+0x24>
 8022a3a:	4b1a      	ldr	r3, [pc, #104]	; (8022aa4 <_puts_r+0xd8>)
 8022a3c:	429c      	cmp	r4, r3
 8022a3e:	bf08      	it	eq
 8022a40:	68ec      	ldreq	r4, [r5, #12]
 8022a42:	e7d5      	b.n	80229f0 <_puts_r+0x24>
 8022a44:	4621      	mov	r1, r4
 8022a46:	4628      	mov	r0, r5
 8022a48:	f000 f9bc 	bl	8022dc4 <__swsetup_r>
 8022a4c:	2800      	cmp	r0, #0
 8022a4e:	d0dd      	beq.n	8022a0c <_puts_r+0x40>
 8022a50:	f04f 35ff 	mov.w	r5, #4294967295
 8022a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022a56:	07da      	lsls	r2, r3, #31
 8022a58:	d405      	bmi.n	8022a66 <_puts_r+0x9a>
 8022a5a:	89a3      	ldrh	r3, [r4, #12]
 8022a5c:	059b      	lsls	r3, r3, #22
 8022a5e:	d402      	bmi.n	8022a66 <_puts_r+0x9a>
 8022a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022a62:	f000 fc06 	bl	8023272 <__retarget_lock_release_recursive>
 8022a66:	4628      	mov	r0, r5
 8022a68:	bd70      	pop	{r4, r5, r6, pc}
 8022a6a:	2b00      	cmp	r3, #0
 8022a6c:	da04      	bge.n	8022a78 <_puts_r+0xac>
 8022a6e:	69a2      	ldr	r2, [r4, #24]
 8022a70:	429a      	cmp	r2, r3
 8022a72:	dc06      	bgt.n	8022a82 <_puts_r+0xb6>
 8022a74:	290a      	cmp	r1, #10
 8022a76:	d004      	beq.n	8022a82 <_puts_r+0xb6>
 8022a78:	6823      	ldr	r3, [r4, #0]
 8022a7a:	1c5a      	adds	r2, r3, #1
 8022a7c:	6022      	str	r2, [r4, #0]
 8022a7e:	7019      	strb	r1, [r3, #0]
 8022a80:	e7c5      	b.n	8022a0e <_puts_r+0x42>
 8022a82:	4622      	mov	r2, r4
 8022a84:	4628      	mov	r0, r5
 8022a86:	f000 f94b 	bl	8022d20 <__swbuf_r>
 8022a8a:	3001      	adds	r0, #1
 8022a8c:	d1bf      	bne.n	8022a0e <_puts_r+0x42>
 8022a8e:	e7df      	b.n	8022a50 <_puts_r+0x84>
 8022a90:	6823      	ldr	r3, [r4, #0]
 8022a92:	250a      	movs	r5, #10
 8022a94:	1c5a      	adds	r2, r3, #1
 8022a96:	6022      	str	r2, [r4, #0]
 8022a98:	701d      	strb	r5, [r3, #0]
 8022a9a:	e7db      	b.n	8022a54 <_puts_r+0x88>
 8022a9c:	080293ec 	.word	0x080293ec
 8022aa0:	0802940c 	.word	0x0802940c
 8022aa4:	080293cc 	.word	0x080293cc

08022aa8 <puts>:
 8022aa8:	4b02      	ldr	r3, [pc, #8]	; (8022ab4 <puts+0xc>)
 8022aaa:	4601      	mov	r1, r0
 8022aac:	6818      	ldr	r0, [r3, #0]
 8022aae:	f7ff bf8d 	b.w	80229cc <_puts_r>
 8022ab2:	bf00      	nop
 8022ab4:	20000140 	.word	0x20000140

08022ab8 <rand>:
 8022ab8:	4b16      	ldr	r3, [pc, #88]	; (8022b14 <rand+0x5c>)
 8022aba:	b510      	push	{r4, lr}
 8022abc:	681c      	ldr	r4, [r3, #0]
 8022abe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022ac0:	b9b3      	cbnz	r3, 8022af0 <rand+0x38>
 8022ac2:	2018      	movs	r0, #24
 8022ac4:	f7ff fe24 	bl	8022710 <malloc>
 8022ac8:	63a0      	str	r0, [r4, #56]	; 0x38
 8022aca:	b928      	cbnz	r0, 8022ad8 <rand+0x20>
 8022acc:	4602      	mov	r2, r0
 8022ace:	4b12      	ldr	r3, [pc, #72]	; (8022b18 <rand+0x60>)
 8022ad0:	4812      	ldr	r0, [pc, #72]	; (8022b1c <rand+0x64>)
 8022ad2:	214e      	movs	r1, #78	; 0x4e
 8022ad4:	f000 f9e4 	bl	8022ea0 <__assert_func>
 8022ad8:	4a11      	ldr	r2, [pc, #68]	; (8022b20 <rand+0x68>)
 8022ada:	4b12      	ldr	r3, [pc, #72]	; (8022b24 <rand+0x6c>)
 8022adc:	e9c0 2300 	strd	r2, r3, [r0]
 8022ae0:	4b11      	ldr	r3, [pc, #68]	; (8022b28 <rand+0x70>)
 8022ae2:	6083      	str	r3, [r0, #8]
 8022ae4:	230b      	movs	r3, #11
 8022ae6:	8183      	strh	r3, [r0, #12]
 8022ae8:	2201      	movs	r2, #1
 8022aea:	2300      	movs	r3, #0
 8022aec:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8022af0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8022af2:	4a0e      	ldr	r2, [pc, #56]	; (8022b2c <rand+0x74>)
 8022af4:	6920      	ldr	r0, [r4, #16]
 8022af6:	6963      	ldr	r3, [r4, #20]
 8022af8:	490d      	ldr	r1, [pc, #52]	; (8022b30 <rand+0x78>)
 8022afa:	4342      	muls	r2, r0
 8022afc:	fb01 2203 	mla	r2, r1, r3, r2
 8022b00:	fba0 0101 	umull	r0, r1, r0, r1
 8022b04:	1c43      	adds	r3, r0, #1
 8022b06:	eb42 0001 	adc.w	r0, r2, r1
 8022b0a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8022b0e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022b12:	bd10      	pop	{r4, pc}
 8022b14:	20000140 	.word	0x20000140
 8022b18:	0802931c 	.word	0x0802931c
 8022b1c:	08029333 	.word	0x08029333
 8022b20:	abcd330e 	.word	0xabcd330e
 8022b24:	e66d1234 	.word	0xe66d1234
 8022b28:	0005deec 	.word	0x0005deec
 8022b2c:	5851f42d 	.word	0x5851f42d
 8022b30:	4c957f2d 	.word	0x4c957f2d

08022b34 <_sbrk_r>:
 8022b34:	b538      	push	{r3, r4, r5, lr}
 8022b36:	4d06      	ldr	r5, [pc, #24]	; (8022b50 <_sbrk_r+0x1c>)
 8022b38:	2300      	movs	r3, #0
 8022b3a:	4604      	mov	r4, r0
 8022b3c:	4608      	mov	r0, r1
 8022b3e:	602b      	str	r3, [r5, #0]
 8022b40:	f7f2 f894 	bl	8014c6c <_sbrk>
 8022b44:	1c43      	adds	r3, r0, #1
 8022b46:	d102      	bne.n	8022b4e <_sbrk_r+0x1a>
 8022b48:	682b      	ldr	r3, [r5, #0]
 8022b4a:	b103      	cbz	r3, 8022b4e <_sbrk_r+0x1a>
 8022b4c:	6023      	str	r3, [r4, #0]
 8022b4e:	bd38      	pop	{r3, r4, r5, pc}
 8022b50:	20014340 	.word	0x20014340

08022b54 <setvbuf>:
 8022b54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022b58:	461d      	mov	r5, r3
 8022b5a:	4b5d      	ldr	r3, [pc, #372]	; (8022cd0 <setvbuf+0x17c>)
 8022b5c:	681f      	ldr	r7, [r3, #0]
 8022b5e:	4604      	mov	r4, r0
 8022b60:	460e      	mov	r6, r1
 8022b62:	4690      	mov	r8, r2
 8022b64:	b127      	cbz	r7, 8022b70 <setvbuf+0x1c>
 8022b66:	69bb      	ldr	r3, [r7, #24]
 8022b68:	b913      	cbnz	r3, 8022b70 <setvbuf+0x1c>
 8022b6a:	4638      	mov	r0, r7
 8022b6c:	f000 fad0 	bl	8023110 <__sinit>
 8022b70:	4b58      	ldr	r3, [pc, #352]	; (8022cd4 <setvbuf+0x180>)
 8022b72:	429c      	cmp	r4, r3
 8022b74:	d167      	bne.n	8022c46 <setvbuf+0xf2>
 8022b76:	687c      	ldr	r4, [r7, #4]
 8022b78:	f1b8 0f02 	cmp.w	r8, #2
 8022b7c:	d006      	beq.n	8022b8c <setvbuf+0x38>
 8022b7e:	f1b8 0f01 	cmp.w	r8, #1
 8022b82:	f200 809f 	bhi.w	8022cc4 <setvbuf+0x170>
 8022b86:	2d00      	cmp	r5, #0
 8022b88:	f2c0 809c 	blt.w	8022cc4 <setvbuf+0x170>
 8022b8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022b8e:	07db      	lsls	r3, r3, #31
 8022b90:	d405      	bmi.n	8022b9e <setvbuf+0x4a>
 8022b92:	89a3      	ldrh	r3, [r4, #12]
 8022b94:	0598      	lsls	r0, r3, #22
 8022b96:	d402      	bmi.n	8022b9e <setvbuf+0x4a>
 8022b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022b9a:	f000 fb69 	bl	8023270 <__retarget_lock_acquire_recursive>
 8022b9e:	4621      	mov	r1, r4
 8022ba0:	4638      	mov	r0, r7
 8022ba2:	f000 fa21 	bl	8022fe8 <_fflush_r>
 8022ba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022ba8:	b141      	cbz	r1, 8022bbc <setvbuf+0x68>
 8022baa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022bae:	4299      	cmp	r1, r3
 8022bb0:	d002      	beq.n	8022bb8 <setvbuf+0x64>
 8022bb2:	4638      	mov	r0, r7
 8022bb4:	f7ff fdfc 	bl	80227b0 <_free_r>
 8022bb8:	2300      	movs	r3, #0
 8022bba:	6363      	str	r3, [r4, #52]	; 0x34
 8022bbc:	2300      	movs	r3, #0
 8022bbe:	61a3      	str	r3, [r4, #24]
 8022bc0:	6063      	str	r3, [r4, #4]
 8022bc2:	89a3      	ldrh	r3, [r4, #12]
 8022bc4:	0619      	lsls	r1, r3, #24
 8022bc6:	d503      	bpl.n	8022bd0 <setvbuf+0x7c>
 8022bc8:	6921      	ldr	r1, [r4, #16]
 8022bca:	4638      	mov	r0, r7
 8022bcc:	f7ff fdf0 	bl	80227b0 <_free_r>
 8022bd0:	89a3      	ldrh	r3, [r4, #12]
 8022bd2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8022bd6:	f023 0303 	bic.w	r3, r3, #3
 8022bda:	f1b8 0f02 	cmp.w	r8, #2
 8022bde:	81a3      	strh	r3, [r4, #12]
 8022be0:	d06c      	beq.n	8022cbc <setvbuf+0x168>
 8022be2:	ab01      	add	r3, sp, #4
 8022be4:	466a      	mov	r2, sp
 8022be6:	4621      	mov	r1, r4
 8022be8:	4638      	mov	r0, r7
 8022bea:	f000 fb43 	bl	8023274 <__swhatbuf_r>
 8022bee:	89a3      	ldrh	r3, [r4, #12]
 8022bf0:	4318      	orrs	r0, r3
 8022bf2:	81a0      	strh	r0, [r4, #12]
 8022bf4:	2d00      	cmp	r5, #0
 8022bf6:	d130      	bne.n	8022c5a <setvbuf+0x106>
 8022bf8:	9d00      	ldr	r5, [sp, #0]
 8022bfa:	4628      	mov	r0, r5
 8022bfc:	f7ff fd88 	bl	8022710 <malloc>
 8022c00:	4606      	mov	r6, r0
 8022c02:	2800      	cmp	r0, #0
 8022c04:	d155      	bne.n	8022cb2 <setvbuf+0x15e>
 8022c06:	f8dd 9000 	ldr.w	r9, [sp]
 8022c0a:	45a9      	cmp	r9, r5
 8022c0c:	d14a      	bne.n	8022ca4 <setvbuf+0x150>
 8022c0e:	f04f 35ff 	mov.w	r5, #4294967295
 8022c12:	2200      	movs	r2, #0
 8022c14:	60a2      	str	r2, [r4, #8]
 8022c16:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8022c1a:	6022      	str	r2, [r4, #0]
 8022c1c:	6122      	str	r2, [r4, #16]
 8022c1e:	2201      	movs	r2, #1
 8022c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022c24:	6162      	str	r2, [r4, #20]
 8022c26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022c28:	f043 0302 	orr.w	r3, r3, #2
 8022c2c:	07d2      	lsls	r2, r2, #31
 8022c2e:	81a3      	strh	r3, [r4, #12]
 8022c30:	d405      	bmi.n	8022c3e <setvbuf+0xea>
 8022c32:	f413 7f00 	tst.w	r3, #512	; 0x200
 8022c36:	d102      	bne.n	8022c3e <setvbuf+0xea>
 8022c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022c3a:	f000 fb1a 	bl	8023272 <__retarget_lock_release_recursive>
 8022c3e:	4628      	mov	r0, r5
 8022c40:	b003      	add	sp, #12
 8022c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022c46:	4b24      	ldr	r3, [pc, #144]	; (8022cd8 <setvbuf+0x184>)
 8022c48:	429c      	cmp	r4, r3
 8022c4a:	d101      	bne.n	8022c50 <setvbuf+0xfc>
 8022c4c:	68bc      	ldr	r4, [r7, #8]
 8022c4e:	e793      	b.n	8022b78 <setvbuf+0x24>
 8022c50:	4b22      	ldr	r3, [pc, #136]	; (8022cdc <setvbuf+0x188>)
 8022c52:	429c      	cmp	r4, r3
 8022c54:	bf08      	it	eq
 8022c56:	68fc      	ldreq	r4, [r7, #12]
 8022c58:	e78e      	b.n	8022b78 <setvbuf+0x24>
 8022c5a:	2e00      	cmp	r6, #0
 8022c5c:	d0cd      	beq.n	8022bfa <setvbuf+0xa6>
 8022c5e:	69bb      	ldr	r3, [r7, #24]
 8022c60:	b913      	cbnz	r3, 8022c68 <setvbuf+0x114>
 8022c62:	4638      	mov	r0, r7
 8022c64:	f000 fa54 	bl	8023110 <__sinit>
 8022c68:	f1b8 0f01 	cmp.w	r8, #1
 8022c6c:	bf08      	it	eq
 8022c6e:	89a3      	ldrheq	r3, [r4, #12]
 8022c70:	6026      	str	r6, [r4, #0]
 8022c72:	bf04      	itt	eq
 8022c74:	f043 0301 	orreq.w	r3, r3, #1
 8022c78:	81a3      	strheq	r3, [r4, #12]
 8022c7a:	89a2      	ldrh	r2, [r4, #12]
 8022c7c:	f012 0308 	ands.w	r3, r2, #8
 8022c80:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8022c84:	d01c      	beq.n	8022cc0 <setvbuf+0x16c>
 8022c86:	07d3      	lsls	r3, r2, #31
 8022c88:	bf41      	itttt	mi
 8022c8a:	2300      	movmi	r3, #0
 8022c8c:	426d      	negmi	r5, r5
 8022c8e:	60a3      	strmi	r3, [r4, #8]
 8022c90:	61a5      	strmi	r5, [r4, #24]
 8022c92:	bf58      	it	pl
 8022c94:	60a5      	strpl	r5, [r4, #8]
 8022c96:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8022c98:	f015 0501 	ands.w	r5, r5, #1
 8022c9c:	d115      	bne.n	8022cca <setvbuf+0x176>
 8022c9e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8022ca2:	e7c8      	b.n	8022c36 <setvbuf+0xe2>
 8022ca4:	4648      	mov	r0, r9
 8022ca6:	f7ff fd33 	bl	8022710 <malloc>
 8022caa:	4606      	mov	r6, r0
 8022cac:	2800      	cmp	r0, #0
 8022cae:	d0ae      	beq.n	8022c0e <setvbuf+0xba>
 8022cb0:	464d      	mov	r5, r9
 8022cb2:	89a3      	ldrh	r3, [r4, #12]
 8022cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022cb8:	81a3      	strh	r3, [r4, #12]
 8022cba:	e7d0      	b.n	8022c5e <setvbuf+0x10a>
 8022cbc:	2500      	movs	r5, #0
 8022cbe:	e7a8      	b.n	8022c12 <setvbuf+0xbe>
 8022cc0:	60a3      	str	r3, [r4, #8]
 8022cc2:	e7e8      	b.n	8022c96 <setvbuf+0x142>
 8022cc4:	f04f 35ff 	mov.w	r5, #4294967295
 8022cc8:	e7b9      	b.n	8022c3e <setvbuf+0xea>
 8022cca:	2500      	movs	r5, #0
 8022ccc:	e7b7      	b.n	8022c3e <setvbuf+0xea>
 8022cce:	bf00      	nop
 8022cd0:	20000140 	.word	0x20000140
 8022cd4:	080293ec 	.word	0x080293ec
 8022cd8:	0802940c 	.word	0x0802940c
 8022cdc:	080293cc 	.word	0x080293cc

08022ce0 <siprintf>:
 8022ce0:	b40e      	push	{r1, r2, r3}
 8022ce2:	b500      	push	{lr}
 8022ce4:	b09c      	sub	sp, #112	; 0x70
 8022ce6:	ab1d      	add	r3, sp, #116	; 0x74
 8022ce8:	9002      	str	r0, [sp, #8]
 8022cea:	9006      	str	r0, [sp, #24]
 8022cec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022cf0:	4809      	ldr	r0, [pc, #36]	; (8022d18 <siprintf+0x38>)
 8022cf2:	9107      	str	r1, [sp, #28]
 8022cf4:	9104      	str	r1, [sp, #16]
 8022cf6:	4909      	ldr	r1, [pc, #36]	; (8022d1c <siprintf+0x3c>)
 8022cf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8022cfc:	9105      	str	r1, [sp, #20]
 8022cfe:	6800      	ldr	r0, [r0, #0]
 8022d00:	9301      	str	r3, [sp, #4]
 8022d02:	a902      	add	r1, sp, #8
 8022d04:	f000 fb84 	bl	8023410 <_svfiprintf_r>
 8022d08:	9b02      	ldr	r3, [sp, #8]
 8022d0a:	2200      	movs	r2, #0
 8022d0c:	701a      	strb	r2, [r3, #0]
 8022d0e:	b01c      	add	sp, #112	; 0x70
 8022d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8022d14:	b003      	add	sp, #12
 8022d16:	4770      	bx	lr
 8022d18:	20000140 	.word	0x20000140
 8022d1c:	ffff0208 	.word	0xffff0208

08022d20 <__swbuf_r>:
 8022d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d22:	460e      	mov	r6, r1
 8022d24:	4614      	mov	r4, r2
 8022d26:	4605      	mov	r5, r0
 8022d28:	b118      	cbz	r0, 8022d32 <__swbuf_r+0x12>
 8022d2a:	6983      	ldr	r3, [r0, #24]
 8022d2c:	b90b      	cbnz	r3, 8022d32 <__swbuf_r+0x12>
 8022d2e:	f000 f9ef 	bl	8023110 <__sinit>
 8022d32:	4b21      	ldr	r3, [pc, #132]	; (8022db8 <__swbuf_r+0x98>)
 8022d34:	429c      	cmp	r4, r3
 8022d36:	d12b      	bne.n	8022d90 <__swbuf_r+0x70>
 8022d38:	686c      	ldr	r4, [r5, #4]
 8022d3a:	69a3      	ldr	r3, [r4, #24]
 8022d3c:	60a3      	str	r3, [r4, #8]
 8022d3e:	89a3      	ldrh	r3, [r4, #12]
 8022d40:	071a      	lsls	r2, r3, #28
 8022d42:	d52f      	bpl.n	8022da4 <__swbuf_r+0x84>
 8022d44:	6923      	ldr	r3, [r4, #16]
 8022d46:	b36b      	cbz	r3, 8022da4 <__swbuf_r+0x84>
 8022d48:	6923      	ldr	r3, [r4, #16]
 8022d4a:	6820      	ldr	r0, [r4, #0]
 8022d4c:	1ac0      	subs	r0, r0, r3
 8022d4e:	6963      	ldr	r3, [r4, #20]
 8022d50:	b2f6      	uxtb	r6, r6
 8022d52:	4283      	cmp	r3, r0
 8022d54:	4637      	mov	r7, r6
 8022d56:	dc04      	bgt.n	8022d62 <__swbuf_r+0x42>
 8022d58:	4621      	mov	r1, r4
 8022d5a:	4628      	mov	r0, r5
 8022d5c:	f000 f944 	bl	8022fe8 <_fflush_r>
 8022d60:	bb30      	cbnz	r0, 8022db0 <__swbuf_r+0x90>
 8022d62:	68a3      	ldr	r3, [r4, #8]
 8022d64:	3b01      	subs	r3, #1
 8022d66:	60a3      	str	r3, [r4, #8]
 8022d68:	6823      	ldr	r3, [r4, #0]
 8022d6a:	1c5a      	adds	r2, r3, #1
 8022d6c:	6022      	str	r2, [r4, #0]
 8022d6e:	701e      	strb	r6, [r3, #0]
 8022d70:	6963      	ldr	r3, [r4, #20]
 8022d72:	3001      	adds	r0, #1
 8022d74:	4283      	cmp	r3, r0
 8022d76:	d004      	beq.n	8022d82 <__swbuf_r+0x62>
 8022d78:	89a3      	ldrh	r3, [r4, #12]
 8022d7a:	07db      	lsls	r3, r3, #31
 8022d7c:	d506      	bpl.n	8022d8c <__swbuf_r+0x6c>
 8022d7e:	2e0a      	cmp	r6, #10
 8022d80:	d104      	bne.n	8022d8c <__swbuf_r+0x6c>
 8022d82:	4621      	mov	r1, r4
 8022d84:	4628      	mov	r0, r5
 8022d86:	f000 f92f 	bl	8022fe8 <_fflush_r>
 8022d8a:	b988      	cbnz	r0, 8022db0 <__swbuf_r+0x90>
 8022d8c:	4638      	mov	r0, r7
 8022d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022d90:	4b0a      	ldr	r3, [pc, #40]	; (8022dbc <__swbuf_r+0x9c>)
 8022d92:	429c      	cmp	r4, r3
 8022d94:	d101      	bne.n	8022d9a <__swbuf_r+0x7a>
 8022d96:	68ac      	ldr	r4, [r5, #8]
 8022d98:	e7cf      	b.n	8022d3a <__swbuf_r+0x1a>
 8022d9a:	4b09      	ldr	r3, [pc, #36]	; (8022dc0 <__swbuf_r+0xa0>)
 8022d9c:	429c      	cmp	r4, r3
 8022d9e:	bf08      	it	eq
 8022da0:	68ec      	ldreq	r4, [r5, #12]
 8022da2:	e7ca      	b.n	8022d3a <__swbuf_r+0x1a>
 8022da4:	4621      	mov	r1, r4
 8022da6:	4628      	mov	r0, r5
 8022da8:	f000 f80c 	bl	8022dc4 <__swsetup_r>
 8022dac:	2800      	cmp	r0, #0
 8022dae:	d0cb      	beq.n	8022d48 <__swbuf_r+0x28>
 8022db0:	f04f 37ff 	mov.w	r7, #4294967295
 8022db4:	e7ea      	b.n	8022d8c <__swbuf_r+0x6c>
 8022db6:	bf00      	nop
 8022db8:	080293ec 	.word	0x080293ec
 8022dbc:	0802940c 	.word	0x0802940c
 8022dc0:	080293cc 	.word	0x080293cc

08022dc4 <__swsetup_r>:
 8022dc4:	4b32      	ldr	r3, [pc, #200]	; (8022e90 <__swsetup_r+0xcc>)
 8022dc6:	b570      	push	{r4, r5, r6, lr}
 8022dc8:	681d      	ldr	r5, [r3, #0]
 8022dca:	4606      	mov	r6, r0
 8022dcc:	460c      	mov	r4, r1
 8022dce:	b125      	cbz	r5, 8022dda <__swsetup_r+0x16>
 8022dd0:	69ab      	ldr	r3, [r5, #24]
 8022dd2:	b913      	cbnz	r3, 8022dda <__swsetup_r+0x16>
 8022dd4:	4628      	mov	r0, r5
 8022dd6:	f000 f99b 	bl	8023110 <__sinit>
 8022dda:	4b2e      	ldr	r3, [pc, #184]	; (8022e94 <__swsetup_r+0xd0>)
 8022ddc:	429c      	cmp	r4, r3
 8022dde:	d10f      	bne.n	8022e00 <__swsetup_r+0x3c>
 8022de0:	686c      	ldr	r4, [r5, #4]
 8022de2:	89a3      	ldrh	r3, [r4, #12]
 8022de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022de8:	0719      	lsls	r1, r3, #28
 8022dea:	d42c      	bmi.n	8022e46 <__swsetup_r+0x82>
 8022dec:	06dd      	lsls	r5, r3, #27
 8022dee:	d411      	bmi.n	8022e14 <__swsetup_r+0x50>
 8022df0:	2309      	movs	r3, #9
 8022df2:	6033      	str	r3, [r6, #0]
 8022df4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022df8:	81a3      	strh	r3, [r4, #12]
 8022dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8022dfe:	e03e      	b.n	8022e7e <__swsetup_r+0xba>
 8022e00:	4b25      	ldr	r3, [pc, #148]	; (8022e98 <__swsetup_r+0xd4>)
 8022e02:	429c      	cmp	r4, r3
 8022e04:	d101      	bne.n	8022e0a <__swsetup_r+0x46>
 8022e06:	68ac      	ldr	r4, [r5, #8]
 8022e08:	e7eb      	b.n	8022de2 <__swsetup_r+0x1e>
 8022e0a:	4b24      	ldr	r3, [pc, #144]	; (8022e9c <__swsetup_r+0xd8>)
 8022e0c:	429c      	cmp	r4, r3
 8022e0e:	bf08      	it	eq
 8022e10:	68ec      	ldreq	r4, [r5, #12]
 8022e12:	e7e6      	b.n	8022de2 <__swsetup_r+0x1e>
 8022e14:	0758      	lsls	r0, r3, #29
 8022e16:	d512      	bpl.n	8022e3e <__swsetup_r+0x7a>
 8022e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022e1a:	b141      	cbz	r1, 8022e2e <__swsetup_r+0x6a>
 8022e1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022e20:	4299      	cmp	r1, r3
 8022e22:	d002      	beq.n	8022e2a <__swsetup_r+0x66>
 8022e24:	4630      	mov	r0, r6
 8022e26:	f7ff fcc3 	bl	80227b0 <_free_r>
 8022e2a:	2300      	movs	r3, #0
 8022e2c:	6363      	str	r3, [r4, #52]	; 0x34
 8022e2e:	89a3      	ldrh	r3, [r4, #12]
 8022e30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022e34:	81a3      	strh	r3, [r4, #12]
 8022e36:	2300      	movs	r3, #0
 8022e38:	6063      	str	r3, [r4, #4]
 8022e3a:	6923      	ldr	r3, [r4, #16]
 8022e3c:	6023      	str	r3, [r4, #0]
 8022e3e:	89a3      	ldrh	r3, [r4, #12]
 8022e40:	f043 0308 	orr.w	r3, r3, #8
 8022e44:	81a3      	strh	r3, [r4, #12]
 8022e46:	6923      	ldr	r3, [r4, #16]
 8022e48:	b94b      	cbnz	r3, 8022e5e <__swsetup_r+0x9a>
 8022e4a:	89a3      	ldrh	r3, [r4, #12]
 8022e4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022e54:	d003      	beq.n	8022e5e <__swsetup_r+0x9a>
 8022e56:	4621      	mov	r1, r4
 8022e58:	4630      	mov	r0, r6
 8022e5a:	f000 fa31 	bl	80232c0 <__smakebuf_r>
 8022e5e:	89a0      	ldrh	r0, [r4, #12]
 8022e60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022e64:	f010 0301 	ands.w	r3, r0, #1
 8022e68:	d00a      	beq.n	8022e80 <__swsetup_r+0xbc>
 8022e6a:	2300      	movs	r3, #0
 8022e6c:	60a3      	str	r3, [r4, #8]
 8022e6e:	6963      	ldr	r3, [r4, #20]
 8022e70:	425b      	negs	r3, r3
 8022e72:	61a3      	str	r3, [r4, #24]
 8022e74:	6923      	ldr	r3, [r4, #16]
 8022e76:	b943      	cbnz	r3, 8022e8a <__swsetup_r+0xc6>
 8022e78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022e7c:	d1ba      	bne.n	8022df4 <__swsetup_r+0x30>
 8022e7e:	bd70      	pop	{r4, r5, r6, pc}
 8022e80:	0781      	lsls	r1, r0, #30
 8022e82:	bf58      	it	pl
 8022e84:	6963      	ldrpl	r3, [r4, #20]
 8022e86:	60a3      	str	r3, [r4, #8]
 8022e88:	e7f4      	b.n	8022e74 <__swsetup_r+0xb0>
 8022e8a:	2000      	movs	r0, #0
 8022e8c:	e7f7      	b.n	8022e7e <__swsetup_r+0xba>
 8022e8e:	bf00      	nop
 8022e90:	20000140 	.word	0x20000140
 8022e94:	080293ec 	.word	0x080293ec
 8022e98:	0802940c 	.word	0x0802940c
 8022e9c:	080293cc 	.word	0x080293cc

08022ea0 <__assert_func>:
 8022ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022ea2:	4614      	mov	r4, r2
 8022ea4:	461a      	mov	r2, r3
 8022ea6:	4b09      	ldr	r3, [pc, #36]	; (8022ecc <__assert_func+0x2c>)
 8022ea8:	681b      	ldr	r3, [r3, #0]
 8022eaa:	4605      	mov	r5, r0
 8022eac:	68d8      	ldr	r0, [r3, #12]
 8022eae:	b14c      	cbz	r4, 8022ec4 <__assert_func+0x24>
 8022eb0:	4b07      	ldr	r3, [pc, #28]	; (8022ed0 <__assert_func+0x30>)
 8022eb2:	9100      	str	r1, [sp, #0]
 8022eb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022eb8:	4906      	ldr	r1, [pc, #24]	; (8022ed4 <__assert_func+0x34>)
 8022eba:	462b      	mov	r3, r5
 8022ebc:	f000 f9a6 	bl	802320c <fiprintf>
 8022ec0:	f000 ff32 	bl	8023d28 <abort>
 8022ec4:	4b04      	ldr	r3, [pc, #16]	; (8022ed8 <__assert_func+0x38>)
 8022ec6:	461c      	mov	r4, r3
 8022ec8:	e7f3      	b.n	8022eb2 <__assert_func+0x12>
 8022eca:	bf00      	nop
 8022ecc:	20000140 	.word	0x20000140
 8022ed0:	0802938e 	.word	0x0802938e
 8022ed4:	0802939b 	.word	0x0802939b
 8022ed8:	080293c9 	.word	0x080293c9

08022edc <__sflush_r>:
 8022edc:	898a      	ldrh	r2, [r1, #12]
 8022ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ee2:	4605      	mov	r5, r0
 8022ee4:	0710      	lsls	r0, r2, #28
 8022ee6:	460c      	mov	r4, r1
 8022ee8:	d458      	bmi.n	8022f9c <__sflush_r+0xc0>
 8022eea:	684b      	ldr	r3, [r1, #4]
 8022eec:	2b00      	cmp	r3, #0
 8022eee:	dc05      	bgt.n	8022efc <__sflush_r+0x20>
 8022ef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022ef2:	2b00      	cmp	r3, #0
 8022ef4:	dc02      	bgt.n	8022efc <__sflush_r+0x20>
 8022ef6:	2000      	movs	r0, #0
 8022ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022efc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022efe:	2e00      	cmp	r6, #0
 8022f00:	d0f9      	beq.n	8022ef6 <__sflush_r+0x1a>
 8022f02:	2300      	movs	r3, #0
 8022f04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022f08:	682f      	ldr	r7, [r5, #0]
 8022f0a:	602b      	str	r3, [r5, #0]
 8022f0c:	d032      	beq.n	8022f74 <__sflush_r+0x98>
 8022f0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022f10:	89a3      	ldrh	r3, [r4, #12]
 8022f12:	075a      	lsls	r2, r3, #29
 8022f14:	d505      	bpl.n	8022f22 <__sflush_r+0x46>
 8022f16:	6863      	ldr	r3, [r4, #4]
 8022f18:	1ac0      	subs	r0, r0, r3
 8022f1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022f1c:	b10b      	cbz	r3, 8022f22 <__sflush_r+0x46>
 8022f1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022f20:	1ac0      	subs	r0, r0, r3
 8022f22:	2300      	movs	r3, #0
 8022f24:	4602      	mov	r2, r0
 8022f26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022f28:	6a21      	ldr	r1, [r4, #32]
 8022f2a:	4628      	mov	r0, r5
 8022f2c:	47b0      	blx	r6
 8022f2e:	1c43      	adds	r3, r0, #1
 8022f30:	89a3      	ldrh	r3, [r4, #12]
 8022f32:	d106      	bne.n	8022f42 <__sflush_r+0x66>
 8022f34:	6829      	ldr	r1, [r5, #0]
 8022f36:	291d      	cmp	r1, #29
 8022f38:	d82c      	bhi.n	8022f94 <__sflush_r+0xb8>
 8022f3a:	4a2a      	ldr	r2, [pc, #168]	; (8022fe4 <__sflush_r+0x108>)
 8022f3c:	40ca      	lsrs	r2, r1
 8022f3e:	07d6      	lsls	r6, r2, #31
 8022f40:	d528      	bpl.n	8022f94 <__sflush_r+0xb8>
 8022f42:	2200      	movs	r2, #0
 8022f44:	6062      	str	r2, [r4, #4]
 8022f46:	04d9      	lsls	r1, r3, #19
 8022f48:	6922      	ldr	r2, [r4, #16]
 8022f4a:	6022      	str	r2, [r4, #0]
 8022f4c:	d504      	bpl.n	8022f58 <__sflush_r+0x7c>
 8022f4e:	1c42      	adds	r2, r0, #1
 8022f50:	d101      	bne.n	8022f56 <__sflush_r+0x7a>
 8022f52:	682b      	ldr	r3, [r5, #0]
 8022f54:	b903      	cbnz	r3, 8022f58 <__sflush_r+0x7c>
 8022f56:	6560      	str	r0, [r4, #84]	; 0x54
 8022f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022f5a:	602f      	str	r7, [r5, #0]
 8022f5c:	2900      	cmp	r1, #0
 8022f5e:	d0ca      	beq.n	8022ef6 <__sflush_r+0x1a>
 8022f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022f64:	4299      	cmp	r1, r3
 8022f66:	d002      	beq.n	8022f6e <__sflush_r+0x92>
 8022f68:	4628      	mov	r0, r5
 8022f6a:	f7ff fc21 	bl	80227b0 <_free_r>
 8022f6e:	2000      	movs	r0, #0
 8022f70:	6360      	str	r0, [r4, #52]	; 0x34
 8022f72:	e7c1      	b.n	8022ef8 <__sflush_r+0x1c>
 8022f74:	6a21      	ldr	r1, [r4, #32]
 8022f76:	2301      	movs	r3, #1
 8022f78:	4628      	mov	r0, r5
 8022f7a:	47b0      	blx	r6
 8022f7c:	1c41      	adds	r1, r0, #1
 8022f7e:	d1c7      	bne.n	8022f10 <__sflush_r+0x34>
 8022f80:	682b      	ldr	r3, [r5, #0]
 8022f82:	2b00      	cmp	r3, #0
 8022f84:	d0c4      	beq.n	8022f10 <__sflush_r+0x34>
 8022f86:	2b1d      	cmp	r3, #29
 8022f88:	d001      	beq.n	8022f8e <__sflush_r+0xb2>
 8022f8a:	2b16      	cmp	r3, #22
 8022f8c:	d101      	bne.n	8022f92 <__sflush_r+0xb6>
 8022f8e:	602f      	str	r7, [r5, #0]
 8022f90:	e7b1      	b.n	8022ef6 <__sflush_r+0x1a>
 8022f92:	89a3      	ldrh	r3, [r4, #12]
 8022f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f98:	81a3      	strh	r3, [r4, #12]
 8022f9a:	e7ad      	b.n	8022ef8 <__sflush_r+0x1c>
 8022f9c:	690f      	ldr	r7, [r1, #16]
 8022f9e:	2f00      	cmp	r7, #0
 8022fa0:	d0a9      	beq.n	8022ef6 <__sflush_r+0x1a>
 8022fa2:	0793      	lsls	r3, r2, #30
 8022fa4:	680e      	ldr	r6, [r1, #0]
 8022fa6:	bf08      	it	eq
 8022fa8:	694b      	ldreq	r3, [r1, #20]
 8022faa:	600f      	str	r7, [r1, #0]
 8022fac:	bf18      	it	ne
 8022fae:	2300      	movne	r3, #0
 8022fb0:	eba6 0807 	sub.w	r8, r6, r7
 8022fb4:	608b      	str	r3, [r1, #8]
 8022fb6:	f1b8 0f00 	cmp.w	r8, #0
 8022fba:	dd9c      	ble.n	8022ef6 <__sflush_r+0x1a>
 8022fbc:	6a21      	ldr	r1, [r4, #32]
 8022fbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022fc0:	4643      	mov	r3, r8
 8022fc2:	463a      	mov	r2, r7
 8022fc4:	4628      	mov	r0, r5
 8022fc6:	47b0      	blx	r6
 8022fc8:	2800      	cmp	r0, #0
 8022fca:	dc06      	bgt.n	8022fda <__sflush_r+0xfe>
 8022fcc:	89a3      	ldrh	r3, [r4, #12]
 8022fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022fd2:	81a3      	strh	r3, [r4, #12]
 8022fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8022fd8:	e78e      	b.n	8022ef8 <__sflush_r+0x1c>
 8022fda:	4407      	add	r7, r0
 8022fdc:	eba8 0800 	sub.w	r8, r8, r0
 8022fe0:	e7e9      	b.n	8022fb6 <__sflush_r+0xda>
 8022fe2:	bf00      	nop
 8022fe4:	20400001 	.word	0x20400001

08022fe8 <_fflush_r>:
 8022fe8:	b538      	push	{r3, r4, r5, lr}
 8022fea:	690b      	ldr	r3, [r1, #16]
 8022fec:	4605      	mov	r5, r0
 8022fee:	460c      	mov	r4, r1
 8022ff0:	b913      	cbnz	r3, 8022ff8 <_fflush_r+0x10>
 8022ff2:	2500      	movs	r5, #0
 8022ff4:	4628      	mov	r0, r5
 8022ff6:	bd38      	pop	{r3, r4, r5, pc}
 8022ff8:	b118      	cbz	r0, 8023002 <_fflush_r+0x1a>
 8022ffa:	6983      	ldr	r3, [r0, #24]
 8022ffc:	b90b      	cbnz	r3, 8023002 <_fflush_r+0x1a>
 8022ffe:	f000 f887 	bl	8023110 <__sinit>
 8023002:	4b14      	ldr	r3, [pc, #80]	; (8023054 <_fflush_r+0x6c>)
 8023004:	429c      	cmp	r4, r3
 8023006:	d11b      	bne.n	8023040 <_fflush_r+0x58>
 8023008:	686c      	ldr	r4, [r5, #4]
 802300a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802300e:	2b00      	cmp	r3, #0
 8023010:	d0ef      	beq.n	8022ff2 <_fflush_r+0xa>
 8023012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023014:	07d0      	lsls	r0, r2, #31
 8023016:	d404      	bmi.n	8023022 <_fflush_r+0x3a>
 8023018:	0599      	lsls	r1, r3, #22
 802301a:	d402      	bmi.n	8023022 <_fflush_r+0x3a>
 802301c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802301e:	f000 f927 	bl	8023270 <__retarget_lock_acquire_recursive>
 8023022:	4628      	mov	r0, r5
 8023024:	4621      	mov	r1, r4
 8023026:	f7ff ff59 	bl	8022edc <__sflush_r>
 802302a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802302c:	07da      	lsls	r2, r3, #31
 802302e:	4605      	mov	r5, r0
 8023030:	d4e0      	bmi.n	8022ff4 <_fflush_r+0xc>
 8023032:	89a3      	ldrh	r3, [r4, #12]
 8023034:	059b      	lsls	r3, r3, #22
 8023036:	d4dd      	bmi.n	8022ff4 <_fflush_r+0xc>
 8023038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802303a:	f000 f91a 	bl	8023272 <__retarget_lock_release_recursive>
 802303e:	e7d9      	b.n	8022ff4 <_fflush_r+0xc>
 8023040:	4b05      	ldr	r3, [pc, #20]	; (8023058 <_fflush_r+0x70>)
 8023042:	429c      	cmp	r4, r3
 8023044:	d101      	bne.n	802304a <_fflush_r+0x62>
 8023046:	68ac      	ldr	r4, [r5, #8]
 8023048:	e7df      	b.n	802300a <_fflush_r+0x22>
 802304a:	4b04      	ldr	r3, [pc, #16]	; (802305c <_fflush_r+0x74>)
 802304c:	429c      	cmp	r4, r3
 802304e:	bf08      	it	eq
 8023050:	68ec      	ldreq	r4, [r5, #12]
 8023052:	e7da      	b.n	802300a <_fflush_r+0x22>
 8023054:	080293ec 	.word	0x080293ec
 8023058:	0802940c 	.word	0x0802940c
 802305c:	080293cc 	.word	0x080293cc

08023060 <std>:
 8023060:	2300      	movs	r3, #0
 8023062:	b510      	push	{r4, lr}
 8023064:	4604      	mov	r4, r0
 8023066:	e9c0 3300 	strd	r3, r3, [r0]
 802306a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802306e:	6083      	str	r3, [r0, #8]
 8023070:	8181      	strh	r1, [r0, #12]
 8023072:	6643      	str	r3, [r0, #100]	; 0x64
 8023074:	81c2      	strh	r2, [r0, #14]
 8023076:	6183      	str	r3, [r0, #24]
 8023078:	4619      	mov	r1, r3
 802307a:	2208      	movs	r2, #8
 802307c:	305c      	adds	r0, #92	; 0x5c
 802307e:	f7ff fb8f 	bl	80227a0 <memset>
 8023082:	4b05      	ldr	r3, [pc, #20]	; (8023098 <std+0x38>)
 8023084:	6263      	str	r3, [r4, #36]	; 0x24
 8023086:	4b05      	ldr	r3, [pc, #20]	; (802309c <std+0x3c>)
 8023088:	62a3      	str	r3, [r4, #40]	; 0x28
 802308a:	4b05      	ldr	r3, [pc, #20]	; (80230a0 <std+0x40>)
 802308c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802308e:	4b05      	ldr	r3, [pc, #20]	; (80230a4 <std+0x44>)
 8023090:	6224      	str	r4, [r4, #32]
 8023092:	6323      	str	r3, [r4, #48]	; 0x30
 8023094:	bd10      	pop	{r4, pc}
 8023096:	bf00      	nop
 8023098:	08023c7d 	.word	0x08023c7d
 802309c:	08023c9f 	.word	0x08023c9f
 80230a0:	08023cd7 	.word	0x08023cd7
 80230a4:	08023cfb 	.word	0x08023cfb

080230a8 <_cleanup_r>:
 80230a8:	4901      	ldr	r1, [pc, #4]	; (80230b0 <_cleanup_r+0x8>)
 80230aa:	f000 b8c1 	b.w	8023230 <_fwalk_reent>
 80230ae:	bf00      	nop
 80230b0:	08022fe9 	.word	0x08022fe9

080230b4 <__sfmoreglue>:
 80230b4:	b570      	push	{r4, r5, r6, lr}
 80230b6:	2268      	movs	r2, #104	; 0x68
 80230b8:	1e4d      	subs	r5, r1, #1
 80230ba:	4355      	muls	r5, r2
 80230bc:	460e      	mov	r6, r1
 80230be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80230c2:	f7ff fbe1 	bl	8022888 <_malloc_r>
 80230c6:	4604      	mov	r4, r0
 80230c8:	b140      	cbz	r0, 80230dc <__sfmoreglue+0x28>
 80230ca:	2100      	movs	r1, #0
 80230cc:	e9c0 1600 	strd	r1, r6, [r0]
 80230d0:	300c      	adds	r0, #12
 80230d2:	60a0      	str	r0, [r4, #8]
 80230d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80230d8:	f7ff fb62 	bl	80227a0 <memset>
 80230dc:	4620      	mov	r0, r4
 80230de:	bd70      	pop	{r4, r5, r6, pc}

080230e0 <__sfp_lock_acquire>:
 80230e0:	4801      	ldr	r0, [pc, #4]	; (80230e8 <__sfp_lock_acquire+0x8>)
 80230e2:	f000 b8c5 	b.w	8023270 <__retarget_lock_acquire_recursive>
 80230e6:	bf00      	nop
 80230e8:	20014345 	.word	0x20014345

080230ec <__sfp_lock_release>:
 80230ec:	4801      	ldr	r0, [pc, #4]	; (80230f4 <__sfp_lock_release+0x8>)
 80230ee:	f000 b8c0 	b.w	8023272 <__retarget_lock_release_recursive>
 80230f2:	bf00      	nop
 80230f4:	20014345 	.word	0x20014345

080230f8 <__sinit_lock_acquire>:
 80230f8:	4801      	ldr	r0, [pc, #4]	; (8023100 <__sinit_lock_acquire+0x8>)
 80230fa:	f000 b8b9 	b.w	8023270 <__retarget_lock_acquire_recursive>
 80230fe:	bf00      	nop
 8023100:	20014346 	.word	0x20014346

08023104 <__sinit_lock_release>:
 8023104:	4801      	ldr	r0, [pc, #4]	; (802310c <__sinit_lock_release+0x8>)
 8023106:	f000 b8b4 	b.w	8023272 <__retarget_lock_release_recursive>
 802310a:	bf00      	nop
 802310c:	20014346 	.word	0x20014346

08023110 <__sinit>:
 8023110:	b510      	push	{r4, lr}
 8023112:	4604      	mov	r4, r0
 8023114:	f7ff fff0 	bl	80230f8 <__sinit_lock_acquire>
 8023118:	69a3      	ldr	r3, [r4, #24]
 802311a:	b11b      	cbz	r3, 8023124 <__sinit+0x14>
 802311c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023120:	f7ff bff0 	b.w	8023104 <__sinit_lock_release>
 8023124:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023128:	6523      	str	r3, [r4, #80]	; 0x50
 802312a:	4b13      	ldr	r3, [pc, #76]	; (8023178 <__sinit+0x68>)
 802312c:	4a13      	ldr	r2, [pc, #76]	; (802317c <__sinit+0x6c>)
 802312e:	681b      	ldr	r3, [r3, #0]
 8023130:	62a2      	str	r2, [r4, #40]	; 0x28
 8023132:	42a3      	cmp	r3, r4
 8023134:	bf04      	itt	eq
 8023136:	2301      	moveq	r3, #1
 8023138:	61a3      	streq	r3, [r4, #24]
 802313a:	4620      	mov	r0, r4
 802313c:	f000 f820 	bl	8023180 <__sfp>
 8023140:	6060      	str	r0, [r4, #4]
 8023142:	4620      	mov	r0, r4
 8023144:	f000 f81c 	bl	8023180 <__sfp>
 8023148:	60a0      	str	r0, [r4, #8]
 802314a:	4620      	mov	r0, r4
 802314c:	f000 f818 	bl	8023180 <__sfp>
 8023150:	2200      	movs	r2, #0
 8023152:	60e0      	str	r0, [r4, #12]
 8023154:	2104      	movs	r1, #4
 8023156:	6860      	ldr	r0, [r4, #4]
 8023158:	f7ff ff82 	bl	8023060 <std>
 802315c:	68a0      	ldr	r0, [r4, #8]
 802315e:	2201      	movs	r2, #1
 8023160:	2109      	movs	r1, #9
 8023162:	f7ff ff7d 	bl	8023060 <std>
 8023166:	68e0      	ldr	r0, [r4, #12]
 8023168:	2202      	movs	r2, #2
 802316a:	2112      	movs	r1, #18
 802316c:	f7ff ff78 	bl	8023060 <std>
 8023170:	2301      	movs	r3, #1
 8023172:	61a3      	str	r3, [r4, #24]
 8023174:	e7d2      	b.n	802311c <__sinit+0xc>
 8023176:	bf00      	nop
 8023178:	08029318 	.word	0x08029318
 802317c:	080230a9 	.word	0x080230a9

08023180 <__sfp>:
 8023180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023182:	4607      	mov	r7, r0
 8023184:	f7ff ffac 	bl	80230e0 <__sfp_lock_acquire>
 8023188:	4b1e      	ldr	r3, [pc, #120]	; (8023204 <__sfp+0x84>)
 802318a:	681e      	ldr	r6, [r3, #0]
 802318c:	69b3      	ldr	r3, [r6, #24]
 802318e:	b913      	cbnz	r3, 8023196 <__sfp+0x16>
 8023190:	4630      	mov	r0, r6
 8023192:	f7ff ffbd 	bl	8023110 <__sinit>
 8023196:	3648      	adds	r6, #72	; 0x48
 8023198:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802319c:	3b01      	subs	r3, #1
 802319e:	d503      	bpl.n	80231a8 <__sfp+0x28>
 80231a0:	6833      	ldr	r3, [r6, #0]
 80231a2:	b30b      	cbz	r3, 80231e8 <__sfp+0x68>
 80231a4:	6836      	ldr	r6, [r6, #0]
 80231a6:	e7f7      	b.n	8023198 <__sfp+0x18>
 80231a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80231ac:	b9d5      	cbnz	r5, 80231e4 <__sfp+0x64>
 80231ae:	4b16      	ldr	r3, [pc, #88]	; (8023208 <__sfp+0x88>)
 80231b0:	60e3      	str	r3, [r4, #12]
 80231b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80231b6:	6665      	str	r5, [r4, #100]	; 0x64
 80231b8:	f000 f859 	bl	802326e <__retarget_lock_init_recursive>
 80231bc:	f7ff ff96 	bl	80230ec <__sfp_lock_release>
 80231c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80231c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80231c8:	6025      	str	r5, [r4, #0]
 80231ca:	61a5      	str	r5, [r4, #24]
 80231cc:	2208      	movs	r2, #8
 80231ce:	4629      	mov	r1, r5
 80231d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80231d4:	f7ff fae4 	bl	80227a0 <memset>
 80231d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80231dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80231e0:	4620      	mov	r0, r4
 80231e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80231e4:	3468      	adds	r4, #104	; 0x68
 80231e6:	e7d9      	b.n	802319c <__sfp+0x1c>
 80231e8:	2104      	movs	r1, #4
 80231ea:	4638      	mov	r0, r7
 80231ec:	f7ff ff62 	bl	80230b4 <__sfmoreglue>
 80231f0:	4604      	mov	r4, r0
 80231f2:	6030      	str	r0, [r6, #0]
 80231f4:	2800      	cmp	r0, #0
 80231f6:	d1d5      	bne.n	80231a4 <__sfp+0x24>
 80231f8:	f7ff ff78 	bl	80230ec <__sfp_lock_release>
 80231fc:	230c      	movs	r3, #12
 80231fe:	603b      	str	r3, [r7, #0]
 8023200:	e7ee      	b.n	80231e0 <__sfp+0x60>
 8023202:	bf00      	nop
 8023204:	08029318 	.word	0x08029318
 8023208:	ffff0001 	.word	0xffff0001

0802320c <fiprintf>:
 802320c:	b40e      	push	{r1, r2, r3}
 802320e:	b503      	push	{r0, r1, lr}
 8023210:	4601      	mov	r1, r0
 8023212:	ab03      	add	r3, sp, #12
 8023214:	4805      	ldr	r0, [pc, #20]	; (802322c <fiprintf+0x20>)
 8023216:	f853 2b04 	ldr.w	r2, [r3], #4
 802321a:	6800      	ldr	r0, [r0, #0]
 802321c:	9301      	str	r3, [sp, #4]
 802321e:	f000 fa21 	bl	8023664 <_vfiprintf_r>
 8023222:	b002      	add	sp, #8
 8023224:	f85d eb04 	ldr.w	lr, [sp], #4
 8023228:	b003      	add	sp, #12
 802322a:	4770      	bx	lr
 802322c:	20000140 	.word	0x20000140

08023230 <_fwalk_reent>:
 8023230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023234:	4606      	mov	r6, r0
 8023236:	4688      	mov	r8, r1
 8023238:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802323c:	2700      	movs	r7, #0
 802323e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023242:	f1b9 0901 	subs.w	r9, r9, #1
 8023246:	d505      	bpl.n	8023254 <_fwalk_reent+0x24>
 8023248:	6824      	ldr	r4, [r4, #0]
 802324a:	2c00      	cmp	r4, #0
 802324c:	d1f7      	bne.n	802323e <_fwalk_reent+0xe>
 802324e:	4638      	mov	r0, r7
 8023250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023254:	89ab      	ldrh	r3, [r5, #12]
 8023256:	2b01      	cmp	r3, #1
 8023258:	d907      	bls.n	802326a <_fwalk_reent+0x3a>
 802325a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802325e:	3301      	adds	r3, #1
 8023260:	d003      	beq.n	802326a <_fwalk_reent+0x3a>
 8023262:	4629      	mov	r1, r5
 8023264:	4630      	mov	r0, r6
 8023266:	47c0      	blx	r8
 8023268:	4307      	orrs	r7, r0
 802326a:	3568      	adds	r5, #104	; 0x68
 802326c:	e7e9      	b.n	8023242 <_fwalk_reent+0x12>

0802326e <__retarget_lock_init_recursive>:
 802326e:	4770      	bx	lr

08023270 <__retarget_lock_acquire_recursive>:
 8023270:	4770      	bx	lr

08023272 <__retarget_lock_release_recursive>:
 8023272:	4770      	bx	lr

08023274 <__swhatbuf_r>:
 8023274:	b570      	push	{r4, r5, r6, lr}
 8023276:	460e      	mov	r6, r1
 8023278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802327c:	2900      	cmp	r1, #0
 802327e:	b096      	sub	sp, #88	; 0x58
 8023280:	4614      	mov	r4, r2
 8023282:	461d      	mov	r5, r3
 8023284:	da08      	bge.n	8023298 <__swhatbuf_r+0x24>
 8023286:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802328a:	2200      	movs	r2, #0
 802328c:	602a      	str	r2, [r5, #0]
 802328e:	061a      	lsls	r2, r3, #24
 8023290:	d410      	bmi.n	80232b4 <__swhatbuf_r+0x40>
 8023292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023296:	e00e      	b.n	80232b6 <__swhatbuf_r+0x42>
 8023298:	466a      	mov	r2, sp
 802329a:	f000 fd5d 	bl	8023d58 <_fstat_r>
 802329e:	2800      	cmp	r0, #0
 80232a0:	dbf1      	blt.n	8023286 <__swhatbuf_r+0x12>
 80232a2:	9a01      	ldr	r2, [sp, #4]
 80232a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80232a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80232ac:	425a      	negs	r2, r3
 80232ae:	415a      	adcs	r2, r3
 80232b0:	602a      	str	r2, [r5, #0]
 80232b2:	e7ee      	b.n	8023292 <__swhatbuf_r+0x1e>
 80232b4:	2340      	movs	r3, #64	; 0x40
 80232b6:	2000      	movs	r0, #0
 80232b8:	6023      	str	r3, [r4, #0]
 80232ba:	b016      	add	sp, #88	; 0x58
 80232bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080232c0 <__smakebuf_r>:
 80232c0:	898b      	ldrh	r3, [r1, #12]
 80232c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80232c4:	079d      	lsls	r5, r3, #30
 80232c6:	4606      	mov	r6, r0
 80232c8:	460c      	mov	r4, r1
 80232ca:	d507      	bpl.n	80232dc <__smakebuf_r+0x1c>
 80232cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80232d0:	6023      	str	r3, [r4, #0]
 80232d2:	6123      	str	r3, [r4, #16]
 80232d4:	2301      	movs	r3, #1
 80232d6:	6163      	str	r3, [r4, #20]
 80232d8:	b002      	add	sp, #8
 80232da:	bd70      	pop	{r4, r5, r6, pc}
 80232dc:	ab01      	add	r3, sp, #4
 80232de:	466a      	mov	r2, sp
 80232e0:	f7ff ffc8 	bl	8023274 <__swhatbuf_r>
 80232e4:	9900      	ldr	r1, [sp, #0]
 80232e6:	4605      	mov	r5, r0
 80232e8:	4630      	mov	r0, r6
 80232ea:	f7ff facd 	bl	8022888 <_malloc_r>
 80232ee:	b948      	cbnz	r0, 8023304 <__smakebuf_r+0x44>
 80232f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80232f4:	059a      	lsls	r2, r3, #22
 80232f6:	d4ef      	bmi.n	80232d8 <__smakebuf_r+0x18>
 80232f8:	f023 0303 	bic.w	r3, r3, #3
 80232fc:	f043 0302 	orr.w	r3, r3, #2
 8023300:	81a3      	strh	r3, [r4, #12]
 8023302:	e7e3      	b.n	80232cc <__smakebuf_r+0xc>
 8023304:	4b0d      	ldr	r3, [pc, #52]	; (802333c <__smakebuf_r+0x7c>)
 8023306:	62b3      	str	r3, [r6, #40]	; 0x28
 8023308:	89a3      	ldrh	r3, [r4, #12]
 802330a:	6020      	str	r0, [r4, #0]
 802330c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023310:	81a3      	strh	r3, [r4, #12]
 8023312:	9b00      	ldr	r3, [sp, #0]
 8023314:	6163      	str	r3, [r4, #20]
 8023316:	9b01      	ldr	r3, [sp, #4]
 8023318:	6120      	str	r0, [r4, #16]
 802331a:	b15b      	cbz	r3, 8023334 <__smakebuf_r+0x74>
 802331c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023320:	4630      	mov	r0, r6
 8023322:	f000 fd2b 	bl	8023d7c <_isatty_r>
 8023326:	b128      	cbz	r0, 8023334 <__smakebuf_r+0x74>
 8023328:	89a3      	ldrh	r3, [r4, #12]
 802332a:	f023 0303 	bic.w	r3, r3, #3
 802332e:	f043 0301 	orr.w	r3, r3, #1
 8023332:	81a3      	strh	r3, [r4, #12]
 8023334:	89a0      	ldrh	r0, [r4, #12]
 8023336:	4305      	orrs	r5, r0
 8023338:	81a5      	strh	r5, [r4, #12]
 802333a:	e7cd      	b.n	80232d8 <__smakebuf_r+0x18>
 802333c:	080230a9 	.word	0x080230a9

08023340 <__malloc_lock>:
 8023340:	4801      	ldr	r0, [pc, #4]	; (8023348 <__malloc_lock+0x8>)
 8023342:	f7ff bf95 	b.w	8023270 <__retarget_lock_acquire_recursive>
 8023346:	bf00      	nop
 8023348:	20014344 	.word	0x20014344

0802334c <__malloc_unlock>:
 802334c:	4801      	ldr	r0, [pc, #4]	; (8023354 <__malloc_unlock+0x8>)
 802334e:	f7ff bf90 	b.w	8023272 <__retarget_lock_release_recursive>
 8023352:	bf00      	nop
 8023354:	20014344 	.word	0x20014344

08023358 <__ssputs_r>:
 8023358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802335c:	688e      	ldr	r6, [r1, #8]
 802335e:	429e      	cmp	r6, r3
 8023360:	4682      	mov	sl, r0
 8023362:	460c      	mov	r4, r1
 8023364:	4690      	mov	r8, r2
 8023366:	461f      	mov	r7, r3
 8023368:	d838      	bhi.n	80233dc <__ssputs_r+0x84>
 802336a:	898a      	ldrh	r2, [r1, #12]
 802336c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023370:	d032      	beq.n	80233d8 <__ssputs_r+0x80>
 8023372:	6825      	ldr	r5, [r4, #0]
 8023374:	6909      	ldr	r1, [r1, #16]
 8023376:	eba5 0901 	sub.w	r9, r5, r1
 802337a:	6965      	ldr	r5, [r4, #20]
 802337c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023380:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023384:	3301      	adds	r3, #1
 8023386:	444b      	add	r3, r9
 8023388:	106d      	asrs	r5, r5, #1
 802338a:	429d      	cmp	r5, r3
 802338c:	bf38      	it	cc
 802338e:	461d      	movcc	r5, r3
 8023390:	0553      	lsls	r3, r2, #21
 8023392:	d531      	bpl.n	80233f8 <__ssputs_r+0xa0>
 8023394:	4629      	mov	r1, r5
 8023396:	f7ff fa77 	bl	8022888 <_malloc_r>
 802339a:	4606      	mov	r6, r0
 802339c:	b950      	cbnz	r0, 80233b4 <__ssputs_r+0x5c>
 802339e:	230c      	movs	r3, #12
 80233a0:	f8ca 3000 	str.w	r3, [sl]
 80233a4:	89a3      	ldrh	r3, [r4, #12]
 80233a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80233aa:	81a3      	strh	r3, [r4, #12]
 80233ac:	f04f 30ff 	mov.w	r0, #4294967295
 80233b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80233b4:	6921      	ldr	r1, [r4, #16]
 80233b6:	464a      	mov	r2, r9
 80233b8:	f7ff f9ca 	bl	8022750 <memcpy>
 80233bc:	89a3      	ldrh	r3, [r4, #12]
 80233be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80233c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80233c6:	81a3      	strh	r3, [r4, #12]
 80233c8:	6126      	str	r6, [r4, #16]
 80233ca:	6165      	str	r5, [r4, #20]
 80233cc:	444e      	add	r6, r9
 80233ce:	eba5 0509 	sub.w	r5, r5, r9
 80233d2:	6026      	str	r6, [r4, #0]
 80233d4:	60a5      	str	r5, [r4, #8]
 80233d6:	463e      	mov	r6, r7
 80233d8:	42be      	cmp	r6, r7
 80233da:	d900      	bls.n	80233de <__ssputs_r+0x86>
 80233dc:	463e      	mov	r6, r7
 80233de:	6820      	ldr	r0, [r4, #0]
 80233e0:	4632      	mov	r2, r6
 80233e2:	4641      	mov	r1, r8
 80233e4:	f7ff f9c2 	bl	802276c <memmove>
 80233e8:	68a3      	ldr	r3, [r4, #8]
 80233ea:	1b9b      	subs	r3, r3, r6
 80233ec:	60a3      	str	r3, [r4, #8]
 80233ee:	6823      	ldr	r3, [r4, #0]
 80233f0:	4433      	add	r3, r6
 80233f2:	6023      	str	r3, [r4, #0]
 80233f4:	2000      	movs	r0, #0
 80233f6:	e7db      	b.n	80233b0 <__ssputs_r+0x58>
 80233f8:	462a      	mov	r2, r5
 80233fa:	f000 fce1 	bl	8023dc0 <_realloc_r>
 80233fe:	4606      	mov	r6, r0
 8023400:	2800      	cmp	r0, #0
 8023402:	d1e1      	bne.n	80233c8 <__ssputs_r+0x70>
 8023404:	6921      	ldr	r1, [r4, #16]
 8023406:	4650      	mov	r0, sl
 8023408:	f7ff f9d2 	bl	80227b0 <_free_r>
 802340c:	e7c7      	b.n	802339e <__ssputs_r+0x46>
	...

08023410 <_svfiprintf_r>:
 8023410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023414:	4698      	mov	r8, r3
 8023416:	898b      	ldrh	r3, [r1, #12]
 8023418:	061b      	lsls	r3, r3, #24
 802341a:	b09d      	sub	sp, #116	; 0x74
 802341c:	4607      	mov	r7, r0
 802341e:	460d      	mov	r5, r1
 8023420:	4614      	mov	r4, r2
 8023422:	d50e      	bpl.n	8023442 <_svfiprintf_r+0x32>
 8023424:	690b      	ldr	r3, [r1, #16]
 8023426:	b963      	cbnz	r3, 8023442 <_svfiprintf_r+0x32>
 8023428:	2140      	movs	r1, #64	; 0x40
 802342a:	f7ff fa2d 	bl	8022888 <_malloc_r>
 802342e:	6028      	str	r0, [r5, #0]
 8023430:	6128      	str	r0, [r5, #16]
 8023432:	b920      	cbnz	r0, 802343e <_svfiprintf_r+0x2e>
 8023434:	230c      	movs	r3, #12
 8023436:	603b      	str	r3, [r7, #0]
 8023438:	f04f 30ff 	mov.w	r0, #4294967295
 802343c:	e0d1      	b.n	80235e2 <_svfiprintf_r+0x1d2>
 802343e:	2340      	movs	r3, #64	; 0x40
 8023440:	616b      	str	r3, [r5, #20]
 8023442:	2300      	movs	r3, #0
 8023444:	9309      	str	r3, [sp, #36]	; 0x24
 8023446:	2320      	movs	r3, #32
 8023448:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802344c:	f8cd 800c 	str.w	r8, [sp, #12]
 8023450:	2330      	movs	r3, #48	; 0x30
 8023452:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80235fc <_svfiprintf_r+0x1ec>
 8023456:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802345a:	f04f 0901 	mov.w	r9, #1
 802345e:	4623      	mov	r3, r4
 8023460:	469a      	mov	sl, r3
 8023462:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023466:	b10a      	cbz	r2, 802346c <_svfiprintf_r+0x5c>
 8023468:	2a25      	cmp	r2, #37	; 0x25
 802346a:	d1f9      	bne.n	8023460 <_svfiprintf_r+0x50>
 802346c:	ebba 0b04 	subs.w	fp, sl, r4
 8023470:	d00b      	beq.n	802348a <_svfiprintf_r+0x7a>
 8023472:	465b      	mov	r3, fp
 8023474:	4622      	mov	r2, r4
 8023476:	4629      	mov	r1, r5
 8023478:	4638      	mov	r0, r7
 802347a:	f7ff ff6d 	bl	8023358 <__ssputs_r>
 802347e:	3001      	adds	r0, #1
 8023480:	f000 80aa 	beq.w	80235d8 <_svfiprintf_r+0x1c8>
 8023484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023486:	445a      	add	r2, fp
 8023488:	9209      	str	r2, [sp, #36]	; 0x24
 802348a:	f89a 3000 	ldrb.w	r3, [sl]
 802348e:	2b00      	cmp	r3, #0
 8023490:	f000 80a2 	beq.w	80235d8 <_svfiprintf_r+0x1c8>
 8023494:	2300      	movs	r3, #0
 8023496:	f04f 32ff 	mov.w	r2, #4294967295
 802349a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802349e:	f10a 0a01 	add.w	sl, sl, #1
 80234a2:	9304      	str	r3, [sp, #16]
 80234a4:	9307      	str	r3, [sp, #28]
 80234a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80234aa:	931a      	str	r3, [sp, #104]	; 0x68
 80234ac:	4654      	mov	r4, sl
 80234ae:	2205      	movs	r2, #5
 80234b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80234b4:	4851      	ldr	r0, [pc, #324]	; (80235fc <_svfiprintf_r+0x1ec>)
 80234b6:	f7dc fedb 	bl	8000270 <memchr>
 80234ba:	9a04      	ldr	r2, [sp, #16]
 80234bc:	b9d8      	cbnz	r0, 80234f6 <_svfiprintf_r+0xe6>
 80234be:	06d0      	lsls	r0, r2, #27
 80234c0:	bf44      	itt	mi
 80234c2:	2320      	movmi	r3, #32
 80234c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80234c8:	0711      	lsls	r1, r2, #28
 80234ca:	bf44      	itt	mi
 80234cc:	232b      	movmi	r3, #43	; 0x2b
 80234ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80234d2:	f89a 3000 	ldrb.w	r3, [sl]
 80234d6:	2b2a      	cmp	r3, #42	; 0x2a
 80234d8:	d015      	beq.n	8023506 <_svfiprintf_r+0xf6>
 80234da:	9a07      	ldr	r2, [sp, #28]
 80234dc:	4654      	mov	r4, sl
 80234de:	2000      	movs	r0, #0
 80234e0:	f04f 0c0a 	mov.w	ip, #10
 80234e4:	4621      	mov	r1, r4
 80234e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80234ea:	3b30      	subs	r3, #48	; 0x30
 80234ec:	2b09      	cmp	r3, #9
 80234ee:	d94e      	bls.n	802358e <_svfiprintf_r+0x17e>
 80234f0:	b1b0      	cbz	r0, 8023520 <_svfiprintf_r+0x110>
 80234f2:	9207      	str	r2, [sp, #28]
 80234f4:	e014      	b.n	8023520 <_svfiprintf_r+0x110>
 80234f6:	eba0 0308 	sub.w	r3, r0, r8
 80234fa:	fa09 f303 	lsl.w	r3, r9, r3
 80234fe:	4313      	orrs	r3, r2
 8023500:	9304      	str	r3, [sp, #16]
 8023502:	46a2      	mov	sl, r4
 8023504:	e7d2      	b.n	80234ac <_svfiprintf_r+0x9c>
 8023506:	9b03      	ldr	r3, [sp, #12]
 8023508:	1d19      	adds	r1, r3, #4
 802350a:	681b      	ldr	r3, [r3, #0]
 802350c:	9103      	str	r1, [sp, #12]
 802350e:	2b00      	cmp	r3, #0
 8023510:	bfbb      	ittet	lt
 8023512:	425b      	neglt	r3, r3
 8023514:	f042 0202 	orrlt.w	r2, r2, #2
 8023518:	9307      	strge	r3, [sp, #28]
 802351a:	9307      	strlt	r3, [sp, #28]
 802351c:	bfb8      	it	lt
 802351e:	9204      	strlt	r2, [sp, #16]
 8023520:	7823      	ldrb	r3, [r4, #0]
 8023522:	2b2e      	cmp	r3, #46	; 0x2e
 8023524:	d10c      	bne.n	8023540 <_svfiprintf_r+0x130>
 8023526:	7863      	ldrb	r3, [r4, #1]
 8023528:	2b2a      	cmp	r3, #42	; 0x2a
 802352a:	d135      	bne.n	8023598 <_svfiprintf_r+0x188>
 802352c:	9b03      	ldr	r3, [sp, #12]
 802352e:	1d1a      	adds	r2, r3, #4
 8023530:	681b      	ldr	r3, [r3, #0]
 8023532:	9203      	str	r2, [sp, #12]
 8023534:	2b00      	cmp	r3, #0
 8023536:	bfb8      	it	lt
 8023538:	f04f 33ff 	movlt.w	r3, #4294967295
 802353c:	3402      	adds	r4, #2
 802353e:	9305      	str	r3, [sp, #20]
 8023540:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802360c <_svfiprintf_r+0x1fc>
 8023544:	7821      	ldrb	r1, [r4, #0]
 8023546:	2203      	movs	r2, #3
 8023548:	4650      	mov	r0, sl
 802354a:	f7dc fe91 	bl	8000270 <memchr>
 802354e:	b140      	cbz	r0, 8023562 <_svfiprintf_r+0x152>
 8023550:	2340      	movs	r3, #64	; 0x40
 8023552:	eba0 000a 	sub.w	r0, r0, sl
 8023556:	fa03 f000 	lsl.w	r0, r3, r0
 802355a:	9b04      	ldr	r3, [sp, #16]
 802355c:	4303      	orrs	r3, r0
 802355e:	3401      	adds	r4, #1
 8023560:	9304      	str	r3, [sp, #16]
 8023562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023566:	4826      	ldr	r0, [pc, #152]	; (8023600 <_svfiprintf_r+0x1f0>)
 8023568:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802356c:	2206      	movs	r2, #6
 802356e:	f7dc fe7f 	bl	8000270 <memchr>
 8023572:	2800      	cmp	r0, #0
 8023574:	d038      	beq.n	80235e8 <_svfiprintf_r+0x1d8>
 8023576:	4b23      	ldr	r3, [pc, #140]	; (8023604 <_svfiprintf_r+0x1f4>)
 8023578:	bb1b      	cbnz	r3, 80235c2 <_svfiprintf_r+0x1b2>
 802357a:	9b03      	ldr	r3, [sp, #12]
 802357c:	3307      	adds	r3, #7
 802357e:	f023 0307 	bic.w	r3, r3, #7
 8023582:	3308      	adds	r3, #8
 8023584:	9303      	str	r3, [sp, #12]
 8023586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023588:	4433      	add	r3, r6
 802358a:	9309      	str	r3, [sp, #36]	; 0x24
 802358c:	e767      	b.n	802345e <_svfiprintf_r+0x4e>
 802358e:	fb0c 3202 	mla	r2, ip, r2, r3
 8023592:	460c      	mov	r4, r1
 8023594:	2001      	movs	r0, #1
 8023596:	e7a5      	b.n	80234e4 <_svfiprintf_r+0xd4>
 8023598:	2300      	movs	r3, #0
 802359a:	3401      	adds	r4, #1
 802359c:	9305      	str	r3, [sp, #20]
 802359e:	4619      	mov	r1, r3
 80235a0:	f04f 0c0a 	mov.w	ip, #10
 80235a4:	4620      	mov	r0, r4
 80235a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80235aa:	3a30      	subs	r2, #48	; 0x30
 80235ac:	2a09      	cmp	r2, #9
 80235ae:	d903      	bls.n	80235b8 <_svfiprintf_r+0x1a8>
 80235b0:	2b00      	cmp	r3, #0
 80235b2:	d0c5      	beq.n	8023540 <_svfiprintf_r+0x130>
 80235b4:	9105      	str	r1, [sp, #20]
 80235b6:	e7c3      	b.n	8023540 <_svfiprintf_r+0x130>
 80235b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80235bc:	4604      	mov	r4, r0
 80235be:	2301      	movs	r3, #1
 80235c0:	e7f0      	b.n	80235a4 <_svfiprintf_r+0x194>
 80235c2:	ab03      	add	r3, sp, #12
 80235c4:	9300      	str	r3, [sp, #0]
 80235c6:	462a      	mov	r2, r5
 80235c8:	4b0f      	ldr	r3, [pc, #60]	; (8023608 <_svfiprintf_r+0x1f8>)
 80235ca:	a904      	add	r1, sp, #16
 80235cc:	4638      	mov	r0, r7
 80235ce:	f3af 8000 	nop.w
 80235d2:	1c42      	adds	r2, r0, #1
 80235d4:	4606      	mov	r6, r0
 80235d6:	d1d6      	bne.n	8023586 <_svfiprintf_r+0x176>
 80235d8:	89ab      	ldrh	r3, [r5, #12]
 80235da:	065b      	lsls	r3, r3, #25
 80235dc:	f53f af2c 	bmi.w	8023438 <_svfiprintf_r+0x28>
 80235e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80235e2:	b01d      	add	sp, #116	; 0x74
 80235e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235e8:	ab03      	add	r3, sp, #12
 80235ea:	9300      	str	r3, [sp, #0]
 80235ec:	462a      	mov	r2, r5
 80235ee:	4b06      	ldr	r3, [pc, #24]	; (8023608 <_svfiprintf_r+0x1f8>)
 80235f0:	a904      	add	r1, sp, #16
 80235f2:	4638      	mov	r0, r7
 80235f4:	f000 f9d4 	bl	80239a0 <_printf_i>
 80235f8:	e7eb      	b.n	80235d2 <_svfiprintf_r+0x1c2>
 80235fa:	bf00      	nop
 80235fc:	0802942c 	.word	0x0802942c
 8023600:	08029436 	.word	0x08029436
 8023604:	00000000 	.word	0x00000000
 8023608:	08023359 	.word	0x08023359
 802360c:	08029432 	.word	0x08029432

08023610 <__sfputc_r>:
 8023610:	6893      	ldr	r3, [r2, #8]
 8023612:	3b01      	subs	r3, #1
 8023614:	2b00      	cmp	r3, #0
 8023616:	b410      	push	{r4}
 8023618:	6093      	str	r3, [r2, #8]
 802361a:	da08      	bge.n	802362e <__sfputc_r+0x1e>
 802361c:	6994      	ldr	r4, [r2, #24]
 802361e:	42a3      	cmp	r3, r4
 8023620:	db01      	blt.n	8023626 <__sfputc_r+0x16>
 8023622:	290a      	cmp	r1, #10
 8023624:	d103      	bne.n	802362e <__sfputc_r+0x1e>
 8023626:	f85d 4b04 	ldr.w	r4, [sp], #4
 802362a:	f7ff bb79 	b.w	8022d20 <__swbuf_r>
 802362e:	6813      	ldr	r3, [r2, #0]
 8023630:	1c58      	adds	r0, r3, #1
 8023632:	6010      	str	r0, [r2, #0]
 8023634:	7019      	strb	r1, [r3, #0]
 8023636:	4608      	mov	r0, r1
 8023638:	f85d 4b04 	ldr.w	r4, [sp], #4
 802363c:	4770      	bx	lr

0802363e <__sfputs_r>:
 802363e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023640:	4606      	mov	r6, r0
 8023642:	460f      	mov	r7, r1
 8023644:	4614      	mov	r4, r2
 8023646:	18d5      	adds	r5, r2, r3
 8023648:	42ac      	cmp	r4, r5
 802364a:	d101      	bne.n	8023650 <__sfputs_r+0x12>
 802364c:	2000      	movs	r0, #0
 802364e:	e007      	b.n	8023660 <__sfputs_r+0x22>
 8023650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023654:	463a      	mov	r2, r7
 8023656:	4630      	mov	r0, r6
 8023658:	f7ff ffda 	bl	8023610 <__sfputc_r>
 802365c:	1c43      	adds	r3, r0, #1
 802365e:	d1f3      	bne.n	8023648 <__sfputs_r+0xa>
 8023660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023664 <_vfiprintf_r>:
 8023664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023668:	460d      	mov	r5, r1
 802366a:	b09d      	sub	sp, #116	; 0x74
 802366c:	4614      	mov	r4, r2
 802366e:	4698      	mov	r8, r3
 8023670:	4606      	mov	r6, r0
 8023672:	b118      	cbz	r0, 802367c <_vfiprintf_r+0x18>
 8023674:	6983      	ldr	r3, [r0, #24]
 8023676:	b90b      	cbnz	r3, 802367c <_vfiprintf_r+0x18>
 8023678:	f7ff fd4a 	bl	8023110 <__sinit>
 802367c:	4b89      	ldr	r3, [pc, #548]	; (80238a4 <_vfiprintf_r+0x240>)
 802367e:	429d      	cmp	r5, r3
 8023680:	d11b      	bne.n	80236ba <_vfiprintf_r+0x56>
 8023682:	6875      	ldr	r5, [r6, #4]
 8023684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023686:	07d9      	lsls	r1, r3, #31
 8023688:	d405      	bmi.n	8023696 <_vfiprintf_r+0x32>
 802368a:	89ab      	ldrh	r3, [r5, #12]
 802368c:	059a      	lsls	r2, r3, #22
 802368e:	d402      	bmi.n	8023696 <_vfiprintf_r+0x32>
 8023690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023692:	f7ff fded 	bl	8023270 <__retarget_lock_acquire_recursive>
 8023696:	89ab      	ldrh	r3, [r5, #12]
 8023698:	071b      	lsls	r3, r3, #28
 802369a:	d501      	bpl.n	80236a0 <_vfiprintf_r+0x3c>
 802369c:	692b      	ldr	r3, [r5, #16]
 802369e:	b9eb      	cbnz	r3, 80236dc <_vfiprintf_r+0x78>
 80236a0:	4629      	mov	r1, r5
 80236a2:	4630      	mov	r0, r6
 80236a4:	f7ff fb8e 	bl	8022dc4 <__swsetup_r>
 80236a8:	b1c0      	cbz	r0, 80236dc <_vfiprintf_r+0x78>
 80236aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80236ac:	07dc      	lsls	r4, r3, #31
 80236ae:	d50e      	bpl.n	80236ce <_vfiprintf_r+0x6a>
 80236b0:	f04f 30ff 	mov.w	r0, #4294967295
 80236b4:	b01d      	add	sp, #116	; 0x74
 80236b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236ba:	4b7b      	ldr	r3, [pc, #492]	; (80238a8 <_vfiprintf_r+0x244>)
 80236bc:	429d      	cmp	r5, r3
 80236be:	d101      	bne.n	80236c4 <_vfiprintf_r+0x60>
 80236c0:	68b5      	ldr	r5, [r6, #8]
 80236c2:	e7df      	b.n	8023684 <_vfiprintf_r+0x20>
 80236c4:	4b79      	ldr	r3, [pc, #484]	; (80238ac <_vfiprintf_r+0x248>)
 80236c6:	429d      	cmp	r5, r3
 80236c8:	bf08      	it	eq
 80236ca:	68f5      	ldreq	r5, [r6, #12]
 80236cc:	e7da      	b.n	8023684 <_vfiprintf_r+0x20>
 80236ce:	89ab      	ldrh	r3, [r5, #12]
 80236d0:	0598      	lsls	r0, r3, #22
 80236d2:	d4ed      	bmi.n	80236b0 <_vfiprintf_r+0x4c>
 80236d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80236d6:	f7ff fdcc 	bl	8023272 <__retarget_lock_release_recursive>
 80236da:	e7e9      	b.n	80236b0 <_vfiprintf_r+0x4c>
 80236dc:	2300      	movs	r3, #0
 80236de:	9309      	str	r3, [sp, #36]	; 0x24
 80236e0:	2320      	movs	r3, #32
 80236e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80236e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80236ea:	2330      	movs	r3, #48	; 0x30
 80236ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80238b0 <_vfiprintf_r+0x24c>
 80236f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80236f4:	f04f 0901 	mov.w	r9, #1
 80236f8:	4623      	mov	r3, r4
 80236fa:	469a      	mov	sl, r3
 80236fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023700:	b10a      	cbz	r2, 8023706 <_vfiprintf_r+0xa2>
 8023702:	2a25      	cmp	r2, #37	; 0x25
 8023704:	d1f9      	bne.n	80236fa <_vfiprintf_r+0x96>
 8023706:	ebba 0b04 	subs.w	fp, sl, r4
 802370a:	d00b      	beq.n	8023724 <_vfiprintf_r+0xc0>
 802370c:	465b      	mov	r3, fp
 802370e:	4622      	mov	r2, r4
 8023710:	4629      	mov	r1, r5
 8023712:	4630      	mov	r0, r6
 8023714:	f7ff ff93 	bl	802363e <__sfputs_r>
 8023718:	3001      	adds	r0, #1
 802371a:	f000 80aa 	beq.w	8023872 <_vfiprintf_r+0x20e>
 802371e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023720:	445a      	add	r2, fp
 8023722:	9209      	str	r2, [sp, #36]	; 0x24
 8023724:	f89a 3000 	ldrb.w	r3, [sl]
 8023728:	2b00      	cmp	r3, #0
 802372a:	f000 80a2 	beq.w	8023872 <_vfiprintf_r+0x20e>
 802372e:	2300      	movs	r3, #0
 8023730:	f04f 32ff 	mov.w	r2, #4294967295
 8023734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023738:	f10a 0a01 	add.w	sl, sl, #1
 802373c:	9304      	str	r3, [sp, #16]
 802373e:	9307      	str	r3, [sp, #28]
 8023740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023744:	931a      	str	r3, [sp, #104]	; 0x68
 8023746:	4654      	mov	r4, sl
 8023748:	2205      	movs	r2, #5
 802374a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802374e:	4858      	ldr	r0, [pc, #352]	; (80238b0 <_vfiprintf_r+0x24c>)
 8023750:	f7dc fd8e 	bl	8000270 <memchr>
 8023754:	9a04      	ldr	r2, [sp, #16]
 8023756:	b9d8      	cbnz	r0, 8023790 <_vfiprintf_r+0x12c>
 8023758:	06d1      	lsls	r1, r2, #27
 802375a:	bf44      	itt	mi
 802375c:	2320      	movmi	r3, #32
 802375e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023762:	0713      	lsls	r3, r2, #28
 8023764:	bf44      	itt	mi
 8023766:	232b      	movmi	r3, #43	; 0x2b
 8023768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802376c:	f89a 3000 	ldrb.w	r3, [sl]
 8023770:	2b2a      	cmp	r3, #42	; 0x2a
 8023772:	d015      	beq.n	80237a0 <_vfiprintf_r+0x13c>
 8023774:	9a07      	ldr	r2, [sp, #28]
 8023776:	4654      	mov	r4, sl
 8023778:	2000      	movs	r0, #0
 802377a:	f04f 0c0a 	mov.w	ip, #10
 802377e:	4621      	mov	r1, r4
 8023780:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023784:	3b30      	subs	r3, #48	; 0x30
 8023786:	2b09      	cmp	r3, #9
 8023788:	d94e      	bls.n	8023828 <_vfiprintf_r+0x1c4>
 802378a:	b1b0      	cbz	r0, 80237ba <_vfiprintf_r+0x156>
 802378c:	9207      	str	r2, [sp, #28]
 802378e:	e014      	b.n	80237ba <_vfiprintf_r+0x156>
 8023790:	eba0 0308 	sub.w	r3, r0, r8
 8023794:	fa09 f303 	lsl.w	r3, r9, r3
 8023798:	4313      	orrs	r3, r2
 802379a:	9304      	str	r3, [sp, #16]
 802379c:	46a2      	mov	sl, r4
 802379e:	e7d2      	b.n	8023746 <_vfiprintf_r+0xe2>
 80237a0:	9b03      	ldr	r3, [sp, #12]
 80237a2:	1d19      	adds	r1, r3, #4
 80237a4:	681b      	ldr	r3, [r3, #0]
 80237a6:	9103      	str	r1, [sp, #12]
 80237a8:	2b00      	cmp	r3, #0
 80237aa:	bfbb      	ittet	lt
 80237ac:	425b      	neglt	r3, r3
 80237ae:	f042 0202 	orrlt.w	r2, r2, #2
 80237b2:	9307      	strge	r3, [sp, #28]
 80237b4:	9307      	strlt	r3, [sp, #28]
 80237b6:	bfb8      	it	lt
 80237b8:	9204      	strlt	r2, [sp, #16]
 80237ba:	7823      	ldrb	r3, [r4, #0]
 80237bc:	2b2e      	cmp	r3, #46	; 0x2e
 80237be:	d10c      	bne.n	80237da <_vfiprintf_r+0x176>
 80237c0:	7863      	ldrb	r3, [r4, #1]
 80237c2:	2b2a      	cmp	r3, #42	; 0x2a
 80237c4:	d135      	bne.n	8023832 <_vfiprintf_r+0x1ce>
 80237c6:	9b03      	ldr	r3, [sp, #12]
 80237c8:	1d1a      	adds	r2, r3, #4
 80237ca:	681b      	ldr	r3, [r3, #0]
 80237cc:	9203      	str	r2, [sp, #12]
 80237ce:	2b00      	cmp	r3, #0
 80237d0:	bfb8      	it	lt
 80237d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80237d6:	3402      	adds	r4, #2
 80237d8:	9305      	str	r3, [sp, #20]
 80237da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80238c0 <_vfiprintf_r+0x25c>
 80237de:	7821      	ldrb	r1, [r4, #0]
 80237e0:	2203      	movs	r2, #3
 80237e2:	4650      	mov	r0, sl
 80237e4:	f7dc fd44 	bl	8000270 <memchr>
 80237e8:	b140      	cbz	r0, 80237fc <_vfiprintf_r+0x198>
 80237ea:	2340      	movs	r3, #64	; 0x40
 80237ec:	eba0 000a 	sub.w	r0, r0, sl
 80237f0:	fa03 f000 	lsl.w	r0, r3, r0
 80237f4:	9b04      	ldr	r3, [sp, #16]
 80237f6:	4303      	orrs	r3, r0
 80237f8:	3401      	adds	r4, #1
 80237fa:	9304      	str	r3, [sp, #16]
 80237fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023800:	482c      	ldr	r0, [pc, #176]	; (80238b4 <_vfiprintf_r+0x250>)
 8023802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023806:	2206      	movs	r2, #6
 8023808:	f7dc fd32 	bl	8000270 <memchr>
 802380c:	2800      	cmp	r0, #0
 802380e:	d03f      	beq.n	8023890 <_vfiprintf_r+0x22c>
 8023810:	4b29      	ldr	r3, [pc, #164]	; (80238b8 <_vfiprintf_r+0x254>)
 8023812:	bb1b      	cbnz	r3, 802385c <_vfiprintf_r+0x1f8>
 8023814:	9b03      	ldr	r3, [sp, #12]
 8023816:	3307      	adds	r3, #7
 8023818:	f023 0307 	bic.w	r3, r3, #7
 802381c:	3308      	adds	r3, #8
 802381e:	9303      	str	r3, [sp, #12]
 8023820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023822:	443b      	add	r3, r7
 8023824:	9309      	str	r3, [sp, #36]	; 0x24
 8023826:	e767      	b.n	80236f8 <_vfiprintf_r+0x94>
 8023828:	fb0c 3202 	mla	r2, ip, r2, r3
 802382c:	460c      	mov	r4, r1
 802382e:	2001      	movs	r0, #1
 8023830:	e7a5      	b.n	802377e <_vfiprintf_r+0x11a>
 8023832:	2300      	movs	r3, #0
 8023834:	3401      	adds	r4, #1
 8023836:	9305      	str	r3, [sp, #20]
 8023838:	4619      	mov	r1, r3
 802383a:	f04f 0c0a 	mov.w	ip, #10
 802383e:	4620      	mov	r0, r4
 8023840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023844:	3a30      	subs	r2, #48	; 0x30
 8023846:	2a09      	cmp	r2, #9
 8023848:	d903      	bls.n	8023852 <_vfiprintf_r+0x1ee>
 802384a:	2b00      	cmp	r3, #0
 802384c:	d0c5      	beq.n	80237da <_vfiprintf_r+0x176>
 802384e:	9105      	str	r1, [sp, #20]
 8023850:	e7c3      	b.n	80237da <_vfiprintf_r+0x176>
 8023852:	fb0c 2101 	mla	r1, ip, r1, r2
 8023856:	4604      	mov	r4, r0
 8023858:	2301      	movs	r3, #1
 802385a:	e7f0      	b.n	802383e <_vfiprintf_r+0x1da>
 802385c:	ab03      	add	r3, sp, #12
 802385e:	9300      	str	r3, [sp, #0]
 8023860:	462a      	mov	r2, r5
 8023862:	4b16      	ldr	r3, [pc, #88]	; (80238bc <_vfiprintf_r+0x258>)
 8023864:	a904      	add	r1, sp, #16
 8023866:	4630      	mov	r0, r6
 8023868:	f3af 8000 	nop.w
 802386c:	4607      	mov	r7, r0
 802386e:	1c78      	adds	r0, r7, #1
 8023870:	d1d6      	bne.n	8023820 <_vfiprintf_r+0x1bc>
 8023872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023874:	07d9      	lsls	r1, r3, #31
 8023876:	d405      	bmi.n	8023884 <_vfiprintf_r+0x220>
 8023878:	89ab      	ldrh	r3, [r5, #12]
 802387a:	059a      	lsls	r2, r3, #22
 802387c:	d402      	bmi.n	8023884 <_vfiprintf_r+0x220>
 802387e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023880:	f7ff fcf7 	bl	8023272 <__retarget_lock_release_recursive>
 8023884:	89ab      	ldrh	r3, [r5, #12]
 8023886:	065b      	lsls	r3, r3, #25
 8023888:	f53f af12 	bmi.w	80236b0 <_vfiprintf_r+0x4c>
 802388c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802388e:	e711      	b.n	80236b4 <_vfiprintf_r+0x50>
 8023890:	ab03      	add	r3, sp, #12
 8023892:	9300      	str	r3, [sp, #0]
 8023894:	462a      	mov	r2, r5
 8023896:	4b09      	ldr	r3, [pc, #36]	; (80238bc <_vfiprintf_r+0x258>)
 8023898:	a904      	add	r1, sp, #16
 802389a:	4630      	mov	r0, r6
 802389c:	f000 f880 	bl	80239a0 <_printf_i>
 80238a0:	e7e4      	b.n	802386c <_vfiprintf_r+0x208>
 80238a2:	bf00      	nop
 80238a4:	080293ec 	.word	0x080293ec
 80238a8:	0802940c 	.word	0x0802940c
 80238ac:	080293cc 	.word	0x080293cc
 80238b0:	0802942c 	.word	0x0802942c
 80238b4:	08029436 	.word	0x08029436
 80238b8:	00000000 	.word	0x00000000
 80238bc:	0802363f 	.word	0x0802363f
 80238c0:	08029432 	.word	0x08029432

080238c4 <_printf_common>:
 80238c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80238c8:	4616      	mov	r6, r2
 80238ca:	4699      	mov	r9, r3
 80238cc:	688a      	ldr	r2, [r1, #8]
 80238ce:	690b      	ldr	r3, [r1, #16]
 80238d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80238d4:	4293      	cmp	r3, r2
 80238d6:	bfb8      	it	lt
 80238d8:	4613      	movlt	r3, r2
 80238da:	6033      	str	r3, [r6, #0]
 80238dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80238e0:	4607      	mov	r7, r0
 80238e2:	460c      	mov	r4, r1
 80238e4:	b10a      	cbz	r2, 80238ea <_printf_common+0x26>
 80238e6:	3301      	adds	r3, #1
 80238e8:	6033      	str	r3, [r6, #0]
 80238ea:	6823      	ldr	r3, [r4, #0]
 80238ec:	0699      	lsls	r1, r3, #26
 80238ee:	bf42      	ittt	mi
 80238f0:	6833      	ldrmi	r3, [r6, #0]
 80238f2:	3302      	addmi	r3, #2
 80238f4:	6033      	strmi	r3, [r6, #0]
 80238f6:	6825      	ldr	r5, [r4, #0]
 80238f8:	f015 0506 	ands.w	r5, r5, #6
 80238fc:	d106      	bne.n	802390c <_printf_common+0x48>
 80238fe:	f104 0a19 	add.w	sl, r4, #25
 8023902:	68e3      	ldr	r3, [r4, #12]
 8023904:	6832      	ldr	r2, [r6, #0]
 8023906:	1a9b      	subs	r3, r3, r2
 8023908:	42ab      	cmp	r3, r5
 802390a:	dc26      	bgt.n	802395a <_printf_common+0x96>
 802390c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023910:	1e13      	subs	r3, r2, #0
 8023912:	6822      	ldr	r2, [r4, #0]
 8023914:	bf18      	it	ne
 8023916:	2301      	movne	r3, #1
 8023918:	0692      	lsls	r2, r2, #26
 802391a:	d42b      	bmi.n	8023974 <_printf_common+0xb0>
 802391c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023920:	4649      	mov	r1, r9
 8023922:	4638      	mov	r0, r7
 8023924:	47c0      	blx	r8
 8023926:	3001      	adds	r0, #1
 8023928:	d01e      	beq.n	8023968 <_printf_common+0xa4>
 802392a:	6823      	ldr	r3, [r4, #0]
 802392c:	68e5      	ldr	r5, [r4, #12]
 802392e:	6832      	ldr	r2, [r6, #0]
 8023930:	f003 0306 	and.w	r3, r3, #6
 8023934:	2b04      	cmp	r3, #4
 8023936:	bf08      	it	eq
 8023938:	1aad      	subeq	r5, r5, r2
 802393a:	68a3      	ldr	r3, [r4, #8]
 802393c:	6922      	ldr	r2, [r4, #16]
 802393e:	bf0c      	ite	eq
 8023940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023944:	2500      	movne	r5, #0
 8023946:	4293      	cmp	r3, r2
 8023948:	bfc4      	itt	gt
 802394a:	1a9b      	subgt	r3, r3, r2
 802394c:	18ed      	addgt	r5, r5, r3
 802394e:	2600      	movs	r6, #0
 8023950:	341a      	adds	r4, #26
 8023952:	42b5      	cmp	r5, r6
 8023954:	d11a      	bne.n	802398c <_printf_common+0xc8>
 8023956:	2000      	movs	r0, #0
 8023958:	e008      	b.n	802396c <_printf_common+0xa8>
 802395a:	2301      	movs	r3, #1
 802395c:	4652      	mov	r2, sl
 802395e:	4649      	mov	r1, r9
 8023960:	4638      	mov	r0, r7
 8023962:	47c0      	blx	r8
 8023964:	3001      	adds	r0, #1
 8023966:	d103      	bne.n	8023970 <_printf_common+0xac>
 8023968:	f04f 30ff 	mov.w	r0, #4294967295
 802396c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023970:	3501      	adds	r5, #1
 8023972:	e7c6      	b.n	8023902 <_printf_common+0x3e>
 8023974:	18e1      	adds	r1, r4, r3
 8023976:	1c5a      	adds	r2, r3, #1
 8023978:	2030      	movs	r0, #48	; 0x30
 802397a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802397e:	4422      	add	r2, r4
 8023980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023984:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023988:	3302      	adds	r3, #2
 802398a:	e7c7      	b.n	802391c <_printf_common+0x58>
 802398c:	2301      	movs	r3, #1
 802398e:	4622      	mov	r2, r4
 8023990:	4649      	mov	r1, r9
 8023992:	4638      	mov	r0, r7
 8023994:	47c0      	blx	r8
 8023996:	3001      	adds	r0, #1
 8023998:	d0e6      	beq.n	8023968 <_printf_common+0xa4>
 802399a:	3601      	adds	r6, #1
 802399c:	e7d9      	b.n	8023952 <_printf_common+0x8e>
	...

080239a0 <_printf_i>:
 80239a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80239a4:	7e0f      	ldrb	r7, [r1, #24]
 80239a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80239a8:	2f78      	cmp	r7, #120	; 0x78
 80239aa:	4691      	mov	r9, r2
 80239ac:	4680      	mov	r8, r0
 80239ae:	460c      	mov	r4, r1
 80239b0:	469a      	mov	sl, r3
 80239b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80239b6:	d807      	bhi.n	80239c8 <_printf_i+0x28>
 80239b8:	2f62      	cmp	r7, #98	; 0x62
 80239ba:	d80a      	bhi.n	80239d2 <_printf_i+0x32>
 80239bc:	2f00      	cmp	r7, #0
 80239be:	f000 80d8 	beq.w	8023b72 <_printf_i+0x1d2>
 80239c2:	2f58      	cmp	r7, #88	; 0x58
 80239c4:	f000 80a3 	beq.w	8023b0e <_printf_i+0x16e>
 80239c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80239cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80239d0:	e03a      	b.n	8023a48 <_printf_i+0xa8>
 80239d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80239d6:	2b15      	cmp	r3, #21
 80239d8:	d8f6      	bhi.n	80239c8 <_printf_i+0x28>
 80239da:	a101      	add	r1, pc, #4	; (adr r1, 80239e0 <_printf_i+0x40>)
 80239dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80239e0:	08023a39 	.word	0x08023a39
 80239e4:	08023a4d 	.word	0x08023a4d
 80239e8:	080239c9 	.word	0x080239c9
 80239ec:	080239c9 	.word	0x080239c9
 80239f0:	080239c9 	.word	0x080239c9
 80239f4:	080239c9 	.word	0x080239c9
 80239f8:	08023a4d 	.word	0x08023a4d
 80239fc:	080239c9 	.word	0x080239c9
 8023a00:	080239c9 	.word	0x080239c9
 8023a04:	080239c9 	.word	0x080239c9
 8023a08:	080239c9 	.word	0x080239c9
 8023a0c:	08023b59 	.word	0x08023b59
 8023a10:	08023a7d 	.word	0x08023a7d
 8023a14:	08023b3b 	.word	0x08023b3b
 8023a18:	080239c9 	.word	0x080239c9
 8023a1c:	080239c9 	.word	0x080239c9
 8023a20:	08023b7b 	.word	0x08023b7b
 8023a24:	080239c9 	.word	0x080239c9
 8023a28:	08023a7d 	.word	0x08023a7d
 8023a2c:	080239c9 	.word	0x080239c9
 8023a30:	080239c9 	.word	0x080239c9
 8023a34:	08023b43 	.word	0x08023b43
 8023a38:	682b      	ldr	r3, [r5, #0]
 8023a3a:	1d1a      	adds	r2, r3, #4
 8023a3c:	681b      	ldr	r3, [r3, #0]
 8023a3e:	602a      	str	r2, [r5, #0]
 8023a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023a48:	2301      	movs	r3, #1
 8023a4a:	e0a3      	b.n	8023b94 <_printf_i+0x1f4>
 8023a4c:	6820      	ldr	r0, [r4, #0]
 8023a4e:	6829      	ldr	r1, [r5, #0]
 8023a50:	0606      	lsls	r6, r0, #24
 8023a52:	f101 0304 	add.w	r3, r1, #4
 8023a56:	d50a      	bpl.n	8023a6e <_printf_i+0xce>
 8023a58:	680e      	ldr	r6, [r1, #0]
 8023a5a:	602b      	str	r3, [r5, #0]
 8023a5c:	2e00      	cmp	r6, #0
 8023a5e:	da03      	bge.n	8023a68 <_printf_i+0xc8>
 8023a60:	232d      	movs	r3, #45	; 0x2d
 8023a62:	4276      	negs	r6, r6
 8023a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023a68:	485e      	ldr	r0, [pc, #376]	; (8023be4 <_printf_i+0x244>)
 8023a6a:	230a      	movs	r3, #10
 8023a6c:	e019      	b.n	8023aa2 <_printf_i+0x102>
 8023a6e:	680e      	ldr	r6, [r1, #0]
 8023a70:	602b      	str	r3, [r5, #0]
 8023a72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023a76:	bf18      	it	ne
 8023a78:	b236      	sxthne	r6, r6
 8023a7a:	e7ef      	b.n	8023a5c <_printf_i+0xbc>
 8023a7c:	682b      	ldr	r3, [r5, #0]
 8023a7e:	6820      	ldr	r0, [r4, #0]
 8023a80:	1d19      	adds	r1, r3, #4
 8023a82:	6029      	str	r1, [r5, #0]
 8023a84:	0601      	lsls	r1, r0, #24
 8023a86:	d501      	bpl.n	8023a8c <_printf_i+0xec>
 8023a88:	681e      	ldr	r6, [r3, #0]
 8023a8a:	e002      	b.n	8023a92 <_printf_i+0xf2>
 8023a8c:	0646      	lsls	r6, r0, #25
 8023a8e:	d5fb      	bpl.n	8023a88 <_printf_i+0xe8>
 8023a90:	881e      	ldrh	r6, [r3, #0]
 8023a92:	4854      	ldr	r0, [pc, #336]	; (8023be4 <_printf_i+0x244>)
 8023a94:	2f6f      	cmp	r7, #111	; 0x6f
 8023a96:	bf0c      	ite	eq
 8023a98:	2308      	moveq	r3, #8
 8023a9a:	230a      	movne	r3, #10
 8023a9c:	2100      	movs	r1, #0
 8023a9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023aa2:	6865      	ldr	r5, [r4, #4]
 8023aa4:	60a5      	str	r5, [r4, #8]
 8023aa6:	2d00      	cmp	r5, #0
 8023aa8:	bfa2      	ittt	ge
 8023aaa:	6821      	ldrge	r1, [r4, #0]
 8023aac:	f021 0104 	bicge.w	r1, r1, #4
 8023ab0:	6021      	strge	r1, [r4, #0]
 8023ab2:	b90e      	cbnz	r6, 8023ab8 <_printf_i+0x118>
 8023ab4:	2d00      	cmp	r5, #0
 8023ab6:	d04d      	beq.n	8023b54 <_printf_i+0x1b4>
 8023ab8:	4615      	mov	r5, r2
 8023aba:	fbb6 f1f3 	udiv	r1, r6, r3
 8023abe:	fb03 6711 	mls	r7, r3, r1, r6
 8023ac2:	5dc7      	ldrb	r7, [r0, r7]
 8023ac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023ac8:	4637      	mov	r7, r6
 8023aca:	42bb      	cmp	r3, r7
 8023acc:	460e      	mov	r6, r1
 8023ace:	d9f4      	bls.n	8023aba <_printf_i+0x11a>
 8023ad0:	2b08      	cmp	r3, #8
 8023ad2:	d10b      	bne.n	8023aec <_printf_i+0x14c>
 8023ad4:	6823      	ldr	r3, [r4, #0]
 8023ad6:	07de      	lsls	r6, r3, #31
 8023ad8:	d508      	bpl.n	8023aec <_printf_i+0x14c>
 8023ada:	6923      	ldr	r3, [r4, #16]
 8023adc:	6861      	ldr	r1, [r4, #4]
 8023ade:	4299      	cmp	r1, r3
 8023ae0:	bfde      	ittt	le
 8023ae2:	2330      	movle	r3, #48	; 0x30
 8023ae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023ae8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023aec:	1b52      	subs	r2, r2, r5
 8023aee:	6122      	str	r2, [r4, #16]
 8023af0:	f8cd a000 	str.w	sl, [sp]
 8023af4:	464b      	mov	r3, r9
 8023af6:	aa03      	add	r2, sp, #12
 8023af8:	4621      	mov	r1, r4
 8023afa:	4640      	mov	r0, r8
 8023afc:	f7ff fee2 	bl	80238c4 <_printf_common>
 8023b00:	3001      	adds	r0, #1
 8023b02:	d14c      	bne.n	8023b9e <_printf_i+0x1fe>
 8023b04:	f04f 30ff 	mov.w	r0, #4294967295
 8023b08:	b004      	add	sp, #16
 8023b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b0e:	4835      	ldr	r0, [pc, #212]	; (8023be4 <_printf_i+0x244>)
 8023b10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023b14:	6829      	ldr	r1, [r5, #0]
 8023b16:	6823      	ldr	r3, [r4, #0]
 8023b18:	f851 6b04 	ldr.w	r6, [r1], #4
 8023b1c:	6029      	str	r1, [r5, #0]
 8023b1e:	061d      	lsls	r5, r3, #24
 8023b20:	d514      	bpl.n	8023b4c <_printf_i+0x1ac>
 8023b22:	07df      	lsls	r7, r3, #31
 8023b24:	bf44      	itt	mi
 8023b26:	f043 0320 	orrmi.w	r3, r3, #32
 8023b2a:	6023      	strmi	r3, [r4, #0]
 8023b2c:	b91e      	cbnz	r6, 8023b36 <_printf_i+0x196>
 8023b2e:	6823      	ldr	r3, [r4, #0]
 8023b30:	f023 0320 	bic.w	r3, r3, #32
 8023b34:	6023      	str	r3, [r4, #0]
 8023b36:	2310      	movs	r3, #16
 8023b38:	e7b0      	b.n	8023a9c <_printf_i+0xfc>
 8023b3a:	6823      	ldr	r3, [r4, #0]
 8023b3c:	f043 0320 	orr.w	r3, r3, #32
 8023b40:	6023      	str	r3, [r4, #0]
 8023b42:	2378      	movs	r3, #120	; 0x78
 8023b44:	4828      	ldr	r0, [pc, #160]	; (8023be8 <_printf_i+0x248>)
 8023b46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023b4a:	e7e3      	b.n	8023b14 <_printf_i+0x174>
 8023b4c:	0659      	lsls	r1, r3, #25
 8023b4e:	bf48      	it	mi
 8023b50:	b2b6      	uxthmi	r6, r6
 8023b52:	e7e6      	b.n	8023b22 <_printf_i+0x182>
 8023b54:	4615      	mov	r5, r2
 8023b56:	e7bb      	b.n	8023ad0 <_printf_i+0x130>
 8023b58:	682b      	ldr	r3, [r5, #0]
 8023b5a:	6826      	ldr	r6, [r4, #0]
 8023b5c:	6961      	ldr	r1, [r4, #20]
 8023b5e:	1d18      	adds	r0, r3, #4
 8023b60:	6028      	str	r0, [r5, #0]
 8023b62:	0635      	lsls	r5, r6, #24
 8023b64:	681b      	ldr	r3, [r3, #0]
 8023b66:	d501      	bpl.n	8023b6c <_printf_i+0x1cc>
 8023b68:	6019      	str	r1, [r3, #0]
 8023b6a:	e002      	b.n	8023b72 <_printf_i+0x1d2>
 8023b6c:	0670      	lsls	r0, r6, #25
 8023b6e:	d5fb      	bpl.n	8023b68 <_printf_i+0x1c8>
 8023b70:	8019      	strh	r1, [r3, #0]
 8023b72:	2300      	movs	r3, #0
 8023b74:	6123      	str	r3, [r4, #16]
 8023b76:	4615      	mov	r5, r2
 8023b78:	e7ba      	b.n	8023af0 <_printf_i+0x150>
 8023b7a:	682b      	ldr	r3, [r5, #0]
 8023b7c:	1d1a      	adds	r2, r3, #4
 8023b7e:	602a      	str	r2, [r5, #0]
 8023b80:	681d      	ldr	r5, [r3, #0]
 8023b82:	6862      	ldr	r2, [r4, #4]
 8023b84:	2100      	movs	r1, #0
 8023b86:	4628      	mov	r0, r5
 8023b88:	f7dc fb72 	bl	8000270 <memchr>
 8023b8c:	b108      	cbz	r0, 8023b92 <_printf_i+0x1f2>
 8023b8e:	1b40      	subs	r0, r0, r5
 8023b90:	6060      	str	r0, [r4, #4]
 8023b92:	6863      	ldr	r3, [r4, #4]
 8023b94:	6123      	str	r3, [r4, #16]
 8023b96:	2300      	movs	r3, #0
 8023b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023b9c:	e7a8      	b.n	8023af0 <_printf_i+0x150>
 8023b9e:	6923      	ldr	r3, [r4, #16]
 8023ba0:	462a      	mov	r2, r5
 8023ba2:	4649      	mov	r1, r9
 8023ba4:	4640      	mov	r0, r8
 8023ba6:	47d0      	blx	sl
 8023ba8:	3001      	adds	r0, #1
 8023baa:	d0ab      	beq.n	8023b04 <_printf_i+0x164>
 8023bac:	6823      	ldr	r3, [r4, #0]
 8023bae:	079b      	lsls	r3, r3, #30
 8023bb0:	d413      	bmi.n	8023bda <_printf_i+0x23a>
 8023bb2:	68e0      	ldr	r0, [r4, #12]
 8023bb4:	9b03      	ldr	r3, [sp, #12]
 8023bb6:	4298      	cmp	r0, r3
 8023bb8:	bfb8      	it	lt
 8023bba:	4618      	movlt	r0, r3
 8023bbc:	e7a4      	b.n	8023b08 <_printf_i+0x168>
 8023bbe:	2301      	movs	r3, #1
 8023bc0:	4632      	mov	r2, r6
 8023bc2:	4649      	mov	r1, r9
 8023bc4:	4640      	mov	r0, r8
 8023bc6:	47d0      	blx	sl
 8023bc8:	3001      	adds	r0, #1
 8023bca:	d09b      	beq.n	8023b04 <_printf_i+0x164>
 8023bcc:	3501      	adds	r5, #1
 8023bce:	68e3      	ldr	r3, [r4, #12]
 8023bd0:	9903      	ldr	r1, [sp, #12]
 8023bd2:	1a5b      	subs	r3, r3, r1
 8023bd4:	42ab      	cmp	r3, r5
 8023bd6:	dcf2      	bgt.n	8023bbe <_printf_i+0x21e>
 8023bd8:	e7eb      	b.n	8023bb2 <_printf_i+0x212>
 8023bda:	2500      	movs	r5, #0
 8023bdc:	f104 0619 	add.w	r6, r4, #25
 8023be0:	e7f5      	b.n	8023bce <_printf_i+0x22e>
 8023be2:	bf00      	nop
 8023be4:	0802943d 	.word	0x0802943d
 8023be8:	0802944e 	.word	0x0802944e

08023bec <_putc_r>:
 8023bec:	b570      	push	{r4, r5, r6, lr}
 8023bee:	460d      	mov	r5, r1
 8023bf0:	4614      	mov	r4, r2
 8023bf2:	4606      	mov	r6, r0
 8023bf4:	b118      	cbz	r0, 8023bfe <_putc_r+0x12>
 8023bf6:	6983      	ldr	r3, [r0, #24]
 8023bf8:	b90b      	cbnz	r3, 8023bfe <_putc_r+0x12>
 8023bfa:	f7ff fa89 	bl	8023110 <__sinit>
 8023bfe:	4b1c      	ldr	r3, [pc, #112]	; (8023c70 <_putc_r+0x84>)
 8023c00:	429c      	cmp	r4, r3
 8023c02:	d124      	bne.n	8023c4e <_putc_r+0x62>
 8023c04:	6874      	ldr	r4, [r6, #4]
 8023c06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023c08:	07d8      	lsls	r0, r3, #31
 8023c0a:	d405      	bmi.n	8023c18 <_putc_r+0x2c>
 8023c0c:	89a3      	ldrh	r3, [r4, #12]
 8023c0e:	0599      	lsls	r1, r3, #22
 8023c10:	d402      	bmi.n	8023c18 <_putc_r+0x2c>
 8023c12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023c14:	f7ff fb2c 	bl	8023270 <__retarget_lock_acquire_recursive>
 8023c18:	68a3      	ldr	r3, [r4, #8]
 8023c1a:	3b01      	subs	r3, #1
 8023c1c:	2b00      	cmp	r3, #0
 8023c1e:	60a3      	str	r3, [r4, #8]
 8023c20:	da05      	bge.n	8023c2e <_putc_r+0x42>
 8023c22:	69a2      	ldr	r2, [r4, #24]
 8023c24:	4293      	cmp	r3, r2
 8023c26:	db1c      	blt.n	8023c62 <_putc_r+0x76>
 8023c28:	b2eb      	uxtb	r3, r5
 8023c2a:	2b0a      	cmp	r3, #10
 8023c2c:	d019      	beq.n	8023c62 <_putc_r+0x76>
 8023c2e:	6823      	ldr	r3, [r4, #0]
 8023c30:	1c5a      	adds	r2, r3, #1
 8023c32:	6022      	str	r2, [r4, #0]
 8023c34:	701d      	strb	r5, [r3, #0]
 8023c36:	b2ed      	uxtb	r5, r5
 8023c38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023c3a:	07da      	lsls	r2, r3, #31
 8023c3c:	d405      	bmi.n	8023c4a <_putc_r+0x5e>
 8023c3e:	89a3      	ldrh	r3, [r4, #12]
 8023c40:	059b      	lsls	r3, r3, #22
 8023c42:	d402      	bmi.n	8023c4a <_putc_r+0x5e>
 8023c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023c46:	f7ff fb14 	bl	8023272 <__retarget_lock_release_recursive>
 8023c4a:	4628      	mov	r0, r5
 8023c4c:	bd70      	pop	{r4, r5, r6, pc}
 8023c4e:	4b09      	ldr	r3, [pc, #36]	; (8023c74 <_putc_r+0x88>)
 8023c50:	429c      	cmp	r4, r3
 8023c52:	d101      	bne.n	8023c58 <_putc_r+0x6c>
 8023c54:	68b4      	ldr	r4, [r6, #8]
 8023c56:	e7d6      	b.n	8023c06 <_putc_r+0x1a>
 8023c58:	4b07      	ldr	r3, [pc, #28]	; (8023c78 <_putc_r+0x8c>)
 8023c5a:	429c      	cmp	r4, r3
 8023c5c:	bf08      	it	eq
 8023c5e:	68f4      	ldreq	r4, [r6, #12]
 8023c60:	e7d1      	b.n	8023c06 <_putc_r+0x1a>
 8023c62:	4629      	mov	r1, r5
 8023c64:	4622      	mov	r2, r4
 8023c66:	4630      	mov	r0, r6
 8023c68:	f7ff f85a 	bl	8022d20 <__swbuf_r>
 8023c6c:	4605      	mov	r5, r0
 8023c6e:	e7e3      	b.n	8023c38 <_putc_r+0x4c>
 8023c70:	080293ec 	.word	0x080293ec
 8023c74:	0802940c 	.word	0x0802940c
 8023c78:	080293cc 	.word	0x080293cc

08023c7c <__sread>:
 8023c7c:	b510      	push	{r4, lr}
 8023c7e:	460c      	mov	r4, r1
 8023c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023c84:	f000 f8cc 	bl	8023e20 <_read_r>
 8023c88:	2800      	cmp	r0, #0
 8023c8a:	bfab      	itete	ge
 8023c8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023c8e:	89a3      	ldrhlt	r3, [r4, #12]
 8023c90:	181b      	addge	r3, r3, r0
 8023c92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023c96:	bfac      	ite	ge
 8023c98:	6563      	strge	r3, [r4, #84]	; 0x54
 8023c9a:	81a3      	strhlt	r3, [r4, #12]
 8023c9c:	bd10      	pop	{r4, pc}

08023c9e <__swrite>:
 8023c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023ca2:	461f      	mov	r7, r3
 8023ca4:	898b      	ldrh	r3, [r1, #12]
 8023ca6:	05db      	lsls	r3, r3, #23
 8023ca8:	4605      	mov	r5, r0
 8023caa:	460c      	mov	r4, r1
 8023cac:	4616      	mov	r6, r2
 8023cae:	d505      	bpl.n	8023cbc <__swrite+0x1e>
 8023cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023cb4:	2302      	movs	r3, #2
 8023cb6:	2200      	movs	r2, #0
 8023cb8:	f000 f870 	bl	8023d9c <_lseek_r>
 8023cbc:	89a3      	ldrh	r3, [r4, #12]
 8023cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023cc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023cc6:	81a3      	strh	r3, [r4, #12]
 8023cc8:	4632      	mov	r2, r6
 8023cca:	463b      	mov	r3, r7
 8023ccc:	4628      	mov	r0, r5
 8023cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023cd2:	f000 b817 	b.w	8023d04 <_write_r>

08023cd6 <__sseek>:
 8023cd6:	b510      	push	{r4, lr}
 8023cd8:	460c      	mov	r4, r1
 8023cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023cde:	f000 f85d 	bl	8023d9c <_lseek_r>
 8023ce2:	1c43      	adds	r3, r0, #1
 8023ce4:	89a3      	ldrh	r3, [r4, #12]
 8023ce6:	bf15      	itete	ne
 8023ce8:	6560      	strne	r0, [r4, #84]	; 0x54
 8023cea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023cee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023cf2:	81a3      	strheq	r3, [r4, #12]
 8023cf4:	bf18      	it	ne
 8023cf6:	81a3      	strhne	r3, [r4, #12]
 8023cf8:	bd10      	pop	{r4, pc}

08023cfa <__sclose>:
 8023cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023cfe:	f000 b81b 	b.w	8023d38 <_close_r>
	...

08023d04 <_write_r>:
 8023d04:	b538      	push	{r3, r4, r5, lr}
 8023d06:	4d07      	ldr	r5, [pc, #28]	; (8023d24 <_write_r+0x20>)
 8023d08:	4604      	mov	r4, r0
 8023d0a:	4608      	mov	r0, r1
 8023d0c:	4611      	mov	r1, r2
 8023d0e:	2200      	movs	r2, #0
 8023d10:	602a      	str	r2, [r5, #0]
 8023d12:	461a      	mov	r2, r3
 8023d14:	f7f0 ff59 	bl	8014bca <_write>
 8023d18:	1c43      	adds	r3, r0, #1
 8023d1a:	d102      	bne.n	8023d22 <_write_r+0x1e>
 8023d1c:	682b      	ldr	r3, [r5, #0]
 8023d1e:	b103      	cbz	r3, 8023d22 <_write_r+0x1e>
 8023d20:	6023      	str	r3, [r4, #0]
 8023d22:	bd38      	pop	{r3, r4, r5, pc}
 8023d24:	20014340 	.word	0x20014340

08023d28 <abort>:
 8023d28:	b508      	push	{r3, lr}
 8023d2a:	2006      	movs	r0, #6
 8023d2c:	f000 f8b2 	bl	8023e94 <raise>
 8023d30:	2001      	movs	r0, #1
 8023d32:	f7f0 ff23 	bl	8014b7c <_exit>
	...

08023d38 <_close_r>:
 8023d38:	b538      	push	{r3, r4, r5, lr}
 8023d3a:	4d06      	ldr	r5, [pc, #24]	; (8023d54 <_close_r+0x1c>)
 8023d3c:	2300      	movs	r3, #0
 8023d3e:	4604      	mov	r4, r0
 8023d40:	4608      	mov	r0, r1
 8023d42:	602b      	str	r3, [r5, #0]
 8023d44:	f7f0 ff5d 	bl	8014c02 <_close>
 8023d48:	1c43      	adds	r3, r0, #1
 8023d4a:	d102      	bne.n	8023d52 <_close_r+0x1a>
 8023d4c:	682b      	ldr	r3, [r5, #0]
 8023d4e:	b103      	cbz	r3, 8023d52 <_close_r+0x1a>
 8023d50:	6023      	str	r3, [r4, #0]
 8023d52:	bd38      	pop	{r3, r4, r5, pc}
 8023d54:	20014340 	.word	0x20014340

08023d58 <_fstat_r>:
 8023d58:	b538      	push	{r3, r4, r5, lr}
 8023d5a:	4d07      	ldr	r5, [pc, #28]	; (8023d78 <_fstat_r+0x20>)
 8023d5c:	2300      	movs	r3, #0
 8023d5e:	4604      	mov	r4, r0
 8023d60:	4608      	mov	r0, r1
 8023d62:	4611      	mov	r1, r2
 8023d64:	602b      	str	r3, [r5, #0]
 8023d66:	f7f0 ff58 	bl	8014c1a <_fstat>
 8023d6a:	1c43      	adds	r3, r0, #1
 8023d6c:	d102      	bne.n	8023d74 <_fstat_r+0x1c>
 8023d6e:	682b      	ldr	r3, [r5, #0]
 8023d70:	b103      	cbz	r3, 8023d74 <_fstat_r+0x1c>
 8023d72:	6023      	str	r3, [r4, #0]
 8023d74:	bd38      	pop	{r3, r4, r5, pc}
 8023d76:	bf00      	nop
 8023d78:	20014340 	.word	0x20014340

08023d7c <_isatty_r>:
 8023d7c:	b538      	push	{r3, r4, r5, lr}
 8023d7e:	4d06      	ldr	r5, [pc, #24]	; (8023d98 <_isatty_r+0x1c>)
 8023d80:	2300      	movs	r3, #0
 8023d82:	4604      	mov	r4, r0
 8023d84:	4608      	mov	r0, r1
 8023d86:	602b      	str	r3, [r5, #0]
 8023d88:	f7f0 ff57 	bl	8014c3a <_isatty>
 8023d8c:	1c43      	adds	r3, r0, #1
 8023d8e:	d102      	bne.n	8023d96 <_isatty_r+0x1a>
 8023d90:	682b      	ldr	r3, [r5, #0]
 8023d92:	b103      	cbz	r3, 8023d96 <_isatty_r+0x1a>
 8023d94:	6023      	str	r3, [r4, #0]
 8023d96:	bd38      	pop	{r3, r4, r5, pc}
 8023d98:	20014340 	.word	0x20014340

08023d9c <_lseek_r>:
 8023d9c:	b538      	push	{r3, r4, r5, lr}
 8023d9e:	4d07      	ldr	r5, [pc, #28]	; (8023dbc <_lseek_r+0x20>)
 8023da0:	4604      	mov	r4, r0
 8023da2:	4608      	mov	r0, r1
 8023da4:	4611      	mov	r1, r2
 8023da6:	2200      	movs	r2, #0
 8023da8:	602a      	str	r2, [r5, #0]
 8023daa:	461a      	mov	r2, r3
 8023dac:	f7f0 ff50 	bl	8014c50 <_lseek>
 8023db0:	1c43      	adds	r3, r0, #1
 8023db2:	d102      	bne.n	8023dba <_lseek_r+0x1e>
 8023db4:	682b      	ldr	r3, [r5, #0]
 8023db6:	b103      	cbz	r3, 8023dba <_lseek_r+0x1e>
 8023db8:	6023      	str	r3, [r4, #0]
 8023dba:	bd38      	pop	{r3, r4, r5, pc}
 8023dbc:	20014340 	.word	0x20014340

08023dc0 <_realloc_r>:
 8023dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023dc4:	4680      	mov	r8, r0
 8023dc6:	4614      	mov	r4, r2
 8023dc8:	460e      	mov	r6, r1
 8023dca:	b921      	cbnz	r1, 8023dd6 <_realloc_r+0x16>
 8023dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023dd0:	4611      	mov	r1, r2
 8023dd2:	f7fe bd59 	b.w	8022888 <_malloc_r>
 8023dd6:	b92a      	cbnz	r2, 8023de4 <_realloc_r+0x24>
 8023dd8:	f7fe fcea 	bl	80227b0 <_free_r>
 8023ddc:	4625      	mov	r5, r4
 8023dde:	4628      	mov	r0, r5
 8023de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023de4:	f000 f872 	bl	8023ecc <_malloc_usable_size_r>
 8023de8:	4284      	cmp	r4, r0
 8023dea:	4607      	mov	r7, r0
 8023dec:	d802      	bhi.n	8023df4 <_realloc_r+0x34>
 8023dee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8023df2:	d812      	bhi.n	8023e1a <_realloc_r+0x5a>
 8023df4:	4621      	mov	r1, r4
 8023df6:	4640      	mov	r0, r8
 8023df8:	f7fe fd46 	bl	8022888 <_malloc_r>
 8023dfc:	4605      	mov	r5, r0
 8023dfe:	2800      	cmp	r0, #0
 8023e00:	d0ed      	beq.n	8023dde <_realloc_r+0x1e>
 8023e02:	42bc      	cmp	r4, r7
 8023e04:	4622      	mov	r2, r4
 8023e06:	4631      	mov	r1, r6
 8023e08:	bf28      	it	cs
 8023e0a:	463a      	movcs	r2, r7
 8023e0c:	f7fe fca0 	bl	8022750 <memcpy>
 8023e10:	4631      	mov	r1, r6
 8023e12:	4640      	mov	r0, r8
 8023e14:	f7fe fccc 	bl	80227b0 <_free_r>
 8023e18:	e7e1      	b.n	8023dde <_realloc_r+0x1e>
 8023e1a:	4635      	mov	r5, r6
 8023e1c:	e7df      	b.n	8023dde <_realloc_r+0x1e>
	...

08023e20 <_read_r>:
 8023e20:	b538      	push	{r3, r4, r5, lr}
 8023e22:	4d07      	ldr	r5, [pc, #28]	; (8023e40 <_read_r+0x20>)
 8023e24:	4604      	mov	r4, r0
 8023e26:	4608      	mov	r0, r1
 8023e28:	4611      	mov	r1, r2
 8023e2a:	2200      	movs	r2, #0
 8023e2c:	602a      	str	r2, [r5, #0]
 8023e2e:	461a      	mov	r2, r3
 8023e30:	f7f0 feae 	bl	8014b90 <_read>
 8023e34:	1c43      	adds	r3, r0, #1
 8023e36:	d102      	bne.n	8023e3e <_read_r+0x1e>
 8023e38:	682b      	ldr	r3, [r5, #0]
 8023e3a:	b103      	cbz	r3, 8023e3e <_read_r+0x1e>
 8023e3c:	6023      	str	r3, [r4, #0]
 8023e3e:	bd38      	pop	{r3, r4, r5, pc}
 8023e40:	20014340 	.word	0x20014340

08023e44 <_raise_r>:
 8023e44:	291f      	cmp	r1, #31
 8023e46:	b538      	push	{r3, r4, r5, lr}
 8023e48:	4604      	mov	r4, r0
 8023e4a:	460d      	mov	r5, r1
 8023e4c:	d904      	bls.n	8023e58 <_raise_r+0x14>
 8023e4e:	2316      	movs	r3, #22
 8023e50:	6003      	str	r3, [r0, #0]
 8023e52:	f04f 30ff 	mov.w	r0, #4294967295
 8023e56:	bd38      	pop	{r3, r4, r5, pc}
 8023e58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023e5a:	b112      	cbz	r2, 8023e62 <_raise_r+0x1e>
 8023e5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023e60:	b94b      	cbnz	r3, 8023e76 <_raise_r+0x32>
 8023e62:	4620      	mov	r0, r4
 8023e64:	f000 f830 	bl	8023ec8 <_getpid_r>
 8023e68:	462a      	mov	r2, r5
 8023e6a:	4601      	mov	r1, r0
 8023e6c:	4620      	mov	r0, r4
 8023e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023e72:	f000 b817 	b.w	8023ea4 <_kill_r>
 8023e76:	2b01      	cmp	r3, #1
 8023e78:	d00a      	beq.n	8023e90 <_raise_r+0x4c>
 8023e7a:	1c59      	adds	r1, r3, #1
 8023e7c:	d103      	bne.n	8023e86 <_raise_r+0x42>
 8023e7e:	2316      	movs	r3, #22
 8023e80:	6003      	str	r3, [r0, #0]
 8023e82:	2001      	movs	r0, #1
 8023e84:	e7e7      	b.n	8023e56 <_raise_r+0x12>
 8023e86:	2400      	movs	r4, #0
 8023e88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023e8c:	4628      	mov	r0, r5
 8023e8e:	4798      	blx	r3
 8023e90:	2000      	movs	r0, #0
 8023e92:	e7e0      	b.n	8023e56 <_raise_r+0x12>

08023e94 <raise>:
 8023e94:	4b02      	ldr	r3, [pc, #8]	; (8023ea0 <raise+0xc>)
 8023e96:	4601      	mov	r1, r0
 8023e98:	6818      	ldr	r0, [r3, #0]
 8023e9a:	f7ff bfd3 	b.w	8023e44 <_raise_r>
 8023e9e:	bf00      	nop
 8023ea0:	20000140 	.word	0x20000140

08023ea4 <_kill_r>:
 8023ea4:	b538      	push	{r3, r4, r5, lr}
 8023ea6:	4d07      	ldr	r5, [pc, #28]	; (8023ec4 <_kill_r+0x20>)
 8023ea8:	2300      	movs	r3, #0
 8023eaa:	4604      	mov	r4, r0
 8023eac:	4608      	mov	r0, r1
 8023eae:	4611      	mov	r1, r2
 8023eb0:	602b      	str	r3, [r5, #0]
 8023eb2:	f7f0 fe51 	bl	8014b58 <_kill>
 8023eb6:	1c43      	adds	r3, r0, #1
 8023eb8:	d102      	bne.n	8023ec0 <_kill_r+0x1c>
 8023eba:	682b      	ldr	r3, [r5, #0]
 8023ebc:	b103      	cbz	r3, 8023ec0 <_kill_r+0x1c>
 8023ebe:	6023      	str	r3, [r4, #0]
 8023ec0:	bd38      	pop	{r3, r4, r5, pc}
 8023ec2:	bf00      	nop
 8023ec4:	20014340 	.word	0x20014340

08023ec8 <_getpid_r>:
 8023ec8:	f7f0 be3e 	b.w	8014b48 <_getpid>

08023ecc <_malloc_usable_size_r>:
 8023ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023ed0:	1f18      	subs	r0, r3, #4
 8023ed2:	2b00      	cmp	r3, #0
 8023ed4:	bfbc      	itt	lt
 8023ed6:	580b      	ldrlt	r3, [r1, r0]
 8023ed8:	18c0      	addlt	r0, r0, r3
 8023eda:	4770      	bx	lr

08023edc <_init>:
 8023edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ede:	bf00      	nop
 8023ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023ee2:	bc08      	pop	{r3}
 8023ee4:	469e      	mov	lr, r3
 8023ee6:	4770      	bx	lr

08023ee8 <_fini>:
 8023ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023eea:	bf00      	nop
 8023eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023eee:	bc08      	pop	{r3}
 8023ef0:	469e      	mov	lr, r3
 8023ef2:	4770      	bx	lr
