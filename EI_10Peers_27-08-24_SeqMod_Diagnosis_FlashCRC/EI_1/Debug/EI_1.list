
EI_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027f70  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006064  08028170  08028170  00038170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e1d4  0802e1d4  000404e4  2**0
                  CONTENTS
  4 .ARM          00000008  0802e1d4  0802e1d4  0003e1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e1dc  0802e1dc  000404e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e1dc  0802e1dc  0003e1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802e1e0  0802e1e0  0003e1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a4  20000000  0802e1e4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200003a4  0802e588  000403a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000444  0802e628  00040444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00015e40  200004e4  0802e6c8  000404e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20016324  0802e6c8  00046324  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000404e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003abbf  00000000  00000000  00040512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000089ba  00000000  00000000  0007b0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002598  00000000  00000000  00083a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002298  00000000  00000000  00086028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004497a  00000000  00000000  000882c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004a514  00000000  00000000  000ccc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013c69b  00000000  00000000  0011714e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002537e9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a424  00000000  00000000  0025383c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200004e4 	.word	0x200004e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08028158 	.word	0x08028158

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200004e8 	.word	0x200004e8
 800023c:	08028158 	.word	0x08028158

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint8_t Commands_List[20][50] = {{0,},};
uint8_t Commands_Count = 0;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000fc4 	.word	0x20000fc4
 8000a70:	08028170 	.word	0x08028170
 8000a74:	0802817c 	.word	0x0802817c
 8000a78:	0802818c 	.word	0x0802818c
 8000a7c:	0802819c 	.word	0x0802819c
 8000a80:	080281b0 	.word	0x080281b0
 8000a84:	080281c4 	.word	0x080281c4
 8000a88:	080281d8 	.word	0x080281d8
 8000a8c:	080281e4 	.word	0x080281e4
 8000a90:	200013ac 	.word	0x200013ac

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f01e fe5f 	bl	801f768 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f026 f98b 	bl	8026dd0 <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000dcc4 	.word	0x2000dcc4
 8000ac8:	20000340 	.word	0x20000340

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f01b fd33 	bl	801c548 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f01b fd23 	bl	801c548 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f01b fd12 	bl	801c548 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000fbc 	.word	0x20000fbc
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f025 ff4e 	bl	8026a1c <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00f fd09 	bl	801059c <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f018 fcf7 	bl	8019588 <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f018 fca6 	bl	8019508 <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f026 f804 	bl	8026bec <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f026 f878 	bl	8026d24 <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f025 ffce 	bl	8026bec <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f026 f849 	bl	8026d24 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f025 ff9c 	bl	8026bec <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f026 f835 	bl	8026d24 <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f025 ff7f 	bl	8026bec <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f025 ff71 	bl	8026bec <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f026 f80a 	bl	8026d24 <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f025 ff51 	bl	8026bec <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f025 ff43 	bl	8026bec <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f025 ffdc 	bl	8026d24 <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f025 ff1e 	bl	8026bec <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f025 fefc 	bl	8026bec <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f025 fee3 	bl	8026bec <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f025 fed5 	bl	8026bec <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f025 fec7 	bl	8026bec <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f025 ff5f 	bl	8026d24 <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f010 f945 	bl	8011104 <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000c080 	.word	0x2000c080
 8000e88:	080281ec 	.word	0x080281ec
 8000e8c:	20000bba 	.word	0x20000bba
 8000e90:	08028204 	.word	0x08028204
 8000e94:	20000ff6 	.word	0x20000ff6
 8000e98:	08028244 	.word	0x08028244
 8000e9c:	20000bbb 	.word	0x20000bbb
 8000ea0:	08028258 	.word	0x08028258
 8000ea4:	20001028 	.word	0x20001028
 8000ea8:	08028274 	.word	0x08028274
 8000eac:	08028290 	.word	0x08028290
 8000eb0:	2000308c 	.word	0x2000308c
 8000eb4:	080282a0 	.word	0x080282a0
 8000eb8:	2000105a 	.word	0x2000105a
 8000ebc:	080282b4 	.word	0x080282b4
 8000ec0:	2000108c 	.word	0x2000108c
 8000ec4:	080282c4 	.word	0x080282c4
 8000ec8:	200010be 	.word	0x200010be
 8000ecc:	200010f0 	.word	0x200010f0
 8000ed0:	20001122 	.word	0x20001122
 8000ed4:	080282e0 	.word	0x080282e0
 8000ed8:	20001154 	.word	0x20001154
 8000edc:	080282f0 	.word	0x080282f0
 8000ee0:	20001186 	.word	0x20001186

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f025 fd46 	bl	80269ac <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000fc4 	.word	0x20000fc4
 8000f48:	200013ac 	.word	0x200013ac

08000f4c <CheckEIPC_DAT_CRC>:
		printf("%s\n",Commands_List[Traverser]);
	}
}

void CheckEIPC_DAT_CRC(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	static uint32_t CheckClk = 0;

	if(HAL_Elaps_Ticks(CheckClk) > FOUR_SEC)
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <CheckEIPC_DAT_CRC+0x60>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f00f fb21 	bl	801059c <HAL_Elaps_Ticks>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f60:	d921      	bls.n	8000fa6 <CheckEIPC_DAT_CRC+0x5a>
	{
		if((DatCrcXchangeSelf_st.App_CRC != DatCrcXchangeOther_st.App_CRC) && (DatCrcXchangeOther_st.App_CRC != 0))
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <CheckEIPC_DAT_CRC+0x64>)
 8000f64:	881a      	ldrh	r2, [r3, #0]
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <CheckEIPC_DAT_CRC+0x68>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d012      	beq.n	8000f94 <CheckEIPC_DAT_CRC+0x48>
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <CheckEIPC_DAT_CRC+0x68>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00e      	beq.n	8000f94 <CheckEIPC_DAT_CRC+0x48>
		{
			printf("\nEIPC's are not in Sync.....!!!!!\n");
 8000f76:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <CheckEIPC_DAT_CRC+0x6c>)
 8000f78:	f025 fed4 	bl	8026d24 <puts>
			printf("Self CRC:%04X\n",DatCrcXchangeSelf_st.App_CRC);
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <CheckEIPC_DAT_CRC+0x64>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <CheckEIPC_DAT_CRC+0x70>)
 8000f84:	f025 fe32 	bl	8026bec <iprintf>
			printf("Other CRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <CheckEIPC_DAT_CRC+0x68>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <CheckEIPC_DAT_CRC+0x74>)
 8000f90:	f025 fe2c 	bl	8026bec <iprintf>
		}


#ifdef EI_1
		TransmitCanPkt(DAT_CRC_EXCHANGE_1);
 8000f94:	f240 2009 	movw	r0, #521	; 0x209
 8000f98:	f010 f8b4 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(DAT_CRC_EXCHANGE_2);
#endif

		CheckClk = HAL_GetTick();
 8000f9c:	f018 fe1c 	bl	8019bd8 <HAL_GetTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a02      	ldr	r2, [pc, #8]	; (8000fac <CheckEIPC_DAT_CRC+0x60>)
 8000fa4:	6013      	str	r3, [r2, #0]

	}
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200013b0 	.word	0x200013b0
 8000fb0:	20000bb4 	.word	0x20000bb4
 8000fb4:	20000bb8 	.word	0x20000bb8
 8000fb8:	0802832c 	.word	0x0802832c
 8000fbc:	08028350 	.word	0x08028350
 8000fc0:	08028360 	.word	0x08028360

08000fc4 <Check_OnlineDiag_OFC_Modem>:
		0x40
};


void Check_OnlineDiag_OFC_Modem(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	static unsigned int ui_Online_DigChkTics;
	if(HAL_Elaps_Ticks(ui_Online_DigChkTics) > (SEVEN*ONE_SEC))           // wait for 30 Sec
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <Check_OnlineDiag_OFC_Modem+0x2c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00f fae5 	bl	801059c <HAL_Elaps_Ticks>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d906      	bls.n	8000fea <Check_OnlineDiag_OFC_Modem+0x26>
	{
		Check_Online_Dignostic_RIU();                                //Checking the online dignostic status of network of OFC modem
 8000fdc:	f000 f80a 	bl	8000ff4 <Check_Online_Dignostic_RIU>
		ui_Online_DigChkTics = HAL_GetTick();
 8000fe0:	f018 fdfa 	bl	8019bd8 <HAL_GetTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a02      	ldr	r2, [pc, #8]	; (8000ff0 <Check_OnlineDiag_OFC_Modem+0x2c>)
 8000fe8:	6013      	str	r3, [r2, #0]
	}
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20002370 	.word	0x20002370

08000ff4 <Check_Online_Dignostic_RIU>:

void Check_Online_Dignostic_RIU(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
	//static unsigned char CAN_Trans_flag,temp1,temp2,temp3,Failure_check_flag,Flag = 4,suc_Hold_Flag =1;
	static unsigned char CAN_Trans_flag,temp1,temp2,temp3,Flag = 4,suc_Hold_Flag =1;
	unsigned char index,insert_index = 0,check_index = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71bb      	strb	r3, [r7, #6]
 8000ffe:	2300      	movs	r3, #0
 8001000:	717b      	strb	r3, [r7, #5]
	for(index = 0;index< 31; index++)
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e069      	b.n	80010dc <Check_Online_Dignostic_RIU+0xe8>
	{
		if(Online_diag_flag[index] == 0)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4a6f      	ldr	r2, [pc, #444]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d108      	bne.n	8001024 <Check_Online_Dignostic_RIU+0x30>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],0);
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	b298      	uxth	r0, r3
 8001016:	797b      	ldrb	r3, [r7, #5]
 8001018:	4a6c      	ldr	r2, [pc, #432]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 800101a:	441a      	add	r2, r3
 800101c:	2300      	movs	r3, #0
 800101e:	2102      	movs	r1, #2
 8001020:	f7ff fb84 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 1)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4a68      	ldr	r2, [pc, #416]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001028:	5cd3      	ldrb	r3, [r2, r3]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d108      	bne.n	8001040 <Check_Online_Dignostic_RIU+0x4c>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],1);
 800102e:	79bb      	ldrb	r3, [r7, #6]
 8001030:	b298      	uxth	r0, r3
 8001032:	797b      	ldrb	r3, [r7, #5]
 8001034:	4a65      	ldr	r2, [pc, #404]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 8001036:	441a      	add	r2, r3
 8001038:	2301      	movs	r3, #1
 800103a:	2102      	movs	r1, #2
 800103c:	f7ff fb76 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 2)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4a61      	ldr	r2, [pc, #388]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001044:	5cd3      	ldrb	r3, [r2, r3]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d108      	bne.n	800105c <Check_Online_Dignostic_RIU+0x68>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],2);
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	b298      	uxth	r0, r3
 800104e:	797b      	ldrb	r3, [r7, #5]
 8001050:	4a5e      	ldr	r2, [pc, #376]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 8001052:	441a      	add	r2, r3
 8001054:	2302      	movs	r3, #2
 8001056:	2102      	movs	r1, #2
 8001058:	f7ff fb68 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 3)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4a5a      	ldr	r2, [pc, #360]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001060:	5cd3      	ldrb	r3, [r2, r3]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d108      	bne.n	8001078 <Check_Online_Dignostic_RIU+0x84>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],3);
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	b298      	uxth	r0, r3
 800106a:	797b      	ldrb	r3, [r7, #5]
 800106c:	4a57      	ldr	r2, [pc, #348]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 800106e:	441a      	add	r2, r3
 8001070:	2303      	movs	r3, #3
 8001072:	2102      	movs	r1, #2
 8001074:	f7ff fb5a 	bl	800072c <InsertBits>

		}
		if(HAL_Elaps_Ticks(sui_failure_determine_clock) > (FIFTEEN*ONE_SEC))
 8001078:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <Check_Online_Dignostic_RIU+0x1dc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f00f fa8d 	bl	801059c <HAL_Elaps_Ticks>
 8001082:	4603      	mov	r3, r0
 8001084:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001088:	4293      	cmp	r3, r2
 800108a:	d913      	bls.n	80010b4 <Check_Online_Dignostic_RIU+0xc0>
		{
			if(Online_diag_flag[index] > 0)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4a4e      	ldr	r2, [pc, #312]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00e      	beq.n	80010b4 <Check_Online_Dignostic_RIU+0xc0>
			{
				InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],3);
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	b298      	uxth	r0, r3
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 800109e:	441a      	add	r2, r3
 80010a0:	2303      	movs	r3, #3
 80010a2:	2102      	movs	r1, #2
 80010a4:	f7ff fb42 	bl	800072c <InsertBits>
				ofc_flag1 = 1;
 80010a8:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <Check_Online_Dignostic_RIU+0x1e0>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
				//	ofc_flag1 = 1;
				printf("##############################################Both fiber link failure ocuired$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
 80010ae:	484a      	ldr	r0, [pc, #296]	; (80011d8 <Check_Online_Dignostic_RIU+0x1e4>)
 80010b0:	f025 fd9c 	bl	8026bec <iprintf>

			}
		}
		insert_index =	insert_index + 2;
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	3302      	adds	r3, #2
 80010b8:	71bb      	strb	r3, [r7, #6]
		if(insert_index == 8)
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d104      	bne.n	80010ca <Check_Online_Dignostic_RIU+0xd6>
		{
			insert_index = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	71bb      	strb	r3, [r7, #6]
			check_index++;
 80010c4:	797b      	ldrb	r3, [r7, #5]
 80010c6:	3301      	adds	r3, #1
 80010c8:	717b      	strb	r3, [r7, #5]
		}
		if((check_index == 7)&&(insert_index == 6))
 80010ca:	797b      	ldrb	r3, [r7, #5]
 80010cc:	2b07      	cmp	r3, #7
 80010ce:	d102      	bne.n	80010d6 <Check_Online_Dignostic_RIU+0xe2>
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d006      	beq.n	80010e4 <Check_Online_Dignostic_RIU+0xf0>
	for(index = 0;index< 31; index++)
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	3301      	adds	r3, #1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b1e      	cmp	r3, #30
 80010e0:	d992      	bls.n	8001008 <Check_Online_Dignostic_RIU+0x14>
 80010e2:	e000      	b.n	80010e6 <Check_Online_Dignostic_RIU+0xf2>
		{
			break;
 80010e4:	bf00      	nop
		}
	}
	for(index = 0;index< 31; index++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	e010      	b.n	800110e <Check_Online_Dignostic_RIU+0x11a>
	{
		if((Online_diag_flag[index] > 0)&&(Online_diag_flag[index] < 4))
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4a36      	ldr	r2, [pc, #216]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 80010f0:	5cd3      	ldrb	r3, [r2, r3]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <Check_Online_Dignostic_RIU+0x114>
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4a33      	ldr	r2, [pc, #204]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 80010fa:	5cd3      	ldrb	r3, [r2, r3]
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d803      	bhi.n	8001108 <Check_Online_Dignostic_RIU+0x114>
		{
			temp1 = index;
 8001100:	4a36      	ldr	r2, [pc, #216]	; (80011dc <Check_Online_Dignostic_RIU+0x1e8>)
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	7013      	strb	r3, [r2, #0]
			break;
 8001106:	e005      	b.n	8001114 <Check_Online_Dignostic_RIU+0x120>
	for(index = 0;index< 31; index++)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	3301      	adds	r3, #1
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b1e      	cmp	r3, #30
 8001112:	d9eb      	bls.n	80010ec <Check_Online_Dignostic_RIU+0xf8>
		}
	}
	temp2 = temp1;
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <Check_Online_Dignostic_RIU+0x1e8>)
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <Check_Online_Dignostic_RIU+0x1ec>)
 800111a:	701a      	strb	r2, [r3, #0]
	temp3 = index;
 800111c:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f0>)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	7013      	strb	r3, [r2, #0]

	if(temp2 != temp3)
 8001122:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <Check_Online_Dignostic_RIU+0x1ec>)
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f0>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d019      	beq.n	8001162 <Check_Online_Dignostic_RIU+0x16e>
	{
		printf("\n***********************FIBER LINK OK******************************\n");
 800112e:	482e      	ldr	r0, [pc, #184]	; (80011e8 <Check_Online_Dignostic_RIU+0x1f4>)
 8001130:	f025 fdf8 	bl	8026d24 <puts>

		//	ofc_flag2 =0;
		suc_Hold_Flag = 1;
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <Check_Online_Dignostic_RIU+0x1f8>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
		Failure_check_flag++;
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001144:	701a      	strb	r2, [r3, #0]
		if(ofc_flag1 > 4)
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <Check_Online_Dignostic_RIU+0x1e0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b04      	cmp	r3, #4
 800114c:	d90c      	bls.n	8001168 <Check_Online_Dignostic_RIU+0x174>
		{
			ofc_flag1 =0;
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <Check_Online_Dignostic_RIU+0x1e0>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
			Failure_check_flag =4;
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001156:	2204      	movs	r2, #4
 8001158:	701a      	strb	r2, [r3, #0]
			printf("\n****************************ASSIGNED***********************\n");
 800115a:	4826      	ldr	r0, [pc, #152]	; (80011f4 <Check_Online_Dignostic_RIU+0x200>)
 800115c:	f025 fde2 	bl	8026d24 <puts>
 8001160:	e002      	b.n	8001168 <Check_Online_Dignostic_RIU+0x174>
			 */
		}

	}
	else
		Failure_check_flag = 0;
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
	if(Failure_check_flag == 250)
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2bfa      	cmp	r3, #250	; 0xfa
 800116e:	d102      	bne.n	8001176 <Check_Online_Dignostic_RIU+0x182>
	{
		Failure_check_flag = 6;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001172:	2206      	movs	r2, #6
 8001174:	701a      	strb	r2, [r3, #0]
	}

	if(temp2 == temp3)
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <Check_Online_Dignostic_RIU+0x1ec>)
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d142      	bne.n	8001208 <Check_Online_Dignostic_RIU+0x214>
	{
		CAN_Trans_flag++;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <Check_Online_Dignostic_RIU+0x204>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <Check_Online_Dignostic_RIU+0x204>)
 800118c:	701a      	strb	r2, [r3, #0]
		printf("\n************************FIBER LINK FAIL*****************************\n");
 800118e:	481b      	ldr	r0, [pc, #108]	; (80011fc <Check_Online_Dignostic_RIU+0x208>)
 8001190:	f025 fdc8 	bl	8026d24 <puts>
		//		Online_diag_flag[index] = 3; //raviteja

		if((4 == Flag)&&(1 == suc_Hold_Flag))
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <Check_Online_Dignostic_RIU+0x20c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b04      	cmp	r3, #4
 800119a:	d138      	bne.n	800120e <Check_Online_Dignostic_RIU+0x21a>
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <Check_Online_Dignostic_RIU+0x1f8>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d134      	bne.n	800120e <Check_Online_Dignostic_RIU+0x21a>
		{
			if(HAL_Elaps_Ticks(sui_failure_determine_clock) > (12*ONE_SEC))
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <Check_Online_Dignostic_RIU+0x1dc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00f f9f7 	bl	801059c <HAL_Elaps_Ticks>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d92a      	bls.n	800120e <Check_Online_Dignostic_RIU+0x21a>
			{
				suc_Hold_Flag = 0;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <Check_Online_Dignostic_RIU+0x1f8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
				printf("\n Sending the packet to MIE 1 and MIE 2");
 80011be:	4811      	ldr	r0, [pc, #68]	; (8001204 <Check_Online_Dignostic_RIU+0x210>)
 80011c0:	f025 fd14 	bl	8026bec <iprintf>
 80011c4:	e023      	b.n	800120e <Check_Online_Dignostic_RIU+0x21a>
 80011c6:	bf00      	nop
 80011c8:	20002368 	.word	0x20002368
 80011cc:	200013b4 	.word	0x200013b4
 80011d0:	20002360 	.word	0x20002360
 80011d4:	20002364 	.word	0x20002364
 80011d8:	08028370 	.word	0x08028370
 80011dc:	20002374 	.word	0x20002374
 80011e0:	20002375 	.word	0x20002375
 80011e4:	20002376 	.word	0x20002376
 80011e8:	080283e4 	.word	0x080283e4
 80011ec:	20000308 	.word	0x20000308
 80011f0:	2000235c 	.word	0x2000235c
 80011f4:	08028428 	.word	0x08028428
 80011f8:	20002377 	.word	0x20002377
 80011fc:	08028468 	.word	0x08028468
 8001200:	20000309 	.word	0x20000309
 8001204:	080284b0 	.word	0x080284b0

			}
		}
	}
	else
		CAN_Trans_flag = 0;
 8001208:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
	if(CAN_Trans_flag == 250)
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2bfa      	cmp	r3, #250	; 0xfa
 8001214:	d102      	bne.n	800121c <Check_Online_Dignostic_RIU+0x228>
	{
		CAN_Trans_flag = 6;
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 8001218:	2206      	movs	r2, #6
 800121a:	701a      	strb	r2, [r3, #0]
	}
	if((CAN_Trans_flag > 3) && (CAN_Trans_flag < 6) && (Flag == 2))
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d915      	bls.n	8001250 <Check_Online_Dignostic_RIU+0x25c>
 8001224:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b05      	cmp	r3, #5
 800122a:	d811      	bhi.n	8001250 <Check_Online_Dignostic_RIU+0x25c>
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d10d      	bne.n	8001250 <Check_Online_Dignostic_RIU+0x25c>
		//			{
		//
		//			printf("\n222222Online_Diag_var.Online_Diag_Buf[%d]=%d",i,Online_Diag_var.Online_Diag_Buf[i]);
		//			}

		printf("\nSENT ONLINE DIAG CAN PACKT 2 TIMES WHEN FAILURE\n");
 8001234:	4825      	ldr	r0, [pc, #148]	; (80012cc <Check_Online_Dignostic_RIU+0x2d8>)
 8001236:	f025 fd75 	bl	8026d24 <puts>
		default:
			printf("ERROR                  \t");
		}
		 */

		Failure_check_flag = 0;
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <Check_Online_Dignostic_RIU+0x2dc>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
		Flag = 4;
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 8001242:	2204      	movs	r2, #4
 8001244:	701a      	strb	r2, [r3, #0]
		memset(Online_diag_flag,'\0',sizeof(Online_diag_flag));
 8001246:	2206      	movs	r2, #6
 8001248:	2100      	movs	r1, #0
 800124a:	4822      	ldr	r0, [pc, #136]	; (80012d4 <Check_Online_Dignostic_RIU+0x2e0>)
 800124c:	f025 fbe6 	bl	8026a1c <memset>
		//printf("\n111******************FIBER LINK FAIL*****************************=%d\n",Online_diag_flag[index]);
	}
	if(((Failure_check_flag > 3) && (Failure_check_flag < 6)&&(Flag == 4))
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <Check_Online_Dignostic_RIU+0x2dc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d907      	bls.n	8001268 <Check_Online_Dignostic_RIU+0x274>
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <Check_Online_Dignostic_RIU+0x2dc>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b05      	cmp	r3, #5
 800125e:	d803      	bhi.n	8001268 <Check_Online_Dignostic_RIU+0x274>
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b04      	cmp	r3, #4
 8001266:	d003      	beq.n	8001270 <Check_Online_Dignostic_RIU+0x27c>
			||(ofc_flag1 > 1))
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d916      	bls.n	800129e <Check_Online_Dignostic_RIU+0x2aa>
	{
		if(ofc_flag1 >1)
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d904      	bls.n	8001282 <Check_Online_Dignostic_RIU+0x28e>
		{
			ofc_flag1++;
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 8001280:	6013      	str	r3, [r2, #0]
			//			{
			//
			//			printf("\n3333333Online_Diag_var.Online_Diag_Buf[%d]=%d",i,Online_Diag_var.Online_Diag_Buf[i]);
			//			}
		}
		printf("\nSENT ONLINE DIAG CAN PACKT 2 TIMES WHEN OK\n");
 8001282:	4816      	ldr	r0, [pc, #88]	; (80012dc <Check_Online_Dignostic_RIU+0x2e8>)
 8001284:	f025 fd4e 	bl	8026d24 <puts>
			break;
		default:
			printf("ERROR                  \t");
		}
		 */
		CAN_Trans_flag = 0;
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
		Flag = 2;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 8001290:	2202      	movs	r2, #2
 8001292:	701a      	strb	r2, [r3, #0]
		memset(Online_diag_flag,'\0',sizeof(Online_diag_flag));
 8001294:	2206      	movs	r2, #6
 8001296:	2100      	movs	r1, #0
 8001298:	480e      	ldr	r0, [pc, #56]	; (80012d4 <Check_Online_Dignostic_RIU+0x2e0>)
 800129a:	f025 fbbf 	bl	8026a1c <memset>
		//	printf("\n************************FIBER LINK FAIL*****************************=%d\n",Online_diag_flag[index]);
	}
	memset(suc_ReceivedMessage,'\0',sizeof(suc_ReceivedMessage));
 800129e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80012a2:	2100      	movs	r1, #0
 80012a4:	480e      	ldr	r0, [pc, #56]	; (80012e0 <Check_Online_Dignostic_RIU+0x2ec>)
 80012a6:	f025 fbb9 	bl	8026a1c <memset>
	temp2 = 0;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <Check_Online_Dignostic_RIU+0x2f0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
	temp3 = 0;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <Check_Online_Dignostic_RIU+0x2f4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
	temp1 = 0;
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <Check_Online_Dignostic_RIU+0x2f8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20002377 	.word	0x20002377
 80012c8:	20000309 	.word	0x20000309
 80012cc:	080284d8 	.word	0x080284d8
 80012d0:	2000235c 	.word	0x2000235c
 80012d4:	20002368 	.word	0x20002368
 80012d8:	20002364 	.word	0x20002364
 80012dc:	0802850c 	.word	0x0802850c
 80012e0:	200013bc 	.word	0x200013bc
 80012e4:	20002375 	.word	0x20002375
 80012e8:	20002376 	.word	0x20002376
 80012ec:	20002374 	.word	0x20002374

080012f0 <process_to_comReceived>:

void process_to_comReceived(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0


	unsigned int NoofBuffBytes = 0,Dat_Check;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
	//	static unsigned int ui_riucmdTxTics;
	static unsigned char EI_Buffer[300];
	NoofBuffBytes= CommReadAndFormMessage_Cmd(ONE_PORT,EI_Buffer,sizeof(EI_Buffer));
 80012fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012fe:	492f      	ldr	r1, [pc, #188]	; (80013bc <process_to_comReceived+0xcc>)
 8001300:	2001      	movs	r0, #1
 8001302:	f000 f86b 	bl	80013dc <CommReadAndFormMessage_Cmd>
 8001306:	4603      	mov	r3, r0
 8001308:	607b      	str	r3, [r7, #4]

	if(NoofBuffBytes >0)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d051      	beq.n	80013b4 <process_to_comReceived+0xc4>
	{
		if((EI_Buffer[0]>=0x01) &&(EI_Buffer[0] <=0x1F))
 8001310:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <process_to_comReceived+0xcc>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d048      	beq.n	80013aa <process_to_comReceived+0xba>
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <process_to_comReceived+0xcc>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b1f      	cmp	r3, #31
 800131e:	d844      	bhi.n	80013aa <process_to_comReceived+0xba>
		{
			Dat_Check = (int)(EI_Buffer[0]);
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <process_to_comReceived+0xcc>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	603b      	str	r3, [r7, #0]
			if(EI_Buffer[22] == 0xFF)
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <process_to_comReceived+0xcc>)
 8001328:	7d9b      	ldrb	r3, [r3, #22]
 800132a:	2bff      	cmp	r3, #255	; 0xff
 800132c:	d108      	bne.n	8001340 <process_to_comReceived+0x50>
			{
				Online_diag_flag[Dat_Check] =0;
 800132e:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <process_to_comReceived+0xd0>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	4413      	add	r3, r2
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
				printf("\n*******************************SLAVE_%d OK*****************************\n",Dat_Check);
 8001338:	6839      	ldr	r1, [r7, #0]
 800133a:	4822      	ldr	r0, [pc, #136]	; (80013c4 <process_to_comReceived+0xd4>)
 800133c:	f025 fc56 	bl	8026bec <iprintf>
				//ofc_flag1 =0;
			}
			if(EI_Buffer[22] == 0xBF)
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <process_to_comReceived+0xcc>)
 8001342:	7d9b      	ldrb	r3, [r3, #22]
 8001344:	2bbf      	cmp	r3, #191	; 0xbf
 8001346:	d10f      	bne.n	8001368 <process_to_comReceived+0x78>
			{
				Online_diag_flag[Dat_Check] = 1;
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <process_to_comReceived+0xd0>)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	4413      	add	r3, r2
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
				printf("\n***************************SLAVE_%d FB1_LINK_FAIL*********************\n",Dat_Check);
 8001352:	6839      	ldr	r1, [r7, #0]
 8001354:	481c      	ldr	r0, [pc, #112]	; (80013c8 <process_to_comReceived+0xd8>)
 8001356:	f025 fc49 	bl	8026bec <iprintf>
				//	ofc_flag2 =1;
				if(1 == ofc_flag1)
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <process_to_comReceived+0xdc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d102      	bne.n	8001368 <process_to_comReceived+0x78>
				{
					ofc_flag1 = 2;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <process_to_comReceived+0xdc>)
 8001364:	2202      	movs	r2, #2
 8001366:	601a      	str	r2, [r3, #0]
					//Failure_check_flag = 4;

				}
			}
			if(EI_Buffer[22] == 0x7F)
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <process_to_comReceived+0xcc>)
 800136a:	7d9b      	ldrb	r3, [r3, #22]
 800136c:	2b7f      	cmp	r3, #127	; 0x7f
 800136e:	d10f      	bne.n	8001390 <process_to_comReceived+0xa0>
			{
				Online_diag_flag[Dat_Check] = 2;
 8001370:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <process_to_comReceived+0xd0>)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	4413      	add	r3, r2
 8001376:	2202      	movs	r2, #2
 8001378:	701a      	strb	r2, [r3, #0]
				printf("\n********************************SLAVE_%d FB2_LINK_FAIL*******************\n",Dat_Check);
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	4814      	ldr	r0, [pc, #80]	; (80013d0 <process_to_comReceived+0xe0>)
 800137e:	f025 fc35 	bl	8026bec <iprintf>
				//ofc_flag2 =1;
				if(1 == ofc_flag1)
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <process_to_comReceived+0xdc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d102      	bne.n	8001390 <process_to_comReceived+0xa0>
				{
					ofc_flag1 = 2;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <process_to_comReceived+0xdc>)
 800138c:	2202      	movs	r2, #2
 800138e:	601a      	str	r2, [r3, #0]
					//Failure_check_flag = 4;

				}
			}
			if(EI_Buffer[22] == 0x3F)
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <process_to_comReceived+0xcc>)
 8001392:	7d9b      	ldrb	r3, [r3, #22]
 8001394:	2b3f      	cmp	r3, #63	; 0x3f
 8001396:	d108      	bne.n	80013aa <process_to_comReceived+0xba>
			{
				Online_diag_flag[Dat_Check] = 3;
 8001398:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <process_to_comReceived+0xd0>)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	4413      	add	r3, r2
 800139e:	2203      	movs	r2, #3
 80013a0:	701a      	strb	r2, [r3, #0]
				printf("\n*****************************SLAVE_%d FB1_&FB2_LINK_FAIL****************\n",Dat_Check);
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <process_to_comReceived+0xe4>)
 80013a6:	f025 fc21 	bl	8026bec <iprintf>
			}
		}
		sui_failure_determine_clock = HAL_GetTick();
 80013aa:	f018 fc15 	bl	8019bd8 <HAL_GetTick>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <process_to_comReceived+0xe8>)
 80013b2:	6013      	str	r3, [r2, #0]
	}
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20002378 	.word	0x20002378
 80013c0:	20002368 	.word	0x20002368
 80013c4:	08028538 	.word	0x08028538
 80013c8:	08028584 	.word	0x08028584
 80013cc:	20002364 	.word	0x20002364
 80013d0:	080285d0 	.word	0x080285d0
 80013d4:	0802861c 	.word	0x0802861c
 80013d8:	20002360 	.word	0x20002360

080013dc <CommReadAndFormMessage_Cmd>:

unsigned short int CommReadAndFormMessage_Cmd(unsigned short int us_Port,
		unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	80fb      	strh	r3, [r7, #6]
 80013e8:	4613      	mov	r3, r2
 80013ea:	80bb      	strh	r3, [r7, #4]
	static  char sign1 = 0,sign2 = 0,sign3 = 0,case_check=0;
	static unsigned long int store_index ;
	unsigned char suc_RByte = 0x00;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]
	static unsigned char suc_RcvStatus = 11;
	while(Com_DataReady(us_Port))
 80013f0:	e0a2      	b.n	8001538 <CommReadAndFormMessage_Cmd+0x15c>
	{
		suc_RByte = Com_Get_Byte(us_Port);
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f018 f8c6 	bl	8019588 <Com_Get_Byte>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
//			printf("%02X",suc_RByte);

		switch(suc_RcvStatus)
 8001400:	4b54      	ldr	r3, [pc, #336]	; (8001554 <CommReadAndFormMessage_Cmd+0x178>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	3b0b      	subs	r3, #11
 8001406:	2b03      	cmp	r3, #3
 8001408:	f200 8092 	bhi.w	8001530 <CommReadAndFormMessage_Cmd+0x154>
 800140c:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <CommReadAndFormMessage_Cmd+0x38>)
 800140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001412:	bf00      	nop
 8001414:	08001425 	.word	0x08001425
 8001418:	08001453 	.word	0x08001453
 800141c:	08001471 	.word	0x08001471
 8001420:	080014a3 	.word	0x080014a3
		{
		case 11:
			if((suc_RByte >= 0x01) && (suc_RByte <= 0x1F) && (suc_RByte != 0x0E))
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8086 	beq.w	8001538 <CommReadAndFormMessage_Cmd+0x15c>
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b1f      	cmp	r3, #31
 8001430:	f200 8082 	bhi.w	8001538 <CommReadAndFormMessage_Cmd+0x15c>
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b0e      	cmp	r3, #14
 8001438:	d07e      	beq.n	8001538 <CommReadAndFormMessage_Cmd+0x15c>
			{
				sign1 = suc_RByte;
 800143a:	4a47      	ldr	r2, [pc, #284]	; (8001558 <CommReadAndFormMessage_Cmd+0x17c>)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	7013      	strb	r3, [r2, #0]
				//	printf("sign11 = %X\n",sign1);
				store_index++;
 8001440:	4b46      	ldr	r3, [pc, #280]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	4a45      	ldr	r2, [pc, #276]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 8001448:	6013      	str	r3, [r2, #0]
				suc_RcvStatus = 12;
 800144a:	4b42      	ldr	r3, [pc, #264]	; (8001554 <CommReadAndFormMessage_Cmd+0x178>)
 800144c:	220c      	movs	r2, #12
 800144e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001450:	e072      	b.n	8001538 <CommReadAndFormMessage_Cmd+0x15c>

		case 12:
			if (suc_RByte == FUN_CODE)
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d16f      	bne.n	8001538 <CommReadAndFormMessage_Cmd+0x15c>
			{
				sign2 = suc_RByte;
 8001458:	4a41      	ldr	r2, [pc, #260]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	7013      	strb	r3, [r2, #0]
				store_index++;
 800145e:	4b3f      	ldr	r3, [pc, #252]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	4a3d      	ldr	r2, [pc, #244]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 8001466:	6013      	str	r3, [r2, #0]
				//	printf("sign12= %X\n ",sign2);
				suc_RcvStatus = 13;
 8001468:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <CommReadAndFormMessage_Cmd+0x178>)
 800146a:	220d      	movs	r2, #13
 800146c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800146e:	e063      	b.n	8001538 <CommReadAndFormMessage_Cmd+0x15c>

		case 13:
			if(suc_RByte == DBYT_CNT)
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	2b1c      	cmp	r3, #28
 8001474:	d10e      	bne.n	8001494 <CommReadAndFormMessage_Cmd+0xb8>
			{

				sign3 = suc_RByte;
 8001476:	4a3b      	ldr	r2, [pc, #236]	; (8001564 <CommReadAndFormMessage_Cmd+0x188>)
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	7013      	strb	r3, [r2, #0]
				store_index++;
 800147c:	4b37      	ldr	r3, [pc, #220]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	4a36      	ldr	r2, [pc, #216]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 8001484:	6013      	str	r3, [r2, #0]
				//	printf("sign13= %X\n ",sign3);
				suc_RcvStatus = 14;
 8001486:	4b33      	ldr	r3, [pc, #204]	; (8001554 <CommReadAndFormMessage_Cmd+0x178>)
 8001488:	220e      	movs	r2, #14
 800148a:	701a      	strb	r2, [r3, #0]
				case_check =1;
 800148c:	4b36      	ldr	r3, [pc, #216]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	e051      	b.n	8001538 <CommReadAndFormMessage_Cmd+0x15c>
			}
			else
			{
				store_index = 0;
 8001494:	4b31      	ldr	r3, [pc, #196]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
				suc_RcvStatus = 11;
 800149a:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <CommReadAndFormMessage_Cmd+0x178>)
 800149c:	220b      	movs	r2, #11
 800149e:	701a      	strb	r2, [r3, #0]
			}

			break;
 80014a0:	e04a      	b.n	8001538 <CommReadAndFormMessage_Cmd+0x15c>
		case 14:
			puc_ReadMsg[0] = sign1;
 80014a2:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <CommReadAndFormMessage_Cmd+0x17c>)
 80014a4:	781a      	ldrb	r2, [r3, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	701a      	strb	r2, [r3, #0]
			// printf("BUFF = %X\n", puc_ReadMsg[0]);
			puc_ReadMsg[1] = sign2;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a2c      	ldr	r2, [pc, #176]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 80014b0:	7812      	ldrb	r2, [r2, #0]
 80014b2:	701a      	strb	r2, [r3, #0]
			puc_ReadMsg[2] = sign3;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	3302      	adds	r3, #2
 80014b8:	4a2a      	ldr	r2, [pc, #168]	; (8001564 <CommReadAndFormMessage_Cmd+0x188>)
 80014ba:	7812      	ldrb	r2, [r2, #0]
 80014bc:	701a      	strb	r2, [r3, #0]
			puc_ReadMsg[store_index] = suc_RByte;
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	701a      	strb	r2, [r3, #0]
			if(store_index < 33)
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	d804      	bhi.n	80014dc <CommReadAndFormMessage_Cmd+0x100>
			{
				store_index++;
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	4a20      	ldr	r2, [pc, #128]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 80014da:	6013      	str	r3, [r2, #0]
			}
			if(store_index == 33)
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b21      	cmp	r3, #33	; 0x21
 80014e2:	d129      	bne.n	8001538 <CommReadAndFormMessage_Cmd+0x15c>
			{

				if(Cal_Crc_fun(puc_ReadMsg,(store_index-2)))
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3b02      	subs	r3, #2
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4619      	mov	r1, r3
 80014f0:	6838      	ldr	r0, [r7, #0]
 80014f2:	f000 f83f 	bl	8001574 <Cal_Crc_fun>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00e      	beq.n	800151a <CommReadAndFormMessage_Cmd+0x13e>
				{
					//	printf("CRC OK\n");
					case_check = store_index;
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001504:	701a      	strb	r2, [r3, #0]
					suc_RcvStatus = 11;
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <CommReadAndFormMessage_Cmd+0x178>)
 8001508:	220b      	movs	r2, #11
 800150a:	701a      	strb	r2, [r3, #0]
					store_index = 0;
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
					return case_check;
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	e018      	b.n	800154c <CommReadAndFormMessage_Cmd+0x170>
				}
				else
				{
					printf("OFC_CRC NOK\n");
 800151a:	4814      	ldr	r0, [pc, #80]	; (800156c <CommReadAndFormMessage_Cmd+0x190>)
 800151c:	f025 fc02 	bl	8026d24 <puts>
					suc_RcvStatus = 11;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <CommReadAndFormMessage_Cmd+0x178>)
 8001522:	220b      	movs	r2, #11
 8001524:	701a      	strb	r2, [r3, #0]
					store_index = 0;
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
					return 0;
 800152c:	2300      	movs	r3, #0
 800152e:	e00d      	b.n	800154c <CommReadAndFormMessage_Cmd+0x170>
			}

			break;
		default:

			printf("In default");
 8001530:	480f      	ldr	r0, [pc, #60]	; (8001570 <CommReadAndFormMessage_Cmd+0x194>)
 8001532:	f025 fb5b 	bl	8026bec <iprintf>
			break;
 8001536:	bf00      	nop
	while(Com_DataReady(us_Port))
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4618      	mov	r0, r3
 800153e:	f017 ffe3 	bl	8019508 <Com_DataReady>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	f47f af54 	bne.w	80013f2 <CommReadAndFormMessage_Cmd+0x16>


		}
	}
	return 0;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000030a 	.word	0x2000030a
 8001558:	200024a4 	.word	0x200024a4
 800155c:	200024a8 	.word	0x200024a8
 8001560:	200024ac 	.word	0x200024ac
 8001564:	200024ad 	.word	0x200024ad
 8001568:	200024ae 	.word	0x200024ae
 800156c:	08028668 	.word	0x08028668
 8001570:	08028674 	.word	0x08028674

08001574 <Cal_Crc_fun>:

unsigned char Cal_Crc_fun(unsigned char * Buffer, unsigned short Length)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
	unsigned short Rec_Crc,Cal_Crc;
	//	for(i=0;i<Length;i++)
	//	printf("RECV = %X ",Buffer[i]);
	Cal_Crc = ModBus_CRC16(Buffer,(Length));
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	4619      	mov	r1, r3
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f81f 	bl	80015c8 <ModBus_CRC16>
 800158a:	4603      	mov	r3, r0
 800158c:	81fb      	strh	r3, [r7, #14]
	Rec_Crc = (unsigned short int ) (Buffer[Length+1] & 0xff);
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	3301      	adds	r3, #1
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	81bb      	strh	r3, [r7, #12]
	Rec_Crc = (unsigned short int ) (Rec_Crc<<8);
 800159a:	89bb      	ldrh	r3, [r7, #12]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	81bb      	strh	r3, [r7, #12]
	Rec_Crc |= Buffer[Length] & 0xff;
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	89bb      	ldrh	r3, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	81bb      	strh	r3, [r7, #12]
	//	printf("Cal_Crc = %X Rec_Crc = %X\n",Cal_Crc,Rec_Crc);
	if(Cal_Crc	== Rec_Crc)
 80015b0:	89fa      	ldrh	r2, [r7, #14]
 80015b2:	89bb      	ldrh	r3, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d101      	bne.n	80015bc <Cal_Crc_fun+0x48>
	{
		return 1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <Cal_Crc_fun+0x4a>
	}
	else
	{
		return 0;
 80015bc:	2300      	movs	r3, #0
	}
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <ModBus_CRC16>:

unsigned short ModBus_CRC16( unsigned char * Buffer, unsigned short Length )
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
	unsigned char CRCHi = 0xFF;
 80015d4:	23ff      	movs	r3, #255	; 0xff
 80015d6:	73fb      	strb	r3, [r7, #15]
	unsigned char CRCLo = 0xFF;
 80015d8:	23ff      	movs	r3, #255	; 0xff
 80015da:	73bb      	strb	r3, [r7, #14]
	int Index;
	unsigned short ret;
	//	printf("Length=%d",Length);
	//for(Index = 0;Index<Length;Index++)
	//printf("CAL = %X ",Buffer[Index]);
	while( Length--)
 80015dc:	e013      	b.n	8001606 <ModBus_CRC16+0x3e>
	{
		Index = CRCLo ^ *Buffer++ ;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	781a      	ldrb	r2, [r3, #0]
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	4053      	eors	r3, r2
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	60bb      	str	r3, [r7, #8]
		CRCLo = CRCHi ^ CRC_Table_Hi[Index];
 80015ee:	4a10      	ldr	r2, [pc, #64]	; (8001630 <ModBus_CRC16+0x68>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4413      	add	r3, r2
 80015f4:	781a      	ldrb	r2, [r3, #0]
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	4053      	eors	r3, r2
 80015fa:	73bb      	strb	r3, [r7, #14]
		CRCHi = CRC_Table_Lo[Index];
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <ModBus_CRC16+0x6c>)
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	73fb      	strb	r3, [r7, #15]
	while( Length--)
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	1e5a      	subs	r2, r3, #1
 800160a:	807a      	strh	r2, [r7, #2]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1e6      	bne.n	80015de <ModBus_CRC16+0x16>
	}
	//	CRCHi = CRCHi + 0x17;
	//	printf("LOW Byte = %X HIGHER BYTE = %X\n",CRCLo,CRCHi);
	ret=((unsigned short)CRCHi << 8);
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	b29b      	uxth	r3, r3
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	81bb      	strh	r3, [r7, #12]
	ret|= (unsigned short)CRCLo;
 8001618:	7bbb      	ldrb	r3, [r7, #14]
 800161a:	b29a      	uxth	r2, r3
 800161c:	89bb      	ldrh	r3, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	81bb      	strh	r3, [r7, #12]
	return ret;
 8001622:	89bb      	ldrh	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	20000108 	.word	0x20000108
 8001634:	20000208 	.word	0x20000208

08001638 <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b0a2      	sub	sp, #136	; 0x88
 800163c:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001644:	2300      	movs	r3, #0
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	227c      	movs	r2, #124	; 0x7c
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f025 f9e3 	bl	8026a1c <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 8001662:	e03a      	b.n	80016da <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 8001664:	f00f fb5c 	bl	8010d20 <Get_Eth_Byte>
 8001668:	4603      	mov	r3, r0
 800166a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 800166e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001672:	2bf4      	cmp	r3, #244	; 0xf4
 8001674:	d002      	beq.n	800167c <Process_Hitachi_Packets_Eth+0x44>
 8001676:	2bf6      	cmp	r3, #246	; 0xf6
 8001678:	d00c      	beq.n	8001694 <Process_Hitachi_Packets_Eth+0x5c>
 800167a:	e01b      	b.n	80016b4 <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 800167c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001686:	3388      	adds	r3, #136	; 0x88
 8001688:	443b      	add	r3, r7
 800168a:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800168e:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 8001692:	e01e      	b.n	80016d2 <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 8001694:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 800169e:	3388      	adds	r3, #136	; 0x88
 80016a0:	443b      	add	r3, r7
 80016a2:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80016a6:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80016aa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016ae:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80016b2:	e00e      	b.n	80016d2 <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 80016b4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00a      	beq.n	80016d2 <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 80016bc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80016c6:	3388      	adds	r3, #136	; 0x88
 80016c8:	443b      	add	r3, r7
 80016ca:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80016ce:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80016d2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d105      	bne.n	80016e6 <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 80016da:	f00f fb0d 	bl	8010cf8 <Is_There_EI_Data>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1bf      	bne.n	8001664 <Process_Hitachi_Packets_Eth+0x2c>
 80016e4:	e000      	b.n	80016e8 <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 80016e6:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 80016e8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00d      	beq.n	800170c <Process_Hitachi_Packets_Eth+0xd4>
	{
		if(Traverser>15)
 80016f0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d906      	bls.n	8001706 <Process_Hitachi_Packets_Eth+0xce>
		{
			Convert_Data_format(Temp_array,Traverser);
 80016f8:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f000 f8a3 	bl	800184c <Convert_Data_format>
		}
		Traverser = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 800170c:	bf00      	nop
 800170e:	3788      	adds	r7, #136	; 0x88
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0a2      	sub	sp, #136	; 0x88
 8001718:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	227c      	movs	r2, #124	; 0x7c
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f025 f975 	bl	8026a1c <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 800173e:	4b40      	ldr	r3, [pc, #256]	; (8001840 <Process_Hitachi_Packets_Com+0x12c>)
 8001740:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001744:	2b00      	cmp	r3, #0
 8001746:	d074      	beq.n	8001832 <Process_Hitachi_Packets_Com+0x11e>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 8001748:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <Process_Hitachi_Packets_Com+0x130>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f00e ff25 	bl	801059c <HAL_Elaps_Ticks>
 8001752:	4603      	mov	r3, r0
 8001754:	2b13      	cmp	r3, #19
 8001756:	d96e      	bls.n	8001836 <Process_Hitachi_Packets_Com+0x122>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 8001758:	e04a      	b.n	80017f0 <Process_Hitachi_Packets_Com+0xdc>
	{
		Data = Com_Get_Byte(THREE_PORT);
 800175a:	2003      	movs	r0, #3
 800175c:	f017 ff14 	bl	8019588 <Com_Get_Byte>
 8001760:	4603      	mov	r3, r0
 8001762:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 8001766:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800176a:	2b7e      	cmp	r3, #126	; 0x7e
 800176c:	d90a      	bls.n	8001784 <Process_Hitachi_Packets_Com+0x70>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 800176e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001772:	2280      	movs	r2, #128	; 0x80
 8001774:	4619      	mov	r1, r3
 8001776:	4834      	ldr	r0, [pc, #208]	; (8001848 <Process_Hitachi_Packets_Com+0x134>)
 8001778:	f025 fa38 	bl	8026bec <iprintf>
			Traverser = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 8001782:	e03d      	b.n	8001800 <Process_Hitachi_Packets_Com+0xec>
		}
		//printf("%02X ",Data);
		switch(Data)
 8001784:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001788:	2bf4      	cmp	r3, #244	; 0xf4
 800178a:	d002      	beq.n	8001792 <Process_Hitachi_Packets_Com+0x7e>
 800178c:	2bf6      	cmp	r3, #246	; 0xf6
 800178e:	d00c      	beq.n	80017aa <Process_Hitachi_Packets_Com+0x96>
 8001790:	e01b      	b.n	80017ca <Process_Hitachi_Packets_Com+0xb6>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8001792:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 800179c:	3388      	adds	r3, #136	; 0x88
 800179e:	443b      	add	r3, r7
 80017a0:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80017a4:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80017a8:	e01e      	b.n	80017e8 <Process_Hitachi_Packets_Com+0xd4>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80017aa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80017b4:	3388      	adds	r3, #136	; 0x88
 80017b6:	443b      	add	r3, r7
 80017b8:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80017bc:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80017c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017c4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80017c8:	e00e      	b.n	80017e8 <Process_Hitachi_Packets_Com+0xd4>
		default:
			if(Traverser >0)
 80017ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00a      	beq.n	80017e8 <Process_Hitachi_Packets_Com+0xd4>
			{
				Temp_array[Traverser++] = Data;
 80017d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80017dc:	3388      	adds	r3, #136	; 0x88
 80017de:	443b      	add	r3, r7
 80017e0:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80017e4:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80017e8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d106      	bne.n	80017fe <Process_Hitachi_Packets_Com+0xea>
	while(Com_DataReady(THREE_PORT))
 80017f0:	2003      	movs	r0, #3
 80017f2:	f017 fe89 	bl	8019508 <Com_DataReady>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1ae      	bne.n	800175a <Process_Hitachi_Packets_Com+0x46>
 80017fc:	e000      	b.n	8001800 <Process_Hitachi_Packets_Com+0xec>
		{
			break;
 80017fe:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8001800:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001804:	2b00      	cmp	r3, #0
 8001806:	d017      	beq.n	8001838 <Process_Hitachi_Packets_Com+0x124>
	{
		if(Traverser>15)
 8001808:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d906      	bls.n	800181e <Process_Hitachi_Packets_Com+0x10a>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001810:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f000 f817 	bl	800184c <Convert_Data_format>
		}
		Traverser = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f025 f8f6 	bl	8026a1c <memset>
 8001830:	e002      	b.n	8001838 <Process_Hitachi_Packets_Com+0x124>
		return;
 8001832:	bf00      	nop
 8001834:	e000      	b.n	8001838 <Process_Hitachi_Packets_Com+0x124>
		return;
 8001836:	bf00      	nop
	}
}
 8001838:	3788      	adds	r7, #136	; 0x88
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000504 	.word	0x20000504
 8001844:	2000c07c 	.word	0x2000c07c
 8001848:	08028680 	.word	0x08028680

0800184c <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b0a4      	sub	sp, #144	; 0x90
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	227c      	movs	r2, #124	; 0x7c
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f025 f8d9 	bl	8026a1c <memset>
	uint16_t des_index=0,src_index=0;
 800186a:	2300      	movs	r3, #0
 800186c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001870:	2300      	movs	r3, #0
 8001872:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 8001876:	2300      	movs	r3, #0
 8001878:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800187c:	2300      	movs	r3, #0
 800187e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001882:	e034      	b.n	80018ee <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 8001884:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4413      	add	r3, r2
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2bf0      	cmp	r3, #240	; 0xf0
 8001890:	d118      	bne.n	80018c4 <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 8001892:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	7819      	ldrb	r1, [r3, #0]
 800189c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018a0:	3301      	adds	r3, #1
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	781a      	ldrb	r2, [r3, #0]
 80018a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018ac:	430a      	orrs	r2, r1
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	3390      	adds	r3, #144	; 0x90
 80018b2:	443b      	add	r3, r7
 80018b4:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80018b8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018bc:	3301      	adds	r3, #1
 80018be:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80018c2:	e00a      	b.n	80018da <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80018c4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	441a      	add	r2, r3
 80018cc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018d0:	7812      	ldrb	r2, [r2, #0]
 80018d2:	3390      	adds	r3, #144	; 0x90
 80018d4:	443b      	add	r3, r7
 80018d6:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 80018da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018de:	3301      	adds	r3, #1
 80018e0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80018e4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018e8:	3301      	adds	r3, #1
 80018ea:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d3c4      	bcc.n	8001884 <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 80018fa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f000 f805 	bl	8001914 <EI_Data_Analyzer>
}
 800190a:	bf00      	nop
 800190c:	3790      	adds	r7, #144	; 0x90
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	77fb      	strb	r3, [r7, #31]
 8001928:	2300      	movs	r3, #0
 800192a:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001934:	f018 f950 	bl	8019bd8 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 800193a:	4ba7      	ldr	r3, [pc, #668]	; (8001bd8 <EI_Data_Analyzer+0x2c4>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d111      	bne.n	8001966 <EI_Data_Analyzer+0x52>
 8001942:	f018 f949 	bl	8019bd8 <HAL_GetTick>
 8001946:	4603      	mov	r3, r0
 8001948:	f242 720f 	movw	r2, #9999	; 0x270f
 800194c:	4293      	cmp	r3, r2
 800194e:	d90a      	bls.n	8001966 <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 8001950:	48a2      	ldr	r0, [pc, #648]	; (8001bdc <EI_Data_Analyzer+0x2c8>)
 8001952:	f025 f9e7 	bl	8026d24 <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001956:	49a2      	ldr	r1, [pc, #648]	; (8001be0 <EI_Data_Analyzer+0x2cc>)
 8001958:	48a2      	ldr	r0, [pc, #648]	; (8001be4 <EI_Data_Analyzer+0x2d0>)
 800195a:	f7fe fc71 	bl	8000240 <strcmp>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	f040 81a1 	bne.w	8001ca8 <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3303      	adds	r3, #3
 800196a:	461a      	mov	r2, r3
 800196c:	2110      	movs	r1, #16
 800196e:	2000      	movs	r0, #0
 8001970:	f7fe fe50 	bl	8000614 <ExtractBits>
 8001974:	4603      	mov	r3, r0
 8001976:	b29b      	uxth	r3, r3
 8001978:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 800197a:	e00b      	b.n	8001994 <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 800197c:	7ffb      	ldrb	r3, [r7, #31]
 800197e:	4a9a      	ldr	r2, [pc, #616]	; (8001be8 <EI_Data_Analyzer+0x2d4>)
 8001980:	3366      	adds	r3, #102	; 0x66
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	429a      	cmp	r2, r3
 800198c:	d009      	beq.n	80019a2 <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 800198e:	7ffb      	ldrb	r3, [r7, #31]
 8001990:	3301      	adds	r3, #1
 8001992:	77fb      	strb	r3, [r7, #31]
 8001994:	4b94      	ldr	r3, [pc, #592]	; (8001be8 <EI_Data_Analyzer+0x2d4>)
 8001996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800199a:	7ffa      	ldrb	r2, [r7, #31]
 800199c:	429a      	cmp	r2, r3
 800199e:	d3ed      	bcc.n	800197c <EI_Data_Analyzer+0x68>
 80019a0:	e000      	b.n	80019a4 <EI_Data_Analyzer+0x90>
		{
			break;
 80019a2:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 80019a4:	4b90      	ldr	r3, [pc, #576]	; (8001be8 <EI_Data_Analyzer+0x2d4>)
 80019a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019aa:	7ffa      	ldrb	r2, [r7, #31]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d309      	bcc.n	80019c4 <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80019b0:	4b8e      	ldr	r3, [pc, #568]	; (8001bec <EI_Data_Analyzer+0x2d8>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	f040 8179 	bne.w	8001cac <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80019ba:	6939      	ldr	r1, [r7, #16]
 80019bc:	488c      	ldr	r0, [pc, #560]	; (8001bf0 <EI_Data_Analyzer+0x2dc>)
 80019be:	f025 f915 	bl	8026bec <iprintf>
		}
		return;
 80019c2:	e173      	b.n	8001cac <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3301      	adds	r3, #1
 80019c8:	461a      	mov	r2, r3
 80019ca:	2110      	movs	r1, #16
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7fe fe21 	bl	8000614 <ExtractBits>
 80019d2:	4603      	mov	r3, r0
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 80019d8:	7ffb      	ldrb	r3, [r7, #31]
 80019da:	4a83      	ldr	r2, [pc, #524]	; (8001be8 <EI_Data_Analyzer+0x2d4>)
 80019dc:	3370      	adds	r3, #112	; 0x70
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d012      	beq.n	8001a10 <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 80019ea:	4882      	ldr	r0, [pc, #520]	; (8001bf4 <EI_Data_Analyzer+0x2e0>)
 80019ec:	f025 f99a 	bl	8026d24 <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 80019f0:	69b9      	ldr	r1, [r7, #24]
 80019f2:	4881      	ldr	r0, [pc, #516]	; (8001bf8 <EI_Data_Analyzer+0x2e4>)
 80019f4:	f025 f8fa 	bl	8026bec <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80019f8:	7ffb      	ldrb	r3, [r7, #31]
 80019fa:	4a7b      	ldr	r2, [pc, #492]	; (8001be8 <EI_Data_Analyzer+0x2d4>)
 80019fc:	3370      	adds	r3, #112	; 0x70
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	461a      	mov	r2, r3
 8001a06:	6939      	ldr	r1, [r7, #16]
 8001a08:	487c      	ldr	r0, [pc, #496]	; (8001bfc <EI_Data_Analyzer+0x2e8>)
 8001a0a:	f025 f8ef 	bl	8026bec <iprintf>
		return;
 8001a0e:	e14e      	b.n	8001cae <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001a10:	7ffb      	ldrb	r3, [r7, #31]
 8001a12:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8001a14:	4b7a      	ldr	r3, [pc, #488]	; (8001c00 <EI_Data_Analyzer+0x2ec>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d016      	beq.n	8001a50 <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 8001a22:	4b77      	ldr	r3, [pc, #476]	; (8001c00 <EI_Data_Analyzer+0x2ec>)
 8001a24:	791b      	ldrb	r3, [r3, #4]
 8001a26:	7fba      	ldrb	r2, [r7, #30]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d111      	bne.n	8001a50 <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001a2c:	4875      	ldr	r0, [pc, #468]	; (8001c04 <EI_Data_Analyzer+0x2f0>)
 8001a2e:	f025 f979 	bl	8026d24 <puts>
			printf("Received:%lu\n",Destin_Address);
 8001a32:	69b9      	ldr	r1, [r7, #24]
 8001a34:	4874      	ldr	r0, [pc, #464]	; (8001c08 <EI_Data_Analyzer+0x2f4>)
 8001a36:	f025 f8d9 	bl	8026bec <iprintf>
			Destin_Address = 333;
 8001a3a:	f240 134d 	movw	r3, #333	; 0x14d
 8001a3e:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001a40:	4b69      	ldr	r3, [pc, #420]	; (8001be8 <EI_Data_Analyzer+0x2d4>)
 8001a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a46:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 8001a48:	69b9      	ldr	r1, [r7, #24]
 8001a4a:	4870      	ldr	r0, [pc, #448]	; (8001c0c <EI_Data_Analyzer+0x2f8>)
 8001a4c:	f025 f8ce 	bl	8026bec <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001a50:	4b65      	ldr	r3, [pc, #404]	; (8001be8 <EI_Data_Analyzer+0x2d4>)
 8001a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a56:	7fba      	ldrb	r2, [r7, #30]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d307      	bcc.n	8001a6c <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001a5c:	486c      	ldr	r0, [pc, #432]	; (8001c10 <EI_Data_Analyzer+0x2fc>)
 8001a5e:	f025 f961 	bl	8026d24 <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 8001a62:	69b9      	ldr	r1, [r7, #24]
 8001a64:	486b      	ldr	r0, [pc, #428]	; (8001c14 <EI_Data_Analyzer+0x300>)
 8001a66:	f025 f8c1 	bl	8026bec <iprintf>
		return;
 8001a6a:	e120      	b.n	8001cae <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001a6c:	4b5f      	ldr	r3, [pc, #380]	; (8001bec <EI_Data_Analyzer+0x2d8>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d121      	bne.n	8001ab8 <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 8001a74:	7ffb      	ldrb	r3, [r7, #31]
 8001a76:	4a68      	ldr	r2, [pc, #416]	; (8001c18 <EI_Data_Analyzer+0x304>)
 8001a78:	5cd3      	ldrb	r3, [r2, r3]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d002      	beq.n	8001a84 <EI_Data_Analyzer+0x170>
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d004      	beq.n	8001a8c <EI_Data_Analyzer+0x178>
 8001a82:	e007      	b.n	8001a94 <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 8001a84:	4865      	ldr	r0, [pc, #404]	; (8001c1c <EI_Data_Analyzer+0x308>)
 8001a86:	f025 f94d 	bl	8026d24 <puts>
			break;
 8001a8a:	e015      	b.n	8001ab8 <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 8001a8c:	4864      	ldr	r0, [pc, #400]	; (8001c20 <EI_Data_Analyzer+0x30c>)
 8001a8e:	f025 f949 	bl	8026d24 <puts>
			break;
 8001a92:	e011      	b.n	8001ab8 <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8001a94:	7ffb      	ldrb	r3, [r7, #31]
 8001a96:	4a54      	ldr	r2, [pc, #336]	; (8001be8 <EI_Data_Analyzer+0x2d4>)
 8001a98:	4413      	add	r3, r2
 8001a9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d103      	bne.n	8001aaa <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 8001aa2:	4860      	ldr	r0, [pc, #384]	; (8001c24 <EI_Data_Analyzer+0x310>)
 8001aa4:	f025 f93e 	bl	8026d24 <puts>
 8001aa8:	e006      	b.n	8001ab8 <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 8001aaa:	7ffb      	ldrb	r3, [r7, #31]
 8001aac:	4a5a      	ldr	r2, [pc, #360]	; (8001c18 <EI_Data_Analyzer+0x304>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	485d      	ldr	r0, [pc, #372]	; (8001c28 <EI_Data_Analyzer+0x314>)
 8001ab4:	f025 f89a 	bl	8026bec <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 8001ab8:	7ffb      	ldrb	r3, [r7, #31]
 8001aba:	4a5c      	ldr	r2, [pc, #368]	; (8001c2c <EI_Data_Analyzer+0x318>)
 8001abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac0:	7ffa      	ldrb	r2, [r7, #31]
 8001ac2:	4955      	ldr	r1, [pc, #340]	; (8001c18 <EI_Data_Analyzer+0x304>)
 8001ac4:	5c8a      	ldrb	r2, [r1, r2]
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d014      	beq.n	8001af4 <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001aca:	7ffb      	ldrb	r3, [r7, #31]
 8001acc:	4958      	ldr	r1, [pc, #352]	; (8001c30 <EI_Data_Analyzer+0x31c>)
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001ad4:	7ffb      	ldrb	r3, [r7, #31]
 8001ad6:	4957      	ldr	r1, [pc, #348]	; (8001c34 <EI_Data_Analyzer+0x320>)
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 8001ade:	7ffb      	ldrb	r3, [r7, #31]
 8001ae0:	4a4d      	ldr	r2, [pc, #308]	; (8001c18 <EI_Data_Analyzer+0x304>)
 8001ae2:	5cd2      	ldrb	r2, [r2, r3]
 8001ae4:	7ffb      	ldrb	r3, [r7, #31]
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4a50      	ldr	r2, [pc, #320]	; (8001c2c <EI_Data_Analyzer+0x318>)
 8001aea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 8001aee:	4852      	ldr	r0, [pc, #328]	; (8001c38 <EI_Data_Analyzer+0x324>)
 8001af0:	f025 f918 	bl	8026d24 <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 8001af4:	7ffa      	ldrb	r2, [r7, #31]
 8001af6:	7ffb      	ldrb	r3, [r7, #31]
 8001af8:	4947      	ldr	r1, [pc, #284]	; (8001c18 <EI_Data_Analyzer+0x304>)
 8001afa:	5c89      	ldrb	r1, [r1, r2]
 8001afc:	4a4f      	ldr	r2, [pc, #316]	; (8001c3c <EI_Data_Analyzer+0x328>)
 8001afe:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 8001b00:	7ffb      	ldrb	r3, [r7, #31]
 8001b02:	4a4f      	ldr	r2, [pc, #316]	; (8001c40 <EI_Data_Analyzer+0x32c>)
 8001b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f00e fd47 	bl	801059c <HAL_Elaps_Ticks>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	7ffb      	ldrb	r3, [r7, #31]
 8001b12:	4935      	ldr	r1, [pc, #212]	; (8001be8 <EI_Data_Analyzer+0x2d4>)
 8001b14:	338a      	adds	r3, #138	; 0x8a
 8001b16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d318      	bcc.n	8001b50 <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001b1e:	7ffb      	ldrb	r3, [r7, #31]
 8001b20:	4947      	ldr	r1, [pc, #284]	; (8001c40 <EI_Data_Analyzer+0x32c>)
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001b28:	7ffb      	ldrb	r3, [r7, #31]
 8001b2a:	4941      	ldr	r1, [pc, #260]	; (8001c30 <EI_Data_Analyzer+0x31c>)
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001b32:	7ffb      	ldrb	r3, [r7, #31]
 8001b34:	493f      	ldr	r1, [pc, #252]	; (8001c34 <EI_Data_Analyzer+0x320>)
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001b3c:	7ffb      	ldrb	r3, [r7, #31]
 8001b3e:	4a2a      	ldr	r2, [pc, #168]	; (8001be8 <EI_Data_Analyzer+0x2d4>)
 8001b40:	3366      	adds	r3, #102	; 0x66
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	483e      	ldr	r0, [pc, #248]	; (8001c44 <EI_Data_Analyzer+0x330>)
 8001b4c:	f025 f84e 	bl	8026bec <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001b50:	7ffb      	ldrb	r3, [r7, #31]
 8001b52:	493b      	ldr	r1, [pc, #236]	; (8001c40 <EI_Data_Analyzer+0x32c>)
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 8001b5a:	2281      	movs	r2, #129	; 0x81
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	483a      	ldr	r0, [pc, #232]	; (8001c48 <EI_Data_Analyzer+0x334>)
 8001b60:	f024 ff5c 	bl	8026a1c <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	461a      	mov	r2, r3
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	4837      	ldr	r0, [pc, #220]	; (8001c48 <EI_Data_Analyzer+0x334>)
 8001b6c:	f024 ff2e 	bl	80269cc <memcpy>
	Rx_Print_st.Size = Size;
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <EI_Data_Analyzer+0x334>)
 8001b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3307      	adds	r3, #7
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2108      	movs	r1, #8
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7fe fd46 	bl	8000614 <ExtractBits>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 8001b8c:	7ffa      	ldrb	r2, [r7, #31]
 8001b8e:	492f      	ldr	r1, [pc, #188]	; (8001c4c <EI_Data_Analyzer+0x338>)
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	3303      	adds	r3, #3
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 8001ba0:	7ffb      	ldrb	r3, [r7, #31]
 8001ba2:	492b      	ldr	r1, [pc, #172]	; (8001c50 <EI_Data_Analyzer+0x33c>)
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 8001baa:	7ffb      	ldrb	r3, [r7, #31]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f006 fde5 	bl	800877c <Check_Other_EiPC_Packet>
	switch (Message_Type)
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d870      	bhi.n	8001c9c <EI_Data_Analyzer+0x388>
 8001bba:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <EI_Data_Analyzer+0x2ac>)
 8001bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc0:	08001c55 	.word	0x08001c55
 8001bc4:	08001c65 	.word	0x08001c65
 8001bc8:	08001c75 	.word	0x08001c75
 8001bcc:	08001c7d 	.word	0x08001c7d
 8001bd0:	08001c9d 	.word	0x08001c9d
 8001bd4:	08001c8d 	.word	0x08001c8d
 8001bd8:	2000030b 	.word	0x2000030b
 8001bdc:	080286ac 	.word	0x080286ac
 8001be0:	080286ec 	.word	0x080286ec
 8001be4:	20000505 	.word	0x20000505
 8001be8:	20000504 	.word	0x20000504
 8001bec:	20000bbb 	.word	0x20000bbb
 8001bf0:	080286f8 	.word	0x080286f8
 8001bf4:	08028734 	.word	0x08028734
 8001bf8:	08028750 	.word	0x08028750
 8001bfc:	08028774 	.word	0x08028774
 8001c00:	2000308c 	.word	0x2000308c
 8001c04:	080287ac 	.word	0x080287ac
 8001c08:	080287d0 	.word	0x080287d0
 8001c0c:	080287e0 	.word	0x080287e0
 8001c10:	080287f0 	.word	0x080287f0
 8001c14:	08028824 	.word	0x08028824
 8001c18:	2000270c 	.word	0x2000270c
 8001c1c:	08028844 	.word	0x08028844
 8001c20:	08028854 	.word	0x08028854
 8001c24:	08028864 	.word	0x08028864
 8001c28:	0802887c 	.word	0x0802887c
 8001c2c:	20002608 	.word	0x20002608
 8001c30:	20002630 	.word	0x20002630
 8001c34:	20002658 	.word	0x20002658
 8001c38:	080288a0 	.word	0x080288a0
 8001c3c:	200026b0 	.word	0x200026b0
 8001c40:	200026bc 	.word	0x200026bc
 8001c44:	080288b8 	.word	0x080288b8
 8001c48:	20003340 	.word	0x20003340
 8001c4c:	20002da4 	.word	0x20002da4
 8001c50:	200024e8 	.word	0x200024e8
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	b2d9      	uxtb	r1, r3
 8001c58:	7fbb      	ldrb	r3, [r7, #30]
 8001c5a:	7ffa      	ldrb	r2, [r7, #31]
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f82d 	bl	8001cbc <Init_Msg_extr>
		break;
 8001c62:	e024      	b.n	8001cae <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	b2d9      	uxtb	r1, r3
 8001c68:	7fbb      	ldrb	r3, [r7, #30]
 8001c6a:	7ffa      	ldrb	r2, [r7, #31]
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f001 fbc3 	bl	80033f8 <Vital_Msg_extr>
		break;
 8001c72:	e01c      	b.n	8001cae <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 8001c74:	480f      	ldr	r0, [pc, #60]	; (8001cb4 <EI_Data_Analyzer+0x3a0>)
 8001c76:	f025 f855 	bl	8026d24 <puts>
		break;
 8001c7a:	e018      	b.n	8001cae <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	b2d9      	uxtb	r1, r3
 8001c80:	7fbb      	ldrb	r3, [r7, #30]
 8001c82:	7ffa      	ldrb	r2, [r7, #31]
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f003 ff3f 	bl	8005b08 <Status_Msg_Extr>
		break;
 8001c8a:	e010      	b.n	8001cae <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	b2d9      	uxtb	r1, r3
 8001c90:	7fbb      	ldrb	r3, [r7, #30]
 8001c92:	7ffa      	ldrb	r2, [r7, #31]
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f005 f9b9 	bl	800700c <Service_Msg_Extr>
		break;
 8001c9a:	e008      	b.n	8001cae <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <EI_Data_Analyzer+0x3a4>)
 8001ca2:	f024 ffa3 	bl	8026bec <iprintf>
		break;
 8001ca6:	e002      	b.n	8001cae <EI_Data_Analyzer+0x39a>
			return;
 8001ca8:	bf00      	nop
 8001caa:	e000      	b.n	8001cae <EI_Data_Analyzer+0x39a>
		return;
 8001cac:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	080288d4 	.word	0x080288d4
 8001cb8:	080288f8 	.word	0x080288f8

08001cbc <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	4608      	mov	r0, r1
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4603      	mov	r3, r0
 8001ccc:	70fb      	strb	r3, [r7, #3]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70bb      	strb	r3, [r7, #2]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001ce6:	f017 ff77 	bl	8019bd8 <HAL_GetTick>
 8001cea:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 8001cec:	2300      	movs	r3, #0
 8001cee:	83fb      	strh	r3, [r7, #30]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b05      	subs	r3, #5
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f014 f9dc 	bl	80160bc <CalculateDirectReverseCrc>
 8001d04:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	3b05      	subs	r3, #5
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	441a      	add	r2, r3
 8001d0e:	8bbb      	ldrh	r3, [r7, #28]
 8001d10:	2120      	movs	r1, #32
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc7e 	bl	8000614 <ExtractBits>
 8001d18:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d013      	beq.n	8001d4a <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001d22:	78bb      	ldrb	r3, [r7, #2]
 8001d24:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <Init_Msg_extr+0x110>)
 8001d26:	3366      	adds	r3, #102	; 0x66
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4827      	ldr	r0, [pc, #156]	; (8001dd0 <Init_Msg_extr+0x114>)
 8001d32:	f024 ff5b 	bl	8026bec <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 8001d36:	6939      	ldr	r1, [r7, #16]
 8001d38:	4826      	ldr	r0, [pc, #152]	; (8001dd4 <Init_Msg_extr+0x118>)
 8001d3a:	f024 ff57 	bl	8026bec <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001d3e:	6979      	ldr	r1, [r7, #20]
 8001d40:	4825      	ldr	r0, [pc, #148]	; (8001dd8 <Init_Msg_extr+0x11c>)
 8001d42:	f024 ff53 	bl	8026bec <iprintf>
		return;
 8001d46:	f000 be32 	b.w	80029ae <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 8001d4a:	78bb      	ldrb	r3, [r7, #2]
 8001d4c:	4a23      	ldr	r2, [pc, #140]	; (8001ddc <Init_Msg_extr+0x120>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 8001d52:	78bb      	ldrb	r3, [r7, #2]
 8001d54:	4a22      	ldr	r2, [pc, #136]	; (8001de0 <Init_Msg_extr+0x124>)
 8001d56:	2101      	movs	r1, #1
 8001d58:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f103 021d 	add.w	r2, r3, #29
 8001d60:	8bbb      	ldrh	r3, [r7, #28]
 8001d62:	2110      	movs	r1, #16
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fc55 	bl	8000614 <ExtractBits>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001d6e:	78bb      	ldrb	r3, [r7, #2]
 8001d70:	4a16      	ldr	r2, [pc, #88]	; (8001dcc <Init_Msg_extr+0x110>)
 8001d72:	33f4      	adds	r3, #244	; 0xf4
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	889b      	ldrh	r3, [r3, #4]
 8001d7a:	8b7a      	ldrh	r2, [r7, #26]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d03d      	beq.n	8001dfc <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 8001d80:	78bb      	ldrb	r3, [r7, #2]
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <Init_Msg_extr+0x128>)
 8001d84:	2101      	movs	r1, #1
 8001d86:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001d88:	78bb      	ldrb	r3, [r7, #2]
 8001d8a:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <Init_Msg_extr+0x110>)
 8001d8c:	3366      	adds	r3, #102	; 0x66
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4619      	mov	r1, r3
 8001d96:	4814      	ldr	r0, [pc, #80]	; (8001de8 <Init_Msg_extr+0x12c>)
 8001d98:	f024 ff28 	bl	8026bec <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 8001d9c:	8b7b      	ldrh	r3, [r7, #26]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4812      	ldr	r0, [pc, #72]	; (8001dec <Init_Msg_extr+0x130>)
 8001da2:	f024 ff23 	bl	8026bec <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 8001da6:	78bb      	ldrb	r3, [r7, #2]
 8001da8:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <Init_Msg_extr+0x110>)
 8001daa:	33f4      	adds	r3, #244	; 0xf4
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	889b      	ldrh	r3, [r3, #4]
 8001db2:	4619      	mov	r1, r3
 8001db4:	480e      	ldr	r0, [pc, #56]	; (8001df0 <Init_Msg_extr+0x134>)
 8001db6:	f024 ff19 	bl	8026bec <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001dba:	490e      	ldr	r1, [pc, #56]	; (8001df4 <Init_Msg_extr+0x138>)
 8001dbc:	480e      	ldr	r0, [pc, #56]	; (8001df8 <Init_Msg_extr+0x13c>)
 8001dbe:	f7fe fa3f 	bl	8000240 <strcmp>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01d      	beq.n	8001e04 <Init_Msg_extr+0x148>
		{
			return;
 8001dc8:	f000 bdf1 	b.w	80029ae <Init_Msg_extr+0xcf2>
 8001dcc:	20000504 	.word	0x20000504
 8001dd0:	08028914 	.word	0x08028914
 8001dd4:	08028930 	.word	0x08028930
 8001dd8:	08028940 	.word	0x08028940
 8001ddc:	20002680 	.word	0x20002680
 8001de0:	20002698 	.word	0x20002698
 8001de4:	2000268c 	.word	0x2000268c
 8001de8:	08028950 	.word	0x08028950
 8001dec:	08028988 	.word	0x08028988
 8001df0:	080289ac 	.word	0x080289ac
 8001df4:	080286ec 	.word	0x080286ec
 8001df8:	20000505 	.word	0x20000505
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 8001dfc:	78bb      	ldrb	r3, [r7, #2]
 8001dfe:	4aab      	ldr	r2, [pc, #684]	; (80020ac <Init_Msg_extr+0x3f0>)
 8001e00:	2100      	movs	r1, #0
 8001e02:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001e0a:	8bbb      	ldrh	r3, [r7, #28]
 8001e0c:	2108      	movs	r1, #8
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fc00 	bl	8000614 <ExtractBits>
 8001e14:	4603      	mov	r3, r0
 8001e16:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8001e18:	78bb      	ldrb	r3, [r7, #2]
 8001e1a:	4aa5      	ldr	r2, [pc, #660]	; (80020b0 <Init_Msg_extr+0x3f4>)
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001e22:	7e7a      	ldrb	r2, [r7, #25]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d01f      	beq.n	8001e68 <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001e28:	78bb      	ldrb	r3, [r7, #2]
 8001e2a:	4aa1      	ldr	r2, [pc, #644]	; (80020b0 <Init_Msg_extr+0x3f4>)
 8001e2c:	3366      	adds	r3, #102	; 0x66
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4619      	mov	r1, r3
 8001e36:	489f      	ldr	r0, [pc, #636]	; (80020b4 <Init_Msg_extr+0x3f8>)
 8001e38:	f024 fed8 	bl	8026bec <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001e3c:	78bb      	ldrb	r3, [r7, #2]
 8001e3e:	4a9c      	ldr	r2, [pc, #624]	; (80020b0 <Init_Msg_extr+0x3f4>)
 8001e40:	4413      	add	r3, r2
 8001e42:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001e46:	4619      	mov	r1, r3
 8001e48:	489b      	ldr	r0, [pc, #620]	; (80020b8 <Init_Msg_extr+0x3fc>)
 8001e4a:	f024 fecf 	bl	8026bec <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001e4e:	7e7b      	ldrb	r3, [r7, #25]
 8001e50:	4619      	mov	r1, r3
 8001e52:	489a      	ldr	r0, [pc, #616]	; (80020bc <Init_Msg_extr+0x400>)
 8001e54:	f024 feca 	bl	8026bec <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001e58:	4999      	ldr	r1, [pc, #612]	; (80020c0 <Init_Msg_extr+0x404>)
 8001e5a:	489a      	ldr	r0, [pc, #616]	; (80020c4 <Init_Msg_extr+0x408>)
 8001e5c:	f7fe f9f0 	bl	8000240 <strcmp>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 85a2 	bne.w	80029ac <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001e68:	78bb      	ldrb	r3, [r7, #2]
 8001e6a:	4997      	ldr	r1, [pc, #604]	; (80020c8 <Init_Msg_extr+0x40c>)
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 8001e72:	78bb      	ldrb	r3, [r7, #2]
 8001e74:	4a95      	ldr	r2, [pc, #596]	; (80020cc <Init_Msg_extr+0x410>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 8001e7a:	78bb      	ldrb	r3, [r7, #2]
 8001e7c:	4a94      	ldr	r2, [pc, #592]	; (80020d0 <Init_Msg_extr+0x414>)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 8001e82:	78bb      	ldrb	r3, [r7, #2]
 8001e84:	4993      	ldr	r1, [pc, #588]	; (80020d4 <Init_Msg_extr+0x418>)
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 8001e8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e90:	3308      	adds	r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	da00      	bge.n	8001e98 <Init_Msg_extr+0x1dc>
 8001e96:	3307      	adds	r3, #7
 8001e98:	10db      	asrs	r3, r3, #3
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	8bfb      	ldrh	r3, [r7, #30]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	83fb      	strh	r3, [r7, #30]
 8001ea2:	8bbb      	ldrh	r3, [r7, #28]
 8001ea4:	3308      	adds	r3, #8
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	425a      	negs	r2, r3
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	f002 0207 	and.w	r2, r2, #7
 8001eb4:	bf58      	it	pl
 8001eb6:	4253      	negpl	r3, r2
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001ebc:	8bfb      	ldrh	r3, [r7, #30]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	441a      	add	r2, r3
 8001ec2:	8bbb      	ldrh	r3, [r7, #28]
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fba4 	bl	8000614 <ExtractBits>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	78bb      	ldrb	r3, [r7, #2]
 8001ed0:	b291      	uxth	r1, r2
 8001ed2:	4a81      	ldr	r2, [pc, #516]	; (80020d8 <Init_Msg_extr+0x41c>)
 8001ed4:	015b      	lsls	r3, r3, #5
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3310      	adds	r3, #16
 8001eda:	460a      	mov	r2, r1
 8001edc:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 8001ede:	78bb      	ldrb	r3, [r7, #2]
 8001ee0:	4a7d      	ldr	r2, [pc, #500]	; (80020d8 <Init_Msg_extr+0x41c>)
 8001ee2:	015b      	lsls	r3, r3, #5
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3310      	adds	r3, #16
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	487b      	ldr	r0, [pc, #492]	; (80020dc <Init_Msg_extr+0x420>)
 8001eee:	f024 fe7d 	bl	8026bec <iprintf>
	BITSTUFFINC(16);
 8001ef2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ef6:	3310      	adds	r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	da00      	bge.n	8001efe <Init_Msg_extr+0x242>
 8001efc:	3307      	adds	r3, #7
 8001efe:	10db      	asrs	r3, r3, #3
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	8bfb      	ldrh	r3, [r7, #30]
 8001f04:	4413      	add	r3, r2
 8001f06:	83fb      	strh	r3, [r7, #30]
 8001f08:	8bbb      	ldrh	r3, [r7, #28]
 8001f0a:	3310      	adds	r3, #16
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	425a      	negs	r2, r3
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	f002 0207 	and.w	r2, r2, #7
 8001f1a:	bf58      	it	pl
 8001f1c:	4253      	negpl	r3, r2
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001f22:	8bfb      	ldrh	r3, [r7, #30]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	441a      	add	r2, r3
 8001f28:	8bbb      	ldrh	r3, [r7, #28]
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fb71 	bl	8000614 <ExtractBits>
 8001f32:	4602      	mov	r2, r0
 8001f34:	78bb      	ldrb	r3, [r7, #2]
 8001f36:	b291      	uxth	r1, r2
 8001f38:	4a67      	ldr	r2, [pc, #412]	; (80020d8 <Init_Msg_extr+0x41c>)
 8001f3a:	015b      	lsls	r3, r3, #5
 8001f3c:	4413      	add	r3, r2
 8001f3e:	330e      	adds	r3, #14
 8001f40:	460a      	mov	r2, r1
 8001f42:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 8001f44:	78bb      	ldrb	r3, [r7, #2]
 8001f46:	4a64      	ldr	r2, [pc, #400]	; (80020d8 <Init_Msg_extr+0x41c>)
 8001f48:	015b      	lsls	r3, r3, #5
 8001f4a:	4413      	add	r3, r2
 8001f4c:	330e      	adds	r3, #14
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	4863      	ldr	r0, [pc, #396]	; (80020e0 <Init_Msg_extr+0x424>)
 8001f54:	f024 fe4a 	bl	8026bec <iprintf>
	BITSTUFFINC(16);
 8001f58:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f5c:	3310      	adds	r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	da00      	bge.n	8001f64 <Init_Msg_extr+0x2a8>
 8001f62:	3307      	adds	r3, #7
 8001f64:	10db      	asrs	r3, r3, #3
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	8bfb      	ldrh	r3, [r7, #30]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	83fb      	strh	r3, [r7, #30]
 8001f6e:	8bbb      	ldrh	r3, [r7, #28]
 8001f70:	3310      	adds	r3, #16
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	425a      	negs	r2, r3
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	f002 0207 	and.w	r2, r2, #7
 8001f80:	bf58      	it	pl
 8001f82:	4253      	negpl	r3, r2
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f88:	8bfb      	ldrh	r3, [r7, #30]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	441a      	add	r2, r3
 8001f8e:	8bbb      	ldrh	r3, [r7, #28]
 8001f90:	2108      	movs	r1, #8
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fb3e 	bl	8000614 <ExtractBits>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	78bb      	ldrb	r3, [r7, #2]
 8001f9c:	b2d1      	uxtb	r1, r2
 8001f9e:	4a4e      	ldr	r2, [pc, #312]	; (80020d8 <Init_Msg_extr+0x41c>)
 8001fa0:	015b      	lsls	r3, r3, #5
 8001fa2:	4413      	add	r3, r2
 8001fa4:	460a      	mov	r2, r1
 8001fa6:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8001fa8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fac:	3308      	adds	r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	da00      	bge.n	8001fb4 <Init_Msg_extr+0x2f8>
 8001fb2:	3307      	adds	r3, #7
 8001fb4:	10db      	asrs	r3, r3, #3
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	8bfb      	ldrh	r3, [r7, #30]
 8001fba:	4413      	add	r3, r2
 8001fbc:	83fb      	strh	r3, [r7, #30]
 8001fbe:	8bbb      	ldrh	r3, [r7, #28]
 8001fc0:	3308      	adds	r3, #8
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	425a      	negs	r2, r3
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	f002 0207 	and.w	r2, r2, #7
 8001fd0:	bf58      	it	pl
 8001fd2:	4253      	negpl	r3, r2
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001fd8:	8bfb      	ldrh	r3, [r7, #30]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	441a      	add	r2, r3
 8001fde:	8bbb      	ldrh	r3, [r7, #28]
 8001fe0:	2108      	movs	r1, #8
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fb16 	bl	8000614 <ExtractBits>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	78bb      	ldrb	r3, [r7, #2]
 8001fec:	b2d1      	uxtb	r1, r2
 8001fee:	4a3a      	ldr	r2, [pc, #232]	; (80020d8 <Init_Msg_extr+0x41c>)
 8001ff0:	015b      	lsls	r3, r3, #5
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	460a      	mov	r2, r1
 8001ff8:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8001ffa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ffe:	3308      	adds	r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	da00      	bge.n	8002006 <Init_Msg_extr+0x34a>
 8002004:	3307      	adds	r3, #7
 8002006:	10db      	asrs	r3, r3, #3
 8002008:	b29a      	uxth	r2, r3
 800200a:	8bfb      	ldrh	r3, [r7, #30]
 800200c:	4413      	add	r3, r2
 800200e:	83fb      	strh	r3, [r7, #30]
 8002010:	8bbb      	ldrh	r3, [r7, #28]
 8002012:	3308      	adds	r3, #8
 8002014:	b29b      	uxth	r3, r3
 8002016:	b21b      	sxth	r3, r3
 8002018:	425a      	negs	r2, r3
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	f002 0207 	and.w	r2, r2, #7
 8002022:	bf58      	it	pl
 8002024:	4253      	negpl	r3, r2
 8002026:	b21b      	sxth	r3, r3
 8002028:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800202a:	8bfb      	ldrh	r3, [r7, #30]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	441a      	add	r2, r3
 8002030:	8bbb      	ldrh	r3, [r7, #28]
 8002032:	2108      	movs	r1, #8
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe faed 	bl	8000614 <ExtractBits>
 800203a:	4602      	mov	r2, r0
 800203c:	78bb      	ldrb	r3, [r7, #2]
 800203e:	b2d1      	uxtb	r1, r2
 8002040:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <Init_Msg_extr+0x41c>)
 8002042:	015b      	lsls	r3, r3, #5
 8002044:	4413      	add	r3, r2
 8002046:	3302      	adds	r3, #2
 8002048:	460a      	mov	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 800204c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002050:	3308      	adds	r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	da00      	bge.n	8002058 <Init_Msg_extr+0x39c>
 8002056:	3307      	adds	r3, #7
 8002058:	10db      	asrs	r3, r3, #3
 800205a:	b29a      	uxth	r2, r3
 800205c:	8bfb      	ldrh	r3, [r7, #30]
 800205e:	4413      	add	r3, r2
 8002060:	83fb      	strh	r3, [r7, #30]
 8002062:	8bbb      	ldrh	r3, [r7, #28]
 8002064:	3308      	adds	r3, #8
 8002066:	b29b      	uxth	r3, r3
 8002068:	b21b      	sxth	r3, r3
 800206a:	425a      	negs	r2, r3
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	f002 0207 	and.w	r2, r2, #7
 8002074:	bf58      	it	pl
 8002076:	4253      	negpl	r3, r2
 8002078:	b21b      	sxth	r3, r3
 800207a:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800207c:	8bfb      	ldrh	r3, [r7, #30]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	441a      	add	r2, r3
 8002082:	8bbb      	ldrh	r3, [r7, #28]
 8002084:	2110      	movs	r1, #16
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fac4 	bl	8000614 <ExtractBits>
 800208c:	4602      	mov	r2, r0
 800208e:	78bb      	ldrb	r3, [r7, #2]
 8002090:	b291      	uxth	r1, r2
 8002092:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <Init_Msg_extr+0x428>)
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	4413      	add	r3, r2
 8002098:	3304      	adds	r3, #4
 800209a:	460a      	mov	r2, r1
 800209c:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 800209e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020a2:	3310      	adds	r3, #16
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	da1f      	bge.n	80020e8 <Init_Msg_extr+0x42c>
 80020a8:	3307      	adds	r3, #7
 80020aa:	e01d      	b.n	80020e8 <Init_Msg_extr+0x42c>
 80020ac:	2000268c 	.word	0x2000268c
 80020b0:	20000504 	.word	0x20000504
 80020b4:	080289d0 	.word	0x080289d0
 80020b8:	080289f8 	.word	0x080289f8
 80020bc:	08028a0c 	.word	0x08028a0c
 80020c0:	080286ec 	.word	0x080286ec
 80020c4:	20000505 	.word	0x20000505
 80020c8:	20002630 	.word	0x20002630
 80020cc:	20002698 	.word	0x20002698
 80020d0:	20002718 	.word	0x20002718
 80020d4:	20002724 	.word	0x20002724
 80020d8:	20002994 	.word	0x20002994
 80020dc:	08028a20 	.word	0x08028a20
 80020e0:	08028a28 	.word	0x08028a28
 80020e4:	200028f4 	.word	0x200028f4
 80020e8:	10db      	asrs	r3, r3, #3
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	8bfb      	ldrh	r3, [r7, #30]
 80020ee:	4413      	add	r3, r2
 80020f0:	83fb      	strh	r3, [r7, #30]
 80020f2:	8bbb      	ldrh	r3, [r7, #28]
 80020f4:	3310      	adds	r3, #16
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	b21b      	sxth	r3, r3
 80020fa:	425a      	negs	r2, r3
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	f002 0207 	and.w	r2, r2, #7
 8002104:	bf58      	it	pl
 8002106:	4253      	negpl	r3, r2
 8002108:	b21b      	sxth	r3, r3
 800210a:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 800210c:	78bb      	ldrb	r3, [r7, #2]
 800210e:	4a8e      	ldr	r2, [pc, #568]	; (8002348 <Init_Msg_extr+0x68c>)
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4413      	add	r3, r2
 8002114:	3304      	adds	r3, #4
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 811d 	beq.w	800235c <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002122:	8bfb      	ldrh	r3, [r7, #30]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	441a      	add	r2, r3
 8002128:	8bbb      	ldrh	r3, [r7, #28]
 800212a:	2108      	movs	r1, #8
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fa71 	bl	8000614 <ExtractBits>
 8002132:	4603      	mov	r3, r0
 8002134:	78ba      	ldrb	r2, [r7, #2]
 8002136:	b2d8      	uxtb	r0, r3
 8002138:	4984      	ldr	r1, [pc, #528]	; (800234c <Init_Msg_extr+0x690>)
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	440b      	add	r3, r1
 8002144:	3305      	adds	r3, #5
 8002146:	4602      	mov	r2, r0
 8002148:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 800214a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800214e:	3308      	adds	r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	da00      	bge.n	8002156 <Init_Msg_extr+0x49a>
 8002154:	3307      	adds	r3, #7
 8002156:	10db      	asrs	r3, r3, #3
 8002158:	b29a      	uxth	r2, r3
 800215a:	8bfb      	ldrh	r3, [r7, #30]
 800215c:	4413      	add	r3, r2
 800215e:	83fb      	strh	r3, [r7, #30]
 8002160:	8bbb      	ldrh	r3, [r7, #28]
 8002162:	3308      	adds	r3, #8
 8002164:	b29b      	uxth	r3, r3
 8002166:	b21b      	sxth	r3, r3
 8002168:	425a      	negs	r2, r3
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	f002 0207 	and.w	r2, r2, #7
 8002172:	bf58      	it	pl
 8002174:	4253      	negpl	r3, r2
 8002176:	b21b      	sxth	r3, r3
 8002178:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800217a:	8bfb      	ldrh	r3, [r7, #30]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	441a      	add	r2, r3
 8002180:	8bbb      	ldrh	r3, [r7, #28]
 8002182:	2108      	movs	r1, #8
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe fa45 	bl	8000614 <ExtractBits>
 800218a:	4603      	mov	r3, r0
 800218c:	78ba      	ldrb	r2, [r7, #2]
 800218e:	b2d8      	uxtb	r0, r3
 8002190:	496e      	ldr	r1, [pc, #440]	; (800234c <Init_Msg_extr+0x690>)
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	440b      	add	r3, r1
 800219c:	3304      	adds	r3, #4
 800219e:	4602      	mov	r2, r0
 80021a0:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 80021a2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021a6:	3308      	adds	r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	da00      	bge.n	80021ae <Init_Msg_extr+0x4f2>
 80021ac:	3307      	adds	r3, #7
 80021ae:	10db      	asrs	r3, r3, #3
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	8bfb      	ldrh	r3, [r7, #30]
 80021b4:	4413      	add	r3, r2
 80021b6:	83fb      	strh	r3, [r7, #30]
 80021b8:	8bbb      	ldrh	r3, [r7, #28]
 80021ba:	3308      	adds	r3, #8
 80021bc:	b29b      	uxth	r3, r3
 80021be:	b21b      	sxth	r3, r3
 80021c0:	425a      	negs	r2, r3
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	f002 0207 	and.w	r2, r2, #7
 80021ca:	bf58      	it	pl
 80021cc:	4253      	negpl	r3, r2
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80021d2:	8bfb      	ldrh	r3, [r7, #30]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	441a      	add	r2, r3
 80021d8:	8bbb      	ldrh	r3, [r7, #28]
 80021da:	2108      	movs	r1, #8
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fa19 	bl	8000614 <ExtractBits>
 80021e2:	4603      	mov	r3, r0
 80021e4:	78ba      	ldrb	r2, [r7, #2]
 80021e6:	b2d8      	uxtb	r0, r3
 80021e8:	4958      	ldr	r1, [pc, #352]	; (800234c <Init_Msg_extr+0x690>)
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	440b      	add	r3, r1
 80021f4:	3303      	adds	r3, #3
 80021f6:	4602      	mov	r2, r0
 80021f8:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 80021fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021fe:	3308      	adds	r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	da00      	bge.n	8002206 <Init_Msg_extr+0x54a>
 8002204:	3307      	adds	r3, #7
 8002206:	10db      	asrs	r3, r3, #3
 8002208:	b29a      	uxth	r2, r3
 800220a:	8bfb      	ldrh	r3, [r7, #30]
 800220c:	4413      	add	r3, r2
 800220e:	83fb      	strh	r3, [r7, #30]
 8002210:	8bbb      	ldrh	r3, [r7, #28]
 8002212:	3308      	adds	r3, #8
 8002214:	b29b      	uxth	r3, r3
 8002216:	b21b      	sxth	r3, r3
 8002218:	425a      	negs	r2, r3
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	f002 0207 	and.w	r2, r2, #7
 8002222:	bf58      	it	pl
 8002224:	4253      	negpl	r3, r2
 8002226:	b21b      	sxth	r3, r3
 8002228:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800222a:	8bfb      	ldrh	r3, [r7, #30]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	441a      	add	r2, r3
 8002230:	8bbb      	ldrh	r3, [r7, #28]
 8002232:	2108      	movs	r1, #8
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe f9ed 	bl	8000614 <ExtractBits>
 800223a:	4603      	mov	r3, r0
 800223c:	78ba      	ldrb	r2, [r7, #2]
 800223e:	b2d8      	uxtb	r0, r3
 8002240:	4942      	ldr	r1, [pc, #264]	; (800234c <Init_Msg_extr+0x690>)
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	440b      	add	r3, r1
 800224c:	4602      	mov	r2, r0
 800224e:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8002250:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002254:	3308      	adds	r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	da00      	bge.n	800225c <Init_Msg_extr+0x5a0>
 800225a:	3307      	adds	r3, #7
 800225c:	10db      	asrs	r3, r3, #3
 800225e:	b29a      	uxth	r2, r3
 8002260:	8bfb      	ldrh	r3, [r7, #30]
 8002262:	4413      	add	r3, r2
 8002264:	83fb      	strh	r3, [r7, #30]
 8002266:	8bbb      	ldrh	r3, [r7, #28]
 8002268:	3308      	adds	r3, #8
 800226a:	b29b      	uxth	r3, r3
 800226c:	b21b      	sxth	r3, r3
 800226e:	425a      	negs	r2, r3
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	f002 0207 	and.w	r2, r2, #7
 8002278:	bf58      	it	pl
 800227a:	4253      	negpl	r3, r2
 800227c:	b21b      	sxth	r3, r3
 800227e:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002280:	8bfb      	ldrh	r3, [r7, #30]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	441a      	add	r2, r3
 8002286:	8bbb      	ldrh	r3, [r7, #28]
 8002288:	2108      	movs	r1, #8
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f9c2 	bl	8000614 <ExtractBits>
 8002290:	4603      	mov	r3, r0
 8002292:	78ba      	ldrb	r2, [r7, #2]
 8002294:	b2d8      	uxtb	r0, r3
 8002296:	492d      	ldr	r1, [pc, #180]	; (800234c <Init_Msg_extr+0x690>)
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	440b      	add	r3, r1
 80022a2:	3301      	adds	r3, #1
 80022a4:	4602      	mov	r2, r0
 80022a6:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 80022a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80022ac:	3308      	adds	r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da00      	bge.n	80022b4 <Init_Msg_extr+0x5f8>
 80022b2:	3307      	adds	r3, #7
 80022b4:	10db      	asrs	r3, r3, #3
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	8bfb      	ldrh	r3, [r7, #30]
 80022ba:	4413      	add	r3, r2
 80022bc:	83fb      	strh	r3, [r7, #30]
 80022be:	8bbb      	ldrh	r3, [r7, #28]
 80022c0:	3308      	adds	r3, #8
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	425a      	negs	r2, r3
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	f002 0207 	and.w	r2, r2, #7
 80022d0:	bf58      	it	pl
 80022d2:	4253      	negpl	r3, r2
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80022d8:	8bfb      	ldrh	r3, [r7, #30]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	441a      	add	r2, r3
 80022de:	8bbb      	ldrh	r3, [r7, #28]
 80022e0:	2108      	movs	r1, #8
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f996 	bl	8000614 <ExtractBits>
 80022e8:	4603      	mov	r3, r0
 80022ea:	78ba      	ldrb	r2, [r7, #2]
 80022ec:	b2d8      	uxtb	r0, r3
 80022ee:	4917      	ldr	r1, [pc, #92]	; (800234c <Init_Msg_extr+0x690>)
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	440b      	add	r3, r1
 80022fa:	3302      	adds	r3, #2
 80022fc:	4602      	mov	r2, r0
 80022fe:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8002300:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002304:	3308      	adds	r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	da00      	bge.n	800230c <Init_Msg_extr+0x650>
 800230a:	3307      	adds	r3, #7
 800230c:	10db      	asrs	r3, r3, #3
 800230e:	b29a      	uxth	r2, r3
 8002310:	8bfb      	ldrh	r3, [r7, #30]
 8002312:	4413      	add	r3, r2
 8002314:	83fb      	strh	r3, [r7, #30]
 8002316:	8bbb      	ldrh	r3, [r7, #28]
 8002318:	3308      	adds	r3, #8
 800231a:	b29b      	uxth	r3, r3
 800231c:	b21b      	sxth	r3, r3
 800231e:	425a      	negs	r2, r3
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	f002 0207 	and.w	r2, r2, #7
 8002328:	bf58      	it	pl
 800232a:	4253      	negpl	r3, r2
 800232c:	b21b      	sxth	r3, r3
 800232e:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8002330:	78bb      	ldrb	r3, [r7, #2]
 8002332:	4618      	mov	r0, r3
 8002334:	f007 faac 	bl	8009890 <IS_MLK_EIPC_TIME_MATCHING>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <Init_Msg_extr+0x698>
 800233e:	78bb      	ldrb	r3, [r7, #2]
 8002340:	4a03      	ldr	r2, [pc, #12]	; (8002350 <Init_Msg_extr+0x694>)
 8002342:	2100      	movs	r1, #0
 8002344:	54d1      	strb	r1, [r2, r3]
 8002346:	e009      	b.n	800235c <Init_Msg_extr+0x6a0>
 8002348:	200028f4 	.word	0x200028f4
 800234c:	200028b8 	.word	0x200028b8
 8002350:	20002764 	.word	0x20002764
 8002354:	78bb      	ldrb	r3, [r7, #2]
 8002356:	4aa4      	ldr	r2, [pc, #656]	; (80025e8 <Init_Msg_extr+0x92c>)
 8002358:	2101      	movs	r1, #1
 800235a:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800235c:	8bfb      	ldrh	r3, [r7, #30]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	441a      	add	r2, r3
 8002362:	8bbb      	ldrh	r3, [r7, #28]
 8002364:	2108      	movs	r1, #8
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f954 	bl	8000614 <ExtractBits>
 800236c:	4602      	mov	r2, r0
 800236e:	78bb      	ldrb	r3, [r7, #2]
 8002370:	b2d1      	uxtb	r1, r2
 8002372:	4a9e      	ldr	r2, [pc, #632]	; (80025ec <Init_Msg_extr+0x930>)
 8002374:	015b      	lsls	r3, r3, #5
 8002376:	4413      	add	r3, r2
 8002378:	3303      	adds	r3, #3
 800237a:	460a      	mov	r2, r1
 800237c:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 800237e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002382:	3308      	adds	r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	da00      	bge.n	800238a <Init_Msg_extr+0x6ce>
 8002388:	3307      	adds	r3, #7
 800238a:	10db      	asrs	r3, r3, #3
 800238c:	b29a      	uxth	r2, r3
 800238e:	8bfb      	ldrh	r3, [r7, #30]
 8002390:	4413      	add	r3, r2
 8002392:	83fb      	strh	r3, [r7, #30]
 8002394:	8bbb      	ldrh	r3, [r7, #28]
 8002396:	3308      	adds	r3, #8
 8002398:	b29b      	uxth	r3, r3
 800239a:	b21b      	sxth	r3, r3
 800239c:	425a      	negs	r2, r3
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	f002 0207 	and.w	r2, r2, #7
 80023a6:	bf58      	it	pl
 80023a8:	4253      	negpl	r3, r2
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80023ae:	8bfb      	ldrh	r3, [r7, #30]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	441a      	add	r2, r3
 80023b4:	8bbb      	ldrh	r3, [r7, #28]
 80023b6:	2110      	movs	r1, #16
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f92b 	bl	8000614 <ExtractBits>
 80023be:	4602      	mov	r2, r0
 80023c0:	78bb      	ldrb	r3, [r7, #2]
 80023c2:	b291      	uxth	r1, r2
 80023c4:	4a89      	ldr	r2, [pc, #548]	; (80025ec <Init_Msg_extr+0x930>)
 80023c6:	015b      	lsls	r3, r3, #5
 80023c8:	4413      	add	r3, r2
 80023ca:	3312      	adds	r3, #18
 80023cc:	460a      	mov	r2, r1
 80023ce:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 80023d0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80023d4:	3310      	adds	r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	da00      	bge.n	80023dc <Init_Msg_extr+0x720>
 80023da:	3307      	adds	r3, #7
 80023dc:	10db      	asrs	r3, r3, #3
 80023de:	b29a      	uxth	r2, r3
 80023e0:	8bfb      	ldrh	r3, [r7, #30]
 80023e2:	4413      	add	r3, r2
 80023e4:	83fb      	strh	r3, [r7, #30]
 80023e6:	8bbb      	ldrh	r3, [r7, #28]
 80023e8:	3310      	adds	r3, #16
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	425a      	negs	r2, r3
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	f002 0207 	and.w	r2, r2, #7
 80023f8:	bf58      	it	pl
 80023fa:	4253      	negpl	r3, r2
 80023fc:	b21b      	sxth	r3, r3
 80023fe:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 8002400:	78bb      	ldrb	r3, [r7, #2]
 8002402:	015b      	lsls	r3, r3, #5
 8002404:	4a79      	ldr	r2, [pc, #484]	; (80025ec <Init_Msg_extr+0x930>)
 8002406:	4413      	add	r3, r2
 8002408:	1d18      	adds	r0, r3, #4
 800240a:	8bfb      	ldrh	r3, [r7, #30]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	4413      	add	r3, r2
 8002410:	2206      	movs	r2, #6
 8002412:	4619      	mov	r1, r3
 8002414:	f024 fada 	bl	80269cc <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8002418:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800241c:	3310      	adds	r3, #16
 800241e:	2b00      	cmp	r3, #0
 8002420:	da00      	bge.n	8002424 <Init_Msg_extr+0x768>
 8002422:	3307      	adds	r3, #7
 8002424:	10db      	asrs	r3, r3, #3
 8002426:	b29a      	uxth	r2, r3
 8002428:	8bfb      	ldrh	r3, [r7, #30]
 800242a:	4413      	add	r3, r2
 800242c:	83fb      	strh	r3, [r7, #30]
 800242e:	8bbb      	ldrh	r3, [r7, #28]
 8002430:	3310      	adds	r3, #16
 8002432:	b29b      	uxth	r3, r3
 8002434:	b21b      	sxth	r3, r3
 8002436:	425a      	negs	r2, r3
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	f002 0207 	and.w	r2, r2, #7
 8002440:	bf58      	it	pl
 8002442:	4253      	negpl	r3, r2
 8002444:	b21b      	sxth	r3, r3
 8002446:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8002448:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800244c:	3310      	adds	r3, #16
 800244e:	2b00      	cmp	r3, #0
 8002450:	da00      	bge.n	8002454 <Init_Msg_extr+0x798>
 8002452:	3307      	adds	r3, #7
 8002454:	10db      	asrs	r3, r3, #3
 8002456:	b29a      	uxth	r2, r3
 8002458:	8bfb      	ldrh	r3, [r7, #30]
 800245a:	4413      	add	r3, r2
 800245c:	83fb      	strh	r3, [r7, #30]
 800245e:	8bbb      	ldrh	r3, [r7, #28]
 8002460:	3310      	adds	r3, #16
 8002462:	b29b      	uxth	r3, r3
 8002464:	b21b      	sxth	r3, r3
 8002466:	425a      	negs	r2, r3
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	f002 0207 	and.w	r2, r2, #7
 8002470:	bf58      	it	pl
 8002472:	4253      	negpl	r3, r2
 8002474:	b21b      	sxth	r3, r3
 8002476:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8002478:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800247c:	3310      	adds	r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	da00      	bge.n	8002484 <Init_Msg_extr+0x7c8>
 8002482:	3307      	adds	r3, #7
 8002484:	10db      	asrs	r3, r3, #3
 8002486:	b29a      	uxth	r2, r3
 8002488:	8bfb      	ldrh	r3, [r7, #30]
 800248a:	4413      	add	r3, r2
 800248c:	83fb      	strh	r3, [r7, #30]
 800248e:	8bbb      	ldrh	r3, [r7, #28]
 8002490:	3310      	adds	r3, #16
 8002492:	b29b      	uxth	r3, r3
 8002494:	b21b      	sxth	r3, r3
 8002496:	425a      	negs	r2, r3
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	f002 0207 	and.w	r2, r2, #7
 80024a0:	bf58      	it	pl
 80024a2:	4253      	negpl	r3, r2
 80024a4:	b21b      	sxth	r3, r3
 80024a6:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80024a8:	8bfb      	ldrh	r3, [r7, #30]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	441a      	add	r2, r3
 80024ae:	8bbb      	ldrh	r3, [r7, #28]
 80024b0:	2110      	movs	r1, #16
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe f8ae 	bl	8000614 <ExtractBits>
 80024b8:	4602      	mov	r2, r0
 80024ba:	78bb      	ldrb	r3, [r7, #2]
 80024bc:	b291      	uxth	r1, r2
 80024be:	4a4b      	ldr	r2, [pc, #300]	; (80025ec <Init_Msg_extr+0x930>)
 80024c0:	015b      	lsls	r3, r3, #5
 80024c2:	4413      	add	r3, r2
 80024c4:	3314      	adds	r3, #20
 80024c6:	460a      	mov	r2, r1
 80024c8:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 80024ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80024ce:	3310      	adds	r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	da00      	bge.n	80024d6 <Init_Msg_extr+0x81a>
 80024d4:	3307      	adds	r3, #7
 80024d6:	10db      	asrs	r3, r3, #3
 80024d8:	b29a      	uxth	r2, r3
 80024da:	8bfb      	ldrh	r3, [r7, #30]
 80024dc:	4413      	add	r3, r2
 80024de:	83fb      	strh	r3, [r7, #30]
 80024e0:	8bbb      	ldrh	r3, [r7, #28]
 80024e2:	3310      	adds	r3, #16
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	b21b      	sxth	r3, r3
 80024e8:	425a      	negs	r2, r3
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	f002 0207 	and.w	r2, r2, #7
 80024f2:	bf58      	it	pl
 80024f4:	4253      	negpl	r3, r2
 80024f6:	b21b      	sxth	r3, r3
 80024f8:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80024fa:	8bfb      	ldrh	r3, [r7, #30]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	441a      	add	r2, r3
 8002500:	8bbb      	ldrh	r3, [r7, #28]
 8002502:	2110      	movs	r1, #16
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f885 	bl	8000614 <ExtractBits>
 800250a:	4602      	mov	r2, r0
 800250c:	78bb      	ldrb	r3, [r7, #2]
 800250e:	b291      	uxth	r1, r2
 8002510:	4a36      	ldr	r2, [pc, #216]	; (80025ec <Init_Msg_extr+0x930>)
 8002512:	015b      	lsls	r3, r3, #5
 8002514:	4413      	add	r3, r2
 8002516:	3316      	adds	r3, #22
 8002518:	460a      	mov	r2, r1
 800251a:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 800251c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002520:	3310      	adds	r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	da00      	bge.n	8002528 <Init_Msg_extr+0x86c>
 8002526:	3307      	adds	r3, #7
 8002528:	10db      	asrs	r3, r3, #3
 800252a:	b29a      	uxth	r2, r3
 800252c:	8bfb      	ldrh	r3, [r7, #30]
 800252e:	4413      	add	r3, r2
 8002530:	83fb      	strh	r3, [r7, #30]
 8002532:	8bbb      	ldrh	r3, [r7, #28]
 8002534:	3310      	adds	r3, #16
 8002536:	b29b      	uxth	r3, r3
 8002538:	b21b      	sxth	r3, r3
 800253a:	425a      	negs	r2, r3
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	f002 0207 	and.w	r2, r2, #7
 8002544:	bf58      	it	pl
 8002546:	4253      	negpl	r3, r2
 8002548:	b21b      	sxth	r3, r3
 800254a:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800254c:	8bfb      	ldrh	r3, [r7, #30]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	441a      	add	r2, r3
 8002552:	8bbb      	ldrh	r3, [r7, #28]
 8002554:	2110      	movs	r1, #16
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe f85c 	bl	8000614 <ExtractBits>
 800255c:	4602      	mov	r2, r0
 800255e:	78bb      	ldrb	r3, [r7, #2]
 8002560:	b291      	uxth	r1, r2
 8002562:	4a22      	ldr	r2, [pc, #136]	; (80025ec <Init_Msg_extr+0x930>)
 8002564:	015b      	lsls	r3, r3, #5
 8002566:	4413      	add	r3, r2
 8002568:	3318      	adds	r3, #24
 800256a:	460a      	mov	r2, r1
 800256c:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 800256e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002572:	3310      	adds	r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	da00      	bge.n	800257a <Init_Msg_extr+0x8be>
 8002578:	3307      	adds	r3, #7
 800257a:	10db      	asrs	r3, r3, #3
 800257c:	b29a      	uxth	r2, r3
 800257e:	8bfb      	ldrh	r3, [r7, #30]
 8002580:	4413      	add	r3, r2
 8002582:	83fb      	strh	r3, [r7, #30]
 8002584:	8bbb      	ldrh	r3, [r7, #28]
 8002586:	3310      	adds	r3, #16
 8002588:	b29b      	uxth	r3, r3
 800258a:	b21b      	sxth	r3, r3
 800258c:	425a      	negs	r2, r3
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	f002 0207 	and.w	r2, r2, #7
 8002596:	bf58      	it	pl
 8002598:	4253      	negpl	r3, r2
 800259a:	b21b      	sxth	r3, r3
 800259c:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 800259e:	8bfb      	ldrh	r3, [r7, #30]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	441a      	add	r2, r3
 80025a4:	78bc      	ldrb	r4, [r7, #2]
 80025a6:	8bbb      	ldrh	r3, [r7, #28]
 80025a8:	2118      	movs	r1, #24
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe f832 	bl	8000614 <ExtractBits>
 80025b0:	4602      	mov	r2, r0
 80025b2:	490f      	ldr	r1, [pc, #60]	; (80025f0 <Init_Msg_extr+0x934>)
 80025b4:	0123      	lsls	r3, r4, #4
 80025b6:	440b      	add	r3, r1
 80025b8:	3308      	adds	r3, #8
 80025ba:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80025bc:	78bb      	ldrb	r3, [r7, #2]
 80025be:	78ba      	ldrb	r2, [r7, #2]
 80025c0:	490b      	ldr	r1, [pc, #44]	; (80025f0 <Init_Msg_extr+0x934>)
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	440b      	add	r3, r1
 80025c6:	3308      	adds	r3, #8
 80025c8:	6819      	ldr	r1, [r3, #0]
 80025ca:	480a      	ldr	r0, [pc, #40]	; (80025f4 <Init_Msg_extr+0x938>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4403      	add	r3, r0
 80025d6:	3308      	adds	r3, #8
 80025d8:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 80025da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80025de:	3318      	adds	r3, #24
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	da09      	bge.n	80025f8 <Init_Msg_extr+0x93c>
 80025e4:	3307      	adds	r3, #7
 80025e6:	e007      	b.n	80025f8 <Init_Msg_extr+0x93c>
 80025e8:	20002764 	.word	0x20002764
 80025ec:	20002994 	.word	0x20002994
 80025f0:	200028f4 	.word	0x200028f4
 80025f4:	20002da4 	.word	0x20002da4
 80025f8:	10db      	asrs	r3, r3, #3
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	8bfb      	ldrh	r3, [r7, #30]
 80025fe:	4413      	add	r3, r2
 8002600:	83fb      	strh	r3, [r7, #30]
 8002602:	8bbb      	ldrh	r3, [r7, #28]
 8002604:	3318      	adds	r3, #24
 8002606:	b29b      	uxth	r3, r3
 8002608:	b21b      	sxth	r3, r3
 800260a:	425a      	negs	r2, r3
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	f002 0207 	and.w	r2, r2, #7
 8002614:	bf58      	it	pl
 8002616:	4253      	negpl	r3, r2
 8002618:	b21b      	sxth	r3, r3
 800261a:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800261c:	8bfb      	ldrh	r3, [r7, #30]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	441a      	add	r2, r3
 8002622:	8bbb      	ldrh	r3, [r7, #28]
 8002624:	2108      	movs	r1, #8
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd fff4 	bl	8000614 <ExtractBits>
 800262c:	4602      	mov	r2, r0
 800262e:	78bb      	ldrb	r3, [r7, #2]
 8002630:	b2d1      	uxtb	r1, r2
 8002632:	4ab1      	ldr	r2, [pc, #708]	; (80028f8 <Init_Msg_extr+0xc3c>)
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	4413      	add	r3, r2
 8002638:	460a      	mov	r2, r1
 800263a:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 800263c:	78ba      	ldrb	r2, [r7, #2]
 800263e:	78bb      	ldrb	r3, [r7, #2]
 8002640:	49ad      	ldr	r1, [pc, #692]	; (80028f8 <Init_Msg_extr+0xc3c>)
 8002642:	0112      	lsls	r2, r2, #4
 8002644:	440a      	add	r2, r1
 8002646:	7811      	ldrb	r1, [r2, #0]
 8002648:	4aab      	ldr	r2, [pc, #684]	; (80028f8 <Init_Msg_extr+0xc3c>)
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	4413      	add	r3, r2
 800264e:	3302      	adds	r3, #2
 8002650:	460a      	mov	r2, r1
 8002652:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 8002654:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002658:	3308      	adds	r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	da00      	bge.n	8002660 <Init_Msg_extr+0x9a4>
 800265e:	3307      	adds	r3, #7
 8002660:	10db      	asrs	r3, r3, #3
 8002662:	b29a      	uxth	r2, r3
 8002664:	8bfb      	ldrh	r3, [r7, #30]
 8002666:	4413      	add	r3, r2
 8002668:	83fb      	strh	r3, [r7, #30]
 800266a:	8bbb      	ldrh	r3, [r7, #28]
 800266c:	3308      	adds	r3, #8
 800266e:	b29b      	uxth	r3, r3
 8002670:	b21b      	sxth	r3, r3
 8002672:	425a      	negs	r2, r3
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	f002 0207 	and.w	r2, r2, #7
 800267c:	bf58      	it	pl
 800267e:	4253      	negpl	r3, r2
 8002680:	b21b      	sxth	r3, r3
 8002682:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002684:	8bfb      	ldrh	r3, [r7, #30]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	441a      	add	r2, r3
 800268a:	8bbb      	ldrh	r3, [r7, #28]
 800268c:	2108      	movs	r1, #8
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd ffc0 	bl	8000614 <ExtractBits>
 8002694:	4602      	mov	r2, r0
 8002696:	78bb      	ldrb	r3, [r7, #2]
 8002698:	b2d1      	uxtb	r1, r2
 800269a:	4a98      	ldr	r2, [pc, #608]	; (80028fc <Init_Msg_extr+0xc40>)
 800269c:	015b      	lsls	r3, r3, #5
 800269e:	4413      	add	r3, r2
 80026a0:	330a      	adds	r3, #10
 80026a2:	460a      	mov	r2, r1
 80026a4:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 80026a6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80026aa:	3308      	adds	r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	da00      	bge.n	80026b2 <Init_Msg_extr+0x9f6>
 80026b0:	3307      	adds	r3, #7
 80026b2:	10db      	asrs	r3, r3, #3
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	8bfb      	ldrh	r3, [r7, #30]
 80026b8:	4413      	add	r3, r2
 80026ba:	83fb      	strh	r3, [r7, #30]
 80026bc:	8bbb      	ldrh	r3, [r7, #28]
 80026be:	3308      	adds	r3, #8
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	b21b      	sxth	r3, r3
 80026c4:	425a      	negs	r2, r3
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	f002 0207 	and.w	r2, r2, #7
 80026ce:	bf58      	it	pl
 80026d0:	4253      	negpl	r3, r2
 80026d2:	b21b      	sxth	r3, r3
 80026d4:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80026d6:	8bfb      	ldrh	r3, [r7, #30]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	441a      	add	r2, r3
 80026dc:	8bbb      	ldrh	r3, [r7, #28]
 80026de:	2108      	movs	r1, #8
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd ff97 	bl	8000614 <ExtractBits>
 80026e6:	4602      	mov	r2, r0
 80026e8:	78bb      	ldrb	r3, [r7, #2]
 80026ea:	b2d1      	uxtb	r1, r2
 80026ec:	4a82      	ldr	r2, [pc, #520]	; (80028f8 <Init_Msg_extr+0xc3c>)
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	4413      	add	r3, r2
 80026f2:	3303      	adds	r3, #3
 80026f4:	460a      	mov	r2, r1
 80026f6:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 80026f8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80026fc:	3308      	adds	r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da00      	bge.n	8002704 <Init_Msg_extr+0xa48>
 8002702:	3307      	adds	r3, #7
 8002704:	10db      	asrs	r3, r3, #3
 8002706:	b29a      	uxth	r2, r3
 8002708:	8bfb      	ldrh	r3, [r7, #30]
 800270a:	4413      	add	r3, r2
 800270c:	83fb      	strh	r3, [r7, #30]
 800270e:	8bbb      	ldrh	r3, [r7, #28]
 8002710:	3308      	adds	r3, #8
 8002712:	b29b      	uxth	r3, r3
 8002714:	b21b      	sxth	r3, r3
 8002716:	425a      	negs	r2, r3
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	f002 0207 	and.w	r2, r2, #7
 8002720:	bf58      	it	pl
 8002722:	4253      	negpl	r3, r2
 8002724:	b21b      	sxth	r3, r3
 8002726:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8002728:	78bb      	ldrb	r3, [r7, #2]
 800272a:	4a73      	ldr	r2, [pc, #460]	; (80028f8 <Init_Msg_extr+0xc3c>)
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	4413      	add	r3, r2
 8002730:	3303      	adds	r3, #3
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	78bb      	ldrb	r3, [r7, #2]
 8002736:	4972      	ldr	r1, [pc, #456]	; (8002900 <Init_Msg_extr+0xc44>)
 8002738:	440b      	add	r3, r1
 800273a:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800273e:	429a      	cmp	r2, r3
 8002740:	d015      	beq.n	800276e <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 8002742:	4870      	ldr	r0, [pc, #448]	; (8002904 <Init_Msg_extr+0xc48>)
 8002744:	f024 faee 	bl	8026d24 <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002748:	78bb      	ldrb	r3, [r7, #2]
 800274a:	4a6d      	ldr	r2, [pc, #436]	; (8002900 <Init_Msg_extr+0xc44>)
 800274c:	4413      	add	r3, r2
 800274e:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002752:	4619      	mov	r1, r3
 8002754:	486c      	ldr	r0, [pc, #432]	; (8002908 <Init_Msg_extr+0xc4c>)
 8002756:	f024 fa49 	bl	8026bec <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 800275a:	78bb      	ldrb	r3, [r7, #2]
 800275c:	4a66      	ldr	r2, [pc, #408]	; (80028f8 <Init_Msg_extr+0xc3c>)
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	4413      	add	r3, r2
 8002762:	3303      	adds	r3, #3
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	4619      	mov	r1, r3
 8002768:	4868      	ldr	r0, [pc, #416]	; (800290c <Init_Msg_extr+0xc50>)
 800276a:	f024 fa3f 	bl	8026bec <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800276e:	8bfb      	ldrh	r3, [r7, #30]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	441a      	add	r2, r3
 8002774:	8bbb      	ldrh	r3, [r7, #28]
 8002776:	2108      	movs	r1, #8
 8002778:	4618      	mov	r0, r3
 800277a:	f7fd ff4b 	bl	8000614 <ExtractBits>
 800277e:	4602      	mov	r2, r0
 8002780:	78bb      	ldrb	r3, [r7, #2]
 8002782:	b2d1      	uxtb	r1, r2
 8002784:	4a5d      	ldr	r2, [pc, #372]	; (80028fc <Init_Msg_extr+0xc40>)
 8002786:	015b      	lsls	r3, r3, #5
 8002788:	4413      	add	r3, r2
 800278a:	330b      	adds	r3, #11
 800278c:	460a      	mov	r2, r1
 800278e:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 8002790:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002794:	3308      	adds	r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	da00      	bge.n	800279c <Init_Msg_extr+0xae0>
 800279a:	3307      	adds	r3, #7
 800279c:	10db      	asrs	r3, r3, #3
 800279e:	b29a      	uxth	r2, r3
 80027a0:	8bfb      	ldrh	r3, [r7, #30]
 80027a2:	4413      	add	r3, r2
 80027a4:	83fb      	strh	r3, [r7, #30]
 80027a6:	8bbb      	ldrh	r3, [r7, #28]
 80027a8:	3308      	adds	r3, #8
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	b21b      	sxth	r3, r3
 80027ae:	425a      	negs	r2, r3
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	f002 0207 	and.w	r2, r2, #7
 80027b8:	bf58      	it	pl
 80027ba:	4253      	negpl	r3, r2
 80027bc:	b21b      	sxth	r3, r3
 80027be:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80027c0:	8bfb      	ldrh	r3, [r7, #30]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	441a      	add	r2, r3
 80027c6:	8bbb      	ldrh	r3, [r7, #28]
 80027c8:	2108      	movs	r1, #8
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd ff22 	bl	8000614 <ExtractBits>
 80027d0:	4602      	mov	r2, r0
 80027d2:	78bb      	ldrb	r3, [r7, #2]
 80027d4:	b2d1      	uxtb	r1, r2
 80027d6:	4a49      	ldr	r2, [pc, #292]	; (80028fc <Init_Msg_extr+0xc40>)
 80027d8:	015b      	lsls	r3, r3, #5
 80027da:	4413      	add	r3, r2
 80027dc:	330c      	adds	r3, #12
 80027de:	460a      	mov	r2, r1
 80027e0:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 80027e2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80027e6:	3308      	adds	r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da00      	bge.n	80027ee <Init_Msg_extr+0xb32>
 80027ec:	3307      	adds	r3, #7
 80027ee:	10db      	asrs	r3, r3, #3
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	8bfb      	ldrh	r3, [r7, #30]
 80027f4:	4413      	add	r3, r2
 80027f6:	83fb      	strh	r3, [r7, #30]
 80027f8:	8bbb      	ldrh	r3, [r7, #28]
 80027fa:	3308      	adds	r3, #8
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	b21b      	sxth	r3, r3
 8002800:	425a      	negs	r2, r3
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	f002 0207 	and.w	r2, r2, #7
 800280a:	bf58      	it	pl
 800280c:	4253      	negpl	r3, r2
 800280e:	b21b      	sxth	r3, r3
 8002810:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 8002812:	78bb      	ldrb	r3, [r7, #2]
 8002814:	4a39      	ldr	r2, [pc, #228]	; (80028fc <Init_Msg_extr+0xc40>)
 8002816:	015b      	lsls	r3, r3, #5
 8002818:	4413      	add	r3, r2
 800281a:	330c      	adds	r3, #12
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d00c      	beq.n	800283c <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 8002822:	78bb      	ldrb	r3, [r7, #2]
 8002824:	4a35      	ldr	r2, [pc, #212]	; (80028fc <Init_Msg_extr+0xc40>)
 8002826:	015b      	lsls	r3, r3, #5
 8002828:	4413      	add	r3, r2
 800282a:	330c      	adds	r3, #12
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	4837      	ldr	r0, [pc, #220]	; (8002910 <Init_Msg_extr+0xc54>)
 8002832:	f024 f9db 	bl	8026bec <iprintf>
		printf("This Value has to be \"1\"\n");
 8002836:	4837      	ldr	r0, [pc, #220]	; (8002914 <Init_Msg_extr+0xc58>)
 8002838:	f024 fa74 	bl	8026d24 <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800283c:	8bfb      	ldrh	r3, [r7, #30]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	441a      	add	r2, r3
 8002842:	8bbb      	ldrh	r3, [r7, #28]
 8002844:	2108      	movs	r1, #8
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fee4 	bl	8000614 <ExtractBits>
 800284c:	4602      	mov	r2, r0
 800284e:	78bb      	ldrb	r3, [r7, #2]
 8002850:	b2d1      	uxtb	r1, r2
 8002852:	4a2a      	ldr	r2, [pc, #168]	; (80028fc <Init_Msg_extr+0xc40>)
 8002854:	015b      	lsls	r3, r3, #5
 8002856:	4413      	add	r3, r2
 8002858:	330d      	adds	r3, #13
 800285a:	460a      	mov	r2, r1
 800285c:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 800285e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002862:	3308      	adds	r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	da00      	bge.n	800286a <Init_Msg_extr+0xbae>
 8002868:	3307      	adds	r3, #7
 800286a:	10db      	asrs	r3, r3, #3
 800286c:	b29a      	uxth	r2, r3
 800286e:	8bfb      	ldrh	r3, [r7, #30]
 8002870:	4413      	add	r3, r2
 8002872:	83fb      	strh	r3, [r7, #30]
 8002874:	8bbb      	ldrh	r3, [r7, #28]
 8002876:	3308      	adds	r3, #8
 8002878:	b29b      	uxth	r3, r3
 800287a:	b21b      	sxth	r3, r3
 800287c:	425a      	negs	r2, r3
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	f002 0207 	and.w	r2, r2, #7
 8002886:	bf58      	it	pl
 8002888:	4253      	negpl	r3, r2
 800288a:	b21b      	sxth	r3, r3
 800288c:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 800288e:	8bfb      	ldrh	r3, [r7, #30]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	441a      	add	r2, r3
 8002894:	78bc      	ldrb	r4, [r7, #2]
 8002896:	8bbb      	ldrh	r3, [r7, #28]
 8002898:	2120      	movs	r1, #32
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd feba 	bl	8000614 <ExtractBits>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4916      	ldr	r1, [pc, #88]	; (80028fc <Init_Msg_extr+0xc40>)
 80028a4:	0163      	lsls	r3, r4, #5
 80028a6:	440b      	add	r3, r1
 80028a8:	331c      	adds	r3, #28
 80028aa:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80028ac:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028b0:	3320      	adds	r3, #32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	da00      	bge.n	80028b8 <Init_Msg_extr+0xbfc>
 80028b6:	3307      	adds	r3, #7
 80028b8:	10db      	asrs	r3, r3, #3
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	8bfb      	ldrh	r3, [r7, #30]
 80028be:	4413      	add	r3, r2
 80028c0:	83fb      	strh	r3, [r7, #30]
 80028c2:	8bbb      	ldrh	r3, [r7, #28]
 80028c4:	3320      	adds	r3, #32
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	b21b      	sxth	r3, r3
 80028ca:	425a      	negs	r2, r3
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	f002 0207 	and.w	r2, r2, #7
 80028d4:	bf58      	it	pl
 80028d6:	4253      	negpl	r3, r2
 80028d8:	b21b      	sxth	r3, r3
 80028da:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 80028dc:	787a      	ldrb	r2, [r7, #1]
 80028de:	78bb      	ldrb	r3, [r7, #2]
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f86c 	bl	80029c0 <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 80028e8:	78ba      	ldrb	r2, [r7, #2]
 80028ea:	490b      	ldr	r1, [pc, #44]	; (8002918 <Init_Msg_extr+0xc5c>)
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	e012      	b.n	800291c <Init_Msg_extr+0xc60>
 80028f6:	bf00      	nop
 80028f8:	200028f4 	.word	0x200028f4
 80028fc:	20002994 	.word	0x20002994
 8002900:	20000504 	.word	0x20000504
 8002904:	08028a30 	.word	0x08028a30
 8002908:	080289f8 	.word	0x080289f8
 800290c:	08028a0c 	.word	0x08028a0c
 8002910:	08028a4c 	.word	0x08028a4c
 8002914:	08028a78 	.word	0x08028a78
 8002918:	20002da4 	.word	0x20002da4
 800291c:	440b      	add	r3, r1
 800291e:	3314      	adds	r3, #20
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 8002924:	78ba      	ldrb	r2, [r7, #2]
 8002926:	4923      	ldr	r1, [pc, #140]	; (80029b4 <Init_Msg_extr+0xcf8>)
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	3305      	adds	r3, #5
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8002938:	78ba      	ldrb	r2, [r7, #2]
 800293a:	491e      	ldr	r1, [pc, #120]	; (80029b4 <Init_Msg_extr+0xcf8>)
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	78ba      	ldrb	r2, [r7, #2]
 8002948:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 800294a:	78ba      	ldrb	r2, [r7, #2]
 800294c:	4919      	ldr	r1, [pc, #100]	; (80029b4 <Init_Msg_extr+0xcf8>)
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	440b      	add	r3, r1
 8002958:	3301      	adds	r3, #1
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 800295e:	2218      	movs	r2, #24
 8002960:	2100      	movs	r1, #0
 8002962:	4815      	ldr	r0, [pc, #84]	; (80029b8 <Init_Msg_extr+0xcfc>)
 8002964:	f024 f85a 	bl	8026a1c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8002968:	78ba      	ldrb	r2, [r7, #2]
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <Init_Msg_extr+0xcf8>)
 8002974:	4413      	add	r3, r2
 8002976:	2218      	movs	r2, #24
 8002978:	4619      	mov	r1, r3
 800297a:	480f      	ldr	r0, [pc, #60]	; (80029b8 <Init_Msg_extr+0xcfc>)
 800297c:	f024 f826 	bl	80269cc <memcpy>


#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 8002980:	f240 2001 	movw	r0, #513	; 0x201
 8002984:	f00e fbbe 	bl	8011104 <TransmitCanPkt>

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8002988:	78ba      	ldrb	r2, [r7, #2]
 800298a:	490a      	ldr	r1, [pc, #40]	; (80029b4 <Init_Msg_extr+0xcf8>)
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	3301      	adds	r3, #1
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 800299c:	78bc      	ldrb	r4, [r7, #2]
 800299e:	f017 f91b 	bl	8019bd8 <HAL_GetTick>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4a05      	ldr	r2, [pc, #20]	; (80029bc <Init_Msg_extr+0xd00>)
 80029a6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80029aa:	e000      	b.n	80029ae <Init_Msg_extr+0xcf2>
			return;
 80029ac:	bf00      	nop
}
 80029ae:	3724      	adds	r7, #36	; 0x24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd90      	pop	{r4, r7, pc}
 80029b4:	20002da4 	.word	0x20002da4
 80029b8:	20002f84 	.word	0x20002f84
 80029bc:	200024b8 	.word	0x200024b8

080029c0 <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b097      	sub	sp, #92	; 0x5c
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	460a      	mov	r2, r1
 80029ca:	71fb      	strb	r3, [r7, #7]
 80029cc:	4613      	mov	r3, r2
 80029ce:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	2238      	movs	r2, #56	; 0x38
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f024 f81d 	bl	8026a1c <memset>
	uint32_t Calc_CRC = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 80029e6:	2300      	movs	r3, #0
 80029e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 80029f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029f6:	f107 020c 	add.w	r2, r7, #12
 80029fa:	441a      	add	r2, r3
 80029fc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a00:	23f4      	movs	r3, #244	; 0xf4
 8002a02:	2108      	movs	r1, #8
 8002a04:	f7fd fe92 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a08:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a0c:	3308      	adds	r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	da00      	bge.n	8002a14 <Send_Init_Msg+0x54>
 8002a12:	3307      	adds	r3, #7
 8002a14:	10db      	asrs	r3, r3, #3
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a22:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a26:	3308      	adds	r3, #8
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	b21b      	sxth	r3, r3
 8002a2c:	425a      	negs	r2, r3
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	f002 0207 	and.w	r2, r2, #7
 8002a36:	bf58      	it	pl
 8002a38:	4253      	negpl	r3, r2
 8002a3a:	b21b      	sxth	r3, r3
 8002a3c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002a40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a44:	f107 020c 	add.w	r2, r7, #12
 8002a48:	441a      	add	r2, r3
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	4977      	ldr	r1, [pc, #476]	; (8002c2c <Send_Init_Msg+0x26c>)
 8002a4e:	3366      	adds	r3, #102	; 0x66
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a5a:	2110      	movs	r1, #16
 8002a5c:	f7fd fe66 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002a60:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a64:	3310      	adds	r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	da00      	bge.n	8002a6c <Send_Init_Msg+0xac>
 8002a6a:	3307      	adds	r3, #7
 8002a6c:	10db      	asrs	r3, r3, #3
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a74:	4413      	add	r3, r2
 8002a76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a7e:	3310      	adds	r3, #16
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	b21b      	sxth	r3, r3
 8002a84:	425a      	negs	r2, r3
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	f002 0207 	and.w	r2, r2, #7
 8002a8e:	bf58      	it	pl
 8002a90:	4253      	negpl	r3, r2
 8002a92:	b21b      	sxth	r3, r3
 8002a94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8002a98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a9c:	f107 020c 	add.w	r2, r7, #12
 8002aa0:	441a      	add	r2, r3
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	4961      	ldr	r1, [pc, #388]	; (8002c2c <Send_Init_Msg+0x26c>)
 8002aa6:	3370      	adds	r3, #112	; 0x70
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002ab2:	2110      	movs	r1, #16
 8002ab4:	f7fd fe3a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002ab8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002abc:	3310      	adds	r3, #16
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	da00      	bge.n	8002ac4 <Send_Init_Msg+0x104>
 8002ac2:	3307      	adds	r3, #7
 8002ac4:	10db      	asrs	r3, r3, #3
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002acc:	4413      	add	r3, r2
 8002ace:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ad2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ad6:	3310      	adds	r3, #16
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b21b      	sxth	r3, r3
 8002adc:	425a      	negs	r2, r3
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	f002 0207 	and.w	r2, r2, #7
 8002ae6:	bf58      	it	pl
 8002ae8:	4253      	negpl	r3, r2
 8002aea:	b21b      	sxth	r3, r3
 8002aec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002af0:	4b4f      	ldr	r3, [pc, #316]	; (8002c30 <Send_Init_Msg+0x270>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d031      	beq.n	8002b62 <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002afe:	4b4c      	ldr	r3, [pc, #304]	; (8002c30 <Send_Init_Msg+0x270>)
 8002b00:	791b      	ldrb	r3, [r3, #4]
 8002b02:	79fa      	ldrb	r2, [r7, #7]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d137      	bne.n	8002b78 <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002b0e:	4849      	ldr	r0, [pc, #292]	; (8002c34 <Send_Init_Msg+0x274>)
 8002b10:	f01b fd14 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b48      	ldr	r3, [pc, #288]	; (8002c38 <Send_Init_Msg+0x278>)
 8002b18:	fba3 1302 	umull	r1, r3, r3, r2
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	21c8      	movs	r1, #200	; 0xc8
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002b2e:	4843      	ldr	r0, [pc, #268]	; (8002c3c <Send_Init_Msg+0x27c>)
 8002b30:	f024 f8f8 	bl	8026d24 <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 8002b34:	2100      	movs	r1, #0
 8002b36:	4842      	ldr	r0, [pc, #264]	; (8002c40 <Send_Init_Msg+0x280>)
 8002b38:	f024 f858 	bl	8026bec <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002b3c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002b40:	4619      	mov	r1, r3
 8002b42:	4840      	ldr	r0, [pc, #256]	; (8002c44 <Send_Init_Msg+0x284>)
 8002b44:	f024 f852 	bl	8026bec <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002b48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b4c:	f107 020c 	add.w	r2, r7, #12
 8002b50:	441a      	add	r2, r3
 8002b52:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002b56:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b5a:	2108      	movs	r1, #8
 8002b5c:	f7fd fde6 	bl	800072c <InsertBits>
 8002b60:	e00a      	b.n	8002b78 <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 8002b62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b66:	f107 020c 	add.w	r2, r7, #12
 8002b6a:	441a      	add	r2, r3
 8002b6c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b70:	2300      	movs	r3, #0
 8002b72:	2108      	movs	r1, #8
 8002b74:	f7fd fdda 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002b78:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002b7c:	3308      	adds	r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	da00      	bge.n	8002b84 <Send_Init_Msg+0x1c4>
 8002b82:	3307      	adds	r3, #7
 8002b84:	10db      	asrs	r3, r3, #3
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002b92:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002b96:	3308      	adds	r3, #8
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b21b      	sxth	r3, r3
 8002b9c:	425a      	negs	r2, r3
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	f002 0207 	and.w	r2, r2, #7
 8002ba6:	bf58      	it	pl
 8002ba8:	4253      	negpl	r3, r2
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	; (8002c30 <Send_Init_Msg+0x270>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	08db      	lsrs	r3, r3, #3
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d04c      	beq.n	8002c58 <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <Send_Init_Msg+0x270>)
 8002bc0:	791b      	ldrb	r3, [r3, #4]
 8002bc2:	79fa      	ldrb	r2, [r7, #7]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d165      	bne.n	8002c94 <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 8002bce:	4819      	ldr	r0, [pc, #100]	; (8002c34 <Send_Init_Msg+0x274>)
 8002bd0:	f01b fcb4 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <Send_Init_Msg+0x278>)
 8002bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	21c8      	movs	r1, #200	; 0xc8
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 8002bea:	4817      	ldr	r0, [pc, #92]	; (8002c48 <Send_Init_Msg+0x288>)
 8002bec:	f024 f89a 	bl	8026d24 <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	4a16      	ldr	r2, [pc, #88]	; (8002c4c <Send_Init_Msg+0x28c>)
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4814      	ldr	r0, [pc, #80]	; (8002c50 <Send_Init_Msg+0x290>)
 8002c00:	f023 fff4 	bl	8026bec <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 8002c04:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4812      	ldr	r0, [pc, #72]	; (8002c54 <Send_Init_Msg+0x294>)
 8002c0c:	f023 ffee 	bl	8026bec <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002c10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c14:	f107 020c 	add.w	r2, r7, #12
 8002c18:	441a      	add	r2, r3
 8002c1a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002c1e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c22:	2108      	movs	r1, #8
 8002c24:	f7fd fd82 	bl	800072c <InsertBits>
 8002c28:	e034      	b.n	8002c94 <Send_Init_Msg+0x2d4>
 8002c2a:	bf00      	nop
 8002c2c:	20000504 	.word	0x20000504
 8002c30:	2000308c 	.word	0x2000308c
 8002c34:	2000bcf8 	.word	0x2000bcf8
 8002c38:	51eb851f 	.word	0x51eb851f
 8002c3c:	08028a94 	.word	0x08028a94
 8002c40:	08028ab8 	.word	0x08028ab8
 8002c44:	08028ad8 	.word	0x08028ad8
 8002c48:	08028af8 	.word	0x08028af8
 8002c4c:	200028f4 	.word	0x200028f4
 8002c50:	08028b1c 	.word	0x08028b1c
 8002c54:	08028b3c 	.word	0x08028b3c

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 8002c58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c5c:	f107 020c 	add.w	r2, r7, #12
 8002c60:	18d1      	adds	r1, r2, r3
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	48c4      	ldr	r0, [pc, #784]	; (8002f78 <Send_Init_Msg+0x5b8>)
 8002c66:	011a      	lsls	r2, r3, #4
 8002c68:	4402      	add	r2, r0
 8002c6a:	3202      	adds	r2, #2
 8002c6c:	7812      	ldrb	r2, [r2, #0]
 8002c6e:	3201      	adds	r2, #1
 8002c70:	b2d4      	uxtb	r4, r2
 8002c72:	48c1      	ldr	r0, [pc, #772]	; (8002f78 <Send_Init_Msg+0x5b8>)
 8002c74:	011a      	lsls	r2, r3, #4
 8002c76:	4402      	add	r2, r0
 8002c78:	3202      	adds	r2, #2
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	7010      	strb	r0, [r2, #0]
 8002c7e:	4abe      	ldr	r2, [pc, #760]	; (8002f78 <Send_Init_Msg+0x5b8>)
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	4413      	add	r3, r2
 8002c84:	3302      	adds	r3, #2
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c8c:	460a      	mov	r2, r1
 8002c8e:	2108      	movs	r1, #8
 8002c90:	f7fd fd4c 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002c94:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c98:	3308      	adds	r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	da00      	bge.n	8002ca0 <Send_Init_Msg+0x2e0>
 8002c9e:	3307      	adds	r3, #7
 8002ca0:	10db      	asrs	r3, r3, #3
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ca8:	4413      	add	r3, r2
 8002caa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002cae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002cb2:	3308      	adds	r3, #8
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	b21b      	sxth	r3, r3
 8002cb8:	425a      	negs	r2, r3
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	f002 0207 	and.w	r2, r2, #7
 8002cc2:	bf58      	it	pl
 8002cc4:	4253      	negpl	r3, r2
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 8002ccc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cd0:	f107 020c 	add.w	r2, r7, #12
 8002cd4:	441a      	add	r2, r3
 8002cd6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002cda:	2301      	movs	r3, #1
 8002cdc:	2108      	movs	r1, #8
 8002cde:	f7fd fd25 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002ce2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	da00      	bge.n	8002cee <Send_Init_Msg+0x32e>
 8002cec:	3307      	adds	r3, #7
 8002cee:	10db      	asrs	r3, r3, #3
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002cfc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d00:	3308      	adds	r3, #8
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	b21b      	sxth	r3, r3
 8002d06:	425a      	negs	r2, r3
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	f002 0207 	and.w	r2, r2, #7
 8002d10:	bf58      	it	pl
 8002d12:	4253      	negpl	r3, r2
 8002d14:	b21b      	sxth	r3, r3
 8002d16:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	4a96      	ldr	r2, [pc, #600]	; (8002f78 <Send_Init_Msg+0x5b8>)
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	4413      	add	r3, r2
 8002d22:	3306      	adds	r3, #6
 8002d24:	2205      	movs	r2, #5
 8002d26:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 8002d28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d2c:	f107 020c 	add.w	r2, r7, #12
 8002d30:	441a      	add	r2, r3
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	4990      	ldr	r1, [pc, #576]	; (8002f78 <Send_Init_Msg+0x5b8>)
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	440b      	add	r3, r1
 8002d3a:	3306      	adds	r3, #6
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002d42:	2110      	movs	r1, #16
 8002d44:	f7fd fcf2 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002d48:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002d4c:	3310      	adds	r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	da00      	bge.n	8002d54 <Send_Init_Msg+0x394>
 8002d52:	3307      	adds	r3, #7
 8002d54:	10db      	asrs	r3, r3, #3
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d62:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d66:	3310      	adds	r3, #16
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	b21b      	sxth	r3, r3
 8002d6c:	425a      	negs	r2, r3
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	f002 0207 	and.w	r2, r2, #7
 8002d76:	bf58      	it	pl
 8002d78:	4253      	negpl	r3, r2
 8002d7a:	b21b      	sxth	r3, r3
 8002d7c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 8002d80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d84:	f107 020c 	add.w	r2, r7, #12
 8002d88:	441a      	add	r2, r3
 8002d8a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002d8e:	2317      	movs	r3, #23
 8002d90:	2108      	movs	r1, #8
 8002d92:	f7fd fccb 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002d96:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	da00      	bge.n	8002da2 <Send_Init_Msg+0x3e2>
 8002da0:	3307      	adds	r3, #7
 8002da2:	10db      	asrs	r3, r3, #3
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002daa:	4413      	add	r3, r2
 8002dac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002db0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002db4:	3308      	adds	r3, #8
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	b21b      	sxth	r3, r3
 8002dba:	425a      	negs	r2, r3
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	f002 0207 	and.w	r2, r2, #7
 8002dc4:	bf58      	it	pl
 8002dc6:	4253      	negpl	r3, r2
 8002dc8:	b21b      	sxth	r3, r3
 8002dca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 8002dce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dd2:	f107 020c 	add.w	r2, r7, #12
 8002dd6:	441a      	add	r2, r3
 8002dd8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002ddc:	2301      	movs	r3, #1
 8002dde:	2110      	movs	r1, #16
 8002de0:	f7fd fca4 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002de4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002de8:	3310      	adds	r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	da00      	bge.n	8002df0 <Send_Init_Msg+0x430>
 8002dee:	3307      	adds	r3, #7
 8002df0:	10db      	asrs	r3, r3, #3
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002df8:	4413      	add	r3, r2
 8002dfa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002dfe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e02:	3310      	adds	r3, #16
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	b21b      	sxth	r3, r3
 8002e08:	425a      	negs	r2, r3
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	f002 0207 	and.w	r2, r2, #7
 8002e12:	bf58      	it	pl
 8002e14:	4253      	negpl	r3, r2
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002e1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e20:	f107 020c 	add.w	r2, r7, #12
 8002e24:	441a      	add	r2, r3
 8002e26:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002e2a:	4b54      	ldr	r3, [pc, #336]	; (8002f7c <Send_Init_Msg+0x5bc>)
 8002e2c:	2120      	movs	r1, #32
 8002e2e:	f7fd fc7d 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002e32:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002e36:	3320      	adds	r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	da00      	bge.n	8002e3e <Send_Init_Msg+0x47e>
 8002e3c:	3307      	adds	r3, #7
 8002e3e:	10db      	asrs	r3, r3, #3
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e46:	4413      	add	r3, r2
 8002e48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e50:	3320      	adds	r3, #32
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	b21b      	sxth	r3, r3
 8002e56:	425a      	negs	r2, r3
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	f002 0207 	and.w	r2, r2, #7
 8002e60:	bf58      	it	pl
 8002e62:	4253      	negpl	r3, r2
 8002e64:	b21b      	sxth	r3, r3
 8002e66:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 8002e6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e6e:	f107 020c 	add.w	r2, r7, #12
 8002e72:	441a      	add	r2, r3
 8002e74:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	f7fd fc56 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002e80:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002e84:	3310      	adds	r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	da00      	bge.n	8002e8c <Send_Init_Msg+0x4cc>
 8002e8a:	3307      	adds	r3, #7
 8002e8c:	10db      	asrs	r3, r3, #3
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e94:	4413      	add	r3, r2
 8002e96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e9e:	3310      	adds	r3, #16
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	b21b      	sxth	r3, r3
 8002ea4:	425a      	negs	r2, r3
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	f002 0207 	and.w	r2, r2, #7
 8002eae:	bf58      	it	pl
 8002eb0:	4253      	negpl	r3, r2
 8002eb2:	b21b      	sxth	r3, r3
 8002eb4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 8002eb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ebc:	f107 020c 	add.w	r2, r7, #12
 8002ec0:	441a      	add	r2, r3
 8002ec2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	2110      	movs	r1, #16
 8002eca:	f7fd fc2f 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002ece:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ed2:	3310      	adds	r3, #16
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	da00      	bge.n	8002eda <Send_Init_Msg+0x51a>
 8002ed8:	3307      	adds	r3, #7
 8002eda:	10db      	asrs	r3, r3, #3
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ee8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002eec:	3310      	adds	r3, #16
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	b21b      	sxth	r3, r3
 8002ef2:	425a      	negs	r2, r3
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	f002 0207 	and.w	r2, r2, #7
 8002efc:	bf58      	it	pl
 8002efe:	4253      	negpl	r3, r2
 8002f00:	b21b      	sxth	r3, r3
 8002f02:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 8002f06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f0a:	f107 020c 	add.w	r2, r7, #12
 8002f0e:	441a      	add	r2, r3
 8002f10:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002f14:	2300      	movs	r3, #0
 8002f16:	2110      	movs	r1, #16
 8002f18:	f7fd fc08 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002f1c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002f20:	3310      	adds	r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	da00      	bge.n	8002f28 <Send_Init_Msg+0x568>
 8002f26:	3307      	adds	r3, #7
 8002f28:	10db      	asrs	r3, r3, #3
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f30:	4413      	add	r3, r2
 8002f32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002f36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f3a:	3310      	adds	r3, #16
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	b21b      	sxth	r3, r3
 8002f40:	425a      	negs	r2, r3
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	f002 0207 	and.w	r2, r2, #7
 8002f4a:	bf58      	it	pl
 8002f4c:	4253      	negpl	r3, r2
 8002f4e:	b21b      	sxth	r3, r3
 8002f50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 8002f54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f58:	f107 020c 	add.w	r2, r7, #12
 8002f5c:	441a      	add	r2, r3
 8002f5e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002f62:	2300      	movs	r3, #0
 8002f64:	2110      	movs	r1, #16
 8002f66:	f7fd fbe1 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002f6a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002f6e:	3310      	adds	r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	da05      	bge.n	8002f80 <Send_Init_Msg+0x5c0>
 8002f74:	3307      	adds	r3, #7
 8002f76:	e003      	b.n	8002f80 <Send_Init_Msg+0x5c0>
 8002f78:	200028f4 	.word	0x200028f4
 8002f7c:	33e232af 	.word	0x33e232af
 8002f80:	10db      	asrs	r3, r3, #3
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f88:	4413      	add	r3, r2
 8002f8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002f8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f92:	3310      	adds	r3, #16
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	b21b      	sxth	r3, r3
 8002f98:	425a      	negs	r2, r3
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	f002 0207 	and.w	r2, r2, #7
 8002fa2:	bf58      	it	pl
 8002fa4:	4253      	negpl	r3, r2
 8002fa6:	b21b      	sxth	r3, r3
 8002fa8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	4ab2      	ldr	r2, [pc, #712]	; (8003278 <Send_Init_Msg+0x8b8>)
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3308      	adds	r3, #8
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4ab0      	ldr	r2, [pc, #704]	; (800327c <Send_Init_Msg+0x8bc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d90d      	bls.n	8002fda <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	4aad      	ldr	r2, [pc, #692]	; (8003278 <Send_Init_Msg+0x8b8>)
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3308      	adds	r3, #8
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	3a01      	subs	r2, #1
 8002fce:	49aa      	ldr	r1, [pc, #680]	; (8003278 <Send_Init_Msg+0x8b8>)
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	440b      	add	r3, r1
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	e00c      	b.n	8002ff4 <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	4aa6      	ldr	r2, [pc, #664]	; (8003278 <Send_Init_Msg+0x8b8>)
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	3201      	adds	r2, #1
 8002fea:	49a3      	ldr	r1, [pc, #652]	; (8003278 <Send_Init_Msg+0x8b8>)
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	440b      	add	r3, r1
 8002ff0:	330c      	adds	r3, #12
 8002ff2:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8002ff4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ff8:	f107 020c 	add.w	r2, r7, #12
 8002ffc:	441a      	add	r2, r3
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	499d      	ldr	r1, [pc, #628]	; (8003278 <Send_Init_Msg+0x8b8>)
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	440b      	add	r3, r1
 8003006:	330c      	adds	r3, #12
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800300e:	2118      	movs	r1, #24
 8003010:	f7fd fb8c 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	79fa      	ldrb	r2, [r7, #7]
 8003018:	4997      	ldr	r1, [pc, #604]	; (8003278 <Send_Init_Msg+0x8b8>)
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	440b      	add	r3, r1
 800301e:	330c      	adds	r3, #12
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	4897      	ldr	r0, [pc, #604]	; (8003280 <Send_Init_Msg+0x8c0>)
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4403      	add	r3, r0
 800302e:	330c      	adds	r3, #12
 8003030:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8003032:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003036:	3318      	adds	r3, #24
 8003038:	2b00      	cmp	r3, #0
 800303a:	da00      	bge.n	800303e <Send_Init_Msg+0x67e>
 800303c:	3307      	adds	r3, #7
 800303e:	10db      	asrs	r3, r3, #3
 8003040:	b29a      	uxth	r2, r3
 8003042:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003046:	4413      	add	r3, r2
 8003048:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800304c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003050:	3318      	adds	r3, #24
 8003052:	b29b      	uxth	r3, r3
 8003054:	b21b      	sxth	r3, r3
 8003056:	425a      	negs	r2, r3
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	f002 0207 	and.w	r2, r2, #7
 8003060:	bf58      	it	pl
 8003062:	4253      	negpl	r3, r2
 8003064:	b21b      	sxth	r3, r3
 8003066:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	4a85      	ldr	r2, [pc, #532]	; (8003284 <Send_Init_Msg+0x8c4>)
 800306e:	5cd2      	ldrb	r2, [r2, r3]
 8003070:	3201      	adds	r2, #1
 8003072:	b2d1      	uxtb	r1, r2
 8003074:	4a83      	ldr	r2, [pc, #524]	; (8003284 <Send_Init_Msg+0x8c4>)
 8003076:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	4a82      	ldr	r2, [pc, #520]	; (8003284 <Send_Init_Msg+0x8c4>)
 800307c:	5cd3      	ldrb	r3, [r2, r3]
 800307e:	2bb3      	cmp	r3, #179	; 0xb3
 8003080:	d804      	bhi.n	800308c <Send_Init_Msg+0x6cc>
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	4a7f      	ldr	r2, [pc, #508]	; (8003284 <Send_Init_Msg+0x8c4>)
 8003086:	5cd3      	ldrb	r3, [r2, r3]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	4a7d      	ldr	r2, [pc, #500]	; (8003284 <Send_Init_Msg+0x8c4>)
 8003090:	210a      	movs	r1, #10
 8003092:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 8003094:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003098:	f107 020c 	add.w	r2, r7, #12
 800309c:	441a      	add	r2, r3
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	4978      	ldr	r1, [pc, #480]	; (8003284 <Send_Init_Msg+0x8c4>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80030a8:	2108      	movs	r1, #8
 80030aa:	f7fd fb3f 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80030ae:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80030b2:	3308      	adds	r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da00      	bge.n	80030ba <Send_Init_Msg+0x6fa>
 80030b8:	3307      	adds	r3, #7
 80030ba:	10db      	asrs	r3, r3, #3
 80030bc:	b29a      	uxth	r2, r3
 80030be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030c2:	4413      	add	r3, r2
 80030c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80030c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80030cc:	3308      	adds	r3, #8
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	b21b      	sxth	r3, r3
 80030d2:	425a      	negs	r2, r3
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	f002 0207 	and.w	r2, r2, #7
 80030dc:	bf58      	it	pl
 80030de:	4253      	negpl	r3, r2
 80030e0:	b21b      	sxth	r3, r3
 80030e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 80030e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030ea:	f107 020c 	add.w	r2, r7, #12
 80030ee:	441a      	add	r2, r3
 80030f0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80030f4:	2301      	movs	r3, #1
 80030f6:	2108      	movs	r1, #8
 80030f8:	f7fd fb18 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80030fc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003100:	3308      	adds	r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	da00      	bge.n	8003108 <Send_Init_Msg+0x748>
 8003106:	3307      	adds	r3, #7
 8003108:	10db      	asrs	r3, r3, #3
 800310a:	b29a      	uxth	r2, r3
 800310c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003110:	4413      	add	r3, r2
 8003112:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003116:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800311a:	3308      	adds	r3, #8
 800311c:	b29b      	uxth	r3, r3
 800311e:	b21b      	sxth	r3, r3
 8003120:	425a      	negs	r2, r3
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	f002 0207 	and.w	r2, r2, #7
 800312a:	bf58      	it	pl
 800312c:	4253      	negpl	r3, r2
 800312e:	b21b      	sxth	r3, r3
 8003130:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 8003134:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003138:	f107 020c 	add.w	r2, r7, #12
 800313c:	441a      	add	r2, r3
 800313e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003142:	2301      	movs	r3, #1
 8003144:	2108      	movs	r1, #8
 8003146:	f7fd faf1 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800314a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800314e:	3308      	adds	r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	da00      	bge.n	8003156 <Send_Init_Msg+0x796>
 8003154:	3307      	adds	r3, #7
 8003156:	10db      	asrs	r3, r3, #3
 8003158:	b29a      	uxth	r2, r3
 800315a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800315e:	4413      	add	r3, r2
 8003160:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003164:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003168:	3308      	adds	r3, #8
 800316a:	b29b      	uxth	r3, r3
 800316c:	b21b      	sxth	r3, r3
 800316e:	425a      	negs	r2, r3
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	f002 0207 	and.w	r2, r2, #7
 8003178:	bf58      	it	pl
 800317a:	4253      	negpl	r3, r2
 800317c:	b21b      	sxth	r3, r3
 800317e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 8003182:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003186:	f107 020c 	add.w	r2, r7, #12
 800318a:	441a      	add	r2, r3
 800318c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003190:	2300      	movs	r3, #0
 8003192:	2108      	movs	r1, #8
 8003194:	f7fd faca 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003198:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800319c:	3308      	adds	r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	da00      	bge.n	80031a4 <Send_Init_Msg+0x7e4>
 80031a2:	3307      	adds	r3, #7
 80031a4:	10db      	asrs	r3, r3, #3
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031ac:	4413      	add	r3, r2
 80031ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80031b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80031b6:	3308      	adds	r3, #8
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	b21b      	sxth	r3, r3
 80031bc:	425a      	negs	r2, r3
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	f002 0207 	and.w	r2, r2, #7
 80031c6:	bf58      	it	pl
 80031c8:	4253      	negpl	r3, r2
 80031ca:	b21b      	sxth	r3, r3
 80031cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80031d0:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <Send_Init_Msg+0x8c8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d060      	beq.n	80032a0 <Send_Init_Msg+0x8e0>
 80031de:	4b2a      	ldr	r3, [pc, #168]	; (8003288 <Send_Init_Msg+0x8c8>)
 80031e0:	791b      	ldrb	r3, [r3, #4]
 80031e2:	79fa      	ldrb	r2, [r7, #7]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d15b      	bne.n	80032a0 <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 80031e8:	230c      	movs	r3, #12
 80031ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 80031ee:	4827      	ldr	r0, [pc, #156]	; (800328c <Send_Init_Msg+0x8cc>)
 80031f0:	f01b f9a4 	bl	801e53c <HAL_RNG_GetRandomNumber>
 80031f4:	4601      	mov	r1, r0
 80031f6:	4b26      	ldr	r3, [pc, #152]	; (8003290 <Send_Init_Msg+0x8d0>)
 80031f8:	fba3 2301 	umull	r2, r3, r3, r1
 80031fc:	08da      	lsrs	r2, r3, #3
 80031fe:	4613      	mov	r3, r2
 8003200:	015b      	lsls	r3, r3, #5
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	1aca      	subs	r2, r1, r3
 800320a:	b2d3      	uxtb	r3, r2
 800320c:	3301      	adds	r3, #1
 800320e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 8003212:	4820      	ldr	r0, [pc, #128]	; (8003294 <Send_Init_Msg+0x8d4>)
 8003214:	f023 fd86 	bl	8026d24 <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	4a17      	ldr	r2, [pc, #92]	; (8003278 <Send_Init_Msg+0x8b8>)
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	4413      	add	r3, r2
 8003220:	3303      	adds	r3, #3
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	4619      	mov	r1, r3
 8003226:	481c      	ldr	r0, [pc, #112]	; (8003298 <Send_Init_Msg+0x8d8>)
 8003228:	f023 fce0 	bl	8026bec <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	4a12      	ldr	r2, [pc, #72]	; (8003278 <Send_Init_Msg+0x8b8>)
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	4413      	add	r3, r2
 8003234:	3303      	adds	r3, #3
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800323c:	429a      	cmp	r2, r3
 800323e:	d108      	bne.n	8003252 <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	4a0d      	ldr	r2, [pc, #52]	; (8003278 <Send_Init_Msg+0x8b8>)
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	4413      	add	r3, r2
 8003248:	3303      	adds	r3, #3
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	3b02      	subs	r3, #2
 800324e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 8003252:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003256:	4619      	mov	r1, r3
 8003258:	4810      	ldr	r0, [pc, #64]	; (800329c <Send_Init_Msg+0x8dc>)
 800325a:	f023 fcc7 	bl	8026bec <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 800325e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003262:	f107 020c 	add.w	r2, r7, #12
 8003266:	441a      	add	r2, r3
 8003268:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800326c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003270:	2108      	movs	r1, #8
 8003272:	f7fd fa5b 	bl	800072c <InsertBits>
	{
 8003276:	e022      	b.n	80032be <Send_Init_Msg+0x8fe>
 8003278:	200028f4 	.word	0x200028f4
 800327c:	00ffffef 	.word	0x00ffffef
 8003280:	20002da4 	.word	0x20002da4
 8003284:	2000030c 	.word	0x2000030c
 8003288:	2000308c 	.word	0x2000308c
 800328c:	2000bcf8 	.word	0x2000bcf8
 8003290:	10624dd3 	.word	0x10624dd3
 8003294:	08028b5c 	.word	0x08028b5c
 8003298:	08028b8c 	.word	0x08028b8c
 800329c:	08028ba8 	.word	0x08028ba8
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 80032a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032a4:	f107 020c 	add.w	r2, r7, #12
 80032a8:	441a      	add	r2, r3
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	494e      	ldr	r1, [pc, #312]	; (80033e8 <Send_Init_Msg+0xa28>)
 80032ae:	440b      	add	r3, r1
 80032b0:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80032b4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80032b8:	2108      	movs	r1, #8
 80032ba:	f7fd fa37 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 80032be:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80032c2:	3308      	adds	r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	da00      	bge.n	80032ca <Send_Init_Msg+0x90a>
 80032c8:	3307      	adds	r3, #7
 80032ca:	10db      	asrs	r3, r3, #3
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032d2:	4413      	add	r3, r2
 80032d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80032d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80032dc:	3308      	adds	r3, #8
 80032de:	b29b      	uxth	r3, r3
 80032e0:	b21b      	sxth	r3, r3
 80032e2:	425a      	negs	r2, r3
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	f002 0207 	and.w	r2, r2, #7
 80032ec:	bf58      	it	pl
 80032ee:	4253      	negpl	r3, r2
 80032f0:	b21b      	sxth	r3, r3
 80032f2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 80032f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032fa:	f107 020c 	add.w	r2, r7, #12
 80032fe:	441a      	add	r2, r3
 8003300:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003304:	2300      	movs	r3, #0
 8003306:	2108      	movs	r1, #8
 8003308:	f7fd fa10 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800330c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003310:	3308      	adds	r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	da00      	bge.n	8003318 <Send_Init_Msg+0x958>
 8003316:	3307      	adds	r3, #7
 8003318:	10db      	asrs	r3, r3, #3
 800331a:	b29a      	uxth	r2, r3
 800331c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003320:	4413      	add	r3, r2
 8003322:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003326:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800332a:	3308      	adds	r3, #8
 800332c:	b29b      	uxth	r3, r3
 800332e:	b21b      	sxth	r3, r3
 8003330:	425a      	negs	r2, r3
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	f002 0207 	and.w	r2, r2, #7
 800333a:	bf58      	it	pl
 800333c:	4253      	negpl	r3, r2
 800333e:	b21b      	sxth	r3, r3
 8003340:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 8003344:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8003348:	f107 030c 	add.w	r3, r7, #12
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f012 feb4 	bl	80160bc <CalculateDirectReverseCrc>
 8003354:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 8003356:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800335a:	f107 020c 	add.w	r2, r7, #12
 800335e:	441a      	add	r2, r3
 8003360:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003366:	2120      	movs	r1, #32
 8003368:	f7fd f9e0 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 800336c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003370:	3320      	adds	r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	da00      	bge.n	8003378 <Send_Init_Msg+0x9b8>
 8003376:	3307      	adds	r3, #7
 8003378:	10db      	asrs	r3, r3, #3
 800337a:	b29a      	uxth	r2, r3
 800337c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003380:	4413      	add	r3, r2
 8003382:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003386:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800338a:	3320      	adds	r3, #32
 800338c:	b29b      	uxth	r3, r3
 800338e:	b21b      	sxth	r3, r3
 8003390:	425a      	negs	r2, r3
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	f002 0207 	and.w	r2, r2, #7
 800339a:	bf58      	it	pl
 800339c:	4253      	negpl	r3, r2
 800339e:	b21b      	sxth	r3, r3
 80033a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <Send_Init_Msg+0xa2c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0a5b      	lsrs	r3, r3, #9
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <Send_Init_Msg+0xa0a>
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <Send_Init_Msg+0xa2c>)
 80033b4:	791b      	ldrb	r3, [r3, #4]
 80033b6:	79fa      	ldrb	r2, [r7, #7]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d106      	bne.n	80033ca <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 80033bc:	480c      	ldr	r0, [pc, #48]	; (80033f0 <Send_Init_Msg+0xa30>)
 80033be:	f023 fcb1 	bl	8026d24 <puts>
		printf("Not Sending Reply");
 80033c2:	480c      	ldr	r0, [pc, #48]	; (80033f4 <Send_Init_Msg+0xa34>)
 80033c4:	f023 fc12 	bl	8026bec <iprintf>
 80033c8:	e009      	b.n	80033de <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80033ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033ce:	b2d9      	uxtb	r1, r3
 80033d0:	79fa      	ldrb	r2, [r7, #7]
 80033d2:	f107 030c 	add.w	r3, r7, #12
 80033d6:	4618      	mov	r0, r3
 80033d8:	f004 fe38 	bl	800804c <Process_Sending_Reply>
	}
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	375c      	adds	r7, #92	; 0x5c
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd90      	pop	{r4, r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000504 	.word	0x20000504
 80033ec:	2000308c 	.word	0x2000308c
 80033f0:	08028bc4 	.word	0x08028bc4
 80033f4:	08028bdc 	.word	0x08028bdc

080033f8 <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b0ab      	sub	sp, #172	; 0xac
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	4608      	mov	r0, r1
 8003402:	4611      	mov	r1, r2
 8003404:	461a      	mov	r2, r3
 8003406:	4603      	mov	r3, r0
 8003408:	70fb      	strb	r3, [r7, #3]
 800340a:	460b      	mov	r3, r1
 800340c:	70bb      	strb	r3, [r7, #2]
 800340e:	4613      	mov	r3, r2
 8003410:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8003412:	2300      	movs	r3, #0
 8003414:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	uint32_t Calc_CRC = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint32_t Recv_CRC = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	uint32_t Ticks = HAL_GetTick();
 8003424:	f016 fbd8 	bl	8019bd8 <HAL_GetTick>
 8003428:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	uint8_t noofIP = 0, uc_index = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003432:	2300      	movs	r3, #0
 8003434:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	uint8_t LinkEstablishFlag = RESET;
 8003438:	2300      	movs	r3, #0
 800343a:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	uint8_t Temp_Vital_Data_Buff[HITACHI_MAX_PAYLOAD] = {0,};
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	f107 0310 	add.w	r3, r7, #16
 8003446:	227c      	movs	r2, #124	; 0x7c
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f023 fae6 	bl	8026a1c <memset>
	BITSTUFFINIT(0, 0);
 8003450:	2300      	movs	r3, #0
 8003452:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003456:	2300      	movs	r3, #0
 8003458:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800345c:	49a9      	ldr	r1, [pc, #676]	; (8003704 <Vital_Msg_extr+0x30c>)
 800345e:	48aa      	ldr	r0, [pc, #680]	; (8003708 <Vital_Msg_extr+0x310>)
 8003460:	f7fc feee 	bl	8000240 <strcmp>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8149 	beq.w	80036fe <Vital_Msg_extr+0x306>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800346c:	4ba7      	ldr	r3, [pc, #668]	; (800370c <Vital_Msg_extr+0x314>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d031      	beq.n	80034dc <Vital_Msg_extr+0xe4>
 8003478:	4ba4      	ldr	r3, [pc, #656]	; (800370c <Vital_Msg_extr+0x314>)
 800347a:	791b      	ldrb	r3, [r3, #4]
 800347c:	78ba      	ldrb	r2, [r7, #2]
 800347e:	429a      	cmp	r2, r3
 8003480:	d12c      	bne.n	80034dc <Vital_Msg_extr+0xe4>
	{
		uint32_t Rand_Number = 22;
 8003482:	2316      	movs	r3, #22
 8003484:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8003488:	48a1      	ldr	r0, [pc, #644]	; (8003710 <Vital_Msg_extr+0x318>)
 800348a:	f01b f857 	bl	801e53c <HAL_RNG_GetRandomNumber>
 800348e:	4602      	mov	r2, r0
 8003490:	4ba0      	ldr	r3, [pc, #640]	; (8003714 <Vital_Msg_extr+0x31c>)
 8003492:	fba3 1302 	umull	r1, r3, r3, r2
 8003496:	0dd9      	lsrs	r1, r3, #23
 8003498:	460b      	mov	r3, r1
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	1a5b      	subs	r3, r3, r1
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif
		printf("\nInjected RX Vital CRC failure\n");
 80034a6:	489c      	ldr	r0, [pc, #624]	; (8003718 <Vital_Msg_extr+0x320>)
 80034a8:	f023 fc3c 	bl	8026d24 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80034ac:	78bb      	ldrb	r3, [r7, #2]
 80034ae:	4a9b      	ldr	r2, [pc, #620]	; (800371c <Vital_Msg_extr+0x324>)
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	4413      	add	r3, r2
 80034b4:	3308      	adds	r3, #8
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4619      	mov	r1, r3
 80034ba:	4899      	ldr	r0, [pc, #612]	; (8003720 <Vital_Msg_extr+0x328>)
 80034bc:	f023 fb96 	bl	8026bec <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 80034c0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80034c4:	4897      	ldr	r0, [pc, #604]	; (8003724 <Vital_Msg_extr+0x32c>)
 80034c6:	f023 fb91 	bl	8026bec <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 80034ca:	f107 020c 	add.w	r2, r7, #12
 80034ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034d2:	2118      	movs	r1, #24
 80034d4:	2000      	movs	r0, #0
 80034d6:	f7fd f929 	bl	800072c <InsertBits>
	{
 80034da:	e00b      	b.n	80034f4 <Vital_Msg_extr+0xfc>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80034dc:	78bb      	ldrb	r3, [r7, #2]
 80034de:	4a8f      	ldr	r2, [pc, #572]	; (800371c <Vital_Msg_extr+0x324>)
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	4413      	add	r3, r2
 80034e4:	3308      	adds	r3, #8
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f107 020c 	add.w	r2, r7, #12
 80034ec:	2118      	movs	r1, #24
 80034ee:	2000      	movs	r0, #0
 80034f0:	f7fd f91c 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80034f4:	2300      	movs	r3, #0
 80034f6:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80034fa:	e010      	b.n	800351e <Vital_Msg_extr+0x126>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80034fc:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	441a      	add	r2, r3
 8003504:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003508:	3303      	adds	r3, #3
 800350a:	7812      	ldrb	r2, [r2, #0]
 800350c:	33a8      	adds	r3, #168	; 0xa8
 800350e:	443b      	add	r3, r7
 8003510:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8003514:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003518:	3301      	adds	r3, #1
 800351a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800351e:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	3b05      	subs	r3, #5
 8003526:	429a      	cmp	r2, r3
 8003528:	dbe8      	blt.n	80034fc <Vital_Msg_extr+0x104>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 800352a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800352e:	b29b      	uxth	r3, r3
 8003530:	3303      	adds	r3, #3
 8003532:	b29a      	uxth	r2, r3
 8003534:	f107 030c 	add.w	r3, r7, #12
 8003538:	4611      	mov	r1, r2
 800353a:	4618      	mov	r0, r3
 800353c:	f012 fdbe 	bl	80160bc <CalculateDirectReverseCrc>
 8003540:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	3b05      	subs	r3, #5
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	441a      	add	r2, r3
 800354c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003550:	2120      	movs	r1, #32
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd f85e 	bl	8000614 <ExtractBits>
 8003558:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 800355c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003560:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003564:	429a      	cmp	r2, r3
 8003566:	f000 80f5 	beq.w	8003754 <Vital_Msg_extr+0x35c>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3305      	adds	r3, #5
 800356e:	461a      	mov	r2, r3
 8003570:	2108      	movs	r1, #8
 8003572:	2000      	movs	r0, #0
 8003574:	f7fd f84e 	bl	8000614 <ExtractBits>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <Vital_Msg_extr+0x19c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3305      	adds	r3, #5
 8003582:	461a      	mov	r2, r3
 8003584:	2108      	movs	r1, #8
 8003586:	2000      	movs	r0, #0
 8003588:	f7fd f844 	bl	8000614 <ExtractBits>
 800358c:	4603      	mov	r3, r0
 800358e:	2b01      	cmp	r3, #1
 8003590:	f040 809f 	bne.w	80036d2 <Vital_Msg_extr+0x2da>
		{
			printf("Tx seq Roll over Detected\n");
 8003594:	4864      	ldr	r0, [pc, #400]	; (8003728 <Vital_Msg_extr+0x330>)
 8003596:	f023 fbc5 	bl	8026d24 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 800359a:	f107 030c 	add.w	r3, r7, #12
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f023 fa3a 	bl	8026a1c <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 80035a8:	78bb      	ldrb	r3, [r7, #2]
 80035aa:	4a5c      	ldr	r2, [pc, #368]	; (800371c <Vital_Msg_extr+0x324>)
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	4413      	add	r3, r2
 80035b0:	3308      	adds	r3, #8
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3301      	adds	r3, #1
 80035b6:	f107 020c 	add.w	r2, r7, #12
 80035ba:	2118      	movs	r1, #24
 80035bc:	2000      	movs	r0, #0
 80035be:	f7fd f8b5 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80035c8:	e010      	b.n	80035ec <Vital_Msg_extr+0x1f4>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80035ca:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	441a      	add	r2, r3
 80035d2:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80035d6:	3303      	adds	r3, #3
 80035d8:	7812      	ldrb	r2, [r2, #0]
 80035da:	33a8      	adds	r3, #168	; 0xa8
 80035dc:	443b      	add	r3, r7
 80035de:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80035e2:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80035e6:	3301      	adds	r3, #1
 80035e8:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80035ec:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	3b05      	subs	r3, #5
 80035f4:	429a      	cmp	r2, r3
 80035f6:	dbe8      	blt.n	80035ca <Vital_Msg_extr+0x1d2>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 80035f8:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3303      	adds	r3, #3
 8003600:	b29a      	uxth	r2, r3
 8003602:	f107 030c 	add.w	r3, r7, #12
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f012 fd57 	bl	80160bc <CalculateDirectReverseCrc>
 800360e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	3b05      	subs	r3, #5
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	441a      	add	r2, r3
 800361a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800361e:	2120      	movs	r1, #32
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc fff7 	bl	8000614 <ExtractBits>
 8003626:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

			if(Calc_CRC == Recv_CRC)
 800362a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800362e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003632:	429a      	cmp	r2, r3
 8003634:	d137      	bne.n	80036a6 <Vital_Msg_extr+0x2ae>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8003636:	483d      	ldr	r0, [pc, #244]	; (800372c <Vital_Msg_extr+0x334>)
 8003638:	f023 fb74 	bl	8026d24 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 800363c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8003640:	483b      	ldr	r0, [pc, #236]	; (8003730 <Vital_Msg_extr+0x338>)
 8003642:	f023 fad3 	bl	8026bec <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8003646:	78bb      	ldrb	r3, [r7, #2]
 8003648:	4a34      	ldr	r2, [pc, #208]	; (800371c <Vital_Msg_extr+0x324>)
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	4413      	add	r3, r2
 800364e:	3308      	adds	r3, #8
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4619      	mov	r1, r3
 8003654:	4837      	ldr	r0, [pc, #220]	; (8003734 <Vital_Msg_extr+0x33c>)
 8003656:	f023 fac9 	bl	8026bec <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 800365a:	78bb      	ldrb	r3, [r7, #2]
 800365c:	492f      	ldr	r1, [pc, #188]	; (800371c <Vital_Msg_extr+0x324>)
 800365e:	011a      	lsls	r2, r3, #4
 8003660:	440a      	add	r2, r1
 8003662:	3208      	adds	r2, #8
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	3201      	adds	r2, #1
 8003668:	492c      	ldr	r1, [pc, #176]	; (800371c <Vital_Msg_extr+0x324>)
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	440b      	add	r3, r1
 800366e:	3308      	adds	r3, #8
 8003670:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8003672:	78bb      	ldrb	r3, [r7, #2]
 8003674:	4a29      	ldr	r2, [pc, #164]	; (800371c <Vital_Msg_extr+0x324>)
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	4413      	add	r3, r2
 800367a:	3308      	adds	r3, #8
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4619      	mov	r1, r3
 8003680:	482d      	ldr	r0, [pc, #180]	; (8003738 <Vital_Msg_extr+0x340>)
 8003682:	f023 fab3 	bl	8026bec <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8003686:	78bb      	ldrb	r3, [r7, #2]
 8003688:	78ba      	ldrb	r2, [r7, #2]
 800368a:	4924      	ldr	r1, [pc, #144]	; (800371c <Vital_Msg_extr+0x324>)
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	440b      	add	r3, r1
 8003690:	3308      	adds	r3, #8
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	4829      	ldr	r0, [pc, #164]	; (800373c <Vital_Msg_extr+0x344>)
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4403      	add	r3, r0
 80036a0:	3308      	adds	r3, #8
 80036a2:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 80036a4:	e057      	b.n	8003756 <Vital_Msg_extr+0x35e>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80036a6:	78bb      	ldrb	r3, [r7, #2]
 80036a8:	4a25      	ldr	r2, [pc, #148]	; (8003740 <Vital_Msg_extr+0x348>)
 80036aa:	3366      	adds	r3, #102	; 0x66
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4619      	mov	r1, r3
 80036b4:	4823      	ldr	r0, [pc, #140]	; (8003744 <Vital_Msg_extr+0x34c>)
 80036b6:	f023 fa99 	bl	8026bec <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 80036ba:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80036be:	4822      	ldr	r0, [pc, #136]	; (8003748 <Vital_Msg_extr+0x350>)
 80036c0:	f023 fa94 	bl	8026bec <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 80036c4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80036c8:	4820      	ldr	r0, [pc, #128]	; (800374c <Vital_Msg_extr+0x354>)
 80036ca:	f023 fa8f 	bl	8026bec <iprintf>
				return;
 80036ce:	f000 bf7a 	b.w	80045c6 <Vital_Msg_extr+0x11ce>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80036d2:	78bb      	ldrb	r3, [r7, #2]
 80036d4:	4a1a      	ldr	r2, [pc, #104]	; (8003740 <Vital_Msg_extr+0x348>)
 80036d6:	3366      	adds	r3, #102	; 0x66
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4619      	mov	r1, r3
 80036e0:	481b      	ldr	r0, [pc, #108]	; (8003750 <Vital_Msg_extr+0x358>)
 80036e2:	f023 fa83 	bl	8026bec <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 80036e6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80036ea:	4817      	ldr	r0, [pc, #92]	; (8003748 <Vital_Msg_extr+0x350>)
 80036ec:	f023 fa7e 	bl	8026bec <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 80036f0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80036f4:	4815      	ldr	r0, [pc, #84]	; (800374c <Vital_Msg_extr+0x354>)
 80036f6:	f023 fa79 	bl	8026bec <iprintf>
			return;
 80036fa:	f000 bf64 	b.w	80045c6 <Vital_Msg_extr+0x11ce>
		goto ROLLOVER_VITAL;
 80036fe:	bf00      	nop
 8003700:	e029      	b.n	8003756 <Vital_Msg_extr+0x35e>
 8003702:	bf00      	nop
 8003704:	080286ec 	.word	0x080286ec
 8003708:	20000505 	.word	0x20000505
 800370c:	2000308c 	.word	0x2000308c
 8003710:	2000bcf8 	.word	0x2000bcf8
 8003714:	80008001 	.word	0x80008001
 8003718:	08028bf0 	.word	0x08028bf0
 800371c:	200028f4 	.word	0x200028f4
 8003720:	08028c10 	.word	0x08028c10
 8003724:	08028c38 	.word	0x08028c38
 8003728:	08028c60 	.word	0x08028c60
 800372c:	08028c7c 	.word	0x08028c7c
 8003730:	08028c94 	.word	0x08028c94
 8003734:	08028cb4 	.word	0x08028cb4
 8003738:	08028cd4 	.word	0x08028cd4
 800373c:	20002da4 	.word	0x20002da4
 8003740:	20000504 	.word	0x20000504
 8003744:	08028d00 	.word	0x08028d00
 8003748:	08028930 	.word	0x08028930
 800374c:	08028940 	.word	0x08028940
 8003750:	08028d20 	.word	0x08028d20
		}
	}

	ROLLOVER_VITAL:
 8003754:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 8003756:	78bb      	ldrb	r3, [r7, #2]
 8003758:	49c4      	ldr	r1, [pc, #784]	; (8003a6c <Vital_Msg_extr+0x674>)
 800375a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8003762:	78bb      	ldrb	r3, [r7, #2]
 8003764:	49c2      	ldr	r1, [pc, #776]	; (8003a70 <Vital_Msg_extr+0x678>)
 8003766:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 800376e:	78bb      	ldrb	r3, [r7, #2]
 8003770:	4ac0      	ldr	r2, [pc, #768]	; (8003a74 <Vital_Msg_extr+0x67c>)
 8003772:	2101      	movs	r1, #1
 8003774:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 8003776:	78ba      	ldrb	r2, [r7, #2]
 8003778:	4613      	mov	r3, r2
 800377a:	015b      	lsls	r3, r3, #5
 800377c:	4413      	add	r3, r2
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	4abd      	ldr	r2, [pc, #756]	; (8003a78 <Vital_Msg_extr+0x680>)
 8003782:	4413      	add	r3, r2
 8003784:	2240      	movs	r2, #64	; 0x40
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f023 f947 	bl	8026a1c <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 800378e:	78ba      	ldrb	r2, [r7, #2]
 8003790:	4613      	mov	r3, r2
 8003792:	015b      	lsls	r3, r3, #5
 8003794:	4413      	add	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4ab7      	ldr	r2, [pc, #732]	; (8003a78 <Vital_Msg_extr+0x680>)
 800379a:	4413      	add	r3, r2
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f023 f913 	bl	80269cc <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 80037a6:	78ba      	ldrb	r2, [r7, #2]
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	b298      	uxth	r0, r3
 80037ac:	49b2      	ldr	r1, [pc, #712]	; (8003a78 <Vital_Msg_extr+0x680>)
 80037ae:	4613      	mov	r3, r2
 80037b0:	015b      	lsls	r3, r3, #5
 80037b2:	4413      	add	r3, r2
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	440b      	add	r3, r1
 80037b8:	3340      	adds	r3, #64	; 0x40
 80037ba:	4602      	mov	r2, r0
 80037bc:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 80037be:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80037c2:	3308      	adds	r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	da00      	bge.n	80037ca <Vital_Msg_extr+0x3d2>
 80037c8:	3307      	adds	r3, #7
 80037ca:	10db      	asrs	r3, r3, #3
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80037d2:	4413      	add	r3, r2
 80037d4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80037d8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80037dc:	3308      	adds	r3, #8
 80037de:	b29b      	uxth	r3, r3
 80037e0:	b21b      	sxth	r3, r3
 80037e2:	425a      	negs	r2, r3
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	f002 0207 	and.w	r2, r2, #7
 80037ec:	bf58      	it	pl
 80037ee:	4253      	negpl	r3, r2
 80037f0:	b21b      	sxth	r3, r3
 80037f2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80037f6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	441a      	add	r2, r3
 80037fe:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003802:	2110      	movs	r1, #16
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc ff05 	bl	8000614 <ExtractBits>
 800380a:	4603      	mov	r3, r0
 800380c:	78ba      	ldrb	r2, [r7, #2]
 800380e:	b298      	uxth	r0, r3
 8003810:	499a      	ldr	r1, [pc, #616]	; (8003a7c <Vital_Msg_extr+0x684>)
 8003812:	4613      	mov	r3, r2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	4413      	add	r3, r2
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	440b      	add	r3, r1
 800381c:	3328      	adds	r3, #40	; 0x28
 800381e:	4602      	mov	r2, r0
 8003820:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 8003822:	78ba      	ldrb	r2, [r7, #2]
 8003824:	4995      	ldr	r1, [pc, #596]	; (8003a7c <Vital_Msg_extr+0x684>)
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	440b      	add	r3, r1
 8003830:	3328      	adds	r3, #40	; 0x28
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	4619      	mov	r1, r3
 8003836:	4892      	ldr	r0, [pc, #584]	; (8003a80 <Vital_Msg_extr+0x688>)
 8003838:	f023 f9d8 	bl	8026bec <iprintf>
	BITSTUFFINC(16);
 800383c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003840:	3310      	adds	r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	da00      	bge.n	8003848 <Vital_Msg_extr+0x450>
 8003846:	3307      	adds	r3, #7
 8003848:	10db      	asrs	r3, r3, #3
 800384a:	b29a      	uxth	r2, r3
 800384c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003850:	4413      	add	r3, r2
 8003852:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003856:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800385a:	3310      	adds	r3, #16
 800385c:	b29b      	uxth	r3, r3
 800385e:	b21b      	sxth	r3, r3
 8003860:	425a      	negs	r2, r3
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	f002 0207 	and.w	r2, r2, #7
 800386a:	bf58      	it	pl
 800386c:	4253      	negpl	r3, r2
 800386e:	b21b      	sxth	r3, r3
 8003870:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003874:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	441a      	add	r2, r3
 800387c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003880:	2110      	movs	r1, #16
 8003882:	4618      	mov	r0, r3
 8003884:	f7fc fec6 	bl	8000614 <ExtractBits>
 8003888:	4603      	mov	r3, r0
 800388a:	78ba      	ldrb	r2, [r7, #2]
 800388c:	b298      	uxth	r0, r3
 800388e:	497b      	ldr	r1, [pc, #492]	; (8003a7c <Vital_Msg_extr+0x684>)
 8003890:	4613      	mov	r3, r2
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	4413      	add	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	440b      	add	r3, r1
 800389a:	3326      	adds	r3, #38	; 0x26
 800389c:	4602      	mov	r2, r0
 800389e:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 80038a0:	78ba      	ldrb	r2, [r7, #2]
 80038a2:	4976      	ldr	r1, [pc, #472]	; (8003a7c <Vital_Msg_extr+0x684>)
 80038a4:	4613      	mov	r3, r2
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4413      	add	r3, r2
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	440b      	add	r3, r1
 80038ae:	3326      	adds	r3, #38	; 0x26
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	4619      	mov	r1, r3
 80038b4:	4873      	ldr	r0, [pc, #460]	; (8003a84 <Vital_Msg_extr+0x68c>)
 80038b6:	f023 f999 	bl	8026bec <iprintf>
	BITSTUFFINC(16);
 80038ba:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80038be:	3310      	adds	r3, #16
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	da00      	bge.n	80038c6 <Vital_Msg_extr+0x4ce>
 80038c4:	3307      	adds	r3, #7
 80038c6:	10db      	asrs	r3, r3, #3
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80038ce:	4413      	add	r3, r2
 80038d0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80038d4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80038d8:	3310      	adds	r3, #16
 80038da:	b29b      	uxth	r3, r3
 80038dc:	b21b      	sxth	r3, r3
 80038de:	425a      	negs	r2, r3
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	f002 0207 	and.w	r2, r2, #7
 80038e8:	bf58      	it	pl
 80038ea:	4253      	negpl	r3, r2
 80038ec:	b21b      	sxth	r3, r3
 80038ee:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80038f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	441a      	add	r2, r3
 80038fa:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80038fe:	2108      	movs	r1, #8
 8003900:	4618      	mov	r0, r3
 8003902:	f7fc fe87 	bl	8000614 <ExtractBits>
 8003906:	4602      	mov	r2, r0
 8003908:	78bb      	ldrb	r3, [r7, #2]
 800390a:	b2d1      	uxtb	r1, r2
 800390c:	4a5e      	ldr	r2, [pc, #376]	; (8003a88 <Vital_Msg_extr+0x690>)
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	4413      	add	r3, r2
 8003912:	3302      	adds	r3, #2
 8003914:	460a      	mov	r2, r1
 8003916:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8003918:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 800391c:	3308      	adds	r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	da00      	bge.n	8003924 <Vital_Msg_extr+0x52c>
 8003922:	3307      	adds	r3, #7
 8003924:	10db      	asrs	r3, r3, #3
 8003926:	b29a      	uxth	r2, r3
 8003928:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800392c:	4413      	add	r3, r2
 800392e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003932:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003936:	3308      	adds	r3, #8
 8003938:	b29b      	uxth	r3, r3
 800393a:	b21b      	sxth	r3, r3
 800393c:	425a      	negs	r2, r3
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	f002 0207 	and.w	r2, r2, #7
 8003946:	bf58      	it	pl
 8003948:	4253      	negpl	r3, r2
 800394a:	b21b      	sxth	r3, r3
 800394c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003950:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	441a      	add	r2, r3
 8003958:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800395c:	2108      	movs	r1, #8
 800395e:	4618      	mov	r0, r3
 8003960:	f7fc fe58 	bl	8000614 <ExtractBits>
 8003964:	4602      	mov	r2, r0
 8003966:	78bb      	ldrb	r3, [r7, #2]
 8003968:	b2d1      	uxtb	r1, r2
 800396a:	4a47      	ldr	r2, [pc, #284]	; (8003a88 <Vital_Msg_extr+0x690>)
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	4413      	add	r3, r2
 8003970:	3301      	adds	r3, #1
 8003972:	460a      	mov	r2, r1
 8003974:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8003976:	78bb      	ldrb	r3, [r7, #2]
 8003978:	4a43      	ldr	r2, [pc, #268]	; (8003a88 <Vital_Msg_extr+0x690>)
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	4413      	add	r3, r2
 800397e:	3301      	adds	r3, #1
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d138      	bne.n	80039f8 <Vital_Msg_extr+0x600>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8003986:	78bb      	ldrb	r3, [r7, #2]
 8003988:	4a40      	ldr	r2, [pc, #256]	; (8003a8c <Vital_Msg_extr+0x694>)
 800398a:	3366      	adds	r3, #102	; 0x66
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4619      	mov	r1, r3
 8003994:	483e      	ldr	r0, [pc, #248]	; (8003a90 <Vital_Msg_extr+0x698>)
 8003996:	f023 f929 	bl	8026bec <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 800399a:	78bb      	ldrb	r3, [r7, #2]
 800399c:	4a3a      	ldr	r2, [pc, #232]	; (8003a88 <Vital_Msg_extr+0x690>)
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	4413      	add	r3, r2
 80039a2:	330c      	adds	r3, #12
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4619      	mov	r1, r3
 80039a8:	483a      	ldr	r0, [pc, #232]	; (8003a94 <Vital_Msg_extr+0x69c>)
 80039aa:	f023 f91f 	bl	8026bec <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80039ae:	78bb      	ldrb	r3, [r7, #2]
 80039b0:	4935      	ldr	r1, [pc, #212]	; (8003a88 <Vital_Msg_extr+0x690>)
 80039b2:	011a      	lsls	r2, r3, #4
 80039b4:	440a      	add	r2, r1
 80039b6:	320c      	adds	r2, #12
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	3201      	adds	r2, #1
 80039bc:	4932      	ldr	r1, [pc, #200]	; (8003a88 <Vital_Msg_extr+0x690>)
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	440b      	add	r3, r1
 80039c2:	330c      	adds	r3, #12
 80039c4:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80039c6:	78bb      	ldrb	r3, [r7, #2]
 80039c8:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <Vital_Msg_extr+0x690>)
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	4413      	add	r3, r2
 80039ce:	330c      	adds	r3, #12
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4619      	mov	r1, r3
 80039d4:	4830      	ldr	r0, [pc, #192]	; (8003a98 <Vital_Msg_extr+0x6a0>)
 80039d6:	f023 f909 	bl	8026bec <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80039da:	78bb      	ldrb	r3, [r7, #2]
 80039dc:	78ba      	ldrb	r2, [r7, #2]
 80039de:	492a      	ldr	r1, [pc, #168]	; (8003a88 <Vital_Msg_extr+0x690>)
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	440b      	add	r3, r1
 80039e4:	330c      	adds	r3, #12
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	482c      	ldr	r0, [pc, #176]	; (8003a9c <Vital_Msg_extr+0x6a4>)
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4403      	add	r3, r0
 80039f4:	330c      	adds	r3, #12
 80039f6:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 80039f8:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80039fc:	3308      	adds	r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	da00      	bge.n	8003a04 <Vital_Msg_extr+0x60c>
 8003a02:	3307      	adds	r3, #7
 8003a04:	10db      	asrs	r3, r3, #3
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003a12:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003a16:	3308      	adds	r3, #8
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	b21b      	sxth	r3, r3
 8003a1c:	425a      	negs	r2, r3
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	f002 0207 	and.w	r2, r2, #7
 8003a26:	bf58      	it	pl
 8003a28:	4253      	negpl	r3, r2
 8003a2a:	b21b      	sxth	r3, r3
 8003a2c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003a30:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	441a      	add	r2, r3
 8003a38:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003a3c:	2108      	movs	r1, #8
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fc fde8 	bl	8000614 <ExtractBits>
 8003a44:	4603      	mov	r3, r0
 8003a46:	78ba      	ldrb	r2, [r7, #2]
 8003a48:	b2d8      	uxtb	r0, r3
 8003a4a:	490c      	ldr	r1, [pc, #48]	; (8003a7c <Vital_Msg_extr+0x684>)
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4413      	add	r3, r2
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	440b      	add	r3, r1
 8003a56:	3302      	adds	r3, #2
 8003a58:	4602      	mov	r2, r0
 8003a5a:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003a5c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003a60:	3308      	adds	r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	da1c      	bge.n	8003aa0 <Vital_Msg_extr+0x6a8>
 8003a66:	3307      	adds	r3, #7
 8003a68:	e01a      	b.n	8003aa0 <Vital_Msg_extr+0x6a8>
 8003a6a:	bf00      	nop
 8003a6c:	20002630 	.word	0x20002630
 8003a70:	20002658 	.word	0x20002658
 8003a74:	200026a4 	.word	0x200026a4
 8003a78:	200030ac 	.word	0x200030ac
 8003a7c:	20002ad4 	.word	0x20002ad4
 8003a80:	08028a20 	.word	0x08028a20
 8003a84:	08028a28 	.word	0x08028a28
 8003a88:	200028f4 	.word	0x200028f4
 8003a8c:	20000504 	.word	0x20000504
 8003a90:	08028d34 	.word	0x08028d34
 8003a94:	08028d78 	.word	0x08028d78
 8003a98:	08028d88 	.word	0x08028d88
 8003a9c:	20002da4 	.word	0x20002da4
 8003aa0:	10db      	asrs	r3, r3, #3
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003aae:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	b21b      	sxth	r3, r3
 8003ab8:	425a      	negs	r2, r3
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	f002 0207 	and.w	r2, r2, #7
 8003ac2:	bf58      	it	pl
 8003ac4:	4253      	negpl	r3, r2
 8003ac6:	b21b      	sxth	r3, r3
 8003ac8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003acc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	441a      	add	r2, r3
 8003ad4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003ad8:	2110      	movs	r1, #16
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fc fd9a 	bl	8000614 <ExtractBits>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	78bb      	ldrb	r3, [r7, #2]
 8003ae4:	b291      	uxth	r1, r2
 8003ae6:	4abd      	ldr	r2, [pc, #756]	; (8003ddc <Vital_Msg_extr+0x9e4>)
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	4413      	add	r3, r2
 8003aec:	3304      	adds	r3, #4
 8003aee:	460a      	mov	r2, r1
 8003af0:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8003af2:	49bb      	ldr	r1, [pc, #748]	; (8003de0 <Vital_Msg_extr+0x9e8>)
 8003af4:	48bb      	ldr	r0, [pc, #748]	; (8003de4 <Vital_Msg_extr+0x9ec>)
 8003af6:	f7fc fba3 	bl	8000240 <strcmp>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10f      	bne.n	8003b20 <Vital_Msg_extr+0x728>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8003b00:	78bb      	ldrb	r3, [r7, #2]
 8003b02:	4ab6      	ldr	r2, [pc, #728]	; (8003ddc <Vital_Msg_extr+0x9e4>)
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	4413      	add	r3, r2
 8003b08:	3304      	adds	r3, #4
 8003b0a:	881a      	ldrh	r2, [r3, #0]
 8003b0c:	78bb      	ldrb	r3, [r7, #2]
 8003b0e:	f042 0208 	orr.w	r2, r2, #8
 8003b12:	b291      	uxth	r1, r2
 8003b14:	4ab1      	ldr	r2, [pc, #708]	; (8003ddc <Vital_Msg_extr+0x9e4>)
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	4413      	add	r3, r2
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	460a      	mov	r2, r1
 8003b1e:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8003b20:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003b24:	3310      	adds	r3, #16
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	da00      	bge.n	8003b2c <Vital_Msg_extr+0x734>
 8003b2a:	3307      	adds	r3, #7
 8003b2c:	10db      	asrs	r3, r3, #3
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003b34:	4413      	add	r3, r2
 8003b36:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003b3a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003b3e:	3310      	adds	r3, #16
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	b21b      	sxth	r3, r3
 8003b44:	425a      	negs	r2, r3
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	f002 0207 	and.w	r2, r2, #7
 8003b4e:	bf58      	it	pl
 8003b50:	4253      	negpl	r3, r2
 8003b52:	b21b      	sxth	r3, r3
 8003b54:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 8003b58:	78bb      	ldrb	r3, [r7, #2]
 8003b5a:	4aa0      	ldr	r2, [pc, #640]	; (8003ddc <Vital_Msg_extr+0x9e4>)
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	4413      	add	r3, r2
 8003b60:	3304      	adds	r3, #4
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8145 	beq.w	8003df8 <Vital_Msg_extr+0xa00>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003b6e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	441a      	add	r2, r3
 8003b76:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003b7a:	2108      	movs	r1, #8
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fc fd49 	bl	8000614 <ExtractBits>
 8003b82:	4603      	mov	r3, r0
 8003b84:	78ba      	ldrb	r2, [r7, #2]
 8003b86:	b2d8      	uxtb	r0, r3
 8003b88:	4997      	ldr	r1, [pc, #604]	; (8003de8 <Vital_Msg_extr+0x9f0>)
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	440b      	add	r3, r1
 8003b94:	3305      	adds	r3, #5
 8003b96:	4602      	mov	r2, r0
 8003b98:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8003b9a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	da00      	bge.n	8003ba6 <Vital_Msg_extr+0x7ae>
 8003ba4:	3307      	adds	r3, #7
 8003ba6:	10db      	asrs	r3, r3, #3
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003bae:	4413      	add	r3, r2
 8003bb0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003bb4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003bb8:	3308      	adds	r3, #8
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	b21b      	sxth	r3, r3
 8003bbe:	425a      	negs	r2, r3
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	f002 0207 	and.w	r2, r2, #7
 8003bc8:	bf58      	it	pl
 8003bca:	4253      	negpl	r3, r2
 8003bcc:	b21b      	sxth	r3, r3
 8003bce:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003bd2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	441a      	add	r2, r3
 8003bda:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003bde:	2108      	movs	r1, #8
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc fd17 	bl	8000614 <ExtractBits>
 8003be6:	4603      	mov	r3, r0
 8003be8:	78ba      	ldrb	r2, [r7, #2]
 8003bea:	b2d8      	uxtb	r0, r3
 8003bec:	497e      	ldr	r1, [pc, #504]	; (8003de8 <Vital_Msg_extr+0x9f0>)
 8003bee:	4613      	mov	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	440b      	add	r3, r1
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8003bfe:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003c02:	3308      	adds	r3, #8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	da00      	bge.n	8003c0a <Vital_Msg_extr+0x812>
 8003c08:	3307      	adds	r3, #7
 8003c0a:	10db      	asrs	r3, r3, #3
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c12:	4413      	add	r3, r2
 8003c14:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003c18:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	b21b      	sxth	r3, r3
 8003c22:	425a      	negs	r2, r3
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	f002 0207 	and.w	r2, r2, #7
 8003c2c:	bf58      	it	pl
 8003c2e:	4253      	negpl	r3, r2
 8003c30:	b21b      	sxth	r3, r3
 8003c32:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003c36:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	441a      	add	r2, r3
 8003c3e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c42:	2108      	movs	r1, #8
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fc fce5 	bl	8000614 <ExtractBits>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	78ba      	ldrb	r2, [r7, #2]
 8003c4e:	b2d8      	uxtb	r0, r3
 8003c50:	4965      	ldr	r1, [pc, #404]	; (8003de8 <Vital_Msg_extr+0x9f0>)
 8003c52:	4613      	mov	r3, r2
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	4413      	add	r3, r2
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3303      	adds	r3, #3
 8003c5e:	4602      	mov	r2, r0
 8003c60:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8003c62:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003c66:	3308      	adds	r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	da00      	bge.n	8003c6e <Vital_Msg_extr+0x876>
 8003c6c:	3307      	adds	r3, #7
 8003c6e:	10db      	asrs	r3, r3, #3
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c76:	4413      	add	r3, r2
 8003c78:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003c7c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c80:	3308      	adds	r3, #8
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	b21b      	sxth	r3, r3
 8003c86:	425a      	negs	r2, r3
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	f002 0207 	and.w	r2, r2, #7
 8003c90:	bf58      	it	pl
 8003c92:	4253      	negpl	r3, r2
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003c9a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	441a      	add	r2, r3
 8003ca2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003ca6:	2108      	movs	r1, #8
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fcb3 	bl	8000614 <ExtractBits>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	78ba      	ldrb	r2, [r7, #2]
 8003cb2:	b2d8      	uxtb	r0, r3
 8003cb4:	494c      	ldr	r1, [pc, #304]	; (8003de8 <Vital_Msg_extr+0x9f0>)
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	4413      	add	r3, r2
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	440b      	add	r3, r1
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8003cc4:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003cc8:	3308      	adds	r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	da00      	bge.n	8003cd0 <Vital_Msg_extr+0x8d8>
 8003cce:	3307      	adds	r3, #7
 8003cd0:	10db      	asrs	r3, r3, #3
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003cd8:	4413      	add	r3, r2
 8003cda:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003cde:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b21b      	sxth	r3, r3
 8003ce8:	425a      	negs	r2, r3
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	f002 0207 	and.w	r2, r2, #7
 8003cf2:	bf58      	it	pl
 8003cf4:	4253      	negpl	r3, r2
 8003cf6:	b21b      	sxth	r3, r3
 8003cf8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003cfc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	441a      	add	r2, r3
 8003d04:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d08:	2108      	movs	r1, #8
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc fc82 	bl	8000614 <ExtractBits>
 8003d10:	4603      	mov	r3, r0
 8003d12:	78ba      	ldrb	r2, [r7, #2]
 8003d14:	b2d8      	uxtb	r0, r3
 8003d16:	4934      	ldr	r1, [pc, #208]	; (8003de8 <Vital_Msg_extr+0x9f0>)
 8003d18:	4613      	mov	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4413      	add	r3, r2
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	440b      	add	r3, r1
 8003d22:	3301      	adds	r3, #1
 8003d24:	4602      	mov	r2, r0
 8003d26:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8003d28:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	da00      	bge.n	8003d34 <Vital_Msg_extr+0x93c>
 8003d32:	3307      	adds	r3, #7
 8003d34:	10db      	asrs	r3, r3, #3
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003d42:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d46:	3308      	adds	r3, #8
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	b21b      	sxth	r3, r3
 8003d4c:	425a      	negs	r2, r3
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	f002 0207 	and.w	r2, r2, #7
 8003d56:	bf58      	it	pl
 8003d58:	4253      	negpl	r3, r2
 8003d5a:	b21b      	sxth	r3, r3
 8003d5c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003d60:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	441a      	add	r2, r3
 8003d68:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d6c:	2108      	movs	r1, #8
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fc fc50 	bl	8000614 <ExtractBits>
 8003d74:	4603      	mov	r3, r0
 8003d76:	78ba      	ldrb	r2, [r7, #2]
 8003d78:	b2d8      	uxtb	r0, r3
 8003d7a:	491b      	ldr	r1, [pc, #108]	; (8003de8 <Vital_Msg_extr+0x9f0>)
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	440b      	add	r3, r1
 8003d86:	3302      	adds	r3, #2
 8003d88:	4602      	mov	r2, r0
 8003d8a:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8003d8c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003d90:	3308      	adds	r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da00      	bge.n	8003d98 <Vital_Msg_extr+0x9a0>
 8003d96:	3307      	adds	r3, #7
 8003d98:	10db      	asrs	r3, r3, #3
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003da0:	4413      	add	r3, r2
 8003da2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003da6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003daa:	3308      	adds	r3, #8
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	b21b      	sxth	r3, r3
 8003db0:	425a      	negs	r2, r3
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	f002 0207 	and.w	r2, r2, #7
 8003dba:	bf58      	it	pl
 8003dbc:	4253      	negpl	r3, r2
 8003dbe:	b21b      	sxth	r3, r3
 8003dc0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8003dc4:	78bb      	ldrb	r3, [r7, #2]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f005 fd62 	bl	8009890 <IS_MLK_EIPC_TIME_MATCHING>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00e      	beq.n	8003df0 <Vital_Msg_extr+0x9f8>
 8003dd2:	78bb      	ldrb	r3, [r7, #2]
 8003dd4:	4a05      	ldr	r2, [pc, #20]	; (8003dec <Vital_Msg_extr+0x9f4>)
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	54d1      	strb	r1, [r2, r3]
 8003dda:	e00d      	b.n	8003df8 <Vital_Msg_extr+0xa00>
 8003ddc:	200028f4 	.word	0x200028f4
 8003de0:	080286ec 	.word	0x080286ec
 8003de4:	20000505 	.word	0x20000505
 8003de8:	200028b8 	.word	0x200028b8
 8003dec:	20002764 	.word	0x20002764
 8003df0:	78bb      	ldrb	r3, [r7, #2]
 8003df2:	4a91      	ldr	r2, [pc, #580]	; (8004038 <Vital_Msg_extr+0xc40>)
 8003df4:	2101      	movs	r1, #1
 8003df6:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8003df8:	78bb      	ldrb	r3, [r7, #2]
 8003dfa:	4a90      	ldr	r2, [pc, #576]	; (800403c <Vital_Msg_extr+0xc44>)
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	4413      	add	r3, r2
 8003e00:	3304      	adds	r3, #4
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <Vital_Msg_extr+0xa1a>
	{
		LinkEstablishFlag = SET;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003e12:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	441a      	add	r2, r3
 8003e1a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003e1e:	2108      	movs	r1, #8
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fc fbf7 	bl	8000614 <ExtractBits>
 8003e26:	4603      	mov	r3, r0
 8003e28:	78ba      	ldrb	r2, [r7, #2]
 8003e2a:	b2d8      	uxtb	r0, r3
 8003e2c:	4984      	ldr	r1, [pc, #528]	; (8004040 <Vital_Msg_extr+0xc48>)
 8003e2e:	4613      	mov	r3, r2
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4413      	add	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	440b      	add	r3, r1
 8003e38:	3303      	adds	r3, #3
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003e3e:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003e42:	3308      	adds	r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	da00      	bge.n	8003e4a <Vital_Msg_extr+0xa52>
 8003e48:	3307      	adds	r3, #7
 8003e4a:	10db      	asrs	r3, r3, #3
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003e52:	4413      	add	r3, r2
 8003e54:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003e58:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	b21b      	sxth	r3, r3
 8003e62:	425a      	negs	r2, r3
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	f002 0207 	and.w	r2, r2, #7
 8003e6c:	bf58      	it	pl
 8003e6e:	4253      	negpl	r3, r2
 8003e70:	b21b      	sxth	r3, r3
 8003e72:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 8003e76:	78ba      	ldrb	r2, [r7, #2]
 8003e78:	4971      	ldr	r1, [pc, #452]	; (8004040 <Vital_Msg_extr+0xc48>)
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	4413      	add	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	440b      	add	r3, r1
 8003e84:	3303      	adds	r3, #3
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	486e      	ldr	r0, [pc, #440]	; (8004044 <Vital_Msg_extr+0xc4c>)
 8003e8c:	f022 feae 	bl	8026bec <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003e90:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	441a      	add	r2, r3
 8003e98:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003e9c:	2108      	movs	r1, #8
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc fbb8 	bl	8000614 <ExtractBits>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	78ba      	ldrb	r2, [r7, #2]
 8003ea8:	b2d8      	uxtb	r0, r3
 8003eaa:	4965      	ldr	r1, [pc, #404]	; (8004040 <Vital_Msg_extr+0xc48>)
 8003eac:	4613      	mov	r3, r2
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	4413      	add	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4602      	mov	r2, r0
 8003eba:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003ebc:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	da00      	bge.n	8003ec8 <Vital_Msg_extr+0xad0>
 8003ec6:	3307      	adds	r3, #7
 8003ec8:	10db      	asrs	r3, r3, #3
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003ed6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003eda:	3308      	adds	r3, #8
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	b21b      	sxth	r3, r3
 8003ee0:	425a      	negs	r2, r3
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	f002 0207 	and.w	r2, r2, #7
 8003eea:	bf58      	it	pl
 8003eec:	4253      	negpl	r3, r2
 8003eee:	b21b      	sxth	r3, r3
 8003ef0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 8003ef4:	78ba      	ldrb	r2, [r7, #2]
 8003ef6:	4952      	ldr	r1, [pc, #328]	; (8004040 <Vital_Msg_extr+0xc48>)
 8003ef8:	4613      	mov	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	4413      	add	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	440b      	add	r3, r1
 8003f02:	3303      	adds	r3, #3
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (noofIP != 0)
 8003f0e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00e      	beq.n	8003f34 <Vital_Msg_extr+0xb3c>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 8003f16:	78ba      	ldrb	r2, [r7, #2]
 8003f18:	4949      	ldr	r1, [pc, #292]	; (8004040 <Vital_Msg_extr+0xc48>)
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	440b      	add	r3, r1
 8003f24:	3303      	adds	r3, #3
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	08db      	lsrs	r3, r3, #3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003f32:	e00b      	b.n	8003f4c <Vital_Msg_extr+0xb54>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 8003f34:	78ba      	ldrb	r2, [r7, #2]
 8003f36:	4942      	ldr	r1, [pc, #264]	; (8004040 <Vital_Msg_extr+0xc48>)
 8003f38:	4613      	mov	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	440b      	add	r3, r1
 8003f42:	3303      	adds	r3, #3
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	08db      	lsrs	r3, r3, #3
 8003f48:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003f52:	e04c      	b.n	8003fee <Vital_Msg_extr+0xbf6>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003f54:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	441a      	add	r2, r3
 8003f5c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003f60:	2108      	movs	r1, #8
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fc fb56 	bl	8000614 <ExtractBits>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	78ba      	ldrb	r2, [r7, #2]
 8003f6c:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003f70:	b2dc      	uxtb	r4, r3
 8003f72:	4833      	ldr	r0, [pc, #204]	; (8004040 <Vital_Msg_extr+0xc48>)
 8003f74:	4613      	mov	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	4403      	add	r3, r0
 8003f7e:	440b      	add	r3, r1
 8003f80:	3305      	adds	r3, #5
 8003f82:	4622      	mov	r2, r4
 8003f84:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 8003f86:	f8b7 00a6 	ldrh.w	r0, [r7, #166]	; 0xa6
 8003f8a:	78ba      	ldrb	r2, [r7, #2]
 8003f8c:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003f90:	4c2b      	ldr	r4, [pc, #172]	; (8004040 <Vital_Msg_extr+0xc48>)
 8003f92:	4613      	mov	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	4423      	add	r3, r4
 8003f9c:	440b      	add	r3, r1
 8003f9e:	3305      	adds	r3, #5
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4601      	mov	r1, r0
 8003fa6:	4828      	ldr	r0, [pc, #160]	; (8004048 <Vital_Msg_extr+0xc50>)
 8003fa8:	f022 fe20 	bl	8026bec <iprintf>
		BITSTUFFINC(8);
 8003fac:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	da00      	bge.n	8003fb8 <Vital_Msg_extr+0xbc0>
 8003fb6:	3307      	adds	r3, #7
 8003fb8:	10db      	asrs	r3, r3, #3
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003fc6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003fca:	3308      	adds	r3, #8
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	b21b      	sxth	r3, r3
 8003fd0:	425a      	negs	r2, r3
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	f002 0207 	and.w	r2, r2, #7
 8003fda:	bf58      	it	pl
 8003fdc:	4253      	negpl	r3, r2
 8003fde:	b21b      	sxth	r3, r3
 8003fe0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003fe4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8003fe8:	3301      	adds	r3, #1
 8003fea:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003fee:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d3ab      	bcc.n	8003f54 <Vital_Msg_extr+0xb5c>
	}
	printf("\n");
 8003ffc:	200a      	movs	r0, #10
 8003ffe:	f022 fe0d 	bl	8026c1c <putchar>
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8004002:	78bb      	ldrb	r3, [r7, #2]
 8004004:	4a11      	ldr	r2, [pc, #68]	; (800404c <Vital_Msg_extr+0xc54>)
 8004006:	4413      	add	r3, r2
 8004008:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800400c:	2b02      	cmp	r3, #2
 800400e:	d10e      	bne.n	800402e <Vital_Msg_extr+0xc36>
	{
		printf("Online Bit Status:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 8004010:	78ba      	ldrb	r2, [r7, #2]
 8004012:	490b      	ldr	r1, [pc, #44]	; (8004040 <Vital_Msg_extr+0xc48>)
 8004014:	4613      	mov	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	4413      	add	r3, r2
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	440b      	add	r3, r1
 800401e:	3305      	adds	r3, #5
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	4619      	mov	r1, r3
 8004028:	4809      	ldr	r0, [pc, #36]	; (8004050 <Vital_Msg_extr+0xc58>)
 800402a:	f022 fddf 	bl	8026bec <iprintf>
	}

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 800402e:	2300      	movs	r3, #0
 8004030:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8004034:	e048      	b.n	80040c8 <Vital_Msg_extr+0xcd0>
 8004036:	bf00      	nop
 8004038:	20002764 	.word	0x20002764
 800403c:	200028f4 	.word	0x200028f4
 8004040:	20002ad4 	.word	0x20002ad4
 8004044:	08028d98 	.word	0x08028d98
 8004048:	08028da0 	.word	0x08028da0
 800404c:	20000504 	.word	0x20000504
 8004050:	08028db0 	.word	0x08028db0
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004054:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	441a      	add	r2, r3
 800405c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004060:	2108      	movs	r1, #8
 8004062:	4618      	mov	r0, r3
 8004064:	f7fc fad6 	bl	8000614 <ExtractBits>
 8004068:	4603      	mov	r3, r0
 800406a:	78ba      	ldrb	r2, [r7, #2]
 800406c:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8004070:	b2dc      	uxtb	r4, r3
 8004072:	486b      	ldr	r0, [pc, #428]	; (8004220 <Vital_Msg_extr+0xe28>)
 8004074:	4613      	mov	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	4403      	add	r3, r0
 800407e:	440b      	add	r3, r1
 8004080:	3315      	adds	r3, #21
 8004082:	4622      	mov	r2, r4
 8004084:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 8004086:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 800408a:	3308      	adds	r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	da00      	bge.n	8004092 <Vital_Msg_extr+0xc9a>
 8004090:	3307      	adds	r3, #7
 8004092:	10db      	asrs	r3, r3, #3
 8004094:	b29a      	uxth	r2, r3
 8004096:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800409a:	4413      	add	r3, r2
 800409c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80040a0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80040a4:	3308      	adds	r3, #8
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	b21b      	sxth	r3, r3
 80040aa:	425a      	negs	r2, r3
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	f002 0207 	and.w	r2, r2, #7
 80040b4:	bf58      	it	pl
 80040b6:	4253      	negpl	r3, r2
 80040b8:	b21b      	sxth	r3, r3
 80040ba:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80040be:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80040c2:	3301      	adds	r3, #1
 80040c4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80040c8:	78ba      	ldrb	r2, [r7, #2]
 80040ca:	4955      	ldr	r1, [pc, #340]	; (8004220 <Vital_Msg_extr+0xe28>)
 80040cc:	4613      	mov	r3, r2
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	4413      	add	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	440b      	add	r3, r1
 80040d6:	3304      	adds	r3, #4
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d3b7      	bcc.n	8004054 <Vital_Msg_extr+0xc5c>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 80040e4:	787a      	ldrb	r2, [r7, #1]
 80040e6:	78bb      	ldrb	r3, [r7, #2]
 80040e8:	4611      	mov	r1, r2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f003 fc0e 	bl	800790c <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 80040f0:	78bb      	ldrb	r3, [r7, #2]
 80040f2:	4a4c      	ldr	r2, [pc, #304]	; (8004224 <Vital_Msg_extr+0xe2c>)
 80040f4:	2101      	movs	r1, #1
 80040f6:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 80040f8:	78bb      	ldrb	r3, [r7, #2]
 80040fa:	4a4a      	ldr	r2, [pc, #296]	; (8004224 <Vital_Msg_extr+0xe2c>)
 80040fc:	3302      	adds	r3, #2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004106:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 8004108:	78ba      	ldrb	r2, [r7, #2]
 800410a:	4947      	ldr	r1, [pc, #284]	; (8004228 <Vital_Msg_extr+0xe30>)
 800410c:	4613      	mov	r3, r2
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	4413      	add	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	440b      	add	r3, r1
 8004116:	3304      	adds	r3, #4
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d116      	bne.n	800414c <Vital_Msg_extr+0xd54>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 800411e:	2246      	movs	r2, #70	; 0x46
 8004120:	2100      	movs	r1, #0
 8004122:	4842      	ldr	r0, [pc, #264]	; (800422c <Vital_Msg_extr+0xe34>)
 8004124:	f022 fc7a 	bl	8026a1c <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 8004128:	78bb      	ldrb	r3, [r7, #2]
 800412a:	b29a      	uxth	r2, r3
 800412c:	4b3f      	ldr	r3, [pc, #252]	; (800422c <Vital_Msg_extr+0xe34>)
 800412e:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	b29a      	uxth	r2, r3
 8004134:	4b3d      	ldr	r3, [pc, #244]	; (800422c <Vital_Msg_extr+0xe34>)
 8004136:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	461a      	mov	r2, r3
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	483c      	ldr	r0, [pc, #240]	; (8004230 <Vital_Msg_extr+0xe38>)
 8004140:	f022 fc44 	bl	80269cc <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
 8004144:	f240 2003 	movw	r0, #515	; 0x203
 8004148:	f00c ffdc 	bl	8011104 <TransmitCanPkt>

	/* To check Whether the Data received is from Active system or Not By checking the 1st bit Vital Data
	 * This checking is Only required for Serial Interface
	 */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET))
 800414c:	78bb      	ldrb	r3, [r7, #2]
 800414e:	4a39      	ldr	r2, [pc, #228]	; (8004234 <Vital_Msg_extr+0xe3c>)
 8004150:	4413      	add	r3, r2
 8004152:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004156:	2b02      	cmp	r3, #2
 8004158:	d128      	bne.n	80041ac <Vital_Msg_extr+0xdb4>
 800415a:	78ba      	ldrb	r2, [r7, #2]
 800415c:	4930      	ldr	r1, [pc, #192]	; (8004220 <Vital_Msg_extr+0xe28>)
 800415e:	4613      	mov	r3, r2
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	4413      	add	r3, r2
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	440b      	add	r3, r1
 8004168:	3305      	adds	r3, #5
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d11b      	bne.n	80041ac <Vital_Msg_extr+0xdb4>
	{
		printf("Online Bit Drop\n");
 8004174:	4830      	ldr	r0, [pc, #192]	; (8004238 <Vital_Msg_extr+0xe40>)
 8004176:	f022 fdd5 	bl	8026d24 <puts>
		LinkEstablishFlag = RESET;
 800417a:	2300      	movs	r3, #0
 800417c:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
		Act_InactiveFlag[Source_Index] = SET;
 8004180:	78bb      	ldrb	r3, [r7, #2]
 8004182:	4a2e      	ldr	r2, [pc, #184]	; (800423c <Vital_Msg_extr+0xe44>)
 8004184:	2101      	movs	r1, #1
 8004186:	54d1      	strb	r1, [r2, r3]
		LastActCount[Source_Index] = RESET;
 8004188:	78bb      	ldrb	r3, [r7, #2]
 800418a:	4a2d      	ldr	r2, [pc, #180]	; (8004240 <Vital_Msg_extr+0xe48>)
 800418c:	2100      	movs	r1, #0
 800418e:	54d1      	strb	r1, [r2, r3]
		memset(&Hitachi_Vital_st[Source_Index].Outputs,0,sizeof(Hitachi_Vital_st[Source_Index].Outputs));
 8004190:	78ba      	ldrb	r2, [r7, #2]
 8004192:	4613      	mov	r3, r2
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	4413      	add	r3, r2
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <Vital_Msg_extr+0xe28>)
 800419c:	4413      	add	r3, r2
 800419e:	3305      	adds	r3, #5
 80041a0:	2210      	movs	r2, #16
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f022 fc39 	bl	8026a1c <memset>
 80041aa:	e05d      	b.n	8004268 <Vital_Msg_extr+0xe70>
	}
	else if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == SET) && (LinkEstablishFlag == SET))
 80041ac:	78bb      	ldrb	r3, [r7, #2]
 80041ae:	4a21      	ldr	r2, [pc, #132]	; (8004234 <Vital_Msg_extr+0xe3c>)
 80041b0:	4413      	add	r3, r2
 80041b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d156      	bne.n	8004268 <Vital_Msg_extr+0xe70>
 80041ba:	78ba      	ldrb	r2, [r7, #2]
 80041bc:	4918      	ldr	r1, [pc, #96]	; (8004220 <Vital_Msg_extr+0xe28>)
 80041be:	4613      	mov	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4413      	add	r3, r2
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	440b      	add	r3, r1
 80041c8:	3305      	adds	r3, #5
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d049      	beq.n	8004268 <Vital_Msg_extr+0xe70>
 80041d4:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d145      	bne.n	8004268 <Vital_Msg_extr+0xe70>
	{
		if(Act_InactiveFlag[Source_Index] == SET)
 80041dc:	78bb      	ldrb	r3, [r7, #2]
 80041de:	4a17      	ldr	r2, [pc, #92]	; (800423c <Vital_Msg_extr+0xe44>)
 80041e0:	5cd3      	ldrb	r3, [r2, r3]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d140      	bne.n	8004268 <Vital_Msg_extr+0xe70>
		{
			++LastActCount[Source_Index];
 80041e6:	78bb      	ldrb	r3, [r7, #2]
 80041e8:	4a15      	ldr	r2, [pc, #84]	; (8004240 <Vital_Msg_extr+0xe48>)
 80041ea:	5cd2      	ldrb	r2, [r2, r3]
 80041ec:	3201      	adds	r2, #1
 80041ee:	b2d1      	uxtb	r1, r2
 80041f0:	4a13      	ldr	r2, [pc, #76]	; (8004240 <Vital_Msg_extr+0xe48>)
 80041f2:	54d1      	strb	r1, [r2, r3]
			printf("Updated Count:%u\n",LastActCount[Source_Index]);
 80041f4:	78bb      	ldrb	r3, [r7, #2]
 80041f6:	4a12      	ldr	r2, [pc, #72]	; (8004240 <Vital_Msg_extr+0xe48>)
 80041f8:	5cd3      	ldrb	r3, [r2, r3]
 80041fa:	4619      	mov	r1, r3
 80041fc:	4811      	ldr	r0, [pc, #68]	; (8004244 <Vital_Msg_extr+0xe4c>)
 80041fe:	f022 fcf5 	bl	8026bec <iprintf>
			if(LastActCount[Source_Index] >= MAX_LAST_ACT_COUNT)
 8004202:	78bb      	ldrb	r3, [r7, #2]
 8004204:	4a0e      	ldr	r2, [pc, #56]	; (8004240 <Vital_Msg_extr+0xe48>)
 8004206:	5cd3      	ldrb	r3, [r2, r3]
 8004208:	2b03      	cmp	r3, #3
 800420a:	d91d      	bls.n	8004248 <Vital_Msg_extr+0xe50>
			{
				Act_InactiveFlag[Source_Index] = RESET;
 800420c:	78bb      	ldrb	r3, [r7, #2]
 800420e:	4a0b      	ldr	r2, [pc, #44]	; (800423c <Vital_Msg_extr+0xe44>)
 8004210:	2100      	movs	r1, #0
 8004212:	54d1      	strb	r1, [r2, r3]
				LastActCount[Source_Index] = MAX_LAST_ACT_COUNT; /* To avoid Overflow of Variable */
 8004214:	78bb      	ldrb	r3, [r7, #2]
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <Vital_Msg_extr+0xe48>)
 8004218:	2104      	movs	r1, #4
 800421a:	54d1      	strb	r1, [r2, r3]
 800421c:	e024      	b.n	8004268 <Vital_Msg_extr+0xe70>
 800421e:	bf00      	nop
 8004220:	20002ad4 	.word	0x20002ad4
 8004224:	200033c4 	.word	0x200033c4
 8004228:	20002da4 	.word	0x20002da4
 800422c:	20002fb4 	.word	0x20002fb4
 8004230:	20002fba 	.word	0x20002fba
 8004234:	20000504 	.word	0x20000504
 8004238:	08028dc8 	.word	0x08028dc8
 800423c:	20002538 	.word	0x20002538
 8004240:	20002544 	.word	0x20002544
 8004244:	08028dd8 	.word	0x08028dd8
			}
			else
			{
				LinkEstablishFlag = RESET;
 8004248:	2300      	movs	r3, #0
 800424a:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
				memset(&Hitachi_Vital_st[Source_Index].Outputs,0,sizeof(Hitachi_Vital_st[Source_Index].Outputs));
 800424e:	78ba      	ldrb	r2, [r7, #2]
 8004250:	4613      	mov	r3, r2
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4413      	add	r3, r2
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	4ab1      	ldr	r2, [pc, #708]	; (8004520 <Vital_Msg_extr+0x1128>)
 800425a:	4413      	add	r3, r2
 800425c:	3305      	adds	r3, #5
 800425e:	2210      	movs	r2, #16
 8004260:	2100      	movs	r1, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f022 fbda 	bl	8026a1c <memset>
		}
	}


	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 8004268:	78ba      	ldrb	r2, [r7, #2]
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4aac      	ldr	r2, [pc, #688]	; (8004524 <Vital_Msg_extr+0x112c>)
 8004274:	4413      	add	r3, r2
 8004276:	3301      	adds	r3, #1
 8004278:	2210      	movs	r2, #16
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f022 fbcd 	bl	8026a1c <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 8004282:	78ba      	ldrb	r2, [r7, #2]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4aa5      	ldr	r2, [pc, #660]	; (8004524 <Vital_Msg_extr+0x112c>)
 800428e:	4413      	add	r3, r2
 8004290:	1c58      	adds	r0, r3, #1
 8004292:	78ba      	ldrb	r2, [r7, #2]
 8004294:	4613      	mov	r3, r2
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	4413      	add	r3, r2
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	4aa0      	ldr	r2, [pc, #640]	; (8004520 <Vital_Msg_extr+0x1128>)
 800429e:	4413      	add	r3, r2
 80042a0:	3305      	adds	r3, #5
 80042a2:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80042a6:	4619      	mov	r1, r3
 80042a8:	f022 fb90 	bl	80269cc <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 80042ac:	78ba      	ldrb	r2, [r7, #2]
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4a9b      	ldr	r2, [pc, #620]	; (8004524 <Vital_Msg_extr+0x112c>)
 80042b8:	4413      	add	r3, r2
 80042ba:	3301      	adds	r3, #1
 80042bc:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80042c0:	b212      	sxth	r2, r2
 80042c2:	78bc      	ldrb	r4, [r7, #2]
 80042c4:	4619      	mov	r1, r3
 80042c6:	2000      	movs	r0, #0
 80042c8:	f011 fe3e 	bl	8015f48 <GetCRC16>
 80042cc:	4603      	mov	r3, r0
 80042ce:	4619      	mov	r1, r3
 80042d0:	4a94      	ldr	r2, [pc, #592]	; (8004524 <Vital_Msg_extr+0x112c>)
 80042d2:	4623      	mov	r3, r4
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4423      	add	r3, r4
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	3312      	adds	r3, #18
 80042de:	460a      	mov	r2, r1
 80042e0:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 80042e2:	78ba      	ldrb	r2, [r7, #2]
 80042e4:	498f      	ldr	r1, [pc, #572]	; (8004524 <Vital_Msg_extr+0x112c>)
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	3311      	adds	r3, #17
 80042f2:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80042f6:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 80042f8:	78ba      	ldrb	r2, [r7, #2]
 80042fa:	498a      	ldr	r1, [pc, #552]	; (8004524 <Vital_Msg_extr+0x112c>)
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	78ba      	ldrb	r2, [r7, #2]
 8004308:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 800430a:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800430e:	2b01      	cmp	r3, #1
 8004310:	d176      	bne.n	8004400 <Vital_Msg_extr+0x1008>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8004312:	78ba      	ldrb	r2, [r7, #2]
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4a82      	ldr	r2, [pc, #520]	; (8004528 <Vital_Msg_extr+0x1130>)
 800431e:	4413      	add	r3, r2
 8004320:	3301      	adds	r3, #1
 8004322:	2210      	movs	r2, #16
 8004324:	2100      	movs	r1, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f022 fb78 	bl	8026a1c <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 800432c:	78ba      	ldrb	r2, [r7, #2]
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4a7c      	ldr	r2, [pc, #496]	; (8004528 <Vital_Msg_extr+0x1130>)
 8004338:	1898      	adds	r0, r3, r2
 800433a:	78ba      	ldrb	r2, [r7, #2]
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4a77      	ldr	r2, [pc, #476]	; (8004524 <Vital_Msg_extr+0x112c>)
 8004346:	4413      	add	r3, r2
 8004348:	2214      	movs	r2, #20
 800434a:	4619      	mov	r1, r3
 800434c:	f022 fb3e 	bl	80269cc <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8004350:	78bb      	ldrb	r3, [r7, #2]
 8004352:	4976      	ldr	r1, [pc, #472]	; (800452c <Vital_Msg_extr+0x1134>)
 8004354:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 800435c:	78bb      	ldrb	r3, [r7, #2]
 800435e:	4a74      	ldr	r2, [pc, #464]	; (8004530 <Vital_Msg_extr+0x1138>)
 8004360:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004364:	78ba      	ldrb	r2, [r7, #2]
 8004366:	4870      	ldr	r0, [pc, #448]	; (8004528 <Vital_Msg_extr+0x1130>)
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4403      	add	r3, r0
 8004372:	3312      	adds	r3, #18
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	4299      	cmp	r1, r3
 8004378:	d042      	beq.n	8004400 <Vital_Msg_extr+0x1008>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 800437a:	78ba      	ldrb	r2, [r7, #2]
 800437c:	78b9      	ldrb	r1, [r7, #2]
 800437e:	486a      	ldr	r0, [pc, #424]	; (8004528 <Vital_Msg_extr+0x1130>)
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4403      	add	r3, r0
 800438a:	3312      	adds	r3, #18
 800438c:	881a      	ldrh	r2, [r3, #0]
 800438e:	4b68      	ldr	r3, [pc, #416]	; (8004530 <Vital_Msg_extr+0x1138>)
 8004390:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8004394:	2214      	movs	r2, #20
 8004396:	2100      	movs	r1, #0
 8004398:	4866      	ldr	r0, [pc, #408]	; (8004534 <Vital_Msg_extr+0x113c>)
 800439a:	f022 fb3f 	bl	8026a1c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 800439e:	78ba      	ldrb	r2, [r7, #2]
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4a5f      	ldr	r2, [pc, #380]	; (8004528 <Vital_Msg_extr+0x1130>)
 80043aa:	4413      	add	r3, r2
 80043ac:	2214      	movs	r2, #20
 80043ae:	4619      	mov	r1, r3
 80043b0:	4860      	ldr	r0, [pc, #384]	; (8004534 <Vital_Msg_extr+0x113c>)
 80043b2:	f022 fb0b 	bl	80269cc <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 80043b6:	f240 2007 	movw	r0, #519	; 0x207
 80043ba:	f00c fea3 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == RESET)
 80043be:	78bb      	ldrb	r3, [r7, #2]
 80043c0:	4a5d      	ldr	r2, [pc, #372]	; (8004538 <Vital_Msg_extr+0x1140>)
 80043c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d11a      	bne.n	8004400 <Vital_Msg_extr+0x1008>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80043ca:	78bb      	ldrb	r3, [r7, #2]
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	4a5b      	ldr	r2, [pc, #364]	; (800453c <Vital_Msg_extr+0x1144>)
 80043d0:	4413      	add	r3, r2
 80043d2:	1c98      	adds	r0, r3, #2
 80043d4:	78ba      	ldrb	r2, [r7, #2]
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4a52      	ldr	r2, [pc, #328]	; (8004528 <Vital_Msg_extr+0x1130>)
 80043e0:	4413      	add	r3, r2
 80043e2:	3301      	adds	r3, #1
 80043e4:	2210      	movs	r2, #16
 80043e6:	4619      	mov	r1, r3
 80043e8:	f022 faf0 	bl	80269cc <memcpy>
#ifdef EI_1

#if ENABLE_SIGNAL_PRINT
				PrintSignalsHitachi();
#endif
				ReArrangedVitalData();
 80043ec:	f006 f94e 	bl	800a68c <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 80043f0:	f240 1019 	movw	r0, #281	; 0x119
 80043f4:	f00c fe86 	bl	8011104 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 80043f8:	4a51      	ldr	r2, [pc, #324]	; (8004540 <Vital_Msg_extr+0x1148>)
 80043fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043fe:	6013      	str	r3, [r2, #0]
			}
		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8004400:	78b9      	ldrb	r1, [r7, #2]
 8004402:	78ba      	ldrb	r2, [r7, #2]
 8004404:	4848      	ldr	r0, [pc, #288]	; (8004528 <Vital_Msg_extr+0x1130>)
 8004406:	460b      	mov	r3, r1
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4403      	add	r3, r0
 8004410:	3312      	adds	r3, #18
 8004412:	8818      	ldrh	r0, [r3, #0]
 8004414:	494b      	ldr	r1, [pc, #300]	; (8004544 <Vital_Msg_extr+0x114c>)
 8004416:	4613      	mov	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	4413      	add	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	440b      	add	r3, r1
 8004420:	3306      	adds	r3, #6
 8004422:	4602      	mov	r2, r0
 8004424:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8004426:	78ba      	ldrb	r2, [r7, #2]
 8004428:	4946      	ldr	r1, [pc, #280]	; (8004544 <Vital_Msg_extr+0x114c>)
 800442a:	4613      	mov	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4413      	add	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	440b      	add	r3, r1
 8004434:	3314      	adds	r3, #20
 8004436:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800443a:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 800443c:	78ba      	ldrb	r2, [r7, #2]
 800443e:	4941      	ldr	r1, [pc, #260]	; (8004544 <Vital_Msg_extr+0x114c>)
 8004440:	4613      	mov	r3, r2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4413      	add	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	440b      	add	r3, r1
 800444a:	3305      	adds	r3, #5
 800444c:	2202      	movs	r2, #2
 800444e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8004450:	78ba      	ldrb	r2, [r7, #2]
 8004452:	493c      	ldr	r1, [pc, #240]	; (8004544 <Vital_Msg_extr+0x114c>)
 8004454:	4613      	mov	r3, r2
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	4413      	add	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	440b      	add	r3, r1
 800445e:	78ba      	ldrb	r2, [r7, #2]
 8004460:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8004462:	78ba      	ldrb	r2, [r7, #2]
 8004464:	4937      	ldr	r1, [pc, #220]	; (8004544 <Vital_Msg_extr+0x114c>)
 8004466:	4613      	mov	r3, r2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	4413      	add	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	440b      	add	r3, r1
 8004470:	3301      	adds	r3, #1
 8004472:	2201      	movs	r2, #1
 8004474:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8004476:	78ba      	ldrb	r2, [r7, #2]
 8004478:	4932      	ldr	r1, [pc, #200]	; (8004544 <Vital_Msg_extr+0x114c>)
 800447a:	4613      	mov	r3, r2
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	4413      	add	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	440b      	add	r3, r1
 8004484:	3302      	adds	r3, #2
 8004486:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 800448a:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 800448c:	2218      	movs	r2, #24
 800448e:	2100      	movs	r1, #0
 8004490:	482d      	ldr	r0, [pc, #180]	; (8004548 <Vital_Msg_extr+0x1150>)
 8004492:	f022 fac3 	bl	8026a1c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8004496:	78ba      	ldrb	r2, [r7, #2]
 8004498:	4613      	mov	r3, r2
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	4413      	add	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4a28      	ldr	r2, [pc, #160]	; (8004544 <Vital_Msg_extr+0x114c>)
 80044a2:	4413      	add	r3, r2
 80044a4:	2218      	movs	r2, #24
 80044a6:	4619      	mov	r1, r3
 80044a8:	4827      	ldr	r0, [pc, #156]	; (8004548 <Vital_Msg_extr+0x1150>)
 80044aa:	f022 fa8f 	bl	80269cc <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 80044ae:	f240 2001 	movw	r0, #513	; 0x201
 80044b2:	f00c fe27 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80044b6:	78ba      	ldrb	r2, [r7, #2]
 80044b8:	4922      	ldr	r1, [pc, #136]	; (8004544 <Vital_Msg_extr+0x114c>)
 80044ba:	4613      	mov	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	440b      	add	r3, r1
 80044c4:	3301      	adds	r3, #1
 80044c6:	2200      	movs	r2, #0
 80044c8:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80044ca:	78bb      	ldrb	r3, [r7, #2]
 80044cc:	491f      	ldr	r1, [pc, #124]	; (800454c <Vital_Msg_extr+0x1154>)
 80044ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80044d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 80044d6:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d13e      	bne.n	800455c <Vital_Msg_extr+0x1164>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 80044de:	78bb      	ldrb	r3, [r7, #2]
 80044e0:	491b      	ldr	r1, [pc, #108]	; (8004550 <Vital_Msg_extr+0x1158>)
 80044e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80044e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 80044ea:	78ba      	ldrb	r2, [r7, #2]
 80044ec:	4919      	ldr	r1, [pc, #100]	; (8004554 <Vital_Msg_extr+0x115c>)
 80044ee:	4613      	mov	r3, r2
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	3304      	adds	r3, #4
 80044fa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80044fe:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8004500:	78ba      	ldrb	r2, [r7, #2]
 8004502:	4914      	ldr	r1, [pc, #80]	; (8004554 <Vital_Msg_extr+0x115c>)
 8004504:	4613      	mov	r3, r2
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	3301      	adds	r3, #1
 8004510:	2201      	movs	r2, #1
 8004512:	701a      	strb	r2, [r3, #0]
		SelfLinkFlag[Source_Index] = SET;
 8004514:	78bb      	ldrb	r3, [r7, #2]
 8004516:	4a10      	ldr	r2, [pc, #64]	; (8004558 <Vital_Msg_extr+0x1160>)
 8004518:	2101      	movs	r1, #1
 800451a:	54d1      	strb	r1, [r2, r3]
 800451c:	e04e      	b.n	80045bc <Vital_Msg_extr+0x11c4>
 800451e:	bf00      	nop
 8004520:	20002ad4 	.word	0x20002ad4
 8004524:	200034e8 	.word	0x200034e8
 8004528:	200035b0 	.word	0x200035b0
 800452c:	20002564 	.word	0x20002564
 8004530:	2000258c 	.word	0x2000258c
 8004534:	20003740 	.word	0x20003740
 8004538:	20002550 	.word	0x20002550
 800453c:	20002770 	.word	0x20002770
 8004540:	200024e4 	.word	0x200024e4
 8004544:	20002da4 	.word	0x20002da4
 8004548:	20002f84 	.word	0x20002f84
 800454c:	200024b8 	.word	0x200024b8
 8004550:	200025a0 	.word	0x200025a0
 8004554:	200033f8 	.word	0x200033f8
 8004558:	200025f0 	.word	0x200025f0
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 800455c:	78bb      	ldrb	r3, [r7, #2]
 800455e:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <Vital_Msg_extr+0x11d4>)
 8004560:	2100      	movs	r1, #0
 8004562:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8004564:	78ba      	ldrb	r2, [r7, #2]
 8004566:	491a      	ldr	r1, [pc, #104]	; (80045d0 <Vital_Msg_extr+0x11d8>)
 8004568:	4613      	mov	r3, r2
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	3308      	adds	r3, #8
 8004574:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004578:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 800457a:	78ba      	ldrb	r2, [r7, #2]
 800457c:	4914      	ldr	r1, [pc, #80]	; (80045d0 <Vital_Msg_extr+0x11d8>)
 800457e:	4613      	mov	r3, r2
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	3301      	adds	r3, #1
 800458a:	2200      	movs	r2, #0
 800458c:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800458e:	78ba      	ldrb	r2, [r7, #2]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4a0e      	ldr	r2, [pc, #56]	; (80045d4 <Vital_Msg_extr+0x11dc>)
 800459a:	4413      	add	r3, r2
 800459c:	3301      	adds	r3, #1
 800459e:	2210      	movs	r2, #16
 80045a0:	2100      	movs	r1, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f022 fa3a 	bl	8026a1c <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 80045a8:	78ba      	ldrb	r2, [r7, #2]
 80045aa:	490a      	ldr	r1, [pc, #40]	; (80045d4 <Vital_Msg_extr+0x11dc>)
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	3312      	adds	r3, #18
 80045b8:	2200      	movs	r2, #0
 80045ba:	801a      	strh	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80045bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045c0:	4805      	ldr	r0, [pc, #20]	; (80045d8 <Vital_Msg_extr+0x11e0>)
 80045c2:	f017 fff2 	bl	801c5aa <HAL_GPIO_TogglePin>

}
 80045c6:	37ac      	adds	r7, #172	; 0xac
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd90      	pop	{r4, r7, pc}
 80045cc:	200025f0 	.word	0x200025f0
 80045d0:	200033f8 	.word	0x200033f8
 80045d4:	200035b0 	.word	0x200035b0
 80045d8:	40021c00 	.word	0x40021c00

080045dc <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 80045dc:	b590      	push	{r4, r7, lr}
 80045de:	b0a5      	sub	sp, #148	; 0x94
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	460a      	mov	r2, r1
 80045e6:	71fb      	strb	r3, [r7, #7]
 80045e8:	4613      	mov	r3, r2
 80045ea:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 80045ec:	2300      	movs	r3, #0
 80045ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80045f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80045f4:	2238      	movs	r2, #56	; 0x38
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f022 fa0f 	bl	8026a1c <memset>
	uint8_t Temp_Buff[60] = {0,};
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	f107 0310 	add.w	r3, r7, #16
 8004606:	2238      	movs	r2, #56	; 0x38
 8004608:	2100      	movs	r1, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f022 fa06 	bl	8026a1c <memset>
	uint8_t uc_index = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 8004616:	2300      	movs	r3, #0
 8004618:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800461c:	2300      	movs	r3, #0
 800461e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 8004622:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004626:	223c      	movs	r2, #60	; 0x3c
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f022 f9f6 	bl	8026a1c <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8004630:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004634:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004638:	441a      	add	r2, r3
 800463a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800463e:	23f4      	movs	r3, #244	; 0xf4
 8004640:	2108      	movs	r1, #8
 8004642:	f7fc f873 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004646:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800464a:	3308      	adds	r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	da00      	bge.n	8004652 <Send_Vital_Data_Message+0x76>
 8004650:	3307      	adds	r3, #7
 8004652:	10db      	asrs	r3, r3, #3
 8004654:	b29a      	uxth	r2, r3
 8004656:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800465a:	4413      	add	r3, r2
 800465c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004660:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004664:	3308      	adds	r3, #8
 8004666:	b29b      	uxth	r3, r3
 8004668:	b21b      	sxth	r3, r3
 800466a:	425a      	negs	r2, r3
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	f002 0207 	and.w	r2, r2, #7
 8004674:	bf58      	it	pl
 8004676:	4253      	negpl	r3, r2
 8004678:	b21b      	sxth	r3, r3
 800467a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800467e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004682:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004686:	441a      	add	r2, r3
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	49c6      	ldr	r1, [pc, #792]	; (80049a4 <Send_Vital_Data_Message+0x3c8>)
 800468c:	3366      	adds	r3, #102	; 0x66
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004698:	2110      	movs	r1, #16
 800469a:	f7fc f847 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800469e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80046a2:	3310      	adds	r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	da00      	bge.n	80046aa <Send_Vital_Data_Message+0xce>
 80046a8:	3307      	adds	r3, #7
 80046aa:	10db      	asrs	r3, r3, #3
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80046b2:	4413      	add	r3, r2
 80046b4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80046b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80046bc:	3310      	adds	r3, #16
 80046be:	b29b      	uxth	r3, r3
 80046c0:	b21b      	sxth	r3, r3
 80046c2:	425a      	negs	r2, r3
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	f002 0207 	and.w	r2, r2, #7
 80046cc:	bf58      	it	pl
 80046ce:	4253      	negpl	r3, r2
 80046d0:	b21b      	sxth	r3, r3
 80046d2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80046d6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80046da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046de:	441a      	add	r2, r3
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	49b0      	ldr	r1, [pc, #704]	; (80049a4 <Send_Vital_Data_Message+0x3c8>)
 80046e4:	3370      	adds	r3, #112	; 0x70
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80046f0:	2110      	movs	r1, #16
 80046f2:	f7fc f81b 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80046f6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80046fa:	3310      	adds	r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	da00      	bge.n	8004702 <Send_Vital_Data_Message+0x126>
 8004700:	3307      	adds	r3, #7
 8004702:	10db      	asrs	r3, r3, #3
 8004704:	b29a      	uxth	r2, r3
 8004706:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800470a:	4413      	add	r3, r2
 800470c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004710:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004714:	3310      	adds	r3, #16
 8004716:	b29b      	uxth	r3, r3
 8004718:	b21b      	sxth	r3, r3
 800471a:	425a      	negs	r2, r3
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	f002 0207 	and.w	r2, r2, #7
 8004724:	bf58      	it	pl
 8004726:	4253      	negpl	r3, r2
 8004728:	b21b      	sxth	r3, r3
 800472a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800472e:	4b9e      	ldr	r3, [pc, #632]	; (80049a8 <Send_Vital_Data_Message+0x3cc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	089b      	lsrs	r3, r3, #2
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d035      	beq.n	80047a8 <Send_Vital_Data_Message+0x1cc>
 800473c:	4b9a      	ldr	r3, [pc, #616]	; (80049a8 <Send_Vital_Data_Message+0x3cc>)
 800473e:	791b      	ldrb	r3, [r3, #4]
 8004740:	79fa      	ldrb	r2, [r7, #7]
 8004742:	429a      	cmp	r2, r3
 8004744:	d130      	bne.n	80047a8 <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 800474c:	4897      	ldr	r0, [pc, #604]	; (80049ac <Send_Vital_Data_Message+0x3d0>)
 800474e:	f019 fef5 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8004752:	4602      	mov	r2, r0
 8004754:	4b96      	ldr	r3, [pc, #600]	; (80049b0 <Send_Vital_Data_Message+0x3d4>)
 8004756:	fba3 1302 	umull	r1, r3, r3, r2
 800475a:	099b      	lsrs	r3, r3, #6
 800475c:	21c8      	movs	r1, #200	; 0xc8
 800475e:	fb01 f303 	mul.w	r3, r1, r3
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 8004768:	4892      	ldr	r0, [pc, #584]	; (80049b4 <Send_Vital_Data_Message+0x3d8>)
 800476a:	f022 fadb 	bl	8026d24 <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	4a91      	ldr	r2, [pc, #580]	; (80049b8 <Send_Vital_Data_Message+0x3dc>)
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	4413      	add	r3, r2
 8004776:	3301      	adds	r3, #1
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	4619      	mov	r1, r3
 800477c:	488f      	ldr	r0, [pc, #572]	; (80049bc <Send_Vital_Data_Message+0x3e0>)
 800477e:	f022 fa35 	bl	8026bec <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 8004782:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8004786:	4619      	mov	r1, r3
 8004788:	488d      	ldr	r0, [pc, #564]	; (80049c0 <Send_Vital_Data_Message+0x3e4>)
 800478a:	f022 fa2f 	bl	8026bec <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 800478e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004792:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004796:	441a      	add	r2, r3
 8004798:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800479c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80047a0:	2108      	movs	r1, #8
 80047a2:	f7fb ffc3 	bl	800072c <InsertBits>
	{
 80047a6:	e00f      	b.n	80047c8 <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 80047a8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80047ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047b0:	441a      	add	r2, r3
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	4980      	ldr	r1, [pc, #512]	; (80049b8 <Send_Vital_Data_Message+0x3dc>)
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	440b      	add	r3, r1
 80047ba:	3301      	adds	r3, #1
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80047c2:	2108      	movs	r1, #8
 80047c4:	f7fb ffb2 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 80047c8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80047cc:	3308      	adds	r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	da00      	bge.n	80047d4 <Send_Vital_Data_Message+0x1f8>
 80047d2:	3307      	adds	r3, #7
 80047d4:	10db      	asrs	r3, r3, #3
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80047dc:	4413      	add	r3, r2
 80047de:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80047e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80047e6:	3308      	adds	r3, #8
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	b21b      	sxth	r3, r3
 80047ec:	425a      	negs	r2, r3
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	f002 0207 	and.w	r2, r2, #7
 80047f6:	bf58      	it	pl
 80047f8:	4253      	negpl	r3, r2
 80047fa:	b21b      	sxth	r3, r3
 80047fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004800:	4b69      	ldr	r3, [pc, #420]	; (80049a8 <Send_Vital_Data_Message+0x3cc>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	08db      	lsrs	r3, r3, #3
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d035      	beq.n	800487a <Send_Vital_Data_Message+0x29e>
 800480e:	4b66      	ldr	r3, [pc, #408]	; (80049a8 <Send_Vital_Data_Message+0x3cc>)
 8004810:	791b      	ldrb	r3, [r3, #4]
 8004812:	79fa      	ldrb	r2, [r7, #7]
 8004814:	429a      	cmp	r2, r3
 8004816:	d130      	bne.n	800487a <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 800481e:	4863      	ldr	r0, [pc, #396]	; (80049ac <Send_Vital_Data_Message+0x3d0>)
 8004820:	f019 fe8c 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8004824:	4602      	mov	r2, r0
 8004826:	4b62      	ldr	r3, [pc, #392]	; (80049b0 <Send_Vital_Data_Message+0x3d4>)
 8004828:	fba3 1302 	umull	r1, r3, r3, r2
 800482c:	099b      	lsrs	r3, r3, #6
 800482e:	21c8      	movs	r1, #200	; 0xc8
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 800483a:	4862      	ldr	r0, [pc, #392]	; (80049c4 <Send_Vital_Data_Message+0x3e8>)
 800483c:	f022 fa72 	bl	8026d24 <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	4a5d      	ldr	r2, [pc, #372]	; (80049b8 <Send_Vital_Data_Message+0x3dc>)
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	4413      	add	r3, r2
 8004848:	3302      	adds	r3, #2
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	4619      	mov	r1, r3
 800484e:	485e      	ldr	r0, [pc, #376]	; (80049c8 <Send_Vital_Data_Message+0x3ec>)
 8004850:	f022 f9cc 	bl	8026bec <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 8004854:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004858:	4619      	mov	r1, r3
 800485a:	485c      	ldr	r0, [pc, #368]	; (80049cc <Send_Vital_Data_Message+0x3f0>)
 800485c:	f022 f9c6 	bl	8026bec <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8004860:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004864:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004868:	441a      	add	r2, r3
 800486a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800486e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004872:	2108      	movs	r1, #8
 8004874:	f7fb ff5a 	bl	800072c <InsertBits>
	{
 8004878:	e00f      	b.n	800489a <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 800487a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800487e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004882:	441a      	add	r2, r3
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	494c      	ldr	r1, [pc, #304]	; (80049b8 <Send_Vital_Data_Message+0x3dc>)
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	440b      	add	r3, r1
 800488c:	3302      	adds	r3, #2
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004894:	2108      	movs	r1, #8
 8004896:	f7fb ff49 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 800489a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800489e:	3308      	adds	r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	da00      	bge.n	80048a6 <Send_Vital_Data_Message+0x2ca>
 80048a4:	3307      	adds	r3, #7
 80048a6:	10db      	asrs	r3, r3, #3
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80048ae:	4413      	add	r3, r2
 80048b0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80048b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80048b8:	3308      	adds	r3, #8
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	b21b      	sxth	r3, r3
 80048be:	425a      	negs	r2, r3
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	f002 0207 	and.w	r2, r2, #7
 80048c8:	bf58      	it	pl
 80048ca:	4253      	negpl	r3, r2
 80048cc:	b21b      	sxth	r3, r3
 80048ce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 80048d2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80048d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048da:	441a      	add	r2, r3
 80048dc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80048e0:	2302      	movs	r3, #2
 80048e2:	2108      	movs	r1, #8
 80048e4:	f7fb ff22 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80048e8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80048ec:	3308      	adds	r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	da00      	bge.n	80048f4 <Send_Vital_Data_Message+0x318>
 80048f2:	3307      	adds	r3, #7
 80048f4:	10db      	asrs	r3, r3, #3
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80048fc:	4413      	add	r3, r2
 80048fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004902:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004906:	3308      	adds	r3, #8
 8004908:	b29b      	uxth	r3, r3
 800490a:	b21b      	sxth	r3, r3
 800490c:	425a      	negs	r2, r3
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	f002 0207 	and.w	r2, r2, #7
 8004916:	bf58      	it	pl
 8004918:	4253      	negpl	r3, r2
 800491a:	b21b      	sxth	r3, r3
 800491c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	4a2b      	ldr	r2, [pc, #172]	; (80049d0 <Send_Vital_Data_Message+0x3f4>)
 8004924:	5cd3      	ldrb	r3, [r2, r3]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d15a      	bne.n	80049e0 <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 800492a:	f008 f8a3 	bl	800ca74 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 800492e:	79fa      	ldrb	r2, [r7, #7]
 8004930:	4613      	mov	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4413      	add	r3, r2
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <Send_Vital_Data_Message+0x3f8>)
 800493a:	4413      	add	r3, r2
 800493c:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <Send_Vital_Data_Message+0x3fc>)
 800493e:	6811      	ldr	r1, [r2, #0]
 8004940:	6019      	str	r1, [r3, #0]
 8004942:	8892      	ldrh	r2, [r2, #4]
 8004944:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 8004946:	4825      	ldr	r0, [pc, #148]	; (80049dc <Send_Vital_Data_Message+0x400>)
 8004948:	f022 f9ec 	bl	8026d24 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	4a20      	ldr	r2, [pc, #128]	; (80049d0 <Send_Vital_Data_Message+0x3f4>)
 8004950:	2100      	movs	r1, #0
 8004952:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 8004954:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004958:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800495c:	441a      	add	r2, r3
 800495e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004962:	2368      	movs	r3, #104	; 0x68
 8004964:	2110      	movs	r1, #16
 8004966:	f7fb fee1 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 800496a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800496e:	3310      	adds	r3, #16
 8004970:	2b00      	cmp	r3, #0
 8004972:	da00      	bge.n	8004976 <Send_Vital_Data_Message+0x39a>
 8004974:	3307      	adds	r3, #7
 8004976:	10db      	asrs	r3, r3, #3
 8004978:	b29a      	uxth	r2, r3
 800497a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800497e:	4413      	add	r3, r2
 8004980:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004984:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004988:	3310      	adds	r3, #16
 800498a:	b29b      	uxth	r3, r3
 800498c:	b21b      	sxth	r3, r3
 800498e:	425a      	negs	r2, r3
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	f002 0207 	and.w	r2, r2, #7
 8004998:	bf58      	it	pl
 800499a:	4253      	negpl	r3, r2
 800499c:	b21b      	sxth	r3, r3
 800499e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80049a2:	e044      	b.n	8004a2e <Send_Vital_Data_Message+0x452>
 80049a4:	20000504 	.word	0x20000504
 80049a8:	2000308c 	.word	0x2000308c
 80049ac:	2000bcf8 	.word	0x2000bcf8
 80049b0:	51eb851f 	.word	0x51eb851f
 80049b4:	08028dec 	.word	0x08028dec
 80049b8:	200028f4 	.word	0x200028f4
 80049bc:	08028e10 	.word	0x08028e10
 80049c0:	08028e30 	.word	0x08028e30
 80049c4:	08028af8 	.word	0x08028af8
 80049c8:	08028b1c 	.word	0x08028b1c
 80049cc:	08028b3c 	.word	0x08028b3c
 80049d0:	20002764 	.word	0x20002764
 80049d4:	200028b8 	.word	0x200028b8
 80049d8:	20003fe4 	.word	0x20003fe4
 80049dc:	08028e50 	.word	0x08028e50
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 80049e0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80049e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049e8:	441a      	add	r2, r3
 80049ea:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80049ee:	2328      	movs	r3, #40	; 0x28
 80049f0:	2110      	movs	r1, #16
 80049f2:	f7fb fe9b 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80049f6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80049fa:	3310      	adds	r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	da00      	bge.n	8004a02 <Send_Vital_Data_Message+0x426>
 8004a00:	3307      	adds	r3, #7
 8004a02:	10db      	asrs	r3, r3, #3
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004a10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a14:	3310      	adds	r3, #16
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	b21b      	sxth	r3, r3
 8004a1a:	425a      	negs	r2, r3
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	f002 0207 	and.w	r2, r2, #7
 8004a24:	bf58      	it	pl
 8004a26:	4253      	negpl	r3, r2
 8004a28:	b21b      	sxth	r3, r3
 8004a2a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8004a2e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a32:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a36:	18d1      	adds	r1, r2, r3
 8004a38:	79fa      	ldrb	r2, [r7, #7]
 8004a3a:	48cd      	ldr	r0, [pc, #820]	; (8004d70 <Send_Vital_Data_Message+0x794>)
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	4413      	add	r3, r2
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	4403      	add	r3, r0
 8004a46:	3305      	adds	r3, #5
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004a4e:	460a      	mov	r2, r1
 8004a50:	2108      	movs	r1, #8
 8004a52:	f7fb fe6b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004a56:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	da00      	bge.n	8004a62 <Send_Vital_Data_Message+0x486>
 8004a60:	3307      	adds	r3, #7
 8004a62:	10db      	asrs	r3, r3, #3
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004a70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a74:	3308      	adds	r3, #8
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	b21b      	sxth	r3, r3
 8004a7a:	425a      	negs	r2, r3
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	f002 0207 	and.w	r2, r2, #7
 8004a84:	bf58      	it	pl
 8004a86:	4253      	negpl	r3, r2
 8004a88:	b21b      	sxth	r3, r3
 8004a8a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8004a8e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a96:	18d1      	adds	r1, r2, r3
 8004a98:	79fa      	ldrb	r2, [r7, #7]
 8004a9a:	48b5      	ldr	r0, [pc, #724]	; (8004d70 <Send_Vital_Data_Message+0x794>)
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	4413      	add	r3, r2
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	4403      	add	r3, r0
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004aae:	460a      	mov	r2, r1
 8004ab0:	2108      	movs	r1, #8
 8004ab2:	f7fb fe3b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004ab6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004aba:	3308      	adds	r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	da00      	bge.n	8004ac2 <Send_Vital_Data_Message+0x4e6>
 8004ac0:	3307      	adds	r3, #7
 8004ac2:	10db      	asrs	r3, r3, #3
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004aca:	4413      	add	r3, r2
 8004acc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004ad0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	b21b      	sxth	r3, r3
 8004ada:	425a      	negs	r2, r3
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	f002 0207 	and.w	r2, r2, #7
 8004ae4:	bf58      	it	pl
 8004ae6:	4253      	negpl	r3, r2
 8004ae8:	b21b      	sxth	r3, r3
 8004aea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8004aee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004af2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004af6:	18d1      	adds	r1, r2, r3
 8004af8:	79fa      	ldrb	r2, [r7, #7]
 8004afa:	489d      	ldr	r0, [pc, #628]	; (8004d70 <Send_Vital_Data_Message+0x794>)
 8004afc:	4613      	mov	r3, r2
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	4413      	add	r3, r2
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	4403      	add	r3, r0
 8004b06:	3303      	adds	r3, #3
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004b0e:	460a      	mov	r2, r1
 8004b10:	2108      	movs	r1, #8
 8004b12:	f7fb fe0b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004b16:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	da00      	bge.n	8004b22 <Send_Vital_Data_Message+0x546>
 8004b20:	3307      	adds	r3, #7
 8004b22:	10db      	asrs	r3, r3, #3
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004b30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b34:	3308      	adds	r3, #8
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	b21b      	sxth	r3, r3
 8004b3a:	425a      	negs	r2, r3
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	f002 0207 	and.w	r2, r2, #7
 8004b44:	bf58      	it	pl
 8004b46:	4253      	negpl	r3, r2
 8004b48:	b21b      	sxth	r3, r3
 8004b4a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8004b4e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b56:	18d1      	adds	r1, r2, r3
 8004b58:	79fa      	ldrb	r2, [r7, #7]
 8004b5a:	4885      	ldr	r0, [pc, #532]	; (8004d70 <Send_Vital_Data_Message+0x794>)
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	4413      	add	r3, r2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	4403      	add	r3, r0
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004b6c:	460a      	mov	r2, r1
 8004b6e:	2108      	movs	r1, #8
 8004b70:	f7fb fddc 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004b74:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004b78:	3308      	adds	r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	da00      	bge.n	8004b80 <Send_Vital_Data_Message+0x5a4>
 8004b7e:	3307      	adds	r3, #7
 8004b80:	10db      	asrs	r3, r3, #3
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b88:	4413      	add	r3, r2
 8004b8a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004b8e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b92:	3308      	adds	r3, #8
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	b21b      	sxth	r3, r3
 8004b98:	425a      	negs	r2, r3
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	f002 0207 	and.w	r2, r2, #7
 8004ba2:	bf58      	it	pl
 8004ba4:	4253      	negpl	r3, r2
 8004ba6:	b21b      	sxth	r3, r3
 8004ba8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8004bac:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004bb0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004bb4:	18d1      	adds	r1, r2, r3
 8004bb6:	79fa      	ldrb	r2, [r7, #7]
 8004bb8:	486d      	ldr	r0, [pc, #436]	; (8004d70 <Send_Vital_Data_Message+0x794>)
 8004bba:	4613      	mov	r3, r2
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	4413      	add	r3, r2
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	4403      	add	r3, r0
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004bcc:	460a      	mov	r2, r1
 8004bce:	2108      	movs	r1, #8
 8004bd0:	f7fb fdac 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004bd4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004bd8:	3308      	adds	r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	da00      	bge.n	8004be0 <Send_Vital_Data_Message+0x604>
 8004bde:	3307      	adds	r3, #7
 8004be0:	10db      	asrs	r3, r3, #3
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004be8:	4413      	add	r3, r2
 8004bea:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004bee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004bf2:	3308      	adds	r3, #8
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	b21b      	sxth	r3, r3
 8004bf8:	425a      	negs	r2, r3
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	f002 0207 	and.w	r2, r2, #7
 8004c02:	bf58      	it	pl
 8004c04:	4253      	negpl	r3, r2
 8004c06:	b21b      	sxth	r3, r3
 8004c08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8004c0c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c10:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c14:	18d1      	adds	r1, r2, r3
 8004c16:	79fa      	ldrb	r2, [r7, #7]
 8004c18:	4855      	ldr	r0, [pc, #340]	; (8004d70 <Send_Vital_Data_Message+0x794>)
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	4413      	add	r3, r2
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	4403      	add	r3, r0
 8004c24:	3302      	adds	r3, #2
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004c2c:	460a      	mov	r2, r1
 8004c2e:	2108      	movs	r1, #8
 8004c30:	f7fb fd7c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004c34:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004c38:	3308      	adds	r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	da00      	bge.n	8004c40 <Send_Vital_Data_Message+0x664>
 8004c3e:	3307      	adds	r3, #7
 8004c40:	10db      	asrs	r3, r3, #3
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c48:	4413      	add	r3, r2
 8004c4a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004c4e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004c52:	3308      	adds	r3, #8
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	b21b      	sxth	r3, r3
 8004c58:	425a      	negs	r2, r3
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	f002 0207 	and.w	r2, r2, #7
 8004c62:	bf58      	it	pl
 8004c64:	4253      	negpl	r3, r2
 8004c66:	b21b      	sxth	r3, r3
 8004c68:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 8004c6c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c74:	441a      	add	r2, r3
 8004c76:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	2108      	movs	r1, #8
 8004c7e:	f7fb fd55 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004c82:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004c86:	3308      	adds	r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	da00      	bge.n	8004c8e <Send_Vital_Data_Message+0x6b2>
 8004c8c:	3307      	adds	r3, #7
 8004c8e:	10db      	asrs	r3, r3, #3
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c96:	4413      	add	r3, r2
 8004c98:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004c9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	b21b      	sxth	r3, r3
 8004ca6:	425a      	negs	r2, r3
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	f002 0207 	and.w	r2, r2, #7
 8004cb0:	bf58      	it	pl
 8004cb2:	4253      	negpl	r3, r2
 8004cb4:	b21b      	sxth	r3, r3
 8004cb6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 8004cba:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004cbe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004cc2:	441a      	add	r2, r3
 8004cc4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2108      	movs	r1, #8
 8004ccc:	f7fb fd2e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004cd0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	da00      	bge.n	8004cdc <Send_Vital_Data_Message+0x700>
 8004cda:	3307      	adds	r3, #7
 8004cdc:	10db      	asrs	r3, r3, #3
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004cea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004cee:	3308      	adds	r3, #8
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	b21b      	sxth	r3, r3
 8004cf4:	425a      	negs	r2, r3
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	f002 0207 	and.w	r2, r2, #7
 8004cfe:	bf58      	it	pl
 8004d00:	4253      	negpl	r3, r2
 8004d02:	b21b      	sxth	r3, r3
 8004d04:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 8004d08:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004d0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004d10:	441a      	add	r2, r3
 8004d12:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004d16:	2301      	movs	r3, #1
 8004d18:	2108      	movs	r1, #8
 8004d1a:	f7fb fd07 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004d1e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004d22:	3308      	adds	r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	da00      	bge.n	8004d2a <Send_Vital_Data_Message+0x74e>
 8004d28:	3307      	adds	r3, #7
 8004d2a:	10db      	asrs	r3, r3, #3
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004d32:	4413      	add	r3, r2
 8004d34:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004d38:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	b21b      	sxth	r3, r3
 8004d42:	425a      	negs	r2, r3
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	f002 0207 	and.w	r2, r2, #7
 8004d4c:	bf58      	it	pl
 8004d4e:	4253      	negpl	r3, r2
 8004d50:	b21b      	sxth	r3, r3
 8004d52:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004d56:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <Send_Vital_Data_Message+0x798>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	085b      	lsrs	r3, r3, #1
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d02c      	beq.n	8004dbe <Send_Vital_Data_Message+0x7e2>
 8004d64:	4b03      	ldr	r3, [pc, #12]	; (8004d74 <Send_Vital_Data_Message+0x798>)
 8004d66:	791b      	ldrb	r3, [r3, #4]
 8004d68:	79fa      	ldrb	r2, [r7, #7]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d127      	bne.n	8004dbe <Send_Vital_Data_Message+0x7e2>
 8004d6e:	e003      	b.n	8004d78 <Send_Vital_Data_Message+0x79c>
 8004d70:	200028b8 	.word	0x200028b8
 8004d74:	2000308c 	.word	0x2000308c
	{
		uint32_t Rand_Number = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 8004d7e:	484e      	ldr	r0, [pc, #312]	; (8004eb8 <Send_Vital_Data_Message+0x8dc>)
 8004d80:	f019 fbdc 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8004d84:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 8004d88:	484c      	ldr	r0, [pc, #304]	; (8004ebc <Send_Vital_Data_Message+0x8e0>)
 8004d8a:	f021 ffcb 	bl	8026d24 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	4a4b      	ldr	r2, [pc, #300]	; (8004ec0 <Send_Vital_Data_Message+0x8e4>)
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	4413      	add	r3, r2
 8004d96:	330c      	adds	r3, #12
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4849      	ldr	r0, [pc, #292]	; (8004ec4 <Send_Vital_Data_Message+0x8e8>)
 8004d9e:	f021 ff25 	bl	8026bec <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 8004da2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004da6:	4848      	ldr	r0, [pc, #288]	; (8004ec8 <Send_Vital_Data_Message+0x8ec>)
 8004da8:	f021 ff20 	bl	8026bec <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 8004dac:	f107 020c 	add.w	r2, r7, #12
 8004db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004db4:	2118      	movs	r1, #24
 8004db6:	2000      	movs	r0, #0
 8004db8:	f7fb fcb8 	bl	800072c <InsertBits>
	{
 8004dbc:	e00b      	b.n	8004dd6 <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
 8004dc0:	4a3f      	ldr	r2, [pc, #252]	; (8004ec0 <Send_Vital_Data_Message+0x8e4>)
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	4413      	add	r3, r2
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f107 020c 	add.w	r2, r7, #12
 8004dce:	2118      	movs	r1, #24
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	f7fb fcab 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004ddc:	e011      	b.n	8004e02 <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8004dde:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8004de2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004de6:	3303      	adds	r3, #3
 8004de8:	3290      	adds	r2, #144	; 0x90
 8004dea:	443a      	add	r2, r7
 8004dec:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8004df0:	3390      	adds	r3, #144	; 0x90
 8004df2:	443b      	add	r3, r7
 8004df4:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004df8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004e02:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d8e6      	bhi.n	8004dde <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8004e10:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004e14:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e18:	18d4      	adds	r4, r2, r3
 8004e1a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3303      	adds	r3, #3
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	f107 030c 	add.w	r3, r7, #12
 8004e28:	4611      	mov	r1, r2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f011 f946 	bl	80160bc <CalculateDirectReverseCrc>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004e36:	4622      	mov	r2, r4
 8004e38:	2120      	movs	r1, #32
 8004e3a:	f7fb fc77 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8004e3e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004e42:	3320      	adds	r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	da00      	bge.n	8004e4a <Send_Vital_Data_Message+0x86e>
 8004e48:	3307      	adds	r3, #7
 8004e4a:	10db      	asrs	r3, r3, #3
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004e52:	4413      	add	r3, r2
 8004e54:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004e58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004e5c:	3320      	adds	r3, #32
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	b21b      	sxth	r3, r3
 8004e62:	425a      	negs	r2, r3
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	f002 0207 	and.w	r2, r2, #7
 8004e6c:	bf58      	it	pl
 8004e6e:	4253      	negpl	r3, r2
 8004e70:	b21b      	sxth	r3, r3
 8004e72:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004e76:	4b15      	ldr	r3, [pc, #84]	; (8004ecc <Send_Vital_Data_Message+0x8f0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	0a5b      	lsrs	r3, r3, #9
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00b      	beq.n	8004e9c <Send_Vital_Data_Message+0x8c0>
 8004e84:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <Send_Vital_Data_Message+0x8f0>)
 8004e86:	791b      	ldrb	r3, [r3, #4]
 8004e88:	79fa      	ldrb	r2, [r7, #7]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d106      	bne.n	8004e9c <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 8004e8e:	4810      	ldr	r0, [pc, #64]	; (8004ed0 <Send_Vital_Data_Message+0x8f4>)
 8004e90:	f021 ff48 	bl	8026d24 <puts>
		printf("Not Sending Reply");
 8004e94:	480f      	ldr	r0, [pc, #60]	; (8004ed4 <Send_Vital_Data_Message+0x8f8>)
 8004e96:	f021 fea9 	bl	8026bec <iprintf>
 8004e9a:	e009      	b.n	8004eb0 <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8004e9c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004ea0:	b2d9      	uxtb	r1, r3
 8004ea2:	79fa      	ldrb	r2, [r7, #7]
 8004ea4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f003 f8cf 	bl	800804c <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 8004eae:	bf00      	nop
 8004eb0:	bf00      	nop
 8004eb2:	3794      	adds	r7, #148	; 0x94
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd90      	pop	{r4, r7, pc}
 8004eb8:	2000bcf8 	.word	0x2000bcf8
 8004ebc:	08028e68 	.word	0x08028e68
 8004ec0:	200028f4 	.word	0x200028f4
 8004ec4:	08028e8c 	.word	0x08028e8c
 8004ec8:	08028eb0 	.word	0x08028eb0
 8004ecc:	2000308c 	.word	0x2000308c
 8004ed0:	08028bc4 	.word	0x08028bc4
 8004ed4:	08028bdc 	.word	0x08028bdc

08004ed8 <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b0c0      	sub	sp, #256	; 0x100
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	70fb      	strb	r3, [r7, #3]
 8004eea:	460b      	mov	r3, r1
 8004eec:	70bb      	strb	r3, [r7, #2]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	uint32_t Calc_CRC = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t Recv_CRC = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t Ticks = HAL_GetTick();
 8004f04:	f014 fe68 	bl	8019bd8 <HAL_GetTick>
 8004f08:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	uint8_t noofIP = 0, uc_index = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004f12:	2300      	movs	r3, #0
 8004f14:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t LinkEstablishFlag = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t Temp_Vital_Data_Buff[128] = {0,};
 8004f1e:	2300      	movs	r3, #0
 8004f20:	667b      	str	r3, [r7, #100]	; 0x64
 8004f22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004f26:	227c      	movs	r2, #124	; 0x7c
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f021 fd76 	bl	8026a1c <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 8004f30:	2300      	movs	r3, #0
 8004f32:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004f36:	2300      	movs	r3, #0
 8004f38:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	b299      	uxth	r1, r3
 8004f40:	78ba      	ldrb	r2, [r7, #2]
 8004f42:	48c3      	ldr	r0, [pc, #780]	; (8005250 <Vital_Msg_extr_from_CAN+0x378>)
 8004f44:	4613      	mov	r3, r2
 8004f46:	015b      	lsls	r3, r3, #5
 8004f48:	4413      	add	r3, r2
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	4403      	add	r3, r0
 8004f4e:	3340      	adds	r3, #64	; 0x40
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	4299      	cmp	r1, r3
 8004f54:	d11a      	bne.n	8004f8c <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 8004f56:	78ba      	ldrb	r2, [r7, #2]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	015b      	lsls	r3, r3, #5
 8004f5c:	4413      	add	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4abb      	ldr	r2, [pc, #748]	; (8005250 <Vital_Msg_extr_from_CAN+0x378>)
 8004f62:	4413      	add	r3, r2
 8004f64:	78fa      	ldrb	r2, [r7, #3]
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f021 fd1f 	bl	80269ac <memcmp>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004f74:	78bb      	ldrb	r3, [r7, #2]
 8004f76:	4ab7      	ldr	r2, [pc, #732]	; (8005254 <Vital_Msg_extr_from_CAN+0x37c>)
 8004f78:	3366      	adds	r3, #102	; 0x66
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4619      	mov	r1, r3
 8004f82:	48b5      	ldr	r0, [pc, #724]	; (8005258 <Vital_Msg_extr_from_CAN+0x380>)
 8004f84:	f021 fe32 	bl	8026bec <iprintf>
			return;
 8004f88:	f000 bda3 	b.w	8005ad2 <Vital_Msg_extr_from_CAN+0xbfa>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	3b05      	subs	r3, #5
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	441a      	add	r2, r3
 8004f94:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f98:	2120      	movs	r1, #32
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fb fb3a 	bl	8000614 <ExtractBits>
 8004fa0:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004fa4:	4bad      	ldr	r3, [pc, #692]	; (800525c <Vital_Msg_extr_from_CAN+0x384>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d034      	beq.n	800501a <Vital_Msg_extr_from_CAN+0x142>
 8004fb0:	4baa      	ldr	r3, [pc, #680]	; (800525c <Vital_Msg_extr_from_CAN+0x384>)
 8004fb2:	791b      	ldrb	r3, [r3, #4]
 8004fb4:	78ba      	ldrb	r2, [r7, #2]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d12f      	bne.n	800501a <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 8004fba:	2316      	movs	r3, #22
 8004fbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8004fc0:	48a7      	ldr	r0, [pc, #668]	; (8005260 <Vital_Msg_extr_from_CAN+0x388>)
 8004fc2:	f019 fabb 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	4ba6      	ldr	r3, [pc, #664]	; (8005264 <Vital_Msg_extr_from_CAN+0x38c>)
 8004fca:	fba3 1302 	umull	r1, r3, r3, r2
 8004fce:	0dd9      	lsrs	r1, r3, #23
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	041b      	lsls	r3, r3, #16
 8004fd4:	1a5b      	subs	r3, r3, r1
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		printf("\nInjected RX Vital CRC failure\n");
 8004fde:	48a2      	ldr	r0, [pc, #648]	; (8005268 <Vital_Msg_extr_from_CAN+0x390>)
 8004fe0:	f021 fea0 	bl	8026d24 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004fe4:	78ba      	ldrb	r2, [r7, #2]
 8004fe6:	49a1      	ldr	r1, [pc, #644]	; (800526c <Vital_Msg_extr_from_CAN+0x394>)
 8004fe8:	4613      	mov	r3, r2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4413      	add	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	440b      	add	r3, r1
 8004ff2:	3308      	adds	r3, #8
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	489d      	ldr	r0, [pc, #628]	; (8005270 <Vital_Msg_extr_from_CAN+0x398>)
 8004ffa:	f021 fdf7 	bl	8026bec <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8004ffe:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8005002:	489c      	ldr	r0, [pc, #624]	; (8005274 <Vital_Msg_extr_from_CAN+0x39c>)
 8005004:	f021 fdf2 	bl	8026bec <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8005008:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800500c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005010:	2118      	movs	r1, #24
 8005012:	2000      	movs	r0, #0
 8005014:	f7fb fb8a 	bl	800072c <InsertBits>
	{
 8005018:	e00e      	b.n	8005038 <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 800501a:	78ba      	ldrb	r2, [r7, #2]
 800501c:	4993      	ldr	r1, [pc, #588]	; (800526c <Vital_Msg_extr_from_CAN+0x394>)
 800501e:	4613      	mov	r3, r2
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4413      	add	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	440b      	add	r3, r1
 8005028:	3308      	adds	r3, #8
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005030:	2118      	movs	r1, #24
 8005032:	2000      	movs	r0, #0
 8005034:	f7fb fb7a 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005038:	2300      	movs	r3, #0
 800503a:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800503e:	e011      	b.n	8005064 <Vital_Msg_extr_from_CAN+0x18c>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8005040:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	441a      	add	r2, r3
 8005048:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800504c:	3303      	adds	r3, #3
 800504e:	7812      	ldrb	r2, [r2, #0]
 8005050:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005054:	443b      	add	r3, r7
 8005056:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 800505a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800505e:	3301      	adds	r3, #1
 8005060:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8005064:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	3b05      	subs	r3, #5
 800506c:	429a      	cmp	r2, r3
 800506e:	dbe7      	blt.n	8005040 <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8005070:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005074:	b29b      	uxth	r3, r3
 8005076:	3303      	adds	r3, #3
 8005078:	b29a      	uxth	r2, r3
 800507a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f011 f81b 	bl	80160bc <CalculateDirectReverseCrc>
 8005086:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	if(Calc_CRC != Recv_CRC)
 800508a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800508e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005092:	429a      	cmp	r2, r3
 8005094:	f000 8104 	beq.w	80052a0 <Vital_Msg_extr_from_CAN+0x3c8>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3305      	adds	r3, #5
 800509c:	461a      	mov	r2, r3
 800509e:	2108      	movs	r1, #8
 80050a0:	2000      	movs	r0, #0
 80050a2:	f7fb fab7 	bl	8000614 <ExtractBits>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f040 80ba 	bne.w	8005222 <Vital_Msg_extr_from_CAN+0x34a>
		{
			printf("Tx seq Roll over Detected\n");
 80050ae:	4872      	ldr	r0, [pc, #456]	; (8005278 <Vital_Msg_extr_from_CAN+0x3a0>)
 80050b0:	f021 fe38 	bl	8026d24 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 80050b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80050b8:	2280      	movs	r2, #128	; 0x80
 80050ba:	2100      	movs	r1, #0
 80050bc:	4618      	mov	r0, r3
 80050be:	f021 fcad 	bl	8026a1c <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 80050c2:	78ba      	ldrb	r2, [r7, #2]
 80050c4:	4969      	ldr	r1, [pc, #420]	; (800526c <Vital_Msg_extr_from_CAN+0x394>)
 80050c6:	4613      	mov	r3, r2
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	4413      	add	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	440b      	add	r3, r1
 80050d0:	3308      	adds	r3, #8
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3301      	adds	r3, #1
 80050d6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80050da:	2118      	movs	r1, #24
 80050dc:	2000      	movs	r0, #0
 80050de:	f7fb fb25 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80050e8:	e011      	b.n	800510e <Vital_Msg_extr_from_CAN+0x236>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80050ea:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	441a      	add	r2, r3
 80050f2:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80050f6:	3303      	adds	r3, #3
 80050f8:	7812      	ldrb	r2, [r2, #0]
 80050fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80050fe:	443b      	add	r3, r7
 8005100:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005104:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005108:	3301      	adds	r3, #1
 800510a:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800510e:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	3b05      	subs	r3, #5
 8005116:	429a      	cmp	r2, r3
 8005118:	dbe7      	blt.n	80050ea <Vital_Msg_extr_from_CAN+0x212>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 800511a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800511e:	b29b      	uxth	r3, r3
 8005120:	3303      	adds	r3, #3
 8005122:	b29a      	uxth	r2, r3
 8005124:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f010 ffc6 	bl	80160bc <CalculateDirectReverseCrc>
 8005130:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	3b05      	subs	r3, #5
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	441a      	add	r2, r3
 800513c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005140:	2120      	movs	r1, #32
 8005142:	4618      	mov	r0, r3
 8005144:	f7fb fa66 	bl	8000614 <ExtractBits>
 8005148:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

			if(Calc_CRC == Recv_CRC)
 800514c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8005150:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005154:	429a      	cmp	r2, r3
 8005156:	d14e      	bne.n	80051f6 <Vital_Msg_extr_from_CAN+0x31e>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 8005158:	4848      	ldr	r0, [pc, #288]	; (800527c <Vital_Msg_extr_from_CAN+0x3a4>)
 800515a:	f021 fde3 	bl	8026d24 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 800515e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005162:	4847      	ldr	r0, [pc, #284]	; (8005280 <Vital_Msg_extr_from_CAN+0x3a8>)
 8005164:	f021 fd42 	bl	8026bec <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8005168:	78ba      	ldrb	r2, [r7, #2]
 800516a:	4940      	ldr	r1, [pc, #256]	; (800526c <Vital_Msg_extr_from_CAN+0x394>)
 800516c:	4613      	mov	r3, r2
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	4413      	add	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	440b      	add	r3, r1
 8005176:	3308      	adds	r3, #8
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4619      	mov	r1, r3
 800517c:	4841      	ldr	r0, [pc, #260]	; (8005284 <Vital_Msg_extr_from_CAN+0x3ac>)
 800517e:	f021 fd35 	bl	8026bec <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8005182:	78ba      	ldrb	r2, [r7, #2]
 8005184:	4939      	ldr	r1, [pc, #228]	; (800526c <Vital_Msg_extr_from_CAN+0x394>)
 8005186:	4613      	mov	r3, r2
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	4413      	add	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	440b      	add	r3, r1
 8005190:	3308      	adds	r3, #8
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	1c59      	adds	r1, r3, #1
 8005196:	4835      	ldr	r0, [pc, #212]	; (800526c <Vital_Msg_extr_from_CAN+0x394>)
 8005198:	4613      	mov	r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4403      	add	r3, r0
 80051a2:	3308      	adds	r3, #8
 80051a4:	6019      	str	r1, [r3, #0]
 80051a6:	78b9      	ldrb	r1, [r7, #2]
 80051a8:	4830      	ldr	r0, [pc, #192]	; (800526c <Vital_Msg_extr_from_CAN+0x394>)
 80051aa:	4613      	mov	r3, r2
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	4413      	add	r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	4403      	add	r3, r0
 80051b4:	3308      	adds	r3, #8
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	4833      	ldr	r0, [pc, #204]	; (8005288 <Vital_Msg_extr_from_CAN+0x3b0>)
 80051ba:	010b      	lsls	r3, r1, #4
 80051bc:	4403      	add	r3, r0
 80051be:	3308      	adds	r3, #8
 80051c0:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80051c2:	78bb      	ldrb	r3, [r7, #2]
 80051c4:	4a30      	ldr	r2, [pc, #192]	; (8005288 <Vital_Msg_extr_from_CAN+0x3b0>)
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	4413      	add	r3, r2
 80051ca:	3308      	adds	r3, #8
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4619      	mov	r1, r3
 80051d0:	482e      	ldr	r0, [pc, #184]	; (800528c <Vital_Msg_extr_from_CAN+0x3b4>)
 80051d2:	f021 fd0b 	bl	8026bec <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80051d6:	78bb      	ldrb	r3, [r7, #2]
 80051d8:	78ba      	ldrb	r2, [r7, #2]
 80051da:	492b      	ldr	r1, [pc, #172]	; (8005288 <Vital_Msg_extr_from_CAN+0x3b0>)
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	440b      	add	r3, r1
 80051e0:	3308      	adds	r3, #8
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	482a      	ldr	r0, [pc, #168]	; (8005290 <Vital_Msg_extr_from_CAN+0x3b8>)
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4403      	add	r3, r0
 80051f0:	3308      	adds	r3, #8
 80051f2:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 80051f4:	e055      	b.n	80052a2 <Vital_Msg_extr_from_CAN+0x3ca>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80051f6:	78bb      	ldrb	r3, [r7, #2]
 80051f8:	4a16      	ldr	r2, [pc, #88]	; (8005254 <Vital_Msg_extr_from_CAN+0x37c>)
 80051fa:	3366      	adds	r3, #102	; 0x66
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4619      	mov	r1, r3
 8005204:	4823      	ldr	r0, [pc, #140]	; (8005294 <Vital_Msg_extr_from_CAN+0x3bc>)
 8005206:	f021 fcf1 	bl	8026bec <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 800520a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800520e:	4822      	ldr	r0, [pc, #136]	; (8005298 <Vital_Msg_extr_from_CAN+0x3c0>)
 8005210:	f021 fcec 	bl	8026bec <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 8005214:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005218:	4820      	ldr	r0, [pc, #128]	; (800529c <Vital_Msg_extr_from_CAN+0x3c4>)
 800521a:	f021 fce7 	bl	8026bec <iprintf>
				return;
 800521e:	f000 bc58 	b.w	8005ad2 <Vital_Msg_extr_from_CAN+0xbfa>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005222:	78bb      	ldrb	r3, [r7, #2]
 8005224:	4a0b      	ldr	r2, [pc, #44]	; (8005254 <Vital_Msg_extr_from_CAN+0x37c>)
 8005226:	3366      	adds	r3, #102	; 0x66
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4619      	mov	r1, r3
 8005230:	4818      	ldr	r0, [pc, #96]	; (8005294 <Vital_Msg_extr_from_CAN+0x3bc>)
 8005232:	f021 fcdb 	bl	8026bec <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 8005236:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800523a:	4817      	ldr	r0, [pc, #92]	; (8005298 <Vital_Msg_extr_from_CAN+0x3c0>)
 800523c:	f021 fcd6 	bl	8026bec <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 8005240:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005244:	4815      	ldr	r0, [pc, #84]	; (800529c <Vital_Msg_extr_from_CAN+0x3c4>)
 8005246:	f021 fcd1 	bl	8026bec <iprintf>
			return;
 800524a:	f000 bc42 	b.w	8005ad2 <Vital_Msg_extr_from_CAN+0xbfa>
 800524e:	bf00      	nop
 8005250:	200030ac 	.word	0x200030ac
 8005254:	20000504 	.word	0x20000504
 8005258:	08028ed4 	.word	0x08028ed4
 800525c:	2000308c 	.word	0x2000308c
 8005260:	2000bcf8 	.word	0x2000bcf8
 8005264:	80008001 	.word	0x80008001
 8005268:	08028bf0 	.word	0x08028bf0
 800526c:	20002e94 	.word	0x20002e94
 8005270:	08028c10 	.word	0x08028c10
 8005274:	08028c38 	.word	0x08028c38
 8005278:	08028c60 	.word	0x08028c60
 800527c:	08028f18 	.word	0x08028f18
 8005280:	08028c94 	.word	0x08028c94
 8005284:	08028f3c 	.word	0x08028f3c
 8005288:	200028f4 	.word	0x200028f4
 800528c:	08028cd4 	.word	0x08028cd4
 8005290:	20002da4 	.word	0x20002da4
 8005294:	08028f58 	.word	0x08028f58
 8005298:	08028930 	.word	0x08028930
 800529c:	08028940 	.word	0x08028940
		}
	}
	ROLLOVER_VITAL_CAN:
 80052a0:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 80052a2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80052a6:	3308      	adds	r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	da00      	bge.n	80052ae <Vital_Msg_extr_from_CAN+0x3d6>
 80052ac:	3307      	adds	r3, #7
 80052ae:	10db      	asrs	r3, r3, #3
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80052b6:	4413      	add	r3, r2
 80052b8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80052bc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80052c0:	3308      	adds	r3, #8
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	b21b      	sxth	r3, r3
 80052c6:	425a      	negs	r2, r3
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	f002 0207 	and.w	r2, r2, #7
 80052d0:	bf58      	it	pl
 80052d2:	4253      	negpl	r3, r2
 80052d4:	b21b      	sxth	r3, r3
 80052d6:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80052da:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	441a      	add	r2, r3
 80052e2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80052e6:	2110      	movs	r1, #16
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fb f993 	bl	8000614 <ExtractBits>
 80052ee:	4603      	mov	r3, r0
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 80052f6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80052fa:	4619      	mov	r1, r3
 80052fc:	48c6      	ldr	r0, [pc, #792]	; (8005618 <Vital_Msg_extr_from_CAN+0x740>)
 80052fe:	f021 fc75 	bl	8026bec <iprintf>
	BITSTUFFINC(16);
 8005302:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005306:	3310      	adds	r3, #16
 8005308:	2b00      	cmp	r3, #0
 800530a:	da00      	bge.n	800530e <Vital_Msg_extr_from_CAN+0x436>
 800530c:	3307      	adds	r3, #7
 800530e:	10db      	asrs	r3, r3, #3
 8005310:	b29a      	uxth	r2, r3
 8005312:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005316:	4413      	add	r3, r2
 8005318:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800531c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005320:	3310      	adds	r3, #16
 8005322:	b29b      	uxth	r3, r3
 8005324:	b21b      	sxth	r3, r3
 8005326:	425a      	negs	r2, r3
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	f002 0207 	and.w	r2, r2, #7
 8005330:	bf58      	it	pl
 8005332:	4253      	negpl	r3, r2
 8005334:	b21b      	sxth	r3, r3
 8005336:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800533a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	441a      	add	r2, r3
 8005342:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005346:	2110      	movs	r1, #16
 8005348:	4618      	mov	r0, r3
 800534a:	f7fb f963 	bl	8000614 <ExtractBits>
 800534e:	4603      	mov	r3, r0
 8005350:	b29b      	uxth	r3, r3
 8005352:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 8005356:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800535a:	4619      	mov	r1, r3
 800535c:	48af      	ldr	r0, [pc, #700]	; (800561c <Vital_Msg_extr_from_CAN+0x744>)
 800535e:	f021 fc45 	bl	8026bec <iprintf>
	BITSTUFFINC(16);
 8005362:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005366:	3310      	adds	r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	da00      	bge.n	800536e <Vital_Msg_extr_from_CAN+0x496>
 800536c:	3307      	adds	r3, #7
 800536e:	10db      	asrs	r3, r3, #3
 8005370:	b29a      	uxth	r2, r3
 8005372:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005376:	4413      	add	r3, r2
 8005378:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800537c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005380:	3310      	adds	r3, #16
 8005382:	b29b      	uxth	r3, r3
 8005384:	b21b      	sxth	r3, r3
 8005386:	425a      	negs	r2, r3
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	f002 0207 	and.w	r2, r2, #7
 8005390:	bf58      	it	pl
 8005392:	4253      	negpl	r3, r2
 8005394:	b21b      	sxth	r3, r3
 8005396:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800539a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	441a      	add	r2, r3
 80053a2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80053a6:	2108      	movs	r1, #8
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fb f933 	bl	8000614 <ExtractBits>
 80053ae:	4603      	mov	r3, r0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 80053b6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80053ba:	3308      	adds	r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	da00      	bge.n	80053c2 <Vital_Msg_extr_from_CAN+0x4ea>
 80053c0:	3307      	adds	r3, #7
 80053c2:	10db      	asrs	r3, r3, #3
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80053ca:	4413      	add	r3, r2
 80053cc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80053d0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80053d4:	3308      	adds	r3, #8
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	b21b      	sxth	r3, r3
 80053da:	425a      	negs	r2, r3
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	f002 0207 	and.w	r2, r2, #7
 80053e4:	bf58      	it	pl
 80053e6:	4253      	negpl	r3, r2
 80053e8:	b21b      	sxth	r3, r3
 80053ea:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80053ee:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	441a      	add	r2, r3
 80053f6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80053fa:	2108      	movs	r1, #8
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fb f909 	bl	8000614 <ExtractBits>
 8005402:	4603      	mov	r3, r0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 800540a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800540e:	3308      	adds	r3, #8
 8005410:	2b00      	cmp	r3, #0
 8005412:	da00      	bge.n	8005416 <Vital_Msg_extr_from_CAN+0x53e>
 8005414:	3307      	adds	r3, #7
 8005416:	10db      	asrs	r3, r3, #3
 8005418:	b29a      	uxth	r2, r3
 800541a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800541e:	4413      	add	r3, r2
 8005420:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005424:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005428:	3308      	adds	r3, #8
 800542a:	b29b      	uxth	r3, r3
 800542c:	b21b      	sxth	r3, r3
 800542e:	425a      	negs	r2, r3
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	f002 0207 	and.w	r2, r2, #7
 8005438:	bf58      	it	pl
 800543a:	4253      	negpl	r3, r2
 800543c:	b21b      	sxth	r3, r3
 800543e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005442:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	441a      	add	r2, r3
 800544a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800544e:	2108      	movs	r1, #8
 8005450:	4618      	mov	r0, r3
 8005452:	f7fb f8df 	bl	8000614 <ExtractBits>
 8005456:	4603      	mov	r3, r0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//printf("Msg_Type           :%u\n",CAN_Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 800545e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005462:	3308      	adds	r3, #8
 8005464:	2b00      	cmp	r3, #0
 8005466:	da00      	bge.n	800546a <Vital_Msg_extr_from_CAN+0x592>
 8005468:	3307      	adds	r3, #7
 800546a:	10db      	asrs	r3, r3, #3
 800546c:	b29a      	uxth	r2, r3
 800546e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005472:	4413      	add	r3, r2
 8005474:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005478:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800547c:	3308      	adds	r3, #8
 800547e:	b29b      	uxth	r3, r3
 8005480:	b21b      	sxth	r3, r3
 8005482:	425a      	negs	r2, r3
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	f002 0207 	and.w	r2, r2, #7
 800548c:	bf58      	it	pl
 800548e:	4253      	negpl	r3, r2
 8005490:	b21b      	sxth	r3, r3
 8005492:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005496:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	441a      	add	r2, r3
 800549e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80054a2:	2110      	movs	r1, #16
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fb f8b5 	bl	8000614 <ExtractBits>
 80054aa:	4603      	mov	r3, r0
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	853b      	strh	r3, [r7, #40]	; 0x28
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 80054b0:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80054b4:	3310      	adds	r3, #16
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	da00      	bge.n	80054bc <Vital_Msg_extr_from_CAN+0x5e4>
 80054ba:	3307      	adds	r3, #7
 80054bc:	10db      	asrs	r3, r3, #3
 80054be:	b29a      	uxth	r2, r3
 80054c0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80054c4:	4413      	add	r3, r2
 80054c6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80054ca:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80054ce:	3310      	adds	r3, #16
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	b21b      	sxth	r3, r3
 80054d4:	425a      	negs	r2, r3
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	f002 0207 	and.w	r2, r2, #7
 80054de:	bf58      	it	pl
 80054e0:	4253      	negpl	r3, r2
 80054e2:	b21b      	sxth	r3, r3
 80054e4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 80054e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 80fe 	beq.w	80056f0 <Vital_Msg_extr_from_CAN+0x818>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80054f4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	441a      	add	r2, r3
 80054fc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005500:	2108      	movs	r1, #8
 8005502:	4618      	mov	r0, r3
 8005504:	f7fb f886 	bl	8000614 <ExtractBits>
 8005508:	4603      	mov	r3, r0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 8005510:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005514:	3308      	adds	r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	da00      	bge.n	800551c <Vital_Msg_extr_from_CAN+0x644>
 800551a:	3307      	adds	r3, #7
 800551c:	10db      	asrs	r3, r3, #3
 800551e:	b29a      	uxth	r2, r3
 8005520:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005524:	4413      	add	r3, r2
 8005526:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800552a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800552e:	3308      	adds	r3, #8
 8005530:	b29b      	uxth	r3, r3
 8005532:	b21b      	sxth	r3, r3
 8005534:	425a      	negs	r2, r3
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	f002 0207 	and.w	r2, r2, #7
 800553e:	bf58      	it	pl
 8005540:	4253      	negpl	r3, r2
 8005542:	b21b      	sxth	r3, r3
 8005544:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005548:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	441a      	add	r2, r3
 8005550:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005554:	2108      	movs	r1, #8
 8005556:	4618      	mov	r0, r3
 8005558:	f7fb f85c 	bl	8000614 <ExtractBits>
 800555c:	4603      	mov	r3, r0
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 8005564:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005568:	3308      	adds	r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	da00      	bge.n	8005570 <Vital_Msg_extr_from_CAN+0x698>
 800556e:	3307      	adds	r3, #7
 8005570:	10db      	asrs	r3, r3, #3
 8005572:	b29a      	uxth	r2, r3
 8005574:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005578:	4413      	add	r3, r2
 800557a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800557e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005582:	3308      	adds	r3, #8
 8005584:	b29b      	uxth	r3, r3
 8005586:	b21b      	sxth	r3, r3
 8005588:	425a      	negs	r2, r3
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	f002 0207 	and.w	r2, r2, #7
 8005592:	bf58      	it	pl
 8005594:	4253      	negpl	r3, r2
 8005596:	b21b      	sxth	r3, r3
 8005598:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800559c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	441a      	add	r2, r3
 80055a4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80055a8:	2108      	movs	r1, #8
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fb f832 	bl	8000614 <ExtractBits>
 80055b0:	4603      	mov	r3, r0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	77fb      	strb	r3, [r7, #31]
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 80055b6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80055ba:	3308      	adds	r3, #8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	da00      	bge.n	80055c2 <Vital_Msg_extr_from_CAN+0x6ea>
 80055c0:	3307      	adds	r3, #7
 80055c2:	10db      	asrs	r3, r3, #3
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80055ca:	4413      	add	r3, r2
 80055cc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80055d0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80055d4:	3308      	adds	r3, #8
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	b21b      	sxth	r3, r3
 80055da:	425a      	negs	r2, r3
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	f002 0207 	and.w	r2, r2, #7
 80055e4:	bf58      	it	pl
 80055e6:	4253      	negpl	r3, r2
 80055e8:	b21b      	sxth	r3, r3
 80055ea:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80055ee:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	441a      	add	r2, r3
 80055f6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80055fa:	2108      	movs	r1, #8
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fb f809 	bl	8000614 <ExtractBits>
 8005602:	4603      	mov	r3, r0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	773b      	strb	r3, [r7, #28]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 8005608:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800560c:	3308      	adds	r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	da06      	bge.n	8005620 <Vital_Msg_extr_from_CAN+0x748>
 8005612:	3307      	adds	r3, #7
 8005614:	e004      	b.n	8005620 <Vital_Msg_extr_from_CAN+0x748>
 8005616:	bf00      	nop
 8005618:	08028a20 	.word	0x08028a20
 800561c:	08028a28 	.word	0x08028a28
 8005620:	10db      	asrs	r3, r3, #3
 8005622:	b29a      	uxth	r2, r3
 8005624:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005628:	4413      	add	r3, r2
 800562a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800562e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005632:	3308      	adds	r3, #8
 8005634:	b29b      	uxth	r3, r3
 8005636:	b21b      	sxth	r3, r3
 8005638:	425a      	negs	r2, r3
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	f002 0207 	and.w	r2, r2, #7
 8005642:	bf58      	it	pl
 8005644:	4253      	negpl	r3, r2
 8005646:	b21b      	sxth	r3, r3
 8005648:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800564c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	441a      	add	r2, r3
 8005654:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005658:	2108      	movs	r1, #8
 800565a:	4618      	mov	r0, r3
 800565c:	f7fa ffda 	bl	8000614 <ExtractBits>
 8005660:	4603      	mov	r3, r0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	777b      	strb	r3, [r7, #29]
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 8005666:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800566a:	3308      	adds	r3, #8
 800566c:	2b00      	cmp	r3, #0
 800566e:	da00      	bge.n	8005672 <Vital_Msg_extr_from_CAN+0x79a>
 8005670:	3307      	adds	r3, #7
 8005672:	10db      	asrs	r3, r3, #3
 8005674:	b29a      	uxth	r2, r3
 8005676:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800567a:	4413      	add	r3, r2
 800567c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005680:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005684:	3308      	adds	r3, #8
 8005686:	b29b      	uxth	r3, r3
 8005688:	b21b      	sxth	r3, r3
 800568a:	425a      	negs	r2, r3
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	f002 0207 	and.w	r2, r2, #7
 8005694:	bf58      	it	pl
 8005696:	4253      	negpl	r3, r2
 8005698:	b21b      	sxth	r3, r3
 800569a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800569e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	441a      	add	r2, r3
 80056a6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80056aa:	2108      	movs	r1, #8
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fa ffb1 	bl	8000614 <ExtractBits>
 80056b2:	4603      	mov	r3, r0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	77bb      	strb	r3, [r7, #30]
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 80056b8:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80056bc:	3308      	adds	r3, #8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	da00      	bge.n	80056c4 <Vital_Msg_extr_from_CAN+0x7ec>
 80056c2:	3307      	adds	r3, #7
 80056c4:	10db      	asrs	r3, r3, #3
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80056cc:	4413      	add	r3, r2
 80056ce:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80056d2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80056d6:	3308      	adds	r3, #8
 80056d8:	b29b      	uxth	r3, r3
 80056da:	b21b      	sxth	r3, r3
 80056dc:	425a      	negs	r2, r3
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	f002 0207 	and.w	r2, r2, #7
 80056e6:	bf58      	it	pl
 80056e8:	4253      	negpl	r3, r2
 80056ea:	b21b      	sxth	r3, r3
 80056ec:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 80056f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <Vital_Msg_extr_from_CAN+0x828>
	{
		LinkEstablishFlag = SET;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005700:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	441a      	add	r2, r3
 8005708:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800570c:	2108      	movs	r1, #8
 800570e:	4618      	mov	r0, r3
 8005710:	f7fa ff80 	bl	8000614 <ExtractBits>
 8005714:	4603      	mov	r3, r0
 8005716:	b2db      	uxtb	r3, r3
 8005718:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BITSTUFFINC(8);
 800571c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005720:	3308      	adds	r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	da00      	bge.n	8005728 <Vital_Msg_extr_from_CAN+0x850>
 8005726:	3307      	adds	r3, #7
 8005728:	10db      	asrs	r3, r3, #3
 800572a:	b29a      	uxth	r2, r3
 800572c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005730:	4413      	add	r3, r2
 8005732:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005736:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800573a:	3308      	adds	r3, #8
 800573c:	b29b      	uxth	r3, r3
 800573e:	b21b      	sxth	r3, r3
 8005740:	425a      	negs	r2, r3
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	f002 0207 	and.w	r2, r2, #7
 800574a:	bf58      	it	pl
 800574c:	4253      	negpl	r3, r2
 800574e:	b21b      	sxth	r3, r3
 8005750:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 8005754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005758:	4619      	mov	r1, r3
 800575a:	484b      	ldr	r0, [pc, #300]	; (8005888 <Vital_Msg_extr_from_CAN+0x9b0>)
 800575c:	f021 fa46 	bl	8026bec <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005760:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	441a      	add	r2, r3
 8005768:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800576c:	2108      	movs	r1, #8
 800576e:	4618      	mov	r0, r3
 8005770:	f7fa ff50 	bl	8000614 <ExtractBits>
 8005774:	4603      	mov	r3, r0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BITSTUFFINC(8);
 800577c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005780:	3308      	adds	r3, #8
 8005782:	2b00      	cmp	r3, #0
 8005784:	da00      	bge.n	8005788 <Vital_Msg_extr_from_CAN+0x8b0>
 8005786:	3307      	adds	r3, #7
 8005788:	10db      	asrs	r3, r3, #3
 800578a:	b29a      	uxth	r2, r3
 800578c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005790:	4413      	add	r3, r2
 8005792:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005796:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800579a:	3308      	adds	r3, #8
 800579c:	b29b      	uxth	r3, r3
 800579e:	b21b      	sxth	r3, r3
 80057a0:	425a      	negs	r2, r3
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	f002 0207 	and.w	r2, r2, #7
 80057aa:	bf58      	it	pl
 80057ac:	4253      	negpl	r3, r2
 80057ae:	b21b      	sxth	r3, r3
 80057b0:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 80057b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	if (noofIP != 0)
 80057c0:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <Vital_Msg_extr_from_CAN+0x900>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 80057c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057cc:	08db      	lsrs	r3, r3, #3
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	3301      	adds	r3, #1
 80057d2:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 80057d6:	e004      	b.n	80057e2 <Vital_Msg_extr_from_CAN+0x90a>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 80057d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057dc:	08db      	lsrs	r3, r3, #3
 80057de:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80057e8:	e040      	b.n	800586c <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80057ea:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	441a      	add	r2, r3
 80057f2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80057f6:	2108      	movs	r1, #8
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fa ff0b 	bl	8000614 <ExtractBits>
 80057fe:	4602      	mov	r2, r0
 8005800:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800580a:	443b      	add	r3, r7
 800580c:	f803 2cc7 	strb.w	r2, [r3, #-199]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 8005810:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 8005814:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005818:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800581c:	443b      	add	r3, r7
 800581e:	f813 3cc7 	ldrb.w	r3, [r3, #-199]
 8005822:	461a      	mov	r2, r3
 8005824:	4819      	ldr	r0, [pc, #100]	; (800588c <Vital_Msg_extr_from_CAN+0x9b4>)
 8005826:	f021 f9e1 	bl	8026bec <iprintf>
		BITSTUFFINC(8);
 800582a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800582e:	3308      	adds	r3, #8
 8005830:	2b00      	cmp	r3, #0
 8005832:	da00      	bge.n	8005836 <Vital_Msg_extr_from_CAN+0x95e>
 8005834:	3307      	adds	r3, #7
 8005836:	10db      	asrs	r3, r3, #3
 8005838:	b29a      	uxth	r2, r3
 800583a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800583e:	4413      	add	r3, r2
 8005840:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005844:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005848:	3308      	adds	r3, #8
 800584a:	b29b      	uxth	r3, r3
 800584c:	b21b      	sxth	r3, r3
 800584e:	425a      	negs	r2, r3
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	f002 0207 	and.w	r2, r2, #7
 8005858:	bf58      	it	pl
 800585a:	4253      	negpl	r3, r2
 800585c:	b21b      	sxth	r3, r3
 800585e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8005862:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005866:	3301      	adds	r3, #1
 8005868:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 800586c:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005870:	b29b      	uxth	r3, r3
 8005872:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8005876:	429a      	cmp	r2, r3
 8005878:	d3b7      	bcc.n	80057ea <Vital_Msg_extr_from_CAN+0x912>
	}
	printf("\n");
 800587a:	200a      	movs	r0, #10
 800587c:	f021 f9ce 	bl	8026c1c <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8005880:	2300      	movs	r3, #0
 8005882:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005886:	e037      	b.n	80058f8 <Vital_Msg_extr_from_CAN+0xa20>
 8005888:	08028f74 	.word	0x08028f74
 800588c:	08028f7c 	.word	0x08028f7c
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005890:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	441a      	add	r2, r3
 8005898:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800589c:	2108      	movs	r1, #8
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fa feb8 	bl	8000614 <ExtractBits>
 80058a4:	4602      	mov	r2, r0
 80058a6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80058b0:	443b      	add	r3, r7
 80058b2:	f803 2cb7 	strb.w	r2, [r3, #-183]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 80058b6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80058ba:	3308      	adds	r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da00      	bge.n	80058c2 <Vital_Msg_extr_from_CAN+0x9ea>
 80058c0:	3307      	adds	r3, #7
 80058c2:	10db      	asrs	r3, r3, #3
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80058ca:	4413      	add	r3, r2
 80058cc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80058d0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80058d4:	3308      	adds	r3, #8
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	b21b      	sxth	r3, r3
 80058da:	425a      	negs	r2, r3
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	f002 0207 	and.w	r2, r2, #7
 80058e4:	bf58      	it	pl
 80058e6:	4253      	negpl	r3, r2
 80058e8:	b21b      	sxth	r3, r3
 80058ea:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 80058ee:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80058f2:	3301      	adds	r3, #1
 80058f4:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80058f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8005902:	429a      	cmp	r2, r3
 8005904:	d3c4      	bcc.n	8005890 <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 8005906:	f107 0308 	add.w	r3, r7, #8
 800590a:	3301      	adds	r3, #1
 800590c:	2210      	movs	r2, #16
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f021 f883 	bl	8026a1c <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 8005916:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 800591a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800591e:	1d59      	adds	r1, r3, #5
 8005920:	f107 0308 	add.w	r3, r7, #8
 8005924:	3301      	adds	r3, #1
 8005926:	4618      	mov	r0, r3
 8005928:	f021 f850 	bl	80269cc <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 800592c:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005930:	b21a      	sxth	r2, r3
 8005932:	f107 0308 	add.w	r3, r7, #8
 8005936:	3301      	adds	r3, #1
 8005938:	4619      	mov	r1, r3
 800593a:	2000      	movs	r0, #0
 800593c:	f010 fb04 	bl	8015f48 <GetCRC16>
 8005940:	4603      	mov	r3, r0
 8005942:	837b      	strh	r3, [r7, #26]
	CAN_Relay_st.No_ofIps = noofIP;
 8005944:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005948:	767b      	strb	r3, [r7, #25]
	CAN_Relay_st.Peer_Index = Source_Index;
 800594a:	78bb      	ldrb	r3, [r7, #2]
 800594c:	723b      	strb	r3, [r7, #8]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 800594e:	78bb      	ldrb	r3, [r7, #2]
 8005950:	4a62      	ldr	r2, [pc, #392]	; (8005adc <Vital_Msg_extr_from_CAN+0xc04>)
 8005952:	4413      	add	r3, r2
 8005954:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005958:	2b01      	cmp	r3, #1
 800595a:	f040 8082 	bne.w	8005a62 <Vital_Msg_extr_from_CAN+0xb8a>
 800595e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8005962:	2b01      	cmp	r3, #1
 8005964:	d17d      	bne.n	8005a62 <Vital_Msg_extr_from_CAN+0xb8a>
 8005966:	8b79      	ldrh	r1, [r7, #26]
 8005968:	78ba      	ldrb	r2, [r7, #2]
 800596a:	485d      	ldr	r0, [pc, #372]	; (8005ae0 <Vital_Msg_extr_from_CAN+0xc08>)
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4403      	add	r3, r0
 8005976:	3312      	adds	r3, #18
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	4299      	cmp	r1, r3
 800597c:	d071      	beq.n	8005a62 <Vital_Msg_extr_from_CAN+0xb8a>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800597e:	78ba      	ldrb	r2, [r7, #2]
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4a55      	ldr	r2, [pc, #340]	; (8005ae0 <Vital_Msg_extr_from_CAN+0xc08>)
 800598a:	4413      	add	r3, r2
 800598c:	3301      	adds	r3, #1
 800598e:	2210      	movs	r2, #16
 8005990:	2100      	movs	r1, #0
 8005992:	4618      	mov	r0, r3
 8005994:	f021 f842 	bl	8026a1c <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 8005998:	78ba      	ldrb	r2, [r7, #2]
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4a4f      	ldr	r2, [pc, #316]	; (8005ae0 <Vital_Msg_extr_from_CAN+0xc08>)
 80059a4:	4413      	add	r3, r2
 80059a6:	f107 0108 	add.w	r1, r7, #8
 80059aa:	2214      	movs	r2, #20
 80059ac:	4618      	mov	r0, r3
 80059ae:	f021 f80d 	bl	80269cc <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 80059b2:	78bb      	ldrb	r3, [r7, #2]
 80059b4:	494b      	ldr	r1, [pc, #300]	; (8005ae4 <Vital_Msg_extr_from_CAN+0xc0c>)
 80059b6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80059ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 80059be:	78bb      	ldrb	r3, [r7, #2]
 80059c0:	4a49      	ldr	r2, [pc, #292]	; (8005ae8 <Vital_Msg_extr_from_CAN+0xc10>)
 80059c2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80059c6:	78ba      	ldrb	r2, [r7, #2]
 80059c8:	4845      	ldr	r0, [pc, #276]	; (8005ae0 <Vital_Msg_extr_from_CAN+0xc08>)
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4403      	add	r3, r0
 80059d4:	3312      	adds	r3, #18
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	4299      	cmp	r1, r3
 80059da:	d042      	beq.n	8005a62 <Vital_Msg_extr_from_CAN+0xb8a>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80059dc:	78ba      	ldrb	r2, [r7, #2]
 80059de:	78b9      	ldrb	r1, [r7, #2]
 80059e0:	483f      	ldr	r0, [pc, #252]	; (8005ae0 <Vital_Msg_extr_from_CAN+0xc08>)
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4403      	add	r3, r0
 80059ec:	3312      	adds	r3, #18
 80059ee:	881a      	ldrh	r2, [r3, #0]
 80059f0:	4b3d      	ldr	r3, [pc, #244]	; (8005ae8 <Vital_Msg_extr_from_CAN+0xc10>)
 80059f2:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 80059f6:	2214      	movs	r2, #20
 80059f8:	2100      	movs	r1, #0
 80059fa:	483c      	ldr	r0, [pc, #240]	; (8005aec <Vital_Msg_extr_from_CAN+0xc14>)
 80059fc:	f021 f80e 	bl	8026a1c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005a00:	78ba      	ldrb	r2, [r7, #2]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4a35      	ldr	r2, [pc, #212]	; (8005ae0 <Vital_Msg_extr_from_CAN+0xc08>)
 8005a0c:	4413      	add	r3, r2
 8005a0e:	2214      	movs	r2, #20
 8005a10:	4619      	mov	r1, r3
 8005a12:	4836      	ldr	r0, [pc, #216]	; (8005aec <Vital_Msg_extr_from_CAN+0xc14>)
 8005a14:	f020 ffda 	bl	80269cc <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8005a18:	f240 2007 	movw	r0, #519	; 0x207
 8005a1c:	f00b fb72 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == RESET)
 8005a20:	78bb      	ldrb	r3, [r7, #2]
 8005a22:	4a33      	ldr	r2, [pc, #204]	; (8005af0 <Vital_Msg_extr_from_CAN+0xc18>)
 8005a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d11a      	bne.n	8005a62 <Vital_Msg_extr_from_CAN+0xb8a>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005a2c:	78bb      	ldrb	r3, [r7, #2]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	4a30      	ldr	r2, [pc, #192]	; (8005af4 <Vital_Msg_extr_from_CAN+0xc1c>)
 8005a32:	4413      	add	r3, r2
 8005a34:	1c98      	adds	r0, r3, #2
 8005a36:	78ba      	ldrb	r2, [r7, #2]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4a27      	ldr	r2, [pc, #156]	; (8005ae0 <Vital_Msg_extr_from_CAN+0xc08>)
 8005a42:	4413      	add	r3, r2
 8005a44:	3301      	adds	r3, #1
 8005a46:	2210      	movs	r2, #16
 8005a48:	4619      	mov	r1, r3
 8005a4a:	f020 ffbf 	bl	80269cc <memcpy>
#if ENABLE_SIGNAL_PRINT
				PrintSignalsHitachi();
#endif

#ifdef EI_1
				ReArrangedVitalData();
 8005a4e:	f004 fe1d 	bl	800a68c <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 8005a52:	f240 1019 	movw	r0, #281	; 0x119
 8005a56:	f00b fb55 	bl	8011104 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8005a5a:	4a27      	ldr	r2, [pc, #156]	; (8005af8 <Vital_Msg_extr_from_CAN+0xc20>)
 8005a5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a60:	6013      	str	r3, [r2, #0]





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005a62:	78ba      	ldrb	r2, [r7, #2]
 8005a64:	4925      	ldr	r1, [pc, #148]	; (8005afc <Vital_Msg_extr_from_CAN+0xc24>)
 8005a66:	4613      	mov	r3, r2
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	4413      	add	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	440b      	add	r3, r1
 8005a70:	78ba      	ldrb	r2, [r7, #2]
 8005a72:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005a74:	78ba      	ldrb	r2, [r7, #2]
 8005a76:	4921      	ldr	r1, [pc, #132]	; (8005afc <Vital_Msg_extr_from_CAN+0xc24>)
 8005a78:	4613      	mov	r3, r2
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	4413      	add	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	440b      	add	r3, r1
 8005a82:	3301      	adds	r3, #1
 8005a84:	2201      	movs	r2, #1
 8005a86:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005a88:	2218      	movs	r2, #24
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	481c      	ldr	r0, [pc, #112]	; (8005b00 <Vital_Msg_extr_from_CAN+0xc28>)
 8005a8e:	f020 ffc5 	bl	8026a1c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005a92:	78ba      	ldrb	r2, [r7, #2]
 8005a94:	4613      	mov	r3, r2
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	4413      	add	r3, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	4a17      	ldr	r2, [pc, #92]	; (8005afc <Vital_Msg_extr_from_CAN+0xc24>)
 8005a9e:	4413      	add	r3, r2
 8005aa0:	2218      	movs	r2, #24
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4816      	ldr	r0, [pc, #88]	; (8005b00 <Vital_Msg_extr_from_CAN+0xc28>)
 8005aa6:	f020 ff91 	bl	80269cc <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8005aaa:	f240 2001 	movw	r0, #513	; 0x201
 8005aae:	f00b fb29 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005ab2:	78ba      	ldrb	r2, [r7, #2]
 8005ab4:	4911      	ldr	r1, [pc, #68]	; (8005afc <Vital_Msg_extr_from_CAN+0xc24>)
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	440b      	add	r3, r1
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005ac6:	78bb      	ldrb	r3, [r7, #2]
 8005ac8:	490e      	ldr	r1, [pc, #56]	; (8005b04 <Vital_Msg_extr_from_CAN+0xc2c>)
 8005aca:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 8005ad2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000504 	.word	0x20000504
 8005ae0:	200035b0 	.word	0x200035b0
 8005ae4:	20002564 	.word	0x20002564
 8005ae8:	2000258c 	.word	0x2000258c
 8005aec:	20003740 	.word	0x20003740
 8005af0:	20002550 	.word	0x20002550
 8005af4:	20002770 	.word	0x20002770
 8005af8:	200024e4 	.word	0x200024e4
 8005afc:	20002da4 	.word	0x20002da4
 8005b00:	20002f84 	.word	0x20002f84
 8005b04:	200024b8 	.word	0x200024b8

08005b08 <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b095      	sub	sp, #84	; 0x54
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	4608      	mov	r0, r1
 8005b12:	4611      	mov	r1, r2
 8005b14:	461a      	mov	r2, r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	70fb      	strb	r3, [r7, #3]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	70bb      	strb	r3, [r7, #2]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 8005b22:	2300      	movs	r3, #0
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	f107 030c 	add.w	r3, r7, #12
 8005b2a:	2224      	movs	r2, #36	; 0x24
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f020 ff74 	bl	8026a1c <memset>
	uint8_t uc_index = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = RESET;
 8005b42:	2300      	movs	r3, #0
 8005b44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 8005b48:	f014 f846 	bl	8019bd8 <HAL_GetTick>
 8005b4c:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 8005b54:	2300      	movs	r3, #0
 8005b56:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b58:	2300      	movs	r3, #0
 8005b5a:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8005b5c:	499a      	ldr	r1, [pc, #616]	; (8005dc8 <Status_Msg_Extr+0x2c0>)
 8005b5e:	489b      	ldr	r0, [pc, #620]	; (8005dcc <Status_Msg_Extr+0x2c4>)
 8005b60:	f7fa fb6e 	bl	8000240 <strcmp>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 812c 	beq.w	8005dc4 <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005b6c:	4b98      	ldr	r3, [pc, #608]	; (8005dd0 <Status_Msg_Extr+0x2c8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d02c      	beq.n	8005bd2 <Status_Msg_Extr+0xca>
 8005b78:	4b95      	ldr	r3, [pc, #596]	; (8005dd0 <Status_Msg_Extr+0x2c8>)
 8005b7a:	791b      	ldrb	r3, [r3, #4]
 8005b7c:	78ba      	ldrb	r2, [r7, #2]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d127      	bne.n	8005bd2 <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 8005b86:	4893      	ldr	r0, [pc, #588]	; (8005dd4 <Status_Msg_Extr+0x2cc>)
 8005b88:	f018 fcd8 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	4b92      	ldr	r3, [pc, #584]	; (8005dd8 <Status_Msg_Extr+0x2d0>)
 8005b90:	fba3 1302 	umull	r1, r3, r3, r2
 8005b94:	0bd9      	lsrs	r1, r3, #15
 8005b96:	460b      	mov	r3, r1
 8005b98:	041b      	lsls	r3, r3, #16
 8005b9a:	1a5b      	subs	r3, r3, r1
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 8005ba0:	488e      	ldr	r0, [pc, #568]	; (8005ddc <Status_Msg_Extr+0x2d4>)
 8005ba2:	f021 f8bf 	bl	8026d24 <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005ba6:	78bb      	ldrb	r3, [r7, #2]
 8005ba8:	4a8d      	ldr	r2, [pc, #564]	; (8005de0 <Status_Msg_Extr+0x2d8>)
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	4413      	add	r3, r2
 8005bae:	3308      	adds	r3, #8
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	488b      	ldr	r0, [pc, #556]	; (8005de4 <Status_Msg_Extr+0x2dc>)
 8005bb6:	f021 f819 	bl	8026bec <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8005bba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bbc:	488a      	ldr	r0, [pc, #552]	; (8005de8 <Status_Msg_Extr+0x2e0>)
 8005bbe:	f021 f815 	bl	8026bec <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 8005bc2:	f107 0208 	add.w	r2, r7, #8
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	2118      	movs	r1, #24
 8005bca:	2000      	movs	r0, #0
 8005bcc:	f7fa fdae 	bl	800072c <InsertBits>
	{
 8005bd0:	e00b      	b.n	8005bea <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005bd2:	78bb      	ldrb	r3, [r7, #2]
 8005bd4:	4a82      	ldr	r2, [pc, #520]	; (8005de0 <Status_Msg_Extr+0x2d8>)
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	4413      	add	r3, r2
 8005bda:	3308      	adds	r3, #8
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f107 0208 	add.w	r2, r7, #8
 8005be2:	2118      	movs	r1, #24
 8005be4:	2000      	movs	r0, #0
 8005be6:	f7fa fda1 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005bea:	2300      	movs	r3, #0
 8005bec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005bf0:	e010      	b.n	8005c14 <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005bf2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	441a      	add	r2, r3
 8005bfa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bfe:	3303      	adds	r3, #3
 8005c00:	7812      	ldrb	r2, [r2, #0]
 8005c02:	3350      	adds	r3, #80	; 0x50
 8005c04:	443b      	add	r3, r7
 8005c06:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005c0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c0e:	3301      	adds	r3, #1
 8005c10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005c14:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	3b05      	subs	r3, #5
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	dbe8      	blt.n	8005bf2 <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005c20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3303      	adds	r3, #3
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	f107 0308 	add.w	r3, r7, #8
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f010 fa43 	bl	80160bc <CalculateDirectReverseCrc>
 8005c36:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	3b05      	subs	r3, #5
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	441a      	add	r2, r3
 8005c40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c42:	2120      	movs	r1, #32
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fa fce5 	bl	8000614 <ExtractBits>
 8005c4a:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 8005c4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c50:	429a      	cmp	r2, r3
 8005c52:	f000 80df 	beq.w	8005e14 <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3305      	adds	r3, #5
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	2108      	movs	r1, #8
 8005c5e:	2000      	movs	r0, #0
 8005c60:	f7fa fcd8 	bl	8000614 <ExtractBits>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 8005c6a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d004      	beq.n	8005c7c <Status_Msg_Extr+0x174>
 8005c72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	f040 8090 	bne.w	8005d9c <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005c7c:	78bb      	ldrb	r3, [r7, #2]
 8005c7e:	4a5b      	ldr	r2, [pc, #364]	; (8005dec <Status_Msg_Extr+0x2e4>)
 8005c80:	3366      	adds	r3, #102	; 0x66
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4859      	ldr	r0, [pc, #356]	; (8005df0 <Status_Msg_Extr+0x2e8>)
 8005c8c:	f020 ffae 	bl	8026bec <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 8005c90:	f107 0308 	add.w	r3, r7, #8
 8005c94:	2228      	movs	r2, #40	; 0x28
 8005c96:	2100      	movs	r1, #0
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f020 febf 	bl	8026a1c <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8005c9e:	78bb      	ldrb	r3, [r7, #2]
 8005ca0:	4a4f      	ldr	r2, [pc, #316]	; (8005de0 <Status_Msg_Extr+0x2d8>)
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	4413      	add	r3, r2
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3301      	adds	r3, #1
 8005cac:	f107 0208 	add.w	r2, r7, #8
 8005cb0:	2118      	movs	r1, #24
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	f7fa fd3a 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005cbe:	e010      	b.n	8005ce2 <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005cc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	441a      	add	r2, r3
 8005cc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ccc:	3303      	adds	r3, #3
 8005cce:	7812      	ldrb	r2, [r2, #0]
 8005cd0:	3350      	adds	r3, #80	; 0x50
 8005cd2:	443b      	add	r3, r7
 8005cd4:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005cd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005ce2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005ce6:	78fb      	ldrb	r3, [r7, #3]
 8005ce8:	3b05      	subs	r3, #5
 8005cea:	429a      	cmp	r2, r3
 8005cec:	dbe8      	blt.n	8005cc0 <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005cee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3303      	adds	r3, #3
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	f107 0308 	add.w	r3, r7, #8
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f010 f9dc 	bl	80160bc <CalculateDirectReverseCrc>
 8005d04:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 8005d06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d132      	bne.n	8005d74 <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8005d0e:	4839      	ldr	r0, [pc, #228]	; (8005df4 <Status_Msg_Extr+0x2ec>)
 8005d10:	f021 f808 	bl	8026d24 <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005d14:	78bb      	ldrb	r3, [r7, #2]
 8005d16:	4a32      	ldr	r2, [pc, #200]	; (8005de0 <Status_Msg_Extr+0x2d8>)
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4619      	mov	r1, r3
 8005d22:	4835      	ldr	r0, [pc, #212]	; (8005df8 <Status_Msg_Extr+0x2f0>)
 8005d24:	f020 ff62 	bl	8026bec <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005d28:	78bb      	ldrb	r3, [r7, #2]
 8005d2a:	492d      	ldr	r1, [pc, #180]	; (8005de0 <Status_Msg_Extr+0x2d8>)
 8005d2c:	011a      	lsls	r2, r3, #4
 8005d2e:	440a      	add	r2, r1
 8005d30:	3208      	adds	r2, #8
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	3201      	adds	r2, #1
 8005d36:	492a      	ldr	r1, [pc, #168]	; (8005de0 <Status_Msg_Extr+0x2d8>)
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	440b      	add	r3, r1
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005d40:	78bb      	ldrb	r3, [r7, #2]
 8005d42:	4a27      	ldr	r2, [pc, #156]	; (8005de0 <Status_Msg_Extr+0x2d8>)
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	4413      	add	r3, r2
 8005d48:	3308      	adds	r3, #8
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	482b      	ldr	r0, [pc, #172]	; (8005dfc <Status_Msg_Extr+0x2f4>)
 8005d50:	f020 ff4c 	bl	8026bec <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005d54:	78bb      	ldrb	r3, [r7, #2]
 8005d56:	78ba      	ldrb	r2, [r7, #2]
 8005d58:	4921      	ldr	r1, [pc, #132]	; (8005de0 <Status_Msg_Extr+0x2d8>)
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	440b      	add	r3, r1
 8005d5e:	3308      	adds	r3, #8
 8005d60:	6819      	ldr	r1, [r3, #0]
 8005d62:	4827      	ldr	r0, [pc, #156]	; (8005e00 <Status_Msg_Extr+0x2f8>)
 8005d64:	4613      	mov	r3, r2
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	4413      	add	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4403      	add	r3, r0
 8005d6e:	3308      	adds	r3, #8
 8005d70:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 8005d72:	e050      	b.n	8005e16 <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005d74:	78bb      	ldrb	r3, [r7, #2]
 8005d76:	4a1d      	ldr	r2, [pc, #116]	; (8005dec <Status_Msg_Extr+0x2e4>)
 8005d78:	3366      	adds	r3, #102	; 0x66
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	4619      	mov	r1, r3
 8005d82:	4820      	ldr	r0, [pc, #128]	; (8005e04 <Status_Msg_Extr+0x2fc>)
 8005d84:	f020 ff32 	bl	8026bec <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005d88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005d8a:	481f      	ldr	r0, [pc, #124]	; (8005e08 <Status_Msg_Extr+0x300>)
 8005d8c:	f020 ff2e 	bl	8026bec <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005d90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d92:	481e      	ldr	r0, [pc, #120]	; (8005e0c <Status_Msg_Extr+0x304>)
 8005d94:	f020 ff2a 	bl	8026bec <iprintf>
				return;
 8005d98:	f000 bca7 	b.w	80066ea <Status_Msg_Extr+0xbe2>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005d9c:	78bb      	ldrb	r3, [r7, #2]
 8005d9e:	4a13      	ldr	r2, [pc, #76]	; (8005dec <Status_Msg_Extr+0x2e4>)
 8005da0:	3366      	adds	r3, #102	; 0x66
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	4619      	mov	r1, r3
 8005daa:	4819      	ldr	r0, [pc, #100]	; (8005e10 <Status_Msg_Extr+0x308>)
 8005dac:	f020 ff1e 	bl	8026bec <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005db0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005db2:	4815      	ldr	r0, [pc, #84]	; (8005e08 <Status_Msg_Extr+0x300>)
 8005db4:	f020 ff1a 	bl	8026bec <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005db8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dba:	4814      	ldr	r0, [pc, #80]	; (8005e0c <Status_Msg_Extr+0x304>)
 8005dbc:	f020 ff16 	bl	8026bec <iprintf>
			return;
 8005dc0:	f000 bc93 	b.w	80066ea <Status_Msg_Extr+0xbe2>
		goto ROLLOVER_STATUS;
 8005dc4:	bf00      	nop
 8005dc6:	e026      	b.n	8005e16 <Status_Msg_Extr+0x30e>
 8005dc8:	080286ec 	.word	0x080286ec
 8005dcc:	20000505 	.word	0x20000505
 8005dd0:	2000308c 	.word	0x2000308c
 8005dd4:	2000bcf8 	.word	0x2000bcf8
 8005dd8:	80008001 	.word	0x80008001
 8005ddc:	08028f8c 	.word	0x08028f8c
 8005de0:	200028f4 	.word	0x200028f4
 8005de4:	08028fac 	.word	0x08028fac
 8005de8:	08028c38 	.word	0x08028c38
 8005dec:	20000504 	.word	0x20000504
 8005df0:	08028fd0 	.word	0x08028fd0
 8005df4:	08028c7c 	.word	0x08028c7c
 8005df8:	08028ff4 	.word	0x08028ff4
 8005dfc:	0802900c 	.word	0x0802900c
 8005e00:	20002da4 	.word	0x20002da4
 8005e04:	08029024 	.word	0x08029024
 8005e08:	08028930 	.word	0x08028930
 8005e0c:	08028940 	.word	0x08028940
 8005e10:	08029044 	.word	0x08029044
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 8005e14:	bf00      	nop

	BITSTUFFINC(8);
 8005e16:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	da00      	bge.n	8005e22 <Status_Msg_Extr+0x31a>
 8005e20:	3307      	adds	r3, #7
 8005e22:	10db      	asrs	r3, r3, #3
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e28:	4413      	add	r3, r2
 8005e2a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e2e:	3308      	adds	r3, #8
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	b21b      	sxth	r3, r3
 8005e34:	425a      	negs	r2, r3
 8005e36:	f003 0307 	and.w	r3, r3, #7
 8005e3a:	f002 0207 	and.w	r2, r2, #7
 8005e3e:	bf58      	it	pl
 8005e40:	4253      	negpl	r3, r2
 8005e42:	b21b      	sxth	r3, r3
 8005e44:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005e46:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	441a      	add	r2, r3
 8005e4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e4e:	2110      	movs	r1, #16
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fa fbdf 	bl	8000614 <ExtractBits>
 8005e56:	4603      	mov	r3, r0
 8005e58:	78ba      	ldrb	r2, [r7, #2]
 8005e5a:	b298      	uxth	r0, r3
 8005e5c:	49ab      	ldr	r1, [pc, #684]	; (800610c <Status_Msg_Extr+0x604>)
 8005e5e:	4613      	mov	r3, r2
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	3306      	adds	r3, #6
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8005e6e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005e72:	3310      	adds	r3, #16
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	da00      	bge.n	8005e7a <Status_Msg_Extr+0x372>
 8005e78:	3307      	adds	r3, #7
 8005e7a:	10db      	asrs	r3, r3, #3
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e80:	4413      	add	r3, r2
 8005e82:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e86:	3310      	adds	r3, #16
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	b21b      	sxth	r3, r3
 8005e8c:	425a      	negs	r2, r3
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	f002 0207 	and.w	r2, r2, #7
 8005e96:	bf58      	it	pl
 8005e98:	4253      	negpl	r3, r2
 8005e9a:	b21b      	sxth	r3, r3
 8005e9c:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005e9e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	441a      	add	r2, r3
 8005ea4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ea6:	2110      	movs	r1, #16
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fa fbb3 	bl	8000614 <ExtractBits>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	78ba      	ldrb	r2, [r7, #2]
 8005eb2:	b298      	uxth	r0, r3
 8005eb4:	4995      	ldr	r1, [pc, #596]	; (800610c <Status_Msg_Extr+0x604>)
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8005ec6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005eca:	3310      	adds	r3, #16
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	da00      	bge.n	8005ed2 <Status_Msg_Extr+0x3ca>
 8005ed0:	3307      	adds	r3, #7
 8005ed2:	10db      	asrs	r3, r3, #3
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ed8:	4413      	add	r3, r2
 8005eda:	873b      	strh	r3, [r7, #56]	; 0x38
 8005edc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ede:	3310      	adds	r3, #16
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	b21b      	sxth	r3, r3
 8005ee4:	425a      	negs	r2, r3
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	f002 0207 	and.w	r2, r2, #7
 8005eee:	bf58      	it	pl
 8005ef0:	4253      	negpl	r3, r2
 8005ef2:	b21b      	sxth	r3, r3
 8005ef4:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005ef6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	441a      	add	r2, r3
 8005efc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005efe:	2108      	movs	r1, #8
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fa fb87 	bl	8000614 <ExtractBits>
 8005f06:	4602      	mov	r2, r0
 8005f08:	78bb      	ldrb	r3, [r7, #2]
 8005f0a:	b2d1      	uxtb	r1, r2
 8005f0c:	4a80      	ldr	r2, [pc, #512]	; (8006110 <Status_Msg_Extr+0x608>)
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	4413      	add	r3, r2
 8005f12:	3302      	adds	r3, #2
 8005f14:	460a      	mov	r2, r1
 8005f16:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8005f18:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	da00      	bge.n	8005f24 <Status_Msg_Extr+0x41c>
 8005f22:	3307      	adds	r3, #7
 8005f24:	10db      	asrs	r3, r3, #3
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f2a:	4413      	add	r3, r2
 8005f2c:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f30:	3308      	adds	r3, #8
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	b21b      	sxth	r3, r3
 8005f36:	425a      	negs	r2, r3
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	f002 0207 	and.w	r2, r2, #7
 8005f40:	bf58      	it	pl
 8005f42:	4253      	negpl	r3, r2
 8005f44:	b21b      	sxth	r3, r3
 8005f46:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005f48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	441a      	add	r2, r3
 8005f4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f50:	2108      	movs	r1, #8
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fa fb5e 	bl	8000614 <ExtractBits>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	78bb      	ldrb	r3, [r7, #2]
 8005f5c:	b2d1      	uxtb	r1, r2
 8005f5e:	4a6c      	ldr	r2, [pc, #432]	; (8006110 <Status_Msg_Extr+0x608>)
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	4413      	add	r3, r2
 8005f64:	3301      	adds	r3, #1
 8005f66:	460a      	mov	r2, r1
 8005f68:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8005f6a:	78bb      	ldrb	r3, [r7, #2]
 8005f6c:	4a68      	ldr	r2, [pc, #416]	; (8006110 <Status_Msg_Extr+0x608>)
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	4413      	add	r3, r2
 8005f72:	3301      	adds	r3, #1
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d138      	bne.n	8005fec <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005f7a:	78bb      	ldrb	r3, [r7, #2]
 8005f7c:	4a65      	ldr	r2, [pc, #404]	; (8006114 <Status_Msg_Extr+0x60c>)
 8005f7e:	3366      	adds	r3, #102	; 0x66
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	4619      	mov	r1, r3
 8005f88:	4863      	ldr	r0, [pc, #396]	; (8006118 <Status_Msg_Extr+0x610>)
 8005f8a:	f020 fe2f 	bl	8026bec <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005f8e:	78bb      	ldrb	r3, [r7, #2]
 8005f90:	4a5f      	ldr	r2, [pc, #380]	; (8006110 <Status_Msg_Extr+0x608>)
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	4413      	add	r3, r2
 8005f96:	330c      	adds	r3, #12
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	485f      	ldr	r0, [pc, #380]	; (800611c <Status_Msg_Extr+0x614>)
 8005f9e:	f020 fe25 	bl	8026bec <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8005fa2:	78bb      	ldrb	r3, [r7, #2]
 8005fa4:	495a      	ldr	r1, [pc, #360]	; (8006110 <Status_Msg_Extr+0x608>)
 8005fa6:	011a      	lsls	r2, r3, #4
 8005fa8:	440a      	add	r2, r1
 8005faa:	320c      	adds	r2, #12
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	3201      	adds	r2, #1
 8005fb0:	4957      	ldr	r1, [pc, #348]	; (8006110 <Status_Msg_Extr+0x608>)
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	440b      	add	r3, r1
 8005fb6:	330c      	adds	r3, #12
 8005fb8:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005fba:	78bb      	ldrb	r3, [r7, #2]
 8005fbc:	4a54      	ldr	r2, [pc, #336]	; (8006110 <Status_Msg_Extr+0x608>)
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	4413      	add	r3, r2
 8005fc2:	330c      	adds	r3, #12
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4855      	ldr	r0, [pc, #340]	; (8006120 <Status_Msg_Extr+0x618>)
 8005fca:	f020 fe0f 	bl	8026bec <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8005fce:	78bb      	ldrb	r3, [r7, #2]
 8005fd0:	78ba      	ldrb	r2, [r7, #2]
 8005fd2:	494f      	ldr	r1, [pc, #316]	; (8006110 <Status_Msg_Extr+0x608>)
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	440b      	add	r3, r1
 8005fd8:	330c      	adds	r3, #12
 8005fda:	6819      	ldr	r1, [r3, #0]
 8005fdc:	4851      	ldr	r0, [pc, #324]	; (8006124 <Status_Msg_Extr+0x61c>)
 8005fde:	4613      	mov	r3, r2
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	4413      	add	r3, r2
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	4403      	add	r3, r0
 8005fe8:	330c      	adds	r3, #12
 8005fea:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8005fec:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005ff0:	3308      	adds	r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da00      	bge.n	8005ff8 <Status_Msg_Extr+0x4f0>
 8005ff6:	3307      	adds	r3, #7
 8005ff8:	10db      	asrs	r3, r3, #3
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ffe:	4413      	add	r3, r2
 8006000:	873b      	strh	r3, [r7, #56]	; 0x38
 8006002:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006004:	3308      	adds	r3, #8
 8006006:	b29b      	uxth	r3, r3
 8006008:	b21b      	sxth	r3, r3
 800600a:	425a      	negs	r2, r3
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	f002 0207 	and.w	r2, r2, #7
 8006014:	bf58      	it	pl
 8006016:	4253      	negpl	r3, r2
 8006018:	b21b      	sxth	r3, r3
 800601a:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800601c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	441a      	add	r2, r3
 8006022:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006024:	2108      	movs	r1, #8
 8006026:	4618      	mov	r0, r3
 8006028:	f7fa faf4 	bl	8000614 <ExtractBits>
 800602c:	4603      	mov	r3, r0
 800602e:	78ba      	ldrb	r2, [r7, #2]
 8006030:	b2d8      	uxtb	r0, r3
 8006032:	4936      	ldr	r1, [pc, #216]	; (800610c <Status_Msg_Extr+0x604>)
 8006034:	4613      	mov	r3, r2
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	440b      	add	r3, r1
 800603e:	3302      	adds	r3, #2
 8006040:	4602      	mov	r2, r0
 8006042:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8006044:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006048:	3308      	adds	r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	da00      	bge.n	8006050 <Status_Msg_Extr+0x548>
 800604e:	3307      	adds	r3, #7
 8006050:	10db      	asrs	r3, r3, #3
 8006052:	b29a      	uxth	r2, r3
 8006054:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006056:	4413      	add	r3, r2
 8006058:	873b      	strh	r3, [r7, #56]	; 0x38
 800605a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800605c:	3308      	adds	r3, #8
 800605e:	b29b      	uxth	r3, r3
 8006060:	b21b      	sxth	r3, r3
 8006062:	425a      	negs	r2, r3
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	f002 0207 	and.w	r2, r2, #7
 800606c:	bf58      	it	pl
 800606e:	4253      	negpl	r3, r2
 8006070:	b21b      	sxth	r3, r3
 8006072:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006074:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	441a      	add	r2, r3
 800607a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800607c:	2110      	movs	r1, #16
 800607e:	4618      	mov	r0, r3
 8006080:	f7fa fac8 	bl	8000614 <ExtractBits>
 8006084:	4602      	mov	r2, r0
 8006086:	78bb      	ldrb	r3, [r7, #2]
 8006088:	b291      	uxth	r1, r2
 800608a:	4a21      	ldr	r2, [pc, #132]	; (8006110 <Status_Msg_Extr+0x608>)
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	4413      	add	r3, r2
 8006090:	3304      	adds	r3, #4
 8006092:	460a      	mov	r2, r1
 8006094:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8006096:	4924      	ldr	r1, [pc, #144]	; (8006128 <Status_Msg_Extr+0x620>)
 8006098:	4824      	ldr	r0, [pc, #144]	; (800612c <Status_Msg_Extr+0x624>)
 800609a:	f7fa f8d1 	bl	8000240 <strcmp>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10f      	bne.n	80060c4 <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80060a4:	78bb      	ldrb	r3, [r7, #2]
 80060a6:	4a1a      	ldr	r2, [pc, #104]	; (8006110 <Status_Msg_Extr+0x608>)
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	4413      	add	r3, r2
 80060ac:	3304      	adds	r3, #4
 80060ae:	881a      	ldrh	r2, [r3, #0]
 80060b0:	78bb      	ldrb	r3, [r7, #2]
 80060b2:	f042 0208 	orr.w	r2, r2, #8
 80060b6:	b291      	uxth	r1, r2
 80060b8:	4a15      	ldr	r2, [pc, #84]	; (8006110 <Status_Msg_Extr+0x608>)
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	4413      	add	r3, r2
 80060be:	3304      	adds	r3, #4
 80060c0:	460a      	mov	r2, r1
 80060c2:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 80060c4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80060c8:	3310      	adds	r3, #16
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	da00      	bge.n	80060d0 <Status_Msg_Extr+0x5c8>
 80060ce:	3307      	adds	r3, #7
 80060d0:	10db      	asrs	r3, r3, #3
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80060d6:	4413      	add	r3, r2
 80060d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80060da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060dc:	3310      	adds	r3, #16
 80060de:	b29b      	uxth	r3, r3
 80060e0:	b21b      	sxth	r3, r3
 80060e2:	425a      	negs	r2, r3
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	f002 0207 	and.w	r2, r2, #7
 80060ec:	bf58      	it	pl
 80060ee:	4253      	negpl	r3, r2
 80060f0:	b21b      	sxth	r3, r3
 80060f2:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 80060f4:	78bb      	ldrb	r3, [r7, #2]
 80060f6:	4a06      	ldr	r2, [pc, #24]	; (8006110 <Status_Msg_Extr+0x608>)
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	4413      	add	r3, r2
 80060fc:	3304      	adds	r3, #4
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 812a 	beq.w	800635e <Status_Msg_Extr+0x856>
 800610a:	e011      	b.n	8006130 <Status_Msg_Extr+0x628>
 800610c:	20002d2c 	.word	0x20002d2c
 8006110:	200028f4 	.word	0x200028f4
 8006114:	20000504 	.word	0x20000504
 8006118:	08028d34 	.word	0x08028d34
 800611c:	0802905c 	.word	0x0802905c
 8006120:	08029068 	.word	0x08029068
 8006124:	20002da4 	.word	0x20002da4
 8006128:	080286ec 	.word	0x080286ec
 800612c:	20000505 	.word	0x20000505
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006130:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	441a      	add	r2, r3
 8006136:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006138:	2108      	movs	r1, #8
 800613a:	4618      	mov	r0, r3
 800613c:	f7fa fa6a 	bl	8000614 <ExtractBits>
 8006140:	4603      	mov	r3, r0
 8006142:	78ba      	ldrb	r2, [r7, #2]
 8006144:	b2d8      	uxtb	r0, r3
 8006146:	49b0      	ldr	r1, [pc, #704]	; (8006408 <Status_Msg_Extr+0x900>)
 8006148:	4613      	mov	r3, r2
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	4413      	add	r3, r2
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	440b      	add	r3, r1
 8006152:	3305      	adds	r3, #5
 8006154:	4602      	mov	r2, r0
 8006156:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8006158:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800615c:	3308      	adds	r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	da00      	bge.n	8006164 <Status_Msg_Extr+0x65c>
 8006162:	3307      	adds	r3, #7
 8006164:	10db      	asrs	r3, r3, #3
 8006166:	b29a      	uxth	r2, r3
 8006168:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800616a:	4413      	add	r3, r2
 800616c:	873b      	strh	r3, [r7, #56]	; 0x38
 800616e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006170:	3308      	adds	r3, #8
 8006172:	b29b      	uxth	r3, r3
 8006174:	b21b      	sxth	r3, r3
 8006176:	425a      	negs	r2, r3
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	f002 0207 	and.w	r2, r2, #7
 8006180:	bf58      	it	pl
 8006182:	4253      	negpl	r3, r2
 8006184:	b21b      	sxth	r3, r3
 8006186:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006188:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	441a      	add	r2, r3
 800618e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006190:	2108      	movs	r1, #8
 8006192:	4618      	mov	r0, r3
 8006194:	f7fa fa3e 	bl	8000614 <ExtractBits>
 8006198:	4603      	mov	r3, r0
 800619a:	78ba      	ldrb	r2, [r7, #2]
 800619c:	b2d8      	uxtb	r0, r3
 800619e:	499a      	ldr	r1, [pc, #616]	; (8006408 <Status_Msg_Extr+0x900>)
 80061a0:	4613      	mov	r3, r2
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	4413      	add	r3, r2
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	440b      	add	r3, r1
 80061aa:	3304      	adds	r3, #4
 80061ac:	4602      	mov	r2, r0
 80061ae:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80061b0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80061b4:	3308      	adds	r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	da00      	bge.n	80061bc <Status_Msg_Extr+0x6b4>
 80061ba:	3307      	adds	r3, #7
 80061bc:	10db      	asrs	r3, r3, #3
 80061be:	b29a      	uxth	r2, r3
 80061c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061c2:	4413      	add	r3, r2
 80061c4:	873b      	strh	r3, [r7, #56]	; 0x38
 80061c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061c8:	3308      	adds	r3, #8
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	b21b      	sxth	r3, r3
 80061ce:	425a      	negs	r2, r3
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	f002 0207 	and.w	r2, r2, #7
 80061d8:	bf58      	it	pl
 80061da:	4253      	negpl	r3, r2
 80061dc:	b21b      	sxth	r3, r3
 80061de:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80061e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	441a      	add	r2, r3
 80061e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061e8:	2108      	movs	r1, #8
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fa fa12 	bl	8000614 <ExtractBits>
 80061f0:	4603      	mov	r3, r0
 80061f2:	78ba      	ldrb	r2, [r7, #2]
 80061f4:	b2d8      	uxtb	r0, r3
 80061f6:	4984      	ldr	r1, [pc, #528]	; (8006408 <Status_Msg_Extr+0x900>)
 80061f8:	4613      	mov	r3, r2
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	4413      	add	r3, r2
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	440b      	add	r3, r1
 8006202:	3303      	adds	r3, #3
 8006204:	4602      	mov	r2, r0
 8006206:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8006208:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800620c:	3308      	adds	r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	da00      	bge.n	8006214 <Status_Msg_Extr+0x70c>
 8006212:	3307      	adds	r3, #7
 8006214:	10db      	asrs	r3, r3, #3
 8006216:	b29a      	uxth	r2, r3
 8006218:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800621a:	4413      	add	r3, r2
 800621c:	873b      	strh	r3, [r7, #56]	; 0x38
 800621e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006220:	3308      	adds	r3, #8
 8006222:	b29b      	uxth	r3, r3
 8006224:	b21b      	sxth	r3, r3
 8006226:	425a      	negs	r2, r3
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	f002 0207 	and.w	r2, r2, #7
 8006230:	bf58      	it	pl
 8006232:	4253      	negpl	r3, r2
 8006234:	b21b      	sxth	r3, r3
 8006236:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006238:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	441a      	add	r2, r3
 800623e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006240:	2108      	movs	r1, #8
 8006242:	4618      	mov	r0, r3
 8006244:	f7fa f9e6 	bl	8000614 <ExtractBits>
 8006248:	4603      	mov	r3, r0
 800624a:	78ba      	ldrb	r2, [r7, #2]
 800624c:	b2d8      	uxtb	r0, r3
 800624e:	496e      	ldr	r1, [pc, #440]	; (8006408 <Status_Msg_Extr+0x900>)
 8006250:	4613      	mov	r3, r2
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	4413      	add	r3, r2
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	440b      	add	r3, r1
 800625a:	4602      	mov	r2, r0
 800625c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 800625e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006262:	3308      	adds	r3, #8
 8006264:	2b00      	cmp	r3, #0
 8006266:	da00      	bge.n	800626a <Status_Msg_Extr+0x762>
 8006268:	3307      	adds	r3, #7
 800626a:	10db      	asrs	r3, r3, #3
 800626c:	b29a      	uxth	r2, r3
 800626e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006270:	4413      	add	r3, r2
 8006272:	873b      	strh	r3, [r7, #56]	; 0x38
 8006274:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006276:	3308      	adds	r3, #8
 8006278:	b29b      	uxth	r3, r3
 800627a:	b21b      	sxth	r3, r3
 800627c:	425a      	negs	r2, r3
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	f002 0207 	and.w	r2, r2, #7
 8006286:	bf58      	it	pl
 8006288:	4253      	negpl	r3, r2
 800628a:	b21b      	sxth	r3, r3
 800628c:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800628e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	441a      	add	r2, r3
 8006294:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006296:	2108      	movs	r1, #8
 8006298:	4618      	mov	r0, r3
 800629a:	f7fa f9bb 	bl	8000614 <ExtractBits>
 800629e:	4603      	mov	r3, r0
 80062a0:	78ba      	ldrb	r2, [r7, #2]
 80062a2:	b2d8      	uxtb	r0, r3
 80062a4:	4958      	ldr	r1, [pc, #352]	; (8006408 <Status_Msg_Extr+0x900>)
 80062a6:	4613      	mov	r3, r2
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	4413      	add	r3, r2
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	440b      	add	r3, r1
 80062b0:	3301      	adds	r3, #1
 80062b2:	4602      	mov	r2, r0
 80062b4:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80062b6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80062ba:	3308      	adds	r3, #8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	da00      	bge.n	80062c2 <Status_Msg_Extr+0x7ba>
 80062c0:	3307      	adds	r3, #7
 80062c2:	10db      	asrs	r3, r3, #3
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062c8:	4413      	add	r3, r2
 80062ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80062cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062ce:	3308      	adds	r3, #8
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	b21b      	sxth	r3, r3
 80062d4:	425a      	negs	r2, r3
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	f002 0207 	and.w	r2, r2, #7
 80062de:	bf58      	it	pl
 80062e0:	4253      	negpl	r3, r2
 80062e2:	b21b      	sxth	r3, r3
 80062e4:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80062e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	441a      	add	r2, r3
 80062ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062ee:	2108      	movs	r1, #8
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fa f98f 	bl	8000614 <ExtractBits>
 80062f6:	4603      	mov	r3, r0
 80062f8:	78ba      	ldrb	r2, [r7, #2]
 80062fa:	b2d8      	uxtb	r0, r3
 80062fc:	4942      	ldr	r1, [pc, #264]	; (8006408 <Status_Msg_Extr+0x900>)
 80062fe:	4613      	mov	r3, r2
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	4413      	add	r3, r2
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	440b      	add	r3, r1
 8006308:	3302      	adds	r3, #2
 800630a:	4602      	mov	r2, r0
 800630c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 800630e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006312:	3308      	adds	r3, #8
 8006314:	2b00      	cmp	r3, #0
 8006316:	da00      	bge.n	800631a <Status_Msg_Extr+0x812>
 8006318:	3307      	adds	r3, #7
 800631a:	10db      	asrs	r3, r3, #3
 800631c:	b29a      	uxth	r2, r3
 800631e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006320:	4413      	add	r3, r2
 8006322:	873b      	strh	r3, [r7, #56]	; 0x38
 8006324:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006326:	3308      	adds	r3, #8
 8006328:	b29b      	uxth	r3, r3
 800632a:	b21b      	sxth	r3, r3
 800632c:	425a      	negs	r2, r3
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	f002 0207 	and.w	r2, r2, #7
 8006336:	bf58      	it	pl
 8006338:	4253      	negpl	r3, r2
 800633a:	b21b      	sxth	r3, r3
 800633c:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 800633e:	78bb      	ldrb	r3, [r7, #2]
 8006340:	4618      	mov	r0, r3
 8006342:	f003 faa5 	bl	8009890 <IS_MLK_EIPC_TIME_MATCHING>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d004      	beq.n	8006356 <Status_Msg_Extr+0x84e>
 800634c:	78bb      	ldrb	r3, [r7, #2]
 800634e:	4a2f      	ldr	r2, [pc, #188]	; (800640c <Status_Msg_Extr+0x904>)
 8006350:	2100      	movs	r1, #0
 8006352:	54d1      	strb	r1, [r2, r3]
 8006354:	e003      	b.n	800635e <Status_Msg_Extr+0x856>
 8006356:	78bb      	ldrb	r3, [r7, #2]
 8006358:	4a2c      	ldr	r2, [pc, #176]	; (800640c <Status_Msg_Extr+0x904>)
 800635a:	2101      	movs	r1, #1
 800635c:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 800635e:	78bb      	ldrb	r3, [r7, #2]
 8006360:	4a2b      	ldr	r2, [pc, #172]	; (8006410 <Status_Msg_Extr+0x908>)
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	4413      	add	r3, r2
 8006366:	3304      	adds	r3, #4
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	f003 0308 	and.w	r3, r3, #8
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <Status_Msg_Extr+0x870>
	{
		LinkEstablishFlag = SET;
 8006372:	2301      	movs	r3, #1
 8006374:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8006378:	787a      	ldrb	r2, [r7, #1]
 800637a:	78bb      	ldrb	r3, [r7, #2]
 800637c:	4611      	mov	r1, r2
 800637e:	4618      	mov	r0, r3
 8006380:	f000 f9e0 	bl	8006744 <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 8006384:	78bb      	ldrb	r3, [r7, #2]
 8006386:	4923      	ldr	r1, [pc, #140]	; (8006414 <Status_Msg_Extr+0x90c>)
 8006388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800638a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 800638e:	78bb      	ldrb	r3, [r7, #2]
 8006390:	4921      	ldr	r1, [pc, #132]	; (8006418 <Status_Msg_Extr+0x910>)
 8006392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8006398:	78ba      	ldrb	r2, [r7, #2]
 800639a:	4920      	ldr	r1, [pc, #128]	; (800641c <Status_Msg_Extr+0x914>)
 800639c:	4613      	mov	r3, r2
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	4413      	add	r3, r2
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	440b      	add	r3, r1
 80063a6:	3310      	adds	r3, #16
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	78bc      	ldrb	r4, [r7, #2]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f00a f8f5 	bl	801059c <HAL_Elaps_Ticks>
 80063b2:	4602      	mov	r2, r0
 80063b4:	4919      	ldr	r1, [pc, #100]	; (800641c <Status_Msg_Extr+0x914>)
 80063b6:	4623      	mov	r3, r4
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	4423      	add	r3, r4
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	440b      	add	r3, r1
 80063c0:	3310      	adds	r3, #16
 80063c2:	601a      	str	r2, [r3, #0]
	/* Updating the Clocks */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (LastActCount[Source_Index] < MAX_LAST_ACT_COUNT) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET) && (Act_InactiveFlag[Source_Index] == SET))
 80063c4:	78bb      	ldrb	r3, [r7, #2]
 80063c6:	4a16      	ldr	r2, [pc, #88]	; (8006420 <Status_Msg_Extr+0x918>)
 80063c8:	4413      	add	r3, r2
 80063ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d12e      	bne.n	8006430 <Status_Msg_Extr+0x928>
 80063d2:	78bb      	ldrb	r3, [r7, #2]
 80063d4:	4a13      	ldr	r2, [pc, #76]	; (8006424 <Status_Msg_Extr+0x91c>)
 80063d6:	5cd3      	ldrb	r3, [r2, r3]
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d829      	bhi.n	8006430 <Status_Msg_Extr+0x928>
 80063dc:	78ba      	ldrb	r2, [r7, #2]
 80063de:	4912      	ldr	r1, [pc, #72]	; (8006428 <Status_Msg_Extr+0x920>)
 80063e0:	4613      	mov	r3, r2
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	4413      	add	r3, r2
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	440b      	add	r3, r1
 80063ea:	3305      	adds	r3, #5
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d11c      	bne.n	8006430 <Status_Msg_Extr+0x928>
 80063f6:	78bb      	ldrb	r3, [r7, #2]
 80063f8:	4a0c      	ldr	r2, [pc, #48]	; (800642c <Status_Msg_Extr+0x924>)
 80063fa:	5cd3      	ldrb	r3, [r2, r3]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d117      	bne.n	8006430 <Status_Msg_Extr+0x928>
	{
		LinkEstablishFlag = RESET;
 8006400:	2300      	movs	r3, #0
 8006402:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006406:	e03d      	b.n	8006484 <Status_Msg_Extr+0x97c>
 8006408:	200028b8 	.word	0x200028b8
 800640c:	20002764 	.word	0x20002764
 8006410:	200028f4 	.word	0x200028f4
 8006414:	20002630 	.word	0x20002630
 8006418:	20002658 	.word	0x20002658
 800641c:	20002da4 	.word	0x20002da4
 8006420:	20000504 	.word	0x20000504
 8006424:	20002544 	.word	0x20002544
 8006428:	20002ad4 	.word	0x20002ad4
 800642c:	20002538 	.word	0x20002538
	}
	else if (EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8006430:	78bb      	ldrb	r3, [r7, #2]
 8006432:	4aaf      	ldr	r2, [pc, #700]	; (80066f0 <Status_Msg_Extr+0xbe8>)
 8006434:	4413      	add	r3, r2
 8006436:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800643a:	2b02      	cmp	r3, #2
 800643c:	d122      	bne.n	8006484 <Status_Msg_Extr+0x97c>
	{
		printf("LAC[%lu]:%u\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index],LastActCount[Source_Index]);
 800643e:	78bb      	ldrb	r3, [r7, #2]
 8006440:	4aab      	ldr	r2, [pc, #684]	; (80066f0 <Status_Msg_Extr+0xbe8>)
 8006442:	3366      	adds	r3, #102	; 0x66
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	6859      	ldr	r1, [r3, #4]
 800644a:	78bb      	ldrb	r3, [r7, #2]
 800644c:	4aa9      	ldr	r2, [pc, #676]	; (80066f4 <Status_Msg_Extr+0xbec>)
 800644e:	5cd3      	ldrb	r3, [r2, r3]
 8006450:	461a      	mov	r2, r3
 8006452:	48a9      	ldr	r0, [pc, #676]	; (80066f8 <Status_Msg_Extr+0xbf0>)
 8006454:	f020 fbca 	bl	8026bec <iprintf>
		printf("Act_InactiveFlag:%u\n",Act_InactiveFlag[Source_Index]);
 8006458:	78bb      	ldrb	r3, [r7, #2]
 800645a:	4aa8      	ldr	r2, [pc, #672]	; (80066fc <Status_Msg_Extr+0xbf4>)
 800645c:	5cd3      	ldrb	r3, [r2, r3]
 800645e:	4619      	mov	r1, r3
 8006460:	48a7      	ldr	r0, [pc, #668]	; (8006700 <Status_Msg_Extr+0xbf8>)
 8006462:	f020 fbc3 	bl	8026bec <iprintf>
		printf("OnlineBit:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 8006466:	78ba      	ldrb	r2, [r7, #2]
 8006468:	49a6      	ldr	r1, [pc, #664]	; (8006704 <Status_Msg_Extr+0xbfc>)
 800646a:	4613      	mov	r3, r2
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	4413      	add	r3, r2
 8006470:	011b      	lsls	r3, r3, #4
 8006472:	440b      	add	r3, r1
 8006474:	3305      	adds	r3, #5
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	4619      	mov	r1, r3
 800647e:	48a2      	ldr	r0, [pc, #648]	; (8006708 <Status_Msg_Extr+0xc00>)
 8006480:	f020 fbb4 	bl	8026bec <iprintf>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 8006484:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006488:	2b01      	cmp	r3, #1
 800648a:	d16f      	bne.n	800656c <Status_Msg_Extr+0xa64>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800648c:	78ba      	ldrb	r2, [r7, #2]
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4a9d      	ldr	r2, [pc, #628]	; (800670c <Status_Msg_Extr+0xc04>)
 8006498:	4413      	add	r3, r2
 800649a:	3301      	adds	r3, #1
 800649c:	2210      	movs	r2, #16
 800649e:	2100      	movs	r1, #0
 80064a0:	4618      	mov	r0, r3
 80064a2:	f020 fabb 	bl	8026a1c <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 80064a6:	78ba      	ldrb	r2, [r7, #2]
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4a96      	ldr	r2, [pc, #600]	; (800670c <Status_Msg_Extr+0xc04>)
 80064b2:	1898      	adds	r0, r3, r2
 80064b4:	78ba      	ldrb	r2, [r7, #2]
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4a94      	ldr	r2, [pc, #592]	; (8006710 <Status_Msg_Extr+0xc08>)
 80064c0:	4413      	add	r3, r2
 80064c2:	2214      	movs	r2, #20
 80064c4:	4619      	mov	r1, r3
 80064c6:	f020 fa81 	bl	80269cc <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 80064ca:	78bb      	ldrb	r3, [r7, #2]
 80064cc:	4a91      	ldr	r2, [pc, #580]	; (8006714 <Status_Msg_Extr+0xc0c>)
 80064ce:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80064d2:	78ba      	ldrb	r2, [r7, #2]
 80064d4:	488d      	ldr	r0, [pc, #564]	; (800670c <Status_Msg_Extr+0xc04>)
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4403      	add	r3, r0
 80064e0:	3312      	adds	r3, #18
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	4299      	cmp	r1, r3
 80064e6:	d041      	beq.n	800656c <Status_Msg_Extr+0xa64>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80064e8:	78ba      	ldrb	r2, [r7, #2]
 80064ea:	78b9      	ldrb	r1, [r7, #2]
 80064ec:	4887      	ldr	r0, [pc, #540]	; (800670c <Status_Msg_Extr+0xc04>)
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4403      	add	r3, r0
 80064f8:	3312      	adds	r3, #18
 80064fa:	881a      	ldrh	r2, [r3, #0]
 80064fc:	4b85      	ldr	r3, [pc, #532]	; (8006714 <Status_Msg_Extr+0xc0c>)
 80064fe:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8006502:	2214      	movs	r2, #20
 8006504:	2100      	movs	r1, #0
 8006506:	4884      	ldr	r0, [pc, #528]	; (8006718 <Status_Msg_Extr+0xc10>)
 8006508:	f020 fa88 	bl	8026a1c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 800650c:	78ba      	ldrb	r2, [r7, #2]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4a7d      	ldr	r2, [pc, #500]	; (800670c <Status_Msg_Extr+0xc04>)
 8006518:	4413      	add	r3, r2
 800651a:	2214      	movs	r2, #20
 800651c:	4619      	mov	r1, r3
 800651e:	487e      	ldr	r0, [pc, #504]	; (8006718 <Status_Msg_Extr+0xc10>)
 8006520:	f020 fa54 	bl	80269cc <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8006524:	f240 2007 	movw	r0, #519	; 0x207
 8006528:	f00a fdec 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == 0)
 800652c:	78bb      	ldrb	r3, [r7, #2]
 800652e:	4a7b      	ldr	r2, [pc, #492]	; (800671c <Status_Msg_Extr+0xc14>)
 8006530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d119      	bne.n	800656c <Status_Msg_Extr+0xa64>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006538:	78bb      	ldrb	r3, [r7, #2]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	4a78      	ldr	r2, [pc, #480]	; (8006720 <Status_Msg_Extr+0xc18>)
 800653e:	4413      	add	r3, r2
 8006540:	1c98      	adds	r0, r3, #2
 8006542:	78ba      	ldrb	r2, [r7, #2]
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4a6f      	ldr	r2, [pc, #444]	; (800670c <Status_Msg_Extr+0xc04>)
 800654e:	4413      	add	r3, r2
 8006550:	3301      	adds	r3, #1
 8006552:	2210      	movs	r2, #16
 8006554:	4619      	mov	r1, r3
 8006556:	f020 fa39 	bl	80269cc <memcpy>
#ifdef EI_1
				ReArrangedVitalData();
 800655a:	f004 f897 	bl	800a68c <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 800655e:	f240 1019 	movw	r0, #281	; 0x119
 8006562:	f00a fdcf 	bl	8011104 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8006566:	4a6f      	ldr	r2, [pc, #444]	; (8006724 <Status_Msg_Extr+0xc1c>)
 8006568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656a:	6013      	str	r3, [r2, #0]
			}
		}
	}

	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 800656c:	78b9      	ldrb	r1, [r7, #2]
 800656e:	78ba      	ldrb	r2, [r7, #2]
 8006570:	4866      	ldr	r0, [pc, #408]	; (800670c <Status_Msg_Extr+0xc04>)
 8006572:	460b      	mov	r3, r1
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	440b      	add	r3, r1
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4403      	add	r3, r0
 800657c:	3312      	adds	r3, #18
 800657e:	8818      	ldrh	r0, [r3, #0]
 8006580:	4969      	ldr	r1, [pc, #420]	; (8006728 <Status_Msg_Extr+0xc20>)
 8006582:	4613      	mov	r3, r2
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	4413      	add	r3, r2
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	440b      	add	r3, r1
 800658c:	3306      	adds	r3, #6
 800658e:	4602      	mov	r2, r0
 8006590:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8006592:	78ba      	ldrb	r2, [r7, #2]
 8006594:	4964      	ldr	r1, [pc, #400]	; (8006728 <Status_Msg_Extr+0xc20>)
 8006596:	4613      	mov	r3, r2
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	4413      	add	r3, r2
 800659c:	00db      	lsls	r3, r3, #3
 800659e:	440b      	add	r3, r1
 80065a0:	3314      	adds	r3, #20
 80065a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065a4:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 80065a6:	78ba      	ldrb	r2, [r7, #2]
 80065a8:	495f      	ldr	r1, [pc, #380]	; (8006728 <Status_Msg_Extr+0xc20>)
 80065aa:	4613      	mov	r3, r2
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	4413      	add	r3, r2
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	440b      	add	r3, r1
 80065b4:	3305      	adds	r3, #5
 80065b6:	2204      	movs	r2, #4
 80065b8:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 80065ba:	78ba      	ldrb	r2, [r7, #2]
 80065bc:	495a      	ldr	r1, [pc, #360]	; (8006728 <Status_Msg_Extr+0xc20>)
 80065be:	4613      	mov	r3, r2
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	4413      	add	r3, r2
 80065c4:	00db      	lsls	r3, r3, #3
 80065c6:	440b      	add	r3, r1
 80065c8:	78ba      	ldrb	r2, [r7, #2]
 80065ca:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 80065cc:	78ba      	ldrb	r2, [r7, #2]
 80065ce:	4956      	ldr	r1, [pc, #344]	; (8006728 <Status_Msg_Extr+0xc20>)
 80065d0:	4613      	mov	r3, r2
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	4413      	add	r3, r2
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	440b      	add	r3, r1
 80065da:	3301      	adds	r3, #1
 80065dc:	2201      	movs	r2, #1
 80065de:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 80065e0:	78ba      	ldrb	r2, [r7, #2]
 80065e2:	4951      	ldr	r1, [pc, #324]	; (8006728 <Status_Msg_Extr+0xc20>)
 80065e4:	4613      	mov	r3, r2
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	4413      	add	r3, r2
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	440b      	add	r3, r1
 80065ee:	3302      	adds	r3, #2
 80065f0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80065f4:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80065f6:	2218      	movs	r2, #24
 80065f8:	2100      	movs	r1, #0
 80065fa:	484c      	ldr	r0, [pc, #304]	; (800672c <Status_Msg_Extr+0xc24>)
 80065fc:	f020 fa0e 	bl	8026a1c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8006600:	78ba      	ldrb	r2, [r7, #2]
 8006602:	4613      	mov	r3, r2
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	4413      	add	r3, r2
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	4a47      	ldr	r2, [pc, #284]	; (8006728 <Status_Msg_Extr+0xc20>)
 800660c:	4413      	add	r3, r2
 800660e:	2218      	movs	r2, #24
 8006610:	4619      	mov	r1, r3
 8006612:	4846      	ldr	r0, [pc, #280]	; (800672c <Status_Msg_Extr+0xc24>)
 8006614:	f020 f9da 	bl	80269cc <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8006618:	f240 2001 	movw	r0, #513	; 0x201
 800661c:	f00a fd72 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8006620:	78ba      	ldrb	r2, [r7, #2]
 8006622:	4941      	ldr	r1, [pc, #260]	; (8006728 <Status_Msg_Extr+0xc20>)
 8006624:	4613      	mov	r3, r2
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	4413      	add	r3, r2
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	440b      	add	r3, r1
 800662e:	3301      	adds	r3, #1
 8006630:	2200      	movs	r2, #0
 8006632:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8006634:	78bb      	ldrb	r3, [r7, #2]
 8006636:	493e      	ldr	r1, [pc, #248]	; (8006730 <Status_Msg_Extr+0xc28>)
 8006638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800663a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 800663e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006642:	2b01      	cmp	r3, #1
 8006644:	d11d      	bne.n	8006682 <Status_Msg_Extr+0xb7a>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8006646:	78bb      	ldrb	r3, [r7, #2]
 8006648:	493a      	ldr	r1, [pc, #232]	; (8006734 <Status_Msg_Extr+0xc2c>)
 800664a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800664c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8006650:	78ba      	ldrb	r2, [r7, #2]
 8006652:	4939      	ldr	r1, [pc, #228]	; (8006738 <Status_Msg_Extr+0xc30>)
 8006654:	4613      	mov	r3, r2
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	3304      	adds	r3, #4
 8006660:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006662:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8006664:	78ba      	ldrb	r2, [r7, #2]
 8006666:	4934      	ldr	r1, [pc, #208]	; (8006738 <Status_Msg_Extr+0xc30>)
 8006668:	4613      	mov	r3, r2
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	3301      	adds	r3, #1
 8006674:	2201      	movs	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
		SelfLinkFlag[Source_Index] = SET;
 8006678:	78bb      	ldrb	r3, [r7, #2]
 800667a:	4a30      	ldr	r2, [pc, #192]	; (800673c <Status_Msg_Extr+0xc34>)
 800667c:	2101      	movs	r1, #1
 800667e:	54d1      	strb	r1, [r2, r3]
 8006680:	e02e      	b.n	80066e0 <Status_Msg_Extr+0xbd8>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 8006682:	78bb      	ldrb	r3, [r7, #2]
 8006684:	4a2d      	ldr	r2, [pc, #180]	; (800673c <Status_Msg_Extr+0xc34>)
 8006686:	2100      	movs	r1, #0
 8006688:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 800668a:	78ba      	ldrb	r2, [r7, #2]
 800668c:	492a      	ldr	r1, [pc, #168]	; (8006738 <Status_Msg_Extr+0xc30>)
 800668e:	4613      	mov	r3, r2
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	3308      	adds	r3, #8
 800669a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800669c:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 800669e:	78ba      	ldrb	r2, [r7, #2]
 80066a0:	4925      	ldr	r1, [pc, #148]	; (8006738 <Status_Msg_Extr+0xc30>)
 80066a2:	4613      	mov	r3, r2
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	440b      	add	r3, r1
 80066ac:	3301      	adds	r3, #1
 80066ae:	2200      	movs	r2, #0
 80066b0:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80066b2:	78ba      	ldrb	r2, [r7, #2]
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4a13      	ldr	r2, [pc, #76]	; (800670c <Status_Msg_Extr+0xc04>)
 80066be:	4413      	add	r3, r2
 80066c0:	3301      	adds	r3, #1
 80066c2:	2210      	movs	r2, #16
 80066c4:	2100      	movs	r1, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f020 f9a8 	bl	8026a1c <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 80066cc:	78ba      	ldrb	r2, [r7, #2]
 80066ce:	490f      	ldr	r1, [pc, #60]	; (800670c <Status_Msg_Extr+0xc04>)
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	440b      	add	r3, r1
 80066da:	3312      	adds	r3, #18
 80066dc:	2200      	movs	r2, #0
 80066de:	801a      	strh	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80066e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066e4:	4816      	ldr	r0, [pc, #88]	; (8006740 <Status_Msg_Extr+0xc38>)
 80066e6:	f015 ff60 	bl	801c5aa <HAL_GPIO_TogglePin>

}
 80066ea:	3754      	adds	r7, #84	; 0x54
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd90      	pop	{r4, r7, pc}
 80066f0:	20000504 	.word	0x20000504
 80066f4:	20002544 	.word	0x20002544
 80066f8:	08029074 	.word	0x08029074
 80066fc:	20002538 	.word	0x20002538
 8006700:	08029084 	.word	0x08029084
 8006704:	20002ad4 	.word	0x20002ad4
 8006708:	0802909c 	.word	0x0802909c
 800670c:	200035b0 	.word	0x200035b0
 8006710:	200034e8 	.word	0x200034e8
 8006714:	2000258c 	.word	0x2000258c
 8006718:	20003740 	.word	0x20003740
 800671c:	20002550 	.word	0x20002550
 8006720:	20002770 	.word	0x20002770
 8006724:	200024e4 	.word	0x200024e4
 8006728:	20002da4 	.word	0x20002da4
 800672c:	20002f84 	.word	0x20002f84
 8006730:	200024b8 	.word	0x200024b8
 8006734:	200025a0 	.word	0x200025a0
 8006738:	200033f8 	.word	0x200033f8
 800673c:	200025f0 	.word	0x200025f0
 8006740:	40021c00 	.word	0x40021c00

08006744 <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8006744:	b590      	push	{r4, r7, lr}
 8006746:	b0a5      	sub	sp, #148	; 0x94
 8006748:	af00      	add	r7, sp, #0
 800674a:	4603      	mov	r3, r0
 800674c:	460a      	mov	r2, r1
 800674e:	71fb      	strb	r3, [r7, #7]
 8006750:	4613      	mov	r3, r2
 8006752:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8006754:	2300      	movs	r3, #0
 8006756:	64bb      	str	r3, [r7, #72]	; 0x48
 8006758:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800675c:	2238      	movs	r2, #56	; 0x38
 800675e:	2100      	movs	r1, #0
 8006760:	4618      	mov	r0, r3
 8006762:	f020 f95b 	bl	8026a1c <memset>
	uint8_t Temp_Buff[60] = {0,};
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	f107 0310 	add.w	r3, r7, #16
 800676e:	2238      	movs	r2, #56	; 0x38
 8006770:	2100      	movs	r1, #0
 8006772:	4618      	mov	r0, r3
 8006774:	f020 f952 	bl	8026a1c <memset>
	uint8_t uc_index = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 800677e:	2300      	movs	r3, #0
 8006780:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006784:	2300      	movs	r3, #0
 8006786:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 800678a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800678e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006792:	441a      	add	r2, r3
 8006794:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006798:	23f4      	movs	r3, #244	; 0xf4
 800679a:	2108      	movs	r1, #8
 800679c:	f7f9 ffc6 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80067a0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80067a4:	3308      	adds	r3, #8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	da00      	bge.n	80067ac <Send_Status_Message+0x68>
 80067aa:	3307      	adds	r3, #7
 80067ac:	10db      	asrs	r3, r3, #3
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80067b4:	4413      	add	r3, r2
 80067b6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80067ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067be:	3308      	adds	r3, #8
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	b21b      	sxth	r3, r3
 80067c4:	425a      	negs	r2, r3
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	f002 0207 	and.w	r2, r2, #7
 80067ce:	bf58      	it	pl
 80067d0:	4253      	negpl	r3, r2
 80067d2:	b21b      	sxth	r3, r3
 80067d4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80067d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80067dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067e0:	441a      	add	r2, r3
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	49bc      	ldr	r1, [pc, #752]	; (8006ad8 <Send_Status_Message+0x394>)
 80067e6:	3366      	adds	r3, #102	; 0x66
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	440b      	add	r3, r1
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80067f2:	2110      	movs	r1, #16
 80067f4:	f7f9 ff9a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80067f8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80067fc:	3310      	adds	r3, #16
 80067fe:	2b00      	cmp	r3, #0
 8006800:	da00      	bge.n	8006804 <Send_Status_Message+0xc0>
 8006802:	3307      	adds	r3, #7
 8006804:	10db      	asrs	r3, r3, #3
 8006806:	b29a      	uxth	r2, r3
 8006808:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800680c:	4413      	add	r3, r2
 800680e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006812:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006816:	3310      	adds	r3, #16
 8006818:	b29b      	uxth	r3, r3
 800681a:	b21b      	sxth	r3, r3
 800681c:	425a      	negs	r2, r3
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	f002 0207 	and.w	r2, r2, #7
 8006826:	bf58      	it	pl
 8006828:	4253      	negpl	r3, r2
 800682a:	b21b      	sxth	r3, r3
 800682c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8006830:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006834:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006838:	441a      	add	r2, r3
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	49a6      	ldr	r1, [pc, #664]	; (8006ad8 <Send_Status_Message+0x394>)
 800683e:	3370      	adds	r3, #112	; 0x70
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	440b      	add	r3, r1
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800684a:	2110      	movs	r1, #16
 800684c:	f7f9 ff6e 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006850:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006854:	3310      	adds	r3, #16
 8006856:	2b00      	cmp	r3, #0
 8006858:	da00      	bge.n	800685c <Send_Status_Message+0x118>
 800685a:	3307      	adds	r3, #7
 800685c:	10db      	asrs	r3, r3, #3
 800685e:	b29a      	uxth	r2, r3
 8006860:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006864:	4413      	add	r3, r2
 8006866:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800686a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800686e:	3310      	adds	r3, #16
 8006870:	b29b      	uxth	r3, r3
 8006872:	b21b      	sxth	r3, r3
 8006874:	425a      	negs	r2, r3
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	f002 0207 	and.w	r2, r2, #7
 800687e:	bf58      	it	pl
 8006880:	4253      	negpl	r3, r2
 8006882:	b21b      	sxth	r3, r3
 8006884:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006888:	4b94      	ldr	r3, [pc, #592]	; (8006adc <Send_Status_Message+0x398>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	089b      	lsrs	r3, r3, #2
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d035      	beq.n	8006902 <Send_Status_Message+0x1be>
 8006896:	4b91      	ldr	r3, [pc, #580]	; (8006adc <Send_Status_Message+0x398>)
 8006898:	791b      	ldrb	r3, [r3, #4]
 800689a:	79fa      	ldrb	r2, [r7, #7]
 800689c:	429a      	cmp	r2, r3
 800689e:	d130      	bne.n	8006902 <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 80068a6:	488e      	ldr	r0, [pc, #568]	; (8006ae0 <Send_Status_Message+0x39c>)
 80068a8:	f017 fe48 	bl	801e53c <HAL_RNG_GetRandomNumber>
 80068ac:	4602      	mov	r2, r0
 80068ae:	4b8d      	ldr	r3, [pc, #564]	; (8006ae4 <Send_Status_Message+0x3a0>)
 80068b0:	fba3 1302 	umull	r1, r3, r3, r2
 80068b4:	099b      	lsrs	r3, r3, #6
 80068b6:	21c8      	movs	r1, #200	; 0xc8
 80068b8:	fb01 f303 	mul.w	r3, r1, r3
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 80068c2:	4889      	ldr	r0, [pc, #548]	; (8006ae8 <Send_Status_Message+0x3a4>)
 80068c4:	f020 fa2e 	bl	8026d24 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	4a88      	ldr	r2, [pc, #544]	; (8006aec <Send_Status_Message+0x3a8>)
 80068cc:	011b      	lsls	r3, r3, #4
 80068ce:	4413      	add	r3, r2
 80068d0:	3301      	adds	r3, #1
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	4619      	mov	r1, r3
 80068d6:	4886      	ldr	r0, [pc, #536]	; (8006af0 <Send_Status_Message+0x3ac>)
 80068d8:	f020 f988 	bl	8026bec <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 80068dc:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80068e0:	4619      	mov	r1, r3
 80068e2:	4884      	ldr	r0, [pc, #528]	; (8006af4 <Send_Status_Message+0x3b0>)
 80068e4:	f020 f982 	bl	8026bec <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 80068e8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80068ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80068f0:	441a      	add	r2, r3
 80068f2:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80068f6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80068fa:	2108      	movs	r1, #8
 80068fc:	f7f9 ff16 	bl	800072c <InsertBits>
	{
 8006900:	e00f      	b.n	8006922 <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8006902:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006906:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800690a:	441a      	add	r2, r3
 800690c:	79fb      	ldrb	r3, [r7, #7]
 800690e:	4977      	ldr	r1, [pc, #476]	; (8006aec <Send_Status_Message+0x3a8>)
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	440b      	add	r3, r1
 8006914:	3301      	adds	r3, #1
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800691c:	2108      	movs	r1, #8
 800691e:	f7f9 ff05 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 8006922:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006926:	3308      	adds	r3, #8
 8006928:	2b00      	cmp	r3, #0
 800692a:	da00      	bge.n	800692e <Send_Status_Message+0x1ea>
 800692c:	3307      	adds	r3, #7
 800692e:	10db      	asrs	r3, r3, #3
 8006930:	b29a      	uxth	r2, r3
 8006932:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006936:	4413      	add	r3, r2
 8006938:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800693c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006940:	3308      	adds	r3, #8
 8006942:	b29b      	uxth	r3, r3
 8006944:	b21b      	sxth	r3, r3
 8006946:	425a      	negs	r2, r3
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	f002 0207 	and.w	r2, r2, #7
 8006950:	bf58      	it	pl
 8006952:	4253      	negpl	r3, r2
 8006954:	b21b      	sxth	r3, r3
 8006956:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800695a:	4b60      	ldr	r3, [pc, #384]	; (8006adc <Send_Status_Message+0x398>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	08db      	lsrs	r3, r3, #3
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d038      	beq.n	80069da <Send_Status_Message+0x296>
 8006968:	4b5c      	ldr	r3, [pc, #368]	; (8006adc <Send_Status_Message+0x398>)
 800696a:	791b      	ldrb	r3, [r3, #4]
 800696c:	79fa      	ldrb	r2, [r7, #7]
 800696e:	429a      	cmp	r2, r3
 8006970:	d133      	bne.n	80069da <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8006978:	4859      	ldr	r0, [pc, #356]	; (8006ae0 <Send_Status_Message+0x39c>)
 800697a:	f017 fddf 	bl	801e53c <HAL_RNG_GetRandomNumber>
 800697e:	4602      	mov	r2, r0
 8006980:	4b58      	ldr	r3, [pc, #352]	; (8006ae4 <Send_Status_Message+0x3a0>)
 8006982:	fba3 1302 	umull	r1, r3, r3, r2
 8006986:	099b      	lsrs	r3, r3, #6
 8006988:	21c8      	movs	r1, #200	; 0xc8
 800698a:	fb01 f303 	mul.w	r3, r1, r3
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8006994:	4858      	ldr	r0, [pc, #352]	; (8006af8 <Send_Status_Message+0x3b4>)
 8006996:	f020 f9c5 	bl	8026d24 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 800699a:	79fb      	ldrb	r3, [r7, #7]
 800699c:	4a53      	ldr	r2, [pc, #332]	; (8006aec <Send_Status_Message+0x3a8>)
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	4413      	add	r3, r2
 80069a2:	3302      	adds	r3, #2
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	4619      	mov	r1, r3
 80069a8:	4854      	ldr	r0, [pc, #336]	; (8006afc <Send_Status_Message+0x3b8>)
 80069aa:	f020 f91f 	bl	8026bec <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 80069ae:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80069b2:	4619      	mov	r1, r3
 80069b4:	4852      	ldr	r0, [pc, #328]	; (8006b00 <Send_Status_Message+0x3bc>)
 80069b6:	f020 f919 	bl	8026bec <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 80069ba:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80069be:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80069c2:	441a      	add	r2, r3
 80069c4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80069c8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80069cc:	2108      	movs	r1, #8
 80069ce:	f7f9 fead 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 80069d2:	4b4c      	ldr	r3, [pc, #304]	; (8006b04 <Send_Status_Message+0x3c0>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	701a      	strb	r2, [r3, #0]
	{
 80069d8:	e020      	b.n	8006a1c <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 80069da:	4b4a      	ldr	r3, [pc, #296]	; (8006b04 <Send_Status_Message+0x3c0>)
 80069dc:	2200      	movs	r2, #0
 80069de:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 80069e0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80069e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80069e8:	18d1      	adds	r1, r2, r3
 80069ea:	79fb      	ldrb	r3, [r7, #7]
 80069ec:	483f      	ldr	r0, [pc, #252]	; (8006aec <Send_Status_Message+0x3a8>)
 80069ee:	011a      	lsls	r2, r3, #4
 80069f0:	4402      	add	r2, r0
 80069f2:	3202      	adds	r2, #2
 80069f4:	7812      	ldrb	r2, [r2, #0]
 80069f6:	3201      	adds	r2, #1
 80069f8:	b2d4      	uxtb	r4, r2
 80069fa:	483c      	ldr	r0, [pc, #240]	; (8006aec <Send_Status_Message+0x3a8>)
 80069fc:	011a      	lsls	r2, r3, #4
 80069fe:	4402      	add	r2, r0
 8006a00:	3202      	adds	r2, #2
 8006a02:	4620      	mov	r0, r4
 8006a04:	7010      	strb	r0, [r2, #0]
 8006a06:	4a39      	ldr	r2, [pc, #228]	; (8006aec <Send_Status_Message+0x3a8>)
 8006a08:	011b      	lsls	r3, r3, #4
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3302      	adds	r3, #2
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006a14:	460a      	mov	r2, r1
 8006a16:	2108      	movs	r1, #8
 8006a18:	f7f9 fe88 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8006a1c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006a20:	3308      	adds	r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	da00      	bge.n	8006a28 <Send_Status_Message+0x2e4>
 8006a26:	3307      	adds	r3, #7
 8006a28:	10db      	asrs	r3, r3, #3
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a30:	4413      	add	r3, r2
 8006a32:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006a36:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	b21b      	sxth	r3, r3
 8006a40:	425a      	negs	r2, r3
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	f002 0207 	and.w	r2, r2, #7
 8006a4a:	bf58      	it	pl
 8006a4c:	4253      	negpl	r3, r2
 8006a4e:	b21b      	sxth	r3, r3
 8006a50:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 8006a54:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a58:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a5c:	441a      	add	r2, r3
 8006a5e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006a62:	2304      	movs	r3, #4
 8006a64:	2108      	movs	r1, #8
 8006a66:	f7f9 fe61 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006a6a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006a6e:	3308      	adds	r3, #8
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	da00      	bge.n	8006a76 <Send_Status_Message+0x332>
 8006a74:	3307      	adds	r3, #7
 8006a76:	10db      	asrs	r3, r3, #3
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a7e:	4413      	add	r3, r2
 8006a80:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006a84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a88:	3308      	adds	r3, #8
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	b21b      	sxth	r3, r3
 8006a8e:	425a      	negs	r2, r3
 8006a90:	f003 0307 	and.w	r3, r3, #7
 8006a94:	f002 0207 	and.w	r2, r2, #7
 8006a98:	bf58      	it	pl
 8006a9a:	4253      	negpl	r3, r2
 8006a9c:	b21b      	sxth	r3, r3
 8006a9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	4a11      	ldr	r2, [pc, #68]	; (8006aec <Send_Status_Message+0x3a8>)
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3304      	adds	r3, #4
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d052      	beq.n	8006b5c <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006ab6:	79fb      	ldrb	r3, [r7, #7]
 8006ab8:	4a13      	ldr	r2, [pc, #76]	; (8006b08 <Send_Status_Message+0x3c4>)
 8006aba:	5cd3      	ldrb	r3, [r2, r3]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d125      	bne.n	8006b0c <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 8006ac0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006ac4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ac8:	441a      	add	r2, r3
 8006aca:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006ace:	2368      	movs	r3, #104	; 0x68
 8006ad0:	2110      	movs	r1, #16
 8006ad2:	f7f9 fe2b 	bl	800072c <InsertBits>
 8006ad6:	e024      	b.n	8006b22 <Send_Status_Message+0x3de>
 8006ad8:	20000504 	.word	0x20000504
 8006adc:	2000308c 	.word	0x2000308c
 8006ae0:	2000bcf8 	.word	0x2000bcf8
 8006ae4:	51eb851f 	.word	0x51eb851f
 8006ae8:	08028a94 	.word	0x08028a94
 8006aec:	200028f4 	.word	0x200028f4
 8006af0:	080290ac 	.word	0x080290ac
 8006af4:	080290cc 	.word	0x080290cc
 8006af8:	08028af8 	.word	0x08028af8
 8006afc:	080290ec 	.word	0x080290ec
 8006b00:	0802910c 	.word	0x0802910c
 8006b04:	200024af 	.word	0x200024af
 8006b08:	20002764 	.word	0x20002764
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006b0c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b10:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006b14:	441a      	add	r2, r3
 8006b16:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006b1a:	2328      	movs	r3, #40	; 0x28
 8006b1c:	2110      	movs	r1, #16
 8006b1e:	f7f9 fe05 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006b22:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006b26:	3310      	adds	r3, #16
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	da00      	bge.n	8006b2e <Send_Status_Message+0x3ea>
 8006b2c:	3307      	adds	r3, #7
 8006b2e:	10db      	asrs	r3, r3, #3
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b36:	4413      	add	r3, r2
 8006b38:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006b3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006b40:	3310      	adds	r3, #16
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	b21b      	sxth	r3, r3
 8006b46:	425a      	negs	r2, r3
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	f002 0207 	and.w	r2, r2, #7
 8006b50:	bf58      	it	pl
 8006b52:	4253      	negpl	r3, r2
 8006b54:	b21b      	sxth	r3, r3
 8006b56:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006b5a:	e03a      	b.n	8006bd2 <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	4a08      	ldr	r2, [pc, #32]	; (8006b80 <Send_Status_Message+0x43c>)
 8006b60:	5cd3      	ldrb	r3, [r2, r3]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d10e      	bne.n	8006b84 <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 8006b66:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006b6e:	441a      	add	r2, r3
 8006b70:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006b74:	2364      	movs	r3, #100	; 0x64
 8006b76:	2110      	movs	r1, #16
 8006b78:	f7f9 fdd8 	bl	800072c <InsertBits>
 8006b7c:	e00d      	b.n	8006b9a <Send_Status_Message+0x456>
 8006b7e:	bf00      	nop
 8006b80:	20002764 	.word	0x20002764
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 8006b84:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b88:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006b8c:	441a      	add	r2, r3
 8006b8e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006b92:	2324      	movs	r3, #36	; 0x24
 8006b94:	2110      	movs	r1, #16
 8006b96:	f7f9 fdc9 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006b9a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006b9e:	3310      	adds	r3, #16
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	da00      	bge.n	8006ba6 <Send_Status_Message+0x462>
 8006ba4:	3307      	adds	r3, #7
 8006ba6:	10db      	asrs	r3, r3, #3
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006bae:	4413      	add	r3, r2
 8006bb0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006bb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006bb8:	3310      	adds	r3, #16
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	b21b      	sxth	r3, r3
 8006bbe:	425a      	negs	r2, r3
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	f002 0207 	and.w	r2, r2, #7
 8006bc8:	bf58      	it	pl
 8006bca:	4253      	negpl	r3, r2
 8006bcc:	b21b      	sxth	r3, r3
 8006bce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	4ac6      	ldr	r2, [pc, #792]	; (8006ef0 <Send_Status_Message+0x7ac>)
 8006bd6:	011b      	lsls	r3, r3, #4
 8006bd8:	4413      	add	r3, r2
 8006bda:	3304      	adds	r3, #4
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 8139 	beq.w	8006e5e <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	4ac1      	ldr	r2, [pc, #772]	; (8006ef4 <Send_Status_Message+0x7b0>)
 8006bf0:	5cd3      	ldrb	r3, [r2, r3]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d114      	bne.n	8006c20 <Send_Status_Message+0x4dc>
		{
			Get_time();
 8006bf6:	f005 ff3d 	bl	800ca74 <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8006bfa:	79fa      	ldrb	r2, [r7, #7]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	4413      	add	r3, r2
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	4abc      	ldr	r2, [pc, #752]	; (8006ef8 <Send_Status_Message+0x7b4>)
 8006c06:	4413      	add	r3, r2
 8006c08:	4abc      	ldr	r2, [pc, #752]	; (8006efc <Send_Status_Message+0x7b8>)
 8006c0a:	6811      	ldr	r1, [r2, #0]
 8006c0c:	6019      	str	r1, [r3, #0]
 8006c0e:	8892      	ldrh	r2, [r2, #4]
 8006c10:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 8006c12:	48bb      	ldr	r0, [pc, #748]	; (8006f00 <Send_Status_Message+0x7bc>)
 8006c14:	f020 f886 	bl	8026d24 <puts>
			Change_MLK_TIME[Source_Index] = 0;
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	4ab6      	ldr	r2, [pc, #728]	; (8006ef4 <Send_Status_Message+0x7b0>)
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8006c20:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006c24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006c28:	18d1      	adds	r1, r2, r3
 8006c2a:	79fa      	ldrb	r2, [r7, #7]
 8006c2c:	48b2      	ldr	r0, [pc, #712]	; (8006ef8 <Send_Status_Message+0x7b4>)
 8006c2e:	4613      	mov	r3, r2
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	4413      	add	r3, r2
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	4403      	add	r3, r0
 8006c38:	3305      	adds	r3, #5
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006c40:	460a      	mov	r2, r1
 8006c42:	2108      	movs	r1, #8
 8006c44:	f7f9 fd72 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006c48:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	da00      	bge.n	8006c54 <Send_Status_Message+0x510>
 8006c52:	3307      	adds	r3, #7
 8006c54:	10db      	asrs	r3, r3, #3
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006c62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006c66:	3308      	adds	r3, #8
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	b21b      	sxth	r3, r3
 8006c6c:	425a      	negs	r2, r3
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	f002 0207 	and.w	r2, r2, #7
 8006c76:	bf58      	it	pl
 8006c78:	4253      	negpl	r3, r2
 8006c7a:	b21b      	sxth	r3, r3
 8006c7c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8006c80:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006c84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006c88:	18d1      	adds	r1, r2, r3
 8006c8a:	79fa      	ldrb	r2, [r7, #7]
 8006c8c:	489a      	ldr	r0, [pc, #616]	; (8006ef8 <Send_Status_Message+0x7b4>)
 8006c8e:	4613      	mov	r3, r2
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	4413      	add	r3, r2
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	4403      	add	r3, r0
 8006c98:	3304      	adds	r3, #4
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006ca0:	460a      	mov	r2, r1
 8006ca2:	2108      	movs	r1, #8
 8006ca4:	f7f9 fd42 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006ca8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006cac:	3308      	adds	r3, #8
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	da00      	bge.n	8006cb4 <Send_Status_Message+0x570>
 8006cb2:	3307      	adds	r3, #7
 8006cb4:	10db      	asrs	r3, r3, #3
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006cc2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	b21b      	sxth	r3, r3
 8006ccc:	425a      	negs	r2, r3
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	f002 0207 	and.w	r2, r2, #7
 8006cd6:	bf58      	it	pl
 8006cd8:	4253      	negpl	r3, r2
 8006cda:	b21b      	sxth	r3, r3
 8006cdc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8006ce0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006ce4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ce8:	18d1      	adds	r1, r2, r3
 8006cea:	79fa      	ldrb	r2, [r7, #7]
 8006cec:	4882      	ldr	r0, [pc, #520]	; (8006ef8 <Send_Status_Message+0x7b4>)
 8006cee:	4613      	mov	r3, r2
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	4413      	add	r3, r2
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	4403      	add	r3, r0
 8006cf8:	3303      	adds	r3, #3
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006d00:	460a      	mov	r2, r1
 8006d02:	2108      	movs	r1, #8
 8006d04:	f7f9 fd12 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006d08:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	da00      	bge.n	8006d14 <Send_Status_Message+0x5d0>
 8006d12:	3307      	adds	r3, #7
 8006d14:	10db      	asrs	r3, r3, #3
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006d22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d26:	3308      	adds	r3, #8
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	b21b      	sxth	r3, r3
 8006d2c:	425a      	negs	r2, r3
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	f002 0207 	and.w	r2, r2, #7
 8006d36:	bf58      	it	pl
 8006d38:	4253      	negpl	r3, r2
 8006d3a:	b21b      	sxth	r3, r3
 8006d3c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8006d40:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006d48:	18d1      	adds	r1, r2, r3
 8006d4a:	79fa      	ldrb	r2, [r7, #7]
 8006d4c:	486a      	ldr	r0, [pc, #424]	; (8006ef8 <Send_Status_Message+0x7b4>)
 8006d4e:	4613      	mov	r3, r2
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	4413      	add	r3, r2
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	4403      	add	r3, r0
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006d5e:	460a      	mov	r2, r1
 8006d60:	2108      	movs	r1, #8
 8006d62:	f7f9 fce3 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006d66:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006d6a:	3308      	adds	r3, #8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	da00      	bge.n	8006d72 <Send_Status_Message+0x62e>
 8006d70:	3307      	adds	r3, #7
 8006d72:	10db      	asrs	r3, r3, #3
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006d80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d84:	3308      	adds	r3, #8
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	b21b      	sxth	r3, r3
 8006d8a:	425a      	negs	r2, r3
 8006d8c:	f003 0307 	and.w	r3, r3, #7
 8006d90:	f002 0207 	and.w	r2, r2, #7
 8006d94:	bf58      	it	pl
 8006d96:	4253      	negpl	r3, r2
 8006d98:	b21b      	sxth	r3, r3
 8006d9a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8006d9e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006da2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006da6:	18d1      	adds	r1, r2, r3
 8006da8:	79fa      	ldrb	r2, [r7, #7]
 8006daa:	4853      	ldr	r0, [pc, #332]	; (8006ef8 <Send_Status_Message+0x7b4>)
 8006dac:	4613      	mov	r3, r2
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	4413      	add	r3, r2
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	4403      	add	r3, r0
 8006db6:	3301      	adds	r3, #1
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006dbe:	460a      	mov	r2, r1
 8006dc0:	2108      	movs	r1, #8
 8006dc2:	f7f9 fcb3 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006dc6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006dca:	3308      	adds	r3, #8
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	da00      	bge.n	8006dd2 <Send_Status_Message+0x68e>
 8006dd0:	3307      	adds	r3, #7
 8006dd2:	10db      	asrs	r3, r3, #3
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006dda:	4413      	add	r3, r2
 8006ddc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006de0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006de4:	3308      	adds	r3, #8
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	b21b      	sxth	r3, r3
 8006dea:	425a      	negs	r2, r3
 8006dec:	f003 0307 	and.w	r3, r3, #7
 8006df0:	f002 0207 	and.w	r2, r2, #7
 8006df4:	bf58      	it	pl
 8006df6:	4253      	negpl	r3, r2
 8006df8:	b21b      	sxth	r3, r3
 8006dfa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8006dfe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006e02:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006e06:	18d1      	adds	r1, r2, r3
 8006e08:	79fa      	ldrb	r2, [r7, #7]
 8006e0a:	483b      	ldr	r0, [pc, #236]	; (8006ef8 <Send_Status_Message+0x7b4>)
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	4413      	add	r3, r2
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	4403      	add	r3, r0
 8006e16:	3302      	adds	r3, #2
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006e1e:	460a      	mov	r2, r1
 8006e20:	2108      	movs	r1, #8
 8006e22:	f7f9 fc83 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006e26:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	da00      	bge.n	8006e32 <Send_Status_Message+0x6ee>
 8006e30:	3307      	adds	r3, #7
 8006e32:	10db      	asrs	r3, r3, #3
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006e40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e44:	3308      	adds	r3, #8
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	b21b      	sxth	r3, r3
 8006e4a:	425a      	negs	r2, r3
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	f002 0207 	and.w	r2, r2, #7
 8006e54:	bf58      	it	pl
 8006e56:	4253      	negpl	r3, r2
 8006e58:	b21b      	sxth	r3, r3
 8006e5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006e5e:	4b29      	ldr	r3, [pc, #164]	; (8006f04 <Send_Status_Message+0x7c0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	085b      	lsrs	r3, r3, #1
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d031      	beq.n	8006ed0 <Send_Status_Message+0x78c>
 8006e6c:	4b25      	ldr	r3, [pc, #148]	; (8006f04 <Send_Status_Message+0x7c0>)
 8006e6e:	791b      	ldrb	r3, [r3, #4]
 8006e70:	79fa      	ldrb	r2, [r7, #7]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d12c      	bne.n	8006ed0 <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 8006e7c:	4822      	ldr	r0, [pc, #136]	; (8006f08 <Send_Status_Message+0x7c4>)
 8006e7e:	f017 fb5d 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8006e82:	4602      	mov	r2, r0
 8006e84:	4b21      	ldr	r3, [pc, #132]	; (8006f0c <Send_Status_Message+0x7c8>)
 8006e86:	fba3 1302 	umull	r1, r3, r3, r2
 8006e8a:	0dd9      	lsrs	r1, r3, #23
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	041b      	lsls	r3, r3, #16
 8006e90:	1a5b      	subs	r3, r3, r1
 8006e92:	021b      	lsls	r3, r3, #8
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 8006e9a:	481d      	ldr	r0, [pc, #116]	; (8006f10 <Send_Status_Message+0x7cc>)
 8006e9c:	f01f ff42 	bl	8026d24 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006ea0:	79fb      	ldrb	r3, [r7, #7]
 8006ea2:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <Send_Status_Message+0x7ac>)
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	4413      	add	r3, r2
 8006ea8:	330c      	adds	r3, #12
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4619      	mov	r1, r3
 8006eae:	4819      	ldr	r0, [pc, #100]	; (8006f14 <Send_Status_Message+0x7d0>)
 8006eb0:	f01f fe9c 	bl	8026bec <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 8006eb4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006eb8:	4817      	ldr	r0, [pc, #92]	; (8006f18 <Send_Status_Message+0x7d4>)
 8006eba:	f01f fe97 	bl	8026bec <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 8006ebe:	f107 020c 	add.w	r2, r7, #12
 8006ec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ec6:	2118      	movs	r1, #24
 8006ec8:	2000      	movs	r0, #0
 8006eca:	f7f9 fc2f 	bl	800072c <InsertBits>
	{
 8006ece:	e00b      	b.n	8006ee8 <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	4a07      	ldr	r2, [pc, #28]	; (8006ef0 <Send_Status_Message+0x7ac>)
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	4413      	add	r3, r2
 8006ed8:	330c      	adds	r3, #12
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f107 020c 	add.w	r2, r7, #12
 8006ee0:	2118      	movs	r1, #24
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	f7f9 fc22 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006eee:	e027      	b.n	8006f40 <Send_Status_Message+0x7fc>
 8006ef0:	200028f4 	.word	0x200028f4
 8006ef4:	20002764 	.word	0x20002764
 8006ef8:	200028b8 	.word	0x200028b8
 8006efc:	20003fe4 	.word	0x20003fe4
 8006f00:	08028e50 	.word	0x08028e50
 8006f04:	2000308c 	.word	0x2000308c
 8006f08:	2000bcf8 	.word	0x2000bcf8
 8006f0c:	80008001 	.word	0x80008001
 8006f10:	08028e68 	.word	0x08028e68
 8006f14:	08028e8c 	.word	0x08028e8c
 8006f18:	08028eb0 	.word	0x08028eb0
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006f1c:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006f20:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f24:	3303      	adds	r3, #3
 8006f26:	3290      	adds	r2, #144	; 0x90
 8006f28:	443a      	add	r2, r7
 8006f2a:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8006f2e:	3390      	adds	r3, #144	; 0x90
 8006f30:	443b      	add	r3, r7
 8006f32:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8006f36:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006f40:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d8e6      	bhi.n	8006f1c <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8006f4e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006f52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006f56:	18d4      	adds	r4, r2, r3
 8006f58:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3303      	adds	r3, #3
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	f107 030c 	add.w	r3, r7, #12
 8006f66:	4611      	mov	r1, r2
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f00f f8a7 	bl	80160bc <CalculateDirectReverseCrc>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006f74:	4622      	mov	r2, r4
 8006f76:	2120      	movs	r1, #32
 8006f78:	f7f9 fbd8 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 8006f7c:	4b1f      	ldr	r3, [pc, #124]	; (8006ffc <Send_Status_Message+0x8b8>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 8006f82:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006f86:	3320      	adds	r3, #32
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	da00      	bge.n	8006f8e <Send_Status_Message+0x84a>
 8006f8c:	3307      	adds	r3, #7
 8006f8e:	10db      	asrs	r3, r3, #3
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006f96:	4413      	add	r3, r2
 8006f98:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006f9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006fa0:	3320      	adds	r3, #32
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	b21b      	sxth	r3, r3
 8006fa6:	425a      	negs	r2, r3
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	f002 0207 	and.w	r2, r2, #7
 8006fb0:	bf58      	it	pl
 8006fb2:	4253      	negpl	r3, r2
 8006fb4:	b21b      	sxth	r3, r3
 8006fb6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006fba:	4b11      	ldr	r3, [pc, #68]	; (8007000 <Send_Status_Message+0x8bc>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	0a5b      	lsrs	r3, r3, #9
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <Send_Status_Message+0x89c>
 8006fc8:	4b0d      	ldr	r3, [pc, #52]	; (8007000 <Send_Status_Message+0x8bc>)
 8006fca:	791b      	ldrb	r3, [r3, #4]
 8006fcc:	79fa      	ldrb	r2, [r7, #7]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d106      	bne.n	8006fe0 <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 8006fd2:	480c      	ldr	r0, [pc, #48]	; (8007004 <Send_Status_Message+0x8c0>)
 8006fd4:	f01f fea6 	bl	8026d24 <puts>
		printf("Not Sending Reply");
 8006fd8:	480b      	ldr	r0, [pc, #44]	; (8007008 <Send_Status_Message+0x8c4>)
 8006fda:	f01f fe07 	bl	8026bec <iprintf>
 8006fde:	e009      	b.n	8006ff4 <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 8006fe0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006fe4:	b2d9      	uxtb	r1, r3
 8006fe6:	79fa      	ldrb	r2, [r7, #7]
 8006fe8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006fec:	4618      	mov	r0, r3
 8006fee:	f001 f82d 	bl	800804c <Process_Sending_Reply>
	}
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	3794      	adds	r7, #148	; 0x94
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd90      	pop	{r4, r7, pc}
 8006ffc:	200024af 	.word	0x200024af
 8007000:	2000308c 	.word	0x2000308c
 8007004:	08028bc4 	.word	0x08028bc4
 8007008:	08028bdc 	.word	0x08028bdc

0800700c <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	4608      	mov	r0, r1
 8007016:	4611      	mov	r1, r2
 8007018:	461a      	mov	r2, r3
 800701a:	4603      	mov	r3, r0
 800701c:	70fb      	strb	r3, [r7, #3]
 800701e:	460b      	mov	r3, r1
 8007020:	70bb      	strb	r3, [r7, #2]
 8007022:	4613      	mov	r3, r2
 8007024:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = RESET;
 800702e:	2300      	movs	r3, #0
 8007030:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 8007032:	f012 fdd1 	bl	8019bd8 <HAL_GetTick>
 8007036:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 8007038:	2300      	movs	r3, #0
 800703a:	81fb      	strh	r3, [r7, #14]
 800703c:	2300      	movs	r3, #0
 800703e:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	b29b      	uxth	r3, r3
 8007044:	3b05      	subs	r3, #5
 8007046:	b29b      	uxth	r3, r3
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f00f f836 	bl	80160bc <CalculateDirectReverseCrc>
 8007050:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 8007052:	78fb      	ldrb	r3, [r7, #3]
 8007054:	3b05      	subs	r3, #5
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	441a      	add	r2, r3
 800705a:	89bb      	ldrh	r3, [r7, #12]
 800705c:	2120      	movs	r1, #32
 800705e:	4618      	mov	r0, r3
 8007060:	f7f9 fad8 	bl	8000614 <ExtractBits>
 8007064:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	429a      	cmp	r2, r3
 800706c:	d01c      	beq.n	80070a8 <Service_Msg_Extr+0x9c>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800706e:	78bb      	ldrb	r3, [r7, #2]
 8007070:	4a09      	ldr	r2, [pc, #36]	; (8007098 <Service_Msg_Extr+0x8c>)
 8007072:	3366      	adds	r3, #102	; 0x66
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	4619      	mov	r1, r3
 800707c:	4807      	ldr	r0, [pc, #28]	; (800709c <Service_Msg_Extr+0x90>)
 800707e:	f01f fdb5 	bl	8026bec <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 8007082:	6979      	ldr	r1, [r7, #20]
 8007084:	4806      	ldr	r0, [pc, #24]	; (80070a0 <Service_Msg_Extr+0x94>)
 8007086:	f01f fdb1 	bl	8026bec <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 800708a:	69b9      	ldr	r1, [r7, #24]
 800708c:	4805      	ldr	r0, [pc, #20]	; (80070a4 <Service_Msg_Extr+0x98>)
 800708e:	f01f fdad 	bl	8026bec <iprintf>
		return;
 8007092:	f000 bc0e 	b.w	80078b2 <Service_Msg_Extr+0x8a6>
 8007096:	bf00      	nop
 8007098:	20000504 	.word	0x20000504
 800709c:	08029130 	.word	0x08029130
 80070a0:	08028930 	.word	0x08028930
 80070a4:	08028940 	.word	0x08028940
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 80070a8:	78bb      	ldrb	r3, [r7, #2]
 80070aa:	49ae      	ldr	r1, [pc, #696]	; (8007364 <Service_Msg_Extr+0x358>)
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 80070b2:	78bb      	ldrb	r3, [r7, #2]
 80070b4:	49ac      	ldr	r1, [pc, #688]	; (8007368 <Service_Msg_Extr+0x35c>)
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 80070bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070c0:	3308      	adds	r3, #8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	da00      	bge.n	80070c8 <Service_Msg_Extr+0xbc>
 80070c6:	3307      	adds	r3, #7
 80070c8:	10db      	asrs	r3, r3, #3
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	89fb      	ldrh	r3, [r7, #14]
 80070ce:	4413      	add	r3, r2
 80070d0:	81fb      	strh	r3, [r7, #14]
 80070d2:	89bb      	ldrh	r3, [r7, #12]
 80070d4:	3308      	adds	r3, #8
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	b21b      	sxth	r3, r3
 80070da:	425a      	negs	r2, r3
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	f002 0207 	and.w	r2, r2, #7
 80070e4:	bf58      	it	pl
 80070e6:	4253      	negpl	r3, r2
 80070e8:	b21b      	sxth	r3, r3
 80070ea:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80070ec:	89fb      	ldrh	r3, [r7, #14]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	441a      	add	r2, r3
 80070f2:	89bb      	ldrh	r3, [r7, #12]
 80070f4:	2110      	movs	r1, #16
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7f9 fa8c 	bl	8000614 <ExtractBits>
 80070fc:	4603      	mov	r3, r0
 80070fe:	78ba      	ldrb	r2, [r7, #2]
 8007100:	b298      	uxth	r0, r3
 8007102:	499a      	ldr	r1, [pc, #616]	; (800736c <Service_Msg_Extr+0x360>)
 8007104:	4613      	mov	r3, r2
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	3306      	adds	r3, #6
 8007110:	4602      	mov	r2, r0
 8007112:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8007114:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007118:	3310      	adds	r3, #16
 800711a:	2b00      	cmp	r3, #0
 800711c:	da00      	bge.n	8007120 <Service_Msg_Extr+0x114>
 800711e:	3307      	adds	r3, #7
 8007120:	10db      	asrs	r3, r3, #3
 8007122:	b29a      	uxth	r2, r3
 8007124:	89fb      	ldrh	r3, [r7, #14]
 8007126:	4413      	add	r3, r2
 8007128:	81fb      	strh	r3, [r7, #14]
 800712a:	89bb      	ldrh	r3, [r7, #12]
 800712c:	3310      	adds	r3, #16
 800712e:	b29b      	uxth	r3, r3
 8007130:	b21b      	sxth	r3, r3
 8007132:	425a      	negs	r2, r3
 8007134:	f003 0307 	and.w	r3, r3, #7
 8007138:	f002 0207 	and.w	r2, r2, #7
 800713c:	bf58      	it	pl
 800713e:	4253      	negpl	r3, r2
 8007140:	b21b      	sxth	r3, r3
 8007142:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8007144:	89fb      	ldrh	r3, [r7, #14]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	441a      	add	r2, r3
 800714a:	89bb      	ldrh	r3, [r7, #12]
 800714c:	2110      	movs	r1, #16
 800714e:	4618      	mov	r0, r3
 8007150:	f7f9 fa60 	bl	8000614 <ExtractBits>
 8007154:	4603      	mov	r3, r0
 8007156:	78ba      	ldrb	r2, [r7, #2]
 8007158:	b298      	uxth	r0, r3
 800715a:	4984      	ldr	r1, [pc, #528]	; (800736c <Service_Msg_Extr+0x360>)
 800715c:	4613      	mov	r3, r2
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	3304      	adds	r3, #4
 8007168:	4602      	mov	r2, r0
 800716a:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 800716c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007170:	3310      	adds	r3, #16
 8007172:	2b00      	cmp	r3, #0
 8007174:	da00      	bge.n	8007178 <Service_Msg_Extr+0x16c>
 8007176:	3307      	adds	r3, #7
 8007178:	10db      	asrs	r3, r3, #3
 800717a:	b29a      	uxth	r2, r3
 800717c:	89fb      	ldrh	r3, [r7, #14]
 800717e:	4413      	add	r3, r2
 8007180:	81fb      	strh	r3, [r7, #14]
 8007182:	89bb      	ldrh	r3, [r7, #12]
 8007184:	3310      	adds	r3, #16
 8007186:	b29b      	uxth	r3, r3
 8007188:	b21b      	sxth	r3, r3
 800718a:	425a      	negs	r2, r3
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	f002 0207 	and.w	r2, r2, #7
 8007194:	bf58      	it	pl
 8007196:	4253      	negpl	r3, r2
 8007198:	b21b      	sxth	r3, r3
 800719a:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800719c:	89fb      	ldrh	r3, [r7, #14]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	441a      	add	r2, r3
 80071a2:	89bb      	ldrh	r3, [r7, #12]
 80071a4:	2108      	movs	r1, #8
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7f9 fa34 	bl	8000614 <ExtractBits>
 80071ac:	4602      	mov	r2, r0
 80071ae:	78bb      	ldrb	r3, [r7, #2]
 80071b0:	b2d1      	uxtb	r1, r2
 80071b2:	4a6f      	ldr	r2, [pc, #444]	; (8007370 <Service_Msg_Extr+0x364>)
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	4413      	add	r3, r2
 80071b8:	3302      	adds	r3, #2
 80071ba:	460a      	mov	r2, r1
 80071bc:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 80071be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80071c2:	3308      	adds	r3, #8
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	da00      	bge.n	80071ca <Service_Msg_Extr+0x1be>
 80071c8:	3307      	adds	r3, #7
 80071ca:	10db      	asrs	r3, r3, #3
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	89fb      	ldrh	r3, [r7, #14]
 80071d0:	4413      	add	r3, r2
 80071d2:	81fb      	strh	r3, [r7, #14]
 80071d4:	89bb      	ldrh	r3, [r7, #12]
 80071d6:	3308      	adds	r3, #8
 80071d8:	b29b      	uxth	r3, r3
 80071da:	b21b      	sxth	r3, r3
 80071dc:	425a      	negs	r2, r3
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	f002 0207 	and.w	r2, r2, #7
 80071e6:	bf58      	it	pl
 80071e8:	4253      	negpl	r3, r2
 80071ea:	b21b      	sxth	r3, r3
 80071ec:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80071ee:	89fb      	ldrh	r3, [r7, #14]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	441a      	add	r2, r3
 80071f4:	89bb      	ldrh	r3, [r7, #12]
 80071f6:	2108      	movs	r1, #8
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7f9 fa0b 	bl	8000614 <ExtractBits>
 80071fe:	4602      	mov	r2, r0
 8007200:	78bb      	ldrb	r3, [r7, #2]
 8007202:	b2d1      	uxtb	r1, r2
 8007204:	4a5a      	ldr	r2, [pc, #360]	; (8007370 <Service_Msg_Extr+0x364>)
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	4413      	add	r3, r2
 800720a:	3301      	adds	r3, #1
 800720c:	460a      	mov	r2, r1
 800720e:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8007210:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007214:	3308      	adds	r3, #8
 8007216:	2b00      	cmp	r3, #0
 8007218:	da00      	bge.n	800721c <Service_Msg_Extr+0x210>
 800721a:	3307      	adds	r3, #7
 800721c:	10db      	asrs	r3, r3, #3
 800721e:	b29a      	uxth	r2, r3
 8007220:	89fb      	ldrh	r3, [r7, #14]
 8007222:	4413      	add	r3, r2
 8007224:	81fb      	strh	r3, [r7, #14]
 8007226:	89bb      	ldrh	r3, [r7, #12]
 8007228:	3308      	adds	r3, #8
 800722a:	b29b      	uxth	r3, r3
 800722c:	b21b      	sxth	r3, r3
 800722e:	425a      	negs	r2, r3
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	f002 0207 	and.w	r2, r2, #7
 8007238:	bf58      	it	pl
 800723a:	4253      	negpl	r3, r2
 800723c:	b21b      	sxth	r3, r3
 800723e:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8007240:	89fb      	ldrh	r3, [r7, #14]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	441a      	add	r2, r3
 8007246:	89bb      	ldrh	r3, [r7, #12]
 8007248:	2108      	movs	r1, #8
 800724a:	4618      	mov	r0, r3
 800724c:	f7f9 f9e2 	bl	8000614 <ExtractBits>
 8007250:	4603      	mov	r3, r0
 8007252:	78ba      	ldrb	r2, [r7, #2]
 8007254:	b2d8      	uxtb	r0, r3
 8007256:	4945      	ldr	r1, [pc, #276]	; (800736c <Service_Msg_Extr+0x360>)
 8007258:	4613      	mov	r3, r2
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	440b      	add	r3, r1
 8007262:	3302      	adds	r3, #2
 8007264:	4602      	mov	r2, r0
 8007266:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8007268:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800726c:	3308      	adds	r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	da00      	bge.n	8007274 <Service_Msg_Extr+0x268>
 8007272:	3307      	adds	r3, #7
 8007274:	10db      	asrs	r3, r3, #3
 8007276:	b29a      	uxth	r2, r3
 8007278:	89fb      	ldrh	r3, [r7, #14]
 800727a:	4413      	add	r3, r2
 800727c:	81fb      	strh	r3, [r7, #14]
 800727e:	89bb      	ldrh	r3, [r7, #12]
 8007280:	3308      	adds	r3, #8
 8007282:	b29b      	uxth	r3, r3
 8007284:	b21b      	sxth	r3, r3
 8007286:	425a      	negs	r2, r3
 8007288:	f003 0307 	and.w	r3, r3, #7
 800728c:	f002 0207 	and.w	r2, r2, #7
 8007290:	bf58      	it	pl
 8007292:	4253      	negpl	r3, r2
 8007294:	b21b      	sxth	r3, r3
 8007296:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8007298:	89fb      	ldrh	r3, [r7, #14]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	441a      	add	r2, r3
 800729e:	89bb      	ldrh	r3, [r7, #12]
 80072a0:	2110      	movs	r1, #16
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7f9 f9b6 	bl	8000614 <ExtractBits>
 80072a8:	4602      	mov	r2, r0
 80072aa:	78bb      	ldrb	r3, [r7, #2]
 80072ac:	b291      	uxth	r1, r2
 80072ae:	4a30      	ldr	r2, [pc, #192]	; (8007370 <Service_Msg_Extr+0x364>)
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	4413      	add	r3, r2
 80072b4:	3304      	adds	r3, #4
 80072b6:	460a      	mov	r2, r1
 80072b8:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80072ba:	492e      	ldr	r1, [pc, #184]	; (8007374 <Service_Msg_Extr+0x368>)
 80072bc:	482e      	ldr	r0, [pc, #184]	; (8007378 <Service_Msg_Extr+0x36c>)
 80072be:	f7f8 ffbf 	bl	8000240 <strcmp>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10f      	bne.n	80072e8 <Service_Msg_Extr+0x2dc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80072c8:	78bb      	ldrb	r3, [r7, #2]
 80072ca:	4a29      	ldr	r2, [pc, #164]	; (8007370 <Service_Msg_Extr+0x364>)
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	4413      	add	r3, r2
 80072d0:	3304      	adds	r3, #4
 80072d2:	881a      	ldrh	r2, [r3, #0]
 80072d4:	78bb      	ldrb	r3, [r7, #2]
 80072d6:	f042 0208 	orr.w	r2, r2, #8
 80072da:	b291      	uxth	r1, r2
 80072dc:	4a24      	ldr	r2, [pc, #144]	; (8007370 <Service_Msg_Extr+0x364>)
 80072de:	011b      	lsls	r3, r3, #4
 80072e0:	4413      	add	r3, r2
 80072e2:	3304      	adds	r3, #4
 80072e4:	460a      	mov	r2, r1
 80072e6:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 80072e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80072ec:	3310      	adds	r3, #16
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	da00      	bge.n	80072f4 <Service_Msg_Extr+0x2e8>
 80072f2:	3307      	adds	r3, #7
 80072f4:	10db      	asrs	r3, r3, #3
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	89fb      	ldrh	r3, [r7, #14]
 80072fa:	4413      	add	r3, r2
 80072fc:	81fb      	strh	r3, [r7, #14]
 80072fe:	89bb      	ldrh	r3, [r7, #12]
 8007300:	3310      	adds	r3, #16
 8007302:	b29b      	uxth	r3, r3
 8007304:	b21b      	sxth	r3, r3
 8007306:	425a      	negs	r2, r3
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	f002 0207 	and.w	r2, r2, #7
 8007310:	bf58      	it	pl
 8007312:	4253      	negpl	r3, r2
 8007314:	b21b      	sxth	r3, r3
 8007316:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 8007318:	78bb      	ldrb	r3, [r7, #2]
 800731a:	4a15      	ldr	r2, [pc, #84]	; (8007370 <Service_Msg_Extr+0x364>)
 800731c:	011b      	lsls	r3, r3, #4
 800731e:	4413      	add	r3, r2
 8007320:	3304      	adds	r3, #4
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	f003 0320 	and.w	r3, r3, #32
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 8126 	beq.w	800757a <Service_Msg_Extr+0x56e>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800732e:	89fb      	ldrh	r3, [r7, #14]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	441a      	add	r2, r3
 8007334:	89bb      	ldrh	r3, [r7, #12]
 8007336:	2108      	movs	r1, #8
 8007338:	4618      	mov	r0, r3
 800733a:	f7f9 f96b 	bl	8000614 <ExtractBits>
 800733e:	4603      	mov	r3, r0
 8007340:	78ba      	ldrb	r2, [r7, #2]
 8007342:	b2d8      	uxtb	r0, r3
 8007344:	490d      	ldr	r1, [pc, #52]	; (800737c <Service_Msg_Extr+0x370>)
 8007346:	4613      	mov	r3, r2
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	4413      	add	r3, r2
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	440b      	add	r3, r1
 8007350:	3305      	adds	r3, #5
 8007352:	4602      	mov	r2, r0
 8007354:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8007356:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800735a:	3308      	adds	r3, #8
 800735c:	2b00      	cmp	r3, #0
 800735e:	da0f      	bge.n	8007380 <Service_Msg_Extr+0x374>
 8007360:	3307      	adds	r3, #7
 8007362:	e00d      	b.n	8007380 <Service_Msg_Extr+0x374>
 8007364:	20002630 	.word	0x20002630
 8007368:	20002658 	.word	0x20002658
 800736c:	20002cb4 	.word	0x20002cb4
 8007370:	200028f4 	.word	0x200028f4
 8007374:	080286ec 	.word	0x080286ec
 8007378:	20000505 	.word	0x20000505
 800737c:	200028b8 	.word	0x200028b8
 8007380:	10db      	asrs	r3, r3, #3
 8007382:	b29a      	uxth	r2, r3
 8007384:	89fb      	ldrh	r3, [r7, #14]
 8007386:	4413      	add	r3, r2
 8007388:	81fb      	strh	r3, [r7, #14]
 800738a:	89bb      	ldrh	r3, [r7, #12]
 800738c:	3308      	adds	r3, #8
 800738e:	b29b      	uxth	r3, r3
 8007390:	b21b      	sxth	r3, r3
 8007392:	425a      	negs	r2, r3
 8007394:	f003 0307 	and.w	r3, r3, #7
 8007398:	f002 0207 	and.w	r2, r2, #7
 800739c:	bf58      	it	pl
 800739e:	4253      	negpl	r3, r2
 80073a0:	b21b      	sxth	r3, r3
 80073a2:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80073a4:	89fb      	ldrh	r3, [r7, #14]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	441a      	add	r2, r3
 80073aa:	89bb      	ldrh	r3, [r7, #12]
 80073ac:	2108      	movs	r1, #8
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7f9 f930 	bl	8000614 <ExtractBits>
 80073b4:	4603      	mov	r3, r0
 80073b6:	78ba      	ldrb	r2, [r7, #2]
 80073b8:	b2d8      	uxtb	r0, r3
 80073ba:	4989      	ldr	r1, [pc, #548]	; (80075e0 <Service_Msg_Extr+0x5d4>)
 80073bc:	4613      	mov	r3, r2
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	4413      	add	r3, r2
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	440b      	add	r3, r1
 80073c6:	3304      	adds	r3, #4
 80073c8:	4602      	mov	r2, r0
 80073ca:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 80073cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80073d0:	3308      	adds	r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	da00      	bge.n	80073d8 <Service_Msg_Extr+0x3cc>
 80073d6:	3307      	adds	r3, #7
 80073d8:	10db      	asrs	r3, r3, #3
 80073da:	b29a      	uxth	r2, r3
 80073dc:	89fb      	ldrh	r3, [r7, #14]
 80073de:	4413      	add	r3, r2
 80073e0:	81fb      	strh	r3, [r7, #14]
 80073e2:	89bb      	ldrh	r3, [r7, #12]
 80073e4:	3308      	adds	r3, #8
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	b21b      	sxth	r3, r3
 80073ea:	425a      	negs	r2, r3
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	f002 0207 	and.w	r2, r2, #7
 80073f4:	bf58      	it	pl
 80073f6:	4253      	negpl	r3, r2
 80073f8:	b21b      	sxth	r3, r3
 80073fa:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80073fc:	89fb      	ldrh	r3, [r7, #14]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	441a      	add	r2, r3
 8007402:	89bb      	ldrh	r3, [r7, #12]
 8007404:	2108      	movs	r1, #8
 8007406:	4618      	mov	r0, r3
 8007408:	f7f9 f904 	bl	8000614 <ExtractBits>
 800740c:	4603      	mov	r3, r0
 800740e:	78ba      	ldrb	r2, [r7, #2]
 8007410:	b2d8      	uxtb	r0, r3
 8007412:	4973      	ldr	r1, [pc, #460]	; (80075e0 <Service_Msg_Extr+0x5d4>)
 8007414:	4613      	mov	r3, r2
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	4413      	add	r3, r2
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	440b      	add	r3, r1
 800741e:	3303      	adds	r3, #3
 8007420:	4602      	mov	r2, r0
 8007422:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8007424:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007428:	3308      	adds	r3, #8
 800742a:	2b00      	cmp	r3, #0
 800742c:	da00      	bge.n	8007430 <Service_Msg_Extr+0x424>
 800742e:	3307      	adds	r3, #7
 8007430:	10db      	asrs	r3, r3, #3
 8007432:	b29a      	uxth	r2, r3
 8007434:	89fb      	ldrh	r3, [r7, #14]
 8007436:	4413      	add	r3, r2
 8007438:	81fb      	strh	r3, [r7, #14]
 800743a:	89bb      	ldrh	r3, [r7, #12]
 800743c:	3308      	adds	r3, #8
 800743e:	b29b      	uxth	r3, r3
 8007440:	b21b      	sxth	r3, r3
 8007442:	425a      	negs	r2, r3
 8007444:	f003 0307 	and.w	r3, r3, #7
 8007448:	f002 0207 	and.w	r2, r2, #7
 800744c:	bf58      	it	pl
 800744e:	4253      	negpl	r3, r2
 8007450:	b21b      	sxth	r3, r3
 8007452:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8007454:	89fb      	ldrh	r3, [r7, #14]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	441a      	add	r2, r3
 800745a:	89bb      	ldrh	r3, [r7, #12]
 800745c:	2108      	movs	r1, #8
 800745e:	4618      	mov	r0, r3
 8007460:	f7f9 f8d8 	bl	8000614 <ExtractBits>
 8007464:	4603      	mov	r3, r0
 8007466:	78ba      	ldrb	r2, [r7, #2]
 8007468:	b2d8      	uxtb	r0, r3
 800746a:	495d      	ldr	r1, [pc, #372]	; (80075e0 <Service_Msg_Extr+0x5d4>)
 800746c:	4613      	mov	r3, r2
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	4413      	add	r3, r2
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	440b      	add	r3, r1
 8007476:	4602      	mov	r2, r0
 8007478:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 800747a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800747e:	3308      	adds	r3, #8
 8007480:	2b00      	cmp	r3, #0
 8007482:	da00      	bge.n	8007486 <Service_Msg_Extr+0x47a>
 8007484:	3307      	adds	r3, #7
 8007486:	10db      	asrs	r3, r3, #3
 8007488:	b29a      	uxth	r2, r3
 800748a:	89fb      	ldrh	r3, [r7, #14]
 800748c:	4413      	add	r3, r2
 800748e:	81fb      	strh	r3, [r7, #14]
 8007490:	89bb      	ldrh	r3, [r7, #12]
 8007492:	3308      	adds	r3, #8
 8007494:	b29b      	uxth	r3, r3
 8007496:	b21b      	sxth	r3, r3
 8007498:	425a      	negs	r2, r3
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	f002 0207 	and.w	r2, r2, #7
 80074a2:	bf58      	it	pl
 80074a4:	4253      	negpl	r3, r2
 80074a6:	b21b      	sxth	r3, r3
 80074a8:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80074aa:	89fb      	ldrh	r3, [r7, #14]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	441a      	add	r2, r3
 80074b0:	89bb      	ldrh	r3, [r7, #12]
 80074b2:	2108      	movs	r1, #8
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7f9 f8ad 	bl	8000614 <ExtractBits>
 80074ba:	4603      	mov	r3, r0
 80074bc:	78ba      	ldrb	r2, [r7, #2]
 80074be:	b2d8      	uxtb	r0, r3
 80074c0:	4947      	ldr	r1, [pc, #284]	; (80075e0 <Service_Msg_Extr+0x5d4>)
 80074c2:	4613      	mov	r3, r2
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	4413      	add	r3, r2
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	440b      	add	r3, r1
 80074cc:	3301      	adds	r3, #1
 80074ce:	4602      	mov	r2, r0
 80074d0:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 80074d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80074d6:	3308      	adds	r3, #8
 80074d8:	2b00      	cmp	r3, #0
 80074da:	da00      	bge.n	80074de <Service_Msg_Extr+0x4d2>
 80074dc:	3307      	adds	r3, #7
 80074de:	10db      	asrs	r3, r3, #3
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	89fb      	ldrh	r3, [r7, #14]
 80074e4:	4413      	add	r3, r2
 80074e6:	81fb      	strh	r3, [r7, #14]
 80074e8:	89bb      	ldrh	r3, [r7, #12]
 80074ea:	3308      	adds	r3, #8
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	b21b      	sxth	r3, r3
 80074f0:	425a      	negs	r2, r3
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	f002 0207 	and.w	r2, r2, #7
 80074fa:	bf58      	it	pl
 80074fc:	4253      	negpl	r3, r2
 80074fe:	b21b      	sxth	r3, r3
 8007500:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8007502:	89fb      	ldrh	r3, [r7, #14]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	441a      	add	r2, r3
 8007508:	89bb      	ldrh	r3, [r7, #12]
 800750a:	2108      	movs	r1, #8
 800750c:	4618      	mov	r0, r3
 800750e:	f7f9 f881 	bl	8000614 <ExtractBits>
 8007512:	4603      	mov	r3, r0
 8007514:	78ba      	ldrb	r2, [r7, #2]
 8007516:	b2d8      	uxtb	r0, r3
 8007518:	4931      	ldr	r1, [pc, #196]	; (80075e0 <Service_Msg_Extr+0x5d4>)
 800751a:	4613      	mov	r3, r2
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	4413      	add	r3, r2
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	440b      	add	r3, r1
 8007524:	3302      	adds	r3, #2
 8007526:	4602      	mov	r2, r0
 8007528:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 800752a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800752e:	3308      	adds	r3, #8
 8007530:	2b00      	cmp	r3, #0
 8007532:	da00      	bge.n	8007536 <Service_Msg_Extr+0x52a>
 8007534:	3307      	adds	r3, #7
 8007536:	10db      	asrs	r3, r3, #3
 8007538:	b29a      	uxth	r2, r3
 800753a:	89fb      	ldrh	r3, [r7, #14]
 800753c:	4413      	add	r3, r2
 800753e:	81fb      	strh	r3, [r7, #14]
 8007540:	89bb      	ldrh	r3, [r7, #12]
 8007542:	3308      	adds	r3, #8
 8007544:	b29b      	uxth	r3, r3
 8007546:	b21b      	sxth	r3, r3
 8007548:	425a      	negs	r2, r3
 800754a:	f003 0307 	and.w	r3, r3, #7
 800754e:	f002 0207 	and.w	r2, r2, #7
 8007552:	bf58      	it	pl
 8007554:	4253      	negpl	r3, r2
 8007556:	b21b      	sxth	r3, r3
 8007558:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 800755a:	78bb      	ldrb	r3, [r7, #2]
 800755c:	4618      	mov	r0, r3
 800755e:	f002 f997 	bl	8009890 <IS_MLK_EIPC_TIME_MATCHING>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d004      	beq.n	8007572 <Service_Msg_Extr+0x566>
 8007568:	78bb      	ldrb	r3, [r7, #2]
 800756a:	4a1e      	ldr	r2, [pc, #120]	; (80075e4 <Service_Msg_Extr+0x5d8>)
 800756c:	2100      	movs	r1, #0
 800756e:	54d1      	strb	r1, [r2, r3]
 8007570:	e003      	b.n	800757a <Service_Msg_Extr+0x56e>
 8007572:	78bb      	ldrb	r3, [r7, #2]
 8007574:	4a1b      	ldr	r2, [pc, #108]	; (80075e4 <Service_Msg_Extr+0x5d8>)
 8007576:	2101      	movs	r1, #1
 8007578:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 800757a:	78bb      	ldrb	r3, [r7, #2]
 800757c:	4a1a      	ldr	r2, [pc, #104]	; (80075e8 <Service_Msg_Extr+0x5dc>)
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	4413      	add	r3, r2
 8007582:	3304      	adds	r3, #4
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <Service_Msg_Extr+0x586>
	{
		LinkEstablishFlag = SET;
 800758e:	2301      	movs	r3, #1
 8007590:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 8007592:	787a      	ldrb	r2, [r7, #1]
 8007594:	78bb      	ldrb	r3, [r7, #2]
 8007596:	4611      	mov	r1, r2
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff f8d3 	bl	8006744 <Send_Status_Message>
	/* Preparing and Sending Reply */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (LastActCount[Source_Index] < MAX_LAST_ACT_COUNT) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET) && (Act_InactiveFlag[Source_Index] == SET))
 800759e:	78bb      	ldrb	r3, [r7, #2]
 80075a0:	4a12      	ldr	r2, [pc, #72]	; (80075ec <Service_Msg_Extr+0x5e0>)
 80075a2:	4413      	add	r3, r2
 80075a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d127      	bne.n	80075fc <Service_Msg_Extr+0x5f0>
 80075ac:	78bb      	ldrb	r3, [r7, #2]
 80075ae:	4a10      	ldr	r2, [pc, #64]	; (80075f0 <Service_Msg_Extr+0x5e4>)
 80075b0:	5cd3      	ldrb	r3, [r2, r3]
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d822      	bhi.n	80075fc <Service_Msg_Extr+0x5f0>
 80075b6:	78ba      	ldrb	r2, [r7, #2]
 80075b8:	490e      	ldr	r1, [pc, #56]	; (80075f4 <Service_Msg_Extr+0x5e8>)
 80075ba:	4613      	mov	r3, r2
 80075bc:	005b      	lsls	r3, r3, #1
 80075be:	4413      	add	r3, r2
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	440b      	add	r3, r1
 80075c4:	3305      	adds	r3, #5
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d115      	bne.n	80075fc <Service_Msg_Extr+0x5f0>
 80075d0:	78bb      	ldrb	r3, [r7, #2]
 80075d2:	4a09      	ldr	r2, [pc, #36]	; (80075f8 <Service_Msg_Extr+0x5ec>)
 80075d4:	5cd3      	ldrb	r3, [r2, r3]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d110      	bne.n	80075fc <Service_Msg_Extr+0x5f0>
	{
		LinkEstablishFlag = RESET;
 80075da:	2300      	movs	r3, #0
 80075dc:	77fb      	strb	r3, [r7, #31]
 80075de:	e037      	b.n	8007650 <Service_Msg_Extr+0x644>
 80075e0:	200028b8 	.word	0x200028b8
 80075e4:	20002764 	.word	0x20002764
 80075e8:	200028f4 	.word	0x200028f4
 80075ec:	20000504 	.word	0x20000504
 80075f0:	20002544 	.word	0x20002544
 80075f4:	20002ad4 	.word	0x20002ad4
 80075f8:	20002538 	.word	0x20002538
	}
	else if (EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80075fc:	78bb      	ldrb	r3, [r7, #2]
 80075fe:	4aae      	ldr	r2, [pc, #696]	; (80078b8 <Service_Msg_Extr+0x8ac>)
 8007600:	4413      	add	r3, r2
 8007602:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007606:	2b02      	cmp	r3, #2
 8007608:	d122      	bne.n	8007650 <Service_Msg_Extr+0x644>
	{
		printf("LAC[%lu]:%u\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index],LastActCount[Source_Index]);
 800760a:	78bb      	ldrb	r3, [r7, #2]
 800760c:	4aaa      	ldr	r2, [pc, #680]	; (80078b8 <Service_Msg_Extr+0x8ac>)
 800760e:	3366      	adds	r3, #102	; 0x66
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	6859      	ldr	r1, [r3, #4]
 8007616:	78bb      	ldrb	r3, [r7, #2]
 8007618:	4aa8      	ldr	r2, [pc, #672]	; (80078bc <Service_Msg_Extr+0x8b0>)
 800761a:	5cd3      	ldrb	r3, [r2, r3]
 800761c:	461a      	mov	r2, r3
 800761e:	48a8      	ldr	r0, [pc, #672]	; (80078c0 <Service_Msg_Extr+0x8b4>)
 8007620:	f01f fae4 	bl	8026bec <iprintf>
		printf("Act_InactiveFlag:%u\n",Act_InactiveFlag[Source_Index]);
 8007624:	78bb      	ldrb	r3, [r7, #2]
 8007626:	4aa7      	ldr	r2, [pc, #668]	; (80078c4 <Service_Msg_Extr+0x8b8>)
 8007628:	5cd3      	ldrb	r3, [r2, r3]
 800762a:	4619      	mov	r1, r3
 800762c:	48a6      	ldr	r0, [pc, #664]	; (80078c8 <Service_Msg_Extr+0x8bc>)
 800762e:	f01f fadd 	bl	8026bec <iprintf>
		printf("OnlineBit:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 8007632:	78ba      	ldrb	r2, [r7, #2]
 8007634:	49a5      	ldr	r1, [pc, #660]	; (80078cc <Service_Msg_Extr+0x8c0>)
 8007636:	4613      	mov	r3, r2
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	4413      	add	r3, r2
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	440b      	add	r3, r1
 8007640:	3305      	adds	r3, #5
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	4619      	mov	r1, r3
 800764a:	48a1      	ldr	r0, [pc, #644]	; (80078d0 <Service_Msg_Extr+0x8c4>)
 800764c:	f01f face 	bl	8026bec <iprintf>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 8007650:	7ffb      	ldrb	r3, [r7, #31]
 8007652:	2b01      	cmp	r3, #1
 8007654:	f040 8083 	bne.w	800775e <Service_Msg_Extr+0x752>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8007658:	78ba      	ldrb	r2, [r7, #2]
 800765a:	4613      	mov	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4a9c      	ldr	r2, [pc, #624]	; (80078d4 <Service_Msg_Extr+0x8c8>)
 8007664:	4413      	add	r3, r2
 8007666:	3301      	adds	r3, #1
 8007668:	2210      	movs	r2, #16
 800766a:	2100      	movs	r1, #0
 800766c:	4618      	mov	r0, r3
 800766e:	f01f f9d5 	bl	8026a1c <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8007672:	78ba      	ldrb	r2, [r7, #2]
 8007674:	4613      	mov	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4a95      	ldr	r2, [pc, #596]	; (80078d4 <Service_Msg_Extr+0x8c8>)
 800767e:	1898      	adds	r0, r3, r2
 8007680:	78ba      	ldrb	r2, [r7, #2]
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4a93      	ldr	r2, [pc, #588]	; (80078d8 <Service_Msg_Extr+0x8cc>)
 800768c:	4413      	add	r3, r2
 800768e:	2214      	movs	r2, #20
 8007690:	4619      	mov	r1, r3
 8007692:	f01f f99b 	bl	80269cc <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8007696:	78bb      	ldrb	r3, [r7, #2]
 8007698:	4a90      	ldr	r2, [pc, #576]	; (80078dc <Service_Msg_Extr+0x8d0>)
 800769a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800769e:	78ba      	ldrb	r2, [r7, #2]
 80076a0:	488c      	ldr	r0, [pc, #560]	; (80078d4 <Service_Msg_Extr+0x8c8>)
 80076a2:	4613      	mov	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4403      	add	r3, r0
 80076ac:	3312      	adds	r3, #18
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	4299      	cmp	r1, r3
 80076b2:	d054      	beq.n	800775e <Service_Msg_Extr+0x752>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80076b4:	78ba      	ldrb	r2, [r7, #2]
 80076b6:	78b9      	ldrb	r1, [r7, #2]
 80076b8:	4886      	ldr	r0, [pc, #536]	; (80078d4 <Service_Msg_Extr+0x8c8>)
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4403      	add	r3, r0
 80076c4:	3312      	adds	r3, #18
 80076c6:	881a      	ldrh	r2, [r3, #0]
 80076c8:	4b84      	ldr	r3, [pc, #528]	; (80078dc <Service_Msg_Extr+0x8d0>)
 80076ca:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 80076ce:	2214      	movs	r2, #20
 80076d0:	2100      	movs	r1, #0
 80076d2:	4883      	ldr	r0, [pc, #524]	; (80078e0 <Service_Msg_Extr+0x8d4>)
 80076d4:	f01f f9a2 	bl	8026a1c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 80076d8:	78ba      	ldrb	r2, [r7, #2]
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4a7c      	ldr	r2, [pc, #496]	; (80078d4 <Service_Msg_Extr+0x8c8>)
 80076e4:	4413      	add	r3, r2
 80076e6:	2214      	movs	r2, #20
 80076e8:	4619      	mov	r1, r3
 80076ea:	487d      	ldr	r0, [pc, #500]	; (80078e0 <Service_Msg_Extr+0x8d4>)
 80076ec:	f01f f96e 	bl	80269cc <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 80076f0:	f240 2007 	movw	r0, #519	; 0x207
 80076f4:	f009 fd06 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80076f8:	78b9      	ldrb	r1, [r7, #2]
 80076fa:	78ba      	ldrb	r2, [r7, #2]
 80076fc:	4875      	ldr	r0, [pc, #468]	; (80078d4 <Service_Msg_Extr+0x8c8>)
 80076fe:	460b      	mov	r3, r1
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	440b      	add	r3, r1
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4403      	add	r3, r0
 8007708:	3312      	adds	r3, #18
 800770a:	8818      	ldrh	r0, [r3, #0]
 800770c:	4975      	ldr	r1, [pc, #468]	; (80078e4 <Service_Msg_Extr+0x8d8>)
 800770e:	4613      	mov	r3, r2
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	4413      	add	r3, r2
 8007714:	00db      	lsls	r3, r3, #3
 8007716:	440b      	add	r3, r1
 8007718:	3306      	adds	r3, #6
 800771a:	4602      	mov	r2, r0
 800771c:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 800771e:	78bb      	ldrb	r3, [r7, #2]
 8007720:	4a71      	ldr	r2, [pc, #452]	; (80078e8 <Service_Msg_Extr+0x8dc>)
 8007722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d119      	bne.n	800775e <Service_Msg_Extr+0x752>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800772a:	78bb      	ldrb	r3, [r7, #2]
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	4a6f      	ldr	r2, [pc, #444]	; (80078ec <Service_Msg_Extr+0x8e0>)
 8007730:	4413      	add	r3, r2
 8007732:	1c98      	adds	r0, r3, #2
 8007734:	78ba      	ldrb	r2, [r7, #2]
 8007736:	4613      	mov	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4a65      	ldr	r2, [pc, #404]	; (80078d4 <Service_Msg_Extr+0x8c8>)
 8007740:	4413      	add	r3, r2
 8007742:	3301      	adds	r3, #1
 8007744:	2210      	movs	r2, #16
 8007746:	4619      	mov	r1, r3
 8007748:	f01f f940 	bl	80269cc <memcpy>
#ifdef EI_1
				ReArrangedVitalData();
 800774c:	f002 ff9e 	bl	800a68c <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 8007750:	f240 1019 	movw	r0, #281	; 0x119
 8007754:	f009 fcd6 	bl	8011104 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8007758:	4a65      	ldr	r2, [pc, #404]	; (80078f0 <Service_Msg_Extr+0x8e4>)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	6013      	str	r3, [r2, #0]
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 800775e:	78ba      	ldrb	r2, [r7, #2]
 8007760:	4960      	ldr	r1, [pc, #384]	; (80078e4 <Service_Msg_Extr+0x8d8>)
 8007762:	4613      	mov	r3, r2
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	4413      	add	r3, r2
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	440b      	add	r3, r1
 800776c:	3314      	adds	r3, #20
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 8007772:	78ba      	ldrb	r2, [r7, #2]
 8007774:	495b      	ldr	r1, [pc, #364]	; (80078e4 <Service_Msg_Extr+0x8d8>)
 8007776:	4613      	mov	r3, r2
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	4413      	add	r3, r2
 800777c:	00db      	lsls	r3, r3, #3
 800777e:	440b      	add	r3, r1
 8007780:	3305      	adds	r3, #5
 8007782:	2206      	movs	r2, #6
 8007784:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8007786:	78ba      	ldrb	r2, [r7, #2]
 8007788:	4956      	ldr	r1, [pc, #344]	; (80078e4 <Service_Msg_Extr+0x8d8>)
 800778a:	4613      	mov	r3, r2
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	4413      	add	r3, r2
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	440b      	add	r3, r1
 8007794:	78ba      	ldrb	r2, [r7, #2]
 8007796:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8007798:	78ba      	ldrb	r2, [r7, #2]
 800779a:	4952      	ldr	r1, [pc, #328]	; (80078e4 <Service_Msg_Extr+0x8d8>)
 800779c:	4613      	mov	r3, r2
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	4413      	add	r3, r2
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	440b      	add	r3, r1
 80077a6:	3301      	adds	r3, #1
 80077a8:	2201      	movs	r2, #1
 80077aa:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 80077ac:	78ba      	ldrb	r2, [r7, #2]
 80077ae:	494d      	ldr	r1, [pc, #308]	; (80078e4 <Service_Msg_Extr+0x8d8>)
 80077b0:	4613      	mov	r3, r2
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	4413      	add	r3, r2
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	440b      	add	r3, r1
 80077ba:	3302      	adds	r3, #2
 80077bc:	7ffa      	ldrb	r2, [r7, #31]
 80077be:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80077c0:	2218      	movs	r2, #24
 80077c2:	2100      	movs	r1, #0
 80077c4:	484b      	ldr	r0, [pc, #300]	; (80078f4 <Service_Msg_Extr+0x8e8>)
 80077c6:	f01f f929 	bl	8026a1c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80077ca:	78ba      	ldrb	r2, [r7, #2]
 80077cc:	4613      	mov	r3, r2
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	4413      	add	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	4a43      	ldr	r2, [pc, #268]	; (80078e4 <Service_Msg_Extr+0x8d8>)
 80077d6:	4413      	add	r3, r2
 80077d8:	2218      	movs	r2, #24
 80077da:	4619      	mov	r1, r3
 80077dc:	4845      	ldr	r0, [pc, #276]	; (80078f4 <Service_Msg_Extr+0x8e8>)
 80077de:	f01f f8f5 	bl	80269cc <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 80077e2:	f240 2001 	movw	r0, #513	; 0x201
 80077e6:	f009 fc8d 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80077ea:	78ba      	ldrb	r2, [r7, #2]
 80077ec:	493d      	ldr	r1, [pc, #244]	; (80078e4 <Service_Msg_Extr+0x8d8>)
 80077ee:	4613      	mov	r3, r2
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	4413      	add	r3, r2
 80077f4:	00db      	lsls	r3, r3, #3
 80077f6:	440b      	add	r3, r1
 80077f8:	3301      	adds	r3, #1
 80077fa:	2200      	movs	r2, #0
 80077fc:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80077fe:	78bb      	ldrb	r3, [r7, #2]
 8007800:	493d      	ldr	r1, [pc, #244]	; (80078f8 <Service_Msg_Extr+0x8ec>)
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 8007808:	7ffb      	ldrb	r3, [r7, #31]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d11d      	bne.n	800784a <Service_Msg_Extr+0x83e>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 800780e:	78bb      	ldrb	r3, [r7, #2]
 8007810:	493a      	ldr	r1, [pc, #232]	; (80078fc <Service_Msg_Extr+0x8f0>)
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SelfLinkFlag[Source_Index] = SET;
 8007818:	78bb      	ldrb	r3, [r7, #2]
 800781a:	4a39      	ldr	r2, [pc, #228]	; (8007900 <Service_Msg_Extr+0x8f4>)
 800781c:	2101      	movs	r1, #1
 800781e:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8007820:	78ba      	ldrb	r2, [r7, #2]
 8007822:	4938      	ldr	r1, [pc, #224]	; (8007904 <Service_Msg_Extr+0x8f8>)
 8007824:	4613      	mov	r3, r2
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	4413      	add	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	440b      	add	r3, r1
 800782e:	3301      	adds	r3, #1
 8007830:	2201      	movs	r2, #1
 8007832:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8007834:	78ba      	ldrb	r2, [r7, #2]
 8007836:	4933      	ldr	r1, [pc, #204]	; (8007904 <Service_Msg_Extr+0x8f8>)
 8007838:	4613      	mov	r3, r2
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	440b      	add	r3, r1
 8007842:	3304      	adds	r3, #4
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e02e      	b.n	80078a8 <Service_Msg_Extr+0x89c>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 800784a:	78bb      	ldrb	r3, [r7, #2]
 800784c:	4a2c      	ldr	r2, [pc, #176]	; (8007900 <Service_Msg_Extr+0x8f4>)
 800784e:	2100      	movs	r1, #0
 8007850:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8007852:	78ba      	ldrb	r2, [r7, #2]
 8007854:	492b      	ldr	r1, [pc, #172]	; (8007904 <Service_Msg_Extr+0x8f8>)
 8007856:	4613      	mov	r3, r2
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	3308      	adds	r3, #8
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 8007866:	78ba      	ldrb	r2, [r7, #2]
 8007868:	4926      	ldr	r1, [pc, #152]	; (8007904 <Service_Msg_Extr+0x8f8>)
 800786a:	4613      	mov	r3, r2
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	3301      	adds	r3, #1
 8007876:	2200      	movs	r2, #0
 8007878:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800787a:	78ba      	ldrb	r2, [r7, #2]
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4a13      	ldr	r2, [pc, #76]	; (80078d4 <Service_Msg_Extr+0x8c8>)
 8007886:	4413      	add	r3, r2
 8007888:	3301      	adds	r3, #1
 800788a:	2210      	movs	r2, #16
 800788c:	2100      	movs	r1, #0
 800788e:	4618      	mov	r0, r3
 8007890:	f01f f8c4 	bl	8026a1c <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 8007894:	78ba      	ldrb	r2, [r7, #2]
 8007896:	490f      	ldr	r1, [pc, #60]	; (80078d4 <Service_Msg_Extr+0x8c8>)
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	440b      	add	r3, r1
 80078a2:	3312      	adds	r3, #18
 80078a4:	2200      	movs	r2, #0
 80078a6:	801a      	strh	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80078a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078ac:	4816      	ldr	r0, [pc, #88]	; (8007908 <Service_Msg_Extr+0x8fc>)
 80078ae:	f014 fe7c 	bl	801c5aa <HAL_GPIO_TogglePin>

}
 80078b2:	3720      	adds	r7, #32
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	20000504 	.word	0x20000504
 80078bc:	20002544 	.word	0x20002544
 80078c0:	08029074 	.word	0x08029074
 80078c4:	20002538 	.word	0x20002538
 80078c8:	08029084 	.word	0x08029084
 80078cc:	20002ad4 	.word	0x20002ad4
 80078d0:	0802909c 	.word	0x0802909c
 80078d4:	200035b0 	.word	0x200035b0
 80078d8:	200034e8 	.word	0x200034e8
 80078dc:	2000258c 	.word	0x2000258c
 80078e0:	20003740 	.word	0x20003740
 80078e4:	20002da4 	.word	0x20002da4
 80078e8:	20002550 	.word	0x20002550
 80078ec:	20002770 	.word	0x20002770
 80078f0:	200024e4 	.word	0x200024e4
 80078f4:	20002f84 	.word	0x20002f84
 80078f8:	200024b8 	.word	0x200024b8
 80078fc:	200025a0 	.word	0x200025a0
 8007900:	200025f0 	.word	0x200025f0
 8007904:	200033f8 	.word	0x200033f8
 8007908:	40021c00 	.word	0x40021c00

0800790c <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 800790c:	b590      	push	{r4, r7, lr}
 800790e:	b095      	sub	sp, #84	; 0x54
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	460a      	mov	r2, r1
 8007916:	71fb      	strb	r3, [r7, #7]
 8007918:	4613      	mov	r3, r2
 800791a:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	f107 0310 	add.w	r3, r7, #16
 8007924:	2238      	movs	r2, #56	; 0x38
 8007926:	2100      	movs	r1, #0
 8007928:	4618      	mov	r0, r3
 800792a:	f01f f877 	bl	8026a1c <memset>

	BITSTUFFINIT(0, 0);
 800792e:	2300      	movs	r3, #0
 8007930:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007934:	2300      	movs	r3, #0
 8007936:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 800793a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800793e:	f107 020c 	add.w	r2, r7, #12
 8007942:	441a      	add	r2, r3
 8007944:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007948:	23f4      	movs	r3, #244	; 0xf4
 800794a:	2108      	movs	r1, #8
 800794c:	f7f8 feee 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007950:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007954:	3308      	adds	r3, #8
 8007956:	2b00      	cmp	r3, #0
 8007958:	da00      	bge.n	800795c <Send_Service_Signal_Message+0x50>
 800795a:	3307      	adds	r3, #7
 800795c:	10db      	asrs	r3, r3, #3
 800795e:	b29a      	uxth	r2, r3
 8007960:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007964:	4413      	add	r3, r2
 8007966:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800796a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800796e:	3308      	adds	r3, #8
 8007970:	b29b      	uxth	r3, r3
 8007972:	b21b      	sxth	r3, r3
 8007974:	425a      	negs	r2, r3
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	f002 0207 	and.w	r2, r2, #7
 800797e:	bf58      	it	pl
 8007980:	4253      	negpl	r3, r2
 8007982:	b21b      	sxth	r3, r3
 8007984:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 8007988:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800798c:	f107 020c 	add.w	r2, r7, #12
 8007990:	441a      	add	r2, r3
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	497b      	ldr	r1, [pc, #492]	; (8007b84 <Send_Service_Signal_Message+0x278>)
 8007996:	3366      	adds	r3, #102	; 0x66
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	440b      	add	r3, r1
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80079a2:	2110      	movs	r1, #16
 80079a4:	f7f8 fec2 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80079a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80079ac:	3310      	adds	r3, #16
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	da00      	bge.n	80079b4 <Send_Service_Signal_Message+0xa8>
 80079b2:	3307      	adds	r3, #7
 80079b4:	10db      	asrs	r3, r3, #3
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80079bc:	4413      	add	r3, r2
 80079be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80079c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80079c6:	3310      	adds	r3, #16
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	b21b      	sxth	r3, r3
 80079cc:	425a      	negs	r2, r3
 80079ce:	f003 0307 	and.w	r3, r3, #7
 80079d2:	f002 0207 	and.w	r2, r2, #7
 80079d6:	bf58      	it	pl
 80079d8:	4253      	negpl	r3, r2
 80079da:	b21b      	sxth	r3, r3
 80079dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 80079e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80079e4:	f107 020c 	add.w	r2, r7, #12
 80079e8:	441a      	add	r2, r3
 80079ea:	79fb      	ldrb	r3, [r7, #7]
 80079ec:	4965      	ldr	r1, [pc, #404]	; (8007b84 <Send_Service_Signal_Message+0x278>)
 80079ee:	3370      	adds	r3, #112	; 0x70
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	440b      	add	r3, r1
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80079fa:	2110      	movs	r1, #16
 80079fc:	f7f8 fe96 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8007a00:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007a04:	3310      	adds	r3, #16
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	da00      	bge.n	8007a0c <Send_Service_Signal_Message+0x100>
 8007a0a:	3307      	adds	r3, #7
 8007a0c:	10db      	asrs	r3, r3, #3
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a14:	4413      	add	r3, r2
 8007a16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007a1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007a1e:	3310      	adds	r3, #16
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	b21b      	sxth	r3, r3
 8007a24:	425a      	negs	r2, r3
 8007a26:	f003 0307 	and.w	r3, r3, #7
 8007a2a:	f002 0207 	and.w	r2, r2, #7
 8007a2e:	bf58      	it	pl
 8007a30:	4253      	negpl	r3, r2
 8007a32:	b21b      	sxth	r3, r3
 8007a34:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007a38:	4b53      	ldr	r3, [pc, #332]	; (8007b88 <Send_Service_Signal_Message+0x27c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	089b      	lsrs	r3, r3, #2
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d035      	beq.n	8007ab2 <Send_Service_Signal_Message+0x1a6>
 8007a46:	4b50      	ldr	r3, [pc, #320]	; (8007b88 <Send_Service_Signal_Message+0x27c>)
 8007a48:	791b      	ldrb	r3, [r3, #4]
 8007a4a:	79fa      	ldrb	r2, [r7, #7]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d130      	bne.n	8007ab2 <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8007a56:	484d      	ldr	r0, [pc, #308]	; (8007b8c <Send_Service_Signal_Message+0x280>)
 8007a58:	f016 fd70 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	4b4c      	ldr	r3, [pc, #304]	; (8007b90 <Send_Service_Signal_Message+0x284>)
 8007a60:	fba3 1302 	umull	r1, r3, r3, r2
 8007a64:	099b      	lsrs	r3, r3, #6
 8007a66:	21c8      	movs	r1, #200	; 0xc8
 8007a68:	fb01 f303 	mul.w	r3, r1, r3
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 8007a72:	4848      	ldr	r0, [pc, #288]	; (8007b94 <Send_Service_Signal_Message+0x288>)
 8007a74:	f01f f956 	bl	8026d24 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8007a78:	79fb      	ldrb	r3, [r7, #7]
 8007a7a:	4a47      	ldr	r2, [pc, #284]	; (8007b98 <Send_Service_Signal_Message+0x28c>)
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	4413      	add	r3, r2
 8007a80:	3301      	adds	r3, #1
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	4619      	mov	r1, r3
 8007a86:	4845      	ldr	r0, [pc, #276]	; (8007b9c <Send_Service_Signal_Message+0x290>)
 8007a88:	f01f f8b0 	bl	8026bec <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8007a8c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007a90:	4619      	mov	r1, r3
 8007a92:	4843      	ldr	r0, [pc, #268]	; (8007ba0 <Send_Service_Signal_Message+0x294>)
 8007a94:	f01f f8aa 	bl	8026bec <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 8007a98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a9c:	f107 020c 	add.w	r2, r7, #12
 8007aa0:	441a      	add	r2, r3
 8007aa2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007aa6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007aaa:	2108      	movs	r1, #8
 8007aac:	f7f8 fe3e 	bl	800072c <InsertBits>
	{
 8007ab0:	e00f      	b.n	8007ad2 <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8007ab2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ab6:	f107 020c 	add.w	r2, r7, #12
 8007aba:	441a      	add	r2, r3
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	4936      	ldr	r1, [pc, #216]	; (8007b98 <Send_Service_Signal_Message+0x28c>)
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	440b      	add	r3, r1
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007acc:	2108      	movs	r1, #8
 8007ace:	f7f8 fe2d 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8007ad2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	da00      	bge.n	8007ade <Send_Service_Signal_Message+0x1d2>
 8007adc:	3307      	adds	r3, #7
 8007ade:	10db      	asrs	r3, r3, #3
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007aec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007af0:	3308      	adds	r3, #8
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	b21b      	sxth	r3, r3
 8007af6:	425a      	negs	r2, r3
 8007af8:	f003 0307 	and.w	r3, r3, #7
 8007afc:	f002 0207 	and.w	r2, r2, #7
 8007b00:	bf58      	it	pl
 8007b02:	4253      	negpl	r3, r2
 8007b04:	b21b      	sxth	r3, r3
 8007b06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007b0a:	4b1f      	ldr	r3, [pc, #124]	; (8007b88 <Send_Service_Signal_Message+0x27c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	08db      	lsrs	r3, r3, #3
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d04b      	beq.n	8007bb0 <Send_Service_Signal_Message+0x2a4>
 8007b18:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <Send_Service_Signal_Message+0x27c>)
 8007b1a:	791b      	ldrb	r3, [r3, #4]
 8007b1c:	79fa      	ldrb	r2, [r7, #7]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d146      	bne.n	8007bb0 <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8007b28:	4818      	ldr	r0, [pc, #96]	; (8007b8c <Send_Service_Signal_Message+0x280>)
 8007b2a:	f016 fd07 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	4b17      	ldr	r3, [pc, #92]	; (8007b90 <Send_Service_Signal_Message+0x284>)
 8007b32:	fba3 1302 	umull	r1, r3, r3, r2
 8007b36:	099b      	lsrs	r3, r3, #6
 8007b38:	21c8      	movs	r1, #200	; 0xc8
 8007b3a:	fb01 f303 	mul.w	r3, r1, r3
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 8007b44:	4817      	ldr	r0, [pc, #92]	; (8007ba4 <Send_Service_Signal_Message+0x298>)
 8007b46:	f01f f8ed 	bl	8026d24 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	4a12      	ldr	r2, [pc, #72]	; (8007b98 <Send_Service_Signal_Message+0x28c>)
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	4413      	add	r3, r2
 8007b52:	3302      	adds	r3, #2
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	4619      	mov	r1, r3
 8007b58:	4813      	ldr	r0, [pc, #76]	; (8007ba8 <Send_Service_Signal_Message+0x29c>)
 8007b5a:	f01f f847 	bl	8026bec <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8007b5e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007b62:	4619      	mov	r1, r3
 8007b64:	4811      	ldr	r0, [pc, #68]	; (8007bac <Send_Service_Signal_Message+0x2a0>)
 8007b66:	f01f f841 	bl	8026bec <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 8007b6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b6e:	f107 020c 	add.w	r2, r7, #12
 8007b72:	441a      	add	r2, r3
 8007b74:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007b78:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007b7c:	2108      	movs	r1, #8
 8007b7e:	f7f8 fdd5 	bl	800072c <InsertBits>
	{
 8007b82:	e033      	b.n	8007bec <Send_Service_Signal_Message+0x2e0>
 8007b84:	20000504 	.word	0x20000504
 8007b88:	2000308c 	.word	0x2000308c
 8007b8c:	2000bcf8 	.word	0x2000bcf8
 8007b90:	51eb851f 	.word	0x51eb851f
 8007b94:	08028a94 	.word	0x08028a94
 8007b98:	200028f4 	.word	0x200028f4
 8007b9c:	080290ac 	.word	0x080290ac
 8007ba0:	080290cc 	.word	0x080290cc
 8007ba4:	08028af8 	.word	0x08028af8
 8007ba8:	080290ec 	.word	0x080290ec
 8007bac:	0802910c 	.word	0x0802910c
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8007bb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007bb4:	f107 020c 	add.w	r2, r7, #12
 8007bb8:	18d1      	adds	r1, r2, r3
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	484e      	ldr	r0, [pc, #312]	; (8007cf8 <Send_Service_Signal_Message+0x3ec>)
 8007bbe:	011a      	lsls	r2, r3, #4
 8007bc0:	4402      	add	r2, r0
 8007bc2:	3202      	adds	r2, #2
 8007bc4:	7812      	ldrb	r2, [r2, #0]
 8007bc6:	3201      	adds	r2, #1
 8007bc8:	b2d4      	uxtb	r4, r2
 8007bca:	484b      	ldr	r0, [pc, #300]	; (8007cf8 <Send_Service_Signal_Message+0x3ec>)
 8007bcc:	011a      	lsls	r2, r3, #4
 8007bce:	4402      	add	r2, r0
 8007bd0:	3202      	adds	r2, #2
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	7010      	strb	r0, [r2, #0]
 8007bd6:	4a48      	ldr	r2, [pc, #288]	; (8007cf8 <Send_Service_Signal_Message+0x3ec>)
 8007bd8:	011b      	lsls	r3, r3, #4
 8007bda:	4413      	add	r3, r2
 8007bdc:	3302      	adds	r3, #2
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007be4:	460a      	mov	r2, r1
 8007be6:	2108      	movs	r1, #8
 8007be8:	f7f8 fda0 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8007bec:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	da00      	bge.n	8007bf8 <Send_Service_Signal_Message+0x2ec>
 8007bf6:	3307      	adds	r3, #7
 8007bf8:	10db      	asrs	r3, r3, #3
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c00:	4413      	add	r3, r2
 8007c02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	b21b      	sxth	r3, r3
 8007c10:	425a      	negs	r2, r3
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	f002 0207 	and.w	r2, r2, #7
 8007c1a:	bf58      	it	pl
 8007c1c:	4253      	negpl	r3, r2
 8007c1e:	b21b      	sxth	r3, r3
 8007c20:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 8007c24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c28:	f107 020c 	add.w	r2, r7, #12
 8007c2c:	441a      	add	r2, r3
 8007c2e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007c32:	2306      	movs	r3, #6
 8007c34:	2108      	movs	r1, #8
 8007c36:	f7f8 fd79 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007c3a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007c3e:	3308      	adds	r3, #8
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	da00      	bge.n	8007c46 <Send_Service_Signal_Message+0x33a>
 8007c44:	3307      	adds	r3, #7
 8007c46:	10db      	asrs	r3, r3, #3
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c4e:	4413      	add	r3, r2
 8007c50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c58:	3308      	adds	r3, #8
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	b21b      	sxth	r3, r3
 8007c5e:	425a      	negs	r2, r3
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	f002 0207 	and.w	r2, r2, #7
 8007c68:	bf58      	it	pl
 8007c6a:	4253      	negpl	r3, r2
 8007c6c:	b21b      	sxth	r3, r3
 8007c6e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	4a21      	ldr	r2, [pc, #132]	; (8007cfc <Send_Service_Signal_Message+0x3f0>)
 8007c76:	5cd3      	ldrb	r3, [r2, r3]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d147      	bne.n	8007d0c <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 8007c7c:	f004 fefa 	bl	800ca74 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8007c80:	79fa      	ldrb	r2, [r7, #7]
 8007c82:	4613      	mov	r3, r2
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	4413      	add	r3, r2
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	4a1d      	ldr	r2, [pc, #116]	; (8007d00 <Send_Service_Signal_Message+0x3f4>)
 8007c8c:	4413      	add	r3, r2
 8007c8e:	4a1d      	ldr	r2, [pc, #116]	; (8007d04 <Send_Service_Signal_Message+0x3f8>)
 8007c90:	6811      	ldr	r1, [r2, #0]
 8007c92:	6019      	str	r1, [r3, #0]
 8007c94:	8892      	ldrh	r2, [r2, #4]
 8007c96:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 8007c98:	481b      	ldr	r0, [pc, #108]	; (8007d08 <Send_Service_Signal_Message+0x3fc>)
 8007c9a:	f01f f843 	bl	8026d24 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	4a16      	ldr	r2, [pc, #88]	; (8007cfc <Send_Service_Signal_Message+0x3f0>)
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 8007ca6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007caa:	f107 020c 	add.w	r2, r7, #12
 8007cae:	441a      	add	r2, r3
 8007cb0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007cb4:	2369      	movs	r3, #105	; 0x69
 8007cb6:	2110      	movs	r1, #16
 8007cb8:	f7f8 fd38 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007cbc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007cc0:	3310      	adds	r3, #16
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	da00      	bge.n	8007cc8 <Send_Service_Signal_Message+0x3bc>
 8007cc6:	3307      	adds	r3, #7
 8007cc8:	10db      	asrs	r3, r3, #3
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007cd6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007cda:	3310      	adds	r3, #16
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	b21b      	sxth	r3, r3
 8007ce0:	425a      	negs	r2, r3
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	f002 0207 	and.w	r2, r2, #7
 8007cea:	bf58      	it	pl
 8007cec:	4253      	negpl	r3, r2
 8007cee:	b21b      	sxth	r3, r3
 8007cf0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007cf4:	e031      	b.n	8007d5a <Send_Service_Signal_Message+0x44e>
 8007cf6:	bf00      	nop
 8007cf8:	200028f4 	.word	0x200028f4
 8007cfc:	20002764 	.word	0x20002764
 8007d00:	200028b8 	.word	0x200028b8
 8007d04:	20003fe4 	.word	0x20003fe4
 8007d08:	08028e50 	.word	0x08028e50
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 8007d0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d10:	f107 020c 	add.w	r2, r7, #12
 8007d14:	441a      	add	r2, r3
 8007d16:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007d1a:	2329      	movs	r3, #41	; 0x29
 8007d1c:	2110      	movs	r1, #16
 8007d1e:	f7f8 fd05 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007d22:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007d26:	3310      	adds	r3, #16
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	da00      	bge.n	8007d2e <Send_Service_Signal_Message+0x422>
 8007d2c:	3307      	adds	r3, #7
 8007d2e:	10db      	asrs	r3, r3, #3
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d36:	4413      	add	r3, r2
 8007d38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007d3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007d40:	3310      	adds	r3, #16
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	b21b      	sxth	r3, r3
 8007d46:	425a      	negs	r2, r3
 8007d48:	f003 0307 	and.w	r3, r3, #7
 8007d4c:	f002 0207 	and.w	r2, r2, #7
 8007d50:	bf58      	it	pl
 8007d52:	4253      	negpl	r3, r2
 8007d54:	b21b      	sxth	r3, r3
 8007d56:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8007d5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d5e:	f107 020c 	add.w	r2, r7, #12
 8007d62:	18d1      	adds	r1, r2, r3
 8007d64:	79fa      	ldrb	r2, [r7, #7]
 8007d66:	48b5      	ldr	r0, [pc, #724]	; (800803c <Send_Service_Signal_Message+0x730>)
 8007d68:	4613      	mov	r3, r2
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	4413      	add	r3, r2
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	4403      	add	r3, r0
 8007d72:	3305      	adds	r3, #5
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007d7a:	460a      	mov	r2, r1
 8007d7c:	2108      	movs	r1, #8
 8007d7e:	f7f8 fcd5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007d82:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007d86:	3308      	adds	r3, #8
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	da00      	bge.n	8007d8e <Send_Service_Signal_Message+0x482>
 8007d8c:	3307      	adds	r3, #7
 8007d8e:	10db      	asrs	r3, r3, #3
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d96:	4413      	add	r3, r2
 8007d98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007d9c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007da0:	3308      	adds	r3, #8
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	b21b      	sxth	r3, r3
 8007da6:	425a      	negs	r2, r3
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	f002 0207 	and.w	r2, r2, #7
 8007db0:	bf58      	it	pl
 8007db2:	4253      	negpl	r3, r2
 8007db4:	b21b      	sxth	r3, r3
 8007db6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8007dba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007dbe:	f107 020c 	add.w	r2, r7, #12
 8007dc2:	18d1      	adds	r1, r2, r3
 8007dc4:	79fa      	ldrb	r2, [r7, #7]
 8007dc6:	489d      	ldr	r0, [pc, #628]	; (800803c <Send_Service_Signal_Message+0x730>)
 8007dc8:	4613      	mov	r3, r2
 8007dca:	005b      	lsls	r3, r3, #1
 8007dcc:	4413      	add	r3, r2
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	4403      	add	r3, r0
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007dda:	460a      	mov	r2, r1
 8007ddc:	2108      	movs	r1, #8
 8007dde:	f7f8 fca5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007de2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007de6:	3308      	adds	r3, #8
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	da00      	bge.n	8007dee <Send_Service_Signal_Message+0x4e2>
 8007dec:	3307      	adds	r3, #7
 8007dee:	10db      	asrs	r3, r3, #3
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007df6:	4413      	add	r3, r2
 8007df8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007dfc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007e00:	3308      	adds	r3, #8
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	b21b      	sxth	r3, r3
 8007e06:	425a      	negs	r2, r3
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	f002 0207 	and.w	r2, r2, #7
 8007e10:	bf58      	it	pl
 8007e12:	4253      	negpl	r3, r2
 8007e14:	b21b      	sxth	r3, r3
 8007e16:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8007e1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e1e:	f107 020c 	add.w	r2, r7, #12
 8007e22:	18d1      	adds	r1, r2, r3
 8007e24:	79fa      	ldrb	r2, [r7, #7]
 8007e26:	4885      	ldr	r0, [pc, #532]	; (800803c <Send_Service_Signal_Message+0x730>)
 8007e28:	4613      	mov	r3, r2
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	4413      	add	r3, r2
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	4403      	add	r3, r0
 8007e32:	3303      	adds	r3, #3
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007e3a:	460a      	mov	r2, r1
 8007e3c:	2108      	movs	r1, #8
 8007e3e:	f7f8 fc75 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007e42:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007e46:	3308      	adds	r3, #8
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	da00      	bge.n	8007e4e <Send_Service_Signal_Message+0x542>
 8007e4c:	3307      	adds	r3, #7
 8007e4e:	10db      	asrs	r3, r3, #3
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e56:	4413      	add	r3, r2
 8007e58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007e5c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007e60:	3308      	adds	r3, #8
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	b21b      	sxth	r3, r3
 8007e66:	425a      	negs	r2, r3
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	f002 0207 	and.w	r2, r2, #7
 8007e70:	bf58      	it	pl
 8007e72:	4253      	negpl	r3, r2
 8007e74:	b21b      	sxth	r3, r3
 8007e76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8007e7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e7e:	f107 020c 	add.w	r2, r7, #12
 8007e82:	18d1      	adds	r1, r2, r3
 8007e84:	79fa      	ldrb	r2, [r7, #7]
 8007e86:	486d      	ldr	r0, [pc, #436]	; (800803c <Send_Service_Signal_Message+0x730>)
 8007e88:	4613      	mov	r3, r2
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	4413      	add	r3, r2
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	4403      	add	r3, r0
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007e98:	460a      	mov	r2, r1
 8007e9a:	2108      	movs	r1, #8
 8007e9c:	f7f8 fc46 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007ea0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	da00      	bge.n	8007eac <Send_Service_Signal_Message+0x5a0>
 8007eaa:	3307      	adds	r3, #7
 8007eac:	10db      	asrs	r3, r3, #3
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007eba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	b21b      	sxth	r3, r3
 8007ec4:	425a      	negs	r2, r3
 8007ec6:	f003 0307 	and.w	r3, r3, #7
 8007eca:	f002 0207 	and.w	r2, r2, #7
 8007ece:	bf58      	it	pl
 8007ed0:	4253      	negpl	r3, r2
 8007ed2:	b21b      	sxth	r3, r3
 8007ed4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8007ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007edc:	f107 020c 	add.w	r2, r7, #12
 8007ee0:	18d1      	adds	r1, r2, r3
 8007ee2:	79fa      	ldrb	r2, [r7, #7]
 8007ee4:	4855      	ldr	r0, [pc, #340]	; (800803c <Send_Service_Signal_Message+0x730>)
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	005b      	lsls	r3, r3, #1
 8007eea:	4413      	add	r3, r2
 8007eec:	005b      	lsls	r3, r3, #1
 8007eee:	4403      	add	r3, r0
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007ef8:	460a      	mov	r2, r1
 8007efa:	2108      	movs	r1, #8
 8007efc:	f7f8 fc16 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007f00:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007f04:	3308      	adds	r3, #8
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	da00      	bge.n	8007f0c <Send_Service_Signal_Message+0x600>
 8007f0a:	3307      	adds	r3, #7
 8007f0c:	10db      	asrs	r3, r3, #3
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f14:	4413      	add	r3, r2
 8007f16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007f1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007f1e:	3308      	adds	r3, #8
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	b21b      	sxth	r3, r3
 8007f24:	425a      	negs	r2, r3
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	f002 0207 	and.w	r2, r2, #7
 8007f2e:	bf58      	it	pl
 8007f30:	4253      	negpl	r3, r2
 8007f32:	b21b      	sxth	r3, r3
 8007f34:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8007f38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f3c:	f107 020c 	add.w	r2, r7, #12
 8007f40:	18d1      	adds	r1, r2, r3
 8007f42:	79fa      	ldrb	r2, [r7, #7]
 8007f44:	483d      	ldr	r0, [pc, #244]	; (800803c <Send_Service_Signal_Message+0x730>)
 8007f46:	4613      	mov	r3, r2
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	4413      	add	r3, r2
 8007f4c:	005b      	lsls	r3, r3, #1
 8007f4e:	4403      	add	r3, r0
 8007f50:	3302      	adds	r3, #2
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007f58:	460a      	mov	r2, r1
 8007f5a:	2108      	movs	r1, #8
 8007f5c:	f7f8 fbe6 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007f60:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007f64:	3308      	adds	r3, #8
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	da00      	bge.n	8007f6c <Send_Service_Signal_Message+0x660>
 8007f6a:	3307      	adds	r3, #7
 8007f6c:	10db      	asrs	r3, r3, #3
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f74:	4413      	add	r3, r2
 8007f76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007f7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007f7e:	3308      	adds	r3, #8
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	b21b      	sxth	r3, r3
 8007f84:	425a      	negs	r2, r3
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	f002 0207 	and.w	r2, r2, #7
 8007f8e:	bf58      	it	pl
 8007f90:	4253      	negpl	r3, r2
 8007f92:	b21b      	sxth	r3, r3
 8007f94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 8007f98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f9c:	f107 020c 	add.w	r2, r7, #12
 8007fa0:	18d4      	adds	r4, r2, r3
 8007fa2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007fa6:	f107 030c 	add.w	r3, r7, #12
 8007faa:	4611      	mov	r1, r2
 8007fac:	4618      	mov	r0, r3
 8007fae:	f00e f885 	bl	80160bc <CalculateDirectReverseCrc>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007fb8:	4622      	mov	r2, r4
 8007fba:	2120      	movs	r1, #32
 8007fbc:	f7f8 fbb6 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8007fc0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007fc4:	3320      	adds	r3, #32
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	da00      	bge.n	8007fcc <Send_Service_Signal_Message+0x6c0>
 8007fca:	3307      	adds	r3, #7
 8007fcc:	10db      	asrs	r3, r3, #3
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007fda:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007fde:	3320      	adds	r3, #32
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	b21b      	sxth	r3, r3
 8007fe4:	425a      	negs	r2, r3
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	f002 0207 	and.w	r2, r2, #7
 8007fee:	bf58      	it	pl
 8007ff0:	4253      	negpl	r3, r2
 8007ff2:	b21b      	sxth	r3, r3
 8007ff4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007ff8:	4b11      	ldr	r3, [pc, #68]	; (8008040 <Send_Service_Signal_Message+0x734>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	0a5b      	lsrs	r3, r3, #9
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00b      	beq.n	800801e <Send_Service_Signal_Message+0x712>
 8008006:	4b0e      	ldr	r3, [pc, #56]	; (8008040 <Send_Service_Signal_Message+0x734>)
 8008008:	791b      	ldrb	r3, [r3, #4]
 800800a:	79fa      	ldrb	r2, [r7, #7]
 800800c:	429a      	cmp	r2, r3
 800800e:	d106      	bne.n	800801e <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 8008010:	480c      	ldr	r0, [pc, #48]	; (8008044 <Send_Service_Signal_Message+0x738>)
 8008012:	f01e fe87 	bl	8026d24 <puts>
		printf("Not Sending Reply");
 8008016:	480c      	ldr	r0, [pc, #48]	; (8008048 <Send_Service_Signal_Message+0x73c>)
 8008018:	f01e fde8 	bl	8026bec <iprintf>
 800801c:	e009      	b.n	8008032 <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 800801e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008022:	b2d9      	uxtb	r1, r3
 8008024:	79fa      	ldrb	r2, [r7, #7]
 8008026:	f107 030c 	add.w	r3, r7, #12
 800802a:	4618      	mov	r0, r3
 800802c:	f000 f80e 	bl	800804c <Process_Sending_Reply>
	}
}
 8008030:	bf00      	nop
 8008032:	bf00      	nop
 8008034:	3754      	adds	r7, #84	; 0x54
 8008036:	46bd      	mov	sp, r7
 8008038:	bd90      	pop	{r4, r7, pc}
 800803a:	bf00      	nop
 800803c:	200028b8 	.word	0x200028b8
 8008040:	2000308c 	.word	0x2000308c
 8008044:	08028bc4 	.word	0x08028bc4
 8008048:	08028bdc 	.word	0x08028bdc

0800804c <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b09c      	sub	sp, #112	; 0x70
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
 8008058:	4613      	mov	r3, r2
 800805a:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 800805c:	2300      	movs	r3, #0
 800805e:	60bb      	str	r3, [r7, #8]
 8008060:	f107 030c 	add.w	r3, r7, #12
 8008064:	2260      	movs	r2, #96	; 0x60
 8008066:	2100      	movs	r1, #0
 8008068:	4618      	mov	r0, r3
 800806a:	f01e fcd7 	bl	8026a1c <memset>
	uint8_t uc_index = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 800807a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 8008084:	4619      	mov	r1, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800808e:	443b      	add	r3, r7
 8008090:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8008094:	2301      	movs	r3, #1
 8008096:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800809a:	e03c      	b.n	8008116 <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 800809c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	4413      	add	r3, r2
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	2bef      	cmp	r3, #239	; 0xef
 80080a8:	d922      	bls.n	80080f0 <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 80080aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	781a      	ldrb	r2, [r3, #0]
 80080b4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80080b8:	1c59      	adds	r1, r3, #1
 80080ba:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80080be:	f022 020f 	bic.w	r2, r2, #15
 80080c2:	b2d2      	uxtb	r2, r2
 80080c4:	3370      	adds	r3, #112	; 0x70
 80080c6:	443b      	add	r3, r7
 80080c8:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 80080cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	4413      	add	r3, r2
 80080d4:	781a      	ldrb	r2, [r3, #0]
 80080d6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80080da:	1c59      	adds	r1, r3, #1
 80080dc:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80080e0:	f002 020f 	and.w	r2, r2, #15
 80080e4:	b2d2      	uxtb	r2, r2
 80080e6:	3370      	adds	r3, #112	; 0x70
 80080e8:	443b      	add	r3, r7
 80080ea:	f803 2c68 	strb.w	r2, [r3, #-104]
 80080ee:	e00d      	b.n	800810c <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 80080f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	441a      	add	r2, r3
 80080f8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80080fc:	1c59      	adds	r1, r3, #1
 80080fe:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8008102:	7812      	ldrb	r2, [r2, #0]
 8008104:	3370      	adds	r3, #112	; 0x70
 8008106:	443b      	add	r3, r7
 8008108:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 800810c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008110:	3301      	adds	r3, #1
 8008112:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8008116:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800811a:	78fb      	ldrb	r3, [r7, #3]
 800811c:	429a      	cmp	r2, r3
 800811e:	d3bd      	bcc.n	800809c <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 8008120:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008124:	1c5a      	adds	r2, r3, #1
 8008126:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 800812a:	3370      	adds	r3, #112	; 0x70
 800812c:	443b      	add	r3, r7
 800812e:	22f6      	movs	r2, #246	; 0xf6
 8008130:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 8008134:	78bb      	ldrb	r3, [r7, #2]
 8008136:	4a37      	ldr	r2, [pc, #220]	; (8008214 <Process_Sending_Reply+0x1c8>)
 8008138:	5cd3      	ldrb	r3, [r2, r3]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d10b      	bne.n	8008156 <Process_Sending_Reply+0x10a>
 800813e:	4b36      	ldr	r3, [pc, #216]	; (8008218 <Process_Sending_Reply+0x1cc>)
 8008140:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008144:	2b00      	cmp	r3, #0
 8008146:	d106      	bne.n	8008156 <Process_Sending_Reply+0x10a>
 8008148:	4b34      	ldr	r3, [pc, #208]	; (800821c <Process_Sending_Reply+0x1d0>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d102      	bne.n	8008156 <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 8008150:	4833      	ldr	r0, [pc, #204]	; (8008220 <Process_Sending_Reply+0x1d4>)
 8008152:	f001 f8f1 	bl	8009338 <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 8008156:	78bb      	ldrb	r3, [r7, #2]
 8008158:	4a32      	ldr	r2, [pc, #200]	; (8008224 <Process_Sending_Reply+0x1d8>)
 800815a:	4413      	add	r3, r2
 800815c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008160:	2b01      	cmp	r3, #1
 8008162:	d10d      	bne.n	8008180 <Process_Sending_Reply+0x134>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 8008164:	78bb      	ldrb	r3, [r7, #2]
 8008166:	4a30      	ldr	r2, [pc, #192]	; (8008228 <Process_Sending_Reply+0x1dc>)
 8008168:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800816c:	f107 0008 	add.w	r0, r7, #8
 8008170:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008174:	f008 fd82 	bl	8010c7c <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = RESET;
 8008178:	78bb      	ldrb	r3, [r7, #2]
 800817a:	4a26      	ldr	r2, [pc, #152]	; (8008214 <Process_Sending_Reply+0x1c8>)
 800817c:	2100      	movs	r1, #0
 800817e:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8008180:	78bb      	ldrb	r3, [r7, #2]
 8008182:	4a28      	ldr	r2, [pc, #160]	; (8008224 <Process_Sending_Reply+0x1d8>)
 8008184:	4413      	add	r3, r2
 8008186:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800818a:	2b02      	cmp	r3, #2
 800818c:	d119      	bne.n	80081c2 <Process_Sending_Reply+0x176>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 800818e:	2300      	movs	r3, #0
 8008190:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8008194:	e00e      	b.n	80081b4 <Process_Sending_Reply+0x168>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 8008196:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800819a:	3370      	adds	r3, #112	; 0x70
 800819c:	443b      	add	r3, r7
 800819e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80081a2:	4619      	mov	r1, r3
 80081a4:	2003      	movs	r0, #3
 80081a6:	f011 fabf 	bl	8019728 <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 80081aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80081ae:	3301      	adds	r3, #1
 80081b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80081b4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80081be:	429a      	cmp	r2, r3
 80081c0:	d3e9      	bcc.n	8008196 <Process_Sending_Reply+0x14a>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 80081c2:	4b16      	ldr	r3, [pc, #88]	; (800821c <Process_Sending_Reply+0x1d0>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d102      	bne.n	80081d0 <Process_Sending_Reply+0x184>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 80081ca:	4815      	ldr	r0, [pc, #84]	; (8008220 <Process_Sending_Reply+0x1d4>)
 80081cc:	f001 f8b4 	bl	8009338 <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 80081d0:	4b11      	ldr	r3, [pc, #68]	; (8008218 <Process_Sending_Reply+0x1cc>)
 80081d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00b      	beq.n	80081f2 <Process_Sending_Reply+0x1a6>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 80081da:	4b0f      	ldr	r3, [pc, #60]	; (8008218 <Process_Sending_Reply+0x1cc>)
 80081dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081e0:	461a      	mov	r2, r3
 80081e2:	2101      	movs	r1, #1
 80081e4:	480c      	ldr	r0, [pc, #48]	; (8008218 <Process_Sending_Reply+0x1cc>)
 80081e6:	f000 ff01 	bl	8008fec <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 80081ea:	4b0b      	ldr	r3, [pc, #44]	; (8008218 <Process_Sending_Reply+0x1cc>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 80081f2:	78fb      	ldrb	r3, [r7, #3]
 80081f4:	461a      	mov	r2, r3
 80081f6:	2100      	movs	r1, #0
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fef7 	bl	8008fec <Print_EI_DATA>

	if(Debug_flag == 1)
 80081fe:	4b07      	ldr	r3, [pc, #28]	; (800821c <Process_Sending_Reply+0x1d0>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d102      	bne.n	800820c <Process_Sending_Reply+0x1c0>
	{
		Display("___________________________________________________________________________________________\n");
 8008206:	4809      	ldr	r0, [pc, #36]	; (800822c <Process_Sending_Reply+0x1e0>)
 8008208:	f001 f896 	bl	8009338 <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 800820c:	bf00      	nop
 800820e:	3770      	adds	r7, #112	; 0x70
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	20002758 	.word	0x20002758
 8008218:	20003340 	.word	0x20003340
 800821c:	20000bbb 	.word	0x20000bbb
 8008220:	08029150 	.word	0x08029150
 8008224:	20000504 	.word	0x20000504
 8008228:	200026e4 	.word	0x200026e4
 800822c:	080291b0 	.word	0x080291b0

08008230 <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 800823a:	f011 fccd 	bl	8019bd8 <HAL_GetTick>
 800823e:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8008240:	79fb      	ldrb	r3, [r7, #7]
 8008242:	4a86      	ldr	r2, [pc, #536]	; (800845c <Check_Primary_r_Secondary+0x22c>)
 8008244:	4413      	add	r3, r2
 8008246:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800824a:	2b02      	cmp	r3, #2
 800824c:	f000 8102 	beq.w	8008454 <Check_Primary_r_Secondary+0x224>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 8008250:	79fa      	ldrb	r2, [r7, #7]
 8008252:	4983      	ldr	r1, [pc, #524]	; (8008460 <Check_Primary_r_Secondary+0x230>)
 8008254:	4613      	mov	r3, r2
 8008256:	005b      	lsls	r3, r3, #1
 8008258:	4413      	add	r3, r2
 800825a:	00db      	lsls	r3, r3, #3
 800825c:	440b      	add	r3, r1
 800825e:	3303      	adds	r3, #3
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d12b      	bne.n	80082be <Check_Primary_r_Secondary+0x8e>
 8008266:	79fa      	ldrb	r2, [r7, #7]
 8008268:	497e      	ldr	r1, [pc, #504]	; (8008464 <Check_Primary_r_Secondary+0x234>)
 800826a:	4613      	mov	r3, r2
 800826c:	005b      	lsls	r3, r3, #1
 800826e:	4413      	add	r3, r2
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	440b      	add	r3, r1
 8008274:	3303      	adds	r3, #3
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d120      	bne.n	80082be <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800827c:	79fa      	ldrb	r2, [r7, #7]
 800827e:	4978      	ldr	r1, [pc, #480]	; (8008460 <Check_Primary_r_Secondary+0x230>)
 8008280:	4613      	mov	r3, r2
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	4413      	add	r3, r2
 8008286:	00db      	lsls	r3, r3, #3
 8008288:	440b      	add	r3, r1
 800828a:	3304      	adds	r3, #4
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 80e1 	beq.w	8008456 <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	4a71      	ldr	r2, [pc, #452]	; (800845c <Check_Primary_r_Secondary+0x22c>)
 8008298:	3366      	adds	r3, #102	; 0x66
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	4619      	mov	r1, r3
 80082a2:	4871      	ldr	r0, [pc, #452]	; (8008468 <Check_Primary_r_Secondary+0x238>)
 80082a4:	f01e fca2 	bl	8026bec <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 80082a8:	79fa      	ldrb	r2, [r7, #7]
 80082aa:	496d      	ldr	r1, [pc, #436]	; (8008460 <Check_Primary_r_Secondary+0x230>)
 80082ac:	4613      	mov	r3, r2
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	4413      	add	r3, r2
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	440b      	add	r3, r1
 80082b6:	3304      	adds	r3, #4
 80082b8:	2200      	movs	r2, #0
 80082ba:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80082bc:	e0cb      	b.n	8008456 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 80082be:	79fa      	ldrb	r2, [r7, #7]
 80082c0:	4967      	ldr	r1, [pc, #412]	; (8008460 <Check_Primary_r_Secondary+0x230>)
 80082c2:	4613      	mov	r3, r2
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	4413      	add	r3, r2
 80082c8:	00db      	lsls	r3, r3, #3
 80082ca:	440b      	add	r3, r1
 80082cc:	3303      	adds	r3, #3
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d12b      	bne.n	800832c <Check_Primary_r_Secondary+0xfc>
 80082d4:	79fa      	ldrb	r2, [r7, #7]
 80082d6:	4963      	ldr	r1, [pc, #396]	; (8008464 <Check_Primary_r_Secondary+0x234>)
 80082d8:	4613      	mov	r3, r2
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	4413      	add	r3, r2
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	440b      	add	r3, r1
 80082e2:	3303      	adds	r3, #3
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d120      	bne.n	800832c <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80082ea:	79fa      	ldrb	r2, [r7, #7]
 80082ec:	495c      	ldr	r1, [pc, #368]	; (8008460 <Check_Primary_r_Secondary+0x230>)
 80082ee:	4613      	mov	r3, r2
 80082f0:	005b      	lsls	r3, r3, #1
 80082f2:	4413      	add	r3, r2
 80082f4:	00db      	lsls	r3, r3, #3
 80082f6:	440b      	add	r3, r1
 80082f8:	3304      	adds	r3, #4
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 80aa 	beq.w	8008456 <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	4a55      	ldr	r2, [pc, #340]	; (800845c <Check_Primary_r_Secondary+0x22c>)
 8008306:	3366      	adds	r3, #102	; 0x66
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	4619      	mov	r1, r3
 8008310:	4856      	ldr	r0, [pc, #344]	; (800846c <Check_Primary_r_Secondary+0x23c>)
 8008312:	f01e fc6b 	bl	8026bec <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 8008316:	79fa      	ldrb	r2, [r7, #7]
 8008318:	4951      	ldr	r1, [pc, #324]	; (8008460 <Check_Primary_r_Secondary+0x230>)
 800831a:	4613      	mov	r3, r2
 800831c:	005b      	lsls	r3, r3, #1
 800831e:	4413      	add	r3, r2
 8008320:	00db      	lsls	r3, r3, #3
 8008322:	440b      	add	r3, r1
 8008324:	3304      	adds	r3, #4
 8008326:	2200      	movs	r2, #0
 8008328:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800832a:	e094      	b.n	8008456 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 800832c:	79fa      	ldrb	r2, [r7, #7]
 800832e:	494c      	ldr	r1, [pc, #304]	; (8008460 <Check_Primary_r_Secondary+0x230>)
 8008330:	4613      	mov	r3, r2
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	4413      	add	r3, r2
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	440b      	add	r3, r1
 800833a:	3303      	adds	r3, #3
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d13e      	bne.n	80083c0 <Check_Primary_r_Secondary+0x190>
 8008342:	79fa      	ldrb	r2, [r7, #7]
 8008344:	4947      	ldr	r1, [pc, #284]	; (8008464 <Check_Primary_r_Secondary+0x234>)
 8008346:	4613      	mov	r3, r2
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	4413      	add	r3, r2
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	440b      	add	r3, r1
 8008350:	3303      	adds	r3, #3
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d133      	bne.n	80083c0 <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8008358:	79fa      	ldrb	r2, [r7, #7]
 800835a:	4941      	ldr	r1, [pc, #260]	; (8008460 <Check_Primary_r_Secondary+0x230>)
 800835c:	4613      	mov	r3, r2
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	4413      	add	r3, r2
 8008362:	00db      	lsls	r3, r3, #3
 8008364:	440b      	add	r3, r1
 8008366:	3304      	adds	r3, #4
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d073      	beq.n	8008456 <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	4a3a      	ldr	r2, [pc, #232]	; (800845c <Check_Primary_r_Secondary+0x22c>)
 8008372:	3366      	adds	r3, #102	; 0x66
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	4619      	mov	r1, r3
 800837c:	483c      	ldr	r0, [pc, #240]	; (8008470 <Check_Primary_r_Secondary+0x240>)
 800837e:	f01e fc35 	bl	8026bec <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 8008382:	79fb      	ldrb	r3, [r7, #7]
 8008384:	493b      	ldr	r1, [pc, #236]	; (8008474 <Check_Primary_r_Secondary+0x244>)
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	493a      	ldr	r1, [pc, #232]	; (8008478 <Check_Primary_r_Secondary+0x248>)
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 8008396:	79fa      	ldrb	r2, [r7, #7]
 8008398:	4931      	ldr	r1, [pc, #196]	; (8008460 <Check_Primary_r_Secondary+0x230>)
 800839a:	4613      	mov	r3, r2
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	4413      	add	r3, r2
 80083a0:	00db      	lsls	r3, r3, #3
 80083a2:	440b      	add	r3, r1
 80083a4:	3310      	adds	r3, #16
 80083a6:	2200      	movs	r2, #0
 80083a8:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 80083aa:	79fa      	ldrb	r2, [r7, #7]
 80083ac:	492c      	ldr	r1, [pc, #176]	; (8008460 <Check_Primary_r_Secondary+0x230>)
 80083ae:	4613      	mov	r3, r2
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	4413      	add	r3, r2
 80083b4:	00db      	lsls	r3, r3, #3
 80083b6:	440b      	add	r3, r1
 80083b8:	3304      	adds	r3, #4
 80083ba:	2201      	movs	r2, #1
 80083bc:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 80083be:	e04a      	b.n	8008456 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 80083c0:	79fa      	ldrb	r2, [r7, #7]
 80083c2:	4927      	ldr	r1, [pc, #156]	; (8008460 <Check_Primary_r_Secondary+0x230>)
 80083c4:	4613      	mov	r3, r2
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	4413      	add	r3, r2
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	440b      	add	r3, r1
 80083ce:	3303      	adds	r3, #3
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d13f      	bne.n	8008456 <Check_Primary_r_Secondary+0x226>
 80083d6:	79fa      	ldrb	r2, [r7, #7]
 80083d8:	4922      	ldr	r1, [pc, #136]	; (8008464 <Check_Primary_r_Secondary+0x234>)
 80083da:	4613      	mov	r3, r2
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	4413      	add	r3, r2
 80083e0:	00db      	lsls	r3, r3, #3
 80083e2:	440b      	add	r3, r1
 80083e4:	3303      	adds	r3, #3
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d134      	bne.n	8008456 <Check_Primary_r_Secondary+0x226>
		{
#ifdef EI_1
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 80083ec:	79fa      	ldrb	r2, [r7, #7]
 80083ee:	491c      	ldr	r1, [pc, #112]	; (8008460 <Check_Primary_r_Secondary+0x230>)
 80083f0:	4613      	mov	r3, r2
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	4413      	add	r3, r2
 80083f6:	00db      	lsls	r3, r3, #3
 80083f8:	440b      	add	r3, r1
 80083fa:	3304      	adds	r3, #4
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d029      	beq.n	8008456 <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards Receiving data,EiPC_1 Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	4a15      	ldr	r2, [pc, #84]	; (800845c <Check_Primary_r_Secondary+0x22c>)
 8008406:	3366      	adds	r3, #102	; 0x66
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	4619      	mov	r1, r3
 8008410:	481a      	ldr	r0, [pc, #104]	; (800847c <Check_Primary_r_Secondary+0x24c>)
 8008412:	f01e fbeb 	bl	8026bec <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	4916      	ldr	r1, [pc, #88]	; (8008474 <Check_Primary_r_Secondary+0x244>)
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	4915      	ldr	r1, [pc, #84]	; (8008478 <Check_Primary_r_Secondary+0x248>)
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 800842a:	79fa      	ldrb	r2, [r7, #7]
 800842c:	490c      	ldr	r1, [pc, #48]	; (8008460 <Check_Primary_r_Secondary+0x230>)
 800842e:	4613      	mov	r3, r2
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	4413      	add	r3, r2
 8008434:	00db      	lsls	r3, r3, #3
 8008436:	440b      	add	r3, r1
 8008438:	3310      	adds	r3, #16
 800843a:	2200      	movs	r2, #0
 800843c:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 800843e:	79fa      	ldrb	r2, [r7, #7]
 8008440:	4907      	ldr	r1, [pc, #28]	; (8008460 <Check_Primary_r_Secondary+0x230>)
 8008442:	4613      	mov	r3, r2
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	4413      	add	r3, r2
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	440b      	add	r3, r1
 800844c:	3304      	adds	r3, #4
 800844e:	2201      	movs	r2, #1
 8008450:	701a      	strb	r2, [r3, #0]
 8008452:	e000      	b.n	8008456 <Check_Primary_r_Secondary+0x226>
		return;
 8008454:	bf00      	nop
			}
#endif

		}
	}
}
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20000504 	.word	0x20000504
 8008460:	20002da4 	.word	0x20002da4
 8008464:	20002e94 	.word	0x20002e94
 8008468:	08029368 	.word	0x08029368
 800846c:	080293a4 	.word	0x080293a4
 8008470:	080293e0 	.word	0x080293e0
 8008474:	20002630 	.word	0x20002630
 8008478:	20002658 	.word	0x20002658
 800847c:	08029418 	.word	0x08029418

08008480 <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 800848a:	79fb      	ldrb	r3, [r7, #7]
 800848c:	4aac      	ldr	r2, [pc, #688]	; (8008740 <Check_Vital_CRC+0x2c0>)
 800848e:	4413      	add	r3, r2
 8008490:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008494:	2b02      	cmp	r3, #2
 8008496:	f000 814f 	beq.w	8008738 <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 800849a:	79fa      	ldrb	r2, [r7, #7]
 800849c:	49a9      	ldr	r1, [pc, #676]	; (8008744 <Check_Vital_CRC+0x2c4>)
 800849e:	4613      	mov	r3, r2
 80084a0:	005b      	lsls	r3, r3, #1
 80084a2:	4413      	add	r3, r2
 80084a4:	00db      	lsls	r3, r3, #3
 80084a6:	440b      	add	r3, r1
 80084a8:	3308      	adds	r3, #8
 80084aa:	6819      	ldr	r1, [r3, #0]
 80084ac:	79fa      	ldrb	r2, [r7, #7]
 80084ae:	48a6      	ldr	r0, [pc, #664]	; (8008748 <Check_Vital_CRC+0x2c8>)
 80084b0:	4613      	mov	r3, r2
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	4413      	add	r3, r2
 80084b6:	00db      	lsls	r3, r3, #3
 80084b8:	4403      	add	r3, r0
 80084ba:	3308      	adds	r3, #8
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4299      	cmp	r1, r3
 80084c0:	f000 8092 	beq.w	80085e8 <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 80084c4:	79fa      	ldrb	r2, [r7, #7]
 80084c6:	49a0      	ldr	r1, [pc, #640]	; (8008748 <Check_Vital_CRC+0x2c8>)
 80084c8:	4613      	mov	r3, r2
 80084ca:	005b      	lsls	r3, r3, #1
 80084cc:	4413      	add	r3, r2
 80084ce:	00db      	lsls	r3, r3, #3
 80084d0:	440b      	add	r3, r1
 80084d2:	3308      	adds	r3, #8
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 8086 	beq.w	80085e8 <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 80084dc:	79fa      	ldrb	r2, [r7, #7]
 80084de:	4999      	ldr	r1, [pc, #612]	; (8008744 <Check_Vital_CRC+0x2c4>)
 80084e0:	4613      	mov	r3, r2
 80084e2:	005b      	lsls	r3, r3, #1
 80084e4:	4413      	add	r3, r2
 80084e6:	00db      	lsls	r3, r3, #3
 80084e8:	440b      	add	r3, r1
 80084ea:	3304      	adds	r3, #4
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d104      	bne.n	80084fc <Check_Vital_CRC+0x7c>
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	4a95      	ldr	r2, [pc, #596]	; (800874c <Check_Vital_CRC+0x2cc>)
 80084f6:	5cd3      	ldrb	r3, [r2, r3]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d175      	bne.n	80085e8 <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80084fc:	79fa      	ldrb	r2, [r7, #7]
 80084fe:	4991      	ldr	r1, [pc, #580]	; (8008744 <Check_Vital_CRC+0x2c4>)
 8008500:	4613      	mov	r3, r2
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	4413      	add	r3, r2
 8008506:	00db      	lsls	r3, r3, #3
 8008508:	440b      	add	r3, r1
 800850a:	3308      	adds	r3, #8
 800850c:	6819      	ldr	r1, [r3, #0]
 800850e:	79fa      	ldrb	r2, [r7, #7]
 8008510:	488d      	ldr	r0, [pc, #564]	; (8008748 <Check_Vital_CRC+0x2c8>)
 8008512:	4613      	mov	r3, r2
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	4413      	add	r3, r2
 8008518:	00db      	lsls	r3, r3, #3
 800851a:	4403      	add	r3, r0
 800851c:	3308      	adds	r3, #8
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	1acb      	subs	r3, r1, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	bfb8      	it	lt
 8008526:	425b      	neglt	r3, r3
 8008528:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d104      	bne.n	800853a <Check_Vital_CRC+0xba>
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	4a87      	ldr	r2, [pc, #540]	; (8008750 <Check_Vital_CRC+0x2d0>)
 8008534:	5cd3      	ldrb	r3, [r2, r3]
 8008536:	2b03      	cmp	r3, #3
 8008538:	d14c      	bne.n	80085d4 <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	4a84      	ldr	r2, [pc, #528]	; (8008750 <Check_Vital_CRC+0x2d0>)
 800853e:	2100      	movs	r1, #0
 8008540:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	4a7e      	ldr	r2, [pc, #504]	; (8008740 <Check_Vital_CRC+0x2c0>)
 8008546:	3366      	adds	r3, #102	; 0x66
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	4619      	mov	r1, r3
 8008550:	4880      	ldr	r0, [pc, #512]	; (8008754 <Check_Vital_CRC+0x2d4>)
 8008552:	f01e fb4b 	bl	8026bec <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8008556:	79fa      	ldrb	r2, [r7, #7]
 8008558:	497a      	ldr	r1, [pc, #488]	; (8008744 <Check_Vital_CRC+0x2c4>)
 800855a:	4613      	mov	r3, r2
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	4413      	add	r3, r2
 8008560:	00db      	lsls	r3, r3, #3
 8008562:	440b      	add	r3, r1
 8008564:	3308      	adds	r3, #8
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4619      	mov	r1, r3
 800856a:	487b      	ldr	r0, [pc, #492]	; (8008758 <Check_Vital_CRC+0x2d8>)
 800856c:	f01e fb3e 	bl	8026bec <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8008570:	79fa      	ldrb	r2, [r7, #7]
 8008572:	4975      	ldr	r1, [pc, #468]	; (8008748 <Check_Vital_CRC+0x2c8>)
 8008574:	4613      	mov	r3, r2
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	4413      	add	r3, r2
 800857a:	00db      	lsls	r3, r3, #3
 800857c:	440b      	add	r3, r1
 800857e:	3308      	adds	r3, #8
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4619      	mov	r1, r3
 8008584:	4875      	ldr	r0, [pc, #468]	; (800875c <Check_Vital_CRC+0x2dc>)
 8008586:	f01e fb31 	bl	8026bec <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 800858a:	4875      	ldr	r0, [pc, #468]	; (8008760 <Check_Vital_CRC+0x2e0>)
 800858c:	f01e fbca 	bl	8026d24 <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8008590:	79fa      	ldrb	r2, [r7, #7]
 8008592:	79f9      	ldrb	r1, [r7, #7]
 8008594:	486c      	ldr	r0, [pc, #432]	; (8008748 <Check_Vital_CRC+0x2c8>)
 8008596:	4613      	mov	r3, r2
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	4413      	add	r3, r2
 800859c:	00db      	lsls	r3, r3, #3
 800859e:	4403      	add	r3, r0
 80085a0:	3308      	adds	r3, #8
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	486f      	ldr	r0, [pc, #444]	; (8008764 <Check_Vital_CRC+0x2e4>)
 80085a6:	010b      	lsls	r3, r1, #4
 80085a8:	4403      	add	r3, r0
 80085aa:	3308      	adds	r3, #8
 80085ac:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 80085ae:	79f9      	ldrb	r1, [r7, #7]
 80085b0:	79fa      	ldrb	r2, [r7, #7]
 80085b2:	4865      	ldr	r0, [pc, #404]	; (8008748 <Check_Vital_CRC+0x2c8>)
 80085b4:	460b      	mov	r3, r1
 80085b6:	005b      	lsls	r3, r3, #1
 80085b8:	440b      	add	r3, r1
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	4403      	add	r3, r0
 80085be:	3308      	adds	r3, #8
 80085c0:	6819      	ldr	r1, [r3, #0]
 80085c2:	4860      	ldr	r0, [pc, #384]	; (8008744 <Check_Vital_CRC+0x2c4>)
 80085c4:	4613      	mov	r3, r2
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	4413      	add	r3, r2
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	4403      	add	r3, r0
 80085ce:	3308      	adds	r3, #8
 80085d0:	6019      	str	r1, [r3, #0]
 80085d2:	e009      	b.n	80085e8 <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d106      	bne.n	80085e8 <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 80085da:	79fb      	ldrb	r3, [r7, #7]
 80085dc:	4a5c      	ldr	r2, [pc, #368]	; (8008750 <Check_Vital_CRC+0x2d0>)
 80085de:	5cd2      	ldrb	r2, [r2, r3]
 80085e0:	3201      	adds	r2, #1
 80085e2:	b2d1      	uxtb	r1, r2
 80085e4:	4a5a      	ldr	r2, [pc, #360]	; (8008750 <Check_Vital_CRC+0x2d0>)
 80085e6:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 80085e8:	79fa      	ldrb	r2, [r7, #7]
 80085ea:	4956      	ldr	r1, [pc, #344]	; (8008744 <Check_Vital_CRC+0x2c4>)
 80085ec:	4613      	mov	r3, r2
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	4413      	add	r3, r2
 80085f2:	00db      	lsls	r3, r3, #3
 80085f4:	440b      	add	r3, r1
 80085f6:	330c      	adds	r3, #12
 80085f8:	6819      	ldr	r1, [r3, #0]
 80085fa:	79fa      	ldrb	r2, [r7, #7]
 80085fc:	4852      	ldr	r0, [pc, #328]	; (8008748 <Check_Vital_CRC+0x2c8>)
 80085fe:	4613      	mov	r3, r2
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	4413      	add	r3, r2
 8008604:	00db      	lsls	r3, r3, #3
 8008606:	4403      	add	r3, r0
 8008608:	330c      	adds	r3, #12
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4299      	cmp	r1, r3
 800860e:	f000 8094 	beq.w	800873a <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 8008612:	79fa      	ldrb	r2, [r7, #7]
 8008614:	494c      	ldr	r1, [pc, #304]	; (8008748 <Check_Vital_CRC+0x2c8>)
 8008616:	4613      	mov	r3, r2
 8008618:	005b      	lsls	r3, r3, #1
 800861a:	4413      	add	r3, r2
 800861c:	00db      	lsls	r3, r3, #3
 800861e:	440b      	add	r3, r1
 8008620:	330c      	adds	r3, #12
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 8088 	beq.w	800873a <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 800862a:	79fa      	ldrb	r2, [r7, #7]
 800862c:	4945      	ldr	r1, [pc, #276]	; (8008744 <Check_Vital_CRC+0x2c4>)
 800862e:	4613      	mov	r3, r2
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	4413      	add	r3, r2
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	440b      	add	r3, r1
 8008638:	3304      	adds	r3, #4
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d104      	bne.n	800864a <Check_Vital_CRC+0x1ca>
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	4a42      	ldr	r2, [pc, #264]	; (800874c <Check_Vital_CRC+0x2cc>)
 8008644:	5cd3      	ldrb	r3, [r2, r3]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d177      	bne.n	800873a <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 800864a:	79fa      	ldrb	r2, [r7, #7]
 800864c:	493d      	ldr	r1, [pc, #244]	; (8008744 <Check_Vital_CRC+0x2c4>)
 800864e:	4613      	mov	r3, r2
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	4413      	add	r3, r2
 8008654:	00db      	lsls	r3, r3, #3
 8008656:	440b      	add	r3, r1
 8008658:	330c      	adds	r3, #12
 800865a:	6819      	ldr	r1, [r3, #0]
 800865c:	79fa      	ldrb	r2, [r7, #7]
 800865e:	483a      	ldr	r0, [pc, #232]	; (8008748 <Check_Vital_CRC+0x2c8>)
 8008660:	4613      	mov	r3, r2
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	4413      	add	r3, r2
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	4403      	add	r3, r0
 800866a:	330c      	adds	r3, #12
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	1acb      	subs	r3, r1, r3
 8008670:	2b00      	cmp	r3, #0
 8008672:	bfb8      	it	lt
 8008674:	425b      	neglt	r3, r3
 8008676:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d104      	bne.n	8008688 <Check_Vital_CRC+0x208>
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	4a39      	ldr	r2, [pc, #228]	; (8008768 <Check_Vital_CRC+0x2e8>)
 8008682:	5cd3      	ldrb	r3, [r2, r3]
 8008684:	2b03      	cmp	r3, #3
 8008686:	d14c      	bne.n	8008722 <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 8008688:	79fb      	ldrb	r3, [r7, #7]
 800868a:	4a37      	ldr	r2, [pc, #220]	; (8008768 <Check_Vital_CRC+0x2e8>)
 800868c:	2100      	movs	r1, #0
 800868e:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8008690:	79fb      	ldrb	r3, [r7, #7]
 8008692:	4a2b      	ldr	r2, [pc, #172]	; (8008740 <Check_Vital_CRC+0x2c0>)
 8008694:	3366      	adds	r3, #102	; 0x66
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	4619      	mov	r1, r3
 800869e:	4833      	ldr	r0, [pc, #204]	; (800876c <Check_Vital_CRC+0x2ec>)
 80086a0:	f01e faa4 	bl	8026bec <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 80086a4:	79fa      	ldrb	r2, [r7, #7]
 80086a6:	4927      	ldr	r1, [pc, #156]	; (8008744 <Check_Vital_CRC+0x2c4>)
 80086a8:	4613      	mov	r3, r2
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	4413      	add	r3, r2
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	440b      	add	r3, r1
 80086b2:	330c      	adds	r3, #12
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4619      	mov	r1, r3
 80086b8:	482d      	ldr	r0, [pc, #180]	; (8008770 <Check_Vital_CRC+0x2f0>)
 80086ba:	f01e fa97 	bl	8026bec <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 80086be:	79fa      	ldrb	r2, [r7, #7]
 80086c0:	4921      	ldr	r1, [pc, #132]	; (8008748 <Check_Vital_CRC+0x2c8>)
 80086c2:	4613      	mov	r3, r2
 80086c4:	005b      	lsls	r3, r3, #1
 80086c6:	4413      	add	r3, r2
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	440b      	add	r3, r1
 80086cc:	330c      	adds	r3, #12
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4619      	mov	r1, r3
 80086d2:	4828      	ldr	r0, [pc, #160]	; (8008774 <Check_Vital_CRC+0x2f4>)
 80086d4:	f01e fa8a 	bl	8026bec <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 80086d8:	4827      	ldr	r0, [pc, #156]	; (8008778 <Check_Vital_CRC+0x2f8>)
 80086da:	f01e fb23 	bl	8026d24 <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 80086de:	79fa      	ldrb	r2, [r7, #7]
 80086e0:	79f9      	ldrb	r1, [r7, #7]
 80086e2:	4819      	ldr	r0, [pc, #100]	; (8008748 <Check_Vital_CRC+0x2c8>)
 80086e4:	4613      	mov	r3, r2
 80086e6:	005b      	lsls	r3, r3, #1
 80086e8:	4413      	add	r3, r2
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	4403      	add	r3, r0
 80086ee:	330c      	adds	r3, #12
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	481c      	ldr	r0, [pc, #112]	; (8008764 <Check_Vital_CRC+0x2e4>)
 80086f4:	010b      	lsls	r3, r1, #4
 80086f6:	4403      	add	r3, r0
 80086f8:	330c      	adds	r3, #12
 80086fa:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 80086fc:	79f9      	ldrb	r1, [r7, #7]
 80086fe:	79fa      	ldrb	r2, [r7, #7]
 8008700:	4811      	ldr	r0, [pc, #68]	; (8008748 <Check_Vital_CRC+0x2c8>)
 8008702:	460b      	mov	r3, r1
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	440b      	add	r3, r1
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	4403      	add	r3, r0
 800870c:	330c      	adds	r3, #12
 800870e:	6819      	ldr	r1, [r3, #0]
 8008710:	480c      	ldr	r0, [pc, #48]	; (8008744 <Check_Vital_CRC+0x2c4>)
 8008712:	4613      	mov	r3, r2
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	4413      	add	r3, r2
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	4403      	add	r3, r0
 800871c:	330c      	adds	r3, #12
 800871e:	6019      	str	r1, [r3, #0]
 8008720:	e00b      	b.n	800873a <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d108      	bne.n	800873a <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	4a0f      	ldr	r2, [pc, #60]	; (8008768 <Check_Vital_CRC+0x2e8>)
 800872c:	5cd2      	ldrb	r2, [r2, r3]
 800872e:	3201      	adds	r2, #1
 8008730:	b2d1      	uxtb	r1, r2
 8008732:	4a0d      	ldr	r2, [pc, #52]	; (8008768 <Check_Vital_CRC+0x2e8>)
 8008734:	54d1      	strb	r1, [r2, r3]
 8008736:	e000      	b.n	800873a <Check_Vital_CRC+0x2ba>
		return;
 8008738:	bf00      	nop
				}
			}
		}
	}
}
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	20000504 	.word	0x20000504
 8008744:	20002da4 	.word	0x20002da4
 8008748:	20002e94 	.word	0x20002e94
 800874c:	20002680 	.word	0x20002680
 8008750:	20003768 	.word	0x20003768
 8008754:	08029454 	.word	0x08029454
 8008758:	08029498 	.word	0x08029498
 800875c:	080294bc 	.word	0x080294bc
 8008760:	080294e0 	.word	0x080294e0
 8008764:	200028f4 	.word	0x200028f4
 8008768:	20003774 	.word	0x20003774
 800876c:	08029508 	.word	0x08029508
 8008770:	0802954c 	.word	0x0802954c
 8008774:	08029570 	.word	0x08029570
 8008778:	08029594 	.word	0x08029594

0800877c <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	4a0a      	ldr	r2, [pc, #40]	; (80087b4 <Check_Other_EiPC_Packet+0x38>)
 800878a:	4413      	add	r3, r2
 800878c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008790:	2b02      	cmp	r3, #2
 8008792:	d007      	beq.n	80087a4 <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	4618      	mov	r0, r3
 8008798:	f7ff fd4a 	bl	8008230 <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff fe6e 	bl	8008480 <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 fa66 	bl	8009c78 <CheckOtherLinkStatus>
}
 80087ac:	bf00      	nop
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	20000504 	.word	0x20000504

080087b8 <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 80087b8:	b590      	push	{r4, r7, lr}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80087c2:	493c      	ldr	r1, [pc, #240]	; (80088b4 <CheckLinkEstablishTimeout+0xfc>)
 80087c4:	483c      	ldr	r0, [pc, #240]	; (80088b8 <CheckLinkEstablishTimeout+0x100>)
 80087c6:	f7f7 fd3b 	bl	8000240 <strcmp>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d06c      	beq.n	80088aa <CheckLinkEstablishTimeout+0xf2>
	{
		return;
	}

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80087d0:	2300      	movs	r3, #0
 80087d2:	71fb      	strb	r3, [r7, #7]
 80087d4:	e062      	b.n	800889c <CheckLinkEstablishTimeout+0xe4>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	4a38      	ldr	r2, [pc, #224]	; (80088bc <CheckLinkEstablishTimeout+0x104>)
 80087da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087de:	4618      	mov	r0, r3
 80087e0:	f007 fedc 	bl	801059c <HAL_Elaps_Ticks>
 80087e4:	4602      	mov	r2, r0
 80087e6:	79fb      	ldrb	r3, [r7, #7]
 80087e8:	4935      	ldr	r1, [pc, #212]	; (80088c0 <CheckLinkEstablishTimeout+0x108>)
 80087ea:	339e      	adds	r3, #158	; 0x9e
 80087ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d950      	bls.n	8008896 <CheckLinkEstablishTimeout+0xde>
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	4a33      	ldr	r2, [pc, #204]	; (80088c4 <CheckLinkEstablishTimeout+0x10c>)
 80087f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	492f      	ldr	r1, [pc, #188]	; (80088bc <CheckLinkEstablishTimeout+0x104>)
 8008800:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008804:	429a      	cmp	r2, r3
 8008806:	d046      	beq.n	8008896 <CheckLinkEstablishTimeout+0xde>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 8008808:	79fa      	ldrb	r2, [r7, #7]
 800880a:	79fb      	ldrb	r3, [r7, #7]
 800880c:	492b      	ldr	r1, [pc, #172]	; (80088bc <CheckLinkEstablishTimeout+0x104>)
 800880e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008812:	492c      	ldr	r1, [pc, #176]	; (80088c4 <CheckLinkEstablishTimeout+0x10c>)
 8008814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	4a29      	ldr	r2, [pc, #164]	; (80088c0 <CheckLinkEstablishTimeout+0x108>)
 800881c:	3366      	adds	r3, #102	; 0x66
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	4619      	mov	r1, r3
 8008826:	4828      	ldr	r0, [pc, #160]	; (80088c8 <CheckLinkEstablishTimeout+0x110>)
 8008828:	f01e f9e0 	bl	8026bec <iprintf>
			SelfLinkFlag[Traverser] = RESET;
 800882c:	79fb      	ldrb	r3, [r7, #7]
 800882e:	4a27      	ldr	r2, [pc, #156]	; (80088cc <CheckLinkEstablishTimeout+0x114>)
 8008830:	2100      	movs	r1, #0
 8008832:	54d1      	strb	r1, [r2, r3]
			memset(&Main_Relays_st[Traverser].RelayIPS_Buff,0,sizeof(Main_Relays_st[Traverser].RelayIPS_Buff));
 8008834:	79fa      	ldrb	r2, [r7, #7]
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4a24      	ldr	r2, [pc, #144]	; (80088d0 <CheckLinkEstablishTimeout+0x118>)
 8008840:	4413      	add	r3, r2
 8008842:	3301      	adds	r3, #1
 8008844:	2210      	movs	r2, #16
 8008846:	2100      	movs	r1, #0
 8008848:	4618      	mov	r0, r3
 800884a:	f01e f8e7 	bl	8026a1c <memset>
			Main_Relays_st[Traverser].RelayIPS_CRC = 0;
 800884e:	79fa      	ldrb	r2, [r7, #7]
 8008850:	491f      	ldr	r1, [pc, #124]	; (80088d0 <CheckLinkEstablishTimeout+0x118>)
 8008852:	4613      	mov	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	440b      	add	r3, r1
 800885c:	3312      	adds	r3, #18
 800885e:	2200      	movs	r2, #0
 8008860:	801a      	strh	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8008862:	79fa      	ldrb	r2, [r7, #7]
 8008864:	491b      	ldr	r1, [pc, #108]	; (80088d4 <CheckLinkEstablishTimeout+0x11c>)
 8008866:	4613      	mov	r3, r2
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	4413      	add	r3, r2
 800886c:	00db      	lsls	r3, r3, #3
 800886e:	440b      	add	r3, r1
 8008870:	3310      	adds	r3, #16
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	79fc      	ldrb	r4, [r7, #7]
 8008876:	4618      	mov	r0, r3
 8008878:	f007 fe90 	bl	801059c <HAL_Elaps_Ticks>
 800887c:	4602      	mov	r2, r0
 800887e:	4915      	ldr	r1, [pc, #84]	; (80088d4 <CheckLinkEstablishTimeout+0x11c>)
 8008880:	4623      	mov	r3, r4
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	4423      	add	r3, r4
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	440b      	add	r3, r1
 800888a:	3310      	adds	r3, #16
 800888c:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	4618      	mov	r0, r3
 8008892:	f001 f9f1 	bl	8009c78 <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008896:	79fb      	ldrb	r3, [r7, #7]
 8008898:	3301      	adds	r3, #1
 800889a:	71fb      	strb	r3, [r7, #7]
 800889c:	4b08      	ldr	r3, [pc, #32]	; (80088c0 <CheckLinkEstablishTimeout+0x108>)
 800889e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088a2:	79fa      	ldrb	r2, [r7, #7]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d396      	bcc.n	80087d6 <CheckLinkEstablishTimeout+0x1e>
 80088a8:	e000      	b.n	80088ac <CheckLinkEstablishTimeout+0xf4>
		return;
 80088aa:	bf00      	nop
		}
	}
}
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd90      	pop	{r4, r7, pc}
 80088b2:	bf00      	nop
 80088b4:	080286ec 	.word	0x080286ec
 80088b8:	20000505 	.word	0x20000505
 80088bc:	200025a0 	.word	0x200025a0
 80088c0:	20000504 	.word	0x20000504
 80088c4:	20003780 	.word	0x20003780
 80088c8:	080295bc 	.word	0x080295bc
 80088cc:	200025f0 	.word	0x200025f0
 80088d0:	200035b0 	.word	0x200035b0
 80088d4:	20002da4 	.word	0x20002da4

080088d8 <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 80088d8:	b590      	push	{r4, r7, lr}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80088de:	2300      	movs	r3, #0
 80088e0:	71fb      	strb	r3, [r7, #7]
 80088e2:	e052      	b.n	800898a <Send_Self_Sharing+0xb2>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 80088e4:	79fb      	ldrb	r3, [r7, #7]
 80088e6:	4a2d      	ldr	r2, [pc, #180]	; (800899c <Send_Self_Sharing+0xc4>)
 80088e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f007 fe55 	bl	801059c <HAL_Elaps_Ticks>
 80088f2:	4602      	mov	r2, r0
 80088f4:	4b2a      	ldr	r3, [pc, #168]	; (80089a0 <Send_Self_Sharing+0xc8>)
 80088f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d942      	bls.n	8008984 <Send_Self_Sharing+0xac>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 80088fe:	79fa      	ldrb	r2, [r7, #7]
 8008900:	4928      	ldr	r1, [pc, #160]	; (80089a4 <Send_Self_Sharing+0xcc>)
 8008902:	4613      	mov	r3, r2
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	4413      	add	r3, r2
 8008908:	00db      	lsls	r3, r3, #3
 800890a:	440b      	add	r3, r1
 800890c:	3301      	adds	r3, #1
 800890e:	2200      	movs	r2, #0
 8008910:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 8008912:	79f9      	ldrb	r1, [r7, #7]
 8008914:	79fa      	ldrb	r2, [r7, #7]
 8008916:	4824      	ldr	r0, [pc, #144]	; (80089a8 <Send_Self_Sharing+0xd0>)
 8008918:	460b      	mov	r3, r1
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	440b      	add	r3, r1
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4403      	add	r3, r0
 8008922:	3301      	adds	r3, #1
 8008924:	7818      	ldrb	r0, [r3, #0]
 8008926:	491f      	ldr	r1, [pc, #124]	; (80089a4 <Send_Self_Sharing+0xcc>)
 8008928:	4613      	mov	r3, r2
 800892a:	005b      	lsls	r3, r3, #1
 800892c:	4413      	add	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	440b      	add	r3, r1
 8008932:	3302      	adds	r3, #2
 8008934:	4602      	mov	r2, r0
 8008936:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8008938:	2218      	movs	r2, #24
 800893a:	2100      	movs	r1, #0
 800893c:	481b      	ldr	r0, [pc, #108]	; (80089ac <Send_Self_Sharing+0xd4>)
 800893e:	f01e f86d 	bl	8026a1c <memset>
			Tx_Ei_self_sharing_st[Traverser].Peer_Index = Traverser;
 8008942:	79fa      	ldrb	r2, [r7, #7]
 8008944:	4917      	ldr	r1, [pc, #92]	; (80089a4 <Send_Self_Sharing+0xcc>)
 8008946:	4613      	mov	r3, r2
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	4413      	add	r3, r2
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	440b      	add	r3, r1
 8008950:	79fa      	ldrb	r2, [r7, #7]
 8008952:	701a      	strb	r2, [r3, #0]
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 8008954:	79fa      	ldrb	r2, [r7, #7]
 8008956:	4613      	mov	r3, r2
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	4413      	add	r3, r2
 800895c:	00db      	lsls	r3, r3, #3
 800895e:	4a11      	ldr	r2, [pc, #68]	; (80089a4 <Send_Self_Sharing+0xcc>)
 8008960:	4413      	add	r3, r2
 8008962:	2218      	movs	r2, #24
 8008964:	4619      	mov	r1, r3
 8008966:	4811      	ldr	r0, [pc, #68]	; (80089ac <Send_Self_Sharing+0xd4>)
 8008968:	f01e f830 	bl	80269cc <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 800896c:	f240 2001 	movw	r0, #513	; 0x201
 8008970:	f008 fbc8 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 8008974:	79fc      	ldrb	r4, [r7, #7]
 8008976:	f011 f92f 	bl	8019bd8 <HAL_GetTick>
 800897a:	4603      	mov	r3, r0
 800897c:	4a07      	ldr	r2, [pc, #28]	; (800899c <Send_Self_Sharing+0xc4>)
 800897e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 8008982:	e008      	b.n	8008996 <Send_Self_Sharing+0xbe>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	3301      	adds	r3, #1
 8008988:	71fb      	strb	r3, [r7, #7]
 800898a:	4b05      	ldr	r3, [pc, #20]	; (80089a0 <Send_Self_Sharing+0xc8>)
 800898c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008990:	79fa      	ldrb	r2, [r7, #7]
 8008992:	429a      	cmp	r2, r3
 8008994:	d3a6      	bcc.n	80088e4 <Send_Self_Sharing+0xc>
		}
	}
}
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	bd90      	pop	{r4, r7, pc}
 800899c:	200024b8 	.word	0x200024b8
 80089a0:	20000504 	.word	0x20000504
 80089a4:	20002da4 	.word	0x20002da4
 80089a8:	200033f8 	.word	0x200033f8
 80089ac:	20002f84 	.word	0x20002f84

080089b0 <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 80089b4:	4b29      	ldr	r3, [pc, #164]	; (8008a5c <Detect_CAN_Xchange_Failure+0xac>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d101      	bne.n	80089c0 <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 80089bc:	f00d fe2e 	bl	801661c <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80089c0:	4927      	ldr	r1, [pc, #156]	; (8008a60 <Detect_CAN_Xchange_Failure+0xb0>)
 80089c2:	4828      	ldr	r0, [pc, #160]	; (8008a64 <Detect_CAN_Xchange_Failure+0xb4>)
 80089c4:	f7f7 fc3c 	bl	8000240 <strcmp>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d103      	bne.n	80089d6 <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 80089ce:	4b23      	ldr	r3, [pc, #140]	; (8008a5c <Detect_CAN_Xchange_Failure+0xac>)
 80089d0:	2201      	movs	r2, #1
 80089d2:	701a      	strb	r2, [r3, #0]
		return;
 80089d4:	e040      	b.n	8008a58 <Detect_CAN_Xchange_Failure+0xa8>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 80089d6:	4b24      	ldr	r3, [pc, #144]	; (8008a68 <Detect_CAN_Xchange_Failure+0xb8>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4618      	mov	r0, r3
 80089dc:	f007 fdde 	bl	801059c <HAL_Elaps_Ticks>
 80089e0:	4602      	mov	r2, r0
 80089e2:	4b22      	ldr	r3, [pc, #136]	; (8008a6c <Detect_CAN_Xchange_Failure+0xbc>)
 80089e4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d335      	bcc.n	8008a58 <Detect_CAN_Xchange_Failure+0xa8>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 80089ec:	4b20      	ldr	r3, [pc, #128]	; (8008a70 <Detect_CAN_Xchange_Failure+0xc0>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	4b1d      	ldr	r3, [pc, #116]	; (8008a68 <Detect_CAN_Xchange_Failure+0xb8>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d02f      	beq.n	8008a58 <Detect_CAN_Xchange_Failure+0xa8>
		{
			Is_CAN_Exchange_happening = NO;
 80089f8:	4b18      	ldr	r3, [pc, #96]	; (8008a5c <Detect_CAN_Xchange_Failure+0xac>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 80089fe:	4b1a      	ldr	r3, [pc, #104]	; (8008a68 <Detect_CAN_Xchange_Failure+0xb8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a1b      	ldr	r2, [pc, #108]	; (8008a70 <Detect_CAN_Xchange_Failure+0xc0>)
 8008a04:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 8008a06:	4b18      	ldr	r3, [pc, #96]	; (8008a68 <Detect_CAN_Xchange_Failure+0xb8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f007 fdc6 	bl	801059c <HAL_Elaps_Ticks>
 8008a10:	4603      	mov	r3, r0
 8008a12:	4a18      	ldr	r2, [pc, #96]	; (8008a74 <Detect_CAN_Xchange_Failure+0xc4>)
 8008a14:	fba2 2303 	umull	r2, r3, r2, r3
 8008a18:	099b      	lsrs	r3, r3, #6
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	4816      	ldr	r0, [pc, #88]	; (8008a78 <Detect_CAN_Xchange_Failure+0xc8>)
 8008a1e:	f01e f8e5 	bl	8026bec <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 8008a22:	4816      	ldr	r0, [pc, #88]	; (8008a7c <Detect_CAN_Xchange_Failure+0xcc>)
 8008a24:	f01e f97e 	bl	8026d24 <puts>
			memset(&Rx_Ei_self_sharing_st,0,(sizeof(EI_SELF_SHARING_t)* EI_data.Hitachi_st.PeersCnt));
 8008a28:	4b10      	ldr	r3, [pc, #64]	; (8008a6c <Detect_CAN_Xchange_Failure+0xbc>)
 8008a2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	4613      	mov	r3, r2
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	4413      	add	r3, r2
 8008a36:	00db      	lsls	r3, r3, #3
 8008a38:	461a      	mov	r2, r3
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	4810      	ldr	r0, [pc, #64]	; (8008a80 <Detect_CAN_Xchange_Failure+0xd0>)
 8008a3e:	f01d ffed 	bl	8026a1c <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 8008a42:	22a2      	movs	r2, #162	; 0xa2
 8008a44:	2100      	movs	r1, #0
 8008a46:	480f      	ldr	r0, [pc, #60]	; (8008a84 <Detect_CAN_Xchange_Failure+0xd4>)
 8008a48:	f01d ffe8 	bl	8026a1c <memset>
			ReArrangedVitalData();
 8008a4c:	f001 fe1e 	bl	800a68c <ReArrangedVitalData>
			TransmitCanPkt(EI_PROCESS_DATA);
 8008a50:	f240 1019 	movw	r0, #281	; 0x119
 8008a54:	f008 fb56 	bl	8011104 <TransmitCanPkt>
		}
	}
}
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	2000030b 	.word	0x2000030b
 8008a60:	080286ec 	.word	0x080286ec
 8008a64:	20000505 	.word	0x20000505
 8008a68:	200024b4 	.word	0x200024b4
 8008a6c:	20000504 	.word	0x20000504
 8008a70:	200037a8 	.word	0x200037a8
 8008a74:	10624dd3 	.word	0x10624dd3
 8008a78:	080295dc 	.word	0x080295dc
 8008a7c:	0802960c 	.word	0x0802960c
 8008a80:	20002e94 	.word	0x20002e94
 8008a84:	20002770 	.word	0x20002770

08008a88 <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b0ae      	sub	sp, #184	; 0xb8
 8008a8c:	af00      	add	r7, sp, #0

#ifdef EI_1
	static uint32_t send_signals_serial_Clk = 0;
	static uint8_t Prev_Buff[MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS] = {0,};
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
 8008a8e:	2300      	movs	r3, #0
 8008a90:	607b      	str	r3, [r7, #4]
 8008a92:	f107 0308 	add.w	r3, r7, #8
 8008a96:	22a6      	movs	r2, #166	; 0xa6
 8008a98:	2100      	movs	r1, #0
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f01d ffbe 	bl	8026a1c <memset>
	uint16_t Serial_Byte = RESET;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
#endif


	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 8008aa6:	4bc9      	ldr	r3, [pc, #804]	; (8008dcc <Process_Send_Signals_2_MIE+0x344>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f007 fd76 	bl	801059c <HAL_Elaps_Ticks>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	4bc7      	ldr	r3, [pc, #796]	; (8008dd0 <Process_Send_Signals_2_MIE+0x348>)
 8008ab4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	f240 8282 	bls.w	8008fc2 <Process_Send_Signals_2_MIE+0x53a>
	{
		uint8_t Traverser = RESET;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
		uint8_t Choice = RESET;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
#ifdef EI_1
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008aca:	2300      	movs	r3, #0
 8008acc:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8008ad0:	e0c6      	b.n	8008c60 <Process_Send_Signals_2_MIE+0x1d8>
		{
			if( (MisMatchFlag[Traverser] == SET) && ( strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0))
 8008ad2:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008ad6:	4abf      	ldr	r2, [pc, #764]	; (8008dd4 <Process_Send_Signals_2_MIE+0x34c>)
 8008ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d11d      	bne.n	8008b1c <Process_Send_Signals_2_MIE+0x94>
 8008ae0:	49bd      	ldr	r1, [pc, #756]	; (8008dd8 <Process_Send_Signals_2_MIE+0x350>)
 8008ae2:	48be      	ldr	r0, [pc, #760]	; (8008ddc <Process_Send_Signals_2_MIE+0x354>)
 8008ae4:	f7f7 fbac 	bl	8000240 <strcmp>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d016      	beq.n	8008b1c <Process_Send_Signals_2_MIE+0x94>
			{
				printf("MisMatch Found:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008aee:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008af2:	4ab7      	ldr	r2, [pc, #732]	; (8008dd0 <Process_Send_Signals_2_MIE+0x348>)
 8008af4:	3366      	adds	r3, #102	; 0x66
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	4619      	mov	r1, r3
 8008afe:	48b8      	ldr	r0, [pc, #736]	; (8008de0 <Process_Send_Signals_2_MIE+0x358>)
 8008b00:	f01e f874 	bl	8026bec <iprintf>
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008b04:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008b08:	011b      	lsls	r3, r3, #4
 8008b0a:	4ab6      	ldr	r2, [pc, #728]	; (8008de4 <Process_Send_Signals_2_MIE+0x35c>)
 8008b0c:	4413      	add	r3, r2
 8008b0e:	3302      	adds	r3, #2
 8008b10:	2210      	movs	r2, #16
 8008b12:	2100      	movs	r1, #0
 8008b14:	4618      	mov	r0, r3
 8008b16:	f01d ff81 	bl	8026a1c <memset>
				continue;
 8008b1a:	e09c      	b.n	8008c56 <Process_Send_Signals_2_MIE+0x1ce>
			}
			Choice = RESET;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(OtherCardLink_Flag[Traverser] == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 8008b22:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008b26:	4ab0      	ldr	r2, [pc, #704]	; (8008de8 <Process_Send_Signals_2_MIE+0x360>)
 8008b28:	5cd3      	ldrb	r3, [r2, r3]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d106      	bne.n	8008b3c <Process_Send_Signals_2_MIE+0xb4>
 8008b2e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008b32:	f043 0301 	orr.w	r3, r3, #1
 8008b36:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8008b3a:	e005      	b.n	8008b48 <Process_Send_Signals_2_MIE+0xc0>
 8008b3c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008b40:	f023 0301 	bic.w	r3, r3, #1
 8008b44:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(SelfLinkFlag[Traverser] == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 8008b48:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008b4c:	4aa7      	ldr	r2, [pc, #668]	; (8008dec <Process_Send_Signals_2_MIE+0x364>)
 8008b4e:	5cd3      	ldrb	r3, [r2, r3]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d106      	bne.n	8008b62 <Process_Send_Signals_2_MIE+0xda>
 8008b54:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008b58:	f043 0302 	orr.w	r3, r3, #2
 8008b5c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8008b60:	e005      	b.n	8008b6e <Process_Send_Signals_2_MIE+0xe6>
 8008b62:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008b66:	f023 0302 	bic.w	r3, r3, #2
 8008b6a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4

			if(Debug_flag == 1)
 8008b6e:	4ba0      	ldr	r3, [pc, #640]	; (8008df0 <Process_Send_Signals_2_MIE+0x368>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d10c      	bne.n	8008b90 <Process_Send_Signals_2_MIE+0x108>
			{
				printf("Choice:%02X|%lu\n",Choice,EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008b76:	f897 10b4 	ldrb.w	r1, [r7, #180]	; 0xb4
 8008b7a:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008b7e:	4a94      	ldr	r2, [pc, #592]	; (8008dd0 <Process_Send_Signals_2_MIE+0x348>)
 8008b80:	3366      	adds	r3, #102	; 0x66
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	489a      	ldr	r0, [pc, #616]	; (8008df4 <Process_Send_Signals_2_MIE+0x36c>)
 8008b8c:	f01e f82e 	bl	8026bec <iprintf>
			}

			switch(Choice)
 8008b90:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d853      	bhi.n	8008c40 <Process_Send_Signals_2_MIE+0x1b8>
 8008b98:	a201      	add	r2, pc, #4	; (adr r2, 8008ba0 <Process_Send_Signals_2_MIE+0x118>)
 8008b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9e:	bf00      	nop
 8008ba0:	08008bb1 	.word	0x08008bb1
 8008ba4:	08008bc9 	.word	0x08008bc9
 8008ba8:	08008bf1 	.word	0x08008bf1
 8008bac:	08008c19 	.word	0x08008c19
			{
			case BOTHCARD_LINK_NOK:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008bb0:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008bb4:	011b      	lsls	r3, r3, #4
 8008bb6:	4a8b      	ldr	r2, [pc, #556]	; (8008de4 <Process_Send_Signals_2_MIE+0x35c>)
 8008bb8:	4413      	add	r3, r2
 8008bba:	3302      	adds	r3, #2
 8008bbc:	2210      	movs	r2, #16
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f01d ff2b 	bl	8026a1c <memset>
				break;
 8008bc6:	e046      	b.n	8008c56 <Process_Send_Signals_2_MIE+0x1ce>

			case OTHERCARD_LINK_OK:
				/*printf("\nOtherCard SET\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],OtherCard_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008bc8:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008bcc:	011b      	lsls	r3, r3, #4
 8008bce:	4a85      	ldr	r2, [pc, #532]	; (8008de4 <Process_Send_Signals_2_MIE+0x35c>)
 8008bd0:	4413      	add	r3, r2
 8008bd2:	1c98      	adds	r0, r3, #2
 8008bd4:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008bd8:	4613      	mov	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4a85      	ldr	r2, [pc, #532]	; (8008df8 <Process_Send_Signals_2_MIE+0x370>)
 8008be2:	4413      	add	r3, r2
 8008be4:	3301      	adds	r3, #1
 8008be6:	2210      	movs	r2, #16
 8008be8:	4619      	mov	r1, r3
 8008bea:	f01d feef 	bl	80269cc <memcpy>
				break;
 8008bee:	e032      	b.n	8008c56 <Process_Send_Signals_2_MIE+0x1ce>
			case THISCARD_LINK_OK:
				/*printf("\nOnly This Card SET\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008bf0:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	4a7b      	ldr	r2, [pc, #492]	; (8008de4 <Process_Send_Signals_2_MIE+0x35c>)
 8008bf8:	4413      	add	r3, r2
 8008bfa:	1c98      	adds	r0, r3, #2
 8008bfc:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008c00:	4613      	mov	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4a7c      	ldr	r2, [pc, #496]	; (8008dfc <Process_Send_Signals_2_MIE+0x374>)
 8008c0a:	4413      	add	r3, r2
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	2210      	movs	r2, #16
 8008c10:	4619      	mov	r1, r3
 8008c12:	f01d fedb 	bl	80269cc <memcpy>
				break;
 8008c16:	e01e      	b.n	8008c56 <Process_Send_Signals_2_MIE+0x1ce>
			case BOTHCARD_LINK_OK:
				/*printf("\nBothCard SET3\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008c18:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008c1c:	011b      	lsls	r3, r3, #4
 8008c1e:	4a71      	ldr	r2, [pc, #452]	; (8008de4 <Process_Send_Signals_2_MIE+0x35c>)
 8008c20:	4413      	add	r3, r2
 8008c22:	1c98      	adds	r0, r3, #2
 8008c24:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4a72      	ldr	r2, [pc, #456]	; (8008dfc <Process_Send_Signals_2_MIE+0x374>)
 8008c32:	4413      	add	r3, r2
 8008c34:	3301      	adds	r3, #1
 8008c36:	2210      	movs	r2, #16
 8008c38:	4619      	mov	r1, r3
 8008c3a:	f01d fec7 	bl	80269cc <memcpy>
				break;
 8008c3e:	e00a      	b.n	8008c56 <Process_Send_Signals_2_MIE+0x1ce>

			default:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008c40:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	4a67      	ldr	r2, [pc, #412]	; (8008de4 <Process_Send_Signals_2_MIE+0x35c>)
 8008c48:	4413      	add	r3, r2
 8008c4a:	3302      	adds	r3, #2
 8008c4c:	2210      	movs	r2, #16
 8008c4e:	2100      	movs	r1, #0
 8008c50:	4618      	mov	r0, r3
 8008c52:	f01d fee3 	bl	8026a1c <memset>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008c56:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8008c60:	4b5b      	ldr	r3, [pc, #364]	; (8008dd0 <Process_Send_Signals_2_MIE+0x348>)
 8008c62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c66:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	f4ff af31 	bcc.w	8008ad2 <Process_Send_Signals_2_MIE+0x4a>
			}
		}


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008c70:	4959      	ldr	r1, [pc, #356]	; (8008dd8 <Process_Send_Signals_2_MIE+0x350>)
 8008c72:	485a      	ldr	r0, [pc, #360]	; (8008ddc <Process_Send_Signals_2_MIE+0x354>)
 8008c74:	f7f7 fae4 	bl	8000240 <strcmp>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d102      	bne.n	8008c84 <Process_Send_Signals_2_MIE+0x1fc>
		{
			Is_CAN_Exchange_happening = YES;
 8008c7e:	4b60      	ldr	r3, [pc, #384]	; (8008e00 <Process_Send_Signals_2_MIE+0x378>)
 8008c80:	2201      	movs	r2, #1
 8008c82:	701a      	strb	r2, [r3, #0]
		}

		if(Is_CAN_Exchange_happening == NO)
 8008c84:	4b5e      	ldr	r3, [pc, #376]	; (8008e00 <Process_Send_Signals_2_MIE+0x378>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10a      	bne.n	8008ca2 <Process_Send_Signals_2_MIE+0x21a>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 8008c8c:	485d      	ldr	r0, [pc, #372]	; (8008e04 <Process_Send_Signals_2_MIE+0x37c>)
 8008c8e:	f01e f849 	bl	8026d24 <puts>
			printf("Sending Blank Relay statuses\n");
 8008c92:	485d      	ldr	r0, [pc, #372]	; (8008e08 <Process_Send_Signals_2_MIE+0x380>)
 8008c94:	f01e f846 	bl	8026d24 <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 8008c98:	22a2      	movs	r2, #162	; 0xa2
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	4851      	ldr	r0, [pc, #324]	; (8008de4 <Process_Send_Signals_2_MIE+0x35c>)
 8008c9e:	f01d febd 	bl	8026a1c <memset>
		}


		if(Debug_flag == 1)
 8008ca2:	4b53      	ldr	r3, [pc, #332]	; (8008df0 <Process_Send_Signals_2_MIE+0x368>)
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d143      	bne.n	8008d32 <Process_Send_Signals_2_MIE+0x2aa>
		{
			Get_time();
 8008caa:	f003 fee3 	bl	800ca74 <Get_time>
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 8008cae:	4b57      	ldr	r3, [pc, #348]	; (8008e0c <Process_Send_Signals_2_MIE+0x384>)
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	4b55      	ldr	r3, [pc, #340]	; (8008e0c <Process_Send_Signals_2_MIE+0x384>)
 8008cb6:	785b      	ldrb	r3, [r3, #1]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	4b54      	ldr	r3, [pc, #336]	; (8008e0c <Process_Send_Signals_2_MIE+0x384>)
 8008cbc:	789b      	ldrb	r3, [r3, #2]
 8008cbe:	4854      	ldr	r0, [pc, #336]	; (8008e10 <Process_Send_Signals_2_MIE+0x388>)
 8008cc0:	f01d ff94 	bl	8026bec <iprintf>
			ReArrangedVitalData();
 8008cc4:	f001 fce2 	bl	800a68c <ReArrangedVitalData>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8008cce:	e025      	b.n	8008d1c <Process_Send_Signals_2_MIE+0x294>
			{
				if(ReorderFlag == RESET)
 8008cd0:	4b50      	ldr	r3, [pc, #320]	; (8008e14 <Process_Send_Signals_2_MIE+0x38c>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d109      	bne.n	8008cec <Process_Send_Signals_2_MIE+0x264>
				{
					printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 8008cd8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008cdc:	4a41      	ldr	r2, [pc, #260]	; (8008de4 <Process_Send_Signals_2_MIE+0x35c>)
 8008cde:	4413      	add	r3, r2
 8008ce0:	789b      	ldrb	r3, [r3, #2]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	484c      	ldr	r0, [pc, #304]	; (8008e18 <Process_Send_Signals_2_MIE+0x390>)
 8008ce6:	f01d ff81 	bl	8026bec <iprintf>
 8008cea:	e008      	b.n	8008cfe <Process_Send_Signals_2_MIE+0x276>
				}
				else
				{
					printf("%02X ",HitachiEI_DataReArranged_st.Inputs[Byte]);
 8008cec:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008cf0:	4a4a      	ldr	r2, [pc, #296]	; (8008e1c <Process_Send_Signals_2_MIE+0x394>)
 8008cf2:	4413      	add	r3, r2
 8008cf4:	789b      	ldrb	r3, [r3, #2]
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4847      	ldr	r0, [pc, #284]	; (8008e18 <Process_Send_Signals_2_MIE+0x390>)
 8008cfa:	f01d ff77 	bl	8026bec <iprintf>
				}
				if(((Byte+1)%16)==0)
 8008cfe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008d02:	3301      	adds	r3, #1
 8008d04:	f003 030f 	and.w	r3, r3, #15
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d102      	bne.n	8008d12 <Process_Send_Signals_2_MIE+0x28a>
				{
					printf("\n");
 8008d0c:	200a      	movs	r0, #10
 8008d0e:	f01d ff85 	bl	8026c1c <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8008d12:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008d16:	3301      	adds	r3, #1
 8008d18:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8008d1c:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8008d20:	4b2b      	ldr	r3, [pc, #172]	; (8008dd0 <Process_Send_Signals_2_MIE+0x348>)
 8008d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d26:	011b      	lsls	r3, r3, #4
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	dbd1      	blt.n	8008cd0 <Process_Send_Signals_2_MIE+0x248>
				}
			}
			printf("\n");
 8008d2c:	200a      	movs	r0, #10
 8008d2e:	f01d ff75 	bl	8026c1c <putchar>
		}

#if ENABLE_SIGNAL_PRINT
		PrintSignalsHitachi();
#endif
		ReArrangedVitalData();
 8008d32:	f001 fcab 	bl	800a68c <ReArrangedVitalData>
		TransmitCanPkt(EI_PROCESS_DATA);
 8008d36:	f240 1019 	movw	r0, #281	; 0x119
 8008d3a:	f008 f9e3 	bl	8011104 <TransmitCanPkt>


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008d3e:	4926      	ldr	r1, [pc, #152]	; (8008dd8 <Process_Send_Signals_2_MIE+0x350>)
 8008d40:	4826      	ldr	r0, [pc, #152]	; (8008ddc <Process_Send_Signals_2_MIE+0x354>)
 8008d42:	f7f7 fa7d 	bl	8000240 <strcmp>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f040 8135 	bne.w	8008fb8 <Process_Send_Signals_2_MIE+0x530>
		{
			if(HAL_Elaps_Ticks(send_signals_serial_Clk) >= TWO_SEC )
 8008d4e:	4b34      	ldr	r3, [pc, #208]	; (8008e20 <Process_Send_Signals_2_MIE+0x398>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f007 fc22 	bl	801059c <HAL_Elaps_Ticks>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008d5e:	f0c0 80ad 	bcc.w	8008ebc <Process_Send_Signals_2_MIE+0x434>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 8008d62:	4a30      	ldr	r2, [pc, #192]	; (8008e24 <Process_Send_Signals_2_MIE+0x39c>)
 8008d64:	4b1f      	ldr	r3, [pc, #124]	; (8008de4 <Process_Send_Signals_2_MIE+0x35c>)
 8008d66:	4610      	mov	r0, r2
 8008d68:	3302      	adds	r3, #2
 8008d6a:	22a0      	movs	r2, #160	; 0xa0
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	f01d fe2d 	bl	80269cc <memcpy>
				Serial_Byte = 0;
 8008d72:	2300      	movs	r3, #0
 8008d74:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008d78:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008d7c:	1c5a      	adds	r2, r3, #1
 8008d7e:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008d82:	33b8      	adds	r3, #184	; 0xb8
 8008d84:	443b      	add	r3, r7
 8008d86:	227e      	movs	r2, #126	; 0x7e
 8008d88:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008d8c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008d90:	1c5a      	adds	r2, r3, #1
 8008d92:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008d96:	33b8      	adds	r3, #184	; 0xb8
 8008d98:	443b      	add	r3, r7
 8008d9a:	227e      	movs	r2, #126	; 0x7e
 8008d9c:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008da0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008da4:	1c5a      	adds	r2, r3, #1
 8008da6:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008daa:	33b8      	adds	r3, #184	; 0xb8
 8008dac:	443b      	add	r3, r7
 8008dae:	227e      	movs	r2, #126	; 0x7e
 8008db0:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 8008db4:	4b0e      	ldr	r3, [pc, #56]	; (8008df0 <Process_Send_Signals_2_MIE+0x368>)
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d102      	bne.n	8008dc2 <Process_Send_Signals_2_MIE+0x33a>
				{
					printf("Sending Signals over Ethernet:\n");
 8008dbc:	481a      	ldr	r0, [pc, #104]	; (8008e28 <Process_Send_Signals_2_MIE+0x3a0>)
 8008dbe:	f01d ffb1 	bl	8026d24 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8008dc8:	e045      	b.n	8008e56 <Process_Send_Signals_2_MIE+0x3ce>
 8008dca:	bf00      	nop
 8008dcc:	200024e4 	.word	0x200024e4
 8008dd0:	20000504 	.word	0x20000504
 8008dd4:	20002550 	.word	0x20002550
 8008dd8:	080286ec 	.word	0x080286ec
 8008ddc:	20000505 	.word	0x20000505
 8008de0:	08029630 	.word	0x08029630
 8008de4:	20002770 	.word	0x20002770
 8008de8:	200025fc 	.word	0x200025fc
 8008dec:	200025f0 	.word	0x200025f0
 8008df0:	20000bbb 	.word	0x20000bbb
 8008df4:	08029644 	.word	0x08029644
 8008df8:	20003678 	.word	0x20003678
 8008dfc:	200035b0 	.word	0x200035b0
 8008e00:	2000030b 	.word	0x2000030b
 8008e04:	08029658 	.word	0x08029658
 8008e08:	0802967c 	.word	0x0802967c
 8008e0c:	20003fdc 	.word	0x20003fdc
 8008e10:	0802969c 	.word	0x0802969c
 8008e14:	2000254e 	.word	0x2000254e
 8008e18:	080296c4 	.word	0x080296c4
 8008e1c:	20002814 	.word	0x20002814
 8008e20:	200037ac 	.word	0x200037ac
 8008e24:	200037b0 	.word	0x200037b0
 8008e28:	080296cc 	.word	0x080296cc
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 8008e2c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008e30:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008e34:	1c59      	adds	r1, r3, #1
 8008e36:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4b63      	ldr	r3, [pc, #396]	; (8008fcc <Process_Send_Signals_2_MIE+0x544>)
 8008e3e:	4413      	add	r3, r2
 8008e40:	789a      	ldrb	r2, [r3, #2]
 8008e42:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 8008e46:	443b      	add	r3, r7
 8008e48:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008e4c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8008e50:	3301      	adds	r3, #1
 8008e52:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8008e56:	4b5d      	ldr	r3, [pc, #372]	; (8008fcc <Process_Send_Signals_2_MIE+0x544>)
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d3e4      	bcc.n	8008e2c <Process_Send_Signals_2_MIE+0x3a4>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008e62:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008e66:	1c5a      	adds	r2, r3, #1
 8008e68:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008e6c:	33b8      	adds	r3, #184	; 0xb8
 8008e6e:	443b      	add	r3, r7
 8008e70:	227f      	movs	r2, #127	; 0x7f
 8008e72:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008e76:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008e80:	33b8      	adds	r3, #184	; 0xb8
 8008e82:	443b      	add	r3, r7
 8008e84:	227f      	movs	r2, #127	; 0x7f
 8008e86:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008e8a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008e94:	33b8      	adds	r3, #184	; 0xb8
 8008e96:	443b      	add	r3, r7
 8008e98:	227f      	movs	r2, #127	; 0x7f
 8008e9a:	f803 2cb4 	strb.w	r2, [r3, #-180]

				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 8008e9e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008ea2:	b2d9      	uxtb	r1, r3
 8008ea4:	4a4a      	ldr	r2, [pc, #296]	; (8008fd0 <Process_Send_Signals_2_MIE+0x548>)
 8008ea6:	1d3b      	adds	r3, r7, #4
 8008ea8:	6812      	ldr	r2, [r2, #0]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f007 ff68 	bl	8010d80 <Udp_Send_SigInfo>
				send_signals_serial_Clk = HAL_GetTick();
 8008eb0:	f010 fe92 	bl	8019bd8 <HAL_GetTick>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	4a47      	ldr	r2, [pc, #284]	; (8008fd4 <Process_Send_Signals_2_MIE+0x54c>)
 8008eb8:	6013      	str	r3, [r2, #0]
 8008eba:	e07d      	b.n	8008fb8 <Process_Send_Signals_2_MIE+0x530>
			}
			else if(memcmp(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff)) != 0)
 8008ebc:	22a0      	movs	r2, #160	; 0xa0
 8008ebe:	4946      	ldr	r1, [pc, #280]	; (8008fd8 <Process_Send_Signals_2_MIE+0x550>)
 8008ec0:	4846      	ldr	r0, [pc, #280]	; (8008fdc <Process_Send_Signals_2_MIE+0x554>)
 8008ec2:	f01d fd73 	bl	80269ac <memcmp>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d075      	beq.n	8008fb8 <Process_Send_Signals_2_MIE+0x530>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 8008ecc:	4a43      	ldr	r2, [pc, #268]	; (8008fdc <Process_Send_Signals_2_MIE+0x554>)
 8008ece:	4b3f      	ldr	r3, [pc, #252]	; (8008fcc <Process_Send_Signals_2_MIE+0x544>)
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	3302      	adds	r3, #2
 8008ed4:	22a0      	movs	r2, #160	; 0xa0
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	f01d fd78 	bl	80269cc <memcpy>
				Serial_Byte = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008ee2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008eec:	33b8      	adds	r3, #184	; 0xb8
 8008eee:	443b      	add	r3, r7
 8008ef0:	227e      	movs	r2, #126	; 0x7e
 8008ef2:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008ef6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008f00:	33b8      	adds	r3, #184	; 0xb8
 8008f02:	443b      	add	r3, r7
 8008f04:	227e      	movs	r2, #126	; 0x7e
 8008f06:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008f0a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008f14:	33b8      	adds	r3, #184	; 0xb8
 8008f16:	443b      	add	r3, r7
 8008f18:	227e      	movs	r2, #126	; 0x7e
 8008f1a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 8008f1e:	4b30      	ldr	r3, [pc, #192]	; (8008fe0 <Process_Send_Signals_2_MIE+0x558>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d102      	bne.n	8008f2c <Process_Send_Signals_2_MIE+0x4a4>
				{
					printf("Sending Signals over Ethernet:\n");
 8008f26:	482f      	ldr	r0, [pc, #188]	; (8008fe4 <Process_Send_Signals_2_MIE+0x55c>)
 8008f28:	f01d fefc 	bl	8026d24 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8008f32:	e014      	b.n	8008f5e <Process_Send_Signals_2_MIE+0x4d6>
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 8008f34:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8008f38:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f3c:	1c59      	adds	r1, r3, #1
 8008f3e:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 8008f42:	4619      	mov	r1, r3
 8008f44:	4b21      	ldr	r3, [pc, #132]	; (8008fcc <Process_Send_Signals_2_MIE+0x544>)
 8008f46:	4413      	add	r3, r2
 8008f48:	789a      	ldrb	r2, [r3, #2]
 8008f4a:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 8008f4e:	443b      	add	r3, r7
 8008f50:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008f54:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8008f58:	3301      	adds	r3, #1
 8008f5a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8008f5e:	4b1b      	ldr	r3, [pc, #108]	; (8008fcc <Process_Send_Signals_2_MIE+0x544>)
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d3e4      	bcc.n	8008f34 <Process_Send_Signals_2_MIE+0x4ac>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008f6a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008f74:	33b8      	adds	r3, #184	; 0xb8
 8008f76:	443b      	add	r3, r7
 8008f78:	227f      	movs	r2, #127	; 0x7f
 8008f7a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008f7e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008f88:	33b8      	adds	r3, #184	; 0xb8
 8008f8a:	443b      	add	r3, r7
 8008f8c:	227f      	movs	r2, #127	; 0x7f
 8008f8e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008f92:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008f9c:	33b8      	adds	r3, #184	; 0xb8
 8008f9e:	443b      	add	r3, r7
 8008fa0:	227f      	movs	r2, #127	; 0x7f
 8008fa2:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 8008fa6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008faa:	b2d9      	uxtb	r1, r3
 8008fac:	4a08      	ldr	r2, [pc, #32]	; (8008fd0 <Process_Send_Signals_2_MIE+0x548>)
 8008fae:	1d3b      	adds	r3, r7, #4
 8008fb0:	6812      	ldr	r2, [r2, #0]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f007 fee4 	bl	8010d80 <Udp_Send_SigInfo>
#if ENABLE_SIGNAL_PRINT
		PrintSignalsHitachi();
#endif

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 8008fb8:	f010 fe0e 	bl	8019bd8 <HAL_GetTick>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	4a0a      	ldr	r2, [pc, #40]	; (8008fe8 <Process_Send_Signals_2_MIE+0x560>)
 8008fc0:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 8008fc2:	bf00      	nop
 8008fc4:	37b8      	adds	r7, #184	; 0xb8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20002770 	.word	0x20002770
 8008fd0:	200026e4 	.word	0x200026e4
 8008fd4:	200037ac 	.word	0x200037ac
 8008fd8:	20002772 	.word	0x20002772
 8008fdc:	200037b0 	.word	0x200037b0
 8008fe0:	20000bbb 	.word	0x20000bbb
 8008fe4:	080296cc 	.word	0x080296cc
 8008fe8:	200024e4 	.word	0x200024e4

08008fec <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 8008fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fee:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8008ff2:	af04      	add	r7, sp, #16
 8008ff4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008ff8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008ffc:	6018      	str	r0, [r3, #0]
 8008ffe:	4608      	mov	r0, r1
 8009000:	4611      	mov	r1, r2
 8009002:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009006:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800900a:	4602      	mov	r2, r0
 800900c:	701a      	strb	r2, [r3, #0]
 800900e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009012:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8009016:	460a      	mov	r2, r1
 8009018:	701a      	strb	r2, [r3, #0]
	char Print_buff[512] = {0,};
 800901a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800901e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009022:	2200      	movs	r2, #0
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	3304      	adds	r3, #4
 8009028:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800902c:	2100      	movs	r1, #0
 800902e:	4618      	mov	r0, r3
 8009030:	f01d fcf4 	bl	8026a1c <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 8009034:	2300      	movs	r3, #0
 8009036:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nR|"):Display("\nX|");
 800903a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800903e:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d003      	beq.n	8009050 <Print_EI_DATA+0x64>
 8009048:	48a8      	ldr	r0, [pc, #672]	; (80092ec <Print_EI_DATA+0x300>)
 800904a:	f000 f975 	bl	8009338 <Display>
 800904e:	e002      	b.n	8009056 <Print_EI_DATA+0x6a>
 8009050:	48a7      	ldr	r0, [pc, #668]	; (80092f0 <Print_EI_DATA+0x304>)
 8009052:	f000 f971 	bl	8009338 <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"DA:%lu|",ExtractBits(0,16,&Msg[1]));
 8009056:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800905a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	3301      	adds	r3, #1
 8009062:	461a      	mov	r2, r3
 8009064:	2110      	movs	r1, #16
 8009066:	2000      	movs	r0, #0
 8009068:	f7f7 fad4 	bl	8000614 <ExtractBits>
 800906c:	4602      	mov	r2, r0
 800906e:	f107 030c 	add.w	r3, r7, #12
 8009072:	49a0      	ldr	r1, [pc, #640]	; (80092f4 <Print_EI_DATA+0x308>)
 8009074:	4618      	mov	r0, r3
 8009076:	f01d ff71 	bl	8026f5c <siprintf>
	Display(Print_buff);
 800907a:	f107 030c 	add.w	r3, r7, #12
 800907e:	4618      	mov	r0, r3
 8009080:	f000 f95a 	bl	8009338 <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"SA:%lu|",ExtractBits(0,16,&Msg[3]));
 8009084:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009088:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	3303      	adds	r3, #3
 8009090:	461a      	mov	r2, r3
 8009092:	2110      	movs	r1, #16
 8009094:	2000      	movs	r0, #0
 8009096:	f7f7 fabd 	bl	8000614 <ExtractBits>
 800909a:	4602      	mov	r2, r0
 800909c:	f107 030c 	add.w	r3, r7, #12
 80090a0:	4995      	ldr	r1, [pc, #596]	; (80092f8 <Print_EI_DATA+0x30c>)
 80090a2:	4618      	mov	r0, r3
 80090a4:	f01d ff5a 	bl	8026f5c <siprintf>
	Display(Print_buff);
 80090a8:	f107 030c 	add.w	r3, r7, #12
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 f943 	bl	8009338 <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 80090b2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80090b6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3307      	adds	r3, #7
 80090be:	461a      	mov	r2, r3
 80090c0:	2108      	movs	r1, #8
 80090c2:	2000      	movs	r0, #0
 80090c4:	f7f7 faa6 	bl	8000614 <ExtractBits>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Display("MT:");
 80090ce:	488b      	ldr	r0, [pc, #556]	; (80092fc <Print_EI_DATA+0x310>)
 80090d0:	f000 f932 	bl	8009338 <Display>
	switch(Msg_type)
 80090d4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80090d8:	3b01      	subs	r3, #1
 80090da:	2b05      	cmp	r3, #5
 80090dc:	d829      	bhi.n	8009132 <Print_EI_DATA+0x146>
 80090de:	a201      	add	r2, pc, #4	; (adr r2, 80090e4 <Print_EI_DATA+0xf8>)
 80090e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e4:	080090fd 	.word	0x080090fd
 80090e8:	0800911b 	.word	0x0800911b
 80090ec:	08009133 	.word	0x08009133
 80090f0:	08009123 	.word	0x08009123
 80090f4:	08009133 	.word	0x08009133
 80090f8:	0800912b 	.word	0x0800912b
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 80090fc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009100:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d003      	beq.n	8009112 <Print_EI_DATA+0x126>
 800910a:	487d      	ldr	r0, [pc, #500]	; (8009300 <Print_EI_DATA+0x314>)
 800910c:	f000 f914 	bl	8009338 <Display>
		//Display("INIT     ");
		break;
 8009110:	e012      	b.n	8009138 <Print_EI_DATA+0x14c>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8009112:	487c      	ldr	r0, [pc, #496]	; (8009304 <Print_EI_DATA+0x318>)
 8009114:	f000 f910 	bl	8009338 <Display>
		break;
 8009118:	e00e      	b.n	8009138 <Print_EI_DATA+0x14c>
	case 2:
		Display("VIT");
 800911a:	487b      	ldr	r0, [pc, #492]	; (8009308 <Print_EI_DATA+0x31c>)
 800911c:	f000 f90c 	bl	8009338 <Display>
		break;
 8009120:	e00a      	b.n	8009138 <Print_EI_DATA+0x14c>
	case 4:
		Display("STS");
 8009122:	487a      	ldr	r0, [pc, #488]	; (800930c <Print_EI_DATA+0x320>)
 8009124:	f000 f908 	bl	8009338 <Display>
		break;
 8009128:	e006      	b.n	8009138 <Print_EI_DATA+0x14c>
	case 6:
		Display("SER");
 800912a:	4879      	ldr	r0, [pc, #484]	; (8009310 <Print_EI_DATA+0x324>)
 800912c:	f000 f904 	bl	8009338 <Display>
		break;
 8009130:	e002      	b.n	8009138 <Print_EI_DATA+0x14c>
	default:
		Display("UNKNOWN MESSAGE\n");
 8009132:	4878      	ldr	r0, [pc, #480]	; (8009314 <Print_EI_DATA+0x328>)
 8009134:	f000 f900 	bl	8009338 <Display>
	}
	Display("|");
 8009138:	4877      	ldr	r0, [pc, #476]	; (8009318 <Print_EI_DATA+0x32c>)
 800913a:	f000 f8fd 	bl	8009338 <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 800913e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009142:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3305      	adds	r3, #5
 800914a:	461a      	mov	r2, r3
 800914c:	2108      	movs	r1, #8
 800914e:	2000      	movs	r0, #0
 8009150:	f7f7 fa60 	bl	8000614 <ExtractBits>
 8009154:	4602      	mov	r2, r0
 8009156:	f107 030c 	add.w	r3, r7, #12
 800915a:	4970      	ldr	r1, [pc, #448]	; (800931c <Print_EI_DATA+0x330>)
 800915c:	4618      	mov	r0, r3
 800915e:	f01d fefd 	bl	8026f5c <siprintf>
	Display(Print_buff);
 8009162:	f107 030c 	add.w	r3, r7, #12
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f8e6 	bl	8009338 <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 800916c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009170:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3306      	adds	r3, #6
 8009178:	461a      	mov	r2, r3
 800917a:	2108      	movs	r1, #8
 800917c:	2000      	movs	r0, #0
 800917e:	f7f7 fa49 	bl	8000614 <ExtractBits>
 8009182:	4602      	mov	r2, r0
 8009184:	f107 030c 	add.w	r3, r7, #12
 8009188:	4965      	ldr	r1, [pc, #404]	; (8009320 <Print_EI_DATA+0x334>)
 800918a:	4618      	mov	r0, r3
 800918c:	f01d fee6 	bl	8026f5c <siprintf>
	Display(Print_buff);
 8009190:	f107 030c 	add.w	r3, r7, #12
 8009194:	4618      	mov	r0, r3
 8009196:	f000 f8cf 	bl	8009338 <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 800919a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800919e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3308      	adds	r3, #8
 80091a6:	461a      	mov	r2, r3
 80091a8:	2110      	movs	r1, #16
 80091aa:	2000      	movs	r0, #0
 80091ac:	f7f7 fa32 	bl	8000614 <ExtractBits>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 80091b6:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 80091ba:	f107 030c 	add.w	r3, r7, #12
 80091be:	4959      	ldr	r1, [pc, #356]	; (8009324 <Print_EI_DATA+0x338>)
 80091c0:	4618      	mov	r0, r3
 80091c2:	f01d fecb 	bl	8026f5c <siprintf>
	Display(Print_buff);
 80091c6:	f107 030c 	add.w	r3, r7, #12
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 f8b4 	bl	8009338 <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 80091d0:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 80091d4:	095b      	lsrs	r3, r3, #5
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d03f      	beq.n	8009260 <Print_EI_DATA+0x274>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 80091e0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80091e4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	330a      	adds	r3, #10
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	461d      	mov	r5, r3
 80091f0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80091f4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	330b      	adds	r3, #11
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	461e      	mov	r6, r3
 8009200:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009204:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	330c      	adds	r3, #12
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	461a      	mov	r2, r3
 8009210:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009214:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	330d      	adds	r3, #13
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	4619      	mov	r1, r3
 8009220:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009224:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	330e      	adds	r3, #14
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	461c      	mov	r4, r3
 8009230:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009234:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	330f      	adds	r3, #15
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	f107 000c 	add.w	r0, r7, #12
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	9402      	str	r4, [sp, #8]
 8009246:	9101      	str	r1, [sp, #4]
 8009248:	9200      	str	r2, [sp, #0]
 800924a:	4633      	mov	r3, r6
 800924c:	462a      	mov	r2, r5
 800924e:	4936      	ldr	r1, [pc, #216]	; (8009328 <Print_EI_DATA+0x33c>)
 8009250:	f01d fe84 	bl	8026f5c <siprintf>
		Display(Print_buff);
 8009254:	f107 030c 	add.w	r3, r7, #12
 8009258:	4618      	mov	r0, r3
 800925a:	f000 f86d 	bl	8009338 <Display>
 800925e:	e002      	b.n	8009266 <Print_EI_DATA+0x27a>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 8009260:	4832      	ldr	r0, [pc, #200]	; (800932c <Print_EI_DATA+0x340>)
 8009262:	f000 f869 	bl	8009338 <Display>
	}
	if(Debug_flag == 1)
 8009266:	4b32      	ldr	r3, [pc, #200]	; (8009330 <Print_EI_DATA+0x344>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d139      	bne.n	80092e2 <Print_EI_DATA+0x2f6>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 800926e:	2300      	movs	r3, #0
 8009270:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8009274:	e019      	b.n	80092aa <Print_EI_DATA+0x2be>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 8009276:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800927a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800927e:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8009282:	6812      	ldr	r2, [r2, #0]
 8009284:	4413      	add	r3, r2
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	461a      	mov	r2, r3
 800928a:	f107 030c 	add.w	r3, r7, #12
 800928e:	4929      	ldr	r1, [pc, #164]	; (8009334 <Print_EI_DATA+0x348>)
 8009290:	4618      	mov	r0, r3
 8009292:	f01d fe63 	bl	8026f5c <siprintf>
			Display(Print_buff);
 8009296:	f107 030c 	add.w	r3, r7, #12
 800929a:	4618      	mov	r0, r3
 800929c:	f000 f84c 	bl	8009338 <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 80092a0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80092a4:	3301      	adds	r3, #1
 80092a6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80092aa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80092ae:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 80092b2:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d3dc      	bcc.n	8009276 <Print_EI_DATA+0x28a>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 80092bc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80092c0:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10b      	bne.n	80092e2 <Print_EI_DATA+0x2f6>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 80092ca:	f107 030c 	add.w	r3, r7, #12
 80092ce:	22f6      	movs	r2, #246	; 0xf6
 80092d0:	4918      	ldr	r1, [pc, #96]	; (8009334 <Print_EI_DATA+0x348>)
 80092d2:	4618      	mov	r0, r3
 80092d4:	f01d fe42 	bl	8026f5c <siprintf>
			Display(Print_buff);
 80092d8:	f107 030c 	add.w	r3, r7, #12
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 f82b 	bl	8009338 <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 80092e2:	bf00      	nop
 80092e4:	f507 7705 	add.w	r7, r7, #532	; 0x214
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092ec:	080296ec 	.word	0x080296ec
 80092f0:	080296f0 	.word	0x080296f0
 80092f4:	080296f4 	.word	0x080296f4
 80092f8:	080296fc 	.word	0x080296fc
 80092fc:	08029704 	.word	0x08029704
 8009300:	08029708 	.word	0x08029708
 8009304:	08029710 	.word	0x08029710
 8009308:	08029718 	.word	0x08029718
 800930c:	0802971c 	.word	0x0802971c
 8009310:	08029720 	.word	0x08029720
 8009314:	08029724 	.word	0x08029724
 8009318:	08029738 	.word	0x08029738
 800931c:	0802973c 	.word	0x0802973c
 8009320:	08029748 	.word	0x08029748
 8009324:	08029754 	.word	0x08029754
 8009328:	08029760 	.word	0x08029760
 800932c:	08029784 	.word	0x08029784
 8009330:	20000bbb 	.word	0x20000bbb
 8009334:	080296c4 	.word	0x080296c4

08009338 <Display>:

void Display(char *Data)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 8009344:	e00a      	b.n	800935c <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	4413      	add	r3, r2
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	4619      	mov	r1, r3
 8009350:	2000      	movs	r0, #0
 8009352:	f010 f9e9 	bl	8019728 <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	3301      	adds	r3, #1
 800935a:	73fb      	strb	r3, [r7, #15]
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	4413      	add	r3, r2
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1ee      	bne.n	8009346 <Display+0xe>
	}
}
 8009368:	bf00      	nop
 800936a:	bf00      	nop
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
	...

08009374 <print_self_Details_Hitachi>:
	}

}

void print_self_Details_Hitachi(void)
{
 8009374:	b5b0      	push	{r4, r5, r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n______________________________ EI_1_SELF_DETAILS ______________________________\n");
 800937e:	4890      	ldr	r0, [pc, #576]	; (80095c0 <print_self_Details_Hitachi+0x24c>)
 8009380:	f01d fcd0 	bl	8026d24 <puts>
#endif
#ifdef EI_2
	printf("\n______________________________ EI_2_SELF_DETAILS ______________________________\n");
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8009384:	4b8f      	ldr	r3, [pc, #572]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 8009386:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800938a:	4619      	mov	r1, r3
 800938c:	488e      	ldr	r0, [pc, #568]	; (80095c8 <print_self_Details_Hitachi+0x254>)
 800938e:	f01d fc2d 	bl	8026bec <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 8009392:	4b8c      	ldr	r3, [pc, #560]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 8009394:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009398:	4619      	mov	r1, r3
 800939a:	488c      	ldr	r0, [pc, #560]	; (80095cc <print_self_Details_Hitachi+0x258>)
 800939c:	f01d fc26 	bl	8026bec <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 80093a0:	4b88      	ldr	r3, [pc, #544]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 80093a2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80093a6:	4619      	mov	r1, r3
 80093a8:	4889      	ldr	r0, [pc, #548]	; (80095d0 <print_self_Details_Hitachi+0x25c>)
 80093aa:	f01d fc1f 	bl	8026bec <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 80093ae:	4b85      	ldr	r3, [pc, #532]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 80093b0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80093b4:	4619      	mov	r1, r3
 80093b6:	4887      	ldr	r0, [pc, #540]	; (80095d4 <print_self_Details_Hitachi+0x260>)
 80093b8:	f01d fc18 	bl	8026bec <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 80093bc:	4b81      	ldr	r3, [pc, #516]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 80093be:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80093c2:	4619      	mov	r1, r3
 80093c4:	4884      	ldr	r0, [pc, #528]	; (80095d8 <print_self_Details_Hitachi+0x264>)
 80093c6:	f01d fc11 	bl	8026bec <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 80093ca:	4b7e      	ldr	r3, [pc, #504]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 80093cc:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 80093d0:	4619      	mov	r1, r3
 80093d2:	4882      	ldr	r0, [pc, #520]	; (80095dc <print_self_Details_Hitachi+0x268>)
 80093d4:	f01d fc0a 	bl	8026bec <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 80093d8:	4b7a      	ldr	r3, [pc, #488]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 80093da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80093de:	4619      	mov	r1, r3
 80093e0:	4879      	ldr	r0, [pc, #484]	; (80095c8 <print_self_Details_Hitachi+0x254>)
 80093e2:	f01d fc03 	bl	8026bec <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80093e6:	2300      	movs	r3, #0
 80093e8:	71fb      	strb	r3, [r7, #7]
 80093ea:	e03b      	b.n	8009464 <print_self_Details_Hitachi+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 80093ec:	79f9      	ldrb	r1, [r7, #7]
 80093ee:	79fb      	ldrb	r3, [r7, #7]
 80093f0:	4a74      	ldr	r2, [pc, #464]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 80093f2:	3312      	adds	r3, #18
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	78db      	ldrb	r3, [r3, #3]
 80093fa:	461c      	mov	r4, r3
 80093fc:	79fb      	ldrb	r3, [r7, #7]
 80093fe:	4a71      	ldr	r2, [pc, #452]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009408:	461d      	mov	r5, r3
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	4a6d      	ldr	r2, [pc, #436]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009416:	4618      	mov	r0, r3
 8009418:	79fb      	ldrb	r3, [r7, #7]
 800941a:	4a6a      	ldr	r2, [pc, #424]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	9000      	str	r0, [sp, #0]
 8009428:	462b      	mov	r3, r5
 800942a:	4622      	mov	r2, r4
 800942c:	486c      	ldr	r0, [pc, #432]	; (80095e0 <print_self_Details_Hitachi+0x26c>)
 800942e:	f01d fbdd 	bl	8026bec <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 8009432:	79f9      	ldrb	r1, [r7, #7]
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	4a63      	ldr	r2, [pc, #396]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 8009438:	333e      	adds	r3, #62	; 0x3e
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	885b      	ldrh	r3, [r3, #2]
 8009440:	461a      	mov	r2, r3
 8009442:	4868      	ldr	r0, [pc, #416]	; (80095e4 <print_self_Details_Hitachi+0x270>)
 8009444:	f01d fbd2 	bl	8026bec <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 8009448:	79f9      	ldrb	r1, [r7, #7]
 800944a:	79fb      	ldrb	r3, [r7, #7]
 800944c:	4a5d      	ldr	r2, [pc, #372]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8009456:	461a      	mov	r2, r3
 8009458:	4863      	ldr	r0, [pc, #396]	; (80095e8 <print_self_Details_Hitachi+0x274>)
 800945a:	f01d fbc7 	bl	8026bec <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800945e:	79fb      	ldrb	r3, [r7, #7]
 8009460:	3301      	adds	r3, #1
 8009462:	71fb      	strb	r3, [r7, #7]
 8009464:	4b57      	ldr	r3, [pc, #348]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 8009466:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800946a:	79fa      	ldrb	r2, [r7, #7]
 800946c:	429a      	cmp	r2, r3
 800946e:	d3bd      	bcc.n	80093ec <print_self_Details_Hitachi+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 8009470:	4b54      	ldr	r3, [pc, #336]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 8009472:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8009476:	4619      	mov	r1, r3
 8009478:	4b52      	ldr	r3, [pc, #328]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 800947a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800947e:	461a      	mov	r2, r3
 8009480:	4b50      	ldr	r3, [pc, #320]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 8009482:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009486:	4618      	mov	r0, r3
 8009488:	4b4e      	ldr	r3, [pc, #312]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 800948a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	4603      	mov	r3, r0
 8009492:	4856      	ldr	r0, [pc, #344]	; (80095ec <print_self_Details_Hitachi+0x278>)
 8009494:	f01d fbaa 	bl	8026bec <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 8009498:	4b4a      	ldr	r3, [pc, #296]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 800949a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800949e:	4618      	mov	r0, r3
 80094a0:	4b48      	ldr	r3, [pc, #288]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 80094a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094a6:	461c      	mov	r4, r3
 80094a8:	4b46      	ldr	r3, [pc, #280]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 80094aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094ae:	461d      	mov	r5, r3
 80094b0:	4b44      	ldr	r3, [pc, #272]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 80094b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094b6:	461a      	mov	r2, r3
 80094b8:	4b42      	ldr	r3, [pc, #264]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 80094ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80094be:	4619      	mov	r1, r3
 80094c0:	4b40      	ldr	r3, [pc, #256]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 80094c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094c6:	9302      	str	r3, [sp, #8]
 80094c8:	9101      	str	r1, [sp, #4]
 80094ca:	9200      	str	r2, [sp, #0]
 80094cc:	462b      	mov	r3, r5
 80094ce:	4622      	mov	r2, r4
 80094d0:	4601      	mov	r1, r0
 80094d2:	4847      	ldr	r0, [pc, #284]	; (80095f0 <print_self_Details_Hitachi+0x27c>)
 80094d4:	f01d fb8a 	bl	8026bec <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 80094d8:	4b3a      	ldr	r3, [pc, #232]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 80094da:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 80094de:	4619      	mov	r1, r3
 80094e0:	4844      	ldr	r0, [pc, #272]	; (80095f4 <print_self_Details_Hitachi+0x280>)
 80094e2:	f01d fb83 	bl	8026bec <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80094e6:	2300      	movs	r3, #0
 80094e8:	71fb      	strb	r3, [r7, #7]
 80094ea:	e05c      	b.n	80095a6 <print_self_Details_Hitachi+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 80094ec:	79fb      	ldrb	r3, [r7, #7]
 80094ee:	3301      	adds	r3, #1
 80094f0:	4619      	mov	r1, r3
 80094f2:	4841      	ldr	r0, [pc, #260]	; (80095f8 <print_self_Details_Hitachi+0x284>)
 80094f4:	f01d fb7a 	bl	8026bec <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 80094f8:	79fb      	ldrb	r3, [r7, #7]
 80094fa:	4a32      	ldr	r2, [pc, #200]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 80094fc:	3366      	adds	r3, #102	; 0x66
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	4619      	mov	r1, r3
 8009506:	483d      	ldr	r0, [pc, #244]	; (80095fc <print_self_Details_Hitachi+0x288>)
 8009508:	f01d fb70 	bl	8026bec <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 800950c:	79fb      	ldrb	r3, [r7, #7]
 800950e:	4a2d      	ldr	r2, [pc, #180]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 8009510:	3370      	adds	r3, #112	; 0x70
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	4619      	mov	r1, r3
 800951a:	4839      	ldr	r0, [pc, #228]	; (8009600 <print_self_Details_Hitachi+0x28c>)
 800951c:	f01d fb66 	bl	8026bec <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 8009520:	79fb      	ldrb	r3, [r7, #7]
 8009522:	4a28      	ldr	r2, [pc, #160]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 8009524:	33f4      	adds	r3, #244	; 0xf4
 8009526:	005b      	lsls	r3, r3, #1
 8009528:	4413      	add	r3, r2
 800952a:	889b      	ldrh	r3, [r3, #4]
 800952c:	4619      	mov	r1, r3
 800952e:	4835      	ldr	r0, [pc, #212]	; (8009604 <print_self_Details_Hitachi+0x290>)
 8009530:	f01d fb5c 	bl	8026bec <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 8009534:	79fb      	ldrb	r3, [r7, #7]
 8009536:	4a23      	ldr	r2, [pc, #140]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 8009538:	4413      	add	r3, r2
 800953a:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800953e:	4619      	mov	r1, r3
 8009540:	4831      	ldr	r0, [pc, #196]	; (8009608 <print_self_Details_Hitachi+0x294>)
 8009542:	f01d fb53 	bl	8026bec <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	4a1e      	ldr	r2, [pc, #120]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 800954a:	4413      	add	r3, r2
 800954c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009550:	4619      	mov	r1, r3
 8009552:	482e      	ldr	r0, [pc, #184]	; (800960c <print_self_Details_Hitachi+0x298>)
 8009554:	f01d fb4a 	bl	8026bec <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	4a1a      	ldr	r2, [pc, #104]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 800955c:	4413      	add	r3, r2
 800955e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009562:	4619      	mov	r1, r3
 8009564:	482a      	ldr	r0, [pc, #168]	; (8009610 <print_self_Details_Hitachi+0x29c>)
 8009566:	f01d fb41 	bl	8026bec <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 800956a:	79fb      	ldrb	r3, [r7, #7]
 800956c:	4a15      	ldr	r2, [pc, #84]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 800956e:	338a      	adds	r3, #138	; 0x8a
 8009570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009574:	4619      	mov	r1, r3
 8009576:	4827      	ldr	r0, [pc, #156]	; (8009614 <print_self_Details_Hitachi+0x2a0>)
 8009578:	f01d fb38 	bl	8026bec <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 800957c:	79fb      	ldrb	r3, [r7, #7]
 800957e:	4a11      	ldr	r2, [pc, #68]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 8009580:	3394      	adds	r3, #148	; 0x94
 8009582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009586:	4619      	mov	r1, r3
 8009588:	4823      	ldr	r0, [pc, #140]	; (8009618 <print_self_Details_Hitachi+0x2a4>)
 800958a:	f01d fb2f 	bl	8026bec <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	4a0c      	ldr	r2, [pc, #48]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 8009592:	339e      	adds	r3, #158	; 0x9e
 8009594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009598:	4619      	mov	r1, r3
 800959a:	4820      	ldr	r0, [pc, #128]	; (800961c <print_self_Details_Hitachi+0x2a8>)
 800959c:	f01d fb26 	bl	8026bec <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80095a0:	79fb      	ldrb	r3, [r7, #7]
 80095a2:	3301      	adds	r3, #1
 80095a4:	71fb      	strb	r3, [r7, #7]
 80095a6:	4b07      	ldr	r3, [pc, #28]	; (80095c4 <print_self_Details_Hitachi+0x250>)
 80095a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095ac:	79fa      	ldrb	r2, [r7, #7]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d39c      	bcc.n	80094ec <print_self_Details_Hitachi+0x178>

	}

#ifdef EI_1
	printf("\n______________________________ EI_1_SELF_DETAILS ______________________________\n");
 80095b2:	4803      	ldr	r0, [pc, #12]	; (80095c0 <print_self_Details_Hitachi+0x24c>)
 80095b4:	f01d fbb6 	bl	8026d24 <puts>
#endif
#ifdef EI_2
	printf("\n______________________________ EI_2_SELF_DETAILS ______________________________\n");
#endif
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bdb0      	pop	{r4, r5, r7, pc}
 80095c0:	080297f8 	.word	0x080297f8
 80095c4:	20000504 	.word	0x20000504
 80095c8:	0802984c 	.word	0x0802984c
 80095cc:	08029870 	.word	0x08029870
 80095d0:	08029894 	.word	0x08029894
 80095d4:	080298c0 	.word	0x080298c0
 80095d8:	080298ec 	.word	0x080298ec
 80095dc:	08029918 	.word	0x08029918
 80095e0:	08029944 	.word	0x08029944
 80095e4:	08029964 	.word	0x08029964
 80095e8:	08029974 	.word	0x08029974
 80095ec:	08029984 	.word	0x08029984
 80095f0:	080299a0 	.word	0x080299a0
 80095f4:	080299d0 	.word	0x080299d0
 80095f8:	080299e4 	.word	0x080299e4
 80095fc:	080299f8 	.word	0x080299f8
 8009600:	08029a14 	.word	0x08029a14
 8009604:	08029a30 	.word	0x08029a30
 8009608:	08029a4c 	.word	0x08029a4c
 800960c:	08029a64 	.word	0x08029a64
 8009610:	08029a78 	.word	0x08029a78
 8009614:	08029a8c 	.word	0x08029a8c
 8009618:	08029aa8 	.word	0x08029aa8
 800961c:	08029ac4 	.word	0x08029ac4

08009620 <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 8009626:	2300      	movs	r3, #0
 8009628:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800962a:	2300      	movs	r3, #0
 800962c:	71fb      	strb	r3, [r7, #7]
 800962e:	e054      	b.n	80096da <Send_Init_After_Timeout+0xba>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 8009630:	79fb      	ldrb	r3, [r7, #7]
 8009632:	4a2f      	ldr	r2, [pc, #188]	; (80096f0 <Send_Init_After_Timeout+0xd0>)
 8009634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d04b      	beq.n	80096d4 <Send_Init_After_Timeout+0xb4>
		{
#ifdef EI_1
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 800963c:	79fb      	ldrb	r3, [r7, #7]
 800963e:	4a2c      	ldr	r2, [pc, #176]	; (80096f0 <Send_Init_After_Timeout+0xd0>)
 8009640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009644:	4618      	mov	r0, r3
 8009646:	f006 ffa9 	bl	801059c <HAL_Elaps_Ticks>
 800964a:	4602      	mov	r2, r0
 800964c:	79fb      	ldrb	r3, [r7, #7]
 800964e:	4929      	ldr	r1, [pc, #164]	; (80096f4 <Send_Init_After_Timeout+0xd4>)
 8009650:	3394      	adds	r3, #148	; 0x94
 8009652:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if(
 8009656:	429a      	cmp	r2, r3
 8009658:	d93c      	bls.n	80096d4 <Send_Init_After_Timeout+0xb4>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 800965a:	79fb      	ldrb	r3, [r7, #7]
 800965c:	4a26      	ldr	r2, [pc, #152]	; (80096f8 <Send_Init_After_Timeout+0xd8>)
 800965e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009662:	4618      	mov	r0, r3
 8009664:	f006 ff9a 	bl	801059c <HAL_Elaps_Ticks>
 8009668:	4602      	mov	r2, r0
 800966a:	79fb      	ldrb	r3, [r7, #7]
 800966c:	4921      	ldr	r1, [pc, #132]	; (80096f4 <Send_Init_After_Timeout+0xd4>)
 800966e:	3394      	adds	r3, #148	; 0x94
 8009670:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8009674:	429a      	cmp	r2, r3
 8009676:	d92d      	bls.n	80096d4 <Send_Init_After_Timeout+0xb4>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8009678:	79fb      	ldrb	r3, [r7, #7]
 800967a:	4a20      	ldr	r2, [pc, #128]	; (80096fc <Send_Init_After_Timeout+0xdc>)
 800967c:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 800967e:	2b01      	cmp	r3, #1
 8009680:	d028      	beq.n	80096d4 <Send_Init_After_Timeout+0xb4>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 8009682:	79fb      	ldrb	r3, [r7, #7]
 8009684:	4a1e      	ldr	r2, [pc, #120]	; (8009700 <Send_Init_After_Timeout+0xe0>)
 8009686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 800968a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800968e:	d921      	bls.n	80096d4 <Send_Init_After_Timeout+0xb4>
			)
			{
				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 8009690:	79fb      	ldrb	r3, [r7, #7]
 8009692:	4a17      	ldr	r2, [pc, #92]	; (80096f0 <Send_Init_After_Timeout+0xd0>)
 8009694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009698:	4618      	mov	r0, r3
 800969a:	f006 ff7f 	bl	801059c <HAL_Elaps_Ticks>
 800969e:	4603      	mov	r3, r0
 80096a0:	4a18      	ldr	r2, [pc, #96]	; (8009704 <Send_Init_After_Timeout+0xe4>)
 80096a2:	fba2 2303 	umull	r2, r3, r2, r3
 80096a6:	099b      	lsrs	r3, r3, #6
 80096a8:	4619      	mov	r1, r3
 80096aa:	4817      	ldr	r0, [pc, #92]	; (8009708 <Send_Init_After_Timeout+0xe8>)
 80096ac:	f01d fa9e 	bl	8026bec <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 80096b0:	79fb      	ldrb	r3, [r7, #7]
 80096b2:	4a16      	ldr	r2, [pc, #88]	; (800970c <Send_Init_After_Timeout+0xec>)
 80096b4:	2101      	movs	r1, #1
 80096b6:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 80096b8:	79fa      	ldrb	r2, [r7, #7]
 80096ba:	79fb      	ldrb	r3, [r7, #7]
 80096bc:	4611      	mov	r1, r2
 80096be:	4618      	mov	r0, r3
 80096c0:	f7f9 f97e 	bl	80029c0 <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 80096c4:	79fb      	ldrb	r3, [r7, #7]
 80096c6:	4a0d      	ldr	r2, [pc, #52]	; (80096fc <Send_Init_After_Timeout+0xdc>)
 80096c8:	2101      	movs	r1, #1
 80096ca:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 80096cc:	79fb      	ldrb	r3, [r7, #7]
 80096ce:	4a10      	ldr	r2, [pc, #64]	; (8009710 <Send_Init_After_Timeout+0xf0>)
 80096d0:	2101      	movs	r1, #1
 80096d2:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80096d4:	79fb      	ldrb	r3, [r7, #7]
 80096d6:	3301      	adds	r3, #1
 80096d8:	71fb      	strb	r3, [r7, #7]
 80096da:	4b06      	ldr	r3, [pc, #24]	; (80096f4 <Send_Init_After_Timeout+0xd4>)
 80096dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096e0:	79fa      	ldrb	r2, [r7, #7]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d3a4      	bcc.n	8009630 <Send_Init_After_Timeout+0x10>
				INIT_REQ_SENT_Flag[Traverser] = 1;
			}
#endif
		}
	}
}
 80096e6:	bf00      	nop
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	20002630 	.word	0x20002630
 80096f4:	20000504 	.word	0x20000504
 80096f8:	20002510 	.word	0x20002510
 80096fc:	20002718 	.word	0x20002718
 8009700:	20002724 	.word	0x20002724
 8009704:	10624dd3 	.word	0x10624dd3
 8009708:	08029ae0 	.word	0x08029ae0
 800970c:	20002758 	.word	0x20002758
 8009710:	2000274c 	.word	0x2000274c

08009714 <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800971e:	e037      	b.n	8009790 <Send_Vital_Msg_After_Rx_VITAL+0x7c>
			Send_Vital_MSG_st.flag[Traverser] = RESET;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if(
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8009720:	79fa      	ldrb	r2, [r7, #7]
 8009722:	4921      	ldr	r1, [pc, #132]	; (80097a8 <Send_Vital_Msg_After_Rx_VITAL+0x94>)
 8009724:	4613      	mov	r3, r2
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	4413      	add	r3, r2
 800972a:	00db      	lsls	r3, r3, #3
 800972c:	440b      	add	r3, r1
 800972e:	3304      	adds	r3, #4
 8009730:	781b      	ldrb	r3, [r3, #0]
		if(
 8009732:	2b01      	cmp	r3, #1
 8009734:	d006      	beq.n	8009744 <Send_Vital_Msg_After_Rx_VITAL+0x30>
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8009736:	79fb      	ldrb	r3, [r7, #7]
 8009738:	4a1c      	ldr	r2, [pc, #112]	; (80097ac <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 800973a:	4413      	add	r3, r2
 800973c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009740:	2b02      	cmp	r3, #2
 8009742:	d122      	bne.n	800978a <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8009744:	79fb      	ldrb	r3, [r7, #7]
 8009746:	4a1a      	ldr	r2, [pc, #104]	; (80097b0 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8009748:	5cd3      	ldrb	r3, [r2, r3]
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 800974a:	2b01      	cmp	r3, #1
 800974c:	d11d      	bne.n	800978a <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 50 )
 800974e:	79fb      	ldrb	r3, [r7, #7]
 8009750:	4a17      	ldr	r2, [pc, #92]	; (80097b0 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8009752:	3302      	adds	r3, #2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4413      	add	r3, r2
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	4618      	mov	r0, r3
 800975c:	f006 ff1e 	bl	801059c <HAL_Elaps_Ticks>
 8009760:	4603      	mov	r3, r0
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8009762:	2b32      	cmp	r3, #50	; 0x32
 8009764:	d911      	bls.n	800978a <Send_Vital_Msg_After_Rx_VITAL+0x76>
		)
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 8009766:	79fa      	ldrb	r2, [r7, #7]
 8009768:	79fb      	ldrb	r3, [r7, #7]
 800976a:	4611      	mov	r1, r2
 800976c:	4618      	mov	r0, r3
 800976e:	f7fa ff35 	bl	80045dc <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = RESET;
 8009772:	79fb      	ldrb	r3, [r7, #7]
 8009774:	4a0e      	ldr	r2, [pc, #56]	; (80097b0 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8009776:	2100      	movs	r1, #0
 8009778:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 800977a:	79fb      	ldrb	r3, [r7, #7]
 800977c:	4a0c      	ldr	r2, [pc, #48]	; (80097b0 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 800977e:	3302      	adds	r3, #2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	f04f 32ff 	mov.w	r2, #4294967295
 8009788:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	3301      	adds	r3, #1
 800978e:	71fb      	strb	r3, [r7, #7]
 8009790:	4b06      	ldr	r3, [pc, #24]	; (80097ac <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 8009792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009796:	79fa      	ldrb	r2, [r7, #7]
 8009798:	429a      	cmp	r2, r3
 800979a:	d3c1      	bcc.n	8009720 <Send_Vital_Msg_After_Rx_VITAL+0xc>
		//			Send_Vital_Data_Message(Traverser, Traverser);
		//			Send_Vital_MSG_st.flag[Traverser] = RESET;
		//			Send_Vital_MSG_st.Clk[Traverser] = -1;
		//		}
	}
}
 800979c:	bf00      	nop
 800979e:	bf00      	nop
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20002da4 	.word	0x20002da4
 80097ac:	20000504 	.word	0x20000504
 80097b0:	200033c4 	.word	0x200033c4

080097b4 <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80097ba:	2300      	movs	r3, #0
 80097bc:	71fb      	strb	r3, [r7, #7]
 80097be:	e04e      	b.n	800985e <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 80097c0:	79fb      	ldrb	r3, [r7, #7]
 80097c2:	4a2c      	ldr	r2, [pc, #176]	; (8009874 <Check_Recv_Status_fail+0xc0>)
 80097c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d045      	beq.n	8009858 <Check_Recv_Status_fail+0xa4>
 80097cc:	79fa      	ldrb	r2, [r7, #7]
 80097ce:	492a      	ldr	r1, [pc, #168]	; (8009878 <Check_Recv_Status_fail+0xc4>)
 80097d0:	4613      	mov	r3, r2
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	4413      	add	r3, r2
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	440b      	add	r3, r1
 80097da:	3303      	adds	r3, #3
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d03a      	beq.n	8009858 <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 80097e2:	79fb      	ldrb	r3, [r7, #7]
 80097e4:	4a23      	ldr	r2, [pc, #140]	; (8009874 <Check_Recv_Status_fail+0xc0>)
 80097e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f006 fed6 	bl	801059c <HAL_Elaps_Ticks>
 80097f0:	4602      	mov	r2, r0
 80097f2:	79fb      	ldrb	r3, [r7, #7]
 80097f4:	4921      	ldr	r1, [pc, #132]	; (800987c <Check_Recv_Status_fail+0xc8>)
 80097f6:	338a      	adds	r3, #138	; 0x8a
 80097f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d92b      	bls.n	8009858 <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 8009800:	79fb      	ldrb	r3, [r7, #7]
 8009802:	4a1e      	ldr	r2, [pc, #120]	; (800987c <Check_Recv_Status_fail+0xc8>)
 8009804:	3366      	adds	r3, #102	; 0x66
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	6859      	ldr	r1, [r3, #4]
 800980c:	79fb      	ldrb	r3, [r7, #7]
 800980e:	4a1b      	ldr	r2, [pc, #108]	; (800987c <Check_Recv_Status_fail+0xc8>)
 8009810:	338a      	adds	r3, #138	; 0x8a
 8009812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009816:	4a1a      	ldr	r2, [pc, #104]	; (8009880 <Check_Recv_Status_fail+0xcc>)
 8009818:	fba2 2303 	umull	r2, r3, r2, r3
 800981c:	099b      	lsrs	r3, r3, #6
 800981e:	461a      	mov	r2, r3
 8009820:	4818      	ldr	r0, [pc, #96]	; (8009884 <Check_Recv_Status_fail+0xd0>)
 8009822:	f01d f9e3 	bl	8026bec <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 8009826:	79fb      	ldrb	r3, [r7, #7]
 8009828:	4a12      	ldr	r2, [pc, #72]	; (8009874 <Check_Recv_Status_fail+0xc0>)
 800982a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800982e:	4619      	mov	r1, r3
 8009830:	4815      	ldr	r0, [pc, #84]	; (8009888 <Check_Recv_Status_fail+0xd4>)
 8009832:	f01d f9db 	bl	8026bec <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 8009836:	f010 f9cf 	bl	8019bd8 <HAL_GetTick>
 800983a:	4603      	mov	r3, r0
 800983c:	4619      	mov	r1, r3
 800983e:	4813      	ldr	r0, [pc, #76]	; (800988c <Check_Recv_Status_fail+0xd8>)
 8009840:	f01d f9d4 	bl	8026bec <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 8009844:	79fa      	ldrb	r2, [r7, #7]
 8009846:	490c      	ldr	r1, [pc, #48]	; (8009878 <Check_Recv_Status_fail+0xc4>)
 8009848:	4613      	mov	r3, r2
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	4413      	add	r3, r2
 800984e:	00db      	lsls	r3, r3, #3
 8009850:	440b      	add	r3, r1
 8009852:	3303      	adds	r3, #3
 8009854:	2200      	movs	r2, #0
 8009856:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	3301      	adds	r3, #1
 800985c:	71fb      	strb	r3, [r7, #7]
 800985e:	4b07      	ldr	r3, [pc, #28]	; (800987c <Check_Recv_Status_fail+0xc8>)
 8009860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009864:	79fa      	ldrb	r2, [r7, #7]
 8009866:	429a      	cmp	r2, r3
 8009868:	d3aa      	bcc.n	80097c0 <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 800986a:	bf00      	nop
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	20002658 	.word	0x20002658
 8009878:	20002da4 	.word	0x20002da4
 800987c:	20000504 	.word	0x20000504
 8009880:	10624dd3 	.word	0x10624dd3
 8009884:	08029b0c 	.word	0x08029b0c
 8009888:	08029b40 	.word	0x08029b40
 800988c:	08029b70 	.word	0x08029b70

08009890 <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 8009890:	b590      	push	{r4, r7, lr}
 8009892:	b087      	sub	sp, #28
 8009894:	af00      	add	r7, sp, #0
 8009896:	4603      	mov	r3, r0
 8009898:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 80098a2:	2301      	movs	r3, #1
 80098a4:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 80098a6:	79fb      	ldrb	r3, [r7, #7]
 80098a8:	4a39      	ldr	r2, [pc, #228]	; (8009990 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 80098aa:	4413      	add	r3, r2
 80098ac:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d168      	bne.n	8009986 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 80098b4:	4b37      	ldr	r3, [pc, #220]	; (8009994 <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d164      	bne.n	8009986 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 80098bc:	79fa      	ldrb	r2, [r7, #7]
 80098be:	4936      	ldr	r1, [pc, #216]	; (8009998 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 80098c0:	4613      	mov	r3, r2
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	4413      	add	r3, r2
 80098c6:	005b      	lsls	r3, r3, #1
 80098c8:	440b      	add	r3, r1
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f002 ffd5 	bl	800c87c <bcdToDec>
 80098d2:	4603      	mov	r3, r0
 80098d4:	461a      	mov	r2, r3
 80098d6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80098da:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 80098de:	79fa      	ldrb	r2, [r7, #7]
 80098e0:	492d      	ldr	r1, [pc, #180]	; (8009998 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 80098e2:	4613      	mov	r3, r2
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	4413      	add	r3, r2
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	440b      	add	r3, r1
 80098ec:	3301      	adds	r3, #1
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f002 ffc3 	bl	800c87c <bcdToDec>
 80098f6:	4603      	mov	r3, r0
 80098f8:	461a      	mov	r2, r3
 80098fa:	4613      	mov	r3, r2
 80098fc:	011b      	lsls	r3, r3, #4
 80098fe:	1a9b      	subs	r3, r3, r2
 8009900:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8009902:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8009904:	79fa      	ldrb	r2, [r7, #7]
 8009906:	4924      	ldr	r1, [pc, #144]	; (8009998 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8009908:	4613      	mov	r3, r2
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	4413      	add	r3, r2
 800990e:	005b      	lsls	r3, r3, #1
 8009910:	440b      	add	r3, r1
 8009912:	3302      	adds	r3, #2
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	4618      	mov	r0, r3
 8009918:	f002 ffb0 	bl	800c87c <bcdToDec>
 800991c:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 800991e:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8009920:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8009922:	613b      	str	r3, [r7, #16]

		Get_time();
 8009924:	f003 f8a6 	bl	800ca74 <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8009928:	4b1c      	ldr	r3, [pc, #112]	; (800999c <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	461a      	mov	r2, r3
 800992e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009932:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 8009936:	4b19      	ldr	r3, [pc, #100]	; (800999c <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8009938:	785b      	ldrb	r3, [r3, #1]
 800993a:	4619      	mov	r1, r3
 800993c:	460b      	mov	r3, r1
 800993e:	011b      	lsls	r3, r3, #4
 8009940:	1a5b      	subs	r3, r3, r1
 8009942:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8009944:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8009946:	4a15      	ldr	r2, [pc, #84]	; (800999c <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8009948:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 800994a:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 800994c:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 800994e:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	bfb8      	it	lt
 800995a:	425b      	neglt	r3, r3
 800995c:	2b01      	cmp	r3, #1
 800995e:	dd12      	ble.n	8009986 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800996a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	4a07      	ldr	r2, [pc, #28]	; (8009990 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8009972:	3366      	adds	r3, #102	; 0x66
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	461a      	mov	r2, r3
 800997c:	4808      	ldr	r0, [pc, #32]	; (80099a0 <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 800997e:	f01d f935 	bl	8026bec <iprintf>
			Return_Value  = 0;
 8009982:	2300      	movs	r3, #0
 8009984:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 8009986:	7dfb      	ldrb	r3, [r7, #23]
}
 8009988:	4618      	mov	r0, r3
 800998a:	371c      	adds	r7, #28
 800998c:	46bd      	mov	sp, r7
 800998e:	bd90      	pop	{r4, r7, pc}
 8009990:	20000504 	.word	0x20000504
 8009994:	200024e0 	.word	0x200024e0
 8009998:	200028b8 	.word	0x200028b8
 800999c:	20003fdc 	.word	0x20003fdc
 80099a0:	08029b7c 	.word	0x08029b7c

080099a4 <Check_All_Peers>:

void Check_All_Peers(void)
{
 80099a4:	b590      	push	{r4, r7, lr}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80099aa:	2300      	movs	r3, #0
 80099ac:	71fb      	strb	r3, [r7, #7]
 80099ae:	e045      	b.n	8009a3c <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fe fd64 	bl	8008480 <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 80099b8:	79fa      	ldrb	r2, [r7, #7]
 80099ba:	4926      	ldr	r1, [pc, #152]	; (8009a54 <Check_All_Peers+0xb0>)
 80099bc:	4613      	mov	r3, r2
 80099be:	005b      	lsls	r3, r3, #1
 80099c0:	4413      	add	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	440b      	add	r3, r1
 80099c6:	3304      	adds	r3, #4
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f006 fde6 	bl	801059c <HAL_Elaps_Ticks>
 80099d0:	4602      	mov	r2, r0
 80099d2:	79fb      	ldrb	r3, [r7, #7]
 80099d4:	4920      	ldr	r1, [pc, #128]	; (8009a58 <Check_All_Peers+0xb4>)
 80099d6:	338a      	adds	r3, #138	; 0x8a
 80099d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d92a      	bls.n	8009a36 <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 80099e0:	79fa      	ldrb	r2, [r7, #7]
 80099e2:	491c      	ldr	r1, [pc, #112]	; (8009a54 <Check_All_Peers+0xb0>)
 80099e4:	4613      	mov	r3, r2
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	4413      	add	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	440b      	add	r3, r1
 80099ee:	3301      	adds	r3, #1
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d11f      	bne.n	8009a36 <Check_All_Peers+0x92>
 80099f6:	79fb      	ldrb	r3, [r7, #7]
 80099f8:	4a18      	ldr	r2, [pc, #96]	; (8009a5c <Check_All_Peers+0xb8>)
 80099fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80099fe:	79fa      	ldrb	r2, [r7, #7]
 8009a00:	4814      	ldr	r0, [pc, #80]	; (8009a54 <Check_All_Peers+0xb0>)
 8009a02:	4613      	mov	r3, r2
 8009a04:	005b      	lsls	r3, r3, #1
 8009a06:	4413      	add	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4403      	add	r3, r0
 8009a0c:	3304      	adds	r3, #4
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4299      	cmp	r1, r3
 8009a12:	d010      	beq.n	8009a36 <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = RESET;
 8009a14:	79fa      	ldrb	r2, [r7, #7]
 8009a16:	490f      	ldr	r1, [pc, #60]	; (8009a54 <Check_All_Peers+0xb0>)
 8009a18:	4613      	mov	r3, r2
 8009a1a:	005b      	lsls	r3, r3, #1
 8009a1c:	4413      	add	r3, r2
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	440b      	add	r3, r1
 8009a22:	3301      	adds	r3, #1
 8009a24:	2200      	movs	r2, #0
 8009a26:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 8009a28:	79fc      	ldrb	r4, [r7, #7]
 8009a2a:	f010 f8d5 	bl	8019bd8 <HAL_GetTick>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	4a0a      	ldr	r2, [pc, #40]	; (8009a5c <Check_All_Peers+0xb8>)
 8009a32:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	71fb      	strb	r3, [r7, #7]
 8009a3c:	4b06      	ldr	r3, [pc, #24]	; (8009a58 <Check_All_Peers+0xb4>)
 8009a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a42:	79fa      	ldrb	r2, [r7, #7]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d3b3      	bcc.n	80099b0 <Check_All_Peers+0xc>
			}
		}
	}
}
 8009a48:	bf00      	nop
 8009a4a:	bf00      	nop
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd90      	pop	{r4, r7, pc}
 8009a52:	bf00      	nop
 8009a54:	200033f8 	.word	0x200033f8
 8009a58:	20000504 	.word	0x20000504
 8009a5c:	20003850 	.word	0x20003850

08009a60 <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 8009a60:	b590      	push	{r4, r7, lr}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8009a66:	4976      	ldr	r1, [pc, #472]	; (8009c40 <Check_for_RelayMisMatch+0x1e0>)
 8009a68:	4876      	ldr	r0, [pc, #472]	; (8009c44 <Check_for_RelayMisMatch+0x1e4>)
 8009a6a:	f7f6 fbe9 	bl	8000240 <strcmp>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 80e0 	beq.w	8009c36 <Check_for_RelayMisMatch+0x1d6>
	{
		return;
	}

	for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009a76:	2300      	movs	r3, #0
 8009a78:	71fb      	strb	r3, [r7, #7]
 8009a7a:	e0d4      	b.n	8009c26 <Check_for_RelayMisMatch+0x1c6>
	{
		if(EI_data.Hitachi_st.Interface_Type[Traverser] == ETHERNET)
 8009a7c:	79fb      	ldrb	r3, [r7, #7]
 8009a7e:	4a72      	ldr	r2, [pc, #456]	; (8009c48 <Check_for_RelayMisMatch+0x1e8>)
 8009a80:	4413      	add	r3, r2
 8009a82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	f000 80c7 	beq.w	8009c1a <Check_for_RelayMisMatch+0x1ba>
		{
			continue;
		}

		if((HAL_Elaps_Ticks(Check_Clk[Traverser]) < FIVE_SEC ) || (MisMatchFlag[Traverser] == SET))
 8009a8c:	79fb      	ldrb	r3, [r7, #7]
 8009a8e:	4a6f      	ldr	r2, [pc, #444]	; (8009c4c <Check_for_RelayMisMatch+0x1ec>)
 8009a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f006 fd81 	bl	801059c <HAL_Elaps_Ticks>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f241 3287 	movw	r2, #4999	; 0x1387
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d906      	bls.n	8009ab2 <Check_for_RelayMisMatch+0x52>
 8009aa4:	79fb      	ldrb	r3, [r7, #7]
 8009aa6:	4a6a      	ldr	r2, [pc, #424]	; (8009c50 <Check_for_RelayMisMatch+0x1f0>)
 8009aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	f040 80ac 	bne.w	8009c0a <Check_for_RelayMisMatch+0x1aa>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (SelfLinkFlag[Traverser] == RESET))
 8009ab2:	79fb      	ldrb	r3, [r7, #7]
 8009ab4:	4a67      	ldr	r2, [pc, #412]	; (8009c54 <Check_for_RelayMisMatch+0x1f4>)
 8009ab6:	5cd3      	ldrb	r3, [r2, r3]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d116      	bne.n	8009aea <Check_for_RelayMisMatch+0x8a>
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	4a66      	ldr	r2, [pc, #408]	; (8009c58 <Check_for_RelayMisMatch+0x1f8>)
 8009ac0:	5cd3      	ldrb	r3, [r2, r3]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d111      	bne.n	8009aea <Check_for_RelayMisMatch+0x8a>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 8009ac6:	79fa      	ldrb	r2, [r7, #7]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4a62      	ldr	r2, [pc, #392]	; (8009c5c <Check_for_RelayMisMatch+0x1fc>)
 8009ad2:	1898      	adds	r0, r3, r2
 8009ad4:	79fa      	ldrb	r2, [r7, #7]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4a60      	ldr	r2, [pc, #384]	; (8009c60 <Check_for_RelayMisMatch+0x200>)
 8009ae0:	4413      	add	r3, r2
 8009ae2:	2214      	movs	r2, #20
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	f01c ff71 	bl	80269cc <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 8009aea:	79fa      	ldrb	r2, [r7, #7]
 8009aec:	495b      	ldr	r1, [pc, #364]	; (8009c5c <Check_for_RelayMisMatch+0x1fc>)
 8009aee:	4613      	mov	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	440b      	add	r3, r1
 8009af8:	3312      	adds	r3, #18
 8009afa:	8819      	ldrh	r1, [r3, #0]
 8009afc:	79fa      	ldrb	r2, [r7, #7]
 8009afe:	4858      	ldr	r0, [pc, #352]	; (8009c60 <Check_for_RelayMisMatch+0x200>)
 8009b00:	4613      	mov	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4403      	add	r3, r0
 8009b0a:	3312      	adds	r3, #18
 8009b0c:	881b      	ldrh	r3, [r3, #0]
 8009b0e:	4299      	cmp	r1, r3
 8009b10:	d076      	beq.n	8009c00 <Check_for_RelayMisMatch+0x1a0>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 8009b12:	79fb      	ldrb	r3, [r7, #7]
 8009b14:	4a53      	ldr	r2, [pc, #332]	; (8009c64 <Check_for_RelayMisMatch+0x204>)
 8009b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f006 fd3e 	bl	801059c <HAL_Elaps_Ticks>
 8009b20:	4603      	mov	r3, r0
 8009b22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b26:	d37a      	bcc.n	8009c1e <Check_for_RelayMisMatch+0x1be>
				{
					continue;
				}
				else
				{
					MisMatchFlag[Traverser] = SET;
 8009b28:	79fb      	ldrb	r3, [r7, #7]
 8009b2a:	4a49      	ldr	r2, [pc, #292]	; (8009c50 <Check_for_RelayMisMatch+0x1f0>)
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if( ((Main_Relays_st[Traverser].RelayIPS_CRC == 0) && (OtherCard_Relays_st[Traverser].RelayIPS_CRC != 0)) || ((Main_Relays_st[Traverser].RelayIPS_CRC != 0) && (OtherCard_Relays_st[Traverser].RelayIPS_CRC == 0)) )
 8009b32:	79fa      	ldrb	r2, [r7, #7]
 8009b34:	4949      	ldr	r1, [pc, #292]	; (8009c5c <Check_for_RelayMisMatch+0x1fc>)
 8009b36:	4613      	mov	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	440b      	add	r3, r1
 8009b40:	3312      	adds	r3, #18
 8009b42:	881b      	ldrh	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10a      	bne.n	8009b5e <Check_for_RelayMisMatch+0xfe>
 8009b48:	79fa      	ldrb	r2, [r7, #7]
 8009b4a:	4945      	ldr	r1, [pc, #276]	; (8009c60 <Check_for_RelayMisMatch+0x200>)
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	440b      	add	r3, r1
 8009b56:	3312      	adds	r3, #18
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d115      	bne.n	8009b8a <Check_for_RelayMisMatch+0x12a>
 8009b5e:	79fa      	ldrb	r2, [r7, #7]
 8009b60:	493e      	ldr	r1, [pc, #248]	; (8009c5c <Check_for_RelayMisMatch+0x1fc>)
 8009b62:	4613      	mov	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	440b      	add	r3, r1
 8009b6c:	3312      	adds	r3, #18
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00f      	beq.n	8009b94 <Check_for_RelayMisMatch+0x134>
 8009b74:	79fa      	ldrb	r2, [r7, #7]
 8009b76:	493a      	ldr	r1, [pc, #232]	; (8009c60 <Check_for_RelayMisMatch+0x200>)
 8009b78:	4613      	mov	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	440b      	add	r3, r1
 8009b82:	3312      	adds	r3, #18
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d104      	bne.n	8009b94 <Check_for_RelayMisMatch+0x134>
					{
						MisMatchFlag[Traverser] = RESET;
 8009b8a:	79fb      	ldrb	r3, [r7, #7]
 8009b8c:	4a30      	ldr	r2, [pc, #192]	; (8009c50 <Check_for_RelayMisMatch+0x1f0>)
 8009b8e:	2100      	movs	r1, #0
 8009b90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					if(MisMatchFlag[Traverser] ==  SET)
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	4a2e      	ldr	r2, [pc, #184]	; (8009c50 <Check_for_RelayMisMatch+0x1f0>)
 8009b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d134      	bne.n	8009c0a <Check_for_RelayMisMatch+0x1aa>
					{
						printf("S:%u|O:%u\n",SelfLinkFlag[Traverser],OtherCardLink_Flag[Traverser]);
 8009ba0:	79fb      	ldrb	r3, [r7, #7]
 8009ba2:	4a2d      	ldr	r2, [pc, #180]	; (8009c58 <Check_for_RelayMisMatch+0x1f8>)
 8009ba4:	5cd3      	ldrb	r3, [r2, r3]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	79fb      	ldrb	r3, [r7, #7]
 8009baa:	4a2a      	ldr	r2, [pc, #168]	; (8009c54 <Check_for_RelayMisMatch+0x1f4>)
 8009bac:	5cd3      	ldrb	r3, [r2, r3]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	482d      	ldr	r0, [pc, #180]	; (8009c68 <Check_for_RelayMisMatch+0x208>)
 8009bb2:	f01d f81b 	bl	8026bec <iprintf>
						printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8009bb6:	79fb      	ldrb	r3, [r7, #7]
 8009bb8:	4a23      	ldr	r2, [pc, #140]	; (8009c48 <Check_for_RelayMisMatch+0x1e8>)
 8009bba:	3366      	adds	r3, #102	; 0x66
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	4829      	ldr	r0, [pc, #164]	; (8009c6c <Check_for_RelayMisMatch+0x20c>)
 8009bc6:	f01d f811 	bl	8026bec <iprintf>
						printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 8009bca:	79fa      	ldrb	r2, [r7, #7]
 8009bcc:	4923      	ldr	r1, [pc, #140]	; (8009c5c <Check_for_RelayMisMatch+0x1fc>)
 8009bce:	4613      	mov	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	440b      	add	r3, r1
 8009bd8:	3312      	adds	r3, #18
 8009bda:	881b      	ldrh	r3, [r3, #0]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	4824      	ldr	r0, [pc, #144]	; (8009c70 <Check_for_RelayMisMatch+0x210>)
 8009be0:	f01d f804 	bl	8026bec <iprintf>
						printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 8009be4:	79fa      	ldrb	r2, [r7, #7]
 8009be6:	491e      	ldr	r1, [pc, #120]	; (8009c60 <Check_for_RelayMisMatch+0x200>)
 8009be8:	4613      	mov	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	440b      	add	r3, r1
 8009bf2:	3312      	adds	r3, #18
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	481e      	ldr	r0, [pc, #120]	; (8009c74 <Check_for_RelayMisMatch+0x214>)
 8009bfa:	f01c fff7 	bl	8026bec <iprintf>
 8009bfe:	e004      	b.n	8009c0a <Check_for_RelayMisMatch+0x1aa>
					}
				}
			}
			else
			{
				MisMatchFlag[Traverser] = RESET; /* If both Relay CRC is Matching MisMatch will be RESET */
 8009c00:	79fb      	ldrb	r3, [r7, #7]
 8009c02:	4a13      	ldr	r2, [pc, #76]	; (8009c50 <Check_for_RelayMisMatch+0x1f0>)
 8009c04:	2100      	movs	r1, #0
 8009c06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
		Check_Clk[Traverser] = HAL_GetTick();
 8009c0a:	79fc      	ldrb	r4, [r7, #7]
 8009c0c:	f00f ffe4 	bl	8019bd8 <HAL_GetTick>
 8009c10:	4603      	mov	r3, r0
 8009c12:	4a0e      	ldr	r2, [pc, #56]	; (8009c4c <Check_for_RelayMisMatch+0x1ec>)
 8009c14:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009c18:	e002      	b.n	8009c20 <Check_for_RelayMisMatch+0x1c0>
			continue;
 8009c1a:	bf00      	nop
 8009c1c:	e000      	b.n	8009c20 <Check_for_RelayMisMatch+0x1c0>
					continue;
 8009c1e:	bf00      	nop
	for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009c20:	79fb      	ldrb	r3, [r7, #7]
 8009c22:	3301      	adds	r3, #1
 8009c24:	71fb      	strb	r3, [r7, #7]
 8009c26:	4b08      	ldr	r3, [pc, #32]	; (8009c48 <Check_for_RelayMisMatch+0x1e8>)
 8009c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c2c:	79fa      	ldrb	r2, [r7, #7]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	f4ff af24 	bcc.w	8009a7c <Check_for_RelayMisMatch+0x1c>
 8009c34:	e000      	b.n	8009c38 <Check_for_RelayMisMatch+0x1d8>
		return;
 8009c36:	bf00      	nop
	}
}
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd90      	pop	{r4, r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	080286ec 	.word	0x080286ec
 8009c44:	20000505 	.word	0x20000505
 8009c48:	20000504 	.word	0x20000504
 8009c4c:	20003878 	.word	0x20003878
 8009c50:	20002550 	.word	0x20002550
 8009c54:	200025fc 	.word	0x200025fc
 8009c58:	200025f0 	.word	0x200025f0
 8009c5c:	200035b0 	.word	0x200035b0
 8009c60:	20003678 	.word	0x20003678
 8009c64:	20002564 	.word	0x20002564
 8009c68:	08029bbc 	.word	0x08029bbc
 8009c6c:	08029bc8 	.word	0x08029bc8
 8009c70:	08029bd4 	.word	0x08029bd4
 8009c74:	08029be4 	.word	0x08029be4

08009c78 <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	4603      	mov	r3, r0
 8009c80:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8009c82:	f00f ffa9 	bl	8019bd8 <HAL_GetTick>
 8009c86:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 8009c88:	79fa      	ldrb	r2, [r7, #7]
 8009c8a:	4935      	ldr	r1, [pc, #212]	; (8009d60 <CheckOtherLinkStatus+0xe8>)
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	005b      	lsls	r3, r3, #1
 8009c90:	4413      	add	r3, r2
 8009c92:	00db      	lsls	r3, r3, #3
 8009c94:	440b      	add	r3, r1
 8009c96:	3302      	adds	r3, #2
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d11d      	bne.n	8009cda <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 8009c9e:	79fb      	ldrb	r3, [r7, #7]
 8009ca0:	4930      	ldr	r1, [pc, #192]	; (8009d64 <CheckOtherLinkStatus+0xec>)
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 8009ca8:	79fa      	ldrb	r2, [r7, #7]
 8009caa:	492f      	ldr	r1, [pc, #188]	; (8009d68 <CheckOtherLinkStatus+0xf0>)
 8009cac:	4613      	mov	r3, r2
 8009cae:	005b      	lsls	r3, r3, #1
 8009cb0:	4413      	add	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	440b      	add	r3, r1
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 8009cbc:	79fa      	ldrb	r2, [r7, #7]
 8009cbe:	492a      	ldr	r1, [pc, #168]	; (8009d68 <CheckOtherLinkStatus+0xf0>)
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	440b      	add	r3, r1
 8009cca:	3301      	adds	r3, #1
 8009ccc:	2201      	movs	r2, #1
 8009cce:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 8009cd0:	79fb      	ldrb	r3, [r7, #7]
 8009cd2:	4a26      	ldr	r2, [pc, #152]	; (8009d6c <CheckOtherLinkStatus+0xf4>)
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	54d1      	strb	r1, [r2, r3]
 8009cd8:	e02e      	b.n	8009d38 <CheckOtherLinkStatus+0xc0>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = RESET;
 8009cda:	79fb      	ldrb	r3, [r7, #7]
 8009cdc:	4a23      	ldr	r2, [pc, #140]	; (8009d6c <CheckOtherLinkStatus+0xf4>)
 8009cde:	2100      	movs	r1, #0
 8009ce0:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 8009ce2:	79fa      	ldrb	r2, [r7, #7]
 8009ce4:	4920      	ldr	r1, [pc, #128]	; (8009d68 <CheckOtherLinkStatus+0xf0>)
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	4413      	add	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	440b      	add	r3, r1
 8009cf0:	3308      	adds	r3, #8
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = RESET;
 8009cf6:	79fa      	ldrb	r2, [r7, #7]
 8009cf8:	491b      	ldr	r1, [pc, #108]	; (8009d68 <CheckOtherLinkStatus+0xf0>)
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	005b      	lsls	r3, r3, #1
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	440b      	add	r3, r1
 8009d04:	3301      	adds	r3, #1
 8009d06:	2200      	movs	r2, #0
 8009d08:	701a      	strb	r2, [r3, #0]
		OtherCard_Relays_st[SourceIndex].RelayIPS_CRC = 0;
 8009d0a:	79fa      	ldrb	r2, [r7, #7]
 8009d0c:	4918      	ldr	r1, [pc, #96]	; (8009d70 <CheckOtherLinkStatus+0xf8>)
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	440b      	add	r3, r1
 8009d18:	3312      	adds	r3, #18
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	801a      	strh	r2, [r3, #0]
		memset(&OtherCard_Relays_st[SourceIndex].RelayIPS_Buff,0,sizeof(OtherCard_Relays_st[SourceIndex].RelayIPS_Buff));
 8009d1e:	79fa      	ldrb	r2, [r7, #7]
 8009d20:	4613      	mov	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4a11      	ldr	r2, [pc, #68]	; (8009d70 <CheckOtherLinkStatus+0xf8>)
 8009d2a:	4413      	add	r3, r2
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	2210      	movs	r2, #16
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f01c fe72 	bl	8026a1c <memset>
	}

	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 8009d38:	79fa      	ldrb	r2, [r7, #7]
 8009d3a:	4909      	ldr	r1, [pc, #36]	; (8009d60 <CheckOtherLinkStatus+0xe8>)
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	005b      	lsls	r3, r3, #1
 8009d40:	4413      	add	r3, r2
 8009d42:	00db      	lsls	r3, r3, #3
 8009d44:	440b      	add	r3, r1
 8009d46:	3301      	adds	r3, #1
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d104      	bne.n	8009d58 <CheckOtherLinkStatus+0xe0>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 8009d4e:	79fb      	ldrb	r3, [r7, #7]
 8009d50:	4908      	ldr	r1, [pc, #32]	; (8009d74 <CheckOtherLinkStatus+0xfc>)
 8009d52:	68fa      	ldr	r2, [r7, #12]
 8009d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8009d58:	bf00      	nop
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	20002e94 	.word	0x20002e94
 8009d64:	200025c8 	.word	0x200025c8
 8009d68:	20003470 	.word	0x20003470
 8009d6c:	200025fc 	.word	0x200025fc
 8009d70:	20003678 	.word	0x20003678
 8009d74:	20002510 	.word	0x20002510

08009d78 <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 8009d7c:	4b1a      	ldr	r3, [pc, #104]	; (8009de8 <SendRelay2_Other+0x70>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f006 fc0b 	bl	801059c <HAL_Elaps_Ticks>
 8009d86:	4603      	mov	r3, r0
 8009d88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d8c:	d92a      	bls.n	8009de4 <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 8009d8e:	2214      	movs	r2, #20
 8009d90:	2100      	movs	r1, #0
 8009d92:	4816      	ldr	r0, [pc, #88]	; (8009dec <SendRelay2_Other+0x74>)
 8009d94:	f01c fe42 	bl	8026a1c <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 8009d98:	4b15      	ldr	r3, [pc, #84]	; (8009df0 <SendRelay2_Other+0x78>)
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4a13      	ldr	r2, [pc, #76]	; (8009df4 <SendRelay2_Other+0x7c>)
 8009da6:	4413      	add	r3, r2
 8009da8:	2214      	movs	r2, #20
 8009daa:	4619      	mov	r1, r3
 8009dac:	480f      	ldr	r0, [pc, #60]	; (8009dec <SendRelay2_Other+0x74>)
 8009dae:	f01c fe0d 	bl	80269cc <memcpy>
		//			printf("I:%u ",Tx_Temp_Main_Relays_st.No_ofIps);
		//			printf("C:%04X\n",Tx_Temp_Main_Relays_st.RelayIPS_CRC);
		//		}

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8009db2:	f240 2007 	movw	r0, #519	; 0x207
 8009db6:	f007 f9a5 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

		++Traverser;
 8009dba:	4b0d      	ldr	r3, [pc, #52]	; (8009df0 <SendRelay2_Other+0x78>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	4a0b      	ldr	r2, [pc, #44]	; (8009df0 <SendRelay2_Other+0x78>)
 8009dc2:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 8009dc4:	4b0c      	ldr	r3, [pc, #48]	; (8009df8 <SendRelay2_Other+0x80>)
 8009dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	4b08      	ldr	r3, [pc, #32]	; (8009df0 <SendRelay2_Other+0x78>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d102      	bne.n	8009dda <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 8009dd4:	4b06      	ldr	r3, [pc, #24]	; (8009df0 <SendRelay2_Other+0x78>)
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 8009dda:	f00f fefd 	bl	8019bd8 <HAL_GetTick>
 8009dde:	4603      	mov	r3, r0
 8009de0:	4a01      	ldr	r2, [pc, #4]	; (8009de8 <SendRelay2_Other+0x70>)
 8009de2:	6013      	str	r3, [r2, #0]
	}
}
 8009de4:	bf00      	nop
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	200038a0 	.word	0x200038a0
 8009dec:	20003740 	.word	0x20003740
 8009df0:	200038a4 	.word	0x200038a4
 8009df4:	200035b0 	.word	0x200035b0
 8009df8:	20000504 	.word	0x20000504

08009dfc <Process_HitachiEI>:




void Process_HitachiEI(void)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	af00      	add	r7, sp, #0
	while(1)
	{
		process_to_comReceived();
 8009e00:	f7f7 fa76 	bl	80012f0 <process_to_comReceived>
		Check_OnlineDiag_OFC_Modem();
 8009e04:	f7f7 f8de 	bl	8000fc4 <Check_OnlineDiag_OFC_Modem>
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8009e08:	f017 f9d4 	bl	80211b4 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 8009e0c:	481b      	ldr	r0, [pc, #108]	; (8009e7c <Process_HitachiEI+0x80>)
 8009e0e:	f013 fa49 	bl	801d2a4 <HAL_IWDG_Refresh>

		Feed_wdt();
 8009e12:	f00c fbe7 	bl	80165e4 <Feed_wdt>

		readCanToStructs();
 8009e16:	f007 ff4d 	bl	8011cb4 <readCanToStructs>

		Check_for_cmd();
 8009e1a:	f7f6 fe9d 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 8009e1e:	f7f7 fc0b 	bl	8001638 <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 8009e22:	f7f7 fc77 	bl	8001714 <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 8009e26:	f7fe fe2f 	bl	8008a88 <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 8009e2a:	f7fe fd55 	bl	80088d8 <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 8009e2e:	f7fe fdbf 	bl	80089b0 <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 8009e32:	f7fe fcc1 	bl	80087b8 <CheckLinkEstablishTimeout>

		Check_All_Peers();
 8009e36:	f7ff fdb5 	bl	80099a4 <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 8009e3a:	f7ff fc6b 	bl	8009714 <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 8009e3e:	f7ff fbef 	bl	8009620 <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 8009e42:	f7ff fcb7 	bl	80097b4 <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 8009e46:	f002 fe77 	bl	800cb38 <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 8009e4a:	f7ff fe09 	bl	8009a60 <Check_for_RelayMisMatch>

		SendRelay2_Other();
 8009e4e:	f7ff ff93 	bl	8009d78 <SendRelay2_Other>

		Print_BuildDat_Details();
 8009e52:	f00e fe47 	bl	8018ae4 <Print_BuildDat_Details>

		CheckEIPC_DAT_CRC();
 8009e56:	f7f7 f879 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 8009e5a:	4b09      	ldr	r3, [pc, #36]	; (8009e80 <Process_HitachiEI+0x84>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d003      	beq.n	8009e6a <Process_HitachiEI+0x6e>
		{
			gucFlagUpdate = 3;
 8009e62:	4b08      	ldr	r3, [pc, #32]	; (8009e84 <Process_HitachiEI+0x88>)
 8009e64:	2203      	movs	r2, #3
 8009e66:	701a      	strb	r2, [r3, #0]
			break;
 8009e68:	e002      	b.n	8009e70 <Process_HitachiEI+0x74>
		}

		Enable_UART_Interrupts();
 8009e6a:	f00f fca3 	bl	80197b4 <Enable_UART_Interrupts>
		process_to_comReceived();
 8009e6e:	e7c7      	b.n	8009e00 <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 8009e70:	f00e fd36 	bl	80188e0 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8009e74:	4801      	ldr	r0, [pc, #4]	; (8009e7c <Process_HitachiEI+0x80>)
 8009e76:	f013 fa15 	bl	801d2a4 <HAL_IWDG_Refresh>
		Data_Processing();
 8009e7a:	e7f9      	b.n	8009e70 <Process_HitachiEI+0x74>
 8009e7c:	2000b478 	.word	0x2000b478
 8009e80:	20000bba 	.word	0x20000bba
 8009e84:	20000fbd 	.word	0x20000fbd

08009e88 <ReAssignData>:

#endif


void ReAssignData(void)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	f5ad 6dd7 	sub.w	sp, sp, #1720	; 0x6b8
 8009e8e:	af00      	add	r7, sp, #0
	EI_t EI_dataTempEthernet,EI_dataTempSerial;
	uint8_t PeerTraverser = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
	bool SerialFlag = RESET;
 8009e96:	2300      	movs	r3, #0
 8009e98:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
	bool OrderOKFlag = SET;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
	uint8_t EthernetIndex = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
	uint8_t SerialIndex = 0;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3



	printf("EI_data.Hitachi_st.EnableSerialPort:%u\n",EI_data.Hitachi_st.EnableSerialPort);
 8009eae:	4b8d      	ldr	r3, [pc, #564]	; (800a0e4 <ReAssignData+0x25c>)
 8009eb0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	488c      	ldr	r0, [pc, #560]	; (800a0e8 <ReAssignData+0x260>)
 8009eb8:	f01c fe98 	bl	8026bec <iprintf>
	if(EI_data.Hitachi_st.EnableSerialPort <= 0)
 8009ebc:	4b89      	ldr	r3, [pc, #548]	; (800a0e4 <ReAssignData+0x25c>)
 8009ebe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f000 83d8 	beq.w	800a678 <ReAssignData+0x7f0>
	{
		return;
	}

	memset(&EI_dataTempEthernet,0,sizeof(EI_t));
 8009ec8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8009ecc:	f44f 7256 	mov.w	r2, #856	; 0x358
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f01c fda2 	bl	8026a1c <memset>
	memset(&EI_dataTempSerial,0,sizeof(EI_t));
 8009ed8:	463b      	mov	r3, r7
 8009eda:	f44f 7256 	mov.w	r2, #856	; 0x358
 8009ede:	2100      	movs	r1, #0
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f01c fd9b 	bl	8026a1c <memset>


	/* Check whether the order is valid */
	for(PeerTraverser= 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009eec:	e026      	b.n	8009f3c <ReAssignData+0xb4>
	{
		if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == SERIAL)
 8009eee:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009ef2:	4a7c      	ldr	r2, [pc, #496]	; (800a0e4 <ReAssignData+0x25c>)
 8009ef4:	4413      	add	r3, r2
 8009ef6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d103      	bne.n	8009f06 <ReAssignData+0x7e>
		{
			SerialFlag = SET;
 8009efe:	2301      	movs	r3, #1
 8009f00:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
 8009f04:	e015      	b.n	8009f32 <ReAssignData+0xaa>
		}
		else if ((EI_data.Hitachi_st.Interface_Type[PeerTraverser] == ETHERNET) && (SerialFlag == SET))
 8009f06:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f0a:	4a76      	ldr	r2, [pc, #472]	; (800a0e4 <ReAssignData+0x25c>)
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d10d      	bne.n	8009f32 <ReAssignData+0xaa>
 8009f16:	f897 36b6 	ldrb.w	r3, [r7, #1718]	; 0x6b6
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d009      	beq.n	8009f32 <ReAssignData+0xaa>
		{
			printf("EI_data.Hitachi_st.EnableSerialPort11111111111:%u\n",EI_data.Hitachi_st.EnableSerialPort);
 8009f1e:	4b71      	ldr	r3, [pc, #452]	; (800a0e4 <ReAssignData+0x25c>)
 8009f20:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009f24:	4619      	mov	r1, r3
 8009f26:	4871      	ldr	r0, [pc, #452]	; (800a0ec <ReAssignData+0x264>)
 8009f28:	f01c fe60 	bl	8026bec <iprintf>
			OrderOKFlag = RESET;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
	for(PeerTraverser= 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009f32:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f36:	3301      	adds	r3, #1
 8009f38:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009f3c:	4b69      	ldr	r3, [pc, #420]	; (800a0e4 <ReAssignData+0x25c>)
 8009f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f42:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d3d1      	bcc.n	8009eee <ReAssignData+0x66>
		}
	}

	if(OrderOKFlag == RESET)
 8009f4a:	f897 36b5 	ldrb.w	r3, [r7, #1717]	; 0x6b5
 8009f4e:	f083 0301 	eor.w	r3, r3, #1
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f000 838b 	beq.w	800a670 <ReAssignData+0x7e8>
	{
		memcpy(&EI_BeforeReorderData,&EI_data,sizeof(EI_t));
 8009f5a:	4a65      	ldr	r2, [pc, #404]	; (800a0f0 <ReAssignData+0x268>)
 8009f5c:	4b61      	ldr	r3, [pc, #388]	; (800a0e4 <ReAssignData+0x25c>)
 8009f5e:	4610      	mov	r0, r2
 8009f60:	4619      	mov	r1, r3
 8009f62:	f44f 7356 	mov.w	r3, #856	; 0x358
 8009f66:	461a      	mov	r2, r3
 8009f68:	f01c fd30 	bl	80269cc <memcpy>
		ReorderFlag = SET;
 8009f6c:	4b61      	ldr	r3, [pc, #388]	; (800a0f4 <ReAssignData+0x26c>)
 8009f6e:	2201      	movs	r2, #1
 8009f70:	701a      	strb	r2, [r3, #0]
		printf("\n============================ CONFIG DATA IS NOT IN ORDER RE-ORDERING THE DATA ============================\n");
 8009f72:	4861      	ldr	r0, [pc, #388]	; (800a0f8 <ReAssignData+0x270>)
 8009f74:	f01c fed6 	bl	8026d24 <puts>

		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009f7e:	e172      	b.n	800a266 <ReAssignData+0x3de>
		{
			if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == ETHERNET)
 8009f80:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f84:	4a57      	ldr	r2, [pc, #348]	; (800a0e4 <ReAssignData+0x25c>)
 8009f86:	4413      	add	r3, r2
 8009f88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	f040 80b5 	bne.w	800a0fc <ReAssignData+0x274>
			{
				EI_dataTempEthernet.Hitachi_st.ClockMaster[EthernetIndex] = EI_data.Hitachi_st.ClockMaster[PeerTraverser];
 8009f92:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009f96:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009f9a:	4952      	ldr	r1, [pc, #328]	; (800a0e4 <ReAssignData+0x25c>)
 8009f9c:	440a      	add	r2, r1
 8009f9e:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8009fa2:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009fa6:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009faa:	4413      	add	r3, r2
 8009fac:	460a      	mov	r2, r1
 8009fae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_dataTempEthernet.Hitachi_st.Interface_Type[EthernetIndex] = EI_data.Hitachi_st.Interface_Type[PeerTraverser];
 8009fb2:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009fb6:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009fba:	494a      	ldr	r1, [pc, #296]	; (800a0e4 <ReAssignData+0x25c>)
 8009fbc:	440a      	add	r2, r1
 8009fbe:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 8009fc2:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009fc6:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009fca:	4413      	add	r3, r2
 8009fcc:	460a      	mov	r2, r1
 8009fce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_dataTempEthernet.Hitachi_st.SOURCE_ADDRESSES[EthernetIndex] = EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 8009fd2:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009fd6:	f897 06b4 	ldrb.w	r0, [r7, #1716]	; 0x6b4
 8009fda:	4a42      	ldr	r2, [pc, #264]	; (800a0e4 <ReAssignData+0x25c>)
 8009fdc:	3366      	adds	r3, #102	; 0x66
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4413      	add	r3, r2
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009fe8:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 8009fec:	f100 0366 	add.w	r3, r0, #102	; 0x66
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	440b      	add	r3, r1
 8009ff4:	605a      	str	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.DEST_ADDRESSES[EthernetIndex] = EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 8009ff6:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009ffa:	f897 06b4 	ldrb.w	r0, [r7, #1716]	; 0x6b4
 8009ffe:	4a39      	ldr	r2, [pc, #228]	; (800a0e4 <ReAssignData+0x25c>)
 800a000:	3370      	adds	r3, #112	; 0x70
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	685a      	ldr	r2, [r3, #4]
 800a008:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a00c:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 800a010:	f100 0370 	add.w	r3, r0, #112	; 0x70
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	440b      	add	r3, r1
 800a018:	605a      	str	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.App_Identity_CRC[CARD_INDEX][EthernetIndex] = EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a01a:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a01e:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a022:	4a30      	ldr	r2, [pc, #192]	; (800a0e4 <ReAssignData+0x25c>)
 800a024:	33f4      	adds	r3, #244	; 0xf4
 800a026:	005b      	lsls	r3, r3, #1
 800a028:	4413      	add	r3, r2
 800a02a:	8898      	ldrh	r0, [r3, #4]
 800a02c:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a030:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a034:	f101 03f4 	add.w	r3, r1, #244	; 0xf4
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	4413      	add	r3, r2
 800a03c:	4602      	mov	r2, r0
 800a03e:	809a      	strh	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.Bool_outputs[EthernetIndex] = EI_data.Hitachi_st.Bool_outputs[PeerTraverser];
 800a040:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a044:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a048:	4926      	ldr	r1, [pc, #152]	; (800a0e4 <ReAssignData+0x25c>)
 800a04a:	440a      	add	r2, r1
 800a04c:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a050:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a054:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a058:	4413      	add	r3, r2
 800a05a:	460a      	mov	r2, r1
 800a05c:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_dataTempEthernet.Hitachi_st.COMM_FAILURE_TIME_OUT[EthernetIndex] = EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a060:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a064:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800a068:	491e      	ldr	r1, [pc, #120]	; (800a0e4 <ReAssignData+0x25c>)
 800a06a:	338a      	adds	r3, #138	; 0x8a
 800a06c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a070:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a074:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a078:	328a      	adds	r2, #138	; 0x8a
 800a07a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempEthernet.Hitachi_st.STALE_DATA_TIME_OUT[EthernetIndex] = EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a07e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a082:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800a086:	4917      	ldr	r1, [pc, #92]	; (800a0e4 <ReAssignData+0x25c>)
 800a088:	3394      	adds	r3, #148	; 0x94
 800a08a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a08e:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a092:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a096:	3294      	adds	r2, #148	; 0x94
 800a098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempEthernet.Hitachi_st.LinkEstablishTimeout[EthernetIndex] = EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a09c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a0a0:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800a0a4:	490f      	ldr	r1, [pc, #60]	; (800a0e4 <ReAssignData+0x25c>)
 800a0a6:	339e      	adds	r3, #158	; 0x9e
 800a0a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a0ac:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a0b0:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a0b4:	329e      	adds	r2, #158	; 0x9e
 800a0b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				++EI_dataTempEthernet.Hitachi_st.PeersCnt;
 800a0ba:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a0be:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a0c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a0ce:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a0d2:	f883 2020 	strb.w	r2, [r3, #32]
				++EthernetIndex;
 800a0d6:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a0da:	3301      	adds	r3, #1
 800a0dc:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
 800a0e0:	e0bc      	b.n	800a25c <ReAssignData+0x3d4>
 800a0e2:	bf00      	nop
 800a0e4:	20000504 	.word	0x20000504
 800a0e8:	08029bf4 	.word	0x08029bf4
 800a0ec:	08029c1c 	.word	0x08029c1c
 800a0f0:	2000085c 	.word	0x2000085c
 800a0f4:	2000254e 	.word	0x2000254e
 800a0f8:	08029c50 	.word	0x08029c50
			}
			else if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == SERIAL)
 800a0fc:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a100:	4aa9      	ldr	r2, [pc, #676]	; (800a3a8 <ReAssignData+0x520>)
 800a102:	4413      	add	r3, r2
 800a104:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a108:	2b02      	cmp	r3, #2
 800a10a:	f040 80a7 	bne.w	800a25c <ReAssignData+0x3d4>
			{
				EI_dataTempSerial.Hitachi_st.ClockMaster[SerialIndex] = EI_data.Hitachi_st.ClockMaster[PeerTraverser];
 800a10e:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a112:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 800a116:	49a4      	ldr	r1, [pc, #656]	; (800a3a8 <ReAssignData+0x520>)
 800a118:	440a      	add	r2, r1
 800a11a:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a11e:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a122:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a126:	4413      	add	r3, r2
 800a128:	460a      	mov	r2, r1
 800a12a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_dataTempSerial.Hitachi_st.Interface_Type[SerialIndex] = EI_data.Hitachi_st.Interface_Type[PeerTraverser];
 800a12e:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a132:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 800a136:	499c      	ldr	r1, [pc, #624]	; (800a3a8 <ReAssignData+0x520>)
 800a138:	440a      	add	r2, r1
 800a13a:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a13e:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a142:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a146:	4413      	add	r3, r2
 800a148:	460a      	mov	r2, r1
 800a14a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_dataTempSerial.Hitachi_st.SOURCE_ADDRESSES[SerialIndex] = EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a14e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a152:	f897 06b3 	ldrb.w	r0, [r7, #1715]	; 0x6b3
 800a156:	4a94      	ldr	r2, [pc, #592]	; (800a3a8 <ReAssignData+0x520>)
 800a158:	3366      	adds	r3, #102	; 0x66
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a164:	f5a3 61d7 	sub.w	r1, r3, #1720	; 0x6b8
 800a168:	f100 0366 	add.w	r3, r0, #102	; 0x66
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	440b      	add	r3, r1
 800a170:	605a      	str	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.DEST_ADDRESSES[SerialIndex] = EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a172:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a176:	f897 06b3 	ldrb.w	r0, [r7, #1715]	; 0x6b3
 800a17a:	4a8b      	ldr	r2, [pc, #556]	; (800a3a8 <ReAssignData+0x520>)
 800a17c:	3370      	adds	r3, #112	; 0x70
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4413      	add	r3, r2
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a188:	f5a3 61d7 	sub.w	r1, r3, #1720	; 0x6b8
 800a18c:	f100 0370 	add.w	r3, r0, #112	; 0x70
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	440b      	add	r3, r1
 800a194:	605a      	str	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.App_Identity_CRC[CARD_INDEX][SerialIndex] = EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a196:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a19a:	f897 16b3 	ldrb.w	r1, [r7, #1715]	; 0x6b3
 800a19e:	4a82      	ldr	r2, [pc, #520]	; (800a3a8 <ReAssignData+0x520>)
 800a1a0:	33f4      	adds	r3, #244	; 0xf4
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	4413      	add	r3, r2
 800a1a6:	8898      	ldrh	r0, [r3, #4]
 800a1a8:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a1ac:	f5a3 62d7 	sub.w	r2, r3, #1720	; 0x6b8
 800a1b0:	f101 03f4 	add.w	r3, r1, #244	; 0xf4
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	4413      	add	r3, r2
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	809a      	strh	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.Bool_outputs[SerialIndex] = EI_data.Hitachi_st.Bool_outputs[PeerTraverser];
 800a1bc:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a1c0:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 800a1c4:	4978      	ldr	r1, [pc, #480]	; (800a3a8 <ReAssignData+0x520>)
 800a1c6:	440a      	add	r2, r1
 800a1c8:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a1cc:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a1d0:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a1d4:	4413      	add	r3, r2
 800a1d6:	460a      	mov	r2, r1
 800a1d8:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_dataTempSerial.Hitachi_st.COMM_FAILURE_TIME_OUT[SerialIndex] = EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a1dc:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a1e0:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 800a1e4:	4970      	ldr	r1, [pc, #448]	; (800a3a8 <ReAssignData+0x520>)
 800a1e6:	338a      	adds	r3, #138	; 0x8a
 800a1e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a1ec:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a1f0:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a1f4:	328a      	adds	r2, #138	; 0x8a
 800a1f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempSerial.Hitachi_st.STALE_DATA_TIME_OUT[SerialIndex] = EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a1fa:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a1fe:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 800a202:	4969      	ldr	r1, [pc, #420]	; (800a3a8 <ReAssignData+0x520>)
 800a204:	3394      	adds	r3, #148	; 0x94
 800a206:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a20a:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a20e:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a212:	3294      	adds	r2, #148	; 0x94
 800a214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempSerial.Hitachi_st.LinkEstablishTimeout[SerialIndex] = EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a218:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a21c:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 800a220:	4961      	ldr	r1, [pc, #388]	; (800a3a8 <ReAssignData+0x520>)
 800a222:	339e      	adds	r3, #158	; 0x9e
 800a224:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a228:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a22c:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a230:	329e      	adds	r2, #158	; 0x9e
 800a232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				++EI_dataTempSerial.Hitachi_st.PeersCnt;
 800a236:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a23a:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a23e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a242:	3301      	adds	r3, #1
 800a244:	b2da      	uxtb	r2, r3
 800a246:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a24a:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a24e:	f883 2020 	strb.w	r2, [r3, #32]
				++SerialIndex;
 800a252:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 800a256:	3301      	adds	r3, #1
 800a258:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3
		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 800a25c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a260:	3301      	adds	r3, #1
 800a262:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a266:	4b50      	ldr	r3, [pc, #320]	; (800a3a8 <ReAssignData+0x520>)
 800a268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a26c:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a270:	429a      	cmp	r2, r3
 800a272:	f4ff ae85 	bcc.w	8009f80 <ReAssignData+0xf8>
			}
		}

		EthernetIndex = 0;
 800a276:	2300      	movs	r3, #0
 800a278:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		SerialIndex = 0;
 800a27c:	2300      	movs	r3, #0
 800a27e:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3

		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.No_of_IP_s;++PeerTraverser)
 800a282:	2300      	movs	r3, #0
 800a284:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a288:	e077      	b.n	800a37a <ReAssignData+0x4f2>
		{
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][0] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][0];
 800a28a:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a28e:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a292:	4a45      	ldr	r2, [pc, #276]	; (800a3a8 <ReAssignData+0x520>)
 800a294:	3312      	adds	r3, #18
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4413      	add	r3, r2
 800a29a:	78d8      	ldrb	r0, [r3, #3]
 800a29c:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a2a0:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a2a4:	f101 0312 	add.w	r3, r1, #18
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	70da      	strb	r2, [r3, #3]
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][1] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][1];
 800a2b0:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a2b4:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a2b8:	4a3b      	ldr	r2, [pc, #236]	; (800a3a8 <ReAssignData+0x520>)
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
 800a2c2:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a2c6:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a2ca:	008b      	lsls	r3, r1, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][2] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][2];
 800a2d4:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a2d8:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a2dc:	4a32      	ldr	r2, [pc, #200]	; (800a3a8 <ReAssignData+0x520>)
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f893 004d 	ldrb.w	r0, [r3, #77]	; 0x4d
 800a2e6:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a2ea:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a2ee:	008b      	lsls	r3, r1, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][3] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][3];
 800a2f8:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a2fc:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a300:	4a29      	ldr	r2, [pc, #164]	; (800a3a8 <ReAssignData+0x520>)
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
 800a30a:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a30e:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a312:	008b      	lsls	r3, r1, #2
 800a314:	4413      	add	r3, r2
 800a316:	4602      	mov	r2, r0
 800a318:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

			EI_dataTempEthernet.Hitachi_st.PORTS[CARD_INDEX][EthernetIndex][TX_PORT] = EI_data.Hitachi_st.PORTS[CARD_INDEX][PeerTraverser][TX_PORT];
 800a31c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a320:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a324:	4a20      	ldr	r2, [pc, #128]	; (800a3a8 <ReAssignData+0x520>)
 800a326:	333e      	adds	r3, #62	; 0x3e
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	8858      	ldrh	r0, [r3, #2]
 800a32e:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a332:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a336:	f101 033e 	add.w	r3, r1, #62	; 0x3e
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	4602      	mov	r2, r0
 800a340:	805a      	strh	r2, [r3, #2]
			EI_dataTempEthernet.Hitachi_st.PORTS[CARD_INDEX][EthernetIndex][RX_PORT] = EI_data.Hitachi_st.PORTS[CARD_INDEX][PeerTraverser][RX_PORT];
 800a342:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a346:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a34a:	4a17      	ldr	r2, [pc, #92]	; (800a3a8 <ReAssignData+0x520>)
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	f8b3 00fc 	ldrh.w	r0, [r3, #252]	; 0xfc
 800a354:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a358:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a35c:	008b      	lsls	r3, r1, #2
 800a35e:	4413      	add	r3, r2
 800a360:	4602      	mov	r2, r0
 800a362:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
			++EthernetIndex;
 800a366:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a36a:	3301      	adds	r3, #1
 800a36c:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.No_of_IP_s;++PeerTraverser)
 800a370:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a374:	3301      	adds	r3, #1
 800a376:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a37a:	4b0b      	ldr	r3, [pc, #44]	; (800a3a8 <ReAssignData+0x520>)
 800a37c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a380:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a384:	429a      	cmp	r2, r3
 800a386:	d380      	bcc.n	800a28a <ReAssignData+0x402>
		}


		EthernetIndex = 0;
 800a388:	2300      	movs	r3, #0
 800a38a:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		if(EI_dataTempEthernet.Hitachi_st.PeersCnt > 0)
 800a38e:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a392:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 80af 	beq.w	800a4fe <ReAssignData+0x676>
		{
			for(PeerTraverser = 0;PeerTraverser<EI_dataTempEthernet.Hitachi_st.PeersCnt;++PeerTraverser)
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a3a6:	e09f      	b.n	800a4e8 <ReAssignData+0x660>
 800a3a8:	20000504 	.word	0x20000504
			{
				EI_data.Hitachi_st.ClockMaster[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.ClockMaster[PeerTraverser];
 800a3ac:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a3b0:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a3b4:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a3b8:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a3bc:	440a      	add	r2, r1
 800a3be:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a3c2:	4ab0      	ldr	r2, [pc, #704]	; (800a684 <ReAssignData+0x7fc>)
 800a3c4:	4413      	add	r3, r2
 800a3c6:	460a      	mov	r2, r1
 800a3c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_data.Hitachi_st.Interface_Type[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.Interface_Type[PeerTraverser];
 800a3cc:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a3d0:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a3d4:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a3d8:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a3dc:	440a      	add	r2, r1
 800a3de:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a3e2:	4aa8      	ldr	r2, [pc, #672]	; (800a684 <ReAssignData+0x7fc>)
 800a3e4:	4413      	add	r3, r2
 800a3e6:	460a      	mov	r2, r1
 800a3e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a3ec:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a3f0:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a3f4:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a3f8:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a3fc:	3366      	adds	r3, #102	; 0x66
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	489f      	ldr	r0, [pc, #636]	; (800a684 <ReAssignData+0x7fc>)
 800a406:	f101 0366 	add.w	r3, r1, #102	; 0x66
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4403      	add	r3, r0
 800a40e:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a410:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a414:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a418:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a41c:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a420:	3370      	adds	r3, #112	; 0x70
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	685a      	ldr	r2, [r3, #4]
 800a428:	4896      	ldr	r0, [pc, #600]	; (800a684 <ReAssignData+0x7fc>)
 800a42a:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	4403      	add	r3, r0
 800a432:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser] = EI_dataTempEthernet.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a434:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a438:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a43c:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a440:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a444:	33f4      	adds	r3, #244	; 0xf4
 800a446:	005b      	lsls	r3, r3, #1
 800a448:	440b      	add	r3, r1
 800a44a:	8898      	ldrh	r0, [r3, #4]
 800a44c:	498d      	ldr	r1, [pc, #564]	; (800a684 <ReAssignData+0x7fc>)
 800a44e:	f102 03f4 	add.w	r3, r2, #244	; 0xf4
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	440b      	add	r3, r1
 800a456:	4602      	mov	r2, r0
 800a458:	809a      	strh	r2, [r3, #4]
				EI_data.Hitachi_st.Bool_outputs[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.Bool_outputs[PeerTraverser];
 800a45a:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a45e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a462:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a466:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a46a:	440a      	add	r2, r1
 800a46c:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a470:	4a84      	ldr	r2, [pc, #528]	; (800a684 <ReAssignData+0x7fc>)
 800a472:	4413      	add	r3, r2
 800a474:	460a      	mov	r2, r1
 800a476:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a47a:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a47e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a482:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a486:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a48a:	318a      	adds	r1, #138	; 0x8a
 800a48c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a490:	497c      	ldr	r1, [pc, #496]	; (800a684 <ReAssignData+0x7fc>)
 800a492:	338a      	adds	r3, #138	; 0x8a
 800a494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a498:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a49c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a4a0:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a4a4:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a4a8:	3194      	adds	r1, #148	; 0x94
 800a4aa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a4ae:	4975      	ldr	r1, [pc, #468]	; (800a684 <ReAssignData+0x7fc>)
 800a4b0:	3394      	adds	r3, #148	; 0x94
 800a4b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a4b6:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a4ba:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a4be:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a4c2:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a4c6:	319e      	adds	r1, #158	; 0x9e
 800a4c8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a4cc:	496d      	ldr	r1, [pc, #436]	; (800a684 <ReAssignData+0x7fc>)
 800a4ce:	339e      	adds	r3, #158	; 0x9e
 800a4d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				++EthernetIndex;
 800a4d4:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a4d8:	3301      	adds	r3, #1
 800a4da:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
			for(PeerTraverser = 0;PeerTraverser<EI_dataTempEthernet.Hitachi_st.PeersCnt;++PeerTraverser)
 800a4de:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a4e8:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a4ec:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a4f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a4f4:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	f4ff af57 	bcc.w	800a3ac <ReAssignData+0x524>
			}
		}
		if(EI_dataTempSerial.Hitachi_st.PeersCnt > 0)
 800a4fe:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a502:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f000 80ad 	beq.w	800a66a <ReAssignData+0x7e2>
		{
			for(PeerTraverser = 0 ;PeerTraverser<EI_dataTempSerial.Hitachi_st.PeersCnt;++PeerTraverser)
 800a510:	2300      	movs	r3, #0
 800a512:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a516:	e09d      	b.n	800a654 <ReAssignData+0x7cc>
			{
				EI_data.Hitachi_st.ClockMaster[EthernetIndex] = EI_dataTempSerial.Hitachi_st.ClockMaster[PeerTraverser];
 800a518:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a51c:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a520:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a524:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a528:	440a      	add	r2, r1
 800a52a:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a52e:	4a55      	ldr	r2, [pc, #340]	; (800a684 <ReAssignData+0x7fc>)
 800a530:	4413      	add	r3, r2
 800a532:	460a      	mov	r2, r1
 800a534:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_data.Hitachi_st.Interface_Type[EthernetIndex] = EI_dataTempSerial.Hitachi_st.Interface_Type[PeerTraverser];
 800a538:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a53c:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a540:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a544:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a548:	440a      	add	r2, r1
 800a54a:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a54e:	4a4d      	ldr	r2, [pc, #308]	; (800a684 <ReAssignData+0x7fc>)
 800a550:	4413      	add	r3, r2
 800a552:	460a      	mov	r2, r1
 800a554:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_data.Hitachi_st.SOURCE_ADDRESSES[EthernetIndex] = EI_dataTempSerial.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a558:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a55c:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a560:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a564:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a568:	3366      	adds	r3, #102	; 0x66
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	4844      	ldr	r0, [pc, #272]	; (800a684 <ReAssignData+0x7fc>)
 800a572:	f101 0366 	add.w	r3, r1, #102	; 0x66
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4403      	add	r3, r0
 800a57a:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.DEST_ADDRESSES[EthernetIndex] = EI_dataTempSerial.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a57c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a580:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a584:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a588:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a58c:	3370      	adds	r3, #112	; 0x70
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	483b      	ldr	r0, [pc, #236]	; (800a684 <ReAssignData+0x7fc>)
 800a596:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4403      	add	r3, r0
 800a59e:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][EthernetIndex] = EI_dataTempSerial.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a5a0:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a5a4:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800a5a8:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a5ac:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a5b0:	33f4      	adds	r3, #244	; 0xf4
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	440b      	add	r3, r1
 800a5b6:	8898      	ldrh	r0, [r3, #4]
 800a5b8:	4932      	ldr	r1, [pc, #200]	; (800a684 <ReAssignData+0x7fc>)
 800a5ba:	f102 03f4 	add.w	r3, r2, #244	; 0xf4
 800a5be:	005b      	lsls	r3, r3, #1
 800a5c0:	440b      	add	r3, r1
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	809a      	strh	r2, [r3, #4]
				EI_data.Hitachi_st.Bool_outputs[EthernetIndex] = EI_dataTempSerial.Hitachi_st.Bool_outputs[PeerTraverser];
 800a5c6:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a5ca:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a5ce:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a5d2:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a5d6:	440a      	add	r2, r1
 800a5d8:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a5dc:	4a29      	ldr	r2, [pc, #164]	; (800a684 <ReAssignData+0x7fc>)
 800a5de:	4413      	add	r3, r2
 800a5e0:	460a      	mov	r2, r1
 800a5e2:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[EthernetIndex] = EI_dataTempSerial.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a5e6:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a5ea:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a5ee:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a5f2:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a5f6:	318a      	adds	r1, #138	; 0x8a
 800a5f8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a5fc:	4921      	ldr	r1, [pc, #132]	; (800a684 <ReAssignData+0x7fc>)
 800a5fe:	338a      	adds	r3, #138	; 0x8a
 800a600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.STALE_DATA_TIME_OUT[EthernetIndex] = EI_dataTempSerial.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a604:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a608:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a60c:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a610:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a614:	3194      	adds	r1, #148	; 0x94
 800a616:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a61a:	491a      	ldr	r1, [pc, #104]	; (800a684 <ReAssignData+0x7fc>)
 800a61c:	3394      	adds	r3, #148	; 0x94
 800a61e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.LinkEstablishTimeout[EthernetIndex] = EI_dataTempSerial.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a622:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a626:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a62a:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a62e:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a632:	319e      	adds	r1, #158	; 0x9e
 800a634:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a638:	4912      	ldr	r1, [pc, #72]	; (800a684 <ReAssignData+0x7fc>)
 800a63a:	339e      	adds	r3, #158	; 0x9e
 800a63c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				++EthernetIndex;
 800a640:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a644:	3301      	adds	r3, #1
 800a646:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
			for(PeerTraverser = 0 ;PeerTraverser<EI_dataTempSerial.Hitachi_st.PeersCnt;++PeerTraverser)
 800a64a:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a64e:	3301      	adds	r3, #1
 800a650:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a654:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a658:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a65c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a660:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a664:	429a      	cmp	r2, r3
 800a666:	f4ff af57 	bcc.w	800a518 <ReAssignData+0x690>

			}
		}

		print_self_Details_Hitachi();
 800a66a:	f7fe fe83 	bl	8009374 <print_self_Details_Hitachi>
 800a66e:	e004      	b.n	800a67a <ReAssignData+0x7f2>

	}
	else
	{
		printf("\nNo PROBLEM Found\n");
 800a670:	4805      	ldr	r0, [pc, #20]	; (800a688 <ReAssignData+0x800>)
 800a672:	f01c fb57 	bl	8026d24 <puts>
 800a676:	e000      	b.n	800a67a <ReAssignData+0x7f2>
		return;
 800a678:	bf00      	nop
	}

}
 800a67a:	f507 67d7 	add.w	r7, r7, #1720	; 0x6b8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20000504 	.word	0x20000504
 800a688:	08029cbc 	.word	0x08029cbc

0800a68c <ReArrangedVitalData>:

void ReArrangedVitalData(void)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
	if(ReorderFlag == SET)
 800a692:	4b23      	ldr	r3, [pc, #140]	; (800a720 <ReArrangedVitalData+0x94>)
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d13d      	bne.n	800a716 <ReArrangedVitalData+0x8a>
	{
		memset(&HitachiEI_DataReArranged_st,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 800a69a:	22a2      	movs	r2, #162	; 0xa2
 800a69c:	2100      	movs	r1, #0
 800a69e:	4821      	ldr	r0, [pc, #132]	; (800a724 <ReArrangedVitalData+0x98>)
 800a6a0:	f01c f9bc 	bl	8026a1c <memset>
		HitachiEI_DataReArranged_st.ActualDataBytes = vEI_Transver_EI_To_MIE.ActualDataBytes;
 800a6a4:	4b20      	ldr	r3, [pc, #128]	; (800a728 <ReArrangedVitalData+0x9c>)
 800a6a6:	881a      	ldrh	r2, [r3, #0]
 800a6a8:	4b1e      	ldr	r3, [pc, #120]	; (800a724 <ReArrangedVitalData+0x98>)
 800a6aa:	801a      	strh	r2, [r3, #0]

		for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	71fb      	strb	r3, [r7, #7]
 800a6b0:	e02b      	b.n	800a70a <ReArrangedVitalData+0x7e>
		{
			for(uint8_t PeerFinder= 0;PeerFinder<EI_data.Hitachi_st.PeersCnt;++PeerFinder)
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	71bb      	strb	r3, [r7, #6]
 800a6b6:	e01f      	b.n	800a6f8 <ReArrangedVitalData+0x6c>
			{
				if(EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser] == EI_BeforeReorderData.Hitachi_st.SOURCE_ADDRESSES[PeerFinder])
 800a6b8:	79fb      	ldrb	r3, [r7, #7]
 800a6ba:	4a1c      	ldr	r2, [pc, #112]	; (800a72c <ReArrangedVitalData+0xa0>)
 800a6bc:	3366      	adds	r3, #102	; 0x66
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	4413      	add	r3, r2
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	79bb      	ldrb	r3, [r7, #6]
 800a6c6:	491a      	ldr	r1, [pc, #104]	; (800a730 <ReArrangedVitalData+0xa4>)
 800a6c8:	3366      	adds	r3, #102	; 0x66
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	440b      	add	r3, r1
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d10e      	bne.n	800a6f2 <ReArrangedVitalData+0x66>
				{
					memcpy(&HitachiEI_DataReArranged_st.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],&vEI_Transver_EI_To_MIE.Inputs[PeerFinder * MAX_OUTPUTS_PER_PEER],MAX_OUTPUTS_PER_PEER);
 800a6d4:	79fb      	ldrb	r3, [r7, #7]
 800a6d6:	011b      	lsls	r3, r3, #4
 800a6d8:	4a12      	ldr	r2, [pc, #72]	; (800a724 <ReArrangedVitalData+0x98>)
 800a6da:	4413      	add	r3, r2
 800a6dc:	1c98      	adds	r0, r3, #2
 800a6de:	79bb      	ldrb	r3, [r7, #6]
 800a6e0:	011b      	lsls	r3, r3, #4
 800a6e2:	4a11      	ldr	r2, [pc, #68]	; (800a728 <ReArrangedVitalData+0x9c>)
 800a6e4:	4413      	add	r3, r2
 800a6e6:	3302      	adds	r3, #2
 800a6e8:	2210      	movs	r2, #16
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	f01c f96e 	bl	80269cc <memcpy>
					break;
 800a6f0:	e008      	b.n	800a704 <ReArrangedVitalData+0x78>
			for(uint8_t PeerFinder= 0;PeerFinder<EI_data.Hitachi_st.PeersCnt;++PeerFinder)
 800a6f2:	79bb      	ldrb	r3, [r7, #6]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	71bb      	strb	r3, [r7, #6]
 800a6f8:	4b0c      	ldr	r3, [pc, #48]	; (800a72c <ReArrangedVitalData+0xa0>)
 800a6fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6fe:	79ba      	ldrb	r2, [r7, #6]
 800a700:	429a      	cmp	r2, r3
 800a702:	d3d9      	bcc.n	800a6b8 <ReArrangedVitalData+0x2c>
		for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800a704:	79fb      	ldrb	r3, [r7, #7]
 800a706:	3301      	adds	r3, #1
 800a708:	71fb      	strb	r3, [r7, #7]
 800a70a:	4b08      	ldr	r3, [pc, #32]	; (800a72c <ReArrangedVitalData+0xa0>)
 800a70c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a710:	79fa      	ldrb	r2, [r7, #7]
 800a712:	429a      	cmp	r2, r3
 800a714:	d3cd      	bcc.n	800a6b2 <ReArrangedVitalData+0x26>
				}
			}
		}
	}
}
 800a716:	bf00      	nop
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	2000254e 	.word	0x2000254e
 800a724:	20002814 	.word	0x20002814
 800a728:	20002770 	.word	0x20002770
 800a72c:	20000504 	.word	0x20000504
 800a730:	2000085c 	.word	0x2000085c

0800a734 <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800a73a:	4b26      	ldr	r3, [pc, #152]	; (800a7d4 <reset_cause_get+0xa0>)
 800a73c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a73e:	2b00      	cmp	r3, #0
 800a740:	da02      	bge.n	800a748 <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 800a742:	2301      	movs	r3, #1
 800a744:	71fb      	strb	r3, [r7, #7]
 800a746:	e037      	b.n	800a7b8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800a748:	4b22      	ldr	r3, [pc, #136]	; (800a7d4 <reset_cause_get+0xa0>)
 800a74a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a74c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800a754:	2302      	movs	r3, #2
 800a756:	71fb      	strb	r3, [r7, #7]
 800a758:	e02e      	b.n	800a7b8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800a75a:	4b1e      	ldr	r3, [pc, #120]	; (800a7d4 <reset_cause_get+0xa0>)
 800a75c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a75e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a762:	2b00      	cmp	r3, #0
 800a764:	d002      	beq.n	800a76c <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800a766:	2303      	movs	r3, #3
 800a768:	71fb      	strb	r3, [r7, #7]
 800a76a:	e025      	b.n	800a7b8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800a76c:	4b19      	ldr	r3, [pc, #100]	; (800a7d4 <reset_cause_get+0xa0>)
 800a76e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a774:	2b00      	cmp	r3, #0
 800a776:	d002      	beq.n	800a77e <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 800a778:	2304      	movs	r3, #4
 800a77a:	71fb      	strb	r3, [r7, #7]
 800a77c:	e01c      	b.n	800a7b8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800a77e:	4b15      	ldr	r3, [pc, #84]	; (800a7d4 <reset_cause_get+0xa0>)
 800a780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800a78a:	2305      	movs	r3, #5
 800a78c:	71fb      	strb	r3, [r7, #7]
 800a78e:	e013      	b.n	800a7b8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800a790:	4b10      	ldr	r3, [pc, #64]	; (800a7d4 <reset_cause_get+0xa0>)
 800a792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a794:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d002      	beq.n	800a7a2 <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 800a79c:	2306      	movs	r3, #6
 800a79e:	71fb      	strb	r3, [r7, #7]
 800a7a0:	e00a      	b.n	800a7b8 <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800a7a2:	4b0c      	ldr	r3, [pc, #48]	; (800a7d4 <reset_cause_get+0xa0>)
 800a7a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d002      	beq.n	800a7b4 <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 800a7ae:	2307      	movs	r3, #7
 800a7b0:	71fb      	strb	r3, [r7, #7]
 800a7b2:	e001      	b.n	800a7b8 <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 800a7b8:	4b06      	ldr	r3, [pc, #24]	; (800a7d4 <reset_cause_get+0xa0>)
 800a7ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7bc:	4a05      	ldr	r2, [pc, #20]	; (800a7d4 <reset_cause_get+0xa0>)
 800a7be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7c2:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 800a7c4:	79fb      	ldrb	r3, [r7, #7]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	40023800 	.word	0x40023800

0800a7d8 <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	4603      	mov	r3, r0
 800a7e0:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 800a7e2:	4b1c      	ldr	r3, [pc, #112]	; (800a854 <reset_cause_get_name+0x7c>)
 800a7e4:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 800a7e6:	79fb      	ldrb	r3, [r7, #7]
 800a7e8:	2b07      	cmp	r3, #7
 800a7ea:	d82b      	bhi.n	800a844 <reset_cause_get_name+0x6c>
 800a7ec:	a201      	add	r2, pc, #4	; (adr r2, 800a7f4 <reset_cause_get_name+0x1c>)
 800a7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f2:	bf00      	nop
 800a7f4:	0800a815 	.word	0x0800a815
 800a7f8:	0800a81b 	.word	0x0800a81b
 800a7fc:	0800a821 	.word	0x0800a821
 800a800:	0800a827 	.word	0x0800a827
 800a804:	0800a82d 	.word	0x0800a82d
 800a808:	0800a833 	.word	0x0800a833
 800a80c:	0800a839 	.word	0x0800a839
 800a810:	0800a83f 	.word	0x0800a83f
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 800a814:	4b10      	ldr	r3, [pc, #64]	; (800a858 <reset_cause_get_name+0x80>)
 800a816:	60fb      	str	r3, [r7, #12]
            break;
 800a818:	e014      	b.n	800a844 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 800a81a:	4b10      	ldr	r3, [pc, #64]	; (800a85c <reset_cause_get_name+0x84>)
 800a81c:	60fb      	str	r3, [r7, #12]
            break;
 800a81e:	e011      	b.n	800a844 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 800a820:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <reset_cause_get_name+0x88>)
 800a822:	60fb      	str	r3, [r7, #12]
            break;
 800a824:	e00e      	b.n	800a844 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800a826:	4b0f      	ldr	r3, [pc, #60]	; (800a864 <reset_cause_get_name+0x8c>)
 800a828:	60fb      	str	r3, [r7, #12]
            break;
 800a82a:	e00b      	b.n	800a844 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 800a82c:	4b0e      	ldr	r3, [pc, #56]	; (800a868 <reset_cause_get_name+0x90>)
 800a82e:	60fb      	str	r3, [r7, #12]
            break;
 800a830:	e008      	b.n	800a844 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 800a832:	4b0e      	ldr	r3, [pc, #56]	; (800a86c <reset_cause_get_name+0x94>)
 800a834:	60fb      	str	r3, [r7, #12]
            break;
 800a836:	e005      	b.n	800a844 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 800a838:	4b0d      	ldr	r3, [pc, #52]	; (800a870 <reset_cause_get_name+0x98>)
 800a83a:	60fb      	str	r3, [r7, #12]
            break;
 800a83c:	e002      	b.n	800a844 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 800a83e:	4b0d      	ldr	r3, [pc, #52]	; (800a874 <reset_cause_get_name+0x9c>)
 800a840:	60fb      	str	r3, [r7, #12]
            break;
 800a842:	bf00      	nop
    }

    return reset_cause_name;
 800a844:	68fb      	ldr	r3, [r7, #12]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	08029cd0 	.word	0x08029cd0
 800a858:	08029cd4 	.word	0x08029cd4
 800a85c:	08029cdc 	.word	0x08029cdc
 800a860:	08029cec 	.word	0x08029cec
 800a864:	08029d04 	.word	0x08029d04
 800a868:	08029d20 	.word	0x08029d20
 800a86c:	08029d30 	.word	0x08029d30
 800a870:	08029d60 	.word	0x08029d60
 800a874:	08029d7c 	.word	0x08029d7c

0800a878 <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 800a87c:	f00e f932 	bl	8018ae4 <Print_BuildDat_Details>

		readCanToStructs();
 800a880:	f007 fa18 	bl	8011cb4 <readCanToStructs>

		Feed_wdt();
 800a884:	f00b feae 	bl	80165e4 <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 800a888:	4810      	ldr	r0, [pc, #64]	; (800a8cc <Process_Medha_EI+0x54>)
 800a88a:	f012 fd0b 	bl	801d2a4 <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 800a88e:	f000 f91f 	bl	800aad0 <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 800a892:	f000 fef7 	bl	800b684 <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 800a896:	f000 ff5d 	bl	800b754 <Process_Clear_Relays>

		Send_Data_to_Other();
 800a89a:	f001 f841 	bl	800b920 <Send_Data_to_Other>

		Process_Data_from_Other();
 800a89e:	f001 f899 	bl	800b9d4 <Process_Data_from_Other>

		CheckforMedhaCMD();
 800a8a2:	f001 fa6d 	bl	800bd80 <CheckforMedhaCMD>

		CheckEIPC_DAT_CRC();
 800a8a6:	f7f6 fb51 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 800a8aa:	4b09      	ldr	r3, [pc, #36]	; (800a8d0 <Process_Medha_EI+0x58>)
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d003      	beq.n	800a8ba <Process_Medha_EI+0x42>
		{
			gucFlagUpdate = 3;
 800a8b2:	4b08      	ldr	r3, [pc, #32]	; (800a8d4 <Process_Medha_EI+0x5c>)
 800a8b4:	2203      	movs	r2, #3
 800a8b6:	701a      	strb	r2, [r3, #0]
			break;
 800a8b8:	e002      	b.n	800a8c0 <Process_Medha_EI+0x48>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 800a8ba:	f00e ff7b 	bl	80197b4 <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 800a8be:	e7dd      	b.n	800a87c <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 800a8c0:	4802      	ldr	r0, [pc, #8]	; (800a8cc <Process_Medha_EI+0x54>)
 800a8c2:	f012 fcef 	bl	801d2a4 <HAL_IWDG_Refresh>
		Data_Processing();
 800a8c6:	f00e f80b 	bl	80188e0 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800a8ca:	e7f9      	b.n	800a8c0 <Process_Medha_EI+0x48>
 800a8cc:	2000b478 	.word	0x2000b478
 800a8d0:	20000bba 	.word	0x20000bba
 800a8d4:	20000fbd 	.word	0x20000fbd

0800a8d8 <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	4603      	mov	r3, r0
 800a8e0:	6039      	str	r1, [r7, #0]
 800a8e2:	71fb      	strb	r3, [r7, #7]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 800a8f0:	e0d0      	b.n	800aa94 <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 800a8f2:	79fb      	ldrb	r3, [r7, #7]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f00e fe47 	bl	8019588 <Com_Get_Byte>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	4b6c      	ldr	r3, [pc, #432]	; (800aab0 <Get_Medha_EI_Message+0x1d8>)
 800a900:	701a      	strb	r2, [r3, #0]
		//printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 800a902:	4b6c      	ldr	r3, [pc, #432]	; (800aab4 <Get_Medha_EI_Message+0x1dc>)
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	3b01      	subs	r3, #1
 800a908:	2b04      	cmp	r3, #4
 800a90a:	f200 80c2 	bhi.w	800aa92 <Get_Medha_EI_Message+0x1ba>
 800a90e:	a201      	add	r2, pc, #4	; (adr r2, 800a914 <Get_Medha_EI_Message+0x3c>)
 800a910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a914:	0800a929 	.word	0x0800a929
 800a918:	0800a941 	.word	0x0800a941
 800a91c:	0800aa93 	.word	0x0800aa93
 800a920:	0800a98d 	.word	0x0800a98d
 800a924:	0800a9e5 	.word	0x0800a9e5
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 800a928:	4b61      	ldr	r3, [pc, #388]	; (800aab0 <Get_Medha_EI_Message+0x1d8>)
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	2b53      	cmp	r3, #83	; 0x53
 800a92e:	f040 80b1 	bne.w	800aa94 <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 800a932:	4b61      	ldr	r3, [pc, #388]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800a934:	2201      	movs	r2, #1
 800a936:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800a938:	4b5e      	ldr	r3, [pc, #376]	; (800aab4 <Get_Medha_EI_Message+0x1dc>)
 800a93a:	2202      	movs	r2, #2
 800a93c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800a93e:	e0a9      	b.n	800aa94 <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 800a940:	4b5d      	ldr	r3, [pc, #372]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	2b08      	cmp	r3, #8
 800a946:	d111      	bne.n	800a96c <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 800a948:	4b5b      	ldr	r3, [pc, #364]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800a94a:	881b      	ldrh	r3, [r3, #0]
 800a94c:	461a      	mov	r2, r3
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	4413      	add	r3, r2
 800a952:	4a57      	ldr	r2, [pc, #348]	; (800aab0 <Get_Medha_EI_Message+0x1d8>)
 800a954:	7812      	ldrb	r2, [r2, #0]
 800a956:	701a      	strb	r2, [r3, #0]
					i++;
 800a958:	4b57      	ldr	r3, [pc, #348]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800a95a:	881b      	ldrh	r3, [r3, #0]
 800a95c:	3301      	adds	r3, #1
 800a95e:	b29a      	uxth	r2, r3
 800a960:	4b55      	ldr	r3, [pc, #340]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800a962:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 800a964:	4b53      	ldr	r3, [pc, #332]	; (800aab4 <Get_Medha_EI_Message+0x1dc>)
 800a966:	2204      	movs	r2, #4
 800a968:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 800a96a:	e00d      	b.n	800a988 <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 800a96c:	4b52      	ldr	r3, [pc, #328]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	461a      	mov	r2, r3
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	4413      	add	r3, r2
 800a976:	4a4e      	ldr	r2, [pc, #312]	; (800aab0 <Get_Medha_EI_Message+0x1d8>)
 800a978:	7812      	ldrb	r2, [r2, #0]
 800a97a:	701a      	strb	r2, [r3, #0]
					i++;
 800a97c:	4b4e      	ldr	r3, [pc, #312]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800a97e:	881b      	ldrh	r3, [r3, #0]
 800a980:	3301      	adds	r3, #1
 800a982:	b29a      	uxth	r2, r3
 800a984:	4b4c      	ldr	r3, [pc, #304]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800a986:	801a      	strh	r2, [r3, #0]
				break;
 800a988:	bf00      	nop
			}
			break;
 800a98a:	e083      	b.n	800aa94 <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 800a98c:	4b4a      	ldr	r3, [pc, #296]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800a98e:	881b      	ldrh	r3, [r3, #0]
 800a990:	3b02      	subs	r3, #2
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	4413      	add	r3, r2
 800a996:	881b      	ldrh	r3, [r3, #0]
 800a998:	b29b      	uxth	r3, r3
 800a99a:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 800a99c:	4b47      	ldr	r3, [pc, #284]	; (800aabc <Get_Medha_EI_Message+0x1e4>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	801a      	strh	r2, [r3, #0]
				j=1;
 800a9a2:	4b47      	ldr	r3, [pc, #284]	; (800aac0 <Get_Medha_EI_Message+0x1e8>)
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 800a9a8:	4b43      	ldr	r3, [pc, #268]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	4a3f      	ldr	r2, [pc, #252]	; (800aab0 <Get_Medha_EI_Message+0x1d8>)
 800a9b4:	7812      	ldrb	r2, [r2, #0]
 800a9b6:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 800a9b8:	4b40      	ldr	r3, [pc, #256]	; (800aabc <Get_Medha_EI_Message+0x1e4>)
 800a9ba:	881b      	ldrh	r3, [r3, #0]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	4b3e      	ldr	r3, [pc, #248]	; (800aabc <Get_Medha_EI_Message+0x1e4>)
 800a9c2:	801a      	strh	r2, [r3, #0]
				i++;
 800a9c4:	4b3c      	ldr	r3, [pc, #240]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	4b3a      	ldr	r3, [pc, #232]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800a9ce:	801a      	strh	r2, [r3, #0]
				j++;
 800a9d0:	4b3b      	ldr	r3, [pc, #236]	; (800aac0 <Get_Medha_EI_Message+0x1e8>)
 800a9d2:	881b      	ldrh	r3, [r3, #0]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	4b39      	ldr	r3, [pc, #228]	; (800aac0 <Get_Medha_EI_Message+0x1e8>)
 800a9da:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 800a9dc:	4b35      	ldr	r3, [pc, #212]	; (800aab4 <Get_Medha_EI_Message+0x1dc>)
 800a9de:	2205      	movs	r2, #5
 800a9e0:	701a      	strb	r2, [r3, #0]
				break;
 800a9e2:	e057      	b.n	800aa94 <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 800a9e4:	4b34      	ldr	r3, [pc, #208]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	4a30      	ldr	r2, [pc, #192]	; (800aab0 <Get_Medha_EI_Message+0x1d8>)
 800a9f0:	7812      	ldrb	r2, [r2, #0]
 800a9f2:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 800a9f4:	89ba      	ldrh	r2, [r7, #12]
 800a9f6:	4b31      	ldr	r3, [pc, #196]	; (800aabc <Get_Medha_EI_Message+0x1e4>)
 800a9f8:	881b      	ldrh	r3, [r3, #0]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d940      	bls.n	800aa80 <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 800a9fe:	4b2f      	ldr	r3, [pc, #188]	; (800aabc <Get_Medha_EI_Message+0x1e4>)
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	3301      	adds	r3, #1
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	4b2d      	ldr	r3, [pc, #180]	; (800aabc <Get_Medha_EI_Message+0x1e4>)
 800aa08:	801a      	strh	r2, [r3, #0]
					i++;
 800aa0a:	4b2b      	ldr	r3, [pc, #172]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	4b29      	ldr	r3, [pc, #164]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800aa14:	801a      	strh	r2, [r3, #0]
					j++;
 800aa16:	4b2a      	ldr	r3, [pc, #168]	; (800aac0 <Get_Medha_EI_Message+0x1e8>)
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	4b28      	ldr	r3, [pc, #160]	; (800aac0 <Get_Medha_EI_Message+0x1e8>)
 800aa20:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 800aa22:	89ba      	ldrh	r2, [r7, #12]
 800aa24:	4b25      	ldr	r3, [pc, #148]	; (800aabc <Get_Medha_EI_Message+0x1e4>)
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d133      	bne.n	800aa94 <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 800aa2c:	4b22      	ldr	r3, [pc, #136]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800aa2e:	881b      	ldrh	r3, [r3, #0]
 800aa30:	3b04      	subs	r3, #4
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	4b23      	ldr	r3, [pc, #140]	; (800aac4 <Get_Medha_EI_Message+0x1ec>)
 800aa36:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 800aa38:	4b22      	ldr	r3, [pc, #136]	; (800aac4 <Get_Medha_EI_Message+0x1ec>)
 800aa3a:	881b      	ldrh	r3, [r3, #0]
 800aa3c:	81fb      	strh	r3, [r7, #14]
						i = 0;
 800aa3e:	4b1e      	ldr	r3, [pc, #120]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 800aa44:	4b1b      	ldr	r3, [pc, #108]	; (800aab4 <Get_Medha_EI_Message+0x1dc>)
 800aa46:	2201      	movs	r2, #1
 800aa48:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 800aa4e:	89fb      	ldrh	r3, [r7, #14]
 800aa50:	2b04      	cmp	r3, #4
 800aa52:	d804      	bhi.n	800aa5e <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 800aa54:	481c      	ldr	r0, [pc, #112]	; (800aac8 <Get_Medha_EI_Message+0x1f0>)
 800aa56:	f01c f965 	bl	8026d24 <puts>
							return ZERO;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	e023      	b.n	800aaa6 <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 800aa5e:	4b19      	ldr	r3, [pc, #100]	; (800aac4 <Get_Medha_EI_Message+0x1ec>)
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	461a      	mov	r2, r3
 800aa64:	6839      	ldr	r1, [r7, #0]
 800aa66:	2000      	movs	r0, #0
 800aa68:	f001 fc4c 	bl	800c304 <CheckCRC32>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 800aa72:	89fb      	ldrh	r3, [r7, #14]
 800aa74:	e017      	b.n	800aaa6 <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 800aa76:	4815      	ldr	r0, [pc, #84]	; (800aacc <Get_Medha_EI_Message+0x1f4>)
 800aa78:	f01c f954 	bl	8026d24 <puts>
							return ZERO;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	e012      	b.n	800aaa6 <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 800aa80:	4b0d      	ldr	r3, [pc, #52]	; (800aab8 <Get_Medha_EI_Message+0x1e0>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 800aa86:	4b0b      	ldr	r3, [pc, #44]	; (800aab4 <Get_Medha_EI_Message+0x1dc>)
 800aa88:	2201      	movs	r2, #1
 800aa8a:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	81bb      	strh	r3, [r7, #12]
				}
				break;
 800aa90:	e000      	b.n	800aa94 <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 800aa92:	bf00      	nop
	while(Com_DataReady(ComPort))
 800aa94:	79fb      	ldrb	r3, [r7, #7]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f00e fd36 	bl	8019508 <Com_DataReady>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f47f af27 	bne.w	800a8f2 <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	20003fa8 	.word	0x20003fa8
 800aab4:	20000316 	.word	0x20000316
 800aab8:	20003faa 	.word	0x20003faa
 800aabc:	20003fac 	.word	0x20003fac
 800aac0:	20003fae 	.word	0x20003fae
 800aac4:	20003fb0 	.word	0x20003fb0
 800aac8:	08029d94 	.word	0x08029d94
 800aacc:	08029d9c 	.word	0x08029d9c

0800aad0 <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 800aad0:	b5b0      	push	{r4, r5, r7, lr}
 800aad2:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 800aad6:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 800aad8:	2300      	movs	r3, #0
 800aada:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 800aade:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aae2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800aae6:	2200      	movs	r2, #0
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	3304      	adds	r3, #4
 800aaec:	f44f 7294 	mov.w	r2, #296	; 0x128
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f01b ff92 	bl	8026a1c <memset>
	uint16_t NoOfInputs 		= 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 800aafe:	2300      	movs	r3, #0
 800ab00:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 800ab04:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab08:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	601a      	str	r2, [r3, #0]
 800ab10:	3304      	adds	r3, #4
 800ab12:	227c      	movs	r2, #124	; 0x7c
 800ab14:	2100      	movs	r1, #0
 800ab16:	4618      	mov	r0, r3
 800ab18:	f01b ff80 	bl	8026a1c <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 800ab28:	4bc8      	ldr	r3, [pc, #800]	; (800ae4c <Medha_EI_Analyser+0x37c>)
 800ab2a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ab2e:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800ab32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7ff fece 	bl	800a8d8 <Get_Medha_EI_Message>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 800ab42:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800ab46:	2b05      	cmp	r3, #5
 800ab48:	d939      	bls.n	800abbe <Medha_EI_Analyser+0xee>
	{
		HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 800ab4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab4e:	48c0      	ldr	r0, [pc, #768]	; (800ae50 <Medha_EI_Analyser+0x380>)
 800ab50:	f011 fd2b 	bl	801c5aa <HAL_GPIO_TogglePin>
		printf("Raw Data:\n");
 800ab54:	48bf      	ldr	r0, [pc, #764]	; (800ae54 <Medha_EI_Analyser+0x384>)
 800ab56:	f01c f8e5 	bl	8026d24 <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800ab60:	e024      	b.n	800abac <Medha_EI_Analyser+0xdc>
		{

			if((i!=0) && ((i%10)==0))
 800ab62:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d010      	beq.n	800ab8c <Medha_EI_Analyser+0xbc>
 800ab6a:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 800ab6e:	4bba      	ldr	r3, [pc, #744]	; (800ae58 <Medha_EI_Analyser+0x388>)
 800ab70:	fba3 1302 	umull	r1, r3, r3, r2
 800ab74:	08d9      	lsrs	r1, r3, #3
 800ab76:	460b      	mov	r3, r1
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	440b      	add	r3, r1
 800ab7c:	005b      	lsls	r3, r3, #1
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d102      	bne.n	800ab8c <Medha_EI_Analyser+0xbc>
			{
				printf("\n");
 800ab86:	200a      	movs	r0, #10
 800ab88:	f01c f848 	bl	8026c1c <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 800ab8c:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800ab90:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800ab94:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800ab98:	5cd3      	ldrb	r3, [r2, r3]
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	48af      	ldr	r0, [pc, #700]	; (800ae5c <Medha_EI_Analyser+0x38c>)
 800ab9e:	f01c f825 	bl	8026bec <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800aba2:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800aba6:	3301      	adds	r3, #1
 800aba8:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800abac:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 800abb0:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d3d4      	bcc.n	800ab62 <Medha_EI_Analyser+0x92>
		}
		printf("\n");
 800abb8:	200a      	movs	r0, #10
 800abba:	f01c f82f 	bl	8026c1c <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 800abbe:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f000 83d5 	beq.w	800b372 <Medha_EI_Analyser+0x8a2>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 800abc8:	463b      	mov	r3, r7
 800abca:	f44f 7292 	mov.w	r2, #292	; 0x124
 800abce:	2100      	movs	r1, #0
 800abd0:	4618      	mov	r0, r3
 800abd2:	f01b ff23 	bl	8026a1c <memset>

		BYTEINIT(0);
 800abd6:	2300      	movs	r3, #0
 800abd8:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 800abdc:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800abe0:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800abe4:	4413      	add	r3, r2
 800abe6:	781a      	ldrb	r2, [r3, #0]
 800abe8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800abec:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800abf0:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 800abf2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800abf6:	3301      	adds	r3, #1
 800abf8:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 800abfc:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ac00:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ac04:	4413      	add	r3, r2
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ac0e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ac12:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 800ac14:	4b8d      	ldr	r3, [pc, #564]	; (800ae4c <Medha_EI_Analyser+0x37c>)
 800ac16:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 800ac1a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ac1e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ac22:	889b      	ldrh	r3, [r3, #4]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d017      	beq.n	800ac58 <Medha_EI_Analyser+0x188>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 800ac28:	488d      	ldr	r0, [pc, #564]	; (800ae60 <Medha_EI_Analyser+0x390>)
 800ac2a:	f01c f87b 	bl	8026d24 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 800ac2e:	4b87      	ldr	r3, [pc, #540]	; (800ae4c <Medha_EI_Analyser+0x37c>)
 800ac30:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800ac34:	4619      	mov	r1, r3
 800ac36:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ac3a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ac3e:	889b      	ldrh	r3, [r3, #4]
 800ac40:	461a      	mov	r2, r3
 800ac42:	4888      	ldr	r0, [pc, #544]	; (800ae64 <Medha_EI_Analyser+0x394>)
 800ac44:	f01b ffd2 	bl	8026bec <iprintf>

			if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") != 0)
 800ac48:	4987      	ldr	r1, [pc, #540]	; (800ae68 <Medha_EI_Analyser+0x398>)
 800ac4a:	4888      	ldr	r0, [pc, #544]	; (800ae6c <Medha_EI_Analyser+0x39c>)
 800ac4c:	f7f5 faf8 	bl	8000240 <strcmp>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f040 838f 	bne.w	800b376 <Medha_EI_Analyser+0x8a6>
			{
				return;
			}
		}
		BYTEINC(2);
 800ac58:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ac5c:	3302      	adds	r3, #2
 800ac5e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 800ac62:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ac66:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ac6a:	4413      	add	r3, r2
 800ac6c:	881b      	ldrh	r3, [r3, #0]
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ac74:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ac78:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 800ac7a:	4b74      	ldr	r3, [pc, #464]	; (800ae4c <Medha_EI_Analyser+0x37c>)
 800ac7c:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 800ac80:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ac84:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ac88:	885b      	ldrh	r3, [r3, #2]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d017      	beq.n	800acbe <Medha_EI_Analyser+0x1ee>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 800ac8e:	4878      	ldr	r0, [pc, #480]	; (800ae70 <Medha_EI_Analyser+0x3a0>)
 800ac90:	f01c f848 	bl	8026d24 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 800ac94:	4b6d      	ldr	r3, [pc, #436]	; (800ae4c <Medha_EI_Analyser+0x37c>)
 800ac96:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aca0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aca4:	885b      	ldrh	r3, [r3, #2]
 800aca6:	461a      	mov	r2, r3
 800aca8:	486e      	ldr	r0, [pc, #440]	; (800ae64 <Medha_EI_Analyser+0x394>)
 800acaa:	f01b ff9f 	bl	8026bec <iprintf>
			if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") != 0)
 800acae:	496e      	ldr	r1, [pc, #440]	; (800ae68 <Medha_EI_Analyser+0x398>)
 800acb0:	486e      	ldr	r0, [pc, #440]	; (800ae6c <Medha_EI_Analyser+0x39c>)
 800acb2:	f7f5 fac5 	bl	8000240 <strcmp>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f040 835e 	bne.w	800b37a <Medha_EI_Analyser+0x8aa>
			{
				return;
			}		}
		BYTEINC(2);
 800acbe:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800acc2:	3302      	adds	r3, #2
 800acc4:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 800acc8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800accc:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800acd0:	4413      	add	r3, r2
 800acd2:	781a      	ldrb	r2, [r3, #0]
 800acd4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800acd8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800acdc:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 800acde:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ace2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ace6:	799b      	ldrb	r3, [r3, #6]
 800ace8:	2baa      	cmp	r3, #170	; 0xaa
 800acea:	d010      	beq.n	800ad0e <Medha_EI_Analyser+0x23e>
 800acec:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800acf0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800acf4:	799b      	ldrb	r3, [r3, #6]
 800acf6:	2bbb      	cmp	r3, #187	; 0xbb
 800acf8:	d009      	beq.n	800ad0e <Medha_EI_Analyser+0x23e>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 800acfa:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800acfe:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad02:	799b      	ldrb	r3, [r3, #6]
 800ad04:	4619      	mov	r1, r3
 800ad06:	485b      	ldr	r0, [pc, #364]	; (800ae74 <Medha_EI_Analyser+0x3a4>)
 800ad08:	f01b ff70 	bl	8026bec <iprintf>
			return;
 800ad0c:	e336      	b.n	800b37c <Medha_EI_Analyser+0x8ac>
		}
		BYTEINC(1);
 800ad0e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad12:	3301      	adds	r3, #1
 800ad14:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 800ad18:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad1c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ad20:	4413      	add	r3, r2
 800ad22:	781a      	ldrb	r2, [r3, #0]
 800ad24:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad28:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad2c:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 800ad2e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad32:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad36:	79db      	ldrb	r3, [r3, #7]
 800ad38:	2be1      	cmp	r3, #225	; 0xe1
 800ad3a:	d009      	beq.n	800ad50 <Medha_EI_Analyser+0x280>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 800ad3c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad40:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad44:	79db      	ldrb	r3, [r3, #7]
 800ad46:	4619      	mov	r1, r3
 800ad48:	484b      	ldr	r0, [pc, #300]	; (800ae78 <Medha_EI_Analyser+0x3a8>)
 800ad4a:	f01b ff4f 	bl	8026bec <iprintf>
			return;
 800ad4e:	e315      	b.n	800b37c <Medha_EI_Analyser+0x8ac>
		}

		BYTEINC(1);
 800ad50:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad54:	3301      	adds	r3, #1
 800ad56:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 800ad5a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad5e:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ad62:	4413      	add	r3, r2
 800ad64:	881b      	ldrh	r3, [r3, #0]
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad6c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad70:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 800ad72:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad76:	3302      	adds	r3, #2
 800ad78:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 800ad7c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad80:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ad84:	4413      	add	r3, r2
 800ad86:	781a      	ldrb	r2, [r3, #0]
 800ad88:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad8c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad90:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 800ad92:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad96:	3301      	adds	r3, #1
 800ad98:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 800ad9c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ada0:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ada4:	441a      	add	r2, r3
 800ada6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800adaa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800adae:	330b      	adds	r3, #11
 800adb0:	6811      	ldr	r1, [r2, #0]
 800adb2:	6019      	str	r1, [r3, #0]
 800adb4:	8891      	ldrh	r1, [r2, #4]
 800adb6:	7992      	ldrb	r2, [r2, #6]
 800adb8:	8099      	strh	r1, [r3, #4]
 800adba:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 800adbc:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800adc0:	3307      	adds	r3, #7
 800adc2:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 800adc6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800adca:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800adce:	4413      	add	r3, r2
 800add0:	781a      	ldrb	r2, [r3, #0]
 800add2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800add6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800adda:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 800addc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ade0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ade4:	7c9b      	ldrb	r3, [r3, #18]
 800ade6:	2b11      	cmp	r3, #17
 800ade8:	d009      	beq.n	800adfe <Medha_EI_Analyser+0x32e>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 800adea:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800adee:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800adf2:	7c9b      	ldrb	r3, [r3, #18]
 800adf4:	4619      	mov	r1, r3
 800adf6:	4821      	ldr	r0, [pc, #132]	; (800ae7c <Medha_EI_Analyser+0x3ac>)
 800adf8:	f01b fef8 	bl	8026bec <iprintf>
			return;
 800adfc:	e2be      	b.n	800b37c <Medha_EI_Analyser+0x8ac>
		}

		BYTEINC(1);
 800adfe:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae02:	3301      	adds	r3, #1
 800ae04:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 800ae08:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae0c:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 800ae10:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae14:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ae18:	4413      	add	r3, r2
 800ae1a:	881b      	ldrh	r3, [r3, #0]
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae22:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae26:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 800ae28:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae2c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae30:	695b      	ldr	r3, [r3, #20]
 800ae32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae36:	d925      	bls.n	800ae84 <Medha_EI_Analyser+0x3b4>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%lu\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800ae38:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae3c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	4619      	mov	r1, r3
 800ae44:	480e      	ldr	r0, [pc, #56]	; (800ae80 <Medha_EI_Analyser+0x3b0>)
 800ae46:	f01b fed1 	bl	8026bec <iprintf>
			return;
 800ae4a:	e297      	b.n	800b37c <Medha_EI_Analyser+0x8ac>
 800ae4c:	20000504 	.word	0x20000504
 800ae50:	40021c00 	.word	0x40021c00
 800ae54:	08029da4 	.word	0x08029da4
 800ae58:	cccccccd 	.word	0xcccccccd
 800ae5c:	08029db0 	.word	0x08029db0
 800ae60:	08029db8 	.word	0x08029db8
 800ae64:	08029dec 	.word	0x08029dec
 800ae68:	08029e10 	.word	0x08029e10
 800ae6c:	20000505 	.word	0x20000505
 800ae70:	08029e1c 	.word	0x08029e1c
 800ae74:	08029e4c 	.word	0x08029e4c
 800ae78:	08029e84 	.word	0x08029e84
 800ae7c:	08029ebc 	.word	0x08029ebc
 800ae80:	08029f00 	.word	0x08029f00
		}

		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 800ae84:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae88:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae8c:	695a      	ldr	r2, [r3, #20]
 800ae8e:	4baa      	ldr	r3, [pc, #680]	; (800b138 <Medha_EI_Analyser+0x668>)
 800ae90:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d01b      	beq.n	800aed0 <Medha_EI_Analyser+0x400>
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800ae98:	49a8      	ldr	r1, [pc, #672]	; (800b13c <Medha_EI_Analyser+0x66c>)
 800ae9a:	48a9      	ldr	r0, [pc, #676]	; (800b140 <Medha_EI_Analyser+0x670>)
 800ae9c:	f7f5 f9d0 	bl	8000240 <strcmp>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00c      	beq.n	800aec0 <Medha_EI_Analyser+0x3f0>
			{
				printf("No of Relays Not Matching...\nConfigured:%lu - Received:%lu\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 800aea6:	4ba4      	ldr	r3, [pc, #656]	; (800b138 <Medha_EI_Analyser+0x668>)
 800aea8:	f8d3 1328 	ldr.w	r1, [r3, #808]	; 0x328
 800aeac:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aeb0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aeb4:	695b      	ldr	r3, [r3, #20]
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	48a2      	ldr	r0, [pc, #648]	; (800b144 <Medha_EI_Analyser+0x674>)
 800aeba:	f01b fe97 	bl	8026bec <iprintf>
				return;
 800aebe:	e25d      	b.n	800b37c <Medha_EI_Analyser+0x8ac>
			}
			else
			{
				EI_data.Medha_Prms_st.NoofRelays = Medha_EI_Temp_Rx_st.NoofRelays;
 800aec0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aec4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	4a9b      	ldr	r2, [pc, #620]	; (800b138 <Medha_EI_Analyser+0x668>)
 800aecc:	f8c2 3328 	str.w	r3, [r2, #808]	; 0x328
			}
		}

		BYTEINC(2);
 800aed0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aed4:	3302      	adds	r3, #2
 800aed6:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 800aeda:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aede:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	f003 0307 	and.w	r3, r3, #7
 800aeea:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 800aeee:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00a      	beq.n	800af0c <Medha_EI_Analyser+0x43c>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 800aef6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aefa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aefe:	695b      	ldr	r3, [r3, #20]
 800af00:	08db      	lsrs	r3, r3, #3
 800af02:	b29b      	uxth	r3, r3
 800af04:	3301      	adds	r3, #1
 800af06:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 800af0a:	e007      	b.n	800af1c <Medha_EI_Analyser+0x44c>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 800af0c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af10:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	08db      	lsrs	r3, r3, #3
 800af18:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800af1c:	2300      	movs	r3, #0
 800af1e:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800af22:	e02a      	b.n	800af7a <Medha_EI_Analyser+0x4aa>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 800af24:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800af28:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800af2c:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800af30:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800af34:	5c89      	ldrb	r1, [r1, r2]
 800af36:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800af3a:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800af3e:	4413      	add	r3, r2
 800af40:	460a      	mov	r2, r1
 800af42:	761a      	strb	r2, [r3, #24]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 800af44:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800af48:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800af4c:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800af50:	4413      	add	r3, r2
 800af52:	7e1a      	ldrb	r2, [r3, #24]
 800af54:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800af58:	43d2      	mvns	r2, r2
 800af5a:	b2d1      	uxtb	r1, r2
 800af5c:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800af60:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800af64:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 800af66:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800af6a:	3301      	adds	r3, #1
 800af6c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800af70:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800af74:	3301      	adds	r3, #1
 800af76:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800af7a:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800af7e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800af82:	429a      	cmp	r2, r3
 800af84:	d3ce      	bcc.n	800af24 <Medha_EI_Analyser+0x454>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800af86:	2300      	movs	r3, #0
 800af88:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800af8c:	e01a      	b.n	800afc4 <Medha_EI_Analyser+0x4f4>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 800af8e:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800af92:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800af96:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800af9a:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800af9e:	5c89      	ldrb	r1, [r1, r2]
 800afa0:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800afa4:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800afa8:	4413      	add	r3, r2
 800afaa:	460a      	mov	r2, r1
 800afac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			BYTEINC(1);
 800afb0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800afb4:	3301      	adds	r3, #1
 800afb6:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800afba:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800afbe:	3301      	adds	r3, #1
 800afc0:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800afc4:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800afc8:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800afcc:	429a      	cmp	r2, r3
 800afce:	d3de      	bcc.n	800af8e <Medha_EI_Analyser+0x4be>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 800afd0:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 800afd4:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800afd8:	463b      	mov	r3, r7
 800afda:	3398      	adds	r3, #152	; 0x98
 800afdc:	4618      	mov	r0, r3
 800afde:	f01b fce5 	bl	80269ac <memcmp>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d03f      	beq.n	800b068 <Medha_EI_Analyser+0x598>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 800afe8:	4857      	ldr	r0, [pc, #348]	; (800b148 <Medha_EI_Analyser+0x678>)
 800afea:	f01b fe9b 	bl	8026d24 <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800afee:	2300      	movs	r3, #0
 800aff0:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800aff4:	e011      	b.n	800b01a <Medha_EI_Analyser+0x54a>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 800aff6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800affa:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800affe:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800b002:	4413      	add	r3, r2
 800b004:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b008:	4619      	mov	r1, r3
 800b00a:	4850      	ldr	r0, [pc, #320]	; (800b14c <Medha_EI_Analyser+0x67c>)
 800b00c:	f01b fdee 	bl	8026bec <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800b010:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b014:	3301      	adds	r3, #1
 800b016:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b01a:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b01e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b022:	429a      	cmp	r2, r3
 800b024:	d3e7      	bcc.n	800aff6 <Medha_EI_Analyser+0x526>
			}

			printf("\nExpected Compliment Relay Status:\n");
 800b026:	484a      	ldr	r0, [pc, #296]	; (800b150 <Medha_EI_Analyser+0x680>)
 800b028:	f01b fe7c 	bl	8026d24 <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800b02c:	2300      	movs	r3, #0
 800b02e:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b032:	e00f      	b.n	800b054 <Medha_EI_Analyser+0x584>
			{
				printf("%02X ",TempCompliment[Traverser]);
 800b034:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b038:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800b03c:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800b040:	5cd3      	ldrb	r3, [r2, r3]
 800b042:	4619      	mov	r1, r3
 800b044:	4841      	ldr	r0, [pc, #260]	; (800b14c <Medha_EI_Analyser+0x67c>)
 800b046:	f01b fdd1 	bl	8026bec <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800b04a:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b04e:	3301      	adds	r3, #1
 800b050:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b054:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b058:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d3e9      	bcc.n	800b034 <Medha_EI_Analyser+0x564>
			}

			printf("\nPACKET Rejected\n");
 800b060:	483c      	ldr	r0, [pc, #240]	; (800b154 <Medha_EI_Analyser+0x684>)
 800b062:	f01b fe5f 	bl	8026d24 <puts>
			return;
 800b066:	e189      	b.n	800b37c <Medha_EI_Analyser+0x8ac>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 800b068:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800b06c:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800b070:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 800b074:	4618      	mov	r0, r3
 800b076:	f001 f911 	bl	800c29c <GetCRC32>
 800b07a:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 800b07e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800b082:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800b086:	4413      	add	r3, r2
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	461a      	mov	r2, r3
 800b08c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b090:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b094:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 800b098:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b09c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b0a0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b0a4:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d00c      	beq.n	800b0c6 <Medha_EI_Analyser+0x5f6>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 800b0ac:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b0b0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b0b4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 800b0be:	4826      	ldr	r0, [pc, #152]	; (800b158 <Medha_EI_Analyser+0x688>)
 800b0c0:	f01b fd94 	bl	8026bec <iprintf>
			return;
 800b0c4:	e15a      	b.n	800b37c <Medha_EI_Analyser+0x8ac>
		}
		BYTEINC(4);
 800b0c6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800b0ca:	3304      	adds	r3, #4
 800b0cc:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 800b0d0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800b0d4:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800b0d8:	4413      	add	r3, r2
 800b0da:	881b      	ldrh	r3, [r3, #0]
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b0e2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b0e6:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 800b0ea:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800b0ee:	3302      	adds	r3, #2
 800b0f0:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 800b0f4:	f00e fd70 	bl	8019bd8 <HAL_GetTick>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	4a18      	ldr	r2, [pc, #96]	; (800b15c <Medha_EI_Analyser+0x68c>)
 800b0fc:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 800b0fe:	4a18      	ldr	r2, [pc, #96]	; (800b160 <Medha_EI_Analyser+0x690>)
 800b100:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b104:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b108:	4610      	mov	r0, r2
 800b10a:	4619      	mov	r1, r3
 800b10c:	f44f 7392 	mov.w	r3, #292	; 0x124
 800b110:	461a      	mov	r2, r3
 800b112:	f01b fc5b 	bl	80269cc <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 800b116:	4b13      	ldr	r3, [pc, #76]	; (800b164 <Medha_EI_Analyser+0x694>)
 800b118:	2201      	movs	r2, #1
 800b11a:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800b11c:	4b10      	ldr	r3, [pc, #64]	; (800b160 <Medha_EI_Analyser+0x690>)
 800b11e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b122:	4a10      	ldr	r2, [pc, #64]	; (800b164 <Medha_EI_Analyser+0x694>)
 800b124:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 800b126:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 f956 	bl	800b3dc <Send_Medha_EI_Reply>
//				Medha_Cur_Relay_Status_st.Relay_Status[Traverser++] = (Medha_EI_Temp_Rx_st.RelayStatus[i]);
//			}
//		}
//		else
		{
			for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b130:	2300      	movs	r3, #0
 800b132:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b136:	e028      	b.n	800b18a <Medha_EI_Analyser+0x6ba>
 800b138:	20000504 	.word	0x20000504
 800b13c:	08029e10 	.word	0x08029e10
 800b140:	20000505 	.word	0x20000505
 800b144:	08029f54 	.word	0x08029f54
 800b148:	08029f90 	.word	0x08029f90
 800b14c:	08029db0 	.word	0x08029db0
 800b150:	08029fdc 	.word	0x08029fdc
 800b154:	0802a000 	.word	0x0802a000
 800b158:	0802a014 	.word	0x0802a014
 800b15c:	20003df4 	.word	0x20003df4
 800b160:	20003c9c 	.word	0x20003c9c
 800b164:	20003e04 	.word	0x20003e04
			{
				//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
				Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 800b168:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b16c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b170:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800b174:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 800b178:	440a      	add	r2, r1
 800b17a:	7e11      	ldrb	r1, [r2, #24]
 800b17c:	4a81      	ldr	r2, [pc, #516]	; (800b384 <Medha_EI_Analyser+0x8b4>)
 800b17e:	54d1      	strb	r1, [r2, r3]
			for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b180:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b184:	3301      	adds	r3, #1
 800b186:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b18a:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b18e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b192:	429a      	cmp	r2, r3
 800b194:	d3e8      	bcc.n	800b168 <Medha_EI_Analyser+0x698>





		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800b196:	4b7c      	ldr	r3, [pc, #496]	; (800b388 <Medha_EI_Analyser+0x8b8>)
 800b198:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b19c:	4a79      	ldr	r2, [pc, #484]	; (800b384 <Medha_EI_Analyser+0x8b4>)
 800b19e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 800b1a2:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	4976      	ldr	r1, [pc, #472]	; (800b384 <Medha_EI_Analyser+0x8b4>)
 800b1aa:	4878      	ldr	r0, [pc, #480]	; (800b38c <Medha_EI_Analyser+0x8bc>)
 800b1ac:	f01b fbfe 	bl	80269ac <memcmp>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d030      	beq.n	800b218 <Medha_EI_Analyser+0x748>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800b1b6:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	4971      	ldr	r1, [pc, #452]	; (800b384 <Medha_EI_Analyser+0x8b4>)
 800b1be:	4873      	ldr	r0, [pc, #460]	; (800b38c <Medha_EI_Analyser+0x8bc>)
 800b1c0:	f01b fc04 	bl	80269cc <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800b1c4:	4b6f      	ldr	r3, [pc, #444]	; (800b384 <Medha_EI_Analyser+0x8b4>)
 800b1c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1ca:	4a70      	ldr	r2, [pc, #448]	; (800b38c <Medha_EI_Analyser+0x8bc>)
 800b1cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(Medha_Relay_Sts_st.Relay_Sts));
 800b1d0:	2230      	movs	r2, #48	; 0x30
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	486e      	ldr	r0, [pc, #440]	; (800b390 <Medha_EI_Analyser+0x8c0>)
 800b1d6:	f01b fc21 	bl	8026a1c <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800b1da:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b1de:	461a      	mov	r2, r3
 800b1e0:	4968      	ldr	r1, [pc, #416]	; (800b384 <Medha_EI_Analyser+0x8b4>)
 800b1e2:	486b      	ldr	r0, [pc, #428]	; (800b390 <Medha_EI_Analyser+0x8c0>)
 800b1e4:	f01b fbf2 	bl	80269cc <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
 800b1e8:	f240 1019 	movw	r0, #281	; 0x119
 800b1ec:	f005 ff8a 	bl	8011104 <TransmitCanPkt>
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800b1f0:	f00e fcf2 	bl	8019bd8 <HAL_GetTick>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	4a67      	ldr	r2, [pc, #412]	; (800b394 <Medha_EI_Analyser+0x8c4>)
 800b1f8:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 800b1fa:	4867      	ldr	r0, [pc, #412]	; (800b398 <Medha_EI_Analyser+0x8c8>)
 800b1fc:	f01b fd92 	bl	8026d24 <puts>


#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 800b200:	f240 2001 	movw	r0, #513	; 0x201
 800b204:	f005 ff7e 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 800b208:	4b64      	ldr	r3, [pc, #400]	; (800b39c <Medha_EI_Analyser+0x8cc>)
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d103      	bne.n	800b218 <Medha_EI_Analyser+0x748>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800b210:	f240 2007 	movw	r0, #519	; 0x207
 800b214:	f005 ff76 	bl	8011104 <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 800b218:	4861      	ldr	r0, [pc, #388]	; (800b3a0 <Medha_EI_Analyser+0x8d0>)
 800b21a:	f01b fd83 	bl	8026d24 <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 800b21e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b222:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b226:	889b      	ldrh	r3, [r3, #4]
 800b228:	4619      	mov	r1, r3
 800b22a:	485e      	ldr	r0, [pc, #376]	; (800b3a4 <Medha_EI_Analyser+0x8d4>)
 800b22c:	f01b fcde 	bl	8026bec <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 800b230:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b234:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b238:	885b      	ldrh	r3, [r3, #2]
 800b23a:	4619      	mov	r1, r3
 800b23c:	485a      	ldr	r0, [pc, #360]	; (800b3a8 <Medha_EI_Analyser+0x8d8>)
 800b23e:	f01b fcd5 	bl	8026bec <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 800b242:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b246:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b24a:	799b      	ldrb	r3, [r3, #6]
 800b24c:	4619      	mov	r1, r3
 800b24e:	4857      	ldr	r0, [pc, #348]	; (800b3ac <Medha_EI_Analyser+0x8dc>)
 800b250:	f01b fccc 	bl	8026bec <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 800b254:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b258:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b25c:	79db      	ldrb	r3, [r3, #7]
 800b25e:	4619      	mov	r1, r3
 800b260:	4853      	ldr	r0, [pc, #332]	; (800b3b0 <Medha_EI_Analyser+0x8e0>)
 800b262:	f01b fcc3 	bl	8026bec <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 800b266:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b26a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b26e:	891b      	ldrh	r3, [r3, #8]
 800b270:	4619      	mov	r1, r3
 800b272:	4850      	ldr	r0, [pc, #320]	; (800b3b4 <Medha_EI_Analyser+0x8e4>)
 800b274:	f01b fcba 	bl	8026bec <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 800b278:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b27c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b280:	7a9b      	ldrb	r3, [r3, #10]
 800b282:	4619      	mov	r1, r3
 800b284:	484c      	ldr	r0, [pc, #304]	; (800b3b8 <Medha_EI_Analyser+0x8e8>)
 800b286:	f01b fcb1 	bl	8026bec <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 800b28a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b28e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b292:	7b9b      	ldrb	r3, [r3, #14]
 800b294:	4618      	mov	r0, r3
 800b296:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b29a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b29e:	7b5b      	ldrb	r3, [r3, #13]
 800b2a0:	461c      	mov	r4, r3
 800b2a2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2a6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2aa:	7b1b      	ldrb	r3, [r3, #12]
 800b2ac:	461d      	mov	r5, r3
 800b2ae:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2b2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2b6:	7bdb      	ldrb	r3, [r3, #15]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2be:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2c2:	7c1b      	ldrb	r3, [r3, #16]
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2ca:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2ce:	7c5b      	ldrb	r3, [r3, #17]
 800b2d0:	9302      	str	r3, [sp, #8]
 800b2d2:	9101      	str	r1, [sp, #4]
 800b2d4:	9200      	str	r2, [sp, #0]
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	4622      	mov	r2, r4
 800b2da:	4601      	mov	r1, r0
 800b2dc:	4837      	ldr	r0, [pc, #220]	; (800b3bc <Medha_EI_Analyser+0x8ec>)
 800b2de:	f01b fc85 	bl	8026bec <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 800b2e2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2e6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2ea:	7c9b      	ldrb	r3, [r3, #18]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	4834      	ldr	r0, [pc, #208]	; (800b3c0 <Medha_EI_Analyser+0x8f0>)
 800b2f0:	f01b fc7c 	bl	8026bec <iprintf>
		printf("RC:%5lu\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800b2f4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2f8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	4619      	mov	r1, r3
 800b300:	4830      	ldr	r0, [pc, #192]	; (800b3c4 <Medha_EI_Analyser+0x8f4>)
 800b302:	f01b fc73 	bl	8026bec <iprintf>
		printf("SIGNAL DATA       :");
 800b306:	4830      	ldr	r0, [pc, #192]	; (800b3c8 <Medha_EI_Analyser+0x8f8>)
 800b308:	f01b fc70 	bl	8026bec <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b30c:	2300      	movs	r3, #0
 800b30e:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b312:	e021      	b.n	800b358 <Medha_EI_Analyser+0x888>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 800b314:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d010      	beq.n	800b33e <Medha_EI_Analyser+0x86e>
 800b31c:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b320:	4b2a      	ldr	r3, [pc, #168]	; (800b3cc <Medha_EI_Analyser+0x8fc>)
 800b322:	fba3 1302 	umull	r1, r3, r3, r2
 800b326:	08d9      	lsrs	r1, r3, #3
 800b328:	460b      	mov	r3, r1
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	440b      	add	r3, r1
 800b32e:	005b      	lsls	r3, r3, #1
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	b29b      	uxth	r3, r3
 800b334:	2b00      	cmp	r3, #0
 800b336:	d102      	bne.n	800b33e <Medha_EI_Analyser+0x86e>
			{
				printf("\n                   ");
 800b338:	4825      	ldr	r0, [pc, #148]	; (800b3d0 <Medha_EI_Analyser+0x900>)
 800b33a:	f01b fc57 	bl	8026bec <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 800b33e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b342:	4a10      	ldr	r2, [pc, #64]	; (800b384 <Medha_EI_Analyser+0x8b4>)
 800b344:	5cd3      	ldrb	r3, [r2, r3]
 800b346:	4619      	mov	r1, r3
 800b348:	4822      	ldr	r0, [pc, #136]	; (800b3d4 <Medha_EI_Analyser+0x904>)
 800b34a:	f01b fc4f 	bl	8026bec <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b34e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b352:	3301      	adds	r3, #1
 800b354:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b358:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b35c:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b360:	429a      	cmp	r2, r3
 800b362:	d3d7      	bcc.n	800b314 <Medha_EI_Analyser+0x844>
		}
		printf("\n");
 800b364:	200a      	movs	r0, #10
 800b366:	f01b fc59 	bl	8026c1c <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 800b36a:	481b      	ldr	r0, [pc, #108]	; (800b3d8 <Medha_EI_Analyser+0x908>)
 800b36c:	f01b fcda 	bl	8026d24 <puts>
		return;
 800b370:	e004      	b.n	800b37c <Medha_EI_Analyser+0x8ac>
	}
	else
	{
		return;
 800b372:	bf00      	nop
 800b374:	e002      	b.n	800b37c <Medha_EI_Analyser+0x8ac>
				return;
 800b376:	bf00      	nop
 800b378:	e000      	b.n	800b37c <Medha_EI_Analyser+0x8ac>
				return;
 800b37a:	bf00      	nop
	}
}
 800b37c:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 800b380:	46bd      	mov	sp, r7
 800b382:	bdb0      	pop	{r4, r5, r7, pc}
 800b384:	20003e1c 	.word	0x20003e1c
 800b388:	20003c9c 	.word	0x20003c9c
 800b38c:	20003f24 	.word	0x20003f24
 800b390:	20003dc2 	.word	0x20003dc2
 800b394:	20003df4 	.word	0x20003df4
 800b398:	0802a054 	.word	0x0802a054
 800b39c:	20003e0c 	.word	0x20003e0c
 800b3a0:	0802a06c 	.word	0x0802a06c
 800b3a4:	0802a094 	.word	0x0802a094
 800b3a8:	0802a09c 	.word	0x0802a09c
 800b3ac:	0802a0a4 	.word	0x0802a0a4
 800b3b0:	0802a0b0 	.word	0x0802a0b0
 800b3b4:	0802a0bc 	.word	0x0802a0bc
 800b3b8:	0802a0c4 	.word	0x0802a0c4
 800b3bc:	0802a0cc 	.word	0x0802a0cc
 800b3c0:	0802a0f0 	.word	0x0802a0f0
 800b3c4:	0802a0fc 	.word	0x0802a0fc
 800b3c8:	0802a108 	.word	0x0802a108
 800b3cc:	cccccccd 	.word	0xcccccccd
 800b3d0:	0802a11c 	.word	0x0802a11c
 800b3d4:	08029db0 	.word	0x08029db0
 800b3d8:	0802a134 	.word	0x0802a134

0800b3dc <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b0d2      	sub	sp, #328	; 0x148
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b3e8:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b3ec:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 800b3ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b3f2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	601a      	str	r2, [r3, #0]
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b400:	2100      	movs	r1, #0
 800b402:	4618      	mov	r0, r3
 800b404:	f01b fb0a 	bl	8026a1c <memset>
	uint32_t Cal_Crc =0;
 800b408:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b40c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b410:	2200      	movs	r2, #0
 800b412:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 800b414:	2300      	movs	r3, #0
 800b416:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 800b41a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b41e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b422:	2200      	movs	r2, #0
 800b424:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 800b426:	2300      	movs	r3, #0
 800b428:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 800b42c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b430:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b434:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b438:	2153      	movs	r1, #83	; 0x53
 800b43a:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800b43c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b440:	3301      	adds	r3, #1
 800b442:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 800b446:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b44a:	f107 0214 	add.w	r2, r7, #20
 800b44e:	4413      	add	r3, r2
 800b450:	4a88      	ldr	r2, [pc, #544]	; (800b674 <Send_Medha_EI_Reply+0x298>)
 800b452:	8852      	ldrh	r2, [r2, #2]
 800b454:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b456:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b45a:	3302      	adds	r3, #2
 800b45c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 800b460:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b464:	f107 0214 	add.w	r2, r7, #20
 800b468:	4413      	add	r3, r2
 800b46a:	4a82      	ldr	r2, [pc, #520]	; (800b674 <Send_Medha_EI_Reply+0x298>)
 800b46c:	8892      	ldrh	r2, [r2, #4]
 800b46e:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b470:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b474:	3302      	adds	r3, #2
 800b476:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 800b47a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b47e:	f107 0214 	add.w	r2, r7, #20
 800b482:	4413      	add	r3, r2
 800b484:	4a7b      	ldr	r2, [pc, #492]	; (800b674 <Send_Medha_EI_Reply+0x298>)
 800b486:	7992      	ldrb	r2, [r2, #6]
 800b488:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800b48a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b48e:	3301      	adds	r3, #1
 800b490:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 800b494:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b498:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b49c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b4a0:	21e2      	movs	r1, #226	; 0xe2
 800b4a2:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800b4a4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 800b4ae:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4b2:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 800b4b6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4ba:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b4be:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 800b4c6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b4d0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 800b4d8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4dc:	3302      	adds	r3, #2
 800b4de:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 800b4e2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4e6:	f107 0214 	add.w	r2, r7, #20
 800b4ea:	4413      	add	r3, r2
 800b4ec:	4a61      	ldr	r2, [pc, #388]	; (800b674 <Send_Medha_EI_Reply+0x298>)
 800b4ee:	7a92      	ldrb	r2, [r2, #10]
 800b4f0:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800b4f2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 800b4fc:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b500:	f107 0214 	add.w	r2, r7, #20
 800b504:	441a      	add	r2, r3
 800b506:	4b5b      	ldr	r3, [pc, #364]	; (800b674 <Send_Medha_EI_Reply+0x298>)
 800b508:	330b      	adds	r3, #11
 800b50a:	6819      	ldr	r1, [r3, #0]
 800b50c:	6011      	str	r1, [r2, #0]
 800b50e:	8899      	ldrh	r1, [r3, #4]
 800b510:	799b      	ldrb	r3, [r3, #6]
 800b512:	8091      	strh	r1, [r2, #4]
 800b514:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 800b516:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b51a:	3307      	adds	r3, #7
 800b51c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 800b520:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b524:	f107 0214 	add.w	r2, r7, #20
 800b528:	4413      	add	r3, r2
 800b52a:	4a52      	ldr	r2, [pc, #328]	; (800b674 <Send_Medha_EI_Reply+0x298>)
 800b52c:	8a92      	ldrh	r2, [r2, #20]
 800b52e:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b530:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b534:	3302      	adds	r3, #2
 800b536:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 800b53a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b53e:	f107 0214 	add.w	r2, r7, #20
 800b542:	18d0      	adds	r0, r2, r3
 800b544:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b548:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b54c:	881b      	ldrh	r3, [r3, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	4949      	ldr	r1, [pc, #292]	; (800b678 <Send_Medha_EI_Reply+0x29c>)
 800b552:	f01b fa3b 	bl	80269cc <memcpy>
	BYTEINC(Outputs);
 800b556:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b55a:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b55e:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b562:	881b      	ldrh	r3, [r3, #0]
 800b564:	4413      	add	r3, r2
 800b566:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 800b56a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b56e:	f107 0214 	add.w	r2, r7, #20
 800b572:	18d0      	adds	r0, r2, r3
 800b574:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b578:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b57c:	881b      	ldrh	r3, [r3, #0]
 800b57e:	461a      	mov	r2, r3
 800b580:	493e      	ldr	r1, [pc, #248]	; (800b67c <Send_Medha_EI_Reply+0x2a0>)
 800b582:	f01b fa23 	bl	80269cc <memcpy>
	BYTEINC(Outputs);
 800b586:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b58a:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b58e:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b592:	881b      	ldrh	r3, [r3, #0]
 800b594:	4413      	add	r3, r2
 800b596:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 800b59a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b59e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b5a2:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b5a6:	2100      	movs	r1, #0
 800b5a8:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 800b5aa:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b5ae:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b5b2:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 800b5ba:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b5be:	3302      	adds	r3, #2
 800b5c0:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 800b5c4:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b5ce:	1ad3      	subs	r3, r2, r3
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	3302      	adds	r3, #2
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b5da:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b5de:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 800b5e0:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800b5e4:	f107 0214 	add.w	r2, r7, #20
 800b5e8:	4413      	add	r3, r2
 800b5ea:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b5ee:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800b5f2:	8812      	ldrh	r2, [r2, #0]
 800b5f4:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 800b5f6:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b5fa:	f107 0314 	add.w	r3, r7, #20
 800b5fe:	4619      	mov	r1, r3
 800b600:	2000      	movs	r0, #0
 800b602:	f000 fe4b 	bl	800c29c <GetCRC32>
 800b606:	4602      	mov	r2, r0
 800b608:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b60c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b610:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 800b612:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b616:	f107 0214 	add.w	r2, r7, #20
 800b61a:	4413      	add	r3, r2
 800b61c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b620:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800b624:	6812      	ldr	r2, [r2, #0]
 800b626:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 800b628:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b62c:	3304      	adds	r3, #4
 800b62e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800b632:	2300      	movs	r3, #0
 800b634:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800b638:	e011      	b.n	800b65e <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 800b63a:	4b11      	ldr	r3, [pc, #68]	; (800b680 <Send_Medha_EI_Reply+0x2a4>)
 800b63c:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 800b640:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800b644:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b648:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b64c:	5cd3      	ldrb	r3, [r2, r3]
 800b64e:	4619      	mov	r1, r3
 800b650:	f00e f86a 	bl	8019728 <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800b654:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800b658:	3301      	adds	r3, #1
 800b65a:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800b65e:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800b662:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b666:	429a      	cmp	r2, r3
 800b668:	d3e7      	bcc.n	800b63a <Send_Medha_EI_Reply+0x25e>
	}
	return;
 800b66a:	bf00      	nop
}
 800b66c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	20003c9c 	.word	0x20003c9c
 800b678:	20003cb4 	.word	0x20003cb4
 800b67c:	20003d34 	.word	0x20003d34
 800b680:	20000504 	.word	0x20000504

0800b684 <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 800b68a:	4b2c      	ldr	r3, [pc, #176]	; (800b73c <Send_Relay_Statuses_2_MIE+0xb8>)
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	4618      	mov	r0, r3
 800b690:	f004 ff84 	bl	801059c <HAL_Elaps_Ticks>
 800b694:	4602      	mov	r2, r0
 800b696:	4b2a      	ldr	r3, [pc, #168]	; (800b740 <Send_Relay_Statuses_2_MIE+0xbc>)
 800b698:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d349      	bcc.n	800b734 <Send_Relay_Statuses_2_MIE+0xb0>
	{
		uint16_t NoOfInputs = 0;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 800b6a4:	4b26      	ldr	r3, [pc, #152]	; (800b740 <Send_Relay_Statuses_2_MIE+0xbc>)
 800b6a6:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b6aa:	f003 0307 	and.w	r3, r3, #7
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d007      	beq.n	800b6c2 <Send_Relay_Statuses_2_MIE+0x3e>
 800b6b2:	4b23      	ldr	r3, [pc, #140]	; (800b740 <Send_Relay_Statuses_2_MIE+0xbc>)
 800b6b4:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b6b8:	08db      	lsrs	r3, r3, #3
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	3301      	adds	r3, #1
 800b6be:	80fb      	strh	r3, [r7, #6]
 800b6c0:	e004      	b.n	800b6cc <Send_Relay_Statuses_2_MIE+0x48>
 800b6c2:	4b1f      	ldr	r3, [pc, #124]	; (800b740 <Send_Relay_Statuses_2_MIE+0xbc>)
 800b6c4:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b6c8:	08db      	lsrs	r3, r3, #3
 800b6ca:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800b6cc:	f00e fa84 	bl	8019bd8 <HAL_GetTick>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	4a1a      	ldr	r2, [pc, #104]	; (800b73c <Send_Relay_Statuses_2_MIE+0xb8>)
 800b6d4:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 800b6d6:	481b      	ldr	r0, [pc, #108]	; (800b744 <Send_Relay_Statuses_2_MIE+0xc0>)
 800b6d8:	f01b fb24 	bl	8026d24 <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800b6dc:	2300      	movs	r3, #0
 800b6de:	603b      	str	r3, [r7, #0]
 800b6e0:	e01d      	b.n	800b71e <Send_Relay_Statuses_2_MIE+0x9a>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00e      	beq.n	800b706 <Send_Relay_Statuses_2_MIE+0x82>
 800b6e8:	6839      	ldr	r1, [r7, #0]
 800b6ea:	4b17      	ldr	r3, [pc, #92]	; (800b748 <Send_Relay_Statuses_2_MIE+0xc4>)
 800b6ec:	fba3 2301 	umull	r2, r3, r3, r1
 800b6f0:	091a      	lsrs	r2, r3, #4
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4413      	add	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	1aca      	subs	r2, r1, r3
 800b6fc:	2a00      	cmp	r2, #0
 800b6fe:	d102      	bne.n	800b706 <Send_Relay_Statuses_2_MIE+0x82>
			{
				printf("\n");
 800b700:	200a      	movs	r0, #10
 800b702:	f01b fa8b 	bl	8026c1c <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 800b706:	4a11      	ldr	r2, [pc, #68]	; (800b74c <Send_Relay_Statuses_2_MIE+0xc8>)
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	4413      	add	r3, r2
 800b70c:	3302      	adds	r3, #2
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	4619      	mov	r1, r3
 800b712:	480f      	ldr	r0, [pc, #60]	; (800b750 <Send_Relay_Statuses_2_MIE+0xcc>)
 800b714:	f01b fa6a 	bl	8026bec <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	3301      	adds	r3, #1
 800b71c:	603b      	str	r3, [r7, #0]
 800b71e:	88fb      	ldrh	r3, [r7, #6]
 800b720:	683a      	ldr	r2, [r7, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	d3dd      	bcc.n	800b6e2 <Send_Relay_Statuses_2_MIE+0x5e>
		}
		printf("\n");
 800b726:	200a      	movs	r0, #10
 800b728:	f01b fa78 	bl	8026c1c <putchar>

#ifdef EI_1
		TransmitCanPkt(EI_PROCESS_DATA);
 800b72c:	f240 1019 	movw	r0, #281	; 0x119
 800b730:	f005 fce8 	bl	8011104 <TransmitCanPkt>
#endif
	}
}
 800b734:	bf00      	nop
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	20003df4 	.word	0x20003df4
 800b740:	20000504 	.word	0x20000504
 800b744:	0802a15c 	.word	0x0802a15c
 800b748:	cccccccd 	.word	0xcccccccd
 800b74c:	20003dc0 	.word	0x20003dc0
 800b750:	08029db0 	.word	0x08029db0

0800b754 <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 800b75a:	4b61      	ldr	r3, [pc, #388]	; (800b8e0 <Process_Clear_Relays+0x18c>)
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	4618      	mov	r0, r3
 800b760:	f004 ff1c 	bl	801059c <HAL_Elaps_Ticks>
 800b764:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800b766:	4b5f      	ldr	r3, [pc, #380]	; (800b8e4 <Process_Clear_Relays+0x190>)
 800b768:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b76c:	4a5d      	ldr	r2, [pc, #372]	; (800b8e4 <Process_Clear_Relays+0x190>)
 800b76e:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 800b772:	fb02 f303 	mul.w	r3, r2, r3
 800b776:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800b778:	495b      	ldr	r1, [pc, #364]	; (800b8e8 <Process_Clear_Relays+0x194>)
 800b77a:	485c      	ldr	r0, [pc, #368]	; (800b8ec <Process_Clear_Relays+0x198>)
 800b77c:	f7f4 fd60 	bl	8000240 <strcmp>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	f000 80a7 	beq.w	800b8d6 <Process_Clear_Relays+0x182>
	{
		return;
	}

	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d30c      	bcc.n	800b7aa <Process_Clear_Relays+0x56>
 800b790:	4b53      	ldr	r3, [pc, #332]	; (800b8e0 <Process_Clear_Relays+0x18c>)
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	4b56      	ldr	r3, [pc, #344]	; (800b8f0 <Process_Clear_Relays+0x19c>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d006      	beq.n	800b7aa <Process_Clear_Relays+0x56>
 800b79c:	4b55      	ldr	r3, [pc, #340]	; (800b8f4 <Process_Clear_Relays+0x1a0>)
 800b79e:	785a      	ldrb	r2, [r3, #1]
 800b7a0:	4b50      	ldr	r3, [pc, #320]	; (800b8e4 <Process_Clear_Relays+0x190>)
 800b7a2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d808      	bhi.n	800b7bc <Process_Clear_Relays+0x68>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 800b7aa:	4b4d      	ldr	r3, [pc, #308]	; (800b8e0 <Process_Clear_Relays+0x18c>)
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d049      	beq.n	800b846 <Process_Clear_Relays+0xf2>
 800b7b2:	4b51      	ldr	r3, [pc, #324]	; (800b8f8 <Process_Clear_Relays+0x1a4>)
 800b7b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d044      	beq.n	800b846 <Process_Clear_Relays+0xf2>
	)
	{


		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b7bc:	4b48      	ldr	r3, [pc, #288]	; (800b8e0 <Process_Clear_Relays+0x18c>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	484e      	ldr	r0, [pc, #312]	; (800b8fc <Process_Clear_Relays+0x1a8>)
 800b7c4:	f01b fa12 	bl	8026bec <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800b7c8:	4b45      	ldr	r3, [pc, #276]	; (800b8e0 <Process_Clear_Relays+0x18c>)
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	f003 0301 	and.w	r3, r3, #1
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d006      	beq.n	800b7e2 <Process_Clear_Relays+0x8e>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b7d4:	4b42      	ldr	r3, [pc, #264]	; (800b8e0 <Process_Clear_Relays+0x18c>)
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	f023 0301 	bic.w	r3, r3, #1
 800b7dc:	b2da      	uxtb	r2, r3
 800b7de:	4b40      	ldr	r3, [pc, #256]	; (800b8e0 <Process_Clear_Relays+0x18c>)
 800b7e0:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800b7e2:	4b3f      	ldr	r3, [pc, #252]	; (800b8e0 <Process_Clear_Relays+0x18c>)
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	f003 0302 	and.w	r3, r3, #2
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d006      	beq.n	800b7fc <Process_Clear_Relays+0xa8>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b7ee:	4b3c      	ldr	r3, [pc, #240]	; (800b8e0 <Process_Clear_Relays+0x18c>)
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	f023 0302 	bic.w	r3, r3, #2
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	4b39      	ldr	r3, [pc, #228]	; (800b8e0 <Process_Clear_Relays+0x18c>)
 800b7fa:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b7fc:	2284      	movs	r2, #132	; 0x84
 800b7fe:	2100      	movs	r1, #0
 800b800:	483d      	ldr	r0, [pc, #244]	; (800b8f8 <Process_Clear_Relays+0x1a4>)
 800b802:	f01b f90b 	bl	8026a1c <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800b806:	2232      	movs	r2, #50	; 0x32
 800b808:	2100      	movs	r1, #0
 800b80a:	483d      	ldr	r0, [pc, #244]	; (800b900 <Process_Clear_Relays+0x1ac>)
 800b80c:	f01b f906 	bl	8026a1c <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b810:	2284      	movs	r2, #132	; 0x84
 800b812:	2100      	movs	r1, #0
 800b814:	483b      	ldr	r0, [pc, #236]	; (800b904 <Process_Clear_Relays+0x1b0>)
 800b816:	f01b f901 	bl	8026a1c <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b81a:	2208      	movs	r2, #8
 800b81c:	2100      	movs	r1, #0
 800b81e:	483a      	ldr	r0, [pc, #232]	; (800b908 <Process_Clear_Relays+0x1b4>)
 800b820:	f01b f8fc 	bl	8026a1c <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b824:	2208      	movs	r2, #8
 800b826:	2100      	movs	r1, #0
 800b828:	4832      	ldr	r0, [pc, #200]	; (800b8f4 <Process_Clear_Relays+0x1a0>)
 800b82a:	f01b f8f7 	bl	8026a1c <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b82e:	2208      	movs	r2, #8
 800b830:	2100      	movs	r1, #0
 800b832:	4836      	ldr	r0, [pc, #216]	; (800b90c <Process_Clear_Relays+0x1b8>)
 800b834:	f01b f8f2 	bl	8026a1c <memset>
		printf("Cleared Relay Statuses\n");
 800b838:	4835      	ldr	r0, [pc, #212]	; (800b910 <Process_Clear_Relays+0x1bc>)
 800b83a:	f01b fa73 	bl	8026d24 <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800b83e:	4b28      	ldr	r3, [pc, #160]	; (800b8e0 <Process_Clear_Relays+0x18c>)
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	4a2b      	ldr	r2, [pc, #172]	; (800b8f0 <Process_Clear_Relays+0x19c>)
 800b844:	6013      	str	r3, [r2, #0]
	}


	if((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > (EI_data.Medha_Prms_st.CAN_Xchange_Tout)) && (Medha_CAN_Xchanging_Happening == SET))
 800b846:	4b33      	ldr	r3, [pc, #204]	; (800b914 <Process_Clear_Relays+0x1c0>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f004 fea6 	bl	801059c <HAL_Elaps_Ticks>
 800b850:	4602      	mov	r2, r0
 800b852:	4b24      	ldr	r3, [pc, #144]	; (800b8e4 <Process_Clear_Relays+0x190>)
 800b854:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b858:	429a      	cmp	r2, r3
 800b85a:	d92a      	bls.n	800b8b2 <Process_Clear_Relays+0x15e>
 800b85c:	4b2e      	ldr	r3, [pc, #184]	; (800b918 <Process_Clear_Relays+0x1c4>)
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d126      	bne.n	800b8b2 <Process_Clear_Relays+0x15e>
	{
		printf("CAN Exchanging not Happening\n");
 800b864:	482d      	ldr	r0, [pc, #180]	; (800b91c <Process_Clear_Relays+0x1c8>)
 800b866:	f01b fa5d 	bl	8026d24 <puts>
		Medha_CAN_Xchanging_Happening = RESET;
 800b86a:	4b2b      	ldr	r3, [pc, #172]	; (800b918 <Process_Clear_Relays+0x1c4>)
 800b86c:	2200      	movs	r2, #0
 800b86e:	701a      	strb	r2, [r3, #0]
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b870:	2284      	movs	r2, #132	; 0x84
 800b872:	2100      	movs	r1, #0
 800b874:	4820      	ldr	r0, [pc, #128]	; (800b8f8 <Process_Clear_Relays+0x1a4>)
 800b876:	f01b f8d1 	bl	8026a1c <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800b87a:	2232      	movs	r2, #50	; 0x32
 800b87c:	2100      	movs	r1, #0
 800b87e:	4820      	ldr	r0, [pc, #128]	; (800b900 <Process_Clear_Relays+0x1ac>)
 800b880:	f01b f8cc 	bl	8026a1c <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b884:	2284      	movs	r2, #132	; 0x84
 800b886:	2100      	movs	r1, #0
 800b888:	481e      	ldr	r0, [pc, #120]	; (800b904 <Process_Clear_Relays+0x1b0>)
 800b88a:	f01b f8c7 	bl	8026a1c <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b88e:	2208      	movs	r2, #8
 800b890:	2100      	movs	r1, #0
 800b892:	481d      	ldr	r0, [pc, #116]	; (800b908 <Process_Clear_Relays+0x1b4>)
 800b894:	f01b f8c2 	bl	8026a1c <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b898:	2208      	movs	r2, #8
 800b89a:	2100      	movs	r1, #0
 800b89c:	4815      	ldr	r0, [pc, #84]	; (800b8f4 <Process_Clear_Relays+0x1a0>)
 800b89e:	f01b f8bd 	bl	8026a1c <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b8a2:	2208      	movs	r2, #8
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	4819      	ldr	r0, [pc, #100]	; (800b90c <Process_Clear_Relays+0x1b8>)
 800b8a8:	f01b f8b8 	bl	8026a1c <memset>
		printf("Cleared Relay Statuses\n");
 800b8ac:	4818      	ldr	r0, [pc, #96]	; (800b910 <Process_Clear_Relays+0x1bc>)
 800b8ae:	f01b fa39 	bl	8026d24 <puts>
	}


	if( ((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) < (EI_data.Medha_Prms_st.CAN_Xchange_Tout))) && (Medha_CAN_Xchanging_Happening == SET))
 800b8b2:	4b18      	ldr	r3, [pc, #96]	; (800b914 <Process_Clear_Relays+0x1c0>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f004 fe70 	bl	801059c <HAL_Elaps_Ticks>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	4b09      	ldr	r3, [pc, #36]	; (800b8e4 <Process_Clear_Relays+0x190>)
 800b8c0:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d207      	bcs.n	800b8d8 <Process_Clear_Relays+0x184>
 800b8c8:	4b13      	ldr	r3, [pc, #76]	; (800b918 <Process_Clear_Relays+0x1c4>)
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d103      	bne.n	800b8d8 <Process_Clear_Relays+0x184>
	{
		Blink_S2();
 800b8d0:	f00a fea4 	bl	801661c <Blink_S2>
 800b8d4:	e000      	b.n	800b8d8 <Process_Clear_Relays+0x184>
		return;
 800b8d6:	bf00      	nop
	}


}
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	20003df4 	.word	0x20003df4
 800b8e4:	20000504 	.word	0x20000504
 800b8e8:	08029e10 	.word	0x08029e10
 800b8ec:	20000505 	.word	0x20000505
 800b8f0:	20003fb4 	.word	0x20003fb4
 800b8f4:	20003e0c 	.word	0x20003e0c
 800b8f8:	20003e1c 	.word	0x20003e1c
 800b8fc:	0802a170 	.word	0x0802a170
 800b900:	20003dc0 	.word	0x20003dc0
 800b904:	20003f24 	.word	0x20003f24
 800b908:	20003e04 	.word	0x20003e04
 800b90c:	20003e14 	.word	0x20003e14
 800b910:	0802a1a0 	.word	0x0802a1a0
 800b914:	200038ac 	.word	0x200038ac
 800b918:	200038a8 	.word	0x200038a8
 800b91c:	0802a1b8 	.word	0x0802a1b8

0800b920 <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 800b924:	4b26      	ldr	r3, [pc, #152]	; (800b9c0 <Send_Data_to_Other+0xa0>)
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	4618      	mov	r0, r3
 800b92a:	f004 fe37 	bl	801059c <HAL_Elaps_Ticks>
 800b92e:	4602      	mov	r2, r0
 800b930:	4b24      	ldr	r3, [pc, #144]	; (800b9c4 <Send_Data_to_Other+0xa4>)
 800b932:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b936:	4923      	ldr	r1, [pc, #140]	; (800b9c4 <Send_Data_to_Other+0xa4>)
 800b938:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 800b93c:	fb01 f303 	mul.w	r3, r1, r3
 800b940:	429a      	cmp	r2, r3
 800b942:	d306      	bcc.n	800b952 <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 800b944:	4b20      	ldr	r3, [pc, #128]	; (800b9c8 <Send_Data_to_Other+0xa8>)
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d002      	beq.n	800b952 <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 800b94c:	4b1e      	ldr	r3, [pc, #120]	; (800b9c8 <Send_Data_to_Other+0xa8>)
 800b94e:	2200      	movs	r2, #0
 800b950:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 800b952:	4b1b      	ldr	r3, [pc, #108]	; (800b9c0 <Send_Data_to_Other+0xa0>)
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	4618      	mov	r0, r3
 800b958:	f004 fe20 	bl	801059c <HAL_Elaps_Ticks>
 800b95c:	4602      	mov	r2, r0
 800b95e:	4b19      	ldr	r3, [pc, #100]	; (800b9c4 <Send_Data_to_Other+0xa4>)
 800b960:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800b964:	429a      	cmp	r2, r3
 800b966:	d90e      	bls.n	800b986 <Send_Data_to_Other+0x66>
 800b968:	4b15      	ldr	r3, [pc, #84]	; (800b9c0 <Send_Data_to_Other+0xa0>)
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	4b17      	ldr	r3, [pc, #92]	; (800b9cc <Send_Data_to_Other+0xac>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	429a      	cmp	r2, r3
 800b972:	d008      	beq.n	800b986 <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800b974:	4b12      	ldr	r3, [pc, #72]	; (800b9c0 <Send_Data_to_Other+0xa0>)
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	4a14      	ldr	r2, [pc, #80]	; (800b9cc <Send_Data_to_Other+0xac>)
 800b97a:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800b97c:	f240 2001 	movw	r0, #513	; 0x201
 800b980:	f005 fbc0 	bl	8011104 <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 800b984:	e01a      	b.n	800b9bc <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 800b986:	4b12      	ldr	r3, [pc, #72]	; (800b9d0 <Send_Data_to_Other+0xb0>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4618      	mov	r0, r3
 800b98c:	f004 fe06 	bl	801059c <HAL_Elaps_Ticks>
 800b990:	4603      	mov	r3, r0
 800b992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b996:	d911      	bls.n	800b9bc <Send_Data_to_Other+0x9c>
 800b998:	4b09      	ldr	r3, [pc, #36]	; (800b9c0 <Send_Data_to_Other+0xa0>)
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	4618      	mov	r0, r3
 800b99e:	f004 fdfd 	bl	801059c <HAL_Elaps_Ticks>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b9a8:	d908      	bls.n	800b9bc <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 800b9aa:	f00e f915 	bl	8019bd8 <HAL_GetTick>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	4a07      	ldr	r2, [pc, #28]	; (800b9d0 <Send_Data_to_Other+0xb0>)
 800b9b2:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_1_SELF_SHARING);
 800b9b4:	f240 2001 	movw	r0, #513	; 0x201
 800b9b8:	f005 fba4 	bl	8011104 <TransmitCanPkt>
}
 800b9bc:	bf00      	nop
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	20003df4 	.word	0x20003df4
 800b9c4:	20000504 	.word	0x20000504
 800b9c8:	20003e04 	.word	0x20003e04
 800b9cc:	20003fb8 	.word	0x20003fb8
 800b9d0:	20003fbc 	.word	0x20003fbc

0800b9d4 <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 800b9d4:	b5b0      	push	{r4, r5, r7, lr}
 800b9d6:	af00      	add	r7, sp, #0


	if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 800b9d8:	499a      	ldr	r1, [pc, #616]	; (800bc44 <Process_Data_from_Other+0x270>)
 800b9da:	489b      	ldr	r0, [pc, #620]	; (800bc48 <Process_Data_from_Other+0x274>)
 800b9dc:	f7f4 fc30 	bl	8000240 <strcmp>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f000 812b 	beq.w	800bc3e <Process_Data_from_Other+0x26a>
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 800b9e8:	4b98      	ldr	r3, [pc, #608]	; (800bc4c <Process_Data_from_Other+0x278>)
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	4b98      	ldr	r3, [pc, #608]	; (800bc50 <Process_Data_from_Other+0x27c>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d109      	bne.n	800ba08 <Process_Data_from_Other+0x34>
 800b9f4:	4b95      	ldr	r3, [pc, #596]	; (800bc4c <Process_Data_from_Other+0x278>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f004 fdcf 	bl	801059c <HAL_Elaps_Ticks>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba04:	f0c0 80e4 	bcc.w	800bbd0 <Process_Data_from_Other+0x1fc>
	{
		Prev_Receive_CLK = HAL_GetTick();
 800ba08:	f00e f8e6 	bl	8019bd8 <HAL_GetTick>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	4a8f      	ldr	r2, [pc, #572]	; (800bc4c <Process_Data_from_Other+0x278>)
 800ba10:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 800ba12:	4b90      	ldr	r3, [pc, #576]	; (800bc54 <Process_Data_from_Other+0x280>)
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d007      	beq.n	800ba2a <Process_Data_from_Other+0x56>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 800ba1a:	4b8f      	ldr	r3, [pc, #572]	; (800bc58 <Process_Data_from_Other+0x284>)
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	f043 0301 	orr.w	r3, r3, #1
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	4b8c      	ldr	r3, [pc, #560]	; (800bc58 <Process_Data_from_Other+0x284>)
 800ba26:	701a      	strb	r2, [r3, #0]
 800ba28:	e006      	b.n	800ba38 <Process_Data_from_Other+0x64>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 800ba2a:	4b8b      	ldr	r3, [pc, #556]	; (800bc58 <Process_Data_from_Other+0x284>)
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	f023 0301 	bic.w	r3, r3, #1
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	4b88      	ldr	r3, [pc, #544]	; (800bc58 <Process_Data_from_Other+0x284>)
 800ba36:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 800ba38:	4b88      	ldr	r3, [pc, #544]	; (800bc5c <Process_Data_from_Other+0x288>)
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d007      	beq.n	800ba50 <Process_Data_from_Other+0x7c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 800ba40:	4b85      	ldr	r3, [pc, #532]	; (800bc58 <Process_Data_from_Other+0x284>)
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	f043 0302 	orr.w	r3, r3, #2
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	4b83      	ldr	r3, [pc, #524]	; (800bc58 <Process_Data_from_Other+0x284>)
 800ba4c:	701a      	strb	r2, [r3, #0]
 800ba4e:	e006      	b.n	800ba5e <Process_Data_from_Other+0x8a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 800ba50:	4b81      	ldr	r3, [pc, #516]	; (800bc58 <Process_Data_from_Other+0x284>)
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	f023 0302 	bic.w	r3, r3, #2
 800ba58:	b2da      	uxtb	r2, r3
 800ba5a:	4b7f      	ldr	r3, [pc, #508]	; (800bc58 <Process_Data_from_Other+0x284>)
 800ba5c:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 800ba5e:	4b7e      	ldr	r3, [pc, #504]	; (800bc58 <Process_Data_from_Other+0x284>)
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	2b03      	cmp	r3, #3
 800ba64:	f200 809a 	bhi.w	800bb9c <Process_Data_from_Other+0x1c8>
 800ba68:	a201      	add	r2, pc, #4	; (adr r2, 800ba70 <Process_Data_from_Other+0x9c>)
 800ba6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6e:	bf00      	nop
 800ba70:	0800ba81 	.word	0x0800ba81
 800ba74:	0800bb11 	.word	0x0800bb11
 800ba78:	0800ba8f 	.word	0x0800ba8f
 800ba7c:	0800bb61 	.word	0x0800bb61
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800ba80:	4b74      	ldr	r3, [pc, #464]	; (800bc54 <Process_Data_from_Other+0x280>)
 800ba82:	785b      	ldrb	r3, [r3, #1]
 800ba84:	3301      	adds	r3, #1
 800ba86:	b2da      	uxtb	r2, r3
 800ba88:	4b72      	ldr	r3, [pc, #456]	; (800bc54 <Process_Data_from_Other+0x280>)
 800ba8a:	705a      	strb	r2, [r3, #1]
			break;
 800ba8c:	e086      	b.n	800bb9c <Process_Data_from_Other+0x1c8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800ba8e:	4b73      	ldr	r3, [pc, #460]	; (800bc5c <Process_Data_from_Other+0x288>)
 800ba90:	685a      	ldr	r2, [r3, #4]
 800ba92:	4b70      	ldr	r3, [pc, #448]	; (800bc54 <Process_Data_from_Other+0x280>)
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d02f      	beq.n	800bafa <Process_Data_from_Other+0x126>
			{
				if( (Received_CAN_Relay_Status == YES) )
 800ba9a:	4b71      	ldr	r3, [pc, #452]	; (800bc60 <Process_Data_from_Other+0x28c>)
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d179      	bne.n	800bb96 <Process_Data_from_Other+0x1c2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 800baa2:	4b6c      	ldr	r3, [pc, #432]	; (800bc54 <Process_Data_from_Other+0x280>)
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	4619      	mov	r1, r3
 800baa8:	486e      	ldr	r0, [pc, #440]	; (800bc64 <Process_Data_from_Other+0x290>)
 800baaa:	f01b f89f 	bl	8026bec <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 800baae:	4b6b      	ldr	r3, [pc, #428]	; (800bc5c <Process_Data_from_Other+0x288>)
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	4619      	mov	r1, r3
 800bab4:	486c      	ldr	r0, [pc, #432]	; (800bc68 <Process_Data_from_Other+0x294>)
 800bab6:	f01b f899 	bl	8026bec <iprintf>
					Received_CAN_Relay_Status=NO;
 800baba:	4b69      	ldr	r3, [pc, #420]	; (800bc60 <Process_Data_from_Other+0x28c>)
 800babc:	2200      	movs	r2, #0
 800babe:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 800bac0:	486a      	ldr	r0, [pc, #424]	; (800bc6c <Process_Data_from_Other+0x298>)
 800bac2:	f01b f92f 	bl	8026d24 <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 800bac6:	4a6a      	ldr	r2, [pc, #424]	; (800bc70 <Process_Data_from_Other+0x29c>)
 800bac8:	4b6a      	ldr	r3, [pc, #424]	; (800bc74 <Process_Data_from_Other+0x2a0>)
 800baca:	4610      	mov	r0, r2
 800bacc:	4619      	mov	r1, r3
 800bace:	2384      	movs	r3, #132	; 0x84
 800bad0:	461a      	mov	r2, r3
 800bad2:	f01a ff7b 	bl	80269cc <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 800bad6:	4a68      	ldr	r2, [pc, #416]	; (800bc78 <Process_Data_from_Other+0x2a4>)
 800bad8:	4b65      	ldr	r3, [pc, #404]	; (800bc70 <Process_Data_from_Other+0x29c>)
 800bada:	4614      	mov	r4, r2
 800badc:	461d      	mov	r5, r3
 800bade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800baea:	682b      	ldr	r3, [r5, #0]
 800baec:	8023      	strh	r3, [r4, #0]
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800baee:	4b60      	ldr	r3, [pc, #384]	; (800bc70 <Process_Data_from_Other+0x29c>)
 800baf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baf4:	4a57      	ldr	r2, [pc, #348]	; (800bc54 <Process_Data_from_Other+0x280>)
 800baf6:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800baf8:	e04d      	b.n	800bb96 <Process_Data_from_Other+0x1c2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800bafa:	4b56      	ldr	r3, [pc, #344]	; (800bc54 <Process_Data_from_Other+0x280>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bb00:	4b5e      	ldr	r3, [pc, #376]	; (800bc7c <Process_Data_from_Other+0x2a8>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	f023 0301 	bic.w	r3, r3, #1
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	4b5c      	ldr	r3, [pc, #368]	; (800bc7c <Process_Data_from_Other+0x2a8>)
 800bb0c:	701a      	strb	r2, [r3, #0]
			break;
 800bb0e:	e042      	b.n	800bb96 <Process_Data_from_Other+0x1c2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800bb10:	4b52      	ldr	r3, [pc, #328]	; (800bc5c <Process_Data_from_Other+0x288>)
 800bb12:	685a      	ldr	r2, [r3, #4]
 800bb14:	4b4f      	ldr	r3, [pc, #316]	; (800bc54 <Process_Data_from_Other+0x280>)
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d016      	beq.n	800bb4a <Process_Data_from_Other+0x176>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800bb1c:	4858      	ldr	r0, [pc, #352]	; (800bc80 <Process_Data_from_Other+0x2ac>)
 800bb1e:	f01b f901 	bl	8026d24 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800bb22:	4b4c      	ldr	r3, [pc, #304]	; (800bc54 <Process_Data_from_Other+0x280>)
 800bb24:	785b      	ldrb	r3, [r3, #1]
 800bb26:	3301      	adds	r3, #1
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	4b4a      	ldr	r3, [pc, #296]	; (800bc54 <Process_Data_from_Other+0x280>)
 800bb2c:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800bb2e:	4b49      	ldr	r3, [pc, #292]	; (800bc54 <Process_Data_from_Other+0x280>)
 800bb30:	785b      	ldrb	r3, [r3, #1]
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d931      	bls.n	800bb9a <Process_Data_from_Other+0x1c6>
 800bb36:	4b4e      	ldr	r3, [pc, #312]	; (800bc70 <Process_Data_from_Other+0x29c>)
 800bb38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d02c      	beq.n	800bb9a <Process_Data_from_Other+0x1c6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800bb40:	f240 2007 	movw	r0, #519	; 0x207
 800bb44:	f005 fade 	bl	8011104 <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800bb48:	e027      	b.n	800bb9a <Process_Data_from_Other+0x1c6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bb4a:	4b4c      	ldr	r3, [pc, #304]	; (800bc7c <Process_Data_from_Other+0x2a8>)
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	f023 0301 	bic.w	r3, r3, #1
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	4b49      	ldr	r3, [pc, #292]	; (800bc7c <Process_Data_from_Other+0x2a8>)
 800bb56:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800bb58:	4b3e      	ldr	r3, [pc, #248]	; (800bc54 <Process_Data_from_Other+0x280>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	705a      	strb	r2, [r3, #1]
			break;
 800bb5e:	e01c      	b.n	800bb9a <Process_Data_from_Other+0x1c6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800bb60:	4b3e      	ldr	r3, [pc, #248]	; (800bc5c <Process_Data_from_Other+0x288>)
 800bb62:	685a      	ldr	r2, [r3, #4]
 800bb64:	4b3b      	ldr	r3, [pc, #236]	; (800bc54 <Process_Data_from_Other+0x280>)
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d009      	beq.n	800bb80 <Process_Data_from_Other+0x1ac>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800bb6c:	4844      	ldr	r0, [pc, #272]	; (800bc80 <Process_Data_from_Other+0x2ac>)
 800bb6e:	f01b f8d9 	bl	8026d24 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800bb72:	4b38      	ldr	r3, [pc, #224]	; (800bc54 <Process_Data_from_Other+0x280>)
 800bb74:	785b      	ldrb	r3, [r3, #1]
 800bb76:	3301      	adds	r3, #1
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	4b36      	ldr	r3, [pc, #216]	; (800bc54 <Process_Data_from_Other+0x280>)
 800bb7c:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800bb7e:	e00d      	b.n	800bb9c <Process_Data_from_Other+0x1c8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bb80:	4b3e      	ldr	r3, [pc, #248]	; (800bc7c <Process_Data_from_Other+0x2a8>)
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	f023 0301 	bic.w	r3, r3, #1
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	4b3c      	ldr	r3, [pc, #240]	; (800bc7c <Process_Data_from_Other+0x2a8>)
 800bb8c:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800bb8e:	4b31      	ldr	r3, [pc, #196]	; (800bc54 <Process_Data_from_Other+0x280>)
 800bb90:	2200      	movs	r2, #0
 800bb92:	705a      	strb	r2, [r3, #1]
			break;
 800bb94:	e002      	b.n	800bb9c <Process_Data_from_Other+0x1c8>
			break;
 800bb96:	bf00      	nop
 800bb98:	e000      	b.n	800bb9c <Process_Data_from_Other+0x1c8>
			break;
 800bb9a:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800bb9c:	4b2d      	ldr	r3, [pc, #180]	; (800bc54 <Process_Data_from_Other+0x280>)
 800bb9e:	785a      	ldrb	r2, [r3, #1]
 800bba0:	4b38      	ldr	r3, [pc, #224]	; (800bc84 <Process_Data_from_Other+0x2b0>)
 800bba2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d312      	bcc.n	800bbd0 <Process_Data_from_Other+0x1fc>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == RESET)
 800bbaa:	4b34      	ldr	r3, [pc, #208]	; (800bc7c <Process_Data_from_Other+0x2a8>)
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	f003 0301 	and.w	r3, r3, #1
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10c      	bne.n	800bbd0 <Process_Data_from_Other+0x1fc>
			{
				printf("MisMatch Count Reached\n");
 800bbb6:	4834      	ldr	r0, [pc, #208]	; (800bc88 <Process_Data_from_Other+0x2b4>)
 800bbb8:	f01b f8b4 	bl	8026d24 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800bbbc:	4b25      	ldr	r3, [pc, #148]	; (800bc54 <Process_Data_from_Other+0x280>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bbc2:	4b2e      	ldr	r3, [pc, #184]	; (800bc7c <Process_Data_from_Other+0x2a8>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	f043 0301 	orr.w	r3, r3, #1
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	4b2b      	ldr	r3, [pc, #172]	; (800bc7c <Process_Data_from_Other+0x2a8>)
 800bbce:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800bbd0:	4b1f      	ldr	r3, [pc, #124]	; (800bc50 <Process_Data_from_Other+0x27c>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f004 fce1 	bl	801059c <HAL_Elaps_Ticks>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	4b29      	ldr	r3, [pc, #164]	; (800bc84 <Process_Data_from_Other+0x2b0>)
 800bbde:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d92c      	bls.n	800bc40 <Process_Data_from_Other+0x26c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800bbe6:	4b29      	ldr	r3, [pc, #164]	; (800bc8c <Process_Data_from_Other+0x2b8>)
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	4b19      	ldr	r3, [pc, #100]	; (800bc50 <Process_Data_from_Other+0x27c>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d026      	beq.n	800bc40 <Process_Data_from_Other+0x26c>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800bbf2:	4b17      	ldr	r3, [pc, #92]	; (800bc50 <Process_Data_from_Other+0x27c>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a25      	ldr	r2, [pc, #148]	; (800bc8c <Process_Data_from_Other+0x2b8>)
 800bbf8:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800bbfa:	4b15      	ldr	r3, [pc, #84]	; (800bc50 <Process_Data_from_Other+0x27c>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f004 fccc 	bl	801059c <HAL_Elaps_Ticks>
 800bc04:	4603      	mov	r3, r0
 800bc06:	4a22      	ldr	r2, [pc, #136]	; (800bc90 <Process_Data_from_Other+0x2bc>)
 800bc08:	fba2 2303 	umull	r2, r3, r2, r3
 800bc0c:	099b      	lsrs	r3, r3, #6
 800bc0e:	4619      	mov	r1, r3
 800bc10:	4820      	ldr	r0, [pc, #128]	; (800bc94 <Process_Data_from_Other+0x2c0>)
 800bc12:	f01a ffeb 	bl	8026bec <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800bc16:	4b0e      	ldr	r3, [pc, #56]	; (800bc50 <Process_Data_from_Other+0x27c>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	481e      	ldr	r0, [pc, #120]	; (800bc98 <Process_Data_from_Other+0x2c4>)
 800bc1e:	f01a ffe5 	bl	8026bec <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == RESET)
 800bc22:	4b16      	ldr	r3, [pc, #88]	; (800bc7c <Process_Data_from_Other+0x2a8>)
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	f003 0302 	and.w	r3, r3, #2
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d108      	bne.n	800bc40 <Process_Data_from_Other+0x26c>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bc2e:	4b13      	ldr	r3, [pc, #76]	; (800bc7c <Process_Data_from_Other+0x2a8>)
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	f043 0302 	orr.w	r3, r3, #2
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	4b10      	ldr	r3, [pc, #64]	; (800bc7c <Process_Data_from_Other+0x2a8>)
 800bc3a:	701a      	strb	r2, [r3, #0]
 800bc3c:	e000      	b.n	800bc40 <Process_Data_from_Other+0x26c>
		return;
 800bc3e:	bf00      	nop
			}
		}
	}
}
 800bc40:	bdb0      	pop	{r4, r5, r7, pc}
 800bc42:	bf00      	nop
 800bc44:	08029e10 	.word	0x08029e10
 800bc48:	20000505 	.word	0x20000505
 800bc4c:	20003fc0 	.word	0x20003fc0
 800bc50:	200038ac 	.word	0x200038ac
 800bc54:	20003e04 	.word	0x20003e04
 800bc58:	200038aa 	.word	0x200038aa
 800bc5c:	20003e0c 	.word	0x20003e0c
 800bc60:	200038a9 	.word	0x200038a9
 800bc64:	0802a1d8 	.word	0x0802a1d8
 800bc68:	0802a1f0 	.word	0x0802a1f0
 800bc6c:	0802a208 	.word	0x0802a208
 800bc70:	20003e1c 	.word	0x20003e1c
 800bc74:	20003ea0 	.word	0x20003ea0
 800bc78:	20003dc0 	.word	0x20003dc0
 800bc7c:	20003df4 	.word	0x20003df4
 800bc80:	0802a23c 	.word	0x0802a23c
 800bc84:	20000504 	.word	0x20000504
 800bc88:	0802a260 	.word	0x0802a260
 800bc8c:	20003fc4 	.word	0x20003fc4
 800bc90:	10624dd3 	.word	0x10624dd3
 800bc94:	0802a278 	.word	0x0802a278
 800bc98:	0802a2a8 	.word	0x0802a2a8

0800bc9c <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800bca0:	482a      	ldr	r0, [pc, #168]	; (800bd4c <Print_Medha_Self_Details+0xb0>)
 800bca2:	f01b f83f 	bl	8026d24 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800bca6:	4b2a      	ldr	r3, [pc, #168]	; (800bd50 <Print_Medha_Self_Details+0xb4>)
 800bca8:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800bcac:	4619      	mov	r1, r3
 800bcae:	4829      	ldr	r0, [pc, #164]	; (800bd54 <Print_Medha_Self_Details+0xb8>)
 800bcb0:	f01a ff9c 	bl	8026bec <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800bcb4:	4b26      	ldr	r3, [pc, #152]	; (800bd50 <Print_Medha_Self_Details+0xb4>)
 800bcb6:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800bcba:	4619      	mov	r1, r3
 800bcbc:	4826      	ldr	r0, [pc, #152]	; (800bd58 <Print_Medha_Self_Details+0xbc>)
 800bcbe:	f01a ff95 	bl	8026bec <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800bcc2:	4b23      	ldr	r3, [pc, #140]	; (800bd50 <Print_Medha_Self_Details+0xb4>)
 800bcc4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bcc8:	4619      	mov	r1, r3
 800bcca:	4824      	ldr	r0, [pc, #144]	; (800bd5c <Print_Medha_Self_Details+0xc0>)
 800bccc:	f01a ff8e 	bl	8026bec <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800bcd0:	4b1f      	ldr	r3, [pc, #124]	; (800bd50 <Print_Medha_Self_Details+0xb4>)
 800bcd2:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	4821      	ldr	r0, [pc, #132]	; (800bd60 <Print_Medha_Self_Details+0xc4>)
 800bcda:	f01a ff87 	bl	8026bec <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800bcde:	4b1c      	ldr	r3, [pc, #112]	; (800bd50 <Print_Medha_Self_Details+0xb4>)
 800bce0:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800bce4:	4619      	mov	r1, r3
 800bce6:	481f      	ldr	r0, [pc, #124]	; (800bd64 <Print_Medha_Self_Details+0xc8>)
 800bce8:	f01a ff80 	bl	8026bec <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800bcec:	4b18      	ldr	r3, [pc, #96]	; (800bd50 <Print_Medha_Self_Details+0xb4>)
 800bcee:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	481c      	ldr	r0, [pc, #112]	; (800bd68 <Print_Medha_Self_Details+0xcc>)
 800bcf6:	f01a ff79 	bl	8026bec <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800bcfa:	4b15      	ldr	r3, [pc, #84]	; (800bd50 <Print_Medha_Self_Details+0xb4>)
 800bcfc:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bd00:	4619      	mov	r1, r3
 800bd02:	481a      	ldr	r0, [pc, #104]	; (800bd6c <Print_Medha_Self_Details+0xd0>)
 800bd04:	f01a ff72 	bl	8026bec <iprintf>
	printf("NoofRelays                    :%lu\n",EI_data.Medha_Prms_st.NoofRelays);
 800bd08:	4b11      	ldr	r3, [pc, #68]	; (800bd50 <Print_Medha_Self_Details+0xb4>)
 800bd0a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800bd0e:	4619      	mov	r1, r3
 800bd10:	4817      	ldr	r0, [pc, #92]	; (800bd70 <Print_Medha_Self_Details+0xd4>)
 800bd12:	f01a ff6b 	bl	8026bec <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800bd16:	4b0e      	ldr	r3, [pc, #56]	; (800bd50 <Print_Medha_Self_Details+0xb4>)
 800bd18:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4815      	ldr	r0, [pc, #84]	; (800bd74 <Print_Medha_Self_Details+0xd8>)
 800bd20:	f01a ff64 	bl	8026bec <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800bd24:	4b0a      	ldr	r3, [pc, #40]	; (800bd50 <Print_Medha_Self_Details+0xb4>)
 800bd26:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	4812      	ldr	r0, [pc, #72]	; (800bd78 <Print_Medha_Self_Details+0xdc>)
 800bd2e:	f01a ff5d 	bl	8026bec <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800bd32:	4b07      	ldr	r3, [pc, #28]	; (800bd50 <Print_Medha_Self_Details+0xb4>)
 800bd34:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800bd38:	4619      	mov	r1, r3
 800bd3a:	4810      	ldr	r0, [pc, #64]	; (800bd7c <Print_Medha_Self_Details+0xe0>)
 800bd3c:	f01a ff56 	bl	8026bec <iprintf>


#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800bd40:	4802      	ldr	r0, [pc, #8]	; (800bd4c <Print_Medha_Self_Details+0xb0>)
 800bd42:	f01a ffef 	bl	8026d24 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 800bd46:	bf00      	nop
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	0802a2d0 	.word	0x0802a2d0
 800bd50:	20000504 	.word	0x20000504
 800bd54:	0802a324 	.word	0x0802a324
 800bd58:	0802a348 	.word	0x0802a348
 800bd5c:	0802a36c 	.word	0x0802a36c
 800bd60:	0802a390 	.word	0x0802a390
 800bd64:	0802a3b4 	.word	0x0802a3b4
 800bd68:	0802a3d8 	.word	0x0802a3d8
 800bd6c:	0802a3fc 	.word	0x0802a3fc
 800bd70:	0802a420 	.word	0x0802a420
 800bd74:	0802a444 	.word	0x0802a444
 800bd78:	0802a468 	.word	0x0802a468
 800bd7c:	0802a48c 	.word	0x0802a48c

0800bd80 <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b09a      	sub	sp, #104	; 0x68
 800bd84:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800bd86:	2300      	movs	r3, #0
 800bd88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800bd98:	2300      	movs	r3, #0
 800bd9a:	603b      	str	r3, [r7, #0]
 800bd9c:	1d3b      	adds	r3, r7, #4
 800bd9e:	2260      	movs	r2, #96	; 0x60
 800bda0:	2100      	movs	r1, #0
 800bda2:	4618      	mov	r0, r3
 800bda4:	f01a fe3a 	bl	8026a1c <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800bda8:	4bb9      	ldr	r3, [pc, #740]	; (800c090 <CheckforMedhaCMD+0x310>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f004 fbf5 	bl	801059c <HAL_Elaps_Ticks>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b09      	cmp	r3, #9
 800bdb6:	f240 81ad 	bls.w	800c114 <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800bdba:	e010      	b.n	800bdde <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	f00d fbe3 	bl	8019588 <Com_Get_Byte>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800bdc8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bdcc:	1c5a      	adds	r2, r3, #1
 800bdce:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800bdd2:	3368      	adds	r3, #104	; 0x68
 800bdd4:	443b      	add	r3, r7
 800bdd6:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800bdda:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800bdde:	2000      	movs	r0, #0
 800bde0:	f00d fb92 	bl	8019508 <Com_DataReady>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d1e8      	bne.n	800bdbc <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800bdea:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f000 8144 	beq.w	800c07c <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800bdf4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bdf8:	3368      	adds	r3, #104	; 0x68
 800bdfa:	443b      	add	r3, r7
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800be02:	463b      	mov	r3, r7
 800be04:	4619      	mov	r1, r3
 800be06:	48a3      	ldr	r0, [pc, #652]	; (800c094 <CheckforMedhaCMD+0x314>)
 800be08:	f01a fef0 	bl	8026bec <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800be0c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800be10:	463b      	mov	r3, r7
 800be12:	4611      	mov	r1, r2
 800be14:	4618      	mov	r0, r3
 800be16:	f000 fa0d 	bl	800c234 <Is_MedhaCommand_Valid>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b0c      	cmp	r3, #12
 800be1e:	f200 8129 	bhi.w	800c074 <CheckforMedhaCMD+0x2f4>
 800be22:	a201      	add	r2, pc, #4	; (adr r2, 800be28 <CheckforMedhaCMD+0xa8>)
 800be24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be28:	0800be5d 	.word	0x0800be5d
 800be2c:	0800be6b 	.word	0x0800be6b
 800be30:	0800becf 	.word	0x0800becf
 800be34:	0800bef1 	.word	0x0800bef1
 800be38:	0800bf19 	.word	0x0800bf19
 800be3c:	0800bf41 	.word	0x0800bf41
 800be40:	0800bf69 	.word	0x0800bf69
 800be44:	0800bf91 	.word	0x0800bf91
 800be48:	0800bfb9 	.word	0x0800bfb9
 800be4c:	0800bfe1 	.word	0x0800bfe1
 800be50:	0800c009 	.word	0x0800c009
 800be54:	0800c031 	.word	0x0800c031
 800be58:	0800c059 	.word	0x0800c059
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800be5c:	4b8e      	ldr	r3, [pc, #568]	; (800c098 <CheckforMedhaCMD+0x318>)
 800be5e:	2201      	movs	r2, #1
 800be60:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800be62:	488e      	ldr	r0, [pc, #568]	; (800c09c <CheckforMedhaCMD+0x31c>)
 800be64:	f01a ff5e 	bl	8026d24 <puts>
				break;
 800be68:	e109      	b.n	800c07e <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800be6a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800be6e:	3b01      	subs	r3, #1
 800be70:	3368      	adds	r3, #104	; 0x68
 800be72:	443b      	add	r3, r7
 800be74:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800be78:	3b30      	subs	r3, #48	; 0x30
 800be7a:	461a      	mov	r2, r3
 800be7c:	4988      	ldr	r1, [pc, #544]	; (800c0a0 <CheckforMedhaCMD+0x320>)
 800be7e:	4889      	ldr	r0, [pc, #548]	; (800c0a4 <CheckforMedhaCMD+0x324>)
 800be80:	f01a feb4 	bl	8026bec <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800be84:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800be88:	3b01      	subs	r3, #1
 800be8a:	3368      	adds	r3, #104	; 0x68
 800be8c:	443b      	add	r3, r7
 800be8e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800be92:	2b2f      	cmp	r3, #47	; 0x2f
 800be94:	d914      	bls.n	800bec0 <CheckforMedhaCMD+0x140>
 800be96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800be9a:	3b01      	subs	r3, #1
 800be9c:	3368      	adds	r3, #104	; 0x68
 800be9e:	443b      	add	r3, r7
 800bea0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bea4:	2b32      	cmp	r3, #50	; 0x32
 800bea6:	d80b      	bhi.n	800bec0 <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800bea8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800beac:	3b01      	subs	r3, #1
 800beae:	3368      	adds	r3, #104	; 0x68
 800beb0:	443b      	add	r3, r7
 800beb2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800beb6:	3b30      	subs	r3, #48	; 0x30
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	4b7b      	ldr	r3, [pc, #492]	; (800c0a8 <CheckforMedhaCMD+0x328>)
 800bebc:	701a      	strb	r2, [r3, #0]
 800bebe:	e002      	b.n	800bec6 <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800bec0:	487a      	ldr	r0, [pc, #488]	; (800c0ac <CheckforMedhaCMD+0x32c>)
 800bec2:	f01a ff2f 	bl	8026d24 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800bec6:	2301      	movs	r3, #1
 800bec8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800becc:	e0d7      	b.n	800c07e <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800bece:	4978      	ldr	r1, [pc, #480]	; (800c0b0 <CheckforMedhaCMD+0x330>)
 800bed0:	4878      	ldr	r0, [pc, #480]	; (800c0b4 <CheckforMedhaCMD+0x334>)
 800bed2:	f01a fe8b 	bl	8026bec <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800bed6:	4878      	ldr	r0, [pc, #480]	; (800c0b8 <CheckforMedhaCMD+0x338>)
 800bed8:	f01a ff24 	bl	8026d24 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bedc:	4b77      	ldr	r3, [pc, #476]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f043 0301 	orr.w	r3, r3, #1
 800bee4:	4a75      	ldr	r2, [pc, #468]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bee6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bee8:	2301      	movs	r3, #1
 800beea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800beee:	e0c6      	b.n	800c07e <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800bef0:	4973      	ldr	r1, [pc, #460]	; (800c0c0 <CheckforMedhaCMD+0x340>)
 800bef2:	4870      	ldr	r0, [pc, #448]	; (800c0b4 <CheckforMedhaCMD+0x334>)
 800bef4:	f01a fe7a 	bl	8026bec <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800bef8:	4872      	ldr	r0, [pc, #456]	; (800c0c4 <CheckforMedhaCMD+0x344>)
 800befa:	f01a ff13 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800befe:	4b6f      	ldr	r3, [pc, #444]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bf00:	2200      	movs	r2, #0
 800bf02:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bf04:	4b6d      	ldr	r3, [pc, #436]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f043 0302 	orr.w	r3, r3, #2
 800bf0c:	4a6b      	ldr	r2, [pc, #428]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bf0e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bf10:	2301      	movs	r3, #1
 800bf12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bf16:	e0b2      	b.n	800c07e <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800bf18:	496b      	ldr	r1, [pc, #428]	; (800c0c8 <CheckforMedhaCMD+0x348>)
 800bf1a:	4866      	ldr	r0, [pc, #408]	; (800c0b4 <CheckforMedhaCMD+0x334>)
 800bf1c:	f01a fe66 	bl	8026bec <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800bf20:	486a      	ldr	r0, [pc, #424]	; (800c0cc <CheckforMedhaCMD+0x34c>)
 800bf22:	f01a feff 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bf26:	4b65      	ldr	r3, [pc, #404]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bf2c:	4b63      	ldr	r3, [pc, #396]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f043 0304 	orr.w	r3, r3, #4
 800bf34:	4a61      	ldr	r2, [pc, #388]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bf36:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bf3e:	e09e      	b.n	800c07e <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800bf40:	4963      	ldr	r1, [pc, #396]	; (800c0d0 <CheckforMedhaCMD+0x350>)
 800bf42:	485c      	ldr	r0, [pc, #368]	; (800c0b4 <CheckforMedhaCMD+0x334>)
 800bf44:	f01a fe52 	bl	8026bec <iprintf>
				printf("INVALID_DES_PORT\n");
 800bf48:	4862      	ldr	r0, [pc, #392]	; (800c0d4 <CheckforMedhaCMD+0x354>)
 800bf4a:	f01a feeb 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bf4e:	4b5b      	ldr	r3, [pc, #364]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bf50:	2200      	movs	r2, #0
 800bf52:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bf54:	4b59      	ldr	r3, [pc, #356]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f043 0308 	orr.w	r3, r3, #8
 800bf5c:	4a57      	ldr	r2, [pc, #348]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bf5e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bf60:	2301      	movs	r3, #1
 800bf62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bf66:	e08a      	b.n	800c07e <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800bf68:	495b      	ldr	r1, [pc, #364]	; (800c0d8 <CheckforMedhaCMD+0x358>)
 800bf6a:	4852      	ldr	r0, [pc, #328]	; (800c0b4 <CheckforMedhaCMD+0x334>)
 800bf6c:	f01a fe3e 	bl	8026bec <iprintf>
				printf("INVALID_SRC_PORT\n");
 800bf70:	485a      	ldr	r0, [pc, #360]	; (800c0dc <CheckforMedhaCMD+0x35c>)
 800bf72:	f01a fed7 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bf76:	4b51      	ldr	r3, [pc, #324]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bf7c:	4b4f      	ldr	r3, [pc, #316]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f043 0310 	orr.w	r3, r3, #16
 800bf84:	4a4d      	ldr	r2, [pc, #308]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bf86:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bf8e:	e076      	b.n	800c07e <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800bf90:	4953      	ldr	r1, [pc, #332]	; (800c0e0 <CheckforMedhaCMD+0x360>)
 800bf92:	4848      	ldr	r0, [pc, #288]	; (800c0b4 <CheckforMedhaCMD+0x334>)
 800bf94:	f01a fe2a 	bl	8026bec <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800bf98:	4852      	ldr	r0, [pc, #328]	; (800c0e4 <CheckforMedhaCMD+0x364>)
 800bf9a:	f01a fec3 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bf9e:	4b47      	ldr	r3, [pc, #284]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bfa4:	4b45      	ldr	r3, [pc, #276]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f043 0320 	orr.w	r3, r3, #32
 800bfac:	4a43      	ldr	r2, [pc, #268]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bfae:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bfb6:	e062      	b.n	800c07e <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800bfb8:	494b      	ldr	r1, [pc, #300]	; (800c0e8 <CheckforMedhaCMD+0x368>)
 800bfba:	484c      	ldr	r0, [pc, #304]	; (800c0ec <CheckforMedhaCMD+0x36c>)
 800bfbc:	f01a fe16 	bl	8026bec <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800bfc0:	484b      	ldr	r0, [pc, #300]	; (800c0f0 <CheckforMedhaCMD+0x370>)
 800bfc2:	f01a feaf 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bfc6:	4b3d      	ldr	r3, [pc, #244]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bfcc:	4b3b      	ldr	r3, [pc, #236]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfd4:	4a39      	ldr	r2, [pc, #228]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bfd6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bfde:	e04e      	b.n	800c07e <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800bfe0:	4944      	ldr	r1, [pc, #272]	; (800c0f4 <CheckforMedhaCMD+0x374>)
 800bfe2:	4834      	ldr	r0, [pc, #208]	; (800c0b4 <CheckforMedhaCMD+0x334>)
 800bfe4:	f01a fe02 	bl	8026bec <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800bfe8:	4843      	ldr	r0, [pc, #268]	; (800c0f8 <CheckforMedhaCMD+0x378>)
 800bfea:	f01a fe9b 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bfee:	4b33      	ldr	r3, [pc, #204]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bff4:	4b31      	ldr	r3, [pc, #196]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bffc:	4a2f      	ldr	r2, [pc, #188]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800bffe:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c000:	2301      	movs	r3, #1
 800c002:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c006:	e03a      	b.n	800c07e <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800c008:	493c      	ldr	r1, [pc, #240]	; (800c0fc <CheckforMedhaCMD+0x37c>)
 800c00a:	482a      	ldr	r0, [pc, #168]	; (800c0b4 <CheckforMedhaCMD+0x334>)
 800c00c:	f01a fdee 	bl	8026bec <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800c010:	483b      	ldr	r0, [pc, #236]	; (800c100 <CheckforMedhaCMD+0x380>)
 800c012:	f01a fe87 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c016:	4b29      	ldr	r3, [pc, #164]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800c018:	2200      	movs	r2, #0
 800c01a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800c01c:	4b27      	ldr	r3, [pc, #156]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c024:	4a25      	ldr	r2, [pc, #148]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800c026:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c028:	2301      	movs	r3, #1
 800c02a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c02e:	e026      	b.n	800c07e <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800c030:	4934      	ldr	r1, [pc, #208]	; (800c104 <CheckforMedhaCMD+0x384>)
 800c032:	4820      	ldr	r0, [pc, #128]	; (800c0b4 <CheckforMedhaCMD+0x334>)
 800c034:	f01a fdda 	bl	8026bec <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800c038:	4833      	ldr	r0, [pc, #204]	; (800c108 <CheckforMedhaCMD+0x388>)
 800c03a:	f01a fe73 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c03e:	4b1f      	ldr	r3, [pc, #124]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800c040:	2200      	movs	r2, #0
 800c042:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800c044:	4b1d      	ldr	r3, [pc, #116]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c04c:	4a1b      	ldr	r2, [pc, #108]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800c04e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c050:	2301      	movs	r3, #1
 800c052:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c056:	e012      	b.n	800c07e <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800c058:	492c      	ldr	r1, [pc, #176]	; (800c10c <CheckforMedhaCMD+0x38c>)
 800c05a:	4816      	ldr	r0, [pc, #88]	; (800c0b4 <CheckforMedhaCMD+0x334>)
 800c05c:	f01a fdc6 	bl	8026bec <iprintf>
				printf("CLEAR ALL\n");
 800c060:	482b      	ldr	r0, [pc, #172]	; (800c110 <CheckforMedhaCMD+0x390>)
 800c062:	f01a fe5f 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c066:	4b15      	ldr	r3, [pc, #84]	; (800c0bc <CheckforMedhaCMD+0x33c>)
 800c068:	2200      	movs	r2, #0
 800c06a:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800c06c:	2301      	movs	r3, #1
 800c06e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c072:	e004      	b.n	800c07e <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800c074:	480d      	ldr	r0, [pc, #52]	; (800c0ac <CheckforMedhaCMD+0x32c>)
 800c076:	f01a fe55 	bl	8026d24 <puts>
 800c07a:	e000      	b.n	800c07e <CheckforMedhaCMD+0x2fe>
			}
		}
 800c07c:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800c07e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c082:	2b01      	cmp	r3, #1
 800c084:	d147      	bne.n	800c116 <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800c086:	f240 2005 	movw	r0, #517	; 0x205
 800c08a:	f005 f83b 	bl	8011104 <TransmitCanPkt>
 800c08e:	e042      	b.n	800c116 <CheckforMedhaCMD+0x396>
 800c090:	2000c080 	.word	0x2000c080
 800c094:	0802a4b0 	.word	0x0802a4b0
 800c098:	20000bba 	.word	0x20000bba
 800c09c:	0802a4c8 	.word	0x0802a4c8
 800c0a0:	200038e2 	.word	0x200038e2
 800c0a4:	0802a508 	.word	0x0802a508
 800c0a8:	20000bbb 	.word	0x20000bbb
 800c0ac:	0802a51c 	.word	0x0802a51c
 800c0b0:	20003914 	.word	0x20003914
 800c0b4:	0802a538 	.word	0x0802a538
 800c0b8:	0802a548 	.word	0x0802a548
 800c0bc:	20004c78 	.word	0x20004c78
 800c0c0:	20003946 	.word	0x20003946
 800c0c4:	0802a560 	.word	0x0802a560
 800c0c8:	20003978 	.word	0x20003978
 800c0cc:	0802a578 	.word	0x0802a578
 800c0d0:	200039aa 	.word	0x200039aa
 800c0d4:	0802a58c 	.word	0x0802a58c
 800c0d8:	200039dc 	.word	0x200039dc
 800c0dc:	0802a5a0 	.word	0x0802a5a0
 800c0e0:	20003a0e 	.word	0x20003a0e
 800c0e4:	0802a5b4 	.word	0x0802a5b4
 800c0e8:	20003a40 	.word	0x20003a40
 800c0ec:	0802a5d0 	.word	0x0802a5d0
 800c0f0:	0802a5e8 	.word	0x0802a5e8
 800c0f4:	20003a72 	.word	0x20003a72
 800c0f8:	0802a5fc 	.word	0x0802a5fc
 800c0fc:	20003aa4 	.word	0x20003aa4
 800c100:	0802a614 	.word	0x0802a614
 800c104:	20003ad6 	.word	0x20003ad6
 800c108:	0802a634 	.word	0x0802a634
 800c10c:	20003b08 	.word	0x20003b08
 800c110:	0802a654 	.word	0x0802a654
		return;
 800c114:	bf00      	nop
		}
	}
}
 800c116:	3768      	adds	r7, #104	; 0x68
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800c126:	79fb      	ldrb	r3, [r7, #7]
 800c128:	4a3d      	ldr	r2, [pc, #244]	; (800c220 <Update_MedhaCommands+0x104>)
 800c12a:	2132      	movs	r1, #50	; 0x32
 800c12c:	fb01 f303 	mul.w	r3, r1, r3
 800c130:	4413      	add	r3, r2
 800c132:	2224      	movs	r2, #36	; 0x24
 800c134:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800c136:	79fb      	ldrb	r3, [r7, #7]
 800c138:	4a39      	ldr	r2, [pc, #228]	; (800c220 <Update_MedhaCommands+0x104>)
 800c13a:	2132      	movs	r1, #50	; 0x32
 800c13c:	fb01 f303 	mul.w	r3, r1, r3
 800c140:	4413      	add	r3, r2
 800c142:	3301      	adds	r3, #1
 800c144:	2201      	movs	r2, #1
 800c146:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800c148:	79fb      	ldrb	r3, [r7, #7]
 800c14a:	4a35      	ldr	r2, [pc, #212]	; (800c220 <Update_MedhaCommands+0x104>)
 800c14c:	2132      	movs	r1, #50	; 0x32
 800c14e:	fb01 f303 	mul.w	r3, r1, r3
 800c152:	4413      	add	r3, r2
 800c154:	3302      	adds	r3, #2
 800c156:	2230      	movs	r2, #48	; 0x30
 800c158:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800c15a:	79fb      	ldrb	r3, [r7, #7]
 800c15c:	4a30      	ldr	r2, [pc, #192]	; (800c220 <Update_MedhaCommands+0x104>)
 800c15e:	2132      	movs	r1, #50	; 0x32
 800c160:	fb01 f303 	mul.w	r3, r1, r3
 800c164:	4413      	add	r3, r2
 800c166:	3303      	adds	r3, #3
 800c168:	2240      	movs	r2, #64	; 0x40
 800c16a:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800c16c:	79fb      	ldrb	r3, [r7, #7]
 800c16e:	4a2c      	ldr	r2, [pc, #176]	; (800c220 <Update_MedhaCommands+0x104>)
 800c170:	2132      	movs	r1, #50	; 0x32
 800c172:	fb01 f303 	mul.w	r3, r1, r3
 800c176:	4413      	add	r3, r2
 800c178:	3304      	adds	r3, #4
 800c17a:	22c0      	movs	r2, #192	; 0xc0
 800c17c:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800c17e:	79fb      	ldrb	r3, [r7, #7]
 800c180:	4a27      	ldr	r2, [pc, #156]	; (800c220 <Update_MedhaCommands+0x104>)
 800c182:	2132      	movs	r1, #50	; 0x32
 800c184:	fb01 f303 	mul.w	r3, r1, r3
 800c188:	4413      	add	r3, r2
 800c18a:	3305      	adds	r3, #5
 800c18c:	224e      	movs	r2, #78	; 0x4e
 800c18e:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800c190:	79fb      	ldrb	r3, [r7, #7]
 800c192:	4a23      	ldr	r2, [pc, #140]	; (800c220 <Update_MedhaCommands+0x104>)
 800c194:	2132      	movs	r1, #50	; 0x32
 800c196:	fb01 f303 	mul.w	r3, r1, r3
 800c19a:	4413      	add	r3, r2
 800c19c:	3306      	adds	r3, #6
 800c19e:	2226      	movs	r2, #38	; 0x26
 800c1a0:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800c1a2:	79fb      	ldrb	r3, [r7, #7]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800c1a8:	79fb      	ldrb	r3, [r7, #7]
 800c1aa:	1c5a      	adds	r2, r3, #1
 800c1ac:	71fa      	strb	r2, [r7, #7]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	2332      	movs	r3, #50	; 0x32
 800c1b2:	fb02 f303 	mul.w	r3, r2, r3
 800c1b6:	4a1a      	ldr	r2, [pc, #104]	; (800c220 <Update_MedhaCommands+0x104>)
 800c1b8:	4413      	add	r3, r2
 800c1ba:	491a      	ldr	r1, [pc, #104]	; (800c224 <Update_MedhaCommands+0x108>)
 800c1bc:	461a      	mov	r2, r3
 800c1be:	460b      	mov	r3, r1
 800c1c0:	cb03      	ldmia	r3!, {r0, r1}
 800c1c2:	6010      	str	r0, [r2, #0]
 800c1c4:	6051      	str	r1, [r2, #4]
 800c1c6:	8819      	ldrh	r1, [r3, #0]
 800c1c8:	789b      	ldrb	r3, [r3, #2]
 800c1ca:	8111      	strh	r1, [r2, #8]
 800c1cc:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800c1ce:	79fb      	ldrb	r3, [r7, #7]
 800c1d0:	1c5a      	adds	r2, r3, #1
 800c1d2:	71fa      	strb	r2, [r7, #7]
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	2332      	movs	r3, #50	; 0x32
 800c1d8:	fb02 f303 	mul.w	r3, r2, r3
 800c1dc:	4a10      	ldr	r2, [pc, #64]	; (800c220 <Update_MedhaCommands+0x104>)
 800c1de:	4413      	add	r3, r2
 800c1e0:	4911      	ldr	r1, [pc, #68]	; (800c228 <Update_MedhaCommands+0x10c>)
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	cb03      	ldmia	r3!, {r0, r1}
 800c1e8:	6010      	str	r0, [r2, #0]
 800c1ea:	6051      	str	r1, [r2, #4]
 800c1ec:	881b      	ldrh	r3, [r3, #0]
 800c1ee:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800c1f0:	79fb      	ldrb	r3, [r7, #7]
 800c1f2:	1c5a      	adds	r2, r3, #1
 800c1f4:	71fa      	strb	r2, [r7, #7]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	2332      	movs	r3, #50	; 0x32
 800c1fa:	fb02 f303 	mul.w	r3, r2, r3
 800c1fe:	4a08      	ldr	r2, [pc, #32]	; (800c220 <Update_MedhaCommands+0x104>)
 800c200:	4413      	add	r3, r2
 800c202:	4a0a      	ldr	r2, [pc, #40]	; (800c22c <Update_MedhaCommands+0x110>)
 800c204:	6810      	ldr	r0, [r2, #0]
 800c206:	6018      	str	r0, [r3, #0]
 800c208:	7912      	ldrb	r2, [r2, #4]
 800c20a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800c20c:	4a08      	ldr	r2, [pc, #32]	; (800c230 <Update_MedhaCommands+0x114>)
 800c20e:	79fb      	ldrb	r3, [r7, #7]
 800c210:	7013      	strb	r3, [r2, #0]
}
 800c212:	bf00      	nop
 800c214:	370c      	adds	r7, #12
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	200038b0 	.word	0x200038b0
 800c224:	0802a660 	.word	0x0802a660
 800c228:	0802a66c 	.word	0x0802a66c
 800c22c:	0802a678 	.word	0x0802a678
 800c230:	20003c98 	.word	0x20003c98

0800c234 <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800c234:	b590      	push	{r4, r7, lr}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	460b      	mov	r3, r1
 800c23e:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800c240:	2300      	movs	r3, #0
 800c242:	73fb      	strb	r3, [r7, #15]
 800c244:	e01c      	b.n	800c280 <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800c246:	7bfb      	ldrb	r3, [r7, #15]
 800c248:	2232      	movs	r2, #50	; 0x32
 800c24a:	fb02 f303 	mul.w	r3, r2, r3
 800c24e:	4a11      	ldr	r2, [pc, #68]	; (800c294 <Is_MedhaCommand_Valid+0x60>)
 800c250:	189c      	adds	r4, r3, r2
 800c252:	7bfb      	ldrb	r3, [r7, #15]
 800c254:	2232      	movs	r2, #50	; 0x32
 800c256:	fb02 f303 	mul.w	r3, r2, r3
 800c25a:	4a0e      	ldr	r2, [pc, #56]	; (800c294 <Is_MedhaCommand_Valid+0x60>)
 800c25c:	4413      	add	r3, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f7f3 fff8 	bl	8000254 <strlen>
 800c264:	4603      	mov	r3, r0
 800c266:	461a      	mov	r2, r3
 800c268:	4621      	mov	r1, r4
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f01a fb9e 	bl	80269ac <memcmp>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d101      	bne.n	800c27a <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	e008      	b.n	800c28c <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
 800c27c:	3301      	adds	r3, #1
 800c27e:	73fb      	strb	r3, [r7, #15]
 800c280:	4b05      	ldr	r3, [pc, #20]	; (800c298 <Is_MedhaCommand_Valid+0x64>)
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	7bfa      	ldrb	r2, [r7, #15]
 800c286:	429a      	cmp	r2, r3
 800c288:	d3dd      	bcc.n	800c246 <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800c28a:	23ff      	movs	r3, #255	; 0xff
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3714      	adds	r7, #20
 800c290:	46bd      	mov	sp, r7
 800c292:	bd90      	pop	{r4, r7, pc}
 800c294:	200038b0 	.word	0x200038b0
 800c298:	20003c98 	.word	0x20003c98

0800c29c <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b087      	sub	sp, #28
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	6039      	str	r1, [r7, #0]
 800c2a6:	80fb      	strh	r3, [r7, #6]
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	60fb      	str	r3, [r7, #12]

	//	printf("\nstart cRc us_Start=%d end =%d\n",us_Start,us_End);
	for(i = us_Start ;i < us_End;i++)
 800c2b8:	88fb      	ldrh	r3, [r7, #6]
 800c2ba:	613b      	str	r3, [r7, #16]
 800c2bc:	e015      	b.n	800c2ea <GetCRC32+0x4e>
	{
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	440b      	add	r3, r1
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	4053      	eors	r3, r2
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	0a1b      	lsrs	r3, r3, #8
 800c2d4:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800c2d6:	4a0a      	ldr	r2, [pc, #40]	; (800c300 <GetCRC32+0x64>)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	4053      	eors	r3, r2
 800c2e2:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	613b      	str	r3, [r7, #16]
 800c2ea:	88bb      	ldrh	r3, [r7, #4]
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d3e5      	bcc.n	800c2be <GetCRC32+0x22>
	}

	return Crc;
 800c2f2:	697b      	ldr	r3, [r7, #20]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	371c      	adds	r7, #28
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr
 800c300:	0802dbc0 	.word	0x0802dbc0

0800c304 <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	4603      	mov	r3, r0
 800c30c:	6039      	str	r1, [r7, #0]
 800c30e:	80fb      	strh	r3, [r7, #6]
 800c310:	4613      	mov	r3, r2
 800c312:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800c314:	2300      	movs	r3, #0
 800c316:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800c318:	2300      	movs	r3, #0
 800c31a:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800c31c:	88ba      	ldrh	r2, [r7, #4]
 800c31e:	88fb      	ldrh	r3, [r7, #6]
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	4618      	mov	r0, r3
 800c324:	f7ff ffba 	bl	800c29c <GetCRC32>
 800c328:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800c32a:	88bb      	ldrh	r3, [r7, #4]
 800c32c:	683a      	ldr	r2, [r7, #0]
 800c32e:	4413      	add	r3, r2
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d101      	bne.n	800c340 <CheckCRC32+0x3c>
	{
		return OK;
 800c33c:	2301      	movs	r3, #1
 800c33e:	e009      	b.n	800c354 <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	4619      	mov	r1, r3
 800c344:	4805      	ldr	r0, [pc, #20]	; (800c35c <CheckCRC32+0x58>)
 800c346:	f01a fc51 	bl	8026bec <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800c34a:	68f9      	ldr	r1, [r7, #12]
 800c34c:	4804      	ldr	r0, [pc, #16]	; (800c360 <CheckCRC32+0x5c>)
 800c34e:	f01a fc4d 	bl	8026bec <iprintf>
		return NOT_OK;
 800c352:	2300      	movs	r3, #0
	}

}
 800c354:	4618      	mov	r0, r3
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	0802a680 	.word	0x0802a680
 800c360:	0802a698 	.word	0x0802a698

0800c364 <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b086      	sub	sp, #24
 800c368:	af00      	add	r7, sp, #0
 800c36a:	4603      	mov	r3, r0
 800c36c:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800c36e:	2300      	movs	r3, #0
 800c370:	60fb      	str	r3, [r7, #12]
 800c372:	f107 0310 	add.w	r3, r7, #16
 800c376:	2200      	movs	r2, #0
 800c378:	601a      	str	r2, [r3, #0]
 800c37a:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800c37c:	79fb      	ldrb	r3, [r7, #7]
 800c37e:	b29b      	uxth	r3, r3
 800c380:	f107 010c 	add.w	r1, r7, #12
 800c384:	220a      	movs	r2, #10
 800c386:	4618      	mov	r0, r3
 800c388:	f000 f846 	bl	800c418 <ReadAndFormMsg>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	dd34      	ble.n	800c3fc <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800c392:	7b7b      	ldrb	r3, [r7, #13]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d115      	bne.n	800c3c4 <CheckForRqst+0x60>
 800c398:	7bbb      	ldrb	r3, [r7, #14]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d112      	bne.n	800c3c4 <CheckForRqst+0x60>
 800c39e:	7bfb      	ldrb	r3, [r7, #15]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d10f      	bne.n	800c3c4 <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800c3a4:	4818      	ldr	r0, [pc, #96]	; (800c408 <CheckForRqst+0xa4>)
 800c3a6:	f01a fcbd 	bl	8026d24 <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800c3aa:	79fb      	ldrb	r3, [r7, #7]
 800c3ac:	2202      	movs	r2, #2
 800c3ae:	2101      	movs	r1, #1
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f000 f933 	bl	800c61c <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800c3b6:	f00d fc0f 	bl	8019bd8 <HAL_GetTick>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	4a13      	ldr	r2, [pc, #76]	; (800c40c <CheckForRqst+0xa8>)
 800c3be:	6013      	str	r3, [r2, #0]
			return 0x01;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e01c      	b.n	800c3fe <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800c3c4:	7b7b      	ldrb	r3, [r7, #13]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d115      	bne.n	800c3f6 <CheckForRqst+0x92>
 800c3ca:	7bbb      	ldrb	r3, [r7, #14]
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d112      	bne.n	800c3f6 <CheckForRqst+0x92>
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d10f      	bne.n	800c3f6 <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800c3d6:	480e      	ldr	r0, [pc, #56]	; (800c410 <CheckForRqst+0xac>)
 800c3d8:	f01a fca4 	bl	8026d24 <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800c3dc:	79fb      	ldrb	r3, [r7, #7]
 800c3de:	2202      	movs	r2, #2
 800c3e0:	2102      	movs	r1, #2
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f000 f91a 	bl	800c61c <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800c3e8:	f00d fbf6 	bl	8019bd8 <HAL_GetTick>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	4a07      	ldr	r2, [pc, #28]	; (800c40c <CheckForRqst+0xa8>)
 800c3f0:	6013      	str	r3, [r2, #0]
			return 0x02;
 800c3f2:	2302      	movs	r3, #2
 800c3f4:	e003      	b.n	800c3fe <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800c3f6:	4807      	ldr	r0, [pc, #28]	; (800c414 <CheckForRqst+0xb0>)
 800c3f8:	f01a fc94 	bl	8026d24 <puts>
	}
	return 0x00;
 800c3fc:	2300      	movs	r3, #0
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3718      	adds	r7, #24
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	0802a6b0 	.word	0x0802a6b0
 800c40c:	20000fc0 	.word	0x20000fc0
 800c410:	0802a6c8 	.word	0x0802a6c8
 800c414:	0802a6e0 	.word	0x0802a6e0

0800c418 <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800c418:	b590      	push	{r4, r7, lr}
 800c41a:	b087      	sub	sp, #28
 800c41c:	af02      	add	r7, sp, #8
 800c41e:	4603      	mov	r3, r0
 800c420:	6039      	str	r1, [r7, #0]
 800c422:	80fb      	strh	r3, [r7, #6]
 800c424:	4613      	mov	r3, r2
 800c426:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800c428:	2300      	movs	r3, #0
 800c42a:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800c42c:	2300      	movs	r3, #0
 800c42e:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800c430:	2300      	movs	r3, #0
 800c432:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800c434:	e0d4      	b.n	800c5e0 <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800c436:	4b71      	ldr	r3, [pc, #452]	; (800c5fc <ReadAndFormMsg+0x1e4>)
 800c438:	2201      	movs	r2, #1
 800c43a:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800c43c:	4870      	ldr	r0, [pc, #448]	; (800c600 <ReadAndFormMsg+0x1e8>)
 800c43e:	f010 ff31 	bl	801d2a4 <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800c442:	88fb      	ldrh	r3, [r7, #6]
 800c444:	b2db      	uxtb	r3, r3
 800c446:	4618      	mov	r0, r3
 800c448:	f00d f89e 	bl	8019588 <Com_Get_Byte>
 800c44c:	4603      	mov	r3, r0
 800c44e:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800c450:	f00d f9b0 	bl	80197b4 <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800c454:	4b6b      	ldr	r3, [pc, #428]	; (800c604 <ReadAndFormMsg+0x1ec>)
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	2b03      	cmp	r3, #3
 800c45a:	f000 8099 	beq.w	800c590 <ReadAndFormMsg+0x178>
 800c45e:	2b03      	cmp	r3, #3
 800c460:	f300 80b0 	bgt.w	800c5c4 <ReadAndFormMsg+0x1ac>
 800c464:	2b01      	cmp	r3, #1
 800c466:	d002      	beq.n	800c46e <ReadAndFormMsg+0x56>
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d00e      	beq.n	800c48a <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800c46c:	e0aa      	b.n	800c5c4 <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800c46e:	7bfb      	ldrb	r3, [r7, #15]
 800c470:	2b24      	cmp	r3, #36	; 0x24
 800c472:	f040 80a9 	bne.w	800c5c8 <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	7bfa      	ldrb	r2, [r7, #15]
 800c47a:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800c47c:	4b62      	ldr	r3, [pc, #392]	; (800c608 <ReadAndFormMsg+0x1f0>)
 800c47e:	2201      	movs	r2, #1
 800c480:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c482:	4b60      	ldr	r3, [pc, #384]	; (800c604 <ReadAndFormMsg+0x1ec>)
 800c484:	2202      	movs	r2, #2
 800c486:	701a      	strb	r2, [r3, #0]
			break;
 800c488:	e09e      	b.n	800c5c8 <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800c48a:	7bfb      	ldrb	r3, [r7, #15]
 800c48c:	2b26      	cmp	r3, #38	; 0x26
 800c48e:	d006      	beq.n	800c49e <ReadAndFormMsg+0x86>
 800c490:	2b26      	cmp	r3, #38	; 0x26
 800c492:	dc6e      	bgt.n	800c572 <ReadAndFormMsg+0x15a>
 800c494:	2b05      	cmp	r3, #5
 800c496:	d068      	beq.n	800c56a <ReadAndFormMsg+0x152>
 800c498:	2b24      	cmp	r3, #36	; 0x24
 800c49a:	d05c      	beq.n	800c556 <ReadAndFormMsg+0x13e>
 800c49c:	e069      	b.n	800c572 <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800c49e:	4b5a      	ldr	r3, [pc, #360]	; (800c608 <ReadAndFormMsg+0x1f0>)
 800c4a0:	881b      	ldrh	r3, [r3, #0]
 800c4a2:	3b02      	subs	r3, #2
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800c4a8:	4b57      	ldr	r3, [pc, #348]	; (800c608 <ReadAndFormMsg+0x1f0>)
 800c4aa:	881b      	ldrh	r3, [r3, #0]
 800c4ac:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800c4ae:	4b56      	ldr	r3, [pc, #344]	; (800c608 <ReadAndFormMsg+0x1f0>)
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800c4b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	da01      	bge.n	800c4c0 <ReadAndFormMsg+0xa8>
					return 0;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	e099      	b.n	800c5f4 <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800c4c0:	4b50      	ldr	r3, [pc, #320]	; (800c604 <ReadAndFormMsg+0x1ec>)
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c4c6:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800c4ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c4d4:	461c      	mov	r4, r3
 800c4d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c4da:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800c4dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	683a      	ldr	r2, [r7, #0]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c4e8:	9300      	str	r3, [sp, #0]
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	4622      	mov	r2, r4
 800c4ee:	4847      	ldr	r0, [pc, #284]	; (800c60c <ReadAndFormMsg+0x1f4>)
 800c4f0:	f01a fb7c 	bl	8026bec <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800c4f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	6838      	ldr	r0, [r7, #0]
 800c4fc:	f009 fcd0 	bl	8015ea0 <CheckCRC>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d012      	beq.n	800c52c <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c506:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	4413      	add	r3, r2
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	4619      	mov	r1, r3
 800c512:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c516:	3301      	adds	r3, #1
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	4413      	add	r3, r2
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	461a      	mov	r2, r3
 800c520:	483b      	ldr	r0, [pc, #236]	; (800c610 <ReadAndFormMsg+0x1f8>)
 800c522:	f01a fb63 	bl	8026bec <iprintf>
					return us_ReturnBytes;
 800c526:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c52a:	e063      	b.n	800c5f4 <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800c52c:	4839      	ldr	r0, [pc, #228]	; (800c614 <ReadAndFormMsg+0x1fc>)
 800c52e:	f01a fb5d 	bl	8026bec <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c532:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c536:	683a      	ldr	r2, [r7, #0]
 800c538:	4413      	add	r3, r2
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	4619      	mov	r1, r3
 800c53e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c542:	3301      	adds	r3, #1
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	4413      	add	r3, r2
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	461a      	mov	r2, r3
 800c54c:	4832      	ldr	r0, [pc, #200]	; (800c618 <ReadAndFormMsg+0x200>)
 800c54e:	f01a fb4d 	bl	8026bec <iprintf>
					return 0;
 800c552:	2300      	movs	r3, #0
 800c554:	e04e      	b.n	800c5f4 <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	7bfa      	ldrb	r2, [r7, #15]
 800c55a:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800c55c:	4b2a      	ldr	r3, [pc, #168]	; (800c608 <ReadAndFormMsg+0x1f0>)
 800c55e:	2201      	movs	r2, #1
 800c560:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c562:	4b28      	ldr	r3, [pc, #160]	; (800c604 <ReadAndFormMsg+0x1ec>)
 800c564:	2202      	movs	r2, #2
 800c566:	701a      	strb	r2, [r3, #0]
				break;
 800c568:	e011      	b.n	800c58e <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800c56a:	4b26      	ldr	r3, [pc, #152]	; (800c604 <ReadAndFormMsg+0x1ec>)
 800c56c:	2203      	movs	r2, #3
 800c56e:	701a      	strb	r2, [r3, #0]
				break;
 800c570:	e00d      	b.n	800c58e <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800c572:	4b25      	ldr	r3, [pc, #148]	; (800c608 <ReadAndFormMsg+0x1f0>)
 800c574:	881b      	ldrh	r3, [r3, #0]
 800c576:	461a      	mov	r2, r3
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	4413      	add	r3, r2
 800c57c:	7bfa      	ldrb	r2, [r7, #15]
 800c57e:	701a      	strb	r2, [r3, #0]
				j++;
 800c580:	4b21      	ldr	r3, [pc, #132]	; (800c608 <ReadAndFormMsg+0x1f0>)
 800c582:	881b      	ldrh	r3, [r3, #0]
 800c584:	3301      	adds	r3, #1
 800c586:	b29a      	uxth	r2, r3
 800c588:	4b1f      	ldr	r3, [pc, #124]	; (800c608 <ReadAndFormMsg+0x1f0>)
 800c58a:	801a      	strh	r2, [r3, #0]
				break;
 800c58c:	bf00      	nop
			break;
 800c58e:	e01c      	b.n	800c5ca <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800c590:	7bfb      	ldrb	r3, [r7, #15]
 800c592:	2b24      	cmp	r3, #36	; 0x24
 800c594:	d005      	beq.n	800c5a2 <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800c596:	7bfb      	ldrb	r3, [r7, #15]
 800c598:	2b26      	cmp	r3, #38	; 0x26
 800c59a:	d002      	beq.n	800c5a2 <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	2b05      	cmp	r3, #5
 800c5a0:	d10c      	bne.n	800c5bc <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800c5a2:	4b19      	ldr	r3, [pc, #100]	; (800c608 <ReadAndFormMsg+0x1f0>)
 800c5a4:	881b      	ldrh	r3, [r3, #0]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	7bfa      	ldrb	r2, [r7, #15]
 800c5ae:	701a      	strb	r2, [r3, #0]
					j++;
 800c5b0:	4b15      	ldr	r3, [pc, #84]	; (800c608 <ReadAndFormMsg+0x1f0>)
 800c5b2:	881b      	ldrh	r3, [r3, #0]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	b29a      	uxth	r2, r3
 800c5b8:	4b13      	ldr	r3, [pc, #76]	; (800c608 <ReadAndFormMsg+0x1f0>)
 800c5ba:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c5bc:	4b11      	ldr	r3, [pc, #68]	; (800c604 <ReadAndFormMsg+0x1ec>)
 800c5be:	2202      	movs	r2, #2
 800c5c0:	701a      	strb	r2, [r3, #0]
				break;
 800c5c2:	e002      	b.n	800c5ca <ReadAndFormMsg+0x1b2>
				break;
 800c5c4:	bf00      	nop
 800c5c6:	e000      	b.n	800c5ca <ReadAndFormMsg+0x1b2>
			break;
 800c5c8:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800c5ca:	4b0f      	ldr	r3, [pc, #60]	; (800c608 <ReadAndFormMsg+0x1f0>)
 800c5cc:	881b      	ldrh	r3, [r3, #0]
 800c5ce:	88ba      	ldrh	r2, [r7, #4]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d805      	bhi.n	800c5e0 <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800c5d4:	4b0b      	ldr	r3, [pc, #44]	; (800c604 <ReadAndFormMsg+0x1ec>)
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800c5da:	4b0b      	ldr	r3, [pc, #44]	; (800c608 <ReadAndFormMsg+0x1f0>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800c5e0:	88fb      	ldrh	r3, [r7, #6]
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f00c ff8f 	bl	8019508 <Com_DataReady>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f47f af22 	bne.w	800c436 <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd90      	pop	{r4, r7, pc}
 800c5fc:	20000fbe 	.word	0x20000fbe
 800c600:	2000b478 	.word	0x2000b478
 800c604:	20000317 	.word	0x20000317
 800c608:	20003fc8 	.word	0x20003fc8
 800c60c:	0802a6f0 	.word	0x0802a6f0
 800c610:	0802a718 	.word	0x0802a718
 800c614:	0802a72c 	.word	0x0802a72c
 800c618:	0802a738 	.word	0x0802a738

0800c61c <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b086      	sub	sp, #24
 800c620:	af00      	add	r7, sp, #0
 800c622:	4603      	mov	r3, r0
 800c624:	71fb      	strb	r3, [r7, #7]
 800c626:	460b      	mov	r3, r1
 800c628:	71bb      	strb	r3, [r7, #6]
 800c62a:	4613      	mov	r3, r2
 800c62c:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800c62e:	2300      	movs	r3, #0
 800c630:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800c632:	2300      	movs	r3, #0
 800c634:	60bb      	str	r3, [r7, #8]
 800c636:	f107 030c 	add.w	r3, r7, #12
 800c63a:	2200      	movs	r2, #0
 800c63c:	601a      	str	r2, [r3, #0]
 800c63e:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800c640:	2324      	movs	r3, #36	; 0x24
 800c642:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800c644:	79bb      	ldrb	r3, [r7, #6]
 800c646:	121b      	asrs	r3, r3, #8
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800c64c:	79bb      	ldrb	r3, [r7, #6]
 800c64e:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800c650:	797b      	ldrb	r3, [r7, #5]
 800c652:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800c654:	f107 0308 	add.w	r3, r7, #8
 800c658:	2104      	movs	r1, #4
 800c65a:	4618      	mov	r0, r3
 800c65c:	f009 fcca 	bl	8015ff4 <ComputeCRC>
	puc_Message[6]= '&';
 800c660:	2326      	movs	r3, #38	; 0x26
 800c662:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800c664:	7b3b      	ldrb	r3, [r7, #12]
 800c666:	4619      	mov	r1, r3
 800c668:	7b7b      	ldrb	r3, [r7, #13]
 800c66a:	461a      	mov	r2, r3
 800c66c:	480f      	ldr	r0, [pc, #60]	; (800c6ac <SendAck+0x90>)
 800c66e:	f01a fabd 	bl	8026bec <iprintf>

	AckTim=HAL_GetTick();
 800c672:	f00d fab1 	bl	8019bd8 <HAL_GetTick>
 800c676:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800c678:	e002      	b.n	800c680 <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800c67a:	480d      	ldr	r0, [pc, #52]	; (800c6b0 <SendAck+0x94>)
 800c67c:	f010 fe12 	bl	801d2a4 <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800c680:	6978      	ldr	r0, [r7, #20]
 800c682:	f003 ff8b 	bl	801059c <HAL_Elaps_Ticks>
 800c686:	4603      	mov	r3, r0
 800c688:	f240 52db 	movw	r2, #1499	; 0x5db
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d9f4      	bls.n	800c67a <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800c690:	f107 0108 	add.w	r1, r7, #8
 800c694:	79fb      	ldrb	r3, [r7, #7]
 800c696:	2206      	movs	r2, #6
 800c698:	4618      	mov	r0, r3
 800c69a:	f00c fff5 	bl	8019688 <CommTransmitMessage>

	AckTim = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	617b      	str	r3, [r7, #20]
}
 800c6a2:	bf00      	nop
 800c6a4:	3718      	adds	r7, #24
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	0802a744 	.word	0x0802a744
 800c6b0:	2000b478 	.word	0x2000b478

0800c6b4 <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	6039      	str	r1, [r7, #0]
 800c6be:	80fb      	strh	r3, [r7, #6]
 800c6c0:	4613      	mov	r3, r2
 800c6c2:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800c6d0:	e0ba      	b.n	800c848 <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800c6d2:	88fb      	ldrh	r3, [r7, #6]
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f00c ff56 	bl	8019588 <Com_Get_Byte>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800c6e0:	f00d f868 	bl	80197b4 <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800c6e4:	485f      	ldr	r0, [pc, #380]	; (800c864 <ReadAndFormConfig+0x1b0>)
 800c6e6:	f010 fddd 	bl	801d2a4 <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800c6ea:	4b5f      	ldr	r3, [pc, #380]	; (800c868 <ReadAndFormConfig+0x1b4>)
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	2b03      	cmp	r3, #3
 800c6f0:	f000 8082 	beq.w	800c7f8 <ReadAndFormConfig+0x144>
 800c6f4:	2b03      	cmp	r3, #3
 800c6f6:	f300 8099 	bgt.w	800c82c <ReadAndFormConfig+0x178>
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d002      	beq.n	800c704 <ReadAndFormConfig+0x50>
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	d00e      	beq.n	800c720 <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800c702:	e093      	b.n	800c82c <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800c704:	7bfb      	ldrb	r3, [r7, #15]
 800c706:	2b24      	cmp	r3, #36	; 0x24
 800c708:	f040 8092 	bne.w	800c830 <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	7bfa      	ldrb	r2, [r7, #15]
 800c710:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800c712:	4b56      	ldr	r3, [pc, #344]	; (800c86c <ReadAndFormConfig+0x1b8>)
 800c714:	2201      	movs	r2, #1
 800c716:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c718:	4b53      	ldr	r3, [pc, #332]	; (800c868 <ReadAndFormConfig+0x1b4>)
 800c71a:	2202      	movs	r2, #2
 800c71c:	701a      	strb	r2, [r3, #0]
			break;
 800c71e:	e087      	b.n	800c830 <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800c720:	7bfb      	ldrb	r3, [r7, #15]
 800c722:	2b26      	cmp	r3, #38	; 0x26
 800c724:	d006      	beq.n	800c734 <ReadAndFormConfig+0x80>
 800c726:	2b26      	cmp	r3, #38	; 0x26
 800c728:	dc57      	bgt.n	800c7da <ReadAndFormConfig+0x126>
 800c72a:	2b05      	cmp	r3, #5
 800c72c:	d051      	beq.n	800c7d2 <ReadAndFormConfig+0x11e>
 800c72e:	2b24      	cmp	r3, #36	; 0x24
 800c730:	d045      	beq.n	800c7be <ReadAndFormConfig+0x10a>
 800c732:	e052      	b.n	800c7da <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800c734:	4b4d      	ldr	r3, [pc, #308]	; (800c86c <ReadAndFormConfig+0x1b8>)
 800c736:	881b      	ldrh	r3, [r3, #0]
 800c738:	3b02      	subs	r3, #2
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800c73e:	4b4b      	ldr	r3, [pc, #300]	; (800c86c <ReadAndFormConfig+0x1b8>)
 800c740:	881b      	ldrh	r3, [r3, #0]
 800c742:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800c744:	4b49      	ldr	r3, [pc, #292]	; (800c86c <ReadAndFormConfig+0x1b8>)
 800c746:	2200      	movs	r2, #0
 800c748:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800c74a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	da01      	bge.n	800c756 <ReadAndFormConfig+0xa2>
					return 0;
 800c752:	2300      	movs	r3, #0
 800c754:	e082      	b.n	800c85c <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800c756:	4b44      	ldr	r3, [pc, #272]	; (800c868 <ReadAndFormConfig+0x1b4>)
 800c758:	2201      	movs	r2, #1
 800c75a:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800c75c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c760:	4619      	mov	r1, r3
 800c762:	6838      	ldr	r0, [r7, #0]
 800c764:	f009 fb9c 	bl	8015ea0 <CheckCRC>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d012      	beq.n	800c794 <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c76e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	4413      	add	r3, r2
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	4619      	mov	r1, r3
 800c77a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c77e:	3301      	adds	r3, #1
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	4413      	add	r3, r2
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	461a      	mov	r2, r3
 800c788:	4839      	ldr	r0, [pc, #228]	; (800c870 <ReadAndFormConfig+0x1bc>)
 800c78a:	f01a fa2f 	bl	8026bec <iprintf>
					return us_ReturnBytes;
 800c78e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c792:	e063      	b.n	800c85c <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800c794:	4837      	ldr	r0, [pc, #220]	; (800c874 <ReadAndFormConfig+0x1c0>)
 800c796:	f01a fa29 	bl	8026bec <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c79a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c79e:	683a      	ldr	r2, [r7, #0]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	683a      	ldr	r2, [r7, #0]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	4830      	ldr	r0, [pc, #192]	; (800c878 <ReadAndFormConfig+0x1c4>)
 800c7b6:	f01a fa19 	bl	8026bec <iprintf>
					return 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	e04e      	b.n	800c85c <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	7bfa      	ldrb	r2, [r7, #15]
 800c7c2:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800c7c4:	4b29      	ldr	r3, [pc, #164]	; (800c86c <ReadAndFormConfig+0x1b8>)
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c7ca:	4b27      	ldr	r3, [pc, #156]	; (800c868 <ReadAndFormConfig+0x1b4>)
 800c7cc:	2202      	movs	r2, #2
 800c7ce:	701a      	strb	r2, [r3, #0]
				break;
 800c7d0:	e011      	b.n	800c7f6 <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800c7d2:	4b25      	ldr	r3, [pc, #148]	; (800c868 <ReadAndFormConfig+0x1b4>)
 800c7d4:	2203      	movs	r2, #3
 800c7d6:	701a      	strb	r2, [r3, #0]
				break;
 800c7d8:	e00d      	b.n	800c7f6 <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800c7da:	4b24      	ldr	r3, [pc, #144]	; (800c86c <ReadAndFormConfig+0x1b8>)
 800c7dc:	881b      	ldrh	r3, [r3, #0]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	7bfa      	ldrb	r2, [r7, #15]
 800c7e6:	701a      	strb	r2, [r3, #0]
				i++;
 800c7e8:	4b20      	ldr	r3, [pc, #128]	; (800c86c <ReadAndFormConfig+0x1b8>)
 800c7ea:	881b      	ldrh	r3, [r3, #0]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	4b1e      	ldr	r3, [pc, #120]	; (800c86c <ReadAndFormConfig+0x1b8>)
 800c7f2:	801a      	strh	r2, [r3, #0]
				break;
 800c7f4:	bf00      	nop
			break;
 800c7f6:	e01c      	b.n	800c832 <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
 800c7fa:	2b24      	cmp	r3, #36	; 0x24
 800c7fc:	d005      	beq.n	800c80a <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800c7fe:	7bfb      	ldrb	r3, [r7, #15]
 800c800:	2b26      	cmp	r3, #38	; 0x26
 800c802:	d002      	beq.n	800c80a <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800c804:	7bfb      	ldrb	r3, [r7, #15]
 800c806:	2b05      	cmp	r3, #5
 800c808:	d10c      	bne.n	800c824 <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800c80a:	4b18      	ldr	r3, [pc, #96]	; (800c86c <ReadAndFormConfig+0x1b8>)
 800c80c:	881b      	ldrh	r3, [r3, #0]
 800c80e:	461a      	mov	r2, r3
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	4413      	add	r3, r2
 800c814:	7bfa      	ldrb	r2, [r7, #15]
 800c816:	701a      	strb	r2, [r3, #0]
					i++;
 800c818:	4b14      	ldr	r3, [pc, #80]	; (800c86c <ReadAndFormConfig+0x1b8>)
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	3301      	adds	r3, #1
 800c81e:	b29a      	uxth	r2, r3
 800c820:	4b12      	ldr	r3, [pc, #72]	; (800c86c <ReadAndFormConfig+0x1b8>)
 800c822:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c824:	4b10      	ldr	r3, [pc, #64]	; (800c868 <ReadAndFormConfig+0x1b4>)
 800c826:	2202      	movs	r2, #2
 800c828:	701a      	strb	r2, [r3, #0]
				break;
 800c82a:	e002      	b.n	800c832 <ReadAndFormConfig+0x17e>
				break;
 800c82c:	bf00      	nop
 800c82e:	e000      	b.n	800c832 <ReadAndFormConfig+0x17e>
			break;
 800c830:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800c832:	4b0e      	ldr	r3, [pc, #56]	; (800c86c <ReadAndFormConfig+0x1b8>)
 800c834:	881b      	ldrh	r3, [r3, #0]
 800c836:	88ba      	ldrh	r2, [r7, #4]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d805      	bhi.n	800c848 <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800c83c:	4b0a      	ldr	r3, [pc, #40]	; (800c868 <ReadAndFormConfig+0x1b4>)
 800c83e:	2201      	movs	r2, #1
 800c840:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800c842:	4b0a      	ldr	r3, [pc, #40]	; (800c86c <ReadAndFormConfig+0x1b8>)
 800c844:	2200      	movs	r2, #0
 800c846:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800c848:	88fb      	ldrh	r3, [r7, #6]
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	4618      	mov	r0, r3
 800c84e:	f00c fe5b 	bl	8019508 <Com_DataReady>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	f47f af3c 	bne.w	800c6d2 <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800c85a:	2300      	movs	r3, #0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3710      	adds	r7, #16
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}
 800c864:	2000b478 	.word	0x2000b478
 800c868:	20000318 	.word	0x20000318
 800c86c:	20003fca 	.word	0x20003fca
 800c870:	0802a760 	.word	0x0802a760
 800c874:	0802a72c 	.word	0x0802a72c
 800c878:	0802a774 	.word	0x0802a774

0800c87c <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	4603      	mov	r3, r0
 800c884:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800c886:	79fb      	ldrb	r3, [r7, #7]
 800c888:	091b      	lsrs	r3, r3, #4
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	461a      	mov	r2, r3
 800c88e:	0092      	lsls	r2, r2, #2
 800c890:	4413      	add	r3, r2
 800c892:	005b      	lsls	r3, r3, #1
 800c894:	b2da      	uxtb	r2, r3
 800c896:	79fb      	ldrb	r3, [r7, #7]
 800c898:	f003 030f 	and.w	r3, r3, #15
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	4413      	add	r3, r2
 800c8a0:	b2db      	uxtb	r3, r3
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	370c      	adds	r7, #12
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr
	...

0800c8b0 <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800c8ba:	79fb      	ldrb	r3, [r7, #7]
 800c8bc:	4a0d      	ldr	r2, [pc, #52]	; (800c8f4 <Dec_to_BCD+0x44>)
 800c8be:	fba2 2303 	umull	r2, r3, r2, r3
 800c8c2:	08db      	lsrs	r3, r3, #3
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	011b      	lsls	r3, r3, #4
 800c8c8:	b2d8      	uxtb	r0, r3
 800c8ca:	79fa      	ldrb	r2, [r7, #7]
 800c8cc:	4b09      	ldr	r3, [pc, #36]	; (800c8f4 <Dec_to_BCD+0x44>)
 800c8ce:	fba3 1302 	umull	r1, r3, r3, r2
 800c8d2:	08d9      	lsrs	r1, r3, #3
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	440b      	add	r3, r1
 800c8da:	005b      	lsls	r3, r3, #1
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	4403      	add	r3, r0
 800c8e2:	71fb      	strb	r3, [r7, #7]
	return c;
 800c8e4:	79fb      	ldrb	r3, [r7, #7]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	370c      	adds	r7, #12
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	cccccccd 	.word	0xcccccccd

0800c8f8 <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800c8fc:	4b0b      	ldr	r3, [pc, #44]	; (800c92c <Is_GPS_Valid+0x34>)
 800c8fe:	795b      	ldrb	r3, [r3, #5]
 800c900:	2b09      	cmp	r3, #9
 800c902:	d801      	bhi.n	800c908 <Is_GPS_Valid+0x10>
	{
		return 0;
 800c904:	2300      	movs	r3, #0
 800c906:	e00c      	b.n	800c922 <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800c908:	4b08      	ldr	r3, [pc, #32]	; (800c92c <Is_GPS_Valid+0x34>)
 800c90a:	791b      	ldrb	r3, [r3, #4]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d101      	bne.n	800c914 <Is_GPS_Valid+0x1c>
	{
		return 0;
 800c910:	2300      	movs	r3, #0
 800c912:	e006      	b.n	800c922 <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800c914:	4b05      	ldr	r3, [pc, #20]	; (800c92c <Is_GPS_Valid+0x34>)
 800c916:	78db      	ldrb	r3, [r3, #3]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d101      	bne.n	800c920 <Is_GPS_Valid+0x28>
	{
		return 0;
 800c91c:	2300      	movs	r3, #0
 800c91e:	e000      	b.n	800c922 <Is_GPS_Valid+0x2a>
	}
	return 1;
 800c920:	2301      	movs	r3, #1
}
 800c922:	4618      	mov	r0, r3
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr
 800c92c:	20003fcc 	.word	0x20003fcc

0800c930 <Write_RTC>:


void Write_RTC(void)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800c936:	2300      	movs	r3, #0
 800c938:	603b      	str	r3, [r7, #0]
 800c93a:	1d3b      	adds	r3, r7, #4
 800c93c:	2100      	movs	r1, #0
 800c93e:	460a      	mov	r2, r1
 800c940:	801a      	strh	r2, [r3, #0]
 800c942:	460a      	mov	r2, r1
 800c944:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800c946:	f7ff ffd7 	bl	800c8f8 <Is_GPS_Valid>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d103      	bne.n	800c958 <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800c950:	4844      	ldr	r0, [pc, #272]	; (800ca64 <Write_RTC+0x134>)
 800c952:	f01a f9e7 	bl	8026d24 <puts>
 800c956:	e081      	b.n	800ca5c <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800c958:	4b43      	ldr	r3, [pc, #268]	; (800ca68 <Write_RTC+0x138>)
 800c95a:	2201      	movs	r2, #1
 800c95c:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800c95e:	4b43      	ldr	r3, [pc, #268]	; (800ca6c <Write_RTC+0x13c>)
 800c960:	789b      	ldrb	r3, [r3, #2]
 800c962:	4618      	mov	r0, r3
 800c964:	f7ff ffa4 	bl	800c8b0 <Dec_to_BCD>
 800c968:	4603      	mov	r3, r0
 800c96a:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800c96c:	4b3f      	ldr	r3, [pc, #252]	; (800ca6c <Write_RTC+0x13c>)
 800c96e:	785b      	ldrb	r3, [r3, #1]
 800c970:	4618      	mov	r0, r3
 800c972:	f7ff ff9d 	bl	800c8b0 <Dec_to_BCD>
 800c976:	4603      	mov	r3, r0
 800c978:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800c97a:	4b3c      	ldr	r3, [pc, #240]	; (800ca6c <Write_RTC+0x13c>)
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	4618      	mov	r0, r3
 800c980:	f7ff ff96 	bl	800c8b0 <Dec_to_BCD>
 800c984:	4603      	mov	r3, r0
 800c986:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800c988:	4b38      	ldr	r3, [pc, #224]	; (800ca6c <Write_RTC+0x13c>)
 800c98a:	78db      	ldrb	r3, [r3, #3]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7ff ff8f 	bl	800c8b0 <Dec_to_BCD>
 800c992:	4603      	mov	r3, r0
 800c994:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800c996:	4b35      	ldr	r3, [pc, #212]	; (800ca6c <Write_RTC+0x13c>)
 800c998:	791b      	ldrb	r3, [r3, #4]
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7ff ff88 	bl	800c8b0 <Dec_to_BCD>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800c9a4:	4b31      	ldr	r3, [pc, #196]	; (800ca6c <Write_RTC+0x13c>)
 800c9a6:	795b      	ldrb	r3, [r3, #5]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7ff ff81 	bl	800c8b0 <Dec_to_BCD>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800c9b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c9b6:	9302      	str	r3, [sp, #8]
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	9301      	str	r3, [sp, #4]
 800c9bc:	463b      	mov	r3, r7
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	21d0      	movs	r1, #208	; 0xd0
 800c9c6:	482a      	ldr	r0, [pc, #168]	; (800ca70 <Write_RTC+0x140>)
 800c9c8:	f00f febe 	bl	801c748 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800c9cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c9d0:	9302      	str	r3, [sp, #8]
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	9301      	str	r3, [sp, #4]
 800c9d6:	463b      	mov	r3, r7
 800c9d8:	3301      	adds	r3, #1
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	2301      	movs	r3, #1
 800c9de:	2201      	movs	r2, #1
 800c9e0:	21d0      	movs	r1, #208	; 0xd0
 800c9e2:	4823      	ldr	r0, [pc, #140]	; (800ca70 <Write_RTC+0x140>)
 800c9e4:	f00f feb0 	bl	801c748 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800c9e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c9ec:	9302      	str	r3, [sp, #8]
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	463b      	mov	r3, r7
 800c9f4:	3302      	adds	r3, #2
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	2202      	movs	r2, #2
 800c9fc:	21d0      	movs	r1, #208	; 0xd0
 800c9fe:	481c      	ldr	r0, [pc, #112]	; (800ca70 <Write_RTC+0x140>)
 800ca00:	f00f fea2 	bl	801c748 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800ca04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca08:	9302      	str	r3, [sp, #8]
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	9301      	str	r3, [sp, #4]
 800ca0e:	463b      	mov	r3, r7
 800ca10:	3303      	adds	r3, #3
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	2301      	movs	r3, #1
 800ca16:	2204      	movs	r2, #4
 800ca18:	21d0      	movs	r1, #208	; 0xd0
 800ca1a:	4815      	ldr	r0, [pc, #84]	; (800ca70 <Write_RTC+0x140>)
 800ca1c:	f00f fe94 	bl	801c748 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800ca20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca24:	9302      	str	r3, [sp, #8]
 800ca26:	2301      	movs	r3, #1
 800ca28:	9301      	str	r3, [sp, #4]
 800ca2a:	463b      	mov	r3, r7
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	9300      	str	r3, [sp, #0]
 800ca30:	2301      	movs	r3, #1
 800ca32:	2205      	movs	r2, #5
 800ca34:	21d0      	movs	r1, #208	; 0xd0
 800ca36:	480e      	ldr	r0, [pc, #56]	; (800ca70 <Write_RTC+0x140>)
 800ca38:	f00f fe86 	bl	801c748 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800ca3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca40:	9302      	str	r3, [sp, #8]
 800ca42:	2301      	movs	r3, #1
 800ca44:	9301      	str	r3, [sp, #4]
 800ca46:	463b      	mov	r3, r7
 800ca48:	3305      	adds	r3, #5
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	2206      	movs	r2, #6
 800ca50:	21d0      	movs	r1, #208	; 0xd0
 800ca52:	4807      	ldr	r0, [pc, #28]	; (800ca70 <Write_RTC+0x140>)
 800ca54:	f00f fe78 	bl	801c748 <HAL_I2C_Mem_Write>

	Get_time();
 800ca58:	f000 f80c 	bl	800ca74 <Get_time>

}
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	0802a7d4 	.word	0x0802a7d4
 800ca68:	200024e0 	.word	0x200024e0
 800ca6c:	20003fcc 	.word	0x20003fcc
 800ca70:	2000b3d0 	.word	0x2000b3d0

0800ca74 <Get_time>:


void Get_time(void)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b086      	sub	sp, #24
 800ca78:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800ca7a:	463b      	mov	r3, r7
 800ca7c:	2207      	movs	r2, #7
 800ca7e:	2100      	movs	r1, #0
 800ca80:	4618      	mov	r0, r3
 800ca82:	f019 ffcb 	bl	8026a1c <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800ca86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca8a:	9302      	str	r3, [sp, #8]
 800ca8c:	2307      	movs	r3, #7
 800ca8e:	9301      	str	r3, [sp, #4]
 800ca90:	463b      	mov	r3, r7
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	2301      	movs	r3, #1
 800ca96:	2200      	movs	r2, #0
 800ca98:	21d0      	movs	r1, #208	; 0xd0
 800ca9a:	4824      	ldr	r0, [pc, #144]	; (800cb2c <Get_time+0xb8>)
 800ca9c:	f00f ff68 	bl	801c970 <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800caa0:	783b      	ldrb	r3, [r7, #0]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7ff feea 	bl	800c87c <bcdToDec>
 800caa8:	4603      	mov	r3, r0
 800caaa:	461a      	mov	r2, r3
 800caac:	4b20      	ldr	r3, [pc, #128]	; (800cb30 <Get_time+0xbc>)
 800caae:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800cab0:	787b      	ldrb	r3, [r7, #1]
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7ff fee2 	bl	800c87c <bcdToDec>
 800cab8:	4603      	mov	r3, r0
 800caba:	461a      	mov	r2, r3
 800cabc:	4b1c      	ldr	r3, [pc, #112]	; (800cb30 <Get_time+0xbc>)
 800cabe:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800cac0:	78bb      	ldrb	r3, [r7, #2]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7ff feda 	bl	800c87c <bcdToDec>
 800cac8:	4603      	mov	r3, r0
 800caca:	461a      	mov	r2, r3
 800cacc:	4b18      	ldr	r3, [pc, #96]	; (800cb30 <Get_time+0xbc>)
 800cace:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800cad0:	793b      	ldrb	r3, [r7, #4]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7ff fed2 	bl	800c87c <bcdToDec>
 800cad8:	4603      	mov	r3, r0
 800cada:	461a      	mov	r2, r3
 800cadc:	4b14      	ldr	r3, [pc, #80]	; (800cb30 <Get_time+0xbc>)
 800cade:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800cae0:	797b      	ldrb	r3, [r7, #5]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7ff feca 	bl	800c87c <bcdToDec>
 800cae8:	4603      	mov	r3, r0
 800caea:	461a      	mov	r2, r3
 800caec:	4b10      	ldr	r3, [pc, #64]	; (800cb30 <Get_time+0xbc>)
 800caee:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800caf0:	79bb      	ldrb	r3, [r7, #6]
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7ff fec2 	bl	800c87c <bcdToDec>
 800caf8:	4603      	mov	r3, r0
 800cafa:	461a      	mov	r2, r3
 800cafc:	4b0c      	ldr	r3, [pc, #48]	; (800cb30 <Get_time+0xbc>)
 800cafe:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800cb00:	783a      	ldrb	r2, [r7, #0]
 800cb02:	4b0c      	ldr	r3, [pc, #48]	; (800cb34 <Get_time+0xc0>)
 800cb04:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800cb06:	787a      	ldrb	r2, [r7, #1]
 800cb08:	4b0a      	ldr	r3, [pc, #40]	; (800cb34 <Get_time+0xc0>)
 800cb0a:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800cb0c:	78ba      	ldrb	r2, [r7, #2]
 800cb0e:	4b09      	ldr	r3, [pc, #36]	; (800cb34 <Get_time+0xc0>)
 800cb10:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800cb12:	793a      	ldrb	r2, [r7, #4]
 800cb14:	4b07      	ldr	r3, [pc, #28]	; (800cb34 <Get_time+0xc0>)
 800cb16:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800cb18:	797a      	ldrb	r2, [r7, #5]
 800cb1a:	4b06      	ldr	r3, [pc, #24]	; (800cb34 <Get_time+0xc0>)
 800cb1c:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800cb1e:	79ba      	ldrb	r2, [r7, #6]
 800cb20:	4b04      	ldr	r3, [pc, #16]	; (800cb34 <Get_time+0xc0>)
 800cb22:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800cb24:	bf00      	nop
}
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	2000b3d0 	.word	0x2000b3d0
 800cb30:	20003fdc 	.word	0x20003fdc
 800cb34:	20003fe4 	.word	0x20003fe4

0800cb38 <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800cb3c:	4b09      	ldr	r3, [pc, #36]	; (800cb64 <Update_Time_Every_Sec+0x2c>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f003 fd2b 	bl	801059c <HAL_Elaps_Ticks>
 800cb46:	4603      	mov	r3, r0
 800cb48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb4c:	d307      	bcc.n	800cb5e <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800cb4e:	f7ff ff91 	bl	800ca74 <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800cb52:	f00d f841 	bl	8019bd8 <HAL_GetTick>
 800cb56:	4603      	mov	r3, r0
 800cb58:	4a02      	ldr	r2, [pc, #8]	; (800cb64 <Update_Time_Every_Sec+0x2c>)
 800cb5a:	6013      	str	r3, [r2, #0]
	}
	return;
 800cb5c:	bf00      	nop
 800cb5e:	bf00      	nop
}
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	20003fec 	.word	0x20003fec

0800cb68 <find_flash_used_size>:
uint8_t guc_Completed_FlashCRC_Flag = 0;
uint16_t HexFileCrc=0;


void find_flash_used_size(void)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
	uint32_t *flash_ptr = (uint32_t *)FLASH_SIZE_CRC_ADDRESS;
 800cb6e:	4b18      	ldr	r3, [pc, #96]	; (800cbd0 <find_flash_used_size+0x68>)
 800cb70:	60fb      	str	r3, [r7, #12]
	uint8_t Size[4] = {0,};
 800cb72:	2300      	movs	r3, #0
 800cb74:	60bb      	str	r3, [r7, #8]
	uint8_t CRC_Buff[4] = {0,};
 800cb76:	2300      	movs	r3, #0
 800cb78:	607b      	str	r3, [r7, #4]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]

	memcpy(&Size,&flash_ptr[0],sizeof(uint32_t));
 800cb7e:	60bb      	str	r3, [r7, #8]
	memcpy(&CRC_Buff,&flash_ptr[1],sizeof(uint32_t));
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	3304      	adds	r3, #4
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	607b      	str	r3, [r7, #4]

	FlashDataSize = (uint32_t)ExtractBits(0, 32, Size);
 800cb88:	f107 0308 	add.w	r3, r7, #8
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	2120      	movs	r1, #32
 800cb90:	2000      	movs	r0, #0
 800cb92:	f7f3 fd3f 	bl	8000614 <ExtractBits>
 800cb96:	4603      	mov	r3, r0
 800cb98:	4a0e      	ldr	r2, [pc, #56]	; (800cbd4 <find_flash_used_size+0x6c>)
 800cb9a:	6013      	str	r3, [r2, #0]
	FlashCrc = (uint16_t)ExtractBits(0, 16, CRC_Buff);
 800cb9c:	1d3b      	adds	r3, r7, #4
 800cb9e:	461a      	mov	r2, r3
 800cba0:	2110      	movs	r1, #16
 800cba2:	2000      	movs	r0, #0
 800cba4:	f7f3 fd36 	bl	8000614 <ExtractBits>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	4b0a      	ldr	r3, [pc, #40]	; (800cbd8 <find_flash_used_size+0x70>)
 800cbae:	801a      	strh	r2, [r3, #0]

	printf("\r\nFlash Size:%lu Bytes\n",FlashDataSize);
 800cbb0:	4b08      	ldr	r3, [pc, #32]	; (800cbd4 <find_flash_used_size+0x6c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	4809      	ldr	r0, [pc, #36]	; (800cbdc <find_flash_used_size+0x74>)
 800cbb8:	f01a f818 	bl	8026bec <iprintf>
	printf("CRC       :0X%04X\n",FlashCrc);
 800cbbc:	4b06      	ldr	r3, [pc, #24]	; (800cbd8 <find_flash_used_size+0x70>)
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	4807      	ldr	r0, [pc, #28]	; (800cbe0 <find_flash_used_size+0x78>)
 800cbc4:	f01a f812 	bl	8026bec <iprintf>
}
 800cbc8:	bf00      	nop
 800cbca:	3710      	adds	r7, #16
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	081cffe0 	.word	0x081cffe0
 800cbd4:	20003ff0 	.word	0x20003ff0
 800cbd8:	20003ff4 	.word	0x20003ff4
 800cbdc:	0802a7f4 	.word	0x0802a7f4
 800cbe0:	0802a80c 	.word	0x0802a80c

0800cbe4 <CheckCRConStartup>:



void CheckCRConStartup(void)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b088      	sub	sp, #32
 800cbe8:	af00      	add	r7, sp, #0


	static unsigned long  sUl_Count =0;
	unsigned short int us_IncVar = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	83fb      	strh	r3, [r7, #30]
	unsigned char uc_Buf[20] ="\0";
 800cbee:	2300      	movs	r3, #0
 800cbf0:	607b      	str	r3, [r7, #4]
 800cbf2:	f107 0308 	add.w	r3, r7, #8
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	601a      	str	r2, [r3, #0]
 800cbfa:	605a      	str	r2, [r3, #4]
 800cbfc:	609a      	str	r2, [r3, #8]
 800cbfe:	60da      	str	r2, [r3, #12]
	unsigned short int us_CRCRet =0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	83bb      	strh	r3, [r7, #28]


	find_flash_used_size();
 800cc04:	f7ff ffb0 	bl	800cb68 <find_flash_used_size>

	//	printf("\n DATA FOR CRC\n");

	for(sUl_Count=0;sUl_Count<FlashDataSize;sUl_Count++)
 800cc08:	4b3a      	ldr	r3, [pc, #232]	; (800ccf4 <CheckCRConStartup+0x110>)
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	601a      	str	r2, [r3, #0]
 800cc0e:	e023      	b.n	800cc58 <CheckCRConStartup+0x74>
	{
		uc_Buf[us_IncVar] = (*(volatile unsigned char *)(FLASH_START_ADDRESS+sUl_Count));
 800cc10:	4b38      	ldr	r3, [pc, #224]	; (800ccf4 <CheckCRConStartup+0x110>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800cc18:	461a      	mov	r2, r3
 800cc1a:	8bfb      	ldrh	r3, [r7, #30]
 800cc1c:	7812      	ldrb	r2, [r2, #0]
 800cc1e:	b2d2      	uxtb	r2, r2
 800cc20:	3320      	adds	r3, #32
 800cc22:	443b      	add	r3, r7
 800cc24:	f803 2c1c 	strb.w	r2, [r3, #-28]
		us_IncVar++;
 800cc28:	8bfb      	ldrh	r3, [r7, #30]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	83fb      	strh	r3, [r7, #30]

		if(0 == (us_IncVar %16))
 800cc2e:	8bfb      	ldrh	r3, [r7, #30]
 800cc30:	f003 030f 	and.w	r3, r3, #15
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d109      	bne.n	800cc4e <CheckCRConStartup+0x6a>
		{
			us_CRCRet = crc16_arc(us_CRCRet,uc_Buf,us_IncVar);
 800cc3a:	8bfa      	ldrh	r2, [r7, #30]
 800cc3c:	1d39      	adds	r1, r7, #4
 800cc3e:	8bbb      	ldrh	r3, [r7, #28]
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 f869 	bl	800cd18 <crc16_arc>
 800cc46:	4603      	mov	r3, r0
 800cc48:	83bb      	strh	r3, [r7, #28]
			us_IncVar=0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	83fb      	strh	r3, [r7, #30]
	for(sUl_Count=0;sUl_Count<FlashDataSize;sUl_Count++)
 800cc4e:	4b29      	ldr	r3, [pc, #164]	; (800ccf4 <CheckCRConStartup+0x110>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	3301      	adds	r3, #1
 800cc54:	4a27      	ldr	r2, [pc, #156]	; (800ccf4 <CheckCRConStartup+0x110>)
 800cc56:	6013      	str	r3, [r2, #0]
 800cc58:	4b26      	ldr	r3, [pc, #152]	; (800ccf4 <CheckCRConStartup+0x110>)
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	4b26      	ldr	r3, [pc, #152]	; (800ccf8 <CheckCRConStartup+0x114>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d3d5      	bcc.n	800cc10 <CheckCRConStartup+0x2c>
		}
	}
	//	printf("\nloop cont :%ld\n",sUl_Count);

	if(us_IncVar != 0)
 800cc64:	8bfb      	ldrh	r3, [r7, #30]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d009      	beq.n	800cc7e <CheckCRConStartup+0x9a>
	{
		us_CRCRet = crc16_arc(us_CRCRet,uc_Buf,us_IncVar);
 800cc6a:	8bfa      	ldrh	r2, [r7, #30]
 800cc6c:	1d39      	adds	r1, r7, #4
 800cc6e:	8bbb      	ldrh	r3, [r7, #28]
 800cc70:	4618      	mov	r0, r3
 800cc72:	f000 f851 	bl	800cd18 <crc16_arc>
 800cc76:	4603      	mov	r3, r0
 800cc78:	83bb      	strh	r3, [r7, #28]
		us_IncVar=0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	83fb      	strh	r3, [r7, #30]
	}

	if(us_CRCRet != FlashCrc)
 800cc7e:	4b1f      	ldr	r3, [pc, #124]	; (800ccfc <CheckCRConStartup+0x118>)
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	8bba      	ldrh	r2, [r7, #28]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d021      	beq.n	800cccc <CheckCRConStartup+0xe8>
	{
		for(uint16_t i=0;i<200;++i)
 800cc88:	2300      	movs	r3, #0
 800cc8a:	837b      	strh	r3, [r7, #26]
 800cc8c:	e005      	b.n	800cc9a <CheckCRConStartup+0xb6>
		{
			printf("$");
 800cc8e:	2024      	movs	r0, #36	; 0x24
 800cc90:	f019 ffc4 	bl	8026c1c <putchar>
		for(uint16_t i=0;i<200;++i)
 800cc94:	8b7b      	ldrh	r3, [r7, #26]
 800cc96:	3301      	adds	r3, #1
 800cc98:	837b      	strh	r3, [r7, #26]
 800cc9a:	8b7b      	ldrh	r3, [r7, #26]
 800cc9c:	2bc7      	cmp	r3, #199	; 0xc7
 800cc9e:	d9f6      	bls.n	800cc8e <CheckCRConStartup+0xaa>
		}
		printf("\n");
 800cca0:	200a      	movs	r0, #10
 800cca2:	f019 ffbb 	bl	8026c1c <putchar>
		printf("CRC FAIL FROM THE STM32 FLASH\n");
 800cca6:	4816      	ldr	r0, [pc, #88]	; (800cd00 <CheckCRConStartup+0x11c>)
 800cca8:	f01a f83c 	bl	8026d24 <puts>
		printf("Calc:0X%04X\n",us_CRCRet);
 800ccac:	8bbb      	ldrh	r3, [r7, #28]
 800ccae:	4619      	mov	r1, r3
 800ccb0:	4814      	ldr	r0, [pc, #80]	; (800cd04 <CheckCRConStartup+0x120>)
 800ccb2:	f019 ff9b 	bl	8026bec <iprintf>
		printf("FlashCrc:0X%04X\n",FlashCrc);
 800ccb6:	4b11      	ldr	r3, [pc, #68]	; (800ccfc <CheckCRConStartup+0x118>)
 800ccb8:	881b      	ldrh	r3, [r3, #0]
 800ccba:	4619      	mov	r1, r3
 800ccbc:	4812      	ldr	r0, [pc, #72]	; (800cd08 <CheckCRConStartup+0x124>)
 800ccbe:	f019 ff95 	bl	8026bec <iprintf>
		HexFileCrc  = FlashCrc;
 800ccc2:	4b0e      	ldr	r3, [pc, #56]	; (800ccfc <CheckCRConStartup+0x118>)
 800ccc4:	881a      	ldrh	r2, [r3, #0]
 800ccc6:	4b11      	ldr	r3, [pc, #68]	; (800cd0c <CheckCRConStartup+0x128>)
 800ccc8:	801a      	strh	r2, [r3, #0]
	{
		printf("\r\nCRC OK From STM32 FLASH with CRC:0X%04X\n",FlashCrc);
		HexFileCrc = FlashCrc;
		printf("Build_CRC:0x%04x\n",HexFileCrc);
	}
}
 800ccca:	e00f      	b.n	800ccec <CheckCRConStartup+0x108>
		printf("\r\nCRC OK From STM32 FLASH with CRC:0X%04X\n",FlashCrc);
 800cccc:	4b0b      	ldr	r3, [pc, #44]	; (800ccfc <CheckCRConStartup+0x118>)
 800ccce:	881b      	ldrh	r3, [r3, #0]
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	480f      	ldr	r0, [pc, #60]	; (800cd10 <CheckCRConStartup+0x12c>)
 800ccd4:	f019 ff8a 	bl	8026bec <iprintf>
		HexFileCrc = FlashCrc;
 800ccd8:	4b08      	ldr	r3, [pc, #32]	; (800ccfc <CheckCRConStartup+0x118>)
 800ccda:	881a      	ldrh	r2, [r3, #0]
 800ccdc:	4b0b      	ldr	r3, [pc, #44]	; (800cd0c <CheckCRConStartup+0x128>)
 800ccde:	801a      	strh	r2, [r3, #0]
		printf("Build_CRC:0x%04x\n",HexFileCrc);
 800cce0:	4b0a      	ldr	r3, [pc, #40]	; (800cd0c <CheckCRConStartup+0x128>)
 800cce2:	881b      	ldrh	r3, [r3, #0]
 800cce4:	4619      	mov	r1, r3
 800cce6:	480b      	ldr	r0, [pc, #44]	; (800cd14 <CheckCRConStartup+0x130>)
 800cce8:	f019 ff80 	bl	8026bec <iprintf>
}
 800ccec:	bf00      	nop
 800ccee:	3720      	adds	r7, #32
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	20003ff8 	.word	0x20003ff8
 800ccf8:	20003ff0 	.word	0x20003ff0
 800ccfc:	20003ff4 	.word	0x20003ff4
 800cd00:	0802a820 	.word	0x0802a820
 800cd04:	0802a840 	.word	0x0802a840
 800cd08:	0802a850 	.word	0x0802a850
 800cd0c:	20003ff6 	.word	0x20003ff6
 800cd10:	0802a864 	.word	0x0802a864
 800cd14:	0802a890 	.word	0x0802a890

0800cd18 <crc16_arc>:
}



uint16_t crc16_arc(uint16_t crc, const uint8_t *buf, size_t len)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b087      	sub	sp, #28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	4603      	mov	r3, r0
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	81fb      	strh	r3, [r7, #14]
	//		{
	//			printf("%02X ",buf[i]);
	//		}
	//		printf("\n");
	//	}
	while (len--)
 800cd26:	e01f      	b.n	800cd68 <crc16_arc+0x50>
	{
		crc ^= *buf++;
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	1c5a      	adds	r2, r3, #1
 800cd2c:	60ba      	str	r2, [r7, #8]
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	89fb      	ldrh	r3, [r7, #14]
 800cd34:	4053      	eors	r3, r2
 800cd36:	81fb      	strh	r3, [r7, #14]
		for (int k = 0; k < 8; k++)
 800cd38:	2300      	movs	r3, #0
 800cd3a:	617b      	str	r3, [r7, #20]
 800cd3c:	e011      	b.n	800cd62 <crc16_arc+0x4a>
		{
			if (crc & 1)
 800cd3e:	89fb      	ldrh	r3, [r7, #14]
 800cd40:	f003 0301 	and.w	r3, r3, #1
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d006      	beq.n	800cd56 <crc16_arc+0x3e>
			{
				crc = (crc >> 1) ^ 0xA001;
 800cd48:	89fb      	ldrh	r3, [r7, #14]
 800cd4a:	085b      	lsrs	r3, r3, #1
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	4b0c      	ldr	r3, [pc, #48]	; (800cd80 <crc16_arc+0x68>)
 800cd50:	4053      	eors	r3, r2
 800cd52:	81fb      	strh	r3, [r7, #14]
 800cd54:	e002      	b.n	800cd5c <crc16_arc+0x44>
			}
			else
			{
				crc = crc >> 1;
 800cd56:	89fb      	ldrh	r3, [r7, #14]
 800cd58:	085b      	lsrs	r3, r3, #1
 800cd5a:	81fb      	strh	r3, [r7, #14]
		for (int k = 0; k < 8; k++)
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	617b      	str	r3, [r7, #20]
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	2b07      	cmp	r3, #7
 800cd66:	ddea      	ble.n	800cd3e <crc16_arc+0x26>
	while (len--)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	1e5a      	subs	r2, r3, #1
 800cd6c:	607a      	str	r2, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1da      	bne.n	800cd28 <crc16_arc+0x10>
			}
		}
	}
	return crc;
 800cd72:	89fb      	ldrh	r3, [r7, #14]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	371c      	adds	r7, #28
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr
 800cd80:	ffffa001 	.word	0xffffa001

0800cd84 <Process_SiemensEI>:

uint8_t SendReply = 0;


void Process_SiemensEI(void)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process();
 800cd88:	f014 fa14 	bl	80211b4 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800cd8c:	4814      	ldr	r0, [pc, #80]	; (800cde0 <Process_SiemensEI+0x5c>)
 800cd8e:	f010 fa89 	bl	801d2a4 <HAL_IWDG_Refresh>

		Feed_wdt();
 800cd92:	f009 fc27 	bl	80165e4 <Feed_wdt>

		readCanToStructs();
 800cd96:	f004 ff8d 	bl	8011cb4 <readCanToStructs>

		Chech_forSiemensCMD();
 800cd9a:	f001 fe29 	bl	800e9f0 <Chech_forSiemensCMD>

		ProcessSendingSignals2MIE();
 800cd9e:	f001 fb87 	bl	800e4b0 <ProcessSendingSignals2MIE>

		ProcessSelfSharing();
 800cda2:	f001 fc6d 	bl	800e680 <ProcessSelfSharing>

		Siemens_Data_Analyser();
 800cda6:	f000 f821 	bl	800cdec <Siemens_Data_Analyser>

		ProcessDetectNoValidDataReceive();
 800cdaa:	f001 fc8b 	bl	800e6c4 <ProcessDetectNoValidDataReceive>

		SendRelays2Other();
 800cdae:	f001 fccd 	bl	800e74c <SendRelays2Other>

		CheckRelayMisMatch();
 800cdb2:	f001 fce3 	bl	800e77c <CheckRelayMisMatch>

		Detect_SiemensCAN_Xchange_Failure();
 800cdb6:	f001 fd1b 	bl	800e7f0 <Detect_SiemensCAN_Xchange_Failure>

		Print_BuildDat_Details();
 800cdba:	f00b fe93 	bl	8018ae4 <Print_BuildDat_Details>

		GetTimeStamp();
 800cdbe:	f002 fda1 	bl	800f904 <GetTimeStamp>

		CheckEIPC_DAT_CRC();
 800cdc2:	f7f4 f8c3 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 800cdc6:	4b07      	ldr	r3, [pc, #28]	; (800cde4 <Process_SiemensEI+0x60>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d0dc      	beq.n	800cd88 <Process_SiemensEI+0x4>
		{
			gucFlagUpdate = 3;
 800cdce:	4b06      	ldr	r3, [pc, #24]	; (800cde8 <Process_SiemensEI+0x64>)
 800cdd0:	2203      	movs	r2, #3
 800cdd2:	701a      	strb	r2, [r3, #0]

	}

	while(1)
	{
		Data_Processing();
 800cdd4:	f00b fd84 	bl	80188e0 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800cdd8:	4801      	ldr	r0, [pc, #4]	; (800cde0 <Process_SiemensEI+0x5c>)
 800cdda:	f010 fa63 	bl	801d2a4 <HAL_IWDG_Refresh>
		Data_Processing();
 800cdde:	e7f9      	b.n	800cdd4 <Process_SiemensEI+0x50>
 800cde0:	2000b478 	.word	0x2000b478
 800cde4:	20000bba 	.word	0x20000bba
 800cde8:	20000fbd 	.word	0x20000fbd

0800cdec <Siemens_Data_Analyser>:
	}
}

void Siemens_Data_Analyser(void)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800cdf2:	af00      	add	r7, sp, #0

	uint8_t Data_Traverser =0;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
	uint16_t Cal_CRC=0,Cal_CRC_Compliment=0;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44
 800ce00:	2300      	movs	r3, #0
 800ce02:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42
	uint16_t Recv_CRC=0,Recv_CRC_Compliment=0;
 800ce06:	2300      	movs	r3, #0
 800ce08:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	uint16_t Recv_CRC_Loc=0,Recv_CRC_Compliment_Loc = 0,Recv_CRC_Compliment_Size=0;
 800ce12:	2300      	movs	r3, #0
 800ce14:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
 800ce18:	2300      	movs	r3, #0
 800ce1a:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
 800ce1e:	2300      	movs	r3, #0
 800ce20:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	uint16_t Compliment_Data_Start_Loc = 0;
 800ce24:	2300      	movs	r3, #0
 800ce26:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a
	uint16_t App_data_Traverser = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	f8a7 3a50 	strh.w	r3, [r7, #2640]	; 0xa50
	uint16_t VitalCRC = 0;
 800ce30:	2300      	movs	r3, #0
 800ce32:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38
	uint16_t App_data_Size = 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	uint16_t TempApp_data_Size = 0;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	uint8_t App_Data[SIEMENS_MAX_RELAY_SIZE];
	SIEMENS_PKT_t Temp_Siemens_RX_st;
	uint8_t Buff[MAX_SIEMENS_PKT_LENGTH] = {0,};
 800ce42:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce46:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	601a      	str	r2, [r3, #0]
 800ce4e:	3304      	adds	r3, #4
 800ce50:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ce54:	2100      	movs	r1, #0
 800ce56:	4618      	mov	r0, r3
 800ce58:	f019 fde0 	bl	8026a1c <memset>
	uint16_t Size = 0;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
	uint8_t RejectPacketFlag = 0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b


	if(Ethernet_Circle_buff_st.Write_end > 10)
 800ce68:	4b7c      	ldr	r3, [pc, #496]	; (800d05c <Siemens_Data_Analyser+0x270>)
 800ce6a:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ce6e:	2b0a      	cmp	r3, #10
 800ce70:	f240 86dc 	bls.w	800dc2c <Siemens_Data_Analyser+0xe40>
	{
		memcpy(&Buff,Ethernet_Circle_buff_st.Ethernet_Buffers,Ethernet_Circle_buff_st.Write_end);
 800ce74:	4b79      	ldr	r3, [pc, #484]	; (800d05c <Siemens_Data_Analyser+0x270>)
 800ce76:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	f107 030c 	add.w	r3, r7, #12
 800ce80:	4976      	ldr	r1, [pc, #472]	; (800d05c <Siemens_Data_Analyser+0x270>)
 800ce82:	4618      	mov	r0, r3
 800ce84:	f019 fda2 	bl	80269cc <memcpy>
		Size = Ethernet_Circle_buff_st.Write_end;
 800ce88:	4b74      	ldr	r3, [pc, #464]	; (800d05c <Siemens_Data_Analyser+0x270>)
 800ce8a:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ce8e:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
		memset(&Ethernet_Circle_buff_st,0,sizeof(ETHERNET_Circle_t));
 800ce92:	f240 6204 	movw	r2, #1540	; 0x604
 800ce96:	2100      	movs	r1, #0
 800ce98:	4870      	ldr	r0, [pc, #448]	; (800d05c <Siemens_Data_Analyser+0x270>)
 800ce9a:	f019 fdbf 	bl	8026a1c <memset>
	else
	{
		return;
	}

	memset(&Temp_Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800ce9e:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800cea2:	f44f 720a 	mov.w	r2, #552	; 0x228
 800cea6:	2100      	movs	r1, #0
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f019 fdb7 	bl	8026a1c <memset>


	BITSTUFFINIT(0,0);
 800ceae:	2300      	movs	r3, #0
 800ceb0:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Recv_CRC_Loc = ((Size/2)-2);
 800ceba:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800cebe:	085b      	lsrs	r3, r3, #1
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	3b02      	subs	r3, #2
 800cec4:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
	Recv_CRC_Compliment_Size = ((Size/2)-2);
 800cec8:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800cecc:	085b      	lsrs	r3, r3, #1
 800cece:	b29b      	uxth	r3, r3
 800ced0:	3b02      	subs	r3, #2
 800ced2:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	Recv_CRC_Compliment_Loc = ((Size)-2);
 800ced6:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800ceda:	3b02      	subs	r3, #2
 800cedc:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
	Compliment_Data_Start_Loc = (Size/2);
 800cee0:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800cee4:	085b      	lsrs	r3, r3, #1
 800cee6:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a


	if(  Data_Compliment(Buff,Size,VERIFY)  != 1)
 800ceea:	f8b7 1a36 	ldrh.w	r1, [r7, #2614]	; 0xa36
 800ceee:	f107 030c 	add.w	r3, r7, #12
 800cef2:	2200      	movs	r2, #0
 800cef4:	4618      	mov	r0, r3
 800cef6:	f002 fbeb 	bl	800f6d0 <Data_Compliment>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d004      	beq.n	800cf0a <Siemens_Data_Analyser+0x11e>
	{
		printf("Compliment Data Not Verified\n");
 800cf00:	4857      	ldr	r0, [pc, #348]	; (800d060 <Siemens_Data_Analyser+0x274>)
 800cf02:	f019 ff0f 	bl	8026d24 <puts>
		return ;
 800cf06:	f000 be94 	b.w	800dc32 <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC = ExtractBits(0,16,&Buff[Recv_CRC_Loc]);
 800cf0a:	f8b7 3a40 	ldrh.w	r3, [r7, #2624]	; 0xa40
 800cf0e:	f107 020c 	add.w	r2, r7, #12
 800cf12:	4413      	add	r3, r2
 800cf14:	461a      	mov	r2, r3
 800cf16:	2110      	movs	r1, #16
 800cf18:	2000      	movs	r0, #0
 800cf1a:	f7f3 fb7b 	bl	8000614 <ExtractBits>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
	Cal_CRC = Siemens_CRC(&Buff[0],Recv_CRC_Loc);
 800cf24:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800cf28:	f107 030c 	add.w	r3, r7, #12
 800cf2c:	4611      	mov	r1, r2
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f002 f8d2 	bl	800f0d8 <Siemens_CRC>
 800cf34:	4603      	mov	r3, r0
 800cf36:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cf3a:	4b4a      	ldr	r3, [pc, #296]	; (800d064 <Siemens_Data_Analyser+0x278>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	095b      	lsrs	r3, r3, #5
 800cf40:	f003 0301 	and.w	r3, r3, #1
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d01c      	beq.n	800cf82 <Siemens_Data_Analyser+0x196>
	{
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800cf48:	4847      	ldr	r0, [pc, #284]	; (800d068 <Siemens_Data_Analyser+0x27c>)
 800cf4a:	f019 feeb 	bl	8026d24 <puts>
		Recv_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800cf4e:	4847      	ldr	r0, [pc, #284]	; (800d06c <Siemens_Data_Analyser+0x280>)
 800cf50:	f011 faf4 	bl	801e53c <HAL_RNG_GetRandomNumber>
 800cf54:	4601      	mov	r1, r0
 800cf56:	4b46      	ldr	r3, [pc, #280]	; (800d070 <Siemens_Data_Analyser+0x284>)
 800cf58:	fba3 2301 	umull	r2, r3, r3, r1
 800cf5c:	0bda      	lsrs	r2, r3, #15
 800cf5e:	4613      	mov	r3, r2
 800cf60:	041b      	lsls	r3, r3, #16
 800cf62:	1a9b      	subs	r3, r3, r2
 800cf64:	1aca      	subs	r2, r1, r3
 800cf66:	4613      	mov	r3, r2
 800cf68:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		if(Recv_CRC == Cal_CRC)
 800cf6c:	f8b7 2a54 	ldrh.w	r2, [r7, #2644]	; 0xa54
 800cf70:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d104      	bne.n	800cf82 <Siemens_Data_Analyser+0x196>
		{
			Recv_CRC += 4;
 800cf78:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		}
	}
#endif

	if(Cal_CRC != Recv_CRC)
 800cf82:	f8b7 2a44 	ldrh.w	r2, [r7, #2628]	; 0xa44
 800cf86:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d010      	beq.n	800cfb0 <Siemens_Data_Analyser+0x1c4>
	{
		printf("1st CRC Fail\n");
 800cf8e:	4839      	ldr	r0, [pc, #228]	; (800d074 <Siemens_Data_Analyser+0x288>)
 800cf90:	f019 fec8 	bl	8026d24 <puts>
		printf("Calculated:0x%04x\n",Cal_CRC);
 800cf94:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800cf98:	4619      	mov	r1, r3
 800cf9a:	4837      	ldr	r0, [pc, #220]	; (800d078 <Siemens_Data_Analyser+0x28c>)
 800cf9c:	f019 fe26 	bl	8026bec <iprintf>
		printf("Received:0x%04x\n",Recv_CRC);
 800cfa0:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	4835      	ldr	r0, [pc, #212]	; (800d07c <Siemens_Data_Analyser+0x290>)
 800cfa8:	f019 fe20 	bl	8026bec <iprintf>
		return;
 800cfac:	f000 be41 	b.w	800dc32 <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC_Compliment = ExtractBits(0,16,&Buff[Recv_CRC_Compliment_Loc]);
 800cfb0:	f8b7 3a3e 	ldrh.w	r3, [r7, #2622]	; 0xa3e
 800cfb4:	f107 020c 	add.w	r2, r7, #12
 800cfb8:	4413      	add	r3, r2
 800cfba:	461a      	mov	r2, r3
 800cfbc:	2110      	movs	r1, #16
 800cfbe:	2000      	movs	r0, #0
 800cfc0:	f7f3 fb28 	bl	8000614 <ExtractBits>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	Cal_CRC_Compliment = Siemens_CRC(&Buff[Compliment_Data_Start_Loc],Recv_CRC_Compliment_Size);
 800cfca:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	; 0xa3a
 800cfce:	f107 020c 	add.w	r2, r7, #12
 800cfd2:	4413      	add	r3, r2
 800cfd4:	f8b7 2a3c 	ldrh.w	r2, [r7, #2620]	; 0xa3c
 800cfd8:	4611      	mov	r1, r2
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f002 f87c 	bl	800f0d8 <Siemens_CRC>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cfe6:	4b1f      	ldr	r3, [pc, #124]	; (800d064 <Siemens_Data_Analyser+0x278>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	0a1b      	lsrs	r3, r3, #8
 800cfec:	f003 0301 	and.w	r3, r3, #1
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d01c      	beq.n	800d02e <Siemens_Data_Analyser+0x242>
	{
		printf("Injecting INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800cff4:	4822      	ldr	r0, [pc, #136]	; (800d080 <Siemens_Data_Analyser+0x294>)
 800cff6:	f019 fe95 	bl	8026d24 <puts>
		Recv_CRC_Compliment = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800cffa:	481c      	ldr	r0, [pc, #112]	; (800d06c <Siemens_Data_Analyser+0x280>)
 800cffc:	f011 fa9e 	bl	801e53c <HAL_RNG_GetRandomNumber>
 800d000:	4601      	mov	r1, r0
 800d002:	4b1b      	ldr	r3, [pc, #108]	; (800d070 <Siemens_Data_Analyser+0x284>)
 800d004:	fba3 2301 	umull	r2, r3, r3, r1
 800d008:	0bda      	lsrs	r2, r3, #15
 800d00a:	4613      	mov	r3, r2
 800d00c:	041b      	lsls	r3, r3, #16
 800d00e:	1a9b      	subs	r3, r3, r2
 800d010:	1aca      	subs	r2, r1, r3
 800d012:	4613      	mov	r3, r2
 800d014:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		if(Recv_CRC_Compliment == Cal_CRC_Compliment)
 800d018:	f8b7 2a52 	ldrh.w	r2, [r7, #2642]	; 0xa52
 800d01c:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800d020:	429a      	cmp	r2, r3
 800d022:	d104      	bne.n	800d02e <Siemens_Data_Analyser+0x242>
		{
			Recv_CRC_Compliment += 4;
 800d024:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800d028:	3304      	adds	r3, #4
 800d02a:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		}
	}
#endif

	if(Cal_CRC_Compliment != Recv_CRC_Compliment)
 800d02e:	f8b7 2a42 	ldrh.w	r2, [r7, #2626]	; 0xa42
 800d032:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800d036:	429a      	cmp	r2, r3
 800d038:	d02a      	beq.n	800d090 <Siemens_Data_Analyser+0x2a4>
	{
		printf("2nd CRC Fail\n");
 800d03a:	4812      	ldr	r0, [pc, #72]	; (800d084 <Siemens_Data_Analyser+0x298>)
 800d03c:	f019 fe72 	bl	8026d24 <puts>
		printf("Cal_CRC_Compliment:0x%04x\n",Cal_CRC_Compliment);
 800d040:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800d044:	4619      	mov	r1, r3
 800d046:	4810      	ldr	r0, [pc, #64]	; (800d088 <Siemens_Data_Analyser+0x29c>)
 800d048:	f019 fdd0 	bl	8026bec <iprintf>
		printf("Recv_CRC_Compliment:0x%04x\n",Recv_CRC_Compliment);
 800d04c:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800d050:	4619      	mov	r1, r3
 800d052:	480e      	ldr	r0, [pc, #56]	; (800d08c <Siemens_Data_Analyser+0x2a0>)
 800d054:	f019 fdca 	bl	8026bec <iprintf>
		return;
 800d058:	f000 bdeb 	b.w	800dc32 <Siemens_Data_Analyser+0xe46>
 800d05c:	200063b4 	.word	0x200063b4
 800d060:	0802a8ec 	.word	0x0802a8ec
 800d064:	20004c78 	.word	0x20004c78
 800d068:	0802a90c 	.word	0x0802a90c
 800d06c:	2000bcf8 	.word	0x2000bcf8
 800d070:	80008001 	.word	0x80008001
 800d074:	0802a934 	.word	0x0802a934
 800d078:	0802a944 	.word	0x0802a944
 800d07c:	0802a958 	.word	0x0802a958
 800d080:	0802a96c 	.word	0x0802a96c
 800d084:	0802a998 	.word	0x0802a998
 800d088:	0802a9a8 	.word	0x0802a9a8
 800d08c:	0802a9c4 	.word	0x0802a9c4
	}

	Temp_Siemens_RX_st.DesSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800d090:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d094:	b2d8      	uxtb	r0, r3
 800d096:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d09a:	f107 020c 	add.w	r2, r7, #12
 800d09e:	441a      	add	r2, r3
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	2108      	movs	r1, #8
 800d0a4:	f002 f86c 	bl	800f180 <Extract_Parity_Data>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	b2da      	uxtb	r2, r3
 800d0ac:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0b0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d0b4:	701a      	strb	r2, [r3, #0]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d0b6:	4b56      	ldr	r3, [pc, #344]	; (800d210 <Siemens_Data_Analyser+0x424>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f003 0301 	and.w	r3, r3, #1
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d02a      	beq.n	800d118 <Siemens_Data_Analyser+0x32c>
	{
		printf("Injecting INVALID_DES_SYS_TYPE\n");
 800d0c2:	4854      	ldr	r0, [pc, #336]	; (800d214 <Siemens_Data_Analyser+0x428>)
 800d0c4:	f019 fe2e 	bl	8026d24 <puts>
		Temp_Siemens_RX_st.DesSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800d0c8:	4853      	ldr	r0, [pc, #332]	; (800d218 <Siemens_Data_Analyser+0x42c>)
 800d0ca:	f011 fa37 	bl	801e53c <HAL_RNG_GetRandomNumber>
 800d0ce:	4601      	mov	r1, r0
 800d0d0:	4b52      	ldr	r3, [pc, #328]	; (800d21c <Siemens_Data_Analyser+0x430>)
 800d0d2:	fba3 2301 	umull	r2, r3, r3, r1
 800d0d6:	09da      	lsrs	r2, r3, #7
 800d0d8:	4613      	mov	r3, r2
 800d0da:	021b      	lsls	r3, r3, #8
 800d0dc:	1a9b      	subs	r3, r3, r2
 800d0de:	1aca      	subs	r2, r1, r3
 800d0e0:	b2d2      	uxtb	r2, r2
 800d0e2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0e6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d0ea:	701a      	strb	r2, [r3, #0]
		if(Temp_Siemens_RX_st.DesSysType == EI_data.Siemens_st.DestSysType)
 800d0ec:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0f0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d0f4:	781a      	ldrb	r2, [r3, #0]
 800d0f6:	4b4a      	ldr	r3, [pc, #296]	; (800d220 <Siemens_Data_Analyser+0x434>)
 800d0f8:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d10b      	bne.n	800d118 <Siemens_Data_Analyser+0x32c>
		{
			Temp_Siemens_RX_st.DesSysType += 4;
 800d100:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d104:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	3304      	adds	r3, #4
 800d10c:	b2da      	uxtb	r2, r3
 800d10e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d112:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d116:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DesSysType != EI_data.Siemens_st.DestSysType)
 800d118:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d11c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d120:	781a      	ldrb	r2, [r3, #0]
 800d122:	4b3f      	ldr	r3, [pc, #252]	; (800d220 <Siemens_Data_Analyser+0x434>)
 800d124:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800d128:	429a      	cmp	r2, r3
 800d12a:	d015      	beq.n	800d158 <Siemens_Data_Analyser+0x36c>
	{
		printf("Destination System Type Not Matched\n");
 800d12c:	483d      	ldr	r0, [pc, #244]	; (800d224 <Siemens_Data_Analyser+0x438>)
 800d12e:	f019 fdf9 	bl	8026d24 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DesSysType);
 800d132:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d136:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	4619      	mov	r1, r3
 800d13e:	483a      	ldr	r0, [pc, #232]	; (800d228 <Siemens_Data_Analyser+0x43c>)
 800d140:	f019 fd54 	bl	8026bec <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestSysType);
 800d144:	4b36      	ldr	r3, [pc, #216]	; (800d220 <Siemens_Data_Analyser+0x434>)
 800d146:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800d14a:	4619      	mov	r1, r3
 800d14c:	4837      	ldr	r0, [pc, #220]	; (800d22c <Siemens_Data_Analyser+0x440>)
 800d14e:	f019 fd4d 	bl	8026bec <iprintf>
		RejectPacketFlag = 1;
 800d152:	2301      	movs	r3, #1
 800d154:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Des_type:%u\n",Temp_Siemens_RX_st.dst_sys_typ);
	BITSTUFFINC(8);//Destination System Type
 800d158:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d15c:	3308      	adds	r3, #8
 800d15e:	2b00      	cmp	r3, #0
 800d160:	da00      	bge.n	800d164 <Siemens_Data_Analyser+0x378>
 800d162:	3307      	adds	r3, #7
 800d164:	10db      	asrs	r3, r3, #3
 800d166:	b29a      	uxth	r2, r3
 800d168:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d16c:	4413      	add	r3, r2
 800d16e:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d172:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d176:	3308      	adds	r3, #8
 800d178:	b29b      	uxth	r3, r3
 800d17a:	b21b      	sxth	r3, r3
 800d17c:	425a      	negs	r2, r3
 800d17e:	f003 0307 	and.w	r3, r3, #7
 800d182:	f002 0207 	and.w	r2, r2, #7
 800d186:	bf58      	it	pl
 800d188:	4253      	negpl	r3, r2
 800d18a:	b21b      	sxth	r3, r3
 800d18c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800d190:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d194:	b2d8      	uxtb	r0, r3
 800d196:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d19a:	f107 020c 	add.w	r2, r7, #12
 800d19e:	441a      	add	r2, r3
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	2118      	movs	r1, #24
 800d1a4:	f001 ffec 	bl	800f180 <Extract_Parity_Data>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1b0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1b4:	605a      	str	r2, [r3, #4]

	if(Temp_Siemens_RX_st.DestAddr != -1)
 800d1b6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1ba:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c4:	d036      	beq.n	800d234 <Siemens_Data_Analyser+0x448>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800d1c6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1ca:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800d1ce:	4a18      	ldr	r2, [pc, #96]	; (800d230 <Siemens_Data_Analyser+0x444>)
 800d1d0:	8812      	ldrh	r2, [r2, #0]
 800d1d2:	801a      	strh	r2, [r3, #0]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800d1d8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d1dc:	f107 020c 	add.w	r2, r7, #12
 800d1e0:	4413      	add	r3, r2
 800d1e2:	f107 0208 	add.w	r2, r7, #8
 800d1e6:	2103      	movs	r1, #3
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f000 fd4d 	bl	800dc88 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtDestAddr,&ExtractBuffer, 3);
 800d1ee:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1f2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1f6:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800d1fa:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
 800d1fe:	3308      	adds	r3, #8
 800d200:	6812      	ldr	r2, [r2, #0]
 800d202:	4611      	mov	r1, r2
 800d204:	8019      	strh	r1, [r3, #0]
 800d206:	3302      	adds	r3, #2
 800d208:	0c12      	lsrs	r2, r2, #16
 800d20a:	701a      	strb	r2, [r3, #0]
 800d20c:	e015      	b.n	800d23a <Siemens_Data_Analyser+0x44e>
 800d20e:	bf00      	nop
 800d210:	20004c78 	.word	0x20004c78
 800d214:	0802a9e0 	.word	0x0802a9e0
 800d218:	2000bcf8 	.word	0x2000bcf8
 800d21c:	80808081 	.word	0x80808081
 800d220:	20000504 	.word	0x20000504
 800d224:	0802aa00 	.word	0x0802aa00
 800d228:	0802aa24 	.word	0x0802aa24
 800d22c:	0802aa34 	.word	0x0802aa34
 800d230:	0802abb8 	.word	0x0802abb8
	}
	else
	{
		RejectPacketFlag = 1;
 800d234:	2301      	movs	r3, #1
 800d236:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	//			Temp_Siemens_RX_st.DesSysType += 4;
	//		}
	//	}
	//#endif

	if(Temp_Siemens_RX_st.ExtDestAddr != EI_data.Siemens_st.DestAddress)
 800d23a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d23e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d242:	689a      	ldr	r2, [r3, #8]
 800d244:	4bbf      	ldr	r3, [pc, #764]	; (800d544 <Siemens_Data_Analyser+0x758>)
 800d246:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d015      	beq.n	800d27a <Siemens_Data_Analyser+0x48e>
	{
		printf("Destination Address Not Matched\n");
 800d24e:	48be      	ldr	r0, [pc, #760]	; (800d548 <Siemens_Data_Analyser+0x75c>)
 800d250:	f019 fd68 	bl	8026d24 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.DestAddr);
 800d254:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d258:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	4619      	mov	r1, r3
 800d260:	48ba      	ldr	r0, [pc, #744]	; (800d54c <Siemens_Data_Analyser+0x760>)
 800d262:	f019 fcc3 	bl	8026bec <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.DestAddress);
 800d266:	4bb7      	ldr	r3, [pc, #732]	; (800d544 <Siemens_Data_Analyser+0x758>)
 800d268:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800d26c:	4619      	mov	r1, r3
 800d26e:	48b8      	ldr	r0, [pc, #736]	; (800d550 <Siemens_Data_Analyser+0x764>)
 800d270:	f019 fcbc 	bl	8026bec <iprintf>
		RejectPacketFlag = 1;
 800d274:	2301      	movs	r3, #1
 800d276:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_add:%lu\n",Temp_Siemens_RX_st.dst_add);
	BITSTUFFINC(24);//Destination Address
 800d27a:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d27e:	3318      	adds	r3, #24
 800d280:	2b00      	cmp	r3, #0
 800d282:	da00      	bge.n	800d286 <Siemens_Data_Analyser+0x49a>
 800d284:	3307      	adds	r3, #7
 800d286:	10db      	asrs	r3, r3, #3
 800d288:	b29a      	uxth	r2, r3
 800d28a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d28e:	4413      	add	r3, r2
 800d290:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d294:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d298:	3318      	adds	r3, #24
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	b21b      	sxth	r3, r3
 800d29e:	425a      	negs	r2, r3
 800d2a0:	f003 0307 	and.w	r3, r3, #7
 800d2a4:	f002 0207 	and.w	r2, r2, #7
 800d2a8:	bf58      	it	pl
 800d2aa:	4253      	negpl	r3, r2
 800d2ac:	b21b      	sxth	r3, r3
 800d2ae:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SrcSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800d2b2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d2b6:	b2d8      	uxtb	r0, r3
 800d2b8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d2bc:	f107 020c 	add.w	r2, r7, #12
 800d2c0:	441a      	add	r2, r3
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	2108      	movs	r1, #8
 800d2c6:	f001 ff5b 	bl	800f180 <Extract_Parity_Data>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	b2da      	uxtb	r2, r3
 800d2ce:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d2d2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d2d6:	731a      	strb	r2, [r3, #12]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d2d8:	4b9e      	ldr	r3, [pc, #632]	; (800d554 <Siemens_Data_Analyser+0x768>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	085b      	lsrs	r3, r3, #1
 800d2de:	f003 0301 	and.w	r3, r3, #1
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d02a      	beq.n	800d33c <Siemens_Data_Analyser+0x550>
	{
		printf("Injecting INVALID_SRC_SYS_TYPE\n");
 800d2e6:	489c      	ldr	r0, [pc, #624]	; (800d558 <Siemens_Data_Analyser+0x76c>)
 800d2e8:	f019 fd1c 	bl	8026d24 <puts>
		Temp_Siemens_RX_st.SrcSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800d2ec:	489b      	ldr	r0, [pc, #620]	; (800d55c <Siemens_Data_Analyser+0x770>)
 800d2ee:	f011 f925 	bl	801e53c <HAL_RNG_GetRandomNumber>
 800d2f2:	4601      	mov	r1, r0
 800d2f4:	4b9a      	ldr	r3, [pc, #616]	; (800d560 <Siemens_Data_Analyser+0x774>)
 800d2f6:	fba3 2301 	umull	r2, r3, r3, r1
 800d2fa:	09da      	lsrs	r2, r3, #7
 800d2fc:	4613      	mov	r3, r2
 800d2fe:	021b      	lsls	r3, r3, #8
 800d300:	1a9b      	subs	r3, r3, r2
 800d302:	1aca      	subs	r2, r1, r3
 800d304:	b2d2      	uxtb	r2, r2
 800d306:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d30a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d30e:	731a      	strb	r2, [r3, #12]
		if(Temp_Siemens_RX_st.SrcSysType == EI_data.Siemens_st.SourceSysType)
 800d310:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d314:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d318:	7b1a      	ldrb	r2, [r3, #12]
 800d31a:	4b8a      	ldr	r3, [pc, #552]	; (800d544 <Siemens_Data_Analyser+0x758>)
 800d31c:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800d320:	429a      	cmp	r2, r3
 800d322:	d10b      	bne.n	800d33c <Siemens_Data_Analyser+0x550>
		{
			Temp_Siemens_RX_st.SrcSysType += 4;
 800d324:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d328:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d32c:	7b1b      	ldrb	r3, [r3, #12]
 800d32e:	3304      	adds	r3, #4
 800d330:	b2da      	uxtb	r2, r3
 800d332:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d336:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d33a:	731a      	strb	r2, [r3, #12]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SrcSysType != EI_data.Siemens_st.SourceSysType)
 800d33c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d340:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d344:	7b1a      	ldrb	r2, [r3, #12]
 800d346:	4b7f      	ldr	r3, [pc, #508]	; (800d544 <Siemens_Data_Analyser+0x758>)
 800d348:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d015      	beq.n	800d37c <Siemens_Data_Analyser+0x590>
	{
		printf("Source System Type Not Matched\n");
 800d350:	4884      	ldr	r0, [pc, #528]	; (800d564 <Siemens_Data_Analyser+0x778>)
 800d352:	f019 fce7 	bl	8026d24 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SrcSysType);
 800d356:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d35a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d35e:	7b1b      	ldrb	r3, [r3, #12]
 800d360:	4619      	mov	r1, r3
 800d362:	4881      	ldr	r0, [pc, #516]	; (800d568 <Siemens_Data_Analyser+0x77c>)
 800d364:	f019 fc42 	bl	8026bec <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourceSysType);
 800d368:	4b76      	ldr	r3, [pc, #472]	; (800d544 <Siemens_Data_Analyser+0x758>)
 800d36a:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800d36e:	4619      	mov	r1, r3
 800d370:	487e      	ldr	r0, [pc, #504]	; (800d56c <Siemens_Data_Analyser+0x780>)
 800d372:	f019 fc3b 	bl	8026bec <iprintf>
		RejectPacketFlag = 1;
 800d376:	2301      	movs	r3, #1
 800d378:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Src_sys_type:%u\n",Temp_Siemens_RX_st.Src_sys_type);
	BITSTUFFINC(8);//Source System Type
 800d37c:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d380:	3308      	adds	r3, #8
 800d382:	2b00      	cmp	r3, #0
 800d384:	da00      	bge.n	800d388 <Siemens_Data_Analyser+0x59c>
 800d386:	3307      	adds	r3, #7
 800d388:	10db      	asrs	r3, r3, #3
 800d38a:	b29a      	uxth	r2, r3
 800d38c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d390:	4413      	add	r3, r2
 800d392:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d396:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d39a:	3308      	adds	r3, #8
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	b21b      	sxth	r3, r3
 800d3a0:	425a      	negs	r2, r3
 800d3a2:	f003 0307 	and.w	r3, r3, #7
 800d3a6:	f002 0207 	and.w	r2, r2, #7
 800d3aa:	bf58      	it	pl
 800d3ac:	4253      	negpl	r3, r2
 800d3ae:	b21b      	sxth	r3, r3
 800d3b0:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourceAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800d3b4:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d3b8:	b2d8      	uxtb	r0, r3
 800d3ba:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d3be:	f107 020c 	add.w	r2, r7, #12
 800d3c2:	441a      	add	r2, r3
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	2118      	movs	r1, #24
 800d3c8:	f001 feda 	bl	800f180 <Extract_Parity_Data>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d3d4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d3d8:	611a      	str	r2, [r3, #16]

	if(Temp_Siemens_RX_st.SourceAddr != -1)
 800d3da:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d3de:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d3e2:	691b      	ldr	r3, [r3, #16]
 800d3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3e8:	d021      	beq.n	800d42e <Siemens_Data_Analyser+0x642>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800d3ea:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d3ee:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800d3f2:	4a5f      	ldr	r2, [pc, #380]	; (800d570 <Siemens_Data_Analyser+0x784>)
 800d3f4:	8812      	ldrh	r2, [r2, #0]
 800d3f6:	801a      	strh	r2, [r3, #0]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800d3fc:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d400:	f107 020c 	add.w	r2, r7, #12
 800d404:	4413      	add	r3, r2
 800d406:	1d3a      	adds	r2, r7, #4
 800d408:	2103      	movs	r1, #3
 800d40a:	4618      	mov	r0, r3
 800d40c:	f000 fc3c 	bl	800dc88 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtSourceAddr,&ExtractBuffer, 3);
 800d410:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d414:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d418:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800d41c:	f6a2 2254 	subw	r2, r2, #2644	; 0xa54
 800d420:	3314      	adds	r3, #20
 800d422:	6812      	ldr	r2, [r2, #0]
 800d424:	4611      	mov	r1, r2
 800d426:	8019      	strh	r1, [r3, #0]
 800d428:	3302      	adds	r3, #2
 800d42a:	0c12      	lsrs	r2, r2, #16
 800d42c:	701a      	strb	r2, [r3, #0]
	}

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d42e:	4b49      	ldr	r3, [pc, #292]	; (800d554 <Siemens_Data_Analyser+0x768>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	089b      	lsrs	r3, r3, #2
 800d434:	f003 0301 	and.w	r3, r3, #1
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d02c      	beq.n	800d496 <Siemens_Data_Analyser+0x6aa>
	{
		printf("Injecting INVALID_SRC_ADDR\n");
 800d43c:	484d      	ldr	r0, [pc, #308]	; (800d574 <Siemens_Data_Analyser+0x788>)
 800d43e:	f019 fc71 	bl	8026d24 <puts>
		Temp_Siemens_RX_st.SourceAddr = HAL_RNG_GetRandomNumber(&hrng) % 0xffffff;
 800d442:	4846      	ldr	r0, [pc, #280]	; (800d55c <Siemens_Data_Analyser+0x770>)
 800d444:	f011 f87a 	bl	801e53c <HAL_RNG_GetRandomNumber>
 800d448:	4601      	mov	r1, r0
 800d44a:	f240 1301 	movw	r3, #257	; 0x101
 800d44e:	fba3 2301 	umull	r2, r3, r3, r1
 800d452:	1aca      	subs	r2, r1, r3
 800d454:	0852      	lsrs	r2, r2, #1
 800d456:	4413      	add	r3, r2
 800d458:	0dda      	lsrs	r2, r3, #23
 800d45a:	4613      	mov	r3, r2
 800d45c:	061b      	lsls	r3, r3, #24
 800d45e:	1a9b      	subs	r3, r3, r2
 800d460:	1aca      	subs	r2, r1, r3
 800d462:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d466:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d46a:	611a      	str	r2, [r3, #16]
		if(Temp_Siemens_RX_st.ExtSourceAddr == EI_data.Siemens_st.SourceAddress)
 800d46c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d470:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d474:	695a      	ldr	r2, [r3, #20]
 800d476:	4b33      	ldr	r3, [pc, #204]	; (800d544 <Siemens_Data_Analyser+0x758>)
 800d478:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d10a      	bne.n	800d496 <Siemens_Data_Analyser+0x6aa>
		{
			Temp_Siemens_RX_st.ExtSourceAddr += 4;
 800d480:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d484:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d488:	695b      	ldr	r3, [r3, #20]
 800d48a:	1d1a      	adds	r2, r3, #4
 800d48c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d490:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d494:	615a      	str	r2, [r3, #20]
		}
	}
#endif


	if(Temp_Siemens_RX_st.ExtSourceAddr != EI_data.Siemens_st.SourceAddress)
 800d496:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d49a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d49e:	695a      	ldr	r2, [r3, #20]
 800d4a0:	4b28      	ldr	r3, [pc, #160]	; (800d544 <Siemens_Data_Analyser+0x758>)
 800d4a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d015      	beq.n	800d4d6 <Siemens_Data_Analyser+0x6ea>
	{
		printf("Source Address Not Matched\n");
 800d4aa:	4833      	ldr	r0, [pc, #204]	; (800d578 <Siemens_Data_Analyser+0x78c>)
 800d4ac:	f019 fc3a 	bl	8026d24 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.ExtSourceAddr);
 800d4b0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d4b4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d4b8:	695b      	ldr	r3, [r3, #20]
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	4823      	ldr	r0, [pc, #140]	; (800d54c <Siemens_Data_Analyser+0x760>)
 800d4be:	f019 fb95 	bl	8026bec <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.SourceAddress);
 800d4c2:	4b20      	ldr	r3, [pc, #128]	; (800d544 <Siemens_Data_Analyser+0x758>)
 800d4c4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	4821      	ldr	r0, [pc, #132]	; (800d550 <Siemens_Data_Analyser+0x764>)
 800d4cc:	f019 fb8e 	bl	8026bec <iprintf>
		RejectPacketFlag = 1;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_add:%lu\n",Temp_Siemens_RX_st.src_add);
	BITSTUFFINC(24);//Source Address
 800d4d6:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d4da:	3318      	adds	r3, #24
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	da00      	bge.n	800d4e2 <Siemens_Data_Analyser+0x6f6>
 800d4e0:	3307      	adds	r3, #7
 800d4e2:	10db      	asrs	r3, r3, #3
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d4ea:	4413      	add	r3, r2
 800d4ec:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d4f0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d4f4:	3318      	adds	r3, #24
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	b21b      	sxth	r3, r3
 800d4fa:	425a      	negs	r2, r3
 800d4fc:	f003 0307 	and.w	r3, r3, #7
 800d500:	f002 0207 	and.w	r2, r2, #7
 800d504:	bf58      	it	pl
 800d506:	4253      	negpl	r3, r2
 800d508:	b21b      	sxth	r3, r3
 800d50a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.ProdDataVer = Extract_Parity_Data(ucBit,8,&Buff[ucByte],EVEN_PARITY);
 800d50e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d512:	b2d8      	uxtb	r0, r3
 800d514:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d518:	f107 020c 	add.w	r2, r7, #12
 800d51c:	441a      	add	r2, r3
 800d51e:	2300      	movs	r3, #0
 800d520:	2108      	movs	r1, #8
 800d522:	f001 fe2d 	bl	800f180 <Extract_Parity_Data>
 800d526:	4603      	mov	r3, r0
 800d528:	b2da      	uxtb	r2, r3
 800d52a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d52e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d532:	761a      	strb	r2, [r3, #24]
	//	printf("prod_data_ver:%u\n",Temp_Siemens_RX_st.prod_data_ver);
	BITSTUFFINC(8);//Product Data Version
 800d534:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d538:	3308      	adds	r3, #8
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	da1e      	bge.n	800d57c <Siemens_Data_Analyser+0x790>
 800d53e:	3307      	adds	r3, #7
 800d540:	e01c      	b.n	800d57c <Siemens_Data_Analyser+0x790>
 800d542:	bf00      	nop
 800d544:	20000504 	.word	0x20000504
 800d548:	0802aa44 	.word	0x0802aa44
 800d54c:	0802aa64 	.word	0x0802aa64
 800d550:	0802aa74 	.word	0x0802aa74
 800d554:	20004c78 	.word	0x20004c78
 800d558:	0802aa84 	.word	0x0802aa84
 800d55c:	2000bcf8 	.word	0x2000bcf8
 800d560:	80808081 	.word	0x80808081
 800d564:	0802aaa4 	.word	0x0802aaa4
 800d568:	0802aa24 	.word	0x0802aa24
 800d56c:	0802aa34 	.word	0x0802aa34
 800d570:	0802abb8 	.word	0x0802abb8
 800d574:	0802aac4 	.word	0x0802aac4
 800d578:	0802aae0 	.word	0x0802aae0
 800d57c:	10db      	asrs	r3, r3, #3
 800d57e:	b29a      	uxth	r2, r3
 800d580:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d584:	4413      	add	r3, r2
 800d586:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d58a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d58e:	3308      	adds	r3, #8
 800d590:	b29b      	uxth	r3, r3
 800d592:	b21b      	sxth	r3, r3
 800d594:	425a      	negs	r2, r3
 800d596:	f003 0307 	and.w	r3, r3, #7
 800d59a:	f002 0207 	and.w	r2, r2, #7
 800d59e:	bf58      	it	pl
 800d5a0:	4253      	negpl	r3, r2
 800d5a2:	b21b      	sxth	r3, r3
 800d5a4:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.CompIndex = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800d5a8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d5ac:	b2d8      	uxtb	r0, r3
 800d5ae:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d5b2:	f107 020c 	add.w	r2, r7, #12
 800d5b6:	441a      	add	r2, r3
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	2108      	movs	r1, #8
 800d5bc:	f001 fde0 	bl	800f180 <Extract_Parity_Data>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d5c8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d5cc:	765a      	strb	r2, [r3, #25]
	//	printf("comp_index:%u\n",Temp_Siemens_RX_st.comp_index);
	BITSTUFFINC(8);//Compatability Index
 800d5ce:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d5d2:	3308      	adds	r3, #8
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	da00      	bge.n	800d5da <Siemens_Data_Analyser+0x7ee>
 800d5d8:	3307      	adds	r3, #7
 800d5da:	10db      	asrs	r3, r3, #3
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d5e2:	4413      	add	r3, r2
 800d5e4:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d5e8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d5ec:	3308      	adds	r3, #8
 800d5ee:	b29b      	uxth	r3, r3
 800d5f0:	b21b      	sxth	r3, r3
 800d5f2:	425a      	negs	r2, r3
 800d5f4:	f003 0307 	and.w	r3, r3, #7
 800d5f8:	f002 0207 	and.w	r2, r2, #7
 800d5fc:	bf58      	it	pl
 800d5fe:	4253      	negpl	r3, r2
 800d600:	b21b      	sxth	r3, r3
 800d602:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestPort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800d606:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d60a:	b2d8      	uxtb	r0, r3
 800d60c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d610:	f107 020c 	add.w	r2, r7, #12
 800d614:	441a      	add	r2, r3
 800d616:	2302      	movs	r3, #2
 800d618:	2108      	movs	r1, #8
 800d61a:	f001 fdb1 	bl	800f180 <Extract_Parity_Data>
 800d61e:	4603      	mov	r3, r0
 800d620:	b2da      	uxtb	r2, r3
 800d622:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d626:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d62a:	769a      	strb	r2, [r3, #26]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d62c:	4bab      	ldr	r3, [pc, #684]	; (800d8dc <Siemens_Data_Analyser+0xaf0>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	08db      	lsrs	r3, r3, #3
 800d632:	f003 0301 	and.w	r3, r3, #1
 800d636:	2b00      	cmp	r3, #0
 800d638:	d02a      	beq.n	800d690 <Siemens_Data_Analyser+0x8a4>
	{
		printf("Injecting INVALID_DES_PORT\n");
 800d63a:	48a9      	ldr	r0, [pc, #676]	; (800d8e0 <Siemens_Data_Analyser+0xaf4>)
 800d63c:	f019 fb72 	bl	8026d24 <puts>
		Temp_Siemens_RX_st.DestPort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800d640:	48a8      	ldr	r0, [pc, #672]	; (800d8e4 <Siemens_Data_Analyser+0xaf8>)
 800d642:	f010 ff7b 	bl	801e53c <HAL_RNG_GetRandomNumber>
 800d646:	4601      	mov	r1, r0
 800d648:	4ba7      	ldr	r3, [pc, #668]	; (800d8e8 <Siemens_Data_Analyser+0xafc>)
 800d64a:	fba3 2301 	umull	r2, r3, r3, r1
 800d64e:	09da      	lsrs	r2, r3, #7
 800d650:	4613      	mov	r3, r2
 800d652:	021b      	lsls	r3, r3, #8
 800d654:	1a9b      	subs	r3, r3, r2
 800d656:	1aca      	subs	r2, r1, r3
 800d658:	b2d2      	uxtb	r2, r2
 800d65a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d65e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d662:	769a      	strb	r2, [r3, #26]
		if(Temp_Siemens_RX_st.DestPort == EI_data.Siemens_st.DestPort)
 800d664:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d668:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d66c:	7e9a      	ldrb	r2, [r3, #26]
 800d66e:	4b9f      	ldr	r3, [pc, #636]	; (800d8ec <Siemens_Data_Analyser+0xb00>)
 800d670:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d674:	429a      	cmp	r2, r3
 800d676:	d10b      	bne.n	800d690 <Siemens_Data_Analyser+0x8a4>
		{
			Temp_Siemens_RX_st.DestPort += 4;
 800d678:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d67c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d680:	7e9b      	ldrb	r3, [r3, #26]
 800d682:	3304      	adds	r3, #4
 800d684:	b2da      	uxtb	r2, r3
 800d686:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d68a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d68e:	769a      	strb	r2, [r3, #26]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DestPort != EI_data.Siemens_st.DestPort)
 800d690:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d694:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d698:	7e9a      	ldrb	r2, [r3, #26]
 800d69a:	4b94      	ldr	r3, [pc, #592]	; (800d8ec <Siemens_Data_Analyser+0xb00>)
 800d69c:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d015      	beq.n	800d6d0 <Siemens_Data_Analyser+0x8e4>
	{
		printf("Destination Port Not Matched\n");
 800d6a4:	4892      	ldr	r0, [pc, #584]	; (800d8f0 <Siemens_Data_Analyser+0xb04>)
 800d6a6:	f019 fb3d 	bl	8026d24 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DestPort);
 800d6aa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d6ae:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d6b2:	7e9b      	ldrb	r3, [r3, #26]
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	488f      	ldr	r0, [pc, #572]	; (800d8f4 <Siemens_Data_Analyser+0xb08>)
 800d6b8:	f019 fa98 	bl	8026bec <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestPort);
 800d6bc:	4b8b      	ldr	r3, [pc, #556]	; (800d8ec <Siemens_Data_Analyser+0xb00>)
 800d6be:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	488c      	ldr	r0, [pc, #560]	; (800d8f8 <Siemens_Data_Analyser+0xb0c>)
 800d6c6:	f019 fa91 	bl	8026bec <iprintf>
		RejectPacketFlag = 1;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_port:%u\n",Temp_Siemens_RX_st.dst_port);
	BITSTUFFINC(8); //Dest Port.
 800d6d0:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d6d4:	3308      	adds	r3, #8
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	da00      	bge.n	800d6dc <Siemens_Data_Analyser+0x8f0>
 800d6da:	3307      	adds	r3, #7
 800d6dc:	10db      	asrs	r3, r3, #3
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d6e4:	4413      	add	r3, r2
 800d6e6:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d6ea:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d6ee:	3308      	adds	r3, #8
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	b21b      	sxth	r3, r3
 800d6f4:	425a      	negs	r2, r3
 800d6f6:	f003 0307 	and.w	r3, r3, #7
 800d6fa:	f002 0207 	and.w	r2, r2, #7
 800d6fe:	bf58      	it	pl
 800d700:	4253      	negpl	r3, r2
 800d702:	b21b      	sxth	r3, r3
 800d704:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourcePort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800d708:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d70c:	b2d8      	uxtb	r0, r3
 800d70e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d712:	f107 020c 	add.w	r2, r7, #12
 800d716:	441a      	add	r2, r3
 800d718:	2302      	movs	r3, #2
 800d71a:	2108      	movs	r1, #8
 800d71c:	f001 fd30 	bl	800f180 <Extract_Parity_Data>
 800d720:	4603      	mov	r3, r0
 800d722:	b2da      	uxtb	r2, r3
 800d724:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d728:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d72c:	76da      	strb	r2, [r3, #27]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d72e:	4b6b      	ldr	r3, [pc, #428]	; (800d8dc <Siemens_Data_Analyser+0xaf0>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	091b      	lsrs	r3, r3, #4
 800d734:	f003 0301 	and.w	r3, r3, #1
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d02a      	beq.n	800d792 <Siemens_Data_Analyser+0x9a6>
	{
		printf("Injecting INVALID_SRC_PORT\n");
 800d73c:	486f      	ldr	r0, [pc, #444]	; (800d8fc <Siemens_Data_Analyser+0xb10>)
 800d73e:	f019 faf1 	bl	8026d24 <puts>
		Temp_Siemens_RX_st.SourcePort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800d742:	4868      	ldr	r0, [pc, #416]	; (800d8e4 <Siemens_Data_Analyser+0xaf8>)
 800d744:	f010 fefa 	bl	801e53c <HAL_RNG_GetRandomNumber>
 800d748:	4601      	mov	r1, r0
 800d74a:	4b67      	ldr	r3, [pc, #412]	; (800d8e8 <Siemens_Data_Analyser+0xafc>)
 800d74c:	fba3 2301 	umull	r2, r3, r3, r1
 800d750:	09da      	lsrs	r2, r3, #7
 800d752:	4613      	mov	r3, r2
 800d754:	021b      	lsls	r3, r3, #8
 800d756:	1a9b      	subs	r3, r3, r2
 800d758:	1aca      	subs	r2, r1, r3
 800d75a:	b2d2      	uxtb	r2, r2
 800d75c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d760:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d764:	76da      	strb	r2, [r3, #27]
		if(Temp_Siemens_RX_st.SourcePort == EI_data.Siemens_st.SourcePort)
 800d766:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d76a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d76e:	7eda      	ldrb	r2, [r3, #27]
 800d770:	4b5e      	ldr	r3, [pc, #376]	; (800d8ec <Siemens_Data_Analyser+0xb00>)
 800d772:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d776:	429a      	cmp	r2, r3
 800d778:	d10b      	bne.n	800d792 <Siemens_Data_Analyser+0x9a6>
		{
			Temp_Siemens_RX_st.SourcePort += 4;
 800d77a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d77e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d782:	7edb      	ldrb	r3, [r3, #27]
 800d784:	3304      	adds	r3, #4
 800d786:	b2da      	uxtb	r2, r3
 800d788:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d78c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d790:	76da      	strb	r2, [r3, #27]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SourcePort != EI_data.Siemens_st.SourcePort)
 800d792:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d796:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d79a:	7eda      	ldrb	r2, [r3, #27]
 800d79c:	4b53      	ldr	r3, [pc, #332]	; (800d8ec <Siemens_Data_Analyser+0xb00>)
 800d79e:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d015      	beq.n	800d7d2 <Siemens_Data_Analyser+0x9e6>
	{
		printf("Source Port Not Matched\n");
 800d7a6:	4856      	ldr	r0, [pc, #344]	; (800d900 <Siemens_Data_Analyser+0xb14>)
 800d7a8:	f019 fabc 	bl	8026d24 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SourcePort);
 800d7ac:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d7b0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d7b4:	7edb      	ldrb	r3, [r3, #27]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	484e      	ldr	r0, [pc, #312]	; (800d8f4 <Siemens_Data_Analyser+0xb08>)
 800d7ba:	f019 fa17 	bl	8026bec <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourcePort);
 800d7be:	4b4b      	ldr	r3, [pc, #300]	; (800d8ec <Siemens_Data_Analyser+0xb00>)
 800d7c0:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	484c      	ldr	r0, [pc, #304]	; (800d8f8 <Siemens_Data_Analyser+0xb0c>)
 800d7c8:	f019 fa10 	bl	8026bec <iprintf>
		RejectPacketFlag = 1;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_port:%u\n",Temp_Siemens_RX_st.src_port);
	BITSTUFFINC(8); // Source Port.
 800d7d2:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d7d6:	3308      	adds	r3, #8
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	da00      	bge.n	800d7de <Siemens_Data_Analyser+0x9f2>
 800d7dc:	3307      	adds	r3, #7
 800d7de:	10db      	asrs	r3, r3, #3
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d7e6:	4413      	add	r3, r2
 800d7e8:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d7ec:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d7f0:	3308      	adds	r3, #8
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	b21b      	sxth	r3, r3
 800d7f6:	425a      	negs	r2, r3
 800d7f8:	f003 0307 	and.w	r3, r3, #7
 800d7fc:	f002 0207 	and.w	r2, r2, #7
 800d800:	bf58      	it	pl
 800d802:	4253      	negpl	r3, r2
 800d804:	b21b      	sxth	r3, r3
 800d806:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.RxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800d80a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d80e:	b2d8      	uxtb	r0, r3
 800d810:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d814:	f107 020c 	add.w	r2, r7, #12
 800d818:	441a      	add	r2, r3
 800d81a:	2302      	movs	r3, #2
 800d81c:	2120      	movs	r1, #32
 800d81e:	f001 fcaf 	bl	800f180 <Extract_Parity_Data>
 800d822:	4603      	mov	r3, r0
 800d824:	461a      	mov	r2, r3
 800d826:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d82a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d82e:	61da      	str	r2, [r3, #28]
	//	printf("Rx_time_stamp:%lu\n",Temp_Siemens_RX_st.Rx_time_stamp);
	BITSTUFFINC(32);//RX_TIME STAMP
 800d830:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d834:	3320      	adds	r3, #32
 800d836:	2b00      	cmp	r3, #0
 800d838:	da00      	bge.n	800d83c <Siemens_Data_Analyser+0xa50>
 800d83a:	3307      	adds	r3, #7
 800d83c:	10db      	asrs	r3, r3, #3
 800d83e:	b29a      	uxth	r2, r3
 800d840:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d844:	4413      	add	r3, r2
 800d846:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d84a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d84e:	3320      	adds	r3, #32
 800d850:	b29b      	uxth	r3, r3
 800d852:	b21b      	sxth	r3, r3
 800d854:	425a      	negs	r2, r3
 800d856:	f003 0307 	and.w	r3, r3, #7
 800d85a:	f002 0207 	and.w	r2, r2, #7
 800d85e:	bf58      	it	pl
 800d860:	4253      	negpl	r3, r2
 800d862:	b21b      	sxth	r3, r3
 800d864:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.TxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800d868:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d86c:	b2d8      	uxtb	r0, r3
 800d86e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d872:	f107 020c 	add.w	r2, r7, #12
 800d876:	441a      	add	r2, r3
 800d878:	2302      	movs	r3, #2
 800d87a:	2120      	movs	r1, #32
 800d87c:	f001 fc80 	bl	800f180 <Extract_Parity_Data>
 800d880:	4603      	mov	r3, r0
 800d882:	461a      	mov	r2, r3
 800d884:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d888:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d88c:	621a      	str	r2, [r3, #32]
	//	printf("Tx_time_stamp:%lu\n",Temp_Siemens_RX_st.Tx_time_stamp);
	BITSTUFFINC(32);//TX_TIME STAMP
 800d88e:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d892:	3320      	adds	r3, #32
 800d894:	2b00      	cmp	r3, #0
 800d896:	da00      	bge.n	800d89a <Siemens_Data_Analyser+0xaae>
 800d898:	3307      	adds	r3, #7
 800d89a:	10db      	asrs	r3, r3, #3
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d8a2:	4413      	add	r3, r2
 800d8a4:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d8a8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d8ac:	3320      	adds	r3, #32
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	b21b      	sxth	r3, r3
 800d8b2:	425a      	negs	r2, r3
 800d8b4:	f003 0307 	and.w	r3, r3, #7
 800d8b8:	f002 0207 	and.w	r2, r2, #7
 800d8bc:	bf58      	it	pl
 800d8be:	4253      	negpl	r3, r2
 800d8c0:	b21b      	sxth	r3, r3
 800d8c2:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	//TO DO WRITE DATA EXTRACTION
	App_data_Size = 0;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	printf("\n");
 800d8cc:	200a      	movs	r0, #10
 800d8ce:	f019 f9a5 	bl	8026c1c <putchar>
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800d8d2:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d8d6:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800d8da:	e052      	b.n	800d982 <Siemens_Data_Analyser+0xb96>
 800d8dc:	20004c78 	.word	0x20004c78
 800d8e0:	0802aafc 	.word	0x0802aafc
 800d8e4:	2000bcf8 	.word	0x2000bcf8
 800d8e8:	80808081 	.word	0x80808081
 800d8ec:	20000504 	.word	0x20000504
 800d8f0:	0802ab18 	.word	0x0802ab18
 800d8f4:	0802aa24 	.word	0x0802aa24
 800d8f8:	0802aa34 	.word	0x0802aa34
 800d8fc:	0802ab38 	.word	0x0802ab38
 800d900:	0802ab54 	.word	0x0802ab54
	{
		App_Data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
 800d904:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d908:	b2d8      	uxtb	r0, r3
 800d90a:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d90e:	f107 020c 	add.w	r2, r7, #12
 800d912:	441a      	add	r2, r3
 800d914:	2300      	movs	r3, #0
 800d916:	2108      	movs	r1, #8
 800d918:	f001 fc32 	bl	800f180 <Extract_Parity_Data>
 800d91c:	4601      	mov	r1, r0
 800d91e:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	; 0xa50
 800d922:	1c5a      	adds	r2, r3, #1
 800d924:	f8a7 2a50 	strh.w	r2, [r7, #2640]	; 0xa50
 800d928:	461a      	mov	r2, r3
 800d92a:	b2c9      	uxtb	r1, r1
 800d92c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d930:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800d934:	5499      	strb	r1, [r3, r2]
		//printf("D[%02u]:%02x|",App_data_Size,App_Data[App_data_Size]);
		//Temp_Siemens_RX_st.app_data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
		//Extract the Received application data into buffer and checking parity and Removing Parity.
		++App_data_Size; //This variable is to know the Latest Size of Received Application Data
 800d936:	f8b7 3a4e 	ldrh.w	r3, [r7, #2638]	; 0xa4e
 800d93a:	3301      	adds	r3, #1
 800d93c:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
		BITSTUFFINC(8);
 800d940:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d944:	3308      	adds	r3, #8
 800d946:	2b00      	cmp	r3, #0
 800d948:	da00      	bge.n	800d94c <Siemens_Data_Analyser+0xb60>
 800d94a:	3307      	adds	r3, #7
 800d94c:	10db      	asrs	r3, r3, #3
 800d94e:	b29a      	uxth	r2, r3
 800d950:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d954:	4413      	add	r3, r2
 800d956:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d95a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d95e:	3308      	adds	r3, #8
 800d960:	b29b      	uxth	r3, r3
 800d962:	b21b      	sxth	r3, r3
 800d964:	425a      	negs	r2, r3
 800d966:	f003 0307 	and.w	r3, r3, #7
 800d96a:	f002 0207 	and.w	r2, r2, #7
 800d96e:	bf58      	it	pl
 800d970:	4253      	negpl	r3, r2
 800d972:	b21b      	sxth	r3, r3
 800d974:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800d978:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d97c:	3301      	adds	r3, #1
 800d97e:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800d982:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d986:	b29b      	uxth	r3, r3
 800d988:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d8b9      	bhi.n	800d904 <Siemens_Data_Analyser+0xb18>
	}
	printf("\n");
 800d990:	200a      	movs	r0, #10
 800d992:	f019 f943 	bl	8026c1c <putchar>


	//	printf("App_data_Size:%u\n",App_data_Size);
	Temp_Siemens_RX_st.No_ofDataBytes = ExtractAppData(App_Data, App_data_Size, Temp_Siemens_RX_st.AppData);
 800d996:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800d99a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d99e:	f8b7 1a4e 	ldrh.w	r1, [r7, #2638]	; 0xa4e
 800d9a2:	f607 0334 	addw	r3, r7, #2100	; 0x834
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f000 f96e 	bl	800dc88 <ExtractAppData>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d9b4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d9b8:	849a      	strh	r2, [r3, #36]	; 0x24

	//	Temp_Siemens_RX_st.No_ofDataBytes = App_data_Size;

	TempApp_data_Size  = EI_data.Siemens_st.Booloutputs % 8;
 800d9ba:	4ba0      	ldr	r3, [pc, #640]	; (800dc3c <Siemens_Data_Analyser+0xe50>)
 800d9bc:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d9c0:	f003 0307 	and.w	r3, r3, #7
 800d9c4:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	if(TempApp_data_Size!= 0)
 800d9c8:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d008      	beq.n	800d9e2 <Siemens_Data_Analyser+0xbf6>
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800d9d0:	4b9a      	ldr	r3, [pc, #616]	; (800dc3c <Siemens_Data_Analyser+0xe50>)
 800d9d2:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d9d6:	08db      	lsrs	r3, r3, #3
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	3301      	adds	r3, #1
 800d9dc:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
 800d9e0:	e005      	b.n	800d9ee <Siemens_Data_Analyser+0xc02>
	}
	else
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs/8);
 800d9e2:	4b96      	ldr	r3, [pc, #600]	; (800dc3c <Siemens_Data_Analyser+0xe50>)
 800d9e4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d9e8:	08db      	lsrs	r3, r3, #3
 800d9ea:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	}


	if(Temp_Siemens_RX_st.No_ofDataBytes != TempApp_data_Size)
 800d9ee:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d9f2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d9f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9f8:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d02c      	beq.n	800da5a <Siemens_Data_Analyser+0xc6e>
	{
		printf("Application Data Not Matched\n");
 800da00:	488f      	ldr	r0, [pc, #572]	; (800dc40 <Siemens_Data_Analyser+0xe54>)
 800da02:	f019 f98f 	bl	8026d24 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.No_ofDataBytes);
 800da06:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800da0a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800da0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800da10:	4619      	mov	r1, r3
 800da12:	488c      	ldr	r0, [pc, #560]	; (800dc44 <Siemens_Data_Analyser+0xe58>)
 800da14:	f019 f8ea 	bl	8026bec <iprintf>
		printf("Expected:%u\n",TempApp_data_Size);
 800da18:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800da1c:	4619      	mov	r1, r3
 800da1e:	488a      	ldr	r0, [pc, #552]	; (800dc48 <Siemens_Data_Analyser+0xe5c>)
 800da20:	f019 f8e4 	bl	8026bec <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800da24:	4989      	ldr	r1, [pc, #548]	; (800dc4c <Siemens_Data_Analyser+0xe60>)
 800da26:	488a      	ldr	r0, [pc, #552]	; (800dc50 <Siemens_Data_Analyser+0xe64>)
 800da28:	f7f2 fc0a 	bl	8000240 <strcmp>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d002      	beq.n	800da38 <Siemens_Data_Analyser+0xc4c>
		{
			RejectPacketFlag = 1;
 800da32:	2301      	movs	r3, #1
 800da34:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
		}
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800da38:	4984      	ldr	r1, [pc, #528]	; (800dc4c <Siemens_Data_Analyser+0xe60>)
 800da3a:	4885      	ldr	r0, [pc, #532]	; (800dc50 <Siemens_Data_Analyser+0xe64>)
 800da3c:	f7f2 fc00 	bl	8000240 <strcmp>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d109      	bne.n	800da5a <Siemens_Data_Analyser+0xc6e>
		{
			EI_data.Siemens_st.Booloutputs = (Temp_Siemens_RX_st.No_ofDataBytes * 8);
 800da46:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800da4a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800da4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800da50:	00db      	lsls	r3, r3, #3
 800da52:	b29a      	uxth	r2, r3
 800da54:	4b79      	ldr	r3, [pc, #484]	; (800dc3c <Siemens_Data_Analyser+0xe50>)
 800da56:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
		}
	}

	if(RejectPacketFlag == 1)
 800da5a:	f897 3a4b 	ldrb.w	r3, [r7, #2635]	; 0xa4b
 800da5e:	2b01      	cmp	r3, #1
 800da60:	f000 80e6 	beq.w	800dc30 <Siemens_Data_Analyser+0xe44>
	{
		return;
	}

	VitalCRC = GetCRC16(0, Temp_Siemens_RX_st.AppData, App_data_Size); /* Calculating Application Data CRC */
 800da64:	f9b7 2a4e 	ldrsh.w	r2, [r7, #2638]	; 0xa4e
 800da68:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800da6c:	3326      	adds	r3, #38	; 0x26
 800da6e:	4619      	mov	r1, r3
 800da70:	2000      	movs	r0, #0
 800da72:	f008 fa69 	bl	8015f48 <GetCRC16>
 800da76:	4603      	mov	r3, r0
 800da78:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38

	Temp_Siemens_RX_st.crc = ExtractBits(0,16,&Buff[ucByte]); /* Extraction of Packet CRC */
 800da7c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800da80:	f107 020c 	add.w	r2, r7, #12
 800da84:	4413      	add	r3, r2
 800da86:	461a      	mov	r2, r3
 800da88:	2110      	movs	r1, #16
 800da8a:	2000      	movs	r0, #0
 800da8c:	f7f2 fdc2 	bl	8000614 <ExtractBits>
 800da90:	4603      	mov	r3, r0
 800da92:	b29a      	uxth	r2, r3
 800da94:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800da98:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800da9c:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226




	/* if Everything is Okay copy to Main Rx Structure */
	memset(&Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800daa0:	f44f 720a 	mov.w	r2, #552	; 0x228
 800daa4:	2100      	movs	r1, #0
 800daa6:	486b      	ldr	r0, [pc, #428]	; (800dc54 <Siemens_Data_Analyser+0xe68>)
 800daa8:	f018 ffb8 	bl	8026a1c <memset>
	memcpy(&Siemens_RX_st,&Temp_Siemens_RX_st,sizeof(SIEMENS_PKT_t));
 800daac:	4a69      	ldr	r2, [pc, #420]	; (800dc54 <Siemens_Data_Analyser+0xe68>)
 800daae:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800dab2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800dab6:	4610      	mov	r0, r2
 800dab8:	4619      	mov	r1, r3
 800daba:	f44f 730a 	mov.w	r3, #552	; 0x228
 800dabe:	461a      	mov	r2, r3
 800dac0:	f018 ff84 	bl	80269cc <memcpy>

	/* Send Reply to Received Packet */
	Form_Siemens_Reply();
 800dac4:	f000 f936 	bl	800dd34 <Form_Siemens_Reply>




	//	if( (RxTimeStampNotUpdatedCount <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)  ) /* Consider the Packet If our Time stamp is Updating only (or) up to Certain count */
	if( abs(RxTimeStampNotUpdatedCount - EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800dac8:	4b63      	ldr	r3, [pc, #396]	; (800dc58 <Siemens_Data_Analyser+0xe6c>)
 800daca:	881b      	ldrh	r3, [r3, #0]
 800dacc:	461a      	mov	r2, r3
 800dace:	4b5b      	ldr	r3, [pc, #364]	; (800dc3c <Siemens_Data_Analyser+0xe50>)
 800dad0:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800dad4:	1ad3      	subs	r3, r2, r3
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	bfb8      	it	lt
 800dada:	425b      	neglt	r3, r3
 800dadc:	461a      	mov	r2, r3
 800dade:	4b57      	ldr	r3, [pc, #348]	; (800dc3c <Siemens_Data_Analyser+0xe50>)
 800dae0:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d871      	bhi.n	800dbcc <Siemens_Data_Analyser+0xde0>
	{
		if(Prev_RxTimeStampSiemens != Temp_Siemens_RX_st.RxTimeStamp)
 800dae8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800daec:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800daf0:	69da      	ldr	r2, [r3, #28]
 800daf2:	4b5a      	ldr	r3, [pc, #360]	; (800dc5c <Siemens_Data_Analyser+0xe70>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d04c      	beq.n	800db94 <Siemens_Data_Analyser+0xda8>
		{
			/* Update Clocks if Any */
			//			printf("Updating...\n");
			SiemensClocks_st.LastReceiveClk = HAL_GetTick();
 800dafa:	f00c f86d 	bl	8019bd8 <HAL_GetTick>
 800dafe:	4603      	mov	r3, r0
 800db00:	4a57      	ldr	r2, [pc, #348]	; (800dc60 <Siemens_Data_Analyser+0xe74>)
 800db02:	60d3      	str	r3, [r2, #12]



			Prev_RxTimeStampSiemens = Temp_Siemens_RX_st.RxTimeStamp;
 800db04:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800db08:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800db0c:	69db      	ldr	r3, [r3, #28]
 800db0e:	4a53      	ldr	r2, [pc, #332]	; (800dc5c <Siemens_Data_Analyser+0xe70>)
 800db10:	6013      	str	r3, [r2, #0]
			RxTimeStampNotUpdatedCount = 0;
 800db12:	4b51      	ldr	r3, [pc, #324]	; (800dc58 <Siemens_Data_Analyser+0xe6c>)
 800db14:	2200      	movs	r2, #0
 800db16:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS Updating:%u\n",RxTimeStampNotUpdatedCount);
			if(SiemensMain_Relays_st.VitalCRC != VitalCRC)
 800db18:	4b52      	ldr	r3, [pc, #328]	; (800dc64 <Siemens_Data_Analyser+0xe78>)
 800db1a:	885b      	ldrh	r3, [r3, #2]
 800db1c:	f8b7 2a38 	ldrh.w	r2, [r7, #2616]	; 0xa38
 800db20:	429a      	cmp	r2, r3
 800db22:	d053      	beq.n	800dbcc <Siemens_Data_Analyser+0xde0>
			{
				memset(&SiemensMain_Relays_st,0,sizeof(VITAL_DATA_SHARING_t));
 800db24:	f44f 7201 	mov.w	r2, #516	; 0x204
 800db28:	2100      	movs	r1, #0
 800db2a:	484e      	ldr	r0, [pc, #312]	; (800dc64 <Siemens_Data_Analyser+0xe78>)
 800db2c:	f018 ff76 	bl	8026a1c <memset>
				memset(&VitalData2MIE_st,0,sizeof(VITAL_DATA_t));
 800db30:	f240 2202 	movw	r2, #514	; 0x202
 800db34:	2100      	movs	r1, #0
 800db36:	484c      	ldr	r0, [pc, #304]	; (800dc68 <Siemens_Data_Analyser+0xe7c>)
 800db38:	f018 ff70 	bl	8026a1c <memset>

				SiemensMain_Relays_st.VitalCRC = VitalCRC;
 800db3c:	4a49      	ldr	r2, [pc, #292]	; (800dc64 <Siemens_Data_Analyser+0xe78>)
 800db3e:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	; 0xa38
 800db42:	8053      	strh	r3, [r2, #2]
				SiemensMain_Relays_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800db44:	4b43      	ldr	r3, [pc, #268]	; (800dc54 <Siemens_Data_Analyser+0xe68>)
 800db46:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800db48:	4b46      	ldr	r3, [pc, #280]	; (800dc64 <Siemens_Data_Analyser+0xe78>)
 800db4a:	801a      	strh	r2, [r3, #0]
				memcpy(&SiemensMain_Relays_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800db4c:	4b41      	ldr	r3, [pc, #260]	; (800dc54 <Siemens_Data_Analyser+0xe68>)
 800db4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db50:	461a      	mov	r2, r3
 800db52:	4946      	ldr	r1, [pc, #280]	; (800dc6c <Siemens_Data_Analyser+0xe80>)
 800db54:	4846      	ldr	r0, [pc, #280]	; (800dc70 <Siemens_Data_Analyser+0xe84>)
 800db56:	f018 ff39 	bl	80269cc <memcpy>

				VitalData2MIE_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800db5a:	4b3e      	ldr	r3, [pc, #248]	; (800dc54 <Siemens_Data_Analyser+0xe68>)
 800db5c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800db5e:	4b42      	ldr	r3, [pc, #264]	; (800dc68 <Siemens_Data_Analyser+0xe7c>)
 800db60:	801a      	strh	r2, [r3, #0]
				memcpy(&VitalData2MIE_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800db62:	4b3c      	ldr	r3, [pc, #240]	; (800dc54 <Siemens_Data_Analyser+0xe68>)
 800db64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db66:	461a      	mov	r2, r3
 800db68:	4940      	ldr	r1, [pc, #256]	; (800dc6c <Siemens_Data_Analyser+0xe80>)
 800db6a:	4842      	ldr	r0, [pc, #264]	; (800dc74 <Siemens_Data_Analyser+0xe88>)
 800db6c:	f018 ff2e 	bl	80269cc <memcpy>

				if(SiemensClocks_st.MisMatchFlag == RESET)
 800db70:	4b3b      	ldr	r3, [pc, #236]	; (800dc60 <Siemens_Data_Analyser+0xe74>)
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d103      	bne.n	800db80 <Siemens_Data_Analyser+0xd94>
				{
#ifdef EI_1
					TransmitCanPkt(EI_PROCESS_DATA);
 800db78:	f240 1019 	movw	r0, #281	; 0x119
 800db7c:	f003 fac2 	bl	8011104 <TransmitCanPkt>
#endif
				}

#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800db80:	f240 2007 	movw	r0, #519	; 0x207
 800db84:	f003 fabe 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

				SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800db88:	f00c f826 	bl	8019bd8 <HAL_GetTick>
 800db8c:	4603      	mov	r3, r0
 800db8e:	4a34      	ldr	r2, [pc, #208]	; (800dc60 <Siemens_Data_Analyser+0xe74>)
 800db90:	6113      	str	r3, [r2, #16]
 800db92:	e01b      	b.n	800dbcc <Siemens_Data_Analyser+0xde0>

			}
		}
		else
		{
			RxTimeStampNotUpdatedCount++;
 800db94:	4b30      	ldr	r3, [pc, #192]	; (800dc58 <Siemens_Data_Analyser+0xe6c>)
 800db96:	881b      	ldrh	r3, [r3, #0]
 800db98:	3301      	adds	r3, #1
 800db9a:	b29a      	uxth	r2, r3
 800db9c:	4b2e      	ldr	r3, [pc, #184]	; (800dc58 <Siemens_Data_Analyser+0xe6c>)
 800db9e:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);

			if(RxTimeStampNotUpdatedCount >  EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800dba0:	4b2d      	ldr	r3, [pc, #180]	; (800dc58 <Siemens_Data_Analyser+0xe6c>)
 800dba2:	881b      	ldrh	r3, [r3, #0]
 800dba4:	461a      	mov	r2, r3
 800dba6:	4b25      	ldr	r3, [pc, #148]	; (800dc3c <Siemens_Data_Analyser+0xe50>)
 800dba8:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d90d      	bls.n	800dbcc <Siemens_Data_Analyser+0xde0>
			{
				printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);
 800dbb0:	4b29      	ldr	r3, [pc, #164]	; (800dc58 <Siemens_Data_Analyser+0xe6c>)
 800dbb2:	881b      	ldrh	r3, [r3, #0]
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	4830      	ldr	r0, [pc, #192]	; (800dc78 <Siemens_Data_Analyser+0xe8c>)
 800dbb8:	f019 f818 	bl	8026bec <iprintf>
				RxTimeStampNotUpdatedCount = EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount + 1; /* To Avoid Overflow */
 800dbbc:	4b1f      	ldr	r3, [pc, #124]	; (800dc3c <Siemens_Data_Analyser+0xe50>)
 800dbbe:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	b29a      	uxth	r2, r3
 800dbc8:	4b23      	ldr	r3, [pc, #140]	; (800dc58 <Siemens_Data_Analyser+0xe6c>)
 800dbca:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	Print_Siemens_MSG(&Temp_Siemens_RX_st,Buff,Size,RX);
 800dbcc:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	; 0xa36
 800dbd0:	f107 010c 	add.w	r1, r7, #12
 800dbd4:	f207 600c 	addw	r0, r7, #1548	; 0x60c
 800dbd8:	2302      	movs	r3, #2
 800dbda:	f000 fe43 	bl	800e864 <Print_Siemens_MSG>
	if(Siemens_tx_Buffer_st.Tx_Length > 0)
 800dbde:	4b27      	ldr	r3, [pc, #156]	; (800dc7c <Siemens_Data_Analyser+0xe90>)
 800dbe0:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d00d      	beq.n	800dc04 <Siemens_Data_Analyser+0xe18>
	{
		Print_Siemens_MSG(&Temp_SiemensTx_st,Siemens_tx_Buffer_st.Tx_Buff,Siemens_tx_Buffer_st.Tx_Length,TX);
 800dbe8:	4b24      	ldr	r3, [pc, #144]	; (800dc7c <Siemens_Data_Analyser+0xe90>)
 800dbea:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800dbee:	2301      	movs	r3, #1
 800dbf0:	4922      	ldr	r1, [pc, #136]	; (800dc7c <Siemens_Data_Analyser+0xe90>)
 800dbf2:	4823      	ldr	r0, [pc, #140]	; (800dc80 <Siemens_Data_Analyser+0xe94>)
 800dbf4:	f000 fe36 	bl	800e864 <Print_Siemens_MSG>
		memset(&Siemens_tx_Buffer_st,0,sizeof(SIEMENS_TX_PKT_t));
 800dbf8:	f240 6202 	movw	r2, #1538	; 0x602
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	481f      	ldr	r0, [pc, #124]	; (800dc7c <Siemens_Data_Analyser+0xe90>)
 800dc00:	f018 ff0c 	bl	8026a1c <memset>
	}

	Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount = RxTimeStampNotUpdatedCount;
 800dc04:	4b14      	ldr	r3, [pc, #80]	; (800dc58 <Siemens_Data_Analyser+0xe6c>)
 800dc06:	881a      	ldrh	r2, [r3, #0]
 800dc08:	4b1e      	ldr	r3, [pc, #120]	; (800dc84 <Siemens_Data_Analyser+0xe98>)
 800dc0a:	805a      	strh	r2, [r3, #2]
	Tx_Siemens_self_sharing_st.DataReceving = RECEIVING;
 800dc0c:	4b1d      	ldr	r3, [pc, #116]	; (800dc84 <Siemens_Data_Analyser+0xe98>)
 800dc0e:	2201      	movs	r2, #1
 800dc10:	701a      	strb	r2, [r3, #0]
	Tx_Siemens_self_sharing_st.MesgReceived = RECEIVED;
 800dc12:	4b1c      	ldr	r3, [pc, #112]	; (800dc84 <Siemens_Data_Analyser+0xe98>)
 800dc14:	2201      	movs	r2, #1
 800dc16:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 800dc18:	f240 2001 	movw	r0, #513	; 0x201
 800dc1c:	f003 fa72 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800dc20:	f00b ffda 	bl	8019bd8 <HAL_GetTick>
 800dc24:	4603      	mov	r3, r0
 800dc26:	4a0e      	ldr	r2, [pc, #56]	; (800dc60 <Siemens_Data_Analyser+0xe74>)
 800dc28:	6093      	str	r3, [r2, #8]

	return;
 800dc2a:	e002      	b.n	800dc32 <Siemens_Data_Analyser+0xe46>
		return;
 800dc2c:	bf00      	nop
 800dc2e:	e000      	b.n	800dc32 <Siemens_Data_Analyser+0xe46>
		return;
 800dc30:	bf00      	nop
}
 800dc32:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	20000504 	.word	0x20000504
 800dc40:	0802ab6c 	.word	0x0802ab6c
 800dc44:	0802aa24 	.word	0x0802aa24
 800dc48:	0802aa34 	.word	0x0802aa34
 800dc4c:	0802ab8c 	.word	0x0802ab8c
 800dc50:	20000505 	.word	0x20000505
 800dc54:	20003ffc 	.word	0x20003ffc
 800dc58:	200054bc 	.word	0x200054bc
 800dc5c:	200054b8 	.word	0x200054b8
 800dc60:	20004c8c 	.word	0x20004c8c
 800dc64:	20004eac 	.word	0x20004eac
 800dc68:	20004ca8 	.word	0x20004ca8
 800dc6c:	20004022 	.word	0x20004022
 800dc70:	20004eb0 	.word	0x20004eb0
 800dc74:	20004caa 	.word	0x20004caa
 800dc78:	0802ab98 	.word	0x0802ab98
 800dc7c:	20004674 	.word	0x20004674
 800dc80:	2000444c 	.word	0x2000444c
 800dc84:	20004c80 	.word	0x20004c80

0800dc88 <ExtractAppData>:

uint16_t ExtractAppData(uint8_t *MainBuffer, uint16_t MainBufferLength, uint8_t *ExtractBuffer)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b089      	sub	sp, #36	; 0x24
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	460b      	mov	r3, r1
 800dc92:	607a      	str	r2, [r7, #4]
 800dc94:	817b      	strh	r3, [r7, #10]
	uint16_t ExtractBufferByteIndex = 0;
 800dc96:	2300      	movs	r3, #0
 800dc98:	83fb      	strh	r3, [r7, #30]
	uint8_t ExtractBufferBitIndex = 0;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	777b      	strb	r3, [r7, #29]
	uint16_t TotalMainBits = (MainBufferLength * 8);
 800dc9e:	897b      	ldrh	r3, [r7, #10]
 800dca0:	00db      	lsls	r3, r3, #3
 800dca2:	833b      	strh	r3, [r7, #24]

	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800dca4:	2300      	movs	r3, #0
 800dca6:	837b      	strh	r3, [r7, #26]
 800dca8:	e039      	b.n	800dd1e <ExtractAppData+0x96>
	{
		int Temp = (Traverser / 8);
 800dcaa:	8b7b      	ldrh	r3, [r7, #26]
 800dcac:	08db      	lsrs	r3, r3, #3
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	617b      	str	r3, [r7, #20]
		int BitJump = (Traverser % 8);
 800dcb2:	8b7b      	ldrh	r3, [r7, #26]
 800dcb4:	f003 0307 	and.w	r3, r3, #7
 800dcb8:	613b      	str	r3, [r7, #16]
		if (BitJump == 7)
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	2b07      	cmp	r3, #7
 800dcbe:	d02a      	beq.n	800dd16 <ExtractAppData+0x8e>
		{
			continue;
		}
		if ((MainBuffer[Temp] >> (Traverser % 8)) & 1)
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	461a      	mov	r2, r3
 800dcca:	8b7b      	ldrh	r3, [r7, #26]
 800dccc:	f003 0307 	and.w	r3, r3, #7
 800dcd0:	fa42 f303 	asr.w	r3, r2, r3
 800dcd4:	f003 0301 	and.w	r3, r3, #1
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d010      	beq.n	800dcfe <ExtractAppData+0x76>
		{
			SET_BIT_USER(ExtractBufferBitIndex, ExtractBuffer[ExtractBufferByteIndex]);
 800dcdc:	8bfb      	ldrh	r3, [r7, #30]
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	4413      	add	r3, r2
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	b25a      	sxtb	r2, r3
 800dce6:	7f7b      	ldrb	r3, [r7, #29]
 800dce8:	2101      	movs	r1, #1
 800dcea:	fa01 f303 	lsl.w	r3, r1, r3
 800dcee:	b25b      	sxtb	r3, r3
 800dcf0:	4313      	orrs	r3, r2
 800dcf2:	b259      	sxtb	r1, r3
 800dcf4:	8bfb      	ldrh	r3, [r7, #30]
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	b2ca      	uxtb	r2, r1
 800dcfc:	701a      	strb	r2, [r3, #0]
		}
		++ExtractBufferBitIndex;
 800dcfe:	7f7b      	ldrb	r3, [r7, #29]
 800dd00:	3301      	adds	r3, #1
 800dd02:	777b      	strb	r3, [r7, #29]
		if (ExtractBufferBitIndex == 8)
 800dd04:	7f7b      	ldrb	r3, [r7, #29]
 800dd06:	2b08      	cmp	r3, #8
 800dd08:	d106      	bne.n	800dd18 <ExtractAppData+0x90>
		{
			ExtractBufferBitIndex = 0;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	777b      	strb	r3, [r7, #29]
			++ExtractBufferByteIndex;
 800dd0e:	8bfb      	ldrh	r3, [r7, #30]
 800dd10:	3301      	adds	r3, #1
 800dd12:	83fb      	strh	r3, [r7, #30]
 800dd14:	e000      	b.n	800dd18 <ExtractAppData+0x90>
			continue;
 800dd16:	bf00      	nop
	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800dd18:	8b7b      	ldrh	r3, [r7, #26]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	837b      	strh	r3, [r7, #26]
 800dd1e:	8b7a      	ldrh	r2, [r7, #26]
 800dd20:	8b3b      	ldrh	r3, [r7, #24]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d3c1      	bcc.n	800dcaa <ExtractAppData+0x22>
		}
	}
	return (ExtractBufferByteIndex);
 800dd26:	8bfb      	ldrh	r3, [r7, #30]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3724      	adds	r7, #36	; 0x24
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr

0800dd34 <Form_Siemens_Reply>:

void Form_Siemens_Reply(void)
{
 800dd34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd38:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800dd3c:	af04      	add	r7, sp, #16

	uint8_t Buffer[REPLY_MAX_SIZE] = {0,};
 800dd3e:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800dd42:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 800dd46:	2300      	movs	r3, #0
 800dd48:	6013      	str	r3, [r2, #0]
 800dd4a:	1d10      	adds	r0, r2, #4
 800dd4c:	f240 53fc 	movw	r3, #1532	; 0x5fc
 800dd50:	461a      	mov	r2, r3
 800dd52:	2100      	movs	r1, #0
 800dd54:	f018 fe62 	bl	8026a1c <memset>
	uint16_t App_data_Traverser = 0;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
	uint16_t Calc_CRC =0;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
	uint16_t Calc_Compliment_CRC = 0;
 800dd64:	2300      	movs	r3, #0
 800dd66:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
	uint16_t CRC_Compliment_Loc  = 0;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650
	BITSTUFFINIT(0,0);
 800dd70:	2300      	movs	r3, #0
 800dd72:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dd76:	2300      	movs	r3, #0
 800dd78:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	//	printf("\nSending Packet Data:\n");
	memset(&Siemens_TX_st,0,sizeof(SIEMENS_PKT_t));
 800dd7c:	f44f 720a 	mov.w	r2, #552	; 0x228
 800dd80:	2100      	movs	r1, #0
 800dd82:	48ba      	ldr	r0, [pc, #744]	; (800e06c <Form_Siemens_Reply+0x338>)
 800dd84:	f018 fe4a 	bl	8026a1c <memset>


	Siemens_TX_st.DesSysType = Siemens_RX_st.SrcSysType; //Destination System_Type
 800dd88:	4bb9      	ldr	r3, [pc, #740]	; (800e070 <Form_Siemens_Reply+0x33c>)
 800dd8a:	7b1b      	ldrb	r3, [r3, #12]
 800dd8c:	4ab7      	ldr	r2, [pc, #732]	; (800e06c <Form_Siemens_Reply+0x338>)
 800dd8e:	7013      	strb	r3, [r2, #0]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DesSysType,ODD_PARITY);
 800dd90:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dd94:	b2d8      	uxtb	r0, r3
 800dd96:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800dd9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dd9e:	1899      	adds	r1, r3, r2
 800dda0:	4bb2      	ldr	r3, [pc, #712]	; (800e06c <Form_Siemens_Reply+0x338>)
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	2200      	movs	r2, #0
 800dda8:	461c      	mov	r4, r3
 800ddaa:	4615      	mov	r5, r2
 800ddac:	2301      	movs	r3, #1
 800ddae:	9302      	str	r3, [sp, #8]
 800ddb0:	e9cd 4500 	strd	r4, r5, [sp]
 800ddb4:	460a      	mov	r2, r1
 800ddb6:	2108      	movs	r1, #8
 800ddb8:	f001 fb24 	bl	800f404 <Insert_cal_parity>
	//	printf("Dst_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800ddbc:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800ddc0:	3308      	adds	r3, #8
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	da00      	bge.n	800ddc8 <Form_Siemens_Reply+0x94>
 800ddc6:	3307      	adds	r3, #7
 800ddc8:	10db      	asrs	r3, r3, #3
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ddd0:	4413      	add	r3, r2
 800ddd2:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800ddd6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ddda:	3308      	adds	r3, #8
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	b21b      	sxth	r3, r3
 800dde0:	425a      	negs	r2, r3
 800dde2:	f003 0107 	and.w	r1, r3, #7
 800dde6:	f002 0307 	and.w	r3, r2, #7
 800ddea:	bf58      	it	pl
 800ddec:	4259      	negpl	r1, r3
 800ddee:	b20b      	sxth	r3, r1
 800ddf0:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.DestAddr = Siemens_RX_st.SourceAddr; //Destination Address
 800ddf4:	4b9e      	ldr	r3, [pc, #632]	; (800e070 <Form_Siemens_Reply+0x33c>)
 800ddf6:	691a      	ldr	r2, [r3, #16]
 800ddf8:	4b9c      	ldr	r3, [pc, #624]	; (800e06c <Form_Siemens_Reply+0x338>)
 800ddfa:	605a      	str	r2, [r3, #4]
	Siemens_TX_st.ExtDestAddr = Siemens_RX_st.ExtSourceAddr;
 800ddfc:	4b9c      	ldr	r3, [pc, #624]	; (800e070 <Form_Siemens_Reply+0x33c>)
 800ddfe:	695a      	ldr	r2, [r3, #20]
 800de00:	4b9a      	ldr	r3, [pc, #616]	; (800e06c <Form_Siemens_Reply+0x338>)
 800de02:	609a      	str	r2, [r3, #8]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.DestAddr,EVEN_PARITY);
 800de04:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800de08:	b2d8      	uxtb	r0, r3
 800de0a:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800de0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de12:	1899      	adds	r1, r3, r2
 800de14:	4b95      	ldr	r3, [pc, #596]	; (800e06c <Form_Siemens_Reply+0x338>)
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	4698      	mov	r8, r3
 800de1c:	4691      	mov	r9, r2
 800de1e:	2300      	movs	r3, #0
 800de20:	9302      	str	r3, [sp, #8]
 800de22:	e9cd 8900 	strd	r8, r9, [sp]
 800de26:	460a      	mov	r2, r1
 800de28:	2118      	movs	r1, #24
 800de2a:	f001 faeb 	bl	800f404 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.DestAddr = %lu\n",Siemens_TX_st.DestAddr);
	BITSTUFFINC(24);
 800de2e:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800de32:	3318      	adds	r3, #24
 800de34:	2b00      	cmp	r3, #0
 800de36:	da00      	bge.n	800de3a <Form_Siemens_Reply+0x106>
 800de38:	3307      	adds	r3, #7
 800de3a:	10db      	asrs	r3, r3, #3
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800de42:	4413      	add	r3, r2
 800de44:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800de48:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800de4c:	3318      	adds	r3, #24
 800de4e:	b29b      	uxth	r3, r3
 800de50:	b21b      	sxth	r3, r3
 800de52:	425a      	negs	r2, r3
 800de54:	f003 0107 	and.w	r1, r3, #7
 800de58:	f002 0307 	and.w	r3, r2, #7
 800de5c:	bf58      	it	pl
 800de5e:	4259      	negpl	r1, r3
 800de60:	b20b      	sxth	r3, r1
 800de62:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SrcSysType = Siemens_RX_st.DesSysType; //Destination Address
 800de66:	4b82      	ldr	r3, [pc, #520]	; (800e070 <Form_Siemens_Reply+0x33c>)
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	4a80      	ldr	r2, [pc, #512]	; (800e06c <Form_Siemens_Reply+0x338>)
 800de6c:	7313      	strb	r3, [r2, #12]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SrcSysType,ODD_PARITY);
 800de6e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800de72:	b2d8      	uxtb	r0, r3
 800de74:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800de78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de7c:	1899      	adds	r1, r3, r2
 800de7e:	4b7b      	ldr	r3, [pc, #492]	; (800e06c <Form_Siemens_Reply+0x338>)
 800de80:	7b1b      	ldrb	r3, [r3, #12]
 800de82:	b2db      	uxtb	r3, r3
 800de84:	2200      	movs	r2, #0
 800de86:	469a      	mov	sl, r3
 800de88:	4693      	mov	fp, r2
 800de8a:	2301      	movs	r3, #1
 800de8c:	9302      	str	r3, [sp, #8]
 800de8e:	e9cd ab00 	strd	sl, fp, [sp]
 800de92:	460a      	mov	r2, r1
 800de94:	2108      	movs	r1, #8
 800de96:	f001 fab5 	bl	800f404 <Insert_cal_parity>
	//	printf("Src_sys_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800de9a:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800de9e:	3308      	adds	r3, #8
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	da00      	bge.n	800dea6 <Form_Siemens_Reply+0x172>
 800dea4:	3307      	adds	r3, #7
 800dea6:	10db      	asrs	r3, r3, #3
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800deae:	4413      	add	r3, r2
 800deb0:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800deb4:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800deb8:	3308      	adds	r3, #8
 800deba:	b29b      	uxth	r3, r3
 800debc:	b21b      	sxth	r3, r3
 800debe:	425a      	negs	r2, r3
 800dec0:	f003 0107 	and.w	r1, r3, #7
 800dec4:	f002 0307 	and.w	r3, r2, #7
 800dec8:	bf58      	it	pl
 800deca:	4259      	negpl	r1, r3
 800decc:	b20b      	sxth	r3, r1
 800dece:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourceAddr = Siemens_RX_st.DestAddr;
 800ded2:	4b67      	ldr	r3, [pc, #412]	; (800e070 <Form_Siemens_Reply+0x33c>)
 800ded4:	685a      	ldr	r2, [r3, #4]
 800ded6:	4b65      	ldr	r3, [pc, #404]	; (800e06c <Form_Siemens_Reply+0x338>)
 800ded8:	611a      	str	r2, [r3, #16]
	Siemens_TX_st.ExtSourceAddr = Siemens_RX_st.ExtDestAddr;
 800deda:	4b65      	ldr	r3, [pc, #404]	; (800e070 <Form_Siemens_Reply+0x33c>)
 800dedc:	689a      	ldr	r2, [r3, #8]
 800dede:	4b63      	ldr	r3, [pc, #396]	; (800e06c <Form_Siemens_Reply+0x338>)
 800dee0:	615a      	str	r2, [r3, #20]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.SourceAddr,EVEN_PARITY);
 800dee2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dee6:	b2d8      	uxtb	r0, r3
 800dee8:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800deec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800def0:	1899      	adds	r1, r3, r2
 800def2:	4b5e      	ldr	r3, [pc, #376]	; (800e06c <Form_Siemens_Reply+0x338>)
 800def4:	691b      	ldr	r3, [r3, #16]
 800def6:	2200      	movs	r2, #0
 800def8:	643b      	str	r3, [r7, #64]	; 0x40
 800defa:	647a      	str	r2, [r7, #68]	; 0x44
 800defc:	2300      	movs	r3, #0
 800defe:	9302      	str	r3, [sp, #8]
 800df00:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800df04:	e9cd 3400 	strd	r3, r4, [sp]
 800df08:	460a      	mov	r2, r1
 800df0a:	2118      	movs	r1, #24
 800df0c:	f001 fa7a 	bl	800f404 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.SourceAddr = %lu\n",Siemens_TX_st.SourceAddr);
	BITSTUFFINC(24);
 800df10:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800df14:	3318      	adds	r3, #24
 800df16:	2b00      	cmp	r3, #0
 800df18:	da00      	bge.n	800df1c <Form_Siemens_Reply+0x1e8>
 800df1a:	3307      	adds	r3, #7
 800df1c:	10db      	asrs	r3, r3, #3
 800df1e:	b29a      	uxth	r2, r3
 800df20:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800df24:	4413      	add	r3, r2
 800df26:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800df2a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800df2e:	3318      	adds	r3, #24
 800df30:	b29b      	uxth	r3, r3
 800df32:	b21b      	sxth	r3, r3
 800df34:	425a      	negs	r2, r3
 800df36:	f003 0107 	and.w	r1, r3, #7
 800df3a:	f002 0307 	and.w	r3, r2, #7
 800df3e:	bf58      	it	pl
 800df40:	4259      	negpl	r1, r3
 800df42:	b20b      	sxth	r3, r1
 800df44:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	//	Siemens_TX_st.ProdDataVer = PROD_VERSION; //Self Product Version
	Siemens_TX_st.ProdDataVer = Siemens_RX_st.ProdDataVer; //Self Product Version
 800df48:	4b49      	ldr	r3, [pc, #292]	; (800e070 <Form_Siemens_Reply+0x33c>)
 800df4a:	7e1b      	ldrb	r3, [r3, #24]
 800df4c:	4a47      	ldr	r2, [pc, #284]	; (800e06c <Form_Siemens_Reply+0x338>)
 800df4e:	7613      	strb	r3, [r2, #24]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.ProdDataVer,EVEN_PARITY);
 800df50:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800df54:	b2d8      	uxtb	r0, r3
 800df56:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800df5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df5e:	1899      	adds	r1, r3, r2
 800df60:	4b42      	ldr	r3, [pc, #264]	; (800e06c <Form_Siemens_Reply+0x338>)
 800df62:	7e1b      	ldrb	r3, [r3, #24]
 800df64:	b2db      	uxtb	r3, r3
 800df66:	2200      	movs	r2, #0
 800df68:	63bb      	str	r3, [r7, #56]	; 0x38
 800df6a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800df6c:	2300      	movs	r3, #0
 800df6e:	9302      	str	r3, [sp, #8]
 800df70:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800df74:	e9cd 3400 	strd	r3, r4, [sp]
 800df78:	460a      	mov	r2, r1
 800df7a:	2108      	movs	r1, #8
 800df7c:	f001 fa42 	bl	800f404 <Insert_cal_parity>
	//	printf("prod_data_ver:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800df80:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800df84:	3308      	adds	r3, #8
 800df86:	2b00      	cmp	r3, #0
 800df88:	da00      	bge.n	800df8c <Form_Siemens_Reply+0x258>
 800df8a:	3307      	adds	r3, #7
 800df8c:	10db      	asrs	r3, r3, #3
 800df8e:	b29a      	uxth	r2, r3
 800df90:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800df94:	4413      	add	r3, r2
 800df96:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800df9a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800df9e:	3308      	adds	r3, #8
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	b21b      	sxth	r3, r3
 800dfa4:	425a      	negs	r2, r3
 800dfa6:	f003 0107 	and.w	r1, r3, #7
 800dfaa:	f002 0307 	and.w	r3, r2, #7
 800dfae:	bf58      	it	pl
 800dfb0:	4259      	negpl	r1, r3
 800dfb2:	b20b      	sxth	r3, r1
 800dfb4:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.CompIndex = COMP_INDEX; //Self Compatability Index
 800dfb8:	4a2c      	ldr	r2, [pc, #176]	; (800e06c <Form_Siemens_Reply+0x338>)
 800dfba:	2301      	movs	r3, #1
 800dfbc:	7653      	strb	r3, [r2, #25]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.CompIndex,ODD_PARITY);
 800dfbe:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dfc2:	b2d8      	uxtb	r0, r3
 800dfc4:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800dfc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dfcc:	1899      	adds	r1, r3, r2
 800dfce:	4b27      	ldr	r3, [pc, #156]	; (800e06c <Form_Siemens_Reply+0x338>)
 800dfd0:	7e5b      	ldrb	r3, [r3, #25]
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	633b      	str	r3, [r7, #48]	; 0x30
 800dfd8:	637a      	str	r2, [r7, #52]	; 0x34
 800dfda:	2301      	movs	r3, #1
 800dfdc:	9302      	str	r3, [sp, #8]
 800dfde:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800dfe2:	e9cd 3400 	strd	r3, r4, [sp]
 800dfe6:	460a      	mov	r2, r1
 800dfe8:	2108      	movs	r1, #8
 800dfea:	f001 fa0b 	bl	800f404 <Insert_cal_parity>
	//	printf("comp_index:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800dfee:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dff2:	3308      	adds	r3, #8
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	da00      	bge.n	800dffa <Form_Siemens_Reply+0x2c6>
 800dff8:	3307      	adds	r3, #7
 800dffa:	10db      	asrs	r3, r3, #3
 800dffc:	b29a      	uxth	r2, r3
 800dffe:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e002:	4413      	add	r3, r2
 800e004:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800e008:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e00c:	3308      	adds	r3, #8
 800e00e:	b29b      	uxth	r3, r3
 800e010:	b21b      	sxth	r3, r3
 800e012:	425a      	negs	r2, r3
 800e014:	f003 0307 	and.w	r3, r3, #7
 800e018:	f002 0207 	and.w	r2, r2, #7
 800e01c:	bf58      	it	pl
 800e01e:	4253      	negpl	r3, r2
 800e020:	b21b      	sxth	r3, r3
 800e022:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	Siemens_TX_st.DestPort = Siemens_RX_st.SourcePort; //Destination Port
 800e026:	4b12      	ldr	r3, [pc, #72]	; (800e070 <Form_Siemens_Reply+0x33c>)
 800e028:	7edb      	ldrb	r3, [r3, #27]
 800e02a:	4a10      	ldr	r2, [pc, #64]	; (800e06c <Form_Siemens_Reply+0x338>)
 800e02c:	7693      	strb	r3, [r2, #26]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DestPort,NO_PARITY);
 800e02e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e032:	b2d8      	uxtb	r0, r3
 800e034:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800e038:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e03c:	1899      	adds	r1, r3, r2
 800e03e:	4b0b      	ldr	r3, [pc, #44]	; (800e06c <Form_Siemens_Reply+0x338>)
 800e040:	7e9b      	ldrb	r3, [r3, #26]
 800e042:	b2db      	uxtb	r3, r3
 800e044:	2200      	movs	r2, #0
 800e046:	62bb      	str	r3, [r7, #40]	; 0x28
 800e048:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e04a:	2302      	movs	r3, #2
 800e04c:	9302      	str	r3, [sp, #8]
 800e04e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800e052:	e9cd 3400 	strd	r3, r4, [sp]
 800e056:	460a      	mov	r2, r1
 800e058:	2108      	movs	r1, #8
 800e05a:	f001 f9d3 	bl	800f404 <Insert_cal_parity>
	//	printf("dst_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800e05e:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800e062:	3308      	adds	r3, #8
 800e064:	2b00      	cmp	r3, #0
 800e066:	da05      	bge.n	800e074 <Form_Siemens_Reply+0x340>
 800e068:	3307      	adds	r3, #7
 800e06a:	e003      	b.n	800e074 <Form_Siemens_Reply+0x340>
 800e06c:	20004224 	.word	0x20004224
 800e070:	20003ffc 	.word	0x20003ffc
 800e074:	10db      	asrs	r3, r3, #3
 800e076:	b29a      	uxth	r2, r3
 800e078:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e07c:	4413      	add	r3, r2
 800e07e:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800e082:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e086:	3308      	adds	r3, #8
 800e088:	b29b      	uxth	r3, r3
 800e08a:	b21b      	sxth	r3, r3
 800e08c:	425a      	negs	r2, r3
 800e08e:	f003 0307 	and.w	r3, r3, #7
 800e092:	f002 0207 	and.w	r2, r2, #7
 800e096:	bf58      	it	pl
 800e098:	4253      	negpl	r3, r2
 800e09a:	b21b      	sxth	r3, r3
 800e09c:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourcePort = Siemens_RX_st.DestPort; //Source Port
 800e0a0:	4bc4      	ldr	r3, [pc, #784]	; (800e3b4 <Form_Siemens_Reply+0x680>)
 800e0a2:	7e9a      	ldrb	r2, [r3, #26]
 800e0a4:	4bc4      	ldr	r3, [pc, #784]	; (800e3b8 <Form_Siemens_Reply+0x684>)
 800e0a6:	76da      	strb	r2, [r3, #27]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SourcePort,NO_PARITY);
 800e0a8:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e0ac:	b2d8      	uxtb	r0, r3
 800e0ae:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e0b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e0b6:	441a      	add	r2, r3
 800e0b8:	4bbf      	ldr	r3, [pc, #764]	; (800e3b8 <Form_Siemens_Reply+0x684>)
 800e0ba:	7edb      	ldrb	r3, [r3, #27]
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	2100      	movs	r1, #0
 800e0c0:	623b      	str	r3, [r7, #32]
 800e0c2:	6279      	str	r1, [r7, #36]	; 0x24
 800e0c4:	2302      	movs	r3, #2
 800e0c6:	9302      	str	r3, [sp, #8]
 800e0c8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e0cc:	e9cd 3400 	strd	r3, r4, [sp]
 800e0d0:	2108      	movs	r1, #8
 800e0d2:	f001 f997 	bl	800f404 <Insert_cal_parity>
	//	printf("src_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800e0d6:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800e0da:	3308      	adds	r3, #8
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	da00      	bge.n	800e0e2 <Form_Siemens_Reply+0x3ae>
 800e0e0:	3307      	adds	r3, #7
 800e0e2:	10db      	asrs	r3, r3, #3
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e0ea:	4413      	add	r3, r2
 800e0ec:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800e0f0:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e0f4:	3308      	adds	r3, #8
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	b21b      	sxth	r3, r3
 800e0fa:	425a      	negs	r2, r3
 800e0fc:	f003 0307 	and.w	r3, r3, #7
 800e100:	f002 0207 	and.w	r2, r2, #7
 800e104:	bf58      	it	pl
 800e106:	4253      	negpl	r3, r2
 800e108:	b21b      	sxth	r3, r3
 800e10a:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.RxTimeStamp = Siemens_RX_st.TxTimeStamp; //Source Port
 800e10e:	4ba9      	ldr	r3, [pc, #676]	; (800e3b4 <Form_Siemens_Reply+0x680>)
 800e110:	6a1b      	ldr	r3, [r3, #32]
 800e112:	4aa9      	ldr	r2, [pc, #676]	; (800e3b8 <Form_Siemens_Reply+0x684>)
 800e114:	61d3      	str	r3, [r2, #28]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.RxTimeStamp,NO_PARITY);
 800e116:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e11a:	b2d8      	uxtb	r0, r3
 800e11c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e120:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e124:	4413      	add	r3, r2
 800e126:	4aa4      	ldr	r2, [pc, #656]	; (800e3b8 <Form_Siemens_Reply+0x684>)
 800e128:	69d2      	ldr	r2, [r2, #28]
 800e12a:	2100      	movs	r1, #0
 800e12c:	61ba      	str	r2, [r7, #24]
 800e12e:	61f9      	str	r1, [r7, #28]
 800e130:	2202      	movs	r2, #2
 800e132:	9202      	str	r2, [sp, #8]
 800e134:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e138:	e9cd 1200 	strd	r1, r2, [sp]
 800e13c:	461a      	mov	r2, r3
 800e13e:	2120      	movs	r1, #32
 800e140:	f001 f960 	bl	800f404 <Insert_cal_parity>
	//	printf("Rx_time_stamp:%lu\n",Siemens_TX_st.Rx_time_stamp);
	BITSTUFFINC(32);
 800e144:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800e148:	3320      	adds	r3, #32
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	da00      	bge.n	800e150 <Form_Siemens_Reply+0x41c>
 800e14e:	3307      	adds	r3, #7
 800e150:	10db      	asrs	r3, r3, #3
 800e152:	b29a      	uxth	r2, r3
 800e154:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e158:	4413      	add	r3, r2
 800e15a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800e15e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e162:	3320      	adds	r3, #32
 800e164:	b29b      	uxth	r3, r3
 800e166:	b21b      	sxth	r3, r3
 800e168:	425a      	negs	r2, r3
 800e16a:	f003 0307 	and.w	r3, r3, #7
 800e16e:	f002 0207 	and.w	r2, r2, #7
 800e172:	bf58      	it	pl
 800e174:	4253      	negpl	r3, r2
 800e176:	b21b      	sxth	r3, r3
 800e178:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.TxTimeStamp = SelfTimeStamp;//(uint32_t)(HAL_GetTick()/100);//Temp_Siemens_RX_st.Tx_time_stamp; //Source Port
 800e17c:	4b8f      	ldr	r3, [pc, #572]	; (800e3bc <Form_Siemens_Reply+0x688>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a8d      	ldr	r2, [pc, #564]	; (800e3b8 <Form_Siemens_Reply+0x684>)
 800e182:	6213      	str	r3, [r2, #32]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.TxTimeStamp,NO_PARITY);
 800e184:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e188:	b2d8      	uxtb	r0, r3
 800e18a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e18e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e192:	4413      	add	r3, r2
 800e194:	4a88      	ldr	r2, [pc, #544]	; (800e3b8 <Form_Siemens_Reply+0x684>)
 800e196:	6a12      	ldr	r2, [r2, #32]
 800e198:	2100      	movs	r1, #0
 800e19a:	613a      	str	r2, [r7, #16]
 800e19c:	6179      	str	r1, [r7, #20]
 800e19e:	2202      	movs	r2, #2
 800e1a0:	9202      	str	r2, [sp, #8]
 800e1a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e1a6:	e9cd 1200 	strd	r1, r2, [sp]
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	2120      	movs	r1, #32
 800e1ae:	f001 f929 	bl	800f404 <Insert_cal_parity>
	//	printf("Tx_time_stamp:%lu\n",Siemens_TX_st.Tx_time_stamp);
	BITSTUFFINC(32);
 800e1b2:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800e1b6:	3320      	adds	r3, #32
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	da00      	bge.n	800e1be <Form_Siemens_Reply+0x48a>
 800e1bc:	3307      	adds	r3, #7
 800e1be:	10db      	asrs	r3, r3, #3
 800e1c0:	b29a      	uxth	r2, r3
 800e1c2:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e1c6:	4413      	add	r3, r2
 800e1c8:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800e1cc:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e1d0:	3320      	adds	r3, #32
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	b21b      	sxth	r3, r3
 800e1d6:	425a      	negs	r2, r3
 800e1d8:	f003 0307 	and.w	r3, r3, #7
 800e1dc:	f002 0207 	and.w	r2, r2, #7
 800e1e0:	bf58      	it	pl
 800e1e2:	4253      	negpl	r3, r2
 800e1e4:	b21b      	sxth	r3, r3
 800e1e6:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	CRC_Compliment_Loc = Data_Compliment(Buffer,ucByte,CONVERT); //ucByte = 30;
 800e1ea:	f8b7 164e 	ldrh.w	r1, [r7, #1614]	; 0x64e
 800e1ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e1f2:	2201      	movs	r2, #1
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f001 fa6b 	bl	800f6d0 <Data_Compliment>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650

	Calc_CRC = Siemens_CRC(Buffer,ucByte); //30
 800e200:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800e204:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e208:	4611      	mov	r1, r2
 800e20a:	4618      	mov	r0, r3
 800e20c:	f000 ff64 	bl	800f0d8 <Siemens_CRC>
 800e210:	4603      	mov	r3, r0
 800e212:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656


#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800e216:	4b6a      	ldr	r3, [pc, #424]	; (800e3c0 <Form_Siemens_Reply+0x68c>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	09db      	lsrs	r3, r3, #7
 800e21c:	f003 0301 	and.w	r3, r3, #1
 800e220:	2b00      	cmp	r3, #0
 800e222:	d02c      	beq.n	800e27e <Form_Siemens_Reply+0x54a>
	{
		uint16_t Temp_Crc = Calc_CRC;
 800e224:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800e228:	f8a7 364a 	strh.w	r3, [r7, #1610]	; 0x64a
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800e22c:	4865      	ldr	r0, [pc, #404]	; (800e3c4 <Form_Siemens_Reply+0x690>)
 800e22e:	f018 fd79 	bl	8026d24 <puts>
		printf("Actual CRC:%04x\n",Calc_CRC);
 800e232:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800e236:	4619      	mov	r1, r3
 800e238:	4863      	ldr	r0, [pc, #396]	; (800e3c8 <Form_Siemens_Reply+0x694>)
 800e23a:	f018 fcd7 	bl	8026bec <iprintf>

		Calc_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800e23e:	4863      	ldr	r0, [pc, #396]	; (800e3cc <Form_Siemens_Reply+0x698>)
 800e240:	f010 f97c 	bl	801e53c <HAL_RNG_GetRandomNumber>
 800e244:	4601      	mov	r1, r0
 800e246:	4b62      	ldr	r3, [pc, #392]	; (800e3d0 <Form_Siemens_Reply+0x69c>)
 800e248:	fba3 2301 	umull	r2, r3, r3, r1
 800e24c:	0bda      	lsrs	r2, r3, #15
 800e24e:	4613      	mov	r3, r2
 800e250:	041b      	lsls	r3, r3, #16
 800e252:	1a9b      	subs	r3, r3, r2
 800e254:	1aca      	subs	r2, r1, r3
 800e256:	4613      	mov	r3, r2
 800e258:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		if(Calc_CRC == Temp_Crc)
 800e25c:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800e260:	f8b7 364a 	ldrh.w	r3, [r7, #1610]	; 0x64a
 800e264:	429a      	cmp	r2, r3
 800e266:	d104      	bne.n	800e272 <Form_Siemens_Reply+0x53e>
		{
			Calc_CRC += 4;
 800e268:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800e26c:	3304      	adds	r3, #4
 800e26e:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		}
		printf("Injected CRC:%04x\n",Calc_CRC);
 800e272:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800e276:	4619      	mov	r1, r3
 800e278:	4856      	ldr	r0, [pc, #344]	; (800e3d4 <Form_Siemens_Reply+0x6a0>)
 800e27a:	f018 fcb7 	bl	8026bec <iprintf>




	//	printf("Cal_CRC:0x%04x\n",Calc_CRC);
	Insert_cal_parity(ucBit,16,&Buffer[ucByte],Calc_CRC,NO_PARITY);
 800e27e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e282:	b2d8      	uxtb	r0, r3
 800e284:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e288:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e28c:	4413      	add	r3, r2
 800e28e:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800e292:	2100      	movs	r1, #0
 800e294:	60ba      	str	r2, [r7, #8]
 800e296:	60f9      	str	r1, [r7, #12]
 800e298:	2202      	movs	r2, #2
 800e29a:	9202      	str	r2, [sp, #8]
 800e29c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e2a0:	e9cd 1200 	strd	r1, r2, [sp]
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	2110      	movs	r1, #16
 800e2a8:	f001 f8ac 	bl	800f404 <Insert_cal_parity>
	BITSTUFFINC(16);
 800e2ac:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800e2b0:	3310      	adds	r3, #16
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	da00      	bge.n	800e2b8 <Form_Siemens_Reply+0x584>
 800e2b6:	3307      	adds	r3, #7
 800e2b8:	10db      	asrs	r3, r3, #3
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e2c0:	4413      	add	r3, r2
 800e2c2:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800e2c6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e2ca:	3310      	adds	r3, #16
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	b21b      	sxth	r3, r3
 800e2d0:	425a      	negs	r2, r3
 800e2d2:	f003 0307 	and.w	r3, r3, #7
 800e2d6:	f002 0207 	and.w	r2, r2, #7
 800e2da:	bf58      	it	pl
 800e2dc:	4253      	negpl	r3, r2
 800e2de:	b21b      	sxth	r3, r3
 800e2e0:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Calc_Compliment_CRC = Siemens_CRC(&Buffer[ucByte],ucByte-2);//32,30
 800e2e4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e2e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e2ec:	441a      	add	r2, r3
 800e2ee:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e2f2:	3b02      	subs	r3, #2
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	4610      	mov	r0, r2
 800e2fa:	f000 feed 	bl	800f0d8 <Siemens_CRC>
 800e2fe:	4603      	mov	r3, r0
 800e300:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800e304:	4b2e      	ldr	r3, [pc, #184]	; (800e3c0 <Form_Siemens_Reply+0x68c>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	0a5b      	lsrs	r3, r3, #9
 800e30a:	f003 0301 	and.w	r3, r3, #1
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d02c      	beq.n	800e36c <Form_Siemens_Reply+0x638>
	{
		uint16_t Temp_Crc = Calc_Compliment_CRC;
 800e312:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800e316:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800e31a:	482a      	ldr	r0, [pc, #168]	; (800e3c4 <Form_Siemens_Reply+0x690>)
 800e31c:	f018 fd02 	bl	8026d24 <puts>
		printf("Actual Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800e320:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800e324:	4619      	mov	r1, r3
 800e326:	482c      	ldr	r0, [pc, #176]	; (800e3d8 <Form_Siemens_Reply+0x6a4>)
 800e328:	f018 fc60 	bl	8026bec <iprintf>
		Calc_Compliment_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800e32c:	4827      	ldr	r0, [pc, #156]	; (800e3cc <Form_Siemens_Reply+0x698>)
 800e32e:	f010 f905 	bl	801e53c <HAL_RNG_GetRandomNumber>
 800e332:	4601      	mov	r1, r0
 800e334:	4b26      	ldr	r3, [pc, #152]	; (800e3d0 <Form_Siemens_Reply+0x69c>)
 800e336:	fba3 2301 	umull	r2, r3, r3, r1
 800e33a:	0bda      	lsrs	r2, r3, #15
 800e33c:	4613      	mov	r3, r2
 800e33e:	041b      	lsls	r3, r3, #16
 800e340:	1a9b      	subs	r3, r3, r2
 800e342:	1aca      	subs	r2, r1, r3
 800e344:	4613      	mov	r3, r2
 800e346:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		if(Calc_Compliment_CRC == Temp_Crc)
 800e34a:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800e34e:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 800e352:	429a      	cmp	r2, r3
 800e354:	d104      	bne.n	800e360 <Form_Siemens_Reply+0x62c>
		{
			Calc_Compliment_CRC += 4;
 800e356:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800e35a:	3304      	adds	r3, #4
 800e35c:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		}
		printf("Injected Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800e360:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800e364:	4619      	mov	r1, r3
 800e366:	481d      	ldr	r0, [pc, #116]	; (800e3dc <Form_Siemens_Reply+0x6a8>)
 800e368:	f018 fc40 	bl	8026bec <iprintf>
	}
#endif
	//	printf("Calc_Compliment_CRC:0x%04x\n",Calc_Compliment_CRC);
	ucByte+=ucByte;
 800e36c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e370:	005b      	lsls	r3, r3, #1
 800e372:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
	Insert_cal_parity(ucBit,16,&Buffer[CRC_Compliment_Loc],Calc_Compliment_CRC,NO_PARITY);
 800e376:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e37a:	b2d8      	uxtb	r0, r3
 800e37c:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800e380:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e384:	4413      	add	r3, r2
 800e386:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800e38a:	2100      	movs	r1, #0
 800e38c:	603a      	str	r2, [r7, #0]
 800e38e:	6079      	str	r1, [r7, #4]
 800e390:	2202      	movs	r2, #2
 800e392:	9202      	str	r2, [sp, #8]
 800e394:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e398:	e9cd 1200 	strd	r1, r2, [sp]
 800e39c:	461a      	mov	r2, r3
 800e39e:	2110      	movs	r1, #16
 800e3a0:	f001 f830 	bl	800f404 <Insert_cal_parity>
	BITSTUFFINC(16);
 800e3a4:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800e3a8:	3310      	adds	r3, #16
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	da18      	bge.n	800e3e0 <Form_Siemens_Reply+0x6ac>
 800e3ae:	3307      	adds	r3, #7
 800e3b0:	e016      	b.n	800e3e0 <Form_Siemens_Reply+0x6ac>
 800e3b2:	bf00      	nop
 800e3b4:	20003ffc 	.word	0x20003ffc
 800e3b8:	20004224 	.word	0x20004224
 800e3bc:	200054c0 	.word	0x200054c0
 800e3c0:	20004c78 	.word	0x20004c78
 800e3c4:	0802a90c 	.word	0x0802a90c
 800e3c8:	0802abbc 	.word	0x0802abbc
 800e3cc:	2000bcf8 	.word	0x2000bcf8
 800e3d0:	80008001 	.word	0x80008001
 800e3d4:	0802abd0 	.word	0x0802abd0
 800e3d8:	0802abe4 	.word	0x0802abe4
 800e3dc:	0802ac00 	.word	0x0802ac00
 800e3e0:	10db      	asrs	r3, r3, #3
 800e3e2:	b29a      	uxth	r2, r3
 800e3e4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e3e8:	4413      	add	r3, r2
 800e3ea:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800e3ee:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e3f2:	3310      	adds	r3, #16
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	b21b      	sxth	r3, r3
 800e3f8:	425a      	negs	r2, r3
 800e3fa:	f003 0307 	and.w	r3, r3, #7
 800e3fe:	f002 0207 	and.w	r2, r2, #7
 800e402:	bf58      	it	pl
 800e404:	4253      	negpl	r3, r2
 800e406:	b21b      	sxth	r3, r3
 800e408:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	memcpy(Siemens_tx_Buffer_st.Tx_Buff,Buffer,CRC_Compliment_Loc+2);
 800e40c:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800e410:	3302      	adds	r3, #2
 800e412:	461a      	mov	r2, r3
 800e414:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e418:	4619      	mov	r1, r3
 800e41a:	481e      	ldr	r0, [pc, #120]	; (800e494 <Form_Siemens_Reply+0x760>)
 800e41c:	f018 fad6 	bl	80269cc <memcpy>
	Siemens_tx_Buffer_st.Tx_Length = (CRC_Compliment_Loc+2);
 800e420:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800e424:	3302      	adds	r3, #2
 800e426:	b29a      	uxth	r2, r3
 800e428:	4b1a      	ldr	r3, [pc, #104]	; (800e494 <Form_Siemens_Reply+0x760>)
 800e42a:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600

	CheckToSendReplyorNot();
 800e42e:	f001 f9bb 	bl	800f7a8 <CheckToSendReplyorNot>

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800e432:	4b19      	ldr	r3, [pc, #100]	; (800e498 <Form_Siemens_Reply+0x764>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	099b      	lsrs	r3, r3, #6
 800e438:	f003 0301 	and.w	r3, r3, #1
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d003      	beq.n	800e448 <Form_Siemens_Reply+0x714>
	{
		printf("Injecting NO REPLY FROM EIPC Failure\n");
 800e440:	4816      	ldr	r0, [pc, #88]	; (800e49c <Form_Siemens_Reply+0x768>)
 800e442:	f018 fc6f 	bl	8026d24 <puts>
 800e446:	e00f      	b.n	800e468 <Form_Siemens_Reply+0x734>
	}
	else
	{
		if(SendReply == 1)
 800e448:	4b15      	ldr	r3, [pc, #84]	; (800e4a0 <Form_Siemens_Reply+0x76c>)
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d10b      	bne.n	800e468 <Form_Siemens_Reply+0x734>
		{
			udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
 800e450:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800e454:	b2db      	uxtb	r3, r3
 800e456:	3302      	adds	r3, #2
 800e458:	b2d9      	uxtb	r1, r3
 800e45a:	4a12      	ldr	r2, [pc, #72]	; (800e4a4 <Form_Siemens_Reply+0x770>)
 800e45c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e460:	6812      	ldr	r2, [r2, #0]
 800e462:	4618      	mov	r0, r3
 800e464:	f002 fc0a 	bl	8010c7c <udpClient_send>
	{
		udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
	}
#endif

	memset(&Temp_SiemensTx_st,0,sizeof(SIEMENS_PKT_t));
 800e468:	f44f 720a 	mov.w	r2, #552	; 0x228
 800e46c:	2100      	movs	r1, #0
 800e46e:	480e      	ldr	r0, [pc, #56]	; (800e4a8 <Form_Siemens_Reply+0x774>)
 800e470:	f018 fad4 	bl	8026a1c <memset>
	memcpy(&Temp_SiemensTx_st,&Siemens_TX_st,sizeof(SIEMENS_PKT_t));
 800e474:	4a0c      	ldr	r2, [pc, #48]	; (800e4a8 <Form_Siemens_Reply+0x774>)
 800e476:	4b0d      	ldr	r3, [pc, #52]	; (800e4ac <Form_Siemens_Reply+0x778>)
 800e478:	4610      	mov	r0, r2
 800e47a:	4619      	mov	r1, r3
 800e47c:	f44f 730a 	mov.w	r3, #552	; 0x228
 800e480:	461a      	mov	r2, r3
 800e482:	f018 faa3 	bl	80269cc <memcpy>
	UNUSED(App_data_Traverser);
}
 800e486:	bf00      	nop
 800e488:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 800e48c:	46bd      	mov	sp, r7
 800e48e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e492:	bf00      	nop
 800e494:	20004674 	.word	0x20004674
 800e498:	20004c78 	.word	0x20004c78
 800e49c:	0802ac20 	.word	0x0802ac20
 800e4a0:	200063a1 	.word	0x200063a1
 800e4a4:	20006a08 	.word	0x20006a08
 800e4a8:	2000444c 	.word	0x2000444c
 800e4ac:	20004224 	.word	0x20004224

0800e4b0 <ProcessSendingSignals2MIE>:

void ProcessSendingSignals2MIE(void)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.Signal2MIE_Clk) > EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK)
 800e4b6:	4b64      	ldr	r3, [pc, #400]	; (800e648 <ProcessSendingSignals2MIE+0x198>)
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f002 f86e 	bl	801059c <HAL_Elaps_Ticks>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	4b62      	ldr	r3, [pc, #392]	; (800e64c <ProcessSendingSignals2MIE+0x19c>)
 800e4c4:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	f240 80b9 	bls.w	800e640 <ProcessSendingSignals2MIE+0x190>
	{
		if(
				(SiemensClocks_st.MisMatchFlag == RESET) &&
 800e4ce:	4b5e      	ldr	r3, [pc, #376]	; (800e648 <ProcessSendingSignals2MIE+0x198>)
 800e4d0:	781b      	ldrb	r3, [r3, #0]
		if(
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d113      	bne.n	800e4fe <ProcessSendingSignals2MIE+0x4e>
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800e4d6:	4b5c      	ldr	r3, [pc, #368]	; (800e648 <ProcessSendingSignals2MIE+0x198>)
 800e4d8:	785b      	ldrb	r3, [r3, #1]
				(SiemensClocks_st.MisMatchFlag == RESET) &&
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d10f      	bne.n	800e4fe <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800e4de:	4b5c      	ldr	r3, [pc, #368]	; (800e650 <ProcessSendingSignals2MIE+0x1a0>)
 800e4e0:	781b      	ldrb	r3, [r3, #0]
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d10b      	bne.n	800e4fe <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800e4e6:	4b5b      	ldr	r3, [pc, #364]	; (800e654 <ProcessSendingSignals2MIE+0x1a4>)
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d107      	bne.n	800e4fe <ProcessSendingSignals2MIE+0x4e>
			/*
			 * CAN Exchange Happening.
			 * No MisMatch Found
			 */
			//			printf("\n1\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800e4ee:	4b5a      	ldr	r3, [pc, #360]	; (800e658 <ProcessSendingSignals2MIE+0x1a8>)
 800e4f0:	881b      	ldrh	r3, [r3, #0]
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	4959      	ldr	r1, [pc, #356]	; (800e65c <ProcessSendingSignals2MIE+0x1ac>)
 800e4f6:	485a      	ldr	r0, [pc, #360]	; (800e660 <ProcessSendingSignals2MIE+0x1b0>)
 800e4f8:	f018 fa68 	bl	80269cc <memcpy>
 800e4fc:	e02d      	b.n	800e55a <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800e4fe:	4b54      	ldr	r3, [pc, #336]	; (800e650 <ProcessSendingSignals2MIE+0x1a0>)
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	2b01      	cmp	r3, #1
 800e504:	d10f      	bne.n	800e526 <ProcessSendingSignals2MIE+0x76>
 800e506:	4b53      	ldr	r3, [pc, #332]	; (800e654 <ProcessSendingSignals2MIE+0x1a4>)
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d10b      	bne.n	800e526 <ProcessSendingSignals2MIE+0x76>
 800e50e:	4b4e      	ldr	r3, [pc, #312]	; (800e648 <ProcessSendingSignals2MIE+0x198>)
 800e510:	785b      	ldrb	r3, [r3, #1]
 800e512:	2b01      	cmp	r3, #1
 800e514:	d107      	bne.n	800e526 <ProcessSendingSignals2MIE+0x76>
			 * CAN Exchange Happening
			 * MisMatch Found because of Other Card is Receiving,
			 * This Card is Not Receiving
			 */
			//			printf("\n2\n");
			memcpy(&VitalData2MIE_st.Relays,&Siemens_OtherRelays_st.Relays,Siemens_OtherRelays_st.NoofDataBytes);
 800e516:	4b53      	ldr	r3, [pc, #332]	; (800e664 <ProcessSendingSignals2MIE+0x1b4>)
 800e518:	881b      	ldrh	r3, [r3, #0]
 800e51a:	461a      	mov	r2, r3
 800e51c:	4952      	ldr	r1, [pc, #328]	; (800e668 <ProcessSendingSignals2MIE+0x1b8>)
 800e51e:	4850      	ldr	r0, [pc, #320]	; (800e660 <ProcessSendingSignals2MIE+0x1b0>)
 800e520:	f018 fa54 	bl	80269cc <memcpy>
 800e524:	e019      	b.n	800e55a <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800e526:	4b4b      	ldr	r3, [pc, #300]	; (800e654 <ProcessSendingSignals2MIE+0x1a4>)
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d10f      	bne.n	800e54e <ProcessSendingSignals2MIE+0x9e>
 800e52e:	4b48      	ldr	r3, [pc, #288]	; (800e650 <ProcessSendingSignals2MIE+0x1a0>)
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d10b      	bne.n	800e54e <ProcessSendingSignals2MIE+0x9e>
 800e536:	4b44      	ldr	r3, [pc, #272]	; (800e648 <ProcessSendingSignals2MIE+0x198>)
 800e538:	785b      	ldrb	r3, [r3, #1]
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d107      	bne.n	800e54e <ProcessSendingSignals2MIE+0x9e>
			 * CAN Exchange Happening
			 * MisMatch Found because of This Card is Receiving,
			 * Other Card is Not Receiving
			 */
			//			printf("\n4\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800e53e:	4b46      	ldr	r3, [pc, #280]	; (800e658 <ProcessSendingSignals2MIE+0x1a8>)
 800e540:	881b      	ldrh	r3, [r3, #0]
 800e542:	461a      	mov	r2, r3
 800e544:	4945      	ldr	r1, [pc, #276]	; (800e65c <ProcessSendingSignals2MIE+0x1ac>)
 800e546:	4846      	ldr	r0, [pc, #280]	; (800e660 <ProcessSendingSignals2MIE+0x1b0>)
 800e548:	f018 fa40 	bl	80269cc <memcpy>
 800e54c:	e005      	b.n	800e55a <ProcessSendingSignals2MIE+0xaa>
		}
		else
		{
			//			printf("\n5\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800e54e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e552:	2100      	movs	r1, #0
 800e554:	4842      	ldr	r0, [pc, #264]	; (800e660 <ProcessSendingSignals2MIE+0x1b0>)
 800e556:	f018 fa61 	bl	8026a1c <memset>
		}


		if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800e55a:	4b3e      	ldr	r3, [pc, #248]	; (800e654 <ProcessSendingSignals2MIE+0x1a4>)
 800e55c:	885b      	ldrh	r3, [r3, #2]
 800e55e:	461a      	mov	r2, r3
 800e560:	4b3a      	ldr	r3, [pc, #232]	; (800e64c <ProcessSendingSignals2MIE+0x19c>)
 800e562:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e566:	429a      	cmp	r2, r3
 800e568:	d30d      	bcc.n	800e586 <ProcessSendingSignals2MIE+0xd6>
 800e56a:	4b39      	ldr	r3, [pc, #228]	; (800e650 <ProcessSendingSignals2MIE+0x1a0>)
 800e56c:	885b      	ldrh	r3, [r3, #2]
 800e56e:	461a      	mov	r2, r3
 800e570:	4b36      	ldr	r3, [pc, #216]	; (800e64c <ProcessSendingSignals2MIE+0x19c>)
 800e572:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e576:	429a      	cmp	r2, r3
 800e578:	d305      	bcc.n	800e586 <ProcessSendingSignals2MIE+0xd6>
		{
			//			printf("\n6\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800e57a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e57e:	2100      	movs	r1, #0
 800e580:	4837      	ldr	r0, [pc, #220]	; (800e660 <ProcessSendingSignals2MIE+0x1b0>)
 800e582:	f018 fa4b 	bl	8026a1c <memset>
		}

		VitalData2MIE_st.NoofDataBytes = EI_data.Siemens_st.Booloutputs  % 8;
 800e586:	4b31      	ldr	r3, [pc, #196]	; (800e64c <ProcessSendingSignals2MIE+0x19c>)
 800e588:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e58c:	f003 0307 	and.w	r3, r3, #7
 800e590:	b29a      	uxth	r2, r3
 800e592:	4b36      	ldr	r3, [pc, #216]	; (800e66c <ProcessSendingSignals2MIE+0x1bc>)
 800e594:	801a      	strh	r2, [r3, #0]

		if(VitalData2MIE_st.NoofDataBytes != 0)
 800e596:	4b35      	ldr	r3, [pc, #212]	; (800e66c <ProcessSendingSignals2MIE+0x1bc>)
 800e598:	881b      	ldrh	r3, [r3, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d009      	beq.n	800e5b2 <ProcessSendingSignals2MIE+0x102>
		{
			VitalData2MIE_st.NoofDataBytes  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800e59e:	4b2b      	ldr	r3, [pc, #172]	; (800e64c <ProcessSendingSignals2MIE+0x19c>)
 800e5a0:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e5a4:	08db      	lsrs	r3, r3, #3
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	b29a      	uxth	r2, r3
 800e5ac:	4b2f      	ldr	r3, [pc, #188]	; (800e66c <ProcessSendingSignals2MIE+0x1bc>)
 800e5ae:	801a      	strh	r2, [r3, #0]
 800e5b0:	e006      	b.n	800e5c0 <ProcessSendingSignals2MIE+0x110>
		}
		else
		{
			VitalData2MIE_st.NoofDataBytes = (EI_data.Siemens_st.Booloutputs / 8);
 800e5b2:	4b26      	ldr	r3, [pc, #152]	; (800e64c <ProcessSendingSignals2MIE+0x19c>)
 800e5b4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e5b8:	08db      	lsrs	r3, r3, #3
 800e5ba:	b29a      	uxth	r2, r3
 800e5bc:	4b2b      	ldr	r3, [pc, #172]	; (800e66c <ProcessSendingSignals2MIE+0x1bc>)
 800e5be:	801a      	strh	r2, [r3, #0]
		}

		if(((strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)) && (SiemensClocks_st.SiemensCanXchangeHappening == NO))
 800e5c0:	492b      	ldr	r1, [pc, #172]	; (800e670 <ProcessSendingSignals2MIE+0x1c0>)
 800e5c2:	482c      	ldr	r0, [pc, #176]	; (800e674 <ProcessSendingSignals2MIE+0x1c4>)
 800e5c4:	f7f1 fe3c 	bl	8000240 <strcmp>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d008      	beq.n	800e5e0 <ProcessSendingSignals2MIE+0x130>
 800e5ce:	4b1e      	ldr	r3, [pc, #120]	; (800e648 <ProcessSendingSignals2MIE+0x198>)
 800e5d0:	785b      	ldrb	r3, [r3, #1]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d104      	bne.n	800e5e0 <ProcessSendingSignals2MIE+0x130>
		{
			TransmitCanPkt(EI_PROCESS_DATA);
 800e5d6:	f240 1019 	movw	r0, #281	; 0x119
 800e5da:	f002 fd93 	bl	8011104 <TransmitCanPkt>
 800e5de:	e011      	b.n	800e604 <ProcessSendingSignals2MIE+0x154>
		}
#ifdef EI_1
		else
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800e5e0:	4923      	ldr	r1, [pc, #140]	; (800e670 <ProcessSendingSignals2MIE+0x1c0>)
 800e5e2:	4824      	ldr	r0, [pc, #144]	; (800e674 <ProcessSendingSignals2MIE+0x1c4>)
 800e5e4:	f7f1 fe2c 	bl	8000240 <strcmp>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d106      	bne.n	800e5fc <ProcessSendingSignals2MIE+0x14c>
			{
				memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800e5ee:	4b1a      	ldr	r3, [pc, #104]	; (800e658 <ProcessSendingSignals2MIE+0x1a8>)
 800e5f0:	881b      	ldrh	r3, [r3, #0]
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	4919      	ldr	r1, [pc, #100]	; (800e65c <ProcessSendingSignals2MIE+0x1ac>)
 800e5f6:	481a      	ldr	r0, [pc, #104]	; (800e660 <ProcessSendingSignals2MIE+0x1b0>)
 800e5f8:	f018 f9e8 	bl	80269cc <memcpy>
			}
			TransmitCanPkt(EI_PROCESS_DATA);
 800e5fc:	f240 1019 	movw	r0, #281	; 0x119
 800e600:	f002 fd80 	bl	8011104 <TransmitCanPkt>




#ifdef EI_1
		printf("\nSendingRelaysToMIE:");
 800e604:	481c      	ldr	r0, [pc, #112]	; (800e678 <ProcessSendingSignals2MIE+0x1c8>)
 800e606:	f018 faf1 	bl	8026bec <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800e60a:	2300      	movs	r3, #0
 800e60c:	80fb      	strh	r3, [r7, #6]
 800e60e:	e00a      	b.n	800e626 <ProcessSendingSignals2MIE+0x176>
		{
			printf("%02X ",VitalData2MIE_st.Relays[Traverser]);
 800e610:	88fb      	ldrh	r3, [r7, #6]
 800e612:	4a16      	ldr	r2, [pc, #88]	; (800e66c <ProcessSendingSignals2MIE+0x1bc>)
 800e614:	4413      	add	r3, r2
 800e616:	789b      	ldrb	r3, [r3, #2]
 800e618:	4619      	mov	r1, r3
 800e61a:	4818      	ldr	r0, [pc, #96]	; (800e67c <ProcessSendingSignals2MIE+0x1cc>)
 800e61c:	f018 fae6 	bl	8026bec <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800e620:	88fb      	ldrh	r3, [r7, #6]
 800e622:	3301      	adds	r3, #1
 800e624:	80fb      	strh	r3, [r7, #6]
 800e626:	4b11      	ldr	r3, [pc, #68]	; (800e66c <ProcessSendingSignals2MIE+0x1bc>)
 800e628:	881b      	ldrh	r3, [r3, #0]
 800e62a:	88fa      	ldrh	r2, [r7, #6]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d3ef      	bcc.n	800e610 <ProcessSendingSignals2MIE+0x160>
		}
		printf("\n");
 800e630:	200a      	movs	r0, #10
 800e632:	f018 faf3 	bl	8026c1c <putchar>




#endif
		SiemensClocks_st.Signal2MIE_Clk = HAL_GetTick();
 800e636:	f00b facf 	bl	8019bd8 <HAL_GetTick>
 800e63a:	4603      	mov	r3, r0
 800e63c:	4a02      	ldr	r2, [pc, #8]	; (800e648 <ProcessSendingSignals2MIE+0x198>)
 800e63e:	6053      	str	r3, [r2, #4]
	}
}
 800e640:	bf00      	nop
 800e642:	3708      	adds	r7, #8
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}
 800e648:	20004c8c 	.word	0x20004c8c
 800e64c:	20000504 	.word	0x20000504
 800e650:	20004c84 	.word	0x20004c84
 800e654:	20004c80 	.word	0x20004c80
 800e658:	20004eac 	.word	0x20004eac
 800e65c:	20004eb0 	.word	0x20004eb0
 800e660:	20004caa 	.word	0x20004caa
 800e664:	200050b0 	.word	0x200050b0
 800e668:	200050b4 	.word	0x200050b4
 800e66c:	20004ca8 	.word	0x20004ca8
 800e670:	0802ab8c 	.word	0x0802ab8c
 800e674:	20000505 	.word	0x20000505
 800e678:	0802ac48 	.word	0x0802ac48
 800e67c:	0802ac60 	.word	0x0802ac60

0800e680 <ProcessSelfSharing>:


void ProcessSelfSharing(void)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.SelfSharingClk) > EI_data.Siemens_st.CAN_Xchange_Time)
 800e684:	4b0c      	ldr	r3, [pc, #48]	; (800e6b8 <ProcessSelfSharing+0x38>)
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	4618      	mov	r0, r3
 800e68a:	f001 ff87 	bl	801059c <HAL_Elaps_Ticks>
 800e68e:	4602      	mov	r2, r0
 800e690:	4b0a      	ldr	r3, [pc, #40]	; (800e6bc <ProcessSelfSharing+0x3c>)
 800e692:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800e696:	429a      	cmp	r2, r3
 800e698:	d90b      	bls.n	800e6b2 <ProcessSelfSharing+0x32>
	{
		Tx_Siemens_self_sharing_st.MesgReceived = NOT_RECEIVED;
 800e69a:	4b09      	ldr	r3, [pc, #36]	; (800e6c0 <ProcessSelfSharing+0x40>)
 800e69c:	2200      	movs	r2, #0
 800e69e:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800e6a0:	f240 2001 	movw	r0, #513	; 0x201
 800e6a4:	f002 fd2e 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

		SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800e6a8:	f00b fa96 	bl	8019bd8 <HAL_GetTick>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	4a02      	ldr	r2, [pc, #8]	; (800e6b8 <ProcessSelfSharing+0x38>)
 800e6b0:	6093      	str	r3, [r2, #8]
	}
}
 800e6b2:	bf00      	nop
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20004c8c 	.word	0x20004c8c
 800e6bc:	20000504 	.word	0x20000504
 800e6c0:	20004c80 	.word	0x20004c80

0800e6c4 <ProcessDetectNoValidDataReceive>:

void ProcessDetectNoValidDataReceive(void)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	af00      	add	r7, sp, #0

	if((SiemensClocks_st.LastReceiveClk != 0) && (HAL_Elaps_Ticks(SiemensClocks_st.LastReceiveClk) > EI_data.Siemens_st.COMM_FAILURE_TIME_OUT) )
 800e6c8:	4b1a      	ldr	r3, [pc, #104]	; (800e734 <ProcessDetectNoValidDataReceive+0x70>)
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d014      	beq.n	800e6fa <ProcessDetectNoValidDataReceive+0x36>
 800e6d0:	4b18      	ldr	r3, [pc, #96]	; (800e734 <ProcessDetectNoValidDataReceive+0x70>)
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f001 ff61 	bl	801059c <HAL_Elaps_Ticks>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	4b16      	ldr	r3, [pc, #88]	; (800e738 <ProcessDetectNoValidDataReceive+0x74>)
 800e6de:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d909      	bls.n	800e6fa <ProcessDetectNoValidDataReceive+0x36>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800e6e6:	4b15      	ldr	r3, [pc, #84]	; (800e73c <ProcessDetectNoValidDataReceive+0x78>)
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d005      	beq.n	800e6fa <ProcessDetectNoValidDataReceive+0x36>
		{
			printf("This Card Not Receiving Data\n");
 800e6ee:	4814      	ldr	r0, [pc, #80]	; (800e740 <ProcessDetectNoValidDataReceive+0x7c>)
 800e6f0:	f018 fb18 	bl	8026d24 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800e6f4:	4b11      	ldr	r3, [pc, #68]	; (800e73c <ProcessDetectNoValidDataReceive+0x78>)
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	701a      	strb	r2, [r3, #0]
		}
	}

	if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800e6fa:	4b10      	ldr	r3, [pc, #64]	; (800e73c <ProcessDetectNoValidDataReceive+0x78>)
 800e6fc:	885b      	ldrh	r3, [r3, #2]
 800e6fe:	461a      	mov	r2, r3
 800e700:	4b0d      	ldr	r3, [pc, #52]	; (800e738 <ProcessDetectNoValidDataReceive+0x74>)
 800e702:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e706:	429a      	cmp	r2, r3
 800e708:	d911      	bls.n	800e72e <ProcessDetectNoValidDataReceive+0x6a>
 800e70a:	4b0e      	ldr	r3, [pc, #56]	; (800e744 <ProcessDetectNoValidDataReceive+0x80>)
 800e70c:	885b      	ldrh	r3, [r3, #2]
 800e70e:	461a      	mov	r2, r3
 800e710:	4b09      	ldr	r3, [pc, #36]	; (800e738 <ProcessDetectNoValidDataReceive+0x74>)
 800e712:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e716:	429a      	cmp	r2, r3
 800e718:	d909      	bls.n	800e72e <ProcessDetectNoValidDataReceive+0x6a>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800e71a:	4b08      	ldr	r3, [pc, #32]	; (800e73c <ProcessDetectNoValidDataReceive+0x78>)
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d005      	beq.n	800e72e <ProcessDetectNoValidDataReceive+0x6a>
		{
			printf("This Card Not Valid Receiving Data\n");
 800e722:	4809      	ldr	r0, [pc, #36]	; (800e748 <ProcessDetectNoValidDataReceive+0x84>)
 800e724:	f018 fafe 	bl	8026d24 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800e728:	4b04      	ldr	r3, [pc, #16]	; (800e73c <ProcessDetectNoValidDataReceive+0x78>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800e72e:	bf00      	nop
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	20004c8c 	.word	0x20004c8c
 800e738:	20000504 	.word	0x20000504
 800e73c:	20004c80 	.word	0x20004c80
 800e740:	0802ac68 	.word	0x0802ac68
 800e744:	20004c84 	.word	0x20004c84
 800e748:	0802ac88 	.word	0x0802ac88

0800e74c <SendRelays2Other>:

void SendRelays2Other(void)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.Relays2OtheClk) > ONE_SEC)
 800e750:	4b09      	ldr	r3, [pc, #36]	; (800e778 <SendRelays2Other+0x2c>)
 800e752:	691b      	ldr	r3, [r3, #16]
 800e754:	4618      	mov	r0, r3
 800e756:	f001 ff21 	bl	801059c <HAL_Elaps_Ticks>
 800e75a:	4603      	mov	r3, r0
 800e75c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e760:	d908      	bls.n	800e774 <SendRelays2Other+0x28>
	{

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800e762:	f240 2007 	movw	r0, #519	; 0x207
 800e766:	f002 fccd 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif
		SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800e76a:	f00b fa35 	bl	8019bd8 <HAL_GetTick>
 800e76e:	4603      	mov	r3, r0
 800e770:	4a01      	ldr	r2, [pc, #4]	; (800e778 <SendRelays2Other+0x2c>)
 800e772:	6113      	str	r3, [r2, #16]

	}
}
 800e774:	bf00      	nop
 800e776:	bd80      	pop	{r7, pc}
 800e778:	20004c8c 	.word	0x20004c8c

0800e77c <CheckRelayMisMatch>:

void CheckRelayMisMatch(void)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.RelayMisMatchCheckClk) > FIVE_HUNDRED_MS)
 800e780:	4b16      	ldr	r3, [pc, #88]	; (800e7dc <CheckRelayMisMatch+0x60>)
 800e782:	695b      	ldr	r3, [r3, #20]
 800e784:	4618      	mov	r0, r3
 800e786:	f001 ff09 	bl	801059c <HAL_Elaps_Ticks>
 800e78a:	4603      	mov	r3, r0
 800e78c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e790:	d922      	bls.n	800e7d8 <CheckRelayMisMatch+0x5c>
	{
		if( (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800e792:	4b13      	ldr	r3, [pc, #76]	; (800e7e0 <CheckRelayMisMatch+0x64>)
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10c      	bne.n	800e7b4 <CheckRelayMisMatch+0x38>
 800e79a:	4b12      	ldr	r3, [pc, #72]	; (800e7e4 <CheckRelayMisMatch+0x68>)
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	2b01      	cmp	r3, #1
 800e7a0:	d108      	bne.n	800e7b4 <CheckRelayMisMatch+0x38>
		{
			memcpy(&SiemensMain_Relays_st,&Siemens_OtherRelays_st,sizeof(VITAL_DATA_SHARING_t));
 800e7a2:	4a11      	ldr	r2, [pc, #68]	; (800e7e8 <CheckRelayMisMatch+0x6c>)
 800e7a4:	4b11      	ldr	r3, [pc, #68]	; (800e7ec <CheckRelayMisMatch+0x70>)
 800e7a6:	4610      	mov	r0, r2
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	f44f 7301 	mov.w	r3, #516	; 0x204
 800e7ae:	461a      	mov	r2, r3
 800e7b0:	f018 f90c 	bl	80269cc <memcpy>
		}
		if(Siemens_OtherRelays_st.VitalCRC != SiemensMain_Relays_st.VitalCRC)
 800e7b4:	4b0d      	ldr	r3, [pc, #52]	; (800e7ec <CheckRelayMisMatch+0x70>)
 800e7b6:	885a      	ldrh	r2, [r3, #2]
 800e7b8:	4b0b      	ldr	r3, [pc, #44]	; (800e7e8 <CheckRelayMisMatch+0x6c>)
 800e7ba:	885b      	ldrh	r3, [r3, #2]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d003      	beq.n	800e7c8 <CheckRelayMisMatch+0x4c>
		{
			SiemensClocks_st.MisMatchFlag = SET;
 800e7c0:	4b06      	ldr	r3, [pc, #24]	; (800e7dc <CheckRelayMisMatch+0x60>)
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	701a      	strb	r2, [r3, #0]
 800e7c6:	e002      	b.n	800e7ce <CheckRelayMisMatch+0x52>
		}
		else
		{
			SiemensClocks_st.MisMatchFlag = RESET;
 800e7c8:	4b04      	ldr	r3, [pc, #16]	; (800e7dc <CheckRelayMisMatch+0x60>)
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	701a      	strb	r2, [r3, #0]
		}

		SiemensClocks_st.RelayMisMatchCheckClk = HAL_GetTick();
 800e7ce:	f00b fa03 	bl	8019bd8 <HAL_GetTick>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	4a01      	ldr	r2, [pc, #4]	; (800e7dc <CheckRelayMisMatch+0x60>)
 800e7d6:	6153      	str	r3, [r2, #20]
	}
}
 800e7d8:	bf00      	nop
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	20004c8c 	.word	0x20004c8c
 800e7e0:	20004c80 	.word	0x20004c80
 800e7e4:	20004c84 	.word	0x20004c84
 800e7e8:	20004eac 	.word	0x20004eac
 800e7ec:	200050b0 	.word	0x200050b0

0800e7f0 <Detect_SiemensCAN_Xchange_Failure>:

void Detect_SiemensCAN_Xchange_Failure(void)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(SiemensClocks_st.SiemensCanXchangeHappening == YES)
 800e7f4:	4b16      	ldr	r3, [pc, #88]	; (800e850 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e7f6:	785b      	ldrb	r3, [r3, #1]
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d101      	bne.n	800e800 <Detect_SiemensCAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 800e7fc:	f007 ff0e 	bl	801661c <Blink_S2>
	}

	if(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)>= EI_data.Siemens_st.CAN_EXCHANGE_TIME_OUT)
 800e800:	4b13      	ldr	r3, [pc, #76]	; (800e850 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e802:	699b      	ldr	r3, [r3, #24]
 800e804:	4618      	mov	r0, r3
 800e806:	f001 fec9 	bl	801059c <HAL_Elaps_Ticks>
 800e80a:	4602      	mov	r2, r0
 800e80c:	4b11      	ldr	r3, [pc, #68]	; (800e854 <Detect_SiemensCAN_Xchange_Failure+0x64>)
 800e80e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800e812:	429a      	cmp	r2, r3
 800e814:	d31a      	bcc.n	800e84c <Detect_SiemensCAN_Xchange_Failure+0x5c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)
 800e816:	4b0e      	ldr	r3, [pc, #56]	; (800e850 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e818:	699a      	ldr	r2, [r3, #24]
 800e81a:	4b0f      	ldr	r3, [pc, #60]	; (800e858 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d014      	beq.n	800e84c <Detect_SiemensCAN_Xchange_Failure+0x5c>
		{
			SiemensClocks_st.SiemensCanXchangeHappening = NO;
 800e822:	4b0b      	ldr	r3, [pc, #44]	; (800e850 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e824:	2200      	movs	r2, #0
 800e826:	705a      	strb	r2, [r3, #1]
			Previous_Clock_RCV_SELF_XCHG_CLK = SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK;
 800e828:	4b09      	ldr	r3, [pc, #36]	; (800e850 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e82a:	699b      	ldr	r3, [r3, #24]
 800e82c:	4a0a      	ldr	r2, [pc, #40]	; (800e858 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800e82e:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)/1000));
 800e830:	4b07      	ldr	r3, [pc, #28]	; (800e850 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e832:	699b      	ldr	r3, [r3, #24]
 800e834:	4618      	mov	r0, r3
 800e836:	f001 feb1 	bl	801059c <HAL_Elaps_Ticks>
 800e83a:	4603      	mov	r3, r0
 800e83c:	4a07      	ldr	r2, [pc, #28]	; (800e85c <Detect_SiemensCAN_Xchange_Failure+0x6c>)
 800e83e:	fba2 2303 	umull	r2, r3, r2, r3
 800e842:	099b      	lsrs	r3, r3, #6
 800e844:	4619      	mov	r1, r3
 800e846:	4806      	ldr	r0, [pc, #24]	; (800e860 <Detect_SiemensCAN_Xchange_Failure+0x70>)
 800e848:	f018 f9d0 	bl	8026bec <iprintf>
		}
	}
}
 800e84c:	bf00      	nop
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	20004c8c 	.word	0x20004c8c
 800e854:	20000504 	.word	0x20000504
 800e858:	200063a4 	.word	0x200063a4
 800e85c:	10624dd3 	.word	0x10624dd3
 800e860:	0802acac 	.word	0x0802acac

0800e864 <Print_Siemens_MSG>:

void Print_Siemens_MSG(SIEMENS_PKT_t *SiemensPrint_st,uint8_t *Buff,uint16_t Length,uint8_t TX_RX)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	4611      	mov	r1, r2
 800e870:	461a      	mov	r2, r3
 800e872:	460b      	mov	r3, r1
 800e874:	80fb      	strh	r3, [r7, #6]
 800e876:	4613      	mov	r3, r2
 800e878:	717b      	strb	r3, [r7, #5]

	//	printf("\n________________________________________________________________________________________________\n");
	printf("\nTX_RX:");
 800e87a:	484d      	ldr	r0, [pc, #308]	; (800e9b0 <Print_Siemens_MSG+0x14c>)
 800e87c:	f018 f9b6 	bl	8026bec <iprintf>
	if(TX_RX == TX)
 800e880:	797b      	ldrb	r3, [r7, #5]
 800e882:	2b01      	cmp	r3, #1
 800e884:	d103      	bne.n	800e88e <Print_Siemens_MSG+0x2a>
	{
		printf("TX|");
 800e886:	484b      	ldr	r0, [pc, #300]	; (800e9b4 <Print_Siemens_MSG+0x150>)
 800e888:	f018 f9b0 	bl	8026bec <iprintf>
 800e88c:	e005      	b.n	800e89a <Print_Siemens_MSG+0x36>
	}
	else if(TX_RX == RX)
 800e88e:	797b      	ldrb	r3, [r7, #5]
 800e890:	2b02      	cmp	r3, #2
 800e892:	d102      	bne.n	800e89a <Print_Siemens_MSG+0x36>
	{
		printf("RX|");
 800e894:	4848      	ldr	r0, [pc, #288]	; (800e9b8 <Print_Siemens_MSG+0x154>)
 800e896:	f018 f9a9 	bl	8026bec <iprintf>
	}
	printf("DT:%u|",SiemensPrint_st->DesSysType);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	4619      	mov	r1, r3
 800e8a0:	4846      	ldr	r0, [pc, #280]	; (800e9bc <Print_Siemens_MSG+0x158>)
 800e8a2:	f018 f9a3 	bl	8026bec <iprintf>
	printf("DA:%lu|",SiemensPrint_st->ExtDestAddr);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	4844      	ldr	r0, [pc, #272]	; (800e9c0 <Print_Siemens_MSG+0x15c>)
 800e8ae:	f018 f99d 	bl	8026bec <iprintf>
	printf("ST:%u|",SiemensPrint_st->SrcSysType);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	7b1b      	ldrb	r3, [r3, #12]
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	4842      	ldr	r0, [pc, #264]	; (800e9c4 <Print_Siemens_MSG+0x160>)
 800e8ba:	f018 f997 	bl	8026bec <iprintf>
	printf("SA:%lu|",SiemensPrint_st->ExtSourceAddr);
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	695b      	ldr	r3, [r3, #20]
 800e8c2:	4619      	mov	r1, r3
 800e8c4:	4840      	ldr	r0, [pc, #256]	; (800e9c8 <Print_Siemens_MSG+0x164>)
 800e8c6:	f018 f991 	bl	8026bec <iprintf>
	printf("PD_V:%u|",SiemensPrint_st->ProdDataVer);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	7e1b      	ldrb	r3, [r3, #24]
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	483e      	ldr	r0, [pc, #248]	; (800e9cc <Print_Siemens_MSG+0x168>)
 800e8d2:	f018 f98b 	bl	8026bec <iprintf>
	printf("CI:%u|",SiemensPrint_st->CompIndex);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	7e5b      	ldrb	r3, [r3, #25]
 800e8da:	4619      	mov	r1, r3
 800e8dc:	483c      	ldr	r0, [pc, #240]	; (800e9d0 <Print_Siemens_MSG+0x16c>)
 800e8de:	f018 f985 	bl	8026bec <iprintf>
	printf("DP:%u|",SiemensPrint_st->DestPort);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	7e9b      	ldrb	r3, [r3, #26]
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	483a      	ldr	r0, [pc, #232]	; (800e9d4 <Print_Siemens_MSG+0x170>)
 800e8ea:	f018 f97f 	bl	8026bec <iprintf>
	printf("SP:%u|",SiemensPrint_st->SourcePort);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	7edb      	ldrb	r3, [r3, #27]
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	4838      	ldr	r0, [pc, #224]	; (800e9d8 <Print_Siemens_MSG+0x174>)
 800e8f6:	f018 f979 	bl	8026bec <iprintf>
	printf("RX_TS:%lu|",SiemensPrint_st->RxTimeStamp);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	69db      	ldr	r3, [r3, #28]
 800e8fe:	4619      	mov	r1, r3
 800e900:	4836      	ldr	r0, [pc, #216]	; (800e9dc <Print_Siemens_MSG+0x178>)
 800e902:	f018 f973 	bl	8026bec <iprintf>
	printf("TX_TS:%lu\n",SiemensPrint_st->TxTimeStamp);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	6a1b      	ldr	r3, [r3, #32]
 800e90a:	4619      	mov	r1, r3
 800e90c:	4834      	ldr	r0, [pc, #208]	; (800e9e0 <Print_Siemens_MSG+0x17c>)
 800e90e:	f018 f96d 	bl	8026bec <iprintf>
	if(TX_RX == RX)
 800e912:	797b      	ldrb	r3, [r7, #5]
 800e914:	2b02      	cmp	r3, #2
 800e916:	d122      	bne.n	800e95e <Print_Siemens_MSG+0xfa>
	{
		printf("RC:%u|",SiemensPrint_st->No_ofDataBytes);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e91c:	4619      	mov	r1, r3
 800e91e:	4831      	ldr	r0, [pc, #196]	; (800e9e4 <Print_Siemens_MSG+0x180>)
 800e920:	f018 f964 	bl	8026bec <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800e924:	2300      	movs	r3, #0
 800e926:	82fb      	strh	r3, [r7, #22]
 800e928:	e00b      	b.n	800e942 <Print_Siemens_MSG+0xde>
		{
			printf("%02X ",SiemensPrint_st->AppData[Traverser]);
 800e92a:	8afb      	ldrh	r3, [r7, #22]
 800e92c:	68fa      	ldr	r2, [r7, #12]
 800e92e:	4413      	add	r3, r2
 800e930:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800e934:	4619      	mov	r1, r3
 800e936:	482c      	ldr	r0, [pc, #176]	; (800e9e8 <Print_Siemens_MSG+0x184>)
 800e938:	f018 f958 	bl	8026bec <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800e93c:	8afb      	ldrh	r3, [r7, #22]
 800e93e:	3301      	adds	r3, #1
 800e940:	82fb      	strh	r3, [r7, #22]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e946:	8afa      	ldrh	r2, [r7, #22]
 800e948:	429a      	cmp	r2, r3
 800e94a:	d3ee      	bcc.n	800e92a <Print_Siemens_MSG+0xc6>
		}
		printf("\n");
 800e94c:	200a      	movs	r0, #10
 800e94e:	f018 f965 	bl	8026c1c <putchar>

		if(Debug_flag == 2)
 800e952:	4b26      	ldr	r3, [pc, #152]	; (800e9ec <Print_Siemens_MSG+0x188>)
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	2b02      	cmp	r3, #2
 800e958:	d101      	bne.n	800e95e <Print_Siemens_MSG+0xfa>
		{
			PrintSignals();
 800e95a:	f000 ff65 	bl	800f828 <PrintSignals>
		//		}
		//		printf("\n____________________________________ \n");


	}
	if(Debug_flag == 1)
 800e95e:	4b23      	ldr	r3, [pc, #140]	; (800e9ec <Print_Siemens_MSG+0x188>)
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	2b01      	cmp	r3, #1
 800e964:	d120      	bne.n	800e9a8 <Print_Siemens_MSG+0x144>
	{
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800e966:	2300      	movs	r3, #0
 800e968:	82bb      	strh	r3, [r7, #20]
 800e96a:	e016      	b.n	800e99a <Print_Siemens_MSG+0x136>
		{
			if((Byte != 0) && ( (Byte % 32) == 0) )
 800e96c:	8abb      	ldrh	r3, [r7, #20]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d008      	beq.n	800e984 <Print_Siemens_MSG+0x120>
 800e972:	8abb      	ldrh	r3, [r7, #20]
 800e974:	f003 031f 	and.w	r3, r3, #31
 800e978:	b29b      	uxth	r3, r3
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d102      	bne.n	800e984 <Print_Siemens_MSG+0x120>
			{
				printf("\n");
 800e97e:	200a      	movs	r0, #10
 800e980:	f018 f94c 	bl	8026c1c <putchar>
			}
			printf("%02X ",Buff[Byte]);
 800e984:	8abb      	ldrh	r3, [r7, #20]
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	4413      	add	r3, r2
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	4619      	mov	r1, r3
 800e98e:	4816      	ldr	r0, [pc, #88]	; (800e9e8 <Print_Siemens_MSG+0x184>)
 800e990:	f018 f92c 	bl	8026bec <iprintf>
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800e994:	8abb      	ldrh	r3, [r7, #20]
 800e996:	3301      	adds	r3, #1
 800e998:	82bb      	strh	r3, [r7, #20]
 800e99a:	8aba      	ldrh	r2, [r7, #20]
 800e99c:	88fb      	ldrh	r3, [r7, #6]
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d3e4      	bcc.n	800e96c <Print_Siemens_MSG+0x108>
		}
		printf("\n");
 800e9a2:	200a      	movs	r0, #10
 800e9a4:	f018 f93a 	bl	8026c1c <putchar>
	}
	//	printf("\n");
	//	printf("\n________________________________________________________________________________________________\n");
}
 800e9a8:	bf00      	nop
 800e9aa:	3718      	adds	r7, #24
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	0802acdc 	.word	0x0802acdc
 800e9b4:	0802ace4 	.word	0x0802ace4
 800e9b8:	0802ace8 	.word	0x0802ace8
 800e9bc:	0802acec 	.word	0x0802acec
 800e9c0:	0802acf4 	.word	0x0802acf4
 800e9c4:	0802acfc 	.word	0x0802acfc
 800e9c8:	0802ad04 	.word	0x0802ad04
 800e9cc:	0802ad0c 	.word	0x0802ad0c
 800e9d0:	0802ad18 	.word	0x0802ad18
 800e9d4:	0802ad20 	.word	0x0802ad20
 800e9d8:	0802ad28 	.word	0x0802ad28
 800e9dc:	0802ad30 	.word	0x0802ad30
 800e9e0:	0802ad3c 	.word	0x0802ad3c
 800e9e4:	0802ad48 	.word	0x0802ad48
 800e9e8:	0802ac60 	.word	0x0802ac60
 800e9ec:	20000bbb 	.word	0x20000bbb

0800e9f0 <Chech_forSiemensCMD>:



void Chech_forSiemensCMD(void)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b09a      	sub	sp, #104	; 0x68
 800e9f4:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800ea02:	2300      	movs	r3, #0
 800ea04:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800ea08:	2300      	movs	r3, #0
 800ea0a:	603b      	str	r3, [r7, #0]
 800ea0c:	1d3b      	adds	r3, r7, #4
 800ea0e:	2260      	movs	r2, #96	; 0x60
 800ea10:	2100      	movs	r1, #0
 800ea12:	4618      	mov	r0, r3
 800ea14:	f018 f802 	bl	8026a1c <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800ea18:	4bb9      	ldr	r3, [pc, #740]	; (800ed00 <Chech_forSiemensCMD+0x310>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f001 fdbd 	bl	801059c <HAL_Elaps_Ticks>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b09      	cmp	r3, #9
 800ea26:	f240 81ad 	bls.w	800ed84 <Chech_forSiemensCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800ea2a:	e010      	b.n	800ea4e <Chech_forSiemensCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800ea2c:	2000      	movs	r0, #0
 800ea2e:	f00a fdab 	bl	8019588 <Com_Get_Byte>
 800ea32:	4603      	mov	r3, r0
 800ea34:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800ea38:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ea3c:	1c5a      	adds	r2, r3, #1
 800ea3e:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800ea42:	3368      	adds	r3, #104	; 0x68
 800ea44:	443b      	add	r3, r7
 800ea46:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800ea4a:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800ea4e:	2000      	movs	r0, #0
 800ea50:	f00a fd5a 	bl	8019508 <Com_DataReady>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d1e8      	bne.n	800ea2c <Chech_forSiemensCMD+0x3c>
		}
		if(Index>0)
 800ea5a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	f000 8144 	beq.w	800ecec <Chech_forSiemensCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800ea64:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ea68:	3368      	adds	r3, #104	; 0x68
 800ea6a:	443b      	add	r3, r7
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800ea72:	463b      	mov	r3, r7
 800ea74:	4619      	mov	r1, r3
 800ea76:	48a3      	ldr	r0, [pc, #652]	; (800ed04 <Chech_forSiemensCMD+0x314>)
 800ea78:	f018 f8b8 	bl	8026bec <iprintf>
			switch(Is_SiemensCommand_Valid(Buffer,Index))
 800ea7c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800ea80:	463b      	mov	r3, r7
 800ea82:	4611      	mov	r1, r2
 800ea84:	4618      	mov	r0, r3
 800ea86:	f000 faf3 	bl	800f070 <Is_SiemensCommand_Valid>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b0c      	cmp	r3, #12
 800ea8e:	f200 8129 	bhi.w	800ece4 <Chech_forSiemensCMD+0x2f4>
 800ea92:	a201      	add	r2, pc, #4	; (adr r2, 800ea98 <Chech_forSiemensCMD+0xa8>)
 800ea94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea98:	0800eacd 	.word	0x0800eacd
 800ea9c:	0800eadb 	.word	0x0800eadb
 800eaa0:	0800eb3f 	.word	0x0800eb3f
 800eaa4:	0800eb61 	.word	0x0800eb61
 800eaa8:	0800eb89 	.word	0x0800eb89
 800eaac:	0800ebb1 	.word	0x0800ebb1
 800eab0:	0800ebd9 	.word	0x0800ebd9
 800eab4:	0800ec01 	.word	0x0800ec01
 800eab8:	0800ec29 	.word	0x0800ec29
 800eabc:	0800ec51 	.word	0x0800ec51
 800eac0:	0800ec79 	.word	0x0800ec79
 800eac4:	0800eca1 	.word	0x0800eca1
 800eac8:	0800ecc9 	.word	0x0800ecc9
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800eacc:	4b8e      	ldr	r3, [pc, #568]	; (800ed08 <Chech_forSiemensCMD+0x318>)
 800eace:	2201      	movs	r2, #1
 800ead0:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800ead2:	488e      	ldr	r0, [pc, #568]	; (800ed0c <Chech_forSiemensCMD+0x31c>)
 800ead4:	f018 f926 	bl	8026d24 <puts>
				break;
 800ead8:	e109      	b.n	800ecee <Chech_forSiemensCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 800eada:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800eade:	3b01      	subs	r3, #1
 800eae0:	3368      	adds	r3, #104	; 0x68
 800eae2:	443b      	add	r3, r7
 800eae4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800eae8:	3b30      	subs	r3, #48	; 0x30
 800eaea:	461a      	mov	r2, r3
 800eaec:	4988      	ldr	r1, [pc, #544]	; (800ed10 <Chech_forSiemensCMD+0x320>)
 800eaee:	4889      	ldr	r0, [pc, #548]	; (800ed14 <Chech_forSiemensCMD+0x324>)
 800eaf0:	f018 f87c 	bl	8026bec <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800eaf4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	3368      	adds	r3, #104	; 0x68
 800eafc:	443b      	add	r3, r7
 800eafe:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800eb02:	2b2f      	cmp	r3, #47	; 0x2f
 800eb04:	d914      	bls.n	800eb30 <Chech_forSiemensCMD+0x140>
 800eb06:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	3368      	adds	r3, #104	; 0x68
 800eb0e:	443b      	add	r3, r7
 800eb10:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800eb14:	2b32      	cmp	r3, #50	; 0x32
 800eb16:	d80b      	bhi.n	800eb30 <Chech_forSiemensCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800eb18:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	3368      	adds	r3, #104	; 0x68
 800eb20:	443b      	add	r3, r7
 800eb22:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800eb26:	3b30      	subs	r3, #48	; 0x30
 800eb28:	b2da      	uxtb	r2, r3
 800eb2a:	4b7b      	ldr	r3, [pc, #492]	; (800ed18 <Chech_forSiemensCMD+0x328>)
 800eb2c:	701a      	strb	r2, [r3, #0]
 800eb2e:	e002      	b.n	800eb36 <Chech_forSiemensCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800eb30:	487a      	ldr	r0, [pc, #488]	; (800ed1c <Chech_forSiemensCMD+0x32c>)
 800eb32:	f018 f8f7 	bl	8026d24 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800eb36:	2301      	movs	r3, #1
 800eb38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800eb3c:	e0d7      	b.n	800ecee <Chech_forSiemensCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_List[TWO]);
 800eb3e:	4978      	ldr	r1, [pc, #480]	; (800ed20 <Chech_forSiemensCMD+0x330>)
 800eb40:	4878      	ldr	r0, [pc, #480]	; (800ed24 <Chech_forSiemensCMD+0x334>)
 800eb42:	f018 f853 	bl	8026bec <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800eb46:	4878      	ldr	r0, [pc, #480]	; (800ed28 <Chech_forSiemensCMD+0x338>)
 800eb48:	f018 f8ec 	bl	8026d24 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800eb4c:	4b77      	ldr	r3, [pc, #476]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f043 0301 	orr.w	r3, r3, #1
 800eb54:	4a75      	ldr	r2, [pc, #468]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800eb56:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800eb58:	2301      	movs	r3, #1
 800eb5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800eb5e:	e0c6      	b.n	800ecee <Chech_forSiemensCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_List[THREE]);
 800eb60:	4973      	ldr	r1, [pc, #460]	; (800ed30 <Chech_forSiemensCMD+0x340>)
 800eb62:	4870      	ldr	r0, [pc, #448]	; (800ed24 <Chech_forSiemensCMD+0x334>)
 800eb64:	f018 f842 	bl	8026bec <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800eb68:	4872      	ldr	r0, [pc, #456]	; (800ed34 <Chech_forSiemensCMD+0x344>)
 800eb6a:	f018 f8db 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800eb6e:	4b6f      	ldr	r3, [pc, #444]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800eb70:	2200      	movs	r2, #0
 800eb72:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800eb74:	4b6d      	ldr	r3, [pc, #436]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f043 0302 	orr.w	r3, r3, #2
 800eb7c:	4a6b      	ldr	r2, [pc, #428]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800eb7e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800eb80:	2301      	movs	r3, #1
 800eb82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800eb86:	e0b2      	b.n	800ecee <Chech_forSiemensCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_List[FOUR]);
 800eb88:	496b      	ldr	r1, [pc, #428]	; (800ed38 <Chech_forSiemensCMD+0x348>)
 800eb8a:	4866      	ldr	r0, [pc, #408]	; (800ed24 <Chech_forSiemensCMD+0x334>)
 800eb8c:	f018 f82e 	bl	8026bec <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800eb90:	486a      	ldr	r0, [pc, #424]	; (800ed3c <Chech_forSiemensCMD+0x34c>)
 800eb92:	f018 f8c7 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800eb96:	4b65      	ldr	r3, [pc, #404]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800eb98:	2200      	movs	r2, #0
 800eb9a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800eb9c:	4b63      	ldr	r3, [pc, #396]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f043 0304 	orr.w	r3, r3, #4
 800eba4:	4a61      	ldr	r2, [pc, #388]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800eba6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ebae:	e09e      	b.n	800ecee <Chech_forSiemensCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_List[FIVE]);
 800ebb0:	4963      	ldr	r1, [pc, #396]	; (800ed40 <Chech_forSiemensCMD+0x350>)
 800ebb2:	485c      	ldr	r0, [pc, #368]	; (800ed24 <Chech_forSiemensCMD+0x334>)
 800ebb4:	f018 f81a 	bl	8026bec <iprintf>
				printf("INVALID_DES_PORT\n");
 800ebb8:	4862      	ldr	r0, [pc, #392]	; (800ed44 <Chech_forSiemensCMD+0x354>)
 800ebba:	f018 f8b3 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ebbe:	4b5b      	ldr	r3, [pc, #364]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ebc4:	4b59      	ldr	r3, [pc, #356]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f043 0308 	orr.w	r3, r3, #8
 800ebcc:	4a57      	ldr	r2, [pc, #348]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ebce:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ebd6:	e08a      	b.n	800ecee <Chech_forSiemensCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_List[SIX]);
 800ebd8:	495b      	ldr	r1, [pc, #364]	; (800ed48 <Chech_forSiemensCMD+0x358>)
 800ebda:	4852      	ldr	r0, [pc, #328]	; (800ed24 <Chech_forSiemensCMD+0x334>)
 800ebdc:	f018 f806 	bl	8026bec <iprintf>
				printf("INVALID_SRC_PORT\n");
 800ebe0:	485a      	ldr	r0, [pc, #360]	; (800ed4c <Chech_forSiemensCMD+0x35c>)
 800ebe2:	f018 f89f 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ebe6:	4b51      	ldr	r3, [pc, #324]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ebe8:	2200      	movs	r2, #0
 800ebea:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ebec:	4b4f      	ldr	r3, [pc, #316]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f043 0310 	orr.w	r3, r3, #16
 800ebf4:	4a4d      	ldr	r2, [pc, #308]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ebf6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ebfe:	e076      	b.n	800ecee <Chech_forSiemensCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_List[SEVEN]);
 800ec00:	4953      	ldr	r1, [pc, #332]	; (800ed50 <Chech_forSiemensCMD+0x360>)
 800ec02:	4848      	ldr	r0, [pc, #288]	; (800ed24 <Chech_forSiemensCMD+0x334>)
 800ec04:	f017 fff2 	bl	8026bec <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800ec08:	4852      	ldr	r0, [pc, #328]	; (800ed54 <Chech_forSiemensCMD+0x364>)
 800ec0a:	f018 f88b 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ec0e:	4b47      	ldr	r3, [pc, #284]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ec10:	2200      	movs	r2, #0
 800ec12:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ec14:	4b45      	ldr	r3, [pc, #276]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f043 0320 	orr.w	r3, r3, #32
 800ec1c:	4a43      	ldr	r2, [pc, #268]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ec1e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ec20:	2301      	movs	r3, #1
 800ec22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ec26:	e062      	b.n	800ecee <Chech_forSiemensCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 800ec28:	494b      	ldr	r1, [pc, #300]	; (800ed58 <Chech_forSiemensCMD+0x368>)
 800ec2a:	484c      	ldr	r0, [pc, #304]	; (800ed5c <Chech_forSiemensCMD+0x36c>)
 800ec2c:	f017 ffde 	bl	8026bec <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800ec30:	484b      	ldr	r0, [pc, #300]	; (800ed60 <Chech_forSiemensCMD+0x370>)
 800ec32:	f018 f877 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ec36:	4b3d      	ldr	r3, [pc, #244]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ec38:	2200      	movs	r2, #0
 800ec3a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ec3c:	4b3b      	ldr	r3, [pc, #236]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec44:	4a39      	ldr	r2, [pc, #228]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ec46:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ec4e:	e04e      	b.n	800ecee <Chech_forSiemensCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_List[NINE]);
 800ec50:	4944      	ldr	r1, [pc, #272]	; (800ed64 <Chech_forSiemensCMD+0x374>)
 800ec52:	4834      	ldr	r0, [pc, #208]	; (800ed24 <Chech_forSiemensCMD+0x334>)
 800ec54:	f017 ffca 	bl	8026bec <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800ec58:	4843      	ldr	r0, [pc, #268]	; (800ed68 <Chech_forSiemensCMD+0x378>)
 800ec5a:	f018 f863 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ec5e:	4b33      	ldr	r3, [pc, #204]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ec60:	2200      	movs	r2, #0
 800ec62:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ec64:	4b31      	ldr	r3, [pc, #196]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec6c:	4a2f      	ldr	r2, [pc, #188]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ec6e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ec70:	2301      	movs	r3, #1
 800ec72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ec76:	e03a      	b.n	800ecee <Chech_forSiemensCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_List[TEN]);
 800ec78:	493c      	ldr	r1, [pc, #240]	; (800ed6c <Chech_forSiemensCMD+0x37c>)
 800ec7a:	482a      	ldr	r0, [pc, #168]	; (800ed24 <Chech_forSiemensCMD+0x334>)
 800ec7c:	f017 ffb6 	bl	8026bec <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800ec80:	483b      	ldr	r0, [pc, #236]	; (800ed70 <Chech_forSiemensCMD+0x380>)
 800ec82:	f018 f84f 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ec86:	4b29      	ldr	r3, [pc, #164]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ec88:	2200      	movs	r2, #0
 800ec8a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ec8c:	4b27      	ldr	r3, [pc, #156]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec94:	4a25      	ldr	r2, [pc, #148]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ec96:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ec9e:	e026      	b.n	800ecee <Chech_forSiemensCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_List[ELEVEN]);
 800eca0:	4934      	ldr	r1, [pc, #208]	; (800ed74 <Chech_forSiemensCMD+0x384>)
 800eca2:	4820      	ldr	r0, [pc, #128]	; (800ed24 <Chech_forSiemensCMD+0x334>)
 800eca4:	f017 ffa2 	bl	8026bec <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800eca8:	4833      	ldr	r0, [pc, #204]	; (800ed78 <Chech_forSiemensCMD+0x388>)
 800ecaa:	f018 f83b 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ecae:	4b1f      	ldr	r3, [pc, #124]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ecb4:	4b1d      	ldr	r3, [pc, #116]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ecbc:	4a1b      	ldr	r2, [pc, #108]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ecbe:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ecc6:	e012      	b.n	800ecee <Chech_forSiemensCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_List[TWELVE]);
 800ecc8:	492c      	ldr	r1, [pc, #176]	; (800ed7c <Chech_forSiemensCMD+0x38c>)
 800ecca:	4816      	ldr	r0, [pc, #88]	; (800ed24 <Chech_forSiemensCMD+0x334>)
 800eccc:	f017 ff8e 	bl	8026bec <iprintf>
				printf("CLEAR ALL\n");
 800ecd0:	482b      	ldr	r0, [pc, #172]	; (800ed80 <Chech_forSiemensCMD+0x390>)
 800ecd2:	f018 f827 	bl	8026d24 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ecd6:	4b15      	ldr	r3, [pc, #84]	; (800ed2c <Chech_forSiemensCMD+0x33c>)
 800ecd8:	2200      	movs	r2, #0
 800ecda:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ece2:	e004      	b.n	800ecee <Chech_forSiemensCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800ece4:	480d      	ldr	r0, [pc, #52]	; (800ed1c <Chech_forSiemensCMD+0x32c>)
 800ece6:	f018 f81d 	bl	8026d24 <puts>
 800ecea:	e000      	b.n	800ecee <Chech_forSiemensCMD+0x2fe>
			}
		}
 800ecec:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800ecee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ecf2:	2b01      	cmp	r3, #1
 800ecf4:	d147      	bne.n	800ed86 <Chech_forSiemensCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800ecf6:	f240 2005 	movw	r0, #517	; 0x205
 800ecfa:	f002 fa03 	bl	8011104 <TransmitCanPkt>
 800ecfe:	e042      	b.n	800ed86 <Chech_forSiemensCMD+0x396>
 800ed00:	2000c080 	.word	0x2000c080
 800ed04:	0802ad50 	.word	0x0802ad50
 800ed08:	20000bba 	.word	0x20000bba
 800ed0c:	0802ad68 	.word	0x0802ad68
 800ed10:	20005fea 	.word	0x20005fea
 800ed14:	0802ada8 	.word	0x0802ada8
 800ed18:	20000bbb 	.word	0x20000bbb
 800ed1c:	0802adbc 	.word	0x0802adbc
 800ed20:	2000601c 	.word	0x2000601c
 800ed24:	0802add8 	.word	0x0802add8
 800ed28:	0802ade8 	.word	0x0802ade8
 800ed2c:	20004c78 	.word	0x20004c78
 800ed30:	2000604e 	.word	0x2000604e
 800ed34:	0802ae00 	.word	0x0802ae00
 800ed38:	20006080 	.word	0x20006080
 800ed3c:	0802ae18 	.word	0x0802ae18
 800ed40:	200060b2 	.word	0x200060b2
 800ed44:	0802ae2c 	.word	0x0802ae2c
 800ed48:	200060e4 	.word	0x200060e4
 800ed4c:	0802ae40 	.word	0x0802ae40
 800ed50:	20006116 	.word	0x20006116
 800ed54:	0802ae54 	.word	0x0802ae54
 800ed58:	20006148 	.word	0x20006148
 800ed5c:	0802ae70 	.word	0x0802ae70
 800ed60:	0802ae88 	.word	0x0802ae88
 800ed64:	2000617a 	.word	0x2000617a
 800ed68:	0802ae9c 	.word	0x0802ae9c
 800ed6c:	200061ac 	.word	0x200061ac
 800ed70:	0802aeb4 	.word	0x0802aeb4
 800ed74:	200061de 	.word	0x200061de
 800ed78:	0802aed4 	.word	0x0802aed4
 800ed7c:	20006210 	.word	0x20006210
 800ed80:	0802aef4 	.word	0x0802aef4
		return;
 800ed84:	bf00      	nop
		}
	}
}
 800ed86:	3768      	adds	r7, #104	; 0x68
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <Update_SiemensCommands>:


void Update_SiemensCommands(void)
{
 800ed8c:	b4b0      	push	{r4, r5, r7}
 800ed8e:	b083      	sub	sp, #12
 800ed90:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800ed92:	2300      	movs	r3, #0
 800ed94:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800ed96:	79fb      	ldrb	r3, [r7, #7]
 800ed98:	4aa6      	ldr	r2, [pc, #664]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800ed9a:	2132      	movs	r1, #50	; 0x32
 800ed9c:	fb01 f303 	mul.w	r3, r1, r3
 800eda0:	4413      	add	r3, r2
 800eda2:	2224      	movs	r2, #36	; 0x24
 800eda4:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800eda6:	79fb      	ldrb	r3, [r7, #7]
 800eda8:	4aa2      	ldr	r2, [pc, #648]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800edaa:	2132      	movs	r1, #50	; 0x32
 800edac:	fb01 f303 	mul.w	r3, r1, r3
 800edb0:	4413      	add	r3, r2
 800edb2:	3301      	adds	r3, #1
 800edb4:	2201      	movs	r2, #1
 800edb6:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800edb8:	79fb      	ldrb	r3, [r7, #7]
 800edba:	4a9e      	ldr	r2, [pc, #632]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800edbc:	2132      	movs	r1, #50	; 0x32
 800edbe:	fb01 f303 	mul.w	r3, r1, r3
 800edc2:	4413      	add	r3, r2
 800edc4:	3302      	adds	r3, #2
 800edc6:	2230      	movs	r2, #48	; 0x30
 800edc8:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800edca:	79fb      	ldrb	r3, [r7, #7]
 800edcc:	4a99      	ldr	r2, [pc, #612]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800edce:	2132      	movs	r1, #50	; 0x32
 800edd0:	fb01 f303 	mul.w	r3, r1, r3
 800edd4:	4413      	add	r3, r2
 800edd6:	3303      	adds	r3, #3
 800edd8:	2240      	movs	r2, #64	; 0x40
 800edda:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800eddc:	79fb      	ldrb	r3, [r7, #7]
 800edde:	4a95      	ldr	r2, [pc, #596]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800ede0:	2132      	movs	r1, #50	; 0x32
 800ede2:	fb01 f303 	mul.w	r3, r1, r3
 800ede6:	4413      	add	r3, r2
 800ede8:	3304      	adds	r3, #4
 800edea:	22c0      	movs	r2, #192	; 0xc0
 800edec:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800edee:	79fb      	ldrb	r3, [r7, #7]
 800edf0:	4a90      	ldr	r2, [pc, #576]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800edf2:	2132      	movs	r1, #50	; 0x32
 800edf4:	fb01 f303 	mul.w	r3, r1, r3
 800edf8:	4413      	add	r3, r2
 800edfa:	3305      	adds	r3, #5
 800edfc:	224e      	movs	r2, #78	; 0x4e
 800edfe:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800ee00:	79fb      	ldrb	r3, [r7, #7]
 800ee02:	4a8c      	ldr	r2, [pc, #560]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800ee04:	2132      	movs	r1, #50	; 0x32
 800ee06:	fb01 f303 	mul.w	r3, r1, r3
 800ee0a:	4413      	add	r3, r2
 800ee0c:	3306      	adds	r3, #6
 800ee0e:	2226      	movs	r2, #38	; 0x26
 800ee10:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800ee12:	79fb      	ldrb	r3, [r7, #7]
 800ee14:	3301      	adds	r3, #1
 800ee16:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800ee18:	79fb      	ldrb	r3, [r7, #7]
 800ee1a:	1c5a      	adds	r2, r3, #1
 800ee1c:	71fa      	strb	r2, [r7, #7]
 800ee1e:	461a      	mov	r2, r3
 800ee20:	2332      	movs	r3, #50	; 0x32
 800ee22:	fb02 f303 	mul.w	r3, r2, r3
 800ee26:	4a83      	ldr	r2, [pc, #524]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800ee28:	4413      	add	r3, r2
 800ee2a:	4983      	ldr	r1, [pc, #524]	; (800f038 <Update_SiemensCommands+0x2ac>)
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	460b      	mov	r3, r1
 800ee30:	cb03      	ldmia	r3!, {r0, r1}
 800ee32:	6010      	str	r0, [r2, #0]
 800ee34:	6051      	str	r1, [r2, #4]
 800ee36:	8819      	ldrh	r1, [r3, #0]
 800ee38:	789b      	ldrb	r3, [r3, #2]
 800ee3a:	8111      	strh	r1, [r2, #8]
 800ee3c:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800ee3e:	79fb      	ldrb	r3, [r7, #7]
 800ee40:	1c5a      	adds	r2, r3, #1
 800ee42:	71fa      	strb	r2, [r7, #7]
 800ee44:	461a      	mov	r2, r3
 800ee46:	2332      	movs	r3, #50	; 0x32
 800ee48:	fb02 f303 	mul.w	r3, r2, r3
 800ee4c:	4a79      	ldr	r2, [pc, #484]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800ee4e:	4413      	add	r3, r2
 800ee50:	4a7a      	ldr	r2, [pc, #488]	; (800f03c <Update_SiemensCommands+0x2b0>)
 800ee52:	461d      	mov	r5, r3
 800ee54:	4614      	mov	r4, r2
 800ee56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ee58:	6028      	str	r0, [r5, #0]
 800ee5a:	6069      	str	r1, [r5, #4]
 800ee5c:	60aa      	str	r2, [r5, #8]
 800ee5e:	60eb      	str	r3, [r5, #12]
 800ee60:	6820      	ldr	r0, [r4, #0]
 800ee62:	6128      	str	r0, [r5, #16]
 800ee64:	7923      	ldrb	r3, [r4, #4]
 800ee66:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800ee68:	79fb      	ldrb	r3, [r7, #7]
 800ee6a:	1c5a      	adds	r2, r3, #1
 800ee6c:	71fa      	strb	r2, [r7, #7]
 800ee6e:	461a      	mov	r2, r3
 800ee70:	2332      	movs	r3, #50	; 0x32
 800ee72:	fb02 f303 	mul.w	r3, r2, r3
 800ee76:	4a6f      	ldr	r2, [pc, #444]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800ee78:	4413      	add	r3, r2
 800ee7a:	4a71      	ldr	r2, [pc, #452]	; (800f040 <Update_SiemensCommands+0x2b4>)
 800ee7c:	461d      	mov	r5, r3
 800ee7e:	4614      	mov	r4, r2
 800ee80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ee82:	6028      	str	r0, [r5, #0]
 800ee84:	6069      	str	r1, [r5, #4]
 800ee86:	60aa      	str	r2, [r5, #8]
 800ee88:	60eb      	str	r3, [r5, #12]
 800ee8a:	6820      	ldr	r0, [r4, #0]
 800ee8c:	6128      	str	r0, [r5, #16]
 800ee8e:	7923      	ldrb	r3, [r4, #4]
 800ee90:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800ee92:	79fb      	ldrb	r3, [r7, #7]
 800ee94:	1c5a      	adds	r2, r3, #1
 800ee96:	71fa      	strb	r2, [r7, #7]
 800ee98:	461a      	mov	r2, r3
 800ee9a:	2332      	movs	r3, #50	; 0x32
 800ee9c:	fb02 f303 	mul.w	r3, r2, r3
 800eea0:	4a64      	ldr	r2, [pc, #400]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800eea2:	4413      	add	r3, r2
 800eea4:	4a67      	ldr	r2, [pc, #412]	; (800f044 <Update_SiemensCommands+0x2b8>)
 800eea6:	461d      	mov	r5, r3
 800eea8:	4614      	mov	r4, r2
 800eeaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eeac:	6028      	str	r0, [r5, #0]
 800eeae:	6069      	str	r1, [r5, #4]
 800eeb0:	60aa      	str	r2, [r5, #8]
 800eeb2:	60eb      	str	r3, [r5, #12]
 800eeb4:	7823      	ldrb	r3, [r4, #0]
 800eeb6:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800eeb8:	79fb      	ldrb	r3, [r7, #7]
 800eeba:	1c5a      	adds	r2, r3, #1
 800eebc:	71fa      	strb	r2, [r7, #7]
 800eebe:	461a      	mov	r2, r3
 800eec0:	2332      	movs	r3, #50	; 0x32
 800eec2:	fb02 f303 	mul.w	r3, r2, r3
 800eec6:	4a5b      	ldr	r2, [pc, #364]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800eec8:	4413      	add	r3, r2
 800eeca:	4a5f      	ldr	r2, [pc, #380]	; (800f048 <Update_SiemensCommands+0x2bc>)
 800eecc:	461d      	mov	r5, r3
 800eece:	4614      	mov	r4, r2
 800eed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eed2:	6028      	str	r0, [r5, #0]
 800eed4:	6069      	str	r1, [r5, #4]
 800eed6:	60aa      	str	r2, [r5, #8]
 800eed8:	60eb      	str	r3, [r5, #12]
 800eeda:	7823      	ldrb	r3, [r4, #0]
 800eedc:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800eede:	79fb      	ldrb	r3, [r7, #7]
 800eee0:	1c5a      	adds	r2, r3, #1
 800eee2:	71fa      	strb	r2, [r7, #7]
 800eee4:	461a      	mov	r2, r3
 800eee6:	2332      	movs	r3, #50	; 0x32
 800eee8:	fb02 f303 	mul.w	r3, r2, r3
 800eeec:	4a51      	ldr	r2, [pc, #324]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800eeee:	4413      	add	r3, r2
 800eef0:	4a56      	ldr	r2, [pc, #344]	; (800f04c <Update_SiemensCommands+0x2c0>)
 800eef2:	461d      	mov	r5, r3
 800eef4:	4614      	mov	r4, r2
 800eef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eef8:	6028      	str	r0, [r5, #0]
 800eefa:	6069      	str	r1, [r5, #4]
 800eefc:	60aa      	str	r2, [r5, #8]
 800eefe:	60eb      	str	r3, [r5, #12]
 800ef00:	7823      	ldrb	r3, [r4, #0]
 800ef02:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800ef04:	79fb      	ldrb	r3, [r7, #7]
 800ef06:	1c5a      	adds	r2, r3, #1
 800ef08:	71fa      	strb	r2, [r7, #7]
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	2332      	movs	r3, #50	; 0x32
 800ef0e:	fb02 f303 	mul.w	r3, r2, r3
 800ef12:	4a48      	ldr	r2, [pc, #288]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800ef14:	4413      	add	r3, r2
 800ef16:	4a4e      	ldr	r2, [pc, #312]	; (800f050 <Update_SiemensCommands+0x2c4>)
 800ef18:	461d      	mov	r5, r3
 800ef1a:	4614      	mov	r4, r2
 800ef1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef1e:	6028      	str	r0, [r5, #0]
 800ef20:	6069      	str	r1, [r5, #4]
 800ef22:	60aa      	str	r2, [r5, #8]
 800ef24:	60eb      	str	r3, [r5, #12]
 800ef26:	cc03      	ldmia	r4!, {r0, r1}
 800ef28:	6128      	str	r0, [r5, #16]
 800ef2a:	6169      	str	r1, [r5, #20]
 800ef2c:	8823      	ldrh	r3, [r4, #0]
 800ef2e:	78a2      	ldrb	r2, [r4, #2]
 800ef30:	832b      	strh	r3, [r5, #24]
 800ef32:	4613      	mov	r3, r2
 800ef34:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800ef36:	79fb      	ldrb	r3, [r7, #7]
 800ef38:	1c5a      	adds	r2, r3, #1
 800ef3a:	71fa      	strb	r2, [r7, #7]
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	2332      	movs	r3, #50	; 0x32
 800ef40:	fb02 f303 	mul.w	r3, r2, r3
 800ef44:	4a3b      	ldr	r2, [pc, #236]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800ef46:	4413      	add	r3, r2
 800ef48:	4a42      	ldr	r2, [pc, #264]	; (800f054 <Update_SiemensCommands+0x2c8>)
 800ef4a:	461d      	mov	r5, r3
 800ef4c:	4614      	mov	r4, r2
 800ef4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef50:	6028      	str	r0, [r5, #0]
 800ef52:	6069      	str	r1, [r5, #4]
 800ef54:	60aa      	str	r2, [r5, #8]
 800ef56:	60eb      	str	r3, [r5, #12]
 800ef58:	8823      	ldrh	r3, [r4, #0]
 800ef5a:	78a2      	ldrb	r2, [r4, #2]
 800ef5c:	822b      	strh	r3, [r5, #16]
 800ef5e:	4613      	mov	r3, r2
 800ef60:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800ef62:	79fb      	ldrb	r3, [r7, #7]
 800ef64:	1c5a      	adds	r2, r3, #1
 800ef66:	71fa      	strb	r2, [r7, #7]
 800ef68:	461a      	mov	r2, r3
 800ef6a:	2332      	movs	r3, #50	; 0x32
 800ef6c:	fb02 f303 	mul.w	r3, r2, r3
 800ef70:	4a30      	ldr	r2, [pc, #192]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800ef72:	4413      	add	r3, r2
 800ef74:	4a38      	ldr	r2, [pc, #224]	; (800f058 <Update_SiemensCommands+0x2cc>)
 800ef76:	461d      	mov	r5, r3
 800ef78:	4614      	mov	r4, r2
 800ef7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef7c:	6028      	str	r0, [r5, #0]
 800ef7e:	6069      	str	r1, [r5, #4]
 800ef80:	60aa      	str	r2, [r5, #8]
 800ef82:	60eb      	str	r3, [r5, #12]
 800ef84:	cc03      	ldmia	r4!, {r0, r1}
 800ef86:	6128      	str	r0, [r5, #16]
 800ef88:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800ef8a:	79fb      	ldrb	r3, [r7, #7]
 800ef8c:	1c5a      	adds	r2, r3, #1
 800ef8e:	71fa      	strb	r2, [r7, #7]
 800ef90:	461a      	mov	r2, r3
 800ef92:	2332      	movs	r3, #50	; 0x32
 800ef94:	fb02 f303 	mul.w	r3, r2, r3
 800ef98:	4a26      	ldr	r2, [pc, #152]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800ef9a:	4413      	add	r3, r2
 800ef9c:	4a2f      	ldr	r2, [pc, #188]	; (800f05c <Update_SiemensCommands+0x2d0>)
 800ef9e:	461c      	mov	r4, r3
 800efa0:	4615      	mov	r5, r2
 800efa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efa4:	6020      	str	r0, [r4, #0]
 800efa6:	6061      	str	r1, [r4, #4]
 800efa8:	60a2      	str	r2, [r4, #8]
 800efaa:	60e3      	str	r3, [r4, #12]
 800efac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efae:	6120      	str	r0, [r4, #16]
 800efb0:	6161      	str	r1, [r4, #20]
 800efb2:	61a2      	str	r2, [r4, #24]
 800efb4:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800efb6:	79fb      	ldrb	r3, [r7, #7]
 800efb8:	1c5a      	adds	r2, r3, #1
 800efba:	71fa      	strb	r2, [r7, #7]
 800efbc:	461a      	mov	r2, r3
 800efbe:	2332      	movs	r3, #50	; 0x32
 800efc0:	fb02 f303 	mul.w	r3, r2, r3
 800efc4:	4a1b      	ldr	r2, [pc, #108]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800efc6:	4413      	add	r3, r2
 800efc8:	4a25      	ldr	r2, [pc, #148]	; (800f060 <Update_SiemensCommands+0x2d4>)
 800efca:	461d      	mov	r5, r3
 800efcc:	4614      	mov	r4, r2
 800efce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800efd0:	6028      	str	r0, [r5, #0]
 800efd2:	6069      	str	r1, [r5, #4]
 800efd4:	60aa      	str	r2, [r5, #8]
 800efd6:	60eb      	str	r3, [r5, #12]
 800efd8:	cc07      	ldmia	r4!, {r0, r1, r2}
 800efda:	6128      	str	r0, [r5, #16]
 800efdc:	6169      	str	r1, [r5, #20]
 800efde:	61aa      	str	r2, [r5, #24]
 800efe0:	7823      	ldrb	r3, [r4, #0]
 800efe2:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800efe4:	79fb      	ldrb	r3, [r7, #7]
 800efe6:	1c5a      	adds	r2, r3, #1
 800efe8:	71fa      	strb	r2, [r7, #7]
 800efea:	461a      	mov	r2, r3
 800efec:	2332      	movs	r3, #50	; 0x32
 800efee:	fb02 f303 	mul.w	r3, r2, r3
 800eff2:	4a10      	ldr	r2, [pc, #64]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800eff4:	4413      	add	r3, r2
 800eff6:	491b      	ldr	r1, [pc, #108]	; (800f064 <Update_SiemensCommands+0x2d8>)
 800eff8:	461a      	mov	r2, r3
 800effa:	460b      	mov	r3, r1
 800effc:	cb03      	ldmia	r3!, {r0, r1}
 800effe:	6010      	str	r0, [r2, #0]
 800f000:	6051      	str	r1, [r2, #4]
 800f002:	881b      	ldrh	r3, [r3, #0]
 800f004:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800f006:	79fb      	ldrb	r3, [r7, #7]
 800f008:	1c5a      	adds	r2, r3, #1
 800f00a:	71fa      	strb	r2, [r7, #7]
 800f00c:	461a      	mov	r2, r3
 800f00e:	2332      	movs	r3, #50	; 0x32
 800f010:	fb02 f303 	mul.w	r3, r2, r3
 800f014:	4a07      	ldr	r2, [pc, #28]	; (800f034 <Update_SiemensCommands+0x2a8>)
 800f016:	4413      	add	r3, r2
 800f018:	4a13      	ldr	r2, [pc, #76]	; (800f068 <Update_SiemensCommands+0x2dc>)
 800f01a:	6810      	ldr	r0, [r2, #0]
 800f01c:	6018      	str	r0, [r3, #0]
 800f01e:	7912      	ldrb	r2, [r2, #4]
 800f020:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800f022:	4a12      	ldr	r2, [pc, #72]	; (800f06c <Update_SiemensCommands+0x2e0>)
 800f024:	79fb      	ldrb	r3, [r7, #7]
 800f026:	7013      	strb	r3, [r2, #0]
}
 800f028:	bf00      	nop
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bcb0      	pop	{r4, r5, r7}
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop
 800f034:	20005fb8 	.word	0x20005fb8
 800f038:	0802af00 	.word	0x0802af00
 800f03c:	0802ade8 	.word	0x0802ade8
 800f040:	0802ae00 	.word	0x0802ae00
 800f044:	0802ae18 	.word	0x0802ae18
 800f048:	0802ae2c 	.word	0x0802ae2c
 800f04c:	0802ae40 	.word	0x0802ae40
 800f050:	0802af0c 	.word	0x0802af0c
 800f054:	0802ae88 	.word	0x0802ae88
 800f058:	0802ae9c 	.word	0x0802ae9c
 800f05c:	0802aeb4 	.word	0x0802aeb4
 800f060:	0802aed4 	.word	0x0802aed4
 800f064:	0802af28 	.word	0x0802af28
 800f068:	0802af34 	.word	0x0802af34
 800f06c:	200063a0 	.word	0x200063a0

0800f070 <Is_SiemensCommand_Valid>:

uint8_t Is_SiemensCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800f070:	b590      	push	{r4, r7, lr}
 800f072:	b085      	sub	sp, #20
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	460b      	mov	r3, r1
 800f07a:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800f07c:	2300      	movs	r3, #0
 800f07e:	73fb      	strb	r3, [r7, #15]
 800f080:	e01c      	b.n	800f0bc <Is_SiemensCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 800f082:	7bfb      	ldrb	r3, [r7, #15]
 800f084:	2232      	movs	r2, #50	; 0x32
 800f086:	fb02 f303 	mul.w	r3, r2, r3
 800f08a:	4a11      	ldr	r2, [pc, #68]	; (800f0d0 <Is_SiemensCommand_Valid+0x60>)
 800f08c:	189c      	adds	r4, r3, r2
 800f08e:	7bfb      	ldrb	r3, [r7, #15]
 800f090:	2232      	movs	r2, #50	; 0x32
 800f092:	fb02 f303 	mul.w	r3, r2, r3
 800f096:	4a0e      	ldr	r2, [pc, #56]	; (800f0d0 <Is_SiemensCommand_Valid+0x60>)
 800f098:	4413      	add	r3, r2
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7f1 f8da 	bl	8000254 <strlen>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	461a      	mov	r2, r3
 800f0a4:	4621      	mov	r1, r4
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f017 fc80 	bl	80269ac <memcmp>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d101      	bne.n	800f0b6 <Is_SiemensCommand_Valid+0x46>
		{
			return Traverser;
 800f0b2:	7bfb      	ldrb	r3, [r7, #15]
 800f0b4:	e008      	b.n	800f0c8 <Is_SiemensCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800f0b6:	7bfb      	ldrb	r3, [r7, #15]
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	73fb      	strb	r3, [r7, #15]
 800f0bc:	4b05      	ldr	r3, [pc, #20]	; (800f0d4 <Is_SiemensCommand_Valid+0x64>)
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	7bfa      	ldrb	r2, [r7, #15]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d3dd      	bcc.n	800f082 <Is_SiemensCommand_Valid+0x12>
		}
	}
	return 255;
 800f0c6:	23ff      	movs	r3, #255	; 0xff
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3714      	adds	r7, #20
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd90      	pop	{r4, r7, pc}
 800f0d0:	20005fb8 	.word	0x20005fb8
 800f0d4:	200063a0 	.word	0x200063a0

0800f0d8 <Siemens_CRC>:
/*
 * SIEMENS CRC & Data Extract FUNTIONS
 */

uint16_t Siemens_CRC(uint8_t *data, uint16_t len)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b087      	sub	sp, #28
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800f0e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f0e8:	82fb      	strh	r3, [r7, #22]
	uint16_t i=0;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	82bb      	strh	r3, [r7, #20]
	int j =0;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	613b      	str	r3, [r7, #16]
		printf("0x%02x|",data[i]);
	}
	printf("\n");
#endif

	for ( i = 0; i < len; i++)
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	82bb      	strh	r3, [r7, #20]
 800f0f6:	e022      	b.n	800f13e <Siemens_CRC+0x66>
	{
		crc ^= data[i];
 800f0f8:	8abb      	ldrh	r3, [r7, #20]
 800f0fa:	687a      	ldr	r2, [r7, #4]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	b29a      	uxth	r2, r3
 800f102:	8afb      	ldrh	r3, [r7, #22]
 800f104:	4053      	eors	r3, r2
 800f106:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800f108:	2300      	movs	r3, #0
 800f10a:	613b      	str	r3, [r7, #16]
 800f10c:	e011      	b.n	800f132 <Siemens_CRC+0x5a>
		{
			if (crc & 0x0001)
 800f10e:	8afb      	ldrh	r3, [r7, #22]
 800f110:	f003 0301 	and.w	r3, r3, #1
 800f114:	2b00      	cmp	r3, #0
 800f116:	d006      	beq.n	800f126 <Siemens_CRC+0x4e>
			{
				crc = (crc >> 1) ^ 0x8408;
 800f118:	8afb      	ldrh	r3, [r7, #22]
 800f11a:	085b      	lsrs	r3, r3, #1
 800f11c:	b29a      	uxth	r2, r3
 800f11e:	4b17      	ldr	r3, [pc, #92]	; (800f17c <Siemens_CRC+0xa4>)
 800f120:	4053      	eors	r3, r2
 800f122:	82fb      	strh	r3, [r7, #22]
 800f124:	e002      	b.n	800f12c <Siemens_CRC+0x54>
			}
			else
			{
				crc >>= 1;
 800f126:	8afb      	ldrh	r3, [r7, #22]
 800f128:	085b      	lsrs	r3, r3, #1
 800f12a:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	3301      	adds	r3, #1
 800f130:	613b      	str	r3, [r7, #16]
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	2b07      	cmp	r3, #7
 800f136:	ddea      	ble.n	800f10e <Siemens_CRC+0x36>
	for ( i = 0; i < len; i++)
 800f138:	8abb      	ldrh	r3, [r7, #20]
 800f13a:	3301      	adds	r3, #1
 800f13c:	82bb      	strh	r3, [r7, #20]
 800f13e:	8aba      	ldrh	r2, [r7, #20]
 800f140:	887b      	ldrh	r3, [r7, #2]
 800f142:	429a      	cmp	r2, r3
 800f144:	d3d8      	bcc.n	800f0f8 <Siemens_CRC+0x20>
			}
		}
	}

	crc_le[0] = crc & 0xFF;
 800f146:	8afb      	ldrh	r3, [r7, #22]
 800f148:	b2db      	uxtb	r3, r3
 800f14a:	733b      	strb	r3, [r7, #12]
	crc_le[1] = (crc >> 8) & 0xFF;
 800f14c:	8afb      	ldrh	r3, [r7, #22]
 800f14e:	0a1b      	lsrs	r3, r3, #8
 800f150:	b29b      	uxth	r3, r3
 800f152:	b2db      	uxtb	r3, r3
 800f154:	737b      	strb	r3, [r7, #13]
	//printf("Before Reverse 1:0x%02x|0x%02x\n",crc_le[0],crc_le[1]);



	crc = crc_le[0] << 8 | crc_le[1]; // reverse CRC bytes
 800f156:	7b3b      	ldrb	r3, [r7, #12]
 800f158:	021b      	lsls	r3, r3, #8
 800f15a:	b21a      	sxth	r2, r3
 800f15c:	7b7b      	ldrb	r3, [r7, #13]
 800f15e:	b21b      	sxth	r3, r3
 800f160:	4313      	orrs	r3, r2
 800f162:	b21b      	sxth	r3, r3
 800f164:	82fb      	strh	r3, [r7, #22]
	crc ^= 0xFFFF; // perform final XOR with 0xFFFF
 800f166:	8afb      	ldrh	r3, [r7, #22]
 800f168:	43db      	mvns	r3, r3
 800f16a:	82fb      	strh	r3, [r7, #22]
	//printf("Before Reverse 2:0x%02x\n",crc);


	// crc = crc_le[1] << 8 | crc_le[0]; // reverse CRC bytes
	// crc ^= 0xFFFF; // perform final XOR with 0xFFFF
	return crc;
 800f16c:	8afb      	ldrh	r3, [r7, #22]
}
 800f16e:	4618      	mov	r0, r3
 800f170:	371c      	adds	r7, #28
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr
 800f17a:	bf00      	nop
 800f17c:	ffff8408 	.word	0xffff8408

0800f180 <Extract_Parity_Data>:


int32_t Extract_Parity_Data(uint8_t Start,uint8_t No_of_Bits,uint8_t *DataIn,uint8_t Parity_Type)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b086      	sub	sp, #24
 800f184:	af00      	add	r7, sp, #0
 800f186:	603a      	str	r2, [r7, #0]
 800f188:	461a      	mov	r2, r3
 800f18a:	4603      	mov	r3, r0
 800f18c:	71fb      	strb	r3, [r7, #7]
 800f18e:	460b      	mov	r3, r1
 800f190:	71bb      	strb	r3, [r7, #6]
 800f192:	4613      	mov	r3, r2
 800f194:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_val = 0,t1,t2,t3;
 800f196:	2300      	movs	r3, #0
 800f198:	75fb      	strb	r3, [r7, #23]
	uint32_t Return_value = 0;
 800f19a:	2300      	movs	r3, #0
 800f19c:	613b      	str	r3, [r7, #16]

	if(Parity_Type != NO_PARITY)
 800f19e:	797b      	ldrb	r3, [r7, #5]
 800f1a0:	2b02      	cmp	r3, #2
 800f1a2:	d010      	beq.n	800f1c6 <Extract_Parity_Data+0x46>
	{
		if(Verify_parity(DataIn,(No_of_Bits/8),Parity_Type)==0)
 800f1a4:	79bb      	ldrb	r3, [r7, #6]
 800f1a6:	08db      	lsrs	r3, r3, #3
 800f1a8:	b2db      	uxtb	r3, r3
 800f1aa:	797a      	ldrb	r2, [r7, #5]
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	6838      	ldr	r0, [r7, #0]
 800f1b0:	f000 f8d0 	bl	800f354 <Verify_parity>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d110      	bne.n	800f1dc <Extract_Parity_Data+0x5c>
		{
			printf("Parity Verfication Failed\n");
 800f1ba:	4840      	ldr	r0, [pc, #256]	; (800f2bc <Extract_Parity_Data+0x13c>)
 800f1bc:	f017 fdb2 	bl	8026d24 <puts>
			return -1;
 800f1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c4:	e075      	b.n	800f2b2 <Extract_Parity_Data+0x132>
			//printf("Parity Verfication Success\n");
		}
	}
	else
	{
		Return_value = ExtractBits(Start,No_of_Bits,DataIn);
 800f1c6:	79fb      	ldrb	r3, [r7, #7]
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	79ba      	ldrb	r2, [r7, #6]
 800f1cc:	b291      	uxth	r1, r2
 800f1ce:	683a      	ldr	r2, [r7, #0]
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7f1 fa1f 	bl	8000614 <ExtractBits>
 800f1d6:	6138      	str	r0, [r7, #16]
		return Return_value;
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	e06a      	b.n	800f2b2 <Extract_Parity_Data+0x132>
	}



	if(No_of_Bits==8)
 800f1dc:	79bb      	ldrb	r3, [r7, #6]
 800f1de:	2b08      	cmp	r3, #8
 800f1e0:	d108      	bne.n	800f1f4 <Extract_Parity_Data+0x74>
	{
		//printf("Data:0x%02x\n",DataIn[0]);
		Temp_val = DataIn[0];
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	75fb      	strb	r3, [r7, #23]
		Temp_val &= ~(1<<7);
 800f1e8:	7dfb      	ldrb	r3, [r7, #23]
 800f1ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1ee:	75fb      	strb	r3, [r7, #23]
		return (Temp_val);
 800f1f0:	7dfb      	ldrb	r3, [r7, #23]
 800f1f2:	e05e      	b.n	800f2b2 <Extract_Parity_Data+0x132>
	}
	else if(No_of_Bits==24)
 800f1f4:	79bb      	ldrb	r3, [r7, #6]
 800f1f6:	2b18      	cmp	r3, #24
 800f1f8:	d15a      	bne.n	800f2b0 <Extract_Parity_Data+0x130>
	{
		//printf("24 bit extraction\n");
		Temp_val = DataIn[0];
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[0]);
		t1 = ((Temp_val>>0)&1); //copy of 0th bit
 800f200:	7dfb      	ldrb	r3, [r7, #23]
 800f202:	f003 0301 	and.w	r3, r3, #1
 800f206:	73fb      	strb	r3, [r7, #15]
		t2 = ((Temp_val>>1)&1); //copy of 1st bit
 800f208:	7dfb      	ldrb	r3, [r7, #23]
 800f20a:	085b      	lsrs	r3, r3, #1
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	f003 0301 	and.w	r3, r3, #1
 800f212:	73bb      	strb	r3, [r7, #14]
		Temp_val &= ~(1<<7); //clearing 7th bit
 800f214:	7dfb      	ldrb	r3, [r7, #23]
 800f216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f21a:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=2; //Shift two times.
 800f21c:	7dfb      	ldrb	r3, [r7, #23]
 800f21e:	089b      	lsrs	r3, r3, #2
 800f220:	75fb      	strb	r3, [r7, #23]
		//printf("Temp:0x%02x\n",Temp_val);
		Return_value = Temp_val;
 800f222:	7dfb      	ldrb	r3, [r7, #23]
 800f224:	613b      	str	r3, [r7, #16]

		Temp_val = DataIn[1];
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	785b      	ldrb	r3, [r3, #1]
 800f22a:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[1]);
		t3 = ((Temp_val>>0)&1);//copy of 0th bit.
 800f22c:	7dfb      	ldrb	r3, [r7, #23]
 800f22e:	f003 0301 	and.w	r3, r3, #1
 800f232:	737b      	strb	r3, [r7, #13]
		Temp_val &= ~(1<<7); //clearing 7th bit.
 800f234:	7dfb      	ldrb	r3, [r7, #23]
 800f236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f23a:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=1; //Shift one time.
 800f23c:	7dfb      	ldrb	r3, [r7, #23]
 800f23e:	085b      	lsrs	r3, r3, #1
 800f240:	75fb      	strb	r3, [r7, #23]

		(t2==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800f242:	7bbb      	ldrb	r3, [r7, #14]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d104      	bne.n	800f252 <Extract_Parity_Data+0xd2>
 800f248:	7dfb      	ldrb	r3, [r7, #23]
 800f24a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f24e:	75fb      	strb	r3, [r7, #23]
 800f250:	e003      	b.n	800f25a <Extract_Parity_Data+0xda>
 800f252:	7dfb      	ldrb	r3, [r7, #23]
 800f254:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f258:	75fb      	strb	r3, [r7, #23]
		(t1==0)?(Temp_val &= ~(1 << 6)):(Temp_val|= 1 << 6);//copying Previous bit
 800f25a:	7bfb      	ldrb	r3, [r7, #15]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d104      	bne.n	800f26a <Extract_Parity_Data+0xea>
 800f260:	7dfb      	ldrb	r3, [r7, #23]
 800f262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f266:	75fb      	strb	r3, [r7, #23]
 800f268:	e003      	b.n	800f272 <Extract_Parity_Data+0xf2>
 800f26a:	7dfb      	ldrb	r3, [r7, #23]
 800f26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f270:	75fb      	strb	r3, [r7, #23]
		//printf("Temp2:0x%02x\n",Temp_val);
		Return_value<<=8;
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	021b      	lsls	r3, r3, #8
 800f276:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800f278:	7dfb      	ldrb	r3, [r7, #23]
 800f27a:	693a      	ldr	r2, [r7, #16]
 800f27c:	4413      	add	r3, r2
 800f27e:	613b      	str	r3, [r7, #16]


		Temp_val = DataIn[2];
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	789b      	ldrb	r3, [r3, #2]
 800f284:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[2]);
		(t3==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800f286:	7b7b      	ldrb	r3, [r7, #13]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d104      	bne.n	800f296 <Extract_Parity_Data+0x116>
 800f28c:	7dfb      	ldrb	r3, [r7, #23]
 800f28e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f292:	75fb      	strb	r3, [r7, #23]
 800f294:	e003      	b.n	800f29e <Extract_Parity_Data+0x11e>
 800f296:	7dfb      	ldrb	r3, [r7, #23]
 800f298:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f29c:	75fb      	strb	r3, [r7, #23]
		//printf("Temp3:0x%02x\n",Temp_val);
		Return_value<<=8;
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	021b      	lsls	r3, r3, #8
 800f2a2:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800f2a4:	7dfb      	ldrb	r3, [r7, #23]
 800f2a6:	693a      	ldr	r2, [r7, #16]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	613b      	str	r3, [r7, #16]
		//printf("Data:0x%02x\n",DataIn[2]);
		//printf("Data:0x%02x\n",DataIn[1]);
		//printf("Data:0x%02x\n",DataIn[0]);
		return Return_value;
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	e000      	b.n	800f2b2 <Extract_Parity_Data+0x132>
	}
	return 0;
 800f2b0:	2300      	movs	r3, #0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3718      	adds	r7, #24
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	0802af3c 	.word	0x0802af3c

0800f2c0 <Calculate_Parity>:

uint8_t Calculate_Parity(uint8_t Buff, uint8_t Parity_Type)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b085      	sub	sp, #20
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	460a      	mov	r2, r1
 800f2ca:	71fb      	strb	r3, [r7, #7]
 800f2cc:	4613      	mov	r3, r2
 800f2ce:	71bb      	strb	r3, [r7, #6]
	int8_t bit = 0;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	73fb      	strb	r3, [r7, #15]
	int8_t count = 0;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	73bb      	strb	r3, [r7, #14]

	// printf("For Value:0x%02x\n", Buff);
	for (bit = 6; bit >= 0; bit--)
 800f2d8:	2306      	movs	r3, #6
 800f2da:	73fb      	strb	r3, [r7, #15]
 800f2dc:	e014      	b.n	800f308 <Calculate_Parity+0x48>
	{
		//printf("[%02u]:%u| ", bit, ((Buff >> bit) & 1));
		if ((Buff >> bit) & 1)
 800f2de:	79fa      	ldrb	r2, [r7, #7]
 800f2e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2e4:	fa42 f303 	asr.w	r3, r2, r3
 800f2e8:	f003 0301 	and.w	r3, r3, #1
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d005      	beq.n	800f2fc <Calculate_Parity+0x3c>
		{
			count++;
 800f2f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	3301      	adds	r3, #1
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	73bb      	strb	r3, [r7, #14]
	for (bit = 6; bit >= 0; bit--)
 800f2fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f300:	b2db      	uxtb	r3, r3
 800f302:	3b01      	subs	r3, #1
 800f304:	b2db      	uxtb	r3, r3
 800f306:	73fb      	strb	r3, [r7, #15]
 800f308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	dae6      	bge.n	800f2de <Calculate_Parity+0x1e>
		}
	}
	//printf("\n");
	if (Parity_Type == 0)
 800f310:	79bb      	ldrb	r3, [r7, #6]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d109      	bne.n	800f32a <Calculate_Parity+0x6a>
	{
		if ((count % 2) == 0)
 800f316:	7bbb      	ldrb	r3, [r7, #14]
 800f318:	f003 0301 	and.w	r3, r3, #1
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d101      	bne.n	800f326 <Calculate_Parity+0x66>
		{
			return 0;
 800f322:	2300      	movs	r3, #0
 800f324:	e00f      	b.n	800f346 <Calculate_Parity+0x86>
		}
		else
		{
			return 1;
 800f326:	2301      	movs	r3, #1
 800f328:	e00d      	b.n	800f346 <Calculate_Parity+0x86>
		}
	}
	if (Parity_Type == 1)
 800f32a:	79bb      	ldrb	r3, [r7, #6]
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d109      	bne.n	800f344 <Calculate_Parity+0x84>
	{
		if ((count % 2) == 0)
 800f330:	7bbb      	ldrb	r3, [r7, #14]
 800f332:	f003 0301 	and.w	r3, r3, #1
 800f336:	b2db      	uxtb	r3, r3
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d101      	bne.n	800f340 <Calculate_Parity+0x80>
		{
			return 1;
 800f33c:	2301      	movs	r3, #1
 800f33e:	e002      	b.n	800f346 <Calculate_Parity+0x86>
		}
		else
		{
			return 0;
 800f340:	2300      	movs	r3, #0
 800f342:	e000      	b.n	800f346 <Calculate_Parity+0x86>
		}
	}
	return 0;
 800f344:	2300      	movs	r3, #0
}
 800f346:	4618      	mov	r0, r3
 800f348:	3714      	adds	r7, #20
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr
	...

0800f354 <Verify_parity>:

uint8_t Verify_parity(uint8_t *Data,uint8_t Length,uint8_t Parity_Type)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	460b      	mov	r3, r1
 800f35e:	70fb      	strb	r3, [r7, #3]
 800f360:	4613      	mov	r3, r2
 800f362:	70bb      	strb	r3, [r7, #2]
	uint8_t Byte_Traverser = 0;
 800f364:	2300      	movs	r3, #0
 800f366:	73fb      	strb	r3, [r7, #15]

	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800f368:	2300      	movs	r3, #0
 800f36a:	73fb      	strb	r3, [r7, #15]
 800f36c:	e03b      	b.n	800f3e6 <Verify_parity+0x92>
	{
		if( (Calculate_Parity(Data[Byte_Traverser],Parity_Type)) != ((Data[Byte_Traverser]>>7)&1))
 800f36e:	7bfb      	ldrb	r3, [r7, #15]
 800f370:	687a      	ldr	r2, [r7, #4]
 800f372:	4413      	add	r3, r2
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	78ba      	ldrb	r2, [r7, #2]
 800f378:	4611      	mov	r1, r2
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7ff ffa0 	bl	800f2c0 <Calculate_Parity>
 800f380:	4603      	mov	r3, r0
 800f382:	4619      	mov	r1, r3
 800f384:	7bfb      	ldrb	r3, [r7, #15]
 800f386:	687a      	ldr	r2, [r7, #4]
 800f388:	4413      	add	r3, r2
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	09db      	lsrs	r3, r3, #7
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	f003 0301 	and.w	r3, r3, #1
 800f394:	4299      	cmp	r1, r3
 800f396:	d023      	beq.n	800f3e0 <Verify_parity+0x8c>
		{
			printf("Failed for data:0x%02x\n",Data[Byte_Traverser]);
 800f398:	7bfb      	ldrb	r3, [r7, #15]
 800f39a:	687a      	ldr	r2, [r7, #4]
 800f39c:	4413      	add	r3, r2
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	4815      	ldr	r0, [pc, #84]	; (800f3f8 <Verify_parity+0xa4>)
 800f3a4:	f017 fc22 	bl	8026bec <iprintf>
			printf("Expected Parity:%u\n",Calculate_Parity(Data[Byte_Traverser],Parity_Type));
 800f3a8:	7bfb      	ldrb	r3, [r7, #15]
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	78ba      	ldrb	r2, [r7, #2]
 800f3b2:	4611      	mov	r1, r2
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7ff ff83 	bl	800f2c0 <Calculate_Parity>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	4619      	mov	r1, r3
 800f3be:	480f      	ldr	r0, [pc, #60]	; (800f3fc <Verify_parity+0xa8>)
 800f3c0:	f017 fc14 	bl	8026bec <iprintf>
			printf("Available Parity:%u\n",((Data[Byte_Traverser]>>7)&1));
 800f3c4:	7bfb      	ldrb	r3, [r7, #15]
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	09db      	lsrs	r3, r3, #7
 800f3ce:	b2db      	uxtb	r3, r3
 800f3d0:	f003 0301 	and.w	r3, r3, #1
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	480a      	ldr	r0, [pc, #40]	; (800f400 <Verify_parity+0xac>)
 800f3d8:	f017 fc08 	bl	8026bec <iprintf>
			return 0;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	e007      	b.n	800f3f0 <Verify_parity+0x9c>
	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800f3e0:	7bfb      	ldrb	r3, [r7, #15]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	73fb      	strb	r3, [r7, #15]
 800f3e6:	7bfa      	ldrb	r2, [r7, #15]
 800f3e8:	78fb      	ldrb	r3, [r7, #3]
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d3bf      	bcc.n	800f36e <Verify_parity+0x1a>
		}
	}
	return 1;
 800f3ee:	2301      	movs	r3, #1
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3710      	adds	r7, #16
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	0802af58 	.word	0x0802af58
 800f3fc:	0802af70 	.word	0x0802af70
 800f400:	0802af84 	.word	0x0802af84

0800f404 <Insert_cal_parity>:


void Insert_cal_parity(uint8_t start, uint8_t No_of_Bits, uint8_t *Dest_Buff, uint64_t DataIn, uint8_t Parity_Type)
{
 800f404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f408:	b089      	sub	sp, #36	; 0x24
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	4603      	mov	r3, r0
 800f40e:	60ba      	str	r2, [r7, #8]
 800f410:	73fb      	strb	r3, [r7, #15]
 800f412:	460b      	mov	r3, r1
 800f414:	73bb      	strb	r3, [r7, #14]
	uint16_t t1 = 0, t2 = 0, t3 = 0, t4 = 0;
 800f416:	2300      	movs	r3, #0
 800f418:	83fb      	strh	r3, [r7, #30]
 800f41a:	2300      	movs	r3, #0
 800f41c:	83bb      	strh	r3, [r7, #28]
 800f41e:	2300      	movs	r3, #0
 800f420:	833b      	strh	r3, [r7, #24]
 800f422:	2300      	movs	r3, #0
 800f424:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp_Data = 0;
 800f426:	2300      	movs	r3, #0
 800f428:	76fb      	strb	r3, [r7, #27]

	if(Parity_Type == NO_PARITY)
 800f42a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800f42e:	2b02      	cmp	r3, #2
 800f430:	d108      	bne.n	800f444 <Insert_cal_parity+0x40>
	{
		InsertBits(start,No_of_Bits,Dest_Buff,DataIn);
 800f432:	7bfb      	ldrb	r3, [r7, #15]
 800f434:	b298      	uxth	r0, r3
 800f436:	7bbb      	ldrb	r3, [r7, #14]
 800f438:	b299      	uxth	r1, r3
 800f43a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f43c:	68ba      	ldr	r2, [r7, #8]
 800f43e:	f7f1 f975 	bl	800072c <InsertBits>
		return;
 800f442:	e13b      	b.n	800f6bc <Insert_cal_parity+0x2b8>
	}

	if (No_of_Bits == 8)
 800f444:	7bbb      	ldrb	r3, [r7, #14]
 800f446:	2b08      	cmp	r3, #8
 800f448:	d12c      	bne.n	800f4a4 <Insert_cal_parity+0xa0>
	{
		// printf("One Byte Calculation\n");
		if (DataIn > 0x7f)
 800f44a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f44e:	2a80      	cmp	r2, #128	; 0x80
 800f450:	f173 0300 	sbcs.w	r3, r3, #0
 800f454:	d303      	bcc.n	800f45e <Insert_cal_parity+0x5a>
		{
			printf("Can't Insert Data as it is more than 7 Bits Length\n");
 800f456:	489b      	ldr	r0, [pc, #620]	; (800f6c4 <Insert_cal_parity+0x2c0>)
 800f458:	f017 fc64 	bl	8026d24 <puts>
			return;
 800f45c:	e12e      	b.n	800f6bc <Insert_cal_parity+0x2b8>
		}
		else
		{
			if (Calculate_Parity(DataIn, Parity_Type) == 1)
 800f45e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800f462:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f466:	4611      	mov	r1, r2
 800f468:	4618      	mov	r0, r3
 800f46a:	f7ff ff29 	bl	800f2c0 <Calculate_Parity>
 800f46e:	4603      	mov	r3, r0
 800f470:	2b01      	cmp	r3, #1
 800f472:	d10b      	bne.n	800f48c <Insert_cal_parity+0x88>
			{
				//printf("\nSET\n");
				Dest_Buff[0] = DataIn;
 800f474:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] |= 1 << 7;
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f484:	b2da      	uxtb	r2, r3
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	701a      	strb	r2, [r3, #0]
 800f48a:	e117      	b.n	800f6bc <Insert_cal_parity+0x2b8>
			}
			else
			{
				//printf("\nCLEAR\n");
				Dest_Buff[0] = DataIn;
 800f48c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] &= ~(1 << 7);
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f49c:	b2da      	uxtb	r2, r3
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	701a      	strb	r2, [r3, #0]
 800f4a2:	e10b      	b.n	800f6bc <Insert_cal_parity+0x2b8>
			}
		}
	}
	else if (No_of_Bits == 24)
 800f4a4:	7bbb      	ldrb	r3, [r7, #14]
 800f4a6:	2b18      	cmp	r3, #24
 800f4a8:	f040 8104 	bne.w	800f6b4 <Insert_cal_parity+0x2b0>
	{
		// printf("Three Byte's Calculation\n");
		if (DataIn > 0x1fffff)
 800f4ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f4b0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800f4b4:	f173 0300 	sbcs.w	r3, r3, #0
 800f4b8:	d303      	bcc.n	800f4c2 <Insert_cal_parity+0xbe>
		{
			printf("Can't Insert Data as it is more than 21 Bits Length\n");
 800f4ba:	4883      	ldr	r0, [pc, #524]	; (800f6c8 <Insert_cal_parity+0x2c4>)
 800f4bc:	f017 fc32 	bl	8026d24 <puts>
			return;
 800f4c0:	e0fc      	b.n	800f6bc <Insert_cal_parity+0x2b8>
		}
		else
		{
			uint8_t Byte_Traverser = 0;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	76bb      	strb	r3, [r7, #26]

			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	76bb      	strb	r3, [r7, #26]
 800f4ca:	e0ee      	b.n	800f6aa <Insert_cal_parity+0x2a6>
			{
				Temp_Data = DataIn >> (((Byte_Traverser * 8)));
 800f4cc:	7ebb      	ldrb	r3, [r7, #26]
 800f4ce:	00d9      	lsls	r1, r3, #3
 800f4d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f4d4:	f1c1 0620 	rsb	r6, r1, #32
 800f4d8:	f1a1 0c20 	sub.w	ip, r1, #32
 800f4dc:	fa22 f001 	lsr.w	r0, r2, r1
 800f4e0:	6038      	str	r0, [r7, #0]
 800f4e2:	fa03 f606 	lsl.w	r6, r3, r6
 800f4e6:	6838      	ldr	r0, [r7, #0]
 800f4e8:	4330      	orrs	r0, r6
 800f4ea:	6038      	str	r0, [r7, #0]
 800f4ec:	fa23 fc0c 	lsr.w	ip, r3, ip
 800f4f0:	6838      	ldr	r0, [r7, #0]
 800f4f2:	ea40 000c 	orr.w	r0, r0, ip
 800f4f6:	6038      	str	r0, [r7, #0]
 800f4f8:	40cb      	lsrs	r3, r1
 800f4fa:	607b      	str	r3, [r7, #4]
 800f4fc:	783b      	ldrb	r3, [r7, #0]
 800f4fe:	76fb      	strb	r3, [r7, #27]
				// printf("#Temp_Data:0x%02x\n",Temp_Data);
				switch (Byte_Traverser)
 800f500:	7ebb      	ldrb	r3, [r7, #26]
 800f502:	2b02      	cmp	r3, #2
 800f504:	d07a      	beq.n	800f5fc <Insert_cal_parity+0x1f8>
 800f506:	2b02      	cmp	r3, #2
 800f508:	f300 8094 	bgt.w	800f634 <Insert_cal_parity+0x230>
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d002      	beq.n	800f516 <Insert_cal_parity+0x112>
 800f510:	2b01      	cmp	r3, #1
 800f512:	d01f      	beq.n	800f554 <Insert_cal_parity+0x150>
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
					//printf("Temp_Data:%u\n",Temp_Data);
					break;
				default:
					break;
 800f514:	e08e      	b.n	800f634 <Insert_cal_parity+0x230>
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800f516:	7ebb      	ldrb	r3, [r7, #26]
 800f518:	00d9      	lsls	r1, r3, #3
 800f51a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f51e:	f1c1 0620 	rsb	r6, r1, #32
 800f522:	f1a1 0020 	sub.w	r0, r1, #32
 800f526:	fa22 f401 	lsr.w	r4, r2, r1
 800f52a:	fa03 f606 	lsl.w	r6, r3, r6
 800f52e:	4334      	orrs	r4, r6
 800f530:	fa23 f000 	lsr.w	r0, r3, r0
 800f534:	4304      	orrs	r4, r0
 800f536:	fa23 f501 	lsr.w	r5, r3, r1
 800f53a:	f04f 0200 	mov.w	r2, #0
 800f53e:	f04f 0300 	mov.w	r3, #0
 800f542:	09e2      	lsrs	r2, r4, #7
 800f544:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800f548:	09eb      	lsrs	r3, r5, #7
 800f54a:	b293      	uxth	r3, r2
 800f54c:	f003 0301 	and.w	r3, r3, #1
 800f550:	83fb      	strh	r3, [r7, #30]
					break;
 800f552:	e070      	b.n	800f636 <Insert_cal_parity+0x232>
					Temp_Data<<=1; //Shifting data by 1 bit
 800f554:	7efb      	ldrb	r3, [r7, #27]
 800f556:	005b      	lsls	r3, r3, #1
 800f558:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800f55a:	8bfb      	ldrh	r3, [r7, #30]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d104      	bne.n	800f56a <Insert_cal_parity+0x166>
 800f560:	7efb      	ldrb	r3, [r7, #27]
 800f562:	f023 0301 	bic.w	r3, r3, #1
 800f566:	76fb      	strb	r3, [r7, #27]
 800f568:	e003      	b.n	800f572 <Insert_cal_parity+0x16e>
 800f56a:	7efb      	ldrb	r3, [r7, #27]
 800f56c:	f043 0301 	orr.w	r3, r3, #1
 800f570:	76fb      	strb	r3, [r7, #27]
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800f572:	7ebb      	ldrb	r3, [r7, #26]
 800f574:	00d9      	lsls	r1, r3, #3
 800f576:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f57a:	f1c1 0620 	rsb	r6, r1, #32
 800f57e:	f1a1 0020 	sub.w	r0, r1, #32
 800f582:	fa22 f801 	lsr.w	r8, r2, r1
 800f586:	fa03 f606 	lsl.w	r6, r3, r6
 800f58a:	ea48 0806 	orr.w	r8, r8, r6
 800f58e:	fa23 f000 	lsr.w	r0, r3, r0
 800f592:	ea48 0800 	orr.w	r8, r8, r0
 800f596:	fa23 f901 	lsr.w	r9, r3, r1
 800f59a:	f04f 0200 	mov.w	r2, #0
 800f59e:	f04f 0300 	mov.w	r3, #0
 800f5a2:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 800f5a6:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 800f5aa:	ea4f 13d9 	mov.w	r3, r9, lsr #7
 800f5ae:	b293      	uxth	r3, r2
 800f5b0:	f003 0301 	and.w	r3, r3, #1
 800f5b4:	83fb      	strh	r3, [r7, #30]
					t2 = (((DataIn >> (((Byte_Traverser * 8)))) >> 6) & 1);
 800f5b6:	7ebb      	ldrb	r3, [r7, #26]
 800f5b8:	00d9      	lsls	r1, r3, #3
 800f5ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f5be:	f1c1 0620 	rsb	r6, r1, #32
 800f5c2:	f1a1 0020 	sub.w	r0, r1, #32
 800f5c6:	fa22 fa01 	lsr.w	sl, r2, r1
 800f5ca:	fa03 f606 	lsl.w	r6, r3, r6
 800f5ce:	ea4a 0a06 	orr.w	sl, sl, r6
 800f5d2:	fa23 f000 	lsr.w	r0, r3, r0
 800f5d6:	ea4a 0a00 	orr.w	sl, sl, r0
 800f5da:	fa23 fb01 	lsr.w	fp, r3, r1
 800f5de:	f04f 0200 	mov.w	r2, #0
 800f5e2:	f04f 0300 	mov.w	r3, #0
 800f5e6:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800f5ea:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800f5ee:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800f5f2:	b293      	uxth	r3, r2
 800f5f4:	f003 0301 	and.w	r3, r3, #1
 800f5f8:	83bb      	strh	r3, [r7, #28]
					break;
 800f5fa:	e01c      	b.n	800f636 <Insert_cal_parity+0x232>
					Temp_Data<<=2; //Shifting data by 2 bit
 800f5fc:	7efb      	ldrb	r3, [r7, #27]
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	76fb      	strb	r3, [r7, #27]
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800f602:	8bbb      	ldrh	r3, [r7, #28]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d104      	bne.n	800f612 <Insert_cal_parity+0x20e>
 800f608:	7efb      	ldrb	r3, [r7, #27]
 800f60a:	f023 0301 	bic.w	r3, r3, #1
 800f60e:	76fb      	strb	r3, [r7, #27]
 800f610:	e003      	b.n	800f61a <Insert_cal_parity+0x216>
 800f612:	7efb      	ldrb	r3, [r7, #27]
 800f614:	f043 0301 	orr.w	r3, r3, #1
 800f618:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800f61a:	8bfb      	ldrh	r3, [r7, #30]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d104      	bne.n	800f62a <Insert_cal_parity+0x226>
 800f620:	7efb      	ldrb	r3, [r7, #27]
 800f622:	f023 0302 	bic.w	r3, r3, #2
 800f626:	76fb      	strb	r3, [r7, #27]
					break;
 800f628:	e005      	b.n	800f636 <Insert_cal_parity+0x232>
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800f62a:	7efb      	ldrb	r3, [r7, #27]
 800f62c:	f043 0302 	orr.w	r3, r3, #2
 800f630:	76fb      	strb	r3, [r7, #27]
					break;
 800f632:	e000      	b.n	800f636 <Insert_cal_parity+0x232>
					break;
 800f634:	bf00      	nop
				}
				//if (Calculate_Parity(DataIn >> ((16 - (Byte_Traverser * 8))), Parity_Type) == 1)
				if (Calculate_Parity(Temp_Data, Parity_Type) == 1)
 800f636:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f63a:	7efb      	ldrb	r3, [r7, #27]
 800f63c:	4611      	mov	r1, r2
 800f63e:	4618      	mov	r0, r3
 800f640:	f7ff fe3e 	bl	800f2c0 <Calculate_Parity>
 800f644:	4603      	mov	r3, r0
 800f646:	2b01      	cmp	r3, #1
 800f648:	d116      	bne.n	800f678 <Insert_cal_parity+0x274>
				{
					// printf("SET\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800f64a:	7ebb      	ldrb	r3, [r7, #26]
 800f64c:	f1c3 0302 	rsb	r3, r3, #2
 800f650:	68ba      	ldr	r2, [r7, #8]
 800f652:	4413      	add	r3, r2
 800f654:	7efa      	ldrb	r2, [r7, #27]
 800f656:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3- Byte_Traverser-1] |= 1 << 7;
 800f658:	7ebb      	ldrb	r3, [r7, #26]
 800f65a:	f1c3 0302 	rsb	r3, r3, #2
 800f65e:	68ba      	ldr	r2, [r7, #8]
 800f660:	4413      	add	r3, r2
 800f662:	781a      	ldrb	r2, [r3, #0]
 800f664:	7ebb      	ldrb	r3, [r7, #26]
 800f666:	f1c3 0302 	rsb	r3, r3, #2
 800f66a:	68b9      	ldr	r1, [r7, #8]
 800f66c:	440b      	add	r3, r1
 800f66e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f672:	b2d2      	uxtb	r2, r2
 800f674:	701a      	strb	r2, [r3, #0]
 800f676:	e015      	b.n	800f6a4 <Insert_cal_parity+0x2a0>
				}
				else
				{
					// printf("CLEAR\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800f678:	7ebb      	ldrb	r3, [r7, #26]
 800f67a:	f1c3 0302 	rsb	r3, r3, #2
 800f67e:	68ba      	ldr	r2, [r7, #8]
 800f680:	4413      	add	r3, r2
 800f682:	7efa      	ldrb	r2, [r7, #27]
 800f684:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3 -Byte_Traverser-1] &= ~(1 << 7);
 800f686:	7ebb      	ldrb	r3, [r7, #26]
 800f688:	f1c3 0302 	rsb	r3, r3, #2
 800f68c:	68ba      	ldr	r2, [r7, #8]
 800f68e:	4413      	add	r3, r2
 800f690:	781a      	ldrb	r2, [r3, #0]
 800f692:	7ebb      	ldrb	r3, [r7, #26]
 800f694:	f1c3 0302 	rsb	r3, r3, #2
 800f698:	68b9      	ldr	r1, [r7, #8]
 800f69a:	440b      	add	r3, r1
 800f69c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f6a0:	b2d2      	uxtb	r2, r2
 800f6a2:	701a      	strb	r2, [r3, #0]
			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800f6a4:	7ebb      	ldrb	r3, [r7, #26]
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	76bb      	strb	r3, [r7, #26]
 800f6aa:	7ebb      	ldrb	r3, [r7, #26]
 800f6ac:	2b02      	cmp	r3, #2
 800f6ae:	f67f af0d 	bls.w	800f4cc <Insert_cal_parity+0xc8>
 800f6b2:	e003      	b.n	800f6bc <Insert_cal_parity+0x2b8>
			}
		}
	}
	else
	{
		printf("Selection Wrong\n");
 800f6b4:	4805      	ldr	r0, [pc, #20]	; (800f6cc <Insert_cal_parity+0x2c8>)
 800f6b6:	f017 fb35 	bl	8026d24 <puts>
		return;
 800f6ba:	bf00      	nop
	}
	UNUSED(t1);UNUSED(t2);UNUSED(t3);UNUSED(t4);
}
 800f6bc:	3724      	adds	r7, #36	; 0x24
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c4:	0802af9c 	.word	0x0802af9c
 800f6c8:	0802afd0 	.word	0x0802afd0
 800f6cc:	0802b004 	.word	0x0802b004

0800f6d0 <Data_Compliment>:

uint16_t Data_Compliment(uint8_t *Buff,uint16_t Size,uint8_t Type)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	460b      	mov	r3, r1
 800f6da:	807b      	strh	r3, [r7, #2]
 800f6dc:	4613      	mov	r3, r2
 800f6de:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	81fb      	strh	r3, [r7, #14]
	uint16_t Actual_Size = 0;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	81bb      	strh	r3, [r7, #12]

#if (SIEMENS_DEBUG==1)
	printf("Size:%u\n",Size);
#endif

	if(Type == VERIFY)
 800f6e8:	787b      	ldrb	r3, [r7, #1]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d133      	bne.n	800f756 <Data_Compliment+0x86>
	{
		Actual_Size = ((Size/2)-2);
 800f6ee:	887b      	ldrh	r3, [r7, #2]
 800f6f0:	085b      	lsrs	r3, r3, #1
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	3b02      	subs	r3, #2
 800f6f6:	81bb      	strh	r3, [r7, #12]
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	81fb      	strh	r3, [r7, #14]
 800f6fc:	e025      	b.n	800f74a <Data_Compliment+0x7a>
		{
			// printf("0x%02x|Compliment:0x%02x\n",Buff[Traverser],Buff[Traverser+Actual_Size+2]);
			if(Buff[Traverser] != (uint8_t)~Buff[Traverser+Actual_Size+2])
 800f6fe:	89fb      	ldrh	r3, [r7, #14]
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	4413      	add	r3, r2
 800f704:	781a      	ldrb	r2, [r3, #0]
 800f706:	89f9      	ldrh	r1, [r7, #14]
 800f708:	89bb      	ldrh	r3, [r7, #12]
 800f70a:	440b      	add	r3, r1
 800f70c:	3302      	adds	r3, #2
 800f70e:	6879      	ldr	r1, [r7, #4]
 800f710:	440b      	add	r3, r1
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	43db      	mvns	r3, r3
 800f716:	b2db      	uxtb	r3, r3
 800f718:	429a      	cmp	r2, r3
 800f71a:	d013      	beq.n	800f744 <Data_Compliment+0x74>
			{
				printf("Compliment failed for DATA\n0x%02x|Compliment:0x%02x\n",Buff[Traverser],(uint8_t)~Buff[Traverser+Actual_Size+2]);
 800f71c:	89fb      	ldrh	r3, [r7, #14]
 800f71e:	687a      	ldr	r2, [r7, #4]
 800f720:	4413      	add	r3, r2
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	4619      	mov	r1, r3
 800f726:	89fa      	ldrh	r2, [r7, #14]
 800f728:	89bb      	ldrh	r3, [r7, #12]
 800f72a:	4413      	add	r3, r2
 800f72c:	3302      	adds	r3, #2
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	4413      	add	r3, r2
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	43db      	mvns	r3, r3
 800f736:	b2db      	uxtb	r3, r3
 800f738:	461a      	mov	r2, r3
 800f73a:	481a      	ldr	r0, [pc, #104]	; (800f7a4 <Data_Compliment+0xd4>)
 800f73c:	f017 fa56 	bl	8026bec <iprintf>
				return 0;
 800f740:	2300      	movs	r3, #0
 800f742:	e02b      	b.n	800f79c <Data_Compliment+0xcc>
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800f744:	89fb      	ldrh	r3, [r7, #14]
 800f746:	3301      	adds	r3, #1
 800f748:	81fb      	strh	r3, [r7, #14]
 800f74a:	89fa      	ldrh	r2, [r7, #14]
 800f74c:	89bb      	ldrh	r3, [r7, #12]
 800f74e:	429a      	cmp	r2, r3
 800f750:	d3d5      	bcc.n	800f6fe <Data_Compliment+0x2e>
			}
		}
		return 1;
 800f752:	2301      	movs	r3, #1
 800f754:	e022      	b.n	800f79c <Data_Compliment+0xcc>
	}
	else if(Type == CONVERT)
 800f756:	787b      	ldrb	r3, [r7, #1]
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d11e      	bne.n	800f79a <Data_Compliment+0xca>
		{
			printf("0x%02x|",Buff[Traverser]);
		}
		printf("Compliment Data:\n");
#endif
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800f75c:	2300      	movs	r3, #0
 800f75e:	81fb      	strh	r3, [r7, #14]
 800f760:	e010      	b.n	800f784 <Data_Compliment+0xb4>
		{
			Buff[Traverser+2+Size] = ~Buff[Traverser];
 800f762:	89fb      	ldrh	r3, [r7, #14]
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	4413      	add	r3, r2
 800f768:	781a      	ldrb	r2, [r3, #0]
 800f76a:	89fb      	ldrh	r3, [r7, #14]
 800f76c:	1c99      	adds	r1, r3, #2
 800f76e:	887b      	ldrh	r3, [r7, #2]
 800f770:	440b      	add	r3, r1
 800f772:	4619      	mov	r1, r3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	440b      	add	r3, r1
 800f778:	43d2      	mvns	r2, r2
 800f77a:	b2d2      	uxtb	r2, r2
 800f77c:	701a      	strb	r2, [r3, #0]
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800f77e:	89fb      	ldrh	r3, [r7, #14]
 800f780:	3301      	adds	r3, #1
 800f782:	81fb      	strh	r3, [r7, #14]
 800f784:	89fa      	ldrh	r2, [r7, #14]
 800f786:	887b      	ldrh	r3, [r7, #2]
 800f788:	429a      	cmp	r2, r3
 800f78a:	d3ea      	bcc.n	800f762 <Data_Compliment+0x92>
#if (SIEMENS_DEBUG==1)
			printf("0x%02x|",Buff[Traverser+2+Size]);
#endif
		}
		return (Traverser+Size+2);
 800f78c:	89fa      	ldrh	r2, [r7, #14]
 800f78e:	887b      	ldrh	r3, [r7, #2]
 800f790:	4413      	add	r3, r2
 800f792:	b29b      	uxth	r3, r3
 800f794:	3302      	adds	r3, #2
 800f796:	b29b      	uxth	r3, r3
 800f798:	e000      	b.n	800f79c <Data_Compliment+0xcc>
	}
	return 0;
 800f79a:	2300      	movs	r3, #0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3710      	adds	r7, #16
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	0802b014 	.word	0x0802b014

0800f7a8 <CheckToSendReplyorNot>:

void CheckToSendReplyorNot(void)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b083      	sub	sp, #12
 800f7ac:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	71fb      	strb	r3, [r7, #7]

	if(Tx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800f7b2:	4b1a      	ldr	r3, [pc, #104]	; (800f81c <CheckToSendReplyorNot+0x74>)
 800f7b4:	785b      	ldrb	r3, [r3, #1]
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d104      	bne.n	800f7c4 <CheckToSendReplyorNot+0x1c>
	{
		SET_BIT_USER(0,Value);
 800f7ba:	79fb      	ldrb	r3, [r7, #7]
 800f7bc:	f043 0301 	orr.w	r3, r3, #1
 800f7c0:	71fb      	strb	r3, [r7, #7]
 800f7c2:	e003      	b.n	800f7cc <CheckToSendReplyorNot+0x24>
	}
	else
	{
		CLEAR_BIT_USER(0,Value);
 800f7c4:	79fb      	ldrb	r3, [r7, #7]
 800f7c6:	f023 0301 	bic.w	r3, r3, #1
 800f7ca:	71fb      	strb	r3, [r7, #7]
	}
	if(Rx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800f7cc:	4b14      	ldr	r3, [pc, #80]	; (800f820 <CheckToSendReplyorNot+0x78>)
 800f7ce:	785b      	ldrb	r3, [r3, #1]
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d104      	bne.n	800f7de <CheckToSendReplyorNot+0x36>
	{
		SET_BIT_USER(1,Value);
 800f7d4:	79fb      	ldrb	r3, [r7, #7]
 800f7d6:	f043 0302 	orr.w	r3, r3, #2
 800f7da:	71fb      	strb	r3, [r7, #7]
 800f7dc:	e003      	b.n	800f7e6 <CheckToSendReplyorNot+0x3e>
	}
	else
	{
		CLEAR_BIT_USER(1,Value);
 800f7de:	79fb      	ldrb	r3, [r7, #7]
 800f7e0:	f023 0302 	bic.w	r3, r3, #2
 800f7e4:	71fb      	strb	r3, [r7, #7]
	}

	//	printf("Value:%u\n",Value);

	switch(Value)
 800f7e6:	79fb      	ldrb	r3, [r7, #7]
 800f7e8:	2b02      	cmp	r3, #2
 800f7ea:	dc02      	bgt.n	800f7f2 <CheckToSendReplyorNot+0x4a>
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	da03      	bge.n	800f7f8 <CheckToSendReplyorNot+0x50>
 800f7f0:	e00a      	b.n	800f808 <CheckToSendReplyorNot+0x60>
 800f7f2:	2b03      	cmp	r3, #3
 800f7f4:	d004      	beq.n	800f800 <CheckToSendReplyorNot+0x58>
 800f7f6:	e007      	b.n	800f808 <CheckToSendReplyorNot+0x60>
	{
	case ZERO:
	case ONE:
	case TWO:
		SendReply = 1;
 800f7f8:	4b0a      	ldr	r3, [pc, #40]	; (800f824 <CheckToSendReplyorNot+0x7c>)
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	701a      	strb	r2, [r3, #0]
		break;
 800f7fe:	e007      	b.n	800f810 <CheckToSendReplyorNot+0x68>
	case THREE:
#ifdef EI_1
		SendReply = 1;
 800f800:	4b08      	ldr	r3, [pc, #32]	; (800f824 <CheckToSendReplyorNot+0x7c>)
 800f802:	2201      	movs	r2, #1
 800f804:	701a      	strb	r2, [r3, #0]
#endif
#ifdef EI_2
		SendReply = 0;
#endif
		break;
 800f806:	e003      	b.n	800f810 <CheckToSendReplyorNot+0x68>
	default:
		SendReply = 1;
 800f808:	4b06      	ldr	r3, [pc, #24]	; (800f824 <CheckToSendReplyorNot+0x7c>)
 800f80a:	2201      	movs	r2, #1
 800f80c:	701a      	strb	r2, [r3, #0]
		break;
 800f80e:	bf00      	nop
	}

}
 800f810:	bf00      	nop
 800f812:	370c      	adds	r7, #12
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr
 800f81c:	20004c80 	.word	0x20004c80
 800f820:	20004c84 	.word	0x20004c84
 800f824:	200063a1 	.word	0x200063a1

0800f828 <PrintSignals>:



void PrintSignals(void)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800f82e:	4b2d      	ldr	r3, [pc, #180]	; (800f8e4 <PrintSignals+0xbc>)
 800f830:	881b      	ldrh	r3, [r3, #0]
 800f832:	461a      	mov	r2, r3
 800f834:	492c      	ldr	r1, [pc, #176]	; (800f8e8 <PrintSignals+0xc0>)
 800f836:	482d      	ldr	r0, [pc, #180]	; (800f8ec <PrintSignals+0xc4>)
 800f838:	f017 f8c8 	bl	80269cc <memcpy>

	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800f83c:	2301      	movs	r3, #1
 800f83e:	80fb      	strh	r3, [r7, #6]
 800f840:	e045      	b.n	800f8ce <PrintSignals+0xa6>
	{
		if(Traverser > TotalSigCount)
 800f842:	4b2b      	ldr	r3, [pc, #172]	; (800f8f0 <PrintSignals+0xc8>)
 800f844:	881b      	ldrh	r3, [r3, #0]
 800f846:	88fa      	ldrh	r2, [r7, #6]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d83c      	bhi.n	800f8c6 <PrintSignals+0x9e>
		{
			continue;
		}

		if(GETPIN(Traverser) > 0)
 800f84c:	88fb      	ldrh	r3, [r7, #6]
 800f84e:	3b01      	subs	r3, #1
 800f850:	2b00      	cmp	r3, #0
 800f852:	da00      	bge.n	800f856 <PrintSignals+0x2e>
 800f854:	3307      	adds	r3, #7
 800f856:	10db      	asrs	r3, r3, #3
 800f858:	461a      	mov	r2, r3
 800f85a:	4b26      	ldr	r3, [pc, #152]	; (800f8f4 <PrintSignals+0xcc>)
 800f85c:	4413      	add	r3, r2
 800f85e:	789b      	ldrb	r3, [r3, #2]
 800f860:	4619      	mov	r1, r3
 800f862:	88fb      	ldrh	r3, [r7, #6]
 800f864:	3b01      	subs	r3, #1
 800f866:	425a      	negs	r2, r3
 800f868:	f003 0307 	and.w	r3, r3, #7
 800f86c:	f002 0207 	and.w	r2, r2, #7
 800f870:	bf58      	it	pl
 800f872:	4253      	negpl	r3, r2
 800f874:	2201      	movs	r2, #1
 800f876:	fa02 f303 	lsl.w	r3, r2, r3
 800f87a:	400b      	ands	r3, r1
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	dd0c      	ble.n	800f89a <PrintSignals+0x72>
		{
			printf("%15s:PICKUP   ",Signals[Traverser-1]);
 800f880:	88fb      	ldrh	r3, [r7, #6]
 800f882:	1e5a      	subs	r2, r3, #1
 800f884:	4613      	mov	r3, r2
 800f886:	009b      	lsls	r3, r3, #2
 800f888:	4413      	add	r3, r2
 800f88a:	00db      	lsls	r3, r3, #3
 800f88c:	4a1a      	ldr	r2, [pc, #104]	; (800f8f8 <PrintSignals+0xd0>)
 800f88e:	4413      	add	r3, r2
 800f890:	4619      	mov	r1, r3
 800f892:	481a      	ldr	r0, [pc, #104]	; (800f8fc <PrintSignals+0xd4>)
 800f894:	f017 f9aa 	bl	8026bec <iprintf>
 800f898:	e00b      	b.n	800f8b2 <PrintSignals+0x8a>
		}
		else
		{
			printf("%15s:DROP      ",Signals[Traverser-1]);
 800f89a:	88fb      	ldrh	r3, [r7, #6]
 800f89c:	1e5a      	subs	r2, r3, #1
 800f89e:	4613      	mov	r3, r2
 800f8a0:	009b      	lsls	r3, r3, #2
 800f8a2:	4413      	add	r3, r2
 800f8a4:	00db      	lsls	r3, r3, #3
 800f8a6:	4a14      	ldr	r2, [pc, #80]	; (800f8f8 <PrintSignals+0xd0>)
 800f8a8:	4413      	add	r3, r2
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	4814      	ldr	r0, [pc, #80]	; (800f900 <PrintSignals+0xd8>)
 800f8ae:	f017 f99d 	bl	8026bec <iprintf>
		}

		if( (Traverser%2) == 0)
 800f8b2:	88fb      	ldrh	r3, [r7, #6]
 800f8b4:	f003 0301 	and.w	r3, r3, #1
 800f8b8:	b29b      	uxth	r3, r3
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d104      	bne.n	800f8c8 <PrintSignals+0xa0>
		{
			printf("\n");
 800f8be:	200a      	movs	r0, #10
 800f8c0:	f017 f9ac 	bl	8026c1c <putchar>
 800f8c4:	e000      	b.n	800f8c8 <PrintSignals+0xa0>
			continue;
 800f8c6:	bf00      	nop
	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800f8c8:	88fb      	ldrh	r3, [r7, #6]
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	80fb      	strh	r3, [r7, #6]
 800f8ce:	88fa      	ldrh	r2, [r7, #6]
 800f8d0:	4b08      	ldr	r3, [pc, #32]	; (800f8f4 <PrintSignals+0xcc>)
 800f8d2:	881b      	ldrh	r3, [r3, #0]
 800f8d4:	00db      	lsls	r3, r3, #3
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	ddb3      	ble.n	800f842 <PrintSignals+0x1a>
		}
	}
}
 800f8da:	bf00      	nop
 800f8dc:	bf00      	nop
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	20004eac 	.word	0x20004eac
 800f8e8:	20004eb0 	.word	0x20004eb0
 800f8ec:	20004caa 	.word	0x20004caa
 800f8f0:	20005fb4 	.word	0x20005fb4
 800f8f4:	20004ca8 	.word	0x20004ca8
 800f8f8:	200054c4 	.word	0x200054c4
 800f8fc:	0802b04c 	.word	0x0802b04c
 800f900:	0802b05c 	.word	0x0802b05c

0800f904 <GetTimeStamp>:

void GetTimeStamp(void)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
	uint32_t TimeFrame = 0;
 800f90a:	2300      	movs	r3, #0
 800f90c:	60fb      	str	r3, [r7, #12]
	static uint32_t PrevTimeFrame = 0;
	uint32_t TimeStamp = 0;
 800f90e:	2300      	movs	r3, #0
 800f910:	60bb      	str	r3, [r7, #8]
	static 	uint32_t PrevTimeStamp = 0;
	static uint32_t TickswhenTimeChanged = 0;
	uint32_t ElapsTicksAfterTimeChange = 0;
 800f912:	2300      	movs	r3, #0
 800f914:	607b      	str	r3, [r7, #4]

	Get_time();
 800f916:	f7fd f8ad 	bl	800ca74 <Get_time>
	TimeFrame = (((RTC_Date_time_Dec_st.Hour * 3600) +(RTC_Date_time_Dec_st.Mins * 60) + (RTC_Date_time_Dec_st.Secs)));
 800f91a:	4b21      	ldr	r3, [pc, #132]	; (800f9a0 <GetTimeStamp+0x9c>)
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	461a      	mov	r2, r3
 800f920:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800f924:	fb03 f202 	mul.w	r2, r3, r2
 800f928:	4b1d      	ldr	r3, [pc, #116]	; (800f9a0 <GetTimeStamp+0x9c>)
 800f92a:	785b      	ldrb	r3, [r3, #1]
 800f92c:	4619      	mov	r1, r3
 800f92e:	460b      	mov	r3, r1
 800f930:	011b      	lsls	r3, r3, #4
 800f932:	1a5b      	subs	r3, r3, r1
 800f934:	009b      	lsls	r3, r3, #2
 800f936:	4413      	add	r3, r2
 800f938:	4a19      	ldr	r2, [pc, #100]	; (800f9a0 <GetTimeStamp+0x9c>)
 800f93a:	7892      	ldrb	r2, [r2, #2]
 800f93c:	4413      	add	r3, r2
 800f93e:	60fb      	str	r3, [r7, #12]

	if(TimeFrame != PrevTimeFrame)
 800f940:	4b18      	ldr	r3, [pc, #96]	; (800f9a4 <GetTimeStamp+0xa0>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	68fa      	ldr	r2, [r7, #12]
 800f946:	429a      	cmp	r2, r3
 800f948:	d007      	beq.n	800f95a <GetTimeStamp+0x56>
	{
		PrevTimeFrame = TimeFrame;
 800f94a:	4a16      	ldr	r2, [pc, #88]	; (800f9a4 <GetTimeStamp+0xa0>)
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	6013      	str	r3, [r2, #0]
		TickswhenTimeChanged = HAL_GetTick();
 800f950:	f00a f942 	bl	8019bd8 <HAL_GetTick>
 800f954:	4603      	mov	r3, r0
 800f956:	4a14      	ldr	r2, [pc, #80]	; (800f9a8 <GetTimeStamp+0xa4>)
 800f958:	6013      	str	r3, [r2, #0]
	}

	ElapsTicksAfterTimeChange = HAL_Elaps_Ticks(TickswhenTimeChanged);
 800f95a:	4b13      	ldr	r3, [pc, #76]	; (800f9a8 <GetTimeStamp+0xa4>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	4618      	mov	r0, r3
 800f960:	f000 fe1c 	bl	801059c <HAL_Elaps_Ticks>
 800f964:	6078      	str	r0, [r7, #4]

	TimeStamp  = (TimeFrame * 10) + (ElapsTicksAfterTimeChange/100);
 800f966:	68fa      	ldr	r2, [r7, #12]
 800f968:	4613      	mov	r3, r2
 800f96a:	009b      	lsls	r3, r3, #2
 800f96c:	4413      	add	r3, r2
 800f96e:	005b      	lsls	r3, r3, #1
 800f970:	4619      	mov	r1, r3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	4a0d      	ldr	r2, [pc, #52]	; (800f9ac <GetTimeStamp+0xa8>)
 800f976:	fba2 2303 	umull	r2, r3, r2, r3
 800f97a:	095b      	lsrs	r3, r3, #5
 800f97c:	440b      	add	r3, r1
 800f97e:	60bb      	str	r3, [r7, #8]
	if(TimeStamp != PrevTimeStamp)
 800f980:	4b0b      	ldr	r3, [pc, #44]	; (800f9b0 <GetTimeStamp+0xac>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	68ba      	ldr	r2, [r7, #8]
 800f986:	429a      	cmp	r2, r3
 800f988:	d005      	beq.n	800f996 <GetTimeStamp+0x92>
	{
		PrevTimeStamp = TimeStamp;
 800f98a:	4a09      	ldr	r2, [pc, #36]	; (800f9b0 <GetTimeStamp+0xac>)
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	6013      	str	r3, [r2, #0]
		SelfTimeStamp = TimeStamp;
 800f990:	4a08      	ldr	r2, [pc, #32]	; (800f9b4 <GetTimeStamp+0xb0>)
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	6013      	str	r3, [r2, #0]
		//		printf("Ticks:%lu|ms:%lu|%lu\n",HAL_GetTick(),	TimeStamp,(ElapsTicksAfterTimeChange));
	}
}
 800f996:	bf00      	nop
 800f998:	3710      	adds	r7, #16
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	20003fdc 	.word	0x20003fdc
 800f9a4:	200063a8 	.word	0x200063a8
 800f9a8:	200063ac 	.word	0x200063ac
 800f9ac:	51eb851f 	.word	0x51eb851f
 800f9b0:	200063b0 	.word	0x200063b0
 800f9b4:	200054c0 	.word	0x200054c0

0800f9b8 <UpdateSIGNALSNames>:


void UpdateSIGNALSNames(void)
{
 800f9b8:	b490      	push	{r4, r7}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800f9c2:	79fb      	ldrb	r3, [r7, #7]
 800f9c4:	1c5a      	adds	r2, r3, #1
 800f9c6:	71fa      	strb	r2, [r7, #7]
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	4613      	mov	r3, r2
 800f9cc:	009b      	lsls	r3, r3, #2
 800f9ce:	4413      	add	r3, r2
 800f9d0:	00db      	lsls	r3, r3, #3
 800f9d2:	4acd      	ldr	r2, [pc, #820]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800f9d4:	4413      	add	r3, r2
 800f9d6:	4acd      	ldr	r2, [pc, #820]	; (800fd0c <UpdateSIGNALSNames+0x354>)
 800f9d8:	6810      	ldr	r0, [r2, #0]
 800f9da:	6018      	str	r0, [r3, #0]
 800f9dc:	8892      	ldrh	r2, [r2, #4]
 800f9de:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800f9e0:	79fb      	ldrb	r3, [r7, #7]
 800f9e2:	1c5a      	adds	r2, r3, #1
 800f9e4:	71fa      	strb	r2, [r7, #7]
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	4613      	mov	r3, r2
 800f9ea:	009b      	lsls	r3, r3, #2
 800f9ec:	4413      	add	r3, r2
 800f9ee:	00db      	lsls	r3, r3, #3
 800f9f0:	4ac5      	ldr	r2, [pc, #788]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800f9f2:	4413      	add	r3, r2
 800f9f4:	4ac6      	ldr	r2, [pc, #792]	; (800fd10 <UpdateSIGNALSNames+0x358>)
 800f9f6:	6810      	ldr	r0, [r2, #0]
 800f9f8:	6018      	str	r0, [r3, #0]
 800f9fa:	8892      	ldrh	r2, [r2, #4]
 800f9fc:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800f9fe:	79fb      	ldrb	r3, [r7, #7]
 800fa00:	1c5a      	adds	r2, r3, #1
 800fa02:	71fa      	strb	r2, [r7, #7]
 800fa04:	461a      	mov	r2, r3
 800fa06:	4613      	mov	r3, r2
 800fa08:	009b      	lsls	r3, r3, #2
 800fa0a:	4413      	add	r3, r2
 800fa0c:	00db      	lsls	r3, r3, #3
 800fa0e:	4abe      	ldr	r2, [pc, #760]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fa10:	4413      	add	r3, r2
 800fa12:	4ac0      	ldr	r2, [pc, #768]	; (800fd14 <UpdateSIGNALSNames+0x35c>)
 800fa14:	6810      	ldr	r0, [r2, #0]
 800fa16:	6018      	str	r0, [r3, #0]
 800fa18:	8892      	ldrh	r2, [r2, #4]
 800fa1a:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800fa1c:	79fb      	ldrb	r3, [r7, #7]
 800fa1e:	1c5a      	adds	r2, r3, #1
 800fa20:	71fa      	strb	r2, [r7, #7]
 800fa22:	461a      	mov	r2, r3
 800fa24:	4613      	mov	r3, r2
 800fa26:	009b      	lsls	r3, r3, #2
 800fa28:	4413      	add	r3, r2
 800fa2a:	00db      	lsls	r3, r3, #3
 800fa2c:	4ab6      	ldr	r2, [pc, #728]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fa2e:	4413      	add	r3, r2
 800fa30:	4ab9      	ldr	r2, [pc, #740]	; (800fd18 <UpdateSIGNALSNames+0x360>)
 800fa32:	6810      	ldr	r0, [r2, #0]
 800fa34:	6018      	str	r0, [r3, #0]
 800fa36:	8892      	ldrh	r2, [r2, #4]
 800fa38:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800fa3a:	79fb      	ldrb	r3, [r7, #7]
 800fa3c:	1c5a      	adds	r2, r3, #1
 800fa3e:	71fa      	strb	r2, [r7, #7]
 800fa40:	461a      	mov	r2, r3
 800fa42:	4613      	mov	r3, r2
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	4413      	add	r3, r2
 800fa48:	00db      	lsls	r3, r3, #3
 800fa4a:	4aaf      	ldr	r2, [pc, #700]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fa4c:	4413      	add	r3, r2
 800fa4e:	4ab3      	ldr	r2, [pc, #716]	; (800fd1c <UpdateSIGNALSNames+0x364>)
 800fa50:	6810      	ldr	r0, [r2, #0]
 800fa52:	6018      	str	r0, [r3, #0]
 800fa54:	8892      	ldrh	r2, [r2, #4]
 800fa56:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800fa58:	79fb      	ldrb	r3, [r7, #7]
 800fa5a:	1c5a      	adds	r2, r3, #1
 800fa5c:	71fa      	strb	r2, [r7, #7]
 800fa5e:	461a      	mov	r2, r3
 800fa60:	4613      	mov	r3, r2
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	4413      	add	r3, r2
 800fa66:	00db      	lsls	r3, r3, #3
 800fa68:	4aa7      	ldr	r2, [pc, #668]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fa6a:	4413      	add	r3, r2
 800fa6c:	4aac      	ldr	r2, [pc, #688]	; (800fd20 <UpdateSIGNALSNames+0x368>)
 800fa6e:	6810      	ldr	r0, [r2, #0]
 800fa70:	6018      	str	r0, [r3, #0]
 800fa72:	8891      	ldrh	r1, [r2, #4]
 800fa74:	7992      	ldrb	r2, [r2, #6]
 800fa76:	8099      	strh	r1, [r3, #4]
 800fa78:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800fa7a:	79fb      	ldrb	r3, [r7, #7]
 800fa7c:	1c5a      	adds	r2, r3, #1
 800fa7e:	71fa      	strb	r2, [r7, #7]
 800fa80:	461a      	mov	r2, r3
 800fa82:	4613      	mov	r3, r2
 800fa84:	009b      	lsls	r3, r3, #2
 800fa86:	4413      	add	r3, r2
 800fa88:	00db      	lsls	r3, r3, #3
 800fa8a:	4a9f      	ldr	r2, [pc, #636]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fa8c:	4413      	add	r3, r2
 800fa8e:	4aa5      	ldr	r2, [pc, #660]	; (800fd24 <UpdateSIGNALSNames+0x36c>)
 800fa90:	6810      	ldr	r0, [r2, #0]
 800fa92:	6018      	str	r0, [r3, #0]
 800fa94:	8891      	ldrh	r1, [r2, #4]
 800fa96:	7992      	ldrb	r2, [r2, #6]
 800fa98:	8099      	strh	r1, [r3, #4]
 800fa9a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800fa9c:	79fb      	ldrb	r3, [r7, #7]
 800fa9e:	1c5a      	adds	r2, r3, #1
 800faa0:	71fa      	strb	r2, [r7, #7]
 800faa2:	461a      	mov	r2, r3
 800faa4:	4613      	mov	r3, r2
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	4413      	add	r3, r2
 800faaa:	00db      	lsls	r3, r3, #3
 800faac:	4a96      	ldr	r2, [pc, #600]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800faae:	4413      	add	r3, r2
 800fab0:	4a9d      	ldr	r2, [pc, #628]	; (800fd28 <UpdateSIGNALSNames+0x370>)
 800fab2:	6810      	ldr	r0, [r2, #0]
 800fab4:	6018      	str	r0, [r3, #0]
 800fab6:	7912      	ldrb	r2, [r2, #4]
 800fab8:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800faba:	79fb      	ldrb	r3, [r7, #7]
 800fabc:	1c5a      	adds	r2, r3, #1
 800fabe:	71fa      	strb	r2, [r7, #7]
 800fac0:	461a      	mov	r2, r3
 800fac2:	4613      	mov	r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	4413      	add	r3, r2
 800fac8:	00db      	lsls	r3, r3, #3
 800faca:	4a8f      	ldr	r2, [pc, #572]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800facc:	4413      	add	r3, r2
 800face:	4997      	ldr	r1, [pc, #604]	; (800fd2c <UpdateSIGNALSNames+0x374>)
 800fad0:	461a      	mov	r2, r3
 800fad2:	460b      	mov	r3, r1
 800fad4:	cb03      	ldmia	r3!, {r0, r1}
 800fad6:	6010      	str	r0, [r2, #0]
 800fad8:	6051      	str	r1, [r2, #4]
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800fade:	79fb      	ldrb	r3, [r7, #7]
 800fae0:	1c5a      	adds	r2, r3, #1
 800fae2:	71fa      	strb	r2, [r7, #7]
 800fae4:	461a      	mov	r2, r3
 800fae6:	4613      	mov	r3, r2
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	4413      	add	r3, r2
 800faec:	00db      	lsls	r3, r3, #3
 800faee:	4a86      	ldr	r2, [pc, #536]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800faf0:	4413      	add	r3, r2
 800faf2:	4a8f      	ldr	r2, [pc, #572]	; (800fd30 <UpdateSIGNALSNames+0x378>)
 800faf4:	6810      	ldr	r0, [r2, #0]
 800faf6:	6018      	str	r0, [r3, #0]
 800faf8:	8892      	ldrh	r2, [r2, #4]
 800fafa:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800fafc:	79fb      	ldrb	r3, [r7, #7]
 800fafe:	1c5a      	adds	r2, r3, #1
 800fb00:	71fa      	strb	r2, [r7, #7]
 800fb02:	461a      	mov	r2, r3
 800fb04:	4613      	mov	r3, r2
 800fb06:	009b      	lsls	r3, r3, #2
 800fb08:	4413      	add	r3, r2
 800fb0a:	00db      	lsls	r3, r3, #3
 800fb0c:	4a7e      	ldr	r2, [pc, #504]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fb0e:	4413      	add	r3, r2
 800fb10:	4988      	ldr	r1, [pc, #544]	; (800fd34 <UpdateSIGNALSNames+0x37c>)
 800fb12:	461a      	mov	r2, r3
 800fb14:	460b      	mov	r3, r1
 800fb16:	cb03      	ldmia	r3!, {r0, r1}
 800fb18:	6010      	str	r0, [r2, #0]
 800fb1a:	6051      	str	r1, [r2, #4]
 800fb1c:	881b      	ldrh	r3, [r3, #0]
 800fb1e:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800fb20:	79fb      	ldrb	r3, [r7, #7]
 800fb22:	1c5a      	adds	r2, r3, #1
 800fb24:	71fa      	strb	r2, [r7, #7]
 800fb26:	461a      	mov	r2, r3
 800fb28:	4613      	mov	r3, r2
 800fb2a:	009b      	lsls	r3, r3, #2
 800fb2c:	4413      	add	r3, r2
 800fb2e:	00db      	lsls	r3, r3, #3
 800fb30:	4a75      	ldr	r2, [pc, #468]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fb32:	4413      	add	r3, r2
 800fb34:	4980      	ldr	r1, [pc, #512]	; (800fd38 <UpdateSIGNALSNames+0x380>)
 800fb36:	461a      	mov	r2, r3
 800fb38:	460b      	mov	r3, r1
 800fb3a:	cb03      	ldmia	r3!, {r0, r1}
 800fb3c:	6010      	str	r0, [r2, #0]
 800fb3e:	6051      	str	r1, [r2, #4]
 800fb40:	8819      	ldrh	r1, [r3, #0]
 800fb42:	789b      	ldrb	r3, [r3, #2]
 800fb44:	8111      	strh	r1, [r2, #8]
 800fb46:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800fb48:	79fb      	ldrb	r3, [r7, #7]
 800fb4a:	1c5a      	adds	r2, r3, #1
 800fb4c:	71fa      	strb	r2, [r7, #7]
 800fb4e:	461a      	mov	r2, r3
 800fb50:	4613      	mov	r3, r2
 800fb52:	009b      	lsls	r3, r3, #2
 800fb54:	4413      	add	r3, r2
 800fb56:	00db      	lsls	r3, r3, #3
 800fb58:	4a6b      	ldr	r2, [pc, #428]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fb5a:	4413      	add	r3, r2
 800fb5c:	4977      	ldr	r1, [pc, #476]	; (800fd3c <UpdateSIGNALSNames+0x384>)
 800fb5e:	461a      	mov	r2, r3
 800fb60:	460b      	mov	r3, r1
 800fb62:	cb03      	ldmia	r3!, {r0, r1}
 800fb64:	6010      	str	r0, [r2, #0]
 800fb66:	6051      	str	r1, [r2, #4]
 800fb68:	881b      	ldrh	r3, [r3, #0]
 800fb6a:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800fb6c:	79fb      	ldrb	r3, [r7, #7]
 800fb6e:	1c5a      	adds	r2, r3, #1
 800fb70:	71fa      	strb	r2, [r7, #7]
 800fb72:	461a      	mov	r2, r3
 800fb74:	4613      	mov	r3, r2
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	4413      	add	r3, r2
 800fb7a:	00db      	lsls	r3, r3, #3
 800fb7c:	4a62      	ldr	r2, [pc, #392]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fb7e:	4413      	add	r3, r2
 800fb80:	496f      	ldr	r1, [pc, #444]	; (800fd40 <UpdateSIGNALSNames+0x388>)
 800fb82:	461a      	mov	r2, r3
 800fb84:	460b      	mov	r3, r1
 800fb86:	cb03      	ldmia	r3!, {r0, r1}
 800fb88:	6010      	str	r0, [r2, #0]
 800fb8a:	6051      	str	r1, [r2, #4]
 800fb8c:	881b      	ldrh	r3, [r3, #0]
 800fb8e:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800fb90:	79fb      	ldrb	r3, [r7, #7]
 800fb92:	1c5a      	adds	r2, r3, #1
 800fb94:	71fa      	strb	r2, [r7, #7]
 800fb96:	461a      	mov	r2, r3
 800fb98:	4613      	mov	r3, r2
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	4413      	add	r3, r2
 800fb9e:	00db      	lsls	r3, r3, #3
 800fba0:	4a59      	ldr	r2, [pc, #356]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fba2:	4413      	add	r3, r2
 800fba4:	4967      	ldr	r1, [pc, #412]	; (800fd44 <UpdateSIGNALSNames+0x38c>)
 800fba6:	461a      	mov	r2, r3
 800fba8:	460b      	mov	r3, r1
 800fbaa:	cb03      	ldmia	r3!, {r0, r1}
 800fbac:	6010      	str	r0, [r2, #0]
 800fbae:	6051      	str	r1, [r2, #4]
 800fbb0:	8819      	ldrh	r1, [r3, #0]
 800fbb2:	789b      	ldrb	r3, [r3, #2]
 800fbb4:	8111      	strh	r1, [r2, #8]
 800fbb6:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800fbb8:	79fb      	ldrb	r3, [r7, #7]
 800fbba:	1c5a      	adds	r2, r3, #1
 800fbbc:	71fa      	strb	r2, [r7, #7]
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	4613      	mov	r3, r2
 800fbc2:	009b      	lsls	r3, r3, #2
 800fbc4:	4413      	add	r3, r2
 800fbc6:	00db      	lsls	r3, r3, #3
 800fbc8:	4a4f      	ldr	r2, [pc, #316]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fbca:	4413      	add	r3, r2
 800fbcc:	495e      	ldr	r1, [pc, #376]	; (800fd48 <UpdateSIGNALSNames+0x390>)
 800fbce:	461a      	mov	r2, r3
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	cb03      	ldmia	r3!, {r0, r1}
 800fbd4:	6010      	str	r0, [r2, #0]
 800fbd6:	6051      	str	r1, [r2, #4]
 800fbd8:	881b      	ldrh	r3, [r3, #0]
 800fbda:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800fbdc:	79fb      	ldrb	r3, [r7, #7]
 800fbde:	1c5a      	adds	r2, r3, #1
 800fbe0:	71fa      	strb	r2, [r7, #7]
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	4613      	mov	r3, r2
 800fbe6:	009b      	lsls	r3, r3, #2
 800fbe8:	4413      	add	r3, r2
 800fbea:	00db      	lsls	r3, r3, #3
 800fbec:	4a46      	ldr	r2, [pc, #280]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fbee:	4413      	add	r3, r2
 800fbf0:	4a56      	ldr	r2, [pc, #344]	; (800fd4c <UpdateSIGNALSNames+0x394>)
 800fbf2:	6810      	ldr	r0, [r2, #0]
 800fbf4:	6018      	str	r0, [r3, #0]
 800fbf6:	8891      	ldrh	r1, [r2, #4]
 800fbf8:	7992      	ldrb	r2, [r2, #6]
 800fbfa:	8099      	strh	r1, [r3, #4]
 800fbfc:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800fbfe:	79fb      	ldrb	r3, [r7, #7]
 800fc00:	1c5a      	adds	r2, r3, #1
 800fc02:	71fa      	strb	r2, [r7, #7]
 800fc04:	461a      	mov	r2, r3
 800fc06:	4613      	mov	r3, r2
 800fc08:	009b      	lsls	r3, r3, #2
 800fc0a:	4413      	add	r3, r2
 800fc0c:	00db      	lsls	r3, r3, #3
 800fc0e:	4a3e      	ldr	r2, [pc, #248]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fc10:	4413      	add	r3, r2
 800fc12:	4a4f      	ldr	r2, [pc, #316]	; (800fd50 <UpdateSIGNALSNames+0x398>)
 800fc14:	6810      	ldr	r0, [r2, #0]
 800fc16:	6018      	str	r0, [r3, #0]
 800fc18:	8891      	ldrh	r1, [r2, #4]
 800fc1a:	7992      	ldrb	r2, [r2, #6]
 800fc1c:	8099      	strh	r1, [r3, #4]
 800fc1e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800fc20:	79fb      	ldrb	r3, [r7, #7]
 800fc22:	1c5a      	adds	r2, r3, #1
 800fc24:	71fa      	strb	r2, [r7, #7]
 800fc26:	461a      	mov	r2, r3
 800fc28:	4613      	mov	r3, r2
 800fc2a:	009b      	lsls	r3, r3, #2
 800fc2c:	4413      	add	r3, r2
 800fc2e:	00db      	lsls	r3, r3, #3
 800fc30:	4a35      	ldr	r2, [pc, #212]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fc32:	4413      	add	r3, r2
 800fc34:	4a47      	ldr	r2, [pc, #284]	; (800fd54 <UpdateSIGNALSNames+0x39c>)
 800fc36:	6810      	ldr	r0, [r2, #0]
 800fc38:	6018      	str	r0, [r3, #0]
 800fc3a:	8891      	ldrh	r1, [r2, #4]
 800fc3c:	7992      	ldrb	r2, [r2, #6]
 800fc3e:	8099      	strh	r1, [r3, #4]
 800fc40:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800fc42:	79fb      	ldrb	r3, [r7, #7]
 800fc44:	1c5a      	adds	r2, r3, #1
 800fc46:	71fa      	strb	r2, [r7, #7]
 800fc48:	461a      	mov	r2, r3
 800fc4a:	4613      	mov	r3, r2
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	4413      	add	r3, r2
 800fc50:	00db      	lsls	r3, r3, #3
 800fc52:	4a2d      	ldr	r2, [pc, #180]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fc54:	4413      	add	r3, r2
 800fc56:	4a40      	ldr	r2, [pc, #256]	; (800fd58 <UpdateSIGNALSNames+0x3a0>)
 800fc58:	6810      	ldr	r0, [r2, #0]
 800fc5a:	6018      	str	r0, [r3, #0]
 800fc5c:	8891      	ldrh	r1, [r2, #4]
 800fc5e:	7992      	ldrb	r2, [r2, #6]
 800fc60:	8099      	strh	r1, [r3, #4]
 800fc62:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800fc64:	79fb      	ldrb	r3, [r7, #7]
 800fc66:	1c5a      	adds	r2, r3, #1
 800fc68:	71fa      	strb	r2, [r7, #7]
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	4613      	mov	r3, r2
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	4413      	add	r3, r2
 800fc72:	00db      	lsls	r3, r3, #3
 800fc74:	4a24      	ldr	r2, [pc, #144]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fc76:	4413      	add	r3, r2
 800fc78:	4938      	ldr	r1, [pc, #224]	; (800fd5c <UpdateSIGNALSNames+0x3a4>)
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	cb03      	ldmia	r3!, {r0, r1}
 800fc80:	6010      	str	r0, [r2, #0]
 800fc82:	6051      	str	r1, [r2, #4]
 800fc84:	8819      	ldrh	r1, [r3, #0]
 800fc86:	789b      	ldrb	r3, [r3, #2]
 800fc88:	8111      	strh	r1, [r2, #8]
 800fc8a:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800fc8c:	79fb      	ldrb	r3, [r7, #7]
 800fc8e:	1c5a      	adds	r2, r3, #1
 800fc90:	71fa      	strb	r2, [r7, #7]
 800fc92:	461a      	mov	r2, r3
 800fc94:	4613      	mov	r3, r2
 800fc96:	009b      	lsls	r3, r3, #2
 800fc98:	4413      	add	r3, r2
 800fc9a:	00db      	lsls	r3, r3, #3
 800fc9c:	4a1a      	ldr	r2, [pc, #104]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fc9e:	4413      	add	r3, r2
 800fca0:	4a2f      	ldr	r2, [pc, #188]	; (800fd60 <UpdateSIGNALSNames+0x3a8>)
 800fca2:	6810      	ldr	r0, [r2, #0]
 800fca4:	6018      	str	r0, [r3, #0]
 800fca6:	8891      	ldrh	r1, [r2, #4]
 800fca8:	7992      	ldrb	r2, [r2, #6]
 800fcaa:	8099      	strh	r1, [r3, #4]
 800fcac:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800fcae:	79fb      	ldrb	r3, [r7, #7]
 800fcb0:	1c5a      	adds	r2, r3, #1
 800fcb2:	71fa      	strb	r2, [r7, #7]
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	4413      	add	r3, r2
 800fcbc:	00db      	lsls	r3, r3, #3
 800fcbe:	4a12      	ldr	r2, [pc, #72]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fcc0:	4413      	add	r3, r2
 800fcc2:	4a28      	ldr	r2, [pc, #160]	; (800fd64 <UpdateSIGNALSNames+0x3ac>)
 800fcc4:	6810      	ldr	r0, [r2, #0]
 800fcc6:	6018      	str	r0, [r3, #0]
 800fcc8:	8891      	ldrh	r1, [r2, #4]
 800fcca:	7992      	ldrb	r2, [r2, #6]
 800fccc:	8099      	strh	r1, [r3, #4]
 800fcce:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800fcd0:	79fb      	ldrb	r3, [r7, #7]
 800fcd2:	1c5a      	adds	r2, r3, #1
 800fcd4:	71fa      	strb	r2, [r7, #7]
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	4613      	mov	r3, r2
 800fcda:	009b      	lsls	r3, r3, #2
 800fcdc:	4413      	add	r3, r2
 800fcde:	00db      	lsls	r3, r3, #3
 800fce0:	4a09      	ldr	r2, [pc, #36]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fce2:	4413      	add	r3, r2
 800fce4:	4a20      	ldr	r2, [pc, #128]	; (800fd68 <UpdateSIGNALSNames+0x3b0>)
 800fce6:	6810      	ldr	r0, [r2, #0]
 800fce8:	6018      	str	r0, [r3, #0]
 800fcea:	8891      	ldrh	r1, [r2, #4]
 800fcec:	7992      	ldrb	r2, [r2, #6]
 800fcee:	8099      	strh	r1, [r3, #4]
 800fcf0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800fcf2:	79fb      	ldrb	r3, [r7, #7]
 800fcf4:	1c5a      	adds	r2, r3, #1
 800fcf6:	71fa      	strb	r2, [r7, #7]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	4613      	mov	r3, r2
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	4413      	add	r3, r2
 800fd00:	00db      	lsls	r3, r3, #3
 800fd02:	4a01      	ldr	r2, [pc, #4]	; (800fd08 <UpdateSIGNALSNames+0x350>)
 800fd04:	4413      	add	r3, r2
 800fd06:	e031      	b.n	800fd6c <UpdateSIGNALSNames+0x3b4>
 800fd08:	200054c4 	.word	0x200054c4
 800fd0c:	0802b06c 	.word	0x0802b06c
 800fd10:	0802b074 	.word	0x0802b074
 800fd14:	0802b07c 	.word	0x0802b07c
 800fd18:	0802b084 	.word	0x0802b084
 800fd1c:	0802b08c 	.word	0x0802b08c
 800fd20:	0802b094 	.word	0x0802b094
 800fd24:	0802b09c 	.word	0x0802b09c
 800fd28:	0802b0a4 	.word	0x0802b0a4
 800fd2c:	0802b0ac 	.word	0x0802b0ac
 800fd30:	0802b0b8 	.word	0x0802b0b8
 800fd34:	0802b0c0 	.word	0x0802b0c0
 800fd38:	0802b0cc 	.word	0x0802b0cc
 800fd3c:	0802b0d8 	.word	0x0802b0d8
 800fd40:	0802b0e4 	.word	0x0802b0e4
 800fd44:	0802b0f0 	.word	0x0802b0f0
 800fd48:	0802b0fc 	.word	0x0802b0fc
 800fd4c:	0802b108 	.word	0x0802b108
 800fd50:	0802b110 	.word	0x0802b110
 800fd54:	0802b118 	.word	0x0802b118
 800fd58:	0802b120 	.word	0x0802b120
 800fd5c:	0802b128 	.word	0x0802b128
 800fd60:	0802b134 	.word	0x0802b134
 800fd64:	0802b13c 	.word	0x0802b13c
 800fd68:	0802b144 	.word	0x0802b144
 800fd6c:	4acd      	ldr	r2, [pc, #820]	; (80100a4 <UpdateSIGNALSNames+0x6ec>)
 800fd6e:	6810      	ldr	r0, [r2, #0]
 800fd70:	6018      	str	r0, [r3, #0]
 800fd72:	8891      	ldrh	r1, [r2, #4]
 800fd74:	7992      	ldrb	r2, [r2, #6]
 800fd76:	8099      	strh	r1, [r3, #4]
 800fd78:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800fd7a:	79fb      	ldrb	r3, [r7, #7]
 800fd7c:	1c5a      	adds	r2, r3, #1
 800fd7e:	71fa      	strb	r2, [r7, #7]
 800fd80:	461a      	mov	r2, r3
 800fd82:	4613      	mov	r3, r2
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	4413      	add	r3, r2
 800fd88:	00db      	lsls	r3, r3, #3
 800fd8a:	4ac7      	ldr	r2, [pc, #796]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800fd8c:	4413      	add	r3, r2
 800fd8e:	4ac7      	ldr	r2, [pc, #796]	; (80100ac <UpdateSIGNALSNames+0x6f4>)
 800fd90:	6810      	ldr	r0, [r2, #0]
 800fd92:	6018      	str	r0, [r3, #0]
 800fd94:	8891      	ldrh	r1, [r2, #4]
 800fd96:	7992      	ldrb	r2, [r2, #6]
 800fd98:	8099      	strh	r1, [r3, #4]
 800fd9a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800fd9c:	79fb      	ldrb	r3, [r7, #7]
 800fd9e:	1c5a      	adds	r2, r3, #1
 800fda0:	71fa      	strb	r2, [r7, #7]
 800fda2:	461a      	mov	r2, r3
 800fda4:	4613      	mov	r3, r2
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	4413      	add	r3, r2
 800fdaa:	00db      	lsls	r3, r3, #3
 800fdac:	4abe      	ldr	r2, [pc, #760]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800fdae:	4413      	add	r3, r2
 800fdb0:	4abf      	ldr	r2, [pc, #764]	; (80100b0 <UpdateSIGNALSNames+0x6f8>)
 800fdb2:	6810      	ldr	r0, [r2, #0]
 800fdb4:	6018      	str	r0, [r3, #0]
 800fdb6:	8891      	ldrh	r1, [r2, #4]
 800fdb8:	7992      	ldrb	r2, [r2, #6]
 800fdba:	8099      	strh	r1, [r3, #4]
 800fdbc:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800fdbe:	79fb      	ldrb	r3, [r7, #7]
 800fdc0:	1c5a      	adds	r2, r3, #1
 800fdc2:	71fa      	strb	r2, [r7, #7]
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	4613      	mov	r3, r2
 800fdc8:	009b      	lsls	r3, r3, #2
 800fdca:	4413      	add	r3, r2
 800fdcc:	00db      	lsls	r3, r3, #3
 800fdce:	4ab6      	ldr	r2, [pc, #728]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800fdd0:	4413      	add	r3, r2
 800fdd2:	4ab8      	ldr	r2, [pc, #736]	; (80100b4 <UpdateSIGNALSNames+0x6fc>)
 800fdd4:	6810      	ldr	r0, [r2, #0]
 800fdd6:	6018      	str	r0, [r3, #0]
 800fdd8:	8891      	ldrh	r1, [r2, #4]
 800fdda:	7992      	ldrb	r2, [r2, #6]
 800fddc:	8099      	strh	r1, [r3, #4]
 800fdde:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800fde0:	79fb      	ldrb	r3, [r7, #7]
 800fde2:	1c5a      	adds	r2, r3, #1
 800fde4:	71fa      	strb	r2, [r7, #7]
 800fde6:	461a      	mov	r2, r3
 800fde8:	4613      	mov	r3, r2
 800fdea:	009b      	lsls	r3, r3, #2
 800fdec:	4413      	add	r3, r2
 800fdee:	00db      	lsls	r3, r3, #3
 800fdf0:	4aad      	ldr	r2, [pc, #692]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800fdf2:	4413      	add	r3, r2
 800fdf4:	49b0      	ldr	r1, [pc, #704]	; (80100b8 <UpdateSIGNALSNames+0x700>)
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	460b      	mov	r3, r1
 800fdfa:	cb03      	ldmia	r3!, {r0, r1}
 800fdfc:	6010      	str	r0, [r2, #0]
 800fdfe:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800fe00:	79fb      	ldrb	r3, [r7, #7]
 800fe02:	1c5a      	adds	r2, r3, #1
 800fe04:	71fa      	strb	r2, [r7, #7]
 800fe06:	461a      	mov	r2, r3
 800fe08:	4613      	mov	r3, r2
 800fe0a:	009b      	lsls	r3, r3, #2
 800fe0c:	4413      	add	r3, r2
 800fe0e:	00db      	lsls	r3, r3, #3
 800fe10:	4aa5      	ldr	r2, [pc, #660]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800fe12:	4413      	add	r3, r2
 800fe14:	49a9      	ldr	r1, [pc, #676]	; (80100bc <UpdateSIGNALSNames+0x704>)
 800fe16:	461a      	mov	r2, r3
 800fe18:	460b      	mov	r3, r1
 800fe1a:	cb03      	ldmia	r3!, {r0, r1}
 800fe1c:	6010      	str	r0, [r2, #0]
 800fe1e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800fe20:	79fb      	ldrb	r3, [r7, #7]
 800fe22:	1c5a      	adds	r2, r3, #1
 800fe24:	71fa      	strb	r2, [r7, #7]
 800fe26:	461a      	mov	r2, r3
 800fe28:	4613      	mov	r3, r2
 800fe2a:	009b      	lsls	r3, r3, #2
 800fe2c:	4413      	add	r3, r2
 800fe2e:	00db      	lsls	r3, r3, #3
 800fe30:	4a9d      	ldr	r2, [pc, #628]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800fe32:	4413      	add	r3, r2
 800fe34:	49a2      	ldr	r1, [pc, #648]	; (80100c0 <UpdateSIGNALSNames+0x708>)
 800fe36:	461a      	mov	r2, r3
 800fe38:	460b      	mov	r3, r1
 800fe3a:	cb03      	ldmia	r3!, {r0, r1}
 800fe3c:	6010      	str	r0, [r2, #0]
 800fe3e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800fe40:	79fb      	ldrb	r3, [r7, #7]
 800fe42:	1c5a      	adds	r2, r3, #1
 800fe44:	71fa      	strb	r2, [r7, #7]
 800fe46:	461a      	mov	r2, r3
 800fe48:	4613      	mov	r3, r2
 800fe4a:	009b      	lsls	r3, r3, #2
 800fe4c:	4413      	add	r3, r2
 800fe4e:	00db      	lsls	r3, r3, #3
 800fe50:	4a95      	ldr	r2, [pc, #596]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800fe52:	4413      	add	r3, r2
 800fe54:	499b      	ldr	r1, [pc, #620]	; (80100c4 <UpdateSIGNALSNames+0x70c>)
 800fe56:	461a      	mov	r2, r3
 800fe58:	460b      	mov	r3, r1
 800fe5a:	cb03      	ldmia	r3!, {r0, r1}
 800fe5c:	6010      	str	r0, [r2, #0]
 800fe5e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800fe60:	79fb      	ldrb	r3, [r7, #7]
 800fe62:	1c5a      	adds	r2, r3, #1
 800fe64:	71fa      	strb	r2, [r7, #7]
 800fe66:	461a      	mov	r2, r3
 800fe68:	4613      	mov	r3, r2
 800fe6a:	009b      	lsls	r3, r3, #2
 800fe6c:	4413      	add	r3, r2
 800fe6e:	00db      	lsls	r3, r3, #3
 800fe70:	4a8d      	ldr	r2, [pc, #564]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800fe72:	4413      	add	r3, r2
 800fe74:	4994      	ldr	r1, [pc, #592]	; (80100c8 <UpdateSIGNALSNames+0x710>)
 800fe76:	461a      	mov	r2, r3
 800fe78:	460b      	mov	r3, r1
 800fe7a:	cb03      	ldmia	r3!, {r0, r1}
 800fe7c:	6010      	str	r0, [r2, #0]
 800fe7e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800fe80:	79fb      	ldrb	r3, [r7, #7]
 800fe82:	1c5a      	adds	r2, r3, #1
 800fe84:	71fa      	strb	r2, [r7, #7]
 800fe86:	461a      	mov	r2, r3
 800fe88:	4613      	mov	r3, r2
 800fe8a:	009b      	lsls	r3, r3, #2
 800fe8c:	4413      	add	r3, r2
 800fe8e:	00db      	lsls	r3, r3, #3
 800fe90:	4a85      	ldr	r2, [pc, #532]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800fe92:	4413      	add	r3, r2
 800fe94:	498d      	ldr	r1, [pc, #564]	; (80100cc <UpdateSIGNALSNames+0x714>)
 800fe96:	461a      	mov	r2, r3
 800fe98:	460b      	mov	r3, r1
 800fe9a:	cb03      	ldmia	r3!, {r0, r1}
 800fe9c:	6010      	str	r0, [r2, #0]
 800fe9e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800fea0:	79fb      	ldrb	r3, [r7, #7]
 800fea2:	1c5a      	adds	r2, r3, #1
 800fea4:	71fa      	strb	r2, [r7, #7]
 800fea6:	461a      	mov	r2, r3
 800fea8:	4613      	mov	r3, r2
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	4413      	add	r3, r2
 800feae:	00db      	lsls	r3, r3, #3
 800feb0:	4a7d      	ldr	r2, [pc, #500]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800feb2:	4413      	add	r3, r2
 800feb4:	4986      	ldr	r1, [pc, #536]	; (80100d0 <UpdateSIGNALSNames+0x718>)
 800feb6:	461a      	mov	r2, r3
 800feb8:	460b      	mov	r3, r1
 800feba:	cb03      	ldmia	r3!, {r0, r1}
 800febc:	6010      	str	r0, [r2, #0]
 800febe:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800fec0:	79fb      	ldrb	r3, [r7, #7]
 800fec2:	1c5a      	adds	r2, r3, #1
 800fec4:	71fa      	strb	r2, [r7, #7]
 800fec6:	461a      	mov	r2, r3
 800fec8:	4613      	mov	r3, r2
 800feca:	009b      	lsls	r3, r3, #2
 800fecc:	4413      	add	r3, r2
 800fece:	00db      	lsls	r3, r3, #3
 800fed0:	4a75      	ldr	r2, [pc, #468]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800fed2:	4413      	add	r3, r2
 800fed4:	497f      	ldr	r1, [pc, #508]	; (80100d4 <UpdateSIGNALSNames+0x71c>)
 800fed6:	461a      	mov	r2, r3
 800fed8:	460b      	mov	r3, r1
 800feda:	cb03      	ldmia	r3!, {r0, r1}
 800fedc:	6010      	str	r0, [r2, #0]
 800fede:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800fee0:	79fb      	ldrb	r3, [r7, #7]
 800fee2:	1c5a      	adds	r2, r3, #1
 800fee4:	71fa      	strb	r2, [r7, #7]
 800fee6:	461a      	mov	r2, r3
 800fee8:	4613      	mov	r3, r2
 800feea:	009b      	lsls	r3, r3, #2
 800feec:	4413      	add	r3, r2
 800feee:	00db      	lsls	r3, r3, #3
 800fef0:	4a6d      	ldr	r2, [pc, #436]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800fef2:	4413      	add	r3, r2
 800fef4:	4978      	ldr	r1, [pc, #480]	; (80100d8 <UpdateSIGNALSNames+0x720>)
 800fef6:	461a      	mov	r2, r3
 800fef8:	460b      	mov	r3, r1
 800fefa:	cb03      	ldmia	r3!, {r0, r1}
 800fefc:	6010      	str	r0, [r2, #0]
 800fefe:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800ff00:	79fb      	ldrb	r3, [r7, #7]
 800ff02:	1c5a      	adds	r2, r3, #1
 800ff04:	71fa      	strb	r2, [r7, #7]
 800ff06:	461a      	mov	r2, r3
 800ff08:	4613      	mov	r3, r2
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	4413      	add	r3, r2
 800ff0e:	00db      	lsls	r3, r3, #3
 800ff10:	4a65      	ldr	r2, [pc, #404]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800ff12:	4413      	add	r3, r2
 800ff14:	4971      	ldr	r1, [pc, #452]	; (80100dc <UpdateSIGNALSNames+0x724>)
 800ff16:	461a      	mov	r2, r3
 800ff18:	460b      	mov	r3, r1
 800ff1a:	cb03      	ldmia	r3!, {r0, r1}
 800ff1c:	6010      	str	r0, [r2, #0]
 800ff1e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800ff20:	79fb      	ldrb	r3, [r7, #7]
 800ff22:	1c5a      	adds	r2, r3, #1
 800ff24:	71fa      	strb	r2, [r7, #7]
 800ff26:	461a      	mov	r2, r3
 800ff28:	4613      	mov	r3, r2
 800ff2a:	009b      	lsls	r3, r3, #2
 800ff2c:	4413      	add	r3, r2
 800ff2e:	00db      	lsls	r3, r3, #3
 800ff30:	4a5d      	ldr	r2, [pc, #372]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800ff32:	4413      	add	r3, r2
 800ff34:	496a      	ldr	r1, [pc, #424]	; (80100e0 <UpdateSIGNALSNames+0x728>)
 800ff36:	461a      	mov	r2, r3
 800ff38:	460b      	mov	r3, r1
 800ff3a:	cb03      	ldmia	r3!, {r0, r1}
 800ff3c:	6010      	str	r0, [r2, #0]
 800ff3e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800ff40:	79fb      	ldrb	r3, [r7, #7]
 800ff42:	1c5a      	adds	r2, r3, #1
 800ff44:	71fa      	strb	r2, [r7, #7]
 800ff46:	461a      	mov	r2, r3
 800ff48:	4613      	mov	r3, r2
 800ff4a:	009b      	lsls	r3, r3, #2
 800ff4c:	4413      	add	r3, r2
 800ff4e:	00db      	lsls	r3, r3, #3
 800ff50:	4a55      	ldr	r2, [pc, #340]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800ff52:	4413      	add	r3, r2
 800ff54:	4963      	ldr	r1, [pc, #396]	; (80100e4 <UpdateSIGNALSNames+0x72c>)
 800ff56:	461a      	mov	r2, r3
 800ff58:	460b      	mov	r3, r1
 800ff5a:	cb03      	ldmia	r3!, {r0, r1}
 800ff5c:	6010      	str	r0, [r2, #0]
 800ff5e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800ff60:	79fb      	ldrb	r3, [r7, #7]
 800ff62:	1c5a      	adds	r2, r3, #1
 800ff64:	71fa      	strb	r2, [r7, #7]
 800ff66:	461a      	mov	r2, r3
 800ff68:	4613      	mov	r3, r2
 800ff6a:	009b      	lsls	r3, r3, #2
 800ff6c:	4413      	add	r3, r2
 800ff6e:	00db      	lsls	r3, r3, #3
 800ff70:	4a4d      	ldr	r2, [pc, #308]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800ff72:	4413      	add	r3, r2
 800ff74:	495c      	ldr	r1, [pc, #368]	; (80100e8 <UpdateSIGNALSNames+0x730>)
 800ff76:	461a      	mov	r2, r3
 800ff78:	460b      	mov	r3, r1
 800ff7a:	cb03      	ldmia	r3!, {r0, r1}
 800ff7c:	6010      	str	r0, [r2, #0]
 800ff7e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800ff80:	79fb      	ldrb	r3, [r7, #7]
 800ff82:	1c5a      	adds	r2, r3, #1
 800ff84:	71fa      	strb	r2, [r7, #7]
 800ff86:	461a      	mov	r2, r3
 800ff88:	4613      	mov	r3, r2
 800ff8a:	009b      	lsls	r3, r3, #2
 800ff8c:	4413      	add	r3, r2
 800ff8e:	00db      	lsls	r3, r3, #3
 800ff90:	4a45      	ldr	r2, [pc, #276]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800ff92:	4413      	add	r3, r2
 800ff94:	4a55      	ldr	r2, [pc, #340]	; (80100ec <UpdateSIGNALSNames+0x734>)
 800ff96:	461c      	mov	r4, r3
 800ff98:	4613      	mov	r3, r2
 800ff9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff9c:	6020      	str	r0, [r4, #0]
 800ff9e:	6061      	str	r1, [r4, #4]
 800ffa0:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800ffa2:	79fb      	ldrb	r3, [r7, #7]
 800ffa4:	1c5a      	adds	r2, r3, #1
 800ffa6:	71fa      	strb	r2, [r7, #7]
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	4613      	mov	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	4413      	add	r3, r2
 800ffb0:	00db      	lsls	r3, r3, #3
 800ffb2:	4a3d      	ldr	r2, [pc, #244]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800ffb4:	4413      	add	r3, r2
 800ffb6:	494e      	ldr	r1, [pc, #312]	; (80100f0 <UpdateSIGNALSNames+0x738>)
 800ffb8:	461a      	mov	r2, r3
 800ffba:	460b      	mov	r3, r1
 800ffbc:	cb03      	ldmia	r3!, {r0, r1}
 800ffbe:	6010      	str	r0, [r2, #0]
 800ffc0:	6051      	str	r1, [r2, #4]
 800ffc2:	8819      	ldrh	r1, [r3, #0]
 800ffc4:	789b      	ldrb	r3, [r3, #2]
 800ffc6:	8111      	strh	r1, [r2, #8]
 800ffc8:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800ffca:	79fb      	ldrb	r3, [r7, #7]
 800ffcc:	1c5a      	adds	r2, r3, #1
 800ffce:	71fa      	strb	r2, [r7, #7]
 800ffd0:	461a      	mov	r2, r3
 800ffd2:	4613      	mov	r3, r2
 800ffd4:	009b      	lsls	r3, r3, #2
 800ffd6:	4413      	add	r3, r2
 800ffd8:	00db      	lsls	r3, r3, #3
 800ffda:	4a33      	ldr	r2, [pc, #204]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800ffdc:	4413      	add	r3, r2
 800ffde:	4a45      	ldr	r2, [pc, #276]	; (80100f4 <UpdateSIGNALSNames+0x73c>)
 800ffe0:	461c      	mov	r4, r3
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ffe6:	6020      	str	r0, [r4, #0]
 800ffe8:	6061      	str	r1, [r4, #4]
 800ffea:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800ffec:	79fb      	ldrb	r3, [r7, #7]
 800ffee:	1c5a      	adds	r2, r3, #1
 800fff0:	71fa      	strb	r2, [r7, #7]
 800fff2:	461a      	mov	r2, r3
 800fff4:	4613      	mov	r3, r2
 800fff6:	009b      	lsls	r3, r3, #2
 800fff8:	4413      	add	r3, r2
 800fffa:	00db      	lsls	r3, r3, #3
 800fffc:	4a2a      	ldr	r2, [pc, #168]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 800fffe:	4413      	add	r3, r2
 8010000:	493d      	ldr	r1, [pc, #244]	; (80100f8 <UpdateSIGNALSNames+0x740>)
 8010002:	461a      	mov	r2, r3
 8010004:	460b      	mov	r3, r1
 8010006:	cb03      	ldmia	r3!, {r0, r1}
 8010008:	6010      	str	r0, [r2, #0]
 801000a:	6051      	str	r1, [r2, #4]
 801000c:	8819      	ldrh	r1, [r3, #0]
 801000e:	789b      	ldrb	r3, [r3, #2]
 8010010:	8111      	strh	r1, [r2, #8]
 8010012:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 8010014:	79fb      	ldrb	r3, [r7, #7]
 8010016:	1c5a      	adds	r2, r3, #1
 8010018:	71fa      	strb	r2, [r7, #7]
 801001a:	461a      	mov	r2, r3
 801001c:	4613      	mov	r3, r2
 801001e:	009b      	lsls	r3, r3, #2
 8010020:	4413      	add	r3, r2
 8010022:	00db      	lsls	r3, r3, #3
 8010024:	4a20      	ldr	r2, [pc, #128]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 8010026:	4413      	add	r3, r2
 8010028:	4934      	ldr	r1, [pc, #208]	; (80100fc <UpdateSIGNALSNames+0x744>)
 801002a:	461a      	mov	r2, r3
 801002c:	460b      	mov	r3, r1
 801002e:	cb03      	ldmia	r3!, {r0, r1}
 8010030:	6010      	str	r0, [r2, #0]
 8010032:	6051      	str	r1, [r2, #4]
 8010034:	8819      	ldrh	r1, [r3, #0]
 8010036:	789b      	ldrb	r3, [r3, #2]
 8010038:	8111      	strh	r1, [r2, #8]
 801003a:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 801003c:	79fb      	ldrb	r3, [r7, #7]
 801003e:	1c5a      	adds	r2, r3, #1
 8010040:	71fa      	strb	r2, [r7, #7]
 8010042:	461a      	mov	r2, r3
 8010044:	4613      	mov	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4413      	add	r3, r2
 801004a:	00db      	lsls	r3, r3, #3
 801004c:	4a16      	ldr	r2, [pc, #88]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 801004e:	4413      	add	r3, r2
 8010050:	4a2b      	ldr	r2, [pc, #172]	; (8010100 <UpdateSIGNALSNames+0x748>)
 8010052:	461c      	mov	r4, r3
 8010054:	4613      	mov	r3, r2
 8010056:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010058:	6020      	str	r0, [r4, #0]
 801005a:	6061      	str	r1, [r4, #4]
 801005c:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 801005e:	79fb      	ldrb	r3, [r7, #7]
 8010060:	1c5a      	adds	r2, r3, #1
 8010062:	71fa      	strb	r2, [r7, #7]
 8010064:	461a      	mov	r2, r3
 8010066:	4613      	mov	r3, r2
 8010068:	009b      	lsls	r3, r3, #2
 801006a:	4413      	add	r3, r2
 801006c:	00db      	lsls	r3, r3, #3
 801006e:	4a0e      	ldr	r2, [pc, #56]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 8010070:	4413      	add	r3, r2
 8010072:	4924      	ldr	r1, [pc, #144]	; (8010104 <UpdateSIGNALSNames+0x74c>)
 8010074:	461a      	mov	r2, r3
 8010076:	460b      	mov	r3, r1
 8010078:	cb03      	ldmia	r3!, {r0, r1}
 801007a:	6010      	str	r0, [r2, #0]
 801007c:	6051      	str	r1, [r2, #4]
 801007e:	8819      	ldrh	r1, [r3, #0]
 8010080:	789b      	ldrb	r3, [r3, #2]
 8010082:	8111      	strh	r1, [r2, #8]
 8010084:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 8010086:	79fb      	ldrb	r3, [r7, #7]
 8010088:	1c5a      	adds	r2, r3, #1
 801008a:	71fa      	strb	r2, [r7, #7]
 801008c:	461a      	mov	r2, r3
 801008e:	4613      	mov	r3, r2
 8010090:	009b      	lsls	r3, r3, #2
 8010092:	4413      	add	r3, r2
 8010094:	00db      	lsls	r3, r3, #3
 8010096:	4a04      	ldr	r2, [pc, #16]	; (80100a8 <UpdateSIGNALSNames+0x6f0>)
 8010098:	4413      	add	r3, r2
 801009a:	4a1b      	ldr	r2, [pc, #108]	; (8010108 <UpdateSIGNALSNames+0x750>)
 801009c:	6810      	ldr	r0, [r2, #0]
 801009e:	6018      	str	r0, [r3, #0]
 80100a0:	e034      	b.n	801010c <UpdateSIGNALSNames+0x754>
 80100a2:	bf00      	nop
 80100a4:	0802b14c 	.word	0x0802b14c
 80100a8:	200054c4 	.word	0x200054c4
 80100ac:	0802b154 	.word	0x0802b154
 80100b0:	0802b15c 	.word	0x0802b15c
 80100b4:	0802b164 	.word	0x0802b164
 80100b8:	0802b16c 	.word	0x0802b16c
 80100bc:	0802b174 	.word	0x0802b174
 80100c0:	0802b17c 	.word	0x0802b17c
 80100c4:	0802b184 	.word	0x0802b184
 80100c8:	0802b18c 	.word	0x0802b18c
 80100cc:	0802b194 	.word	0x0802b194
 80100d0:	0802b19c 	.word	0x0802b19c
 80100d4:	0802b1a4 	.word	0x0802b1a4
 80100d8:	0802b1ac 	.word	0x0802b1ac
 80100dc:	0802b1b4 	.word	0x0802b1b4
 80100e0:	0802b1bc 	.word	0x0802b1bc
 80100e4:	0802b1c4 	.word	0x0802b1c4
 80100e8:	0802b1cc 	.word	0x0802b1cc
 80100ec:	0802b1d4 	.word	0x0802b1d4
 80100f0:	0802b1e0 	.word	0x0802b1e0
 80100f4:	0802b1ec 	.word	0x0802b1ec
 80100f8:	0802b1f8 	.word	0x0802b1f8
 80100fc:	0802b204 	.word	0x0802b204
 8010100:	0802b210 	.word	0x0802b210
 8010104:	0802b21c 	.word	0x0802b21c
 8010108:	0802b228 	.word	0x0802b228
 801010c:	8891      	ldrh	r1, [r2, #4]
 801010e:	7992      	ldrb	r2, [r2, #6]
 8010110:	8099      	strh	r1, [r3, #4]
 8010112:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 8010114:	79fb      	ldrb	r3, [r7, #7]
 8010116:	1c5a      	adds	r2, r3, #1
 8010118:	71fa      	strb	r2, [r7, #7]
 801011a:	461a      	mov	r2, r3
 801011c:	4613      	mov	r3, r2
 801011e:	009b      	lsls	r3, r3, #2
 8010120:	4413      	add	r3, r2
 8010122:	00db      	lsls	r3, r3, #3
 8010124:	4a82      	ldr	r2, [pc, #520]	; (8010330 <UpdateSIGNALSNames+0x978>)
 8010126:	4413      	add	r3, r2
 8010128:	4a82      	ldr	r2, [pc, #520]	; (8010334 <UpdateSIGNALSNames+0x97c>)
 801012a:	6810      	ldr	r0, [r2, #0]
 801012c:	6018      	str	r0, [r3, #0]
 801012e:	8891      	ldrh	r1, [r2, #4]
 8010130:	7992      	ldrb	r2, [r2, #6]
 8010132:	8099      	strh	r1, [r3, #4]
 8010134:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 8010136:	79fb      	ldrb	r3, [r7, #7]
 8010138:	1c5a      	adds	r2, r3, #1
 801013a:	71fa      	strb	r2, [r7, #7]
 801013c:	461a      	mov	r2, r3
 801013e:	4613      	mov	r3, r2
 8010140:	009b      	lsls	r3, r3, #2
 8010142:	4413      	add	r3, r2
 8010144:	00db      	lsls	r3, r3, #3
 8010146:	4a7a      	ldr	r2, [pc, #488]	; (8010330 <UpdateSIGNALSNames+0x978>)
 8010148:	4413      	add	r3, r2
 801014a:	4a7b      	ldr	r2, [pc, #492]	; (8010338 <UpdateSIGNALSNames+0x980>)
 801014c:	6810      	ldr	r0, [r2, #0]
 801014e:	6018      	str	r0, [r3, #0]
 8010150:	8891      	ldrh	r1, [r2, #4]
 8010152:	7992      	ldrb	r2, [r2, #6]
 8010154:	8099      	strh	r1, [r3, #4]
 8010156:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 8010158:	79fb      	ldrb	r3, [r7, #7]
 801015a:	1c5a      	adds	r2, r3, #1
 801015c:	71fa      	strb	r2, [r7, #7]
 801015e:	461a      	mov	r2, r3
 8010160:	4613      	mov	r3, r2
 8010162:	009b      	lsls	r3, r3, #2
 8010164:	4413      	add	r3, r2
 8010166:	00db      	lsls	r3, r3, #3
 8010168:	4a71      	ldr	r2, [pc, #452]	; (8010330 <UpdateSIGNALSNames+0x978>)
 801016a:	4413      	add	r3, r2
 801016c:	4a73      	ldr	r2, [pc, #460]	; (801033c <UpdateSIGNALSNames+0x984>)
 801016e:	6810      	ldr	r0, [r2, #0]
 8010170:	6018      	str	r0, [r3, #0]
 8010172:	8891      	ldrh	r1, [r2, #4]
 8010174:	7992      	ldrb	r2, [r2, #6]
 8010176:	8099      	strh	r1, [r3, #4]
 8010178:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 801017a:	79fb      	ldrb	r3, [r7, #7]
 801017c:	1c5a      	adds	r2, r3, #1
 801017e:	71fa      	strb	r2, [r7, #7]
 8010180:	461a      	mov	r2, r3
 8010182:	4613      	mov	r3, r2
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	4413      	add	r3, r2
 8010188:	00db      	lsls	r3, r3, #3
 801018a:	4a69      	ldr	r2, [pc, #420]	; (8010330 <UpdateSIGNALSNames+0x978>)
 801018c:	4413      	add	r3, r2
 801018e:	4a6c      	ldr	r2, [pc, #432]	; (8010340 <UpdateSIGNALSNames+0x988>)
 8010190:	6810      	ldr	r0, [r2, #0]
 8010192:	6018      	str	r0, [r3, #0]
 8010194:	8891      	ldrh	r1, [r2, #4]
 8010196:	7992      	ldrb	r2, [r2, #6]
 8010198:	8099      	strh	r1, [r3, #4]
 801019a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 801019c:	79fb      	ldrb	r3, [r7, #7]
 801019e:	1c5a      	adds	r2, r3, #1
 80101a0:	71fa      	strb	r2, [r7, #7]
 80101a2:	461a      	mov	r2, r3
 80101a4:	4613      	mov	r3, r2
 80101a6:	009b      	lsls	r3, r3, #2
 80101a8:	4413      	add	r3, r2
 80101aa:	00db      	lsls	r3, r3, #3
 80101ac:	4a60      	ldr	r2, [pc, #384]	; (8010330 <UpdateSIGNALSNames+0x978>)
 80101ae:	4413      	add	r3, r2
 80101b0:	4a64      	ldr	r2, [pc, #400]	; (8010344 <UpdateSIGNALSNames+0x98c>)
 80101b2:	6810      	ldr	r0, [r2, #0]
 80101b4:	6018      	str	r0, [r3, #0]
 80101b6:	8891      	ldrh	r1, [r2, #4]
 80101b8:	7992      	ldrb	r2, [r2, #6]
 80101ba:	8099      	strh	r1, [r3, #4]
 80101bc:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 80101be:	79fb      	ldrb	r3, [r7, #7]
 80101c0:	1c5a      	adds	r2, r3, #1
 80101c2:	71fa      	strb	r2, [r7, #7]
 80101c4:	461a      	mov	r2, r3
 80101c6:	4613      	mov	r3, r2
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	4413      	add	r3, r2
 80101cc:	00db      	lsls	r3, r3, #3
 80101ce:	4a58      	ldr	r2, [pc, #352]	; (8010330 <UpdateSIGNALSNames+0x978>)
 80101d0:	4413      	add	r3, r2
 80101d2:	4a5d      	ldr	r2, [pc, #372]	; (8010348 <UpdateSIGNALSNames+0x990>)
 80101d4:	6810      	ldr	r0, [r2, #0]
 80101d6:	6018      	str	r0, [r3, #0]
 80101d8:	8891      	ldrh	r1, [r2, #4]
 80101da:	7992      	ldrb	r2, [r2, #6]
 80101dc:	8099      	strh	r1, [r3, #4]
 80101de:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 80101e0:	79fb      	ldrb	r3, [r7, #7]
 80101e2:	1c5a      	adds	r2, r3, #1
 80101e4:	71fa      	strb	r2, [r7, #7]
 80101e6:	461a      	mov	r2, r3
 80101e8:	4613      	mov	r3, r2
 80101ea:	009b      	lsls	r3, r3, #2
 80101ec:	4413      	add	r3, r2
 80101ee:	00db      	lsls	r3, r3, #3
 80101f0:	4a4f      	ldr	r2, [pc, #316]	; (8010330 <UpdateSIGNALSNames+0x978>)
 80101f2:	4413      	add	r3, r2
 80101f4:	4a55      	ldr	r2, [pc, #340]	; (801034c <UpdateSIGNALSNames+0x994>)
 80101f6:	6810      	ldr	r0, [r2, #0]
 80101f8:	6018      	str	r0, [r3, #0]
 80101fa:	8891      	ldrh	r1, [r2, #4]
 80101fc:	7992      	ldrb	r2, [r2, #6]
 80101fe:	8099      	strh	r1, [r3, #4]
 8010200:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 8010202:	79fb      	ldrb	r3, [r7, #7]
 8010204:	1c5a      	adds	r2, r3, #1
 8010206:	71fa      	strb	r2, [r7, #7]
 8010208:	461a      	mov	r2, r3
 801020a:	4613      	mov	r3, r2
 801020c:	009b      	lsls	r3, r3, #2
 801020e:	4413      	add	r3, r2
 8010210:	00db      	lsls	r3, r3, #3
 8010212:	4a47      	ldr	r2, [pc, #284]	; (8010330 <UpdateSIGNALSNames+0x978>)
 8010214:	4413      	add	r3, r2
 8010216:	4a4e      	ldr	r2, [pc, #312]	; (8010350 <UpdateSIGNALSNames+0x998>)
 8010218:	6810      	ldr	r0, [r2, #0]
 801021a:	6018      	str	r0, [r3, #0]
 801021c:	8891      	ldrh	r1, [r2, #4]
 801021e:	7992      	ldrb	r2, [r2, #6]
 8010220:	8099      	strh	r1, [r3, #4]
 8010222:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 8010224:	79fb      	ldrb	r3, [r7, #7]
 8010226:	1c5a      	adds	r2, r3, #1
 8010228:	71fa      	strb	r2, [r7, #7]
 801022a:	461a      	mov	r2, r3
 801022c:	4613      	mov	r3, r2
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	4413      	add	r3, r2
 8010232:	00db      	lsls	r3, r3, #3
 8010234:	4a3e      	ldr	r2, [pc, #248]	; (8010330 <UpdateSIGNALSNames+0x978>)
 8010236:	4413      	add	r3, r2
 8010238:	4a46      	ldr	r2, [pc, #280]	; (8010354 <UpdateSIGNALSNames+0x99c>)
 801023a:	6810      	ldr	r0, [r2, #0]
 801023c:	6018      	str	r0, [r3, #0]
 801023e:	8891      	ldrh	r1, [r2, #4]
 8010240:	7992      	ldrb	r2, [r2, #6]
 8010242:	8099      	strh	r1, [r3, #4]
 8010244:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 8010246:	79fb      	ldrb	r3, [r7, #7]
 8010248:	1c5a      	adds	r2, r3, #1
 801024a:	71fa      	strb	r2, [r7, #7]
 801024c:	461a      	mov	r2, r3
 801024e:	4613      	mov	r3, r2
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	4413      	add	r3, r2
 8010254:	00db      	lsls	r3, r3, #3
 8010256:	4a36      	ldr	r2, [pc, #216]	; (8010330 <UpdateSIGNALSNames+0x978>)
 8010258:	4413      	add	r3, r2
 801025a:	4a3f      	ldr	r2, [pc, #252]	; (8010358 <UpdateSIGNALSNames+0x9a0>)
 801025c:	6810      	ldr	r0, [r2, #0]
 801025e:	6018      	str	r0, [r3, #0]
 8010260:	8891      	ldrh	r1, [r2, #4]
 8010262:	7992      	ldrb	r2, [r2, #6]
 8010264:	8099      	strh	r1, [r3, #4]
 8010266:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 8010268:	79fb      	ldrb	r3, [r7, #7]
 801026a:	1c5a      	adds	r2, r3, #1
 801026c:	71fa      	strb	r2, [r7, #7]
 801026e:	461a      	mov	r2, r3
 8010270:	4613      	mov	r3, r2
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	4413      	add	r3, r2
 8010276:	00db      	lsls	r3, r3, #3
 8010278:	4a2d      	ldr	r2, [pc, #180]	; (8010330 <UpdateSIGNALSNames+0x978>)
 801027a:	4413      	add	r3, r2
 801027c:	4a37      	ldr	r2, [pc, #220]	; (801035c <UpdateSIGNALSNames+0x9a4>)
 801027e:	6810      	ldr	r0, [r2, #0]
 8010280:	6018      	str	r0, [r3, #0]
 8010282:	8891      	ldrh	r1, [r2, #4]
 8010284:	7992      	ldrb	r2, [r2, #6]
 8010286:	8099      	strh	r1, [r3, #4]
 8010288:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 801028a:	79fb      	ldrb	r3, [r7, #7]
 801028c:	1c5a      	adds	r2, r3, #1
 801028e:	71fa      	strb	r2, [r7, #7]
 8010290:	461a      	mov	r2, r3
 8010292:	4613      	mov	r3, r2
 8010294:	009b      	lsls	r3, r3, #2
 8010296:	4413      	add	r3, r2
 8010298:	00db      	lsls	r3, r3, #3
 801029a:	4a25      	ldr	r2, [pc, #148]	; (8010330 <UpdateSIGNALSNames+0x978>)
 801029c:	4413      	add	r3, r2
 801029e:	4930      	ldr	r1, [pc, #192]	; (8010360 <UpdateSIGNALSNames+0x9a8>)
 80102a0:	461a      	mov	r2, r3
 80102a2:	460b      	mov	r3, r1
 80102a4:	cb03      	ldmia	r3!, {r0, r1}
 80102a6:	6010      	str	r0, [r2, #0]
 80102a8:	6051      	str	r1, [r2, #4]
 80102aa:	881b      	ldrh	r3, [r3, #0]
 80102ac:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 80102ae:	79fb      	ldrb	r3, [r7, #7]
 80102b0:	1c5a      	adds	r2, r3, #1
 80102b2:	71fa      	strb	r2, [r7, #7]
 80102b4:	461a      	mov	r2, r3
 80102b6:	4613      	mov	r3, r2
 80102b8:	009b      	lsls	r3, r3, #2
 80102ba:	4413      	add	r3, r2
 80102bc:	00db      	lsls	r3, r3, #3
 80102be:	4a1c      	ldr	r2, [pc, #112]	; (8010330 <UpdateSIGNALSNames+0x978>)
 80102c0:	4413      	add	r3, r2
 80102c2:	4a28      	ldr	r2, [pc, #160]	; (8010364 <UpdateSIGNALSNames+0x9ac>)
 80102c4:	6810      	ldr	r0, [r2, #0]
 80102c6:	6018      	str	r0, [r3, #0]
 80102c8:	8891      	ldrh	r1, [r2, #4]
 80102ca:	7992      	ldrb	r2, [r2, #6]
 80102cc:	8099      	strh	r1, [r3, #4]
 80102ce:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 80102d0:	79fb      	ldrb	r3, [r7, #7]
 80102d2:	1c5a      	adds	r2, r3, #1
 80102d4:	71fa      	strb	r2, [r7, #7]
 80102d6:	461a      	mov	r2, r3
 80102d8:	4613      	mov	r3, r2
 80102da:	009b      	lsls	r3, r3, #2
 80102dc:	4413      	add	r3, r2
 80102de:	00db      	lsls	r3, r3, #3
 80102e0:	4a13      	ldr	r2, [pc, #76]	; (8010330 <UpdateSIGNALSNames+0x978>)
 80102e2:	4413      	add	r3, r2
 80102e4:	4a20      	ldr	r2, [pc, #128]	; (8010368 <UpdateSIGNALSNames+0x9b0>)
 80102e6:	461c      	mov	r4, r3
 80102e8:	4613      	mov	r3, r2
 80102ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102ec:	6020      	str	r0, [r4, #0]
 80102ee:	6061      	str	r1, [r4, #4]
 80102f0:	60a2      	str	r2, [r4, #8]
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 80102f6:	79fb      	ldrb	r3, [r7, #7]
 80102f8:	1c5a      	adds	r2, r3, #1
 80102fa:	71fa      	strb	r2, [r7, #7]
 80102fc:	461a      	mov	r2, r3
 80102fe:	4613      	mov	r3, r2
 8010300:	009b      	lsls	r3, r3, #2
 8010302:	4413      	add	r3, r2
 8010304:	00db      	lsls	r3, r3, #3
 8010306:	4a0a      	ldr	r2, [pc, #40]	; (8010330 <UpdateSIGNALSNames+0x978>)
 8010308:	4413      	add	r3, r2
 801030a:	4a18      	ldr	r2, [pc, #96]	; (801036c <UpdateSIGNALSNames+0x9b4>)
 801030c:	461c      	mov	r4, r3
 801030e:	4613      	mov	r3, r2
 8010310:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010312:	6020      	str	r0, [r4, #0]
 8010314:	6061      	str	r1, [r4, #4]
 8010316:	60a2      	str	r2, [r4, #8]
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 801031c:	79fb      	ldrb	r3, [r7, #7]
 801031e:	b29a      	uxth	r2, r3
 8010320:	4b13      	ldr	r3, [pc, #76]	; (8010370 <UpdateSIGNALSNames+0x9b8>)
 8010322:	801a      	strh	r2, [r3, #0]


}
 8010324:	bf00      	nop
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bc90      	pop	{r4, r7}
 801032c:	4770      	bx	lr
 801032e:	bf00      	nop
 8010330:	200054c4 	.word	0x200054c4
 8010334:	0802b230 	.word	0x0802b230
 8010338:	0802b238 	.word	0x0802b238
 801033c:	0802b240 	.word	0x0802b240
 8010340:	0802b248 	.word	0x0802b248
 8010344:	0802b250 	.word	0x0802b250
 8010348:	0802b258 	.word	0x0802b258
 801034c:	0802b260 	.word	0x0802b260
 8010350:	0802b268 	.word	0x0802b268
 8010354:	0802b270 	.word	0x0802b270
 8010358:	0802b278 	.word	0x0802b278
 801035c:	0802b280 	.word	0x0802b280
 8010360:	0802b288 	.word	0x0802b288
 8010364:	0802b294 	.word	0x0802b294
 8010368:	0802b29c 	.word	0x0802b29c
 801036c:	0802b2ac 	.word	0x0802b2ac
 8010370:	20005fb4 	.word	0x20005fb4

08010374 <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 8010374:	b5b0      	push	{r4, r5, r7, lr}
 8010376:	b086      	sub	sp, #24
 8010378:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 801037a:	4974      	ldr	r1, [pc, #464]	; (801054c <print_self_DetailsSiemens+0x1d8>)
 801037c:	4874      	ldr	r0, [pc, #464]	; (8010550 <print_self_DetailsSiemens+0x1dc>)
 801037e:	f016 fc35 	bl	8026bec <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 8010382:	4b74      	ldr	r3, [pc, #464]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 8010384:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010388:	4619      	mov	r1, r3
 801038a:	4873      	ldr	r0, [pc, #460]	; (8010558 <print_self_DetailsSiemens+0x1e4>)
 801038c:	f016 fc2e 	bl	8026bec <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 8010390:	4b70      	ldr	r3, [pc, #448]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 8010392:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 8010396:	4619      	mov	r1, r3
 8010398:	4b6e      	ldr	r3, [pc, #440]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 801039a:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 801039e:	461a      	mov	r2, r3
 80103a0:	4b6c      	ldr	r3, [pc, #432]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80103a2:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 80103a6:	4618      	mov	r0, r3
 80103a8:	4b6a      	ldr	r3, [pc, #424]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80103aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80103ae:	9300      	str	r3, [sp, #0]
 80103b0:	4603      	mov	r3, r0
 80103b2:	486a      	ldr	r0, [pc, #424]	; (801055c <print_self_DetailsSiemens+0x1e8>)
 80103b4:	f016 fc1a 	bl	8026bec <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 80103b8:	4b66      	ldr	r3, [pc, #408]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80103ba:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 80103be:	4618      	mov	r0, r3
 80103c0:	4b64      	ldr	r3, [pc, #400]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80103c2:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
 80103c6:	461c      	mov	r4, r3
 80103c8:	4b62      	ldr	r3, [pc, #392]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80103ca:	f893 32af 	ldrb.w	r3, [r3, #687]	; 0x2af
 80103ce:	461d      	mov	r5, r3
 80103d0:	4b60      	ldr	r3, [pc, #384]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80103d2:	f893 32b0 	ldrb.w	r3, [r3, #688]	; 0x2b0
 80103d6:	461a      	mov	r2, r3
 80103d8:	4b5e      	ldr	r3, [pc, #376]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80103da:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
 80103de:	4619      	mov	r1, r3
 80103e0:	4b5c      	ldr	r3, [pc, #368]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80103e2:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
 80103e6:	9302      	str	r3, [sp, #8]
 80103e8:	9101      	str	r1, [sp, #4]
 80103ea:	9200      	str	r2, [sp, #0]
 80103ec:	462b      	mov	r3, r5
 80103ee:	4622      	mov	r2, r4
 80103f0:	4601      	mov	r1, r0
 80103f2:	485b      	ldr	r0, [pc, #364]	; (8010560 <print_self_DetailsSiemens+0x1ec>)
 80103f4:	f016 fbfa 	bl	8026bec <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 80103f8:	4b56      	ldr	r3, [pc, #344]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80103fa:	f8b3 32da 	ldrh.w	r3, [r3, #730]	; 0x2da
 80103fe:	4619      	mov	r1, r3
 8010400:	4858      	ldr	r0, [pc, #352]	; (8010564 <print_self_DetailsSiemens+0x1f0>)
 8010402:	f016 fbf3 	bl	8026bec <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 8010406:	2300      	movs	r3, #0
 8010408:	71fb      	strb	r3, [r7, #7]
 801040a:	e037      	b.n	801047c <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 801040c:	79fb      	ldrb	r3, [r7, #7]
 801040e:	1c59      	adds	r1, r3, #1
 8010410:	79fb      	ldrb	r3, [r7, #7]
 8010412:	4a50      	ldr	r2, [pc, #320]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 8010414:	33ae      	adds	r3, #174	; 0xae
 8010416:	009b      	lsls	r3, r3, #2
 8010418:	4413      	add	r3, r2
 801041a:	785b      	ldrb	r3, [r3, #1]
 801041c:	461c      	mov	r4, r3
 801041e:	79fb      	ldrb	r3, [r7, #7]
 8010420:	4a4c      	ldr	r2, [pc, #304]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 8010422:	009b      	lsls	r3, r3, #2
 8010424:	4413      	add	r3, r2
 8010426:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 801042a:	461d      	mov	r5, r3
 801042c:	79fb      	ldrb	r3, [r7, #7]
 801042e:	4a49      	ldr	r2, [pc, #292]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 8010430:	009b      	lsls	r3, r3, #2
 8010432:	4413      	add	r3, r2
 8010434:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8010438:	4618      	mov	r0, r3
 801043a:	79fb      	ldrb	r3, [r7, #7]
 801043c:	4a45      	ldr	r2, [pc, #276]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 801043e:	009b      	lsls	r3, r3, #2
 8010440:	4413      	add	r3, r2
 8010442:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 8010446:	9301      	str	r3, [sp, #4]
 8010448:	9000      	str	r0, [sp, #0]
 801044a:	462b      	mov	r3, r5
 801044c:	4622      	mov	r2, r4
 801044e:	4846      	ldr	r0, [pc, #280]	; (8010568 <print_self_DetailsSiemens+0x1f4>)
 8010450:	f016 fbcc 	bl	8026bec <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 8010454:	79fb      	ldrb	r3, [r7, #7]
 8010456:	4a3f      	ldr	r2, [pc, #252]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 8010458:	33b6      	adds	r3, #182	; 0xb6
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	4413      	add	r3, r2
 801045e:	88db      	ldrh	r3, [r3, #6]
 8010460:	4619      	mov	r1, r3
 8010462:	79fb      	ldrb	r3, [r7, #7]
 8010464:	4a3b      	ldr	r2, [pc, #236]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 8010466:	009b      	lsls	r3, r3, #2
 8010468:	4413      	add	r3, r2
 801046a:	f8b3 32e0 	ldrh.w	r3, [r3, #736]	; 0x2e0
 801046e:	461a      	mov	r2, r3
 8010470:	483e      	ldr	r0, [pc, #248]	; (801056c <print_self_DetailsSiemens+0x1f8>)
 8010472:	f016 fbbb 	bl	8026bec <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 8010476:	79fb      	ldrb	r3, [r7, #7]
 8010478:	3301      	adds	r3, #1
 801047a:	71fb      	strb	r3, [r7, #7]
 801047c:	4b35      	ldr	r3, [pc, #212]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 801047e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010482:	79fa      	ldrb	r2, [r7, #7]
 8010484:	429a      	cmp	r2, r3
 8010486:	d3c1      	bcc.n	801040c <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 8010488:	4b32      	ldr	r3, [pc, #200]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 801048a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 801048e:	4619      	mov	r1, r3
 8010490:	4837      	ldr	r0, [pc, #220]	; (8010570 <print_self_DetailsSiemens+0x1fc>)
 8010492:	f016 fbab 	bl	8026bec <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 8010496:	4b2f      	ldr	r3, [pc, #188]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 8010498:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 801049c:	4619      	mov	r1, r3
 801049e:	4835      	ldr	r0, [pc, #212]	; (8010574 <print_self_DetailsSiemens+0x200>)
 80104a0:	f016 fba4 	bl	8026bec <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 80104a4:	4b2b      	ldr	r3, [pc, #172]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80104a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80104aa:	4619      	mov	r1, r3
 80104ac:	4832      	ldr	r0, [pc, #200]	; (8010578 <print_self_DetailsSiemens+0x204>)
 80104ae:	f016 fb9d 	bl	8026bec <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 80104b2:	4b28      	ldr	r3, [pc, #160]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80104b4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 80104b8:	4619      	mov	r1, r3
 80104ba:	482f      	ldr	r0, [pc, #188]	; (8010578 <print_self_DetailsSiemens+0x204>)
 80104bc:	f016 fb96 	bl	8026bec <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 80104c0:	4b24      	ldr	r3, [pc, #144]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80104c2:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 80104c6:	4619      	mov	r1, r3
 80104c8:	482c      	ldr	r0, [pc, #176]	; (801057c <print_self_DetailsSiemens+0x208>)
 80104ca:	f016 fb8f 	bl	8026bec <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 80104ce:	4b21      	ldr	r3, [pc, #132]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80104d0:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 80104d4:	4619      	mov	r1, r3
 80104d6:	482a      	ldr	r0, [pc, #168]	; (8010580 <print_self_DetailsSiemens+0x20c>)
 80104d8:	f016 fb88 	bl	8026bec <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 80104dc:	4b1d      	ldr	r3, [pc, #116]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80104de:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 80104e2:	4619      	mov	r1, r3
 80104e4:	4827      	ldr	r0, [pc, #156]	; (8010584 <print_self_DetailsSiemens+0x210>)
 80104e6:	f016 fb81 	bl	8026bec <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 80104ea:	4b1a      	ldr	r3, [pc, #104]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80104ec:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 80104f0:	4619      	mov	r1, r3
 80104f2:	4825      	ldr	r0, [pc, #148]	; (8010588 <print_self_DetailsSiemens+0x214>)
 80104f4:	f016 fb7a 	bl	8026bec <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 80104f8:	4b16      	ldr	r3, [pc, #88]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 80104fa:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80104fe:	4619      	mov	r1, r3
 8010500:	4822      	ldr	r0, [pc, #136]	; (801058c <print_self_DetailsSiemens+0x218>)
 8010502:	f016 fb73 	bl	8026bec <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 8010506:	4b13      	ldr	r3, [pc, #76]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 8010508:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 801050c:	4619      	mov	r1, r3
 801050e:	4820      	ldr	r0, [pc, #128]	; (8010590 <print_self_DetailsSiemens+0x21c>)
 8010510:	f016 fb6c 	bl	8026bec <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 8010514:	4b0f      	ldr	r3, [pc, #60]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 8010516:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 801051a:	4619      	mov	r1, r3
 801051c:	481d      	ldr	r0, [pc, #116]	; (8010594 <print_self_DetailsSiemens+0x220>)
 801051e:	f016 fb65 	bl	8026bec <iprintf>
	if(EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount == 0)
 8010522:	4b0c      	ldr	r3, [pc, #48]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 8010524:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 8010528:	2b00      	cmp	r3, #0
 801052a:	d103      	bne.n	8010534 <print_self_DetailsSiemens+0x1c0>
	{
		EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount = 50;
 801052c:	4b09      	ldr	r3, [pc, #36]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 801052e:	2232      	movs	r2, #50	; 0x32
 8010530:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	}
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 8010534:	4b07      	ldr	r3, [pc, #28]	; (8010554 <print_self_DetailsSiemens+0x1e0>)
 8010536:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 801053a:	4619      	mov	r1, r3
 801053c:	4816      	ldr	r0, [pc, #88]	; (8010598 <print_self_DetailsSiemens+0x224>)
 801053e:	f016 fb55 	bl	8026bec <iprintf>

}
 8010542:	bf00      	nop
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bdb0      	pop	{r4, r5, r7, pc}
 801054a:	bf00      	nop
 801054c:	20000505 	.word	0x20000505
 8010550:	0802b2bc 	.word	0x0802b2bc
 8010554:	20000504 	.word	0x20000504
 8010558:	0802b2d0 	.word	0x0802b2d0
 801055c:	0802b2e0 	.word	0x0802b2e0
 8010560:	0802b2f8 	.word	0x0802b2f8
 8010564:	0802b320 	.word	0x0802b320
 8010568:	0802b338 	.word	0x0802b338
 801056c:	0802b34c 	.word	0x0802b34c
 8010570:	0802b364 	.word	0x0802b364
 8010574:	0802b374 	.word	0x0802b374
 8010578:	0802b388 	.word	0x0802b388
 801057c:	0802b39c 	.word	0x0802b39c
 8010580:	0802b3ac 	.word	0x0802b3ac
 8010584:	0802b3bc 	.word	0x0802b3bc
 8010588:	0802b3d0 	.word	0x0802b3d0
 801058c:	0802b3e8 	.word	0x0802b3e8
 8010590:	0802b400 	.word	0x0802b400
 8010594:	0802b41c 	.word	0x0802b41c
 8010598:	0802b438 	.word	0x0802b438

0801059c <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 80105a4:	f009 fb18 	bl	8019bd8 <HAL_GetTick>
 80105a8:	4602      	mov	r2, r0
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	1ad3      	subs	r3, r2, r3
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	bfb8      	it	lt
 80105b2:	425b      	neglt	r3, r3
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3708      	adds	r7, #8
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 80105c2:	23f3      	movs	r3, #243	; 0xf3
 80105c4:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 80105c6:	f013 fe1b 	bl	8024200 <udp_new>
 80105ca:	4603      	mov	r3, r0
 80105cc:	4a7a      	ldr	r2, [pc, #488]	; (80107b8 <udpServer_init+0x1fc>)
 80105ce:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 80105d0:	4b7a      	ldr	r3, [pc, #488]	; (80107bc <udpServer_init+0x200>)
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d002      	beq.n	80105de <udpServer_init+0x22>
 80105d8:	2b02      	cmp	r3, #2
 80105da:	d074      	beq.n	80106c6 <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 80105dc:	e0e9      	b.n	80107b2 <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 80105de:	4b77      	ldr	r3, [pc, #476]	; (80107bc <udpServer_init+0x200>)
 80105e0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80105e4:	061a      	lsls	r2, r3, #24
 80105e6:	4b75      	ldr	r3, [pc, #468]	; (80107bc <udpServer_init+0x200>)
 80105e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80105ec:	041b      	lsls	r3, r3, #16
 80105ee:	431a      	orrs	r2, r3
 80105f0:	4b72      	ldr	r3, [pc, #456]	; (80107bc <udpServer_init+0x200>)
 80105f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80105f6:	021b      	lsls	r3, r3, #8
 80105f8:	4313      	orrs	r3, r2
 80105fa:	4a70      	ldr	r2, [pc, #448]	; (80107bc <udpServer_init+0x200>)
 80105fc:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8010600:	4313      	orrs	r3, r2
 8010602:	061a      	lsls	r2, r3, #24
 8010604:	4b6d      	ldr	r3, [pc, #436]	; (80107bc <udpServer_init+0x200>)
 8010606:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 801060a:	0619      	lsls	r1, r3, #24
 801060c:	4b6b      	ldr	r3, [pc, #428]	; (80107bc <udpServer_init+0x200>)
 801060e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010612:	041b      	lsls	r3, r3, #16
 8010614:	4319      	orrs	r1, r3
 8010616:	4b69      	ldr	r3, [pc, #420]	; (80107bc <udpServer_init+0x200>)
 8010618:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801061c:	021b      	lsls	r3, r3, #8
 801061e:	430b      	orrs	r3, r1
 8010620:	4966      	ldr	r1, [pc, #408]	; (80107bc <udpServer_init+0x200>)
 8010622:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 8010626:	430b      	orrs	r3, r1
 8010628:	021b      	lsls	r3, r3, #8
 801062a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801062e:	431a      	orrs	r2, r3
 8010630:	4b62      	ldr	r3, [pc, #392]	; (80107bc <udpServer_init+0x200>)
 8010632:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010636:	0619      	lsls	r1, r3, #24
 8010638:	4b60      	ldr	r3, [pc, #384]	; (80107bc <udpServer_init+0x200>)
 801063a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801063e:	041b      	lsls	r3, r3, #16
 8010640:	4319      	orrs	r1, r3
 8010642:	4b5e      	ldr	r3, [pc, #376]	; (80107bc <udpServer_init+0x200>)
 8010644:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010648:	021b      	lsls	r3, r3, #8
 801064a:	430b      	orrs	r3, r1
 801064c:	495b      	ldr	r1, [pc, #364]	; (80107bc <udpServer_init+0x200>)
 801064e:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 8010652:	430b      	orrs	r3, r1
 8010654:	0a1b      	lsrs	r3, r3, #8
 8010656:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801065a:	431a      	orrs	r2, r3
 801065c:	4b57      	ldr	r3, [pc, #348]	; (80107bc <udpServer_init+0x200>)
 801065e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010662:	0619      	lsls	r1, r3, #24
 8010664:	4b55      	ldr	r3, [pc, #340]	; (80107bc <udpServer_init+0x200>)
 8010666:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801066a:	041b      	lsls	r3, r3, #16
 801066c:	4319      	orrs	r1, r3
 801066e:	4b53      	ldr	r3, [pc, #332]	; (80107bc <udpServer_init+0x200>)
 8010670:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010674:	021b      	lsls	r3, r3, #8
 8010676:	430b      	orrs	r3, r1
 8010678:	4950      	ldr	r1, [pc, #320]	; (80107bc <udpServer_init+0x200>)
 801067a:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 801067e:	430b      	orrs	r3, r1
 8010680:	0e1b      	lsrs	r3, r3, #24
 8010682:	4313      	orrs	r3, r2
 8010684:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 8010686:	4b4c      	ldr	r3, [pc, #304]	; (80107b8 <udpServer_init+0x1fc>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	4a4c      	ldr	r2, [pc, #304]	; (80107bc <udpServer_init+0x200>)
 801068c:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 8010690:	4639      	mov	r1, r7
 8010692:	4618      	mov	r0, r3
 8010694:	f013 fcca 	bl	802402c <udp_bind>
 8010698:	4603      	mov	r3, r0
 801069a:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 801069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d107      	bne.n	80106b4 <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 80106a4:	4b44      	ldr	r3, [pc, #272]	; (80107b8 <udpServer_init+0x1fc>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	2200      	movs	r2, #0
 80106aa:	4945      	ldr	r1, [pc, #276]	; (80107c0 <udpServer_init+0x204>)
 80106ac:	4618      	mov	r0, r3
 80106ae:	f013 fd45 	bl	802413c <udp_recv>
		break;
 80106b2:	e07c      	b.n	80107ae <udpServer_init+0x1f2>
			printf("N-OK\n");
 80106b4:	4843      	ldr	r0, [pc, #268]	; (80107c4 <udpServer_init+0x208>)
 80106b6:	f016 fb35 	bl	8026d24 <puts>
			udp_remove(upcb);
 80106ba:	4b3f      	ldr	r3, [pc, #252]	; (80107b8 <udpServer_init+0x1fc>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	4618      	mov	r0, r3
 80106c0:	f013 fd5c 	bl	802417c <udp_remove>
		break;
 80106c4:	e073      	b.n	80107ae <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 80106c6:	4b3d      	ldr	r3, [pc, #244]	; (80107bc <udpServer_init+0x200>)
 80106c8:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 80106cc:	061a      	lsls	r2, r3, #24
 80106ce:	4b3b      	ldr	r3, [pc, #236]	; (80107bc <udpServer_init+0x200>)
 80106d0:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 80106d4:	041b      	lsls	r3, r3, #16
 80106d6:	431a      	orrs	r2, r3
 80106d8:	4b38      	ldr	r3, [pc, #224]	; (80107bc <udpServer_init+0x200>)
 80106da:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 80106de:	021b      	lsls	r3, r3, #8
 80106e0:	4313      	orrs	r3, r2
 80106e2:	4a36      	ldr	r2, [pc, #216]	; (80107bc <udpServer_init+0x200>)
 80106e4:	f892 22a8 	ldrb.w	r2, [r2, #680]	; 0x2a8
 80106e8:	4313      	orrs	r3, r2
 80106ea:	061a      	lsls	r2, r3, #24
 80106ec:	4b33      	ldr	r3, [pc, #204]	; (80107bc <udpServer_init+0x200>)
 80106ee:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 80106f2:	0619      	lsls	r1, r3, #24
 80106f4:	4b31      	ldr	r3, [pc, #196]	; (80107bc <udpServer_init+0x200>)
 80106f6:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 80106fa:	041b      	lsls	r3, r3, #16
 80106fc:	4319      	orrs	r1, r3
 80106fe:	4b2f      	ldr	r3, [pc, #188]	; (80107bc <udpServer_init+0x200>)
 8010700:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 8010704:	021b      	lsls	r3, r3, #8
 8010706:	430b      	orrs	r3, r1
 8010708:	492c      	ldr	r1, [pc, #176]	; (80107bc <udpServer_init+0x200>)
 801070a:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 801070e:	430b      	orrs	r3, r1
 8010710:	021b      	lsls	r3, r3, #8
 8010712:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010716:	431a      	orrs	r2, r3
 8010718:	4b28      	ldr	r3, [pc, #160]	; (80107bc <udpServer_init+0x200>)
 801071a:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 801071e:	0619      	lsls	r1, r3, #24
 8010720:	4b26      	ldr	r3, [pc, #152]	; (80107bc <udpServer_init+0x200>)
 8010722:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 8010726:	041b      	lsls	r3, r3, #16
 8010728:	4319      	orrs	r1, r3
 801072a:	4b24      	ldr	r3, [pc, #144]	; (80107bc <udpServer_init+0x200>)
 801072c:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 8010730:	021b      	lsls	r3, r3, #8
 8010732:	430b      	orrs	r3, r1
 8010734:	4921      	ldr	r1, [pc, #132]	; (80107bc <udpServer_init+0x200>)
 8010736:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 801073a:	430b      	orrs	r3, r1
 801073c:	0a1b      	lsrs	r3, r3, #8
 801073e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010742:	431a      	orrs	r2, r3
 8010744:	4b1d      	ldr	r3, [pc, #116]	; (80107bc <udpServer_init+0x200>)
 8010746:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 801074a:	0619      	lsls	r1, r3, #24
 801074c:	4b1b      	ldr	r3, [pc, #108]	; (80107bc <udpServer_init+0x200>)
 801074e:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 8010752:	041b      	lsls	r3, r3, #16
 8010754:	4319      	orrs	r1, r3
 8010756:	4b19      	ldr	r3, [pc, #100]	; (80107bc <udpServer_init+0x200>)
 8010758:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 801075c:	021b      	lsls	r3, r3, #8
 801075e:	430b      	orrs	r3, r1
 8010760:	4916      	ldr	r1, [pc, #88]	; (80107bc <udpServer_init+0x200>)
 8010762:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 8010766:	430b      	orrs	r3, r1
 8010768:	0e1b      	lsrs	r3, r3, #24
 801076a:	4313      	orrs	r3, r2
 801076c:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 801076e:	4b12      	ldr	r3, [pc, #72]	; (80107b8 <udpServer_init+0x1fc>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	4a12      	ldr	r2, [pc, #72]	; (80107bc <udpServer_init+0x200>)
 8010774:	f8b2 22da 	ldrh.w	r2, [r2, #730]	; 0x2da
 8010778:	4639      	mov	r1, r7
 801077a:	4618      	mov	r0, r3
 801077c:	f013 fc56 	bl	802402c <udp_bind>
 8010780:	4603      	mov	r3, r0
 8010782:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 8010784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d107      	bne.n	801079c <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 801078c:	4b0a      	ldr	r3, [pc, #40]	; (80107b8 <udpServer_init+0x1fc>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	2200      	movs	r2, #0
 8010792:	490b      	ldr	r1, [pc, #44]	; (80107c0 <udpServer_init+0x204>)
 8010794:	4618      	mov	r0, r3
 8010796:	f013 fcd1 	bl	802413c <udp_recv>
		break;
 801079a:	e007      	b.n	80107ac <udpServer_init+0x1f0>
			printf("N-OK\n");
 801079c:	4809      	ldr	r0, [pc, #36]	; (80107c4 <udpServer_init+0x208>)
 801079e:	f016 fac1 	bl	8026d24 <puts>
			udp_remove(upcb);
 80107a2:	4b05      	ldr	r3, [pc, #20]	; (80107b8 <udpServer_init+0x1fc>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	4618      	mov	r0, r3
 80107a8:	f013 fce8 	bl	802417c <udp_remove>
		break;
 80107ac:	bf00      	nop
	}

	udpClient_connect();
 80107ae:	f000 f90d 	bl	80109cc <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 80107b2:	3708      	adds	r7, #8
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	20006a34 	.word	0x20006a34
 80107bc:	20000504 	.word	0x20000504
 80107c0:	080107c9 	.word	0x080107c9
 80107c4:	0802b458 	.word	0x0802b458

080107c8 <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b086      	sub	sp, #24
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	60f8      	str	r0, [r7, #12]
 80107d0:	60b9      	str	r1, [r7, #8]
 80107d2:	607a      	str	r2, [r7, #4]
 80107d4:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 80107d6:	2300      	movs	r3, #0
 80107d8:	75fb      	strb	r3, [r7, #23]
	uint16_t Length = 0;
 80107da:	2300      	movs	r3, #0
 80107dc:	82bb      	strh	r3, [r7, #20]
	uint8_t IpMatched = 0;
 80107de:	2300      	movs	r3, #0
 80107e0:	75bb      	strb	r3, [r7, #22]
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 80107e2:	4a70      	ldr	r2, [pc, #448]	; (80109a4 <UDP_Receive_Callback+0x1dc>)
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	6013      	str	r3, [r2, #0]
	Length = p->len;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	895b      	ldrh	r3, [r3, #10]
 80107ee:	82bb      	strh	r3, [r7, #20]
	switch(EI_data.ProtocolType)
 80107f0:	4b6d      	ldr	r3, [pc, #436]	; (80109a8 <UDP_Receive_Callback+0x1e0>)
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d02e      	beq.n	8010856 <UDP_Receive_Callback+0x8e>
 80107f8:	2b02      	cmp	r3, #2
 80107fa:	d045      	beq.n	8010888 <UDP_Receive_Callback+0xc0>
 80107fc:	e069      	b.n	80108d2 <UDP_Receive_Callback+0x10a>
	{

	case HITACHI:
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 80107fe:	4b69      	ldr	r3, [pc, #420]	; (80109a4 <UDP_Receive_Callback+0x1dc>)
 8010800:	681a      	ldr	r2, [r3, #0]
 8010802:	7dfb      	ldrb	r3, [r7, #23]
 8010804:	4969      	ldr	r1, [pc, #420]	; (80109ac <UDP_Receive_Callback+0x1e4>)
 8010806:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801080a:	429a      	cmp	r2, r3
 801080c:	d120      	bne.n	8010850 <UDP_Receive_Callback+0x88>
			{
				if(IpMatched == 0)
 801080e:	7dbb      	ldrb	r3, [r7, #22]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d109      	bne.n	8010828 <UDP_Receive_Callback+0x60>
				{
					printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 8010814:	6838      	ldr	r0, [r7, #0]
 8010816:	f015 f8f1 	bl	80259fc <ip4addr_ntoa>
 801081a:	4603      	mov	r3, r0
 801081c:	4619      	mov	r1, r3
 801081e:	4864      	ldr	r0, [pc, #400]	; (80109b0 <UDP_Receive_Callback+0x1e8>)
 8010820:	f016 f9e4 	bl	8026bec <iprintf>
					IpMatched = 1;
 8010824:	2301      	movs	r3, #1
 8010826:	75bb      	strb	r3, [r7, #22]
				}
				Recv_IP_List[Traverser/2] = *addr;
 8010828:	7dfb      	ldrb	r3, [r7, #23]
 801082a:	085b      	lsrs	r3, r3, #1
 801082c:	b2db      	uxtb	r3, r3
 801082e:	4619      	mov	r1, r3
 8010830:	4a60      	ldr	r2, [pc, #384]	; (80109b4 <UDP_Receive_Callback+0x1ec>)
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 801083a:	7dfb      	ldrb	r3, [r7, #23]
 801083c:	f003 0301 	and.w	r3, r3, #1
 8010840:	b2db      	uxtb	r3, r3
 8010842:	7dfa      	ldrb	r2, [r7, #23]
 8010844:	0852      	lsrs	r2, r2, #1
 8010846:	b2d2      	uxtb	r2, r2
 8010848:	3301      	adds	r3, #1
 801084a:	b2d9      	uxtb	r1, r3
 801084c:	4b5a      	ldr	r3, [pc, #360]	; (80109b8 <UDP_Receive_Callback+0x1f0>)
 801084e:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8010850:	7dfb      	ldrb	r3, [r7, #23]
 8010852:	3301      	adds	r3, #1
 8010854:	75fb      	strb	r3, [r7, #23]
 8010856:	4b54      	ldr	r3, [pc, #336]	; (80109a8 <UDP_Receive_Callback+0x1e0>)
 8010858:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801085c:	7dfa      	ldrb	r2, [r7, #23]
 801085e:	429a      	cmp	r2, r3
 8010860:	d3cd      	bcc.n	80107fe <UDP_Receive_Callback+0x36>
				//break;
			}
		}
		if(Traverser>EI_data.Hitachi_st.No_of_IP_s)
 8010862:	4b51      	ldr	r3, [pc, #324]	; (80109a8 <UDP_Receive_Callback+0x1e0>)
 8010864:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010868:	7dfa      	ldrb	r2, [r7, #23]
 801086a:	429a      	cmp	r2, r3
 801086c:	d935      	bls.n	80108da <UDP_Receive_Callback+0x112>
		{
			pbuf_free(p);
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f012 fc84 	bl	802317c <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 8010874:	6838      	ldr	r0, [r7, #0]
 8010876:	f015 f8c1 	bl	80259fc <ip4addr_ntoa>
 801087a:	4601      	mov	r1, r0
 801087c:	7dfb      	ldrb	r3, [r7, #23]
 801087e:	461a      	mov	r2, r3
 8010880:	484e      	ldr	r0, [pc, #312]	; (80109bc <UDP_Receive_Callback+0x1f4>)
 8010882:	f016 f9b3 	bl	8026bec <iprintf>
			return;
 8010886:	e08a      	b.n	801099e <UDP_Receive_Callback+0x1d6>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 8010888:	2300      	movs	r3, #0
 801088a:	75fb      	strb	r3, [r7, #23]
 801088c:	e00a      	b.n	80108a4 <UDP_Receive_Callback+0xdc>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 801088e:	4b45      	ldr	r3, [pc, #276]	; (80109a4 <UDP_Receive_Callback+0x1dc>)
 8010890:	681a      	ldr	r2, [r3, #0]
 8010892:	7dfb      	ldrb	r3, [r7, #23]
 8010894:	4945      	ldr	r1, [pc, #276]	; (80109ac <UDP_Receive_Callback+0x1e4>)
 8010896:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801089a:	429a      	cmp	r2, r3
 801089c:	d009      	beq.n	80108b2 <UDP_Receive_Callback+0xea>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 801089e:	7dfb      	ldrb	r3, [r7, #23]
 80108a0:	3301      	adds	r3, #1
 80108a2:	75fb      	strb	r3, [r7, #23]
 80108a4:	4b40      	ldr	r3, [pc, #256]	; (80109a8 <UDP_Receive_Callback+0x1e0>)
 80108a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80108aa:	7dfa      	ldrb	r2, [r7, #23]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d3ee      	bcc.n	801088e <UDP_Receive_Callback+0xc6>
 80108b0:	e000      	b.n	80108b4 <UDP_Receive_Callback+0xec>
			{
				break;
 80108b2:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 80108b4:	4b3c      	ldr	r3, [pc, #240]	; (80109a8 <UDP_Receive_Callback+0x1e0>)
 80108b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80108ba:	7dfa      	ldrb	r2, [r7, #23]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d90e      	bls.n	80108de <UDP_Receive_Callback+0x116>
		{
			pbuf_free(p);
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f012 fc5b 	bl	802317c <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 80108c6:	7dfb      	ldrb	r3, [r7, #23]
 80108c8:	4619      	mov	r1, r3
 80108ca:	483d      	ldr	r0, [pc, #244]	; (80109c0 <UDP_Receive_Callback+0x1f8>)
 80108cc:	f016 f98e 	bl	8026bec <iprintf>
			return;
 80108d0:	e065      	b.n	801099e <UDP_Receive_Callback+0x1d6>
		}
		break;
	default:
		pbuf_free(p);
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f012 fc52 	bl	802317c <pbuf_free>
		return;
 80108d8:	e061      	b.n	801099e <UDP_Receive_Callback+0x1d6>
		break;
 80108da:	bf00      	nop
 80108dc:	e000      	b.n	80108e0 <UDP_Receive_Callback+0x118>
		break;
 80108de:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 80108e0:	4b31      	ldr	r3, [pc, #196]	; (80109a8 <UDP_Receive_Callback+0x1e0>)
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	2b01      	cmp	r3, #1
 80108e6:	d002      	beq.n	80108ee <UDP_Receive_Callback+0x126>
 80108e8:	2b02      	cmp	r3, #2
 80108ea:	d049      	beq.n	8010980 <UDP_Receive_Callback+0x1b8>
		Ethernet_Circle_buff_st.Write_end = Length;
		break;

	default:
		/* Do Nothing */
		break;
 80108ec:	e054      	b.n	8010998 <UDP_Receive_Callback+0x1d0>
		Interrupt_clock = HAL_GetTick();
 80108ee:	f009 f973 	bl	8019bd8 <HAL_GetTick>
 80108f2:	4603      	mov	r3, r0
 80108f4:	4a33      	ldr	r2, [pc, #204]	; (80109c4 <UDP_Receive_Callback+0x1fc>)
 80108f6:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 80108f8:	4b33      	ldr	r3, [pc, #204]	; (80109c8 <UDP_Receive_Callback+0x200>)
 80108fa:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 80108fe:	461a      	mov	r2, r3
 8010900:	8abb      	ldrh	r3, [r7, #20]
 8010902:	4413      	add	r3, r2
 8010904:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010908:	dd24      	ble.n	8010954 <UDP_Receive_Callback+0x18c>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 801090a:	4b2f      	ldr	r3, [pc, #188]	; (80109c8 <UDP_Receive_Callback+0x200>)
 801090c:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010910:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 8010914:	827b      	strh	r3, [r7, #18]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 8010916:	4b2c      	ldr	r3, [pc, #176]	; (80109c8 <UDP_Receive_Callback+0x200>)
 8010918:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 801091c:	461a      	mov	r2, r3
 801091e:	4b2a      	ldr	r3, [pc, #168]	; (80109c8 <UDP_Receive_Callback+0x200>)
 8010920:	18d0      	adds	r0, r2, r3
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	8a7a      	ldrh	r2, [r7, #18]
 8010928:	4619      	mov	r1, r3
 801092a:	f016 f84f 	bl	80269cc <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	685a      	ldr	r2, [r3, #4]
 8010932:	8a7b      	ldrh	r3, [r7, #18]
 8010934:	18d1      	adds	r1, r2, r3
 8010936:	8aba      	ldrh	r2, [r7, #20]
 8010938:	8a7b      	ldrh	r3, [r7, #18]
 801093a:	1ad3      	subs	r3, r2, r3
 801093c:	461a      	mov	r2, r3
 801093e:	4822      	ldr	r0, [pc, #136]	; (80109c8 <UDP_Receive_Callback+0x200>)
 8010940:	f016 f844 	bl	80269cc <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 8010944:	8aba      	ldrh	r2, [r7, #20]
 8010946:	8a7b      	ldrh	r3, [r7, #18]
 8010948:	1ad3      	subs	r3, r2, r3
 801094a:	b29a      	uxth	r2, r3
 801094c:	4b1e      	ldr	r3, [pc, #120]	; (80109c8 <UDP_Receive_Callback+0x200>)
 801094e:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 8010952:	e021      	b.n	8010998 <UDP_Receive_Callback+0x1d0>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 8010954:	4b1c      	ldr	r3, [pc, #112]	; (80109c8 <UDP_Receive_Callback+0x200>)
 8010956:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 801095a:	461a      	mov	r2, r3
 801095c:	4b1a      	ldr	r3, [pc, #104]	; (80109c8 <UDP_Receive_Callback+0x200>)
 801095e:	18d0      	adds	r0, r2, r3
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	8aba      	ldrh	r2, [r7, #20]
 8010966:	4619      	mov	r1, r3
 8010968:	f016 f830 	bl	80269cc <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 801096c:	4b16      	ldr	r3, [pc, #88]	; (80109c8 <UDP_Receive_Callback+0x200>)
 801096e:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 8010972:	8abb      	ldrh	r3, [r7, #20]
 8010974:	4413      	add	r3, r2
 8010976:	b29a      	uxth	r2, r3
 8010978:	4b13      	ldr	r3, [pc, #76]	; (80109c8 <UDP_Receive_Callback+0x200>)
 801097a:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 801097e:	e00b      	b.n	8010998 <UDP_Receive_Callback+0x1d0>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	8aba      	ldrh	r2, [r7, #20]
 8010986:	4619      	mov	r1, r3
 8010988:	480f      	ldr	r0, [pc, #60]	; (80109c8 <UDP_Receive_Callback+0x200>)
 801098a:	f016 f81f 	bl	80269cc <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 801098e:	4a0e      	ldr	r2, [pc, #56]	; (80109c8 <UDP_Receive_Callback+0x200>)
 8010990:	8abb      	ldrh	r3, [r7, #20]
 8010992:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		break;
 8010996:	bf00      	nop
	}


	pbuf_free(p);
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f012 fbef 	bl	802317c <pbuf_free>
}
 801099e:	3718      	adds	r7, #24
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	20006a08 	.word	0x20006a08
 80109a8:	20000504 	.word	0x20000504
 80109ac:	200069b8 	.word	0x200069b8
 80109b0:	0802b460 	.word	0x0802b460
 80109b4:	200026e4 	.word	0x200026e4
 80109b8:	2000270c 	.word	0x2000270c
 80109bc:	0802b46c 	.word	0x0802b46c
 80109c0:	0802b498 	.word	0x0802b498
 80109c4:	200024b0 	.word	0x200024b0
 80109c8:	200063b4 	.word	0x200063b4

080109cc <udpClient_connect>:
void udpClient_connect(void)
{
 80109cc:	b480      	push	{r7}
 80109ce:	b083      	sub	sp, #12
 80109d0:	af00      	add	r7, sp, #0
//	err_t err;
	uint8_t Traverser = 0;
 80109d2:	2300      	movs	r3, #0
 80109d4:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 80109d6:	4ba6      	ldr	r3, [pc, #664]	; (8010c70 <udpClient_connect+0x2a4>)
 80109d8:	781b      	ldrb	r3, [r3, #0]
 80109da:	2b01      	cmp	r3, #1
 80109dc:	d003      	beq.n	80109e6 <udpClient_connect+0x1a>
 80109de:	2b02      	cmp	r3, #2
 80109e0:	f000 80a1 	beq.w	8010b26 <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 80109e4:	e13f      	b.n	8010c66 <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80109e6:	2300      	movs	r3, #0
 80109e8:	71fb      	strb	r3, [r7, #7]
 80109ea:	e094      	b.n	8010b16 <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 80109ec:	79fb      	ldrb	r3, [r7, #7]
 80109ee:	4aa0      	ldr	r2, [pc, #640]	; (8010c70 <udpClient_connect+0x2a4>)
 80109f0:	3312      	adds	r3, #18
 80109f2:	009b      	lsls	r3, r3, #2
 80109f4:	4413      	add	r3, r2
 80109f6:	78db      	ldrb	r3, [r3, #3]
 80109f8:	061a      	lsls	r2, r3, #24
 80109fa:	79fb      	ldrb	r3, [r7, #7]
 80109fc:	499c      	ldr	r1, [pc, #624]	; (8010c70 <udpClient_connect+0x2a4>)
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	440b      	add	r3, r1
 8010a02:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8010a06:	041b      	lsls	r3, r3, #16
 8010a08:	431a      	orrs	r2, r3
 8010a0a:	79fb      	ldrb	r3, [r7, #7]
 8010a0c:	4998      	ldr	r1, [pc, #608]	; (8010c70 <udpClient_connect+0x2a4>)
 8010a0e:	009b      	lsls	r3, r3, #2
 8010a10:	440b      	add	r3, r1
 8010a12:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010a16:	021b      	lsls	r3, r3, #8
 8010a18:	431a      	orrs	r2, r3
 8010a1a:	79fb      	ldrb	r3, [r7, #7]
 8010a1c:	4994      	ldr	r1, [pc, #592]	; (8010c70 <udpClient_connect+0x2a4>)
 8010a1e:	009b      	lsls	r3, r3, #2
 8010a20:	440b      	add	r3, r1
 8010a22:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010a26:	4313      	orrs	r3, r2
 8010a28:	061a      	lsls	r2, r3, #24
 8010a2a:	79fb      	ldrb	r3, [r7, #7]
 8010a2c:	4990      	ldr	r1, [pc, #576]	; (8010c70 <udpClient_connect+0x2a4>)
 8010a2e:	3312      	adds	r3, #18
 8010a30:	009b      	lsls	r3, r3, #2
 8010a32:	440b      	add	r3, r1
 8010a34:	78db      	ldrb	r3, [r3, #3]
 8010a36:	0619      	lsls	r1, r3, #24
 8010a38:	79fb      	ldrb	r3, [r7, #7]
 8010a3a:	488d      	ldr	r0, [pc, #564]	; (8010c70 <udpClient_connect+0x2a4>)
 8010a3c:	009b      	lsls	r3, r3, #2
 8010a3e:	4403      	add	r3, r0
 8010a40:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8010a44:	041b      	lsls	r3, r3, #16
 8010a46:	4319      	orrs	r1, r3
 8010a48:	79fb      	ldrb	r3, [r7, #7]
 8010a4a:	4889      	ldr	r0, [pc, #548]	; (8010c70 <udpClient_connect+0x2a4>)
 8010a4c:	009b      	lsls	r3, r3, #2
 8010a4e:	4403      	add	r3, r0
 8010a50:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010a54:	021b      	lsls	r3, r3, #8
 8010a56:	4319      	orrs	r1, r3
 8010a58:	79fb      	ldrb	r3, [r7, #7]
 8010a5a:	4885      	ldr	r0, [pc, #532]	; (8010c70 <udpClient_connect+0x2a4>)
 8010a5c:	009b      	lsls	r3, r3, #2
 8010a5e:	4403      	add	r3, r0
 8010a60:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010a64:	430b      	orrs	r3, r1
 8010a66:	021b      	lsls	r3, r3, #8
 8010a68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010a6c:	431a      	orrs	r2, r3
 8010a6e:	79fb      	ldrb	r3, [r7, #7]
 8010a70:	497f      	ldr	r1, [pc, #508]	; (8010c70 <udpClient_connect+0x2a4>)
 8010a72:	3312      	adds	r3, #18
 8010a74:	009b      	lsls	r3, r3, #2
 8010a76:	440b      	add	r3, r1
 8010a78:	78db      	ldrb	r3, [r3, #3]
 8010a7a:	0619      	lsls	r1, r3, #24
 8010a7c:	79fb      	ldrb	r3, [r7, #7]
 8010a7e:	487c      	ldr	r0, [pc, #496]	; (8010c70 <udpClient_connect+0x2a4>)
 8010a80:	009b      	lsls	r3, r3, #2
 8010a82:	4403      	add	r3, r0
 8010a84:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8010a88:	041b      	lsls	r3, r3, #16
 8010a8a:	4319      	orrs	r1, r3
 8010a8c:	79fb      	ldrb	r3, [r7, #7]
 8010a8e:	4878      	ldr	r0, [pc, #480]	; (8010c70 <udpClient_connect+0x2a4>)
 8010a90:	009b      	lsls	r3, r3, #2
 8010a92:	4403      	add	r3, r0
 8010a94:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010a98:	021b      	lsls	r3, r3, #8
 8010a9a:	4319      	orrs	r1, r3
 8010a9c:	79fb      	ldrb	r3, [r7, #7]
 8010a9e:	4874      	ldr	r0, [pc, #464]	; (8010c70 <udpClient_connect+0x2a4>)
 8010aa0:	009b      	lsls	r3, r3, #2
 8010aa2:	4403      	add	r3, r0
 8010aa4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010aa8:	430b      	orrs	r3, r1
 8010aaa:	0a1b      	lsrs	r3, r3, #8
 8010aac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010ab0:	ea42 0103 	orr.w	r1, r2, r3
 8010ab4:	79fb      	ldrb	r3, [r7, #7]
 8010ab6:	4a6e      	ldr	r2, [pc, #440]	; (8010c70 <udpClient_connect+0x2a4>)
 8010ab8:	3312      	adds	r3, #18
 8010aba:	009b      	lsls	r3, r3, #2
 8010abc:	4413      	add	r3, r2
 8010abe:	78db      	ldrb	r3, [r3, #3]
 8010ac0:	061a      	lsls	r2, r3, #24
 8010ac2:	79fb      	ldrb	r3, [r7, #7]
 8010ac4:	486a      	ldr	r0, [pc, #424]	; (8010c70 <udpClient_connect+0x2a4>)
 8010ac6:	009b      	lsls	r3, r3, #2
 8010ac8:	4403      	add	r3, r0
 8010aca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8010ace:	041b      	lsls	r3, r3, #16
 8010ad0:	431a      	orrs	r2, r3
 8010ad2:	79fb      	ldrb	r3, [r7, #7]
 8010ad4:	4866      	ldr	r0, [pc, #408]	; (8010c70 <udpClient_connect+0x2a4>)
 8010ad6:	009b      	lsls	r3, r3, #2
 8010ad8:	4403      	add	r3, r0
 8010ada:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010ade:	021b      	lsls	r3, r3, #8
 8010ae0:	431a      	orrs	r2, r3
 8010ae2:	79fb      	ldrb	r3, [r7, #7]
 8010ae4:	4862      	ldr	r0, [pc, #392]	; (8010c70 <udpClient_connect+0x2a4>)
 8010ae6:	009b      	lsls	r3, r3, #2
 8010ae8:	4403      	add	r3, r0
 8010aea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010aee:	4313      	orrs	r3, r2
 8010af0:	0e1a      	lsrs	r2, r3, #24
 8010af2:	79fb      	ldrb	r3, [r7, #7]
 8010af4:	430a      	orrs	r2, r1
 8010af6:	495f      	ldr	r1, [pc, #380]	; (8010c74 <udpClient_connect+0x2a8>)
 8010af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 8010afc:	79fb      	ldrb	r3, [r7, #7]
 8010afe:	79fa      	ldrb	r2, [r7, #7]
 8010b00:	495b      	ldr	r1, [pc, #364]	; (8010c70 <udpClient_connect+0x2a4>)
 8010b02:	009b      	lsls	r3, r3, #2
 8010b04:	440b      	add	r3, r1
 8010b06:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	; 0xfc
 8010b0a:	4b5b      	ldr	r3, [pc, #364]	; (8010c78 <udpClient_connect+0x2ac>)
 8010b0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8010b10:	79fb      	ldrb	r3, [r7, #7]
 8010b12:	3301      	adds	r3, #1
 8010b14:	71fb      	strb	r3, [r7, #7]
 8010b16:	4b56      	ldr	r3, [pc, #344]	; (8010c70 <udpClient_connect+0x2a4>)
 8010b18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010b1c:	79fa      	ldrb	r2, [r7, #7]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	f4ff af64 	bcc.w	80109ec <udpClient_connect+0x20>
		break;
 8010b24:	e09f      	b.n	8010c66 <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 8010b26:	2300      	movs	r3, #0
 8010b28:	71fb      	strb	r3, [r7, #7]
 8010b2a:	e094      	b.n	8010c56 <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 8010b2c:	79fb      	ldrb	r3, [r7, #7]
 8010b2e:	4a50      	ldr	r2, [pc, #320]	; (8010c70 <udpClient_connect+0x2a4>)
 8010b30:	33ae      	adds	r3, #174	; 0xae
 8010b32:	009b      	lsls	r3, r3, #2
 8010b34:	4413      	add	r3, r2
 8010b36:	785b      	ldrb	r3, [r3, #1]
 8010b38:	061a      	lsls	r2, r3, #24
 8010b3a:	79fb      	ldrb	r3, [r7, #7]
 8010b3c:	494c      	ldr	r1, [pc, #304]	; (8010c70 <udpClient_connect+0x2a4>)
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	440b      	add	r3, r1
 8010b42:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8010b46:	041b      	lsls	r3, r3, #16
 8010b48:	431a      	orrs	r2, r3
 8010b4a:	79fb      	ldrb	r3, [r7, #7]
 8010b4c:	4948      	ldr	r1, [pc, #288]	; (8010c70 <udpClient_connect+0x2a4>)
 8010b4e:	009b      	lsls	r3, r3, #2
 8010b50:	440b      	add	r3, r1
 8010b52:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8010b56:	021b      	lsls	r3, r3, #8
 8010b58:	431a      	orrs	r2, r3
 8010b5a:	79fb      	ldrb	r3, [r7, #7]
 8010b5c:	4944      	ldr	r1, [pc, #272]	; (8010c70 <udpClient_connect+0x2a4>)
 8010b5e:	009b      	lsls	r3, r3, #2
 8010b60:	440b      	add	r3, r1
 8010b62:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 8010b66:	4313      	orrs	r3, r2
 8010b68:	061a      	lsls	r2, r3, #24
 8010b6a:	79fb      	ldrb	r3, [r7, #7]
 8010b6c:	4940      	ldr	r1, [pc, #256]	; (8010c70 <udpClient_connect+0x2a4>)
 8010b6e:	33ae      	adds	r3, #174	; 0xae
 8010b70:	009b      	lsls	r3, r3, #2
 8010b72:	440b      	add	r3, r1
 8010b74:	785b      	ldrb	r3, [r3, #1]
 8010b76:	0619      	lsls	r1, r3, #24
 8010b78:	79fb      	ldrb	r3, [r7, #7]
 8010b7a:	483d      	ldr	r0, [pc, #244]	; (8010c70 <udpClient_connect+0x2a4>)
 8010b7c:	009b      	lsls	r3, r3, #2
 8010b7e:	4403      	add	r3, r0
 8010b80:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8010b84:	041b      	lsls	r3, r3, #16
 8010b86:	4319      	orrs	r1, r3
 8010b88:	79fb      	ldrb	r3, [r7, #7]
 8010b8a:	4839      	ldr	r0, [pc, #228]	; (8010c70 <udpClient_connect+0x2a4>)
 8010b8c:	009b      	lsls	r3, r3, #2
 8010b8e:	4403      	add	r3, r0
 8010b90:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8010b94:	021b      	lsls	r3, r3, #8
 8010b96:	4319      	orrs	r1, r3
 8010b98:	79fb      	ldrb	r3, [r7, #7]
 8010b9a:	4835      	ldr	r0, [pc, #212]	; (8010c70 <udpClient_connect+0x2a4>)
 8010b9c:	009b      	lsls	r3, r3, #2
 8010b9e:	4403      	add	r3, r0
 8010ba0:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 8010ba4:	430b      	orrs	r3, r1
 8010ba6:	021b      	lsls	r3, r3, #8
 8010ba8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010bac:	431a      	orrs	r2, r3
 8010bae:	79fb      	ldrb	r3, [r7, #7]
 8010bb0:	492f      	ldr	r1, [pc, #188]	; (8010c70 <udpClient_connect+0x2a4>)
 8010bb2:	33ae      	adds	r3, #174	; 0xae
 8010bb4:	009b      	lsls	r3, r3, #2
 8010bb6:	440b      	add	r3, r1
 8010bb8:	785b      	ldrb	r3, [r3, #1]
 8010bba:	0619      	lsls	r1, r3, #24
 8010bbc:	79fb      	ldrb	r3, [r7, #7]
 8010bbe:	482c      	ldr	r0, [pc, #176]	; (8010c70 <udpClient_connect+0x2a4>)
 8010bc0:	009b      	lsls	r3, r3, #2
 8010bc2:	4403      	add	r3, r0
 8010bc4:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8010bc8:	041b      	lsls	r3, r3, #16
 8010bca:	4319      	orrs	r1, r3
 8010bcc:	79fb      	ldrb	r3, [r7, #7]
 8010bce:	4828      	ldr	r0, [pc, #160]	; (8010c70 <udpClient_connect+0x2a4>)
 8010bd0:	009b      	lsls	r3, r3, #2
 8010bd2:	4403      	add	r3, r0
 8010bd4:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8010bd8:	021b      	lsls	r3, r3, #8
 8010bda:	4319      	orrs	r1, r3
 8010bdc:	79fb      	ldrb	r3, [r7, #7]
 8010bde:	4824      	ldr	r0, [pc, #144]	; (8010c70 <udpClient_connect+0x2a4>)
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	4403      	add	r3, r0
 8010be4:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 8010be8:	430b      	orrs	r3, r1
 8010bea:	0a1b      	lsrs	r3, r3, #8
 8010bec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010bf0:	ea42 0103 	orr.w	r1, r2, r3
 8010bf4:	79fb      	ldrb	r3, [r7, #7]
 8010bf6:	4a1e      	ldr	r2, [pc, #120]	; (8010c70 <udpClient_connect+0x2a4>)
 8010bf8:	33ae      	adds	r3, #174	; 0xae
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	4413      	add	r3, r2
 8010bfe:	785b      	ldrb	r3, [r3, #1]
 8010c00:	061a      	lsls	r2, r3, #24
 8010c02:	79fb      	ldrb	r3, [r7, #7]
 8010c04:	481a      	ldr	r0, [pc, #104]	; (8010c70 <udpClient_connect+0x2a4>)
 8010c06:	009b      	lsls	r3, r3, #2
 8010c08:	4403      	add	r3, r0
 8010c0a:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8010c0e:	041b      	lsls	r3, r3, #16
 8010c10:	431a      	orrs	r2, r3
 8010c12:	79fb      	ldrb	r3, [r7, #7]
 8010c14:	4816      	ldr	r0, [pc, #88]	; (8010c70 <udpClient_connect+0x2a4>)
 8010c16:	009b      	lsls	r3, r3, #2
 8010c18:	4403      	add	r3, r0
 8010c1a:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8010c1e:	021b      	lsls	r3, r3, #8
 8010c20:	431a      	orrs	r2, r3
 8010c22:	79fb      	ldrb	r3, [r7, #7]
 8010c24:	4812      	ldr	r0, [pc, #72]	; (8010c70 <udpClient_connect+0x2a4>)
 8010c26:	009b      	lsls	r3, r3, #2
 8010c28:	4403      	add	r3, r0
 8010c2a:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	0e1a      	lsrs	r2, r3, #24
 8010c32:	79fb      	ldrb	r3, [r7, #7]
 8010c34:	430a      	orrs	r2, r1
 8010c36:	490f      	ldr	r1, [pc, #60]	; (8010c74 <udpClient_connect+0x2a8>)
 8010c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 8010c3c:	79fb      	ldrb	r3, [r7, #7]
 8010c3e:	79fa      	ldrb	r2, [r7, #7]
 8010c40:	490b      	ldr	r1, [pc, #44]	; (8010c70 <udpClient_connect+0x2a4>)
 8010c42:	009b      	lsls	r3, r3, #2
 8010c44:	440b      	add	r3, r1
 8010c46:	f8b3 12e0 	ldrh.w	r1, [r3, #736]	; 0x2e0
 8010c4a:	4b0b      	ldr	r3, [pc, #44]	; (8010c78 <udpClient_connect+0x2ac>)
 8010c4c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 8010c50:	79fb      	ldrb	r3, [r7, #7]
 8010c52:	3301      	adds	r3, #1
 8010c54:	71fb      	strb	r3, [r7, #7]
 8010c56:	4b06      	ldr	r3, [pc, #24]	; (8010c70 <udpClient_connect+0x2a4>)
 8010c58:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010c5c:	79fa      	ldrb	r2, [r7, #7]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	f4ff af64 	bcc.w	8010b2c <udpClient_connect+0x160>
		break;
 8010c64:	bf00      	nop
	}
}
 8010c66:	370c      	adds	r7, #12
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6e:	4770      	bx	lr
 8010c70:	20000504 	.word	0x20000504
 8010c74:	200069b8 	.word	0x200069b8
 8010c78:	20006a0c 	.word	0x20006a0c

08010c7c <udpClient_send>:
void udpClient_send(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b086      	sub	sp, #24
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	60f8      	str	r0, [r7, #12]
 8010c84:	460b      	mov	r3, r1
 8010c86:	607a      	str	r2, [r7, #4]
 8010c88:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8010c8e:	7afb      	ldrb	r3, [r7, #11]
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c96:	4619      	mov	r1, r3
 8010c98:	2036      	movs	r0, #54	; 0x36
 8010c9a:	f011 ff8d 	bl	8022bb8 <pbuf_alloc>
 8010c9e:	6138      	str	r0, [r7, #16]

	//	char *SendingIP = ipaddr_ntoa(&IP_addr);
	//
	//	printf("\nSent IP:%s\n",SendingIP);

	if (txBuf != NULL)
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d01d      	beq.n	8010ce2 <udpClient_send+0x66>
	{
		pbuf_take(txBuf, data, len);
 8010ca6:	7afb      	ldrb	r3, [r7, #11]
 8010ca8:	b29b      	uxth	r3, r3
 8010caa:	461a      	mov	r2, r3
 8010cac:	68f9      	ldr	r1, [r7, #12]
 8010cae:	6938      	ldr	r0, [r7, #16]
 8010cb0:	f012 fc5e 	bl	8023570 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 8010cb4:	4b0d      	ldr	r3, [pc, #52]	; (8010cec <udpClient_send+0x70>)
 8010cb6:	6818      	ldr	r0, [r3, #0]
 8010cb8:	4b0d      	ldr	r3, [pc, #52]	; (8010cf0 <udpClient_send+0x74>)
 8010cba:	881b      	ldrh	r3, [r3, #0]
 8010cbc:	1d3a      	adds	r2, r7, #4
 8010cbe:	6939      	ldr	r1, [r7, #16]
 8010cc0:	f012 fffe 	bl	8023cc0 <udp_sendto>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 8010cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d005      	beq.n	8010cdc <udpClient_send+0x60>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 8010cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	4807      	ldr	r0, [pc, #28]	; (8010cf4 <udpClient_send+0x78>)
 8010cd8:	f015 ff88 	bl	8026bec <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 8010cdc:	6938      	ldr	r0, [r7, #16]
 8010cde:	f012 fa4d 	bl	802317c <pbuf_free>
	}
}
 8010ce2:	bf00      	nop
 8010ce4:	3718      	adds	r7, #24
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	20006a34 	.word	0x20006a34
 8010cf0:	20006a0c 	.word	0x20006a0c
 8010cf4:	0802b4c0 	.word	0x0802b4c0

08010cf8 <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 8010cfc:	4b07      	ldr	r3, [pc, #28]	; (8010d1c <Is_There_EI_Data+0x24>)
 8010cfe:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 8010d02:	4b06      	ldr	r3, [pc, #24]	; (8010d1c <Is_There_EI_Data+0x24>)
 8010d04:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d001      	beq.n	8010d10 <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	e000      	b.n	8010d12 <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 8010d10:	2300      	movs	r3, #0
	}
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	46bd      	mov	sp, r7
 8010d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1a:	4770      	bx	lr
 8010d1c:	200063b4 	.word	0x200063b4

08010d20 <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 8010d26:	4b15      	ldr	r3, [pc, #84]	; (8010d7c <Get_Eth_Byte+0x5c>)
 8010d28:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 8010d2c:	1c5a      	adds	r2, r3, #1
 8010d2e:	b291      	uxth	r1, r2
 8010d30:	4a12      	ldr	r2, [pc, #72]	; (8010d7c <Get_Eth_Byte+0x5c>)
 8010d32:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 8010d36:	461a      	mov	r2, r3
 8010d38:	4b10      	ldr	r3, [pc, #64]	; (8010d7c <Get_Eth_Byte+0x5c>)
 8010d3a:	5c9b      	ldrb	r3, [r3, r2]
 8010d3c:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 8010d3e:	4b0f      	ldr	r3, [pc, #60]	; (8010d7c <Get_Eth_Byte+0x5c>)
 8010d40:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 8010d44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010d48:	d313      	bcc.n	8010d72 <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 8010d4a:	4b0c      	ldr	r3, [pc, #48]	; (8010d7c <Get_Eth_Byte+0x5c>)
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 8010d52:	4b0a      	ldr	r3, [pc, #40]	; (8010d7c <Get_Eth_Byte+0x5c>)
 8010d54:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010d58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010d5c:	d109      	bne.n	8010d72 <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 8010d5e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8010d62:	2100      	movs	r1, #0
 8010d64:	4805      	ldr	r0, [pc, #20]	; (8010d7c <Get_Eth_Byte+0x5c>)
 8010d66:	f015 fe59 	bl	8026a1c <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 8010d6a:	4b04      	ldr	r3, [pc, #16]	; (8010d7c <Get_Eth_Byte+0x5c>)
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 8010d72:	79fb      	ldrb	r3, [r7, #7]
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3708      	adds	r7, #8
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}
 8010d7c:	200063b4 	.word	0x200063b4

08010d80 <Udp_Send_SigInfo>:

void Udp_Send_SigInfo(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b086      	sub	sp, #24
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	60f8      	str	r0, [r7, #12]
 8010d88:	460b      	mov	r3, r1
 8010d8a:	607a      	str	r2, [r7, #4]
 8010d8c:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8010d92:	7afb      	ldrb	r3, [r7, #11]
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	2036      	movs	r0, #54	; 0x36
 8010d9e:	f011 ff0b 	bl	8022bb8 <pbuf_alloc>
 8010da2:	6138      	str	r0, [r7, #16]

	if (txBuf != NULL)
 8010da4:	693b      	ldr	r3, [r7, #16]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d01a      	beq.n	8010de0 <Udp_Send_SigInfo+0x60>
	{
		pbuf_take(txBuf, data, len);
 8010daa:	7afb      	ldrb	r3, [r7, #11]
 8010dac:	b29b      	uxth	r3, r3
 8010dae:	461a      	mov	r2, r3
 8010db0:	68f9      	ldr	r1, [r7, #12]
 8010db2:	6938      	ldr	r0, [r7, #16]
 8010db4:	f012 fbdc 	bl	8023570 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,12345);
 8010db8:	4b0b      	ldr	r3, [pc, #44]	; (8010de8 <Udp_Send_SigInfo+0x68>)
 8010dba:	6818      	ldr	r0, [r3, #0]
 8010dbc:	1d3a      	adds	r2, r7, #4
 8010dbe:	f243 0339 	movw	r3, #12345	; 0x3039
 8010dc2:	6939      	ldr	r1, [r7, #16]
 8010dc4:	f012 ff7c 	bl	8023cc0 <udp_sendto>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 8010dcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d002      	beq.n	8010dda <Udp_Send_SigInfo+0x5a>
		{
			printf("Packet Sent Failure\n");
 8010dd4:	4805      	ldr	r0, [pc, #20]	; (8010dec <Udp_Send_SigInfo+0x6c>)
 8010dd6:	f015 ffa5 	bl	8026d24 <puts>
		}
		pbuf_free(txBuf);
 8010dda:	6938      	ldr	r0, [r7, #16]
 8010ddc:	f012 f9ce 	bl	802317c <pbuf_free>
	}
}
 8010de0:	bf00      	nop
 8010de2:	3718      	adds	r7, #24
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	20006a34 	.word	0x20006a34
 8010dec:	0802b4e8 	.word	0x0802b4e8

08010df0 <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b094      	sub	sp, #80	; 0x50
 8010df4:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8010df6:	4b38      	ldr	r3, [pc, #224]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010df8:	4a38      	ldr	r2, [pc, #224]	; (8010edc <MX_CAN2_Init+0xec>)
 8010dfa:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 8010dfc:	4b36      	ldr	r3, [pc, #216]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010dfe:	2212      	movs	r2, #18
 8010e00:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8010e02:	4b35      	ldr	r3, [pc, #212]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010e04:	2200      	movs	r2, #0
 8010e06:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8010e08:	4b33      	ldr	r3, [pc, #204]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010e0a:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8010e0e:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8010e10:	4b31      	ldr	r3, [pc, #196]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010e12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010e16:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8010e18:	4b2f      	ldr	r3, [pc, #188]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010e1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010e1e:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8010e20:	4b2d      	ldr	r3, [pc, #180]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010e22:	2200      	movs	r2, #0
 8010e24:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8010e26:	4b2c      	ldr	r3, [pc, #176]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010e28:	2200      	movs	r2, #0
 8010e2a:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8010e2c:	4b2a      	ldr	r3, [pc, #168]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010e2e:	2200      	movs	r2, #0
 8010e30:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 8010e32:	4b29      	ldr	r3, [pc, #164]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010e34:	2201      	movs	r2, #1
 8010e36:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8010e38:	4b27      	ldr	r3, [pc, #156]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8010e3e:	4b26      	ldr	r3, [pc, #152]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010e40:	2200      	movs	r2, #0
 8010e42:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8010e44:	4824      	ldr	r0, [pc, #144]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010e46:	f008 fef7 	bl	8019c38 <HAL_CAN_Init>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d001      	beq.n	8010e54 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 8010e50:	f007 f8c8 	bl	8017fe4 <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 8010e54:	2301      	movs	r3, #1
 8010e56:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 8010e58:	2304      	movs	r3, #4
 8010e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 8010e60:	f242 0360 	movw	r3, #8288	; 0x2060
 8010e64:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 8010e66:	2300      	movs	r3, #0
 8010e68:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 8010e6a:	f242 0360 	movw	r3, #8288	; 0x2060
 8010e6e:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 8010e70:	2300      	movs	r3, #0
 8010e72:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 8010e74:	2301      	movs	r3, #1
 8010e76:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8010e78:	2301      	movs	r3, #1
 8010e7a:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 8010e7c:	2302      	movs	r3, #2
 8010e7e:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 8010e80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e84:	4619      	mov	r1, r3
 8010e86:	4814      	ldr	r0, [pc, #80]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010e88:	f009 f81c 	bl	8019ec4 <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 8010e90:	2305      	movs	r3, #5
 8010e92:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8010e94:	2301      	movs	r3, #1
 8010e96:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 8010e98:	f242 1320 	movw	r3, #8480	; 0x2120
 8010e9c:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 8010ea2:	f242 1320 	movw	r3, #8480	; 0x2120
 8010ea6:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 8010eac:	2301      	movs	r3, #1
 8010eae:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 8010eb4:	2302      	movs	r3, #2
 8010eb6:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 8010eb8:	463b      	mov	r3, r7
 8010eba:	4619      	mov	r1, r3
 8010ebc:	4806      	ldr	r0, [pc, #24]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010ebe:	f009 f801 	bl	8019ec4 <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 8010ec2:	4805      	ldr	r0, [pc, #20]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010ec4:	f009 f8ea 	bl	801a09c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 8010ec8:	2110      	movs	r1, #16
 8010eca:	4803      	ldr	r0, [pc, #12]	; (8010ed8 <MX_CAN2_Init+0xe8>)
 8010ecc:	f009 fb30 	bl	801a530 <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 8010ed0:	bf00      	nop
 8010ed2:	3750      	adds	r7, #80	; 0x50
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}
 8010ed8:	2000b2f4 	.word	0x2000b2f4
 8010edc:	40006800 	.word	0x40006800

08010ee0 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b08a      	sub	sp, #40	; 0x28
 8010ee4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 8010ee6:	4b34      	ldr	r3, [pc, #208]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010ee8:	4a34      	ldr	r2, [pc, #208]	; (8010fbc <MX_CAN3_Init+0xdc>)
 8010eea:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 8010eec:	4b32      	ldr	r3, [pc, #200]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010eee:	2205      	movs	r2, #5
 8010ef0:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 8010ef2:	4b31      	ldr	r3, [pc, #196]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8010ef8:	4b2f      	ldr	r3, [pc, #188]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010efa:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8010efe:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 8010f00:	4b2d      	ldr	r3, [pc, #180]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f02:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8010f06:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 8010f08:	4b2b      	ldr	r3, [pc, #172]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 8010f0e:	4b2a      	ldr	r3, [pc, #168]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f10:	4a2a      	ldr	r2, [pc, #168]	; (8010fbc <MX_CAN3_Init+0xdc>)
 8010f12:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 8010f14:	4b28      	ldr	r3, [pc, #160]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f16:	2212      	movs	r2, #18
 8010f18:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 8010f1a:	4b27      	ldr	r3, [pc, #156]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8010f20:	4b25      	ldr	r3, [pc, #148]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f22:	2200      	movs	r2, #0
 8010f24:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 8010f26:	4b24      	ldr	r3, [pc, #144]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010f2c:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8010f2e:	4b22      	ldr	r3, [pc, #136]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010f34:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 8010f36:	4b20      	ldr	r3, [pc, #128]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f38:	2200      	movs	r2, #0
 8010f3a:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 8010f3c:	4b1e      	ldr	r3, [pc, #120]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f3e:	2200      	movs	r2, #0
 8010f40:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 8010f42:	4b1d      	ldr	r3, [pc, #116]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f44:	2200      	movs	r2, #0
 8010f46:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 8010f48:	4b1b      	ldr	r3, [pc, #108]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 8010f4e:	4b1a      	ldr	r3, [pc, #104]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f50:	2200      	movs	r2, #0
 8010f52:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 8010f54:	4b18      	ldr	r3, [pc, #96]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f56:	2200      	movs	r2, #0
 8010f58:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8010f5a:	4817      	ldr	r0, [pc, #92]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f5c:	f008 fe6c 	bl	8019c38 <HAL_CAN_Init>
 8010f60:	4603      	mov	r3, r0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d001      	beq.n	8010f6a <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 8010f66:	f007 f83d 	bl	8017fe4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 8010f6e:	2301      	movs	r3, #1
 8010f70:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8010f72:	2300      	movs	r3, #0
 8010f74:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 8010f76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010f7a:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 8010f80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010f84:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 8010f86:	2300      	movs	r3, #0
 8010f88:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8010f8e:	2301      	movs	r3, #1
 8010f90:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 8010f92:	2306      	movs	r3, #6
 8010f94:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 8010f96:	463b      	mov	r3, r7
 8010f98:	4619      	mov	r1, r3
 8010f9a:	4807      	ldr	r0, [pc, #28]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010f9c:	f008 ff92 	bl	8019ec4 <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 8010fa0:	4805      	ldr	r0, [pc, #20]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010fa2:	f009 f87b 	bl	801a09c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 8010fa6:	2102      	movs	r1, #2
 8010fa8:	4803      	ldr	r0, [pc, #12]	; (8010fb8 <MX_CAN3_Init+0xd8>)
 8010faa:	f009 fac1 	bl	801a530 <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 8010fae:	bf00      	nop
 8010fb0:	3728      	adds	r7, #40	; 0x28
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	2000b358 	.word	0x2000b358
 8010fbc:	40003400 	.word	0x40003400

08010fc0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b08c      	sub	sp, #48	; 0x30
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010fc8:	f107 031c 	add.w	r3, r7, #28
 8010fcc:	2200      	movs	r2, #0
 8010fce:	601a      	str	r2, [r3, #0]
 8010fd0:	605a      	str	r2, [r3, #4]
 8010fd2:	609a      	str	r2, [r3, #8]
 8010fd4:	60da      	str	r2, [r3, #12]
 8010fd6:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	4a44      	ldr	r2, [pc, #272]	; (80110f0 <HAL_CAN_MspInit+0x130>)
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d144      	bne.n	801106c <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 8010fe2:	4b44      	ldr	r3, [pc, #272]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 8010fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fe6:	4a43      	ldr	r2, [pc, #268]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 8010fe8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010fec:	6413      	str	r3, [r2, #64]	; 0x40
 8010fee:	4b41      	ldr	r3, [pc, #260]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 8010ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ff2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010ff6:	61bb      	str	r3, [r7, #24]
 8010ff8:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 8010ffa:	4b3e      	ldr	r3, [pc, #248]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 8010ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ffe:	4a3d      	ldr	r2, [pc, #244]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 8011000:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011004:	6413      	str	r3, [r2, #64]	; 0x40
 8011006:	4b3b      	ldr	r3, [pc, #236]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 8011008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801100a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801100e:	617b      	str	r3, [r7, #20]
 8011010:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8011012:	4b38      	ldr	r3, [pc, #224]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 8011014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011016:	4a37      	ldr	r2, [pc, #220]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 8011018:	f043 0302 	orr.w	r3, r3, #2
 801101c:	6313      	str	r3, [r2, #48]	; 0x30
 801101e:	4b35      	ldr	r3, [pc, #212]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 8011020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011022:	f003 0302 	and.w	r3, r3, #2
 8011026:	613b      	str	r3, [r7, #16]
 8011028:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 801102a:	2360      	movs	r3, #96	; 0x60
 801102c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801102e:	2302      	movs	r3, #2
 8011030:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011032:	2300      	movs	r3, #0
 8011034:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011036:	2303      	movs	r3, #3
 8011038:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 801103a:	2309      	movs	r3, #9
 801103c:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801103e:	f107 031c 	add.w	r3, r7, #28
 8011042:	4619      	mov	r1, r3
 8011044:	482c      	ldr	r0, [pc, #176]	; (80110f8 <HAL_CAN_MspInit+0x138>)
 8011046:	f00b f8d3 	bl	801c1f0 <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 801104a:	2200      	movs	r2, #0
 801104c:	2104      	movs	r1, #4
 801104e:	2040      	movs	r0, #64	; 0x40
 8011050:	f009 fda3 	bl	801ab9a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8011054:	2040      	movs	r0, #64	; 0x40
 8011056:	f009 fdbc 	bl	801abd2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 801105a:	2201      	movs	r2, #1
 801105c:	2104      	movs	r1, #4
 801105e:	2041      	movs	r0, #65	; 0x41
 8011060:	f009 fd9b 	bl	801ab9a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8011064:	2041      	movs	r0, #65	; 0x41
 8011066:	f009 fdb4 	bl	801abd2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 801106a:	e03d      	b.n	80110e8 <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4a22      	ldr	r2, [pc, #136]	; (80110fc <HAL_CAN_MspInit+0x13c>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d138      	bne.n	80110e8 <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 8011076:	4b1f      	ldr	r3, [pc, #124]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 8011078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801107a:	4a1e      	ldr	r2, [pc, #120]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 801107c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011080:	6413      	str	r3, [r2, #64]	; 0x40
 8011082:	4b1c      	ldr	r3, [pc, #112]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 8011084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801108a:	60fb      	str	r3, [r7, #12]
 801108c:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 801108e:	4b19      	ldr	r3, [pc, #100]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 8011090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011092:	4a18      	ldr	r2, [pc, #96]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 8011094:	f043 0301 	orr.w	r3, r3, #1
 8011098:	6313      	str	r3, [r2, #48]	; 0x30
 801109a:	4b16      	ldr	r3, [pc, #88]	; (80110f4 <HAL_CAN_MspInit+0x134>)
 801109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801109e:	f003 0301 	and.w	r3, r3, #1
 80110a2:	60bb      	str	r3, [r7, #8]
 80110a4:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 80110a6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80110aa:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80110ac:	2302      	movs	r3, #2
 80110ae:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80110b0:	2300      	movs	r3, #0
 80110b2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80110b4:	2303      	movs	r3, #3
 80110b6:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80110b8:	230b      	movs	r3, #11
 80110ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80110bc:	f107 031c 	add.w	r3, r7, #28
 80110c0:	4619      	mov	r1, r3
 80110c2:	480f      	ldr	r0, [pc, #60]	; (8011100 <HAL_CAN_MspInit+0x140>)
 80110c4:	f00b f894 	bl	801c1f0 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 80110c8:	2200      	movs	r2, #0
 80110ca:	2100      	movs	r1, #0
 80110cc:	2069      	movs	r0, #105	; 0x69
 80110ce:	f009 fd64 	bl	801ab9a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 80110d2:	2069      	movs	r0, #105	; 0x69
 80110d4:	f009 fd7d 	bl	801abd2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 80110d8:	2200      	movs	r2, #0
 80110da:	2100      	movs	r1, #0
 80110dc:	206a      	movs	r0, #106	; 0x6a
 80110de:	f009 fd5c 	bl	801ab9a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 80110e2:	206a      	movs	r0, #106	; 0x6a
 80110e4:	f009 fd75 	bl	801abd2 <HAL_NVIC_EnableIRQ>
}
 80110e8:	bf00      	nop
 80110ea:	3730      	adds	r7, #48	; 0x30
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}
 80110f0:	40006800 	.word	0x40006800
 80110f4:	40023800 	.word	0x40023800
 80110f8:	40020400 	.word	0x40020400
 80110fc:	40003400 	.word	0x40003400
 8011100:	40020000 	.word	0x40020000

08011104 <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 8011104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011106:	b087      	sub	sp, #28
 8011108:	af00      	add	r7, sp, #0
 801110a:	4603      	mov	r3, r0
 801110c:	80fb      	strh	r3, [r7, #6]
	void *pp_ptr;
	uint16_t Traverser = 0;
 801110e:	2300      	movs	r3, #0
 8011110:	823b      	strh	r3, [r7, #16]
	uint16_t uc_size = 0;
 8011112:	2300      	movs	r3, #0
 8011114:	82fb      	strh	r3, [r7, #22]



	switch(EI_data.ProtocolType)
 8011116:	4ba1      	ldr	r3, [pc, #644]	; (801139c <TransmitCanPkt+0x298>)
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	3b01      	subs	r3, #1
 801111c:	2b03      	cmp	r3, #3
 801111e:	f200 8344 	bhi.w	80117aa <TransmitCanPkt+0x6a6>
 8011122:	a201      	add	r2, pc, #4	; (adr r2, 8011128 <TransmitCanPkt+0x24>)
 8011124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011128:	08011139 	.word	0x08011139
 801112c:	08011319 	.word	0x08011319
 8011130:	080114b5 	.word	0x080114b5
 8011134:	08011633 	.word	0x08011633
	{

	case HITACHI:
	{
		/* _____________________________ HITACHI ________________________________________ */
		if( (CHECKFLAG(8,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8011138:	4b99      	ldr	r3, [pc, #612]	; (80113a0 <TransmitCanPkt+0x29c>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	0a1b      	lsrs	r3, r3, #8
 801113e:	f003 0301 	and.w	r3, r3, #1
 8011142:	2b00      	cmp	r3, #0
 8011144:	d003      	beq.n	801114e <TransmitCanPkt+0x4a>
		{
			printf("Stopping CAN Transmission\n");
 8011146:	4897      	ldr	r0, [pc, #604]	; (80113a4 <TransmitCanPkt+0x2a0>)
 8011148:	f015 fdec 	bl	8026d24 <puts>
			return;
 801114c:	e32d      	b.n	80117aa <TransmitCanPkt+0x6a6>
		}

		switch((int)Ken_idetifier)
 801114e:	88fb      	ldrh	r3, [r7, #6]
 8011150:	f240 220a 	movw	r2, #522	; 0x20a
 8011154:	4293      	cmp	r3, r2
 8011156:	f300 80d9 	bgt.w	801130c <TransmitCanPkt+0x208>
 801115a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801115e:	dc0d      	bgt.n	801117c <TransmitCanPkt+0x78>
 8011160:	f240 1219 	movw	r2, #281	; 0x119
 8011164:	4293      	cmp	r3, r2
 8011166:	d025      	beq.n	80111b4 <TransmitCanPkt+0xb0>
 8011168:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 801116c:	f340 80ce 	ble.w	801130c <TransmitCanPkt+0x208>
 8011170:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8011174:	2b01      	cmp	r3, #1
 8011176:	f200 80c9 	bhi.w	801130c <TransmitCanPkt+0x208>
 801117a:	e058      	b.n	801122e <TransmitCanPkt+0x12a>
 801117c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8011180:	2b09      	cmp	r3, #9
 8011182:	f200 80c3 	bhi.w	801130c <TransmitCanPkt+0x208>
 8011186:	a201      	add	r2, pc, #4	; (adr r2, 801118c <TransmitCanPkt+0x88>)
 8011188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801118c:	08011253 	.word	0x08011253
 8011190:	08011253 	.word	0x08011253
 8011194:	0801127d 	.word	0x0801127d
 8011198:	0801127d 	.word	0x0801127d
 801119c:	080112a1 	.word	0x080112a1
 80111a0:	0801130d 	.word	0x0801130d
 80111a4:	080112c5 	.word	0x080112c5
 80111a8:	080112c5 	.word	0x080112c5
 80111ac:	080112e9 	.word	0x080112e9
 80111b0:	080112e9 	.word	0x080112e9
		{
		case EI_PROCESS_DATA:
			if(ReorderFlag == RESET)
 80111b4:	4b7c      	ldr	r3, [pc, #496]	; (80113a8 <TransmitCanPkt+0x2a4>)
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d11c      	bne.n	80111f6 <TransmitCanPkt+0xf2>
			{
				vEI_Transver_EI_To_MIE.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 80111bc:	4b77      	ldr	r3, [pc, #476]	; (801139c <TransmitCanPkt+0x298>)
 80111be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80111c2:	b29b      	uxth	r3, r3
 80111c4:	011b      	lsls	r3, r3, #4
 80111c6:	b29a      	uxth	r2, r3
 80111c8:	4b78      	ldr	r3, [pc, #480]	; (80113ac <TransmitCanPkt+0x2a8>)
 80111ca:	801a      	strh	r2, [r3, #0]
				pp_ptr = &vEI_Transver_EI_To_MIE;
 80111cc:	4b77      	ldr	r3, [pc, #476]	; (80113ac <TransmitCanPkt+0x2a8>)
 80111ce:	60fb      	str	r3, [r7, #12]
				uc_size =(vEI_Transver_EI_To_MIE.ActualDataBytes + sizeof(vEI_Transver_EI_To_MIE.ActualDataBytes)); /* +2 is by Considering */
 80111d0:	4b76      	ldr	r3, [pc, #472]	; (80113ac <TransmitCanPkt+0x2a8>)
 80111d2:	881b      	ldrh	r3, [r3, #0]
 80111d4:	3302      	adds	r3, #2
 80111d6:	82fb      	strh	r3, [r7, #22]
				//uc_size = sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t);
				sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 80111d8:	8afb      	ldrh	r3, [r7, #22]
 80111da:	88fa      	ldrh	r2, [r7, #6]
 80111dc:	4619      	mov	r1, r3
 80111de:	68f8      	ldr	r0, [r7, #12]
 80111e0:	f000 fafc 	bl	80117dc <sendCanPkts>
				if(Debug_flag == 1)
 80111e4:	4b72      	ldr	r3, [pc, #456]	; (80113b0 <TransmitCanPkt+0x2ac>)
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	2b01      	cmp	r3, #1
 80111ea:	f040 8091 	bne.w	8011310 <TransmitCanPkt+0x20c>
				{
					printf("SENT SIGNAL DATA TO MIE\n");
 80111ee:	4871      	ldr	r0, [pc, #452]	; (80113b4 <TransmitCanPkt+0x2b0>)
 80111f0:	f015 fd98 	bl	8026d24 <puts>
				if(Debug_flag == 1)
				{
					printf("SENT ReArranged SIGNAL DATA TO MIE\n");
				}
			}
			break;
 80111f4:	e08c      	b.n	8011310 <TransmitCanPkt+0x20c>
				HitachiEI_DataReArranged_st.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 80111f6:	4b69      	ldr	r3, [pc, #420]	; (801139c <TransmitCanPkt+0x298>)
 80111f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80111fc:	b29b      	uxth	r3, r3
 80111fe:	011b      	lsls	r3, r3, #4
 8011200:	b29a      	uxth	r2, r3
 8011202:	4b6d      	ldr	r3, [pc, #436]	; (80113b8 <TransmitCanPkt+0x2b4>)
 8011204:	801a      	strh	r2, [r3, #0]
				pp_ptr = &HitachiEI_DataReArranged_st;
 8011206:	4b6c      	ldr	r3, [pc, #432]	; (80113b8 <TransmitCanPkt+0x2b4>)
 8011208:	60fb      	str	r3, [r7, #12]
				uc_size =(HitachiEI_DataReArranged_st.ActualDataBytes + sizeof(HitachiEI_DataReArranged_st.ActualDataBytes)); /* +2 is by Considering */
 801120a:	4b6b      	ldr	r3, [pc, #428]	; (80113b8 <TransmitCanPkt+0x2b4>)
 801120c:	881b      	ldrh	r3, [r3, #0]
 801120e:	3302      	adds	r3, #2
 8011210:	82fb      	strh	r3, [r7, #22]
				sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8011212:	8afb      	ldrh	r3, [r7, #22]
 8011214:	88fa      	ldrh	r2, [r7, #6]
 8011216:	4619      	mov	r1, r3
 8011218:	68f8      	ldr	r0, [r7, #12]
 801121a:	f000 fadf 	bl	80117dc <sendCanPkts>
				if(Debug_flag == 1)
 801121e:	4b64      	ldr	r3, [pc, #400]	; (80113b0 <TransmitCanPkt+0x2ac>)
 8011220:	781b      	ldrb	r3, [r3, #0]
 8011222:	2b01      	cmp	r3, #1
 8011224:	d174      	bne.n	8011310 <TransmitCanPkt+0x20c>
					printf("SENT ReArranged SIGNAL DATA TO MIE\n");
 8011226:	4865      	ldr	r0, [pc, #404]	; (80113bc <TransmitCanPkt+0x2b8>)
 8011228:	f015 fd7c 	bl	8026d24 <puts>
			break;
 801122c:	e070      	b.n	8011310 <TransmitCanPkt+0x20c>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 801122e:	4b64      	ldr	r3, [pc, #400]	; (80113c0 <TransmitCanPkt+0x2bc>)
 8011230:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 8011232:	2316      	movs	r3, #22
 8011234:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8011236:	4b5e      	ldr	r3, [pc, #376]	; (80113b0 <TransmitCanPkt+0x2ac>)
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	2b01      	cmp	r3, #1
 801123c:	d102      	bne.n	8011244 <TransmitCanPkt+0x140>
			{
				printf("\nHealth 2 MIE\n");
 801123e:	4861      	ldr	r0, [pc, #388]	; (80113c4 <TransmitCanPkt+0x2c0>)
 8011240:	f015 fd70 	bl	8026d24 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8011244:	8afb      	ldrh	r3, [r7, #22]
 8011246:	88fa      	ldrh	r2, [r7, #6]
 8011248:	4619      	mov	r1, r3
 801124a:	68f8      	ldr	r0, [r7, #12]
 801124c:	f000 fac6 	bl	80117dc <sendCanPkts>
			break;
 8011250:	e061      	b.n	8011316 <TransmitCanPkt+0x212>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Temp_Tx_Ei_self_sharing_st;
 8011252:	4b5d      	ldr	r3, [pc, #372]	; (80113c8 <TransmitCanPkt+0x2c4>)
 8011254:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(EI_SELF_SHARING_t);
 8011256:	2318      	movs	r3, #24
 8011258:	82fb      	strh	r3, [r7, #22]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 801125a:	8afb      	ldrh	r3, [r7, #22]
 801125c:	88fa      	ldrh	r2, [r7, #6]
 801125e:	4619      	mov	r1, r3
 8011260:	68f8      	ldr	r0, [r7, #12]
 8011262:	f000 fabb 	bl	80117dc <sendCanPkts>
			if(Debug_flag == 1)
 8011266:	4b52      	ldr	r3, [pc, #328]	; (80113b0 <TransmitCanPkt+0x2ac>)
 8011268:	781b      	ldrb	r3, [r3, #0]
 801126a:	2b01      	cmp	r3, #1
 801126c:	d152      	bne.n	8011314 <TransmitCanPkt+0x210>
			{
				printf("Sent2_O:%u\n",Temp_Tx_Ei_self_sharing_st.Peer_Index);
 801126e:	4b56      	ldr	r3, [pc, #344]	; (80113c8 <TransmitCanPkt+0x2c4>)
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	4619      	mov	r1, r3
 8011274:	4855      	ldr	r0, [pc, #340]	; (80113cc <TransmitCanPkt+0x2c8>)
 8011276:	f015 fcb9 	bl	8026bec <iprintf>
			}
			break;
 801127a:	e04b      	b.n	8011314 <TransmitCanPkt+0x210>

		case SEND_VITAL_MSG_1:
		case SEND_VITAL_MSG_2:
			pp_ptr = &Tx_VITAL_MSG_CAN_st;
 801127c:	4b54      	ldr	r3, [pc, #336]	; (80113d0 <TransmitCanPkt+0x2cc>)
 801127e:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SEND_VITAL_MSG_2_OTH_t);
 8011280:	2346      	movs	r3, #70	; 0x46
 8011282:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8011284:	4b4a      	ldr	r3, [pc, #296]	; (80113b0 <TransmitCanPkt+0x2ac>)
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	2b01      	cmp	r3, #1
 801128a:	d102      	bne.n	8011292 <TransmitCanPkt+0x18e>
			{
				printf("\nSending V-Message 2-O\n");
 801128c:	4851      	ldr	r0, [pc, #324]	; (80113d4 <TransmitCanPkt+0x2d0>)
 801128e:	f015 fd49 	bl	8026d24 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8011292:	8afb      	ldrh	r3, [r7, #22]
 8011294:	88fa      	ldrh	r2, [r7, #6]
 8011296:	4619      	mov	r1, r3
 8011298:	68f8      	ldr	r0, [r7, #12]
 801129a:	f000 fa9f 	bl	80117dc <sendCanPkts>
			break;
 801129e:	e03a      	b.n	8011316 <TransmitCanPkt+0x212>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Hitachi_fault_injection_st;
 80112a0:	4b3f      	ldr	r3, [pc, #252]	; (80113a0 <TransmitCanPkt+0x29c>)
 80112a2:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_INJECTION_t);
 80112a4:	2308      	movs	r3, #8
 80112a6:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 80112a8:	4b41      	ldr	r3, [pc, #260]	; (80113b0 <TransmitCanPkt+0x2ac>)
 80112aa:	781b      	ldrb	r3, [r3, #0]
 80112ac:	2b01      	cmp	r3, #1
 80112ae:	d102      	bne.n	80112b6 <TransmitCanPkt+0x1b2>
			{
				printf("\nSending Fault Injection data 2-O\n");
 80112b0:	4849      	ldr	r0, [pc, #292]	; (80113d8 <TransmitCanPkt+0x2d4>)
 80112b2:	f015 fd37 	bl	8026d24 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 80112b6:	8afb      	ldrh	r3, [r7, #22]
 80112b8:	88fa      	ldrh	r2, [r7, #6]
 80112ba:	4619      	mov	r1, r3
 80112bc:	68f8      	ldr	r0, [r7, #12]
 80112be:	f000 fa8d 	bl	80117dc <sendCanPkts>
			break;
 80112c2:	e028      	b.n	8011316 <TransmitCanPkt+0x212>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Tx_Temp_Main_Relays_st;
 80112c4:	4b45      	ldr	r3, [pc, #276]	; (80113dc <TransmitCanPkt+0x2d8>)
 80112c6:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(RELAYS_t);
 80112c8:	2314      	movs	r3, #20
 80112ca:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 80112cc:	4b38      	ldr	r3, [pc, #224]	; (80113b0 <TransmitCanPkt+0x2ac>)
 80112ce:	781b      	ldrb	r3, [r3, #0]
 80112d0:	2b01      	cmp	r3, #1
 80112d2:	d102      	bne.n	80112da <TransmitCanPkt+0x1d6>
			{
				printf("Sending Relays-O\n");
 80112d4:	4842      	ldr	r0, [pc, #264]	; (80113e0 <TransmitCanPkt+0x2dc>)
 80112d6:	f015 fd25 	bl	8026d24 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80112da:	8afb      	ldrh	r3, [r7, #22]
 80112dc:	88fa      	ldrh	r2, [r7, #6]
 80112de:	4619      	mov	r1, r3
 80112e0:	68f8      	ldr	r0, [r7, #12]
 80112e2:	f000 fa7b 	bl	80117dc <sendCanPkts>
			break;
 80112e6:	e016      	b.n	8011316 <TransmitCanPkt+0x212>

		case DAT_CRC_EXCHANGE_1:
		case DAT_CRC_EXCHANGE_2:
			pp_ptr = &DatCrcXchangeOther_st;
 80112e8:	4b3e      	ldr	r3, [pc, #248]	; (80113e4 <TransmitCanPkt+0x2e0>)
 80112ea:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(DAT_CRC_XCHANGE_t);
 80112ec:	2302      	movs	r3, #2
 80112ee:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 80112f0:	4b2f      	ldr	r3, [pc, #188]	; (80113b0 <TransmitCanPkt+0x2ac>)
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	d102      	bne.n	80112fe <TransmitCanPkt+0x1fa>
			{
				printf("Sending App Data CRC to Other\n");
 80112f8:	483b      	ldr	r0, [pc, #236]	; (80113e8 <TransmitCanPkt+0x2e4>)
 80112fa:	f015 fd13 	bl	8026d24 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80112fe:	8afb      	ldrh	r3, [r7, #22]
 8011300:	88fa      	ldrh	r2, [r7, #6]
 8011302:	4619      	mov	r1, r3
 8011304:	68f8      	ldr	r0, [r7, #12]
 8011306:	f000 fa69 	bl	80117dc <sendCanPkts>
			break;
 801130a:	e004      	b.n	8011316 <TransmitCanPkt+0x212>


		default:
			break;
 801130c:	bf00      	nop
 801130e:	e24c      	b.n	80117aa <TransmitCanPkt+0x6a6>
			break;
 8011310:	bf00      	nop
 8011312:	e24a      	b.n	80117aa <TransmitCanPkt+0x6a6>
			break;
 8011314:	bf00      	nop

		} /* 	switch((int)Ken_idetifier) for HITACHI 	*/
		break; /* case HITACHI: break */
 8011316:	e248      	b.n	80117aa <TransmitCanPkt+0x6a6>
	/* _____________________________ HITACHI ________________________________________ */

	case SIEMENS:
	{
		/* _____________________________ SIEMENS ________________________________________ */
		switch((int)Ken_idetifier)
 8011318:	88fb      	ldrh	r3, [r7, #6]
 801131a:	f240 1219 	movw	r2, #281	; 0x119
 801131e:	4293      	cmp	r3, r2
 8011320:	d028      	beq.n	8011374 <TransmitCanPkt+0x270>
 8011322:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8011326:	f340 80c3 	ble.w	80114b0 <TransmitCanPkt+0x3ac>
 801132a:	f240 220a 	movw	r2, #522	; 0x20a
 801132e:	4293      	cmp	r3, r2
 8011330:	f300 80be 	bgt.w	80114b0 <TransmitCanPkt+0x3ac>
 8011334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011338:	f340 80ba 	ble.w	80114b0 <TransmitCanPkt+0x3ac>
 801133c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8011340:	2b09      	cmp	r3, #9
 8011342:	f200 80b5 	bhi.w	80114b0 <TransmitCanPkt+0x3ac>
 8011346:	a201      	add	r2, pc, #4	; (adr r2, 801134c <TransmitCanPkt+0x248>)
 8011348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801134c:	080113f5 	.word	0x080113f5
 8011350:	080113f5 	.word	0x080113f5
 8011354:	080114b1 	.word	0x080114b1
 8011358:	080114b1 	.word	0x080114b1
 801135c:	08011471 	.word	0x08011471
 8011360:	080114b1 	.word	0x080114b1
 8011364:	08011419 	.word	0x08011419
 8011368:	08011419 	.word	0x08011419
 801136c:	0801148d 	.word	0x0801148d
 8011370:	0801148d 	.word	0x0801148d
		{

		case EI_PROCESS_DATA:
			pp_ptr = &VitalData2MIE_st;
 8011374:	4b1d      	ldr	r3, [pc, #116]	; (80113ec <TransmitCanPkt+0x2e8>)
 8011376:	60fb      	str	r3, [r7, #12]
			//				uc_size = sizeof(VITAL_DATA_t);
			uc_size =(VitalData2MIE_st.NoofDataBytes + sizeof(VitalData2MIE_st.NoofDataBytes)); /* +2 is by Considering */
 8011378:	4b1c      	ldr	r3, [pc, #112]	; (80113ec <TransmitCanPkt+0x2e8>)
 801137a:	881b      	ldrh	r3, [r3, #0]
 801137c:	3302      	adds	r3, #2
 801137e:	82fb      	strh	r3, [r7, #22]

			if(Debug_flag == 1)
 8011380:	4b0b      	ldr	r3, [pc, #44]	; (80113b0 <TransmitCanPkt+0x2ac>)
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	2b01      	cmp	r3, #1
 8011386:	d102      	bne.n	801138e <TransmitCanPkt+0x28a>
			{
				printf("Sending Signals 2 MIE\n");
 8011388:	4819      	ldr	r0, [pc, #100]	; (80113f0 <TransmitCanPkt+0x2ec>)
 801138a:	f015 fccb 	bl	8026d24 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 801138e:	8afb      	ldrh	r3, [r7, #22]
 8011390:	88fa      	ldrh	r2, [r7, #6]
 8011392:	4619      	mov	r1, r3
 8011394:	68f8      	ldr	r0, [r7, #12]
 8011396:	f000 fa21 	bl	80117dc <sendCanPkts>
			break;
 801139a:	e08a      	b.n	80114b2 <TransmitCanPkt+0x3ae>
 801139c:	20000504 	.word	0x20000504
 80113a0:	2000308c 	.word	0x2000308c
 80113a4:	0802b4fc 	.word	0x0802b4fc
 80113a8:	2000254e 	.word	0x2000254e
 80113ac:	20002770 	.word	0x20002770
 80113b0:	20000bbb 	.word	0x20000bbb
 80113b4:	0802b518 	.word	0x0802b518
 80113b8:	20002814 	.word	0x20002814
 80113bc:	0802b530 	.word	0x0802b530
 80113c0:	20003094 	.word	0x20003094
 80113c4:	0802b554 	.word	0x0802b554
 80113c8:	20002f84 	.word	0x20002f84
 80113cc:	0802b564 	.word	0x0802b564
 80113d0:	20002fb4 	.word	0x20002fb4
 80113d4:	0802b570 	.word	0x0802b570
 80113d8:	0802b588 	.word	0x0802b588
 80113dc:	20003740 	.word	0x20003740
 80113e0:	0802b5ac 	.word	0x0802b5ac
 80113e4:	20000bb8 	.word	0x20000bb8
 80113e8:	0802b5c0 	.word	0x0802b5c0
 80113ec:	20004ca8 	.word	0x20004ca8
 80113f0:	0802b5e0 	.word	0x0802b5e0

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Tx_Siemens_self_sharing_st;
 80113f4:	4b9c      	ldr	r3, [pc, #624]	; (8011668 <TransmitCanPkt+0x564>)
 80113f6:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SIEMENS_SELF_SHARING_t);
 80113f8:	2304      	movs	r3, #4
 80113fa:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 80113fc:	4b9b      	ldr	r3, [pc, #620]	; (801166c <TransmitCanPkt+0x568>)
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	2b01      	cmp	r3, #1
 8011402:	d102      	bne.n	801140a <TransmitCanPkt+0x306>
			{
				printf("Sending Signals 2 MIE\n");
 8011404:	489a      	ldr	r0, [pc, #616]	; (8011670 <TransmitCanPkt+0x56c>)
 8011406:	f015 fc8d 	bl	8026d24 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 801140a:	8afb      	ldrh	r3, [r7, #22]
 801140c:	88fa      	ldrh	r2, [r7, #6]
 801140e:	4619      	mov	r1, r3
 8011410:	68f8      	ldr	r0, [r7, #12]
 8011412:	f000 f9e3 	bl	80117dc <sendCanPkts>
			break;
 8011416:	e04c      	b.n	80114b2 <TransmitCanPkt+0x3ae>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &SiemensMain_Relays_st;
 8011418:	4b96      	ldr	r3, [pc, #600]	; (8011674 <TransmitCanPkt+0x570>)
 801141a:	60fb      	str	r3, [r7, #12]

			uc_size = (EI_data.Siemens_st.Booloutputs % 8);
 801141c:	4b96      	ldr	r3, [pc, #600]	; (8011678 <TransmitCanPkt+0x574>)
 801141e:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8011422:	f003 0307 	and.w	r3, r3, #7
 8011426:	82fb      	strh	r3, [r7, #22]
			if (uc_size != 0)
 8011428:	8afb      	ldrh	r3, [r7, #22]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d007      	beq.n	801143e <TransmitCanPkt+0x33a>
			{
				uc_size = ((EI_data.Siemens_st.Booloutputs / 8)) + 1; //	including 0th buffer
 801142e:	4b92      	ldr	r3, [pc, #584]	; (8011678 <TransmitCanPkt+0x574>)
 8011430:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8011434:	08db      	lsrs	r3, r3, #3
 8011436:	b29b      	uxth	r3, r3
 8011438:	3301      	adds	r3, #1
 801143a:	82fb      	strh	r3, [r7, #22]
 801143c:	e004      	b.n	8011448 <TransmitCanPkt+0x344>
			}
			else
			{
				uc_size = (EI_data.Siemens_st.Booloutputs / 8);
 801143e:	4b8e      	ldr	r3, [pc, #568]	; (8011678 <TransmitCanPkt+0x574>)
 8011440:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8011444:	08db      	lsrs	r3, r3, #3
 8011446:	82fb      	strh	r3, [r7, #22]
			}

			SiemensMain_Relays_st.NoofDataBytes = uc_size;
 8011448:	4a8a      	ldr	r2, [pc, #552]	; (8011674 <TransmitCanPkt+0x570>)
 801144a:	8afb      	ldrh	r3, [r7, #22]
 801144c:	8013      	strh	r3, [r2, #0]
			//				printf("NoofDataBytes:%u\n",SiemensMain_Relays_st.NoofDataBytes);
			uc_size = uc_size + ( (sizeof(SiemensMain_Relays_st.NoofDataBytes)) + (sizeof(SiemensMain_Relays_st.VitalCRC)) );
 801144e:	8afb      	ldrh	r3, [r7, #22]
 8011450:	3304      	adds	r3, #4
 8011452:	82fb      	strh	r3, [r7, #22]
			//				printf("Relays2Other:%u\n",uc_size);
			if(Debug_flag == 1)
 8011454:	4b85      	ldr	r3, [pc, #532]	; (801166c <TransmitCanPkt+0x568>)
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	2b01      	cmp	r3, #1
 801145a:	d102      	bne.n	8011462 <TransmitCanPkt+0x35e>
			{
				printf("Sending Relays 2 Other\n");
 801145c:	4887      	ldr	r0, [pc, #540]	; (801167c <TransmitCanPkt+0x578>)
 801145e:	f015 fc61 	bl	8026d24 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8011462:	8afb      	ldrh	r3, [r7, #22]
 8011464:	88fa      	ldrh	r2, [r7, #6]
 8011466:	4619      	mov	r1, r3
 8011468:	68f8      	ldr	r0, [r7, #12]
 801146a:	f000 f9b7 	bl	80117dc <sendCanPkts>
			break;
 801146e:	e020      	b.n	80114b2 <TransmitCanPkt+0x3ae>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Siemens_fault_injection_st;
 8011470:	4b83      	ldr	r3, [pc, #524]	; (8011680 <TransmitCanPkt+0x57c>)
 8011472:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SIEMENS_FAULT_INJECTION_t);
 8011474:	2308      	movs	r3, #8
 8011476:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 8011478:	4882      	ldr	r0, [pc, #520]	; (8011684 <TransmitCanPkt+0x580>)
 801147a:	f015 fc53 	bl	8026d24 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 801147e:	8afb      	ldrh	r3, [r7, #22]
 8011480:	88fa      	ldrh	r2, [r7, #6]
 8011482:	4619      	mov	r1, r3
 8011484:	68f8      	ldr	r0, [r7, #12]
 8011486:	f000 f9a9 	bl	80117dc <sendCanPkts>
			break;
 801148a:	e012      	b.n	80114b2 <TransmitCanPkt+0x3ae>

		case DAT_CRC_EXCHANGE_1:
		case DAT_CRC_EXCHANGE_2:
			pp_ptr = &DatCrcXchangeOther_st;
 801148c:	4b7e      	ldr	r3, [pc, #504]	; (8011688 <TransmitCanPkt+0x584>)
 801148e:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(DAT_CRC_XCHANGE_t);
 8011490:	2302      	movs	r3, #2
 8011492:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8011494:	4b75      	ldr	r3, [pc, #468]	; (801166c <TransmitCanPkt+0x568>)
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	2b01      	cmp	r3, #1
 801149a:	d102      	bne.n	80114a2 <TransmitCanPkt+0x39e>
			{
				printf("Sending App Data CRC to Other\n");
 801149c:	487b      	ldr	r0, [pc, #492]	; (801168c <TransmitCanPkt+0x588>)
 801149e:	f015 fc41 	bl	8026d24 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80114a2:	8afb      	ldrh	r3, [r7, #22]
 80114a4:	88fa      	ldrh	r2, [r7, #6]
 80114a6:	4619      	mov	r1, r3
 80114a8:	68f8      	ldr	r0, [r7, #12]
 80114aa:	f000 f997 	bl	80117dc <sendCanPkts>
			break;
 80114ae:	e000      	b.n	80114b2 <TransmitCanPkt+0x3ae>

		default:
			break;
 80114b0:	bf00      	nop
		}
		break; /* case SIEMENS: break */
 80114b2:	e17a      	b.n	80117aa <TransmitCanPkt+0x6a6>

	case MEDHA:
	{

		/* _____________________________ MEDHA ________________________________________ */
		switch((int)Ken_idetifier)
 80114b4:	88fb      	ldrh	r3, [r7, #6]
 80114b6:	f240 220a 	movw	r2, #522	; 0x20a
 80114ba:	4293      	cmp	r3, r2
 80114bc:	f300 80b5 	bgt.w	801162a <TransmitCanPkt+0x526>
 80114c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80114c4:	dc0d      	bgt.n	80114e2 <TransmitCanPkt+0x3de>
 80114c6:	f240 1219 	movw	r2, #281	; 0x119
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d026      	beq.n	801151c <TransmitCanPkt+0x418>
 80114ce:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80114d2:	f340 80aa 	ble.w	801162a <TransmitCanPkt+0x526>
 80114d6:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80114da:	2b01      	cmp	r3, #1
 80114dc:	f200 80a5 	bhi.w	801162a <TransmitCanPkt+0x526>
 80114e0:	e05f      	b.n	80115a2 <TransmitCanPkt+0x49e>
 80114e2:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80114e6:	2b09      	cmp	r3, #9
 80114e8:	f200 809f 	bhi.w	801162a <TransmitCanPkt+0x526>
 80114ec:	a201      	add	r2, pc, #4	; (adr r2, 80114f4 <TransmitCanPkt+0x3f0>)
 80114ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114f2:	bf00      	nop
 80114f4:	0801157f 	.word	0x0801157f
 80114f8:	0801157f 	.word	0x0801157f
 80114fc:	0801162b 	.word	0x0801162b
 8011500:	0801162b 	.word	0x0801162b
 8011504:	080115c7 	.word	0x080115c7
 8011508:	0801162b 	.word	0x0801162b
 801150c:	080115e3 	.word	0x080115e3
 8011510:	080115e3 	.word	0x080115e3
 8011514:	08011607 	.word	0x08011607
 8011518:	08011607 	.word	0x08011607
		{
		case EI_PROCESS_DATA:
			pp_ptr = &Medha_Relay_Sts_st;
 801151c:	4b5c      	ldr	r3, [pc, #368]	; (8011690 <TransmitCanPkt+0x58c>)
 801151e:	60fb      	str	r3, [r7, #12]

			uint16_t Length =  EI_data.Medha_Prms_st.NoofRelays%8;
 8011520:	4b55      	ldr	r3, [pc, #340]	; (8011678 <TransmitCanPkt+0x574>)
 8011522:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8011526:	b29b      	uxth	r3, r3
 8011528:	f003 0307 	and.w	r3, r3, #7
 801152c:	82bb      	strh	r3, [r7, #20]

			if(Length != 0)
 801152e:	8abb      	ldrh	r3, [r7, #20]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d007      	beq.n	8011544 <TransmitCanPkt+0x440>
			{
				Length = ((EI_data.Medha_Prms_st.NoofRelays)/8) + 1;
 8011534:	4b50      	ldr	r3, [pc, #320]	; (8011678 <TransmitCanPkt+0x574>)
 8011536:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 801153a:	08db      	lsrs	r3, r3, #3
 801153c:	b29b      	uxth	r3, r3
 801153e:	3301      	adds	r3, #1
 8011540:	82bb      	strh	r3, [r7, #20]
 8011542:	e004      	b.n	801154e <TransmitCanPkt+0x44a>
			}
			else
			{
				Length = ((EI_data.Medha_Prms_st.NoofRelays)/8);
 8011544:	4b4c      	ldr	r3, [pc, #304]	; (8011678 <TransmitCanPkt+0x574>)
 8011546:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 801154a:	08db      	lsrs	r3, r3, #3
 801154c:	82bb      	strh	r3, [r7, #20]
			}

			Medha_Relay_Sts_st.ActualDataBytes =  Length;
 801154e:	4a50      	ldr	r2, [pc, #320]	; (8011690 <TransmitCanPkt+0x58c>)
 8011550:	8abb      	ldrh	r3, [r7, #20]
 8011552:	8013      	strh	r3, [r2, #0]
			uc_size =(Length + sizeof(Length)); /* +2 is by Considering */
 8011554:	8abb      	ldrh	r3, [r7, #20]
 8011556:	3302      	adds	r3, #2
 8011558:	82fb      	strh	r3, [r7, #22]

			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 801155a:	8afb      	ldrh	r3, [r7, #22]
 801155c:	88fa      	ldrh	r2, [r7, #6]
 801155e:	4619      	mov	r1, r3
 8011560:	68f8      	ldr	r0, [r7, #12]
 8011562:	f000 f93b 	bl	80117dc <sendCanPkts>
			if(Debug_flag == 1)
 8011566:	4b41      	ldr	r3, [pc, #260]	; (801166c <TransmitCanPkt+0x568>)
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	2b01      	cmp	r3, #1
 801156c:	d15f      	bne.n	801162e <TransmitCanPkt+0x52a>
			{
				printf("SENT MEDHA SIGNAL DATA TO MIE:%lu\n",HAL_GetTick());
 801156e:	f008 fb33 	bl	8019bd8 <HAL_GetTick>
 8011572:	4603      	mov	r3, r0
 8011574:	4619      	mov	r1, r3
 8011576:	4847      	ldr	r0, [pc, #284]	; (8011694 <TransmitCanPkt+0x590>)
 8011578:	f015 fb38 	bl	8026bec <iprintf>
			}
			break;
 801157c:	e057      	b.n	801162e <TransmitCanPkt+0x52a>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Medha_ei_self_sharing_TX_st;
 801157e:	4b46      	ldr	r3, [pc, #280]	; (8011698 <TransmitCanPkt+0x594>)
 8011580:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_EI_SELF_SHARING_t);
 8011582:	2308      	movs	r3, #8
 8011584:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8011586:	4b39      	ldr	r3, [pc, #228]	; (801166c <TransmitCanPkt+0x568>)
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	2b01      	cmp	r3, #1
 801158c:	d102      	bne.n	8011594 <TransmitCanPkt+0x490>
			{
				printf("\nSending_2_O\n");
 801158e:	4843      	ldr	r0, [pc, #268]	; (801169c <TransmitCanPkt+0x598>)
 8011590:	f015 fbc8 	bl	8026d24 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8011594:	8afb      	ldrh	r3, [r7, #22]
 8011596:	88fa      	ldrh	r2, [r7, #6]
 8011598:	4619      	mov	r1, r3
 801159a:	68f8      	ldr	r0, [r7, #12]
 801159c:	f000 f91e 	bl	80117dc <sendCanPkts>
			break;
 80115a0:	e046      	b.n	8011630 <TransmitCanPkt+0x52c>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 80115a2:	4b3f      	ldr	r3, [pc, #252]	; (80116a0 <TransmitCanPkt+0x59c>)
 80115a4:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 80115a6:	2316      	movs	r3, #22
 80115a8:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 80115aa:	4b30      	ldr	r3, [pc, #192]	; (801166c <TransmitCanPkt+0x568>)
 80115ac:	781b      	ldrb	r3, [r3, #0]
 80115ae:	2b01      	cmp	r3, #1
 80115b0:	d102      	bne.n	80115b8 <TransmitCanPkt+0x4b4>
			{
				printf("\nHealth 2 MIE\n");
 80115b2:	483c      	ldr	r0, [pc, #240]	; (80116a4 <TransmitCanPkt+0x5a0>)
 80115b4:	f015 fbb6 	bl	8026d24 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80115b8:	8afb      	ldrh	r3, [r7, #22]
 80115ba:	88fa      	ldrh	r2, [r7, #6]
 80115bc:	4619      	mov	r1, r3
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	f000 f90c 	bl	80117dc <sendCanPkts>
			break;
 80115c4:	e034      	b.n	8011630 <TransmitCanPkt+0x52c>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Medha_Fault_Injection_st;
 80115c6:	4b38      	ldr	r3, [pc, #224]	; (80116a8 <TransmitCanPkt+0x5a4>)
 80115c8:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_FAULT_INJECTION_t);
 80115ca:	2304      	movs	r3, #4
 80115cc:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 80115ce:	482d      	ldr	r0, [pc, #180]	; (8011684 <TransmitCanPkt+0x580>)
 80115d0:	f015 fba8 	bl	8026d24 <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80115d4:	8afb      	ldrh	r3, [r7, #22]
 80115d6:	88fa      	ldrh	r2, [r7, #6]
 80115d8:	4619      	mov	r1, r3
 80115da:	68f8      	ldr	r0, [r7, #12]
 80115dc:	f000 f8fe 	bl	80117dc <sendCanPkts>
			break;
 80115e0:	e026      	b.n	8011630 <TransmitCanPkt+0x52c>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Medha_Cur_Relay_Status_st;
 80115e2:	4b32      	ldr	r3, [pc, #200]	; (80116ac <TransmitCanPkt+0x5a8>)
 80115e4:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_CUR_RELAY_STS_t);
 80115e6:	2384      	movs	r3, #132	; 0x84
 80115e8:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 80115ea:	4b20      	ldr	r3, [pc, #128]	; (801166c <TransmitCanPkt+0x568>)
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	2b01      	cmp	r3, #1
 80115f0:	d102      	bne.n	80115f8 <TransmitCanPkt+0x4f4>
			{
				printf("\nRelay Data 2-O\n");
 80115f2:	482f      	ldr	r0, [pc, #188]	; (80116b0 <TransmitCanPkt+0x5ac>)
 80115f4:	f015 fb96 	bl	8026d24 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80115f8:	8afb      	ldrh	r3, [r7, #22]
 80115fa:	88fa      	ldrh	r2, [r7, #6]
 80115fc:	4619      	mov	r1, r3
 80115fe:	68f8      	ldr	r0, [r7, #12]
 8011600:	f000 f8ec 	bl	80117dc <sendCanPkts>
			break;
 8011604:	e014      	b.n	8011630 <TransmitCanPkt+0x52c>

		case DAT_CRC_EXCHANGE_1:
		case DAT_CRC_EXCHANGE_2:
			pp_ptr = &DatCrcXchangeOther_st;
 8011606:	4b20      	ldr	r3, [pc, #128]	; (8011688 <TransmitCanPkt+0x584>)
 8011608:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(DAT_CRC_XCHANGE_t);
 801160a:	2302      	movs	r3, #2
 801160c:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 801160e:	4b17      	ldr	r3, [pc, #92]	; (801166c <TransmitCanPkt+0x568>)
 8011610:	781b      	ldrb	r3, [r3, #0]
 8011612:	2b01      	cmp	r3, #1
 8011614:	d102      	bne.n	801161c <TransmitCanPkt+0x518>
			{
				printf("Sending App Data CRC to Other\n");
 8011616:	481d      	ldr	r0, [pc, #116]	; (801168c <TransmitCanPkt+0x588>)
 8011618:	f015 fb84 	bl	8026d24 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 801161c:	8afb      	ldrh	r3, [r7, #22]
 801161e:	88fa      	ldrh	r2, [r7, #6]
 8011620:	4619      	mov	r1, r3
 8011622:	68f8      	ldr	r0, [r7, #12]
 8011624:	f000 f8da 	bl	80117dc <sendCanPkts>
			break;
 8011628:	e002      	b.n	8011630 <TransmitCanPkt+0x52c>

		default:
			break;
 801162a:	bf00      	nop
 801162c:	e0bd      	b.n	80117aa <TransmitCanPkt+0x6a6>
			break;
 801162e:	bf00      	nop
		}

		break;
 8011630:	e0bb      	b.n	80117aa <TransmitCanPkt+0x6a6>
		/* _____________________________ MEDHA ________________________________________ */

	}
	case KYOSAN:
	{
		switch((int)Ken_idetifier)
 8011632:	88fb      	ldrh	r3, [r7, #6]
 8011634:	f240 220a 	movw	r2, #522	; 0x20a
 8011638:	4293      	cmp	r3, r2
 801163a:	f300 80b2 	bgt.w	80117a2 <TransmitCanPkt+0x69e>
 801163e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8011642:	f300 809c 	bgt.w	801177e <TransmitCanPkt+0x67a>
 8011646:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 801164a:	f300 80aa 	bgt.w	80117a2 <TransmitCanPkt+0x69e>
 801164e:	f240 2207 	movw	r2, #519	; 0x207
 8011652:	4293      	cmp	r3, r2
 8011654:	da77      	bge.n	8011746 <TransmitCanPkt+0x642>
 8011656:	f240 1219 	movw	r2, #281	; 0x119
 801165a:	4293      	cmp	r3, r2
 801165c:	d02a      	beq.n	80116b4 <TransmitCanPkt+0x5b0>
 801165e:	f240 2205 	movw	r2, #517	; 0x205
 8011662:	4293      	cmp	r3, r2
 8011664:	d07d      	beq.n	8011762 <TransmitCanPkt+0x65e>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
			break;

		default:
			break;
 8011666:	e09c      	b.n	80117a2 <TransmitCanPkt+0x69e>
 8011668:	20004c80 	.word	0x20004c80
 801166c:	20000bbb 	.word	0x20000bbb
 8011670:	0802b5e0 	.word	0x0802b5e0
 8011674:	20004eac 	.word	0x20004eac
 8011678:	20000504 	.word	0x20000504
 801167c:	0802b5f8 	.word	0x0802b5f8
 8011680:	20004c78 	.word	0x20004c78
 8011684:	0802b588 	.word	0x0802b588
 8011688:	20000bb8 	.word	0x20000bb8
 801168c:	0802b5c0 	.word	0x0802b5c0
 8011690:	20003dc0 	.word	0x20003dc0
 8011694:	0802b610 	.word	0x0802b610
 8011698:	20003e04 	.word	0x20003e04
 801169c:	0802b634 	.word	0x0802b634
 80116a0:	20003094 	.word	0x20003094
 80116a4:	0802b554 	.word	0x0802b554
 80116a8:	20003e00 	.word	0x20003e00
 80116ac:	20003e1c 	.word	0x20003e1c
 80116b0:	0802b644 	.word	0x0802b644
			memcpy(Kyosan_can_relays_st.Relays,Kyosan_FinalRelays.Relays,MAX_KYOSAN_RELAYS);
 80116b4:	4a3e      	ldr	r2, [pc, #248]	; (80117b0 <TransmitCanPkt+0x6ac>)
 80116b6:	4b3f      	ldr	r3, [pc, #252]	; (80117b4 <TransmitCanPkt+0x6b0>)
 80116b8:	3302      	adds	r3, #2
 80116ba:	1c90      	adds	r0, r2, #2
 80116bc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80116c0:	4602      	mov	r2, r0
 80116c2:	4619      	mov	r1, r3
 80116c4:	f8d1 c000 	ldr.w	ip, [r1]
 80116c8:	684e      	ldr	r6, [r1, #4]
 80116ca:	688d      	ldr	r5, [r1, #8]
 80116cc:	68c9      	ldr	r1, [r1, #12]
 80116ce:	f8c2 c000 	str.w	ip, [r2]
 80116d2:	6056      	str	r6, [r2, #4]
 80116d4:	6095      	str	r5, [r2, #8]
 80116d6:	60d1      	str	r1, [r2, #12]
 80116d8:	3310      	adds	r3, #16
 80116da:	3010      	adds	r0, #16
 80116dc:	42a3      	cmp	r3, r4
 80116de:	d1ef      	bne.n	80116c0 <TransmitCanPkt+0x5bc>
 80116e0:	4602      	mov	r2, r0
 80116e2:	6818      	ldr	r0, [r3, #0]
 80116e4:	6859      	ldr	r1, [r3, #4]
 80116e6:	689b      	ldr	r3, [r3, #8]
 80116e8:	6010      	str	r0, [r2, #0]
 80116ea:	6051      	str	r1, [r2, #4]
 80116ec:	6093      	str	r3, [r2, #8]
			Kyosan_can_relays_st.No_Of_CAN_Bytes = 60;
 80116ee:	4b30      	ldr	r3, [pc, #192]	; (80117b0 <TransmitCanPkt+0x6ac>)
 80116f0:	223c      	movs	r2, #60	; 0x3c
 80116f2:	801a      	strh	r2, [r3, #0]
			pp_ptr = &Kyosan_can_relays_st;
 80116f4:	4b2e      	ldr	r3, [pc, #184]	; (80117b0 <TransmitCanPkt+0x6ac>)
 80116f6:	60fb      	str	r3, [r7, #12]
			uc_size =(sizeof(KYOSAN_CAN_RELAYS_t));
 80116f8:	233e      	movs	r3, #62	; 0x3e
 80116fa:	82fb      	strh	r3, [r7, #22]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 80116fc:	8afb      	ldrh	r3, [r7, #22]
 80116fe:	88fa      	ldrh	r2, [r7, #6]
 8011700:	4619      	mov	r1, r3
 8011702:	68f8      	ldr	r0, [r7, #12]
 8011704:	f000 f86a 	bl	80117dc <sendCanPkts>
			if(Debug_flag == 1)
 8011708:	4b2b      	ldr	r3, [pc, #172]	; (80117b8 <TransmitCanPkt+0x6b4>)
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	2b01      	cmp	r3, #1
 801170e:	d14a      	bne.n	80117a6 <TransmitCanPkt+0x6a2>
				printf("SENT SIGNAL DATA TO MIE\n");
 8011710:	482a      	ldr	r0, [pc, #168]	; (80117bc <TransmitCanPkt+0x6b8>)
 8011712:	f015 fb07 	bl	8026d24 <puts>
				for(uint8_t i=0;i<Kyosan_can_relays_st.No_Of_CAN_Bytes;++i)
 8011716:	2300      	movs	r3, #0
 8011718:	74fb      	strb	r3, [r7, #19]
 801171a:	e00a      	b.n	8011732 <TransmitCanPkt+0x62e>
					printf("%02X ",Kyosan_can_relays_st.Relays[i]);
 801171c:	7cfb      	ldrb	r3, [r7, #19]
 801171e:	4a24      	ldr	r2, [pc, #144]	; (80117b0 <TransmitCanPkt+0x6ac>)
 8011720:	4413      	add	r3, r2
 8011722:	789b      	ldrb	r3, [r3, #2]
 8011724:	4619      	mov	r1, r3
 8011726:	4826      	ldr	r0, [pc, #152]	; (80117c0 <TransmitCanPkt+0x6bc>)
 8011728:	f015 fa60 	bl	8026bec <iprintf>
				for(uint8_t i=0;i<Kyosan_can_relays_st.No_Of_CAN_Bytes;++i)
 801172c:	7cfb      	ldrb	r3, [r7, #19]
 801172e:	3301      	adds	r3, #1
 8011730:	74fb      	strb	r3, [r7, #19]
 8011732:	7cfb      	ldrb	r3, [r7, #19]
 8011734:	b29a      	uxth	r2, r3
 8011736:	4b1e      	ldr	r3, [pc, #120]	; (80117b0 <TransmitCanPkt+0x6ac>)
 8011738:	881b      	ldrh	r3, [r3, #0]
 801173a:	429a      	cmp	r2, r3
 801173c:	d3ee      	bcc.n	801171c <TransmitCanPkt+0x618>
				printf("\n");
 801173e:	200a      	movs	r0, #10
 8011740:	f015 fa6c 	bl	8026c1c <putchar>
			break;
 8011744:	e02f      	b.n	80117a6 <TransmitCanPkt+0x6a2>
			pp_ptr = &Kyosan_SelfRelays;
 8011746:	4b1f      	ldr	r3, [pc, #124]	; (80117c4 <TransmitCanPkt+0x6c0>)
 8011748:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(KYOSAN_RELAYS_t);
 801174a:	2340      	movs	r3, #64	; 0x40
 801174c:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Relays 2-O\n");
 801174e:	481e      	ldr	r0, [pc, #120]	; (80117c8 <TransmitCanPkt+0x6c4>)
 8011750:	f015 fae8 	bl	8026d24 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8011754:	8afb      	ldrh	r3, [r7, #22]
 8011756:	88fa      	ldrh	r2, [r7, #6]
 8011758:	4619      	mov	r1, r3
 801175a:	68f8      	ldr	r0, [r7, #12]
 801175c:	f000 f83e 	bl	80117dc <sendCanPkts>
			break;
 8011760:	e022      	b.n	80117a8 <TransmitCanPkt+0x6a4>
			pp_ptr = &KyosanFaultInjection_st;
 8011762:	4b1a      	ldr	r3, [pc, #104]	; (80117cc <TransmitCanPkt+0x6c8>)
 8011764:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(KYOSAN_FAULT_INJECTION_t);
 8011766:	2308      	movs	r3, #8
 8011768:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 801176a:	4819      	ldr	r0, [pc, #100]	; (80117d0 <TransmitCanPkt+0x6cc>)
 801176c:	f015 fada 	bl	8026d24 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8011770:	8afb      	ldrh	r3, [r7, #22]
 8011772:	88fa      	ldrh	r2, [r7, #6]
 8011774:	4619      	mov	r1, r3
 8011776:	68f8      	ldr	r0, [r7, #12]
 8011778:	f000 f830 	bl	80117dc <sendCanPkts>
			break;
 801177c:	e014      	b.n	80117a8 <TransmitCanPkt+0x6a4>
			pp_ptr = &DatCrcXchangeOther_st;
 801177e:	4b15      	ldr	r3, [pc, #84]	; (80117d4 <TransmitCanPkt+0x6d0>)
 8011780:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(DAT_CRC_XCHANGE_t);
 8011782:	2302      	movs	r3, #2
 8011784:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8011786:	4b0c      	ldr	r3, [pc, #48]	; (80117b8 <TransmitCanPkt+0x6b4>)
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	2b01      	cmp	r3, #1
 801178c:	d102      	bne.n	8011794 <TransmitCanPkt+0x690>
				printf("Sending App Data CRC to Other\n");
 801178e:	4812      	ldr	r0, [pc, #72]	; (80117d8 <TransmitCanPkt+0x6d4>)
 8011790:	f015 fac8 	bl	8026d24 <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8011794:	8afb      	ldrh	r3, [r7, #22]
 8011796:	88fa      	ldrh	r2, [r7, #6]
 8011798:	4619      	mov	r1, r3
 801179a:	68f8      	ldr	r0, [r7, #12]
 801179c:	f000 f81e 	bl	80117dc <sendCanPkts>
			break;
 80117a0:	e002      	b.n	80117a8 <TransmitCanPkt+0x6a4>
			break;
 80117a2:	bf00      	nop
 80117a4:	e000      	b.n	80117a8 <TransmitCanPkt+0x6a4>
			break;
 80117a6:	bf00      	nop
		}
		break;
 80117a8:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 80117aa:	371c      	adds	r7, #28
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117b0:	2000b5a4 	.word	0x2000b5a4
 80117b4:	2000b564 	.word	0x2000b564
 80117b8:	20000bbb 	.word	0x20000bbb
 80117bc:	0802b518 	.word	0x0802b518
 80117c0:	0802b654 	.word	0x0802b654
 80117c4:	2000b4a4 	.word	0x2000b4a4
 80117c8:	0802b65c 	.word	0x0802b65c
 80117cc:	2000b488 	.word	0x2000b488
 80117d0:	0802b588 	.word	0x0802b588
 80117d4:	20000bb8 	.word	0x20000bb8
 80117d8:	0802b5c0 	.word	0x0802b5c0

080117dc <sendCanPkts>:

void sendCanPkts(void *sptr, int size,enum enumCanId canId)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b088      	sub	sp, #32
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	60f8      	str	r0, [r7, #12]
 80117e4:	60b9      	str	r1, [r7, #8]
 80117e6:	4613      	mov	r3, r2
 80117e8:	80fb      	strh	r3, [r7, #6]
	int32_t j = size,seqNo=0;
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	61fb      	str	r3, [r7, #28]
 80117ee:	2300      	movs	r3, #0
 80117f0:	61bb      	str	r3, [r7, #24]
	char *cptr = sptr;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	617b      	str	r3, [r7, #20]
	while(j > 0)
 80117f6:	e019      	b.n	801182c <sendCanPkts+0x50>
	{
		if(j < 7)
 80117f8:	69fb      	ldr	r3, [r7, #28]
 80117fa:	2b06      	cmp	r3, #6
 80117fc:	dc07      	bgt.n	801180e <sendCanPkts+0x32>
		{
			CAN_transmit(canId,cptr,j+1,seqNo);
 80117fe:	88f8      	ldrh	r0, [r7, #6]
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	1c5a      	adds	r2, r3, #1
 8011804:	69bb      	ldr	r3, [r7, #24]
 8011806:	6979      	ldr	r1, [r7, #20]
 8011808:	f000 f818 	bl	801183c <CAN_transmit>
 801180c:	e005      	b.n	801181a <sendCanPkts+0x3e>
		}
		else
		{
			CAN_transmit(canId,cptr,8,seqNo);
 801180e:	88f8      	ldrh	r0, [r7, #6]
 8011810:	69bb      	ldr	r3, [r7, #24]
 8011812:	2208      	movs	r2, #8
 8011814:	6979      	ldr	r1, [r7, #20]
 8011816:	f000 f811 	bl	801183c <CAN_transmit>
		}
		cptr += 7;
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	3307      	adds	r3, #7
 801181e:	617b      	str	r3, [r7, #20]
		j-=7;
 8011820:	69fb      	ldr	r3, [r7, #28]
 8011822:	3b07      	subs	r3, #7
 8011824:	61fb      	str	r3, [r7, #28]
		seqNo++;
 8011826:	69bb      	ldr	r3, [r7, #24]
 8011828:	3301      	adds	r3, #1
 801182a:	61bb      	str	r3, [r7, #24]
	while(j > 0)
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	2b00      	cmp	r3, #0
 8011830:	dce2      	bgt.n	80117f8 <sendCanPkts+0x1c>
	}
}
 8011832:	bf00      	nop
 8011834:	bf00      	nop
 8011836:	3720      	adds	r7, #32
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}

0801183c <CAN_transmit>:

void CAN_transmit (int can_id ,char* datPtr,int len,int seqNo)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b088      	sub	sp, #32
 8011840:	af00      	add	r7, sp, #0
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	60b9      	str	r1, [r7, #8]
 8011846:	607a      	str	r2, [r7, #4]
 8011848:	603b      	str	r3, [r7, #0]
	char i=0;
 801184a:	2300      	movs	r3, #0
 801184c:	77fb      	strb	r3, [r7, #31]
	uint32_t CAN_TxWaitClk = HAL_GetTick();
 801184e:	f008 f9c3 	bl	8019bd8 <HAL_GetTick>
 8011852:	61b8      	str	r0, [r7, #24]

	//	CAN_TxMsg.id = can_id;
	TxData[0] = seqNo;
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	b2da      	uxtb	r2, r3
 8011858:	4b4d      	ldr	r3, [pc, #308]	; (8011990 <CAN_transmit+0x154>)
 801185a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len-1; i++)
 801185c:	2300      	movs	r3, #0
 801185e:	77fb      	strb	r3, [r7, #31]
 8011860:	e00a      	b.n	8011878 <CAN_transmit+0x3c>
	{
		TxData[i+1] = *(datPtr+i);
 8011862:	7ffb      	ldrb	r3, [r7, #31]
 8011864:	68ba      	ldr	r2, [r7, #8]
 8011866:	441a      	add	r2, r3
 8011868:	7ffb      	ldrb	r3, [r7, #31]
 801186a:	3301      	adds	r3, #1
 801186c:	7811      	ldrb	r1, [r2, #0]
 801186e:	4a48      	ldr	r2, [pc, #288]	; (8011990 <CAN_transmit+0x154>)
 8011870:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len-1; i++)
 8011872:	7ffb      	ldrb	r3, [r7, #31]
 8011874:	3301      	adds	r3, #1
 8011876:	77fb      	strb	r3, [r7, #31]
 8011878:	7ffa      	ldrb	r2, [r7, #31]
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	3b01      	subs	r3, #1
 801187e:	429a      	cmp	r2, r3
 8011880:	dbef      	blt.n	8011862 <CAN_transmit+0x26>
	}
	if(can_id < (0x200) )
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011888:	da3b      	bge.n	8011902 <CAN_transmit+0xc6>
	{
		while(len!=0)
 801188a:	e036      	b.n	80118fa <CAN_transmit+0xbe>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader2.IDE = CAN_ID_STD;
 801188c:	4b41      	ldr	r3, [pc, #260]	; (8011994 <CAN_transmit+0x158>)
 801188e:	2200      	movs	r2, #0
 8011890:	609a      	str	r2, [r3, #8]
			TxHeader2.StdId=can_id;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	4a3f      	ldr	r2, [pc, #252]	; (8011994 <CAN_transmit+0x158>)
 8011896:	6013      	str	r3, [r2, #0]
			TxHeader2.RTR=CAN_RTR_DATA;
 8011898:	4b3e      	ldr	r3, [pc, #248]	; (8011994 <CAN_transmit+0x158>)
 801189a:	2200      	movs	r2, #0
 801189c:	60da      	str	r2, [r3, #12]
			TxHeader2.DLC=len;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	4a3c      	ldr	r2, [pc, #240]	; (8011994 <CAN_transmit+0x158>)
 80118a2:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 80118a4:	2300      	movs	r3, #0
 80118a6:	75bb      	strb	r3, [r7, #22]
			//				{
			//					printf("%02X ",TxData[i]);
			//				}
			//				printf("\n");
			//			}
			if((Error=HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData, &pTxMailbox2))!=HAL_OK)
 80118a8:	4b3b      	ldr	r3, [pc, #236]	; (8011998 <CAN_transmit+0x15c>)
 80118aa:	4a39      	ldr	r2, [pc, #228]	; (8011990 <CAN_transmit+0x154>)
 80118ac:	4939      	ldr	r1, [pc, #228]	; (8011994 <CAN_transmit+0x158>)
 80118ae:	483b      	ldr	r0, [pc, #236]	; (801199c <CAN_transmit+0x160>)
 80118b0:	f008 fc38 	bl	801a124 <HAL_CAN_AddTxMessage>
 80118b4:	4603      	mov	r3, r0
 80118b6:	461a      	mov	r2, r3
 80118b8:	4b39      	ldr	r3, [pc, #228]	; (80119a0 <CAN_transmit+0x164>)
 80118ba:	701a      	strb	r2, [r3, #0]
 80118bc:	4b38      	ldr	r3, [pc, #224]	; (80119a0 <CAN_transmit+0x164>)
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d00d      	beq.n	80118e0 <CAN_transmit+0xa4>
			{
				printf("CAN2 Tx Fail\n");
 80118c4:	4837      	ldr	r0, [pc, #220]	; (80119a4 <CAN_transmit+0x168>)
 80118c6:	f015 fa2d 	bl	8026d24 <puts>
				return;
 80118ca:	e05e      	b.n	801198a <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 80118cc:	69b8      	ldr	r0, [r7, #24]
 80118ce:	f7fe fe65 	bl	801059c <HAL_Elaps_Ticks>
 80118d2:	4603      	mov	r3, r0
 80118d4:	2b64      	cmp	r3, #100	; 0x64
 80118d6:	d903      	bls.n	80118e0 <CAN_transmit+0xa4>
				{
					printf("CAN2 Tx Fail\n");
 80118d8:	4832      	ldr	r0, [pc, #200]	; (80119a4 <CAN_transmit+0x168>)
 80118da:	f015 fa23 	bl	8026d24 <puts>
					return;
 80118de:	e054      	b.n	801198a <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
 80118e0:	4b2d      	ldr	r3, [pc, #180]	; (8011998 <CAN_transmit+0x15c>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	4619      	mov	r1, r3
 80118e6:	482d      	ldr	r0, [pc, #180]	; (801199c <CAN_transmit+0x160>)
 80118e8:	f008 fcec 	bl	801a2c4 <HAL_CAN_IsTxMessagePending>
 80118ec:	4603      	mov	r3, r0
 80118ee:	75bb      	strb	r3, [r7, #22]
 80118f0:	7dbb      	ldrb	r3, [r7, #22]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d1ea      	bne.n	80118cc <CAN_transmit+0x90>
				}
			}

			len=0;
 80118f6:	2300      	movs	r3, #0
 80118f8:	607b      	str	r3, [r7, #4]
		while(len!=0)
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d1c5      	bne.n	801188c <CAN_transmit+0x50>
 8011900:	e043      	b.n	801198a <CAN_transmit+0x14e>
		}
	}
	else
	{

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8011902:	4929      	ldr	r1, [pc, #164]	; (80119a8 <CAN_transmit+0x16c>)
 8011904:	4829      	ldr	r0, [pc, #164]	; (80119ac <CAN_transmit+0x170>)
 8011906:	f7ee fc9b 	bl	8000240 <strcmp>
 801190a:	4603      	mov	r3, r0
 801190c:	2b00      	cmp	r3, #0
 801190e:	d03b      	beq.n	8011988 <CAN_transmit+0x14c>
		{
			return;
		}

		while(len!=0)
 8011910:	e036      	b.n	8011980 <CAN_transmit+0x144>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader3.IDE = CAN_ID_STD;
 8011912:	4b27      	ldr	r3, [pc, #156]	; (80119b0 <CAN_transmit+0x174>)
 8011914:	2200      	movs	r2, #0
 8011916:	609a      	str	r2, [r3, #8]
			TxHeader3.StdId=can_id;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	4a25      	ldr	r2, [pc, #148]	; (80119b0 <CAN_transmit+0x174>)
 801191c:	6013      	str	r3, [r2, #0]
			TxHeader3.RTR=CAN_RTR_DATA;
 801191e:	4b24      	ldr	r3, [pc, #144]	; (80119b0 <CAN_transmit+0x174>)
 8011920:	2200      	movs	r2, #0
 8011922:	60da      	str	r2, [r3, #12]
			TxHeader3.DLC=len;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	4a22      	ldr	r2, [pc, #136]	; (80119b0 <CAN_transmit+0x174>)
 8011928:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 801192a:	2300      	movs	r3, #0
 801192c:	75fb      	strb	r3, [r7, #23]
			//				}
			//				printf("\n");
			//			}

			//printf("TxHeader1.DLC:%u\n",TxHeader1.DLC);
			if((Error=HAL_CAN_AddTxMessage(&hcan3, &TxHeader3, TxData, &pTxMailbox3))!=HAL_OK)
 801192e:	4b21      	ldr	r3, [pc, #132]	; (80119b4 <CAN_transmit+0x178>)
 8011930:	4a17      	ldr	r2, [pc, #92]	; (8011990 <CAN_transmit+0x154>)
 8011932:	491f      	ldr	r1, [pc, #124]	; (80119b0 <CAN_transmit+0x174>)
 8011934:	4820      	ldr	r0, [pc, #128]	; (80119b8 <CAN_transmit+0x17c>)
 8011936:	f008 fbf5 	bl	801a124 <HAL_CAN_AddTxMessage>
 801193a:	4603      	mov	r3, r0
 801193c:	461a      	mov	r2, r3
 801193e:	4b18      	ldr	r3, [pc, #96]	; (80119a0 <CAN_transmit+0x164>)
 8011940:	701a      	strb	r2, [r3, #0]
 8011942:	4b17      	ldr	r3, [pc, #92]	; (80119a0 <CAN_transmit+0x164>)
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d00d      	beq.n	8011966 <CAN_transmit+0x12a>
			{
				printf("CAN3 Tx Fail\n");
 801194a:	481c      	ldr	r0, [pc, #112]	; (80119bc <CAN_transmit+0x180>)
 801194c:	f015 f9ea 	bl	8026d24 <puts>
				return;
 8011950:	e01b      	b.n	801198a <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 8011952:	69b8      	ldr	r0, [r7, #24]
 8011954:	f7fe fe22 	bl	801059c <HAL_Elaps_Ticks>
 8011958:	4603      	mov	r3, r0
 801195a:	2b64      	cmp	r3, #100	; 0x64
 801195c:	d903      	bls.n	8011966 <CAN_transmit+0x12a>
				{
					printf("CAN3 Tx Fail\n");
 801195e:	4817      	ldr	r0, [pc, #92]	; (80119bc <CAN_transmit+0x180>)
 8011960:	f015 f9e0 	bl	8026d24 <puts>
					return;
 8011964:	e011      	b.n	801198a <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
 8011966:	4b13      	ldr	r3, [pc, #76]	; (80119b4 <CAN_transmit+0x178>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	4619      	mov	r1, r3
 801196c:	4812      	ldr	r0, [pc, #72]	; (80119b8 <CAN_transmit+0x17c>)
 801196e:	f008 fca9 	bl	801a2c4 <HAL_CAN_IsTxMessagePending>
 8011972:	4603      	mov	r3, r0
 8011974:	75fb      	strb	r3, [r7, #23]
 8011976:	7dfb      	ldrb	r3, [r7, #23]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d1ea      	bne.n	8011952 <CAN_transmit+0x116>
				}
			}
			len=0;
 801197c:	2300      	movs	r3, #0
 801197e:	607b      	str	r3, [r7, #4]
		while(len!=0)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d1c5      	bne.n	8011912 <CAN_transmit+0xd6>
 8011986:	e000      	b.n	801198a <CAN_transmit+0x14e>
			return;
 8011988:	bf00      	nop
		}
	}
}
 801198a:	3720      	adds	r7, #32
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}
 8011990:	2000b2e8 	.word	0x2000b2e8
 8011994:	2000b268 	.word	0x2000b268
 8011998:	2000b298 	.word	0x2000b298
 801199c:	2000b2f4 	.word	0x2000b2f4
 80119a0:	2000b2f0 	.word	0x2000b2f0
 80119a4:	0802b670 	.word	0x0802b670
 80119a8:	0802b680 	.word	0x0802b680
 80119ac:	20000505 	.word	0x20000505
 80119b0:	2000b280 	.word	0x2000b280
 80119b4:	2000b29c 	.word	0x2000b29c
 80119b8:	2000b358 	.word	0x2000b358
 80119bc:	0802b68c 	.word	0x0802b68c

080119c0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b082      	sub	sp, #8
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4a3e      	ldr	r2, [pc, #248]	; (8011ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d175      	bne.n	8011abe <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 80119d2:	4b3e      	ldr	r3, [pc, #248]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80119d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119d8:	881b      	ldrh	r3, [r3, #0]
 80119da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80119de:	d104      	bne.n	80119ea <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 80119e0:	4b3a      	ldr	r3, [pc, #232]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80119e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119e6:	2200      	movs	r2, #0
 80119e8:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 80119ea:	4b39      	ldr	r3, [pc, #228]	; (8011ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80119ec:	4a39      	ldr	r2, [pc, #228]	; (8011ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80119ee:	2100      	movs	r1, #0
 80119f0:	4839      	ldr	r0, [pc, #228]	; (8011ad8 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 80119f2:	f008 fc8b 	bl	801a30c <HAL_CAN_GetRxMessage>
 80119f6:	4603      	mov	r3, r0
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d001      	beq.n	8011a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 80119fc:	f006 faf2 	bl	8017fe4 <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 8011a00:	4b32      	ldr	r3, [pc, #200]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011a02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a06:	881b      	ldrh	r3, [r3, #0]
 8011a08:	4a30      	ldr	r2, [pc, #192]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011a0a:	011b      	lsls	r3, r3, #4
 8011a0c:	4413      	add	r3, r2
 8011a0e:	330f      	adds	r3, #15
 8011a10:	2203      	movs	r2, #3
 8011a12:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 8011a14:	4b2f      	ldr	r3, [pc, #188]	; (8011ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8011a16:	691a      	ldr	r2, [r3, #16]
 8011a18:	4b2c      	ldr	r3, [pc, #176]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011a1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a1e:	881b      	ldrh	r3, [r3, #0]
 8011a20:	b2d1      	uxtb	r1, r2
 8011a22:	4a2a      	ldr	r2, [pc, #168]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011a24:	011b      	lsls	r3, r3, #4
 8011a26:	4413      	add	r3, r2
 8011a28:	330c      	adds	r3, #12
 8011a2a:	460a      	mov	r2, r1
 8011a2c:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 8011a2e:	4b29      	ldr	r3, [pc, #164]	; (8011ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8011a30:	689a      	ldr	r2, [r3, #8]
 8011a32:	4b26      	ldr	r3, [pc, #152]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011a34:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a38:	881b      	ldrh	r3, [r3, #0]
 8011a3a:	b2d1      	uxtb	r1, r2
 8011a3c:	4a23      	ldr	r2, [pc, #140]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011a3e:	011b      	lsls	r3, r3, #4
 8011a40:	4413      	add	r3, r2
 8011a42:	330d      	adds	r3, #13
 8011a44:	460a      	mov	r2, r1
 8011a46:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 8011a48:	4b22      	ldr	r3, [pc, #136]	; (8011ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8011a4a:	68da      	ldr	r2, [r3, #12]
 8011a4c:	4b1f      	ldr	r3, [pc, #124]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011a4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a52:	881b      	ldrh	r3, [r3, #0]
 8011a54:	b2d1      	uxtb	r1, r2
 8011a56:	4a1d      	ldr	r2, [pc, #116]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011a58:	011b      	lsls	r3, r3, #4
 8011a5a:	4413      	add	r3, r2
 8011a5c:	330e      	adds	r3, #14
 8011a5e:	460a      	mov	r2, r1
 8011a60:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 8011a62:	4b1a      	ldr	r3, [pc, #104]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011a64:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a68:	881b      	ldrh	r3, [r3, #0]
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	4b19      	ldr	r3, [pc, #100]	; (8011ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8011a6e:	681a      	ldr	r2, [r3, #0]
 8011a70:	4916      	ldr	r1, [pc, #88]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011a72:	0103      	lsls	r3, r0, #4
 8011a74:	440b      	add	r3, r1
 8011a76:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 8011a78:	4b14      	ldr	r3, [pc, #80]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011a7a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a7e:	881b      	ldrh	r3, [r3, #0]
 8011a80:	4a12      	ldr	r2, [pc, #72]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011a82:	011b      	lsls	r3, r3, #4
 8011a84:	4413      	add	r3, r2
 8011a86:	330e      	adds	r3, #14
 8011a88:	781b      	ldrb	r3, [r3, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d117      	bne.n	8011abe <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 8011a8e:	4b0f      	ldr	r3, [pc, #60]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011a90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a94:	881b      	ldrh	r3, [r3, #0]
 8011a96:	011b      	lsls	r3, r3, #4
 8011a98:	4a0c      	ldr	r2, [pc, #48]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011a9a:	4413      	add	r3, r2
 8011a9c:	3304      	adds	r3, #4
 8011a9e:	490c      	ldr	r1, [pc, #48]	; (8011ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8011aa0:	461a      	mov	r2, r3
 8011aa2:	460b      	mov	r3, r1
 8011aa4:	cb03      	ldmia	r3!, {r0, r1}
 8011aa6:	6010      	str	r0, [r2, #0]
 8011aa8:	6051      	str	r1, [r2, #4]
			canRead.In++;
 8011aaa:	4b08      	ldr	r3, [pc, #32]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011aac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ab0:	881b      	ldrh	r3, [r3, #0]
 8011ab2:	3301      	adds	r3, #1
 8011ab4:	b29a      	uxth	r2, r3
 8011ab6:	4b05      	ldr	r3, [pc, #20]	; (8011acc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011ab8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011abc:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8011abe:	bf00      	nop
 8011ac0:	3708      	adds	r7, #8
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}
 8011ac6:	bf00      	nop
 8011ac8:	40003400 	.word	0x40003400
 8011acc:	20007264 	.word	0x20007264
 8011ad0:	2000b2e0 	.word	0x2000b2e0
 8011ad4:	2000b2bc 	.word	0x2000b2bc
 8011ad8:	2000b358 	.word	0x2000b358

08011adc <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 8011ae4:	4b42      	ldr	r3, [pc, #264]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011ae6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011aea:	881b      	ldrh	r3, [r3, #0]
 8011aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011af0:	d104      	bne.n	8011afc <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 8011af2:	4b3f      	ldr	r3, [pc, #252]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011af4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011af8:	2200      	movs	r2, #0
 8011afa:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 8011afc:	4b3d      	ldr	r3, [pc, #244]	; (8011bf4 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8011afe:	4a3e      	ldr	r2, [pc, #248]	; (8011bf8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8011b00:	2101      	movs	r1, #1
 8011b02:	483e      	ldr	r0, [pc, #248]	; (8011bfc <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8011b04:	f008 fc02 	bl	801a30c <HAL_CAN_GetRxMessage>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	4b3c      	ldr	r3, [pc, #240]	; (8011c00 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8011b0e:	701a      	strb	r2, [r3, #0]
 8011b10:	4b3b      	ldr	r3, [pc, #236]	; (8011c00 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d007      	beq.n	8011b28 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 8011b18:	4b39      	ldr	r3, [pc, #228]	; (8011c00 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	4839      	ldr	r0, [pc, #228]	; (8011c04 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8011b20:	f015 f864 	bl	8026bec <iprintf>
		Error_Handler();
 8011b24:	f006 fa5e 	bl	8017fe4 <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 8011b28:	4b31      	ldr	r3, [pc, #196]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011b2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b2e:	881b      	ldrh	r3, [r3, #0]
 8011b30:	4a2f      	ldr	r2, [pc, #188]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011b32:	011b      	lsls	r3, r3, #4
 8011b34:	4413      	add	r3, r2
 8011b36:	330f      	adds	r3, #15
 8011b38:	2202      	movs	r2, #2
 8011b3a:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 8011b3c:	4b2e      	ldr	r3, [pc, #184]	; (8011bf8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8011b3e:	691a      	ldr	r2, [r3, #16]
 8011b40:	4b2b      	ldr	r3, [pc, #172]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011b42:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b46:	881b      	ldrh	r3, [r3, #0]
 8011b48:	b2d1      	uxtb	r1, r2
 8011b4a:	4a29      	ldr	r2, [pc, #164]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011b4c:	011b      	lsls	r3, r3, #4
 8011b4e:	4413      	add	r3, r2
 8011b50:	330c      	adds	r3, #12
 8011b52:	460a      	mov	r2, r1
 8011b54:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 8011b56:	4b28      	ldr	r3, [pc, #160]	; (8011bf8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8011b58:	689a      	ldr	r2, [r3, #8]
 8011b5a:	4b25      	ldr	r3, [pc, #148]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011b5c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b60:	881b      	ldrh	r3, [r3, #0]
 8011b62:	b2d1      	uxtb	r1, r2
 8011b64:	4a22      	ldr	r2, [pc, #136]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011b66:	011b      	lsls	r3, r3, #4
 8011b68:	4413      	add	r3, r2
 8011b6a:	330d      	adds	r3, #13
 8011b6c:	460a      	mov	r2, r1
 8011b6e:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 8011b70:	4b21      	ldr	r3, [pc, #132]	; (8011bf8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8011b72:	68da      	ldr	r2, [r3, #12]
 8011b74:	4b1e      	ldr	r3, [pc, #120]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011b76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b7a:	881b      	ldrh	r3, [r3, #0]
 8011b7c:	b2d1      	uxtb	r1, r2
 8011b7e:	4a1c      	ldr	r2, [pc, #112]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011b80:	011b      	lsls	r3, r3, #4
 8011b82:	4413      	add	r3, r2
 8011b84:	330e      	adds	r3, #14
 8011b86:	460a      	mov	r2, r1
 8011b88:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 8011b8a:	4b19      	ldr	r3, [pc, #100]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011b8c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b90:	881b      	ldrh	r3, [r3, #0]
 8011b92:	4618      	mov	r0, r3
 8011b94:	4b18      	ldr	r3, [pc, #96]	; (8011bf8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8011b96:	681a      	ldr	r2, [r3, #0]
 8011b98:	4915      	ldr	r1, [pc, #84]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011b9a:	0103      	lsls	r3, r0, #4
 8011b9c:	440b      	add	r3, r1
 8011b9e:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 8011ba0:	4b13      	ldr	r3, [pc, #76]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011ba2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ba6:	881b      	ldrh	r3, [r3, #0]
 8011ba8:	4a11      	ldr	r2, [pc, #68]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011baa:	011b      	lsls	r3, r3, #4
 8011bac:	4413      	add	r3, r2
 8011bae:	330e      	adds	r3, #14
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d117      	bne.n	8011be6 <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 8011bb6:	4b0e      	ldr	r3, [pc, #56]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011bb8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bbc:	881b      	ldrh	r3, [r3, #0]
 8011bbe:	011b      	lsls	r3, r3, #4
 8011bc0:	4a0b      	ldr	r2, [pc, #44]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011bc2:	4413      	add	r3, r2
 8011bc4:	3304      	adds	r3, #4
 8011bc6:	490b      	ldr	r1, [pc, #44]	; (8011bf4 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8011bc8:	461a      	mov	r2, r3
 8011bca:	460b      	mov	r3, r1
 8011bcc:	cb03      	ldmia	r3!, {r0, r1}
 8011bce:	6010      	str	r0, [r2, #0]
 8011bd0:	6051      	str	r1, [r2, #4]
		canRead.In++;
 8011bd2:	4b07      	ldr	r3, [pc, #28]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011bd4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bd8:	881b      	ldrh	r3, [r3, #0]
 8011bda:	3301      	adds	r3, #1
 8011bdc:	b29a      	uxth	r2, r3
 8011bde:	4b04      	ldr	r3, [pc, #16]	; (8011bf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011be0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011be4:	801a      	strh	r2, [r3, #0]
	}
}
 8011be6:	bf00      	nop
 8011be8:	3708      	adds	r7, #8
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}
 8011bee:	bf00      	nop
 8011bf0:	20007264 	.word	0x20007264
 8011bf4:	2000b2d8 	.word	0x2000b2d8
 8011bf8:	2000b2a0 	.word	0x2000b2a0
 8011bfc:	2000b2f4 	.word	0x2000b2f4
 8011c00:	2000b2f0 	.word	0x2000b2f0
 8011c04:	0802b69c 	.word	0x0802b69c

08011c08 <canDataReady>:


unsigned char canDataReady()
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 8011c12:	4b27      	ldr	r3, [pc, #156]	; (8011cb0 <canDataReady+0xa8>)
 8011c14:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c18:	881a      	ldrh	r2, [r3, #0]
 8011c1a:	4b25      	ldr	r3, [pc, #148]	; (8011cb0 <canDataReady+0xa8>)
 8011c1c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c20:	885b      	ldrh	r3, [r3, #2]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d101      	bne.n	8011c2a <canDataReady+0x22>
	{
		return 0;
 8011c26:	2300      	movs	r3, #0
 8011c28:	e03e      	b.n	8011ca8 <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 8011c2a:	4b21      	ldr	r3, [pc, #132]	; (8011cb0 <canDataReady+0xa8>)
 8011c2c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c30:	885b      	ldrh	r3, [r3, #2]
 8011c32:	3301      	adds	r3, #1
 8011c34:	607b      	str	r3, [r7, #4]
 8011c36:	e02e      	b.n	8011c96 <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 8011c38:	4b1d      	ldr	r3, [pc, #116]	; (8011cb0 <canDataReady+0xa8>)
 8011c3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c3e:	885b      	ldrh	r3, [r3, #2]
 8011c40:	011b      	lsls	r3, r3, #4
 8011c42:	4a1b      	ldr	r2, [pc, #108]	; (8011cb0 <canDataReady+0xa8>)
 8011c44:	1898      	adds	r0, r3, r2
 8011c46:	4b1a      	ldr	r3, [pc, #104]	; (8011cb0 <canDataReady+0xa8>)
 8011c48:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c4c:	881b      	ldrh	r3, [r3, #0]
 8011c4e:	011b      	lsls	r3, r3, #4
 8011c50:	4a17      	ldr	r2, [pc, #92]	; (8011cb0 <canDataReady+0xa8>)
 8011c52:	4413      	add	r3, r2
 8011c54:	2210      	movs	r2, #16
 8011c56:	4619      	mov	r1, r3
 8011c58:	f014 fea8 	bl	80269ac <memcmp>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d116      	bne.n	8011c90 <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8011c62:	4b13      	ldr	r3, [pc, #76]	; (8011cb0 <canDataReady+0xa8>)
 8011c64:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c68:	885b      	ldrh	r3, [r3, #2]
 8011c6a:	011b      	lsls	r3, r3, #4
 8011c6c:	4a10      	ldr	r2, [pc, #64]	; (8011cb0 <canDataReady+0xa8>)
 8011c6e:	4413      	add	r3, r2
 8011c70:	2210      	movs	r2, #16
 8011c72:	2100      	movs	r1, #0
 8011c74:	4618      	mov	r0, r3
 8011c76:	f014 fed1 	bl	8026a1c <memset>
			canRead.Out++;
 8011c7a:	4b0d      	ldr	r3, [pc, #52]	; (8011cb0 <canDataReady+0xa8>)
 8011c7c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c80:	885b      	ldrh	r3, [r3, #2]
 8011c82:	3301      	adds	r3, #1
 8011c84:	b29a      	uxth	r2, r3
 8011c86:	4b0a      	ldr	r3, [pc, #40]	; (8011cb0 <canDataReady+0xa8>)
 8011c88:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c8c:	805a      	strh	r2, [r3, #2]
			break;
 8011c8e:	e00a      	b.n	8011ca6 <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	3301      	adds	r3, #1
 8011c94:	607b      	str	r3, [r7, #4]
 8011c96:	4b06      	ldr	r3, [pc, #24]	; (8011cb0 <canDataReady+0xa8>)
 8011c98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c9c:	881b      	ldrh	r3, [r3, #0]
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d3c8      	bcc.n	8011c38 <canDataReady+0x30>
		}
	}
	return 1;
 8011ca6:	2301      	movs	r3, #1
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	3708      	adds	r7, #8
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}
 8011cb0:	20007264 	.word	0x20007264

08011cb4 <readCanToStructs>:

void readCanToStructs(void)
{
 8011cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cb6:	b08f      	sub	sp, #60	; 0x3c
 8011cb8:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 8011cd0:	4bc4      	ldr	r3, [pc, #784]	; (8011fe4 <readCanToStructs+0x330>)
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	3b01      	subs	r3, #1
 8011cd6:	2b03      	cmp	r3, #3
 8011cd8:	f204 80d7 	bhi.w	8015e8a <readCanToStructs+0x41d6>
 8011cdc:	a201      	add	r2, pc, #4	; (adr r2, 8011ce4 <readCanToStructs+0x30>)
 8011cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ce2:	bf00      	nop
 8011ce4:	08011cf5 	.word	0x08011cf5
 8011ce8:	080143fb 	.word	0x080143fb
 8011cec:	080154c9 	.word	0x080154c9
 8011cf0:	08015e7f 	.word	0x08015e7f
	{
	case HITACHI:
	{
		/* ___________________ HITACHI _______________ */
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8011cf4:	4bbc      	ldr	r3, [pc, #752]	; (8011fe8 <readCanToStructs+0x334>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	09db      	lsrs	r3, r3, #7
 8011cfa:	f003 0301 	and.w	r3, r3, #1
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	f044 80c5 	bne.w	8015e8e <readCanToStructs+0x41da>
		{
			return;
		}
		while(canDataReady())
 8011d04:	f001 baf3 	b.w	80132ee <readCanToStructs+0x163a>
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8011d08:	4bb8      	ldr	r3, [pc, #736]	; (8011fec <readCanToStructs+0x338>)
 8011d0a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d0e:	885b      	ldrh	r3, [r3, #2]
 8011d10:	4ab6      	ldr	r2, [pc, #728]	; (8011fec <readCanToStructs+0x338>)
 8011d12:	011b      	lsls	r3, r3, #4
 8011d14:	4413      	add	r3, r2
 8011d16:	330f      	adds	r3, #15
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	3b01      	subs	r3, #1
 8011d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8011d20:	4bb2      	ldr	r3, [pc, #712]	; (8011fec <readCanToStructs+0x338>)
 8011d22:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d26:	885b      	ldrh	r3, [r3, #2]
 8011d28:	4ab0      	ldr	r2, [pc, #704]	; (8011fec <readCanToStructs+0x338>)
 8011d2a:	011b      	lsls	r3, r3, #4
 8011d2c:	4413      	add	r3, r2
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f240 220a 	movw	r2, #522	; 0x20a
 8011d34:	4293      	cmp	r3, r2
 8011d36:	f201 82b7 	bhi.w	80132a8 <readCanToStructs+0x15f4>
 8011d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d3e:	d80a      	bhi.n	8011d56 <readCanToStructs+0xa2>
 8011d40:	f240 1203 	movw	r2, #259	; 0x103
 8011d44:	4293      	cmp	r3, r2
 8011d46:	d023      	beq.n	8011d90 <readCanToStructs+0xdc>
 8011d48:	f240 1209 	movw	r2, #265	; 0x109
 8011d4c:	4293      	cmp	r3, r2
 8011d4e:	f000 80f5 	beq.w	8011f3c <readCanToStructs+0x288>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 8011d52:	f001 baa9 	b.w	80132a8 <readCanToStructs+0x15f4>
 8011d56:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8011d5a:	2b09      	cmp	r3, #9
 8011d5c:	f201 82a4 	bhi.w	80132a8 <readCanToStructs+0x15f4>
 8011d60:	a201      	add	r2, pc, #4	; (adr r2, 8011d68 <readCanToStructs+0xb4>)
 8011d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d66:	bf00      	nop
 8011d68:	08012111 	.word	0x08012111
 8011d6c:	08012319 	.word	0x08012319
 8011d70:	080124f1 	.word	0x080124f1
 8011d74:	0801270b 	.word	0x0801270b
 8011d78:	08012927 	.word	0x08012927
 8011d7c:	080132a9 	.word	0x080132a9
 8011d80:	08012abf 	.word	0x08012abf
 8011d84:	08012cf7 	.word	0x08012cf7
 8011d88:	08012f33 	.word	0x08012f33
 8011d8c:	080130d5 	.word	0x080130d5
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011d90:	4b97      	ldr	r3, [pc, #604]	; (8011ff0 <readCanToStructs+0x33c>)
 8011d92:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011d94:	4b95      	ldr	r3, [pc, #596]	; (8011fec <readCanToStructs+0x338>)
 8011d96:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d9a:	885b      	ldrh	r3, [r3, #2]
 8011d9c:	4a93      	ldr	r2, [pc, #588]	; (8011fec <readCanToStructs+0x338>)
 8011d9e:	011b      	lsls	r3, r3, #4
 8011da0:	4413      	add	r3, r2
 8011da2:	3304      	adds	r3, #4
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011daa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d110      	bne.n	8011dd4 <readCanToStructs+0x120>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011db2:	2206      	movs	r2, #6
 8011db4:	2100      	movs	r1, #0
 8011db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011db8:	f014 fe30 	bl	8026a1c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011dbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011dc0:	4a8c      	ldr	r2, [pc, #560]	; (8011ff4 <readCanToStructs+0x340>)
 8011dc2:	f240 4116 	movw	r1, #1046	; 0x416
 8011dc6:	fb01 f303 	mul.w	r3, r1, r3
 8011dca:	4413      	add	r3, r2
 8011dcc:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8011dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011dd8:	4a86      	ldr	r2, [pc, #536]	; (8011ff4 <readCanToStructs+0x340>)
 8011dda:	f240 4116 	movw	r1, #1046	; 0x416
 8011dde:	fb01 f303 	mul.w	r3, r1, r3
 8011de2:	4413      	add	r3, r2
 8011de4:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011de8:	781b      	ldrb	r3, [r3, #0]
 8011dea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d015      	beq.n	8011e1e <readCanToStructs+0x16a>
					printf("GPS Packet Seq no MisMatch\n");
 8011df2:	4881      	ldr	r0, [pc, #516]	; (8011ff8 <readCanToStructs+0x344>)
 8011df4:	f014 ff96 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011df8:	2206      	movs	r2, #6
 8011dfa:	2100      	movs	r1, #0
 8011dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dfe:	f014 fe0d 	bl	8026a1c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e06:	4a7b      	ldr	r2, [pc, #492]	; (8011ff4 <readCanToStructs+0x340>)
 8011e08:	f240 4116 	movw	r1, #1046	; 0x416
 8011e0c:	fb01 f303 	mul.w	r3, r1, r3
 8011e10:	4413      	add	r3, r2
 8011e12:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011e16:	2200      	movs	r2, #0
 8011e18:	701a      	strb	r2, [r3, #0]
					break;
 8011e1a:	f001 ba46 	b.w	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011e1e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011e22:	4613      	mov	r3, r2
 8011e24:	00db      	lsls	r3, r3, #3
 8011e26:	1a9b      	subs	r3, r3, r2
 8011e28:	461a      	mov	r2, r3
 8011e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e2c:	4413      	add	r3, r2
 8011e2e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011e30:	2301      	movs	r3, #1
 8011e32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011e36:	e016      	b.n	8011e66 <readCanToStructs+0x1b2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011e38:	4b6c      	ldr	r3, [pc, #432]	; (8011fec <readCanToStructs+0x338>)
 8011e3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e3e:	885b      	ldrh	r3, [r3, #2]
 8011e40:	461a      	mov	r2, r3
 8011e42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e46:	4969      	ldr	r1, [pc, #420]	; (8011fec <readCanToStructs+0x338>)
 8011e48:	0112      	lsls	r2, r2, #4
 8011e4a:	440a      	add	r2, r1
 8011e4c:	4413      	add	r3, r2
 8011e4e:	3304      	adds	r3, #4
 8011e50:	781a      	ldrb	r2, [r3, #0]
 8011e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e54:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e58:	3301      	adds	r3, #1
 8011e5a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011e5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e60:	3301      	adds	r3, #1
 8011e62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011e66:	4b61      	ldr	r3, [pc, #388]	; (8011fec <readCanToStructs+0x338>)
 8011e68:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e6c:	885b      	ldrh	r3, [r3, #2]
 8011e6e:	4a5f      	ldr	r2, [pc, #380]	; (8011fec <readCanToStructs+0x338>)
 8011e70:	011b      	lsls	r3, r3, #4
 8011e72:	4413      	add	r3, r2
 8011e74:	330c      	adds	r3, #12
 8011e76:	781b      	ldrb	r3, [r3, #0]
 8011e78:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d3db      	bcc.n	8011e38 <readCanToStructs+0x184>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011e80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e84:	4a5b      	ldr	r2, [pc, #364]	; (8011ff4 <readCanToStructs+0x340>)
 8011e86:	f240 4116 	movw	r1, #1046	; 0x416
 8011e8a:	fb01 f303 	mul.w	r3, r1, r3
 8011e8e:	4413      	add	r3, r2
 8011e90:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	461a      	mov	r2, r3
 8011e98:	4613      	mov	r3, r2
 8011e9a:	00db      	lsls	r3, r3, #3
 8011e9c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011e9e:	4b53      	ldr	r3, [pc, #332]	; (8011fec <readCanToStructs+0x338>)
 8011ea0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ea4:	885b      	ldrh	r3, [r3, #2]
 8011ea6:	4951      	ldr	r1, [pc, #324]	; (8011fec <readCanToStructs+0x338>)
 8011ea8:	011b      	lsls	r3, r3, #4
 8011eaa:	440b      	add	r3, r1
 8011eac:	330c      	adds	r3, #12
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	3b01      	subs	r3, #1
 8011eb2:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011eb4:	2b05      	cmp	r3, #5
 8011eb6:	d91c      	bls.n	8011ef2 <readCanToStructs+0x23e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011eb8:	4b50      	ldr	r3, [pc, #320]	; (8011ffc <readCanToStructs+0x348>)
 8011eba:	4a4d      	ldr	r2, [pc, #308]	; (8011ff0 <readCanToStructs+0x33c>)
 8011ebc:	6811      	ldr	r1, [r2, #0]
 8011ebe:	6019      	str	r1, [r3, #0]
 8011ec0:	8892      	ldrh	r2, [r2, #4]
 8011ec2:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011ec4:	4b4e      	ldr	r3, [pc, #312]	; (8012000 <readCanToStructs+0x34c>)
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	d102      	bne.n	8011ed2 <readCanToStructs+0x21e>
						printf("GPS_PACKET_RECEIVED\n");
 8011ecc:	484d      	ldr	r0, [pc, #308]	; (8012004 <readCanToStructs+0x350>)
 8011ece:	f014 ff29 	bl	8026d24 <puts>
					Write_RTC();
 8011ed2:	f7fa fd2d 	bl	800c930 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011eda:	4a46      	ldr	r2, [pc, #280]	; (8011ff4 <readCanToStructs+0x340>)
 8011edc:	f240 4116 	movw	r1, #1046	; 0x416
 8011ee0:	fb01 f303 	mul.w	r3, r1, r3
 8011ee4:	4413      	add	r3, r2
 8011ee6:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011eea:	2200      	movs	r2, #0
 8011eec:	701a      	strb	r2, [r3, #0]
				break;
 8011eee:	f001 b9dc 	b.w	80132aa <readCanToStructs+0x15f6>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8011ef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ef6:	4a3f      	ldr	r2, [pc, #252]	; (8011ff4 <readCanToStructs+0x340>)
 8011ef8:	f240 4116 	movw	r1, #1046	; 0x416
 8011efc:	fb01 f303 	mul.w	r3, r1, r3
 8011f00:	4413      	add	r3, r2
 8011f02:	f203 2306 	addw	r3, r3, #518	; 0x206
 8011f06:	2201      	movs	r2, #1
 8011f08:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8011f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f0e:	4939      	ldr	r1, [pc, #228]	; (8011ff4 <readCanToStructs+0x340>)
 8011f10:	f240 4216 	movw	r2, #1046	; 0x416
 8011f14:	fb03 f202 	mul.w	r2, r3, r2
 8011f18:	440a      	add	r2, r1
 8011f1a:	f202 2207 	addw	r2, r2, #519	; 0x207
 8011f1e:	7812      	ldrb	r2, [r2, #0]
 8011f20:	3201      	adds	r2, #1
 8011f22:	b2d0      	uxtb	r0, r2
 8011f24:	4a33      	ldr	r2, [pc, #204]	; (8011ff4 <readCanToStructs+0x340>)
 8011f26:	f240 4116 	movw	r1, #1046	; 0x416
 8011f2a:	fb01 f303 	mul.w	r3, r1, r3
 8011f2e:	4413      	add	r3, r2
 8011f30:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011f34:	4602      	mov	r2, r0
 8011f36:	701a      	strb	r2, [r3, #0]
				break;
 8011f38:	f001 b9b7 	b.w	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011f3c:	4b2c      	ldr	r3, [pc, #176]	; (8011ff0 <readCanToStructs+0x33c>)
 8011f3e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011f40:	4b2a      	ldr	r3, [pc, #168]	; (8011fec <readCanToStructs+0x338>)
 8011f42:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f46:	885b      	ldrh	r3, [r3, #2]
 8011f48:	4a28      	ldr	r2, [pc, #160]	; (8011fec <readCanToStructs+0x338>)
 8011f4a:	011b      	lsls	r3, r3, #4
 8011f4c:	4413      	add	r3, r2
 8011f4e:	3304      	adds	r3, #4
 8011f50:	781b      	ldrb	r3, [r3, #0]
 8011f52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011f56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d110      	bne.n	8011f80 <readCanToStructs+0x2cc>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011f5e:	2206      	movs	r2, #6
 8011f60:	2100      	movs	r1, #0
 8011f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f64:	f014 fd5a 	bl	8026a1c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011f68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f6c:	4a21      	ldr	r2, [pc, #132]	; (8011ff4 <readCanToStructs+0x340>)
 8011f6e:	f240 4116 	movw	r1, #1046	; 0x416
 8011f72:	fb01 f303 	mul.w	r3, r1, r3
 8011f76:	4413      	add	r3, r2
 8011f78:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8011f80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f84:	4a1b      	ldr	r2, [pc, #108]	; (8011ff4 <readCanToStructs+0x340>)
 8011f86:	f240 4116 	movw	r1, #1046	; 0x416
 8011f8a:	fb01 f303 	mul.w	r3, r1, r3
 8011f8e:	4413      	add	r3, r2
 8011f90:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011f94:	781b      	ldrb	r3, [r3, #0]
 8011f96:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d015      	beq.n	8011fca <readCanToStructs+0x316>
					printf("GPS2 Packet Seq no MisMatch\n");
 8011f9e:	481a      	ldr	r0, [pc, #104]	; (8012008 <readCanToStructs+0x354>)
 8011fa0:	f014 fec0 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011fa4:	2206      	movs	r2, #6
 8011fa6:	2100      	movs	r1, #0
 8011fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011faa:	f014 fd37 	bl	8026a1c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fb2:	4a10      	ldr	r2, [pc, #64]	; (8011ff4 <readCanToStructs+0x340>)
 8011fb4:	f240 4116 	movw	r1, #1046	; 0x416
 8011fb8:	fb01 f303 	mul.w	r3, r1, r3
 8011fbc:	4413      	add	r3, r2
 8011fbe:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	701a      	strb	r2, [r3, #0]
					break;
 8011fc6:	f001 b970 	b.w	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011fca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011fce:	4613      	mov	r3, r2
 8011fd0:	00db      	lsls	r3, r3, #3
 8011fd2:	1a9b      	subs	r3, r3, r2
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd8:	4413      	add	r3, r2
 8011fda:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011fdc:	2301      	movs	r3, #1
 8011fde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011fe2:	e02a      	b.n	801203a <readCanToStructs+0x386>
 8011fe4:	20000504 	.word	0x20000504
 8011fe8:	2000308c 	.word	0x2000308c
 8011fec:	20007264 	.word	0x20007264
 8011ff0:	20003fd4 	.word	0x20003fd4
 8011ff4:	20006a38 	.word	0x20006a38
 8011ff8:	0802b6c4 	.word	0x0802b6c4
 8011ffc:	20003fcc 	.word	0x20003fcc
 8012000:	20000bbb 	.word	0x20000bbb
 8012004:	0802b6e0 	.word	0x0802b6e0
 8012008:	0802b6f4 	.word	0x0802b6f4
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801200c:	4bb6      	ldr	r3, [pc, #728]	; (80122e8 <readCanToStructs+0x634>)
 801200e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012012:	885b      	ldrh	r3, [r3, #2]
 8012014:	461a      	mov	r2, r3
 8012016:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801201a:	49b3      	ldr	r1, [pc, #716]	; (80122e8 <readCanToStructs+0x634>)
 801201c:	0112      	lsls	r2, r2, #4
 801201e:	440a      	add	r2, r1
 8012020:	4413      	add	r3, r2
 8012022:	3304      	adds	r3, #4
 8012024:	781a      	ldrb	r2, [r3, #0]
 8012026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012028:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801202c:	3301      	adds	r3, #1
 801202e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012030:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012034:	3301      	adds	r3, #1
 8012036:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801203a:	4bab      	ldr	r3, [pc, #684]	; (80122e8 <readCanToStructs+0x634>)
 801203c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012040:	885b      	ldrh	r3, [r3, #2]
 8012042:	4aa9      	ldr	r2, [pc, #676]	; (80122e8 <readCanToStructs+0x634>)
 8012044:	011b      	lsls	r3, r3, #4
 8012046:	4413      	add	r3, r2
 8012048:	330c      	adds	r3, #12
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012050:	429a      	cmp	r2, r3
 8012052:	d3db      	bcc.n	801200c <readCanToStructs+0x358>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8012054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012058:	4aa4      	ldr	r2, [pc, #656]	; (80122ec <readCanToStructs+0x638>)
 801205a:	f240 4116 	movw	r1, #1046	; 0x416
 801205e:	fb01 f303 	mul.w	r3, r1, r3
 8012062:	4413      	add	r3, r2
 8012064:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	461a      	mov	r2, r3
 801206c:	4613      	mov	r3, r2
 801206e:	00db      	lsls	r3, r3, #3
 8012070:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8012072:	4b9d      	ldr	r3, [pc, #628]	; (80122e8 <readCanToStructs+0x634>)
 8012074:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012078:	885b      	ldrh	r3, [r3, #2]
 801207a:	499b      	ldr	r1, [pc, #620]	; (80122e8 <readCanToStructs+0x634>)
 801207c:	011b      	lsls	r3, r3, #4
 801207e:	440b      	add	r3, r1
 8012080:	330c      	adds	r3, #12
 8012082:	781b      	ldrb	r3, [r3, #0]
 8012084:	3b01      	subs	r3, #1
 8012086:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8012088:	2b05      	cmp	r3, #5
 801208a:	d91c      	bls.n	80120c6 <readCanToStructs+0x412>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 801208c:	4b98      	ldr	r3, [pc, #608]	; (80122f0 <readCanToStructs+0x63c>)
 801208e:	4a99      	ldr	r2, [pc, #612]	; (80122f4 <readCanToStructs+0x640>)
 8012090:	6811      	ldr	r1, [r2, #0]
 8012092:	6019      	str	r1, [r3, #0]
 8012094:	8892      	ldrh	r2, [r2, #4]
 8012096:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8012098:	4b97      	ldr	r3, [pc, #604]	; (80122f8 <readCanToStructs+0x644>)
 801209a:	781b      	ldrb	r3, [r3, #0]
 801209c:	2b01      	cmp	r3, #1
 801209e:	d102      	bne.n	80120a6 <readCanToStructs+0x3f2>
						printf("GPS2_PACKET_RECEIVED\n");
 80120a0:	4896      	ldr	r0, [pc, #600]	; (80122fc <readCanToStructs+0x648>)
 80120a2:	f014 fe3f 	bl	8026d24 <puts>
					Write_RTC();
 80120a6:	f7fa fc43 	bl	800c930 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80120aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120ae:	4a8f      	ldr	r2, [pc, #572]	; (80122ec <readCanToStructs+0x638>)
 80120b0:	f240 4116 	movw	r1, #1046	; 0x416
 80120b4:	fb01 f303 	mul.w	r3, r1, r3
 80120b8:	4413      	add	r3, r2
 80120ba:	f203 2313 	addw	r3, r3, #531	; 0x213
 80120be:	2200      	movs	r2, #0
 80120c0:	701a      	strb	r2, [r3, #0]
				break;
 80120c2:	f001 b8f2 	b.w	80132aa <readCanToStructs+0x15f6>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80120c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120ca:	4a88      	ldr	r2, [pc, #544]	; (80122ec <readCanToStructs+0x638>)
 80120cc:	f240 4116 	movw	r1, #1046	; 0x416
 80120d0:	fb01 f303 	mul.w	r3, r1, r3
 80120d4:	4413      	add	r3, r2
 80120d6:	f203 2312 	addw	r3, r3, #530	; 0x212
 80120da:	2201      	movs	r2, #1
 80120dc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 80120de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120e2:	4982      	ldr	r1, [pc, #520]	; (80122ec <readCanToStructs+0x638>)
 80120e4:	f240 4216 	movw	r2, #1046	; 0x416
 80120e8:	fb03 f202 	mul.w	r2, r3, r2
 80120ec:	440a      	add	r2, r1
 80120ee:	f202 2213 	addw	r2, r2, #531	; 0x213
 80120f2:	7812      	ldrb	r2, [r2, #0]
 80120f4:	3201      	adds	r2, #1
 80120f6:	b2d0      	uxtb	r0, r2
 80120f8:	4a7c      	ldr	r2, [pc, #496]	; (80122ec <readCanToStructs+0x638>)
 80120fa:	f240 4116 	movw	r1, #1046	; 0x416
 80120fe:	fb01 f303 	mul.w	r3, r1, r3
 8012102:	4413      	add	r3, r2
 8012104:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012108:	4602      	mov	r2, r0
 801210a:	701a      	strb	r2, [r3, #0]
				break;
 801210c:	f001 b8cd 	b.w	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8012110:	4b7b      	ldr	r3, [pc, #492]	; (8012300 <readCanToStructs+0x64c>)
 8012112:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012114:	4b74      	ldr	r3, [pc, #464]	; (80122e8 <readCanToStructs+0x634>)
 8012116:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801211a:	885b      	ldrh	r3, [r3, #2]
 801211c:	4a72      	ldr	r2, [pc, #456]	; (80122e8 <readCanToStructs+0x634>)
 801211e:	011b      	lsls	r3, r3, #4
 8012120:	4413      	add	r3, r2
 8012122:	3304      	adds	r3, #4
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801212a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801212e:	2b00      	cmp	r3, #0
 8012130:	d110      	bne.n	8012154 <readCanToStructs+0x4a0>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8012132:	2218      	movs	r2, #24
 8012134:	2100      	movs	r1, #0
 8012136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012138:	f014 fc70 	bl	8026a1c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801213c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012140:	4a6a      	ldr	r2, [pc, #424]	; (80122ec <readCanToStructs+0x638>)
 8012142:	f240 4116 	movw	r1, #1046	; 0x416
 8012146:	fb01 f303 	mul.w	r3, r1, r3
 801214a:	4413      	add	r3, r2
 801214c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012150:	2200      	movs	r2, #0
 8012152:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8012154:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012158:	4a64      	ldr	r2, [pc, #400]	; (80122ec <readCanToStructs+0x638>)
 801215a:	f240 4116 	movw	r1, #1046	; 0x416
 801215e:	fb01 f303 	mul.w	r3, r1, r3
 8012162:	4413      	add	r3, r2
 8012164:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012168:	781b      	ldrb	r3, [r3, #0]
 801216a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801216e:	429a      	cmp	r2, r3
 8012170:	d015      	beq.n	801219e <readCanToStructs+0x4ea>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8012172:	4864      	ldr	r0, [pc, #400]	; (8012304 <readCanToStructs+0x650>)
 8012174:	f014 fdd6 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8012178:	2218      	movs	r2, #24
 801217a:	2100      	movs	r1, #0
 801217c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801217e:	f014 fc4d 	bl	8026a1c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012182:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012186:	4a59      	ldr	r2, [pc, #356]	; (80122ec <readCanToStructs+0x638>)
 8012188:	f240 4116 	movw	r1, #1046	; 0x416
 801218c:	fb01 f303 	mul.w	r3, r1, r3
 8012190:	4413      	add	r3, r2
 8012192:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012196:	2200      	movs	r2, #0
 8012198:	701a      	strb	r2, [r3, #0]
					break;
 801219a:	f001 b886 	b.w	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 801219e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80121a2:	4613      	mov	r3, r2
 80121a4:	00db      	lsls	r3, r3, #3
 80121a6:	1a9b      	subs	r3, r3, r2
 80121a8:	461a      	mov	r2, r3
 80121aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ac:	4413      	add	r3, r2
 80121ae:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80121b0:	2301      	movs	r3, #1
 80121b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80121b6:	e016      	b.n	80121e6 <readCanToStructs+0x532>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80121b8:	4b4b      	ldr	r3, [pc, #300]	; (80122e8 <readCanToStructs+0x634>)
 80121ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80121be:	885b      	ldrh	r3, [r3, #2]
 80121c0:	461a      	mov	r2, r3
 80121c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121c6:	4948      	ldr	r1, [pc, #288]	; (80122e8 <readCanToStructs+0x634>)
 80121c8:	0112      	lsls	r2, r2, #4
 80121ca:	440a      	add	r2, r1
 80121cc:	4413      	add	r3, r2
 80121ce:	3304      	adds	r3, #4
 80121d0:	781a      	ldrb	r2, [r3, #0]
 80121d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80121d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121d8:	3301      	adds	r3, #1
 80121da:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80121dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80121e0:	3301      	adds	r3, #1
 80121e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80121e6:	4b40      	ldr	r3, [pc, #256]	; (80122e8 <readCanToStructs+0x634>)
 80121e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80121ec:	885b      	ldrh	r3, [r3, #2]
 80121ee:	4a3e      	ldr	r2, [pc, #248]	; (80122e8 <readCanToStructs+0x634>)
 80121f0:	011b      	lsls	r3, r3, #4
 80121f2:	4413      	add	r3, r2
 80121f4:	330c      	adds	r3, #12
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80121fc:	429a      	cmp	r2, r3
 80121fe:	d3db      	bcc.n	80121b8 <readCanToStructs+0x504>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8012200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012204:	4a39      	ldr	r2, [pc, #228]	; (80122ec <readCanToStructs+0x638>)
 8012206:	f240 4116 	movw	r1, #1046	; 0x416
 801220a:	fb01 f303 	mul.w	r3, r1, r3
 801220e:	4413      	add	r3, r2
 8012210:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	461a      	mov	r2, r3
 8012218:	4613      	mov	r3, r2
 801221a:	00db      	lsls	r3, r3, #3
 801221c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 801221e:	4b32      	ldr	r3, [pc, #200]	; (80122e8 <readCanToStructs+0x634>)
 8012220:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012224:	885b      	ldrh	r3, [r3, #2]
 8012226:	4930      	ldr	r1, [pc, #192]	; (80122e8 <readCanToStructs+0x634>)
 8012228:	011b      	lsls	r3, r3, #4
 801222a:	440b      	add	r3, r1
 801222c:	330c      	adds	r3, #12
 801222e:	781b      	ldrb	r3, [r3, #0]
 8012230:	3b01      	subs	r3, #1
 8012232:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8012234:	2b17      	cmp	r3, #23
 8012236:	d932      	bls.n	801229e <readCanToStructs+0x5ea>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8012238:	4b31      	ldr	r3, [pc, #196]	; (8012300 <readCanToStructs+0x64c>)
 801223a:	781b      	ldrb	r3, [r3, #0]
 801223c:	461a      	mov	r2, r3
 801223e:	4613      	mov	r3, r2
 8012240:	005b      	lsls	r3, r3, #1
 8012242:	4413      	add	r3, r2
 8012244:	00db      	lsls	r3, r3, #3
 8012246:	4a30      	ldr	r2, [pc, #192]	; (8012308 <readCanToStructs+0x654>)
 8012248:	4413      	add	r3, r2
 801224a:	2218      	movs	r2, #24
 801224c:	492c      	ldr	r1, [pc, #176]	; (8012300 <readCanToStructs+0x64c>)
 801224e:	4618      	mov	r0, r3
 8012250:	f014 fbbc 	bl	80269cc <memcpy>
					if(Debug_flag == 1)
 8012254:	4b28      	ldr	r3, [pc, #160]	; (80122f8 <readCanToStructs+0x644>)
 8012256:	781b      	ldrb	r3, [r3, #0]
 8012258:	2b01      	cmp	r3, #1
 801225a:	d105      	bne.n	8012268 <readCanToStructs+0x5b4>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 801225c:	4b28      	ldr	r3, [pc, #160]	; (8012300 <readCanToStructs+0x64c>)
 801225e:	781b      	ldrb	r3, [r3, #0]
 8012260:	4619      	mov	r1, r3
 8012262:	482a      	ldr	r0, [pc, #168]	; (801230c <readCanToStructs+0x658>)
 8012264:	f014 fcc2 	bl	8026bec <iprintf>
					Is_CAN_Exchange_happening = YES;
 8012268:	4b29      	ldr	r3, [pc, #164]	; (8012310 <readCanToStructs+0x65c>)
 801226a:	2201      	movs	r2, #1
 801226c:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 801226e:	f007 fcb3 	bl	8019bd8 <HAL_GetTick>
 8012272:	4603      	mov	r3, r0
 8012274:	4a27      	ldr	r2, [pc, #156]	; (8012314 <readCanToStructs+0x660>)
 8012276:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8012278:	4b21      	ldr	r3, [pc, #132]	; (8012300 <readCanToStructs+0x64c>)
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	4618      	mov	r0, r3
 801227e:	f7f6 fa7d 	bl	800877c <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012286:	4a19      	ldr	r2, [pc, #100]	; (80122ec <readCanToStructs+0x638>)
 8012288:	f240 4116 	movw	r1, #1046	; 0x416
 801228c:	fb01 f303 	mul.w	r3, r1, r3
 8012290:	4413      	add	r3, r2
 8012292:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012296:	2200      	movs	r2, #0
 8012298:	701a      	strb	r2, [r3, #0]
				break;
 801229a:	f001 b806 	b.w	80132aa <readCanToStructs+0x15f6>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 801229e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122a2:	4a12      	ldr	r2, [pc, #72]	; (80122ec <readCanToStructs+0x638>)
 80122a4:	f240 4116 	movw	r1, #1046	; 0x416
 80122a8:	fb01 f303 	mul.w	r3, r1, r3
 80122ac:	4413      	add	r3, r2
 80122ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80122b2:	2201      	movs	r2, #1
 80122b4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80122b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122ba:	490c      	ldr	r1, [pc, #48]	; (80122ec <readCanToStructs+0x638>)
 80122bc:	f240 4216 	movw	r2, #1046	; 0x416
 80122c0:	fb03 f202 	mul.w	r2, r3, r2
 80122c4:	440a      	add	r2, r1
 80122c6:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80122ca:	7812      	ldrb	r2, [r2, #0]
 80122cc:	3201      	adds	r2, #1
 80122ce:	b2d0      	uxtb	r0, r2
 80122d0:	4a06      	ldr	r2, [pc, #24]	; (80122ec <readCanToStructs+0x638>)
 80122d2:	f240 4116 	movw	r1, #1046	; 0x416
 80122d6:	fb01 f303 	mul.w	r3, r1, r3
 80122da:	4413      	add	r3, r2
 80122dc:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80122e0:	4602      	mov	r2, r0
 80122e2:	701a      	strb	r2, [r3, #0]
				break;
 80122e4:	f000 bfe1 	b.w	80132aa <readCanToStructs+0x15f6>
 80122e8:	20007264 	.word	0x20007264
 80122ec:	20006a38 	.word	0x20006a38
 80122f0:	20003fcc 	.word	0x20003fcc
 80122f4:	20003fd4 	.word	0x20003fd4
 80122f8:	20000bbb 	.word	0x20000bbb
 80122fc:	0802b710 	.word	0x0802b710
 8012300:	20002f9c 	.word	0x20002f9c
 8012304:	0802b728 	.word	0x0802b728
 8012308:	20002e94 	.word	0x20002e94
 801230c:	0802b74c 	.word	0x0802b74c
 8012310:	2000030b 	.word	0x2000030b
 8012314:	200024b4 	.word	0x200024b4
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8012318:	4b9f      	ldr	r3, [pc, #636]	; (8012598 <readCanToStructs+0x8e4>)
 801231a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801231c:	4b9f      	ldr	r3, [pc, #636]	; (801259c <readCanToStructs+0x8e8>)
 801231e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012322:	885b      	ldrh	r3, [r3, #2]
 8012324:	4a9d      	ldr	r2, [pc, #628]	; (801259c <readCanToStructs+0x8e8>)
 8012326:	011b      	lsls	r3, r3, #4
 8012328:	4413      	add	r3, r2
 801232a:	3304      	adds	r3, #4
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012332:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012336:	2b00      	cmp	r3, #0
 8012338:	d110      	bne.n	801235c <readCanToStructs+0x6a8>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 801233a:	2218      	movs	r2, #24
 801233c:	2100      	movs	r1, #0
 801233e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012340:	f014 fb6c 	bl	8026a1c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012344:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012348:	4a95      	ldr	r2, [pc, #596]	; (80125a0 <readCanToStructs+0x8ec>)
 801234a:	f240 4116 	movw	r1, #1046	; 0x416
 801234e:	fb01 f303 	mul.w	r3, r1, r3
 8012352:	4413      	add	r3, r2
 8012354:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012358:	2200      	movs	r2, #0
 801235a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 801235c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012360:	4a8f      	ldr	r2, [pc, #572]	; (80125a0 <readCanToStructs+0x8ec>)
 8012362:	f240 4116 	movw	r1, #1046	; 0x416
 8012366:	fb01 f303 	mul.w	r3, r1, r3
 801236a:	4413      	add	r3, r2
 801236c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012370:	781b      	ldrb	r3, [r3, #0]
 8012372:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012376:	429a      	cmp	r2, r3
 8012378:	d015      	beq.n	80123a6 <readCanToStructs+0x6f2>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 801237a:	488a      	ldr	r0, [pc, #552]	; (80125a4 <readCanToStructs+0x8f0>)
 801237c:	f014 fcd2 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8012380:	2218      	movs	r2, #24
 8012382:	2100      	movs	r1, #0
 8012384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012386:	f014 fb49 	bl	8026a1c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801238a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801238e:	4a84      	ldr	r2, [pc, #528]	; (80125a0 <readCanToStructs+0x8ec>)
 8012390:	f240 4116 	movw	r1, #1046	; 0x416
 8012394:	fb01 f303 	mul.w	r3, r1, r3
 8012398:	4413      	add	r3, r2
 801239a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801239e:	2200      	movs	r2, #0
 80123a0:	701a      	strb	r2, [r3, #0]
					break;
 80123a2:	f000 bf82 	b.w	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80123a6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80123aa:	4613      	mov	r3, r2
 80123ac:	00db      	lsls	r3, r3, #3
 80123ae:	1a9b      	subs	r3, r3, r2
 80123b0:	461a      	mov	r2, r3
 80123b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b4:	4413      	add	r3, r2
 80123b6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80123b8:	2301      	movs	r3, #1
 80123ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80123be:	e016      	b.n	80123ee <readCanToStructs+0x73a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80123c0:	4b76      	ldr	r3, [pc, #472]	; (801259c <readCanToStructs+0x8e8>)
 80123c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123c6:	885b      	ldrh	r3, [r3, #2]
 80123c8:	461a      	mov	r2, r3
 80123ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80123ce:	4973      	ldr	r1, [pc, #460]	; (801259c <readCanToStructs+0x8e8>)
 80123d0:	0112      	lsls	r2, r2, #4
 80123d2:	440a      	add	r2, r1
 80123d4:	4413      	add	r3, r2
 80123d6:	3304      	adds	r3, #4
 80123d8:	781a      	ldrb	r2, [r3, #0]
 80123da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123dc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80123de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e0:	3301      	adds	r3, #1
 80123e2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80123e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80123e8:	3301      	adds	r3, #1
 80123ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80123ee:	4b6b      	ldr	r3, [pc, #428]	; (801259c <readCanToStructs+0x8e8>)
 80123f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123f4:	885b      	ldrh	r3, [r3, #2]
 80123f6:	4a69      	ldr	r2, [pc, #420]	; (801259c <readCanToStructs+0x8e8>)
 80123f8:	011b      	lsls	r3, r3, #4
 80123fa:	4413      	add	r3, r2
 80123fc:	330c      	adds	r3, #12
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012404:	429a      	cmp	r2, r3
 8012406:	d3db      	bcc.n	80123c0 <readCanToStructs+0x70c>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8012408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801240c:	4a64      	ldr	r2, [pc, #400]	; (80125a0 <readCanToStructs+0x8ec>)
 801240e:	f240 4116 	movw	r1, #1046	; 0x416
 8012412:	fb01 f303 	mul.w	r3, r1, r3
 8012416:	4413      	add	r3, r2
 8012418:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801241c:	781b      	ldrb	r3, [r3, #0]
 801241e:	461a      	mov	r2, r3
 8012420:	4613      	mov	r3, r2
 8012422:	00db      	lsls	r3, r3, #3
 8012424:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 8012426:	4b5d      	ldr	r3, [pc, #372]	; (801259c <readCanToStructs+0x8e8>)
 8012428:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801242c:	885b      	ldrh	r3, [r3, #2]
 801242e:	495b      	ldr	r1, [pc, #364]	; (801259c <readCanToStructs+0x8e8>)
 8012430:	011b      	lsls	r3, r3, #4
 8012432:	440b      	add	r3, r1
 8012434:	330c      	adds	r3, #12
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	3b01      	subs	r3, #1
 801243a:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 801243c:	2b17      	cmp	r3, #23
 801243e:	d932      	bls.n	80124a6 <readCanToStructs+0x7f2>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8012440:	4b55      	ldr	r3, [pc, #340]	; (8012598 <readCanToStructs+0x8e4>)
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	461a      	mov	r2, r3
 8012446:	4613      	mov	r3, r2
 8012448:	005b      	lsls	r3, r3, #1
 801244a:	4413      	add	r3, r2
 801244c:	00db      	lsls	r3, r3, #3
 801244e:	4a56      	ldr	r2, [pc, #344]	; (80125a8 <readCanToStructs+0x8f4>)
 8012450:	4413      	add	r3, r2
 8012452:	2218      	movs	r2, #24
 8012454:	4950      	ldr	r1, [pc, #320]	; (8012598 <readCanToStructs+0x8e4>)
 8012456:	4618      	mov	r0, r3
 8012458:	f014 fab8 	bl	80269cc <memcpy>
					if(Debug_flag == 1)
 801245c:	4b53      	ldr	r3, [pc, #332]	; (80125ac <readCanToStructs+0x8f8>)
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	2b01      	cmp	r3, #1
 8012462:	d105      	bne.n	8012470 <readCanToStructs+0x7bc>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8012464:	4b4c      	ldr	r3, [pc, #304]	; (8012598 <readCanToStructs+0x8e4>)
 8012466:	781b      	ldrb	r3, [r3, #0]
 8012468:	4619      	mov	r1, r3
 801246a:	4851      	ldr	r0, [pc, #324]	; (80125b0 <readCanToStructs+0x8fc>)
 801246c:	f014 fbbe 	bl	8026bec <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8012470:	f007 fbb2 	bl	8019bd8 <HAL_GetTick>
 8012474:	4603      	mov	r3, r0
 8012476:	4a4f      	ldr	r2, [pc, #316]	; (80125b4 <readCanToStructs+0x900>)
 8012478:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 801247a:	4b4f      	ldr	r3, [pc, #316]	; (80125b8 <readCanToStructs+0x904>)
 801247c:	2201      	movs	r2, #1
 801247e:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8012480:	4b45      	ldr	r3, [pc, #276]	; (8012598 <readCanToStructs+0x8e4>)
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	4618      	mov	r0, r3
 8012486:	f7f6 f979 	bl	800877c <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801248a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801248e:	4a44      	ldr	r2, [pc, #272]	; (80125a0 <readCanToStructs+0x8ec>)
 8012490:	f240 4116 	movw	r1, #1046	; 0x416
 8012494:	fb01 f303 	mul.w	r3, r1, r3
 8012498:	4413      	add	r3, r2
 801249a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801249e:	2200      	movs	r2, #0
 80124a0:	701a      	strb	r2, [r3, #0]
				break;
 80124a2:	f000 bf02 	b.w	80132aa <readCanToStructs+0x15f6>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 80124a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124aa:	4a3d      	ldr	r2, [pc, #244]	; (80125a0 <readCanToStructs+0x8ec>)
 80124ac:	f240 4116 	movw	r1, #1046	; 0x416
 80124b0:	fb01 f303 	mul.w	r3, r1, r3
 80124b4:	4413      	add	r3, r2
 80124b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80124ba:	2201      	movs	r2, #1
 80124bc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 80124be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124c2:	4937      	ldr	r1, [pc, #220]	; (80125a0 <readCanToStructs+0x8ec>)
 80124c4:	f240 4216 	movw	r2, #1046	; 0x416
 80124c8:	fb03 f202 	mul.w	r2, r3, r2
 80124cc:	440a      	add	r2, r1
 80124ce:	f202 4205 	addw	r2, r2, #1029	; 0x405
 80124d2:	7812      	ldrb	r2, [r2, #0]
 80124d4:	3201      	adds	r2, #1
 80124d6:	b2d0      	uxtb	r0, r2
 80124d8:	4a31      	ldr	r2, [pc, #196]	; (80125a0 <readCanToStructs+0x8ec>)
 80124da:	f240 4116 	movw	r1, #1046	; 0x416
 80124de:	fb01 f303 	mul.w	r3, r1, r3
 80124e2:	4413      	add	r3, r2
 80124e4:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80124e8:	4602      	mov	r2, r0
 80124ea:	701a      	strb	r2, [r3, #0]
				break;
 80124ec:	f000 bedd 	b.w	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 80124f0:	4b32      	ldr	r3, [pc, #200]	; (80125bc <readCanToStructs+0x908>)
 80124f2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80124f4:	4b29      	ldr	r3, [pc, #164]	; (801259c <readCanToStructs+0x8e8>)
 80124f6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80124fa:	885b      	ldrh	r3, [r3, #2]
 80124fc:	4a27      	ldr	r2, [pc, #156]	; (801259c <readCanToStructs+0x8e8>)
 80124fe:	011b      	lsls	r3, r3, #4
 8012500:	4413      	add	r3, r2
 8012502:	3304      	adds	r3, #4
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801250a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801250e:	2b00      	cmp	r3, #0
 8012510:	d110      	bne.n	8012534 <readCanToStructs+0x880>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8012512:	2246      	movs	r2, #70	; 0x46
 8012514:	2100      	movs	r1, #0
 8012516:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012518:	f014 fa80 	bl	8026a1c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 801251c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012520:	4a1f      	ldr	r2, [pc, #124]	; (80125a0 <readCanToStructs+0x8ec>)
 8012522:	f240 4116 	movw	r1, #1046	; 0x416
 8012526:	fb01 f303 	mul.w	r3, r1, r3
 801252a:	4413      	add	r3, r2
 801252c:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8012530:	2200      	movs	r2, #0
 8012532:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 8012534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012538:	4a19      	ldr	r2, [pc, #100]	; (80125a0 <readCanToStructs+0x8ec>)
 801253a:	f240 4116 	movw	r1, #1046	; 0x416
 801253e:	fb01 f303 	mul.w	r3, r1, r3
 8012542:	4413      	add	r3, r2
 8012544:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8012548:	781b      	ldrb	r3, [r3, #0]
 801254a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801254e:	429a      	cmp	r2, r3
 8012550:	d015      	beq.n	801257e <readCanToStructs+0x8ca>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 8012552:	481b      	ldr	r0, [pc, #108]	; (80125c0 <readCanToStructs+0x90c>)
 8012554:	f014 fbe6 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8012558:	2246      	movs	r2, #70	; 0x46
 801255a:	2100      	movs	r1, #0
 801255c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801255e:	f014 fa5d 	bl	8026a1c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8012562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012566:	4a0e      	ldr	r2, [pc, #56]	; (80125a0 <readCanToStructs+0x8ec>)
 8012568:	f240 4116 	movw	r1, #1046	; 0x416
 801256c:	fb01 f303 	mul.w	r3, r1, r3
 8012570:	4413      	add	r3, r2
 8012572:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8012576:	2200      	movs	r2, #0
 8012578:	701a      	strb	r2, [r3, #0]
					break;
 801257a:	f000 be96 	b.w	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 801257e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012582:	4613      	mov	r3, r2
 8012584:	00db      	lsls	r3, r3, #3
 8012586:	1a9b      	subs	r3, r3, r2
 8012588:	461a      	mov	r2, r3
 801258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801258c:	4413      	add	r3, r2
 801258e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012590:	2301      	movs	r3, #1
 8012592:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012596:	e02c      	b.n	80125f2 <readCanToStructs+0x93e>
 8012598:	20002f9c 	.word	0x20002f9c
 801259c:	20007264 	.word	0x20007264
 80125a0:	20006a38 	.word	0x20006a38
 80125a4:	0802b75c 	.word	0x0802b75c
 80125a8:	20002e94 	.word	0x20002e94
 80125ac:	20000bbb 	.word	0x20000bbb
 80125b0:	0802b780 	.word	0x0802b780
 80125b4:	200024b4 	.word	0x200024b4
 80125b8:	2000030b 	.word	0x2000030b
 80125bc:	20003044 	.word	0x20003044
 80125c0:	0802b790 	.word	0x0802b790
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80125c4:	4bba      	ldr	r3, [pc, #744]	; (80128b0 <readCanToStructs+0xbfc>)
 80125c6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80125ca:	885b      	ldrh	r3, [r3, #2]
 80125cc:	461a      	mov	r2, r3
 80125ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125d2:	49b7      	ldr	r1, [pc, #732]	; (80128b0 <readCanToStructs+0xbfc>)
 80125d4:	0112      	lsls	r2, r2, #4
 80125d6:	440a      	add	r2, r1
 80125d8:	4413      	add	r3, r2
 80125da:	3304      	adds	r3, #4
 80125dc:	781a      	ldrb	r2, [r3, #0]
 80125de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80125e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e4:	3301      	adds	r3, #1
 80125e6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80125e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125ec:	3301      	adds	r3, #1
 80125ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80125f2:	4baf      	ldr	r3, [pc, #700]	; (80128b0 <readCanToStructs+0xbfc>)
 80125f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80125f8:	885b      	ldrh	r3, [r3, #2]
 80125fa:	4aad      	ldr	r2, [pc, #692]	; (80128b0 <readCanToStructs+0xbfc>)
 80125fc:	011b      	lsls	r3, r3, #4
 80125fe:	4413      	add	r3, r2
 8012600:	330c      	adds	r3, #12
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012608:	429a      	cmp	r2, r3
 801260a:	d3db      	bcc.n	80125c4 <readCanToStructs+0x910>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 801260c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012610:	4aa8      	ldr	r2, [pc, #672]	; (80128b4 <readCanToStructs+0xc00>)
 8012612:	f240 4116 	movw	r1, #1046	; 0x416
 8012616:	fb01 f303 	mul.w	r3, r1, r3
 801261a:	4413      	add	r3, r2
 801261c:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8012620:	781b      	ldrb	r3, [r3, #0]
 8012622:	461a      	mov	r2, r3
 8012624:	4613      	mov	r3, r2
 8012626:	00db      	lsls	r3, r3, #3
 8012628:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 801262a:	4ba1      	ldr	r3, [pc, #644]	; (80128b0 <readCanToStructs+0xbfc>)
 801262c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012630:	885b      	ldrh	r3, [r3, #2]
 8012632:	499f      	ldr	r1, [pc, #636]	; (80128b0 <readCanToStructs+0xbfc>)
 8012634:	011b      	lsls	r3, r3, #4
 8012636:	440b      	add	r3, r1
 8012638:	330c      	adds	r3, #12
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	3b01      	subs	r3, #1
 801263e:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8012640:	2b45      	cmp	r3, #69	; 0x45
 8012642:	d93d      	bls.n	80126c0 <readCanToStructs+0xa0c>
					if(Debug_flag == 1)
 8012644:	4b9c      	ldr	r3, [pc, #624]	; (80128b8 <readCanToStructs+0xc04>)
 8012646:	781b      	ldrb	r3, [r3, #0]
 8012648:	2b01      	cmp	r3, #1
 801264a:	d102      	bne.n	8012652 <readCanToStructs+0x99e>
						printf("RCV V-Message-1\n");
 801264c:	489b      	ldr	r0, [pc, #620]	; (80128bc <readCanToStructs+0xc08>)
 801264e:	f014 fb69 	bl	8026d24 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8012652:	2246      	movs	r2, #70	; 0x46
 8012654:	2100      	movs	r1, #0
 8012656:	489a      	ldr	r0, [pc, #616]	; (80128c0 <readCanToStructs+0xc0c>)
 8012658:	f014 f9e0 	bl	8026a1c <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801265c:	4a98      	ldr	r2, [pc, #608]	; (80128c0 <readCanToStructs+0xc0c>)
 801265e:	4b99      	ldr	r3, [pc, #612]	; (80128c4 <readCanToStructs+0xc10>)
 8012660:	4610      	mov	r0, r2
 8012662:	4619      	mov	r1, r3
 8012664:	2346      	movs	r3, #70	; 0x46
 8012666:	461a      	mov	r2, r3
 8012668:	f014 f9b0 	bl	80269cc <memcpy>
					Is_CAN_Exchange_happening = YES;
 801266c:	4b96      	ldr	r3, [pc, #600]	; (80128c8 <readCanToStructs+0xc14>)
 801266e:	2201      	movs	r2, #1
 8012670:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 8012672:	4b93      	ldr	r3, [pc, #588]	; (80128c0 <readCanToStructs+0xc0c>)
 8012674:	881b      	ldrh	r3, [r3, #0]
 8012676:	4619      	mov	r1, r3
 8012678:	4a94      	ldr	r2, [pc, #592]	; (80128cc <readCanToStructs+0xc18>)
 801267a:	460b      	mov	r3, r1
 801267c:	005b      	lsls	r3, r3, #1
 801267e:	440b      	add	r3, r1
 8012680:	00db      	lsls	r3, r3, #3
 8012682:	4413      	add	r3, r2
 8012684:	3304      	adds	r3, #4
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	2b01      	cmp	r3, #1
 801268a:	d00b      	beq.n	80126a4 <readCanToStructs+0x9f0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 801268c:	4b8c      	ldr	r3, [pc, #560]	; (80128c0 <readCanToStructs+0xc0c>)
 801268e:	889b      	ldrh	r3, [r3, #4]
 8012690:	b2d9      	uxtb	r1, r3
 8012692:	4b8b      	ldr	r3, [pc, #556]	; (80128c0 <readCanToStructs+0xc0c>)
 8012694:	881b      	ldrh	r3, [r3, #0]
 8012696:	b2da      	uxtb	r2, r3
 8012698:	4b89      	ldr	r3, [pc, #548]	; (80128c0 <readCanToStructs+0xc0c>)
 801269a:	885b      	ldrh	r3, [r3, #2]
 801269c:	b2db      	uxtb	r3, r3
 801269e:	488c      	ldr	r0, [pc, #560]	; (80128d0 <readCanToStructs+0xc1c>)
 80126a0:	f7f2 fc1a 	bl	8004ed8 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 80126a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126a8:	4a82      	ldr	r2, [pc, #520]	; (80128b4 <readCanToStructs+0xc00>)
 80126aa:	f240 4116 	movw	r1, #1046	; 0x416
 80126ae:	fb01 f303 	mul.w	r3, r1, r3
 80126b2:	4413      	add	r3, r2
 80126b4:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80126b8:	2200      	movs	r2, #0
 80126ba:	701a      	strb	r2, [r3, #0]
				break;
 80126bc:	f000 bdf5 	b.w	80132aa <readCanToStructs+0x15f6>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 80126c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126c4:	4a7b      	ldr	r2, [pc, #492]	; (80128b4 <readCanToStructs+0xc00>)
 80126c6:	f240 4116 	movw	r1, #1046	; 0x416
 80126ca:	fb01 f303 	mul.w	r3, r1, r3
 80126ce:	4413      	add	r3, r2
 80126d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80126d4:	2201      	movs	r2, #1
 80126d6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 80126d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126dc:	4975      	ldr	r1, [pc, #468]	; (80128b4 <readCanToStructs+0xc00>)
 80126de:	f240 4216 	movw	r2, #1046	; 0x416
 80126e2:	fb03 f202 	mul.w	r2, r3, r2
 80126e6:	440a      	add	r2, r1
 80126e8:	f202 4207 	addw	r2, r2, #1031	; 0x407
 80126ec:	7812      	ldrb	r2, [r2, #0]
 80126ee:	3201      	adds	r2, #1
 80126f0:	b2d0      	uxtb	r0, r2
 80126f2:	4a70      	ldr	r2, [pc, #448]	; (80128b4 <readCanToStructs+0xc00>)
 80126f4:	f240 4116 	movw	r1, #1046	; 0x416
 80126f8:	fb01 f303 	mul.w	r3, r1, r3
 80126fc:	4413      	add	r3, r2
 80126fe:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8012702:	4602      	mov	r2, r0
 8012704:	701a      	strb	r2, [r3, #0]
				break;
 8012706:	f000 bdd0 	b.w	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 801270a:	4b6e      	ldr	r3, [pc, #440]	; (80128c4 <readCanToStructs+0xc10>)
 801270c:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801270e:	4b68      	ldr	r3, [pc, #416]	; (80128b0 <readCanToStructs+0xbfc>)
 8012710:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012714:	885b      	ldrh	r3, [r3, #2]
 8012716:	4a66      	ldr	r2, [pc, #408]	; (80128b0 <readCanToStructs+0xbfc>)
 8012718:	011b      	lsls	r3, r3, #4
 801271a:	4413      	add	r3, r2
 801271c:	3304      	adds	r3, #4
 801271e:	781b      	ldrb	r3, [r3, #0]
 8012720:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012724:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012728:	2b00      	cmp	r3, #0
 801272a:	d110      	bne.n	801274e <readCanToStructs+0xa9a>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801272c:	2246      	movs	r2, #70	; 0x46
 801272e:	2100      	movs	r1, #0
 8012730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012732:	f014 f973 	bl	8026a1c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8012736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801273a:	4a5e      	ldr	r2, [pc, #376]	; (80128b4 <readCanToStructs+0xc00>)
 801273c:	f240 4116 	movw	r1, #1046	; 0x416
 8012740:	fb01 f303 	mul.w	r3, r1, r3
 8012744:	4413      	add	r3, r2
 8012746:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801274a:	2200      	movs	r2, #0
 801274c:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 801274e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012752:	4a58      	ldr	r2, [pc, #352]	; (80128b4 <readCanToStructs+0xc00>)
 8012754:	f240 4116 	movw	r1, #1046	; 0x416
 8012758:	fb01 f303 	mul.w	r3, r1, r3
 801275c:	4413      	add	r3, r2
 801275e:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012768:	429a      	cmp	r2, r3
 801276a:	d015      	beq.n	8012798 <readCanToStructs+0xae4>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 801276c:	4859      	ldr	r0, [pc, #356]	; (80128d4 <readCanToStructs+0xc20>)
 801276e:	f014 fad9 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8012772:	2246      	movs	r2, #70	; 0x46
 8012774:	2100      	movs	r1, #0
 8012776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012778:	f014 f950 	bl	8026a1c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 801277c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012780:	4a4c      	ldr	r2, [pc, #304]	; (80128b4 <readCanToStructs+0xc00>)
 8012782:	f240 4116 	movw	r1, #1046	; 0x416
 8012786:	fb01 f303 	mul.w	r3, r1, r3
 801278a:	4413      	add	r3, r2
 801278c:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8012790:	2200      	movs	r2, #0
 8012792:	701a      	strb	r2, [r3, #0]
					break;
 8012794:	f000 bd89 	b.w	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012798:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801279c:	4613      	mov	r3, r2
 801279e:	00db      	lsls	r3, r3, #3
 80127a0:	1a9b      	subs	r3, r3, r2
 80127a2:	461a      	mov	r2, r3
 80127a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a6:	4413      	add	r3, r2
 80127a8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80127aa:	2301      	movs	r3, #1
 80127ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80127b0:	e016      	b.n	80127e0 <readCanToStructs+0xb2c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80127b2:	4b3f      	ldr	r3, [pc, #252]	; (80128b0 <readCanToStructs+0xbfc>)
 80127b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127b8:	885b      	ldrh	r3, [r3, #2]
 80127ba:	461a      	mov	r2, r3
 80127bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80127c0:	493b      	ldr	r1, [pc, #236]	; (80128b0 <readCanToStructs+0xbfc>)
 80127c2:	0112      	lsls	r2, r2, #4
 80127c4:	440a      	add	r2, r1
 80127c6:	4413      	add	r3, r2
 80127c8:	3304      	adds	r3, #4
 80127ca:	781a      	ldrb	r2, [r3, #0]
 80127cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ce:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80127d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d2:	3301      	adds	r3, #1
 80127d4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80127d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80127da:	3301      	adds	r3, #1
 80127dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80127e0:	4b33      	ldr	r3, [pc, #204]	; (80128b0 <readCanToStructs+0xbfc>)
 80127e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127e6:	885b      	ldrh	r3, [r3, #2]
 80127e8:	4a31      	ldr	r2, [pc, #196]	; (80128b0 <readCanToStructs+0xbfc>)
 80127ea:	011b      	lsls	r3, r3, #4
 80127ec:	4413      	add	r3, r2
 80127ee:	330c      	adds	r3, #12
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80127f6:	429a      	cmp	r2, r3
 80127f8:	d3db      	bcc.n	80127b2 <readCanToStructs+0xafe>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 80127fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127fe:	4a2d      	ldr	r2, [pc, #180]	; (80128b4 <readCanToStructs+0xc00>)
 8012800:	f240 4116 	movw	r1, #1046	; 0x416
 8012804:	fb01 f303 	mul.w	r3, r1, r3
 8012808:	4413      	add	r3, r2
 801280a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	461a      	mov	r2, r3
 8012812:	4613      	mov	r3, r2
 8012814:	00db      	lsls	r3, r3, #3
 8012816:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8012818:	4b25      	ldr	r3, [pc, #148]	; (80128b0 <readCanToStructs+0xbfc>)
 801281a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801281e:	885b      	ldrh	r3, [r3, #2]
 8012820:	4923      	ldr	r1, [pc, #140]	; (80128b0 <readCanToStructs+0xbfc>)
 8012822:	011b      	lsls	r3, r3, #4
 8012824:	440b      	add	r3, r1
 8012826:	330c      	adds	r3, #12
 8012828:	781b      	ldrb	r3, [r3, #0]
 801282a:	3b01      	subs	r3, #1
 801282c:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 801282e:	2b45      	cmp	r3, #69	; 0x45
 8012830:	d954      	bls.n	80128dc <readCanToStructs+0xc28>
					if(Debug_flag == 1)
 8012832:	4b21      	ldr	r3, [pc, #132]	; (80128b8 <readCanToStructs+0xc04>)
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	2b01      	cmp	r3, #1
 8012838:	d102      	bne.n	8012840 <readCanToStructs+0xb8c>
						printf("RCV V-Message-2\n");
 801283a:	4827      	ldr	r0, [pc, #156]	; (80128d8 <readCanToStructs+0xc24>)
 801283c:	f014 fa72 	bl	8026d24 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8012840:	2246      	movs	r2, #70	; 0x46
 8012842:	2100      	movs	r1, #0
 8012844:	481e      	ldr	r0, [pc, #120]	; (80128c0 <readCanToStructs+0xc0c>)
 8012846:	f014 f8e9 	bl	8026a1c <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801284a:	4a1d      	ldr	r2, [pc, #116]	; (80128c0 <readCanToStructs+0xc0c>)
 801284c:	4b1d      	ldr	r3, [pc, #116]	; (80128c4 <readCanToStructs+0xc10>)
 801284e:	4610      	mov	r0, r2
 8012850:	4619      	mov	r1, r3
 8012852:	2346      	movs	r3, #70	; 0x46
 8012854:	461a      	mov	r2, r3
 8012856:	f014 f8b9 	bl	80269cc <memcpy>
					Is_CAN_Exchange_happening = YES;
 801285a:	4b1b      	ldr	r3, [pc, #108]	; (80128c8 <readCanToStructs+0xc14>)
 801285c:	2201      	movs	r2, #1
 801285e:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 8012860:	4b17      	ldr	r3, [pc, #92]	; (80128c0 <readCanToStructs+0xc0c>)
 8012862:	881b      	ldrh	r3, [r3, #0]
 8012864:	4619      	mov	r1, r3
 8012866:	4a19      	ldr	r2, [pc, #100]	; (80128cc <readCanToStructs+0xc18>)
 8012868:	460b      	mov	r3, r1
 801286a:	005b      	lsls	r3, r3, #1
 801286c:	440b      	add	r3, r1
 801286e:	00db      	lsls	r3, r3, #3
 8012870:	4413      	add	r3, r2
 8012872:	3303      	adds	r3, #3
 8012874:	781b      	ldrb	r3, [r3, #0]
 8012876:	2b01      	cmp	r3, #1
 8012878:	d00b      	beq.n	8012892 <readCanToStructs+0xbde>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 801287a:	4b11      	ldr	r3, [pc, #68]	; (80128c0 <readCanToStructs+0xc0c>)
 801287c:	889b      	ldrh	r3, [r3, #4]
 801287e:	b2d9      	uxtb	r1, r3
 8012880:	4b0f      	ldr	r3, [pc, #60]	; (80128c0 <readCanToStructs+0xc0c>)
 8012882:	881b      	ldrh	r3, [r3, #0]
 8012884:	b2da      	uxtb	r2, r3
 8012886:	4b0e      	ldr	r3, [pc, #56]	; (80128c0 <readCanToStructs+0xc0c>)
 8012888:	885b      	ldrh	r3, [r3, #2]
 801288a:	b2db      	uxtb	r3, r3
 801288c:	4810      	ldr	r0, [pc, #64]	; (80128d0 <readCanToStructs+0xc1c>)
 801288e:	f7f2 fb23 	bl	8004ed8 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8012892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012896:	4a07      	ldr	r2, [pc, #28]	; (80128b4 <readCanToStructs+0xc00>)
 8012898:	f240 4116 	movw	r1, #1046	; 0x416
 801289c:	fb01 f303 	mul.w	r3, r1, r3
 80128a0:	4413      	add	r3, r2
 80128a2:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80128a6:	2200      	movs	r2, #0
 80128a8:	701a      	strb	r2, [r3, #0]
				break;
 80128aa:	f000 bcfe 	b.w	80132aa <readCanToStructs+0x15f6>
 80128ae:	bf00      	nop
 80128b0:	20007264 	.word	0x20007264
 80128b4:	20006a38 	.word	0x20006a38
 80128b8:	20000bbb 	.word	0x20000bbb
 80128bc:	0802b7b4 	.word	0x0802b7b4
 80128c0:	20002ffc 	.word	0x20002ffc
 80128c4:	20003044 	.word	0x20003044
 80128c8:	2000030b 	.word	0x2000030b
 80128cc:	20002da4 	.word	0x20002da4
 80128d0:	20003002 	.word	0x20003002
 80128d4:	0802b7c4 	.word	0x0802b7c4
 80128d8:	0802b7e8 	.word	0x0802b7e8
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 80128dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128e0:	4aa0      	ldr	r2, [pc, #640]	; (8012b64 <readCanToStructs+0xeb0>)
 80128e2:	f240 4116 	movw	r1, #1046	; 0x416
 80128e6:	fb01 f303 	mul.w	r3, r1, r3
 80128ea:	4413      	add	r3, r2
 80128ec:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80128f0:	2201      	movs	r2, #1
 80128f2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 80128f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128f8:	499a      	ldr	r1, [pc, #616]	; (8012b64 <readCanToStructs+0xeb0>)
 80128fa:	f240 4216 	movw	r2, #1046	; 0x416
 80128fe:	fb03 f202 	mul.w	r2, r3, r2
 8012902:	440a      	add	r2, r1
 8012904:	f202 4209 	addw	r2, r2, #1033	; 0x409
 8012908:	7812      	ldrb	r2, [r2, #0]
 801290a:	3201      	adds	r2, #1
 801290c:	b2d0      	uxtb	r0, r2
 801290e:	4a95      	ldr	r2, [pc, #596]	; (8012b64 <readCanToStructs+0xeb0>)
 8012910:	f240 4116 	movw	r1, #1046	; 0x416
 8012914:	fb01 f303 	mul.w	r3, r1, r3
 8012918:	4413      	add	r3, r2
 801291a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801291e:	4602      	mov	r2, r0
 8012920:	701a      	strb	r2, [r3, #0]
				break;
 8012922:	f000 bcc2 	b.w	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 8012926:	4b90      	ldr	r3, [pc, #576]	; (8012b68 <readCanToStructs+0xeb4>)
 8012928:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801292a:	4b90      	ldr	r3, [pc, #576]	; (8012b6c <readCanToStructs+0xeb8>)
 801292c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012930:	885b      	ldrh	r3, [r3, #2]
 8012932:	4a8e      	ldr	r2, [pc, #568]	; (8012b6c <readCanToStructs+0xeb8>)
 8012934:	011b      	lsls	r3, r3, #4
 8012936:	4413      	add	r3, r2
 8012938:	3304      	adds	r3, #4
 801293a:	781b      	ldrb	r3, [r3, #0]
 801293c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012940:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012944:	2b00      	cmp	r3, #0
 8012946:	d110      	bne.n	801296a <readCanToStructs+0xcb6>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8012948:	2208      	movs	r2, #8
 801294a:	2100      	movs	r1, #0
 801294c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801294e:	f014 f865 	bl	8026a1c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012952:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012956:	4a83      	ldr	r2, [pc, #524]	; (8012b64 <readCanToStructs+0xeb0>)
 8012958:	f240 4116 	movw	r1, #1046	; 0x416
 801295c:	fb01 f303 	mul.w	r3, r1, r3
 8012960:	4413      	add	r3, r2
 8012962:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012966:	2200      	movs	r2, #0
 8012968:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 801296a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801296e:	4a7d      	ldr	r2, [pc, #500]	; (8012b64 <readCanToStructs+0xeb0>)
 8012970:	f240 4116 	movw	r1, #1046	; 0x416
 8012974:	fb01 f303 	mul.w	r3, r1, r3
 8012978:	4413      	add	r3, r2
 801297a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801297e:	781b      	ldrb	r3, [r3, #0]
 8012980:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012984:	429a      	cmp	r2, r3
 8012986:	d015      	beq.n	80129b4 <readCanToStructs+0xd00>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8012988:	4879      	ldr	r0, [pc, #484]	; (8012b70 <readCanToStructs+0xebc>)
 801298a:	f014 f9cb 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 801298e:	2208      	movs	r2, #8
 8012990:	2100      	movs	r1, #0
 8012992:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012994:	f014 f842 	bl	8026a1c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801299c:	4a71      	ldr	r2, [pc, #452]	; (8012b64 <readCanToStructs+0xeb0>)
 801299e:	f240 4116 	movw	r1, #1046	; 0x416
 80129a2:	fb01 f303 	mul.w	r3, r1, r3
 80129a6:	4413      	add	r3, r2
 80129a8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80129ac:	2200      	movs	r2, #0
 80129ae:	701a      	strb	r2, [r3, #0]
					break;
 80129b0:	f000 bc7b 	b.w	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80129b4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80129b8:	4613      	mov	r3, r2
 80129ba:	00db      	lsls	r3, r3, #3
 80129bc:	1a9b      	subs	r3, r3, r2
 80129be:	461a      	mov	r2, r3
 80129c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c2:	4413      	add	r3, r2
 80129c4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80129c6:	2301      	movs	r3, #1
 80129c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80129cc:	e016      	b.n	80129fc <readCanToStructs+0xd48>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80129ce:	4b67      	ldr	r3, [pc, #412]	; (8012b6c <readCanToStructs+0xeb8>)
 80129d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80129d4:	885b      	ldrh	r3, [r3, #2]
 80129d6:	461a      	mov	r2, r3
 80129d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129dc:	4963      	ldr	r1, [pc, #396]	; (8012b6c <readCanToStructs+0xeb8>)
 80129de:	0112      	lsls	r2, r2, #4
 80129e0:	440a      	add	r2, r1
 80129e2:	4413      	add	r3, r2
 80129e4:	3304      	adds	r3, #4
 80129e6:	781a      	ldrb	r2, [r3, #0]
 80129e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ea:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80129ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ee:	3301      	adds	r3, #1
 80129f0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80129f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129f6:	3301      	adds	r3, #1
 80129f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80129fc:	4b5b      	ldr	r3, [pc, #364]	; (8012b6c <readCanToStructs+0xeb8>)
 80129fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a02:	885b      	ldrh	r3, [r3, #2]
 8012a04:	4a59      	ldr	r2, [pc, #356]	; (8012b6c <readCanToStructs+0xeb8>)
 8012a06:	011b      	lsls	r3, r3, #4
 8012a08:	4413      	add	r3, r2
 8012a0a:	330c      	adds	r3, #12
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012a12:	429a      	cmp	r2, r3
 8012a14:	d3db      	bcc.n	80129ce <readCanToStructs+0xd1a>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 8012a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a1a:	4a52      	ldr	r2, [pc, #328]	; (8012b64 <readCanToStructs+0xeb0>)
 8012a1c:	f240 4116 	movw	r1, #1046	; 0x416
 8012a20:	fb01 f303 	mul.w	r3, r1, r3
 8012a24:	4413      	add	r3, r2
 8012a26:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	461a      	mov	r2, r3
 8012a2e:	4613      	mov	r3, r2
 8012a30:	00db      	lsls	r3, r3, #3
 8012a32:	1a9a      	subs	r2, r3, r2
 8012a34:	4b4d      	ldr	r3, [pc, #308]	; (8012b6c <readCanToStructs+0xeb8>)
 8012a36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a3a:	885b      	ldrh	r3, [r3, #2]
 8012a3c:	494b      	ldr	r1, [pc, #300]	; (8012b6c <readCanToStructs+0xeb8>)
 8012a3e:	011b      	lsls	r3, r3, #4
 8012a40:	440b      	add	r3, r1
 8012a42:	330c      	adds	r3, #12
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	3b01      	subs	r3, #1
 8012a48:	4413      	add	r3, r2
 8012a4a:	2b07      	cmp	r3, #7
 8012a4c:	d913      	bls.n	8012a76 <readCanToStructs+0xdc2>
					printf("Received Fault Injection Data\n");
 8012a4e:	4849      	ldr	r0, [pc, #292]	; (8012b74 <readCanToStructs+0xec0>)
 8012a50:	f014 f968 	bl	8026d24 <puts>
					Is_CAN_Exchange_happening = YES;
 8012a54:	4b48      	ldr	r3, [pc, #288]	; (8012b78 <readCanToStructs+0xec4>)
 8012a56:	2201      	movs	r2, #1
 8012a58:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012a5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a5e:	4a41      	ldr	r2, [pc, #260]	; (8012b64 <readCanToStructs+0xeb0>)
 8012a60:	f240 4116 	movw	r1, #1046	; 0x416
 8012a64:	fb01 f303 	mul.w	r3, r1, r3
 8012a68:	4413      	add	r3, r2
 8012a6a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012a6e:	2200      	movs	r2, #0
 8012a70:	701a      	strb	r2, [r3, #0]
				break;
 8012a72:	f000 bc1a 	b.w	80132aa <readCanToStructs+0x15f6>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8012a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a7a:	4a3a      	ldr	r2, [pc, #232]	; (8012b64 <readCanToStructs+0xeb0>)
 8012a7c:	f240 4116 	movw	r1, #1046	; 0x416
 8012a80:	fb01 f303 	mul.w	r3, r1, r3
 8012a84:	4413      	add	r3, r2
 8012a86:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8012a8a:	2201      	movs	r2, #1
 8012a8c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8012a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a92:	4934      	ldr	r1, [pc, #208]	; (8012b64 <readCanToStructs+0xeb0>)
 8012a94:	f240 4216 	movw	r2, #1046	; 0x416
 8012a98:	fb03 f202 	mul.w	r2, r3, r2
 8012a9c:	440a      	add	r2, r1
 8012a9e:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8012aa2:	7812      	ldrb	r2, [r2, #0]
 8012aa4:	3201      	adds	r2, #1
 8012aa6:	b2d0      	uxtb	r0, r2
 8012aa8:	4a2e      	ldr	r2, [pc, #184]	; (8012b64 <readCanToStructs+0xeb0>)
 8012aaa:	f240 4116 	movw	r1, #1046	; 0x416
 8012aae:	fb01 f303 	mul.w	r3, r1, r3
 8012ab2:	4413      	add	r3, r2
 8012ab4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012ab8:	4602      	mov	r2, r0
 8012aba:	701a      	strb	r2, [r3, #0]
				break;
 8012abc:	e3f5      	b.n	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8012abe:	4b2f      	ldr	r3, [pc, #188]	; (8012b7c <readCanToStructs+0xec8>)
 8012ac0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012ac2:	4b2a      	ldr	r3, [pc, #168]	; (8012b6c <readCanToStructs+0xeb8>)
 8012ac4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012ac8:	885b      	ldrh	r3, [r3, #2]
 8012aca:	4a28      	ldr	r2, [pc, #160]	; (8012b6c <readCanToStructs+0xeb8>)
 8012acc:	011b      	lsls	r3, r3, #4
 8012ace:	4413      	add	r3, r2
 8012ad0:	3304      	adds	r3, #4
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012ad8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d110      	bne.n	8012b02 <readCanToStructs+0xe4e>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8012ae0:	2214      	movs	r2, #20
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ae6:	f013 ff99 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012aee:	4a1d      	ldr	r2, [pc, #116]	; (8012b64 <readCanToStructs+0xeb0>)
 8012af0:	f240 4116 	movw	r1, #1046	; 0x416
 8012af4:	fb01 f303 	mul.w	r3, r1, r3
 8012af8:	4413      	add	r3, r2
 8012afa:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012afe:	2200      	movs	r2, #0
 8012b00:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8012b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b06:	4a17      	ldr	r2, [pc, #92]	; (8012b64 <readCanToStructs+0xeb0>)
 8012b08:	f240 4116 	movw	r1, #1046	; 0x416
 8012b0c:	fb01 f303 	mul.w	r3, r1, r3
 8012b10:	4413      	add	r3, r2
 8012b12:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012b16:	781b      	ldrb	r3, [r3, #0]
 8012b18:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d014      	beq.n	8012b4a <readCanToStructs+0xe96>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 8012b20:	4817      	ldr	r0, [pc, #92]	; (8012b80 <readCanToStructs+0xecc>)
 8012b22:	f014 f8ff 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8012b26:	2214      	movs	r2, #20
 8012b28:	2100      	movs	r1, #0
 8012b2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b2c:	f013 ff76 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012b30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b34:	4a0b      	ldr	r2, [pc, #44]	; (8012b64 <readCanToStructs+0xeb0>)
 8012b36:	f240 4116 	movw	r1, #1046	; 0x416
 8012b3a:	fb01 f303 	mul.w	r3, r1, r3
 8012b3e:	4413      	add	r3, r2
 8012b40:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012b44:	2200      	movs	r2, #0
 8012b46:	701a      	strb	r2, [r3, #0]
					break;
 8012b48:	e3af      	b.n	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012b4a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012b4e:	4613      	mov	r3, r2
 8012b50:	00db      	lsls	r3, r3, #3
 8012b52:	1a9b      	subs	r3, r3, r2
 8012b54:	461a      	mov	r2, r3
 8012b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b58:	4413      	add	r3, r2
 8012b5a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012b5c:	2301      	movs	r3, #1
 8012b5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012b62:	e026      	b.n	8012bb2 <readCanToStructs+0xefe>
 8012b64:	20006a38 	.word	0x20006a38
 8012b68:	2000308c 	.word	0x2000308c
 8012b6c:	20007264 	.word	0x20007264
 8012b70:	0802b7f8 	.word	0x0802b7f8
 8012b74:	0802b818 	.word	0x0802b818
 8012b78:	2000030b 	.word	0x2000030b
 8012b7c:	20003754 	.word	0x20003754
 8012b80:	0802b838 	.word	0x0802b838
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012b84:	4bb9      	ldr	r3, [pc, #740]	; (8012e6c <readCanToStructs+0x11b8>)
 8012b86:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b8a:	885b      	ldrh	r3, [r3, #2]
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b92:	49b6      	ldr	r1, [pc, #728]	; (8012e6c <readCanToStructs+0x11b8>)
 8012b94:	0112      	lsls	r2, r2, #4
 8012b96:	440a      	add	r2, r1
 8012b98:	4413      	add	r3, r2
 8012b9a:	3304      	adds	r3, #4
 8012b9c:	781a      	ldrb	r2, [r3, #0]
 8012b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba4:	3301      	adds	r3, #1
 8012ba6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012ba8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012bac:	3301      	adds	r3, #1
 8012bae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012bb2:	4bae      	ldr	r3, [pc, #696]	; (8012e6c <readCanToStructs+0x11b8>)
 8012bb4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012bb8:	885b      	ldrh	r3, [r3, #2]
 8012bba:	4aac      	ldr	r2, [pc, #688]	; (8012e6c <readCanToStructs+0x11b8>)
 8012bbc:	011b      	lsls	r3, r3, #4
 8012bbe:	4413      	add	r3, r2
 8012bc0:	330c      	adds	r3, #12
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d3db      	bcc.n	8012b84 <readCanToStructs+0xed0>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8012bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bd0:	4aa7      	ldr	r2, [pc, #668]	; (8012e70 <readCanToStructs+0x11bc>)
 8012bd2:	f240 4116 	movw	r1, #1046	; 0x416
 8012bd6:	fb01 f303 	mul.w	r3, r1, r3
 8012bda:	4413      	add	r3, r2
 8012bdc:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	461a      	mov	r2, r3
 8012be4:	4613      	mov	r3, r2
 8012be6:	00db      	lsls	r3, r3, #3
 8012be8:	1a9a      	subs	r2, r3, r2
 8012bea:	4ba0      	ldr	r3, [pc, #640]	; (8012e6c <readCanToStructs+0x11b8>)
 8012bec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012bf0:	885b      	ldrh	r3, [r3, #2]
 8012bf2:	499e      	ldr	r1, [pc, #632]	; (8012e6c <readCanToStructs+0x11b8>)
 8012bf4:	011b      	lsls	r3, r3, #4
 8012bf6:	440b      	add	r3, r1
 8012bf8:	330c      	adds	r3, #12
 8012bfa:	781b      	ldrb	r3, [r3, #0]
 8012bfc:	3b01      	subs	r3, #1
 8012bfe:	4413      	add	r3, r2
 8012c00:	2b13      	cmp	r3, #19
 8012c02:	d954      	bls.n	8012cae <readCanToStructs+0xffa>
					uint16_t CRC16 = 0;
 8012c04:	2300      	movs	r3, #0
 8012c06:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 8012c08:	2300      	movs	r3, #0
 8012c0a:	603b      	str	r3, [r7, #0]
 8012c0c:	1d3b      	adds	r3, r7, #4
 8012c0e:	2224      	movs	r2, #36	; 0x24
 8012c10:	2100      	movs	r1, #0
 8012c12:	4618      	mov	r0, r3
 8012c14:	f013 ff02 	bl	8026a1c <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8012c18:	463b      	mov	r3, r7
 8012c1a:	2214      	movs	r2, #20
 8012c1c:	4995      	ldr	r1, [pc, #596]	; (8012e74 <readCanToStructs+0x11c0>)
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f013 fed4 	bl	80269cc <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8012c24:	463b      	mov	r3, r7
 8012c26:	2214      	movs	r2, #20
 8012c28:	4619      	mov	r1, r3
 8012c2a:	2000      	movs	r0, #0
 8012c2c:	f003 f98c 	bl	8015f48 <GetCRC16>
 8012c30:	4603      	mov	r3, r0
 8012c32:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 8012c34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d10c      	bne.n	8012c54 <readCanToStructs+0xfa0>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c3e:	4a8c      	ldr	r2, [pc, #560]	; (8012e70 <readCanToStructs+0x11bc>)
 8012c40:	f240 4116 	movw	r1, #1046	; 0x416
 8012c44:	fb01 f303 	mul.w	r3, r1, r3
 8012c48:	4413      	add	r3, r2
 8012c4a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012c4e:	2200      	movs	r2, #0
 8012c50:	701a      	strb	r2, [r3, #0]
				break;
 8012c52:	e32a      	b.n	80132aa <readCanToStructs+0x15f6>
						if(Debug_flag == 1)
 8012c54:	4b88      	ldr	r3, [pc, #544]	; (8012e78 <readCanToStructs+0x11c4>)
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	2b01      	cmp	r3, #1
 8012c5a:	d10a      	bne.n	8012c72 <readCanToStructs+0xfbe>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8012c5c:	4b85      	ldr	r3, [pc, #532]	; (8012e74 <readCanToStructs+0x11c0>)
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	4a86      	ldr	r2, [pc, #536]	; (8012e7c <readCanToStructs+0x11c8>)
 8012c62:	3366      	adds	r3, #102	; 0x66
 8012c64:	009b      	lsls	r3, r3, #2
 8012c66:	4413      	add	r3, r2
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	4884      	ldr	r0, [pc, #528]	; (8012e80 <readCanToStructs+0x11cc>)
 8012c6e:	f013 ffbd 	bl	8026bec <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8012c72:	4b80      	ldr	r3, [pc, #512]	; (8012e74 <readCanToStructs+0x11c0>)
 8012c74:	781b      	ldrb	r3, [r3, #0]
 8012c76:	461a      	mov	r2, r3
 8012c78:	4613      	mov	r3, r2
 8012c7a:	009b      	lsls	r3, r3, #2
 8012c7c:	4413      	add	r3, r2
 8012c7e:	009b      	lsls	r3, r3, #2
 8012c80:	4a80      	ldr	r2, [pc, #512]	; (8012e84 <readCanToStructs+0x11d0>)
 8012c82:	4413      	add	r3, r2
 8012c84:	2214      	movs	r2, #20
 8012c86:	497b      	ldr	r1, [pc, #492]	; (8012e74 <readCanToStructs+0x11c0>)
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f013 fe9f 	bl	80269cc <memcpy>
						Is_CAN_Exchange_happening = YES;
 8012c8e:	4b7e      	ldr	r3, [pc, #504]	; (8012e88 <readCanToStructs+0x11d4>)
 8012c90:	2201      	movs	r2, #1
 8012c92:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012c94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c98:	4a75      	ldr	r2, [pc, #468]	; (8012e70 <readCanToStructs+0x11bc>)
 8012c9a:	f240 4116 	movw	r1, #1046	; 0x416
 8012c9e:	fb01 f303 	mul.w	r3, r1, r3
 8012ca2:	4413      	add	r3, r2
 8012ca4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012ca8:	2200      	movs	r2, #0
 8012caa:	701a      	strb	r2, [r3, #0]
				break;
 8012cac:	e2fd      	b.n	80132aa <readCanToStructs+0x15f6>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8012cae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cb2:	4a6f      	ldr	r2, [pc, #444]	; (8012e70 <readCanToStructs+0x11bc>)
 8012cb4:	f240 4116 	movw	r1, #1046	; 0x416
 8012cb8:	fb01 f303 	mul.w	r3, r1, r3
 8012cbc:	4413      	add	r3, r2
 8012cbe:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8012cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cca:	4969      	ldr	r1, [pc, #420]	; (8012e70 <readCanToStructs+0x11bc>)
 8012ccc:	f240 4216 	movw	r2, #1046	; 0x416
 8012cd0:	fb03 f202 	mul.w	r2, r3, r2
 8012cd4:	440a      	add	r2, r1
 8012cd6:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8012cda:	7812      	ldrb	r2, [r2, #0]
 8012cdc:	3201      	adds	r2, #1
 8012cde:	b2d0      	uxtb	r0, r2
 8012ce0:	4a63      	ldr	r2, [pc, #396]	; (8012e70 <readCanToStructs+0x11bc>)
 8012ce2:	f240 4116 	movw	r1, #1046	; 0x416
 8012ce6:	fb01 f303 	mul.w	r3, r1, r3
 8012cea:	4413      	add	r3, r2
 8012cec:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012cf0:	4602      	mov	r2, r0
 8012cf2:	701a      	strb	r2, [r3, #0]
				break;
 8012cf4:	e2d9      	b.n	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8012cf6:	4b5f      	ldr	r3, [pc, #380]	; (8012e74 <readCanToStructs+0x11c0>)
 8012cf8:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012cfa:	4b5c      	ldr	r3, [pc, #368]	; (8012e6c <readCanToStructs+0x11b8>)
 8012cfc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012d00:	885b      	ldrh	r3, [r3, #2]
 8012d02:	4a5a      	ldr	r2, [pc, #360]	; (8012e6c <readCanToStructs+0x11b8>)
 8012d04:	011b      	lsls	r3, r3, #4
 8012d06:	4413      	add	r3, r2
 8012d08:	3304      	adds	r3, #4
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012d10:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d110      	bne.n	8012d3a <readCanToStructs+0x1086>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8012d18:	2214      	movs	r2, #20
 8012d1a:	2100      	movs	r1, #0
 8012d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d1e:	f013 fe7d 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012d22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d26:	4a52      	ldr	r2, [pc, #328]	; (8012e70 <readCanToStructs+0x11bc>)
 8012d28:	f240 4116 	movw	r1, #1046	; 0x416
 8012d2c:	fb01 f303 	mul.w	r3, r1, r3
 8012d30:	4413      	add	r3, r2
 8012d32:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012d36:	2200      	movs	r2, #0
 8012d38:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8012d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d3e:	4a4c      	ldr	r2, [pc, #304]	; (8012e70 <readCanToStructs+0x11bc>)
 8012d40:	f240 4116 	movw	r1, #1046	; 0x416
 8012d44:	fb01 f303 	mul.w	r3, r1, r3
 8012d48:	4413      	add	r3, r2
 8012d4a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012d4e:	781b      	ldrb	r3, [r3, #0]
 8012d50:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012d54:	429a      	cmp	r2, r3
 8012d56:	d014      	beq.n	8012d82 <readCanToStructs+0x10ce>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 8012d58:	484c      	ldr	r0, [pc, #304]	; (8012e8c <readCanToStructs+0x11d8>)
 8012d5a:	f013 ffe3 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8012d5e:	2214      	movs	r2, #20
 8012d60:	2100      	movs	r1, #0
 8012d62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d64:	f013 fe5a 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012d68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d6c:	4a40      	ldr	r2, [pc, #256]	; (8012e70 <readCanToStructs+0x11bc>)
 8012d6e:	f240 4116 	movw	r1, #1046	; 0x416
 8012d72:	fb01 f303 	mul.w	r3, r1, r3
 8012d76:	4413      	add	r3, r2
 8012d78:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	701a      	strb	r2, [r3, #0]
					break;
 8012d80:	e293      	b.n	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012d82:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012d86:	4613      	mov	r3, r2
 8012d88:	00db      	lsls	r3, r3, #3
 8012d8a:	1a9b      	subs	r3, r3, r2
 8012d8c:	461a      	mov	r2, r3
 8012d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d90:	4413      	add	r3, r2
 8012d92:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012d94:	2301      	movs	r3, #1
 8012d96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012d9a:	e016      	b.n	8012dca <readCanToStructs+0x1116>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012d9c:	4b33      	ldr	r3, [pc, #204]	; (8012e6c <readCanToStructs+0x11b8>)
 8012d9e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012da2:	885b      	ldrh	r3, [r3, #2]
 8012da4:	461a      	mov	r2, r3
 8012da6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012daa:	4930      	ldr	r1, [pc, #192]	; (8012e6c <readCanToStructs+0x11b8>)
 8012dac:	0112      	lsls	r2, r2, #4
 8012dae:	440a      	add	r2, r1
 8012db0:	4413      	add	r3, r2
 8012db2:	3304      	adds	r3, #4
 8012db4:	781a      	ldrb	r2, [r3, #0]
 8012db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dbc:	3301      	adds	r3, #1
 8012dbe:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012dc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dc4:	3301      	adds	r3, #1
 8012dc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012dca:	4b28      	ldr	r3, [pc, #160]	; (8012e6c <readCanToStructs+0x11b8>)
 8012dcc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012dd0:	885b      	ldrh	r3, [r3, #2]
 8012dd2:	4a26      	ldr	r2, [pc, #152]	; (8012e6c <readCanToStructs+0x11b8>)
 8012dd4:	011b      	lsls	r3, r3, #4
 8012dd6:	4413      	add	r3, r2
 8012dd8:	330c      	adds	r3, #12
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d3db      	bcc.n	8012d9c <readCanToStructs+0x10e8>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8012de4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012de8:	4a21      	ldr	r2, [pc, #132]	; (8012e70 <readCanToStructs+0x11bc>)
 8012dea:	f240 4116 	movw	r1, #1046	; 0x416
 8012dee:	fb01 f303 	mul.w	r3, r1, r3
 8012df2:	4413      	add	r3, r2
 8012df4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012df8:	781b      	ldrb	r3, [r3, #0]
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	4613      	mov	r3, r2
 8012dfe:	00db      	lsls	r3, r3, #3
 8012e00:	1a9a      	subs	r2, r3, r2
 8012e02:	4b1a      	ldr	r3, [pc, #104]	; (8012e6c <readCanToStructs+0x11b8>)
 8012e04:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012e08:	885b      	ldrh	r3, [r3, #2]
 8012e0a:	4918      	ldr	r1, [pc, #96]	; (8012e6c <readCanToStructs+0x11b8>)
 8012e0c:	011b      	lsls	r3, r3, #4
 8012e0e:	440b      	add	r3, r1
 8012e10:	330c      	adds	r3, #12
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	3b01      	subs	r3, #1
 8012e16:	4413      	add	r3, r2
 8012e18:	2b13      	cmp	r3, #19
 8012e1a:	d966      	bls.n	8012eea <readCanToStructs+0x1236>
					uint16_t CRC16 = 0;
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 8012e20:	2300      	movs	r3, #0
 8012e22:	603b      	str	r3, [r7, #0]
 8012e24:	1d3b      	adds	r3, r7, #4
 8012e26:	2224      	movs	r2, #36	; 0x24
 8012e28:	2100      	movs	r1, #0
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f013 fdf6 	bl	8026a1c <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8012e30:	463b      	mov	r3, r7
 8012e32:	2214      	movs	r2, #20
 8012e34:	490f      	ldr	r1, [pc, #60]	; (8012e74 <readCanToStructs+0x11c0>)
 8012e36:	4618      	mov	r0, r3
 8012e38:	f013 fdc8 	bl	80269cc <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8012e3c:	463b      	mov	r3, r7
 8012e3e:	2214      	movs	r2, #20
 8012e40:	4619      	mov	r1, r3
 8012e42:	2000      	movs	r0, #0
 8012e44:	f003 f880 	bl	8015f48 <GetCRC16>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 8012e4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d11e      	bne.n	8012e90 <readCanToStructs+0x11dc>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e56:	4a06      	ldr	r2, [pc, #24]	; (8012e70 <readCanToStructs+0x11bc>)
 8012e58:	f240 4116 	movw	r1, #1046	; 0x416
 8012e5c:	fb01 f303 	mul.w	r3, r1, r3
 8012e60:	4413      	add	r3, r2
 8012e62:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012e66:	2200      	movs	r2, #0
 8012e68:	701a      	strb	r2, [r3, #0]
				break;
 8012e6a:	e21e      	b.n	80132aa <readCanToStructs+0x15f6>
 8012e6c:	20007264 	.word	0x20007264
 8012e70:	20006a38 	.word	0x20006a38
 8012e74:	20003754 	.word	0x20003754
 8012e78:	20000bbb 	.word	0x20000bbb
 8012e7c:	20000504 	.word	0x20000504
 8012e80:	0802b854 	.word	0x0802b854
 8012e84:	20003678 	.word	0x20003678
 8012e88:	2000030b 	.word	0x2000030b
 8012e8c:	0802b868 	.word	0x0802b868
						if(Debug_flag == 1)
 8012e90:	4bba      	ldr	r3, [pc, #744]	; (801317c <readCanToStructs+0x14c8>)
 8012e92:	781b      	ldrb	r3, [r3, #0]
 8012e94:	2b01      	cmp	r3, #1
 8012e96:	d10a      	bne.n	8012eae <readCanToStructs+0x11fa>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8012e98:	4bb9      	ldr	r3, [pc, #740]	; (8013180 <readCanToStructs+0x14cc>)
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	4ab9      	ldr	r2, [pc, #740]	; (8013184 <readCanToStructs+0x14d0>)
 8012e9e:	3366      	adds	r3, #102	; 0x66
 8012ea0:	009b      	lsls	r3, r3, #2
 8012ea2:	4413      	add	r3, r2
 8012ea4:	685b      	ldr	r3, [r3, #4]
 8012ea6:	4619      	mov	r1, r3
 8012ea8:	48b7      	ldr	r0, [pc, #732]	; (8013188 <readCanToStructs+0x14d4>)
 8012eaa:	f013 fe9f 	bl	8026bec <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8012eae:	4bb4      	ldr	r3, [pc, #720]	; (8013180 <readCanToStructs+0x14cc>)
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	4613      	mov	r3, r2
 8012eb6:	009b      	lsls	r3, r3, #2
 8012eb8:	4413      	add	r3, r2
 8012eba:	009b      	lsls	r3, r3, #2
 8012ebc:	4ab3      	ldr	r2, [pc, #716]	; (801318c <readCanToStructs+0x14d8>)
 8012ebe:	4413      	add	r3, r2
 8012ec0:	2214      	movs	r2, #20
 8012ec2:	49af      	ldr	r1, [pc, #700]	; (8013180 <readCanToStructs+0x14cc>)
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f013 fd81 	bl	80269cc <memcpy>
						Is_CAN_Exchange_happening = YES;
 8012eca:	4bb1      	ldr	r3, [pc, #708]	; (8013190 <readCanToStructs+0x14dc>)
 8012ecc:	2201      	movs	r2, #1
 8012ece:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ed4:	4aaf      	ldr	r2, [pc, #700]	; (8013194 <readCanToStructs+0x14e0>)
 8012ed6:	f240 4116 	movw	r1, #1046	; 0x416
 8012eda:	fb01 f303 	mul.w	r3, r1, r3
 8012ede:	4413      	add	r3, r2
 8012ee0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	701a      	strb	r2, [r3, #0]
				break;
 8012ee8:	e1df      	b.n	80132aa <readCanToStructs+0x15f6>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8012eea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012eee:	4aa9      	ldr	r2, [pc, #676]	; (8013194 <readCanToStructs+0x14e0>)
 8012ef0:	f240 4116 	movw	r1, #1046	; 0x416
 8012ef4:	fb01 f303 	mul.w	r3, r1, r3
 8012ef8:	4413      	add	r3, r2
 8012efa:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012efe:	2201      	movs	r2, #1
 8012f00:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8012f02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f06:	49a3      	ldr	r1, [pc, #652]	; (8013194 <readCanToStructs+0x14e0>)
 8012f08:	f240 4216 	movw	r2, #1046	; 0x416
 8012f0c:	fb03 f202 	mul.w	r2, r3, r2
 8012f10:	440a      	add	r2, r1
 8012f12:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8012f16:	7812      	ldrb	r2, [r2, #0]
 8012f18:	3201      	adds	r2, #1
 8012f1a:	b2d0      	uxtb	r0, r2
 8012f1c:	4a9d      	ldr	r2, [pc, #628]	; (8013194 <readCanToStructs+0x14e0>)
 8012f1e:	f240 4116 	movw	r1, #1046	; 0x416
 8012f22:	fb01 f303 	mul.w	r3, r1, r3
 8012f26:	4413      	add	r3, r2
 8012f28:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	701a      	strb	r2, [r3, #0]
				break;
 8012f30:	e1bb      	b.n	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8012f32:	4b99      	ldr	r3, [pc, #612]	; (8013198 <readCanToStructs+0x14e4>)
 8012f34:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012f36:	4b99      	ldr	r3, [pc, #612]	; (801319c <readCanToStructs+0x14e8>)
 8012f38:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012f3c:	885b      	ldrh	r3, [r3, #2]
 8012f3e:	4a97      	ldr	r2, [pc, #604]	; (801319c <readCanToStructs+0x14e8>)
 8012f40:	011b      	lsls	r3, r3, #4
 8012f42:	4413      	add	r3, r2
 8012f44:	3304      	adds	r3, #4
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012f4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d110      	bne.n	8012f76 <readCanToStructs+0x12c2>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8012f54:	2202      	movs	r2, #2
 8012f56:	2100      	movs	r1, #0
 8012f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f5a:	f013 fd5f 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8012f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f62:	4a8c      	ldr	r2, [pc, #560]	; (8013194 <readCanToStructs+0x14e0>)
 8012f64:	f240 4116 	movw	r1, #1046	; 0x416
 8012f68:	fb01 f303 	mul.w	r3, r1, r3
 8012f6c:	4413      	add	r3, r2
 8012f6e:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8012f72:	2200      	movs	r2, #0
 8012f74:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 8012f76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f7a:	4a86      	ldr	r2, [pc, #536]	; (8013194 <readCanToStructs+0x14e0>)
 8012f7c:	f240 4116 	movw	r1, #1046	; 0x416
 8012f80:	fb01 f303 	mul.w	r3, r1, r3
 8012f84:	4413      	add	r3, r2
 8012f86:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8012f8a:	781b      	ldrb	r3, [r3, #0]
 8012f8c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012f90:	429a      	cmp	r2, r3
 8012f92:	d014      	beq.n	8012fbe <readCanToStructs+0x130a>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8012f94:	4882      	ldr	r0, [pc, #520]	; (80131a0 <readCanToStructs+0x14ec>)
 8012f96:	f013 fec5 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8012f9a:	2202      	movs	r2, #2
 8012f9c:	2100      	movs	r1, #0
 8012f9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fa0:	f013 fd3c 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8012fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012fa8:	4a7a      	ldr	r2, [pc, #488]	; (8013194 <readCanToStructs+0x14e0>)
 8012faa:	f240 4116 	movw	r1, #1046	; 0x416
 8012fae:	fb01 f303 	mul.w	r3, r1, r3
 8012fb2:	4413      	add	r3, r2
 8012fb4:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8012fb8:	2200      	movs	r2, #0
 8012fba:	701a      	strb	r2, [r3, #0]
					break;
 8012fbc:	e175      	b.n	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012fbe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	00db      	lsls	r3, r3, #3
 8012fc6:	1a9b      	subs	r3, r3, r2
 8012fc8:	461a      	mov	r2, r3
 8012fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fcc:	4413      	add	r3, r2
 8012fce:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012fd6:	e016      	b.n	8013006 <readCanToStructs+0x1352>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012fd8:	4b70      	ldr	r3, [pc, #448]	; (801319c <readCanToStructs+0x14e8>)
 8012fda:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012fde:	885b      	ldrh	r3, [r3, #2]
 8012fe0:	461a      	mov	r2, r3
 8012fe2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012fe6:	496d      	ldr	r1, [pc, #436]	; (801319c <readCanToStructs+0x14e8>)
 8012fe8:	0112      	lsls	r2, r2, #4
 8012fea:	440a      	add	r2, r1
 8012fec:	4413      	add	r3, r2
 8012fee:	3304      	adds	r3, #4
 8012ff0:	781a      	ldrb	r2, [r3, #0]
 8012ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012ffc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013000:	3301      	adds	r3, #1
 8013002:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013006:	4b65      	ldr	r3, [pc, #404]	; (801319c <readCanToStructs+0x14e8>)
 8013008:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801300c:	885b      	ldrh	r3, [r3, #2]
 801300e:	4a63      	ldr	r2, [pc, #396]	; (801319c <readCanToStructs+0x14e8>)
 8013010:	011b      	lsls	r3, r3, #4
 8013012:	4413      	add	r3, r2
 8013014:	330c      	adds	r3, #12
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801301c:	429a      	cmp	r2, r3
 801301e:	d3db      	bcc.n	8012fd8 <readCanToStructs+0x1324>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8013020:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013024:	4a5b      	ldr	r2, [pc, #364]	; (8013194 <readCanToStructs+0x14e0>)
 8013026:	f240 4116 	movw	r1, #1046	; 0x416
 801302a:	fb01 f303 	mul.w	r3, r1, r3
 801302e:	4413      	add	r3, r2
 8013030:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013034:	781b      	ldrb	r3, [r3, #0]
 8013036:	461a      	mov	r2, r3
 8013038:	4613      	mov	r3, r2
 801303a:	00db      	lsls	r3, r3, #3
 801303c:	1a9a      	subs	r2, r3, r2
 801303e:	4b57      	ldr	r3, [pc, #348]	; (801319c <readCanToStructs+0x14e8>)
 8013040:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013044:	885b      	ldrh	r3, [r3, #2]
 8013046:	4955      	ldr	r1, [pc, #340]	; (801319c <readCanToStructs+0x14e8>)
 8013048:	011b      	lsls	r3, r3, #4
 801304a:	440b      	add	r3, r1
 801304c:	330c      	adds	r3, #12
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	3b01      	subs	r3, #1
 8013052:	4413      	add	r3, r2
 8013054:	2b01      	cmp	r3, #1
 8013056:	d919      	bls.n	801308c <readCanToStructs+0x13d8>
					if(Debug_flag == 1)
 8013058:	4b48      	ldr	r3, [pc, #288]	; (801317c <readCanToStructs+0x14c8>)
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	2b01      	cmp	r3, #1
 801305e:	d105      	bne.n	801306c <readCanToStructs+0x13b8>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8013060:	4b4d      	ldr	r3, [pc, #308]	; (8013198 <readCanToStructs+0x14e4>)
 8013062:	881b      	ldrh	r3, [r3, #0]
 8013064:	4619      	mov	r1, r3
 8013066:	484f      	ldr	r0, [pc, #316]	; (80131a4 <readCanToStructs+0x14f0>)
 8013068:	f013 fdc0 	bl	8026bec <iprintf>
					Is_CAN_Exchange_happening = YES;
 801306c:	4b48      	ldr	r3, [pc, #288]	; (8013190 <readCanToStructs+0x14dc>)
 801306e:	2201      	movs	r2, #1
 8013070:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8013072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013076:	4a47      	ldr	r2, [pc, #284]	; (8013194 <readCanToStructs+0x14e0>)
 8013078:	f240 4116 	movw	r1, #1046	; 0x416
 801307c:	fb01 f303 	mul.w	r3, r1, r3
 8013080:	4413      	add	r3, r2
 8013082:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013086:	2200      	movs	r2, #0
 8013088:	701a      	strb	r2, [r3, #0]
				break;
 801308a:	e10e      	b.n	80132aa <readCanToStructs+0x15f6>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 801308c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013090:	4a40      	ldr	r2, [pc, #256]	; (8013194 <readCanToStructs+0x14e0>)
 8013092:	f240 4116 	movw	r1, #1046	; 0x416
 8013096:	fb01 f303 	mul.w	r3, r1, r3
 801309a:	4413      	add	r3, r2
 801309c:	f203 4312 	addw	r3, r3, #1042	; 0x412
 80130a0:	2201      	movs	r2, #1
 80130a2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 80130a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130a8:	493a      	ldr	r1, [pc, #232]	; (8013194 <readCanToStructs+0x14e0>)
 80130aa:	f240 4216 	movw	r2, #1046	; 0x416
 80130ae:	fb03 f202 	mul.w	r2, r3, r2
 80130b2:	440a      	add	r2, r1
 80130b4:	f202 4213 	addw	r2, r2, #1043	; 0x413
 80130b8:	7812      	ldrb	r2, [r2, #0]
 80130ba:	3201      	adds	r2, #1
 80130bc:	b2d0      	uxtb	r0, r2
 80130be:	4a35      	ldr	r2, [pc, #212]	; (8013194 <readCanToStructs+0x14e0>)
 80130c0:	f240 4116 	movw	r1, #1046	; 0x416
 80130c4:	fb01 f303 	mul.w	r3, r1, r3
 80130c8:	4413      	add	r3, r2
 80130ca:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80130ce:	4602      	mov	r2, r0
 80130d0:	701a      	strb	r2, [r3, #0]
				break;
 80130d2:	e0ea      	b.n	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 80130d4:	4b30      	ldr	r3, [pc, #192]	; (8013198 <readCanToStructs+0x14e4>)
 80130d6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80130d8:	4b30      	ldr	r3, [pc, #192]	; (801319c <readCanToStructs+0x14e8>)
 80130da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80130de:	885b      	ldrh	r3, [r3, #2]
 80130e0:	4a2e      	ldr	r2, [pc, #184]	; (801319c <readCanToStructs+0x14e8>)
 80130e2:	011b      	lsls	r3, r3, #4
 80130e4:	4413      	add	r3, r2
 80130e6:	3304      	adds	r3, #4
 80130e8:	781b      	ldrb	r3, [r3, #0]
 80130ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80130ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d110      	bne.n	8013118 <readCanToStructs+0x1464>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80130f6:	2202      	movs	r2, #2
 80130f8:	2100      	movs	r1, #0
 80130fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130fc:	f013 fc8e 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8013100:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013104:	4a23      	ldr	r2, [pc, #140]	; (8013194 <readCanToStructs+0x14e0>)
 8013106:	f240 4116 	movw	r1, #1046	; 0x416
 801310a:	fb01 f303 	mul.w	r3, r1, r3
 801310e:	4413      	add	r3, r2
 8013110:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8013114:	2200      	movs	r2, #0
 8013116:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8013118:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801311c:	4a1d      	ldr	r2, [pc, #116]	; (8013194 <readCanToStructs+0x14e0>)
 801311e:	f240 4116 	movw	r1, #1046	; 0x416
 8013122:	fb01 f303 	mul.w	r3, r1, r3
 8013126:	4413      	add	r3, r2
 8013128:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013132:	429a      	cmp	r2, r3
 8013134:	d014      	beq.n	8013160 <readCanToStructs+0x14ac>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8013136:	481c      	ldr	r0, [pc, #112]	; (80131a8 <readCanToStructs+0x14f4>)
 8013138:	f013 fdf4 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801313c:	2202      	movs	r2, #2
 801313e:	2100      	movs	r1, #0
 8013140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013142:	f013 fc6b 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8013146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801314a:	4a12      	ldr	r2, [pc, #72]	; (8013194 <readCanToStructs+0x14e0>)
 801314c:	f240 4116 	movw	r1, #1046	; 0x416
 8013150:	fb01 f303 	mul.w	r3, r1, r3
 8013154:	4413      	add	r3, r2
 8013156:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801315a:	2200      	movs	r2, #0
 801315c:	701a      	strb	r2, [r3, #0]
					break;
 801315e:	e0a4      	b.n	80132aa <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013160:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013164:	4613      	mov	r3, r2
 8013166:	00db      	lsls	r3, r3, #3
 8013168:	1a9b      	subs	r3, r3, r2
 801316a:	461a      	mov	r2, r3
 801316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801316e:	4413      	add	r3, r2
 8013170:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013172:	2301      	movs	r3, #1
 8013174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013178:	e02f      	b.n	80131da <readCanToStructs+0x1526>
 801317a:	bf00      	nop
 801317c:	20000bbb 	.word	0x20000bbb
 8013180:	20003754 	.word	0x20003754
 8013184:	20000504 	.word	0x20000504
 8013188:	0802b888 	.word	0x0802b888
 801318c:	20003678 	.word	0x20003678
 8013190:	2000030b 	.word	0x2000030b
 8013194:	20006a38 	.word	0x20006a38
 8013198:	20000bb8 	.word	0x20000bb8
 801319c:	20007264 	.word	0x20007264
 80131a0:	0802b89c 	.word	0x0802b89c
 80131a4:	0802b8c4 	.word	0x0802b8c4
 80131a8:	0802b8d8 	.word	0x0802b8d8
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80131ac:	4b9f      	ldr	r3, [pc, #636]	; (801342c <readCanToStructs+0x1778>)
 80131ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80131b2:	885b      	ldrh	r3, [r3, #2]
 80131b4:	461a      	mov	r2, r3
 80131b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131ba:	499c      	ldr	r1, [pc, #624]	; (801342c <readCanToStructs+0x1778>)
 80131bc:	0112      	lsls	r2, r2, #4
 80131be:	440a      	add	r2, r1
 80131c0:	4413      	add	r3, r2
 80131c2:	3304      	adds	r3, #4
 80131c4:	781a      	ldrb	r2, [r3, #0]
 80131c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80131ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131cc:	3301      	adds	r3, #1
 80131ce:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80131d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131d4:	3301      	adds	r3, #1
 80131d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80131da:	4b94      	ldr	r3, [pc, #592]	; (801342c <readCanToStructs+0x1778>)
 80131dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80131e0:	885b      	ldrh	r3, [r3, #2]
 80131e2:	4a92      	ldr	r2, [pc, #584]	; (801342c <readCanToStructs+0x1778>)
 80131e4:	011b      	lsls	r3, r3, #4
 80131e6:	4413      	add	r3, r2
 80131e8:	330c      	adds	r3, #12
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d3db      	bcc.n	80131ac <readCanToStructs+0x14f8>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 80131f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80131f8:	4a8d      	ldr	r2, [pc, #564]	; (8013430 <readCanToStructs+0x177c>)
 80131fa:	f240 4116 	movw	r1, #1046	; 0x416
 80131fe:	fb01 f303 	mul.w	r3, r1, r3
 8013202:	4413      	add	r3, r2
 8013204:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8013208:	781b      	ldrb	r3, [r3, #0]
 801320a:	461a      	mov	r2, r3
 801320c:	4613      	mov	r3, r2
 801320e:	00db      	lsls	r3, r3, #3
 8013210:	1a9a      	subs	r2, r3, r2
 8013212:	4b86      	ldr	r3, [pc, #536]	; (801342c <readCanToStructs+0x1778>)
 8013214:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013218:	885b      	ldrh	r3, [r3, #2]
 801321a:	4984      	ldr	r1, [pc, #528]	; (801342c <readCanToStructs+0x1778>)
 801321c:	011b      	lsls	r3, r3, #4
 801321e:	440b      	add	r3, r1
 8013220:	330c      	adds	r3, #12
 8013222:	781b      	ldrb	r3, [r3, #0]
 8013224:	3b01      	subs	r3, #1
 8013226:	4413      	add	r3, r2
 8013228:	2b01      	cmp	r3, #1
 801322a:	d919      	bls.n	8013260 <readCanToStructs+0x15ac>
					if(Debug_flag == 1)
 801322c:	4b81      	ldr	r3, [pc, #516]	; (8013434 <readCanToStructs+0x1780>)
 801322e:	781b      	ldrb	r3, [r3, #0]
 8013230:	2b01      	cmp	r3, #1
 8013232:	d105      	bne.n	8013240 <readCanToStructs+0x158c>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8013234:	4b80      	ldr	r3, [pc, #512]	; (8013438 <readCanToStructs+0x1784>)
 8013236:	881b      	ldrh	r3, [r3, #0]
 8013238:	4619      	mov	r1, r3
 801323a:	4880      	ldr	r0, [pc, #512]	; (801343c <readCanToStructs+0x1788>)
 801323c:	f013 fcd6 	bl	8026bec <iprintf>
					Is_CAN_Exchange_happening = YES;
 8013240:	4b7f      	ldr	r3, [pc, #508]	; (8013440 <readCanToStructs+0x178c>)
 8013242:	2201      	movs	r2, #1
 8013244:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8013246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801324a:	4a79      	ldr	r2, [pc, #484]	; (8013430 <readCanToStructs+0x177c>)
 801324c:	f240 4116 	movw	r1, #1046	; 0x416
 8013250:	fb01 f303 	mul.w	r3, r1, r3
 8013254:	4413      	add	r3, r2
 8013256:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801325a:	2200      	movs	r2, #0
 801325c:	701a      	strb	r2, [r3, #0]
				break;
 801325e:	e024      	b.n	80132aa <readCanToStructs+0x15f6>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 8013260:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013264:	4a72      	ldr	r2, [pc, #456]	; (8013430 <readCanToStructs+0x177c>)
 8013266:	f240 4116 	movw	r1, #1046	; 0x416
 801326a:	fb01 f303 	mul.w	r3, r1, r3
 801326e:	4413      	add	r3, r2
 8013270:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8013274:	2201      	movs	r2, #1
 8013276:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 8013278:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801327c:	496c      	ldr	r1, [pc, #432]	; (8013430 <readCanToStructs+0x177c>)
 801327e:	f240 4216 	movw	r2, #1046	; 0x416
 8013282:	fb03 f202 	mul.w	r2, r3, r2
 8013286:	440a      	add	r2, r1
 8013288:	f202 4215 	addw	r2, r2, #1045	; 0x415
 801328c:	7812      	ldrb	r2, [r2, #0]
 801328e:	3201      	adds	r2, #1
 8013290:	b2d0      	uxtb	r0, r2
 8013292:	4a67      	ldr	r2, [pc, #412]	; (8013430 <readCanToStructs+0x177c>)
 8013294:	f240 4116 	movw	r1, #1046	; 0x416
 8013298:	fb01 f303 	mul.w	r3, r1, r3
 801329c:	4413      	add	r3, r2
 801329e:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80132a2:	4602      	mov	r2, r0
 80132a4:	701a      	strb	r2, [r3, #0]
				break;
 80132a6:	e000      	b.n	80132aa <readCanToStructs+0x15f6>
				break;
 80132a8:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 80132aa:	4b60      	ldr	r3, [pc, #384]	; (801342c <readCanToStructs+0x1778>)
 80132ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80132b0:	885b      	ldrh	r3, [r3, #2]
 80132b2:	011b      	lsls	r3, r3, #4
 80132b4:	4a5d      	ldr	r2, [pc, #372]	; (801342c <readCanToStructs+0x1778>)
 80132b6:	4413      	add	r3, r2
 80132b8:	2210      	movs	r2, #16
 80132ba:	2100      	movs	r1, #0
 80132bc:	4618      	mov	r0, r3
 80132be:	f013 fbad 	bl	8026a1c <memset>
			canRead.Out++;
 80132c2:	4b5a      	ldr	r3, [pc, #360]	; (801342c <readCanToStructs+0x1778>)
 80132c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80132c8:	885b      	ldrh	r3, [r3, #2]
 80132ca:	3301      	adds	r3, #1
 80132cc:	b29a      	uxth	r2, r3
 80132ce:	4b57      	ldr	r3, [pc, #348]	; (801342c <readCanToStructs+0x1778>)
 80132d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80132d4:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 80132d6:	4b55      	ldr	r3, [pc, #340]	; (801342c <readCanToStructs+0x1778>)
 80132d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80132dc:	885b      	ldrh	r3, [r3, #2]
 80132de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80132e2:	d104      	bne.n	80132ee <readCanToStructs+0x163a>
				canRead.Out = 0;
 80132e4:	4b51      	ldr	r3, [pc, #324]	; (801342c <readCanToStructs+0x1778>)
 80132e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80132ea:	2200      	movs	r2, #0
 80132ec:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 80132ee:	f7fe fc8b 	bl	8011c08 <canDataReady>
 80132f2:	4603      	mov	r3, r0
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	f47e ad07 	bne.w	8011d08 <readCanToStructs+0x54>

		}
		/* ___________________ HITACHI _______________ */
	}
	break;
 80132fa:	f002 bdc9 	b.w	8015e90 <readCanToStructs+0x41dc>
	case SIEMENS:
	{
		/* __________ SIEMENS _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 80132fe:	4b4b      	ldr	r3, [pc, #300]	; (801342c <readCanToStructs+0x1778>)
 8013300:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013304:	885b      	ldrh	r3, [r3, #2]
 8013306:	4a49      	ldr	r2, [pc, #292]	; (801342c <readCanToStructs+0x1778>)
 8013308:	011b      	lsls	r3, r3, #4
 801330a:	4413      	add	r3, r2
 801330c:	330f      	adds	r3, #15
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	3b01      	subs	r3, #1
 8013312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8013316:	4b45      	ldr	r3, [pc, #276]	; (801342c <readCanToStructs+0x1778>)
 8013318:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801331c:	885b      	ldrh	r3, [r3, #2]
 801331e:	4a43      	ldr	r2, [pc, #268]	; (801342c <readCanToStructs+0x1778>)
 8013320:	011b      	lsls	r3, r3, #4
 8013322:	4413      	add	r3, r2
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	f240 220a 	movw	r2, #522	; 0x20a
 801332a:	4293      	cmp	r3, r2
 801332c:	f201 803e 	bhi.w	80143ac <readCanToStructs+0x26f8>
 8013330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013334:	d80a      	bhi.n	801334c <readCanToStructs+0x1698>
 8013336:	f240 1203 	movw	r2, #259	; 0x103
 801333a:	4293      	cmp	r3, r2
 801333c:	d022      	beq.n	8013384 <readCanToStructs+0x16d0>
 801333e:	f240 1209 	movw	r2, #265	; 0x109
 8013342:	4293      	cmp	r3, r2
 8013344:	f000 8104 	beq.w	8013550 <readCanToStructs+0x189c>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 8013348:	f001 b830 	b.w	80143ac <readCanToStructs+0x26f8>
 801334c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8013350:	2b09      	cmp	r3, #9
 8013352:	f201 802b 	bhi.w	80143ac <readCanToStructs+0x26f8>
 8013356:	a201      	add	r2, pc, #4	; (adr r2, 801335c <readCanToStructs+0x16a8>)
 8013358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801335c:	0801371d 	.word	0x0801371d
 8013360:	080138d3 	.word	0x080138d3
 8013364:	080143ad 	.word	0x080143ad
 8013368:	080143ad 	.word	0x080143ad
 801336c:	08013e73 	.word	0x08013e73
 8013370:	080143ad 	.word	0x080143ad
 8013374:	08013ab3 	.word	0x08013ab3
 8013378:	08013c7f 	.word	0x08013c7f
 801337c:	08014045 	.word	0x08014045
 8013380:	080141e7 	.word	0x080141e7
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8013384:	4b2f      	ldr	r3, [pc, #188]	; (8013444 <readCanToStructs+0x1790>)
 8013386:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013388:	4b28      	ldr	r3, [pc, #160]	; (801342c <readCanToStructs+0x1778>)
 801338a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801338e:	885b      	ldrh	r3, [r3, #2]
 8013390:	4a26      	ldr	r2, [pc, #152]	; (801342c <readCanToStructs+0x1778>)
 8013392:	011b      	lsls	r3, r3, #4
 8013394:	4413      	add	r3, r2
 8013396:	3304      	adds	r3, #4
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801339e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d110      	bne.n	80133c8 <readCanToStructs+0x1714>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80133a6:	2206      	movs	r2, #6
 80133a8:	2100      	movs	r1, #0
 80133aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133ac:	f013 fb36 	bl	8026a1c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80133b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133b4:	4a1e      	ldr	r2, [pc, #120]	; (8013430 <readCanToStructs+0x177c>)
 80133b6:	f240 4116 	movw	r1, #1046	; 0x416
 80133ba:	fb01 f303 	mul.w	r3, r1, r3
 80133be:	4413      	add	r3, r2
 80133c0:	f203 2307 	addw	r3, r3, #519	; 0x207
 80133c4:	2200      	movs	r2, #0
 80133c6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 80133c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133cc:	4a18      	ldr	r2, [pc, #96]	; (8013430 <readCanToStructs+0x177c>)
 80133ce:	f240 4116 	movw	r1, #1046	; 0x416
 80133d2:	fb01 f303 	mul.w	r3, r1, r3
 80133d6:	4413      	add	r3, r2
 80133d8:	f203 2307 	addw	r3, r3, #519	; 0x207
 80133dc:	781b      	ldrb	r3, [r3, #0]
 80133de:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80133e2:	429a      	cmp	r2, r3
 80133e4:	d015      	beq.n	8013412 <readCanToStructs+0x175e>
					printf("GPS Packet Seq no MisMatch\n");
 80133e6:	4818      	ldr	r0, [pc, #96]	; (8013448 <readCanToStructs+0x1794>)
 80133e8:	f013 fc9c 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80133ec:	2206      	movs	r2, #6
 80133ee:	2100      	movs	r1, #0
 80133f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133f2:	f013 fb13 	bl	8026a1c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80133f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133fa:	4a0d      	ldr	r2, [pc, #52]	; (8013430 <readCanToStructs+0x177c>)
 80133fc:	f240 4116 	movw	r1, #1046	; 0x416
 8013400:	fb01 f303 	mul.w	r3, r1, r3
 8013404:	4413      	add	r3, r2
 8013406:	f203 2307 	addw	r3, r3, #519	; 0x207
 801340a:	2200      	movs	r2, #0
 801340c:	701a      	strb	r2, [r3, #0]
					break;
 801340e:	f000 bfd2 	b.w	80143b6 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013412:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013416:	4613      	mov	r3, r2
 8013418:	00db      	lsls	r3, r3, #3
 801341a:	1a9b      	subs	r3, r3, r2
 801341c:	461a      	mov	r2, r3
 801341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013420:	4413      	add	r3, r2
 8013422:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013424:	2301      	movs	r3, #1
 8013426:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801342a:	e026      	b.n	801347a <readCanToStructs+0x17c6>
 801342c:	20007264 	.word	0x20007264
 8013430:	20006a38 	.word	0x20006a38
 8013434:	20000bbb 	.word	0x20000bbb
 8013438:	20000bb8 	.word	0x20000bb8
 801343c:	0802b900 	.word	0x0802b900
 8013440:	2000030b 	.word	0x2000030b
 8013444:	20003fd4 	.word	0x20003fd4
 8013448:	0802b6c4 	.word	0x0802b6c4
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801344c:	4bab      	ldr	r3, [pc, #684]	; (80136fc <readCanToStructs+0x1a48>)
 801344e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013452:	885b      	ldrh	r3, [r3, #2]
 8013454:	461a      	mov	r2, r3
 8013456:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801345a:	49a8      	ldr	r1, [pc, #672]	; (80136fc <readCanToStructs+0x1a48>)
 801345c:	0112      	lsls	r2, r2, #4
 801345e:	440a      	add	r2, r1
 8013460:	4413      	add	r3, r2
 8013462:	3304      	adds	r3, #4
 8013464:	781a      	ldrb	r2, [r3, #0]
 8013466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013468:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801346c:	3301      	adds	r3, #1
 801346e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013470:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013474:	3301      	adds	r3, #1
 8013476:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801347a:	4ba0      	ldr	r3, [pc, #640]	; (80136fc <readCanToStructs+0x1a48>)
 801347c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013480:	885b      	ldrh	r3, [r3, #2]
 8013482:	4a9e      	ldr	r2, [pc, #632]	; (80136fc <readCanToStructs+0x1a48>)
 8013484:	011b      	lsls	r3, r3, #4
 8013486:	4413      	add	r3, r2
 8013488:	330c      	adds	r3, #12
 801348a:	781b      	ldrb	r3, [r3, #0]
 801348c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013490:	429a      	cmp	r2, r3
 8013492:	d3db      	bcc.n	801344c <readCanToStructs+0x1798>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8013494:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013498:	4a99      	ldr	r2, [pc, #612]	; (8013700 <readCanToStructs+0x1a4c>)
 801349a:	f240 4116 	movw	r1, #1046	; 0x416
 801349e:	fb01 f303 	mul.w	r3, r1, r3
 80134a2:	4413      	add	r3, r2
 80134a4:	f203 2307 	addw	r3, r3, #519	; 0x207
 80134a8:	781b      	ldrb	r3, [r3, #0]
 80134aa:	461a      	mov	r2, r3
 80134ac:	4613      	mov	r3, r2
 80134ae:	00db      	lsls	r3, r3, #3
 80134b0:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80134b2:	4b92      	ldr	r3, [pc, #584]	; (80136fc <readCanToStructs+0x1a48>)
 80134b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80134b8:	885b      	ldrh	r3, [r3, #2]
 80134ba:	4990      	ldr	r1, [pc, #576]	; (80136fc <readCanToStructs+0x1a48>)
 80134bc:	011b      	lsls	r3, r3, #4
 80134be:	440b      	add	r3, r1
 80134c0:	330c      	adds	r3, #12
 80134c2:	781b      	ldrb	r3, [r3, #0]
 80134c4:	3b01      	subs	r3, #1
 80134c6:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80134c8:	2b05      	cmp	r3, #5
 80134ca:	d91c      	bls.n	8013506 <readCanToStructs+0x1852>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80134cc:	4b8d      	ldr	r3, [pc, #564]	; (8013704 <readCanToStructs+0x1a50>)
 80134ce:	4a8e      	ldr	r2, [pc, #568]	; (8013708 <readCanToStructs+0x1a54>)
 80134d0:	6811      	ldr	r1, [r2, #0]
 80134d2:	6019      	str	r1, [r3, #0]
 80134d4:	8892      	ldrh	r2, [r2, #4]
 80134d6:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80134d8:	4b8c      	ldr	r3, [pc, #560]	; (801370c <readCanToStructs+0x1a58>)
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	2b01      	cmp	r3, #1
 80134de:	d102      	bne.n	80134e6 <readCanToStructs+0x1832>
						printf("GPS_PACKET_RECEIVED\n");
 80134e0:	488b      	ldr	r0, [pc, #556]	; (8013710 <readCanToStructs+0x1a5c>)
 80134e2:	f013 fc1f 	bl	8026d24 <puts>
					Write_RTC();
 80134e6:	f7f9 fa23 	bl	800c930 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80134ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134ee:	4a84      	ldr	r2, [pc, #528]	; (8013700 <readCanToStructs+0x1a4c>)
 80134f0:	f240 4116 	movw	r1, #1046	; 0x416
 80134f4:	fb01 f303 	mul.w	r3, r1, r3
 80134f8:	4413      	add	r3, r2
 80134fa:	f203 2307 	addw	r3, r3, #519	; 0x207
 80134fe:	2200      	movs	r2, #0
 8013500:	701a      	strb	r2, [r3, #0]
				break;
 8013502:	f000 bf58 	b.w	80143b6 <readCanToStructs+0x2702>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8013506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801350a:	4a7d      	ldr	r2, [pc, #500]	; (8013700 <readCanToStructs+0x1a4c>)
 801350c:	f240 4116 	movw	r1, #1046	; 0x416
 8013510:	fb01 f303 	mul.w	r3, r1, r3
 8013514:	4413      	add	r3, r2
 8013516:	f203 2306 	addw	r3, r3, #518	; 0x206
 801351a:	2201      	movs	r2, #1
 801351c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 801351e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013522:	4977      	ldr	r1, [pc, #476]	; (8013700 <readCanToStructs+0x1a4c>)
 8013524:	f240 4216 	movw	r2, #1046	; 0x416
 8013528:	fb03 f202 	mul.w	r2, r3, r2
 801352c:	440a      	add	r2, r1
 801352e:	f202 2207 	addw	r2, r2, #519	; 0x207
 8013532:	7812      	ldrb	r2, [r2, #0]
 8013534:	3201      	adds	r2, #1
 8013536:	b2d0      	uxtb	r0, r2
 8013538:	4a71      	ldr	r2, [pc, #452]	; (8013700 <readCanToStructs+0x1a4c>)
 801353a:	f240 4116 	movw	r1, #1046	; 0x416
 801353e:	fb01 f303 	mul.w	r3, r1, r3
 8013542:	4413      	add	r3, r2
 8013544:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013548:	4602      	mov	r2, r0
 801354a:	701a      	strb	r2, [r3, #0]
				break;
 801354c:	f000 bf33 	b.w	80143b6 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8013550:	4b6d      	ldr	r3, [pc, #436]	; (8013708 <readCanToStructs+0x1a54>)
 8013552:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013554:	4b69      	ldr	r3, [pc, #420]	; (80136fc <readCanToStructs+0x1a48>)
 8013556:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801355a:	885b      	ldrh	r3, [r3, #2]
 801355c:	4a67      	ldr	r2, [pc, #412]	; (80136fc <readCanToStructs+0x1a48>)
 801355e:	011b      	lsls	r3, r3, #4
 8013560:	4413      	add	r3, r2
 8013562:	3304      	adds	r3, #4
 8013564:	781b      	ldrb	r3, [r3, #0]
 8013566:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801356a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801356e:	2b00      	cmp	r3, #0
 8013570:	d110      	bne.n	8013594 <readCanToStructs+0x18e0>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8013572:	2206      	movs	r2, #6
 8013574:	2100      	movs	r1, #0
 8013576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013578:	f013 fa50 	bl	8026a1c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801357c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013580:	4a5f      	ldr	r2, [pc, #380]	; (8013700 <readCanToStructs+0x1a4c>)
 8013582:	f240 4116 	movw	r1, #1046	; 0x416
 8013586:	fb01 f303 	mul.w	r3, r1, r3
 801358a:	4413      	add	r3, r2
 801358c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013590:	2200      	movs	r2, #0
 8013592:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8013594:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013598:	4a59      	ldr	r2, [pc, #356]	; (8013700 <readCanToStructs+0x1a4c>)
 801359a:	f240 4116 	movw	r1, #1046	; 0x416
 801359e:	fb01 f303 	mul.w	r3, r1, r3
 80135a2:	4413      	add	r3, r2
 80135a4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d015      	beq.n	80135de <readCanToStructs+0x192a>
					printf("GPS2 Packet Seq no MisMatch\n");
 80135b2:	4858      	ldr	r0, [pc, #352]	; (8013714 <readCanToStructs+0x1a60>)
 80135b4:	f013 fbb6 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80135b8:	2206      	movs	r2, #6
 80135ba:	2100      	movs	r1, #0
 80135bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135be:	f013 fa2d 	bl	8026a1c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80135c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135c6:	4a4e      	ldr	r2, [pc, #312]	; (8013700 <readCanToStructs+0x1a4c>)
 80135c8:	f240 4116 	movw	r1, #1046	; 0x416
 80135cc:	fb01 f303 	mul.w	r3, r1, r3
 80135d0:	4413      	add	r3, r2
 80135d2:	f203 2313 	addw	r3, r3, #531	; 0x213
 80135d6:	2200      	movs	r2, #0
 80135d8:	701a      	strb	r2, [r3, #0]
					break;
 80135da:	f000 beec 	b.w	80143b6 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 80135de:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80135e2:	4613      	mov	r3, r2
 80135e4:	00db      	lsls	r3, r3, #3
 80135e6:	1a9b      	subs	r3, r3, r2
 80135e8:	461a      	mov	r2, r3
 80135ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ec:	4413      	add	r3, r2
 80135ee:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80135f0:	2301      	movs	r3, #1
 80135f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80135f6:	e016      	b.n	8013626 <readCanToStructs+0x1972>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80135f8:	4b40      	ldr	r3, [pc, #256]	; (80136fc <readCanToStructs+0x1a48>)
 80135fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80135fe:	885b      	ldrh	r3, [r3, #2]
 8013600:	461a      	mov	r2, r3
 8013602:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013606:	493d      	ldr	r1, [pc, #244]	; (80136fc <readCanToStructs+0x1a48>)
 8013608:	0112      	lsls	r2, r2, #4
 801360a:	440a      	add	r2, r1
 801360c:	4413      	add	r3, r2
 801360e:	3304      	adds	r3, #4
 8013610:	781a      	ldrb	r2, [r3, #0]
 8013612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013614:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013618:	3301      	adds	r3, #1
 801361a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801361c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013620:	3301      	adds	r3, #1
 8013622:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013626:	4b35      	ldr	r3, [pc, #212]	; (80136fc <readCanToStructs+0x1a48>)
 8013628:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801362c:	885b      	ldrh	r3, [r3, #2]
 801362e:	4a33      	ldr	r2, [pc, #204]	; (80136fc <readCanToStructs+0x1a48>)
 8013630:	011b      	lsls	r3, r3, #4
 8013632:	4413      	add	r3, r2
 8013634:	330c      	adds	r3, #12
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801363c:	429a      	cmp	r2, r3
 801363e:	d3db      	bcc.n	80135f8 <readCanToStructs+0x1944>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8013640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013644:	4a2e      	ldr	r2, [pc, #184]	; (8013700 <readCanToStructs+0x1a4c>)
 8013646:	f240 4116 	movw	r1, #1046	; 0x416
 801364a:	fb01 f303 	mul.w	r3, r1, r3
 801364e:	4413      	add	r3, r2
 8013650:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013654:	781b      	ldrb	r3, [r3, #0]
 8013656:	461a      	mov	r2, r3
 8013658:	4613      	mov	r3, r2
 801365a:	00db      	lsls	r3, r3, #3
 801365c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801365e:	4b27      	ldr	r3, [pc, #156]	; (80136fc <readCanToStructs+0x1a48>)
 8013660:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013664:	885b      	ldrh	r3, [r3, #2]
 8013666:	4925      	ldr	r1, [pc, #148]	; (80136fc <readCanToStructs+0x1a48>)
 8013668:	011b      	lsls	r3, r3, #4
 801366a:	440b      	add	r3, r1
 801366c:	330c      	adds	r3, #12
 801366e:	781b      	ldrb	r3, [r3, #0]
 8013670:	3b01      	subs	r3, #1
 8013672:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8013674:	2b05      	cmp	r3, #5
 8013676:	d91c      	bls.n	80136b2 <readCanToStructs+0x19fe>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8013678:	4b22      	ldr	r3, [pc, #136]	; (8013704 <readCanToStructs+0x1a50>)
 801367a:	4a23      	ldr	r2, [pc, #140]	; (8013708 <readCanToStructs+0x1a54>)
 801367c:	6811      	ldr	r1, [r2, #0]
 801367e:	6019      	str	r1, [r3, #0]
 8013680:	8892      	ldrh	r2, [r2, #4]
 8013682:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8013684:	4b21      	ldr	r3, [pc, #132]	; (801370c <readCanToStructs+0x1a58>)
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	2b01      	cmp	r3, #1
 801368a:	d102      	bne.n	8013692 <readCanToStructs+0x19de>
						printf("GPS2_PACKET_RECEIVED\n");
 801368c:	4822      	ldr	r0, [pc, #136]	; (8013718 <readCanToStructs+0x1a64>)
 801368e:	f013 fb49 	bl	8026d24 <puts>
					Write_RTC();
 8013692:	f7f9 f94d 	bl	800c930 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8013696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801369a:	4a19      	ldr	r2, [pc, #100]	; (8013700 <readCanToStructs+0x1a4c>)
 801369c:	f240 4116 	movw	r1, #1046	; 0x416
 80136a0:	fb01 f303 	mul.w	r3, r1, r3
 80136a4:	4413      	add	r3, r2
 80136a6:	f203 2313 	addw	r3, r3, #531	; 0x213
 80136aa:	2200      	movs	r2, #0
 80136ac:	701a      	strb	r2, [r3, #0]
				break;
 80136ae:	f000 be82 	b.w	80143b6 <readCanToStructs+0x2702>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80136b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136b6:	4a12      	ldr	r2, [pc, #72]	; (8013700 <readCanToStructs+0x1a4c>)
 80136b8:	f240 4116 	movw	r1, #1046	; 0x416
 80136bc:	fb01 f303 	mul.w	r3, r1, r3
 80136c0:	4413      	add	r3, r2
 80136c2:	f203 2312 	addw	r3, r3, #530	; 0x212
 80136c6:	2201      	movs	r2, #1
 80136c8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 80136ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136ce:	490c      	ldr	r1, [pc, #48]	; (8013700 <readCanToStructs+0x1a4c>)
 80136d0:	f240 4216 	movw	r2, #1046	; 0x416
 80136d4:	fb03 f202 	mul.w	r2, r3, r2
 80136d8:	440a      	add	r2, r1
 80136da:	f202 2213 	addw	r2, r2, #531	; 0x213
 80136de:	7812      	ldrb	r2, [r2, #0]
 80136e0:	3201      	adds	r2, #1
 80136e2:	b2d0      	uxtb	r0, r2
 80136e4:	4a06      	ldr	r2, [pc, #24]	; (8013700 <readCanToStructs+0x1a4c>)
 80136e6:	f240 4116 	movw	r1, #1046	; 0x416
 80136ea:	fb01 f303 	mul.w	r3, r1, r3
 80136ee:	4413      	add	r3, r2
 80136f0:	f203 2313 	addw	r3, r3, #531	; 0x213
 80136f4:	4602      	mov	r2, r0
 80136f6:	701a      	strb	r2, [r3, #0]
				break;
 80136f8:	f000 be5d 	b.w	80143b6 <readCanToStructs+0x2702>
 80136fc:	20007264 	.word	0x20007264
 8013700:	20006a38 	.word	0x20006a38
 8013704:	20003fcc 	.word	0x20003fcc
 8013708:	20003fd4 	.word	0x20003fd4
 801370c:	20000bbb 	.word	0x20000bbb
 8013710:	0802b6e0 	.word	0x0802b6e0
 8013714:	0802b6f4 	.word	0x0802b6f4
 8013718:	0802b710 	.word	0x0802b710
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 801371c:	4bc8      	ldr	r3, [pc, #800]	; (8013a40 <readCanToStructs+0x1d8c>)
 801371e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013720:	4bc8      	ldr	r3, [pc, #800]	; (8013a44 <readCanToStructs+0x1d90>)
 8013722:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013726:	885b      	ldrh	r3, [r3, #2]
 8013728:	4ac6      	ldr	r2, [pc, #792]	; (8013a44 <readCanToStructs+0x1d90>)
 801372a:	011b      	lsls	r3, r3, #4
 801372c:	4413      	add	r3, r2
 801372e:	3304      	adds	r3, #4
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013736:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801373a:	2b00      	cmp	r3, #0
 801373c:	d110      	bne.n	8013760 <readCanToStructs+0x1aac>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 801373e:	2204      	movs	r2, #4
 8013740:	2100      	movs	r1, #0
 8013742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013744:	f013 f96a 	bl	8026a1c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8013748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801374c:	4abe      	ldr	r2, [pc, #760]	; (8013a48 <readCanToStructs+0x1d94>)
 801374e:	f240 4116 	movw	r1, #1046	; 0x416
 8013752:	fb01 f303 	mul.w	r3, r1, r3
 8013756:	4413      	add	r3, r2
 8013758:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801375c:	2200      	movs	r2, #0
 801375e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8013760:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013764:	4ab8      	ldr	r2, [pc, #736]	; (8013a48 <readCanToStructs+0x1d94>)
 8013766:	f240 4116 	movw	r1, #1046	; 0x416
 801376a:	fb01 f303 	mul.w	r3, r1, r3
 801376e:	4413      	add	r3, r2
 8013770:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801377a:	429a      	cmp	r2, r3
 801377c:	d015      	beq.n	80137aa <readCanToStructs+0x1af6>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 801377e:	48b3      	ldr	r0, [pc, #716]	; (8013a4c <readCanToStructs+0x1d98>)
 8013780:	f013 fad0 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8013784:	2204      	movs	r2, #4
 8013786:	2100      	movs	r1, #0
 8013788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801378a:	f013 f947 	bl	8026a1c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801378e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013792:	4aad      	ldr	r2, [pc, #692]	; (8013a48 <readCanToStructs+0x1d94>)
 8013794:	f240 4116 	movw	r1, #1046	; 0x416
 8013798:	fb01 f303 	mul.w	r3, r1, r3
 801379c:	4413      	add	r3, r2
 801379e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80137a2:	2200      	movs	r2, #0
 80137a4:	701a      	strb	r2, [r3, #0]
					break;
 80137a6:	f000 be06 	b.w	80143b6 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 80137aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80137ae:	4613      	mov	r3, r2
 80137b0:	00db      	lsls	r3, r3, #3
 80137b2:	1a9b      	subs	r3, r3, r2
 80137b4:	461a      	mov	r2, r3
 80137b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b8:	4413      	add	r3, r2
 80137ba:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80137bc:	2301      	movs	r3, #1
 80137be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80137c2:	e016      	b.n	80137f2 <readCanToStructs+0x1b3e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80137c4:	4b9f      	ldr	r3, [pc, #636]	; (8013a44 <readCanToStructs+0x1d90>)
 80137c6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80137ca:	885b      	ldrh	r3, [r3, #2]
 80137cc:	461a      	mov	r2, r3
 80137ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137d2:	499c      	ldr	r1, [pc, #624]	; (8013a44 <readCanToStructs+0x1d90>)
 80137d4:	0112      	lsls	r2, r2, #4
 80137d6:	440a      	add	r2, r1
 80137d8:	4413      	add	r3, r2
 80137da:	3304      	adds	r3, #4
 80137dc:	781a      	ldrb	r2, [r3, #0]
 80137de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80137e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e4:	3301      	adds	r3, #1
 80137e6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80137e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137ec:	3301      	adds	r3, #1
 80137ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80137f2:	4b94      	ldr	r3, [pc, #592]	; (8013a44 <readCanToStructs+0x1d90>)
 80137f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80137f8:	885b      	ldrh	r3, [r3, #2]
 80137fa:	4a92      	ldr	r2, [pc, #584]	; (8013a44 <readCanToStructs+0x1d90>)
 80137fc:	011b      	lsls	r3, r3, #4
 80137fe:	4413      	add	r3, r2
 8013800:	330c      	adds	r3, #12
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013808:	429a      	cmp	r2, r3
 801380a:	d3db      	bcc.n	80137c4 <readCanToStructs+0x1b10>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 801380c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013810:	4a8d      	ldr	r2, [pc, #564]	; (8013a48 <readCanToStructs+0x1d94>)
 8013812:	f240 4116 	movw	r1, #1046	; 0x416
 8013816:	fb01 f303 	mul.w	r3, r1, r3
 801381a:	4413      	add	r3, r2
 801381c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013820:	781b      	ldrb	r3, [r3, #0]
 8013822:	461a      	mov	r2, r3
 8013824:	4613      	mov	r3, r2
 8013826:	00db      	lsls	r3, r3, #3
 8013828:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 801382a:	4b86      	ldr	r3, [pc, #536]	; (8013a44 <readCanToStructs+0x1d90>)
 801382c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013830:	885b      	ldrh	r3, [r3, #2]
 8013832:	4984      	ldr	r1, [pc, #528]	; (8013a44 <readCanToStructs+0x1d90>)
 8013834:	011b      	lsls	r3, r3, #4
 8013836:	440b      	add	r3, r1
 8013838:	330c      	adds	r3, #12
 801383a:	781b      	ldrb	r3, [r3, #0]
 801383c:	3b01      	subs	r3, #1
 801383e:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8013840:	2b03      	cmp	r3, #3
 8013842:	d921      	bls.n	8013888 <readCanToStructs+0x1bd4>
 8013844:	4b7e      	ldr	r3, [pc, #504]	; (8013a40 <readCanToStructs+0x1d8c>)
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 801384a:	4b81      	ldr	r3, [pc, #516]	; (8013a50 <readCanToStructs+0x1d9c>)
 801384c:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 801384e:	4b81      	ldr	r3, [pc, #516]	; (8013a54 <readCanToStructs+0x1da0>)
 8013850:	781b      	ldrb	r3, [r3, #0]
 8013852:	2b01      	cmp	r3, #1
 8013854:	d102      	bne.n	801385c <readCanToStructs+0x1ba8>
						printf("O_Info1_RCV\n");
 8013856:	4880      	ldr	r0, [pc, #512]	; (8013a58 <readCanToStructs+0x1da4>)
 8013858:	f013 fa64 	bl	8026d24 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 801385c:	4b7f      	ldr	r3, [pc, #508]	; (8013a5c <readCanToStructs+0x1da8>)
 801385e:	2201      	movs	r2, #1
 8013860:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8013862:	f006 f9b9 	bl	8019bd8 <HAL_GetTick>
 8013866:	4603      	mov	r3, r0
 8013868:	4a7c      	ldr	r2, [pc, #496]	; (8013a5c <readCanToStructs+0x1da8>)
 801386a:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801386c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013870:	4a75      	ldr	r2, [pc, #468]	; (8013a48 <readCanToStructs+0x1d94>)
 8013872:	f240 4116 	movw	r1, #1046	; 0x416
 8013876:	fb01 f303 	mul.w	r3, r1, r3
 801387a:	4413      	add	r3, r2
 801387c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013880:	2200      	movs	r2, #0
 8013882:	701a      	strb	r2, [r3, #0]
				break;
 8013884:	f000 bd97 	b.w	80143b6 <readCanToStructs+0x2702>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8013888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801388c:	4a6e      	ldr	r2, [pc, #440]	; (8013a48 <readCanToStructs+0x1d94>)
 801388e:	f240 4116 	movw	r1, #1046	; 0x416
 8013892:	fb01 f303 	mul.w	r3, r1, r3
 8013896:	4413      	add	r3, r2
 8013898:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801389c:	2201      	movs	r2, #1
 801389e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80138a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138a4:	4968      	ldr	r1, [pc, #416]	; (8013a48 <readCanToStructs+0x1d94>)
 80138a6:	f240 4216 	movw	r2, #1046	; 0x416
 80138aa:	fb03 f202 	mul.w	r2, r3, r2
 80138ae:	440a      	add	r2, r1
 80138b0:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80138b4:	7812      	ldrb	r2, [r2, #0]
 80138b6:	3201      	adds	r2, #1
 80138b8:	b2d0      	uxtb	r0, r2
 80138ba:	4a63      	ldr	r2, [pc, #396]	; (8013a48 <readCanToStructs+0x1d94>)
 80138bc:	f240 4116 	movw	r1, #1046	; 0x416
 80138c0:	fb01 f303 	mul.w	r3, r1, r3
 80138c4:	4413      	add	r3, r2
 80138c6:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80138ca:	4602      	mov	r2, r0
 80138cc:	701a      	strb	r2, [r3, #0]
				break;
 80138ce:	f000 bd72 	b.w	80143b6 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 80138d2:	4b5b      	ldr	r3, [pc, #364]	; (8013a40 <readCanToStructs+0x1d8c>)
 80138d4:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80138d6:	4b5b      	ldr	r3, [pc, #364]	; (8013a44 <readCanToStructs+0x1d90>)
 80138d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80138dc:	885b      	ldrh	r3, [r3, #2]
 80138de:	4a59      	ldr	r2, [pc, #356]	; (8013a44 <readCanToStructs+0x1d90>)
 80138e0:	011b      	lsls	r3, r3, #4
 80138e2:	4413      	add	r3, r2
 80138e4:	3304      	adds	r3, #4
 80138e6:	781b      	ldrb	r3, [r3, #0]
 80138e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80138ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d110      	bne.n	8013916 <readCanToStructs+0x1c62>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80138f4:	2204      	movs	r2, #4
 80138f6:	2100      	movs	r1, #0
 80138f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138fa:	f013 f88f 	bl	8026a1c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80138fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013902:	4a51      	ldr	r2, [pc, #324]	; (8013a48 <readCanToStructs+0x1d94>)
 8013904:	f240 4116 	movw	r1, #1046	; 0x416
 8013908:	fb01 f303 	mul.w	r3, r1, r3
 801390c:	4413      	add	r3, r2
 801390e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013912:	2200      	movs	r2, #0
 8013914:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8013916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801391a:	4a4b      	ldr	r2, [pc, #300]	; (8013a48 <readCanToStructs+0x1d94>)
 801391c:	f240 4116 	movw	r1, #1046	; 0x416
 8013920:	fb01 f303 	mul.w	r3, r1, r3
 8013924:	4413      	add	r3, r2
 8013926:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801392a:	781b      	ldrb	r3, [r3, #0]
 801392c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013930:	429a      	cmp	r2, r3
 8013932:	d015      	beq.n	8013960 <readCanToStructs+0x1cac>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 8013934:	484a      	ldr	r0, [pc, #296]	; (8013a60 <readCanToStructs+0x1dac>)
 8013936:	f013 f9f5 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 801393a:	2204      	movs	r2, #4
 801393c:	2100      	movs	r1, #0
 801393e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013940:	f013 f86c 	bl	8026a1c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8013944:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013948:	4a3f      	ldr	r2, [pc, #252]	; (8013a48 <readCanToStructs+0x1d94>)
 801394a:	f240 4116 	movw	r1, #1046	; 0x416
 801394e:	fb01 f303 	mul.w	r3, r1, r3
 8013952:	4413      	add	r3, r2
 8013954:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013958:	2200      	movs	r2, #0
 801395a:	701a      	strb	r2, [r3, #0]
					break;
 801395c:	f000 bd2b 	b.w	80143b6 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013960:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013964:	4613      	mov	r3, r2
 8013966:	00db      	lsls	r3, r3, #3
 8013968:	1a9b      	subs	r3, r3, r2
 801396a:	461a      	mov	r2, r3
 801396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396e:	4413      	add	r3, r2
 8013970:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013972:	2301      	movs	r3, #1
 8013974:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013978:	e016      	b.n	80139a8 <readCanToStructs+0x1cf4>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801397a:	4b32      	ldr	r3, [pc, #200]	; (8013a44 <readCanToStructs+0x1d90>)
 801397c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013980:	885b      	ldrh	r3, [r3, #2]
 8013982:	461a      	mov	r2, r3
 8013984:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013988:	492e      	ldr	r1, [pc, #184]	; (8013a44 <readCanToStructs+0x1d90>)
 801398a:	0112      	lsls	r2, r2, #4
 801398c:	440a      	add	r2, r1
 801398e:	4413      	add	r3, r2
 8013990:	3304      	adds	r3, #4
 8013992:	781a      	ldrb	r2, [r3, #0]
 8013994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013996:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801399a:	3301      	adds	r3, #1
 801399c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801399e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80139a2:	3301      	adds	r3, #1
 80139a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80139a8:	4b26      	ldr	r3, [pc, #152]	; (8013a44 <readCanToStructs+0x1d90>)
 80139aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80139ae:	885b      	ldrh	r3, [r3, #2]
 80139b0:	4a24      	ldr	r2, [pc, #144]	; (8013a44 <readCanToStructs+0x1d90>)
 80139b2:	011b      	lsls	r3, r3, #4
 80139b4:	4413      	add	r3, r2
 80139b6:	330c      	adds	r3, #12
 80139b8:	781b      	ldrb	r3, [r3, #0]
 80139ba:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80139be:	429a      	cmp	r2, r3
 80139c0:	d3db      	bcc.n	801397a <readCanToStructs+0x1cc6>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 80139c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80139c6:	4a20      	ldr	r2, [pc, #128]	; (8013a48 <readCanToStructs+0x1d94>)
 80139c8:	f240 4116 	movw	r1, #1046	; 0x416
 80139cc:	fb01 f303 	mul.w	r3, r1, r3
 80139d0:	4413      	add	r3, r2
 80139d2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80139d6:	781b      	ldrb	r3, [r3, #0]
 80139d8:	461a      	mov	r2, r3
 80139da:	4613      	mov	r3, r2
 80139dc:	00db      	lsls	r3, r3, #3
 80139de:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 80139e0:	4b18      	ldr	r3, [pc, #96]	; (8013a44 <readCanToStructs+0x1d90>)
 80139e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80139e6:	885b      	ldrh	r3, [r3, #2]
 80139e8:	4916      	ldr	r1, [pc, #88]	; (8013a44 <readCanToStructs+0x1d90>)
 80139ea:	011b      	lsls	r3, r3, #4
 80139ec:	440b      	add	r3, r1
 80139ee:	330c      	adds	r3, #12
 80139f0:	781b      	ldrb	r3, [r3, #0]
 80139f2:	3b01      	subs	r3, #1
 80139f4:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 80139f6:	2b03      	cmp	r3, #3
 80139f8:	d936      	bls.n	8013a68 <readCanToStructs+0x1db4>
 80139fa:	4b11      	ldr	r3, [pc, #68]	; (8013a40 <readCanToStructs+0x1d8c>)
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8013a00:	4b13      	ldr	r3, [pc, #76]	; (8013a50 <readCanToStructs+0x1d9c>)
 8013a02:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8013a04:	4b13      	ldr	r3, [pc, #76]	; (8013a54 <readCanToStructs+0x1da0>)
 8013a06:	781b      	ldrb	r3, [r3, #0]
 8013a08:	2b01      	cmp	r3, #1
 8013a0a:	d102      	bne.n	8013a12 <readCanToStructs+0x1d5e>
						printf("O_Info2_RCV\n");
 8013a0c:	4815      	ldr	r0, [pc, #84]	; (8013a64 <readCanToStructs+0x1db0>)
 8013a0e:	f013 f989 	bl	8026d24 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8013a12:	4b12      	ldr	r3, [pc, #72]	; (8013a5c <readCanToStructs+0x1da8>)
 8013a14:	2201      	movs	r2, #1
 8013a16:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8013a18:	f006 f8de 	bl	8019bd8 <HAL_GetTick>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	4a0f      	ldr	r2, [pc, #60]	; (8013a5c <readCanToStructs+0x1da8>)
 8013a20:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8013a22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a26:	4a08      	ldr	r2, [pc, #32]	; (8013a48 <readCanToStructs+0x1d94>)
 8013a28:	f240 4116 	movw	r1, #1046	; 0x416
 8013a2c:	fb01 f303 	mul.w	r3, r1, r3
 8013a30:	4413      	add	r3, r2
 8013a32:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013a36:	2200      	movs	r2, #0
 8013a38:	701a      	strb	r2, [r3, #0]
				break;
 8013a3a:	f000 bcbc 	b.w	80143b6 <readCanToStructs+0x2702>
 8013a3e:	bf00      	nop
 8013a40:	20004c88 	.word	0x20004c88
 8013a44:	20007264 	.word	0x20007264
 8013a48:	20006a38 	.word	0x20006a38
 8013a4c:	0802b728 	.word	0x0802b728
 8013a50:	20004c84 	.word	0x20004c84
 8013a54:	20000bbb 	.word	0x20000bbb
 8013a58:	0802b914 	.word	0x0802b914
 8013a5c:	20004c8c 	.word	0x20004c8c
 8013a60:	0802b75c 	.word	0x0802b75c
 8013a64:	0802b920 	.word	0x0802b920
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8013a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a6c:	4a9f      	ldr	r2, [pc, #636]	; (8013cec <readCanToStructs+0x2038>)
 8013a6e:	f240 4116 	movw	r1, #1046	; 0x416
 8013a72:	fb01 f303 	mul.w	r3, r1, r3
 8013a76:	4413      	add	r3, r2
 8013a78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8013a80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a84:	4999      	ldr	r1, [pc, #612]	; (8013cec <readCanToStructs+0x2038>)
 8013a86:	f240 4216 	movw	r2, #1046	; 0x416
 8013a8a:	fb03 f202 	mul.w	r2, r3, r2
 8013a8e:	440a      	add	r2, r1
 8013a90:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8013a94:	7812      	ldrb	r2, [r2, #0]
 8013a96:	3201      	adds	r2, #1
 8013a98:	b2d0      	uxtb	r0, r2
 8013a9a:	4a94      	ldr	r2, [pc, #592]	; (8013cec <readCanToStructs+0x2038>)
 8013a9c:	f240 4116 	movw	r1, #1046	; 0x416
 8013aa0:	fb01 f303 	mul.w	r3, r1, r3
 8013aa4:	4413      	add	r3, r2
 8013aa6:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013aaa:	4602      	mov	r2, r0
 8013aac:	701a      	strb	r2, [r3, #0]
				break;
 8013aae:	f000 bc82 	b.w	80143b6 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8013ab2:	4b8f      	ldr	r3, [pc, #572]	; (8013cf0 <readCanToStructs+0x203c>)
 8013ab4:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013ab6:	4b8f      	ldr	r3, [pc, #572]	; (8013cf4 <readCanToStructs+0x2040>)
 8013ab8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013abc:	885b      	ldrh	r3, [r3, #2]
 8013abe:	4a8d      	ldr	r2, [pc, #564]	; (8013cf4 <readCanToStructs+0x2040>)
 8013ac0:	011b      	lsls	r3, r3, #4
 8013ac2:	4413      	add	r3, r2
 8013ac4:	3304      	adds	r3, #4
 8013ac6:	781b      	ldrb	r3, [r3, #0]
 8013ac8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8013acc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d005      	beq.n	8013ae0 <readCanToStructs+0x1e2c>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8013ad4:	4b88      	ldr	r3, [pc, #544]	; (8013cf8 <readCanToStructs+0x2044>)
 8013ad6:	881b      	ldrh	r3, [r3, #0]
 8013ad8:	461a      	mov	r2, r3
 8013ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013adc:	4413      	add	r3, r2
 8013ade:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8013ae0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d117      	bne.n	8013b18 <readCanToStructs+0x1e64>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013ae8:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013aec:	2100      	movs	r1, #0
 8013aee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013af0:	f012 ff94 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013af4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013af8:	4a7c      	ldr	r2, [pc, #496]	; (8013cec <readCanToStructs+0x2038>)
 8013afa:	f240 4116 	movw	r1, #1046	; 0x416
 8013afe:	fb01 f303 	mul.w	r3, r1, r3
 8013b02:	4413      	add	r3, r2
 8013b04:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013b08:	2200      	movs	r2, #0
 8013b0a:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013b0c:	4b7a      	ldr	r3, [pc, #488]	; (8013cf8 <readCanToStructs+0x2044>)
 8013b0e:	2200      	movs	r2, #0
 8013b10:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8013b12:	4b7a      	ldr	r3, [pc, #488]	; (8013cfc <readCanToStructs+0x2048>)
 8013b14:	2200      	movs	r2, #0
 8013b16:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013b18:	2301      	movs	r3, #1
 8013b1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013b1e:	e01c      	b.n	8013b5a <readCanToStructs+0x1ea6>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013b20:	4b74      	ldr	r3, [pc, #464]	; (8013cf4 <readCanToStructs+0x2040>)
 8013b22:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013b26:	885b      	ldrh	r3, [r3, #2]
 8013b28:	461a      	mov	r2, r3
 8013b2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b2e:	4971      	ldr	r1, [pc, #452]	; (8013cf4 <readCanToStructs+0x2040>)
 8013b30:	0112      	lsls	r2, r2, #4
 8013b32:	440a      	add	r2, r1
 8013b34:	4413      	add	r3, r2
 8013b36:	3304      	adds	r3, #4
 8013b38:	781a      	ldrb	r2, [r3, #0]
 8013b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b3c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b40:	3301      	adds	r3, #1
 8013b42:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8013b44:	4b6c      	ldr	r3, [pc, #432]	; (8013cf8 <readCanToStructs+0x2044>)
 8013b46:	881b      	ldrh	r3, [r3, #0]
 8013b48:	3301      	adds	r3, #1
 8013b4a:	b29a      	uxth	r2, r3
 8013b4c:	4b6a      	ldr	r3, [pc, #424]	; (8013cf8 <readCanToStructs+0x2044>)
 8013b4e:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013b50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b54:	3301      	adds	r3, #1
 8013b56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013b5a:	4b66      	ldr	r3, [pc, #408]	; (8013cf4 <readCanToStructs+0x2040>)
 8013b5c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013b60:	885b      	ldrh	r3, [r3, #2]
 8013b62:	4a64      	ldr	r2, [pc, #400]	; (8013cf4 <readCanToStructs+0x2040>)
 8013b64:	011b      	lsls	r3, r3, #4
 8013b66:	4413      	add	r3, r2
 8013b68:	330c      	adds	r3, #12
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d3d5      	bcc.n	8013b20 <readCanToStructs+0x1e6c>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8013b74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b78:	4a5c      	ldr	r2, [pc, #368]	; (8013cec <readCanToStructs+0x2038>)
 8013b7a:	f240 4116 	movw	r1, #1046	; 0x416
 8013b7e:	fb01 f303 	mul.w	r3, r1, r3
 8013b82:	4413      	add	r3, r2
 8013b84:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013b88:	781b      	ldrb	r3, [r3, #0]
 8013b8a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013b8e:	429a      	cmp	r2, r3
 8013b90:	d026      	beq.n	8013be0 <readCanToStructs+0x1f2c>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 8013b92:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8013b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b9a:	4a54      	ldr	r2, [pc, #336]	; (8013cec <readCanToStructs+0x2038>)
 8013b9c:	f240 4016 	movw	r0, #1046	; 0x416
 8013ba0:	fb00 f303 	mul.w	r3, r0, r3
 8013ba4:	4413      	add	r3, r2
 8013ba6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	461a      	mov	r2, r3
 8013bae:	4854      	ldr	r0, [pc, #336]	; (8013d00 <readCanToStructs+0x204c>)
 8013bb0:	f013 f81c 	bl	8026bec <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013bb4:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013bb8:	2100      	movs	r1, #0
 8013bba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013bbc:	f012 ff2e 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013bc4:	4a49      	ldr	r2, [pc, #292]	; (8013cec <readCanToStructs+0x2038>)
 8013bc6:	f240 4116 	movw	r1, #1046	; 0x416
 8013bca:	fb01 f303 	mul.w	r3, r1, r3
 8013bce:	4413      	add	r3, r2
 8013bd0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013bd8:	4b47      	ldr	r3, [pc, #284]	; (8013cf8 <readCanToStructs+0x2044>)
 8013bda:	2200      	movs	r2, #0
 8013bdc:	801a      	strh	r2, [r3, #0]
					break;
 8013bde:	e3ea      	b.n	80143b6 <readCanToStructs+0x2702>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8013be0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013be4:	4941      	ldr	r1, [pc, #260]	; (8013cec <readCanToStructs+0x2038>)
 8013be6:	f240 4216 	movw	r2, #1046	; 0x416
 8013bea:	fb03 f202 	mul.w	r2, r3, r2
 8013bee:	440a      	add	r2, r1
 8013bf0:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8013bf4:	7812      	ldrb	r2, [r2, #0]
 8013bf6:	3201      	adds	r2, #1
 8013bf8:	b2d0      	uxtb	r0, r2
 8013bfa:	4a3c      	ldr	r2, [pc, #240]	; (8013cec <readCanToStructs+0x2038>)
 8013bfc:	f240 4116 	movw	r1, #1046	; 0x416
 8013c00:	fb01 f303 	mul.w	r3, r1, r3
 8013c04:	4413      	add	r3, r2
 8013c06:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013c0a:	4602      	mov	r2, r0
 8013c0c:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8013c0e:	4b38      	ldr	r3, [pc, #224]	; (8013cf0 <readCanToStructs+0x203c>)
 8013c10:	881b      	ldrh	r3, [r3, #0]
 8013c12:	3304      	adds	r3, #4
 8013c14:	b29a      	uxth	r2, r3
 8013c16:	4b39      	ldr	r3, [pc, #228]	; (8013cfc <readCanToStructs+0x2048>)
 8013c18:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8013c1a:	4b37      	ldr	r3, [pc, #220]	; (8013cf8 <readCanToStructs+0x2044>)
 8013c1c:	881a      	ldrh	r2, [r3, #0]
 8013c1e:	4b37      	ldr	r3, [pc, #220]	; (8013cfc <readCanToStructs+0x2048>)
 8013c20:	881b      	ldrh	r3, [r3, #0]
 8013c22:	429a      	cmp	r2, r3
 8013c24:	f0c0 83c4 	bcc.w	80143b0 <readCanToStructs+0x26fc>
					if(Debug_flag == 1)
 8013c28:	4b36      	ldr	r3, [pc, #216]	; (8013d04 <readCanToStructs+0x2050>)
 8013c2a:	781b      	ldrb	r3, [r3, #0]
 8013c2c:	2b01      	cmp	r3, #1
 8013c2e:	d102      	bne.n	8013c36 <readCanToStructs+0x1f82>
						printf("EI1 Relay Info Received\n");
 8013c30:	4835      	ldr	r0, [pc, #212]	; (8013d08 <readCanToStructs+0x2054>)
 8013c32:	f013 f877 	bl	8026d24 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8013c36:	4a35      	ldr	r2, [pc, #212]	; (8013d0c <readCanToStructs+0x2058>)
 8013c38:	4b2d      	ldr	r3, [pc, #180]	; (8013cf0 <readCanToStructs+0x203c>)
 8013c3a:	4610      	mov	r0, r2
 8013c3c:	4619      	mov	r1, r3
 8013c3e:	f44f 7301 	mov.w	r3, #516	; 0x204
 8013c42:	461a      	mov	r2, r3
 8013c44:	f012 fec2 	bl	80269cc <memcpy>
					DataTraverser = 0;
 8013c48:	4b2b      	ldr	r3, [pc, #172]	; (8013cf8 <readCanToStructs+0x2044>)
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8013c4e:	4b2b      	ldr	r3, [pc, #172]	; (8013cfc <readCanToStructs+0x2048>)
 8013c50:	2200      	movs	r2, #0
 8013c52:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8013c54:	4b2e      	ldr	r3, [pc, #184]	; (8013d10 <readCanToStructs+0x205c>)
 8013c56:	2201      	movs	r2, #1
 8013c58:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8013c5a:	f005 ffbd 	bl	8019bd8 <HAL_GetTick>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	4a2b      	ldr	r2, [pc, #172]	; (8013d10 <readCanToStructs+0x205c>)
 8013c62:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013c64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013c68:	4a20      	ldr	r2, [pc, #128]	; (8013cec <readCanToStructs+0x2038>)
 8013c6a:	f240 4116 	movw	r1, #1046	; 0x416
 8013c6e:	fb01 f303 	mul.w	r3, r1, r3
 8013c72:	4413      	add	r3, r2
 8013c74:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013c78:	2200      	movs	r2, #0
 8013c7a:	701a      	strb	r2, [r3, #0]
				break;
 8013c7c:	e398      	b.n	80143b0 <readCanToStructs+0x26fc>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8013c7e:	4b1c      	ldr	r3, [pc, #112]	; (8013cf0 <readCanToStructs+0x203c>)
 8013c80:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013c82:	4b1c      	ldr	r3, [pc, #112]	; (8013cf4 <readCanToStructs+0x2040>)
 8013c84:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013c88:	885b      	ldrh	r3, [r3, #2]
 8013c8a:	4a1a      	ldr	r2, [pc, #104]	; (8013cf4 <readCanToStructs+0x2040>)
 8013c8c:	011b      	lsls	r3, r3, #4
 8013c8e:	4413      	add	r3, r2
 8013c90:	3304      	adds	r3, #4
 8013c92:	781b      	ldrb	r3, [r3, #0]
 8013c94:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8013c98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d005      	beq.n	8013cac <readCanToStructs+0x1ff8>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8013ca0:	4b15      	ldr	r3, [pc, #84]	; (8013cf8 <readCanToStructs+0x2044>)
 8013ca2:	881b      	ldrh	r3, [r3, #0]
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca8:	4413      	add	r3, r2
 8013caa:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8013cac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d117      	bne.n	8013ce4 <readCanToStructs+0x2030>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013cb4:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013cb8:	2100      	movs	r1, #0
 8013cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013cbc:	f012 feae 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013cc4:	4a09      	ldr	r2, [pc, #36]	; (8013cec <readCanToStructs+0x2038>)
 8013cc6:	f240 4116 	movw	r1, #1046	; 0x416
 8013cca:	fb01 f303 	mul.w	r3, r1, r3
 8013cce:	4413      	add	r3, r2
 8013cd0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013cd8:	4b07      	ldr	r3, [pc, #28]	; (8013cf8 <readCanToStructs+0x2044>)
 8013cda:	2200      	movs	r2, #0
 8013cdc:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8013cde:	4b07      	ldr	r3, [pc, #28]	; (8013cfc <readCanToStructs+0x2048>)
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013ce4:	2301      	movs	r3, #1
 8013ce6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013cea:	e030      	b.n	8013d4e <readCanToStructs+0x209a>
 8013cec:	20006a38 	.word	0x20006a38
 8013cf0:	200052b4 	.word	0x200052b4
 8013cf4:	20007264 	.word	0x20007264
 8013cf8:	2000b3bc 	.word	0x2000b3bc
 8013cfc:	2000b3be 	.word	0x2000b3be
 8013d00:	0802b92c 	.word	0x0802b92c
 8013d04:	20000bbb 	.word	0x20000bbb
 8013d08:	0802b958 	.word	0x0802b958
 8013d0c:	200050b0 	.word	0x200050b0
 8013d10:	20004c8c 	.word	0x20004c8c
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013d14:	4bbe      	ldr	r3, [pc, #760]	; (8014010 <readCanToStructs+0x235c>)
 8013d16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d1a:	885b      	ldrh	r3, [r3, #2]
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013d22:	49bb      	ldr	r1, [pc, #748]	; (8014010 <readCanToStructs+0x235c>)
 8013d24:	0112      	lsls	r2, r2, #4
 8013d26:	440a      	add	r2, r1
 8013d28:	4413      	add	r3, r2
 8013d2a:	3304      	adds	r3, #4
 8013d2c:	781a      	ldrb	r2, [r3, #0]
 8013d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d30:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d34:	3301      	adds	r3, #1
 8013d36:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8013d38:	4bb6      	ldr	r3, [pc, #728]	; (8014014 <readCanToStructs+0x2360>)
 8013d3a:	881b      	ldrh	r3, [r3, #0]
 8013d3c:	3301      	adds	r3, #1
 8013d3e:	b29a      	uxth	r2, r3
 8013d40:	4bb4      	ldr	r3, [pc, #720]	; (8014014 <readCanToStructs+0x2360>)
 8013d42:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013d44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013d48:	3301      	adds	r3, #1
 8013d4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013d4e:	4bb0      	ldr	r3, [pc, #704]	; (8014010 <readCanToStructs+0x235c>)
 8013d50:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d54:	885b      	ldrh	r3, [r3, #2]
 8013d56:	4aae      	ldr	r2, [pc, #696]	; (8014010 <readCanToStructs+0x235c>)
 8013d58:	011b      	lsls	r3, r3, #4
 8013d5a:	4413      	add	r3, r2
 8013d5c:	330c      	adds	r3, #12
 8013d5e:	781b      	ldrb	r3, [r3, #0]
 8013d60:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d3d5      	bcc.n	8013d14 <readCanToStructs+0x2060>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8013d68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d6c:	4aaa      	ldr	r2, [pc, #680]	; (8014018 <readCanToStructs+0x2364>)
 8013d6e:	f240 4116 	movw	r1, #1046	; 0x416
 8013d72:	fb01 f303 	mul.w	r3, r1, r3
 8013d76:	4413      	add	r3, r2
 8013d78:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013d7c:	781b      	ldrb	r3, [r3, #0]
 8013d7e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d026      	beq.n	8013dd4 <readCanToStructs+0x2120>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 8013d86:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8013d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d8e:	4aa2      	ldr	r2, [pc, #648]	; (8014018 <readCanToStructs+0x2364>)
 8013d90:	f240 4016 	movw	r0, #1046	; 0x416
 8013d94:	fb00 f303 	mul.w	r3, r0, r3
 8013d98:	4413      	add	r3, r2
 8013d9a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013d9e:	781b      	ldrb	r3, [r3, #0]
 8013da0:	461a      	mov	r2, r3
 8013da2:	489e      	ldr	r0, [pc, #632]	; (801401c <readCanToStructs+0x2368>)
 8013da4:	f012 ff22 	bl	8026bec <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013da8:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013dac:	2100      	movs	r1, #0
 8013dae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013db0:	f012 fe34 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013db4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013db8:	4a97      	ldr	r2, [pc, #604]	; (8014018 <readCanToStructs+0x2364>)
 8013dba:	f240 4116 	movw	r1, #1046	; 0x416
 8013dbe:	fb01 f303 	mul.w	r3, r1, r3
 8013dc2:	4413      	add	r3, r2
 8013dc4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013dc8:	2200      	movs	r2, #0
 8013dca:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013dcc:	4b91      	ldr	r3, [pc, #580]	; (8014014 <readCanToStructs+0x2360>)
 8013dce:	2200      	movs	r2, #0
 8013dd0:	801a      	strh	r2, [r3, #0]
					break;
 8013dd2:	e2f0      	b.n	80143b6 <readCanToStructs+0x2702>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8013dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013dd8:	498f      	ldr	r1, [pc, #572]	; (8014018 <readCanToStructs+0x2364>)
 8013dda:	f240 4216 	movw	r2, #1046	; 0x416
 8013dde:	fb03 f202 	mul.w	r2, r3, r2
 8013de2:	440a      	add	r2, r1
 8013de4:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8013de8:	7812      	ldrb	r2, [r2, #0]
 8013dea:	3201      	adds	r2, #1
 8013dec:	b2d0      	uxtb	r0, r2
 8013dee:	4a8a      	ldr	r2, [pc, #552]	; (8014018 <readCanToStructs+0x2364>)
 8013df0:	f240 4116 	movw	r1, #1046	; 0x416
 8013df4:	fb01 f303 	mul.w	r3, r1, r3
 8013df8:	4413      	add	r3, r2
 8013dfa:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013dfe:	4602      	mov	r2, r0
 8013e00:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8013e02:	4b87      	ldr	r3, [pc, #540]	; (8014020 <readCanToStructs+0x236c>)
 8013e04:	881b      	ldrh	r3, [r3, #0]
 8013e06:	3304      	adds	r3, #4
 8013e08:	b29a      	uxth	r2, r3
 8013e0a:	4b86      	ldr	r3, [pc, #536]	; (8014024 <readCanToStructs+0x2370>)
 8013e0c:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8013e0e:	4b81      	ldr	r3, [pc, #516]	; (8014014 <readCanToStructs+0x2360>)
 8013e10:	881a      	ldrh	r2, [r3, #0]
 8013e12:	4b84      	ldr	r3, [pc, #528]	; (8014024 <readCanToStructs+0x2370>)
 8013e14:	881b      	ldrh	r3, [r3, #0]
 8013e16:	429a      	cmp	r2, r3
 8013e18:	f0c0 82cc 	bcc.w	80143b4 <readCanToStructs+0x2700>
					if(Debug_flag == 1)
 8013e1c:	4b82      	ldr	r3, [pc, #520]	; (8014028 <readCanToStructs+0x2374>)
 8013e1e:	781b      	ldrb	r3, [r3, #0]
 8013e20:	2b01      	cmp	r3, #1
 8013e22:	d102      	bne.n	8013e2a <readCanToStructs+0x2176>
						printf("EI2 Relay Info Received\n");
 8013e24:	4881      	ldr	r0, [pc, #516]	; (801402c <readCanToStructs+0x2378>)
 8013e26:	f012 ff7d 	bl	8026d24 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8013e2a:	4a81      	ldr	r2, [pc, #516]	; (8014030 <readCanToStructs+0x237c>)
 8013e2c:	4b7c      	ldr	r3, [pc, #496]	; (8014020 <readCanToStructs+0x236c>)
 8013e2e:	4610      	mov	r0, r2
 8013e30:	4619      	mov	r1, r3
 8013e32:	f44f 7301 	mov.w	r3, #516	; 0x204
 8013e36:	461a      	mov	r2, r3
 8013e38:	f012 fdc8 	bl	80269cc <memcpy>
					DataTraverser = 0;
 8013e3c:	4b75      	ldr	r3, [pc, #468]	; (8014014 <readCanToStructs+0x2360>)
 8013e3e:	2200      	movs	r2, #0
 8013e40:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8013e42:	4b78      	ldr	r3, [pc, #480]	; (8014024 <readCanToStructs+0x2370>)
 8013e44:	2200      	movs	r2, #0
 8013e46:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8013e48:	4b7a      	ldr	r3, [pc, #488]	; (8014034 <readCanToStructs+0x2380>)
 8013e4a:	2201      	movs	r2, #1
 8013e4c:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8013e4e:	f005 fec3 	bl	8019bd8 <HAL_GetTick>
 8013e52:	4603      	mov	r3, r0
 8013e54:	4a77      	ldr	r2, [pc, #476]	; (8014034 <readCanToStructs+0x2380>)
 8013e56:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013e58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e5c:	4a6e      	ldr	r2, [pc, #440]	; (8014018 <readCanToStructs+0x2364>)
 8013e5e:	f240 4116 	movw	r1, #1046	; 0x416
 8013e62:	fb01 f303 	mul.w	r3, r1, r3
 8013e66:	4413      	add	r3, r2
 8013e68:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	701a      	strb	r2, [r3, #0]
				break;
 8013e70:	e2a0      	b.n	80143b4 <readCanToStructs+0x2700>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 8013e72:	4b71      	ldr	r3, [pc, #452]	; (8014038 <readCanToStructs+0x2384>)
 8013e74:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013e76:	4b66      	ldr	r3, [pc, #408]	; (8014010 <readCanToStructs+0x235c>)
 8013e78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013e7c:	885b      	ldrh	r3, [r3, #2]
 8013e7e:	4a64      	ldr	r2, [pc, #400]	; (8014010 <readCanToStructs+0x235c>)
 8013e80:	011b      	lsls	r3, r3, #4
 8013e82:	4413      	add	r3, r2
 8013e84:	3304      	adds	r3, #4
 8013e86:	781b      	ldrb	r3, [r3, #0]
 8013e88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013e8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d110      	bne.n	8013eb6 <readCanToStructs+0x2202>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8013e94:	2208      	movs	r2, #8
 8013e96:	2100      	movs	r1, #0
 8013e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e9a:	f012 fdbf 	bl	8026a1c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ea2:	4a5d      	ldr	r2, [pc, #372]	; (8014018 <readCanToStructs+0x2364>)
 8013ea4:	f240 4116 	movw	r1, #1046	; 0x416
 8013ea8:	fb01 f303 	mul.w	r3, r1, r3
 8013eac:	4413      	add	r3, r2
 8013eae:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8013eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013eba:	4a57      	ldr	r2, [pc, #348]	; (8014018 <readCanToStructs+0x2364>)
 8013ebc:	f240 4116 	movw	r1, #1046	; 0x416
 8013ec0:	fb01 f303 	mul.w	r3, r1, r3
 8013ec4:	4413      	add	r3, r2
 8013ec6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d014      	beq.n	8013efe <readCanToStructs+0x224a>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8013ed4:	4859      	ldr	r0, [pc, #356]	; (801403c <readCanToStructs+0x2388>)
 8013ed6:	f012 ff25 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8013eda:	2208      	movs	r2, #8
 8013edc:	2100      	movs	r1, #0
 8013ede:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ee0:	f012 fd9c 	bl	8026a1c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013ee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ee8:	4a4b      	ldr	r2, [pc, #300]	; (8014018 <readCanToStructs+0x2364>)
 8013eea:	f240 4116 	movw	r1, #1046	; 0x416
 8013eee:	fb01 f303 	mul.w	r3, r1, r3
 8013ef2:	4413      	add	r3, r2
 8013ef4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013ef8:	2200      	movs	r2, #0
 8013efa:	701a      	strb	r2, [r3, #0]
					break;
 8013efc:	e25b      	b.n	80143b6 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013efe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013f02:	4613      	mov	r3, r2
 8013f04:	00db      	lsls	r3, r3, #3
 8013f06:	1a9b      	subs	r3, r3, r2
 8013f08:	461a      	mov	r2, r3
 8013f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f0c:	4413      	add	r3, r2
 8013f0e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013f10:	2301      	movs	r3, #1
 8013f12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013f16:	e016      	b.n	8013f46 <readCanToStructs+0x2292>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013f18:	4b3d      	ldr	r3, [pc, #244]	; (8014010 <readCanToStructs+0x235c>)
 8013f1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013f1e:	885b      	ldrh	r3, [r3, #2]
 8013f20:	461a      	mov	r2, r3
 8013f22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f26:	493a      	ldr	r1, [pc, #232]	; (8014010 <readCanToStructs+0x235c>)
 8013f28:	0112      	lsls	r2, r2, #4
 8013f2a:	440a      	add	r2, r1
 8013f2c:	4413      	add	r3, r2
 8013f2e:	3304      	adds	r3, #4
 8013f30:	781a      	ldrb	r2, [r3, #0]
 8013f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f34:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f38:	3301      	adds	r3, #1
 8013f3a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013f3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f40:	3301      	adds	r3, #1
 8013f42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013f46:	4b32      	ldr	r3, [pc, #200]	; (8014010 <readCanToStructs+0x235c>)
 8013f48:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013f4c:	885b      	ldrh	r3, [r3, #2]
 8013f4e:	4a30      	ldr	r2, [pc, #192]	; (8014010 <readCanToStructs+0x235c>)
 8013f50:	011b      	lsls	r3, r3, #4
 8013f52:	4413      	add	r3, r2
 8013f54:	330c      	adds	r3, #12
 8013f56:	781b      	ldrb	r3, [r3, #0]
 8013f58:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f5c:	429a      	cmp	r2, r3
 8013f5e:	d3db      	bcc.n	8013f18 <readCanToStructs+0x2264>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 8013f60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f64:	4a2c      	ldr	r2, [pc, #176]	; (8014018 <readCanToStructs+0x2364>)
 8013f66:	f240 4116 	movw	r1, #1046	; 0x416
 8013f6a:	fb01 f303 	mul.w	r3, r1, r3
 8013f6e:	4413      	add	r3, r2
 8013f70:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013f74:	781b      	ldrb	r3, [r3, #0]
 8013f76:	461a      	mov	r2, r3
 8013f78:	4613      	mov	r3, r2
 8013f7a:	00db      	lsls	r3, r3, #3
 8013f7c:	1a9a      	subs	r2, r3, r2
 8013f7e:	4b24      	ldr	r3, [pc, #144]	; (8014010 <readCanToStructs+0x235c>)
 8013f80:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013f84:	885b      	ldrh	r3, [r3, #2]
 8013f86:	4922      	ldr	r1, [pc, #136]	; (8014010 <readCanToStructs+0x235c>)
 8013f88:	011b      	lsls	r3, r3, #4
 8013f8a:	440b      	add	r3, r1
 8013f8c:	330c      	adds	r3, #12
 8013f8e:	781b      	ldrb	r3, [r3, #0]
 8013f90:	3b01      	subs	r3, #1
 8013f92:	4413      	add	r3, r2
 8013f94:	2b07      	cmp	r3, #7
 8013f96:	d917      	bls.n	8013fc8 <readCanToStructs+0x2314>
					printf("Received Fault Injection Data\n");
 8013f98:	4829      	ldr	r0, [pc, #164]	; (8014040 <readCanToStructs+0x238c>)
 8013f9a:	f012 fec3 	bl	8026d24 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8013f9e:	4b25      	ldr	r3, [pc, #148]	; (8014034 <readCanToStructs+0x2380>)
 8013fa0:	2201      	movs	r2, #1
 8013fa2:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8013fa4:	f005 fe18 	bl	8019bd8 <HAL_GetTick>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	4a22      	ldr	r2, [pc, #136]	; (8014034 <readCanToStructs+0x2380>)
 8013fac:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013fb2:	4a19      	ldr	r2, [pc, #100]	; (8014018 <readCanToStructs+0x2364>)
 8013fb4:	f240 4116 	movw	r1, #1046	; 0x416
 8013fb8:	fb01 f303 	mul.w	r3, r1, r3
 8013fbc:	4413      	add	r3, r2
 8013fbe:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	701a      	strb	r2, [r3, #0]
				break;
 8013fc6:	e1f6      	b.n	80143b6 <readCanToStructs+0x2702>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8013fc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013fcc:	4a12      	ldr	r2, [pc, #72]	; (8014018 <readCanToStructs+0x2364>)
 8013fce:	f240 4116 	movw	r1, #1046	; 0x416
 8013fd2:	fb01 f303 	mul.w	r3, r1, r3
 8013fd6:	4413      	add	r3, r2
 8013fd8:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8013fdc:	2201      	movs	r2, #1
 8013fde:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8013fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013fe4:	490c      	ldr	r1, [pc, #48]	; (8014018 <readCanToStructs+0x2364>)
 8013fe6:	f240 4216 	movw	r2, #1046	; 0x416
 8013fea:	fb03 f202 	mul.w	r2, r3, r2
 8013fee:	440a      	add	r2, r1
 8013ff0:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8013ff4:	7812      	ldrb	r2, [r2, #0]
 8013ff6:	3201      	adds	r2, #1
 8013ff8:	b2d0      	uxtb	r0, r2
 8013ffa:	4a07      	ldr	r2, [pc, #28]	; (8014018 <readCanToStructs+0x2364>)
 8013ffc:	f240 4116 	movw	r1, #1046	; 0x416
 8014000:	fb01 f303 	mul.w	r3, r1, r3
 8014004:	4413      	add	r3, r2
 8014006:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801400a:	4602      	mov	r2, r0
 801400c:	701a      	strb	r2, [r3, #0]
				break;
 801400e:	e1d2      	b.n	80143b6 <readCanToStructs+0x2702>
 8014010:	20007264 	.word	0x20007264
 8014014:	2000b3bc 	.word	0x2000b3bc
 8014018:	20006a38 	.word	0x20006a38
 801401c:	0802b970 	.word	0x0802b970
 8014020:	200052b4 	.word	0x200052b4
 8014024:	2000b3be 	.word	0x2000b3be
 8014028:	20000bbb 	.word	0x20000bbb
 801402c:	0802b99c 	.word	0x0802b99c
 8014030:	200050b0 	.word	0x200050b0
 8014034:	20004c8c 	.word	0x20004c8c
 8014038:	20004c78 	.word	0x20004c78
 801403c:	0802b7f8 	.word	0x0802b7f8
 8014040:	0802b818 	.word	0x0802b818
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8014044:	4bbe      	ldr	r3, [pc, #760]	; (8014340 <readCanToStructs+0x268c>)
 8014046:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014048:	4bbe      	ldr	r3, [pc, #760]	; (8014344 <readCanToStructs+0x2690>)
 801404a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801404e:	885b      	ldrh	r3, [r3, #2]
 8014050:	4abc      	ldr	r2, [pc, #752]	; (8014344 <readCanToStructs+0x2690>)
 8014052:	011b      	lsls	r3, r3, #4
 8014054:	4413      	add	r3, r2
 8014056:	3304      	adds	r3, #4
 8014058:	781b      	ldrb	r3, [r3, #0]
 801405a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801405e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014062:	2b00      	cmp	r3, #0
 8014064:	d110      	bne.n	8014088 <readCanToStructs+0x23d4>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014066:	2202      	movs	r2, #2
 8014068:	2100      	movs	r1, #0
 801406a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801406c:	f012 fcd6 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8014070:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014074:	4ab4      	ldr	r2, [pc, #720]	; (8014348 <readCanToStructs+0x2694>)
 8014076:	f240 4116 	movw	r1, #1046	; 0x416
 801407a:	fb01 f303 	mul.w	r3, r1, r3
 801407e:	4413      	add	r3, r2
 8014080:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014084:	2200      	movs	r2, #0
 8014086:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 8014088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801408c:	4aae      	ldr	r2, [pc, #696]	; (8014348 <readCanToStructs+0x2694>)
 801408e:	f240 4116 	movw	r1, #1046	; 0x416
 8014092:	fb01 f303 	mul.w	r3, r1, r3
 8014096:	4413      	add	r3, r2
 8014098:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801409c:	781b      	ldrb	r3, [r3, #0]
 801409e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80140a2:	429a      	cmp	r2, r3
 80140a4:	d014      	beq.n	80140d0 <readCanToStructs+0x241c>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 80140a6:	48a9      	ldr	r0, [pc, #676]	; (801434c <readCanToStructs+0x2698>)
 80140a8:	f012 fe3c 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80140ac:	2202      	movs	r2, #2
 80140ae:	2100      	movs	r1, #0
 80140b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140b2:	f012 fcb3 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 80140b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80140ba:	4aa3      	ldr	r2, [pc, #652]	; (8014348 <readCanToStructs+0x2694>)
 80140bc:	f240 4116 	movw	r1, #1046	; 0x416
 80140c0:	fb01 f303 	mul.w	r3, r1, r3
 80140c4:	4413      	add	r3, r2
 80140c6:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80140ca:	2200      	movs	r2, #0
 80140cc:	701a      	strb	r2, [r3, #0]
					break;
 80140ce:	e172      	b.n	80143b6 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 80140d0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80140d4:	4613      	mov	r3, r2
 80140d6:	00db      	lsls	r3, r3, #3
 80140d8:	1a9b      	subs	r3, r3, r2
 80140da:	461a      	mov	r2, r3
 80140dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140de:	4413      	add	r3, r2
 80140e0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80140e2:	2301      	movs	r3, #1
 80140e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80140e8:	e016      	b.n	8014118 <readCanToStructs+0x2464>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80140ea:	4b96      	ldr	r3, [pc, #600]	; (8014344 <readCanToStructs+0x2690>)
 80140ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80140f0:	885b      	ldrh	r3, [r3, #2]
 80140f2:	461a      	mov	r2, r3
 80140f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80140f8:	4992      	ldr	r1, [pc, #584]	; (8014344 <readCanToStructs+0x2690>)
 80140fa:	0112      	lsls	r2, r2, #4
 80140fc:	440a      	add	r2, r1
 80140fe:	4413      	add	r3, r2
 8014100:	3304      	adds	r3, #4
 8014102:	781a      	ldrb	r2, [r3, #0]
 8014104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014106:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801410a:	3301      	adds	r3, #1
 801410c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801410e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014112:	3301      	adds	r3, #1
 8014114:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014118:	4b8a      	ldr	r3, [pc, #552]	; (8014344 <readCanToStructs+0x2690>)
 801411a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801411e:	885b      	ldrh	r3, [r3, #2]
 8014120:	4a88      	ldr	r2, [pc, #544]	; (8014344 <readCanToStructs+0x2690>)
 8014122:	011b      	lsls	r3, r3, #4
 8014124:	4413      	add	r3, r2
 8014126:	330c      	adds	r3, #12
 8014128:	781b      	ldrb	r3, [r3, #0]
 801412a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801412e:	429a      	cmp	r2, r3
 8014130:	d3db      	bcc.n	80140ea <readCanToStructs+0x2436>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8014132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014136:	4a84      	ldr	r2, [pc, #528]	; (8014348 <readCanToStructs+0x2694>)
 8014138:	f240 4116 	movw	r1, #1046	; 0x416
 801413c:	fb01 f303 	mul.w	r3, r1, r3
 8014140:	4413      	add	r3, r2
 8014142:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014146:	781b      	ldrb	r3, [r3, #0]
 8014148:	461a      	mov	r2, r3
 801414a:	4613      	mov	r3, r2
 801414c:	00db      	lsls	r3, r3, #3
 801414e:	1a9a      	subs	r2, r3, r2
 8014150:	4b7c      	ldr	r3, [pc, #496]	; (8014344 <readCanToStructs+0x2690>)
 8014152:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014156:	885b      	ldrh	r3, [r3, #2]
 8014158:	497a      	ldr	r1, [pc, #488]	; (8014344 <readCanToStructs+0x2690>)
 801415a:	011b      	lsls	r3, r3, #4
 801415c:	440b      	add	r3, r1
 801415e:	330c      	adds	r3, #12
 8014160:	781b      	ldrb	r3, [r3, #0]
 8014162:	3b01      	subs	r3, #1
 8014164:	4413      	add	r3, r2
 8014166:	2b01      	cmp	r3, #1
 8014168:	d919      	bls.n	801419e <readCanToStructs+0x24ea>
					if(Debug_flag == 1)
 801416a:	4b79      	ldr	r3, [pc, #484]	; (8014350 <readCanToStructs+0x269c>)
 801416c:	781b      	ldrb	r3, [r3, #0]
 801416e:	2b01      	cmp	r3, #1
 8014170:	d105      	bne.n	801417e <readCanToStructs+0x24ca>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8014172:	4b73      	ldr	r3, [pc, #460]	; (8014340 <readCanToStructs+0x268c>)
 8014174:	881b      	ldrh	r3, [r3, #0]
 8014176:	4619      	mov	r1, r3
 8014178:	4876      	ldr	r0, [pc, #472]	; (8014354 <readCanToStructs+0x26a0>)
 801417a:	f012 fd37 	bl	8026bec <iprintf>
					Is_CAN_Exchange_happening = YES;
 801417e:	4b76      	ldr	r3, [pc, #472]	; (8014358 <readCanToStructs+0x26a4>)
 8014180:	2201      	movs	r2, #1
 8014182:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8014184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014188:	4a6f      	ldr	r2, [pc, #444]	; (8014348 <readCanToStructs+0x2694>)
 801418a:	f240 4116 	movw	r1, #1046	; 0x416
 801418e:	fb01 f303 	mul.w	r3, r1, r3
 8014192:	4413      	add	r3, r2
 8014194:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014198:	2200      	movs	r2, #0
 801419a:	701a      	strb	r2, [r3, #0]
				break;
 801419c:	e10b      	b.n	80143b6 <readCanToStructs+0x2702>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 801419e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80141a2:	4a69      	ldr	r2, [pc, #420]	; (8014348 <readCanToStructs+0x2694>)
 80141a4:	f240 4116 	movw	r1, #1046	; 0x416
 80141a8:	fb01 f303 	mul.w	r3, r1, r3
 80141ac:	4413      	add	r3, r2
 80141ae:	f203 4312 	addw	r3, r3, #1042	; 0x412
 80141b2:	2201      	movs	r2, #1
 80141b4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 80141b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80141ba:	4963      	ldr	r1, [pc, #396]	; (8014348 <readCanToStructs+0x2694>)
 80141bc:	f240 4216 	movw	r2, #1046	; 0x416
 80141c0:	fb03 f202 	mul.w	r2, r3, r2
 80141c4:	440a      	add	r2, r1
 80141c6:	f202 4213 	addw	r2, r2, #1043	; 0x413
 80141ca:	7812      	ldrb	r2, [r2, #0]
 80141cc:	3201      	adds	r2, #1
 80141ce:	b2d0      	uxtb	r0, r2
 80141d0:	4a5d      	ldr	r2, [pc, #372]	; (8014348 <readCanToStructs+0x2694>)
 80141d2:	f240 4116 	movw	r1, #1046	; 0x416
 80141d6:	fb01 f303 	mul.w	r3, r1, r3
 80141da:	4413      	add	r3, r2
 80141dc:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80141e0:	4602      	mov	r2, r0
 80141e2:	701a      	strb	r2, [r3, #0]
				break;
 80141e4:	e0e7      	b.n	80143b6 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 80141e6:	4b56      	ldr	r3, [pc, #344]	; (8014340 <readCanToStructs+0x268c>)
 80141e8:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80141ea:	4b56      	ldr	r3, [pc, #344]	; (8014344 <readCanToStructs+0x2690>)
 80141ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80141f0:	885b      	ldrh	r3, [r3, #2]
 80141f2:	4a54      	ldr	r2, [pc, #336]	; (8014344 <readCanToStructs+0x2690>)
 80141f4:	011b      	lsls	r3, r3, #4
 80141f6:	4413      	add	r3, r2
 80141f8:	3304      	adds	r3, #4
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8014200:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014204:	2b00      	cmp	r3, #0
 8014206:	d110      	bne.n	801422a <readCanToStructs+0x2576>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014208:	2202      	movs	r2, #2
 801420a:	2100      	movs	r1, #0
 801420c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801420e:	f012 fc05 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8014212:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014216:	4a4c      	ldr	r2, [pc, #304]	; (8014348 <readCanToStructs+0x2694>)
 8014218:	f240 4116 	movw	r1, #1046	; 0x416
 801421c:	fb01 f303 	mul.w	r3, r1, r3
 8014220:	4413      	add	r3, r2
 8014222:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014226:	2200      	movs	r2, #0
 8014228:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 801422a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801422e:	4a46      	ldr	r2, [pc, #280]	; (8014348 <readCanToStructs+0x2694>)
 8014230:	f240 4116 	movw	r1, #1046	; 0x416
 8014234:	fb01 f303 	mul.w	r3, r1, r3
 8014238:	4413      	add	r3, r2
 801423a:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801423e:	781b      	ldrb	r3, [r3, #0]
 8014240:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014244:	429a      	cmp	r2, r3
 8014246:	d014      	beq.n	8014272 <readCanToStructs+0x25be>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8014248:	4844      	ldr	r0, [pc, #272]	; (801435c <readCanToStructs+0x26a8>)
 801424a:	f012 fd6b 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801424e:	2202      	movs	r2, #2
 8014250:	2100      	movs	r1, #0
 8014252:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014254:	f012 fbe2 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8014258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801425c:	4a3a      	ldr	r2, [pc, #232]	; (8014348 <readCanToStructs+0x2694>)
 801425e:	f240 4116 	movw	r1, #1046	; 0x416
 8014262:	fb01 f303 	mul.w	r3, r1, r3
 8014266:	4413      	add	r3, r2
 8014268:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801426c:	2200      	movs	r2, #0
 801426e:	701a      	strb	r2, [r3, #0]
					break;
 8014270:	e0a1      	b.n	80143b6 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014272:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014276:	4613      	mov	r3, r2
 8014278:	00db      	lsls	r3, r3, #3
 801427a:	1a9b      	subs	r3, r3, r2
 801427c:	461a      	mov	r2, r3
 801427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014280:	4413      	add	r3, r2
 8014282:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014284:	2301      	movs	r3, #1
 8014286:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801428a:	e016      	b.n	80142ba <readCanToStructs+0x2606>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801428c:	4b2d      	ldr	r3, [pc, #180]	; (8014344 <readCanToStructs+0x2690>)
 801428e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014292:	885b      	ldrh	r3, [r3, #2]
 8014294:	461a      	mov	r2, r3
 8014296:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801429a:	492a      	ldr	r1, [pc, #168]	; (8014344 <readCanToStructs+0x2690>)
 801429c:	0112      	lsls	r2, r2, #4
 801429e:	440a      	add	r2, r1
 80142a0:	4413      	add	r3, r2
 80142a2:	3304      	adds	r3, #4
 80142a4:	781a      	ldrb	r2, [r3, #0]
 80142a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80142aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ac:	3301      	adds	r3, #1
 80142ae:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80142b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80142b4:	3301      	adds	r3, #1
 80142b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80142ba:	4b22      	ldr	r3, [pc, #136]	; (8014344 <readCanToStructs+0x2690>)
 80142bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80142c0:	885b      	ldrh	r3, [r3, #2]
 80142c2:	4a20      	ldr	r2, [pc, #128]	; (8014344 <readCanToStructs+0x2690>)
 80142c4:	011b      	lsls	r3, r3, #4
 80142c6:	4413      	add	r3, r2
 80142c8:	330c      	adds	r3, #12
 80142ca:	781b      	ldrb	r3, [r3, #0]
 80142cc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80142d0:	429a      	cmp	r2, r3
 80142d2:	d3db      	bcc.n	801428c <readCanToStructs+0x25d8>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 80142d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142d8:	4a1b      	ldr	r2, [pc, #108]	; (8014348 <readCanToStructs+0x2694>)
 80142da:	f240 4116 	movw	r1, #1046	; 0x416
 80142de:	fb01 f303 	mul.w	r3, r1, r3
 80142e2:	4413      	add	r3, r2
 80142e4:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80142e8:	781b      	ldrb	r3, [r3, #0]
 80142ea:	461a      	mov	r2, r3
 80142ec:	4613      	mov	r3, r2
 80142ee:	00db      	lsls	r3, r3, #3
 80142f0:	1a9a      	subs	r2, r3, r2
 80142f2:	4b14      	ldr	r3, [pc, #80]	; (8014344 <readCanToStructs+0x2690>)
 80142f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80142f8:	885b      	ldrh	r3, [r3, #2]
 80142fa:	4912      	ldr	r1, [pc, #72]	; (8014344 <readCanToStructs+0x2690>)
 80142fc:	011b      	lsls	r3, r3, #4
 80142fe:	440b      	add	r3, r1
 8014300:	330c      	adds	r3, #12
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	3b01      	subs	r3, #1
 8014306:	4413      	add	r3, r2
 8014308:	2b01      	cmp	r3, #1
 801430a:	d92b      	bls.n	8014364 <readCanToStructs+0x26b0>
					if(Debug_flag == 1)
 801430c:	4b10      	ldr	r3, [pc, #64]	; (8014350 <readCanToStructs+0x269c>)
 801430e:	781b      	ldrb	r3, [r3, #0]
 8014310:	2b01      	cmp	r3, #1
 8014312:	d105      	bne.n	8014320 <readCanToStructs+0x266c>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8014314:	4b0a      	ldr	r3, [pc, #40]	; (8014340 <readCanToStructs+0x268c>)
 8014316:	881b      	ldrh	r3, [r3, #0]
 8014318:	4619      	mov	r1, r3
 801431a:	4811      	ldr	r0, [pc, #68]	; (8014360 <readCanToStructs+0x26ac>)
 801431c:	f012 fc66 	bl	8026bec <iprintf>
					Is_CAN_Exchange_happening = YES;
 8014320:	4b0d      	ldr	r3, [pc, #52]	; (8014358 <readCanToStructs+0x26a4>)
 8014322:	2201      	movs	r2, #1
 8014324:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8014326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801432a:	4a07      	ldr	r2, [pc, #28]	; (8014348 <readCanToStructs+0x2694>)
 801432c:	f240 4116 	movw	r1, #1046	; 0x416
 8014330:	fb01 f303 	mul.w	r3, r1, r3
 8014334:	4413      	add	r3, r2
 8014336:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801433a:	2200      	movs	r2, #0
 801433c:	701a      	strb	r2, [r3, #0]
				break;
 801433e:	e03a      	b.n	80143b6 <readCanToStructs+0x2702>
 8014340:	20000bb8 	.word	0x20000bb8
 8014344:	20007264 	.word	0x20007264
 8014348:	20006a38 	.word	0x20006a38
 801434c:	0802b89c 	.word	0x0802b89c
 8014350:	20000bbb 	.word	0x20000bbb
 8014354:	0802b8c4 	.word	0x0802b8c4
 8014358:	2000030b 	.word	0x2000030b
 801435c:	0802b8d8 	.word	0x0802b8d8
 8014360:	0802b900 	.word	0x0802b900
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 8014364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014368:	4ab4      	ldr	r2, [pc, #720]	; (801463c <readCanToStructs+0x2988>)
 801436a:	f240 4116 	movw	r1, #1046	; 0x416
 801436e:	fb01 f303 	mul.w	r3, r1, r3
 8014372:	4413      	add	r3, r2
 8014374:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8014378:	2201      	movs	r2, #1
 801437a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 801437c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014380:	49ae      	ldr	r1, [pc, #696]	; (801463c <readCanToStructs+0x2988>)
 8014382:	f240 4216 	movw	r2, #1046	; 0x416
 8014386:	fb03 f202 	mul.w	r2, r3, r2
 801438a:	440a      	add	r2, r1
 801438c:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8014390:	7812      	ldrb	r2, [r2, #0]
 8014392:	3201      	adds	r2, #1
 8014394:	b2d0      	uxtb	r0, r2
 8014396:	4aa9      	ldr	r2, [pc, #676]	; (801463c <readCanToStructs+0x2988>)
 8014398:	f240 4116 	movw	r1, #1046	; 0x416
 801439c:	fb01 f303 	mul.w	r3, r1, r3
 80143a0:	4413      	add	r3, r2
 80143a2:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80143a6:	4602      	mov	r2, r0
 80143a8:	701a      	strb	r2, [r3, #0]
				break;
 80143aa:	e004      	b.n	80143b6 <readCanToStructs+0x2702>
				break;
 80143ac:	bf00      	nop
 80143ae:	e002      	b.n	80143b6 <readCanToStructs+0x2702>
				break;
 80143b0:	bf00      	nop
 80143b2:	e000      	b.n	80143b6 <readCanToStructs+0x2702>
				break;
 80143b4:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 80143b6:	4ba2      	ldr	r3, [pc, #648]	; (8014640 <readCanToStructs+0x298c>)
 80143b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80143bc:	885b      	ldrh	r3, [r3, #2]
 80143be:	011b      	lsls	r3, r3, #4
 80143c0:	4a9f      	ldr	r2, [pc, #636]	; (8014640 <readCanToStructs+0x298c>)
 80143c2:	4413      	add	r3, r2
 80143c4:	2210      	movs	r2, #16
 80143c6:	2100      	movs	r1, #0
 80143c8:	4618      	mov	r0, r3
 80143ca:	f012 fb27 	bl	8026a1c <memset>
			canRead.Out++;
 80143ce:	4b9c      	ldr	r3, [pc, #624]	; (8014640 <readCanToStructs+0x298c>)
 80143d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80143d4:	885b      	ldrh	r3, [r3, #2]
 80143d6:	3301      	adds	r3, #1
 80143d8:	b29a      	uxth	r2, r3
 80143da:	4b99      	ldr	r3, [pc, #612]	; (8014640 <readCanToStructs+0x298c>)
 80143dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80143e0:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 80143e2:	4b97      	ldr	r3, [pc, #604]	; (8014640 <readCanToStructs+0x298c>)
 80143e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80143e8:	885b      	ldrh	r3, [r3, #2]
 80143ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80143ee:	d104      	bne.n	80143fa <readCanToStructs+0x2746>
			{
				canRead.Out = 0;
 80143f0:	4b93      	ldr	r3, [pc, #588]	; (8014640 <readCanToStructs+0x298c>)
 80143f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80143f6:	2200      	movs	r2, #0
 80143f8:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 80143fa:	f7fd fc05 	bl	8011c08 <canDataReady>
 80143fe:	4603      	mov	r3, r0
 8014400:	2b00      	cmp	r3, #0
 8014402:	f47e af7c 	bne.w	80132fe <readCanToStructs+0x164a>
			}

		}
		/* __________ SIEMENS _________ */
	}
	break;
 8014406:	f001 bd43 	b.w	8015e90 <readCanToStructs+0x41dc>
	case MEDHA:
	{
		/* __________ MEDHA _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 801440a:	4b8d      	ldr	r3, [pc, #564]	; (8014640 <readCanToStructs+0x298c>)
 801440c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014410:	885b      	ldrh	r3, [r3, #2]
 8014412:	4a8b      	ldr	r2, [pc, #556]	; (8014640 <readCanToStructs+0x298c>)
 8014414:	011b      	lsls	r3, r3, #4
 8014416:	4413      	add	r3, r2
 8014418:	330f      	adds	r3, #15
 801441a:	781b      	ldrb	r3, [r3, #0]
 801441c:	3b01      	subs	r3, #1
 801441e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8014422:	4b87      	ldr	r3, [pc, #540]	; (8014640 <readCanToStructs+0x298c>)
 8014424:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014428:	885b      	ldrh	r3, [r3, #2]
 801442a:	4a85      	ldr	r2, [pc, #532]	; (8014640 <readCanToStructs+0x298c>)
 801442c:	011b      	lsls	r3, r3, #4
 801442e:	4413      	add	r3, r2
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	f240 220a 	movw	r2, #522	; 0x20a
 8014436:	4293      	cmp	r3, r2
 8014438:	f201 8023 	bhi.w	8015482 <readCanToStructs+0x37ce>
 801443c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014440:	d80a      	bhi.n	8014458 <readCanToStructs+0x27a4>
 8014442:	f240 1203 	movw	r2, #259	; 0x103
 8014446:	4293      	cmp	r3, r2
 8014448:	d022      	beq.n	8014490 <readCanToStructs+0x27dc>
 801444a:	f240 1209 	movw	r2, #265	; 0x109
 801444e:	4293      	cmp	r3, r2
 8014450:	f000 8102 	beq.w	8014658 <readCanToStructs+0x29a4>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 8014454:	f001 b815 	b.w	8015482 <readCanToStructs+0x37ce>
 8014458:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 801445c:	2b09      	cmp	r3, #9
 801445e:	f201 8010 	bhi.w	8015482 <readCanToStructs+0x37ce>
 8014462:	a201      	add	r2, pc, #4	; (adr r2, 8014468 <readCanToStructs+0x27b4>)
 8014464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014468:	08014805 	.word	0x08014805
 801446c:	08014a09 	.word	0x08014a09
 8014470:	08015483 	.word	0x08015483
 8014474:	08015483 	.word	0x08015483
 8014478:	08014c11 	.word	0x08014c11
 801447c:	08015483 	.word	0x08015483
 8014480:	08014da3 	.word	0x08014da3
 8014484:	08014f71 	.word	0x08014f71
 8014488:	08015117 	.word	0x08015117
 801448c:	080152e1 	.word	0x080152e1
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8014490:	4b6c      	ldr	r3, [pc, #432]	; (8014644 <readCanToStructs+0x2990>)
 8014492:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014494:	4b6a      	ldr	r3, [pc, #424]	; (8014640 <readCanToStructs+0x298c>)
 8014496:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801449a:	885b      	ldrh	r3, [r3, #2]
 801449c:	4a68      	ldr	r2, [pc, #416]	; (8014640 <readCanToStructs+0x298c>)
 801449e:	011b      	lsls	r3, r3, #4
 80144a0:	4413      	add	r3, r2
 80144a2:	3304      	adds	r3, #4
 80144a4:	781b      	ldrb	r3, [r3, #0]
 80144a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80144aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d110      	bne.n	80144d4 <readCanToStructs+0x2820>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80144b2:	2206      	movs	r2, #6
 80144b4:	2100      	movs	r1, #0
 80144b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144b8:	f012 fab0 	bl	8026a1c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80144bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144c0:	4a5e      	ldr	r2, [pc, #376]	; (801463c <readCanToStructs+0x2988>)
 80144c2:	f240 4116 	movw	r1, #1046	; 0x416
 80144c6:	fb01 f303 	mul.w	r3, r1, r3
 80144ca:	4413      	add	r3, r2
 80144cc:	f203 2307 	addw	r3, r3, #519	; 0x207
 80144d0:	2200      	movs	r2, #0
 80144d2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 80144d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144d8:	4a58      	ldr	r2, [pc, #352]	; (801463c <readCanToStructs+0x2988>)
 80144da:	f240 4116 	movw	r1, #1046	; 0x416
 80144de:	fb01 f303 	mul.w	r3, r1, r3
 80144e2:	4413      	add	r3, r2
 80144e4:	f203 2307 	addw	r3, r3, #519	; 0x207
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d015      	beq.n	801451e <readCanToStructs+0x286a>
					printf("GPS Packet Seq no MisMatch\n");
 80144f2:	4855      	ldr	r0, [pc, #340]	; (8014648 <readCanToStructs+0x2994>)
 80144f4:	f012 fc16 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80144f8:	2206      	movs	r2, #6
 80144fa:	2100      	movs	r1, #0
 80144fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144fe:	f012 fa8d 	bl	8026a1c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8014502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014506:	4a4d      	ldr	r2, [pc, #308]	; (801463c <readCanToStructs+0x2988>)
 8014508:	f240 4116 	movw	r1, #1046	; 0x416
 801450c:	fb01 f303 	mul.w	r3, r1, r3
 8014510:	4413      	add	r3, r2
 8014512:	f203 2307 	addw	r3, r3, #519	; 0x207
 8014516:	2200      	movs	r2, #0
 8014518:	701a      	strb	r2, [r3, #0]
					break;
 801451a:	f000 bfb3 	b.w	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 801451e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014522:	4613      	mov	r3, r2
 8014524:	00db      	lsls	r3, r3, #3
 8014526:	1a9b      	subs	r3, r3, r2
 8014528:	461a      	mov	r2, r3
 801452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801452c:	4413      	add	r3, r2
 801452e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014530:	2301      	movs	r3, #1
 8014532:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014536:	e016      	b.n	8014566 <readCanToStructs+0x28b2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014538:	4b41      	ldr	r3, [pc, #260]	; (8014640 <readCanToStructs+0x298c>)
 801453a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801453e:	885b      	ldrh	r3, [r3, #2]
 8014540:	461a      	mov	r2, r3
 8014542:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014546:	493e      	ldr	r1, [pc, #248]	; (8014640 <readCanToStructs+0x298c>)
 8014548:	0112      	lsls	r2, r2, #4
 801454a:	440a      	add	r2, r1
 801454c:	4413      	add	r3, r2
 801454e:	3304      	adds	r3, #4
 8014550:	781a      	ldrb	r2, [r3, #0]
 8014552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014554:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014558:	3301      	adds	r3, #1
 801455a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801455c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014560:	3301      	adds	r3, #1
 8014562:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014566:	4b36      	ldr	r3, [pc, #216]	; (8014640 <readCanToStructs+0x298c>)
 8014568:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801456c:	885b      	ldrh	r3, [r3, #2]
 801456e:	4a34      	ldr	r2, [pc, #208]	; (8014640 <readCanToStructs+0x298c>)
 8014570:	011b      	lsls	r3, r3, #4
 8014572:	4413      	add	r3, r2
 8014574:	330c      	adds	r3, #12
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801457c:	429a      	cmp	r2, r3
 801457e:	d3db      	bcc.n	8014538 <readCanToStructs+0x2884>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8014580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014584:	4a2d      	ldr	r2, [pc, #180]	; (801463c <readCanToStructs+0x2988>)
 8014586:	f240 4116 	movw	r1, #1046	; 0x416
 801458a:	fb01 f303 	mul.w	r3, r1, r3
 801458e:	4413      	add	r3, r2
 8014590:	f203 2307 	addw	r3, r3, #519	; 0x207
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	461a      	mov	r2, r3
 8014598:	4613      	mov	r3, r2
 801459a:	00db      	lsls	r3, r3, #3
 801459c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801459e:	4b28      	ldr	r3, [pc, #160]	; (8014640 <readCanToStructs+0x298c>)
 80145a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80145a4:	885b      	ldrh	r3, [r3, #2]
 80145a6:	4926      	ldr	r1, [pc, #152]	; (8014640 <readCanToStructs+0x298c>)
 80145a8:	011b      	lsls	r3, r3, #4
 80145aa:	440b      	add	r3, r1
 80145ac:	330c      	adds	r3, #12
 80145ae:	781b      	ldrb	r3, [r3, #0]
 80145b0:	3b01      	subs	r3, #1
 80145b2:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80145b4:	2b05      	cmp	r3, #5
 80145b6:	d91c      	bls.n	80145f2 <readCanToStructs+0x293e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80145b8:	4b24      	ldr	r3, [pc, #144]	; (801464c <readCanToStructs+0x2998>)
 80145ba:	4a22      	ldr	r2, [pc, #136]	; (8014644 <readCanToStructs+0x2990>)
 80145bc:	6811      	ldr	r1, [r2, #0]
 80145be:	6019      	str	r1, [r3, #0]
 80145c0:	8892      	ldrh	r2, [r2, #4]
 80145c2:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80145c4:	4b22      	ldr	r3, [pc, #136]	; (8014650 <readCanToStructs+0x299c>)
 80145c6:	781b      	ldrb	r3, [r3, #0]
 80145c8:	2b01      	cmp	r3, #1
 80145ca:	d102      	bne.n	80145d2 <readCanToStructs+0x291e>
						printf("GPS_PACKET_RECEIVED\n");
 80145cc:	4821      	ldr	r0, [pc, #132]	; (8014654 <readCanToStructs+0x29a0>)
 80145ce:	f012 fba9 	bl	8026d24 <puts>
					Write_RTC();
 80145d2:	f7f8 f9ad 	bl	800c930 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80145d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145da:	4a18      	ldr	r2, [pc, #96]	; (801463c <readCanToStructs+0x2988>)
 80145dc:	f240 4116 	movw	r1, #1046	; 0x416
 80145e0:	fb01 f303 	mul.w	r3, r1, r3
 80145e4:	4413      	add	r3, r2
 80145e6:	f203 2307 	addw	r3, r3, #519	; 0x207
 80145ea:	2200      	movs	r2, #0
 80145ec:	701a      	strb	r2, [r3, #0]
				break;
 80145ee:	f000 bf49 	b.w	8015484 <readCanToStructs+0x37d0>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 80145f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145f6:	4a11      	ldr	r2, [pc, #68]	; (801463c <readCanToStructs+0x2988>)
 80145f8:	f240 4116 	movw	r1, #1046	; 0x416
 80145fc:	fb01 f303 	mul.w	r3, r1, r3
 8014600:	4413      	add	r3, r2
 8014602:	f203 2306 	addw	r3, r3, #518	; 0x206
 8014606:	2201      	movs	r2, #1
 8014608:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 801460a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801460e:	490b      	ldr	r1, [pc, #44]	; (801463c <readCanToStructs+0x2988>)
 8014610:	f240 4216 	movw	r2, #1046	; 0x416
 8014614:	fb03 f202 	mul.w	r2, r3, r2
 8014618:	440a      	add	r2, r1
 801461a:	f202 2207 	addw	r2, r2, #519	; 0x207
 801461e:	7812      	ldrb	r2, [r2, #0]
 8014620:	3201      	adds	r2, #1
 8014622:	b2d0      	uxtb	r0, r2
 8014624:	4a05      	ldr	r2, [pc, #20]	; (801463c <readCanToStructs+0x2988>)
 8014626:	f240 4116 	movw	r1, #1046	; 0x416
 801462a:	fb01 f303 	mul.w	r3, r1, r3
 801462e:	4413      	add	r3, r2
 8014630:	f203 2307 	addw	r3, r3, #519	; 0x207
 8014634:	4602      	mov	r2, r0
 8014636:	701a      	strb	r2, [r3, #0]
				break;
 8014638:	f000 bf24 	b.w	8015484 <readCanToStructs+0x37d0>
 801463c:	20006a38 	.word	0x20006a38
 8014640:	20007264 	.word	0x20007264
 8014644:	20003fd4 	.word	0x20003fd4
 8014648:	0802b6c4 	.word	0x0802b6c4
 801464c:	20003fcc 	.word	0x20003fcc
 8014650:	20000bbb 	.word	0x20000bbb
 8014654:	0802b6e0 	.word	0x0802b6e0
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8014658:	4b9d      	ldr	r3, [pc, #628]	; (80148d0 <readCanToStructs+0x2c1c>)
 801465a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801465c:	4b9d      	ldr	r3, [pc, #628]	; (80148d4 <readCanToStructs+0x2c20>)
 801465e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014662:	885b      	ldrh	r3, [r3, #2]
 8014664:	4a9b      	ldr	r2, [pc, #620]	; (80148d4 <readCanToStructs+0x2c20>)
 8014666:	011b      	lsls	r3, r3, #4
 8014668:	4413      	add	r3, r2
 801466a:	3304      	adds	r3, #4
 801466c:	781b      	ldrb	r3, [r3, #0]
 801466e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8014672:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014676:	2b00      	cmp	r3, #0
 8014678:	d110      	bne.n	801469c <readCanToStructs+0x29e8>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801467a:	2206      	movs	r2, #6
 801467c:	2100      	movs	r1, #0
 801467e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014680:	f012 f9cc 	bl	8026a1c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8014684:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014688:	4a93      	ldr	r2, [pc, #588]	; (80148d8 <readCanToStructs+0x2c24>)
 801468a:	f240 4116 	movw	r1, #1046	; 0x416
 801468e:	fb01 f303 	mul.w	r3, r1, r3
 8014692:	4413      	add	r3, r2
 8014694:	f203 2313 	addw	r3, r3, #531	; 0x213
 8014698:	2200      	movs	r2, #0
 801469a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 801469c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146a0:	4a8d      	ldr	r2, [pc, #564]	; (80148d8 <readCanToStructs+0x2c24>)
 80146a2:	f240 4116 	movw	r1, #1046	; 0x416
 80146a6:	fb01 f303 	mul.w	r3, r1, r3
 80146aa:	4413      	add	r3, r2
 80146ac:	f203 2313 	addw	r3, r3, #531	; 0x213
 80146b0:	781b      	ldrb	r3, [r3, #0]
 80146b2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80146b6:	429a      	cmp	r2, r3
 80146b8:	d015      	beq.n	80146e6 <readCanToStructs+0x2a32>
					printf("GPS2 Packet Seq no MisMatch\n");
 80146ba:	4888      	ldr	r0, [pc, #544]	; (80148dc <readCanToStructs+0x2c28>)
 80146bc:	f012 fb32 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80146c0:	2206      	movs	r2, #6
 80146c2:	2100      	movs	r1, #0
 80146c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146c6:	f012 f9a9 	bl	8026a1c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80146ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146ce:	4a82      	ldr	r2, [pc, #520]	; (80148d8 <readCanToStructs+0x2c24>)
 80146d0:	f240 4116 	movw	r1, #1046	; 0x416
 80146d4:	fb01 f303 	mul.w	r3, r1, r3
 80146d8:	4413      	add	r3, r2
 80146da:	f203 2313 	addw	r3, r3, #531	; 0x213
 80146de:	2200      	movs	r2, #0
 80146e0:	701a      	strb	r2, [r3, #0]
					break;
 80146e2:	f000 becf 	b.w	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 80146e6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80146ea:	4613      	mov	r3, r2
 80146ec:	00db      	lsls	r3, r3, #3
 80146ee:	1a9b      	subs	r3, r3, r2
 80146f0:	461a      	mov	r2, r3
 80146f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f4:	4413      	add	r3, r2
 80146f6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80146f8:	2301      	movs	r3, #1
 80146fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80146fe:	e016      	b.n	801472e <readCanToStructs+0x2a7a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014700:	4b74      	ldr	r3, [pc, #464]	; (80148d4 <readCanToStructs+0x2c20>)
 8014702:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014706:	885b      	ldrh	r3, [r3, #2]
 8014708:	461a      	mov	r2, r3
 801470a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801470e:	4971      	ldr	r1, [pc, #452]	; (80148d4 <readCanToStructs+0x2c20>)
 8014710:	0112      	lsls	r2, r2, #4
 8014712:	440a      	add	r2, r1
 8014714:	4413      	add	r3, r2
 8014716:	3304      	adds	r3, #4
 8014718:	781a      	ldrb	r2, [r3, #0]
 801471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801471c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014720:	3301      	adds	r3, #1
 8014722:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014724:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014728:	3301      	adds	r3, #1
 801472a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801472e:	4b69      	ldr	r3, [pc, #420]	; (80148d4 <readCanToStructs+0x2c20>)
 8014730:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014734:	885b      	ldrh	r3, [r3, #2]
 8014736:	4a67      	ldr	r2, [pc, #412]	; (80148d4 <readCanToStructs+0x2c20>)
 8014738:	011b      	lsls	r3, r3, #4
 801473a:	4413      	add	r3, r2
 801473c:	330c      	adds	r3, #12
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014744:	429a      	cmp	r2, r3
 8014746:	d3db      	bcc.n	8014700 <readCanToStructs+0x2a4c>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8014748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801474c:	4a62      	ldr	r2, [pc, #392]	; (80148d8 <readCanToStructs+0x2c24>)
 801474e:	f240 4116 	movw	r1, #1046	; 0x416
 8014752:	fb01 f303 	mul.w	r3, r1, r3
 8014756:	4413      	add	r3, r2
 8014758:	f203 2313 	addw	r3, r3, #531	; 0x213
 801475c:	781b      	ldrb	r3, [r3, #0]
 801475e:	461a      	mov	r2, r3
 8014760:	4613      	mov	r3, r2
 8014762:	00db      	lsls	r3, r3, #3
 8014764:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8014766:	4b5b      	ldr	r3, [pc, #364]	; (80148d4 <readCanToStructs+0x2c20>)
 8014768:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801476c:	885b      	ldrh	r3, [r3, #2]
 801476e:	4959      	ldr	r1, [pc, #356]	; (80148d4 <readCanToStructs+0x2c20>)
 8014770:	011b      	lsls	r3, r3, #4
 8014772:	440b      	add	r3, r1
 8014774:	330c      	adds	r3, #12
 8014776:	781b      	ldrb	r3, [r3, #0]
 8014778:	3b01      	subs	r3, #1
 801477a:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 801477c:	2b05      	cmp	r3, #5
 801477e:	d91c      	bls.n	80147ba <readCanToStructs+0x2b06>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8014780:	4b57      	ldr	r3, [pc, #348]	; (80148e0 <readCanToStructs+0x2c2c>)
 8014782:	4a53      	ldr	r2, [pc, #332]	; (80148d0 <readCanToStructs+0x2c1c>)
 8014784:	6811      	ldr	r1, [r2, #0]
 8014786:	6019      	str	r1, [r3, #0]
 8014788:	8892      	ldrh	r2, [r2, #4]
 801478a:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 801478c:	4b55      	ldr	r3, [pc, #340]	; (80148e4 <readCanToStructs+0x2c30>)
 801478e:	781b      	ldrb	r3, [r3, #0]
 8014790:	2b01      	cmp	r3, #1
 8014792:	d102      	bne.n	801479a <readCanToStructs+0x2ae6>
						printf("GPS2_PACKET_RECEIVED\n");
 8014794:	4854      	ldr	r0, [pc, #336]	; (80148e8 <readCanToStructs+0x2c34>)
 8014796:	f012 fac5 	bl	8026d24 <puts>
					Write_RTC();
 801479a:	f7f8 f8c9 	bl	800c930 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801479e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147a2:	4a4d      	ldr	r2, [pc, #308]	; (80148d8 <readCanToStructs+0x2c24>)
 80147a4:	f240 4116 	movw	r1, #1046	; 0x416
 80147a8:	fb01 f303 	mul.w	r3, r1, r3
 80147ac:	4413      	add	r3, r2
 80147ae:	f203 2313 	addw	r3, r3, #531	; 0x213
 80147b2:	2200      	movs	r2, #0
 80147b4:	701a      	strb	r2, [r3, #0]
				break;
 80147b6:	f000 be65 	b.w	8015484 <readCanToStructs+0x37d0>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80147ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147be:	4a46      	ldr	r2, [pc, #280]	; (80148d8 <readCanToStructs+0x2c24>)
 80147c0:	f240 4116 	movw	r1, #1046	; 0x416
 80147c4:	fb01 f303 	mul.w	r3, r1, r3
 80147c8:	4413      	add	r3, r2
 80147ca:	f203 2312 	addw	r3, r3, #530	; 0x212
 80147ce:	2201      	movs	r2, #1
 80147d0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 80147d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147d6:	4940      	ldr	r1, [pc, #256]	; (80148d8 <readCanToStructs+0x2c24>)
 80147d8:	f240 4216 	movw	r2, #1046	; 0x416
 80147dc:	fb03 f202 	mul.w	r2, r3, r2
 80147e0:	440a      	add	r2, r1
 80147e2:	f202 2213 	addw	r2, r2, #531	; 0x213
 80147e6:	7812      	ldrb	r2, [r2, #0]
 80147e8:	3201      	adds	r2, #1
 80147ea:	b2d0      	uxtb	r0, r2
 80147ec:	4a3a      	ldr	r2, [pc, #232]	; (80148d8 <readCanToStructs+0x2c24>)
 80147ee:	f240 4116 	movw	r1, #1046	; 0x416
 80147f2:	fb01 f303 	mul.w	r3, r1, r3
 80147f6:	4413      	add	r3, r2
 80147f8:	f203 2313 	addw	r3, r3, #531	; 0x213
 80147fc:	4602      	mov	r2, r0
 80147fe:	701a      	strb	r2, [r3, #0]
				break;
 8014800:	f000 be40 	b.w	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8014804:	4b39      	ldr	r3, [pc, #228]	; (80148ec <readCanToStructs+0x2c38>)
 8014806:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014808:	4b32      	ldr	r3, [pc, #200]	; (80148d4 <readCanToStructs+0x2c20>)
 801480a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801480e:	885b      	ldrh	r3, [r3, #2]
 8014810:	4a30      	ldr	r2, [pc, #192]	; (80148d4 <readCanToStructs+0x2c20>)
 8014812:	011b      	lsls	r3, r3, #4
 8014814:	4413      	add	r3, r2
 8014816:	3304      	adds	r3, #4
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801481e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014822:	2b00      	cmp	r3, #0
 8014824:	d110      	bne.n	8014848 <readCanToStructs+0x2b94>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8014826:	2208      	movs	r2, #8
 8014828:	2100      	movs	r1, #0
 801482a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801482c:	f012 f8f6 	bl	8026a1c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8014830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014834:	4a28      	ldr	r2, [pc, #160]	; (80148d8 <readCanToStructs+0x2c24>)
 8014836:	f240 4116 	movw	r1, #1046	; 0x416
 801483a:	fb01 f303 	mul.w	r3, r1, r3
 801483e:	4413      	add	r3, r2
 8014840:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8014844:	2200      	movs	r2, #0
 8014846:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8014848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801484c:	4a22      	ldr	r2, [pc, #136]	; (80148d8 <readCanToStructs+0x2c24>)
 801484e:	f240 4116 	movw	r1, #1046	; 0x416
 8014852:	fb01 f303 	mul.w	r3, r1, r3
 8014856:	4413      	add	r3, r2
 8014858:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014862:	429a      	cmp	r2, r3
 8014864:	d026      	beq.n	80148b4 <readCanToStructs+0x2c00>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 8014866:	4822      	ldr	r0, [pc, #136]	; (80148f0 <readCanToStructs+0x2c3c>)
 8014868:	f012 fa5c 	bl	8026d24 <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo);
 801486c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8014870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014874:	4a18      	ldr	r2, [pc, #96]	; (80148d8 <readCanToStructs+0x2c24>)
 8014876:	f240 4016 	movw	r0, #1046	; 0x416
 801487a:	fb00 f303 	mul.w	r3, r0, r3
 801487e:	4413      	add	r3, r2
 8014880:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	461a      	mov	r2, r3
 8014888:	481a      	ldr	r0, [pc, #104]	; (80148f4 <readCanToStructs+0x2c40>)
 801488a:	f012 f9af 	bl	8026bec <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 801488e:	2208      	movs	r2, #8
 8014890:	2100      	movs	r1, #0
 8014892:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014894:	f012 f8c2 	bl	8026a1c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8014898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801489c:	4a0e      	ldr	r2, [pc, #56]	; (80148d8 <readCanToStructs+0x2c24>)
 801489e:	f240 4116 	movw	r1, #1046	; 0x416
 80148a2:	fb01 f303 	mul.w	r3, r1, r3
 80148a6:	4413      	add	r3, r2
 80148a8:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80148ac:	2200      	movs	r2, #0
 80148ae:	701a      	strb	r2, [r3, #0]
					break;
 80148b0:	f000 bde8 	b.w	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 80148b4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80148b8:	4613      	mov	r3, r2
 80148ba:	00db      	lsls	r3, r3, #3
 80148bc:	1a9b      	subs	r3, r3, r2
 80148be:	461a      	mov	r2, r3
 80148c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148c2:	4413      	add	r3, r2
 80148c4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80148c6:	2301      	movs	r3, #1
 80148c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80148cc:	e02b      	b.n	8014926 <readCanToStructs+0x2c72>
 80148ce:	bf00      	nop
 80148d0:	20003fd4 	.word	0x20003fd4
 80148d4:	20007264 	.word	0x20007264
 80148d8:	20006a38 	.word	0x20006a38
 80148dc:	0802b6f4 	.word	0x0802b6f4
 80148e0:	20003fcc 	.word	0x20003fcc
 80148e4:	20000bbb 	.word	0x20000bbb
 80148e8:	0802b710 	.word	0x0802b710
 80148ec:	20003e14 	.word	0x20003e14
 80148f0:	0802b9b4 	.word	0x0802b9b4
 80148f4:	0802b9dc 	.word	0x0802b9dc
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80148f8:	4bba      	ldr	r3, [pc, #744]	; (8014be4 <readCanToStructs+0x2f30>)
 80148fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80148fe:	885b      	ldrh	r3, [r3, #2]
 8014900:	461a      	mov	r2, r3
 8014902:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014906:	49b7      	ldr	r1, [pc, #732]	; (8014be4 <readCanToStructs+0x2f30>)
 8014908:	0112      	lsls	r2, r2, #4
 801490a:	440a      	add	r2, r1
 801490c:	4413      	add	r3, r2
 801490e:	3304      	adds	r3, #4
 8014910:	781a      	ldrb	r2, [r3, #0]
 8014912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014914:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014918:	3301      	adds	r3, #1
 801491a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801491c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014920:	3301      	adds	r3, #1
 8014922:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014926:	4baf      	ldr	r3, [pc, #700]	; (8014be4 <readCanToStructs+0x2f30>)
 8014928:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801492c:	885b      	ldrh	r3, [r3, #2]
 801492e:	4aad      	ldr	r2, [pc, #692]	; (8014be4 <readCanToStructs+0x2f30>)
 8014930:	011b      	lsls	r3, r3, #4
 8014932:	4413      	add	r3, r2
 8014934:	330c      	adds	r3, #12
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801493c:	429a      	cmp	r2, r3
 801493e:	d3db      	bcc.n	80148f8 <readCanToStructs+0x2c44>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8014940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014944:	4aa8      	ldr	r2, [pc, #672]	; (8014be8 <readCanToStructs+0x2f34>)
 8014946:	f240 4116 	movw	r1, #1046	; 0x416
 801494a:	fb01 f303 	mul.w	r3, r1, r3
 801494e:	4413      	add	r3, r2
 8014950:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8014954:	781b      	ldrb	r3, [r3, #0]
 8014956:	461a      	mov	r2, r3
 8014958:	4613      	mov	r3, r2
 801495a:	00db      	lsls	r3, r3, #3
 801495c:	1a9a      	subs	r2, r3, r2
 801495e:	4ba1      	ldr	r3, [pc, #644]	; (8014be4 <readCanToStructs+0x2f30>)
 8014960:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014964:	885b      	ldrh	r3, [r3, #2]
 8014966:	499f      	ldr	r1, [pc, #636]	; (8014be4 <readCanToStructs+0x2f30>)
 8014968:	011b      	lsls	r3, r3, #4
 801496a:	440b      	add	r3, r1
 801496c:	330c      	adds	r3, #12
 801496e:	781b      	ldrb	r3, [r3, #0]
 8014970:	3b01      	subs	r3, #1
 8014972:	4413      	add	r3, r2
 8014974:	2b07      	cmp	r3, #7
 8014976:	d922      	bls.n	80149be <readCanToStructs+0x2d0a>
					if(Debug_flag == 1)
 8014978:	4b9c      	ldr	r3, [pc, #624]	; (8014bec <readCanToStructs+0x2f38>)
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	2b01      	cmp	r3, #1
 801497e:	d102      	bne.n	8014986 <readCanToStructs+0x2cd2>
						printf("\nRCV OTH_INFO1\n");
 8014980:	489b      	ldr	r0, [pc, #620]	; (8014bf0 <readCanToStructs+0x2f3c>)
 8014982:	f012 f9cf 	bl	8026d24 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8014986:	4b9b      	ldr	r3, [pc, #620]	; (8014bf4 <readCanToStructs+0x2f40>)
 8014988:	4a9b      	ldr	r2, [pc, #620]	; (8014bf8 <readCanToStructs+0x2f44>)
 801498a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801498e:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 8014992:	4b9a      	ldr	r3, [pc, #616]	; (8014bfc <readCanToStructs+0x2f48>)
 8014994:	2201      	movs	r2, #1
 8014996:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8014998:	f005 f91e 	bl	8019bd8 <HAL_GetTick>
 801499c:	4603      	mov	r3, r0
 801499e:	4a98      	ldr	r2, [pc, #608]	; (8014c00 <readCanToStructs+0x2f4c>)
 80149a0:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80149a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149a6:	4a90      	ldr	r2, [pc, #576]	; (8014be8 <readCanToStructs+0x2f34>)
 80149a8:	f240 4116 	movw	r1, #1046	; 0x416
 80149ac:	fb01 f303 	mul.w	r3, r1, r3
 80149b0:	4413      	add	r3, r2
 80149b2:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80149b6:	2200      	movs	r2, #0
 80149b8:	701a      	strb	r2, [r3, #0]
				break;
 80149ba:	f000 bd63 	b.w	8015484 <readCanToStructs+0x37d0>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80149be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149c2:	4a89      	ldr	r2, [pc, #548]	; (8014be8 <readCanToStructs+0x2f34>)
 80149c4:	f240 4116 	movw	r1, #1046	; 0x416
 80149c8:	fb01 f303 	mul.w	r3, r1, r3
 80149cc:	4413      	add	r3, r2
 80149ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80149d2:	2201      	movs	r2, #1
 80149d4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80149d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149da:	4983      	ldr	r1, [pc, #524]	; (8014be8 <readCanToStructs+0x2f34>)
 80149dc:	f240 4216 	movw	r2, #1046	; 0x416
 80149e0:	fb03 f202 	mul.w	r2, r3, r2
 80149e4:	440a      	add	r2, r1
 80149e6:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80149ea:	7812      	ldrb	r2, [r2, #0]
 80149ec:	3201      	adds	r2, #1
 80149ee:	b2d0      	uxtb	r0, r2
 80149f0:	4a7d      	ldr	r2, [pc, #500]	; (8014be8 <readCanToStructs+0x2f34>)
 80149f2:	f240 4116 	movw	r1, #1046	; 0x416
 80149f6:	fb01 f303 	mul.w	r3, r1, r3
 80149fa:	4413      	add	r3, r2
 80149fc:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8014a00:	4602      	mov	r2, r0
 8014a02:	701a      	strb	r2, [r3, #0]
				break;
 8014a04:	f000 bd3e 	b.w	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8014a08:	4b7b      	ldr	r3, [pc, #492]	; (8014bf8 <readCanToStructs+0x2f44>)
 8014a0a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014a0c:	4b75      	ldr	r3, [pc, #468]	; (8014be4 <readCanToStructs+0x2f30>)
 8014a0e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014a12:	885b      	ldrh	r3, [r3, #2]
 8014a14:	4a73      	ldr	r2, [pc, #460]	; (8014be4 <readCanToStructs+0x2f30>)
 8014a16:	011b      	lsls	r3, r3, #4
 8014a18:	4413      	add	r3, r2
 8014a1a:	3304      	adds	r3, #4
 8014a1c:	781b      	ldrb	r3, [r3, #0]
 8014a1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8014a22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d110      	bne.n	8014a4c <readCanToStructs+0x2d98>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8014a2a:	2208      	movs	r2, #8
 8014a2c:	2100      	movs	r1, #0
 8014a2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014a30:	f011 fff4 	bl	8026a1c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8014a34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a38:	4a6b      	ldr	r2, [pc, #428]	; (8014be8 <readCanToStructs+0x2f34>)
 8014a3a:	f240 4116 	movw	r1, #1046	; 0x416
 8014a3e:	fb01 f303 	mul.w	r3, r1, r3
 8014a42:	4413      	add	r3, r2
 8014a44:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8014a48:	2200      	movs	r2, #0
 8014a4a:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8014a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a50:	4a65      	ldr	r2, [pc, #404]	; (8014be8 <readCanToStructs+0x2f34>)
 8014a52:	f240 4116 	movw	r1, #1046	; 0x416
 8014a56:	fb01 f303 	mul.w	r3, r1, r3
 8014a5a:	4413      	add	r3, r2
 8014a5c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014a66:	429a      	cmp	r2, r3
 8014a68:	d026      	beq.n	8014ab8 <readCanToStructs+0x2e04>
					printf("Seq No Mismatch for EI_2_SELF_SHARING\n");
 8014a6a:	4866      	ldr	r0, [pc, #408]	; (8014c04 <readCanToStructs+0x2f50>)
 8014a6c:	f012 f95a 	bl	8026d24 <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo);
 8014a70:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8014a74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a78:	4a5b      	ldr	r2, [pc, #364]	; (8014be8 <readCanToStructs+0x2f34>)
 8014a7a:	f240 4016 	movw	r0, #1046	; 0x416
 8014a7e:	fb00 f303 	mul.w	r3, r0, r3
 8014a82:	4413      	add	r3, r2
 8014a84:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8014a88:	781b      	ldrb	r3, [r3, #0]
 8014a8a:	461a      	mov	r2, r3
 8014a8c:	485e      	ldr	r0, [pc, #376]	; (8014c08 <readCanToStructs+0x2f54>)
 8014a8e:	f012 f8ad 	bl	8026bec <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8014a92:	2208      	movs	r2, #8
 8014a94:	2100      	movs	r1, #0
 8014a96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014a98:	f011 ffc0 	bl	8026a1c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8014a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014aa0:	4a51      	ldr	r2, [pc, #324]	; (8014be8 <readCanToStructs+0x2f34>)
 8014aa2:	f240 4116 	movw	r1, #1046	; 0x416
 8014aa6:	fb01 f303 	mul.w	r3, r1, r3
 8014aaa:	4413      	add	r3, r2
 8014aac:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	701a      	strb	r2, [r3, #0]
					break;
 8014ab4:	f000 bce6 	b.w	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014ab8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014abc:	4613      	mov	r3, r2
 8014abe:	00db      	lsls	r3, r3, #3
 8014ac0:	1a9b      	subs	r3, r3, r2
 8014ac2:	461a      	mov	r2, r3
 8014ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ac6:	4413      	add	r3, r2
 8014ac8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014aca:	2301      	movs	r3, #1
 8014acc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014ad0:	e016      	b.n	8014b00 <readCanToStructs+0x2e4c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014ad2:	4b44      	ldr	r3, [pc, #272]	; (8014be4 <readCanToStructs+0x2f30>)
 8014ad4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014ad8:	885b      	ldrh	r3, [r3, #2]
 8014ada:	461a      	mov	r2, r3
 8014adc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014ae0:	4940      	ldr	r1, [pc, #256]	; (8014be4 <readCanToStructs+0x2f30>)
 8014ae2:	0112      	lsls	r2, r2, #4
 8014ae4:	440a      	add	r2, r1
 8014ae6:	4413      	add	r3, r2
 8014ae8:	3304      	adds	r3, #4
 8014aea:	781a      	ldrb	r2, [r3, #0]
 8014aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aee:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af2:	3301      	adds	r3, #1
 8014af4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014af6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014afa:	3301      	adds	r3, #1
 8014afc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014b00:	4b38      	ldr	r3, [pc, #224]	; (8014be4 <readCanToStructs+0x2f30>)
 8014b02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014b06:	885b      	ldrh	r3, [r3, #2]
 8014b08:	4a36      	ldr	r2, [pc, #216]	; (8014be4 <readCanToStructs+0x2f30>)
 8014b0a:	011b      	lsls	r3, r3, #4
 8014b0c:	4413      	add	r3, r2
 8014b0e:	330c      	adds	r3, #12
 8014b10:	781b      	ldrb	r3, [r3, #0]
 8014b12:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014b16:	429a      	cmp	r2, r3
 8014b18:	d3db      	bcc.n	8014ad2 <readCanToStructs+0x2e1e>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8014b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b1e:	4a32      	ldr	r2, [pc, #200]	; (8014be8 <readCanToStructs+0x2f34>)
 8014b20:	f240 4116 	movw	r1, #1046	; 0x416
 8014b24:	fb01 f303 	mul.w	r3, r1, r3
 8014b28:	4413      	add	r3, r2
 8014b2a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8014b2e:	781b      	ldrb	r3, [r3, #0]
 8014b30:	461a      	mov	r2, r3
 8014b32:	4613      	mov	r3, r2
 8014b34:	00db      	lsls	r3, r3, #3
 8014b36:	1a9a      	subs	r2, r3, r2
 8014b38:	4b2a      	ldr	r3, [pc, #168]	; (8014be4 <readCanToStructs+0x2f30>)
 8014b3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014b3e:	885b      	ldrh	r3, [r3, #2]
 8014b40:	4928      	ldr	r1, [pc, #160]	; (8014be4 <readCanToStructs+0x2f30>)
 8014b42:	011b      	lsls	r3, r3, #4
 8014b44:	440b      	add	r3, r1
 8014b46:	330c      	adds	r3, #12
 8014b48:	781b      	ldrb	r3, [r3, #0]
 8014b4a:	3b01      	subs	r3, #1
 8014b4c:	4413      	add	r3, r2
 8014b4e:	2b07      	cmp	r3, #7
 8014b50:	d922      	bls.n	8014b98 <readCanToStructs+0x2ee4>
					if(Debug_flag == 1)
 8014b52:	4b26      	ldr	r3, [pc, #152]	; (8014bec <readCanToStructs+0x2f38>)
 8014b54:	781b      	ldrb	r3, [r3, #0]
 8014b56:	2b01      	cmp	r3, #1
 8014b58:	d102      	bne.n	8014b60 <readCanToStructs+0x2eac>
						printf("\nRCV OTH_INFO2\n");
 8014b5a:	482c      	ldr	r0, [pc, #176]	; (8014c0c <readCanToStructs+0x2f58>)
 8014b5c:	f012 f8e2 	bl	8026d24 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8014b60:	4b24      	ldr	r3, [pc, #144]	; (8014bf4 <readCanToStructs+0x2f40>)
 8014b62:	4a25      	ldr	r2, [pc, #148]	; (8014bf8 <readCanToStructs+0x2f44>)
 8014b64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b68:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 8014b6c:	4b23      	ldr	r3, [pc, #140]	; (8014bfc <readCanToStructs+0x2f48>)
 8014b6e:	2201      	movs	r2, #1
 8014b70:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8014b72:	f005 f831 	bl	8019bd8 <HAL_GetTick>
 8014b76:	4603      	mov	r3, r0
 8014b78:	4a21      	ldr	r2, [pc, #132]	; (8014c00 <readCanToStructs+0x2f4c>)
 8014b7a:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8014b7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b80:	4a19      	ldr	r2, [pc, #100]	; (8014be8 <readCanToStructs+0x2f34>)
 8014b82:	f240 4116 	movw	r1, #1046	; 0x416
 8014b86:	fb01 f303 	mul.w	r3, r1, r3
 8014b8a:	4413      	add	r3, r2
 8014b8c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8014b90:	2200      	movs	r2, #0
 8014b92:	701a      	strb	r2, [r3, #0]
				break;
 8014b94:	f000 bc76 	b.w	8015484 <readCanToStructs+0x37d0>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8014b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b9c:	4a12      	ldr	r2, [pc, #72]	; (8014be8 <readCanToStructs+0x2f34>)
 8014b9e:	f240 4116 	movw	r1, #1046	; 0x416
 8014ba2:	fb01 f303 	mul.w	r3, r1, r3
 8014ba6:	4413      	add	r3, r2
 8014ba8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8014bac:	2201      	movs	r2, #1
 8014bae:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8014bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014bb4:	490c      	ldr	r1, [pc, #48]	; (8014be8 <readCanToStructs+0x2f34>)
 8014bb6:	f240 4216 	movw	r2, #1046	; 0x416
 8014bba:	fb03 f202 	mul.w	r2, r3, r2
 8014bbe:	440a      	add	r2, r1
 8014bc0:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8014bc4:	7812      	ldrb	r2, [r2, #0]
 8014bc6:	3201      	adds	r2, #1
 8014bc8:	b2d0      	uxtb	r0, r2
 8014bca:	4a07      	ldr	r2, [pc, #28]	; (8014be8 <readCanToStructs+0x2f34>)
 8014bcc:	f240 4116 	movw	r1, #1046	; 0x416
 8014bd0:	fb01 f303 	mul.w	r3, r1, r3
 8014bd4:	4413      	add	r3, r2
 8014bd6:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8014bda:	4602      	mov	r2, r0
 8014bdc:	701a      	strb	r2, [r3, #0]
				break;
 8014bde:	f000 bc51 	b.w	8015484 <readCanToStructs+0x37d0>
 8014be2:	bf00      	nop
 8014be4:	20007264 	.word	0x20007264
 8014be8:	20006a38 	.word	0x20006a38
 8014bec:	20000bbb 	.word	0x20000bbb
 8014bf0:	0802b9ec 	.word	0x0802b9ec
 8014bf4:	20003e0c 	.word	0x20003e0c
 8014bf8:	20003e14 	.word	0x20003e14
 8014bfc:	200038a8 	.word	0x200038a8
 8014c00:	200038ac 	.word	0x200038ac
 8014c04:	0802b9fc 	.word	0x0802b9fc
 8014c08:	0802b9dc 	.word	0x0802b9dc
 8014c0c:	0802ba24 	.word	0x0802ba24
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 8014c10:	4bbb      	ldr	r3, [pc, #748]	; (8014f00 <readCanToStructs+0x324c>)
 8014c12:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014c14:	4bbb      	ldr	r3, [pc, #748]	; (8014f04 <readCanToStructs+0x3250>)
 8014c16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014c1a:	885b      	ldrh	r3, [r3, #2]
 8014c1c:	4ab9      	ldr	r2, [pc, #740]	; (8014f04 <readCanToStructs+0x3250>)
 8014c1e:	011b      	lsls	r3, r3, #4
 8014c20:	4413      	add	r3, r2
 8014c22:	3304      	adds	r3, #4
 8014c24:	781b      	ldrb	r3, [r3, #0]
 8014c26:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8014c2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d110      	bne.n	8014c54 <readCanToStructs+0x2fa0>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8014c32:	2204      	movs	r2, #4
 8014c34:	2100      	movs	r1, #0
 8014c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c38:	f011 fef0 	bl	8026a1c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8014c3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c40:	4ab1      	ldr	r2, [pc, #708]	; (8014f08 <readCanToStructs+0x3254>)
 8014c42:	f240 4116 	movw	r1, #1046	; 0x416
 8014c46:	fb01 f303 	mul.w	r3, r1, r3
 8014c4a:	4413      	add	r3, r2
 8014c4c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014c50:	2200      	movs	r2, #0
 8014c52:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8014c54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c58:	4aab      	ldr	r2, [pc, #684]	; (8014f08 <readCanToStructs+0x3254>)
 8014c5a:	f240 4116 	movw	r1, #1046	; 0x416
 8014c5e:	fb01 f303 	mul.w	r3, r1, r3
 8014c62:	4413      	add	r3, r2
 8014c64:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014c68:	781b      	ldrb	r3, [r3, #0]
 8014c6a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	d011      	beq.n	8014c96 <readCanToStructs+0x2fe2>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8014c72:	2204      	movs	r2, #4
 8014c74:	2100      	movs	r1, #0
 8014c76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c78:	f011 fed0 	bl	8026a1c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8014c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c80:	4aa1      	ldr	r2, [pc, #644]	; (8014f08 <readCanToStructs+0x3254>)
 8014c82:	f240 4116 	movw	r1, #1046	; 0x416
 8014c86:	fb01 f303 	mul.w	r3, r1, r3
 8014c8a:	4413      	add	r3, r2
 8014c8c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014c90:	2200      	movs	r2, #0
 8014c92:	701a      	strb	r2, [r3, #0]
					break;
 8014c94:	e3f6      	b.n	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014c96:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014c9a:	4613      	mov	r3, r2
 8014c9c:	00db      	lsls	r3, r3, #3
 8014c9e:	1a9b      	subs	r3, r3, r2
 8014ca0:	461a      	mov	r2, r3
 8014ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca4:	4413      	add	r3, r2
 8014ca6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014ca8:	2301      	movs	r3, #1
 8014caa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014cae:	e016      	b.n	8014cde <readCanToStructs+0x302a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014cb0:	4b94      	ldr	r3, [pc, #592]	; (8014f04 <readCanToStructs+0x3250>)
 8014cb2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014cb6:	885b      	ldrh	r3, [r3, #2]
 8014cb8:	461a      	mov	r2, r3
 8014cba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014cbe:	4991      	ldr	r1, [pc, #580]	; (8014f04 <readCanToStructs+0x3250>)
 8014cc0:	0112      	lsls	r2, r2, #4
 8014cc2:	440a      	add	r2, r1
 8014cc4:	4413      	add	r3, r2
 8014cc6:	3304      	adds	r3, #4
 8014cc8:	781a      	ldrb	r2, [r3, #0]
 8014cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ccc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014cd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014cd8:	3301      	adds	r3, #1
 8014cda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014cde:	4b89      	ldr	r3, [pc, #548]	; (8014f04 <readCanToStructs+0x3250>)
 8014ce0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014ce4:	885b      	ldrh	r3, [r3, #2]
 8014ce6:	4a87      	ldr	r2, [pc, #540]	; (8014f04 <readCanToStructs+0x3250>)
 8014ce8:	011b      	lsls	r3, r3, #4
 8014cea:	4413      	add	r3, r2
 8014cec:	330c      	adds	r3, #12
 8014cee:	781b      	ldrb	r3, [r3, #0]
 8014cf0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	d3db      	bcc.n	8014cb0 <readCanToStructs+0x2ffc>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 8014cf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014cfc:	4a82      	ldr	r2, [pc, #520]	; (8014f08 <readCanToStructs+0x3254>)
 8014cfe:	f240 4116 	movw	r1, #1046	; 0x416
 8014d02:	fb01 f303 	mul.w	r3, r1, r3
 8014d06:	4413      	add	r3, r2
 8014d08:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014d0c:	781b      	ldrb	r3, [r3, #0]
 8014d0e:	461a      	mov	r2, r3
 8014d10:	4613      	mov	r3, r2
 8014d12:	00db      	lsls	r3, r3, #3
 8014d14:	1a9a      	subs	r2, r3, r2
 8014d16:	4b7b      	ldr	r3, [pc, #492]	; (8014f04 <readCanToStructs+0x3250>)
 8014d18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014d1c:	885b      	ldrh	r3, [r3, #2]
 8014d1e:	4979      	ldr	r1, [pc, #484]	; (8014f04 <readCanToStructs+0x3250>)
 8014d20:	011b      	lsls	r3, r3, #4
 8014d22:	440b      	add	r3, r1
 8014d24:	330c      	adds	r3, #12
 8014d26:	781b      	ldrb	r3, [r3, #0]
 8014d28:	3b01      	subs	r3, #1
 8014d2a:	4413      	add	r3, r2
 8014d2c:	2b03      	cmp	r3, #3
 8014d2e:	d914      	bls.n	8014d5a <readCanToStructs+0x30a6>
					printf("Received CAN_FAULT_INJECTION\n");
 8014d30:	4876      	ldr	r0, [pc, #472]	; (8014f0c <readCanToStructs+0x3258>)
 8014d32:	f011 fff7 	bl	8026d24 <puts>
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8014d36:	f004 ff4f 	bl	8019bd8 <HAL_GetTick>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	4a74      	ldr	r2, [pc, #464]	; (8014f10 <readCanToStructs+0x325c>)
 8014d3e:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8014d40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d44:	4a70      	ldr	r2, [pc, #448]	; (8014f08 <readCanToStructs+0x3254>)
 8014d46:	f240 4116 	movw	r1, #1046	; 0x416
 8014d4a:	fb01 f303 	mul.w	r3, r1, r3
 8014d4e:	4413      	add	r3, r2
 8014d50:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014d54:	2200      	movs	r2, #0
 8014d56:	701a      	strb	r2, [r3, #0]
				break;
 8014d58:	e394      	b.n	8015484 <readCanToStructs+0x37d0>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8014d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d5e:	4a6a      	ldr	r2, [pc, #424]	; (8014f08 <readCanToStructs+0x3254>)
 8014d60:	f240 4116 	movw	r1, #1046	; 0x416
 8014d64:	fb01 f303 	mul.w	r3, r1, r3
 8014d68:	4413      	add	r3, r2
 8014d6a:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8014d6e:	2201      	movs	r2, #1
 8014d70:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8014d72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d76:	4964      	ldr	r1, [pc, #400]	; (8014f08 <readCanToStructs+0x3254>)
 8014d78:	f240 4216 	movw	r2, #1046	; 0x416
 8014d7c:	fb03 f202 	mul.w	r2, r3, r2
 8014d80:	440a      	add	r2, r1
 8014d82:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8014d86:	7812      	ldrb	r2, [r2, #0]
 8014d88:	3201      	adds	r2, #1
 8014d8a:	b2d0      	uxtb	r0, r2
 8014d8c:	4a5e      	ldr	r2, [pc, #376]	; (8014f08 <readCanToStructs+0x3254>)
 8014d8e:	f240 4116 	movw	r1, #1046	; 0x416
 8014d92:	fb01 f303 	mul.w	r3, r1, r3
 8014d96:	4413      	add	r3, r2
 8014d98:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014d9c:	4602      	mov	r2, r0
 8014d9e:	701a      	strb	r2, [r3, #0]
				break;
 8014da0:	e370      	b.n	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8014da2:	4b5c      	ldr	r3, [pc, #368]	; (8014f14 <readCanToStructs+0x3260>)
 8014da4:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014da6:	4b57      	ldr	r3, [pc, #348]	; (8014f04 <readCanToStructs+0x3250>)
 8014da8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014dac:	885b      	ldrh	r3, [r3, #2]
 8014dae:	4a55      	ldr	r2, [pc, #340]	; (8014f04 <readCanToStructs+0x3250>)
 8014db0:	011b      	lsls	r3, r3, #4
 8014db2:	4413      	add	r3, r2
 8014db4:	3304      	adds	r3, #4
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8014dbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d110      	bne.n	8014de6 <readCanToStructs+0x3132>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8014dc4:	2284      	movs	r2, #132	; 0x84
 8014dc6:	2100      	movs	r1, #0
 8014dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014dca:	f011 fe27 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8014dce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014dd2:	4a4d      	ldr	r2, [pc, #308]	; (8014f08 <readCanToStructs+0x3254>)
 8014dd4:	f240 4116 	movw	r1, #1046	; 0x416
 8014dd8:	fb01 f303 	mul.w	r3, r1, r3
 8014ddc:	4413      	add	r3, r2
 8014dde:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014de2:	2200      	movs	r2, #0
 8014de4:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8014de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014dea:	4a47      	ldr	r2, [pc, #284]	; (8014f08 <readCanToStructs+0x3254>)
 8014dec:	f240 4116 	movw	r1, #1046	; 0x416
 8014df0:	fb01 f303 	mul.w	r3, r1, r3
 8014df4:	4413      	add	r3, r2
 8014df6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014dfa:	781b      	ldrb	r3, [r3, #0]
 8014dfc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014e00:	429a      	cmp	r2, r3
 8014e02:	d011      	beq.n	8014e28 <readCanToStructs+0x3174>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8014e04:	2284      	movs	r2, #132	; 0x84
 8014e06:	2100      	movs	r1, #0
 8014e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e0a:	f011 fe07 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8014e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e12:	4a3d      	ldr	r2, [pc, #244]	; (8014f08 <readCanToStructs+0x3254>)
 8014e14:	f240 4116 	movw	r1, #1046	; 0x416
 8014e18:	fb01 f303 	mul.w	r3, r1, r3
 8014e1c:	4413      	add	r3, r2
 8014e1e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014e22:	2200      	movs	r2, #0
 8014e24:	701a      	strb	r2, [r3, #0]
					break;
 8014e26:	e32d      	b.n	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014e28:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014e2c:	4613      	mov	r3, r2
 8014e2e:	00db      	lsls	r3, r3, #3
 8014e30:	1a9b      	subs	r3, r3, r2
 8014e32:	461a      	mov	r2, r3
 8014e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e36:	4413      	add	r3, r2
 8014e38:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014e3a:	2301      	movs	r3, #1
 8014e3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014e40:	e016      	b.n	8014e70 <readCanToStructs+0x31bc>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014e42:	4b30      	ldr	r3, [pc, #192]	; (8014f04 <readCanToStructs+0x3250>)
 8014e44:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014e48:	885b      	ldrh	r3, [r3, #2]
 8014e4a:	461a      	mov	r2, r3
 8014e4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e50:	492c      	ldr	r1, [pc, #176]	; (8014f04 <readCanToStructs+0x3250>)
 8014e52:	0112      	lsls	r2, r2, #4
 8014e54:	440a      	add	r2, r1
 8014e56:	4413      	add	r3, r2
 8014e58:	3304      	adds	r3, #4
 8014e5a:	781a      	ldrb	r2, [r3, #0]
 8014e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e5e:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e62:	3301      	adds	r3, #1
 8014e64:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014e66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e6a:	3301      	adds	r3, #1
 8014e6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014e70:	4b24      	ldr	r3, [pc, #144]	; (8014f04 <readCanToStructs+0x3250>)
 8014e72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014e76:	885b      	ldrh	r3, [r3, #2]
 8014e78:	4a22      	ldr	r2, [pc, #136]	; (8014f04 <readCanToStructs+0x3250>)
 8014e7a:	011b      	lsls	r3, r3, #4
 8014e7c:	4413      	add	r3, r2
 8014e7e:	330c      	adds	r3, #12
 8014e80:	781b      	ldrb	r3, [r3, #0]
 8014e82:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d3db      	bcc.n	8014e42 <readCanToStructs+0x318e>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8014e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e8e:	4a1e      	ldr	r2, [pc, #120]	; (8014f08 <readCanToStructs+0x3254>)
 8014e90:	f240 4116 	movw	r1, #1046	; 0x416
 8014e94:	fb01 f303 	mul.w	r3, r1, r3
 8014e98:	4413      	add	r3, r2
 8014e9a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014e9e:	781b      	ldrb	r3, [r3, #0]
 8014ea0:	461a      	mov	r2, r3
 8014ea2:	4613      	mov	r3, r2
 8014ea4:	00db      	lsls	r3, r3, #3
 8014ea6:	1a9a      	subs	r2, r3, r2
 8014ea8:	4b16      	ldr	r3, [pc, #88]	; (8014f04 <readCanToStructs+0x3250>)
 8014eaa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014eae:	885b      	ldrh	r3, [r3, #2]
 8014eb0:	4914      	ldr	r1, [pc, #80]	; (8014f04 <readCanToStructs+0x3250>)
 8014eb2:	011b      	lsls	r3, r3, #4
 8014eb4:	440b      	add	r3, r1
 8014eb6:	330c      	adds	r3, #12
 8014eb8:	781b      	ldrb	r3, [r3, #0]
 8014eba:	3b01      	subs	r3, #1
 8014ebc:	4413      	add	r3, r2
 8014ebe:	2b83      	cmp	r3, #131	; 0x83
 8014ec0:	d932      	bls.n	8014f28 <readCanToStructs+0x3274>
					if(Debug_flag == 1)
 8014ec2:	4b15      	ldr	r3, [pc, #84]	; (8014f18 <readCanToStructs+0x3264>)
 8014ec4:	781b      	ldrb	r3, [r3, #0]
 8014ec6:	2b01      	cmp	r3, #1
 8014ec8:	d102      	bne.n	8014ed0 <readCanToStructs+0x321c>
						printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 8014eca:	4814      	ldr	r0, [pc, #80]	; (8014f1c <readCanToStructs+0x3268>)
 8014ecc:	f011 ff2a 	bl	8026d24 <puts>
					Received_CAN_Relay_Status = YES;
 8014ed0:	4b13      	ldr	r3, [pc, #76]	; (8014f20 <readCanToStructs+0x326c>)
 8014ed2:	2201      	movs	r2, #1
 8014ed4:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = SET;
 8014ed6:	4b13      	ldr	r3, [pc, #76]	; (8014f24 <readCanToStructs+0x3270>)
 8014ed8:	2201      	movs	r2, #1
 8014eda:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8014edc:	f004 fe7c 	bl	8019bd8 <HAL_GetTick>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	4a0b      	ldr	r2, [pc, #44]	; (8014f10 <readCanToStructs+0x325c>)
 8014ee4:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8014ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014eea:	4a07      	ldr	r2, [pc, #28]	; (8014f08 <readCanToStructs+0x3254>)
 8014eec:	f240 4116 	movw	r1, #1046	; 0x416
 8014ef0:	fb01 f303 	mul.w	r3, r1, r3
 8014ef4:	4413      	add	r3, r2
 8014ef6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014efa:	2200      	movs	r2, #0
 8014efc:	701a      	strb	r2, [r3, #0]
				break;
 8014efe:	e2c1      	b.n	8015484 <readCanToStructs+0x37d0>
 8014f00:	20003e00 	.word	0x20003e00
 8014f04:	20007264 	.word	0x20007264
 8014f08:	20006a38 	.word	0x20006a38
 8014f0c:	0802ba34 	.word	0x0802ba34
 8014f10:	200038ac 	.word	0x200038ac
 8014f14:	20003ea0 	.word	0x20003ea0
 8014f18:	20000bbb 	.word	0x20000bbb
 8014f1c:	0802ba54 	.word	0x0802ba54
 8014f20:	200038a9 	.word	0x200038a9
 8014f24:	200038a8 	.word	0x200038a8
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8014f28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f2c:	4aa3      	ldr	r2, [pc, #652]	; (80151bc <readCanToStructs+0x3508>)
 8014f2e:	f240 4116 	movw	r1, #1046	; 0x416
 8014f32:	fb01 f303 	mul.w	r3, r1, r3
 8014f36:	4413      	add	r3, r2
 8014f38:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8014f3c:	2201      	movs	r2, #1
 8014f3e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8014f40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f44:	499d      	ldr	r1, [pc, #628]	; (80151bc <readCanToStructs+0x3508>)
 8014f46:	f240 4216 	movw	r2, #1046	; 0x416
 8014f4a:	fb03 f202 	mul.w	r2, r3, r2
 8014f4e:	440a      	add	r2, r1
 8014f50:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8014f54:	7812      	ldrb	r2, [r2, #0]
 8014f56:	3201      	adds	r2, #1
 8014f58:	b2d0      	uxtb	r0, r2
 8014f5a:	4a98      	ldr	r2, [pc, #608]	; (80151bc <readCanToStructs+0x3508>)
 8014f5c:	f240 4116 	movw	r1, #1046	; 0x416
 8014f60:	fb01 f303 	mul.w	r3, r1, r3
 8014f64:	4413      	add	r3, r2
 8014f66:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014f6a:	4602      	mov	r2, r0
 8014f6c:	701a      	strb	r2, [r3, #0]
				break;
 8014f6e:	e289      	b.n	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8014f70:	4b93      	ldr	r3, [pc, #588]	; (80151c0 <readCanToStructs+0x350c>)
 8014f72:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014f74:	4b93      	ldr	r3, [pc, #588]	; (80151c4 <readCanToStructs+0x3510>)
 8014f76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014f7a:	885b      	ldrh	r3, [r3, #2]
 8014f7c:	4a91      	ldr	r2, [pc, #580]	; (80151c4 <readCanToStructs+0x3510>)
 8014f7e:	011b      	lsls	r3, r3, #4
 8014f80:	4413      	add	r3, r2
 8014f82:	3304      	adds	r3, #4
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8014f8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d110      	bne.n	8014fb4 <readCanToStructs+0x3300>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8014f92:	2284      	movs	r2, #132	; 0x84
 8014f94:	2100      	movs	r1, #0
 8014f96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f98:	f011 fd40 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8014f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fa0:	4a86      	ldr	r2, [pc, #536]	; (80151bc <readCanToStructs+0x3508>)
 8014fa2:	f240 4116 	movw	r1, #1046	; 0x416
 8014fa6:	fb01 f303 	mul.w	r3, r1, r3
 8014faa:	4413      	add	r3, r2
 8014fac:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8014fb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fb8:	4a80      	ldr	r2, [pc, #512]	; (80151bc <readCanToStructs+0x3508>)
 8014fba:	f240 4116 	movw	r1, #1046	; 0x416
 8014fbe:	fb01 f303 	mul.w	r3, r1, r3
 8014fc2:	4413      	add	r3, r2
 8014fc4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014fc8:	781b      	ldrb	r3, [r3, #0]
 8014fca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014fce:	429a      	cmp	r2, r3
 8014fd0:	d011      	beq.n	8014ff6 <readCanToStructs+0x3342>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8014fd2:	2284      	movs	r2, #132	; 0x84
 8014fd4:	2100      	movs	r1, #0
 8014fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014fd8:	f011 fd20 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8014fdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fe0:	4a76      	ldr	r2, [pc, #472]	; (80151bc <readCanToStructs+0x3508>)
 8014fe2:	f240 4116 	movw	r1, #1046	; 0x416
 8014fe6:	fb01 f303 	mul.w	r3, r1, r3
 8014fea:	4413      	add	r3, r2
 8014fec:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	701a      	strb	r2, [r3, #0]
					break;
 8014ff4:	e246      	b.n	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014ff6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014ffa:	4613      	mov	r3, r2
 8014ffc:	00db      	lsls	r3, r3, #3
 8014ffe:	1a9b      	subs	r3, r3, r2
 8015000:	461a      	mov	r2, r3
 8015002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015004:	4413      	add	r3, r2
 8015006:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015008:	2301      	movs	r3, #1
 801500a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801500e:	e016      	b.n	801503e <readCanToStructs+0x338a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8015010:	4b6c      	ldr	r3, [pc, #432]	; (80151c4 <readCanToStructs+0x3510>)
 8015012:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015016:	885b      	ldrh	r3, [r3, #2]
 8015018:	461a      	mov	r2, r3
 801501a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801501e:	4969      	ldr	r1, [pc, #420]	; (80151c4 <readCanToStructs+0x3510>)
 8015020:	0112      	lsls	r2, r2, #4
 8015022:	440a      	add	r2, r1
 8015024:	4413      	add	r3, r2
 8015026:	3304      	adds	r3, #4
 8015028:	781a      	ldrb	r2, [r3, #0]
 801502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801502c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015030:	3301      	adds	r3, #1
 8015032:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015034:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015038:	3301      	adds	r3, #1
 801503a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801503e:	4b61      	ldr	r3, [pc, #388]	; (80151c4 <readCanToStructs+0x3510>)
 8015040:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015044:	885b      	ldrh	r3, [r3, #2]
 8015046:	4a5f      	ldr	r2, [pc, #380]	; (80151c4 <readCanToStructs+0x3510>)
 8015048:	011b      	lsls	r3, r3, #4
 801504a:	4413      	add	r3, r2
 801504c:	330c      	adds	r3, #12
 801504e:	781b      	ldrb	r3, [r3, #0]
 8015050:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015054:	429a      	cmp	r2, r3
 8015056:	d3db      	bcc.n	8015010 <readCanToStructs+0x335c>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8015058:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801505c:	4a57      	ldr	r2, [pc, #348]	; (80151bc <readCanToStructs+0x3508>)
 801505e:	f240 4116 	movw	r1, #1046	; 0x416
 8015062:	fb01 f303 	mul.w	r3, r1, r3
 8015066:	4413      	add	r3, r2
 8015068:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801506c:	781b      	ldrb	r3, [r3, #0]
 801506e:	461a      	mov	r2, r3
 8015070:	4613      	mov	r3, r2
 8015072:	00db      	lsls	r3, r3, #3
 8015074:	1a9a      	subs	r2, r3, r2
 8015076:	4b53      	ldr	r3, [pc, #332]	; (80151c4 <readCanToStructs+0x3510>)
 8015078:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801507c:	885b      	ldrh	r3, [r3, #2]
 801507e:	4951      	ldr	r1, [pc, #324]	; (80151c4 <readCanToStructs+0x3510>)
 8015080:	011b      	lsls	r3, r3, #4
 8015082:	440b      	add	r3, r1
 8015084:	330c      	adds	r3, #12
 8015086:	781b      	ldrb	r3, [r3, #0]
 8015088:	3b01      	subs	r3, #1
 801508a:	4413      	add	r3, r2
 801508c:	2b83      	cmp	r3, #131	; 0x83
 801508e:	d91e      	bls.n	80150ce <readCanToStructs+0x341a>
					if(Debug_flag == 1)
 8015090:	4b4d      	ldr	r3, [pc, #308]	; (80151c8 <readCanToStructs+0x3514>)
 8015092:	781b      	ldrb	r3, [r3, #0]
 8015094:	2b01      	cmp	r3, #1
 8015096:	d102      	bne.n	801509e <readCanToStructs+0x33ea>
						printf("\nRCV RELAY_DATA_EI2\n");
 8015098:	484c      	ldr	r0, [pc, #304]	; (80151cc <readCanToStructs+0x3518>)
 801509a:	f011 fe43 	bl	8026d24 <puts>
					Medha_CAN_Xchanging_Happening = SET;
 801509e:	4b4c      	ldr	r3, [pc, #304]	; (80151d0 <readCanToStructs+0x351c>)
 80150a0:	2201      	movs	r2, #1
 80150a2:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 80150a4:	f004 fd98 	bl	8019bd8 <HAL_GetTick>
 80150a8:	4603      	mov	r3, r0
 80150aa:	4a4a      	ldr	r2, [pc, #296]	; (80151d4 <readCanToStructs+0x3520>)
 80150ac:	6013      	str	r3, [r2, #0]
					Received_CAN_Relay_Status = YES;
 80150ae:	4b4a      	ldr	r3, [pc, #296]	; (80151d8 <readCanToStructs+0x3524>)
 80150b0:	2201      	movs	r2, #1
 80150b2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80150b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150b8:	4a40      	ldr	r2, [pc, #256]	; (80151bc <readCanToStructs+0x3508>)
 80150ba:	f240 4116 	movw	r1, #1046	; 0x416
 80150be:	fb01 f303 	mul.w	r3, r1, r3
 80150c2:	4413      	add	r3, r2
 80150c4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80150c8:	2200      	movs	r2, #0
 80150ca:	701a      	strb	r2, [r3, #0]
				break;
 80150cc:	e1da      	b.n	8015484 <readCanToStructs+0x37d0>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 80150ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150d2:	4a3a      	ldr	r2, [pc, #232]	; (80151bc <readCanToStructs+0x3508>)
 80150d4:	f240 4116 	movw	r1, #1046	; 0x416
 80150d8:	fb01 f303 	mul.w	r3, r1, r3
 80150dc:	4413      	add	r3, r2
 80150de:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80150e2:	2201      	movs	r2, #1
 80150e4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 80150e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150ea:	4934      	ldr	r1, [pc, #208]	; (80151bc <readCanToStructs+0x3508>)
 80150ec:	f240 4216 	movw	r2, #1046	; 0x416
 80150f0:	fb03 f202 	mul.w	r2, r3, r2
 80150f4:	440a      	add	r2, r1
 80150f6:	f202 4211 	addw	r2, r2, #1041	; 0x411
 80150fa:	7812      	ldrb	r2, [r2, #0]
 80150fc:	3201      	adds	r2, #1
 80150fe:	b2d0      	uxtb	r0, r2
 8015100:	4a2e      	ldr	r2, [pc, #184]	; (80151bc <readCanToStructs+0x3508>)
 8015102:	f240 4116 	movw	r1, #1046	; 0x416
 8015106:	fb01 f303 	mul.w	r3, r1, r3
 801510a:	4413      	add	r3, r2
 801510c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8015110:	4602      	mov	r2, r0
 8015112:	701a      	strb	r2, [r3, #0]
				break;
 8015114:	e1b6      	b.n	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8015116:	4b31      	ldr	r3, [pc, #196]	; (80151dc <readCanToStructs+0x3528>)
 8015118:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801511a:	4b2a      	ldr	r3, [pc, #168]	; (80151c4 <readCanToStructs+0x3510>)
 801511c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015120:	885b      	ldrh	r3, [r3, #2]
 8015122:	4a28      	ldr	r2, [pc, #160]	; (80151c4 <readCanToStructs+0x3510>)
 8015124:	011b      	lsls	r3, r3, #4
 8015126:	4413      	add	r3, r2
 8015128:	3304      	adds	r3, #4
 801512a:	781b      	ldrb	r3, [r3, #0]
 801512c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8015130:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015134:	2b00      	cmp	r3, #0
 8015136:	d110      	bne.n	801515a <readCanToStructs+0x34a6>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8015138:	2202      	movs	r2, #2
 801513a:	2100      	movs	r1, #0
 801513c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801513e:	f011 fc6d 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8015142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015146:	4a1d      	ldr	r2, [pc, #116]	; (80151bc <readCanToStructs+0x3508>)
 8015148:	f240 4116 	movw	r1, #1046	; 0x416
 801514c:	fb01 f303 	mul.w	r3, r1, r3
 8015150:	4413      	add	r3, r2
 8015152:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015156:	2200      	movs	r2, #0
 8015158:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 801515a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801515e:	4a17      	ldr	r2, [pc, #92]	; (80151bc <readCanToStructs+0x3508>)
 8015160:	f240 4116 	movw	r1, #1046	; 0x416
 8015164:	fb01 f303 	mul.w	r3, r1, r3
 8015168:	4413      	add	r3, r2
 801516a:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801516e:	781b      	ldrb	r3, [r3, #0]
 8015170:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015174:	429a      	cmp	r2, r3
 8015176:	d014      	beq.n	80151a2 <readCanToStructs+0x34ee>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8015178:	4819      	ldr	r0, [pc, #100]	; (80151e0 <readCanToStructs+0x352c>)
 801517a:	f011 fdd3 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801517e:	2202      	movs	r2, #2
 8015180:	2100      	movs	r1, #0
 8015182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015184:	f011 fc4a 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8015188:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801518c:	4a0b      	ldr	r2, [pc, #44]	; (80151bc <readCanToStructs+0x3508>)
 801518e:	f240 4116 	movw	r1, #1046	; 0x416
 8015192:	fb01 f303 	mul.w	r3, r1, r3
 8015196:	4413      	add	r3, r2
 8015198:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801519c:	2200      	movs	r2, #0
 801519e:	701a      	strb	r2, [r3, #0]
					break;
 80151a0:	e170      	b.n	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 80151a2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80151a6:	4613      	mov	r3, r2
 80151a8:	00db      	lsls	r3, r3, #3
 80151aa:	1a9b      	subs	r3, r3, r2
 80151ac:	461a      	mov	r2, r3
 80151ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151b0:	4413      	add	r3, r2
 80151b2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80151b4:	2301      	movs	r3, #1
 80151b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80151ba:	e02a      	b.n	8015212 <readCanToStructs+0x355e>
 80151bc:	20006a38 	.word	0x20006a38
 80151c0:	20003ea0 	.word	0x20003ea0
 80151c4:	20007264 	.word	0x20007264
 80151c8:	20000bbb 	.word	0x20000bbb
 80151cc:	0802ba70 	.word	0x0802ba70
 80151d0:	200038a8 	.word	0x200038a8
 80151d4:	200038ac 	.word	0x200038ac
 80151d8:	200038a9 	.word	0x200038a9
 80151dc:	20000bb8 	.word	0x20000bb8
 80151e0:	0802b89c 	.word	0x0802b89c
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80151e4:	4bbc      	ldr	r3, [pc, #752]	; (80154d8 <readCanToStructs+0x3824>)
 80151e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80151ea:	885b      	ldrh	r3, [r3, #2]
 80151ec:	461a      	mov	r2, r3
 80151ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80151f2:	49b9      	ldr	r1, [pc, #740]	; (80154d8 <readCanToStructs+0x3824>)
 80151f4:	0112      	lsls	r2, r2, #4
 80151f6:	440a      	add	r2, r1
 80151f8:	4413      	add	r3, r2
 80151fa:	3304      	adds	r3, #4
 80151fc:	781a      	ldrb	r2, [r3, #0]
 80151fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015200:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8015202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015204:	3301      	adds	r3, #1
 8015206:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015208:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801520c:	3301      	adds	r3, #1
 801520e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015212:	4bb1      	ldr	r3, [pc, #708]	; (80154d8 <readCanToStructs+0x3824>)
 8015214:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015218:	885b      	ldrh	r3, [r3, #2]
 801521a:	4aaf      	ldr	r2, [pc, #700]	; (80154d8 <readCanToStructs+0x3824>)
 801521c:	011b      	lsls	r3, r3, #4
 801521e:	4413      	add	r3, r2
 8015220:	330c      	adds	r3, #12
 8015222:	781b      	ldrb	r3, [r3, #0]
 8015224:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015228:	429a      	cmp	r2, r3
 801522a:	d3db      	bcc.n	80151e4 <readCanToStructs+0x3530>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 801522c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015230:	4aaa      	ldr	r2, [pc, #680]	; (80154dc <readCanToStructs+0x3828>)
 8015232:	f240 4116 	movw	r1, #1046	; 0x416
 8015236:	fb01 f303 	mul.w	r3, r1, r3
 801523a:	4413      	add	r3, r2
 801523c:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015240:	781b      	ldrb	r3, [r3, #0]
 8015242:	461a      	mov	r2, r3
 8015244:	4613      	mov	r3, r2
 8015246:	00db      	lsls	r3, r3, #3
 8015248:	1a9a      	subs	r2, r3, r2
 801524a:	4ba3      	ldr	r3, [pc, #652]	; (80154d8 <readCanToStructs+0x3824>)
 801524c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015250:	885b      	ldrh	r3, [r3, #2]
 8015252:	49a1      	ldr	r1, [pc, #644]	; (80154d8 <readCanToStructs+0x3824>)
 8015254:	011b      	lsls	r3, r3, #4
 8015256:	440b      	add	r3, r1
 8015258:	330c      	adds	r3, #12
 801525a:	781b      	ldrb	r3, [r3, #0]
 801525c:	3b01      	subs	r3, #1
 801525e:	4413      	add	r3, r2
 8015260:	2b01      	cmp	r3, #1
 8015262:	d919      	bls.n	8015298 <readCanToStructs+0x35e4>
					if(Debug_flag == 1)
 8015264:	4b9e      	ldr	r3, [pc, #632]	; (80154e0 <readCanToStructs+0x382c>)
 8015266:	781b      	ldrb	r3, [r3, #0]
 8015268:	2b01      	cmp	r3, #1
 801526a:	d105      	bne.n	8015278 <readCanToStructs+0x35c4>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 801526c:	4b9d      	ldr	r3, [pc, #628]	; (80154e4 <readCanToStructs+0x3830>)
 801526e:	881b      	ldrh	r3, [r3, #0]
 8015270:	4619      	mov	r1, r3
 8015272:	489d      	ldr	r0, [pc, #628]	; (80154e8 <readCanToStructs+0x3834>)
 8015274:	f011 fcba 	bl	8026bec <iprintf>
					Is_CAN_Exchange_happening = YES;
 8015278:	4b9c      	ldr	r3, [pc, #624]	; (80154ec <readCanToStructs+0x3838>)
 801527a:	2201      	movs	r2, #1
 801527c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 801527e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015282:	4a96      	ldr	r2, [pc, #600]	; (80154dc <readCanToStructs+0x3828>)
 8015284:	f240 4116 	movw	r1, #1046	; 0x416
 8015288:	fb01 f303 	mul.w	r3, r1, r3
 801528c:	4413      	add	r3, r2
 801528e:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015292:	2200      	movs	r2, #0
 8015294:	701a      	strb	r2, [r3, #0]
				break;
 8015296:	e0f5      	b.n	8015484 <readCanToStructs+0x37d0>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 8015298:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801529c:	4a8f      	ldr	r2, [pc, #572]	; (80154dc <readCanToStructs+0x3828>)
 801529e:	f240 4116 	movw	r1, #1046	; 0x416
 80152a2:	fb01 f303 	mul.w	r3, r1, r3
 80152a6:	4413      	add	r3, r2
 80152a8:	f203 4312 	addw	r3, r3, #1042	; 0x412
 80152ac:	2201      	movs	r2, #1
 80152ae:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 80152b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80152b4:	4989      	ldr	r1, [pc, #548]	; (80154dc <readCanToStructs+0x3828>)
 80152b6:	f240 4216 	movw	r2, #1046	; 0x416
 80152ba:	fb03 f202 	mul.w	r2, r3, r2
 80152be:	440a      	add	r2, r1
 80152c0:	f202 4213 	addw	r2, r2, #1043	; 0x413
 80152c4:	7812      	ldrb	r2, [r2, #0]
 80152c6:	3201      	adds	r2, #1
 80152c8:	b2d0      	uxtb	r0, r2
 80152ca:	4a84      	ldr	r2, [pc, #528]	; (80154dc <readCanToStructs+0x3828>)
 80152cc:	f240 4116 	movw	r1, #1046	; 0x416
 80152d0:	fb01 f303 	mul.w	r3, r1, r3
 80152d4:	4413      	add	r3, r2
 80152d6:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80152da:	4602      	mov	r2, r0
 80152dc:	701a      	strb	r2, [r3, #0]
				break;
 80152de:	e0d1      	b.n	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 80152e0:	4b80      	ldr	r3, [pc, #512]	; (80154e4 <readCanToStructs+0x3830>)
 80152e2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80152e4:	4b7c      	ldr	r3, [pc, #496]	; (80154d8 <readCanToStructs+0x3824>)
 80152e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80152ea:	885b      	ldrh	r3, [r3, #2]
 80152ec:	4a7a      	ldr	r2, [pc, #488]	; (80154d8 <readCanToStructs+0x3824>)
 80152ee:	011b      	lsls	r3, r3, #4
 80152f0:	4413      	add	r3, r2
 80152f2:	3304      	adds	r3, #4
 80152f4:	781b      	ldrb	r3, [r3, #0]
 80152f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80152fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d110      	bne.n	8015324 <readCanToStructs+0x3670>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8015302:	2202      	movs	r2, #2
 8015304:	2100      	movs	r1, #0
 8015306:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015308:	f011 fb88 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 801530c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015310:	4a72      	ldr	r2, [pc, #456]	; (80154dc <readCanToStructs+0x3828>)
 8015312:	f240 4116 	movw	r1, #1046	; 0x416
 8015316:	fb01 f303 	mul.w	r3, r1, r3
 801531a:	4413      	add	r3, r2
 801531c:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015320:	2200      	movs	r2, #0
 8015322:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8015324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015328:	4a6c      	ldr	r2, [pc, #432]	; (80154dc <readCanToStructs+0x3828>)
 801532a:	f240 4116 	movw	r1, #1046	; 0x416
 801532e:	fb01 f303 	mul.w	r3, r1, r3
 8015332:	4413      	add	r3, r2
 8015334:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015338:	781b      	ldrb	r3, [r3, #0]
 801533a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801533e:	429a      	cmp	r2, r3
 8015340:	d014      	beq.n	801536c <readCanToStructs+0x36b8>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8015342:	486b      	ldr	r0, [pc, #428]	; (80154f0 <readCanToStructs+0x383c>)
 8015344:	f011 fcee 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8015348:	2202      	movs	r2, #2
 801534a:	2100      	movs	r1, #0
 801534c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801534e:	f011 fb65 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8015352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015356:	4a61      	ldr	r2, [pc, #388]	; (80154dc <readCanToStructs+0x3828>)
 8015358:	f240 4116 	movw	r1, #1046	; 0x416
 801535c:	fb01 f303 	mul.w	r3, r1, r3
 8015360:	4413      	add	r3, r2
 8015362:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015366:	2200      	movs	r2, #0
 8015368:	701a      	strb	r2, [r3, #0]
					break;
 801536a:	e08b      	b.n	8015484 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 801536c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015370:	4613      	mov	r3, r2
 8015372:	00db      	lsls	r3, r3, #3
 8015374:	1a9b      	subs	r3, r3, r2
 8015376:	461a      	mov	r2, r3
 8015378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801537a:	4413      	add	r3, r2
 801537c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801537e:	2301      	movs	r3, #1
 8015380:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015384:	e016      	b.n	80153b4 <readCanToStructs+0x3700>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8015386:	4b54      	ldr	r3, [pc, #336]	; (80154d8 <readCanToStructs+0x3824>)
 8015388:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801538c:	885b      	ldrh	r3, [r3, #2]
 801538e:	461a      	mov	r2, r3
 8015390:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015394:	4950      	ldr	r1, [pc, #320]	; (80154d8 <readCanToStructs+0x3824>)
 8015396:	0112      	lsls	r2, r2, #4
 8015398:	440a      	add	r2, r1
 801539a:	4413      	add	r3, r2
 801539c:	3304      	adds	r3, #4
 801539e:	781a      	ldrb	r2, [r3, #0]
 80153a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a2:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80153a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a6:	3301      	adds	r3, #1
 80153a8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80153aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80153ae:	3301      	adds	r3, #1
 80153b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80153b4:	4b48      	ldr	r3, [pc, #288]	; (80154d8 <readCanToStructs+0x3824>)
 80153b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80153ba:	885b      	ldrh	r3, [r3, #2]
 80153bc:	4a46      	ldr	r2, [pc, #280]	; (80154d8 <readCanToStructs+0x3824>)
 80153be:	011b      	lsls	r3, r3, #4
 80153c0:	4413      	add	r3, r2
 80153c2:	330c      	adds	r3, #12
 80153c4:	781b      	ldrb	r3, [r3, #0]
 80153c6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d3db      	bcc.n	8015386 <readCanToStructs+0x36d2>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 80153ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80153d2:	4a42      	ldr	r2, [pc, #264]	; (80154dc <readCanToStructs+0x3828>)
 80153d4:	f240 4116 	movw	r1, #1046	; 0x416
 80153d8:	fb01 f303 	mul.w	r3, r1, r3
 80153dc:	4413      	add	r3, r2
 80153de:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80153e2:	781b      	ldrb	r3, [r3, #0]
 80153e4:	461a      	mov	r2, r3
 80153e6:	4613      	mov	r3, r2
 80153e8:	00db      	lsls	r3, r3, #3
 80153ea:	1a9a      	subs	r2, r3, r2
 80153ec:	4b3a      	ldr	r3, [pc, #232]	; (80154d8 <readCanToStructs+0x3824>)
 80153ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80153f2:	885b      	ldrh	r3, [r3, #2]
 80153f4:	4938      	ldr	r1, [pc, #224]	; (80154d8 <readCanToStructs+0x3824>)
 80153f6:	011b      	lsls	r3, r3, #4
 80153f8:	440b      	add	r3, r1
 80153fa:	330c      	adds	r3, #12
 80153fc:	781b      	ldrb	r3, [r3, #0]
 80153fe:	3b01      	subs	r3, #1
 8015400:	4413      	add	r3, r2
 8015402:	2b01      	cmp	r3, #1
 8015404:	d919      	bls.n	801543a <readCanToStructs+0x3786>
					if(Debug_flag == 1)
 8015406:	4b36      	ldr	r3, [pc, #216]	; (80154e0 <readCanToStructs+0x382c>)
 8015408:	781b      	ldrb	r3, [r3, #0]
 801540a:	2b01      	cmp	r3, #1
 801540c:	d105      	bne.n	801541a <readCanToStructs+0x3766>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 801540e:	4b35      	ldr	r3, [pc, #212]	; (80154e4 <readCanToStructs+0x3830>)
 8015410:	881b      	ldrh	r3, [r3, #0]
 8015412:	4619      	mov	r1, r3
 8015414:	4837      	ldr	r0, [pc, #220]	; (80154f4 <readCanToStructs+0x3840>)
 8015416:	f011 fbe9 	bl	8026bec <iprintf>
					Is_CAN_Exchange_happening = YES;
 801541a:	4b34      	ldr	r3, [pc, #208]	; (80154ec <readCanToStructs+0x3838>)
 801541c:	2201      	movs	r2, #1
 801541e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8015420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015424:	4a2d      	ldr	r2, [pc, #180]	; (80154dc <readCanToStructs+0x3828>)
 8015426:	f240 4116 	movw	r1, #1046	; 0x416
 801542a:	fb01 f303 	mul.w	r3, r1, r3
 801542e:	4413      	add	r3, r2
 8015430:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015434:	2200      	movs	r2, #0
 8015436:	701a      	strb	r2, [r3, #0]
				break;
 8015438:	e024      	b.n	8015484 <readCanToStructs+0x37d0>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 801543a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801543e:	4a27      	ldr	r2, [pc, #156]	; (80154dc <readCanToStructs+0x3828>)
 8015440:	f240 4116 	movw	r1, #1046	; 0x416
 8015444:	fb01 f303 	mul.w	r3, r1, r3
 8015448:	4413      	add	r3, r2
 801544a:	f203 4314 	addw	r3, r3, #1044	; 0x414
 801544e:	2201      	movs	r2, #1
 8015450:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 8015452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015456:	4921      	ldr	r1, [pc, #132]	; (80154dc <readCanToStructs+0x3828>)
 8015458:	f240 4216 	movw	r2, #1046	; 0x416
 801545c:	fb03 f202 	mul.w	r2, r3, r2
 8015460:	440a      	add	r2, r1
 8015462:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8015466:	7812      	ldrb	r2, [r2, #0]
 8015468:	3201      	adds	r2, #1
 801546a:	b2d0      	uxtb	r0, r2
 801546c:	4a1b      	ldr	r2, [pc, #108]	; (80154dc <readCanToStructs+0x3828>)
 801546e:	f240 4116 	movw	r1, #1046	; 0x416
 8015472:	fb01 f303 	mul.w	r3, r1, r3
 8015476:	4413      	add	r3, r2
 8015478:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801547c:	4602      	mov	r2, r0
 801547e:	701a      	strb	r2, [r3, #0]
				break;
 8015480:	e000      	b.n	8015484 <readCanToStructs+0x37d0>
				break;
 8015482:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8015484:	4b14      	ldr	r3, [pc, #80]	; (80154d8 <readCanToStructs+0x3824>)
 8015486:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801548a:	885b      	ldrh	r3, [r3, #2]
 801548c:	011b      	lsls	r3, r3, #4
 801548e:	4a12      	ldr	r2, [pc, #72]	; (80154d8 <readCanToStructs+0x3824>)
 8015490:	4413      	add	r3, r2
 8015492:	2210      	movs	r2, #16
 8015494:	2100      	movs	r1, #0
 8015496:	4618      	mov	r0, r3
 8015498:	f011 fac0 	bl	8026a1c <memset>
			canRead.Out++;
 801549c:	4b0e      	ldr	r3, [pc, #56]	; (80154d8 <readCanToStructs+0x3824>)
 801549e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80154a2:	885b      	ldrh	r3, [r3, #2]
 80154a4:	3301      	adds	r3, #1
 80154a6:	b29a      	uxth	r2, r3
 80154a8:	4b0b      	ldr	r3, [pc, #44]	; (80154d8 <readCanToStructs+0x3824>)
 80154aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80154ae:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 80154b0:	4b09      	ldr	r3, [pc, #36]	; (80154d8 <readCanToStructs+0x3824>)
 80154b2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80154b6:	885b      	ldrh	r3, [r3, #2]
 80154b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80154bc:	d104      	bne.n	80154c8 <readCanToStructs+0x3814>
				canRead.Out = 0;
 80154be:	4b06      	ldr	r3, [pc, #24]	; (80154d8 <readCanToStructs+0x3824>)
 80154c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80154c4:	2200      	movs	r2, #0
 80154c6:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 80154c8:	f7fc fb9e 	bl	8011c08 <canDataReady>
 80154cc:	4603      	mov	r3, r0
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	f47e af9b 	bne.w	801440a <readCanToStructs+0x2756>
		}
		/* __________ MEDHA _________ */
	}
	break;
 80154d4:	f000 bcdc 	b.w	8015e90 <readCanToStructs+0x41dc>
 80154d8:	20007264 	.word	0x20007264
 80154dc:	20006a38 	.word	0x20006a38
 80154e0:	20000bbb 	.word	0x20000bbb
 80154e4:	20000bb8 	.word	0x20000bb8
 80154e8:	0802b8c4 	.word	0x0802b8c4
 80154ec:	2000030b 	.word	0x2000030b
 80154f0:	0802b8d8 	.word	0x0802b8d8
 80154f4:	0802b900 	.word	0x0802b900
	case KYOSAN:
	{
		/* __________ KYOSAN _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 80154f8:	4bb3      	ldr	r3, [pc, #716]	; (80157c8 <readCanToStructs+0x3b14>)
 80154fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80154fe:	885b      	ldrh	r3, [r3, #2]
 8015500:	4ab1      	ldr	r2, [pc, #708]	; (80157c8 <readCanToStructs+0x3b14>)
 8015502:	011b      	lsls	r3, r3, #4
 8015504:	4413      	add	r3, r2
 8015506:	330f      	adds	r3, #15
 8015508:	781b      	ldrb	r3, [r3, #0]
 801550a:	3b01      	subs	r3, #1
 801550c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8015510:	4bad      	ldr	r3, [pc, #692]	; (80157c8 <readCanToStructs+0x3b14>)
 8015512:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015516:	885b      	ldrh	r3, [r3, #2]
 8015518:	4aab      	ldr	r2, [pc, #684]	; (80157c8 <readCanToStructs+0x3b14>)
 801551a:	011b      	lsls	r3, r3, #4
 801551c:	4413      	add	r3, r2
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015524:	2b05      	cmp	r3, #5
 8015526:	f200 8487 	bhi.w	8015e38 <readCanToStructs+0x4184>
 801552a:	a201      	add	r2, pc, #4	; (adr r2, 8015530 <readCanToStructs+0x387c>)
 801552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015530:	08015921 	.word	0x08015921
 8015534:	08015e39 	.word	0x08015e39
 8015538:	08015549 	.word	0x08015549
 801553c:	08015721 	.word	0x08015721
 8015540:	08015ad1 	.word	0x08015ad1
 8015544:	08015c73 	.word	0x08015c73
			{

			case EIPC1_RELAYS_2_OTHER:
				uc_pp_charPtr = (uint8_t *)&Kyosan_CANRelays;
 8015548:	4ba0      	ldr	r3, [pc, #640]	; (80157cc <readCanToStructs+0x3b18>)
 801554a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801554c:	4b9e      	ldr	r3, [pc, #632]	; (80157c8 <readCanToStructs+0x3b14>)
 801554e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015552:	885b      	ldrh	r3, [r3, #2]
 8015554:	4a9c      	ldr	r2, [pc, #624]	; (80157c8 <readCanToStructs+0x3b14>)
 8015556:	011b      	lsls	r3, r3, #4
 8015558:	4413      	add	r3, r2
 801555a:	3304      	adds	r3, #4
 801555c:	781b      	ldrb	r3, [r3, #0]
 801555e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8015562:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015566:	2b00      	cmp	r3, #0
 8015568:	d110      	bne.n	801558c <readCanToStructs+0x38d8>
				{
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 801556a:	2240      	movs	r2, #64	; 0x40
 801556c:	2100      	movs	r1, #0
 801556e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015570:	f011 fa54 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8015574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015578:	4a95      	ldr	r2, [pc, #596]	; (80157d0 <readCanToStructs+0x3b1c>)
 801557a:	f240 4116 	movw	r1, #1046	; 0x416
 801557e:	fb01 f303 	mul.w	r3, r1, r3
 8015582:	4413      	add	r3, r2
 8015584:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8015588:	2200      	movs	r2, #0
 801558a:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 801558c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015590:	4a8f      	ldr	r2, [pc, #572]	; (80157d0 <readCanToStructs+0x3b1c>)
 8015592:	f240 4116 	movw	r1, #1046	; 0x416
 8015596:	fb01 f303 	mul.w	r3, r1, r3
 801559a:	4413      	add	r3, r2
 801559c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80155a6:	429a      	cmp	r2, r3
 80155a8:	d015      	beq.n	80155d6 <readCanToStructs+0x3922>
				{
					printf("EIPC1RELAYS Seq no MisMatch\n");
 80155aa:	488a      	ldr	r0, [pc, #552]	; (80157d4 <readCanToStructs+0x3b20>)
 80155ac:	f011 fbba 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 80155b0:	2240      	movs	r2, #64	; 0x40
 80155b2:	2100      	movs	r1, #0
 80155b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155b6:	f011 fa31 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80155ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80155be:	4a84      	ldr	r2, [pc, #528]	; (80157d0 <readCanToStructs+0x3b1c>)
 80155c0:	f240 4116 	movw	r1, #1046	; 0x416
 80155c4:	fb01 f303 	mul.w	r3, r1, r3
 80155c8:	4413      	add	r3, r2
 80155ca:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80155ce:	2200      	movs	r2, #0
 80155d0:	701a      	strb	r2, [r3, #0]
					break;
 80155d2:	f000 bc32 	b.w	8015e3a <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 80155d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80155da:	4613      	mov	r3, r2
 80155dc:	00db      	lsls	r3, r3, #3
 80155de:	1a9b      	subs	r3, r3, r2
 80155e0:	461a      	mov	r2, r3
 80155e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155e4:	4413      	add	r3, r2
 80155e6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80155e8:	2301      	movs	r3, #1
 80155ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80155ee:	e016      	b.n	801561e <readCanToStructs+0x396a>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80155f0:	4b75      	ldr	r3, [pc, #468]	; (80157c8 <readCanToStructs+0x3b14>)
 80155f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80155f6:	885b      	ldrh	r3, [r3, #2]
 80155f8:	461a      	mov	r2, r3
 80155fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80155fe:	4972      	ldr	r1, [pc, #456]	; (80157c8 <readCanToStructs+0x3b14>)
 8015600:	0112      	lsls	r2, r2, #4
 8015602:	440a      	add	r2, r1
 8015604:	4413      	add	r3, r2
 8015606:	3304      	adds	r3, #4
 8015608:	781a      	ldrb	r2, [r3, #0]
 801560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801560c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015610:	3301      	adds	r3, #1
 8015612:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015614:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015618:	3301      	adds	r3, #1
 801561a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801561e:	4b6a      	ldr	r3, [pc, #424]	; (80157c8 <readCanToStructs+0x3b14>)
 8015620:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015624:	885b      	ldrh	r3, [r3, #2]
 8015626:	4a68      	ldr	r2, [pc, #416]	; (80157c8 <readCanToStructs+0x3b14>)
 8015628:	011b      	lsls	r3, r3, #4
 801562a:	4413      	add	r3, r2
 801562c:	330c      	adds	r3, #12
 801562e:	781b      	ldrb	r3, [r3, #0]
 8015630:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015634:	429a      	cmp	r2, r3
 8015636:	d3db      	bcc.n	80155f0 <readCanToStructs+0x393c>
				}
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_RELAYS_t))
 8015638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801563c:	4a64      	ldr	r2, [pc, #400]	; (80157d0 <readCanToStructs+0x3b1c>)
 801563e:	f240 4116 	movw	r1, #1046	; 0x416
 8015642:	fb01 f303 	mul.w	r3, r1, r3
 8015646:	4413      	add	r3, r2
 8015648:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	461a      	mov	r2, r3
 8015650:	4613      	mov	r3, r2
 8015652:	00db      	lsls	r3, r3, #3
 8015654:	1a9a      	subs	r2, r3, r2
 8015656:	4b5c      	ldr	r3, [pc, #368]	; (80157c8 <readCanToStructs+0x3b14>)
 8015658:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801565c:	885b      	ldrh	r3, [r3, #2]
 801565e:	495a      	ldr	r1, [pc, #360]	; (80157c8 <readCanToStructs+0x3b14>)
 8015660:	011b      	lsls	r3, r3, #4
 8015662:	440b      	add	r3, r1
 8015664:	330c      	adds	r3, #12
 8015666:	781b      	ldrb	r3, [r3, #0]
 8015668:	3b01      	subs	r3, #1
 801566a:	4413      	add	r3, r2
 801566c:	2b3f      	cmp	r3, #63	; 0x3f
 801566e:	d933      	bls.n	80156d8 <readCanToStructs+0x3a24>
				{
					if(Debug_flag == 1)
 8015670:	4b59      	ldr	r3, [pc, #356]	; (80157d8 <readCanToStructs+0x3b24>)
 8015672:	781b      	ldrb	r3, [r3, #0]
 8015674:	2b01      	cmp	r3, #1
 8015676:	d105      	bne.n	8015684 <readCanToStructs+0x39d0>
					{
						printf("Rcv Relays1-O:%u\n",Kyosan_CANRelays.Index);
 8015678:	4b54      	ldr	r3, [pc, #336]	; (80157cc <readCanToStructs+0x3b18>)
 801567a:	781b      	ldrb	r3, [r3, #0]
 801567c:	4619      	mov	r1, r3
 801567e:	4857      	ldr	r0, [pc, #348]	; (80157dc <readCanToStructs+0x3b28>)
 8015680:	f011 fab4 	bl	8026bec <iprintf>
					}
					memcpy(&Kyosan_OtherRelays,&Kyosan_CANRelays,sizeof(KYOSAN_RELAYS_t));
 8015684:	4a56      	ldr	r2, [pc, #344]	; (80157e0 <readCanToStructs+0x3b2c>)
 8015686:	4b51      	ldr	r3, [pc, #324]	; (80157cc <readCanToStructs+0x3b18>)
 8015688:	4610      	mov	r0, r2
 801568a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801568e:	4602      	mov	r2, r0
 8015690:	4619      	mov	r1, r3
 8015692:	f8d1 c000 	ldr.w	ip, [r1]
 8015696:	684e      	ldr	r6, [r1, #4]
 8015698:	688d      	ldr	r5, [r1, #8]
 801569a:	68c9      	ldr	r1, [r1, #12]
 801569c:	f8c2 c000 	str.w	ip, [r2]
 80156a0:	6056      	str	r6, [r2, #4]
 80156a2:	6095      	str	r5, [r2, #8]
 80156a4:	60d1      	str	r1, [r2, #12]
 80156a6:	3310      	adds	r3, #16
 80156a8:	3010      	adds	r0, #16
 80156aa:	42a3      	cmp	r3, r4
 80156ac:	d1ef      	bne.n	801568e <readCanToStructs+0x39da>
					LastCANReceived_Clk_Kyosan = HAL_GetTick();
 80156ae:	f004 fa93 	bl	8019bd8 <HAL_GetTick>
 80156b2:	4603      	mov	r3, r0
 80156b4:	4a4b      	ldr	r2, [pc, #300]	; (80157e4 <readCanToStructs+0x3b30>)
 80156b6:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = SET;
 80156b8:	4b4b      	ldr	r3, [pc, #300]	; (80157e8 <readCanToStructs+0x3b34>)
 80156ba:	2201      	movs	r2, #1
 80156bc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80156be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80156c2:	4a43      	ldr	r2, [pc, #268]	; (80157d0 <readCanToStructs+0x3b1c>)
 80156c4:	f240 4116 	movw	r1, #1046	; 0x416
 80156c8:	fb01 f303 	mul.w	r3, r1, r3
 80156cc:	4413      	add	r3, r2
 80156ce:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80156d2:	2200      	movs	r2, #0
 80156d4:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
 80156d6:	e3b0      	b.n	8015e3a <readCanToStructs+0x4186>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 80156d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80156dc:	4a3c      	ldr	r2, [pc, #240]	; (80157d0 <readCanToStructs+0x3b1c>)
 80156de:	f240 4116 	movw	r1, #1046	; 0x416
 80156e2:	fb01 f303 	mul.w	r3, r1, r3
 80156e6:	4413      	add	r3, r2
 80156e8:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 80156ec:	2201      	movs	r2, #1
 80156ee:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 80156f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80156f4:	4936      	ldr	r1, [pc, #216]	; (80157d0 <readCanToStructs+0x3b1c>)
 80156f6:	f240 4216 	movw	r2, #1046	; 0x416
 80156fa:	fb03 f202 	mul.w	r2, r3, r2
 80156fe:	440a      	add	r2, r1
 8015700:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8015704:	7812      	ldrb	r2, [r2, #0]
 8015706:	3201      	adds	r2, #1
 8015708:	b2d0      	uxtb	r0, r2
 801570a:	4a31      	ldr	r2, [pc, #196]	; (80157d0 <readCanToStructs+0x3b1c>)
 801570c:	f240 4116 	movw	r1, #1046	; 0x416
 8015710:	fb01 f303 	mul.w	r3, r1, r3
 8015714:	4413      	add	r3, r2
 8015716:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801571a:	4602      	mov	r2, r0
 801571c:	701a      	strb	r2, [r3, #0]
				break;
 801571e:	e38c      	b.n	8015e3a <readCanToStructs+0x4186>

			case EIPC2_RELAYS_2_OTHER:
				uc_pp_charPtr = (uint8_t *)&Kyosan_CANRelays;
 8015720:	4b2a      	ldr	r3, [pc, #168]	; (80157cc <readCanToStructs+0x3b18>)
 8015722:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8015724:	4b28      	ldr	r3, [pc, #160]	; (80157c8 <readCanToStructs+0x3b14>)
 8015726:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801572a:	885b      	ldrh	r3, [r3, #2]
 801572c:	4a26      	ldr	r2, [pc, #152]	; (80157c8 <readCanToStructs+0x3b14>)
 801572e:	011b      	lsls	r3, r3, #4
 8015730:	4413      	add	r3, r2
 8015732:	3304      	adds	r3, #4
 8015734:	781b      	ldrb	r3, [r3, #0]
 8015736:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801573a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801573e:	2b00      	cmp	r3, #0
 8015740:	d110      	bne.n	8015764 <readCanToStructs+0x3ab0>
				{
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 8015742:	2240      	movs	r2, #64	; 0x40
 8015744:	2100      	movs	r1, #0
 8015746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015748:	f011 f968 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 801574c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015750:	4a1f      	ldr	r2, [pc, #124]	; (80157d0 <readCanToStructs+0x3b1c>)
 8015752:	f240 4116 	movw	r1, #1046	; 0x416
 8015756:	fb01 f303 	mul.w	r3, r1, r3
 801575a:	4413      	add	r3, r2
 801575c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8015760:	2200      	movs	r2, #0
 8015762:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8015764:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015768:	4a19      	ldr	r2, [pc, #100]	; (80157d0 <readCanToStructs+0x3b1c>)
 801576a:	f240 4116 	movw	r1, #1046	; 0x416
 801576e:	fb01 f303 	mul.w	r3, r1, r3
 8015772:	4413      	add	r3, r2
 8015774:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8015778:	781b      	ldrb	r3, [r3, #0]
 801577a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801577e:	429a      	cmp	r2, r3
 8015780:	d014      	beq.n	80157ac <readCanToStructs+0x3af8>
				{
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 8015782:	481a      	ldr	r0, [pc, #104]	; (80157ec <readCanToStructs+0x3b38>)
 8015784:	f011 face 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 8015788:	2240      	movs	r2, #64	; 0x40
 801578a:	2100      	movs	r1, #0
 801578c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801578e:	f011 f945 	bl	8026a1c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8015792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015796:	4a0e      	ldr	r2, [pc, #56]	; (80157d0 <readCanToStructs+0x3b1c>)
 8015798:	f240 4116 	movw	r1, #1046	; 0x416
 801579c:	fb01 f303 	mul.w	r3, r1, r3
 80157a0:	4413      	add	r3, r2
 80157a2:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80157a6:	2200      	movs	r2, #0
 80157a8:	701a      	strb	r2, [r3, #0]
					break;
 80157aa:	e346      	b.n	8015e3a <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 80157ac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80157b0:	4613      	mov	r3, r2
 80157b2:	00db      	lsls	r3, r3, #3
 80157b4:	1a9b      	subs	r3, r3, r2
 80157b6:	461a      	mov	r2, r3
 80157b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ba:	4413      	add	r3, r2
 80157bc:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80157be:	2301      	movs	r3, #1
 80157c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80157c4:	e02b      	b.n	801581e <readCanToStructs+0x3b6a>
 80157c6:	bf00      	nop
 80157c8:	20007264 	.word	0x20007264
 80157cc:	2000b524 	.word	0x2000b524
 80157d0:	20006a38 	.word	0x20006a38
 80157d4:	0802b838 	.word	0x0802b838
 80157d8:	20000bbb 	.word	0x20000bbb
 80157dc:	0802ba84 	.word	0x0802ba84
 80157e0:	2000b4e4 	.word	0x2000b4e4
 80157e4:	2000b5e8 	.word	0x2000b5e8
 80157e8:	2000030b 	.word	0x2000030b
 80157ec:	0802b868 	.word	0x0802b868
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80157f0:	4bad      	ldr	r3, [pc, #692]	; (8015aa8 <readCanToStructs+0x3df4>)
 80157f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80157f6:	885b      	ldrh	r3, [r3, #2]
 80157f8:	461a      	mov	r2, r3
 80157fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80157fe:	49aa      	ldr	r1, [pc, #680]	; (8015aa8 <readCanToStructs+0x3df4>)
 8015800:	0112      	lsls	r2, r2, #4
 8015802:	440a      	add	r2, r1
 8015804:	4413      	add	r3, r2
 8015806:	3304      	adds	r3, #4
 8015808:	781a      	ldrb	r2, [r3, #0]
 801580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801580c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015810:	3301      	adds	r3, #1
 8015812:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015814:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015818:	3301      	adds	r3, #1
 801581a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801581e:	4ba2      	ldr	r3, [pc, #648]	; (8015aa8 <readCanToStructs+0x3df4>)
 8015820:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015824:	885b      	ldrh	r3, [r3, #2]
 8015826:	4aa0      	ldr	r2, [pc, #640]	; (8015aa8 <readCanToStructs+0x3df4>)
 8015828:	011b      	lsls	r3, r3, #4
 801582a:	4413      	add	r3, r2
 801582c:	330c      	adds	r3, #12
 801582e:	781b      	ldrb	r3, [r3, #0]
 8015830:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015834:	429a      	cmp	r2, r3
 8015836:	d3db      	bcc.n	80157f0 <readCanToStructs+0x3b3c>
				}
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_RELAYS_t))
 8015838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801583c:	4a9b      	ldr	r2, [pc, #620]	; (8015aac <readCanToStructs+0x3df8>)
 801583e:	f240 4116 	movw	r1, #1046	; 0x416
 8015842:	fb01 f303 	mul.w	r3, r1, r3
 8015846:	4413      	add	r3, r2
 8015848:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801584c:	781b      	ldrb	r3, [r3, #0]
 801584e:	461a      	mov	r2, r3
 8015850:	4613      	mov	r3, r2
 8015852:	00db      	lsls	r3, r3, #3
 8015854:	1a9a      	subs	r2, r3, r2
 8015856:	4b94      	ldr	r3, [pc, #592]	; (8015aa8 <readCanToStructs+0x3df4>)
 8015858:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801585c:	885b      	ldrh	r3, [r3, #2]
 801585e:	4992      	ldr	r1, [pc, #584]	; (8015aa8 <readCanToStructs+0x3df4>)
 8015860:	011b      	lsls	r3, r3, #4
 8015862:	440b      	add	r3, r1
 8015864:	330c      	adds	r3, #12
 8015866:	781b      	ldrb	r3, [r3, #0]
 8015868:	3b01      	subs	r3, #1
 801586a:	4413      	add	r3, r2
 801586c:	2b3f      	cmp	r3, #63	; 0x3f
 801586e:	d933      	bls.n	80158d8 <readCanToStructs+0x3c24>
				{
					if(Debug_flag == 1)
 8015870:	4b8f      	ldr	r3, [pc, #572]	; (8015ab0 <readCanToStructs+0x3dfc>)
 8015872:	781b      	ldrb	r3, [r3, #0]
 8015874:	2b01      	cmp	r3, #1
 8015876:	d105      	bne.n	8015884 <readCanToStructs+0x3bd0>
					{
						printf("Rcv Relays2-O:%u\n",Kyosan_CANRelays.Index);
 8015878:	4b8e      	ldr	r3, [pc, #568]	; (8015ab4 <readCanToStructs+0x3e00>)
 801587a:	781b      	ldrb	r3, [r3, #0]
 801587c:	4619      	mov	r1, r3
 801587e:	488e      	ldr	r0, [pc, #568]	; (8015ab8 <readCanToStructs+0x3e04>)
 8015880:	f011 f9b4 	bl	8026bec <iprintf>
					}
					memcpy(&Kyosan_OtherRelays,&Kyosan_CANRelays,sizeof(KYOSAN_RELAYS_t));
 8015884:	4a8d      	ldr	r2, [pc, #564]	; (8015abc <readCanToStructs+0x3e08>)
 8015886:	4b8b      	ldr	r3, [pc, #556]	; (8015ab4 <readCanToStructs+0x3e00>)
 8015888:	4610      	mov	r0, r2
 801588a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801588e:	4602      	mov	r2, r0
 8015890:	4619      	mov	r1, r3
 8015892:	f8d1 c000 	ldr.w	ip, [r1]
 8015896:	684e      	ldr	r6, [r1, #4]
 8015898:	688d      	ldr	r5, [r1, #8]
 801589a:	68c9      	ldr	r1, [r1, #12]
 801589c:	f8c2 c000 	str.w	ip, [r2]
 80158a0:	6056      	str	r6, [r2, #4]
 80158a2:	6095      	str	r5, [r2, #8]
 80158a4:	60d1      	str	r1, [r2, #12]
 80158a6:	3310      	adds	r3, #16
 80158a8:	3010      	adds	r0, #16
 80158aa:	42a3      	cmp	r3, r4
 80158ac:	d1ef      	bne.n	801588e <readCanToStructs+0x3bda>
					LastCANReceived_Clk_Kyosan = HAL_GetTick();
 80158ae:	f004 f993 	bl	8019bd8 <HAL_GetTick>
 80158b2:	4603      	mov	r3, r0
 80158b4:	4a82      	ldr	r2, [pc, #520]	; (8015ac0 <readCanToStructs+0x3e0c>)
 80158b6:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = SET;
 80158b8:	4b82      	ldr	r3, [pc, #520]	; (8015ac4 <readCanToStructs+0x3e10>)
 80158ba:	2201      	movs	r2, #1
 80158bc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80158be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80158c2:	4a7a      	ldr	r2, [pc, #488]	; (8015aac <readCanToStructs+0x3df8>)
 80158c4:	f240 4116 	movw	r1, #1046	; 0x416
 80158c8:	fb01 f303 	mul.w	r3, r1, r3
 80158cc:	4413      	add	r3, r2
 80158ce:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80158d2:	2200      	movs	r2, #0
 80158d4:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
 80158d6:	e2b0      	b.n	8015e3a <readCanToStructs+0x4186>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 80158d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80158dc:	4a73      	ldr	r2, [pc, #460]	; (8015aac <readCanToStructs+0x3df8>)
 80158de:	f240 4116 	movw	r1, #1046	; 0x416
 80158e2:	fb01 f303 	mul.w	r3, r1, r3
 80158e6:	4413      	add	r3, r2
 80158e8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80158ec:	2201      	movs	r2, #1
 80158ee:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 80158f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80158f4:	496d      	ldr	r1, [pc, #436]	; (8015aac <readCanToStructs+0x3df8>)
 80158f6:	f240 4216 	movw	r2, #1046	; 0x416
 80158fa:	fb03 f202 	mul.w	r2, r3, r2
 80158fe:	440a      	add	r2, r1
 8015900:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8015904:	7812      	ldrb	r2, [r2, #0]
 8015906:	3201      	adds	r2, #1
 8015908:	b2d0      	uxtb	r0, r2
 801590a:	4a68      	ldr	r2, [pc, #416]	; (8015aac <readCanToStructs+0x3df8>)
 801590c:	f240 4116 	movw	r1, #1046	; 0x416
 8015910:	fb01 f303 	mul.w	r3, r1, r3
 8015914:	4413      	add	r3, r2
 8015916:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801591a:	4602      	mov	r2, r0
 801591c:	701a      	strb	r2, [r3, #0]
				break;
 801591e:	e28c      	b.n	8015e3a <readCanToStructs+0x4186>

			case CAN_FAULT_INJECTION:

				uc_pp_charPtr = (uint8_t *)&KyosanFaultInjection_st;
 8015920:	4b69      	ldr	r3, [pc, #420]	; (8015ac8 <readCanToStructs+0x3e14>)
 8015922:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8015924:	4b60      	ldr	r3, [pc, #384]	; (8015aa8 <readCanToStructs+0x3df4>)
 8015926:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801592a:	885b      	ldrh	r3, [r3, #2]
 801592c:	4a5e      	ldr	r2, [pc, #376]	; (8015aa8 <readCanToStructs+0x3df4>)
 801592e:	011b      	lsls	r3, r3, #4
 8015930:	4413      	add	r3, r2
 8015932:	3304      	adds	r3, #4
 8015934:	781b      	ldrb	r3, [r3, #0]
 8015936:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801593a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801593e:	2b00      	cmp	r3, #0
 8015940:	d110      	bne.n	8015964 <readCanToStructs+0x3cb0>
				{
					memset(uc_pp_charPtr, 0, sizeof(KYOSAN_FAULT_INJECTION_t));
 8015942:	2208      	movs	r2, #8
 8015944:	2100      	movs	r1, #0
 8015946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015948:	f011 f868 	bl	8026a1c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801594c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015950:	4a56      	ldr	r2, [pc, #344]	; (8015aac <readCanToStructs+0x3df8>)
 8015952:	f240 4116 	movw	r1, #1046	; 0x416
 8015956:	fb01 f303 	mul.w	r3, r1, r3
 801595a:	4413      	add	r3, r2
 801595c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8015960:	2200      	movs	r2, #0
 8015962:	701a      	strb	r2, [r3, #0]
				}
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8015964:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015968:	4a50      	ldr	r2, [pc, #320]	; (8015aac <readCanToStructs+0x3df8>)
 801596a:	f240 4116 	movw	r1, #1046	; 0x416
 801596e:	fb01 f303 	mul.w	r3, r1, r3
 8015972:	4413      	add	r3, r2
 8015974:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8015978:	781b      	ldrb	r3, [r3, #0]
 801597a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801597e:	429a      	cmp	r2, r3
 8015980:	d011      	beq.n	80159a6 <readCanToStructs+0x3cf2>
				{
					memset(uc_pp_charPtr, 0, sizeof(KYOSAN_FAULT_INJECTION_t));
 8015982:	2208      	movs	r2, #8
 8015984:	2100      	movs	r1, #0
 8015986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015988:	f011 f848 	bl	8026a1c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801598c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015990:	4a46      	ldr	r2, [pc, #280]	; (8015aac <readCanToStructs+0x3df8>)
 8015992:	f240 4116 	movw	r1, #1046	; 0x416
 8015996:	fb01 f303 	mul.w	r3, r1, r3
 801599a:	4413      	add	r3, r2
 801599c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80159a0:	2200      	movs	r2, #0
 80159a2:	701a      	strb	r2, [r3, #0]
					break;
 80159a4:	e249      	b.n	8015e3a <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 80159a6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80159aa:	4613      	mov	r3, r2
 80159ac:	00db      	lsls	r3, r3, #3
 80159ae:	1a9b      	subs	r3, r3, r2
 80159b0:	461a      	mov	r2, r3
 80159b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159b4:	4413      	add	r3, r2
 80159b6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80159b8:	2301      	movs	r3, #1
 80159ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80159be:	e016      	b.n	80159ee <readCanToStructs+0x3d3a>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80159c0:	4b39      	ldr	r3, [pc, #228]	; (8015aa8 <readCanToStructs+0x3df4>)
 80159c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80159c6:	885b      	ldrh	r3, [r3, #2]
 80159c8:	461a      	mov	r2, r3
 80159ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80159ce:	4936      	ldr	r1, [pc, #216]	; (8015aa8 <readCanToStructs+0x3df4>)
 80159d0:	0112      	lsls	r2, r2, #4
 80159d2:	440a      	add	r2, r1
 80159d4:	4413      	add	r3, r2
 80159d6:	3304      	adds	r3, #4
 80159d8:	781a      	ldrb	r2, [r3, #0]
 80159da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159dc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80159de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e0:	3301      	adds	r3, #1
 80159e2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80159e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80159e8:	3301      	adds	r3, #1
 80159ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80159ee:	4b2e      	ldr	r3, [pc, #184]	; (8015aa8 <readCanToStructs+0x3df4>)
 80159f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80159f4:	885b      	ldrh	r3, [r3, #2]
 80159f6:	4a2c      	ldr	r2, [pc, #176]	; (8015aa8 <readCanToStructs+0x3df4>)
 80159f8:	011b      	lsls	r3, r3, #4
 80159fa:	4413      	add	r3, r2
 80159fc:	330c      	adds	r3, #12
 80159fe:	781b      	ldrb	r3, [r3, #0]
 8015a00:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015a04:	429a      	cmp	r2, r3
 8015a06:	d3db      	bcc.n	80159c0 <readCanToStructs+0x3d0c>
				}
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_FAULT_INJECTION_t))
 8015a08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a0c:	4a27      	ldr	r2, [pc, #156]	; (8015aac <readCanToStructs+0x3df8>)
 8015a0e:	f240 4116 	movw	r1, #1046	; 0x416
 8015a12:	fb01 f303 	mul.w	r3, r1, r3
 8015a16:	4413      	add	r3, r2
 8015a18:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8015a1c:	781b      	ldrb	r3, [r3, #0]
 8015a1e:	461a      	mov	r2, r3
 8015a20:	4613      	mov	r3, r2
 8015a22:	00db      	lsls	r3, r3, #3
 8015a24:	1a9a      	subs	r2, r3, r2
 8015a26:	4b20      	ldr	r3, [pc, #128]	; (8015aa8 <readCanToStructs+0x3df4>)
 8015a28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015a2c:	885b      	ldrh	r3, [r3, #2]
 8015a2e:	491e      	ldr	r1, [pc, #120]	; (8015aa8 <readCanToStructs+0x3df4>)
 8015a30:	011b      	lsls	r3, r3, #4
 8015a32:	440b      	add	r3, r1
 8015a34:	330c      	adds	r3, #12
 8015a36:	781b      	ldrb	r3, [r3, #0]
 8015a38:	3b01      	subs	r3, #1
 8015a3a:	4413      	add	r3, r2
 8015a3c:	2b07      	cmp	r3, #7
 8015a3e:	d90f      	bls.n	8015a60 <readCanToStructs+0x3dac>
				{
					printf("Received CAN_FAULT_INJECTION\n");
 8015a40:	4822      	ldr	r0, [pc, #136]	; (8015acc <readCanToStructs+0x3e18>)
 8015a42:	f011 f96f 	bl	8026d24 <puts>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8015a46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a4a:	4a18      	ldr	r2, [pc, #96]	; (8015aac <readCanToStructs+0x3df8>)
 8015a4c:	f240 4116 	movw	r1, #1046	; 0x416
 8015a50:	fb01 f303 	mul.w	r3, r1, r3
 8015a54:	4413      	add	r3, r2
 8015a56:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
				}
				break;
 8015a5e:	e1ec      	b.n	8015e3a <readCanToStructs+0x4186>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8015a60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a64:	4a11      	ldr	r2, [pc, #68]	; (8015aac <readCanToStructs+0x3df8>)
 8015a66:	f240 4116 	movw	r1, #1046	; 0x416
 8015a6a:	fb01 f303 	mul.w	r3, r1, r3
 8015a6e:	4413      	add	r3, r2
 8015a70:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8015a74:	2201      	movs	r2, #1
 8015a76:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8015a78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a7c:	490b      	ldr	r1, [pc, #44]	; (8015aac <readCanToStructs+0x3df8>)
 8015a7e:	f240 4216 	movw	r2, #1046	; 0x416
 8015a82:	fb03 f202 	mul.w	r2, r3, r2
 8015a86:	440a      	add	r2, r1
 8015a88:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8015a8c:	7812      	ldrb	r2, [r2, #0]
 8015a8e:	3201      	adds	r2, #1
 8015a90:	b2d0      	uxtb	r0, r2
 8015a92:	4a06      	ldr	r2, [pc, #24]	; (8015aac <readCanToStructs+0x3df8>)
 8015a94:	f240 4116 	movw	r1, #1046	; 0x416
 8015a98:	fb01 f303 	mul.w	r3, r1, r3
 8015a9c:	4413      	add	r3, r2
 8015a9e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8015aa2:	4602      	mov	r2, r0
 8015aa4:	701a      	strb	r2, [r3, #0]
				break;
 8015aa6:	e1c8      	b.n	8015e3a <readCanToStructs+0x4186>
 8015aa8:	20007264 	.word	0x20007264
 8015aac:	20006a38 	.word	0x20006a38
 8015ab0:	20000bbb 	.word	0x20000bbb
 8015ab4:	2000b524 	.word	0x2000b524
 8015ab8:	0802ba98 	.word	0x0802ba98
 8015abc:	2000b4e4 	.word	0x2000b4e4
 8015ac0:	2000b5e8 	.word	0x2000b5e8
 8015ac4:	2000030b 	.word	0x2000030b
 8015ac8:	2000b488 	.word	0x2000b488
 8015acc:	0802ba34 	.word	0x0802ba34

			case DAT_CRC_EXCHANGE_1:
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8015ad0:	4bbe      	ldr	r3, [pc, #760]	; (8015dcc <readCanToStructs+0x4118>)
 8015ad2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8015ad4:	4bbe      	ldr	r3, [pc, #760]	; (8015dd0 <readCanToStructs+0x411c>)
 8015ad6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015ada:	885b      	ldrh	r3, [r3, #2]
 8015adc:	4abc      	ldr	r2, [pc, #752]	; (8015dd0 <readCanToStructs+0x411c>)
 8015ade:	011b      	lsls	r3, r3, #4
 8015ae0:	4413      	add	r3, r2
 8015ae2:	3304      	adds	r3, #4
 8015ae4:	781b      	ldrb	r3, [r3, #0]
 8015ae6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8015aea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d110      	bne.n	8015b14 <readCanToStructs+0x3e60>
				{
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8015af2:	2202      	movs	r2, #2
 8015af4:	2100      	movs	r1, #0
 8015af6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015af8:	f010 ff90 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8015afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015b00:	4ab4      	ldr	r2, [pc, #720]	; (8015dd4 <readCanToStructs+0x4120>)
 8015b02:	f240 4116 	movw	r1, #1046	; 0x416
 8015b06:	fb01 f303 	mul.w	r3, r1, r3
 8015b0a:	4413      	add	r3, r2
 8015b0c:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015b10:	2200      	movs	r2, #0
 8015b12:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 8015b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015b18:	4aae      	ldr	r2, [pc, #696]	; (8015dd4 <readCanToStructs+0x4120>)
 8015b1a:	f240 4116 	movw	r1, #1046	; 0x416
 8015b1e:	fb01 f303 	mul.w	r3, r1, r3
 8015b22:	4413      	add	r3, r2
 8015b24:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015b28:	781b      	ldrb	r3, [r3, #0]
 8015b2a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015b2e:	429a      	cmp	r2, r3
 8015b30:	d014      	beq.n	8015b5c <readCanToStructs+0x3ea8>
				{
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8015b32:	48a9      	ldr	r0, [pc, #676]	; (8015dd8 <readCanToStructs+0x4124>)
 8015b34:	f011 f8f6 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8015b38:	2202      	movs	r2, #2
 8015b3a:	2100      	movs	r1, #0
 8015b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b3e:	f010 ff6d 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8015b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015b46:	4aa3      	ldr	r2, [pc, #652]	; (8015dd4 <readCanToStructs+0x4120>)
 8015b48:	f240 4116 	movw	r1, #1046	; 0x416
 8015b4c:	fb01 f303 	mul.w	r3, r1, r3
 8015b50:	4413      	add	r3, r2
 8015b52:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015b56:	2200      	movs	r2, #0
 8015b58:	701a      	strb	r2, [r3, #0]
					break;
 8015b5a:	e16e      	b.n	8015e3a <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8015b5c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015b60:	4613      	mov	r3, r2
 8015b62:	00db      	lsls	r3, r3, #3
 8015b64:	1a9b      	subs	r3, r3, r2
 8015b66:	461a      	mov	r2, r3
 8015b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b6a:	4413      	add	r3, r2
 8015b6c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015b6e:	2301      	movs	r3, #1
 8015b70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015b74:	e016      	b.n	8015ba4 <readCanToStructs+0x3ef0>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8015b76:	4b96      	ldr	r3, [pc, #600]	; (8015dd0 <readCanToStructs+0x411c>)
 8015b78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015b7c:	885b      	ldrh	r3, [r3, #2]
 8015b7e:	461a      	mov	r2, r3
 8015b80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015b84:	4992      	ldr	r1, [pc, #584]	; (8015dd0 <readCanToStructs+0x411c>)
 8015b86:	0112      	lsls	r2, r2, #4
 8015b88:	440a      	add	r2, r1
 8015b8a:	4413      	add	r3, r2
 8015b8c:	3304      	adds	r3, #4
 8015b8e:	781a      	ldrb	r2, [r3, #0]
 8015b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b92:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8015b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b96:	3301      	adds	r3, #1
 8015b98:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015b9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015b9e:	3301      	adds	r3, #1
 8015ba0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015ba4:	4b8a      	ldr	r3, [pc, #552]	; (8015dd0 <readCanToStructs+0x411c>)
 8015ba6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015baa:	885b      	ldrh	r3, [r3, #2]
 8015bac:	4a88      	ldr	r2, [pc, #544]	; (8015dd0 <readCanToStructs+0x411c>)
 8015bae:	011b      	lsls	r3, r3, #4
 8015bb0:	4413      	add	r3, r2
 8015bb2:	330c      	adds	r3, #12
 8015bb4:	781b      	ldrb	r3, [r3, #0]
 8015bb6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d3db      	bcc.n	8015b76 <readCanToStructs+0x3ec2>
				}
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8015bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015bc2:	4a84      	ldr	r2, [pc, #528]	; (8015dd4 <readCanToStructs+0x4120>)
 8015bc4:	f240 4116 	movw	r1, #1046	; 0x416
 8015bc8:	fb01 f303 	mul.w	r3, r1, r3
 8015bcc:	4413      	add	r3, r2
 8015bce:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015bd2:	781b      	ldrb	r3, [r3, #0]
 8015bd4:	461a      	mov	r2, r3
 8015bd6:	4613      	mov	r3, r2
 8015bd8:	00db      	lsls	r3, r3, #3
 8015bda:	1a9a      	subs	r2, r3, r2
 8015bdc:	4b7c      	ldr	r3, [pc, #496]	; (8015dd0 <readCanToStructs+0x411c>)
 8015bde:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015be2:	885b      	ldrh	r3, [r3, #2]
 8015be4:	497a      	ldr	r1, [pc, #488]	; (8015dd0 <readCanToStructs+0x411c>)
 8015be6:	011b      	lsls	r3, r3, #4
 8015be8:	440b      	add	r3, r1
 8015bea:	330c      	adds	r3, #12
 8015bec:	781b      	ldrb	r3, [r3, #0]
 8015bee:	3b01      	subs	r3, #1
 8015bf0:	4413      	add	r3, r2
 8015bf2:	2b01      	cmp	r3, #1
 8015bf4:	d919      	bls.n	8015c2a <readCanToStructs+0x3f76>
				{
					if(Debug_flag == 1)
 8015bf6:	4b79      	ldr	r3, [pc, #484]	; (8015ddc <readCanToStructs+0x4128>)
 8015bf8:	781b      	ldrb	r3, [r3, #0]
 8015bfa:	2b01      	cmp	r3, #1
 8015bfc:	d105      	bne.n	8015c0a <readCanToStructs+0x3f56>
					{
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8015bfe:	4b73      	ldr	r3, [pc, #460]	; (8015dcc <readCanToStructs+0x4118>)
 8015c00:	881b      	ldrh	r3, [r3, #0]
 8015c02:	4619      	mov	r1, r3
 8015c04:	4876      	ldr	r0, [pc, #472]	; (8015de0 <readCanToStructs+0x412c>)
 8015c06:	f010 fff1 	bl	8026bec <iprintf>
					}
					Is_CAN_Exchange_happening = YES;
 8015c0a:	4b76      	ldr	r3, [pc, #472]	; (8015de4 <readCanToStructs+0x4130>)
 8015c0c:	2201      	movs	r2, #1
 8015c0e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8015c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015c14:	4a6f      	ldr	r2, [pc, #444]	; (8015dd4 <readCanToStructs+0x4120>)
 8015c16:	f240 4116 	movw	r1, #1046	; 0x416
 8015c1a:	fb01 f303 	mul.w	r3, r1, r3
 8015c1e:	4413      	add	r3, r2
 8015c20:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015c24:	2200      	movs	r2, #0
 8015c26:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
				}
				break;
 8015c28:	e107      	b.n	8015e3a <readCanToStructs+0x4186>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 8015c2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015c2e:	4a69      	ldr	r2, [pc, #420]	; (8015dd4 <readCanToStructs+0x4120>)
 8015c30:	f240 4116 	movw	r1, #1046	; 0x416
 8015c34:	fb01 f303 	mul.w	r3, r1, r3
 8015c38:	4413      	add	r3, r2
 8015c3a:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8015c3e:	2201      	movs	r2, #1
 8015c40:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 8015c42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015c46:	4963      	ldr	r1, [pc, #396]	; (8015dd4 <readCanToStructs+0x4120>)
 8015c48:	f240 4216 	movw	r2, #1046	; 0x416
 8015c4c:	fb03 f202 	mul.w	r2, r3, r2
 8015c50:	440a      	add	r2, r1
 8015c52:	f202 4213 	addw	r2, r2, #1043	; 0x413
 8015c56:	7812      	ldrb	r2, [r2, #0]
 8015c58:	3201      	adds	r2, #1
 8015c5a:	b2d0      	uxtb	r0, r2
 8015c5c:	4a5d      	ldr	r2, [pc, #372]	; (8015dd4 <readCanToStructs+0x4120>)
 8015c5e:	f240 4116 	movw	r1, #1046	; 0x416
 8015c62:	fb01 f303 	mul.w	r3, r1, r3
 8015c66:	4413      	add	r3, r2
 8015c68:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015c6c:	4602      	mov	r2, r0
 8015c6e:	701a      	strb	r2, [r3, #0]
				break;
 8015c70:	e0e3      	b.n	8015e3a <readCanToStructs+0x4186>

			case DAT_CRC_EXCHANGE_2:
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8015c72:	4b56      	ldr	r3, [pc, #344]	; (8015dcc <readCanToStructs+0x4118>)
 8015c74:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8015c76:	4b56      	ldr	r3, [pc, #344]	; (8015dd0 <readCanToStructs+0x411c>)
 8015c78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015c7c:	885b      	ldrh	r3, [r3, #2]
 8015c7e:	4a54      	ldr	r2, [pc, #336]	; (8015dd0 <readCanToStructs+0x411c>)
 8015c80:	011b      	lsls	r3, r3, #4
 8015c82:	4413      	add	r3, r2
 8015c84:	3304      	adds	r3, #4
 8015c86:	781b      	ldrb	r3, [r3, #0]
 8015c88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8015c8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d110      	bne.n	8015cb6 <readCanToStructs+0x4002>
				{
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8015c94:	2202      	movs	r2, #2
 8015c96:	2100      	movs	r1, #0
 8015c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c9a:	f010 febf 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8015c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015ca2:	4a4c      	ldr	r2, [pc, #304]	; (8015dd4 <readCanToStructs+0x4120>)
 8015ca4:	f240 4116 	movw	r1, #1046	; 0x416
 8015ca8:	fb01 f303 	mul.w	r3, r1, r3
 8015cac:	4413      	add	r3, r2
 8015cae:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8015cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015cba:	4a46      	ldr	r2, [pc, #280]	; (8015dd4 <readCanToStructs+0x4120>)
 8015cbc:	f240 4116 	movw	r1, #1046	; 0x416
 8015cc0:	fb01 f303 	mul.w	r3, r1, r3
 8015cc4:	4413      	add	r3, r2
 8015cc6:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015cca:	781b      	ldrb	r3, [r3, #0]
 8015ccc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d014      	beq.n	8015cfe <readCanToStructs+0x404a>
				{
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8015cd4:	4844      	ldr	r0, [pc, #272]	; (8015de8 <readCanToStructs+0x4134>)
 8015cd6:	f011 f825 	bl	8026d24 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8015cda:	2202      	movs	r2, #2
 8015cdc:	2100      	movs	r1, #0
 8015cde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ce0:	f010 fe9c 	bl	8026a1c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8015ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015ce8:	4a3a      	ldr	r2, [pc, #232]	; (8015dd4 <readCanToStructs+0x4120>)
 8015cea:	f240 4116 	movw	r1, #1046	; 0x416
 8015cee:	fb01 f303 	mul.w	r3, r1, r3
 8015cf2:	4413      	add	r3, r2
 8015cf4:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	701a      	strb	r2, [r3, #0]
					break;
 8015cfc:	e09d      	b.n	8015e3a <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8015cfe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015d02:	4613      	mov	r3, r2
 8015d04:	00db      	lsls	r3, r3, #3
 8015d06:	1a9b      	subs	r3, r3, r2
 8015d08:	461a      	mov	r2, r3
 8015d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d0c:	4413      	add	r3, r2
 8015d0e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015d10:	2301      	movs	r3, #1
 8015d12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015d16:	e016      	b.n	8015d46 <readCanToStructs+0x4092>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8015d18:	4b2d      	ldr	r3, [pc, #180]	; (8015dd0 <readCanToStructs+0x411c>)
 8015d1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015d1e:	885b      	ldrh	r3, [r3, #2]
 8015d20:	461a      	mov	r2, r3
 8015d22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015d26:	492a      	ldr	r1, [pc, #168]	; (8015dd0 <readCanToStructs+0x411c>)
 8015d28:	0112      	lsls	r2, r2, #4
 8015d2a:	440a      	add	r2, r1
 8015d2c:	4413      	add	r3, r2
 8015d2e:	3304      	adds	r3, #4
 8015d30:	781a      	ldrb	r2, [r3, #0]
 8015d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d34:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8015d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d38:	3301      	adds	r3, #1
 8015d3a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015d3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015d40:	3301      	adds	r3, #1
 8015d42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015d46:	4b22      	ldr	r3, [pc, #136]	; (8015dd0 <readCanToStructs+0x411c>)
 8015d48:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015d4c:	885b      	ldrh	r3, [r3, #2]
 8015d4e:	4a20      	ldr	r2, [pc, #128]	; (8015dd0 <readCanToStructs+0x411c>)
 8015d50:	011b      	lsls	r3, r3, #4
 8015d52:	4413      	add	r3, r2
 8015d54:	330c      	adds	r3, #12
 8015d56:	781b      	ldrb	r3, [r3, #0]
 8015d58:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015d5c:	429a      	cmp	r2, r3
 8015d5e:	d3db      	bcc.n	8015d18 <readCanToStructs+0x4064>
				}
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8015d60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d64:	4a1b      	ldr	r2, [pc, #108]	; (8015dd4 <readCanToStructs+0x4120>)
 8015d66:	f240 4116 	movw	r1, #1046	; 0x416
 8015d6a:	fb01 f303 	mul.w	r3, r1, r3
 8015d6e:	4413      	add	r3, r2
 8015d70:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015d74:	781b      	ldrb	r3, [r3, #0]
 8015d76:	461a      	mov	r2, r3
 8015d78:	4613      	mov	r3, r2
 8015d7a:	00db      	lsls	r3, r3, #3
 8015d7c:	1a9a      	subs	r2, r3, r2
 8015d7e:	4b14      	ldr	r3, [pc, #80]	; (8015dd0 <readCanToStructs+0x411c>)
 8015d80:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015d84:	885b      	ldrh	r3, [r3, #2]
 8015d86:	4912      	ldr	r1, [pc, #72]	; (8015dd0 <readCanToStructs+0x411c>)
 8015d88:	011b      	lsls	r3, r3, #4
 8015d8a:	440b      	add	r3, r1
 8015d8c:	330c      	adds	r3, #12
 8015d8e:	781b      	ldrb	r3, [r3, #0]
 8015d90:	3b01      	subs	r3, #1
 8015d92:	4413      	add	r3, r2
 8015d94:	2b01      	cmp	r3, #1
 8015d96:	d92b      	bls.n	8015df0 <readCanToStructs+0x413c>
				{
					if(Debug_flag == 1)
 8015d98:	4b10      	ldr	r3, [pc, #64]	; (8015ddc <readCanToStructs+0x4128>)
 8015d9a:	781b      	ldrb	r3, [r3, #0]
 8015d9c:	2b01      	cmp	r3, #1
 8015d9e:	d105      	bne.n	8015dac <readCanToStructs+0x40f8>
					{
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8015da0:	4b0a      	ldr	r3, [pc, #40]	; (8015dcc <readCanToStructs+0x4118>)
 8015da2:	881b      	ldrh	r3, [r3, #0]
 8015da4:	4619      	mov	r1, r3
 8015da6:	4811      	ldr	r0, [pc, #68]	; (8015dec <readCanToStructs+0x4138>)
 8015da8:	f010 ff20 	bl	8026bec <iprintf>
					}
					Is_CAN_Exchange_happening = YES;
 8015dac:	4b0d      	ldr	r3, [pc, #52]	; (8015de4 <readCanToStructs+0x4130>)
 8015dae:	2201      	movs	r2, #1
 8015db0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8015db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015db6:	4a07      	ldr	r2, [pc, #28]	; (8015dd4 <readCanToStructs+0x4120>)
 8015db8:	f240 4116 	movw	r1, #1046	; 0x416
 8015dbc:	fb01 f303 	mul.w	r3, r1, r3
 8015dc0:	4413      	add	r3, r2
 8015dc2:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;
 8015dca:	e036      	b.n	8015e3a <readCanToStructs+0x4186>
 8015dcc:	20000bb8 	.word	0x20000bb8
 8015dd0:	20007264 	.word	0x20007264
 8015dd4:	20006a38 	.word	0x20006a38
 8015dd8:	0802b89c 	.word	0x0802b89c
 8015ddc:	20000bbb 	.word	0x20000bbb
 8015de0:	0802b8c4 	.word	0x0802b8c4
 8015de4:	2000030b 	.word	0x2000030b
 8015de8:	0802b8d8 	.word	0x0802b8d8
 8015dec:	0802b900 	.word	0x0802b900
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 8015df0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015df4:	4a28      	ldr	r2, [pc, #160]	; (8015e98 <readCanToStructs+0x41e4>)
 8015df6:	f240 4116 	movw	r1, #1046	; 0x416
 8015dfa:	fb01 f303 	mul.w	r3, r1, r3
 8015dfe:	4413      	add	r3, r2
 8015e00:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8015e04:	2201      	movs	r2, #1
 8015e06:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 8015e08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015e0c:	4922      	ldr	r1, [pc, #136]	; (8015e98 <readCanToStructs+0x41e4>)
 8015e0e:	f240 4216 	movw	r2, #1046	; 0x416
 8015e12:	fb03 f202 	mul.w	r2, r3, r2
 8015e16:	440a      	add	r2, r1
 8015e18:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8015e1c:	7812      	ldrb	r2, [r2, #0]
 8015e1e:	3201      	adds	r2, #1
 8015e20:	b2d0      	uxtb	r0, r2
 8015e22:	4a1d      	ldr	r2, [pc, #116]	; (8015e98 <readCanToStructs+0x41e4>)
 8015e24:	f240 4116 	movw	r1, #1046	; 0x416
 8015e28:	fb01 f303 	mul.w	r3, r1, r3
 8015e2c:	4413      	add	r3, r2
 8015e2e:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015e32:	4602      	mov	r2, r0
 8015e34:	701a      	strb	r2, [r3, #0]
				break;
 8015e36:	e000      	b.n	8015e3a <readCanToStructs+0x4186>

			default:
				break;
 8015e38:	bf00      	nop
			}

			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8015e3a:	4b18      	ldr	r3, [pc, #96]	; (8015e9c <readCanToStructs+0x41e8>)
 8015e3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015e40:	885b      	ldrh	r3, [r3, #2]
 8015e42:	011b      	lsls	r3, r3, #4
 8015e44:	4a15      	ldr	r2, [pc, #84]	; (8015e9c <readCanToStructs+0x41e8>)
 8015e46:	4413      	add	r3, r2
 8015e48:	2210      	movs	r2, #16
 8015e4a:	2100      	movs	r1, #0
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f010 fde5 	bl	8026a1c <memset>
			canRead.Out++;
 8015e52:	4b12      	ldr	r3, [pc, #72]	; (8015e9c <readCanToStructs+0x41e8>)
 8015e54:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015e58:	885b      	ldrh	r3, [r3, #2]
 8015e5a:	3301      	adds	r3, #1
 8015e5c:	b29a      	uxth	r2, r3
 8015e5e:	4b0f      	ldr	r3, [pc, #60]	; (8015e9c <readCanToStructs+0x41e8>)
 8015e60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015e64:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8015e66:	4b0d      	ldr	r3, [pc, #52]	; (8015e9c <readCanToStructs+0x41e8>)
 8015e68:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015e6c:	885b      	ldrh	r3, [r3, #2]
 8015e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015e72:	d104      	bne.n	8015e7e <readCanToStructs+0x41ca>
				canRead.Out = 0;
 8015e74:	4b09      	ldr	r3, [pc, #36]	; (8015e9c <readCanToStructs+0x41e8>)
 8015e76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8015e7e:	f7fb fec3 	bl	8011c08 <canDataReady>
 8015e82:	4603      	mov	r3, r0
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	f47f ab37 	bne.w	80154f8 <readCanToStructs+0x3844>
			/* Protocol Type */
		}
	}
	default:
		break;
 8015e8a:	bf00      	nop
 8015e8c:	e000      	b.n	8015e90 <readCanToStructs+0x41dc>
			return;
 8015e8e:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 8015e90:	373c      	adds	r7, #60	; 0x3c
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e96:	bf00      	nop
 8015e98:	20006a38 	.word	0x20006a38
 8015e9c:	20007264 	.word	0x20007264

08015ea0 <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b084      	sub	sp, #16
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	6078      	str	r0, [r7, #4]
 8015ea8:	460b      	mov	r3, r1
 8015eaa:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 8015eac:	2300      	movs	r3, #0
 8015eae:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 8015eb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015eb4:	461a      	mov	r2, r3
 8015eb6:	6879      	ldr	r1, [r7, #4]
 8015eb8:	2000      	movs	r0, #0
 8015eba:	f000 f845 	bl	8015f48 <GetCRC16>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	461a      	mov	r2, r3
 8015ec2:	4b1d      	ldr	r3, [pc, #116]	; (8015f38 <CheckCRC+0x98>)
 8015ec4:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 8015ec6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015eca:	687a      	ldr	r2, [r7, #4]
 8015ecc:	4413      	add	r3, r2
 8015ece:	781b      	ldrb	r3, [r3, #0]
 8015ed0:	b29a      	uxth	r2, r3
 8015ed2:	4b1a      	ldr	r3, [pc, #104]	; (8015f3c <CheckCRC+0x9c>)
 8015ed4:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 8015ed6:	4b19      	ldr	r3, [pc, #100]	; (8015f3c <CheckCRC+0x9c>)
 8015ed8:	881b      	ldrh	r3, [r3, #0]
 8015eda:	021b      	lsls	r3, r3, #8
 8015edc:	b29a      	uxth	r2, r3
 8015ede:	4b17      	ldr	r3, [pc, #92]	; (8015f3c <CheckCRC+0x9c>)
 8015ee0:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 8015ee2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015ee6:	3301      	adds	r3, #1
 8015ee8:	687a      	ldr	r2, [r7, #4]
 8015eea:	4413      	add	r3, r2
 8015eec:	781b      	ldrb	r3, [r3, #0]
 8015eee:	b29a      	uxth	r2, r3
 8015ef0:	4b12      	ldr	r3, [pc, #72]	; (8015f3c <CheckCRC+0x9c>)
 8015ef2:	881b      	ldrh	r3, [r3, #0]
 8015ef4:	4313      	orrs	r3, r2
 8015ef6:	b29a      	uxth	r2, r3
 8015ef8:	4b10      	ldr	r3, [pc, #64]	; (8015f3c <CheckCRC+0x9c>)
 8015efa:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 8015efc:	4b0f      	ldr	r3, [pc, #60]	; (8015f3c <CheckCRC+0x9c>)
 8015efe:	881a      	ldrh	r2, [r3, #0]
 8015f00:	4b0d      	ldr	r3, [pc, #52]	; (8015f38 <CheckCRC+0x98>)
 8015f02:	881b      	ldrh	r3, [r3, #0]
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d105      	bne.n	8015f14 <CheckCRC+0x74>
	{
		retVal = 1;
 8015f08:	2301      	movs	r3, #1
 8015f0a:	81fb      	strh	r3, [r7, #14]
		return k;
 8015f0c:	4b0b      	ldr	r3, [pc, #44]	; (8015f3c <CheckCRC+0x9c>)
 8015f0e:	881b      	ldrh	r3, [r3, #0]
 8015f10:	b21b      	sxth	r3, r3
 8015f12:	e00d      	b.n	8015f30 <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 8015f14:	4b08      	ldr	r3, [pc, #32]	; (8015f38 <CheckCRC+0x98>)
 8015f16:	881b      	ldrh	r3, [r3, #0]
 8015f18:	4619      	mov	r1, r3
 8015f1a:	4809      	ldr	r0, [pc, #36]	; (8015f40 <CheckCRC+0xa0>)
 8015f1c:	f010 fe66 	bl	8026bec <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 8015f20:	4b06      	ldr	r3, [pc, #24]	; (8015f3c <CheckCRC+0x9c>)
 8015f22:	881b      	ldrh	r3, [r3, #0]
 8015f24:	4619      	mov	r1, r3
 8015f26:	4807      	ldr	r0, [pc, #28]	; (8015f44 <CheckCRC+0xa4>)
 8015f28:	f010 fe60 	bl	8026bec <iprintf>
	return retVal;
 8015f2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8015f30:	4618      	mov	r0, r3
 8015f32:	3710      	adds	r7, #16
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	2000b3c0 	.word	0x2000b3c0
 8015f3c:	2000b3c2 	.word	0x2000b3c2
 8015f40:	0802baac 	.word	0x0802baac
 8015f44:	0802bac4 	.word	0x0802bac4

08015f48 <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 8015f48:	b480      	push	{r7}
 8015f4a:	b085      	sub	sp, #20
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	4603      	mov	r3, r0
 8015f50:	6039      	str	r1, [r7, #0]
 8015f52:	80fb      	strh	r3, [r7, #6]
 8015f54:	4613      	mov	r3, r2
 8015f56:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 8015f58:	88fb      	ldrh	r3, [r7, #6]
 8015f5a:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 8015f5c:	e038      	b.n	8015fd0 <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8015f5e:	89fb      	ldrh	r3, [r7, #14]
 8015f60:	f003 030f 	and.w	r3, r3, #15
 8015f64:	4a22      	ldr	r2, [pc, #136]	; (8015ff0 <GetCRC16+0xa8>)
 8015f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015f6a:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8015f6c:	89fb      	ldrh	r3, [r7, #14]
 8015f6e:	091b      	lsrs	r3, r3, #4
 8015f70:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 8015f72:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015f76:	89bb      	ldrh	r3, [r7, #12]
 8015f78:	4053      	eors	r3, r2
 8015f7a:	b21a      	sxth	r2, r3
 8015f7c:	683b      	ldr	r3, [r7, #0]
 8015f7e:	781b      	ldrb	r3, [r3, #0]
 8015f80:	f003 030f 	and.w	r3, r3, #15
 8015f84:	491a      	ldr	r1, [pc, #104]	; (8015ff0 <GetCRC16+0xa8>)
 8015f86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015f8a:	b21b      	sxth	r3, r3
 8015f8c:	4053      	eors	r3, r2
 8015f8e:	b21b      	sxth	r3, r3
 8015f90:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8015f92:	89fb      	ldrh	r3, [r7, #14]
 8015f94:	f003 030f 	and.w	r3, r3, #15
 8015f98:	4a15      	ldr	r2, [pc, #84]	; (8015ff0 <GetCRC16+0xa8>)
 8015f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015f9e:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8015fa0:	89fb      	ldrh	r3, [r7, #14]
 8015fa2:	091b      	lsrs	r3, r3, #4
 8015fa4:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 8015fa6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015faa:	89bb      	ldrh	r3, [r7, #12]
 8015fac:	4053      	eors	r3, r2
 8015fae:	b21a      	sxth	r2, r3
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	781b      	ldrb	r3, [r3, #0]
 8015fb4:	091b      	lsrs	r3, r3, #4
 8015fb6:	b2db      	uxtb	r3, r3
 8015fb8:	f003 030f 	and.w	r3, r3, #15
 8015fbc:	490c      	ldr	r1, [pc, #48]	; (8015ff0 <GetCRC16+0xa8>)
 8015fbe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015fc2:	b21b      	sxth	r3, r3
 8015fc4:	4053      	eors	r3, r2
 8015fc6:	b21b      	sxth	r3, r3
 8015fc8:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 8015fca:	683b      	ldr	r3, [r7, #0]
 8015fcc:	3301      	adds	r3, #1
 8015fce:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 8015fd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015fd4:	b29a      	uxth	r2, r3
 8015fd6:	3a01      	subs	r2, #1
 8015fd8:	b292      	uxth	r2, r2
 8015fda:	80ba      	strh	r2, [r7, #4]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	dcbe      	bgt.n	8015f5e <GetCRC16+0x16>
	}
	return(uiCrc);
 8015fe0:	89fb      	ldrh	r3, [r7, #14]
}
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	3714      	adds	r7, #20
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fec:	4770      	bx	lr
 8015fee:	bf00      	nop
 8015ff0:	0802dfc0 	.word	0x0802dfc0

08015ff4 <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b082      	sub	sp, #8
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
 8015ffc:	460b      	mov	r3, r1
 8015ffe:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 8016000:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016004:	461a      	mov	r2, r3
 8016006:	6879      	ldr	r1, [r7, #4]
 8016008:	2000      	movs	r0, #0
 801600a:	f7ff ff9d 	bl	8015f48 <GetCRC16>
 801600e:	4603      	mov	r3, r0
 8016010:	461a      	mov	r2, r3
 8016012:	4b11      	ldr	r3, [pc, #68]	; (8016058 <ComputeCRC+0x64>)
 8016014:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 8016016:	4b10      	ldr	r3, [pc, #64]	; (8016058 <ComputeCRC+0x64>)
 8016018:	881a      	ldrh	r2, [r3, #0]
 801601a:	4b10      	ldr	r3, [pc, #64]	; (801605c <ComputeCRC+0x68>)
 801601c:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 801601e:	4b0e      	ldr	r3, [pc, #56]	; (8016058 <ComputeCRC+0x64>)
 8016020:	8819      	ldrh	r1, [r3, #0]
 8016022:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016026:	3301      	adds	r3, #1
 8016028:	687a      	ldr	r2, [r7, #4]
 801602a:	4413      	add	r3, r2
 801602c:	b2ca      	uxtb	r2, r1
 801602e:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 8016030:	4b09      	ldr	r3, [pc, #36]	; (8016058 <ComputeCRC+0x64>)
 8016032:	881b      	ldrh	r3, [r3, #0]
 8016034:	0a1b      	lsrs	r3, r3, #8
 8016036:	b29a      	uxth	r2, r3
 8016038:	4b07      	ldr	r3, [pc, #28]	; (8016058 <ComputeCRC+0x64>)
 801603a:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 801603c:	4b06      	ldr	r3, [pc, #24]	; (8016058 <ComputeCRC+0x64>)
 801603e:	8819      	ldrh	r1, [r3, #0]
 8016040:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016044:	687a      	ldr	r2, [r7, #4]
 8016046:	4413      	add	r3, r2
 8016048:	b2ca      	uxtb	r2, r1
 801604a:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 801604c:	4b03      	ldr	r3, [pc, #12]	; (801605c <ComputeCRC+0x68>)
 801604e:	881b      	ldrh	r3, [r3, #0]
}
 8016050:	4618      	mov	r0, r3
 8016052:	3708      	adds	r7, #8
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}
 8016058:	2000b3c4 	.word	0x2000b3c4
 801605c:	2000b3c6 	.word	0x2000b3c6

08016060 <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 8016060:	b480      	push	{r7}
 8016062:	b087      	sub	sp, #28
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 8016068:	2300      	movs	r3, #0
 801606a:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 801606c:	2300      	movs	r3, #0
 801606e:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 8016070:	2300      	movs	r3, #0
 8016072:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	005b      	lsls	r3, r3, #1
 8016078:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 801607a:	2300      	movs	r3, #0
 801607c:	60fb      	str	r3, [r7, #12]
 801607e:	e012      	b.n	80160a6 <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 8016080:	693b      	ldr	r3, [r7, #16]
 8016082:	f003 0301 	and.w	r3, r3, #1
 8016086:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	f1c3 031f 	rsb	r3, r3, #31
 801608e:	68ba      	ldr	r2, [r7, #8]
 8016090:	fa02 f303 	lsl.w	r3, r2, r3
 8016094:	697a      	ldr	r2, [r7, #20]
 8016096:	4313      	orrs	r3, r2
 8016098:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 801609a:	693b      	ldr	r3, [r7, #16]
 801609c:	085b      	lsrs	r3, r3, #1
 801609e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	3301      	adds	r3, #1
 80160a4:	60fb      	str	r3, [r7, #12]
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	2b1f      	cmp	r3, #31
 80160aa:	dde9      	ble.n	8016080 <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 80160ac:	697b      	ldr	r3, [r7, #20]
}
 80160ae:	4618      	mov	r0, r3
 80160b0:	371c      	adds	r7, #28
 80160b2:	46bd      	mov	sp, r7
 80160b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b8:	4770      	bx	lr
	...

080160bc <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b088      	sub	sp, #32
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
 80160c4:	460b      	mov	r3, r1
 80160c6:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 80160c8:	2300      	movs	r3, #0
 80160ca:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 80160cc:	2300      	movs	r3, #0
 80160ce:	617b      	str	r3, [r7, #20]
	int converted = 0;
 80160d0:	2300      	movs	r3, #0
 80160d2:	613b      	str	r3, [r7, #16]
	int i=0;
 80160d4:	2300      	movs	r3, #0
 80160d6:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 80160d8:	4b26      	ldr	r3, [pc, #152]	; (8016174 <CalculateDirectReverseCrc+0xb8>)
 80160da:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 80160dc:	68f8      	ldr	r0, [r7, #12]
 80160de:	f7ff ffbf 	bl	8016060 <ReverseCRCPolynomial>
 80160e2:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 80160e4:	2300      	movs	r3, #0
 80160e6:	61bb      	str	r3, [r7, #24]
 80160e8:	e00d      	b.n	8016106 <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 80160ea:	69f8      	ldr	r0, [r7, #28]
 80160ec:	69bb      	ldr	r3, [r7, #24]
 80160ee:	687a      	ldr	r2, [r7, #4]
 80160f0:	4413      	add	r3, r2
 80160f2:	781b      	ldrb	r3, [r3, #0]
 80160f4:	697a      	ldr	r2, [r7, #20]
 80160f6:	4619      	mov	r1, r3
 80160f8:	f000 f844 	bl	8016184 <AnsoldoCrc>
 80160fc:	4603      	mov	r3, r0
 80160fe:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 8016100:	69bb      	ldr	r3, [r7, #24]
 8016102:	3301      	adds	r3, #1
 8016104:	61bb      	str	r3, [r7, #24]
 8016106:	887b      	ldrh	r3, [r7, #2]
 8016108:	69ba      	ldr	r2, [r7, #24]
 801610a:	429a      	cmp	r2, r3
 801610c:	dbed      	blt.n	80160ea <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 801610e:	69fb      	ldr	r3, [r7, #28]
 8016110:	061b      	lsls	r3, r3, #24
 8016112:	693a      	ldr	r2, [r7, #16]
 8016114:	4313      	orrs	r3, r2
 8016116:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 8016118:	69fb      	ldr	r3, [r7, #28]
 801611a:	021b      	lsls	r3, r3, #8
 801611c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8016120:	693a      	ldr	r2, [r7, #16]
 8016122:	4313      	orrs	r3, r2
 8016124:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 8016126:	69fb      	ldr	r3, [r7, #28]
 8016128:	121b      	asrs	r3, r3, #8
 801612a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801612e:	693a      	ldr	r2, [r7, #16]
 8016130:	4313      	orrs	r3, r2
 8016132:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 8016134:	69fb      	ldr	r3, [r7, #28]
 8016136:	0e1a      	lsrs	r2, r3, #24
 8016138:	693b      	ldr	r3, [r7, #16]
 801613a:	4313      	orrs	r3, r2
 801613c:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 801613e:	4b0e      	ldr	r3, [pc, #56]	; (8016178 <CalculateDirectReverseCrc+0xbc>)
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	2b01      	cmp	r3, #1
 8016144:	d110      	bne.n	8016168 <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 8016146:	480d      	ldr	r0, [pc, #52]	; (801617c <CalculateDirectReverseCrc+0xc0>)
 8016148:	f008 f9f8 	bl	801e53c <HAL_RNG_GetRandomNumber>
 801614c:	4601      	mov	r1, r0
 801614e:	4b0c      	ldr	r3, [pc, #48]	; (8016180 <CalculateDirectReverseCrc+0xc4>)
 8016150:	fba3 2301 	umull	r2, r3, r3, r1
 8016154:	08da      	lsrs	r2, r3, #3
 8016156:	4613      	mov	r3, r2
 8016158:	009b      	lsls	r3, r3, #2
 801615a:	4413      	add	r3, r2
 801615c:	005b      	lsls	r3, r3, #1
 801615e:	1aca      	subs	r2, r1, r3
 8016160:	693b      	ldr	r3, [r7, #16]
 8016162:	4413      	add	r3, r2
 8016164:	3301      	adds	r3, #1
 8016166:	e000      	b.n	801616a <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 8016168:	693b      	ldr	r3, [r7, #16]
}
 801616a:	4618      	mov	r0, r3
 801616c:	3720      	adds	r7, #32
 801616e:	46bd      	mov	sp, r7
 8016170:	bd80      	pop	{r7, pc}
 8016172:	bf00      	nop
 8016174:	d20d8a81 	.word	0xd20d8a81
 8016178:	200024af 	.word	0x200024af
 801617c:	2000bcf8 	.word	0x2000bcf8
 8016180:	cccccccd 	.word	0xcccccccd

08016184 <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 8016184:	b480      	push	{r7}
 8016186:	b08b      	sub	sp, #44	; 0x2c
 8016188:	af00      	add	r7, sp, #0
 801618a:	60f8      	str	r0, [r7, #12]
 801618c:	460b      	mov	r3, r1
 801618e:	607a      	str	r2, [r7, #4]
 8016190:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 8016192:	7afb      	ldrb	r3, [r7, #11]
 8016194:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 8016196:	2301      	movs	r3, #1
 8016198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801619c:	e01d      	b.n	80161da <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	f003 0301 	and.w	r3, r3, #1
 80161a4:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 80161a6:	6a3b      	ldr	r3, [r7, #32]
 80161a8:	f003 0301 	and.w	r3, r3, #1
 80161ac:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	085b      	lsrs	r3, r3, #1
 80161b2:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 80161b4:	69fa      	ldr	r2, [r7, #28]
 80161b6:	69bb      	ldr	r3, [r7, #24]
 80161b8:	4053      	eors	r3, r2
 80161ba:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 80161bc:	697b      	ldr	r3, [r7, #20]
 80161be:	2b01      	cmp	r3, #1
 80161c0:	d103      	bne.n	80161ca <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 80161c2:	68fa      	ldr	r2, [r7, #12]
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	4053      	eors	r3, r2
 80161c8:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 80161ca:	6a3b      	ldr	r3, [r7, #32]
 80161cc:	085b      	lsrs	r3, r3, #1
 80161ce:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 80161d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161d4:	3301      	adds	r3, #1
 80161d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80161da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161de:	2b08      	cmp	r3, #8
 80161e0:	d9dd      	bls.n	801619e <AnsoldoCrc+0x1a>
	}
	return (Crc);
 80161e2:	68fb      	ldr	r3, [r7, #12]
}
 80161e4:	4618      	mov	r0, r3
 80161e6:	372c      	adds	r7, #44	; 0x2c
 80161e8:	46bd      	mov	sp, r7
 80161ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ee:	4770      	bx	lr

080161f0 <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b090      	sub	sp, #64	; 0x40
 80161f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80161f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80161fa:	2200      	movs	r2, #0
 80161fc:	601a      	str	r2, [r3, #0]
 80161fe:	605a      	str	r2, [r3, #4]
 8016200:	609a      	str	r2, [r3, #8]
 8016202:	60da      	str	r2, [r3, #12]
 8016204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8016206:	4bb2      	ldr	r3, [pc, #712]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 8016208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801620a:	4ab1      	ldr	r2, [pc, #708]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 801620c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016210:	6313      	str	r3, [r2, #48]	; 0x30
 8016212:	4baf      	ldr	r3, [pc, #700]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 8016214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801621a:	62bb      	str	r3, [r7, #40]	; 0x28
 801621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801621e:	4bac      	ldr	r3, [pc, #688]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 8016220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016222:	4aab      	ldr	r2, [pc, #684]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 8016224:	f043 0320 	orr.w	r3, r3, #32
 8016228:	6313      	str	r3, [r2, #48]	; 0x30
 801622a:	4ba9      	ldr	r3, [pc, #676]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 801622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801622e:	f003 0320 	and.w	r3, r3, #32
 8016232:	627b      	str	r3, [r7, #36]	; 0x24
 8016234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8016236:	4ba6      	ldr	r3, [pc, #664]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 8016238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801623a:	4aa5      	ldr	r2, [pc, #660]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 801623c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016240:	6313      	str	r3, [r2, #48]	; 0x30
 8016242:	4ba3      	ldr	r3, [pc, #652]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 8016244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801624a:	623b      	str	r3, [r7, #32]
 801624c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801624e:	4ba0      	ldr	r3, [pc, #640]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 8016250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016252:	4a9f      	ldr	r2, [pc, #636]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 8016254:	f043 0304 	orr.w	r3, r3, #4
 8016258:	6313      	str	r3, [r2, #48]	; 0x30
 801625a:	4b9d      	ldr	r3, [pc, #628]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 801625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801625e:	f003 0304 	and.w	r3, r3, #4
 8016262:	61fb      	str	r3, [r7, #28]
 8016264:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8016266:	4b9a      	ldr	r3, [pc, #616]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 8016268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801626a:	4a99      	ldr	r2, [pc, #612]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 801626c:	f043 0301 	orr.w	r3, r3, #1
 8016270:	6313      	str	r3, [r2, #48]	; 0x30
 8016272:	4b97      	ldr	r3, [pc, #604]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 8016274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016276:	f003 0301 	and.w	r3, r3, #1
 801627a:	61bb      	str	r3, [r7, #24]
 801627c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801627e:	4b94      	ldr	r3, [pc, #592]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 8016280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016282:	4a93      	ldr	r2, [pc, #588]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 8016284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016288:	6313      	str	r3, [r2, #48]	; 0x30
 801628a:	4b91      	ldr	r3, [pc, #580]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 801628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801628e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016292:	617b      	str	r3, [r7, #20]
 8016294:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8016296:	4b8e      	ldr	r3, [pc, #568]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 8016298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801629a:	4a8d      	ldr	r2, [pc, #564]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 801629c:	f043 0310 	orr.w	r3, r3, #16
 80162a0:	6313      	str	r3, [r2, #48]	; 0x30
 80162a2:	4b8b      	ldr	r3, [pc, #556]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 80162a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162a6:	f003 0310 	and.w	r3, r3, #16
 80162aa:	613b      	str	r3, [r7, #16]
 80162ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80162ae:	4b88      	ldr	r3, [pc, #544]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 80162b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162b2:	4a87      	ldr	r2, [pc, #540]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 80162b4:	f043 0302 	orr.w	r3, r3, #2
 80162b8:	6313      	str	r3, [r2, #48]	; 0x30
 80162ba:	4b85      	ldr	r3, [pc, #532]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 80162bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162be:	f003 0302 	and.w	r3, r3, #2
 80162c2:	60fb      	str	r3, [r7, #12]
 80162c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80162c6:	4b82      	ldr	r3, [pc, #520]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 80162c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162ca:	4a81      	ldr	r2, [pc, #516]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 80162cc:	f043 0308 	orr.w	r3, r3, #8
 80162d0:	6313      	str	r3, [r2, #48]	; 0x30
 80162d2:	4b7f      	ldr	r3, [pc, #508]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 80162d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162d6:	f003 0308 	and.w	r3, r3, #8
 80162da:	60bb      	str	r3, [r7, #8]
 80162dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80162de:	4b7c      	ldr	r3, [pc, #496]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 80162e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162e2:	4a7b      	ldr	r2, [pc, #492]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 80162e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80162e8:	6313      	str	r3, [r2, #48]	; 0x30
 80162ea:	4b79      	ldr	r3, [pc, #484]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 80162ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80162f2:	607b      	str	r3, [r7, #4]
 80162f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80162f6:	4b76      	ldr	r3, [pc, #472]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 80162f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162fa:	4a75      	ldr	r2, [pc, #468]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 80162fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016300:	6313      	str	r3, [r2, #48]	; 0x30
 8016302:	4b73      	ldr	r3, [pc, #460]	; (80164d0 <MX_GPIO_Init+0x2e0>)
 8016304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801630a:	603b      	str	r3, [r7, #0]
 801630c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 801630e:	2200      	movs	r2, #0
 8016310:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8016314:	486f      	ldr	r0, [pc, #444]	; (80164d4 <MX_GPIO_Init+0x2e4>)
 8016316:	f006 f92f 	bl	801c578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 801631a:	2200      	movs	r2, #0
 801631c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8016320:	486d      	ldr	r0, [pc, #436]	; (80164d8 <MX_GPIO_Init+0x2e8>)
 8016322:	f006 f929 	bl	801c578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 8016326:	2200      	movs	r2, #0
 8016328:	f240 7104 	movw	r1, #1796	; 0x704
 801632c:	486b      	ldr	r0, [pc, #428]	; (80164dc <MX_GPIO_Init+0x2ec>)
 801632e:	f006 f923 	bl	801c578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 8016332:	2201      	movs	r2, #1
 8016334:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016338:	4869      	ldr	r0, [pc, #420]	; (80164e0 <MX_GPIO_Init+0x2f0>)
 801633a:	f006 f91d 	bl	801c578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 801633e:	2200      	movs	r2, #0
 8016340:	f241 0104 	movw	r1, #4100	; 0x1004
 8016344:	4867      	ldr	r0, [pc, #412]	; (80164e4 <MX_GPIO_Init+0x2f4>)
 8016346:	f006 f917 	bl	801c578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 801634a:	2201      	movs	r2, #1
 801634c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016350:	4865      	ldr	r0, [pc, #404]	; (80164e8 <MX_GPIO_Init+0x2f8>)
 8016352:	f006 f911 	bl	801c578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 8016356:	2200      	movs	r2, #0
 8016358:	2108      	movs	r1, #8
 801635a:	4864      	ldr	r0, [pc, #400]	; (80164ec <MX_GPIO_Init+0x2fc>)
 801635c:	f006 f90c 	bl	801c578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 8016360:	2201      	movs	r2, #1
 8016362:	2160      	movs	r1, #96	; 0x60
 8016364:	4861      	ldr	r0, [pc, #388]	; (80164ec <MX_GPIO_Init+0x2fc>)
 8016366:	f006 f907 	bl	801c578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 801636a:	2200      	movs	r2, #0
 801636c:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8016370:	485f      	ldr	r0, [pc, #380]	; (80164f0 <MX_GPIO_Init+0x300>)
 8016372:	f006 f901 	bl	801c578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 8016376:	2201      	movs	r2, #1
 8016378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801637c:	485c      	ldr	r0, [pc, #368]	; (80164f0 <MX_GPIO_Init+0x300>)
 801637e:	f006 f8fb 	bl	801c578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8016382:	2201      	movs	r2, #1
 8016384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016388:	4856      	ldr	r0, [pc, #344]	; (80164e4 <MX_GPIO_Init+0x2f4>)
 801638a:	f006 f8f5 	bl	801c578 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 801638e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8016392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016394:	2301      	movs	r3, #1
 8016396:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016398:	2300      	movs	r3, #0
 801639a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801639c:	2303      	movs	r3, #3
 801639e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80163a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80163a4:	4619      	mov	r1, r3
 80163a6:	484b      	ldr	r0, [pc, #300]	; (80164d4 <MX_GPIO_Init+0x2e4>)
 80163a8:	f005 ff22 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 80163ac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80163b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80163b2:	2300      	movs	r3, #0
 80163b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80163b6:	2300      	movs	r3, #0
 80163b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80163ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80163be:	4619      	mov	r1, r3
 80163c0:	4844      	ldr	r0, [pc, #272]	; (80164d4 <MX_GPIO_Init+0x2e4>)
 80163c2:	f005 ff15 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 80163c6:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80163ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80163cc:	2301      	movs	r3, #1
 80163ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80163d0:	2300      	movs	r3, #0
 80163d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80163d4:	2303      	movs	r3, #3
 80163d6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80163d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80163dc:	4619      	mov	r1, r3
 80163de:	483e      	ldr	r0, [pc, #248]	; (80164d8 <MX_GPIO_Init+0x2e8>)
 80163e0:	f005 ff06 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 80163e4:	2304      	movs	r3, #4
 80163e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80163e8:	2300      	movs	r3, #0
 80163ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80163ec:	2300      	movs	r3, #0
 80163ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 80163f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80163f4:	4619      	mov	r1, r3
 80163f6:	483c      	ldr	r0, [pc, #240]	; (80164e8 <MX_GPIO_Init+0x2f8>)
 80163f8:	f005 fefa 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 80163fc:	f240 7304 	movw	r3, #1796	; 0x704
 8016400:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016402:	2301      	movs	r3, #1
 8016404:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016406:	2300      	movs	r3, #0
 8016408:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801640a:	2303      	movs	r3, #3
 801640c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801640e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016412:	4619      	mov	r1, r3
 8016414:	4831      	ldr	r0, [pc, #196]	; (80164dc <MX_GPIO_Init+0x2ec>)
 8016416:	f005 feeb 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 801641a:	2303      	movs	r3, #3
 801641c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801641e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8016422:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016424:	2300      	movs	r3, #0
 8016426:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8016428:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801642c:	4619      	mov	r1, r3
 801642e:	482d      	ldr	r0, [pc, #180]	; (80164e4 <MX_GPIO_Init+0x2f4>)
 8016430:	f005 fede 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 8016434:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801643a:	2300      	movs	r3, #0
 801643c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801643e:	2300      	movs	r3, #0
 8016440:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 8016442:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016446:	4619      	mov	r1, r3
 8016448:	4825      	ldr	r0, [pc, #148]	; (80164e0 <MX_GPIO_Init+0x2f0>)
 801644a:	f005 fed1 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 801644e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016454:	2301      	movs	r3, #1
 8016456:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016458:	2300      	movs	r3, #0
 801645a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801645c:	2303      	movs	r3, #3
 801645e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 8016460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016464:	4619      	mov	r1, r3
 8016466:	481e      	ldr	r0, [pc, #120]	; (80164e0 <MX_GPIO_Init+0x2f0>)
 8016468:	f005 fec2 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 801646c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8016470:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016472:	2300      	movs	r3, #0
 8016474:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016476:	2300      	movs	r3, #0
 8016478:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801647a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801647e:	4619      	mov	r1, r3
 8016480:	481a      	ldr	r0, [pc, #104]	; (80164ec <MX_GPIO_Init+0x2fc>)
 8016482:	f005 feb5 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 8016486:	f241 4304 	movw	r3, #5124	; 0x1404
 801648a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801648c:	2301      	movs	r3, #1
 801648e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016490:	2300      	movs	r3, #0
 8016492:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016494:	2303      	movs	r3, #3
 8016496:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8016498:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801649c:	4619      	mov	r1, r3
 801649e:	4811      	ldr	r0, [pc, #68]	; (80164e4 <MX_GPIO_Init+0x2f4>)
 80164a0:	f005 fea6 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 80164a4:	2308      	movs	r3, #8
 80164a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80164a8:	2300      	movs	r3, #0
 80164aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80164ac:	2300      	movs	r3, #0
 80164ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 80164b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80164b4:	4619      	mov	r1, r3
 80164b6:	480b      	ldr	r0, [pc, #44]	; (80164e4 <MX_GPIO_Init+0x2f4>)
 80164b8:	f005 fe9a 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 80164bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80164c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80164c2:	2301      	movs	r3, #1
 80164c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80164c6:	2300      	movs	r3, #0
 80164c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80164ca:	2300      	movs	r3, #0
 80164cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80164ce:	e011      	b.n	80164f4 <MX_GPIO_Init+0x304>
 80164d0:	40023800 	.word	0x40023800
 80164d4:	40022000 	.word	0x40022000
 80164d8:	40021400 	.word	0x40021400
 80164dc:	40021c00 	.word	0x40021c00
 80164e0:	40021000 	.word	0x40021000
 80164e4:	40021800 	.word	0x40021800
 80164e8:	40020800 	.word	0x40020800
 80164ec:	40020c00 	.word	0x40020c00
 80164f0:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 80164f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80164f8:	4619      	mov	r1, r3
 80164fa:	4836      	ldr	r0, [pc, #216]	; (80165d4 <MX_GPIO_Init+0x3e4>)
 80164fc:	f005 fe78 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 8016500:	2303      	movs	r3, #3
 8016502:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016504:	2302      	movs	r3, #2
 8016506:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016508:	2300      	movs	r3, #0
 801650a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801650c:	2303      	movs	r3, #3
 801650e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8016510:	2309      	movs	r3, #9
 8016512:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8016514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016518:	4619      	mov	r1, r3
 801651a:	482f      	ldr	r0, [pc, #188]	; (80165d8 <MX_GPIO_Init+0x3e8>)
 801651c:	f005 fe68 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 8016520:	2368      	movs	r3, #104	; 0x68
 8016522:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016524:	2301      	movs	r3, #1
 8016526:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016528:	2300      	movs	r3, #0
 801652a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801652c:	2303      	movs	r3, #3
 801652e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8016530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016534:	4619      	mov	r1, r3
 8016536:	4828      	ldr	r0, [pc, #160]	; (80165d8 <MX_GPIO_Init+0x3e8>)
 8016538:	f005 fe5a 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 801653c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016540:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016542:	2300      	movs	r3, #0
 8016544:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016546:	2300      	movs	r3, #0
 8016548:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 801654a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801654e:	4619      	mov	r1, r3
 8016550:	4822      	ldr	r0, [pc, #136]	; (80165dc <MX_GPIO_Init+0x3ec>)
 8016552:	f005 fe4d 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 8016556:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801655a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801655c:	2301      	movs	r3, #1
 801655e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016560:	2300      	movs	r3, #0
 8016562:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016564:	2300      	movs	r3, #0
 8016566:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8016568:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801656c:	4619      	mov	r1, r3
 801656e:	481b      	ldr	r0, [pc, #108]	; (80165dc <MX_GPIO_Init+0x3ec>)
 8016570:	f005 fe3e 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 8016574:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801657a:	2301      	movs	r3, #1
 801657c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801657e:	2300      	movs	r3, #0
 8016580:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016582:	2303      	movs	r3, #3
 8016584:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 8016586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801658a:	4619      	mov	r1, r3
 801658c:	4813      	ldr	r0, [pc, #76]	; (80165dc <MX_GPIO_Init+0x3ec>)
 801658e:	f005 fe2f 	bl	801c1f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 8016592:	2318      	movs	r3, #24
 8016594:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016596:	2300      	movs	r3, #0
 8016598:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801659a:	2300      	movs	r3, #0
 801659c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801659e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80165a2:	4619      	mov	r1, r3
 80165a4:	480e      	ldr	r0, [pc, #56]	; (80165e0 <MX_GPIO_Init+0x3f0>)
 80165a6:	f005 fe23 	bl	801c1f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80165aa:	2200      	movs	r2, #0
 80165ac:	2101      	movs	r1, #1
 80165ae:	2006      	movs	r0, #6
 80165b0:	f004 faf3 	bl	801ab9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80165b4:	2006      	movs	r0, #6
 80165b6:	f004 fb0c 	bl	801abd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 80165ba:	2201      	movs	r2, #1
 80165bc:	2101      	movs	r1, #1
 80165be:	2007      	movs	r0, #7
 80165c0:	f004 faeb 	bl	801ab9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80165c4:	2007      	movs	r0, #7
 80165c6:	f004 fb04 	bl	801abd2 <HAL_NVIC_EnableIRQ>

}
 80165ca:	bf00      	nop
 80165cc:	3740      	adds	r7, #64	; 0x40
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}
 80165d2:	bf00      	nop
 80165d4:	40020800 	.word	0x40020800
 80165d8:	40020c00 	.word	0x40020c00
 80165dc:	40022400 	.word	0x40022400
 80165e0:	40022800 	.word	0x40022800

080165e4 <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 80165e8:	4b0a      	ldr	r3, [pc, #40]	; (8016614 <Feed_wdt+0x30>)
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	4618      	mov	r0, r3
 80165ee:	f7f9 ffd5 	bl	801059c <HAL_Elaps_Ticks>
 80165f2:	4603      	mov	r3, r0
 80165f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80165f8:	d309      	bcc.n	801660e <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 80165fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80165fe:	4806      	ldr	r0, [pc, #24]	; (8016618 <Feed_wdt+0x34>)
 8016600:	f005 ffd3 	bl	801c5aa <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 8016604:	f003 fae8 	bl	8019bd8 <HAL_GetTick>
 8016608:	4603      	mov	r3, r0
 801660a:	4a02      	ldr	r2, [pc, #8]	; (8016614 <Feed_wdt+0x30>)
 801660c:	6013      	str	r3, [r2, #0]
	}

}
 801660e:	bf00      	nop
 8016610:	bd80      	pop	{r7, pc}
 8016612:	bf00      	nop
 8016614:	2000b3c8 	.word	0x2000b3c8
 8016618:	40022400 	.word	0x40022400

0801661c <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 801661c:	b580      	push	{r7, lr}
 801661e:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 8016620:	4b09      	ldr	r3, [pc, #36]	; (8016648 <Blink_S2+0x2c>)
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	4618      	mov	r0, r3
 8016626:	f7f9 ffb9 	bl	801059c <HAL_Elaps_Ticks>
 801662a:	4603      	mov	r3, r0
 801662c:	2b64      	cmp	r3, #100	; 0x64
 801662e:	d909      	bls.n	8016644 <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 8016630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016634:	4805      	ldr	r0, [pc, #20]	; (801664c <Blink_S2+0x30>)
 8016636:	f005 ffb8 	bl	801c5aa <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 801663a:	f003 facd 	bl	8019bd8 <HAL_GetTick>
 801663e:	4603      	mov	r3, r0
 8016640:	4a01      	ldr	r2, [pc, #4]	; (8016648 <Blink_S2+0x2c>)
 8016642:	6013      	str	r3, [r2, #0]
	}
}
 8016644:	bf00      	nop
 8016646:	bd80      	pop	{r7, pc}
 8016648:	2000b3cc 	.word	0x2000b3cc
 801664c:	40021c00 	.word	0x40021c00

08016650 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8016654:	4b1b      	ldr	r3, [pc, #108]	; (80166c4 <MX_I2C1_Init+0x74>)
 8016656:	4a1c      	ldr	r2, [pc, #112]	; (80166c8 <MX_I2C1_Init+0x78>)
 8016658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 801665a:	4b1a      	ldr	r3, [pc, #104]	; (80166c4 <MX_I2C1_Init+0x74>)
 801665c:	4a1b      	ldr	r2, [pc, #108]	; (80166cc <MX_I2C1_Init+0x7c>)
 801665e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8016660:	4b18      	ldr	r3, [pc, #96]	; (80166c4 <MX_I2C1_Init+0x74>)
 8016662:	2200      	movs	r2, #0
 8016664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8016666:	4b17      	ldr	r3, [pc, #92]	; (80166c4 <MX_I2C1_Init+0x74>)
 8016668:	2201      	movs	r2, #1
 801666a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801666c:	4b15      	ldr	r3, [pc, #84]	; (80166c4 <MX_I2C1_Init+0x74>)
 801666e:	2200      	movs	r2, #0
 8016670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8016672:	4b14      	ldr	r3, [pc, #80]	; (80166c4 <MX_I2C1_Init+0x74>)
 8016674:	2200      	movs	r2, #0
 8016676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8016678:	4b12      	ldr	r3, [pc, #72]	; (80166c4 <MX_I2C1_Init+0x74>)
 801667a:	2200      	movs	r2, #0
 801667c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801667e:	4b11      	ldr	r3, [pc, #68]	; (80166c4 <MX_I2C1_Init+0x74>)
 8016680:	2200      	movs	r2, #0
 8016682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8016684:	4b0f      	ldr	r3, [pc, #60]	; (80166c4 <MX_I2C1_Init+0x74>)
 8016686:	2200      	movs	r2, #0
 8016688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801668a:	480e      	ldr	r0, [pc, #56]	; (80166c4 <MX_I2C1_Init+0x74>)
 801668c:	f005 ffcc 	bl	801c628 <HAL_I2C_Init>
 8016690:	4603      	mov	r3, r0
 8016692:	2b00      	cmp	r3, #0
 8016694:	d001      	beq.n	801669a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8016696:	f001 fca5 	bl	8017fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801669a:	2100      	movs	r1, #0
 801669c:	4809      	ldr	r0, [pc, #36]	; (80166c4 <MX_I2C1_Init+0x74>)
 801669e:	f006 fd1b 	bl	801d0d8 <HAL_I2CEx_ConfigAnalogFilter>
 80166a2:	4603      	mov	r3, r0
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d001      	beq.n	80166ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80166a8:	f001 fc9c 	bl	8017fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80166ac:	2100      	movs	r1, #0
 80166ae:	4805      	ldr	r0, [pc, #20]	; (80166c4 <MX_I2C1_Init+0x74>)
 80166b0:	f006 fd5d 	bl	801d16e <HAL_I2CEx_ConfigDigitalFilter>
 80166b4:	4603      	mov	r3, r0
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d001      	beq.n	80166be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80166ba:	f001 fc93 	bl	8017fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80166be:	bf00      	nop
 80166c0:	bd80      	pop	{r7, pc}
 80166c2:	bf00      	nop
 80166c4:	2000b3d0 	.word	0x2000b3d0
 80166c8:	40005400 	.word	0x40005400
 80166cc:	c0000e12 	.word	0xc0000e12

080166d0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80166d4:	4b1b      	ldr	r3, [pc, #108]	; (8016744 <MX_I2C2_Init+0x74>)
 80166d6:	4a1c      	ldr	r2, [pc, #112]	; (8016748 <MX_I2C2_Init+0x78>)
 80166d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 80166da:	4b1a      	ldr	r3, [pc, #104]	; (8016744 <MX_I2C2_Init+0x74>)
 80166dc:	4a1b      	ldr	r2, [pc, #108]	; (801674c <MX_I2C2_Init+0x7c>)
 80166de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80166e0:	4b18      	ldr	r3, [pc, #96]	; (8016744 <MX_I2C2_Init+0x74>)
 80166e2:	2200      	movs	r2, #0
 80166e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80166e6:	4b17      	ldr	r3, [pc, #92]	; (8016744 <MX_I2C2_Init+0x74>)
 80166e8:	2201      	movs	r2, #1
 80166ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80166ec:	4b15      	ldr	r3, [pc, #84]	; (8016744 <MX_I2C2_Init+0x74>)
 80166ee:	2200      	movs	r2, #0
 80166f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80166f2:	4b14      	ldr	r3, [pc, #80]	; (8016744 <MX_I2C2_Init+0x74>)
 80166f4:	2200      	movs	r2, #0
 80166f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80166f8:	4b12      	ldr	r3, [pc, #72]	; (8016744 <MX_I2C2_Init+0x74>)
 80166fa:	2200      	movs	r2, #0
 80166fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80166fe:	4b11      	ldr	r3, [pc, #68]	; (8016744 <MX_I2C2_Init+0x74>)
 8016700:	2200      	movs	r2, #0
 8016702:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8016704:	4b0f      	ldr	r3, [pc, #60]	; (8016744 <MX_I2C2_Init+0x74>)
 8016706:	2200      	movs	r2, #0
 8016708:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 801670a:	480e      	ldr	r0, [pc, #56]	; (8016744 <MX_I2C2_Init+0x74>)
 801670c:	f005 ff8c 	bl	801c628 <HAL_I2C_Init>
 8016710:	4603      	mov	r3, r0
 8016712:	2b00      	cmp	r3, #0
 8016714:	d001      	beq.n	801671a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8016716:	f001 fc65 	bl	8017fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801671a:	2100      	movs	r1, #0
 801671c:	4809      	ldr	r0, [pc, #36]	; (8016744 <MX_I2C2_Init+0x74>)
 801671e:	f006 fcdb 	bl	801d0d8 <HAL_I2CEx_ConfigAnalogFilter>
 8016722:	4603      	mov	r3, r0
 8016724:	2b00      	cmp	r3, #0
 8016726:	d001      	beq.n	801672c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8016728:	f001 fc5c 	bl	8017fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 801672c:	2100      	movs	r1, #0
 801672e:	4805      	ldr	r0, [pc, #20]	; (8016744 <MX_I2C2_Init+0x74>)
 8016730:	f006 fd1d 	bl	801d16e <HAL_I2CEx_ConfigDigitalFilter>
 8016734:	4603      	mov	r3, r0
 8016736:	2b00      	cmp	r3, #0
 8016738:	d001      	beq.n	801673e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 801673a:	f001 fc53 	bl	8017fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 801673e:	bf00      	nop
 8016740:	bd80      	pop	{r7, pc}
 8016742:	bf00      	nop
 8016744:	2000b424 	.word	0x2000b424
 8016748:	40005800 	.word	0x40005800
 801674c:	c0000e12 	.word	0xc0000e12

08016750 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b0b0      	sub	sp, #192	; 0xc0
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016758:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801675c:	2200      	movs	r2, #0
 801675e:	601a      	str	r2, [r3, #0]
 8016760:	605a      	str	r2, [r3, #4]
 8016762:	609a      	str	r2, [r3, #8]
 8016764:	60da      	str	r2, [r3, #12]
 8016766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016768:	f107 031c 	add.w	r3, r7, #28
 801676c:	2290      	movs	r2, #144	; 0x90
 801676e:	2100      	movs	r1, #0
 8016770:	4618      	mov	r0, r3
 8016772:	f010 f953 	bl	8026a1c <memset>
  if(i2cHandle->Instance==I2C1)
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	4a44      	ldr	r2, [pc, #272]	; (801688c <HAL_I2C_MspInit+0x13c>)
 801677c:	4293      	cmp	r3, r2
 801677e:	d13e      	bne.n	80167fe <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8016780:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016784:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8016786:	2300      	movs	r3, #0
 8016788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801678c:	f107 031c 	add.w	r3, r7, #28
 8016790:	4618      	mov	r0, r3
 8016792:	f007 fa2b 	bl	801dbec <HAL_RCCEx_PeriphCLKConfig>
 8016796:	4603      	mov	r3, r0
 8016798:	2b00      	cmp	r3, #0
 801679a:	d001      	beq.n	80167a0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 801679c:	f001 fc22 	bl	8017fe4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80167a0:	4b3b      	ldr	r3, [pc, #236]	; (8016890 <HAL_I2C_MspInit+0x140>)
 80167a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167a4:	4a3a      	ldr	r2, [pc, #232]	; (8016890 <HAL_I2C_MspInit+0x140>)
 80167a6:	f043 0302 	orr.w	r3, r3, #2
 80167aa:	6313      	str	r3, [r2, #48]	; 0x30
 80167ac:	4b38      	ldr	r3, [pc, #224]	; (8016890 <HAL_I2C_MspInit+0x140>)
 80167ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167b0:	f003 0302 	and.w	r3, r3, #2
 80167b4:	61bb      	str	r3, [r7, #24]
 80167b6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 80167b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80167bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80167c0:	2312      	movs	r3, #18
 80167c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80167c6:	2300      	movs	r3, #0
 80167c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80167cc:	2303      	movs	r3, #3
 80167ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80167d2:	2304      	movs	r3, #4
 80167d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80167d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80167dc:	4619      	mov	r1, r3
 80167de:	482d      	ldr	r0, [pc, #180]	; (8016894 <HAL_I2C_MspInit+0x144>)
 80167e0:	f005 fd06 	bl	801c1f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80167e4:	4b2a      	ldr	r3, [pc, #168]	; (8016890 <HAL_I2C_MspInit+0x140>)
 80167e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167e8:	4a29      	ldr	r2, [pc, #164]	; (8016890 <HAL_I2C_MspInit+0x140>)
 80167ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80167ee:	6413      	str	r3, [r2, #64]	; 0x40
 80167f0:	4b27      	ldr	r3, [pc, #156]	; (8016890 <HAL_I2C_MspInit+0x140>)
 80167f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80167f8:	617b      	str	r3, [r7, #20]
 80167fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80167fc:	e041      	b.n	8016882 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	4a25      	ldr	r2, [pc, #148]	; (8016898 <HAL_I2C_MspInit+0x148>)
 8016804:	4293      	cmp	r3, r2
 8016806:	d13c      	bne.n	8016882 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8016808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801680c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 801680e:	2300      	movs	r3, #0
 8016810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016814:	f107 031c 	add.w	r3, r7, #28
 8016818:	4618      	mov	r0, r3
 801681a:	f007 f9e7 	bl	801dbec <HAL_RCCEx_PeriphCLKConfig>
 801681e:	4603      	mov	r3, r0
 8016820:	2b00      	cmp	r3, #0
 8016822:	d001      	beq.n	8016828 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8016824:	f001 fbde 	bl	8017fe4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8016828:	4b19      	ldr	r3, [pc, #100]	; (8016890 <HAL_I2C_MspInit+0x140>)
 801682a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801682c:	4a18      	ldr	r2, [pc, #96]	; (8016890 <HAL_I2C_MspInit+0x140>)
 801682e:	f043 0320 	orr.w	r3, r3, #32
 8016832:	6313      	str	r3, [r2, #48]	; 0x30
 8016834:	4b16      	ldr	r3, [pc, #88]	; (8016890 <HAL_I2C_MspInit+0x140>)
 8016836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016838:	f003 0320 	and.w	r3, r3, #32
 801683c:	613b      	str	r3, [r7, #16]
 801683e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 8016840:	2303      	movs	r3, #3
 8016842:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8016846:	2312      	movs	r3, #18
 8016848:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801684c:	2300      	movs	r3, #0
 801684e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016852:	2303      	movs	r3, #3
 8016854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8016858:	2304      	movs	r3, #4
 801685a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801685e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016862:	4619      	mov	r1, r3
 8016864:	480d      	ldr	r0, [pc, #52]	; (801689c <HAL_I2C_MspInit+0x14c>)
 8016866:	f005 fcc3 	bl	801c1f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 801686a:	4b09      	ldr	r3, [pc, #36]	; (8016890 <HAL_I2C_MspInit+0x140>)
 801686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801686e:	4a08      	ldr	r2, [pc, #32]	; (8016890 <HAL_I2C_MspInit+0x140>)
 8016870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8016874:	6413      	str	r3, [r2, #64]	; 0x40
 8016876:	4b06      	ldr	r3, [pc, #24]	; (8016890 <HAL_I2C_MspInit+0x140>)
 8016878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801687a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801687e:	60fb      	str	r3, [r7, #12]
 8016880:	68fb      	ldr	r3, [r7, #12]
}
 8016882:	bf00      	nop
 8016884:	37c0      	adds	r7, #192	; 0xc0
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}
 801688a:	bf00      	nop
 801688c:	40005400 	.word	0x40005400
 8016890:	40023800 	.word	0x40023800
 8016894:	40020400 	.word	0x40020400
 8016898:	40005800 	.word	0x40005800
 801689c:	40021400 	.word	0x40021400

080168a0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80168a4:	4b0b      	ldr	r3, [pc, #44]	; (80168d4 <MX_IWDG_Init+0x34>)
 80168a6:	4a0c      	ldr	r2, [pc, #48]	; (80168d8 <MX_IWDG_Init+0x38>)
 80168a8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80168aa:	4b0a      	ldr	r3, [pc, #40]	; (80168d4 <MX_IWDG_Init+0x34>)
 80168ac:	2203      	movs	r2, #3
 80168ae:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80168b0:	4b08      	ldr	r3, [pc, #32]	; (80168d4 <MX_IWDG_Init+0x34>)
 80168b2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80168b6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 80168b8:	4b06      	ldr	r3, [pc, #24]	; (80168d4 <MX_IWDG_Init+0x34>)
 80168ba:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80168be:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80168c0:	4804      	ldr	r0, [pc, #16]	; (80168d4 <MX_IWDG_Init+0x34>)
 80168c2:	f006 fca0 	bl	801d206 <HAL_IWDG_Init>
 80168c6:	4603      	mov	r3, r0
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d001      	beq.n	80168d0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80168cc:	f001 fb8a 	bl	8017fe4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80168d0:	bf00      	nop
 80168d2:	bd80      	pop	{r7, pc}
 80168d4:	2000b478 	.word	0x2000b478
 80168d8:	40003000 	.word	0x40003000

080168dc <Process_Kyosan_EI>:
#ifdef EI_1
uint8_t SendThisCardRelays = 0;
#endif

void Process_Kyosan_EI(void)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	af00      	add	r7, sp, #0

	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 80168e0:	4811      	ldr	r0, [pc, #68]	; (8016928 <Process_Kyosan_EI+0x4c>)
 80168e2:	f006 fcdf 	bl	801d2a4 <HAL_IWDG_Refresh>

		Feed_wdt();
 80168e6:	f7ff fe7d 	bl	80165e4 <Feed_wdt>

		Get_Kyosan_EI_Message(KYOSAN_PORT);
 80168ea:	2003      	movs	r0, #3
 80168ec:	f000 f9f4 	bl	8016cd8 <Get_Kyosan_EI_Message>

		Process_Send_Signals_2_MIE_Kyosan();
 80168f0:	f000 f912 	bl	8016b18 <Process_Send_Signals_2_MIE_Kyosan>

		DetectCanXchangeFailure();
 80168f4:	f000 f8ce 	bl	8016a94 <DetectCanXchangeFailure>

		Process_ComFailTimeout();
 80168f8:	f000 f81c 	bl	8016934 <Process_ComFailTimeout>

		readCanToStructs();
 80168fc:	f7fb f9da 	bl	8011cb4 <readCanToStructs>

		Check_forKyosanCMD();
 8016900:	f000 fe72 	bl	80175e8 <Check_forKyosanCMD>

		SendKyosanRelays2Other();
 8016904:	f000 f8ac 	bl	8016a60 <SendKyosanRelays2Other>

		CheckEIPC_DAT_CRC();
 8016908:	f7ea fb20 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 801690c:	4b07      	ldr	r3, [pc, #28]	; (801692c <Process_Kyosan_EI+0x50>)
 801690e:	781b      	ldrb	r3, [r3, #0]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d0e5      	beq.n	80168e0 <Process_Kyosan_EI+0x4>
		{
			gucFlagUpdate = 3;
 8016914:	4b06      	ldr	r3, [pc, #24]	; (8016930 <Process_Kyosan_EI+0x54>)
 8016916:	2203      	movs	r2, #3
 8016918:	701a      	strb	r2, [r3, #0]
		}
	}

	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 801691a:	4803      	ldr	r0, [pc, #12]	; (8016928 <Process_Kyosan_EI+0x4c>)
 801691c:	f006 fcc2 	bl	801d2a4 <HAL_IWDG_Refresh>
		Data_Processing();
 8016920:	f001 ffde 	bl	80188e0 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8016924:	e7f9      	b.n	801691a <Process_Kyosan_EI+0x3e>
 8016926:	bf00      	nop
 8016928:	2000b478 	.word	0x2000b478
 801692c:	20000bba 	.word	0x20000bba
 8016930:	20000fbd 	.word	0x20000fbd

08016934 <Process_ComFailTimeout>:
	}
}

void Process_ComFailTimeout(void)
{
 8016934:	b580      	push	{r7, lr}
 8016936:	af00      	add	r7, sp, #0
	if((HAL_Elaps_Ticks(KyosanClocks.ControlDataPosRecvCLK) > EI_data.Kyosan_st.Comm_Fail_Time)
 8016938:	4b43      	ldr	r3, [pc, #268]	; (8016a48 <Process_ComFailTimeout+0x114>)
 801693a:	685b      	ldr	r3, [r3, #4]
 801693c:	4618      	mov	r0, r3
 801693e:	f7f9 fe2d 	bl	801059c <HAL_Elaps_Ticks>
 8016942:	4602      	mov	r2, r0
 8016944:	4b41      	ldr	r3, [pc, #260]	; (8016a4c <Process_ComFailTimeout+0x118>)
 8016946:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 801694a:	429a      	cmp	r2, r3
 801694c:	d82b      	bhi.n	80169a6 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.ControlDataNegRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 801694e:	4b3e      	ldr	r3, [pc, #248]	; (8016a48 <Process_ComFailTimeout+0x114>)
 8016950:	689b      	ldr	r3, [r3, #8]
 8016952:	4618      	mov	r0, r3
 8016954:	f7f9 fe22 	bl	801059c <HAL_Elaps_Ticks>
 8016958:	4602      	mov	r2, r0
 801695a:	4b3c      	ldr	r3, [pc, #240]	; (8016a4c <Process_ComFailTimeout+0x118>)
 801695c:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8016960:	429a      	cmp	r2, r3
 8016962:	d820      	bhi.n	80169a6 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.MessageReceivedCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 8016964:	4b38      	ldr	r3, [pc, #224]	; (8016a48 <Process_ComFailTimeout+0x114>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	4618      	mov	r0, r3
 801696a:	f7f9 fe17 	bl	801059c <HAL_Elaps_Ticks>
 801696e:	4602      	mov	r2, r0
 8016970:	4b36      	ldr	r3, [pc, #216]	; (8016a4c <Process_ComFailTimeout+0x118>)
 8016972:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8016976:	429a      	cmp	r2, r3
 8016978:	d815      	bhi.n	80169a6 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.PollingDataPosRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 801697a:	4b33      	ldr	r3, [pc, #204]	; (8016a48 <Process_ComFailTimeout+0x114>)
 801697c:	68db      	ldr	r3, [r3, #12]
 801697e:	4618      	mov	r0, r3
 8016980:	f7f9 fe0c 	bl	801059c <HAL_Elaps_Ticks>
 8016984:	4602      	mov	r2, r0
 8016986:	4b31      	ldr	r3, [pc, #196]	; (8016a4c <Process_ComFailTimeout+0x118>)
 8016988:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 801698c:	429a      	cmp	r2, r3
 801698e:	d80a      	bhi.n	80169a6 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.PollingDataNegRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time))
 8016990:	4b2d      	ldr	r3, [pc, #180]	; (8016a48 <Process_ComFailTimeout+0x114>)
 8016992:	691b      	ldr	r3, [r3, #16]
 8016994:	4618      	mov	r0, r3
 8016996:	f7f9 fe01 	bl	801059c <HAL_Elaps_Ticks>
 801699a:	4602      	mov	r2, r0
 801699c:	4b2b      	ldr	r3, [pc, #172]	; (8016a4c <Process_ComFailTimeout+0x118>)
 801699e:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80169a2:	429a      	cmp	r2, r3
 80169a4:	d913      	bls.n	80169ce <Process_ComFailTimeout+0x9a>
	{

		if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 80169a6:	492a      	ldr	r1, [pc, #168]	; (8016a50 <Process_ComFailTimeout+0x11c>)
 80169a8:	482a      	ldr	r0, [pc, #168]	; (8016a54 <Process_ComFailTimeout+0x120>)
 80169aa:	f7e9 fc49 	bl	8000240 <strcmp>
 80169ae:	4603      	mov	r3, r0
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d047      	beq.n	8016a44 <Process_ComFailTimeout+0x110>
			return;
		}



		if(Kyosan_SelfRelays.Message_Receiving == SET)
 80169b4:	4b28      	ldr	r3, [pc, #160]	; (8016a58 <Process_ComFailTimeout+0x124>)
 80169b6:	785b      	ldrb	r3, [r3, #1]
 80169b8:	2b01      	cmp	r3, #1
 80169ba:	d144      	bne.n	8016a46 <Process_ComFailTimeout+0x112>
		{
			printf("Time out for Message Packets Reached\n");
 80169bc:	4827      	ldr	r0, [pc, #156]	; (8016a5c <Process_ComFailTimeout+0x128>)
 80169be:	f010 f9b1 	bl	8026d24 <puts>
			memset(&Kyosan_SelfRelays,0,sizeof(KYOSAN_RELAYS_t));
 80169c2:	2240      	movs	r2, #64	; 0x40
 80169c4:	2100      	movs	r1, #0
 80169c6:	4824      	ldr	r0, [pc, #144]	; (8016a58 <Process_ComFailTimeout+0x124>)
 80169c8:	f010 f828 	bl	8026a1c <memset>
		if(Kyosan_SelfRelays.Message_Receiving == SET)
 80169cc:	e03b      	b.n	8016a46 <Process_ComFailTimeout+0x112>
		}
	}
	else if((HAL_Elaps_Ticks(KyosanClocks.ControlDataPosRecvCLK) < EI_data.Kyosan_st.Comm_Fail_Time)
 80169ce:	4b1e      	ldr	r3, [pc, #120]	; (8016a48 <Process_ComFailTimeout+0x114>)
 80169d0:	685b      	ldr	r3, [r3, #4]
 80169d2:	4618      	mov	r0, r3
 80169d4:	f7f9 fde2 	bl	801059c <HAL_Elaps_Ticks>
 80169d8:	4602      	mov	r2, r0
 80169da:	4b1c      	ldr	r3, [pc, #112]	; (8016a4c <Process_ComFailTimeout+0x118>)
 80169dc:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80169e0:	429a      	cmp	r2, r3
 80169e2:	d230      	bcs.n	8016a46 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.ControlDataNegRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 80169e4:	4b18      	ldr	r3, [pc, #96]	; (8016a48 <Process_ComFailTimeout+0x114>)
 80169e6:	689b      	ldr	r3, [r3, #8]
 80169e8:	4618      	mov	r0, r3
 80169ea:	f7f9 fdd7 	bl	801059c <HAL_Elaps_Ticks>
 80169ee:	4602      	mov	r2, r0
 80169f0:	4b16      	ldr	r3, [pc, #88]	; (8016a4c <Process_ComFailTimeout+0x118>)
 80169f2:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80169f6:	429a      	cmp	r2, r3
 80169f8:	d225      	bcs.n	8016a46 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.MessageReceivedCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 80169fa:	4b13      	ldr	r3, [pc, #76]	; (8016a48 <Process_ComFailTimeout+0x114>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	4618      	mov	r0, r3
 8016a00:	f7f9 fdcc 	bl	801059c <HAL_Elaps_Ticks>
 8016a04:	4602      	mov	r2, r0
 8016a06:	4b11      	ldr	r3, [pc, #68]	; (8016a4c <Process_ComFailTimeout+0x118>)
 8016a08:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8016a0c:	429a      	cmp	r2, r3
 8016a0e:	d21a      	bcs.n	8016a46 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.PollingDataPosRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 8016a10:	4b0d      	ldr	r3, [pc, #52]	; (8016a48 <Process_ComFailTimeout+0x114>)
 8016a12:	68db      	ldr	r3, [r3, #12]
 8016a14:	4618      	mov	r0, r3
 8016a16:	f7f9 fdc1 	bl	801059c <HAL_Elaps_Ticks>
 8016a1a:	4602      	mov	r2, r0
 8016a1c:	4b0b      	ldr	r3, [pc, #44]	; (8016a4c <Process_ComFailTimeout+0x118>)
 8016a1e:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8016a22:	429a      	cmp	r2, r3
 8016a24:	d20f      	bcs.n	8016a46 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.PollingDataNegRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time))
 8016a26:	4b08      	ldr	r3, [pc, #32]	; (8016a48 <Process_ComFailTimeout+0x114>)
 8016a28:	691b      	ldr	r3, [r3, #16]
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f7f9 fdb6 	bl	801059c <HAL_Elaps_Ticks>
 8016a30:	4602      	mov	r2, r0
 8016a32:	4b06      	ldr	r3, [pc, #24]	; (8016a4c <Process_ComFailTimeout+0x118>)
 8016a34:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8016a38:	429a      	cmp	r2, r3
 8016a3a:	d204      	bcs.n	8016a46 <Process_ComFailTimeout+0x112>

	{
		Kyosan_SelfRelays.Message_Receiving = SET;
 8016a3c:	4b06      	ldr	r3, [pc, #24]	; (8016a58 <Process_ComFailTimeout+0x124>)
 8016a3e:	2201      	movs	r2, #1
 8016a40:	705a      	strb	r2, [r3, #1]
 8016a42:	e000      	b.n	8016a46 <Process_ComFailTimeout+0x112>
			return;
 8016a44:	bf00      	nop
	}
}
 8016a46:	bd80      	pop	{r7, pc}
 8016a48:	2000b490 	.word	0x2000b490
 8016a4c:	20000504 	.word	0x20000504
 8016a50:	0802badc 	.word	0x0802badc
 8016a54:	20000505 	.word	0x20000505
 8016a58:	2000b4a4 	.word	0x2000b4a4
 8016a5c:	0802bae8 	.word	0x0802bae8

08016a60 <SendKyosanRelays2Other>:
		RelayMisMatchCnt = RESET;
	}
}

void SendKyosanRelays2Other(void)
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	af00      	add	r7, sp, #0
	static uint32_t RelaySendingClk = 0;
	if(HAL_Elaps_Ticks(RelaySendingClk) > 3000)
 8016a64:	4b0a      	ldr	r3, [pc, #40]	; (8016a90 <SendKyosanRelays2Other+0x30>)
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f7f9 fd97 	bl	801059c <HAL_Elaps_Ticks>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016a74:	4293      	cmp	r3, r2
 8016a76:	d908      	bls.n	8016a8a <SendKyosanRelays2Other+0x2a>
	{
#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8016a78:	f240 2007 	movw	r0, #519	; 0x207
 8016a7c:	f7fa fb42 	bl	8011104 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif
		RelaySendingClk = HAL_GetTick();
 8016a80:	f003 f8aa 	bl	8019bd8 <HAL_GetTick>
 8016a84:	4603      	mov	r3, r0
 8016a86:	4a02      	ldr	r2, [pc, #8]	; (8016a90 <SendKyosanRelays2Other+0x30>)
 8016a88:	6013      	str	r3, [r2, #0]
	}
}
 8016a8a:	bf00      	nop
 8016a8c:	bd80      	pop	{r7, pc}
 8016a8e:	bf00      	nop
 8016a90:	2000b9dc 	.word	0x2000b9dc

08016a94 <DetectCanXchangeFailure>:

void DetectCanXchangeFailure(void)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	af00      	add	r7, sp, #0
	static uint32_t S2_BlinkClk = 0;

	if( (HAL_Elaps_Ticks(LastCANReceived_Clk_Kyosan) > EI_data.Kyosan_st.CAN_Fail_Clk) && (Is_CAN_Exchange_happening != RESET ))
 8016a98:	4b18      	ldr	r3, [pc, #96]	; (8016afc <DetectCanXchangeFailure+0x68>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	f7f9 fd7d 	bl	801059c <HAL_Elaps_Ticks>
 8016aa2:	4602      	mov	r2, r0
 8016aa4:	4b16      	ldr	r3, [pc, #88]	; (8016b00 <DetectCanXchangeFailure+0x6c>)
 8016aa6:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d912      	bls.n	8016ad4 <DetectCanXchangeFailure+0x40>
 8016aae:	4b15      	ldr	r3, [pc, #84]	; (8016b04 <DetectCanXchangeFailure+0x70>)
 8016ab0:	781b      	ldrb	r3, [r3, #0]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d00e      	beq.n	8016ad4 <DetectCanXchangeFailure+0x40>
	{
		if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 8016ab6:	4914      	ldr	r1, [pc, #80]	; (8016b08 <DetectCanXchangeFailure+0x74>)
 8016ab8:	4814      	ldr	r0, [pc, #80]	; (8016b0c <DetectCanXchangeFailure+0x78>)
 8016aba:	f7e9 fbc1 	bl	8000240 <strcmp>
 8016abe:	4603      	mov	r3, r0
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d103      	bne.n	8016acc <DetectCanXchangeFailure+0x38>
		{
			Is_CAN_Exchange_happening = SET;
 8016ac4:	4b0f      	ldr	r3, [pc, #60]	; (8016b04 <DetectCanXchangeFailure+0x70>)
 8016ac6:	2201      	movs	r2, #1
 8016ac8:	701a      	strb	r2, [r3, #0]
			return;
 8016aca:	e016      	b.n	8016afa <DetectCanXchangeFailure+0x66>
		}

		Is_CAN_Exchange_happening = RESET;
 8016acc:	4b0d      	ldr	r3, [pc, #52]	; (8016b04 <DetectCanXchangeFailure+0x70>)
 8016ace:	2200      	movs	r2, #0
 8016ad0:	701a      	strb	r2, [r3, #0]
 8016ad2:	e012      	b.n	8016afa <DetectCanXchangeFailure+0x66>
	}
	else
	{
		if(HAL_Elaps_Ticks(S2_BlinkClk) > 300)
 8016ad4:	4b0e      	ldr	r3, [pc, #56]	; (8016b10 <DetectCanXchangeFailure+0x7c>)
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f7f9 fd5f 	bl	801059c <HAL_Elaps_Ticks>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016ae4:	d909      	bls.n	8016afa <DetectCanXchangeFailure+0x66>
		{
			S2_BlinkClk = HAL_GetTick();
 8016ae6:	f003 f877 	bl	8019bd8 <HAL_GetTick>
 8016aea:	4603      	mov	r3, r0
 8016aec:	4a08      	ldr	r2, [pc, #32]	; (8016b10 <DetectCanXchangeFailure+0x7c>)
 8016aee:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 8016af0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016af4:	4807      	ldr	r0, [pc, #28]	; (8016b14 <DetectCanXchangeFailure+0x80>)
 8016af6:	f005 fd58 	bl	801c5aa <HAL_GPIO_TogglePin>
		}

	}
}
 8016afa:	bd80      	pop	{r7, pc}
 8016afc:	2000b5e8 	.word	0x2000b5e8
 8016b00:	20000504 	.word	0x20000504
 8016b04:	2000030b 	.word	0x2000030b
 8016b08:	0802badc 	.word	0x0802badc
 8016b0c:	20000505 	.word	0x20000505
 8016b10:	2000b9e0 	.word	0x2000b9e0
 8016b14:	40021c00 	.word	0x40021c00

08016b18 <Process_Send_Signals_2_MIE_Kyosan>:

void Process_Send_Signals_2_MIE_Kyosan(void)
{
 8016b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b1a:	b083      	sub	sp, #12
 8016b1c:	af00      	add	r7, sp, #0
	uint8_t Choice =0;
 8016b1e:	2300      	movs	r3, #0
 8016b20:	71fb      	strb	r3, [r7, #7]

	if(HAL_Elaps_Ticks(MIE_SignalsSending_Clk_Kyosan) > EI_data.Kyosan_st.MIE_SEND_CLK)
 8016b22:	4b62      	ldr	r3, [pc, #392]	; (8016cac <Process_Send_Signals_2_MIE_Kyosan+0x194>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	4618      	mov	r0, r3
 8016b28:	f7f9 fd38 	bl	801059c <HAL_Elaps_Ticks>
 8016b2c:	4602      	mov	r2, r0
 8016b2e:	4b60      	ldr	r3, [pc, #384]	; (8016cb0 <Process_Send_Signals_2_MIE_Kyosan+0x198>)
 8016b30:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8016b34:	429a      	cmp	r2, r3
 8016b36:	f240 80b5 	bls.w	8016ca4 <Process_Send_Signals_2_MIE_Kyosan+0x18c>
	{
#ifdef EI_1
		if((Is_CAN_Exchange_happening == SET) && (MisMatchFlagKyosan == RESET) )
 8016b3a:	4b5e      	ldr	r3, [pc, #376]	; (8016cb4 <Process_Send_Signals_2_MIE_Kyosan+0x19c>)
 8016b3c:	781b      	ldrb	r3, [r3, #0]
 8016b3e:	2b01      	cmp	r3, #1
 8016b40:	f040 80a2 	bne.w	8016c88 <Process_Send_Signals_2_MIE_Kyosan+0x170>
 8016b44:	4b5c      	ldr	r3, [pc, #368]	; (8016cb8 <Process_Send_Signals_2_MIE_Kyosan+0x1a0>)
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	f040 809d 	bne.w	8016c88 <Process_Send_Signals_2_MIE_Kyosan+0x170>
		{

			Choice = 0;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	71fb      	strb	r3, [r7, #7]
			(Kyosan_OtherRelays.Message_Receiving == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 8016b52:	4b5a      	ldr	r3, [pc, #360]	; (8016cbc <Process_Send_Signals_2_MIE_Kyosan+0x1a4>)
 8016b54:	785b      	ldrb	r3, [r3, #1]
 8016b56:	2b01      	cmp	r3, #1
 8016b58:	d104      	bne.n	8016b64 <Process_Send_Signals_2_MIE_Kyosan+0x4c>
 8016b5a:	79fb      	ldrb	r3, [r7, #7]
 8016b5c:	f043 0301 	orr.w	r3, r3, #1
 8016b60:	71fb      	strb	r3, [r7, #7]
 8016b62:	e003      	b.n	8016b6c <Process_Send_Signals_2_MIE_Kyosan+0x54>
 8016b64:	79fb      	ldrb	r3, [r7, #7]
 8016b66:	f023 0301 	bic.w	r3, r3, #1
 8016b6a:	71fb      	strb	r3, [r7, #7]
			(Kyosan_SelfRelays.Message_Receiving == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 8016b6c:	4b54      	ldr	r3, [pc, #336]	; (8016cc0 <Process_Send_Signals_2_MIE_Kyosan+0x1a8>)
 8016b6e:	785b      	ldrb	r3, [r3, #1]
 8016b70:	2b01      	cmp	r3, #1
 8016b72:	d104      	bne.n	8016b7e <Process_Send_Signals_2_MIE_Kyosan+0x66>
 8016b74:	79fb      	ldrb	r3, [r7, #7]
 8016b76:	f043 0302 	orr.w	r3, r3, #2
 8016b7a:	71fb      	strb	r3, [r7, #7]
 8016b7c:	e003      	b.n	8016b86 <Process_Send_Signals_2_MIE_Kyosan+0x6e>
 8016b7e:	79fb      	ldrb	r3, [r7, #7]
 8016b80:	f023 0302 	bic.w	r3, r3, #2
 8016b84:	71fb      	strb	r3, [r7, #7]

			switch(Choice)
 8016b86:	79fb      	ldrb	r3, [r7, #7]
 8016b88:	2b01      	cmp	r3, #1
 8016b8a:	d005      	beq.n	8016b98 <Process_Send_Signals_2_MIE_Kyosan+0x80>
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	dd45      	ble.n	8016c1c <Process_Send_Signals_2_MIE_Kyosan+0x104>
 8016b90:	3b02      	subs	r3, #2
 8016b92:	2b01      	cmp	r3, #1
 8016b94:	d842      	bhi.n	8016c1c <Process_Send_Signals_2_MIE_Kyosan+0x104>
 8016b96:	e020      	b.n	8016bda <Process_Send_Signals_2_MIE_Kyosan+0xc2>
			{
			case ONE:
				//				printf("\nOtherCard SET\n");
				memcpy(&Kyosan_FinalRelays.Relays,Kyosan_OtherRelays.Relays,MAX_KYOSAN_RELAYS);
 8016b98:	4a4a      	ldr	r2, [pc, #296]	; (8016cc4 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 8016b9a:	4b48      	ldr	r3, [pc, #288]	; (8016cbc <Process_Send_Signals_2_MIE_Kyosan+0x1a4>)
 8016b9c:	3302      	adds	r3, #2
 8016b9e:	1c90      	adds	r0, r2, #2
 8016ba0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8016ba4:	4602      	mov	r2, r0
 8016ba6:	4619      	mov	r1, r3
 8016ba8:	f8d1 c000 	ldr.w	ip, [r1]
 8016bac:	684e      	ldr	r6, [r1, #4]
 8016bae:	688d      	ldr	r5, [r1, #8]
 8016bb0:	68c9      	ldr	r1, [r1, #12]
 8016bb2:	f8c2 c000 	str.w	ip, [r2]
 8016bb6:	6056      	str	r6, [r2, #4]
 8016bb8:	6095      	str	r5, [r2, #8]
 8016bba:	60d1      	str	r1, [r2, #12]
 8016bbc:	3310      	adds	r3, #16
 8016bbe:	3010      	adds	r0, #16
 8016bc0:	42a3      	cmp	r3, r4
 8016bc2:	d1ef      	bne.n	8016ba4 <Process_Send_Signals_2_MIE_Kyosan+0x8c>
 8016bc4:	4602      	mov	r2, r0
 8016bc6:	6818      	ldr	r0, [r3, #0]
 8016bc8:	6859      	ldr	r1, [r3, #4]
 8016bca:	689b      	ldr	r3, [r3, #8]
 8016bcc:	6010      	str	r0, [r2, #0]
 8016bce:	6051      	str	r1, [r2, #4]
 8016bd0:	6093      	str	r3, [r2, #8]
#ifdef EI_1
				SendThisCardRelays = RESET;
 8016bd2:	4b3d      	ldr	r3, [pc, #244]	; (8016cc8 <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 8016bd4:	2200      	movs	r2, #0
 8016bd6:	701a      	strb	r2, [r3, #0]
#endif
				break;
 8016bd8:	e028      	b.n	8016c2c <Process_Send_Signals_2_MIE_Kyosan+0x114>
			case TWO:
				//				printf("\nBothCard SET2\n");
			case THREE:
				//				printf("\nBothCard SET3\n");
				memcpy(&Kyosan_FinalRelays.Relays,Kyosan_SelfRelays.Relays,MAX_KYOSAN_RELAYS);
 8016bda:	4a3a      	ldr	r2, [pc, #232]	; (8016cc4 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 8016bdc:	4b38      	ldr	r3, [pc, #224]	; (8016cc0 <Process_Send_Signals_2_MIE_Kyosan+0x1a8>)
 8016bde:	3302      	adds	r3, #2
 8016be0:	1c90      	adds	r0, r2, #2
 8016be2:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8016be6:	4602      	mov	r2, r0
 8016be8:	4619      	mov	r1, r3
 8016bea:	f8d1 c000 	ldr.w	ip, [r1]
 8016bee:	684e      	ldr	r6, [r1, #4]
 8016bf0:	688d      	ldr	r5, [r1, #8]
 8016bf2:	68c9      	ldr	r1, [r1, #12]
 8016bf4:	f8c2 c000 	str.w	ip, [r2]
 8016bf8:	6056      	str	r6, [r2, #4]
 8016bfa:	6095      	str	r5, [r2, #8]
 8016bfc:	60d1      	str	r1, [r2, #12]
 8016bfe:	3310      	adds	r3, #16
 8016c00:	3010      	adds	r0, #16
 8016c02:	42a3      	cmp	r3, r4
 8016c04:	d1ef      	bne.n	8016be6 <Process_Send_Signals_2_MIE_Kyosan+0xce>
 8016c06:	4602      	mov	r2, r0
 8016c08:	6818      	ldr	r0, [r3, #0]
 8016c0a:	6859      	ldr	r1, [r3, #4]
 8016c0c:	689b      	ldr	r3, [r3, #8]
 8016c0e:	6010      	str	r0, [r2, #0]
 8016c10:	6051      	str	r1, [r2, #4]
 8016c12:	6093      	str	r3, [r2, #8]
#ifdef EI_1
				SendThisCardRelays = SET;
 8016c14:	4b2c      	ldr	r3, [pc, #176]	; (8016cc8 <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 8016c16:	2201      	movs	r2, #1
 8016c18:	701a      	strb	r2, [r3, #0]
#endif
				break;
 8016c1a:	e007      	b.n	8016c2c <Process_Send_Signals_2_MIE_Kyosan+0x114>

			default:
				memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
 8016c1c:	2240      	movs	r2, #64	; 0x40
 8016c1e:	2100      	movs	r1, #0
 8016c20:	4828      	ldr	r0, [pc, #160]	; (8016cc4 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 8016c22:	f00f fefb 	bl	8026a1c <memset>
#ifdef EI_1
				SendThisCardRelays = RESET;
 8016c26:	4b28      	ldr	r3, [pc, #160]	; (8016cc8 <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 8016c28:	2200      	movs	r2, #0
 8016c2a:	701a      	strb	r2, [r3, #0]
#endif
			}

			printf("Data Sending 2 MIE:\n");
 8016c2c:	4827      	ldr	r0, [pc, #156]	; (8016ccc <Process_Send_Signals_2_MIE_Kyosan+0x1b4>)
 8016c2e:	f010 f879 	bl	8026d24 <puts>
			for(uint8_t i=0;i<60;++i)
 8016c32:	2300      	movs	r3, #0
 8016c34:	71bb      	strb	r3, [r7, #6]
 8016c36:	e01c      	b.n	8016c72 <Process_Send_Signals_2_MIE_Kyosan+0x15a>
			{
				printf("%02X ",Kyosan_FinalRelays.Relays[i]);
 8016c38:	79bb      	ldrb	r3, [r7, #6]
 8016c3a:	4a22      	ldr	r2, [pc, #136]	; (8016cc4 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 8016c3c:	4413      	add	r3, r2
 8016c3e:	789b      	ldrb	r3, [r3, #2]
 8016c40:	4619      	mov	r1, r3
 8016c42:	4823      	ldr	r0, [pc, #140]	; (8016cd0 <Process_Send_Signals_2_MIE_Kyosan+0x1b8>)
 8016c44:	f00f ffd2 	bl	8026bec <iprintf>

				if(((i+1)%10)==0)
 8016c48:	79bb      	ldrb	r3, [r7, #6]
 8016c4a:	1c59      	adds	r1, r3, #1
 8016c4c:	4b21      	ldr	r3, [pc, #132]	; (8016cd4 <Process_Send_Signals_2_MIE_Kyosan+0x1bc>)
 8016c4e:	fb83 2301 	smull	r2, r3, r3, r1
 8016c52:	109a      	asrs	r2, r3, #2
 8016c54:	17cb      	asrs	r3, r1, #31
 8016c56:	1ad2      	subs	r2, r2, r3
 8016c58:	4613      	mov	r3, r2
 8016c5a:	009b      	lsls	r3, r3, #2
 8016c5c:	4413      	add	r3, r2
 8016c5e:	005b      	lsls	r3, r3, #1
 8016c60:	1aca      	subs	r2, r1, r3
 8016c62:	2a00      	cmp	r2, #0
 8016c64:	d102      	bne.n	8016c6c <Process_Send_Signals_2_MIE_Kyosan+0x154>
				{
					printf("\n");
 8016c66:	200a      	movs	r0, #10
 8016c68:	f00f ffd8 	bl	8026c1c <putchar>
			for(uint8_t i=0;i<60;++i)
 8016c6c:	79bb      	ldrb	r3, [r7, #6]
 8016c6e:	3301      	adds	r3, #1
 8016c70:	71bb      	strb	r3, [r7, #6]
 8016c72:	79bb      	ldrb	r3, [r7, #6]
 8016c74:	2b3b      	cmp	r3, #59	; 0x3b
 8016c76:	d9df      	bls.n	8016c38 <Process_Send_Signals_2_MIE_Kyosan+0x120>
				}
			}
			printf("\n");
 8016c78:	200a      	movs	r0, #10
 8016c7a:	f00f ffcf 	bl	8026c1c <putchar>
//			PrintSignalsKyosan();


			TransmitCanPkt(EI_PROCESS_DATA);
 8016c7e:	f240 1019 	movw	r0, #281	; 0x119
 8016c82:	f7fa fa3f 	bl	8011104 <TransmitCanPkt>
 8016c86:	e008      	b.n	8016c9a <Process_Send_Signals_2_MIE_Kyosan+0x182>
		}
		else
		{
			memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
 8016c88:	2240      	movs	r2, #64	; 0x40
 8016c8a:	2100      	movs	r1, #0
 8016c8c:	480d      	ldr	r0, [pc, #52]	; (8016cc4 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 8016c8e:	f00f fec5 	bl	8026a1c <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8016c92:	f240 1019 	movw	r0, #281	; 0x119
 8016c96:	f7fa fa35 	bl	8011104 <TransmitCanPkt>
		{
			memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
			TransmitCanPkt(EI_PROCESS_DATA);
		}
#endif
		MIE_SignalsSending_Clk_Kyosan = HAL_GetTick();
 8016c9a:	f002 ff9d 	bl	8019bd8 <HAL_GetTick>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	4a02      	ldr	r2, [pc, #8]	; (8016cac <Process_Send_Signals_2_MIE_Kyosan+0x194>)
 8016ca2:	6013      	str	r3, [r2, #0]
	}
}
 8016ca4:	bf00      	nop
 8016ca6:	370c      	adds	r7, #12
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cac:	2000b5e4 	.word	0x2000b5e4
 8016cb0:	20000504 	.word	0x20000504
 8016cb4:	2000030b 	.word	0x2000030b
 8016cb8:	2000b5ec 	.word	0x2000b5ec
 8016cbc:	2000b4e4 	.word	0x2000b4e4
 8016cc0:	2000b4a4 	.word	0x2000b4a4
 8016cc4:	2000b564 	.word	0x2000b564
 8016cc8:	2000b9d9 	.word	0x2000b9d9
 8016ccc:	0802bb10 	.word	0x0802bb10
 8016cd0:	0802bb24 	.word	0x0802bb24
 8016cd4:	66666667 	.word	0x66666667

08016cd8 <Get_Kyosan_EI_Message>:

void Get_Kyosan_EI_Message(uint8_t ComPort)
{
 8016cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cda:	b089      	sub	sp, #36	; 0x24
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	4603      	mov	r3, r0
 8016ce0:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	737b      	strb	r3, [r7, #13]
	static uint16_t Cur_Receive_Length = 0;
	static uint8_t Buffer[256] = {0,};
	static uint8_t Curnt_ProcessingDataType = 0;
	static uint8_t Control_DataReceived = RESET;
	static uint32_t Last_ValidControlInfoClk = 0;
	uint16_t C_CRC = 0;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	817b      	strh	r3, [r7, #10]
	uint16_t R_CRC = 0;
 8016cea:	2300      	movs	r3, #0
 8016cec:	83fb      	strh	r3, [r7, #30]
#ifdef EI_1
	static uint16_t PrevRelayCRC = 0;
#endif
	static uint8_t ControlData_Positive[256] = {0,};
	static uint8_t ControlData_Negative[256] = {0,};
	uint8_t Pos_NegDataMisMatch = RESET;
 8016cee:	2300      	movs	r3, #0
 8016cf0:	777b      	strb	r3, [r7, #29]
	static uint8_t Pos_NegDataMisMatch_Count = RESET;
	uint8_t TypeofDataMisMatch = RESET;
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	773b      	strb	r3, [r7, #28]
	uint8_t ControlID = 0;
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	727b      	strb	r3, [r7, #9]



	if((HAL_Elaps_Ticks(Last_ValidControlInfoClk) >= EI_data.Kyosan_st.Comm_Fail_Time) && (Control_DataReceived == SET))
 8016cfa:	4b33      	ldr	r3, [pc, #204]	; (8016dc8 <Get_Kyosan_EI_Message+0xf0>)
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	4618      	mov	r0, r3
 8016d00:	f7f9 fc4c 	bl	801059c <HAL_Elaps_Ticks>
 8016d04:	4602      	mov	r2, r0
 8016d06:	4b31      	ldr	r3, [pc, #196]	; (8016dcc <Get_Kyosan_EI_Message+0xf4>)
 8016d08:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	f0c0 8407 	bcc.w	8017520 <Get_Kyosan_EI_Message+0x848>
 8016d12:	4b2f      	ldr	r3, [pc, #188]	; (8016dd0 <Get_Kyosan_EI_Message+0xf8>)
 8016d14:	781b      	ldrb	r3, [r3, #0]
 8016d16:	2b01      	cmp	r3, #1
 8016d18:	f040 8402 	bne.w	8017520 <Get_Kyosan_EI_Message+0x848>
	{
		Control_DataReceived = RESET;
 8016d1c:	4b2c      	ldr	r3, [pc, #176]	; (8016dd0 <Get_Kyosan_EI_Message+0xf8>)
 8016d1e:	2200      	movs	r2, #0
 8016d20:	701a      	strb	r2, [r3, #0]
	}

	while(Com_DataReady(ComPort))
 8016d22:	e3fd      	b.n	8017520 <Get_Kyosan_EI_Message+0x848>
	{
		Data = Com_Get_Byte(ComPort);
 8016d24:	79fb      	ldrb	r3, [r7, #7]
 8016d26:	4618      	mov	r0, r3
 8016d28:	f002 fc2e 	bl	8019588 <Com_Get_Byte>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	737b      	strb	r3, [r7, #13]
		//		printf("%02X ",Data);

		if((Cur_Receive_Length == Max_Receive_Length) || (Cur_Receive_Length == RESET))
 8016d30:	4b28      	ldr	r3, [pc, #160]	; (8016dd4 <Get_Kyosan_EI_Message+0xfc>)
 8016d32:	881a      	ldrh	r2, [r3, #0]
 8016d34:	4b28      	ldr	r3, [pc, #160]	; (8016dd8 <Get_Kyosan_EI_Message+0x100>)
 8016d36:	881b      	ldrh	r3, [r3, #0]
 8016d38:	429a      	cmp	r2, r3
 8016d3a:	d003      	beq.n	8016d44 <Get_Kyosan_EI_Message+0x6c>
 8016d3c:	4b25      	ldr	r3, [pc, #148]	; (8016dd4 <Get_Kyosan_EI_Message+0xfc>)
 8016d3e:	881b      	ldrh	r3, [r3, #0]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d139      	bne.n	8016db8 <Get_Kyosan_EI_Message+0xe0>
		{
			memset(Buffer,0,sizeof(Buffer));
 8016d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016d48:	2100      	movs	r1, #0
 8016d4a:	4824      	ldr	r0, [pc, #144]	; (8016ddc <Get_Kyosan_EI_Message+0x104>)
 8016d4c:	f00f fe66 	bl	8026a1c <memset>
			Cur_Receive_Length = RESET;
 8016d50:	4b20      	ldr	r3, [pc, #128]	; (8016dd4 <Get_Kyosan_EI_Message+0xfc>)
 8016d52:	2200      	movs	r2, #0
 8016d54:	801a      	strh	r2, [r3, #0]

			switch(Data)
 8016d56:	7b7b      	ldrb	r3, [r7, #13]
 8016d58:	2b01      	cmp	r3, #1
 8016d5a:	d001      	beq.n	8016d60 <Get_Kyosan_EI_Message+0x88>
 8016d5c:	2bfe      	cmp	r3, #254	; 0xfe
 8016d5e:	d113      	bne.n	8016d88 <Get_Kyosan_EI_Message+0xb0>
			{
			case ACTUAL_CONTROL_DATA:
			case COMPLIMENT_CONTROL_DATA:
				Max_Receive_Length = (	EI_data.Kyosan_st.No_ofFrames * 64);
 8016d60:	4b1a      	ldr	r3, [pc, #104]	; (8016dcc <Get_Kyosan_EI_Message+0xf4>)
 8016d62:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8016d66:	b29b      	uxth	r3, r3
 8016d68:	019b      	lsls	r3, r3, #6
 8016d6a:	b29a      	uxth	r2, r3
 8016d6c:	4b1a      	ldr	r3, [pc, #104]	; (8016dd8 <Get_Kyosan_EI_Message+0x100>)
 8016d6e:	801a      	strh	r2, [r3, #0]
				if(EI_data.Kyosan_st.No_ofFrames == 4)
 8016d70:	4b16      	ldr	r3, [pc, #88]	; (8016dcc <Get_Kyosan_EI_Message+0xf4>)
 8016d72:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8016d76:	2b04      	cmp	r3, #4
 8016d78:	d102      	bne.n	8016d80 <Get_Kyosan_EI_Message+0xa8>
				{
					Max_Receive_Length = 192;
 8016d7a:	4b17      	ldr	r3, [pc, #92]	; (8016dd8 <Get_Kyosan_EI_Message+0x100>)
 8016d7c:	22c0      	movs	r2, #192	; 0xc0
 8016d7e:	801a      	strh	r2, [r3, #0]
				}
				Curnt_ProcessingDataType = CONTROL_DATA;
 8016d80:	4b17      	ldr	r3, [pc, #92]	; (8016de0 <Get_Kyosan_EI_Message+0x108>)
 8016d82:	2201      	movs	r2, #1
 8016d84:	701a      	strb	r2, [r3, #0]
				//				printf("Received Ctrl Data|");
				break;
 8016d86:	e017      	b.n	8016db8 <Get_Kyosan_EI_Message+0xe0>

			default:

				/* Polling Data Range (0x11-0x7f for Positive data) (0x80-0xEE for Negative data)*/
				/* Control_DataReceived checking is added to Avoid Control information data to be processed as Polling Information */
				if( (Control_DataReceived == SET) && (((Data >= 0X11 ) && (Data <= 0X7F)) || ((Data >= 0X80 ) && (Data <= 0XEE))) )
 8016d88:	4b11      	ldr	r3, [pc, #68]	; (8016dd0 <Get_Kyosan_EI_Message+0xf8>)
 8016d8a:	781b      	ldrb	r3, [r3, #0]
 8016d8c:	2b01      	cmp	r3, #1
 8016d8e:	d113      	bne.n	8016db8 <Get_Kyosan_EI_Message+0xe0>
 8016d90:	7b7b      	ldrb	r3, [r7, #13]
 8016d92:	2b10      	cmp	r3, #16
 8016d94:	d903      	bls.n	8016d9e <Get_Kyosan_EI_Message+0xc6>
 8016d96:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	da06      	bge.n	8016dac <Get_Kyosan_EI_Message+0xd4>
 8016d9e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	da08      	bge.n	8016db8 <Get_Kyosan_EI_Message+0xe0>
 8016da6:	7b7b      	ldrb	r3, [r7, #13]
 8016da8:	2bee      	cmp	r3, #238	; 0xee
 8016daa:	d805      	bhi.n	8016db8 <Get_Kyosan_EI_Message+0xe0>
				{
					/* Consider the data as Polling Data */
					//					printf("Received Polling Data:%u|%02X\n",Control_DataReceived,Data);
					Curnt_ProcessingDataType = POLLING_DATA;
 8016dac:	4b0c      	ldr	r3, [pc, #48]	; (8016de0 <Get_Kyosan_EI_Message+0x108>)
 8016dae:	2202      	movs	r2, #2
 8016db0:	701a      	strb	r2, [r3, #0]
					Max_Receive_Length = 3;
 8016db2:	4b09      	ldr	r3, [pc, #36]	; (8016dd8 <Get_Kyosan_EI_Message+0x100>)
 8016db4:	2203      	movs	r2, #3
 8016db6:	801a      	strh	r2, [r3, #0]
				}
			}
		}

		switch(Curnt_ProcessingDataType)
 8016db8:	4b09      	ldr	r3, [pc, #36]	; (8016de0 <Get_Kyosan_EI_Message+0x108>)
 8016dba:	781b      	ldrb	r3, [r3, #0]
 8016dbc:	2b01      	cmp	r3, #1
 8016dbe:	d011      	beq.n	8016de4 <Get_Kyosan_EI_Message+0x10c>
 8016dc0:	2b02      	cmp	r3, #2
 8016dc2:	f000 82d9 	beq.w	8017378 <Get_Kyosan_EI_Message+0x6a0>
 8016dc6:	e3a8      	b.n	801751a <Get_Kyosan_EI_Message+0x842>
 8016dc8:	2000b9e4 	.word	0x2000b9e4
 8016dcc:	20000504 	.word	0x20000504
 8016dd0:	2000b9e8 	.word	0x2000b9e8
 8016dd4:	2000b9ea 	.word	0x2000b9ea
 8016dd8:	2000b9ec 	.word	0x2000b9ec
 8016ddc:	2000b9f0 	.word	0x2000b9f0
 8016de0:	2000baf0 	.word	0x2000baf0
		{
		case CONTROL_DATA:
			Buffer[Cur_Receive_Length++] = Data;
 8016de4:	4bae      	ldr	r3, [pc, #696]	; (80170a0 <Get_Kyosan_EI_Message+0x3c8>)
 8016de6:	881b      	ldrh	r3, [r3, #0]
 8016de8:	1c5a      	adds	r2, r3, #1
 8016dea:	b291      	uxth	r1, r2
 8016dec:	4aac      	ldr	r2, [pc, #688]	; (80170a0 <Get_Kyosan_EI_Message+0x3c8>)
 8016dee:	8011      	strh	r1, [r2, #0]
 8016df0:	4619      	mov	r1, r3
 8016df2:	4aac      	ldr	r2, [pc, #688]	; (80170a4 <Get_Kyosan_EI_Message+0x3cc>)
 8016df4:	7b7b      	ldrb	r3, [r7, #13]
 8016df6:	5453      	strb	r3, [r2, r1]
			if(Cur_Receive_Length == Max_Receive_Length)
 8016df8:	4ba9      	ldr	r3, [pc, #676]	; (80170a0 <Get_Kyosan_EI_Message+0x3c8>)
 8016dfa:	881a      	ldrh	r2, [r3, #0]
 8016dfc:	4baa      	ldr	r3, [pc, #680]	; (80170a8 <Get_Kyosan_EI_Message+0x3d0>)
 8016dfe:	881b      	ldrh	r3, [r3, #0]
 8016e00:	429a      	cmp	r2, r3
 8016e02:	f040 838d 	bne.w	8017520 <Get_Kyosan_EI_Message+0x848>
			{
				C_CRC = Calc_Kysoan_CRC(Buffer, Cur_Receive_Length-2);
 8016e06:	4ba6      	ldr	r3, [pc, #664]	; (80170a0 <Get_Kyosan_EI_Message+0x3c8>)
 8016e08:	881b      	ldrh	r3, [r3, #0]
 8016e0a:	3b02      	subs	r3, #2
 8016e0c:	4619      	mov	r1, r3
 8016e0e:	48a5      	ldr	r0, [pc, #660]	; (80170a4 <Get_Kyosan_EI_Message+0x3cc>)
 8016e10:	f000 fbae 	bl	8017570 <Calc_Kysoan_CRC>
 8016e14:	4603      	mov	r3, r0
 8016e16:	817b      	strh	r3, [r7, #10]
				R_CRC = ExtractBits(0, 16, &Buffer[Cur_Receive_Length-2]);
 8016e18:	4ba1      	ldr	r3, [pc, #644]	; (80170a0 <Get_Kyosan_EI_Message+0x3c8>)
 8016e1a:	881b      	ldrh	r3, [r3, #0]
 8016e1c:	3b02      	subs	r3, #2
 8016e1e:	4aa1      	ldr	r2, [pc, #644]	; (80170a4 <Get_Kyosan_EI_Message+0x3cc>)
 8016e20:	4413      	add	r3, r2
 8016e22:	461a      	mov	r2, r3
 8016e24:	2110      	movs	r1, #16
 8016e26:	2000      	movs	r0, #0
 8016e28:	f7e9 fbf4 	bl	8000614 <ExtractBits>
 8016e2c:	4603      	mov	r3, r0
 8016e2e:	83fb      	strh	r3, [r7, #30]


				if( (  (CHECKFLAG(CRC_FAIL_CONTROL_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == RESET))
 8016e30:	4b9e      	ldr	r3, [pc, #632]	; (80170ac <Get_Kyosan_EI_Message+0x3d4>)
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	f003 0301 	and.w	r3, r3, #1
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d02d      	beq.n	8016e98 <Get_Kyosan_EI_Message+0x1c0>
 8016e3c:	4b99      	ldr	r3, [pc, #612]	; (80170a4 <Get_Kyosan_EI_Message+0x3cc>)
 8016e3e:	781b      	ldrb	r3, [r3, #0]
 8016e40:	b25b      	sxtb	r3, r3
 8016e42:	11db      	asrs	r3, r3, #7
 8016e44:	b25b      	sxtb	r3, r3
 8016e46:	f003 0301 	and.w	r3, r3, #1
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d124      	bne.n	8016e98 <Get_Kyosan_EI_Message+0x1c0>
				{
					printf("\nInjecting Positive Control Data CRC Failure\n");
 8016e4e:	4898      	ldr	r0, [pc, #608]	; (80170b0 <Get_Kyosan_EI_Message+0x3d8>)
 8016e50:	f00f ff68 	bl	8026d24 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8016e54:	4897      	ldr	r0, [pc, #604]	; (80170b4 <Get_Kyosan_EI_Message+0x3dc>)
 8016e56:	f007 fb71 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8016e5a:	4601      	mov	r1, r0
 8016e5c:	4b96      	ldr	r3, [pc, #600]	; (80170b8 <Get_Kyosan_EI_Message+0x3e0>)
 8016e5e:	fba3 2301 	umull	r2, r3, r3, r1
 8016e62:	0bda      	lsrs	r2, r3, #15
 8016e64:	4613      	mov	r3, r2
 8016e66:	041b      	lsls	r3, r3, #16
 8016e68:	1a9b      	subs	r3, r3, r2
 8016e6a:	1aca      	subs	r2, r1, r3
 8016e6c:	4613      	mov	r3, r2
 8016e6e:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8016e70:	8bfa      	ldrh	r2, [r7, #30]
 8016e72:	897b      	ldrh	r3, [r7, #10]
 8016e74:	429a      	cmp	r2, r3
 8016e76:	d10f      	bne.n	8016e98 <Get_Kyosan_EI_Message+0x1c0>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8016e78:	488e      	ldr	r0, [pc, #568]	; (80170b4 <Get_Kyosan_EI_Message+0x3dc>)
 8016e7a:	f007 fb5f 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8016e7e:	4601      	mov	r1, r0
 8016e80:	4b8e      	ldr	r3, [pc, #568]	; (80170bc <Get_Kyosan_EI_Message+0x3e4>)
 8016e82:	fba3 2301 	umull	r2, r3, r3, r1
 8016e86:	09da      	lsrs	r2, r3, #7
 8016e88:	4613      	mov	r3, r2
 8016e8a:	021b      	lsls	r3, r3, #8
 8016e8c:	1a9b      	subs	r3, r3, r2
 8016e8e:	1aca      	subs	r2, r1, r3
 8016e90:	b293      	uxth	r3, r2
 8016e92:	8bfa      	ldrh	r2, [r7, #30]
 8016e94:	1ad3      	subs	r3, r2, r3
 8016e96:	83fb      	strh	r3, [r7, #30]
					}
				}

				if( ((CHECKFLAG(CRC_FAIL_CONTROL_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8016e98:	4b84      	ldr	r3, [pc, #528]	; (80170ac <Get_Kyosan_EI_Message+0x3d4>)
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	085b      	lsrs	r3, r3, #1
 8016e9e:	f003 0301 	and.w	r3, r3, #1
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d02d      	beq.n	8016f02 <Get_Kyosan_EI_Message+0x22a>
 8016ea6:	4b7f      	ldr	r3, [pc, #508]	; (80170a4 <Get_Kyosan_EI_Message+0x3cc>)
 8016ea8:	781b      	ldrb	r3, [r3, #0]
 8016eaa:	b25b      	sxtb	r3, r3
 8016eac:	11db      	asrs	r3, r3, #7
 8016eae:	b25b      	sxtb	r3, r3
 8016eb0:	f003 0301 	and.w	r3, r3, #1
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d024      	beq.n	8016f02 <Get_Kyosan_EI_Message+0x22a>
				{
					printf("\nInjecting Negative Control Data CRC Failure\n");
 8016eb8:	4881      	ldr	r0, [pc, #516]	; (80170c0 <Get_Kyosan_EI_Message+0x3e8>)
 8016eba:	f00f ff33 	bl	8026d24 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8016ebe:	487d      	ldr	r0, [pc, #500]	; (80170b4 <Get_Kyosan_EI_Message+0x3dc>)
 8016ec0:	f007 fb3c 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8016ec4:	4601      	mov	r1, r0
 8016ec6:	4b7c      	ldr	r3, [pc, #496]	; (80170b8 <Get_Kyosan_EI_Message+0x3e0>)
 8016ec8:	fba3 2301 	umull	r2, r3, r3, r1
 8016ecc:	0bda      	lsrs	r2, r3, #15
 8016ece:	4613      	mov	r3, r2
 8016ed0:	041b      	lsls	r3, r3, #16
 8016ed2:	1a9b      	subs	r3, r3, r2
 8016ed4:	1aca      	subs	r2, r1, r3
 8016ed6:	4613      	mov	r3, r2
 8016ed8:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8016eda:	8bfa      	ldrh	r2, [r7, #30]
 8016edc:	897b      	ldrh	r3, [r7, #10]
 8016ede:	429a      	cmp	r2, r3
 8016ee0:	d10f      	bne.n	8016f02 <Get_Kyosan_EI_Message+0x22a>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8016ee2:	4874      	ldr	r0, [pc, #464]	; (80170b4 <Get_Kyosan_EI_Message+0x3dc>)
 8016ee4:	f007 fb2a 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8016ee8:	4601      	mov	r1, r0
 8016eea:	4b74      	ldr	r3, [pc, #464]	; (80170bc <Get_Kyosan_EI_Message+0x3e4>)
 8016eec:	fba3 2301 	umull	r2, r3, r3, r1
 8016ef0:	09da      	lsrs	r2, r3, #7
 8016ef2:	4613      	mov	r3, r2
 8016ef4:	021b      	lsls	r3, r3, #8
 8016ef6:	1a9b      	subs	r3, r3, r2
 8016ef8:	1aca      	subs	r2, r1, r3
 8016efa:	b293      	uxth	r3, r2
 8016efc:	8bfa      	ldrh	r2, [r7, #30]
 8016efe:	1ad3      	subs	r3, r2, r3
 8016f00:	83fb      	strh	r3, [r7, #30]
					}
				}

				if(R_CRC == C_CRC)
 8016f02:	8bfa      	ldrh	r2, [r7, #30]
 8016f04:	897b      	ldrh	r3, [r7, #10]
 8016f06:	429a      	cmp	r2, r3
 8016f08:	f040 81f3 	bne.w	80172f2 <Get_Kyosan_EI_Message+0x61a>
				{

					HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8016f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016f10:	486c      	ldr	r0, [pc, #432]	; (80170c4 <Get_Kyosan_EI_Message+0x3ec>)
 8016f12:	f005 fb4a 	bl	801c5aa <HAL_GPIO_TogglePin>


					Last_ValidControlInfoClk = HAL_GetTick();
 8016f16:	f002 fe5f 	bl	8019bd8 <HAL_GetTick>
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	4a6a      	ldr	r2, [pc, #424]	; (80170c8 <Get_Kyosan_EI_Message+0x3f0>)
 8016f1e:	6013      	str	r3, [r2, #0]
					Control_DataReceived = SET;
 8016f20:	4b6a      	ldr	r3, [pc, #424]	; (80170cc <Get_Kyosan_EI_Message+0x3f4>)
 8016f22:	2201      	movs	r2, #1
 8016f24:	701a      	strb	r2, [r3, #0]
					KyosanClocks.MessageReceivedCLK = HAL_GetTick();
 8016f26:	f002 fe57 	bl	8019bd8 <HAL_GetTick>
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	4a68      	ldr	r2, [pc, #416]	; (80170d0 <Get_Kyosan_EI_Message+0x3f8>)
 8016f2e:	6013      	str	r3, [r2, #0]

					//					printf("CTRL-Data CRC OK\n");
					if(CHECKFLAG(7,Buffer[0]) == RESET)
 8016f30:	4b5c      	ldr	r3, [pc, #368]	; (80170a4 <Get_Kyosan_EI_Message+0x3cc>)
 8016f32:	781b      	ldrb	r3, [r3, #0]
 8016f34:	b25b      	sxtb	r3, r3
 8016f36:	11db      	asrs	r3, r3, #7
 8016f38:	b25b      	sxtb	r3, r3
 8016f3a:	f003 0301 	and.w	r3, r3, #1
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	f040 80de 	bne.w	8017100 <Get_Kyosan_EI_Message+0x428>
					{
						printf("+ Ctrl Data|");
 8016f44:	4863      	ldr	r0, [pc, #396]	; (80170d4 <Get_Kyosan_EI_Message+0x3fc>)
 8016f46:	f00f fe51 	bl	8026bec <iprintf>
						memcpy(&ControlData_Positive,&Buffer,Cur_Receive_Length);
 8016f4a:	4b55      	ldr	r3, [pc, #340]	; (80170a0 <Get_Kyosan_EI_Message+0x3c8>)
 8016f4c:	881b      	ldrh	r3, [r3, #0]
 8016f4e:	461a      	mov	r2, r3
 8016f50:	4954      	ldr	r1, [pc, #336]	; (80170a4 <Get_Kyosan_EI_Message+0x3cc>)
 8016f52:	4861      	ldr	r0, [pc, #388]	; (80170d8 <Get_Kyosan_EI_Message+0x400>)
 8016f54:	f00f fd3a 	bl	80269cc <memcpy>

						if( ((CHECKFLAG(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8016f58:	4b54      	ldr	r3, [pc, #336]	; (80170ac <Get_Kyosan_EI_Message+0x3d4>)
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	091b      	lsrs	r3, r3, #4
 8016f5e:	f003 0301 	and.w	r3, r3, #1
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d027      	beq.n	8016fb6 <Get_Kyosan_EI_Message+0x2de>
 8016f66:	4b4f      	ldr	r3, [pc, #316]	; (80170a4 <Get_Kyosan_EI_Message+0x3cc>)
 8016f68:	781b      	ldrb	r3, [r3, #0]
 8016f6a:	b25b      	sxtb	r3, r3
 8016f6c:	11db      	asrs	r3, r3, #7
 8016f6e:	b25b      	sxtb	r3, r3
 8016f70:	f003 0301 	and.w	r3, r3, #1
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d01e      	beq.n	8016fb6 <Get_Kyosan_EI_Message+0x2de>
						{
							printf("\nInjecting COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA Failure\n");
 8016f78:	4858      	ldr	r0, [pc, #352]	; (80170dc <Get_Kyosan_EI_Message+0x404>)
 8016f7a:	f00f fed3 	bl	8026d24 <puts>
							ControlData_Positive[(HAL_RNG_GetRandomNumber(&hrng)%0xf)+1] = HAL_RNG_GetRandomNumber(&hrng)%0XFF;
 8016f7e:	484d      	ldr	r0, [pc, #308]	; (80170b4 <Get_Kyosan_EI_Message+0x3dc>)
 8016f80:	f007 fadc 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8016f84:	4602      	mov	r2, r0
 8016f86:	4b4d      	ldr	r3, [pc, #308]	; (80170bc <Get_Kyosan_EI_Message+0x3e4>)
 8016f88:	fba3 1302 	umull	r1, r3, r3, r2
 8016f8c:	09dc      	lsrs	r4, r3, #7
 8016f8e:	4623      	mov	r3, r4
 8016f90:	021b      	lsls	r3, r3, #8
 8016f92:	1b1b      	subs	r3, r3, r4
 8016f94:	1ad4      	subs	r4, r2, r3
 8016f96:	4847      	ldr	r0, [pc, #284]	; (80170b4 <Get_Kyosan_EI_Message+0x3dc>)
 8016f98:	f007 fad0 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8016f9c:	4601      	mov	r1, r0
 8016f9e:	4b50      	ldr	r3, [pc, #320]	; (80170e0 <Get_Kyosan_EI_Message+0x408>)
 8016fa0:	fba3 2301 	umull	r2, r3, r3, r1
 8016fa4:	08da      	lsrs	r2, r3, #3
 8016fa6:	4613      	mov	r3, r2
 8016fa8:	011b      	lsls	r3, r3, #4
 8016faa:	1a9b      	subs	r3, r3, r2
 8016fac:	1aca      	subs	r2, r1, r3
 8016fae:	1c53      	adds	r3, r2, #1
 8016fb0:	b2e1      	uxtb	r1, r4
 8016fb2:	4a49      	ldr	r2, [pc, #292]	; (80170d8 <Get_Kyosan_EI_Message+0x400>)
 8016fb4:	54d1      	strb	r1, [r2, r3]
						}

						ControlID = (uint8_t)((uint8_t)ControlData_Positive[0]&(uint8_t)0x0f);
 8016fb6:	4b48      	ldr	r3, [pc, #288]	; (80170d8 <Get_Kyosan_EI_Message+0x400>)
 8016fb8:	781b      	ldrb	r3, [r3, #0]
 8016fba:	f003 030f 	and.w	r3, r3, #15
 8016fbe:	727b      	strb	r3, [r7, #9]
						//						printf("%u|",ControlID);
						for(uint16_t  i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	837b      	strh	r3, [r7, #26]
 8016fc4:	e011      	b.n	8016fea <Get_Kyosan_EI_Message+0x312>
						{
							if(ControlData_Negative[i] != (uint8_t)(~ControlData_Positive[i]))
 8016fc6:	8b7b      	ldrh	r3, [r7, #26]
 8016fc8:	4a46      	ldr	r2, [pc, #280]	; (80170e4 <Get_Kyosan_EI_Message+0x40c>)
 8016fca:	5cd2      	ldrb	r2, [r2, r3]
 8016fcc:	8b7b      	ldrh	r3, [r7, #26]
 8016fce:	4942      	ldr	r1, [pc, #264]	; (80170d8 <Get_Kyosan_EI_Message+0x400>)
 8016fd0:	5ccb      	ldrb	r3, [r1, r3]
 8016fd2:	43db      	mvns	r3, r3
 8016fd4:	b2db      	uxtb	r3, r3
 8016fd6:	429a      	cmp	r2, r3
 8016fd8:	d004      	beq.n	8016fe4 <Get_Kyosan_EI_Message+0x30c>
							{
								Pos_NegDataMisMatch = SET;
 8016fda:	2301      	movs	r3, #1
 8016fdc:	777b      	strb	r3, [r7, #29]
								TypeofDataMisMatch = POS_DATA_MISMATCH;
 8016fde:	2301      	movs	r3, #1
 8016fe0:	773b      	strb	r3, [r7, #28]
								//								printf("Positive & Negative data not Matching\n");
								//								printf("P:%X-N:%X -> %X\n",ControlData_Positive[i],ControlData_Negative[i],(uint8_t)(~ControlData_Positive[i]));
								break;
 8016fe2:	e008      	b.n	8016ff6 <Get_Kyosan_EI_Message+0x31e>
						for(uint16_t  i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8016fe4:	8b7b      	ldrh	r3, [r7, #26]
 8016fe6:	3301      	adds	r3, #1
 8016fe8:	837b      	strh	r3, [r7, #26]
 8016fea:	8b7a      	ldrh	r2, [r7, #26]
 8016fec:	4b2c      	ldr	r3, [pc, #176]	; (80170a0 <Get_Kyosan_EI_Message+0x3c8>)
 8016fee:	881b      	ldrh	r3, [r3, #0]
 8016ff0:	3b02      	subs	r3, #2
 8016ff2:	429a      	cmp	r2, r3
 8016ff4:	dbe7      	blt.n	8016fc6 <Get_Kyosan_EI_Message+0x2ee>
							}
						}

						if(Pos_NegDataMisMatch == RESET)
 8016ff6:	7f7b      	ldrb	r3, [r7, #29]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	f040 80d9 	bne.w	80171b0 <Get_Kyosan_EI_Message+0x4d8>
						{
							printf("\nR:");
 8016ffe:	483a      	ldr	r0, [pc, #232]	; (80170e8 <Get_Kyosan_EI_Message+0x410>)
 8017000:	f00f fdf4 	bl	8026bec <iprintf>
							for(uint8_t i=1;i<61;++i)
 8017004:	2301      	movs	r3, #1
 8017006:	767b      	strb	r3, [r7, #25]
 8017008:	e009      	b.n	801701e <Get_Kyosan_EI_Message+0x346>
							{
								printf("%02X ",ControlData_Positive[i]);
 801700a:	7e7b      	ldrb	r3, [r7, #25]
 801700c:	4a32      	ldr	r2, [pc, #200]	; (80170d8 <Get_Kyosan_EI_Message+0x400>)
 801700e:	5cd3      	ldrb	r3, [r2, r3]
 8017010:	4619      	mov	r1, r3
 8017012:	4836      	ldr	r0, [pc, #216]	; (80170ec <Get_Kyosan_EI_Message+0x414>)
 8017014:	f00f fdea 	bl	8026bec <iprintf>
							for(uint8_t i=1;i<61;++i)
 8017018:	7e7b      	ldrb	r3, [r7, #25]
 801701a:	3301      	adds	r3, #1
 801701c:	767b      	strb	r3, [r7, #25]
 801701e:	7e7b      	ldrb	r3, [r7, #25]
 8017020:	2b3c      	cmp	r3, #60	; 0x3c
 8017022:	d9f2      	bls.n	801700a <Get_Kyosan_EI_Message+0x332>
							}
							printf("\n");
 8017024:	200a      	movs	r0, #10
 8017026:	f00f fdf9 	bl	8026c1c <putchar>

							memcpy(Kyosan_SelfRelays.Relays,&ControlData_Positive[1],60);
 801702a:	4a31      	ldr	r2, [pc, #196]	; (80170f0 <Get_Kyosan_EI_Message+0x418>)
 801702c:	4b2a      	ldr	r3, [pc, #168]	; (80170d8 <Get_Kyosan_EI_Message+0x400>)
 801702e:	3301      	adds	r3, #1
 8017030:	1c90      	adds	r0, r2, #2
 8017032:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8017036:	4602      	mov	r2, r0
 8017038:	4619      	mov	r1, r3
 801703a:	f8d1 c000 	ldr.w	ip, [r1]
 801703e:	684e      	ldr	r6, [r1, #4]
 8017040:	688d      	ldr	r5, [r1, #8]
 8017042:	68c9      	ldr	r1, [r1, #12]
 8017044:	f8c2 c000 	str.w	ip, [r2]
 8017048:	6056      	str	r6, [r2, #4]
 801704a:	6095      	str	r5, [r2, #8]
 801704c:	60d1      	str	r1, [r2, #12]
 801704e:	3310      	adds	r3, #16
 8017050:	3010      	adds	r0, #16
 8017052:	42a3      	cmp	r3, r4
 8017054:	d1ef      	bne.n	8017036 <Get_Kyosan_EI_Message+0x35e>
 8017056:	4602      	mov	r2, r0
 8017058:	6818      	ldr	r0, [r3, #0]
 801705a:	6859      	ldr	r1, [r3, #4]
 801705c:	689b      	ldr	r3, [r3, #8]
 801705e:	6010      	str	r0, [r2, #0]
 8017060:	6051      	str	r1, [r2, #4]
 8017062:	6093      	str	r3, [r2, #8]
							Kyosan_SelfRelays.Relay_CRC = Calc_Kysoan_CRC(Kyosan_SelfRelays.Relays, 60);
 8017064:	213c      	movs	r1, #60	; 0x3c
 8017066:	4823      	ldr	r0, [pc, #140]	; (80170f4 <Get_Kyosan_EI_Message+0x41c>)
 8017068:	f000 fa82 	bl	8017570 <Calc_Kysoan_CRC>
 801706c:	4603      	mov	r3, r0
 801706e:	461a      	mov	r2, r3
 8017070:	4b1f      	ldr	r3, [pc, #124]	; (80170f0 <Get_Kyosan_EI_Message+0x418>)
 8017072:	87da      	strh	r2, [r3, #62]	; 0x3e

#ifdef EI_1
							if((SendThisCardRelays == SET)&&(PrevRelayCRC != Kyosan_SelfRelays.Relay_CRC))
 8017074:	4b20      	ldr	r3, [pc, #128]	; (80170f8 <Get_Kyosan_EI_Message+0x420>)
 8017076:	781b      	ldrb	r3, [r3, #0]
 8017078:	2b01      	cmp	r3, #1
 801707a:	f040 8099 	bne.w	80171b0 <Get_Kyosan_EI_Message+0x4d8>
 801707e:	4b1c      	ldr	r3, [pc, #112]	; (80170f0 <Get_Kyosan_EI_Message+0x418>)
 8017080:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8017082:	4b1e      	ldr	r3, [pc, #120]	; (80170fc <Get_Kyosan_EI_Message+0x424>)
 8017084:	881b      	ldrh	r3, [r3, #0]
 8017086:	429a      	cmp	r2, r3
 8017088:	f000 8092 	beq.w	80171b0 <Get_Kyosan_EI_Message+0x4d8>
							{
								PrevRelayCRC = Kyosan_SelfRelays.Relay_CRC;
 801708c:	4b18      	ldr	r3, [pc, #96]	; (80170f0 <Get_Kyosan_EI_Message+0x418>)
 801708e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8017090:	4b1a      	ldr	r3, [pc, #104]	; (80170fc <Get_Kyosan_EI_Message+0x424>)
 8017092:	801a      	strh	r2, [r3, #0]
								TransmitCanPkt(EI_PROCESS_DATA);
 8017094:	f240 1019 	movw	r0, #281	; 0x119
 8017098:	f7fa f834 	bl	8011104 <TransmitCanPkt>
 801709c:	e088      	b.n	80171b0 <Get_Kyosan_EI_Message+0x4d8>
 801709e:	bf00      	nop
 80170a0:	2000b9ea 	.word	0x2000b9ea
 80170a4:	2000b9f0 	.word	0x2000b9f0
 80170a8:	2000b9ec 	.word	0x2000b9ec
 80170ac:	2000b488 	.word	0x2000b488
 80170b0:	0802bb2c 	.word	0x0802bb2c
 80170b4:	2000bcf8 	.word	0x2000bcf8
 80170b8:	80008001 	.word	0x80008001
 80170bc:	80808081 	.word	0x80808081
 80170c0:	0802bb5c 	.word	0x0802bb5c
 80170c4:	40021c00 	.word	0x40021c00
 80170c8:	2000b9e4 	.word	0x2000b9e4
 80170cc:	2000b9e8 	.word	0x2000b9e8
 80170d0:	2000b490 	.word	0x2000b490
 80170d4:	0802bb8c 	.word	0x0802bb8c
 80170d8:	2000baf4 	.word	0x2000baf4
 80170dc:	0802bb9c 	.word	0x0802bb9c
 80170e0:	88888889 	.word	0x88888889
 80170e4:	2000bbf4 	.word	0x2000bbf4
 80170e8:	0802bbdc 	.word	0x0802bbdc
 80170ec:	0802bb24 	.word	0x0802bb24
 80170f0:	2000b4a4 	.word	0x2000b4a4
 80170f4:	2000b4a6 	.word	0x2000b4a6
 80170f8:	2000b9d9 	.word	0x2000b9d9
 80170fc:	2000bcf4 	.word	0x2000bcf4
						}

					}
					else
					{
						printf("- Ctrl Data|");
 8017100:	4888      	ldr	r0, [pc, #544]	; (8017324 <Get_Kyosan_EI_Message+0x64c>)
 8017102:	f00f fd73 	bl	8026bec <iprintf>
						memcpy(&ControlData_Negative,&Buffer,Cur_Receive_Length);
 8017106:	4b88      	ldr	r3, [pc, #544]	; (8017328 <Get_Kyosan_EI_Message+0x650>)
 8017108:	881b      	ldrh	r3, [r3, #0]
 801710a:	461a      	mov	r2, r3
 801710c:	4987      	ldr	r1, [pc, #540]	; (801732c <Get_Kyosan_EI_Message+0x654>)
 801710e:	4888      	ldr	r0, [pc, #544]	; (8017330 <Get_Kyosan_EI_Message+0x658>)
 8017110:	f00f fc5c 	bl	80269cc <memcpy>
						ControlID = (uint8_t)(~ControlData_Negative[0]);
 8017114:	4b86      	ldr	r3, [pc, #536]	; (8017330 <Get_Kyosan_EI_Message+0x658>)
 8017116:	781b      	ldrb	r3, [r3, #0]
 8017118:	43db      	mvns	r3, r3
 801711a:	727b      	strb	r3, [r7, #9]

						if( ((CHECKFLAG(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 801711c:	4b85      	ldr	r3, [pc, #532]	; (8017334 <Get_Kyosan_EI_Message+0x65c>)
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	091b      	lsrs	r3, r3, #4
 8017122:	f003 0301 	and.w	r3, r3, #1
 8017126:	2b00      	cmp	r3, #0
 8017128:	d027      	beq.n	801717a <Get_Kyosan_EI_Message+0x4a2>
 801712a:	4b80      	ldr	r3, [pc, #512]	; (801732c <Get_Kyosan_EI_Message+0x654>)
 801712c:	781b      	ldrb	r3, [r3, #0]
 801712e:	b25b      	sxtb	r3, r3
 8017130:	11db      	asrs	r3, r3, #7
 8017132:	b25b      	sxtb	r3, r3
 8017134:	f003 0301 	and.w	r3, r3, #1
 8017138:	2b00      	cmp	r3, #0
 801713a:	d01e      	beq.n	801717a <Get_Kyosan_EI_Message+0x4a2>
						{
							printf("\nInjecting COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA Failure\n");
 801713c:	487e      	ldr	r0, [pc, #504]	; (8017338 <Get_Kyosan_EI_Message+0x660>)
 801713e:	f00f fdf1 	bl	8026d24 <puts>
							ControlData_Negative[(HAL_RNG_GetRandomNumber(&hrng)%0xf)+1] = HAL_RNG_GetRandomNumber(&hrng)%0XFF;
 8017142:	487e      	ldr	r0, [pc, #504]	; (801733c <Get_Kyosan_EI_Message+0x664>)
 8017144:	f007 f9fa 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8017148:	4602      	mov	r2, r0
 801714a:	4b7d      	ldr	r3, [pc, #500]	; (8017340 <Get_Kyosan_EI_Message+0x668>)
 801714c:	fba3 1302 	umull	r1, r3, r3, r2
 8017150:	09dc      	lsrs	r4, r3, #7
 8017152:	4623      	mov	r3, r4
 8017154:	021b      	lsls	r3, r3, #8
 8017156:	1b1b      	subs	r3, r3, r4
 8017158:	1ad4      	subs	r4, r2, r3
 801715a:	4878      	ldr	r0, [pc, #480]	; (801733c <Get_Kyosan_EI_Message+0x664>)
 801715c:	f007 f9ee 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8017160:	4601      	mov	r1, r0
 8017162:	4b78      	ldr	r3, [pc, #480]	; (8017344 <Get_Kyosan_EI_Message+0x66c>)
 8017164:	fba3 2301 	umull	r2, r3, r3, r1
 8017168:	08da      	lsrs	r2, r3, #3
 801716a:	4613      	mov	r3, r2
 801716c:	011b      	lsls	r3, r3, #4
 801716e:	1a9b      	subs	r3, r3, r2
 8017170:	1aca      	subs	r2, r1, r3
 8017172:	1c53      	adds	r3, r2, #1
 8017174:	b2e1      	uxtb	r1, r4
 8017176:	4a6e      	ldr	r2, [pc, #440]	; (8017330 <Get_Kyosan_EI_Message+0x658>)
 8017178:	54d1      	strb	r1, [r2, r3]
						}


						for(uint16_t i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 801717a:	2300      	movs	r3, #0
 801717c:	82fb      	strh	r3, [r7, #22]
 801717e:	e011      	b.n	80171a4 <Get_Kyosan_EI_Message+0x4cc>
						{
							if(ControlData_Positive[i] != (uint8_t)(~ControlData_Negative[i]))
 8017180:	8afb      	ldrh	r3, [r7, #22]
 8017182:	4a71      	ldr	r2, [pc, #452]	; (8017348 <Get_Kyosan_EI_Message+0x670>)
 8017184:	5cd2      	ldrb	r2, [r2, r3]
 8017186:	8afb      	ldrh	r3, [r7, #22]
 8017188:	4969      	ldr	r1, [pc, #420]	; (8017330 <Get_Kyosan_EI_Message+0x658>)
 801718a:	5ccb      	ldrb	r3, [r1, r3]
 801718c:	43db      	mvns	r3, r3
 801718e:	b2db      	uxtb	r3, r3
 8017190:	429a      	cmp	r2, r3
 8017192:	d004      	beq.n	801719e <Get_Kyosan_EI_Message+0x4c6>
							{
								Pos_NegDataMisMatch = SET;
 8017194:	2301      	movs	r3, #1
 8017196:	777b      	strb	r3, [r7, #29]
								TypeofDataMisMatch = NEG_DATA_MISMATCH;
 8017198:	2302      	movs	r3, #2
 801719a:	773b      	strb	r3, [r7, #28]
								//								printf("Negative & Positive data not Matching\n");
								//								printf("N:%02X-P:%02X -> %X\n",ControlData_Negative[i],ControlData_Positive[i],(uint8_t)(~ControlData_Negative[i]));
								break;
 801719c:	e008      	b.n	80171b0 <Get_Kyosan_EI_Message+0x4d8>
						for(uint16_t i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 801719e:	8afb      	ldrh	r3, [r7, #22]
 80171a0:	3301      	adds	r3, #1
 80171a2:	82fb      	strh	r3, [r7, #22]
 80171a4:	8afa      	ldrh	r2, [r7, #22]
 80171a6:	4b60      	ldr	r3, [pc, #384]	; (8017328 <Get_Kyosan_EI_Message+0x650>)
 80171a8:	881b      	ldrh	r3, [r3, #0]
 80171aa:	3b02      	subs	r3, #2
 80171ac:	429a      	cmp	r2, r3
 80171ae:	dbe7      	blt.n	8017180 <Get_Kyosan_EI_Message+0x4a8>
							//							}
							//							printf("\n");
						}
					}

					if(Pos_NegDataMisMatch == RESET)
 80171b0:	7f7b      	ldrb	r3, [r7, #29]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d11b      	bne.n	80171ee <Get_Kyosan_EI_Message+0x516>
					{
						//						printf("+ & -:DATA:OK\n");
						if(CHECKFLAG(7,Buffer[0]) == RESET)
 80171b6:	4b5d      	ldr	r3, [pc, #372]	; (801732c <Get_Kyosan_EI_Message+0x654>)
 80171b8:	781b      	ldrb	r3, [r3, #0]
 80171ba:	b25b      	sxtb	r3, r3
 80171bc:	11db      	asrs	r3, r3, #7
 80171be:	b25b      	sxtb	r3, r3
 80171c0:	f003 0301 	and.w	r3, r3, #1
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d105      	bne.n	80171d4 <Get_Kyosan_EI_Message+0x4fc>
						{
							KyosanClocks.ControlDataPosRecvCLK = HAL_GetTick();
 80171c8:	f002 fd06 	bl	8019bd8 <HAL_GetTick>
 80171cc:	4603      	mov	r3, r0
 80171ce:	4a5f      	ldr	r2, [pc, #380]	; (801734c <Get_Kyosan_EI_Message+0x674>)
 80171d0:	6053      	str	r3, [r2, #4]
 80171d2:	e004      	b.n	80171de <Get_Kyosan_EI_Message+0x506>
						}
						else
						{
							KyosanClocks.ControlDataNegRecvCLK = HAL_GetTick();
 80171d4:	f002 fd00 	bl	8019bd8 <HAL_GetTick>
 80171d8:	4603      	mov	r3, r0
 80171da:	4a5c      	ldr	r2, [pc, #368]	; (801734c <Get_Kyosan_EI_Message+0x674>)
 80171dc:	6093      	str	r3, [r2, #8]
						}
						Pos_NegDataMisMatch_Count = RESET;
 80171de:	4b5c      	ldr	r3, [pc, #368]	; (8017350 <Get_Kyosan_EI_Message+0x678>)
 80171e0:	2200      	movs	r2, #0
 80171e2:	701a      	strb	r2, [r3, #0]
						TypeofDataMisMatch = RESET;
 80171e4:	2300      	movs	r3, #0
 80171e6:	773b      	strb	r3, [r7, #28]
						Pos_NegDataMisMatch = RESET;
 80171e8:	2300      	movs	r3, #0
 80171ea:	777b      	strb	r3, [r7, #29]
 80171ec:	e092      	b.n	8017314 <Get_Kyosan_EI_Message+0x63c>
					}
					else
					{
						++Pos_NegDataMisMatch_Count;
 80171ee:	4b58      	ldr	r3, [pc, #352]	; (8017350 <Get_Kyosan_EI_Message+0x678>)
 80171f0:	781b      	ldrb	r3, [r3, #0]
 80171f2:	3301      	adds	r3, #1
 80171f4:	b2da      	uxtb	r2, r3
 80171f6:	4b56      	ldr	r3, [pc, #344]	; (8017350 <Get_Kyosan_EI_Message+0x678>)
 80171f8:	701a      	strb	r2, [r3, #0]

						if(Pos_NegDataMisMatch_Count == 2)
 80171fa:	4b55      	ldr	r3, [pc, #340]	; (8017350 <Get_Kyosan_EI_Message+0x678>)
 80171fc:	781b      	ldrb	r3, [r3, #0]
 80171fe:	2b02      	cmp	r3, #2
 8017200:	d161      	bne.n	80172c6 <Get_Kyosan_EI_Message+0x5ee>
						{
							switch(TypeofDataMisMatch)
 8017202:	7f3b      	ldrb	r3, [r7, #28]
 8017204:	2b01      	cmp	r3, #1
 8017206:	d002      	beq.n	801720e <Get_Kyosan_EI_Message+0x536>
 8017208:	2b02      	cmp	r3, #2
 801720a:	d02e      	beq.n	801726a <Get_Kyosan_EI_Message+0x592>
 801720c:	e05c      	b.n	80172c8 <Get_Kyosan_EI_Message+0x5f0>
							{
							case POS_DATA_MISMATCH:
								printf("P:");
 801720e:	4851      	ldr	r0, [pc, #324]	; (8017354 <Get_Kyosan_EI_Message+0x67c>)
 8017210:	f00f fcec 	bl	8026bec <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8017214:	2300      	movs	r3, #0
 8017216:	82bb      	strh	r3, [r7, #20]
 8017218:	e009      	b.n	801722e <Get_Kyosan_EI_Message+0x556>
								{
									printf("%02X ",ControlData_Positive[i]);
 801721a:	8abb      	ldrh	r3, [r7, #20]
 801721c:	4a4a      	ldr	r2, [pc, #296]	; (8017348 <Get_Kyosan_EI_Message+0x670>)
 801721e:	5cd3      	ldrb	r3, [r2, r3]
 8017220:	4619      	mov	r1, r3
 8017222:	484d      	ldr	r0, [pc, #308]	; (8017358 <Get_Kyosan_EI_Message+0x680>)
 8017224:	f00f fce2 	bl	8026bec <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8017228:	8abb      	ldrh	r3, [r7, #20]
 801722a:	3301      	adds	r3, #1
 801722c:	82bb      	strh	r3, [r7, #20]
 801722e:	4b3e      	ldr	r3, [pc, #248]	; (8017328 <Get_Kyosan_EI_Message+0x650>)
 8017230:	881b      	ldrh	r3, [r3, #0]
 8017232:	8aba      	ldrh	r2, [r7, #20]
 8017234:	429a      	cmp	r2, r3
 8017236:	d3f0      	bcc.n	801721a <Get_Kyosan_EI_Message+0x542>
								}
								printf("\nN:");
 8017238:	4848      	ldr	r0, [pc, #288]	; (801735c <Get_Kyosan_EI_Message+0x684>)
 801723a:	f00f fcd7 	bl	8026bec <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 801723e:	2300      	movs	r3, #0
 8017240:	827b      	strh	r3, [r7, #18]
 8017242:	e009      	b.n	8017258 <Get_Kyosan_EI_Message+0x580>
								{
									printf("%02X ",ControlData_Negative[i]);
 8017244:	8a7b      	ldrh	r3, [r7, #18]
 8017246:	4a3a      	ldr	r2, [pc, #232]	; (8017330 <Get_Kyosan_EI_Message+0x658>)
 8017248:	5cd3      	ldrb	r3, [r2, r3]
 801724a:	4619      	mov	r1, r3
 801724c:	4842      	ldr	r0, [pc, #264]	; (8017358 <Get_Kyosan_EI_Message+0x680>)
 801724e:	f00f fccd 	bl	8026bec <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8017252:	8a7b      	ldrh	r3, [r7, #18]
 8017254:	3301      	adds	r3, #1
 8017256:	827b      	strh	r3, [r7, #18]
 8017258:	4b33      	ldr	r3, [pc, #204]	; (8017328 <Get_Kyosan_EI_Message+0x650>)
 801725a:	881b      	ldrh	r3, [r3, #0]
 801725c:	8a7a      	ldrh	r2, [r7, #18]
 801725e:	429a      	cmp	r2, r3
 8017260:	d3f0      	bcc.n	8017244 <Get_Kyosan_EI_Message+0x56c>
								}
								printf("\n");
 8017262:	200a      	movs	r0, #10
 8017264:	f00f fcda 	bl	8026c1c <putchar>
								break;
 8017268:	e02e      	b.n	80172c8 <Get_Kyosan_EI_Message+0x5f0>
							case NEG_DATA_MISMATCH:
								printf("N:");
 801726a:	483d      	ldr	r0, [pc, #244]	; (8017360 <Get_Kyosan_EI_Message+0x688>)
 801726c:	f00f fcbe 	bl	8026bec <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8017270:	2300      	movs	r3, #0
 8017272:	823b      	strh	r3, [r7, #16]
 8017274:	e009      	b.n	801728a <Get_Kyosan_EI_Message+0x5b2>
								{
									printf("%02X ",ControlData_Negative[i]);
 8017276:	8a3b      	ldrh	r3, [r7, #16]
 8017278:	4a2d      	ldr	r2, [pc, #180]	; (8017330 <Get_Kyosan_EI_Message+0x658>)
 801727a:	5cd3      	ldrb	r3, [r2, r3]
 801727c:	4619      	mov	r1, r3
 801727e:	4836      	ldr	r0, [pc, #216]	; (8017358 <Get_Kyosan_EI_Message+0x680>)
 8017280:	f00f fcb4 	bl	8026bec <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8017284:	8a3b      	ldrh	r3, [r7, #16]
 8017286:	3301      	adds	r3, #1
 8017288:	823b      	strh	r3, [r7, #16]
 801728a:	4b27      	ldr	r3, [pc, #156]	; (8017328 <Get_Kyosan_EI_Message+0x650>)
 801728c:	881b      	ldrh	r3, [r3, #0]
 801728e:	8a3a      	ldrh	r2, [r7, #16]
 8017290:	429a      	cmp	r2, r3
 8017292:	d3f0      	bcc.n	8017276 <Get_Kyosan_EI_Message+0x59e>
								}
								printf("\nP:");
 8017294:	4833      	ldr	r0, [pc, #204]	; (8017364 <Get_Kyosan_EI_Message+0x68c>)
 8017296:	f00f fca9 	bl	8026bec <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 801729a:	2300      	movs	r3, #0
 801729c:	81fb      	strh	r3, [r7, #14]
 801729e:	e009      	b.n	80172b4 <Get_Kyosan_EI_Message+0x5dc>
								{
									printf("%02X ",ControlData_Positive[i]);
 80172a0:	89fb      	ldrh	r3, [r7, #14]
 80172a2:	4a29      	ldr	r2, [pc, #164]	; (8017348 <Get_Kyosan_EI_Message+0x670>)
 80172a4:	5cd3      	ldrb	r3, [r2, r3]
 80172a6:	4619      	mov	r1, r3
 80172a8:	482b      	ldr	r0, [pc, #172]	; (8017358 <Get_Kyosan_EI_Message+0x680>)
 80172aa:	f00f fc9f 	bl	8026bec <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 80172ae:	89fb      	ldrh	r3, [r7, #14]
 80172b0:	3301      	adds	r3, #1
 80172b2:	81fb      	strh	r3, [r7, #14]
 80172b4:	4b1c      	ldr	r3, [pc, #112]	; (8017328 <Get_Kyosan_EI_Message+0x650>)
 80172b6:	881b      	ldrh	r3, [r3, #0]
 80172b8:	89fa      	ldrh	r2, [r7, #14]
 80172ba:	429a      	cmp	r2, r3
 80172bc:	d3f0      	bcc.n	80172a0 <Get_Kyosan_EI_Message+0x5c8>
								}
								printf("\n");
 80172be:	200a      	movs	r0, #10
 80172c0:	f00f fcac 	bl	8026c1c <putchar>
								break;
 80172c4:	e000      	b.n	80172c8 <Get_Kyosan_EI_Message+0x5f0>
							default:
 80172c6:	bf00      	nop
								;

							}
						}

						if(Pos_NegDataMisMatch_Count >= EI_data.Kyosan_st.MaxMisMatchCnt)
 80172c8:	4b21      	ldr	r3, [pc, #132]	; (8017350 <Get_Kyosan_EI_Message+0x678>)
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	b29a      	uxth	r2, r3
 80172ce:	4b26      	ldr	r3, [pc, #152]	; (8017368 <Get_Kyosan_EI_Message+0x690>)
 80172d0:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 80172d4:	429a      	cmp	r2, r3
 80172d6:	d31d      	bcc.n	8017314 <Get_Kyosan_EI_Message+0x63c>
						{
							printf("\n+ & - Data Mismatch count Reached:%u\n",Pos_NegDataMisMatch_Count);
 80172d8:	4b1d      	ldr	r3, [pc, #116]	; (8017350 <Get_Kyosan_EI_Message+0x678>)
 80172da:	781b      	ldrb	r3, [r3, #0]
 80172dc:	4619      	mov	r1, r3
 80172de:	4823      	ldr	r0, [pc, #140]	; (801736c <Get_Kyosan_EI_Message+0x694>)
 80172e0:	f00f fc84 	bl	8026bec <iprintf>
							Pos_NegDataMisMatch_Count = EI_data.Kyosan_st.MaxMisMatchCnt; /* To avoid Overflow */
 80172e4:	4b20      	ldr	r3, [pc, #128]	; (8017368 <Get_Kyosan_EI_Message+0x690>)
 80172e6:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 80172ea:	b2da      	uxtb	r2, r3
 80172ec:	4b18      	ldr	r3, [pc, #96]	; (8017350 <Get_Kyosan_EI_Message+0x678>)
 80172ee:	701a      	strb	r2, [r3, #0]
 80172f0:	e010      	b.n	8017314 <Get_Kyosan_EI_Message+0x63c>
						}
					}
				}
				else
				{
					printf("\n%c Control Data Packet CRC Failed C:%04x-R:%04x\n",((CHECKFLAG(7,Buffer[0]) == RESET)?'+':'-'),C_CRC,R_CRC);
 80172f2:	4b0e      	ldr	r3, [pc, #56]	; (801732c <Get_Kyosan_EI_Message+0x654>)
 80172f4:	781b      	ldrb	r3, [r3, #0]
 80172f6:	b25b      	sxtb	r3, r3
 80172f8:	11db      	asrs	r3, r3, #7
 80172fa:	b25b      	sxtb	r3, r3
 80172fc:	f003 0301 	and.w	r3, r3, #1
 8017300:	2b00      	cmp	r3, #0
 8017302:	d101      	bne.n	8017308 <Get_Kyosan_EI_Message+0x630>
 8017304:	212b      	movs	r1, #43	; 0x2b
 8017306:	e000      	b.n	801730a <Get_Kyosan_EI_Message+0x632>
 8017308:	212d      	movs	r1, #45	; 0x2d
 801730a:	897a      	ldrh	r2, [r7, #10]
 801730c:	8bfb      	ldrh	r3, [r7, #30]
 801730e:	4818      	ldr	r0, [pc, #96]	; (8017370 <Get_Kyosan_EI_Message+0x698>)
 8017310:	f00f fc6c 	bl	8026bec <iprintf>

				}
				Cur_Receive_Length = RESET;
 8017314:	4b04      	ldr	r3, [pc, #16]	; (8017328 <Get_Kyosan_EI_Message+0x650>)
 8017316:	2200      	movs	r2, #0
 8017318:	801a      	strh	r2, [r3, #0]
				Max_Receive_Length = RESET;
 801731a:	4b16      	ldr	r3, [pc, #88]	; (8017374 <Get_Kyosan_EI_Message+0x69c>)
 801731c:	2200      	movs	r2, #0
 801731e:	801a      	strh	r2, [r3, #0]
			}
			break;
 8017320:	e0fe      	b.n	8017520 <Get_Kyosan_EI_Message+0x848>
 8017322:	bf00      	nop
 8017324:	0802bbe0 	.word	0x0802bbe0
 8017328:	2000b9ea 	.word	0x2000b9ea
 801732c:	2000b9f0 	.word	0x2000b9f0
 8017330:	2000bbf4 	.word	0x2000bbf4
 8017334:	2000b488 	.word	0x2000b488
 8017338:	0802bb9c 	.word	0x0802bb9c
 801733c:	2000bcf8 	.word	0x2000bcf8
 8017340:	80808081 	.word	0x80808081
 8017344:	88888889 	.word	0x88888889
 8017348:	2000baf4 	.word	0x2000baf4
 801734c:	2000b490 	.word	0x2000b490
 8017350:	2000bcf6 	.word	0x2000bcf6
 8017354:	0802bbf0 	.word	0x0802bbf0
 8017358:	0802bb24 	.word	0x0802bb24
 801735c:	0802bbf4 	.word	0x0802bbf4
 8017360:	0802bbf8 	.word	0x0802bbf8
 8017364:	0802bbfc 	.word	0x0802bbfc
 8017368:	20000504 	.word	0x20000504
 801736c:	0802bc00 	.word	0x0802bc00
 8017370:	0802bc28 	.word	0x0802bc28
 8017374:	2000b9ec 	.word	0x2000b9ec
		case POLLING_DATA:
			Buffer[Cur_Receive_Length++] = Data;
 8017378:	4b70      	ldr	r3, [pc, #448]	; (801753c <Get_Kyosan_EI_Message+0x864>)
 801737a:	881b      	ldrh	r3, [r3, #0]
 801737c:	1c5a      	adds	r2, r3, #1
 801737e:	b291      	uxth	r1, r2
 8017380:	4a6e      	ldr	r2, [pc, #440]	; (801753c <Get_Kyosan_EI_Message+0x864>)
 8017382:	8011      	strh	r1, [r2, #0]
 8017384:	4619      	mov	r1, r3
 8017386:	4a6e      	ldr	r2, [pc, #440]	; (8017540 <Get_Kyosan_EI_Message+0x868>)
 8017388:	7b7b      	ldrb	r3, [r7, #13]
 801738a:	5453      	strb	r3, [r2, r1]
			if(Cur_Receive_Length == Max_Receive_Length)
 801738c:	4b6b      	ldr	r3, [pc, #428]	; (801753c <Get_Kyosan_EI_Message+0x864>)
 801738e:	881a      	ldrh	r2, [r3, #0]
 8017390:	4b6c      	ldr	r3, [pc, #432]	; (8017544 <Get_Kyosan_EI_Message+0x86c>)
 8017392:	881b      	ldrh	r3, [r3, #0]
 8017394:	429a      	cmp	r2, r3
 8017396:	f040 80c3 	bne.w	8017520 <Get_Kyosan_EI_Message+0x848>
			{
				C_CRC = Calc_Kysoan_CRC(Buffer, Cur_Receive_Length-2);
 801739a:	4b68      	ldr	r3, [pc, #416]	; (801753c <Get_Kyosan_EI_Message+0x864>)
 801739c:	881b      	ldrh	r3, [r3, #0]
 801739e:	3b02      	subs	r3, #2
 80173a0:	4619      	mov	r1, r3
 80173a2:	4867      	ldr	r0, [pc, #412]	; (8017540 <Get_Kyosan_EI_Message+0x868>)
 80173a4:	f000 f8e4 	bl	8017570 <Calc_Kysoan_CRC>
 80173a8:	4603      	mov	r3, r0
 80173aa:	817b      	strh	r3, [r7, #10]
				R_CRC = ExtractBits(0, 16, &Buffer[Cur_Receive_Length-2]);
 80173ac:	4b63      	ldr	r3, [pc, #396]	; (801753c <Get_Kyosan_EI_Message+0x864>)
 80173ae:	881b      	ldrh	r3, [r3, #0]
 80173b0:	3b02      	subs	r3, #2
 80173b2:	4a63      	ldr	r2, [pc, #396]	; (8017540 <Get_Kyosan_EI_Message+0x868>)
 80173b4:	4413      	add	r3, r2
 80173b6:	461a      	mov	r2, r3
 80173b8:	2110      	movs	r1, #16
 80173ba:	2000      	movs	r0, #0
 80173bc:	f7e9 f92a 	bl	8000614 <ExtractBits>
 80173c0:	4603      	mov	r3, r0
 80173c2:	83fb      	strh	r3, [r7, #30]

				if( (  (CHECKFLAG(CRC_FAIL_POLLING_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == RESET))
 80173c4:	4b60      	ldr	r3, [pc, #384]	; (8017548 <Get_Kyosan_EI_Message+0x870>)
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	089b      	lsrs	r3, r3, #2
 80173ca:	f003 0301 	and.w	r3, r3, #1
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d02d      	beq.n	801742e <Get_Kyosan_EI_Message+0x756>
 80173d2:	4b5b      	ldr	r3, [pc, #364]	; (8017540 <Get_Kyosan_EI_Message+0x868>)
 80173d4:	781b      	ldrb	r3, [r3, #0]
 80173d6:	b25b      	sxtb	r3, r3
 80173d8:	11db      	asrs	r3, r3, #7
 80173da:	b25b      	sxtb	r3, r3
 80173dc:	f003 0301 	and.w	r3, r3, #1
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d124      	bne.n	801742e <Get_Kyosan_EI_Message+0x756>
				{
					printf("\nInjecting Positive Polling Data CRC Failure\n");
 80173e4:	4859      	ldr	r0, [pc, #356]	; (801754c <Get_Kyosan_EI_Message+0x874>)
 80173e6:	f00f fc9d 	bl	8026d24 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 80173ea:	4859      	ldr	r0, [pc, #356]	; (8017550 <Get_Kyosan_EI_Message+0x878>)
 80173ec:	f007 f8a6 	bl	801e53c <HAL_RNG_GetRandomNumber>
 80173f0:	4601      	mov	r1, r0
 80173f2:	4b58      	ldr	r3, [pc, #352]	; (8017554 <Get_Kyosan_EI_Message+0x87c>)
 80173f4:	fba3 2301 	umull	r2, r3, r3, r1
 80173f8:	0bda      	lsrs	r2, r3, #15
 80173fa:	4613      	mov	r3, r2
 80173fc:	041b      	lsls	r3, r3, #16
 80173fe:	1a9b      	subs	r3, r3, r2
 8017400:	1aca      	subs	r2, r1, r3
 8017402:	4613      	mov	r3, r2
 8017404:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8017406:	8bfa      	ldrh	r2, [r7, #30]
 8017408:	897b      	ldrh	r3, [r7, #10]
 801740a:	429a      	cmp	r2, r3
 801740c:	d10f      	bne.n	801742e <Get_Kyosan_EI_Message+0x756>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 801740e:	4850      	ldr	r0, [pc, #320]	; (8017550 <Get_Kyosan_EI_Message+0x878>)
 8017410:	f007 f894 	bl	801e53c <HAL_RNG_GetRandomNumber>
 8017414:	4601      	mov	r1, r0
 8017416:	4b50      	ldr	r3, [pc, #320]	; (8017558 <Get_Kyosan_EI_Message+0x880>)
 8017418:	fba3 2301 	umull	r2, r3, r3, r1
 801741c:	09da      	lsrs	r2, r3, #7
 801741e:	4613      	mov	r3, r2
 8017420:	021b      	lsls	r3, r3, #8
 8017422:	1a9b      	subs	r3, r3, r2
 8017424:	1aca      	subs	r2, r1, r3
 8017426:	b293      	uxth	r3, r2
 8017428:	8bfa      	ldrh	r2, [r7, #30]
 801742a:	1ad3      	subs	r3, r2, r3
 801742c:	83fb      	strh	r3, [r7, #30]
					}
				}

				if( ((CHECKFLAG(CRC_FAIL_POLLING_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 801742e:	4b46      	ldr	r3, [pc, #280]	; (8017548 <Get_Kyosan_EI_Message+0x870>)
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	08db      	lsrs	r3, r3, #3
 8017434:	f003 0301 	and.w	r3, r3, #1
 8017438:	2b00      	cmp	r3, #0
 801743a:	d02d      	beq.n	8017498 <Get_Kyosan_EI_Message+0x7c0>
 801743c:	4b40      	ldr	r3, [pc, #256]	; (8017540 <Get_Kyosan_EI_Message+0x868>)
 801743e:	781b      	ldrb	r3, [r3, #0]
 8017440:	b25b      	sxtb	r3, r3
 8017442:	11db      	asrs	r3, r3, #7
 8017444:	b25b      	sxtb	r3, r3
 8017446:	f003 0301 	and.w	r3, r3, #1
 801744a:	2b00      	cmp	r3, #0
 801744c:	d024      	beq.n	8017498 <Get_Kyosan_EI_Message+0x7c0>
				{
					printf("\nInjecting Negative Polling Data CRC Failure\n");
 801744e:	4843      	ldr	r0, [pc, #268]	; (801755c <Get_Kyosan_EI_Message+0x884>)
 8017450:	f00f fc68 	bl	8026d24 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8017454:	483e      	ldr	r0, [pc, #248]	; (8017550 <Get_Kyosan_EI_Message+0x878>)
 8017456:	f007 f871 	bl	801e53c <HAL_RNG_GetRandomNumber>
 801745a:	4601      	mov	r1, r0
 801745c:	4b3d      	ldr	r3, [pc, #244]	; (8017554 <Get_Kyosan_EI_Message+0x87c>)
 801745e:	fba3 2301 	umull	r2, r3, r3, r1
 8017462:	0bda      	lsrs	r2, r3, #15
 8017464:	4613      	mov	r3, r2
 8017466:	041b      	lsls	r3, r3, #16
 8017468:	1a9b      	subs	r3, r3, r2
 801746a:	1aca      	subs	r2, r1, r3
 801746c:	4613      	mov	r3, r2
 801746e:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8017470:	8bfa      	ldrh	r2, [r7, #30]
 8017472:	897b      	ldrh	r3, [r7, #10]
 8017474:	429a      	cmp	r2, r3
 8017476:	d10f      	bne.n	8017498 <Get_Kyosan_EI_Message+0x7c0>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8017478:	4835      	ldr	r0, [pc, #212]	; (8017550 <Get_Kyosan_EI_Message+0x878>)
 801747a:	f007 f85f 	bl	801e53c <HAL_RNG_GetRandomNumber>
 801747e:	4601      	mov	r1, r0
 8017480:	4b35      	ldr	r3, [pc, #212]	; (8017558 <Get_Kyosan_EI_Message+0x880>)
 8017482:	fba3 2301 	umull	r2, r3, r3, r1
 8017486:	09da      	lsrs	r2, r3, #7
 8017488:	4613      	mov	r3, r2
 801748a:	021b      	lsls	r3, r3, #8
 801748c:	1a9b      	subs	r3, r3, r2
 801748e:	1aca      	subs	r2, r1, r3
 8017490:	b293      	uxth	r3, r2
 8017492:	8bfa      	ldrh	r2, [r7, #30]
 8017494:	1ad3      	subs	r3, r2, r3
 8017496:	83fb      	strh	r3, [r7, #30]
					}
				}

				if(C_CRC == R_CRC)
 8017498:	897a      	ldrh	r2, [r7, #10]
 801749a:	8bfb      	ldrh	r3, [r7, #30]
 801749c:	429a      	cmp	r2, r3
 801749e:	d11e      	bne.n	80174de <Get_Kyosan_EI_Message+0x806>
				{
					KyosanClocks.MessageReceivedCLK = HAL_GetTick();
 80174a0:	f002 fb9a 	bl	8019bd8 <HAL_GetTick>
 80174a4:	4603      	mov	r3, r0
 80174a6:	4a2e      	ldr	r2, [pc, #184]	; (8017560 <Get_Kyosan_EI_Message+0x888>)
 80174a8:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80174aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80174ae:	482d      	ldr	r0, [pc, #180]	; (8017564 <Get_Kyosan_EI_Message+0x88c>)
 80174b0:	f005 f87b 	bl	801c5aa <HAL_GPIO_TogglePin>

					if(CHECKFLAG(7,Buffer[0]) == RESET)
 80174b4:	4b22      	ldr	r3, [pc, #136]	; (8017540 <Get_Kyosan_EI_Message+0x868>)
 80174b6:	781b      	ldrb	r3, [r3, #0]
 80174b8:	b25b      	sxtb	r3, r3
 80174ba:	11db      	asrs	r3, r3, #7
 80174bc:	b25b      	sxtb	r3, r3
 80174be:	f003 0301 	and.w	r3, r3, #1
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d105      	bne.n	80174d2 <Get_Kyosan_EI_Message+0x7fa>
					{
						KyosanClocks.PollingDataPosRecvCLK = HAL_GetTick();
 80174c6:	f002 fb87 	bl	8019bd8 <HAL_GetTick>
 80174ca:	4603      	mov	r3, r0
 80174cc:	4a24      	ldr	r2, [pc, #144]	; (8017560 <Get_Kyosan_EI_Message+0x888>)
 80174ce:	60d3      	str	r3, [r2, #12]
 80174d0:	e01c      	b.n	801750c <Get_Kyosan_EI_Message+0x834>
					}
					else
					{
						KyosanClocks.PollingDataNegRecvCLK = HAL_GetTick();
 80174d2:	f002 fb81 	bl	8019bd8 <HAL_GetTick>
 80174d6:	4603      	mov	r3, r0
 80174d8:	4a21      	ldr	r2, [pc, #132]	; (8017560 <Get_Kyosan_EI_Message+0x888>)
 80174da:	6113      	str	r3, [r2, #16]
 80174dc:	e016      	b.n	801750c <Get_Kyosan_EI_Message+0x834>
					}
					//CRC_FailCnt = RESET;
				}
				else
				{
					printf("Polling Data CRC Failed\nC:%04x-R:%04x\n",C_CRC,R_CRC);
 80174de:	897b      	ldrh	r3, [r7, #10]
 80174e0:	8bfa      	ldrh	r2, [r7, #30]
 80174e2:	4619      	mov	r1, r3
 80174e4:	4820      	ldr	r0, [pc, #128]	; (8017568 <Get_Kyosan_EI_Message+0x890>)
 80174e6:	f00f fb81 	bl	8026bec <iprintf>
					printf("\n%c Polling Data CRC Failed C:%04x-R:%04x\n",((CHECKFLAG(7,Buffer[0]) == RESET)?'+':'-'),C_CRC,R_CRC);
 80174ea:	4b15      	ldr	r3, [pc, #84]	; (8017540 <Get_Kyosan_EI_Message+0x868>)
 80174ec:	781b      	ldrb	r3, [r3, #0]
 80174ee:	b25b      	sxtb	r3, r3
 80174f0:	11db      	asrs	r3, r3, #7
 80174f2:	b25b      	sxtb	r3, r3
 80174f4:	f003 0301 	and.w	r3, r3, #1
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d101      	bne.n	8017500 <Get_Kyosan_EI_Message+0x828>
 80174fc:	212b      	movs	r1, #43	; 0x2b
 80174fe:	e000      	b.n	8017502 <Get_Kyosan_EI_Message+0x82a>
 8017500:	212d      	movs	r1, #45	; 0x2d
 8017502:	897a      	ldrh	r2, [r7, #10]
 8017504:	8bfb      	ldrh	r3, [r7, #30]
 8017506:	4819      	ldr	r0, [pc, #100]	; (801756c <Get_Kyosan_EI_Message+0x894>)
 8017508:	f00f fb70 	bl	8026bec <iprintf>

				}
				Cur_Receive_Length = RESET;
 801750c:	4b0b      	ldr	r3, [pc, #44]	; (801753c <Get_Kyosan_EI_Message+0x864>)
 801750e:	2200      	movs	r2, #0
 8017510:	801a      	strh	r2, [r3, #0]
				Max_Receive_Length = RESET;
 8017512:	4b0c      	ldr	r3, [pc, #48]	; (8017544 <Get_Kyosan_EI_Message+0x86c>)
 8017514:	2200      	movs	r2, #0
 8017516:	801a      	strh	r2, [r3, #0]
			}
			break;
 8017518:	e002      	b.n	8017520 <Get_Kyosan_EI_Message+0x848>
		default:
			Cur_Receive_Length = RESET;
 801751a:	4b08      	ldr	r3, [pc, #32]	; (801753c <Get_Kyosan_EI_Message+0x864>)
 801751c:	2200      	movs	r2, #0
 801751e:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(ComPort))
 8017520:	79fb      	ldrb	r3, [r7, #7]
 8017522:	4618      	mov	r0, r3
 8017524:	f001 fff0 	bl	8019508 <Com_DataReady>
 8017528:	4603      	mov	r3, r0
 801752a:	2b00      	cmp	r3, #0
 801752c:	f47f abfa 	bne.w	8016d24 <Get_Kyosan_EI_Message+0x4c>

		}
	}
	UNUSED(ControlID);
}
 8017530:	bf00      	nop
 8017532:	bf00      	nop
 8017534:	3724      	adds	r7, #36	; 0x24
 8017536:	46bd      	mov	sp, r7
 8017538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801753a:	bf00      	nop
 801753c:	2000b9ea 	.word	0x2000b9ea
 8017540:	2000b9f0 	.word	0x2000b9f0
 8017544:	2000b9ec 	.word	0x2000b9ec
 8017548:	2000b488 	.word	0x2000b488
 801754c:	0802bc5c 	.word	0x0802bc5c
 8017550:	2000bcf8 	.word	0x2000bcf8
 8017554:	80008001 	.word	0x80008001
 8017558:	80808081 	.word	0x80808081
 801755c:	0802bc8c 	.word	0x0802bc8c
 8017560:	2000b490 	.word	0x2000b490
 8017564:	40021c00 	.word	0x40021c00
 8017568:	0802bcbc 	.word	0x0802bcbc
 801756c:	0802bce4 	.word	0x0802bce4

08017570 <Calc_Kysoan_CRC>:


uint16_t Calc_Kysoan_CRC(uint8_t *data, size_t length)
{
 8017570:	b480      	push	{r7}
 8017572:	b087      	sub	sp, #28
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
 8017578:	6039      	str	r1, [r7, #0]
	uint16_t crc = KYOSAN_CRC_INIT_VAL;
 801757a:	2300      	movs	r3, #0
 801757c:	82fb      	strh	r3, [r7, #22]

	for (size_t i = 0; i < length; i++)
 801757e:	2300      	movs	r3, #0
 8017580:	613b      	str	r3, [r7, #16]
 8017582:	e026      	b.n	80175d2 <Calc_Kysoan_CRC+0x62>
	{
		crc ^= (uint16_t)data[i] << 8; // XOR with next byte shifted to left
 8017584:	687a      	ldr	r2, [r7, #4]
 8017586:	693b      	ldr	r3, [r7, #16]
 8017588:	4413      	add	r3, r2
 801758a:	781b      	ldrb	r3, [r3, #0]
 801758c:	021b      	lsls	r3, r3, #8
 801758e:	b21a      	sxth	r2, r3
 8017590:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017594:	4053      	eors	r3, r2
 8017596:	b21b      	sxth	r3, r3
 8017598:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 801759a:	2300      	movs	r3, #0
 801759c:	60fb      	str	r3, [r7, #12]
 801759e:	e012      	b.n	80175c6 <Calc_Kysoan_CRC+0x56>
		{
			if (crc & 0x8000)
 80175a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	da08      	bge.n	80175ba <Calc_Kysoan_CRC+0x4a>
			{
				crc = (crc << 1) ^ KYOSAN_CRC_POLYNOMIAL;
 80175a8:	8afb      	ldrh	r3, [r7, #22]
 80175aa:	005b      	lsls	r3, r3, #1
 80175ac:	b21a      	sxth	r2, r3
 80175ae:	f241 0321 	movw	r3, #4129	; 0x1021
 80175b2:	4053      	eors	r3, r2
 80175b4:	b21b      	sxth	r3, r3
 80175b6:	82fb      	strh	r3, [r7, #22]
 80175b8:	e002      	b.n	80175c0 <Calc_Kysoan_CRC+0x50>
			}
			else
			{
				crc <<= 1;
 80175ba:	8afb      	ldrh	r3, [r7, #22]
 80175bc:	005b      	lsls	r3, r3, #1
 80175be:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	3301      	adds	r3, #1
 80175c4:	60fb      	str	r3, [r7, #12]
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	2b07      	cmp	r3, #7
 80175ca:	dde9      	ble.n	80175a0 <Calc_Kysoan_CRC+0x30>
	for (size_t i = 0; i < length; i++)
 80175cc:	693b      	ldr	r3, [r7, #16]
 80175ce:	3301      	adds	r3, #1
 80175d0:	613b      	str	r3, [r7, #16]
 80175d2:	693a      	ldr	r2, [r7, #16]
 80175d4:	683b      	ldr	r3, [r7, #0]
 80175d6:	429a      	cmp	r2, r3
 80175d8:	d3d4      	bcc.n	8017584 <Calc_Kysoan_CRC+0x14>
			}
		}
	}
	return crc;
 80175da:	8afb      	ldrh	r3, [r7, #22]
}
 80175dc:	4618      	mov	r0, r3
 80175de:	371c      	adds	r7, #28
 80175e0:	46bd      	mov	sp, r7
 80175e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e6:	4770      	bx	lr

080175e8 <Check_forKyosanCMD>:
	}
}


void Check_forKyosanCMD(void)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b09a      	sub	sp, #104	; 0x68
 80175ec:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 80175ee:	2300      	movs	r3, #0
 80175f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 80175f4:	2300      	movs	r3, #0
 80175f6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 80175fa:	2300      	movs	r3, #0
 80175fc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	uint8_t Buffer[100] = {0,};
 8017600:	2300      	movs	r3, #0
 8017602:	603b      	str	r3, [r7, #0]
 8017604:	1d3b      	adds	r3, r7, #4
 8017606:	2260      	movs	r2, #96	; 0x60
 8017608:	2100      	movs	r1, #0
 801760a:	4618      	mov	r0, r3
 801760c:	f00f fa06 	bl	8026a1c <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8017610:	4b90      	ldr	r3, [pc, #576]	; (8017854 <Check_forKyosanCMD+0x26c>)
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	4618      	mov	r0, r3
 8017616:	f7f8 ffc1 	bl	801059c <HAL_Elaps_Ticks>
 801761a:	4603      	mov	r3, r0
 801761c:	2b09      	cmp	r3, #9
 801761e:	f240 8114 	bls.w	801784a <Check_forKyosanCMD+0x262>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8017622:	e010      	b.n	8017646 <Check_forKyosanCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8017624:	2000      	movs	r0, #0
 8017626:	f001 ffaf 	bl	8019588 <Com_Get_Byte>
 801762a:	4603      	mov	r3, r0
 801762c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			Buffer[Index++] = Byte;
 8017630:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8017634:	1c5a      	adds	r2, r3, #1
 8017636:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 801763a:	3368      	adds	r3, #104	; 0x68
 801763c:	443b      	add	r3, r7
 801763e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8017642:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8017646:	2000      	movs	r0, #0
 8017648:	f001 ff5e 	bl	8019508 <Com_DataReady>
 801764c:	4603      	mov	r3, r0
 801764e:	2b00      	cmp	r3, #0
 8017650:	d1e8      	bne.n	8017624 <Check_forKyosanCMD+0x3c>
		}
		if(Index>0)
 8017652:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8017656:	2b00      	cmp	r3, #0
 8017658:	f000 80ee 	beq.w	8017838 <Check_forKyosanCMD+0x250>
		{
			Buffer[Index] = 0;
 801765c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8017660:	3368      	adds	r3, #104	; 0x68
 8017662:	443b      	add	r3, r7
 8017664:	2200      	movs	r2, #0
 8017666:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 801766a:	463b      	mov	r3, r7
 801766c:	4619      	mov	r1, r3
 801766e:	487a      	ldr	r0, [pc, #488]	; (8017858 <Check_forKyosanCMD+0x270>)
 8017670:	f00f fabc 	bl	8026bec <iprintf>
			switch(Is_KyosanCommand_Valid(Buffer,Index))
 8017674:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8017678:	463b      	mov	r3, r7
 801767a:	4611      	mov	r1, r2
 801767c:	4618      	mov	r0, r3
 801767e:	f000 fa25 	bl	8017acc <Is_KyosanCommand_Valid>
 8017682:	4603      	mov	r3, r0
 8017684:	2b07      	cmp	r3, #7
 8017686:	f200 80bb 	bhi.w	8017800 <Check_forKyosanCMD+0x218>
 801768a:	a201      	add	r2, pc, #4	; (adr r2, 8017690 <Check_forKyosanCMD+0xa8>)
 801768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017690:	080176b1 	.word	0x080176b1
 8017694:	080176bf 	.word	0x080176bf
 8017698:	08017723 	.word	0x08017723
 801769c:	08017745 	.word	0x08017745
 80176a0:	0801776d 	.word	0x0801776d
 80176a4:	08017795 	.word	0x08017795
 80176a8:	080177bd 	.word	0x080177bd
 80176ac:	080177e5 	.word	0x080177e5
			{
			case ZERO:
				Dats_Request_Flag = 1;
 80176b0:	4b6a      	ldr	r3, [pc, #424]	; (801785c <Check_forKyosanCMD+0x274>)
 80176b2:	2201      	movs	r2, #1
 80176b4:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 80176b6:	486a      	ldr	r0, [pc, #424]	; (8017860 <Check_forKyosanCMD+0x278>)
 80176b8:	f00f fb34 	bl	8026d24 <puts>
				break;
 80176bc:	e0bc      	b.n	8017838 <Check_forKyosanCMD+0x250>
			case ONE:
				printf("Received \"%s\":%u\n",KyosanCommands_List[ONE],(Buffer[Index-1])-'0');
 80176be:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80176c2:	3b01      	subs	r3, #1
 80176c4:	3368      	adds	r3, #104	; 0x68
 80176c6:	443b      	add	r3, r7
 80176c8:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80176cc:	3b30      	subs	r3, #48	; 0x30
 80176ce:	461a      	mov	r2, r3
 80176d0:	4964      	ldr	r1, [pc, #400]	; (8017864 <Check_forKyosanCMD+0x27c>)
 80176d2:	4865      	ldr	r0, [pc, #404]	; (8017868 <Check_forKyosanCMD+0x280>)
 80176d4:	f00f fa8a 	bl	8026bec <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 80176d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80176dc:	3b01      	subs	r3, #1
 80176de:	3368      	adds	r3, #104	; 0x68
 80176e0:	443b      	add	r3, r7
 80176e2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80176e6:	2b2f      	cmp	r3, #47	; 0x2f
 80176e8:	d914      	bls.n	8017714 <Check_forKyosanCMD+0x12c>
 80176ea:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80176ee:	3b01      	subs	r3, #1
 80176f0:	3368      	adds	r3, #104	; 0x68
 80176f2:	443b      	add	r3, r7
 80176f4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80176f8:	2b31      	cmp	r3, #49	; 0x31
 80176fa:	d80b      	bhi.n	8017714 <Check_forKyosanCMD+0x12c>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 80176fc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8017700:	3b01      	subs	r3, #1
 8017702:	3368      	adds	r3, #104	; 0x68
 8017704:	443b      	add	r3, r7
 8017706:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 801770a:	3b30      	subs	r3, #48	; 0x30
 801770c:	b2da      	uxtb	r2, r3
 801770e:	4b57      	ldr	r3, [pc, #348]	; (801786c <Check_forKyosanCMD+0x284>)
 8017710:	701a      	strb	r2, [r3, #0]
 8017712:	e002      	b.n	801771a <Check_forKyosanCMD+0x132>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8017714:	4856      	ldr	r0, [pc, #344]	; (8017870 <Check_forKyosanCMD+0x288>)
 8017716:	f00f fb05 	bl	8026d24 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 801771a:	2301      	movs	r3, #1
 801771c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8017720:	e08a      	b.n	8017838 <Check_forKyosanCMD+0x250>

			case TWO:
				printf("Received %s\n",KyosanCommands_List[TWO]);
 8017722:	4954      	ldr	r1, [pc, #336]	; (8017874 <Check_forKyosanCMD+0x28c>)
 8017724:	4854      	ldr	r0, [pc, #336]	; (8017878 <Check_forKyosanCMD+0x290>)
 8017726:	f00f fa61 	bl	8026bec <iprintf>
				printf("CRC_FAIL_CONTROL_DATA_POS\n");
 801772a:	4854      	ldr	r0, [pc, #336]	; (801787c <Check_forKyosanCMD+0x294>)
 801772c:	f00f fafa 	bl	8026d24 <puts>
				SET_BIT_USER(CRC_FAIL_CONTROL_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8017730:	4b53      	ldr	r3, [pc, #332]	; (8017880 <Check_forKyosanCMD+0x298>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	f043 0301 	orr.w	r3, r3, #1
 8017738:	4a51      	ldr	r2, [pc, #324]	; (8017880 <Check_forKyosanCMD+0x298>)
 801773a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 801773c:	2301      	movs	r3, #1
 801773e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8017742:	e079      	b.n	8017838 <Check_forKyosanCMD+0x250>

			case THREE:
				printf("Received %s\n",KyosanCommands_List[THREE]);
 8017744:	494f      	ldr	r1, [pc, #316]	; (8017884 <Check_forKyosanCMD+0x29c>)
 8017746:	484c      	ldr	r0, [pc, #304]	; (8017878 <Check_forKyosanCMD+0x290>)
 8017748:	f00f fa50 	bl	8026bec <iprintf>
				printf("CRC_FAIL_CONTROL_DATA_NEG\n");
 801774c:	484e      	ldr	r0, [pc, #312]	; (8017888 <Check_forKyosanCMD+0x2a0>)
 801774e:	f00f fae9 	bl	8026d24 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8017752:	4b4b      	ldr	r3, [pc, #300]	; (8017880 <Check_forKyosanCMD+0x298>)
 8017754:	2200      	movs	r2, #0
 8017756:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_CONTROL_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8017758:	4b49      	ldr	r3, [pc, #292]	; (8017880 <Check_forKyosanCMD+0x298>)
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	f043 0302 	orr.w	r3, r3, #2
 8017760:	4a47      	ldr	r2, [pc, #284]	; (8017880 <Check_forKyosanCMD+0x298>)
 8017762:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8017764:	2301      	movs	r3, #1
 8017766:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 801776a:	e065      	b.n	8017838 <Check_forKyosanCMD+0x250>

			case FOUR:
				printf("Received %s\n",KyosanCommands_List[FOUR]);
 801776c:	4947      	ldr	r1, [pc, #284]	; (801788c <Check_forKyosanCMD+0x2a4>)
 801776e:	4842      	ldr	r0, [pc, #264]	; (8017878 <Check_forKyosanCMD+0x290>)
 8017770:	f00f fa3c 	bl	8026bec <iprintf>
				printf("CRC_FAIL_POLLING_DATA_POS\n");
 8017774:	4846      	ldr	r0, [pc, #280]	; (8017890 <Check_forKyosanCMD+0x2a8>)
 8017776:	f00f fad5 	bl	8026d24 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 801777a:	4b41      	ldr	r3, [pc, #260]	; (8017880 <Check_forKyosanCMD+0x298>)
 801777c:	2200      	movs	r2, #0
 801777e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_POLLING_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8017780:	4b3f      	ldr	r3, [pc, #252]	; (8017880 <Check_forKyosanCMD+0x298>)
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	f043 0304 	orr.w	r3, r3, #4
 8017788:	4a3d      	ldr	r2, [pc, #244]	; (8017880 <Check_forKyosanCMD+0x298>)
 801778a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 801778c:	2301      	movs	r3, #1
 801778e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8017792:	e051      	b.n	8017838 <Check_forKyosanCMD+0x250>

			case FIVE:
				printf("Received %s\n",KyosanCommands_List[FIVE]);
 8017794:	493f      	ldr	r1, [pc, #252]	; (8017894 <Check_forKyosanCMD+0x2ac>)
 8017796:	4838      	ldr	r0, [pc, #224]	; (8017878 <Check_forKyosanCMD+0x290>)
 8017798:	f00f fa28 	bl	8026bec <iprintf>
				printf("CRC_FAIL_POLLING_DATA_NEG\n");
 801779c:	483e      	ldr	r0, [pc, #248]	; (8017898 <Check_forKyosanCMD+0x2b0>)
 801779e:	f00f fac1 	bl	8026d24 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 80177a2:	4b37      	ldr	r3, [pc, #220]	; (8017880 <Check_forKyosanCMD+0x298>)
 80177a4:	2200      	movs	r2, #0
 80177a6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_POLLING_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 80177a8:	4b35      	ldr	r3, [pc, #212]	; (8017880 <Check_forKyosanCMD+0x298>)
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	f043 0308 	orr.w	r3, r3, #8
 80177b0:	4a33      	ldr	r2, [pc, #204]	; (8017880 <Check_forKyosanCMD+0x298>)
 80177b2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 80177b4:	2301      	movs	r3, #1
 80177b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 80177ba:	e03d      	b.n	8017838 <Check_forKyosanCMD+0x250>

			case SIX:
				printf("Received %s\n",KyosanCommands_List[SIX]);
 80177bc:	4937      	ldr	r1, [pc, #220]	; (801789c <Check_forKyosanCMD+0x2b4>)
 80177be:	482e      	ldr	r0, [pc, #184]	; (8017878 <Check_forKyosanCMD+0x290>)
 80177c0:	f00f fa14 	bl	8026bec <iprintf>
				printf("COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA\n");
 80177c4:	4836      	ldr	r0, [pc, #216]	; (80178a0 <Check_forKyosanCMD+0x2b8>)
 80177c6:	f00f faad 	bl	8026d24 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 80177ca:	4b2d      	ldr	r3, [pc, #180]	; (8017880 <Check_forKyosanCMD+0x298>)
 80177cc:	2200      	movs	r2, #0
 80177ce:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 80177d0:	4b2b      	ldr	r3, [pc, #172]	; (8017880 <Check_forKyosanCMD+0x298>)
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	f043 0310 	orr.w	r3, r3, #16
 80177d8:	4a29      	ldr	r2, [pc, #164]	; (8017880 <Check_forKyosanCMD+0x298>)
 80177da:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 80177dc:	2301      	movs	r3, #1
 80177de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 80177e2:	e029      	b.n	8017838 <Check_forKyosanCMD+0x250>
			case SEVEN:
				printf("Received %s\n",KyosanCommands_List[SEVEN]);
 80177e4:	492f      	ldr	r1, [pc, #188]	; (80178a4 <Check_forKyosanCMD+0x2bc>)
 80177e6:	4824      	ldr	r0, [pc, #144]	; (8017878 <Check_forKyosanCMD+0x290>)
 80177e8:	f00f fa00 	bl	8026bec <iprintf>
				printf("CLEAR ALL\n");
 80177ec:	482e      	ldr	r0, [pc, #184]	; (80178a8 <Check_forKyosanCMD+0x2c0>)
 80177ee:	f00f fa99 	bl	8026d24 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 80177f2:	4b23      	ldr	r3, [pc, #140]	; (8017880 <Check_forKyosanCMD+0x298>)
 80177f4:	2200      	movs	r2, #0
 80177f6:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 80177f8:	2301      	movs	r3, #1
 80177fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 80177fe:	e01b      	b.n	8017838 <Check_forKyosanCMD+0x250>
			default:
				printf("Please Send Valid Command\n");
 8017800:	481b      	ldr	r0, [pc, #108]	; (8017870 <Check_forKyosanCMD+0x288>)
 8017802:	f00f fa8f 	bl	8026d24 <puts>
				for(uint8_t i=0;i<KyosanCommands_Count;++i)
 8017806:	2300      	movs	r3, #0
 8017808:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 801780c:	e00e      	b.n	801782c <Check_forKyosanCMD+0x244>
				{
					printf("%s\n",KyosanCommands_List[i]);
 801780e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8017812:	2232      	movs	r2, #50	; 0x32
 8017814:	fb02 f303 	mul.w	r3, r2, r3
 8017818:	4a24      	ldr	r2, [pc, #144]	; (80178ac <Check_forKyosanCMD+0x2c4>)
 801781a:	4413      	add	r3, r2
 801781c:	4618      	mov	r0, r3
 801781e:	f00f fa81 	bl	8026d24 <puts>
				for(uint8_t i=0;i<KyosanCommands_Count;++i)
 8017822:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8017826:	3301      	adds	r3, #1
 8017828:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 801782c:	4b20      	ldr	r3, [pc, #128]	; (80178b0 <Check_forKyosanCMD+0x2c8>)
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8017834:	429a      	cmp	r2, r3
 8017836:	d3ea      	bcc.n	801780e <Check_forKyosanCMD+0x226>
				}
			}
		}

		if(IS_COMMAND_RECEIVED == YES)
 8017838:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801783c:	2b01      	cmp	r3, #1
 801783e:	d105      	bne.n	801784c <Check_forKyosanCMD+0x264>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8017840:	f240 2005 	movw	r0, #517	; 0x205
 8017844:	f7f9 fc5e 	bl	8011104 <TransmitCanPkt>
 8017848:	e000      	b.n	801784c <Check_forKyosanCMD+0x264>
		return;
 801784a:	bf00      	nop
		}
	}
}
 801784c:	3768      	adds	r7, #104	; 0x68
 801784e:	46bd      	mov	sp, r7
 8017850:	bd80      	pop	{r7, pc}
 8017852:	bf00      	nop
 8017854:	2000c080 	.word	0x2000c080
 8017858:	0802bf7c 	.word	0x0802bf7c
 801785c:	20000bba 	.word	0x20000bba
 8017860:	0802bf94 	.word	0x0802bf94
 8017864:	2000b622 	.word	0x2000b622
 8017868:	0802bfd4 	.word	0x0802bfd4
 801786c:	20000bbb 	.word	0x20000bbb
 8017870:	0802bfe8 	.word	0x0802bfe8
 8017874:	2000b654 	.word	0x2000b654
 8017878:	0802c004 	.word	0x0802c004
 801787c:	0802c014 	.word	0x0802c014
 8017880:	2000b488 	.word	0x2000b488
 8017884:	2000b686 	.word	0x2000b686
 8017888:	0802c030 	.word	0x0802c030
 801788c:	2000b6b8 	.word	0x2000b6b8
 8017890:	0802c04c 	.word	0x0802c04c
 8017894:	2000b6ea 	.word	0x2000b6ea
 8017898:	0802c068 	.word	0x0802c068
 801789c:	2000b71c 	.word	0x2000b71c
 80178a0:	0802c084 	.word	0x0802c084
 80178a4:	2000b74e 	.word	0x2000b74e
 80178a8:	0802c0b0 	.word	0x0802c0b0
 80178ac:	2000b5f0 	.word	0x2000b5f0
 80178b0:	2000b9d8 	.word	0x2000b9d8

080178b4 <Update_KyosanCommands>:


void Update_KyosanCommands(void)
{
 80178b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178b6:	b083      	sub	sp, #12
 80178b8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80178ba:	2300      	movs	r3, #0
 80178bc:	71fb      	strb	r3, [r7, #7]

	KyosanCommands_List[CmdCnt][0] = 0X24;
 80178be:	79fb      	ldrb	r3, [r7, #7]
 80178c0:	4a78      	ldr	r2, [pc, #480]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 80178c2:	2132      	movs	r1, #50	; 0x32
 80178c4:	fb01 f303 	mul.w	r3, r1, r3
 80178c8:	4413      	add	r3, r2
 80178ca:	2224      	movs	r2, #36	; 0x24
 80178cc:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][1] = 0X01;
 80178ce:	79fb      	ldrb	r3, [r7, #7]
 80178d0:	4a74      	ldr	r2, [pc, #464]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 80178d2:	2132      	movs	r1, #50	; 0x32
 80178d4:	fb01 f303 	mul.w	r3, r1, r3
 80178d8:	4413      	add	r3, r2
 80178da:	3301      	adds	r3, #1
 80178dc:	2201      	movs	r2, #1
 80178de:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][2] = 0X30;
 80178e0:	79fb      	ldrb	r3, [r7, #7]
 80178e2:	4a70      	ldr	r2, [pc, #448]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 80178e4:	2132      	movs	r1, #50	; 0x32
 80178e6:	fb01 f303 	mul.w	r3, r1, r3
 80178ea:	4413      	add	r3, r2
 80178ec:	3302      	adds	r3, #2
 80178ee:	2230      	movs	r2, #48	; 0x30
 80178f0:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][3] = 0X40;
 80178f2:	79fb      	ldrb	r3, [r7, #7]
 80178f4:	4a6b      	ldr	r2, [pc, #428]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 80178f6:	2132      	movs	r1, #50	; 0x32
 80178f8:	fb01 f303 	mul.w	r3, r1, r3
 80178fc:	4413      	add	r3, r2
 80178fe:	3303      	adds	r3, #3
 8017900:	2240      	movs	r2, #64	; 0x40
 8017902:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][4] = 0XC0;
 8017904:	79fb      	ldrb	r3, [r7, #7]
 8017906:	4a67      	ldr	r2, [pc, #412]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 8017908:	2132      	movs	r1, #50	; 0x32
 801790a:	fb01 f303 	mul.w	r3, r1, r3
 801790e:	4413      	add	r3, r2
 8017910:	3304      	adds	r3, #4
 8017912:	22c0      	movs	r2, #192	; 0xc0
 8017914:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][5] = 0X4E;
 8017916:	79fb      	ldrb	r3, [r7, #7]
 8017918:	4a62      	ldr	r2, [pc, #392]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 801791a:	2132      	movs	r1, #50	; 0x32
 801791c:	fb01 f303 	mul.w	r3, r1, r3
 8017920:	4413      	add	r3, r2
 8017922:	3305      	adds	r3, #5
 8017924:	224e      	movs	r2, #78	; 0x4e
 8017926:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][6] = 0X26;
 8017928:	79fb      	ldrb	r3, [r7, #7]
 801792a:	4a5e      	ldr	r2, [pc, #376]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 801792c:	2132      	movs	r1, #50	; 0x32
 801792e:	fb01 f303 	mul.w	r3, r1, r3
 8017932:	4413      	add	r3, r2
 8017934:	3306      	adds	r3, #6
 8017936:	2226      	movs	r2, #38	; 0x26
 8017938:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 801793a:	79fb      	ldrb	r3, [r7, #7]
 801793c:	3301      	adds	r3, #1
 801793e:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8017940:	79fb      	ldrb	r3, [r7, #7]
 8017942:	1c5a      	adds	r2, r3, #1
 8017944:	71fa      	strb	r2, [r7, #7]
 8017946:	461a      	mov	r2, r3
 8017948:	2332      	movs	r3, #50	; 0x32
 801794a:	fb02 f303 	mul.w	r3, r2, r3
 801794e:	4a55      	ldr	r2, [pc, #340]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 8017950:	4413      	add	r3, r2
 8017952:	4955      	ldr	r1, [pc, #340]	; (8017aa8 <Update_KyosanCommands+0x1f4>)
 8017954:	461a      	mov	r2, r3
 8017956:	460b      	mov	r3, r1
 8017958:	cb03      	ldmia	r3!, {r0, r1}
 801795a:	6010      	str	r0, [r2, #0]
 801795c:	6051      	str	r1, [r2, #4]
 801795e:	8819      	ldrh	r1, [r3, #0]
 8017960:	789b      	ldrb	r3, [r3, #2]
 8017962:	8111      	strh	r1, [r2, #8]
 8017964:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_CONTROL_DATA_POS");
 8017966:	79fb      	ldrb	r3, [r7, #7]
 8017968:	1c5a      	adds	r2, r3, #1
 801796a:	71fa      	strb	r2, [r7, #7]
 801796c:	461a      	mov	r2, r3
 801796e:	2332      	movs	r3, #50	; 0x32
 8017970:	fb02 f303 	mul.w	r3, r2, r3
 8017974:	4a4b      	ldr	r2, [pc, #300]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 8017976:	4413      	add	r3, r2
 8017978:	4a4c      	ldr	r2, [pc, #304]	; (8017aac <Update_KyosanCommands+0x1f8>)
 801797a:	461d      	mov	r5, r3
 801797c:	4614      	mov	r4, r2
 801797e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017980:	6028      	str	r0, [r5, #0]
 8017982:	6069      	str	r1, [r5, #4]
 8017984:	60aa      	str	r2, [r5, #8]
 8017986:	60eb      	str	r3, [r5, #12]
 8017988:	cc03      	ldmia	r4!, {r0, r1}
 801798a:	6128      	str	r0, [r5, #16]
 801798c:	6169      	str	r1, [r5, #20]
 801798e:	8823      	ldrh	r3, [r4, #0]
 8017990:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_CONTROL_DATA_NEG");
 8017992:	79fb      	ldrb	r3, [r7, #7]
 8017994:	1c5a      	adds	r2, r3, #1
 8017996:	71fa      	strb	r2, [r7, #7]
 8017998:	461a      	mov	r2, r3
 801799a:	2332      	movs	r3, #50	; 0x32
 801799c:	fb02 f303 	mul.w	r3, r2, r3
 80179a0:	4a40      	ldr	r2, [pc, #256]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 80179a2:	4413      	add	r3, r2
 80179a4:	4a42      	ldr	r2, [pc, #264]	; (8017ab0 <Update_KyosanCommands+0x1fc>)
 80179a6:	461d      	mov	r5, r3
 80179a8:	4614      	mov	r4, r2
 80179aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179ac:	6028      	str	r0, [r5, #0]
 80179ae:	6069      	str	r1, [r5, #4]
 80179b0:	60aa      	str	r2, [r5, #8]
 80179b2:	60eb      	str	r3, [r5, #12]
 80179b4:	cc03      	ldmia	r4!, {r0, r1}
 80179b6:	6128      	str	r0, [r5, #16]
 80179b8:	6169      	str	r1, [r5, #20]
 80179ba:	8823      	ldrh	r3, [r4, #0]
 80179bc:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_POLLING_DATA_POS");
 80179be:	79fb      	ldrb	r3, [r7, #7]
 80179c0:	1c5a      	adds	r2, r3, #1
 80179c2:	71fa      	strb	r2, [r7, #7]
 80179c4:	461a      	mov	r2, r3
 80179c6:	2332      	movs	r3, #50	; 0x32
 80179c8:	fb02 f303 	mul.w	r3, r2, r3
 80179cc:	4a35      	ldr	r2, [pc, #212]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 80179ce:	4413      	add	r3, r2
 80179d0:	4a38      	ldr	r2, [pc, #224]	; (8017ab4 <Update_KyosanCommands+0x200>)
 80179d2:	461d      	mov	r5, r3
 80179d4:	4614      	mov	r4, r2
 80179d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179d8:	6028      	str	r0, [r5, #0]
 80179da:	6069      	str	r1, [r5, #4]
 80179dc:	60aa      	str	r2, [r5, #8]
 80179de:	60eb      	str	r3, [r5, #12]
 80179e0:	cc03      	ldmia	r4!, {r0, r1}
 80179e2:	6128      	str	r0, [r5, #16]
 80179e4:	6169      	str	r1, [r5, #20]
 80179e6:	8823      	ldrh	r3, [r4, #0]
 80179e8:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_POLLING_DATA_NEG");
 80179ea:	79fb      	ldrb	r3, [r7, #7]
 80179ec:	1c5a      	adds	r2, r3, #1
 80179ee:	71fa      	strb	r2, [r7, #7]
 80179f0:	461a      	mov	r2, r3
 80179f2:	2332      	movs	r3, #50	; 0x32
 80179f4:	fb02 f303 	mul.w	r3, r2, r3
 80179f8:	4a2a      	ldr	r2, [pc, #168]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 80179fa:	4413      	add	r3, r2
 80179fc:	4a2e      	ldr	r2, [pc, #184]	; (8017ab8 <Update_KyosanCommands+0x204>)
 80179fe:	461d      	mov	r5, r3
 8017a00:	4614      	mov	r4, r2
 8017a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017a04:	6028      	str	r0, [r5, #0]
 8017a06:	6069      	str	r1, [r5, #4]
 8017a08:	60aa      	str	r2, [r5, #8]
 8017a0a:	60eb      	str	r3, [r5, #12]
 8017a0c:	cc03      	ldmia	r4!, {r0, r1}
 8017a0e:	6128      	str	r0, [r5, #16]
 8017a10:	6169      	str	r1, [r5, #20]
 8017a12:	8823      	ldrh	r3, [r4, #0]
 8017a14:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA");
 8017a16:	79fb      	ldrb	r3, [r7, #7]
 8017a18:	1c5a      	adds	r2, r3, #1
 8017a1a:	71fa      	strb	r2, [r7, #7]
 8017a1c:	461a      	mov	r2, r3
 8017a1e:	2332      	movs	r3, #50	; 0x32
 8017a20:	fb02 f303 	mul.w	r3, r2, r3
 8017a24:	4a1f      	ldr	r2, [pc, #124]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 8017a26:	4413      	add	r3, r2
 8017a28:	4a24      	ldr	r2, [pc, #144]	; (8017abc <Update_KyosanCommands+0x208>)
 8017a2a:	4614      	mov	r4, r2
 8017a2c:	469c      	mov	ip, r3
 8017a2e:	f104 0e20 	add.w	lr, r4, #32
 8017a32:	4665      	mov	r5, ip
 8017a34:	4626      	mov	r6, r4
 8017a36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017a38:	6028      	str	r0, [r5, #0]
 8017a3a:	6069      	str	r1, [r5, #4]
 8017a3c:	60aa      	str	r2, [r5, #8]
 8017a3e:	60eb      	str	r3, [r5, #12]
 8017a40:	3410      	adds	r4, #16
 8017a42:	f10c 0c10 	add.w	ip, ip, #16
 8017a46:	4574      	cmp	r4, lr
 8017a48:	d1f3      	bne.n	8017a32 <Update_KyosanCommands+0x17e>
 8017a4a:	4662      	mov	r2, ip
 8017a4c:	4623      	mov	r3, r4
 8017a4e:	cb03      	ldmia	r3!, {r0, r1}
 8017a50:	6010      	str	r0, [r2, #0]
 8017a52:	6051      	str	r1, [r2, #4]
 8017a54:	881b      	ldrh	r3, [r3, #0]
 8017a56:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8017a58:	79fb      	ldrb	r3, [r7, #7]
 8017a5a:	1c5a      	adds	r2, r3, #1
 8017a5c:	71fa      	strb	r2, [r7, #7]
 8017a5e:	461a      	mov	r2, r3
 8017a60:	2332      	movs	r3, #50	; 0x32
 8017a62:	fb02 f303 	mul.w	r3, r2, r3
 8017a66:	4a0f      	ldr	r2, [pc, #60]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 8017a68:	4413      	add	r3, r2
 8017a6a:	4915      	ldr	r1, [pc, #84]	; (8017ac0 <Update_KyosanCommands+0x20c>)
 8017a6c:	461a      	mov	r2, r3
 8017a6e:	460b      	mov	r3, r1
 8017a70:	cb03      	ldmia	r3!, {r0, r1}
 8017a72:	6010      	str	r0, [r2, #0]
 8017a74:	6051      	str	r1, [r2, #4]
 8017a76:	881b      	ldrh	r3, [r3, #0]
 8017a78:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"HELP");
 8017a7a:	79fb      	ldrb	r3, [r7, #7]
 8017a7c:	1c5a      	adds	r2, r3, #1
 8017a7e:	71fa      	strb	r2, [r7, #7]
 8017a80:	461a      	mov	r2, r3
 8017a82:	2332      	movs	r3, #50	; 0x32
 8017a84:	fb02 f303 	mul.w	r3, r2, r3
 8017a88:	4a06      	ldr	r2, [pc, #24]	; (8017aa4 <Update_KyosanCommands+0x1f0>)
 8017a8a:	4413      	add	r3, r2
 8017a8c:	4a0d      	ldr	r2, [pc, #52]	; (8017ac4 <Update_KyosanCommands+0x210>)
 8017a8e:	6810      	ldr	r0, [r2, #0]
 8017a90:	6018      	str	r0, [r3, #0]
 8017a92:	7912      	ldrb	r2, [r2, #4]
 8017a94:	711a      	strb	r2, [r3, #4]
	KyosanCommands_Count =  CmdCnt;
 8017a96:	4a0c      	ldr	r2, [pc, #48]	; (8017ac8 <Update_KyosanCommands+0x214>)
 8017a98:	79fb      	ldrb	r3, [r7, #7]
 8017a9a:	7013      	strb	r3, [r2, #0]
}
 8017a9c:	bf00      	nop
 8017a9e:	370c      	adds	r7, #12
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017aa4:	2000b5f0 	.word	0x2000b5f0
 8017aa8:	0802c0bc 	.word	0x0802c0bc
 8017aac:	0802c014 	.word	0x0802c014
 8017ab0:	0802c030 	.word	0x0802c030
 8017ab4:	0802c04c 	.word	0x0802c04c
 8017ab8:	0802c068 	.word	0x0802c068
 8017abc:	0802c084 	.word	0x0802c084
 8017ac0:	0802c0c8 	.word	0x0802c0c8
 8017ac4:	0802c0d4 	.word	0x0802c0d4
 8017ac8:	2000b9d8 	.word	0x2000b9d8

08017acc <Is_KyosanCommand_Valid>:

uint8_t Is_KyosanCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 8017acc:	b590      	push	{r4, r7, lr}
 8017ace:	b085      	sub	sp, #20
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	6078      	str	r0, [r7, #4]
 8017ad4:	460b      	mov	r3, r1
 8017ad6:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < KyosanCommands_Count; ++Traverser)
 8017ad8:	2300      	movs	r3, #0
 8017ada:	73fb      	strb	r3, [r7, #15]
 8017adc:	e01c      	b.n	8017b18 <Is_KyosanCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)KyosanCommands_List[Traverser]) != NULL)
		if(memcmp(Buffer,KyosanCommands_List[Traverser],strlen((char *)KyosanCommands_List[Traverser])) == 0)
 8017ade:	7bfb      	ldrb	r3, [r7, #15]
 8017ae0:	2232      	movs	r2, #50	; 0x32
 8017ae2:	fb02 f303 	mul.w	r3, r2, r3
 8017ae6:	4a11      	ldr	r2, [pc, #68]	; (8017b2c <Is_KyosanCommand_Valid+0x60>)
 8017ae8:	189c      	adds	r4, r3, r2
 8017aea:	7bfb      	ldrb	r3, [r7, #15]
 8017aec:	2232      	movs	r2, #50	; 0x32
 8017aee:	fb02 f303 	mul.w	r3, r2, r3
 8017af2:	4a0e      	ldr	r2, [pc, #56]	; (8017b2c <Is_KyosanCommand_Valid+0x60>)
 8017af4:	4413      	add	r3, r2
 8017af6:	4618      	mov	r0, r3
 8017af8:	f7e8 fbac 	bl	8000254 <strlen>
 8017afc:	4603      	mov	r3, r0
 8017afe:	461a      	mov	r2, r3
 8017b00:	4621      	mov	r1, r4
 8017b02:	6878      	ldr	r0, [r7, #4]
 8017b04:	f00e ff52 	bl	80269ac <memcmp>
 8017b08:	4603      	mov	r3, r0
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d101      	bne.n	8017b12 <Is_KyosanCommand_Valid+0x46>
		{
			return Traverser;
 8017b0e:	7bfb      	ldrb	r3, [r7, #15]
 8017b10:	e008      	b.n	8017b24 <Is_KyosanCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < KyosanCommands_Count; ++Traverser)
 8017b12:	7bfb      	ldrb	r3, [r7, #15]
 8017b14:	3301      	adds	r3, #1
 8017b16:	73fb      	strb	r3, [r7, #15]
 8017b18:	4b05      	ldr	r3, [pc, #20]	; (8017b30 <Is_KyosanCommand_Valid+0x64>)
 8017b1a:	781b      	ldrb	r3, [r3, #0]
 8017b1c:	7bfa      	ldrb	r2, [r7, #15]
 8017b1e:	429a      	cmp	r2, r3
 8017b20:	d3dd      	bcc.n	8017ade <Is_KyosanCommand_Valid+0x12>
		}
	}
	return 255;
 8017b22:	23ff      	movs	r3, #255	; 0xff
}
 8017b24:	4618      	mov	r0, r3
 8017b26:	3714      	adds	r7, #20
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	bd90      	pop	{r4, r7, pc}
 8017b2c:	2000b5f0 	.word	0x2000b5f0
 8017b30:	2000b9d8 	.word	0x2000b9d8

08017b34 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8017b34:	b480      	push	{r7}
 8017b36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8017b38:	f3bf 8f4f 	dsb	sy
}
 8017b3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017b3e:	f3bf 8f6f 	isb	sy
}
 8017b42:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8017b44:	4b0d      	ldr	r3, [pc, #52]	; (8017b7c <SCB_EnableICache+0x48>)
 8017b46:	2200      	movs	r2, #0
 8017b48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8017b4c:	f3bf 8f4f 	dsb	sy
}
 8017b50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017b52:	f3bf 8f6f 	isb	sy
}
 8017b56:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8017b58:	4b08      	ldr	r3, [pc, #32]	; (8017b7c <SCB_EnableICache+0x48>)
 8017b5a:	695b      	ldr	r3, [r3, #20]
 8017b5c:	4a07      	ldr	r2, [pc, #28]	; (8017b7c <SCB_EnableICache+0x48>)
 8017b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017b62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8017b64:	f3bf 8f4f 	dsb	sy
}
 8017b68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017b6a:	f3bf 8f6f 	isb	sy
}
 8017b6e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8017b70:	bf00      	nop
 8017b72:	46bd      	mov	sp, r7
 8017b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b78:	4770      	bx	lr
 8017b7a:	bf00      	nop
 8017b7c:	e000ed00 	.word	0xe000ed00

08017b80 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8017b80:	b480      	push	{r7}
 8017b82:	b085      	sub	sp, #20
 8017b84:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8017b86:	4b1f      	ldr	r3, [pc, #124]	; (8017c04 <SCB_EnableDCache+0x84>)
 8017b88:	2200      	movs	r2, #0
 8017b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8017b8e:	f3bf 8f4f 	dsb	sy
}
 8017b92:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8017b94:	4b1b      	ldr	r3, [pc, #108]	; (8017c04 <SCB_EnableDCache+0x84>)
 8017b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017b9a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	0b5b      	lsrs	r3, r3, #13
 8017ba0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017ba4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	08db      	lsrs	r3, r3, #3
 8017baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017bae:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	015a      	lsls	r2, r3, #5
 8017bb4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8017bb8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8017bba:	68ba      	ldr	r2, [r7, #8]
 8017bbc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8017bbe:	4911      	ldr	r1, [pc, #68]	; (8017c04 <SCB_EnableDCache+0x84>)
 8017bc0:	4313      	orrs	r3, r2
 8017bc2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8017bc6:	68bb      	ldr	r3, [r7, #8]
 8017bc8:	1e5a      	subs	r2, r3, #1
 8017bca:	60ba      	str	r2, [r7, #8]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d1ef      	bne.n	8017bb0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	1e5a      	subs	r2, r3, #1
 8017bd4:	60fa      	str	r2, [r7, #12]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d1e5      	bne.n	8017ba6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8017bda:	f3bf 8f4f 	dsb	sy
}
 8017bde:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8017be0:	4b08      	ldr	r3, [pc, #32]	; (8017c04 <SCB_EnableDCache+0x84>)
 8017be2:	695b      	ldr	r3, [r3, #20]
 8017be4:	4a07      	ldr	r2, [pc, #28]	; (8017c04 <SCB_EnableDCache+0x84>)
 8017be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017bea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8017bec:	f3bf 8f4f 	dsb	sy
}
 8017bf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017bf2:	f3bf 8f6f 	isb	sy
}
 8017bf6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8017bf8:	bf00      	nop
 8017bfa:	3714      	adds	r7, #20
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c02:	4770      	bx	lr
 8017c04:	e000ed00 	.word	0xe000ed00

08017c08 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b082      	sub	sp, #8
 8017c0c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8017c12:	f000 f9bb 	bl	8017f8c <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8017c16:	f7ff ff8d 	bl	8017b34 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8017c1a:	f7ff ffb1 	bl	8017b80 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8017c1e:	f001 ff7b 	bl	8019b18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8017c22:	f000 f8ed 	bl	8017e00 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 8017c26:	f7f2 fd85 	bl	800a734 <reset_cause_get>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	f7f2 fdd3 	bl	800a7d8 <reset_cause_get_name>
 8017c32:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 8017c34:	f7fe fadc 	bl	80161f0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8017c38:	f001 f982 	bl	8018f40 <MX_USART1_UART_Init>
	Get_Slot();
 8017c3c:	f7e8 ff46 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 8017c40:	f7f9 f8d6 	bl	8010df0 <MX_CAN2_Init>
	MX_CAN3_Init();
 8017c44:	f7f9 f94c 	bl	8010ee0 <MX_CAN3_Init>
	MX_I2C1_Init();
 8017c48:	f7fe fd02 	bl	8016650 <MX_I2C1_Init>
	MX_I2C2_Init();
 8017c4c:	f7fe fd40 	bl	80166d0 <MX_I2C2_Init>
	MX_SPI1_Init();
 8017c50:	f000 fa2c 	bl	80180ac <MX_SPI1_Init>
	printf("\r\r\r\r");
 8017c54:	485c      	ldr	r0, [pc, #368]	; (8017dc8 <main+0x1c0>)
 8017c56:	f00e ffc9 	bl	8026bec <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 8017c5a:	485c      	ldr	r0, [pc, #368]	; (8017dcc <main+0x1c4>)
 8017c5c:	f00f f862 	bl	8026d24 <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 8017c60:	6879      	ldr	r1, [r7, #4]
 8017c62:	485b      	ldr	r0, [pc, #364]	; (8017dd0 <main+0x1c8>)
 8017c64:	f00e ffc2 	bl	8026bec <iprintf>
	CheckCRConStartup();
 8017c68:	f7f4 ffbc 	bl	800cbe4 <CheckCRConStartup>
	Get_Build_Details();
 8017c6c:	f000 f932 	bl	8017ed4 <Get_Build_Details>
	Get_Config();
 8017c70:	f000 fd88 	bl	8018784 <Get_Config>
	MX_RNG_Init();
 8017c74:	f000 f9bc 	bl	8017ff0 <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8017c78:	2208      	movs	r2, #8
 8017c7a:	2100      	movs	r1, #0
 8017c7c:	4855      	ldr	r0, [pc, #340]	; (8017dd4 <main+0x1cc>)
 8017c7e:	f00e fecd 	bl	8026a1c <memset>
	HAL_Delay(250);
 8017c82:	20fa      	movs	r0, #250	; 0xfa
 8017c84:	f001 ffb4 	bl	8019bf0 <HAL_Delay>

	switch(EI_data.ProtocolType)
 8017c88:	4b53      	ldr	r3, [pc, #332]	; (8017dd8 <main+0x1d0>)
 8017c8a:	781b      	ldrb	r3, [r3, #0]
 8017c8c:	3b01      	subs	r3, #1
 8017c8e:	2b03      	cmp	r3, #3
 8017c90:	d86d      	bhi.n	8017d6e <main+0x166>
 8017c92:	a201      	add	r2, pc, #4	; (adr r2, 8017c98 <main+0x90>)
 8017c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c98:	08017ca9 	.word	0x08017ca9
 8017c9c:	08017d03 	.word	0x08017d03
 8017ca0:	08017d2b 	.word	0x08017d2b
 8017ca4:	08017d5b 	.word	0x08017d5b
	{
	case HITACHI:
		print_self_Details_Hitachi();
 8017ca8:	f7f1 fb64 	bl	8009374 <print_self_Details_Hitachi>
		ReAssignData();
 8017cac:	f7f2 f8ec 	bl	8009e88 <ReAssignData>
		Update_HitachiCommands();
 8017cb0:	f7e8 fdf8 	bl	80008a4 <Update_HitachiCommands>
		printf("Protocol Selected is HITACHI\n");
 8017cb4:	4849      	ldr	r0, [pc, #292]	; (8017ddc <main+0x1d4>)
 8017cb6:	f00f f835 	bl	8026d24 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8017cba:	4849      	ldr	r0, [pc, #292]	; (8017de0 <main+0x1d8>)
 8017cbc:	f00f f832 	bl	8026d24 <puts>
		MX_LWIP_Init();
 8017cc0:	f009 f8b4 	bl	8020e2c <MX_LWIP_Init>
		udpServer_init();
 8017cc4:	f7f8 fc7a 	bl	80105bc <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8017cc8:	4846      	ldr	r0, [pc, #280]	; (8017de4 <main+0x1dc>)
 8017cca:	f00f f82b 	bl	8026d24 <puts>
		if((EI_data.Hitachi_st.EnableSerialPort > 0) && (EI_data.Hitachi_st.BaudRate > 0) )
 8017cce:	4b42      	ldr	r3, [pc, #264]	; (8017dd8 <main+0x1d0>)
 8017cd0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d04e      	beq.n	8017d76 <main+0x16e>
 8017cd8:	4b3f      	ldr	r3, [pc, #252]	; (8017dd8 <main+0x1d0>)
 8017cda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d049      	beq.n	8017d76 <main+0x16e>
		{
			MX_UART5_Init();
 8017ce2:	f001 f8f7 	bl	8018ed4 <MX_UART5_Init>
			printf("Initializing UART with BaudRate:%lu\n",EI_data.Hitachi_st.BaudRate);
 8017ce6:	4b3c      	ldr	r3, [pc, #240]	; (8017dd8 <main+0x1d0>)
 8017ce8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8017cec:	4619      	mov	r1, r3
 8017cee:	483e      	ldr	r0, [pc, #248]	; (8017de8 <main+0x1e0>)
 8017cf0:	f00e ff7c 	bl	8026bec <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 8017cf4:	4b38      	ldr	r3, [pc, #224]	; (8017dd8 <main+0x1d0>)
 8017cf6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f001 face 	bl	801929c <UART4_Init>
		}

#if ENABLE_SIGNAL_PRINT
		UpdateSIGNALSNamesHitachi();
#endif
		break;
 8017d00:	e039      	b.n	8017d76 <main+0x16e>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 8017d02:	483a      	ldr	r0, [pc, #232]	; (8017dec <main+0x1e4>)
 8017d04:	f00f f80e 	bl	8026d24 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8017d08:	4835      	ldr	r0, [pc, #212]	; (8017de0 <main+0x1d8>)
 8017d0a:	f00f f80b 	bl	8026d24 <puts>
		MX_LWIP_Init();
 8017d0e:	f009 f88d 	bl	8020e2c <MX_LWIP_Init>
		udpServer_init();
 8017d12:	f7f8 fc53 	bl	80105bc <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8017d16:	4833      	ldr	r0, [pc, #204]	; (8017de4 <main+0x1dc>)
 8017d18:	f00f f804 	bl	8026d24 <puts>
		print_self_DetailsSiemens();
 8017d1c:	f7f8 fb2a 	bl	8010374 <print_self_DetailsSiemens>
		Update_SiemensCommands();
 8017d20:	f7f7 f834 	bl	800ed8c <Update_SiemensCommands>
		UpdateSIGNALSNames();
 8017d24:	f7f7 fe48 	bl	800f9b8 <UpdateSIGNALSNames>
		break;
 8017d28:	e026      	b.n	8017d78 <main+0x170>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 8017d2a:	4831      	ldr	r0, [pc, #196]	; (8017df0 <main+0x1e8>)
 8017d2c:	f00e fffa 	bl	8026d24 <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 8017d30:	4b29      	ldr	r3, [pc, #164]	; (8017dd8 <main+0x1d0>)
 8017d32:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d006      	beq.n	8017d48 <main+0x140>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 8017d3a:	4b27      	ldr	r3, [pc, #156]	; (8017dd8 <main+0x1d0>)
 8017d3c:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8017d40:	4618      	mov	r0, r3
 8017d42:	f001 faab 	bl	801929c <UART4_Init>
 8017d46:	e003      	b.n	8017d50 <main+0x148>
		}
		else
		{
			UART4_Init(115200);
 8017d48:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8017d4c:	f001 faa6 	bl	801929c <UART4_Init>
		}
		Update_MedhaCommands();
 8017d50:	f7f4 f9e4 	bl	800c11c <Update_MedhaCommands>
		Print_Medha_Self_Details();
 8017d54:	f7f3 ffa2 	bl	800bc9c <Print_Medha_Self_Details>
		break;
 8017d58:	e00e      	b.n	8017d78 <main+0x170>

	case KYOSAN:
		printf("Protocol Selected is KYOSAN\n");
 8017d5a:	4826      	ldr	r0, [pc, #152]	; (8017df4 <main+0x1ec>)
 8017d5c:	f00e ffe2 	bl	8026d24 <puts>
		UART4_Init(31200);
 8017d60:	f647 10e0 	movw	r0, #31200	; 0x79e0
 8017d64:	f001 fa9a 	bl	801929c <UART4_Init>
//		Update_KyosanStructure();
//		UpdateSIGNALSNamesKyosan();
		Update_KyosanCommands();
 8017d68:	f7ff fda4 	bl	80178b4 <Update_KyosanCommands>
		break;
 8017d6c:	e004      	b.n	8017d78 <main+0x170>

	default:
		printf("Please Select Protocol Type\n");
 8017d6e:	4822      	ldr	r0, [pc, #136]	; (8017df8 <main+0x1f0>)
 8017d70:	f00e ffd8 	bl	8026d24 <puts>
		while(1);
 8017d74:	e7fe      	b.n	8017d74 <main+0x16c>
		break;
 8017d76:	bf00      	nop
	}


	printf("Initialization Success\n");
 8017d78:	4820      	ldr	r0, [pc, #128]	; (8017dfc <main+0x1f4>)
 8017d7a:	f00e ffd3 	bl	8026d24 <puts>
	MX_IWDG_Init();
 8017d7e:	f7fe fd8f 	bl	80168a0 <MX_IWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 8017d82:	4b15      	ldr	r3, [pc, #84]	; (8017dd8 <main+0x1d0>)
 8017d84:	781b      	ldrb	r3, [r3, #0]
 8017d86:	3b01      	subs	r3, #1
 8017d88:	2b03      	cmp	r3, #3
 8017d8a:	d817      	bhi.n	8017dbc <main+0x1b4>
 8017d8c:	a201      	add	r2, pc, #4	; (adr r2, 8017d94 <main+0x18c>)
 8017d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d92:	bf00      	nop
 8017d94:	08017da5 	.word	0x08017da5
 8017d98:	08017dab 	.word	0x08017dab
 8017d9c:	08017db1 	.word	0x08017db1
 8017da0:	08017db7 	.word	0x08017db7
		{
		case HITACHI:
			Process_HitachiEI();
 8017da4:	f7f2 f82a 	bl	8009dfc <Process_HitachiEI>
			break;
 8017da8:	e00c      	b.n	8017dc4 <main+0x1bc>

		case SIEMENS:
			Process_SiemensEI();
 8017daa:	f7f4 ffeb 	bl	800cd84 <Process_SiemensEI>
			break;
 8017dae:	e009      	b.n	8017dc4 <main+0x1bc>

		case MEDHA:
			Process_Medha_EI();
 8017db0:	f7f2 fd62 	bl	800a878 <Process_Medha_EI>
			break;
 8017db4:	e006      	b.n	8017dc4 <main+0x1bc>

		case KYOSAN:
			Process_Kyosan_EI();
 8017db6:	f7fe fd91 	bl	80168dc <Process_Kyosan_EI>
			break;
 8017dba:	e003      	b.n	8017dc4 <main+0x1bc>

		default:
			printf("Please Select Protocol Type\n");
 8017dbc:	480e      	ldr	r0, [pc, #56]	; (8017df8 <main+0x1f0>)
 8017dbe:	f00e ffb1 	bl	8026d24 <puts>
			while(1);
 8017dc2:	e7fe      	b.n	8017dc2 <main+0x1ba>
		switch(EI_data.ProtocolType)
 8017dc4:	e7dd      	b.n	8017d82 <main+0x17a>
 8017dc6:	bf00      	nop
 8017dc8:	0802c0dc 	.word	0x0802c0dc
 8017dcc:	0802c0e4 	.word	0x0802c0e4
 8017dd0:	0802c134 	.word	0x0802c134
 8017dd4:	2000308c 	.word	0x2000308c
 8017dd8:	20000504 	.word	0x20000504
 8017ddc:	0802c150 	.word	0x0802c150
 8017de0:	0802c170 	.word	0x0802c170
 8017de4:	0802c198 	.word	0x0802c198
 8017de8:	0802c1b4 	.word	0x0802c1b4
 8017dec:	0802c1dc 	.word	0x0802c1dc
 8017df0:	0802c1fc 	.word	0x0802c1fc
 8017df4:	0802c218 	.word	0x0802c218
 8017df8:	0802c234 	.word	0x0802c234
 8017dfc:	0802c250 	.word	0x0802c250

08017e00 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b094      	sub	sp, #80	; 0x50
 8017e04:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8017e06:	f107 031c 	add.w	r3, r7, #28
 8017e0a:	2234      	movs	r2, #52	; 0x34
 8017e0c:	2100      	movs	r1, #0
 8017e0e:	4618      	mov	r0, r3
 8017e10:	f00e fe04 	bl	8026a1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017e14:	f107 0308 	add.w	r3, r7, #8
 8017e18:	2200      	movs	r2, #0
 8017e1a:	601a      	str	r2, [r3, #0]
 8017e1c:	605a      	str	r2, [r3, #4]
 8017e1e:	609a      	str	r2, [r3, #8]
 8017e20:	60da      	str	r2, [r3, #12]
 8017e22:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8017e24:	4b29      	ldr	r3, [pc, #164]	; (8017ecc <SystemClock_Config+0xcc>)
 8017e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e28:	4a28      	ldr	r2, [pc, #160]	; (8017ecc <SystemClock_Config+0xcc>)
 8017e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8017e30:	4b26      	ldr	r3, [pc, #152]	; (8017ecc <SystemClock_Config+0xcc>)
 8017e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017e38:	607b      	str	r3, [r7, #4]
 8017e3a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8017e3c:	4b24      	ldr	r3, [pc, #144]	; (8017ed0 <SystemClock_Config+0xd0>)
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	4a23      	ldr	r2, [pc, #140]	; (8017ed0 <SystemClock_Config+0xd0>)
 8017e42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017e46:	6013      	str	r3, [r2, #0]
 8017e48:	4b21      	ldr	r3, [pc, #132]	; (8017ed0 <SystemClock_Config+0xd0>)
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8017e50:	603b      	str	r3, [r7, #0]
 8017e52:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8017e54:	2309      	movs	r3, #9
 8017e56:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8017e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017e5c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8017e5e:	2301      	movs	r3, #1
 8017e60:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8017e62:	2302      	movs	r3, #2
 8017e64:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8017e66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017e6a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 8017e6c:	2306      	movs	r3, #6
 8017e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8017e70:	23b4      	movs	r3, #180	; 0xb4
 8017e72:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8017e74:	2302      	movs	r3, #2
 8017e76:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8017e78:	2308      	movs	r3, #8
 8017e7a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8017e7c:	2302      	movs	r3, #2
 8017e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8017e80:	f107 031c 	add.w	r3, r7, #28
 8017e84:	4618      	mov	r0, r3
 8017e86:	f005 fa1d 	bl	801d2c4 <HAL_RCC_OscConfig>
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d001      	beq.n	8017e94 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8017e90:	f000 f8a8 	bl	8017fe4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8017e94:	230f      	movs	r3, #15
 8017e96:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8017e98:	2302      	movs	r3, #2
 8017e9a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8017ea0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8017ea4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8017ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017eaa:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8017eac:	f107 0308 	add.w	r3, r7, #8
 8017eb0:	2105      	movs	r1, #5
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	f005 fcb4 	bl	801d820 <HAL_RCC_ClockConfig>
 8017eb8:	4603      	mov	r3, r0
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d001      	beq.n	8017ec2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8017ebe:	f000 f891 	bl	8017fe4 <Error_Handler>
	}
}
 8017ec2:	bf00      	nop
 8017ec4:	3750      	adds	r7, #80	; 0x50
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	bd80      	pop	{r7, pc}
 8017eca:	bf00      	nop
 8017ecc:	40023800 	.word	0x40023800
 8017ed0:	40007000 	.word	0x40007000

08017ed4 <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b08e      	sub	sp, #56	; 0x38
 8017ed8:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 8017eda:	2300      	movs	r3, #0
 8017edc:	607b      	str	r3, [r7, #4]
 8017ede:	f107 0308 	add.w	r3, r7, #8
 8017ee2:	222e      	movs	r2, #46	; 0x2e
 8017ee4:	2100      	movs	r1, #0
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	f00e fd98 	bl	8026a1c <memset>
	printf("\n_____________________________________________\n");
 8017eec:	481d      	ldr	r0, [pc, #116]	; (8017f64 <Get_Build_Details+0x90>)
 8017eee:	f00e ff19 	bl	8026d24 <puts>
	printf("Build Date:%s\n",__DATE__);
 8017ef2:	491d      	ldr	r1, [pc, #116]	; (8017f68 <Get_Build_Details+0x94>)
 8017ef4:	481d      	ldr	r0, [pc, #116]	; (8017f6c <Get_Build_Details+0x98>)
 8017ef6:	f00e fe79 	bl	8026bec <iprintf>
	printf("Build Time:%s\n",__TIME__);
 8017efa:	491d      	ldr	r1, [pc, #116]	; (8017f70 <Get_Build_Details+0x9c>)
 8017efc:	481d      	ldr	r0, [pc, #116]	; (8017f74 <Get_Build_Details+0xa0>)
 8017efe:	f00e fe75 	bl	8026bec <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 8017f02:	1d3b      	adds	r3, r7, #4
 8017f04:	4a18      	ldr	r2, [pc, #96]	; (8017f68 <Get_Build_Details+0x94>)
 8017f06:	ca07      	ldmia	r2, {r0, r1, r2}
 8017f08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 8017f0c:	1d3b      	adds	r3, r7, #4
 8017f0e:	4618      	mov	r0, r3
 8017f10:	f7e8 f9a0 	bl	8000254 <strlen>
 8017f14:	4603      	mov	r3, r0
 8017f16:	461a      	mov	r2, r3
 8017f18:	1d3b      	adds	r3, r7, #4
 8017f1a:	4413      	add	r3, r2
 8017f1c:	4914      	ldr	r1, [pc, #80]	; (8017f70 <Get_Build_Details+0x9c>)
 8017f1e:	461a      	mov	r2, r3
 8017f20:	460b      	mov	r3, r1
 8017f22:	cb03      	ldmia	r3!, {r0, r1}
 8017f24:	6010      	str	r0, [r2, #0]
 8017f26:	6051      	str	r1, [r2, #4]
 8017f28:	781b      	ldrb	r3, [r3, #0]
 8017f2a:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 8017f2c:	1d3b      	adds	r3, r7, #4
 8017f2e:	4618      	mov	r0, r3
 8017f30:	f7e8 f990 	bl	8000254 <strlen>
 8017f34:	4603      	mov	r3, r0
 8017f36:	b21a      	sxth	r2, r3
 8017f38:	1d3b      	adds	r3, r7, #4
 8017f3a:	4619      	mov	r1, r3
 8017f3c:	2000      	movs	r0, #0
 8017f3e:	f7fe f803 	bl	8015f48 <GetCRC16>
 8017f42:	4603      	mov	r3, r0
 8017f44:	461a      	mov	r2, r3
 8017f46:	4b0c      	ldr	r3, [pc, #48]	; (8017f78 <Get_Build_Details+0xa4>)
 8017f48:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 8017f4a:	4a0c      	ldr	r2, [pc, #48]	; (8017f7c <Get_Build_Details+0xa8>)
 8017f4c:	490c      	ldr	r1, [pc, #48]	; (8017f80 <Get_Build_Details+0xac>)
 8017f4e:	480d      	ldr	r0, [pc, #52]	; (8017f84 <Get_Build_Details+0xb0>)
 8017f50:	f00e fe4c 	bl	8026bec <iprintf>
	printf("_____________________________________________\n");
 8017f54:	480c      	ldr	r0, [pc, #48]	; (8017f88 <Get_Build_Details+0xb4>)
 8017f56:	f00e fee5 	bl	8026d24 <puts>

}
 8017f5a:	bf00      	nop
 8017f5c:	3738      	adds	r7, #56	; 0x38
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	bd80      	pop	{r7, pc}
 8017f62:	bf00      	nop
 8017f64:	0802c268 	.word	0x0802c268
 8017f68:	0802c298 	.word	0x0802c298
 8017f6c:	0802c2a4 	.word	0x0802c2a4
 8017f70:	0802c2b4 	.word	0x0802c2b4
 8017f74:	0802c2c0 	.word	0x0802c2c0
 8017f78:	2000bd1c 	.word	0x2000bd1c
 8017f7c:	0802c2d0 	.word	0x0802c2d0
 8017f80:	0802c2d4 	.word	0x0802c2d4
 8017f84:	0802c2ec 	.word	0x0802c2ec
 8017f88:	0802c308 	.word	0x0802c308

08017f8c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b084      	sub	sp, #16
 8017f90:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8017f92:	463b      	mov	r3, r7
 8017f94:	2200      	movs	r2, #0
 8017f96:	601a      	str	r2, [r3, #0]
 8017f98:	605a      	str	r2, [r3, #4]
 8017f9a:	609a      	str	r2, [r3, #8]
 8017f9c:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8017f9e:	f002 fe33 	bl	801ac08 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8017fa2:	2301      	movs	r3, #1
 8017fa4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8017faa:	2300      	movs	r3, #0
 8017fac:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8017fae:	231f      	movs	r3, #31
 8017fb0:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8017fb2:	2387      	movs	r3, #135	; 0x87
 8017fb4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8017fba:	2300      	movs	r3, #0
 8017fbc:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8017fbe:	2301      	movs	r3, #1
 8017fc0:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8017fc2:	2301      	movs	r3, #1
 8017fc4:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8017fca:	2300      	movs	r3, #0
 8017fcc:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8017fce:	463b      	mov	r3, r7
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	f002 fe51 	bl	801ac78 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8017fd6:	2004      	movs	r0, #4
 8017fd8:	f002 fe2e 	bl	801ac38 <HAL_MPU_Enable>

}
 8017fdc:	bf00      	nop
 8017fde:	3710      	adds	r7, #16
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	bd80      	pop	{r7, pc}

08017fe4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8017fe4:	b480      	push	{r7}
 8017fe6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8017fe8:	b672      	cpsid	i
}
 8017fea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8017fec:	e7fe      	b.n	8017fec <Error_Handler+0x8>
	...

08017ff0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8017ff4:	4b06      	ldr	r3, [pc, #24]	; (8018010 <MX_RNG_Init+0x20>)
 8017ff6:	4a07      	ldr	r2, [pc, #28]	; (8018014 <MX_RNG_Init+0x24>)
 8017ff8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8017ffa:	4805      	ldr	r0, [pc, #20]	; (8018010 <MX_RNG_Init+0x20>)
 8017ffc:	f006 fa1e 	bl	801e43c <HAL_RNG_Init>
 8018000:	4603      	mov	r3, r0
 8018002:	2b00      	cmp	r3, #0
 8018004:	d001      	beq.n	801800a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8018006:	f7ff ffed 	bl	8017fe4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 801800a:	bf00      	nop
 801800c:	bd80      	pop	{r7, pc}
 801800e:	bf00      	nop
 8018010:	2000bcf8 	.word	0x2000bcf8
 8018014:	50060800 	.word	0x50060800

08018018 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b0a8      	sub	sp, #160	; 0xa0
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018020:	f107 0310 	add.w	r3, r7, #16
 8018024:	2290      	movs	r2, #144	; 0x90
 8018026:	2100      	movs	r1, #0
 8018028:	4618      	mov	r0, r3
 801802a:	f00e fcf7 	bl	8026a1c <memset>
  if(rngHandle->Instance==RNG)
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	4a11      	ldr	r2, [pc, #68]	; (8018078 <HAL_RNG_MspInit+0x60>)
 8018034:	4293      	cmp	r3, r2
 8018036:	d11b      	bne.n	8018070 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8018038:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801803c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801803e:	2300      	movs	r3, #0
 8018040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018044:	f107 0310 	add.w	r3, r7, #16
 8018048:	4618      	mov	r0, r3
 801804a:	f005 fdcf 	bl	801dbec <HAL_RCCEx_PeriphCLKConfig>
 801804e:	4603      	mov	r3, r0
 8018050:	2b00      	cmp	r3, #0
 8018052:	d001      	beq.n	8018058 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8018054:	f7ff ffc6 	bl	8017fe4 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8018058:	4b08      	ldr	r3, [pc, #32]	; (801807c <HAL_RNG_MspInit+0x64>)
 801805a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801805c:	4a07      	ldr	r2, [pc, #28]	; (801807c <HAL_RNG_MspInit+0x64>)
 801805e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018062:	6353      	str	r3, [r2, #52]	; 0x34
 8018064:	4b05      	ldr	r3, [pc, #20]	; (801807c <HAL_RNG_MspInit+0x64>)
 8018066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801806c:	60fb      	str	r3, [r7, #12]
 801806e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8018070:	bf00      	nop
 8018072:	37a0      	adds	r7, #160	; 0xa0
 8018074:	46bd      	mov	sp, r7
 8018076:	bd80      	pop	{r7, pc}
 8018078:	50060800 	.word	0x50060800
 801807c:	40023800 	.word	0x40023800

08018080 <__NVIC_SystemReset>:
{
 8018080:	b480      	push	{r7}
 8018082:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8018084:	f3bf 8f4f 	dsb	sy
}
 8018088:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801808a:	4b06      	ldr	r3, [pc, #24]	; (80180a4 <__NVIC_SystemReset+0x24>)
 801808c:	68db      	ldr	r3, [r3, #12]
 801808e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8018092:	4904      	ldr	r1, [pc, #16]	; (80180a4 <__NVIC_SystemReset+0x24>)
 8018094:	4b04      	ldr	r3, [pc, #16]	; (80180a8 <__NVIC_SystemReset+0x28>)
 8018096:	4313      	orrs	r3, r2
 8018098:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801809a:	f3bf 8f4f 	dsb	sy
}
 801809e:	bf00      	nop
    __NOP();
 80180a0:	bf00      	nop
 80180a2:	e7fd      	b.n	80180a0 <__NVIC_SystemReset+0x20>
 80180a4:	e000ed00 	.word	0xe000ed00
 80180a8:	05fa0004 	.word	0x05fa0004

080180ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80180b0:	4b1b      	ldr	r3, [pc, #108]	; (8018120 <MX_SPI1_Init+0x74>)
 80180b2:	4a1c      	ldr	r2, [pc, #112]	; (8018124 <MX_SPI1_Init+0x78>)
 80180b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80180b6:	4b1a      	ldr	r3, [pc, #104]	; (8018120 <MX_SPI1_Init+0x74>)
 80180b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80180bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80180be:	4b18      	ldr	r3, [pc, #96]	; (8018120 <MX_SPI1_Init+0x74>)
 80180c0:	2200      	movs	r2, #0
 80180c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80180c4:	4b16      	ldr	r3, [pc, #88]	; (8018120 <MX_SPI1_Init+0x74>)
 80180c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80180ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80180cc:	4b14      	ldr	r3, [pc, #80]	; (8018120 <MX_SPI1_Init+0x74>)
 80180ce:	2200      	movs	r2, #0
 80180d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80180d2:	4b13      	ldr	r3, [pc, #76]	; (8018120 <MX_SPI1_Init+0x74>)
 80180d4:	2200      	movs	r2, #0
 80180d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80180d8:	4b11      	ldr	r3, [pc, #68]	; (8018120 <MX_SPI1_Init+0x74>)
 80180da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80180de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80180e0:	4b0f      	ldr	r3, [pc, #60]	; (8018120 <MX_SPI1_Init+0x74>)
 80180e2:	2208      	movs	r2, #8
 80180e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80180e6:	4b0e      	ldr	r3, [pc, #56]	; (8018120 <MX_SPI1_Init+0x74>)
 80180e8:	2200      	movs	r2, #0
 80180ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80180ec:	4b0c      	ldr	r3, [pc, #48]	; (8018120 <MX_SPI1_Init+0x74>)
 80180ee:	2200      	movs	r2, #0
 80180f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80180f2:	4b0b      	ldr	r3, [pc, #44]	; (8018120 <MX_SPI1_Init+0x74>)
 80180f4:	2200      	movs	r2, #0
 80180f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80180f8:	4b09      	ldr	r3, [pc, #36]	; (8018120 <MX_SPI1_Init+0x74>)
 80180fa:	2207      	movs	r2, #7
 80180fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80180fe:	4b08      	ldr	r3, [pc, #32]	; (8018120 <MX_SPI1_Init+0x74>)
 8018100:	2200      	movs	r2, #0
 8018102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8018104:	4b06      	ldr	r3, [pc, #24]	; (8018120 <MX_SPI1_Init+0x74>)
 8018106:	2208      	movs	r2, #8
 8018108:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801810a:	4805      	ldr	r0, [pc, #20]	; (8018120 <MX_SPI1_Init+0x74>)
 801810c:	f006 fa2b 	bl	801e566 <HAL_SPI_Init>
 8018110:	4603      	mov	r3, r0
 8018112:	2b00      	cmp	r3, #0
 8018114:	d001      	beq.n	801811a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8018116:	f7ff ff65 	bl	8017fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801811a:	bf00      	nop
 801811c:	bd80      	pop	{r7, pc}
 801811e:	bf00      	nop
 8018120:	2000bd20 	.word	0x2000bd20
 8018124:	40013000 	.word	0x40013000

08018128 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b08c      	sub	sp, #48	; 0x30
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018130:	f107 031c 	add.w	r3, r7, #28
 8018134:	2200      	movs	r2, #0
 8018136:	601a      	str	r2, [r3, #0]
 8018138:	605a      	str	r2, [r3, #4]
 801813a:	609a      	str	r2, [r3, #8]
 801813c:	60da      	str	r2, [r3, #12]
 801813e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	4a33      	ldr	r2, [pc, #204]	; (8018214 <HAL_SPI_MspInit+0xec>)
 8018146:	4293      	cmp	r3, r2
 8018148:	d160      	bne.n	801820c <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801814a:	4b33      	ldr	r3, [pc, #204]	; (8018218 <HAL_SPI_MspInit+0xf0>)
 801814c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801814e:	4a32      	ldr	r2, [pc, #200]	; (8018218 <HAL_SPI_MspInit+0xf0>)
 8018150:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8018154:	6453      	str	r3, [r2, #68]	; 0x44
 8018156:	4b30      	ldr	r3, [pc, #192]	; (8018218 <HAL_SPI_MspInit+0xf0>)
 8018158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801815a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801815e:	61bb      	str	r3, [r7, #24]
 8018160:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018162:	4b2d      	ldr	r3, [pc, #180]	; (8018218 <HAL_SPI_MspInit+0xf0>)
 8018164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018166:	4a2c      	ldr	r2, [pc, #176]	; (8018218 <HAL_SPI_MspInit+0xf0>)
 8018168:	f043 0301 	orr.w	r3, r3, #1
 801816c:	6313      	str	r3, [r2, #48]	; 0x30
 801816e:	4b2a      	ldr	r3, [pc, #168]	; (8018218 <HAL_SPI_MspInit+0xf0>)
 8018170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018172:	f003 0301 	and.w	r3, r3, #1
 8018176:	617b      	str	r3, [r7, #20]
 8018178:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801817a:	4b27      	ldr	r3, [pc, #156]	; (8018218 <HAL_SPI_MspInit+0xf0>)
 801817c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801817e:	4a26      	ldr	r2, [pc, #152]	; (8018218 <HAL_SPI_MspInit+0xf0>)
 8018180:	f043 0308 	orr.w	r3, r3, #8
 8018184:	6313      	str	r3, [r2, #48]	; 0x30
 8018186:	4b24      	ldr	r3, [pc, #144]	; (8018218 <HAL_SPI_MspInit+0xf0>)
 8018188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801818a:	f003 0308 	and.w	r3, r3, #8
 801818e:	613b      	str	r3, [r7, #16]
 8018190:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8018192:	4b21      	ldr	r3, [pc, #132]	; (8018218 <HAL_SPI_MspInit+0xf0>)
 8018194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018196:	4a20      	ldr	r2, [pc, #128]	; (8018218 <HAL_SPI_MspInit+0xf0>)
 8018198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801819c:	6313      	str	r3, [r2, #48]	; 0x30
 801819e:	4b1e      	ldr	r3, [pc, #120]	; (8018218 <HAL_SPI_MspInit+0xf0>)
 80181a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80181a6:	60fb      	str	r3, [r7, #12]
 80181a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80181aa:	2320      	movs	r3, #32
 80181ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80181ae:	2302      	movs	r3, #2
 80181b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80181b2:	2300      	movs	r3, #0
 80181b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80181b6:	2303      	movs	r3, #3
 80181b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80181ba:	2305      	movs	r3, #5
 80181bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80181be:	f107 031c 	add.w	r3, r7, #28
 80181c2:	4619      	mov	r1, r3
 80181c4:	4815      	ldr	r0, [pc, #84]	; (801821c <HAL_SPI_MspInit+0xf4>)
 80181c6:	f004 f813 	bl	801c1f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 80181ca:	2380      	movs	r3, #128	; 0x80
 80181cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80181ce:	2302      	movs	r3, #2
 80181d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80181d2:	2300      	movs	r3, #0
 80181d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80181d6:	2303      	movs	r3, #3
 80181d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80181da:	2305      	movs	r3, #5
 80181dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 80181de:	f107 031c 	add.w	r3, r7, #28
 80181e2:	4619      	mov	r1, r3
 80181e4:	480e      	ldr	r0, [pc, #56]	; (8018220 <HAL_SPI_MspInit+0xf8>)
 80181e6:	f004 f803 	bl	801c1f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80181ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80181ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80181f0:	2302      	movs	r3, #2
 80181f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80181f4:	2300      	movs	r3, #0
 80181f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80181f8:	2303      	movs	r3, #3
 80181fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80181fc:	2305      	movs	r3, #5
 80181fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8018200:	f107 031c 	add.w	r3, r7, #28
 8018204:	4619      	mov	r1, r3
 8018206:	4807      	ldr	r0, [pc, #28]	; (8018224 <HAL_SPI_MspInit+0xfc>)
 8018208:	f003 fff2 	bl	801c1f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 801820c:	bf00      	nop
 801820e:	3730      	adds	r7, #48	; 0x30
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}
 8018214:	40013000 	.word	0x40013000
 8018218:	40023800 	.word	0x40023800
 801821c:	40020000 	.word	0x40020000
 8018220:	40020c00 	.word	0x40020c00
 8018224:	40021800 	.word	0x40021800

08018228 <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b086      	sub	sp, #24
 801822c:	af00      	add	r7, sp, #0
 801822e:	60b9      	str	r1, [r7, #8]
 8018230:	607b      	str	r3, [r7, #4]
 8018232:	4603      	mov	r3, r0
 8018234:	73fb      	strb	r3, [r7, #15]
 8018236:	4613      	mov	r3, r2
 8018238:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 801823a:	2300      	movs	r3, #0
 801823c:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 801823e:	7bfb      	ldrb	r3, [r7, #15]
 8018240:	3b01      	subs	r3, #1
 8018242:	2b03      	cmp	r3, #3
 8018244:	d828      	bhi.n	8018298 <SPI_WriteInFlash+0x70>
 8018246:	a201      	add	r2, pc, #4	; (adr r2, 801824c <SPI_WriteInFlash+0x24>)
 8018248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801824c:	0801825d 	.word	0x0801825d
 8018250:	0801826d 	.word	0x0801826d
 8018254:	0801827b 	.word	0x0801827b
 8018258:	08018289 	.word	0x08018289
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 801825c:	4b75      	ldr	r3, [pc, #468]	; (8018434 <SPI_WriteInFlash+0x20c>)
 801825e:	4a76      	ldr	r2, [pc, #472]	; (8018438 <SPI_WriteInFlash+0x210>)
 8018260:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8018262:	4b76      	ldr	r3, [pc, #472]	; (801843c <SPI_WriteInFlash+0x214>)
 8018264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018268:	601a      	str	r2, [r3, #0]
		break;
 801826a:	e018      	b.n	801829e <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 801826c:	4b71      	ldr	r3, [pc, #452]	; (8018434 <SPI_WriteInFlash+0x20c>)
 801826e:	4a74      	ldr	r2, [pc, #464]	; (8018440 <SPI_WriteInFlash+0x218>)
 8018270:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8018272:	4b72      	ldr	r3, [pc, #456]	; (801843c <SPI_WriteInFlash+0x214>)
 8018274:	2220      	movs	r2, #32
 8018276:	601a      	str	r2, [r3, #0]
		break;
 8018278:	e011      	b.n	801829e <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 801827a:	4b6e      	ldr	r3, [pc, #440]	; (8018434 <SPI_WriteInFlash+0x20c>)
 801827c:	4a70      	ldr	r2, [pc, #448]	; (8018440 <SPI_WriteInFlash+0x218>)
 801827e:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8018280:	4b6e      	ldr	r3, [pc, #440]	; (801843c <SPI_WriteInFlash+0x214>)
 8018282:	2240      	movs	r2, #64	; 0x40
 8018284:	601a      	str	r2, [r3, #0]
		break;
 8018286:	e00a      	b.n	801829e <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 8018288:	4b6a      	ldr	r3, [pc, #424]	; (8018434 <SPI_WriteInFlash+0x20c>)
 801828a:	4a6e      	ldr	r2, [pc, #440]	; (8018444 <SPI_WriteInFlash+0x21c>)
 801828c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 801828e:	4b6b      	ldr	r3, [pc, #428]	; (801843c <SPI_WriteInFlash+0x214>)
 8018290:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8018294:	601a      	str	r2, [r3, #0]
		break;
 8018296:	e002      	b.n	801829e <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 8018298:	486b      	ldr	r0, [pc, #428]	; (8018448 <SPI_WriteInFlash+0x220>)
 801829a:	f00e fd43 	bl	8026d24 <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801829e:	4b65      	ldr	r3, [pc, #404]	; (8018434 <SPI_WriteInFlash+0x20c>)
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	4a66      	ldr	r2, [pc, #408]	; (801843c <SPI_WriteInFlash+0x214>)
 80182a4:	6812      	ldr	r2, [r2, #0]
 80182a6:	b291      	uxth	r1, r2
 80182a8:	2201      	movs	r2, #1
 80182aa:	4618      	mov	r0, r3
 80182ac:	f004 f964 	bl	801c578 <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80182b0:	4b60      	ldr	r3, [pc, #384]	; (8018434 <SPI_WriteInFlash+0x20c>)
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	4a61      	ldr	r2, [pc, #388]	; (801843c <SPI_WriteInFlash+0x214>)
 80182b6:	6812      	ldr	r2, [r2, #0]
 80182b8:	b291      	uxth	r1, r2
 80182ba:	2200      	movs	r2, #0
 80182bc:	4618      	mov	r0, r3
 80182be:	f004 f95b 	bl	801c578 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 80182c2:	2364      	movs	r3, #100	; 0x64
 80182c4:	2201      	movs	r2, #1
 80182c6:	4961      	ldr	r1, [pc, #388]	; (801844c <SPI_WriteInFlash+0x224>)
 80182c8:	4861      	ldr	r0, [pc, #388]	; (8018450 <SPI_WriteInFlash+0x228>)
 80182ca:	f006 f9f7 	bl	801e6bc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80182ce:	4b59      	ldr	r3, [pc, #356]	; (8018434 <SPI_WriteInFlash+0x20c>)
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	4a5a      	ldr	r2, [pc, #360]	; (801843c <SPI_WriteInFlash+0x214>)
 80182d4:	6812      	ldr	r2, [r2, #0]
 80182d6:	b291      	uxth	r1, r2
 80182d8:	2201      	movs	r2, #1
 80182da:	4618      	mov	r0, r3
 80182dc:	f004 f94c 	bl	801c578 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80182e0:	4b54      	ldr	r3, [pc, #336]	; (8018434 <SPI_WriteInFlash+0x20c>)
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	4a55      	ldr	r2, [pc, #340]	; (801843c <SPI_WriteInFlash+0x214>)
 80182e6:	6812      	ldr	r2, [r2, #0]
 80182e8:	b291      	uxth	r1, r2
 80182ea:	2200      	movs	r2, #0
 80182ec:	4618      	mov	r0, r3
 80182ee:	f004 f943 	bl	801c578 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 80182f2:	2364      	movs	r3, #100	; 0x64
 80182f4:	2201      	movs	r2, #1
 80182f6:	4957      	ldr	r1, [pc, #348]	; (8018454 <SPI_WriteInFlash+0x22c>)
 80182f8:	4855      	ldr	r0, [pc, #340]	; (8018450 <SPI_WriteInFlash+0x228>)
 80182fa:	f006 f9df 	bl	801e6bc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80182fe:	2364      	movs	r3, #100	; 0x64
 8018300:	2201      	movs	r2, #1
 8018302:	4955      	ldr	r1, [pc, #340]	; (8018458 <SPI_WriteInFlash+0x230>)
 8018304:	4852      	ldr	r0, [pc, #328]	; (8018450 <SPI_WriteInFlash+0x228>)
 8018306:	f006 fb47 	bl	801e998 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801830a:	4b4a      	ldr	r3, [pc, #296]	; (8018434 <SPI_WriteInFlash+0x20c>)
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	4a4b      	ldr	r2, [pc, #300]	; (801843c <SPI_WriteInFlash+0x214>)
 8018310:	6812      	ldr	r2, [r2, #0]
 8018312:	b291      	uxth	r1, r2
 8018314:	2201      	movs	r2, #1
 8018316:	4618      	mov	r0, r3
 8018318:	f004 f92e 	bl	801c578 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 801831c:	4b4e      	ldr	r3, [pc, #312]	; (8018458 <SPI_WriteInFlash+0x230>)
 801831e:	781b      	ldrb	r3, [r3, #0]
 8018320:	f003 0302 	and.w	r3, r3, #2
 8018324:	2b00      	cmp	r3, #0
 8018326:	d103      	bne.n	8018330 <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 8018328:	484c      	ldr	r0, [pc, #304]	; (801845c <SPI_WriteInFlash+0x234>)
 801832a:	f00e fc5f 	bl	8026bec <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801832e:	e7d7      	b.n	80182e0 <SPI_WriteInFlash+0xb8>
			break;
 8018330:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8018332:	4b40      	ldr	r3, [pc, #256]	; (8018434 <SPI_WriteInFlash+0x20c>)
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	4a41      	ldr	r2, [pc, #260]	; (801843c <SPI_WriteInFlash+0x214>)
 8018338:	6812      	ldr	r2, [r2, #0]
 801833a:	b291      	uxth	r1, r2
 801833c:	2200      	movs	r2, #0
 801833e:	4618      	mov	r0, r3
 8018340:	f004 f91a 	bl	801c578 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 8018344:	2202      	movs	r2, #2
 8018346:	4b46      	ldr	r3, [pc, #280]	; (8018460 <SPI_WriteInFlash+0x238>)
 8018348:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 801834a:	68bb      	ldr	r3, [r7, #8]
 801834c:	0c1b      	lsrs	r3, r3, #16
 801834e:	b2da      	uxtb	r2, r3
 8018350:	4b43      	ldr	r3, [pc, #268]	; (8018460 <SPI_WriteInFlash+0x238>)
 8018352:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8018354:	68bb      	ldr	r3, [r7, #8]
 8018356:	0a1b      	lsrs	r3, r3, #8
 8018358:	b2da      	uxtb	r2, r3
 801835a:	4b41      	ldr	r3, [pc, #260]	; (8018460 <SPI_WriteInFlash+0x238>)
 801835c:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 801835e:	68bb      	ldr	r3, [r7, #8]
 8018360:	b2da      	uxtb	r2, r3
 8018362:	4b3f      	ldr	r3, [pc, #252]	; (8018460 <SPI_WriteInFlash+0x238>)
 8018364:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8018366:	2364      	movs	r3, #100	; 0x64
 8018368:	2204      	movs	r2, #4
 801836a:	493d      	ldr	r1, [pc, #244]	; (8018460 <SPI_WriteInFlash+0x238>)
 801836c:	4838      	ldr	r0, [pc, #224]	; (8018450 <SPI_WriteInFlash+0x228>)
 801836e:	f006 f9a5 	bl	801e6bc <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 8018372:	89ba      	ldrh	r2, [r7, #12]
 8018374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018378:	6879      	ldr	r1, [r7, #4]
 801837a:	4835      	ldr	r0, [pc, #212]	; (8018450 <SPI_WriteInFlash+0x228>)
 801837c:	f006 f99e 	bl	801e6bc <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8018380:	4b2c      	ldr	r3, [pc, #176]	; (8018434 <SPI_WriteInFlash+0x20c>)
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	4a2d      	ldr	r2, [pc, #180]	; (801843c <SPI_WriteInFlash+0x214>)
 8018386:	6812      	ldr	r2, [r2, #0]
 8018388:	b291      	uxth	r1, r2
 801838a:	2201      	movs	r2, #1
 801838c:	4618      	mov	r0, r3
 801838e:	f004 f8f3 	bl	801c578 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8018392:	4b28      	ldr	r3, [pc, #160]	; (8018434 <SPI_WriteInFlash+0x20c>)
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	4a29      	ldr	r2, [pc, #164]	; (801843c <SPI_WriteInFlash+0x214>)
 8018398:	6812      	ldr	r2, [r2, #0]
 801839a:	b291      	uxth	r1, r2
 801839c:	2200      	movs	r2, #0
 801839e:	4618      	mov	r0, r3
 80183a0:	f004 f8ea 	bl	801c578 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 80183a4:	2205      	movs	r2, #5
 80183a6:	4b2e      	ldr	r3, [pc, #184]	; (8018460 <SPI_WriteInFlash+0x238>)
 80183a8:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 80183aa:	2364      	movs	r3, #100	; 0x64
 80183ac:	2201      	movs	r2, #1
 80183ae:	492c      	ldr	r1, [pc, #176]	; (8018460 <SPI_WriteInFlash+0x238>)
 80183b0:	4827      	ldr	r0, [pc, #156]	; (8018450 <SPI_WriteInFlash+0x228>)
 80183b2:	f006 f983 	bl	801e6bc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80183b6:	2364      	movs	r3, #100	; 0x64
 80183b8:	2201      	movs	r2, #1
 80183ba:	4927      	ldr	r1, [pc, #156]	; (8018458 <SPI_WriteInFlash+0x230>)
 80183bc:	4824      	ldr	r0, [pc, #144]	; (8018450 <SPI_WriteInFlash+0x228>)
 80183be:	f006 faeb 	bl	801e998 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80183c2:	4b1c      	ldr	r3, [pc, #112]	; (8018434 <SPI_WriteInFlash+0x20c>)
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	4a1d      	ldr	r2, [pc, #116]	; (801843c <SPI_WriteInFlash+0x214>)
 80183c8:	6812      	ldr	r2, [r2, #0]
 80183ca:	b291      	uxth	r1, r2
 80183cc:	2201      	movs	r2, #1
 80183ce:	4618      	mov	r0, r3
 80183d0:	f004 f8d2 	bl	801c578 <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 80183d4:	4b20      	ldr	r3, [pc, #128]	; (8018458 <SPI_WriteInFlash+0x230>)
 80183d6:	781b      	ldrb	r3, [r3, #0]
 80183d8:	f003 0301 	and.w	r3, r3, #1
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d1d8      	bne.n	8018392 <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 80183e0:	2301      	movs	r3, #1
 80183e2:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 80183e4:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80183e6:	4b13      	ldr	r3, [pc, #76]	; (8018434 <SPI_WriteInFlash+0x20c>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	4a14      	ldr	r2, [pc, #80]	; (801843c <SPI_WriteInFlash+0x214>)
 80183ec:	6812      	ldr	r2, [r2, #0]
 80183ee:	b291      	uxth	r1, r2
 80183f0:	2200      	movs	r2, #0
 80183f2:	4618      	mov	r0, r3
 80183f4:	f004 f8c0 	bl	801c578 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 80183f8:	2204      	movs	r2, #4
 80183fa:	4b19      	ldr	r3, [pc, #100]	; (8018460 <SPI_WriteInFlash+0x238>)
 80183fc:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 80183fe:	2364      	movs	r3, #100	; 0x64
 8018400:	2201      	movs	r2, #1
 8018402:	4917      	ldr	r1, [pc, #92]	; (8018460 <SPI_WriteInFlash+0x238>)
 8018404:	4812      	ldr	r0, [pc, #72]	; (8018450 <SPI_WriteInFlash+0x228>)
 8018406:	f006 f959 	bl	801e6bc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 801840a:	2364      	movs	r3, #100	; 0x64
 801840c:	2201      	movs	r2, #1
 801840e:	4912      	ldr	r1, [pc, #72]	; (8018458 <SPI_WriteInFlash+0x230>)
 8018410:	480f      	ldr	r0, [pc, #60]	; (8018450 <SPI_WriteInFlash+0x228>)
 8018412:	f006 fac1 	bl	801e998 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8018416:	4b07      	ldr	r3, [pc, #28]	; (8018434 <SPI_WriteInFlash+0x20c>)
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	4a08      	ldr	r2, [pc, #32]	; (801843c <SPI_WriteInFlash+0x214>)
 801841c:	6812      	ldr	r2, [r2, #0]
 801841e:	b291      	uxth	r1, r2
 8018420:	2201      	movs	r2, #1
 8018422:	4618      	mov	r0, r3
 8018424:	f004 f8a8 	bl	801c578 <HAL_GPIO_WritePin>

	return Return_Value;
 8018428:	7dfb      	ldrb	r3, [r7, #23]
}
 801842a:	4618      	mov	r0, r3
 801842c:	3718      	adds	r7, #24
 801842e:	46bd      	mov	sp, r7
 8018430:	bd80      	pop	{r7, pc}
 8018432:	bf00      	nop
 8018434:	2000bd14 	.word	0x2000bd14
 8018438:	40021800 	.word	0x40021800
 801843c:	2000bd18 	.word	0x2000bd18
 8018440:	40020c00 	.word	0x40020c00
 8018444:	40021000 	.word	0x40021000
 8018448:	0802c338 	.word	0x0802c338
 801844c:	0802dfe0 	.word	0x0802dfe0
 8018450:	2000bd20 	.word	0x2000bd20
 8018454:	0802dfe1 	.word	0x0802dfe1
 8018458:	2000bd10 	.word	0x2000bd10
 801845c:	0802c350 	.word	0x0802c350
 8018460:	2000bd0c 	.word	0x2000bd0c

08018464 <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 8018464:	b580      	push	{r7, lr}
 8018466:	b084      	sub	sp, #16
 8018468:	af00      	add	r7, sp, #0
 801846a:	4603      	mov	r3, r0
 801846c:	6039      	str	r1, [r7, #0]
 801846e:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 8018470:	2300      	movs	r3, #0
 8018472:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 8018474:	79fb      	ldrb	r3, [r7, #7]
 8018476:	3b01      	subs	r3, #1
 8018478:	2b03      	cmp	r3, #3
 801847a:	d829      	bhi.n	80184d0 <SPI_MemoryEraseBySector+0x6c>
 801847c:	a201      	add	r2, pc, #4	; (adr r2, 8018484 <SPI_MemoryEraseBySector+0x20>)
 801847e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018482:	bf00      	nop
 8018484:	08018495 	.word	0x08018495
 8018488:	080184a5 	.word	0x080184a5
 801848c:	080184b3 	.word	0x080184b3
 8018490:	080184c1 	.word	0x080184c1
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8018494:	4b6d      	ldr	r3, [pc, #436]	; (801864c <SPI_MemoryEraseBySector+0x1e8>)
 8018496:	4a6e      	ldr	r2, [pc, #440]	; (8018650 <SPI_MemoryEraseBySector+0x1ec>)
 8018498:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 801849a:	4b6e      	ldr	r3, [pc, #440]	; (8018654 <SPI_MemoryEraseBySector+0x1f0>)
 801849c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80184a0:	601a      	str	r2, [r3, #0]
		break;
 80184a2:	e018      	b.n	80184d6 <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 80184a4:	4b69      	ldr	r3, [pc, #420]	; (801864c <SPI_MemoryEraseBySector+0x1e8>)
 80184a6:	4a6c      	ldr	r2, [pc, #432]	; (8018658 <SPI_MemoryEraseBySector+0x1f4>)
 80184a8:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 80184aa:	4b6a      	ldr	r3, [pc, #424]	; (8018654 <SPI_MemoryEraseBySector+0x1f0>)
 80184ac:	2220      	movs	r2, #32
 80184ae:	601a      	str	r2, [r3, #0]
		break;
 80184b0:	e011      	b.n	80184d6 <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 80184b2:	4b66      	ldr	r3, [pc, #408]	; (801864c <SPI_MemoryEraseBySector+0x1e8>)
 80184b4:	4a68      	ldr	r2, [pc, #416]	; (8018658 <SPI_MemoryEraseBySector+0x1f4>)
 80184b6:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 80184b8:	4b66      	ldr	r3, [pc, #408]	; (8018654 <SPI_MemoryEraseBySector+0x1f0>)
 80184ba:	2240      	movs	r2, #64	; 0x40
 80184bc:	601a      	str	r2, [r3, #0]
		break;
 80184be:	e00a      	b.n	80184d6 <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 80184c0:	4b62      	ldr	r3, [pc, #392]	; (801864c <SPI_MemoryEraseBySector+0x1e8>)
 80184c2:	4a66      	ldr	r2, [pc, #408]	; (801865c <SPI_MemoryEraseBySector+0x1f8>)
 80184c4:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 80184c6:	4b63      	ldr	r3, [pc, #396]	; (8018654 <SPI_MemoryEraseBySector+0x1f0>)
 80184c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80184cc:	601a      	str	r2, [r3, #0]
		break;
 80184ce:	e002      	b.n	80184d6 <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 80184d0:	4863      	ldr	r0, [pc, #396]	; (8018660 <SPI_MemoryEraseBySector+0x1fc>)
 80184d2:	f00e fc27 	bl	8026d24 <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80184d6:	4b5d      	ldr	r3, [pc, #372]	; (801864c <SPI_MemoryEraseBySector+0x1e8>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	4a5e      	ldr	r2, [pc, #376]	; (8018654 <SPI_MemoryEraseBySector+0x1f0>)
 80184dc:	6812      	ldr	r2, [r2, #0]
 80184de:	b291      	uxth	r1, r2
 80184e0:	2200      	movs	r2, #0
 80184e2:	4618      	mov	r0, r3
 80184e4:	f004 f848 	bl	801c578 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 80184e8:	2364      	movs	r3, #100	; 0x64
 80184ea:	2201      	movs	r2, #1
 80184ec:	495d      	ldr	r1, [pc, #372]	; (8018664 <SPI_MemoryEraseBySector+0x200>)
 80184ee:	485e      	ldr	r0, [pc, #376]	; (8018668 <SPI_MemoryEraseBySector+0x204>)
 80184f0:	f006 f8e4 	bl	801e6bc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80184f4:	4b55      	ldr	r3, [pc, #340]	; (801864c <SPI_MemoryEraseBySector+0x1e8>)
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	4a56      	ldr	r2, [pc, #344]	; (8018654 <SPI_MemoryEraseBySector+0x1f0>)
 80184fa:	6812      	ldr	r2, [r2, #0]
 80184fc:	b291      	uxth	r1, r2
 80184fe:	2201      	movs	r2, #1
 8018500:	4618      	mov	r0, r3
 8018502:	f004 f839 	bl	801c578 <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8018506:	4b51      	ldr	r3, [pc, #324]	; (801864c <SPI_MemoryEraseBySector+0x1e8>)
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	4a52      	ldr	r2, [pc, #328]	; (8018654 <SPI_MemoryEraseBySector+0x1f0>)
 801850c:	6812      	ldr	r2, [r2, #0]
 801850e:	b291      	uxth	r1, r2
 8018510:	2200      	movs	r2, #0
 8018512:	4618      	mov	r0, r3
 8018514:	f004 f830 	bl	801c578 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 8018518:	2364      	movs	r3, #100	; 0x64
 801851a:	2201      	movs	r2, #1
 801851c:	4953      	ldr	r1, [pc, #332]	; (801866c <SPI_MemoryEraseBySector+0x208>)
 801851e:	4852      	ldr	r0, [pc, #328]	; (8018668 <SPI_MemoryEraseBySector+0x204>)
 8018520:	f006 f8cc 	bl	801e6bc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8018524:	2364      	movs	r3, #100	; 0x64
 8018526:	2201      	movs	r2, #1
 8018528:	4951      	ldr	r1, [pc, #324]	; (8018670 <SPI_MemoryEraseBySector+0x20c>)
 801852a:	484f      	ldr	r0, [pc, #316]	; (8018668 <SPI_MemoryEraseBySector+0x204>)
 801852c:	f006 fa34 	bl	801e998 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8018530:	4b46      	ldr	r3, [pc, #280]	; (801864c <SPI_MemoryEraseBySector+0x1e8>)
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	4a47      	ldr	r2, [pc, #284]	; (8018654 <SPI_MemoryEraseBySector+0x1f0>)
 8018536:	6812      	ldr	r2, [r2, #0]
 8018538:	b291      	uxth	r1, r2
 801853a:	2201      	movs	r2, #1
 801853c:	4618      	mov	r0, r3
 801853e:	f004 f81b 	bl	801c578 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8018542:	4b4b      	ldr	r3, [pc, #300]	; (8018670 <SPI_MemoryEraseBySector+0x20c>)
 8018544:	781b      	ldrb	r3, [r3, #0]
 8018546:	f003 0302 	and.w	r3, r3, #2
 801854a:	2b00      	cmp	r3, #0
 801854c:	d103      	bne.n	8018556 <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 801854e:	4849      	ldr	r0, [pc, #292]	; (8018674 <SPI_MemoryEraseBySector+0x210>)
 8018550:	f00e fb4c 	bl	8026bec <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8018554:	e7d7      	b.n	8018506 <SPI_MemoryEraseBySector+0xa2>
			break;
 8018556:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8018558:	4b3c      	ldr	r3, [pc, #240]	; (801864c <SPI_MemoryEraseBySector+0x1e8>)
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	4a3d      	ldr	r2, [pc, #244]	; (8018654 <SPI_MemoryEraseBySector+0x1f0>)
 801855e:	6812      	ldr	r2, [r2, #0]
 8018560:	b291      	uxth	r1, r2
 8018562:	2200      	movs	r2, #0
 8018564:	4618      	mov	r0, r3
 8018566:	f004 f807 	bl	801c578 <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 801856a:	4b43      	ldr	r3, [pc, #268]	; (8018678 <SPI_MemoryEraseBySector+0x214>)
 801856c:	2220      	movs	r2, #32
 801856e:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8018570:	683b      	ldr	r3, [r7, #0]
 8018572:	0c1b      	lsrs	r3, r3, #16
 8018574:	b2da      	uxtb	r2, r3
 8018576:	4b40      	ldr	r3, [pc, #256]	; (8018678 <SPI_MemoryEraseBySector+0x214>)
 8018578:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 801857a:	683b      	ldr	r3, [r7, #0]
 801857c:	0a1b      	lsrs	r3, r3, #8
 801857e:	b2da      	uxtb	r2, r3
 8018580:	4b3d      	ldr	r3, [pc, #244]	; (8018678 <SPI_MemoryEraseBySector+0x214>)
 8018582:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8018584:	683b      	ldr	r3, [r7, #0]
 8018586:	b2da      	uxtb	r2, r3
 8018588:	4b3b      	ldr	r3, [pc, #236]	; (8018678 <SPI_MemoryEraseBySector+0x214>)
 801858a:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 801858c:	2364      	movs	r3, #100	; 0x64
 801858e:	2204      	movs	r2, #4
 8018590:	4939      	ldr	r1, [pc, #228]	; (8018678 <SPI_MemoryEraseBySector+0x214>)
 8018592:	4835      	ldr	r0, [pc, #212]	; (8018668 <SPI_MemoryEraseBySector+0x204>)
 8018594:	f006 f892 	bl	801e6bc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8018598:	4b2c      	ldr	r3, [pc, #176]	; (801864c <SPI_MemoryEraseBySector+0x1e8>)
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	4a2d      	ldr	r2, [pc, #180]	; (8018654 <SPI_MemoryEraseBySector+0x1f0>)
 801859e:	6812      	ldr	r2, [r2, #0]
 80185a0:	b291      	uxth	r1, r2
 80185a2:	2201      	movs	r2, #1
 80185a4:	4618      	mov	r0, r3
 80185a6:	f003 ffe7 	bl	801c578 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80185aa:	4b28      	ldr	r3, [pc, #160]	; (801864c <SPI_MemoryEraseBySector+0x1e8>)
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	4a29      	ldr	r2, [pc, #164]	; (8018654 <SPI_MemoryEraseBySector+0x1f0>)
 80185b0:	6812      	ldr	r2, [r2, #0]
 80185b2:	b291      	uxth	r1, r2
 80185b4:	2200      	movs	r2, #0
 80185b6:	4618      	mov	r0, r3
 80185b8:	f003 ffde 	bl	801c578 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 80185bc:	2205      	movs	r2, #5
 80185be:	4b2e      	ldr	r3, [pc, #184]	; (8018678 <SPI_MemoryEraseBySector+0x214>)
 80185c0:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 80185c2:	2364      	movs	r3, #100	; 0x64
 80185c4:	2201      	movs	r2, #1
 80185c6:	492c      	ldr	r1, [pc, #176]	; (8018678 <SPI_MemoryEraseBySector+0x214>)
 80185c8:	4827      	ldr	r0, [pc, #156]	; (8018668 <SPI_MemoryEraseBySector+0x204>)
 80185ca:	f006 f877 	bl	801e6bc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80185ce:	2364      	movs	r3, #100	; 0x64
 80185d0:	2201      	movs	r2, #1
 80185d2:	4927      	ldr	r1, [pc, #156]	; (8018670 <SPI_MemoryEraseBySector+0x20c>)
 80185d4:	4824      	ldr	r0, [pc, #144]	; (8018668 <SPI_MemoryEraseBySector+0x204>)
 80185d6:	f006 f9df 	bl	801e998 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80185da:	4b1c      	ldr	r3, [pc, #112]	; (801864c <SPI_MemoryEraseBySector+0x1e8>)
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	4a1d      	ldr	r2, [pc, #116]	; (8018654 <SPI_MemoryEraseBySector+0x1f0>)
 80185e0:	6812      	ldr	r2, [r2, #0]
 80185e2:	b291      	uxth	r1, r2
 80185e4:	2201      	movs	r2, #1
 80185e6:	4618      	mov	r0, r3
 80185e8:	f003 ffc6 	bl	801c578 <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 80185ec:	4b20      	ldr	r3, [pc, #128]	; (8018670 <SPI_MemoryEraseBySector+0x20c>)
 80185ee:	781b      	ldrb	r3, [r3, #0]
 80185f0:	f003 0301 	and.w	r3, r3, #1
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d1d8      	bne.n	80185aa <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 80185f8:	2301      	movs	r3, #1
 80185fa:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 80185fc:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80185fe:	4b13      	ldr	r3, [pc, #76]	; (801864c <SPI_MemoryEraseBySector+0x1e8>)
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	4a14      	ldr	r2, [pc, #80]	; (8018654 <SPI_MemoryEraseBySector+0x1f0>)
 8018604:	6812      	ldr	r2, [r2, #0]
 8018606:	b291      	uxth	r1, r2
 8018608:	2200      	movs	r2, #0
 801860a:	4618      	mov	r0, r3
 801860c:	f003 ffb4 	bl	801c578 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8018610:	2204      	movs	r2, #4
 8018612:	4b19      	ldr	r3, [pc, #100]	; (8018678 <SPI_MemoryEraseBySector+0x214>)
 8018614:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8018616:	2364      	movs	r3, #100	; 0x64
 8018618:	2201      	movs	r2, #1
 801861a:	4917      	ldr	r1, [pc, #92]	; (8018678 <SPI_MemoryEraseBySector+0x214>)
 801861c:	4812      	ldr	r0, [pc, #72]	; (8018668 <SPI_MemoryEraseBySector+0x204>)
 801861e:	f006 f84d 	bl	801e6bc <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8018622:	2364      	movs	r3, #100	; 0x64
 8018624:	2201      	movs	r2, #1
 8018626:	4912      	ldr	r1, [pc, #72]	; (8018670 <SPI_MemoryEraseBySector+0x20c>)
 8018628:	480f      	ldr	r0, [pc, #60]	; (8018668 <SPI_MemoryEraseBySector+0x204>)
 801862a:	f006 f9b5 	bl	801e998 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801862e:	4b07      	ldr	r3, [pc, #28]	; (801864c <SPI_MemoryEraseBySector+0x1e8>)
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	4a08      	ldr	r2, [pc, #32]	; (8018654 <SPI_MemoryEraseBySector+0x1f0>)
 8018634:	6812      	ldr	r2, [r2, #0]
 8018636:	b291      	uxth	r1, r2
 8018638:	2201      	movs	r2, #1
 801863a:	4618      	mov	r0, r3
 801863c:	f003 ff9c 	bl	801c578 <HAL_GPIO_WritePin>
	return Flash_Erase;
 8018640:	68fb      	ldr	r3, [r7, #12]

}
 8018642:	4618      	mov	r0, r3
 8018644:	3710      	adds	r7, #16
 8018646:	46bd      	mov	sp, r7
 8018648:	bd80      	pop	{r7, pc}
 801864a:	bf00      	nop
 801864c:	2000bd14 	.word	0x2000bd14
 8018650:	40021800 	.word	0x40021800
 8018654:	2000bd18 	.word	0x2000bd18
 8018658:	40020c00 	.word	0x40020c00
 801865c:	40021000 	.word	0x40021000
 8018660:	0802c338 	.word	0x0802c338
 8018664:	0802dfe0 	.word	0x0802dfe0
 8018668:	2000bd20 	.word	0x2000bd20
 801866c:	0802dfe1 	.word	0x0802dfe1
 8018670:	2000bd10 	.word	0x2000bd10
 8018674:	0802c374 	.word	0x0802c374
 8018678:	2000bd0c 	.word	0x2000bd0c

0801867c <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b084      	sub	sp, #16
 8018680:	af00      	add	r7, sp, #0
 8018682:	60b9      	str	r1, [r7, #8]
 8018684:	607b      	str	r3, [r7, #4]
 8018686:	4603      	mov	r3, r0
 8018688:	73fb      	strb	r3, [r7, #15]
 801868a:	4613      	mov	r3, r2
 801868c:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 801868e:	7bfb      	ldrb	r3, [r7, #15]
 8018690:	3b01      	subs	r3, #1
 8018692:	2b03      	cmp	r3, #3
 8018694:	d828      	bhi.n	80186e8 <SPI_ReadFromFlash+0x6c>
 8018696:	a201      	add	r2, pc, #4	; (adr r2, 801869c <SPI_ReadFromFlash+0x20>)
 8018698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801869c:	080186ad 	.word	0x080186ad
 80186a0:	080186bd 	.word	0x080186bd
 80186a4:	080186cb 	.word	0x080186cb
 80186a8:	080186d9 	.word	0x080186d9
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 80186ac:	4b2d      	ldr	r3, [pc, #180]	; (8018764 <SPI_ReadFromFlash+0xe8>)
 80186ae:	4a2e      	ldr	r2, [pc, #184]	; (8018768 <SPI_ReadFromFlash+0xec>)
 80186b0:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 80186b2:	4b2e      	ldr	r3, [pc, #184]	; (801876c <SPI_ReadFromFlash+0xf0>)
 80186b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80186b8:	601a      	str	r2, [r3, #0]
		break;
 80186ba:	e018      	b.n	80186ee <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 80186bc:	4b29      	ldr	r3, [pc, #164]	; (8018764 <SPI_ReadFromFlash+0xe8>)
 80186be:	4a2c      	ldr	r2, [pc, #176]	; (8018770 <SPI_ReadFromFlash+0xf4>)
 80186c0:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 80186c2:	4b2a      	ldr	r3, [pc, #168]	; (801876c <SPI_ReadFromFlash+0xf0>)
 80186c4:	2220      	movs	r2, #32
 80186c6:	601a      	str	r2, [r3, #0]
		break;
 80186c8:	e011      	b.n	80186ee <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 80186ca:	4b26      	ldr	r3, [pc, #152]	; (8018764 <SPI_ReadFromFlash+0xe8>)
 80186cc:	4a28      	ldr	r2, [pc, #160]	; (8018770 <SPI_ReadFromFlash+0xf4>)
 80186ce:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 80186d0:	4b26      	ldr	r3, [pc, #152]	; (801876c <SPI_ReadFromFlash+0xf0>)
 80186d2:	2240      	movs	r2, #64	; 0x40
 80186d4:	601a      	str	r2, [r3, #0]
		break;
 80186d6:	e00a      	b.n	80186ee <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 80186d8:	4b22      	ldr	r3, [pc, #136]	; (8018764 <SPI_ReadFromFlash+0xe8>)
 80186da:	4a26      	ldr	r2, [pc, #152]	; (8018774 <SPI_ReadFromFlash+0xf8>)
 80186dc:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 80186de:	4b23      	ldr	r3, [pc, #140]	; (801876c <SPI_ReadFromFlash+0xf0>)
 80186e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80186e4:	601a      	str	r2, [r3, #0]
		break;
 80186e6:	e002      	b.n	80186ee <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 80186e8:	4823      	ldr	r0, [pc, #140]	; (8018778 <SPI_ReadFromFlash+0xfc>)
 80186ea:	f00e fb1b 	bl	8026d24 <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 80186ee:	89bb      	ldrh	r3, [r7, #12]
 80186f0:	461a      	mov	r2, r3
 80186f2:	2100      	movs	r1, #0
 80186f4:	6878      	ldr	r0, [r7, #4]
 80186f6:	f00e f991 	bl	8026a1c <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80186fa:	4b1a      	ldr	r3, [pc, #104]	; (8018764 <SPI_ReadFromFlash+0xe8>)
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	4a1b      	ldr	r2, [pc, #108]	; (801876c <SPI_ReadFromFlash+0xf0>)
 8018700:	6812      	ldr	r2, [r2, #0]
 8018702:	b291      	uxth	r1, r2
 8018704:	2200      	movs	r2, #0
 8018706:	4618      	mov	r0, r3
 8018708:	f003 ff36 	bl	801c578 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 801870c:	2203      	movs	r2, #3
 801870e:	4b1b      	ldr	r3, [pc, #108]	; (801877c <SPI_ReadFromFlash+0x100>)
 8018710:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8018712:	68bb      	ldr	r3, [r7, #8]
 8018714:	0c1b      	lsrs	r3, r3, #16
 8018716:	b2da      	uxtb	r2, r3
 8018718:	4b18      	ldr	r3, [pc, #96]	; (801877c <SPI_ReadFromFlash+0x100>)
 801871a:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 801871c:	68bb      	ldr	r3, [r7, #8]
 801871e:	0a1b      	lsrs	r3, r3, #8
 8018720:	b2da      	uxtb	r2, r3
 8018722:	4b16      	ldr	r3, [pc, #88]	; (801877c <SPI_ReadFromFlash+0x100>)
 8018724:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8018726:	68bb      	ldr	r3, [r7, #8]
 8018728:	b2da      	uxtb	r2, r3
 801872a:	4b14      	ldr	r3, [pc, #80]	; (801877c <SPI_ReadFromFlash+0x100>)
 801872c:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 801872e:	2364      	movs	r3, #100	; 0x64
 8018730:	2204      	movs	r2, #4
 8018732:	4912      	ldr	r1, [pc, #72]	; (801877c <SPI_ReadFromFlash+0x100>)
 8018734:	4812      	ldr	r0, [pc, #72]	; (8018780 <SPI_ReadFromFlash+0x104>)
 8018736:	f005 ffc1 	bl	801e6bc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 801873a:	89ba      	ldrh	r2, [r7, #12]
 801873c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018740:	6879      	ldr	r1, [r7, #4]
 8018742:	480f      	ldr	r0, [pc, #60]	; (8018780 <SPI_ReadFromFlash+0x104>)
 8018744:	f006 f928 	bl	801e998 <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8018748:	4b06      	ldr	r3, [pc, #24]	; (8018764 <SPI_ReadFromFlash+0xe8>)
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	4a07      	ldr	r2, [pc, #28]	; (801876c <SPI_ReadFromFlash+0xf0>)
 801874e:	6812      	ldr	r2, [r2, #0]
 8018750:	b291      	uxth	r1, r2
 8018752:	2201      	movs	r2, #1
 8018754:	4618      	mov	r0, r3
 8018756:	f003 ff0f 	bl	801c578 <HAL_GPIO_WritePin>

}
 801875a:	bf00      	nop
 801875c:	3710      	adds	r7, #16
 801875e:	46bd      	mov	sp, r7
 8018760:	bd80      	pop	{r7, pc}
 8018762:	bf00      	nop
 8018764:	2000bd14 	.word	0x2000bd14
 8018768:	40021800 	.word	0x40021800
 801876c:	2000bd18 	.word	0x2000bd18
 8018770:	40020c00 	.word	0x40020c00
 8018774:	40021000 	.word	0x40021000
 8018778:	0802c338 	.word	0x0802c338
 801877c:	2000bd0c 	.word	0x2000bd0c
 8018780:	2000bd20 	.word	0x2000bd20

08018784 <Get_Config>:




void Get_Config(void)
{
 8018784:	b580      	push	{r7, lr}
 8018786:	b084      	sub	sp, #16
 8018788:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 801878a:	2300      	movs	r3, #0
 801878c:	60fb      	str	r3, [r7, #12]

	size_t SIZE = (sizeof(EI_t))+6;
 801878e:	f240 335e 	movw	r3, #862	; 0x35e
 8018792:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	60bb      	str	r3, [r7, #8]

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8018798:	2300      	movs	r3, #0
 801879a:	60fb      	str	r3, [r7, #12]
 801879c:	e01d      	b.n	80187da <Get_Config+0x56>
	{
		HAL_Delay(20);
 801879e:	2014      	movs	r0, #20
 80187a0:	f001 fa26 	bl	8019bf0 <HAL_Delay>
		if(SIZE_VAR <32)
 80187a4:	68bb      	ldr	r3, [r7, #8]
 80187a6:	2b1f      	cmp	r3, #31
 80187a8:	d809      	bhi.n	80187be <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 80187aa:	68bb      	ldr	r3, [r7, #8]
 80187ac:	b29a      	uxth	r2, r3
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	4938      	ldr	r1, [pc, #224]	; (8018894 <Get_Config+0x110>)
 80187b2:	440b      	add	r3, r1
 80187b4:	68f9      	ldr	r1, [r7, #12]
 80187b6:	2001      	movs	r0, #1
 80187b8:	f7ff ff60 	bl	801867c <SPI_ReadFromFlash>
 80187bc:	e00a      	b.n	80187d4 <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	4a34      	ldr	r2, [pc, #208]	; (8018894 <Get_Config+0x110>)
 80187c2:	4413      	add	r3, r2
 80187c4:	2220      	movs	r2, #32
 80187c6:	68f9      	ldr	r1, [r7, #12]
 80187c8:	2001      	movs	r0, #1
 80187ca:	f7ff ff57 	bl	801867c <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 80187ce:	68bb      	ldr	r3, [r7, #8]
 80187d0:	3b20      	subs	r3, #32
 80187d2:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	3320      	adds	r3, #32
 80187d8:	60fb      	str	r3, [r7, #12]
 80187da:	68fa      	ldr	r2, [r7, #12]
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	429a      	cmp	r2, r3
 80187e0:	d3dd      	bcc.n	801879e <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 80187e2:	f44f 7157 	mov.w	r1, #860	; 0x35c
 80187e6:	482b      	ldr	r0, [pc, #172]	; (8018894 <Get_Config+0x110>)
 80187e8:	f7fd fb5a 	bl	8015ea0 <CheckCRC>
 80187ec:	4603      	mov	r3, r0
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d02a      	beq.n	8018848 <Get_Config+0xc4>
	{
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 80187f2:	f44f 7256 	mov.w	r2, #856	; 0x358
 80187f6:	4928      	ldr	r1, [pc, #160]	; (8018898 <Get_Config+0x114>)
 80187f8:	4828      	ldr	r0, [pc, #160]	; (801889c <Get_Config+0x118>)
 80187fa:	f00e f8e7 	bl	80269cc <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 80187fe:	4a28      	ldr	r2, [pc, #160]	; (80188a0 <Get_Config+0x11c>)
 8018800:	2110      	movs	r1, #16
 8018802:	2000      	movs	r0, #0
 8018804:	f7e7 ff06 	bl	8000614 <ExtractBits>
 8018808:	4603      	mov	r3, r0
 801880a:	b29a      	uxth	r2, r3
 801880c:	4b25      	ldr	r3, [pc, #148]	; (80188a4 <Get_Config+0x120>)
 801880e:	801a      	strh	r2, [r3, #0]
		DatCrcXchangeSelf_st.App_CRC = EI_Dat_CRC;
 8018810:	4b24      	ldr	r3, [pc, #144]	; (80188a4 <Get_Config+0x120>)
 8018812:	881a      	ldrh	r2, [r3, #0]
 8018814:	4b24      	ldr	r3, [pc, #144]	; (80188a8 <Get_Config+0x124>)
 8018816:	801a      	strh	r2, [r3, #0]

		printf("\n___________________BUILD DETAILS___________________\n");
 8018818:	4824      	ldr	r0, [pc, #144]	; (80188ac <Get_Config+0x128>)
 801881a:	f00e fa83 	bl	8026d24 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 801881e:	4924      	ldr	r1, [pc, #144]	; (80188b0 <Get_Config+0x12c>)
 8018820:	4824      	ldr	r0, [pc, #144]	; (80188b4 <Get_Config+0x130>)
 8018822:	f00e f9e3 	bl	8026bec <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 8018826:	4b1f      	ldr	r3, [pc, #124]	; (80188a4 <Get_Config+0x120>)
 8018828:	881b      	ldrh	r3, [r3, #0]
 801882a:	4619      	mov	r1, r3
 801882c:	4822      	ldr	r0, [pc, #136]	; (80188b8 <Get_Config+0x134>)
 801882e:	f00e f9dd 	bl	8026bec <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 8018832:	4b22      	ldr	r3, [pc, #136]	; (80188bc <Get_Config+0x138>)
 8018834:	881b      	ldrh	r3, [r3, #0]
 8018836:	4619      	mov	r1, r3
 8018838:	4821      	ldr	r0, [pc, #132]	; (80188c0 <Get_Config+0x13c>)
 801883a:	f00e f9d7 	bl	8026bec <iprintf>
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 801883e:	4b21      	ldr	r3, [pc, #132]	; (80188c4 <Get_Config+0x140>)
 8018840:	781b      	ldrb	r3, [r3, #0]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d121      	bne.n	801888a <Get_Config+0x106>
 8018846:	e01e      	b.n	8018886 <Get_Config+0x102>
		printf("\n EI Configuration Structure Size:%u\n",(sizeof(EI_t)));
 8018848:	f44f 7156 	mov.w	r1, #856	; 0x358
 801884c:	481e      	ldr	r0, [pc, #120]	; (80188c8 <Get_Config+0x144>)
 801884e:	f00e f9cd 	bl	8026bec <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8018852:	4b1e      	ldr	r3, [pc, #120]	; (80188cc <Get_Config+0x148>)
 8018854:	4a10      	ldr	r2, [pc, #64]	; (8018898 <Get_Config+0x114>)
 8018856:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 8018858:	4b0e      	ldr	r3, [pc, #56]	; (8018894 <Get_Config+0x110>)
 801885a:	f893 335b 	ldrb.w	r3, [r3, #859]	; 0x35b
 801885e:	4619      	mov	r1, r3
 8018860:	4b0c      	ldr	r3, [pc, #48]	; (8018894 <Get_Config+0x110>)
 8018862:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 8018866:	461a      	mov	r2, r3
 8018868:	4819      	ldr	r0, [pc, #100]	; (80188d0 <Get_Config+0x14c>)
 801886a:	f00e f9bf 	bl	8026bec <iprintf>
		printf("\nCheck for CRC:");
 801886e:	4819      	ldr	r0, [pc, #100]	; (80188d4 <Get_Config+0x150>)
 8018870:	f00e f9bc 	bl	8026bec <iprintf>
		gucFlagUpdate =3;
 8018874:	4b18      	ldr	r3, [pc, #96]	; (80188d8 <Get_Config+0x154>)
 8018876:	2203      	movs	r2, #3
 8018878:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 801887a:	4818      	ldr	r0, [pc, #96]	; (80188dc <Get_Config+0x158>)
 801887c:	f00e fa52 	bl	8026d24 <puts>
			Data_Processing();
 8018880:	f000 f82e 	bl	80188e0 <Data_Processing>
 8018884:	e7fc      	b.n	8018880 <Get_Config+0xfc>
	{
		readCanToStructs();
 8018886:	f7f9 fa15 	bl	8011cb4 <readCanToStructs>
	}
}
 801888a:	bf00      	nop
 801888c:	3710      	adds	r7, #16
 801888e:	46bd      	mov	sp, r7
 8018890:	bd80      	pop	{r7, pc}
 8018892:	bf00      	nop
 8018894:	20000bbc 	.word	0x20000bbc
 8018898:	20000bc0 	.word	0x20000bc0
 801889c:	20000504 	.word	0x20000504
 80188a0:	20000f18 	.word	0x20000f18
 80188a4:	2000bd1e 	.word	0x2000bd1e
 80188a8:	20000bb4 	.word	0x20000bb4
 80188ac:	0802c3a4 	.word	0x0802c3a4
 80188b0:	20000505 	.word	0x20000505
 80188b4:	0802c3dc 	.word	0x0802c3dc
 80188b8:	0802c3f0 	.word	0x0802c3f0
 80188bc:	2000bd1c 	.word	0x2000bd1c
 80188c0:	0802c400 	.word	0x0802c400
 80188c4:	20000fbf 	.word	0x20000fbf
 80188c8:	0802c414 	.word	0x0802c414
 80188cc:	20000500 	.word	0x20000500
 80188d0:	0802c43c 	.word	0x0802c43c
 80188d4:	0802c450 	.word	0x0802c450
 80188d8:	20000fbd 	.word	0x20000fbd
 80188dc:	0802c460 	.word	0x0802c460

080188e0 <Data_Processing>:


void Data_Processing(void)
{
 80188e0:	b580      	push	{r7, lr}
 80188e2:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 80188e4:	4b0b      	ldr	r3, [pc, #44]	; (8018914 <Data_Processing+0x34>)
 80188e6:	781b      	ldrb	r3, [r3, #0]
 80188e8:	2b03      	cmp	r3, #3
 80188ea:	d10e      	bne.n	801890a <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 80188ec:	2000      	movs	r0, #0
 80188ee:	f7f3 fd39 	bl	800c364 <CheckForRqst>
 80188f2:	4603      	mov	r3, r0
 80188f4:	461a      	mov	r2, r3
 80188f6:	4b08      	ldr	r3, [pc, #32]	; (8018918 <Data_Processing+0x38>)
 80188f8:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 80188fa:	4b07      	ldr	r3, [pc, #28]	; (8018918 <Data_Processing+0x38>)
 80188fc:	781b      	ldrb	r3, [r3, #0]
 80188fe:	2b01      	cmp	r3, #1
 8018900:	d105      	bne.n	801890e <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 8018902:	2000      	movs	r0, #0
 8018904:	f000 f80a 	bl	801891c <AutoLoadDat>
		}
		break;
 8018908:	e001      	b.n	801890e <Data_Processing+0x2e>
	default:
		break;
 801890a:	bf00      	nop
 801890c:	e000      	b.n	8018910 <Data_Processing+0x30>
		break;
 801890e:	bf00      	nop
	}
}
 8018910:	bf00      	nop
 8018912:	bd80      	pop	{r7, pc}
 8018914:	20000fbd 	.word	0x20000fbd
 8018918:	20000fbe 	.word	0x20000fbe

0801891c <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 801891c:	b580      	push	{r7, lr}
 801891e:	b084      	sub	sp, #16
 8018920:	af00      	add	r7, sp, #0
 8018922:	4603      	mov	r3, r0
 8018924:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 8018926:	2300      	movs	r3, #0
 8018928:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 801892a:	79fb      	ldrb	r3, [r7, #7]
 801892c:	b29b      	uxth	r3, r3
 801892e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018932:	4934      	ldr	r1, [pc, #208]	; (8018a04 <AutoLoadDat+0xe8>)
 8018934:	4618      	mov	r0, r3
 8018936:	f7f3 febd 	bl	800c6b4 <ReadAndFormConfig>
 801893a:	4603      	mov	r3, r0
 801893c:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 801893e:	4832      	ldr	r0, [pc, #200]	; (8018a08 <AutoLoadDat+0xec>)
 8018940:	f004 fcb0 	bl	801d2a4 <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 8018944:	7bbb      	ldrb	r3, [r7, #14]
 8018946:	2b01      	cmp	r3, #1
 8018948:	d921      	bls.n	801898e <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 801894a:	4b30      	ldr	r3, [pc, #192]	; (8018a0c <AutoLoadDat+0xf0>)
 801894c:	2200      	movs	r2, #0
 801894e:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 8018950:	4b2c      	ldr	r3, [pc, #176]	; (8018a04 <AutoLoadDat+0xe8>)
 8018952:	785b      	ldrb	r3, [r3, #1]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d107      	bne.n	8018968 <AutoLoadDat+0x4c>
 8018958:	4b2a      	ldr	r3, [pc, #168]	; (8018a04 <AutoLoadDat+0xe8>)
 801895a:	789b      	ldrb	r3, [r3, #2]
 801895c:	2b01      	cmp	r3, #1
 801895e:	d103      	bne.n	8018968 <AutoLoadDat+0x4c>
 8018960:	4b28      	ldr	r3, [pc, #160]	; (8018a04 <AutoLoadDat+0xe8>)
 8018962:	78db      	ldrb	r3, [r3, #3]
 8018964:	2b04      	cmp	r3, #4
 8018966:	d003      	beq.n	8018970 <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 8018968:	4829      	ldr	r0, [pc, #164]	; (8018a10 <AutoLoadDat+0xf4>)
 801896a:	f00e f9db 	bl	8026d24 <puts>
				return;
 801896e:	e046      	b.n	80189fe <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8018970:	4b28      	ldr	r3, [pc, #160]	; (8018a14 <AutoLoadDat+0xf8>)
 8018972:	4a29      	ldr	r2, [pc, #164]	; (8018a18 <AutoLoadDat+0xfc>)
 8018974:	601a      	str	r2, [r3, #0]
			saveConfig();
 8018976:	f000 f85b 	bl	8018a30 <saveConfig>
			gucFlagCheck =1;
 801897a:	4b28      	ldr	r3, [pc, #160]	; (8018a1c <AutoLoadDat+0x100>)
 801897c:	2201      	movs	r2, #1
 801897e:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 8018980:	4b27      	ldr	r3, [pc, #156]	; (8018a20 <AutoLoadDat+0x104>)
 8018982:	2201      	movs	r2, #1
 8018984:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 8018986:	4827      	ldr	r0, [pc, #156]	; (8018a24 <AutoLoadDat+0x108>)
 8018988:	f00e f9cc 	bl	8026d24 <puts>
			break;
 801898c:	e037      	b.n	80189fe <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 801898e:	7bbb      	ldrb	r3, [r7, #14]
 8018990:	2b01      	cmp	r3, #1
 8018992:	d11b      	bne.n	80189cc <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 8018994:	7bfb      	ldrb	r3, [r7, #15]
 8018996:	2b03      	cmp	r3, #3
 8018998:	d109      	bne.n	80189ae <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 801899a:	4b1c      	ldr	r3, [pc, #112]	; (8018a0c <AutoLoadDat+0xf0>)
 801899c:	2200      	movs	r2, #0
 801899e:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 80189a0:	79fb      	ldrb	r3, [r7, #7]
 80189a2:	2203      	movs	r2, #3
 80189a4:	2101      	movs	r1, #1
 80189a6:	4618      	mov	r0, r3
 80189a8:	f7f3 fe38 	bl	800c61c <SendAck>
				break;
 80189ac:	e027      	b.n	80189fe <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 80189ae:	79fb      	ldrb	r3, [r7, #7]
 80189b0:	2202      	movs	r2, #2
 80189b2:	2101      	movs	r1, #1
 80189b4:	4618      	mov	r0, r3
 80189b6:	f7f3 fe31 	bl	800c61c <SendAck>
			gucReqstCurTim = HAL_GetTick();
 80189ba:	f001 f90d 	bl	8019bd8 <HAL_GetTick>
 80189be:	4603      	mov	r3, r0
 80189c0:	4a19      	ldr	r2, [pc, #100]	; (8018a28 <AutoLoadDat+0x10c>)
 80189c2:	6013      	str	r3, [r2, #0]
			AckCount++;
 80189c4:	7bfb      	ldrb	r3, [r7, #15]
 80189c6:	3301      	adds	r3, #1
 80189c8:	73fb      	strb	r3, [r7, #15]
 80189ca:	e7ae      	b.n	801892a <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 80189cc:	f001 f904 	bl	8019bd8 <HAL_GetTick>
 80189d0:	4602      	mov	r2, r0
 80189d2:	4b15      	ldr	r3, [pc, #84]	; (8018a28 <AutoLoadDat+0x10c>)
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	1ad3      	subs	r3, r2, r3
 80189d8:	2b00      	cmp	r3, #0
 80189da:	bfb8      	it	lt
 80189dc:	425b      	neglt	r3, r3
 80189de:	f247 5230 	movw	r2, #30000	; 0x7530
 80189e2:	4293      	cmp	r3, r2
 80189e4:	dda1      	ble.n	801892a <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 80189e6:	4b09      	ldr	r3, [pc, #36]	; (8018a0c <AutoLoadDat+0xf0>)
 80189e8:	2200      	movs	r2, #0
 80189ea:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 80189ec:	480f      	ldr	r0, [pc, #60]	; (8018a2c <AutoLoadDat+0x110>)
 80189ee:	f00e f999 	bl	8026d24 <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 80189f2:	79fb      	ldrb	r3, [r7, #7]
 80189f4:	2205      	movs	r2, #5
 80189f6:	2101      	movs	r1, #1
 80189f8:	4618      	mov	r0, r3
 80189fa:	f7f3 fe0f 	bl	800c61c <SendAck>
				break;
			}
		}
	}
}
 80189fe:	3710      	adds	r7, #16
 8018a00:	46bd      	mov	sp, r7
 8018a02:	bd80      	pop	{r7, pc}
 8018a04:	20000bbc 	.word	0x20000bbc
 8018a08:	2000b478 	.word	0x2000b478
 8018a0c:	20000fbe 	.word	0x20000fbe
 8018a10:	0802c4a0 	.word	0x0802c4a0
 8018a14:	20000500 	.word	0x20000500
 8018a18:	20000bc0 	.word	0x20000bc0
 8018a1c:	2000bd08 	.word	0x2000bd08
 8018a20:	2000bd09 	.word	0x2000bd09
 8018a24:	0802c4b8 	.word	0x0802c4b8
 8018a28:	20000fc0 	.word	0x20000fc0
 8018a2c:	0802c4c8 	.word	0x0802c4c8

08018a30 <saveConfig>:

unsigned char saveConfig(void)
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b084      	sub	sp, #16
 8018a34:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 8018a36:	2300      	movs	r3, #0
 8018a38:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 8018a3a:	4825      	ldr	r0, [pc, #148]	; (8018ad0 <saveConfig+0xa0>)
 8018a3c:	f00e f972 	bl	8026d24 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8018a40:	2300      	movs	r3, #0
 8018a42:	60fb      	str	r3, [r7, #12]
 8018a44:	e011      	b.n	8018a6a <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	031b      	lsls	r3, r3, #12
 8018a4a:	4619      	mov	r1, r3
 8018a4c:	2001      	movs	r0, #1
 8018a4e:	f7ff fd09 	bl	8018464 <SPI_MemoryEraseBySector>
 8018a52:	4603      	mov	r3, r0
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d005      	beq.n	8018a64 <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 8018a58:	481e      	ldr	r0, [pc, #120]	; (8018ad4 <saveConfig+0xa4>)
 8018a5a:	f004 fc23 	bl	801d2a4 <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 8018a5e:	481e      	ldr	r0, [pc, #120]	; (8018ad8 <saveConfig+0xa8>)
 8018a60:	f00e f960 	bl	8026d24 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	3301      	adds	r3, #1
 8018a68:	60fb      	str	r3, [r7, #12]
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	2b05      	cmp	r3, #5
 8018a6e:	d9ea      	bls.n	8018a46 <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 8018a70:	f240 335f 	movw	r3, #863	; 0x35f
 8018a74:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	60fb      	str	r3, [r7, #12]
 8018a7e:	e01d      	b.n	8018abc <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8018a80:	4814      	ldr	r0, [pc, #80]	; (8018ad4 <saveConfig+0xa4>)
 8018a82:	f004 fc0f 	bl	801d2a4 <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 8018a86:	68bb      	ldr	r3, [r7, #8]
 8018a88:	2b1f      	cmp	r3, #31
 8018a8a:	d809      	bhi.n	8018aa0 <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 8018a8c:	68bb      	ldr	r3, [r7, #8]
 8018a8e:	b29a      	uxth	r2, r3
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	4912      	ldr	r1, [pc, #72]	; (8018adc <saveConfig+0xac>)
 8018a94:	440b      	add	r3, r1
 8018a96:	68f9      	ldr	r1, [r7, #12]
 8018a98:	2001      	movs	r0, #1
 8018a9a:	f7ff fbc5 	bl	8018228 <SPI_WriteInFlash>
 8018a9e:	e00a      	b.n	8018ab6 <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	4a0e      	ldr	r2, [pc, #56]	; (8018adc <saveConfig+0xac>)
 8018aa4:	4413      	add	r3, r2
 8018aa6:	2220      	movs	r2, #32
 8018aa8:	68f9      	ldr	r1, [r7, #12]
 8018aaa:	2001      	movs	r0, #1
 8018aac:	f7ff fbbc 	bl	8018228 <SPI_WriteInFlash>
			SIZE_VAR-=32;
 8018ab0:	68bb      	ldr	r3, [r7, #8]
 8018ab2:	3b20      	subs	r3, #32
 8018ab4:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	3320      	adds	r3, #32
 8018aba:	60fb      	str	r3, [r7, #12]
 8018abc:	68fa      	ldr	r2, [r7, #12]
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	429a      	cmp	r2, r3
 8018ac2:	d3dd      	bcc.n	8018a80 <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 8018ac4:	4806      	ldr	r0, [pc, #24]	; (8018ae0 <saveConfig+0xb0>)
 8018ac6:	f00e f891 	bl	8026bec <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 8018aca:	f7ff fad9 	bl	8018080 <__NVIC_SystemReset>
 8018ace:	bf00      	nop
 8018ad0:	0802c4e4 	.word	0x0802c4e4
 8018ad4:	2000b478 	.word	0x2000b478
 8018ad8:	0802c4f0 	.word	0x0802c4f0
 8018adc:	20000bbc 	.word	0x20000bbc
 8018ae0:	0802c504 	.word	0x0802c504

08018ae4 <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 8018ae8:	4b14      	ldr	r3, [pc, #80]	; (8018b3c <Print_BuildDat_Details+0x58>)
 8018aea:	781b      	ldrb	r3, [r3, #0]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d022      	beq.n	8018b36 <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 8018af0:	4b13      	ldr	r3, [pc, #76]	; (8018b40 <Print_BuildDat_Details+0x5c>)
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	4618      	mov	r0, r3
 8018af6:	f7f7 fd51 	bl	801059c <HAL_Elaps_Ticks>
 8018afa:	4603      	mov	r3, r0
 8018afc:	f242 720f 	movw	r2, #9999	; 0x270f
 8018b00:	4293      	cmp	r3, r2
 8018b02:	d919      	bls.n	8018b38 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 8018b04:	480f      	ldr	r0, [pc, #60]	; (8018b44 <Print_BuildDat_Details+0x60>)
 8018b06:	f00e f90d 	bl	8026d24 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 8018b0a:	490f      	ldr	r1, [pc, #60]	; (8018b48 <Print_BuildDat_Details+0x64>)
 8018b0c:	480f      	ldr	r0, [pc, #60]	; (8018b4c <Print_BuildDat_Details+0x68>)
 8018b0e:	f00e f86d 	bl	8026bec <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 8018b12:	4b0f      	ldr	r3, [pc, #60]	; (8018b50 <Print_BuildDat_Details+0x6c>)
 8018b14:	881b      	ldrh	r3, [r3, #0]
 8018b16:	4619      	mov	r1, r3
 8018b18:	480e      	ldr	r0, [pc, #56]	; (8018b54 <Print_BuildDat_Details+0x70>)
 8018b1a:	f00e f867 	bl	8026bec <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 8018b1e:	4b0e      	ldr	r3, [pc, #56]	; (8018b58 <Print_BuildDat_Details+0x74>)
 8018b20:	881b      	ldrh	r3, [r3, #0]
 8018b22:	4619      	mov	r1, r3
 8018b24:	480d      	ldr	r0, [pc, #52]	; (8018b5c <Print_BuildDat_Details+0x78>)
 8018b26:	f00e f861 	bl	8026bec <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 8018b2a:	f001 f855 	bl	8019bd8 <HAL_GetTick>
 8018b2e:	4603      	mov	r3, r0
 8018b30:	4a03      	ldr	r2, [pc, #12]	; (8018b40 <Print_BuildDat_Details+0x5c>)
 8018b32:	6013      	str	r3, [r2, #0]
 8018b34:	e000      	b.n	8018b38 <Print_BuildDat_Details+0x54>
		return;
 8018b36:	bf00      	nop
	}
}
 8018b38:	bd80      	pop	{r7, pc}
 8018b3a:	bf00      	nop
 8018b3c:	20000bbb 	.word	0x20000bbb
 8018b40:	2000bd84 	.word	0x2000bd84
 8018b44:	0802c520 	.word	0x0802c520
 8018b48:	20000505 	.word	0x20000505
 8018b4c:	0802c3dc 	.word	0x0802c3dc
 8018b50:	2000bd1e 	.word	0x2000bd1e
 8018b54:	0802c3f0 	.word	0x0802c3f0
 8018b58:	2000bd1c 	.word	0x2000bd1c
 8018b5c:	0802c400 	.word	0x0802c400

08018b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b082      	sub	sp, #8
 8018b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8018b66:	4b0f      	ldr	r3, [pc, #60]	; (8018ba4 <HAL_MspInit+0x44>)
 8018b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b6a:	4a0e      	ldr	r2, [pc, #56]	; (8018ba4 <HAL_MspInit+0x44>)
 8018b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018b70:	6413      	str	r3, [r2, #64]	; 0x40
 8018b72:	4b0c      	ldr	r3, [pc, #48]	; (8018ba4 <HAL_MspInit+0x44>)
 8018b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018b7a:	607b      	str	r3, [r7, #4]
 8018b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018b7e:	4b09      	ldr	r3, [pc, #36]	; (8018ba4 <HAL_MspInit+0x44>)
 8018b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b82:	4a08      	ldr	r2, [pc, #32]	; (8018ba4 <HAL_MspInit+0x44>)
 8018b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018b88:	6453      	str	r3, [r2, #68]	; 0x44
 8018b8a:	4b06      	ldr	r3, [pc, #24]	; (8018ba4 <HAL_MspInit+0x44>)
 8018b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018b92:	603b      	str	r3, [r7, #0]
 8018b94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8018b96:	2004      	movs	r0, #4
 8018b98:	f001 fff4 	bl	801ab84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8018b9c:	bf00      	nop
 8018b9e:	3708      	adds	r7, #8
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd80      	pop	{r7, pc}
 8018ba4:	40023800 	.word	0x40023800

08018ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8018ba8:	b480      	push	{r7}
 8018baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8018bac:	e7fe      	b.n	8018bac <NMI_Handler+0x4>

08018bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8018bae:	b480      	push	{r7}
 8018bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8018bb2:	e7fe      	b.n	8018bb2 <HardFault_Handler+0x4>

08018bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8018bb4:	b480      	push	{r7}
 8018bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8018bb8:	e7fe      	b.n	8018bb8 <MemManage_Handler+0x4>

08018bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8018bba:	b480      	push	{r7}
 8018bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8018bbe:	e7fe      	b.n	8018bbe <BusFault_Handler+0x4>

08018bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8018bc0:	b480      	push	{r7}
 8018bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8018bc4:	e7fe      	b.n	8018bc4 <UsageFault_Handler+0x4>

08018bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8018bc6:	b480      	push	{r7}
 8018bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8018bca:	bf00      	nop
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd2:	4770      	bx	lr

08018bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8018bd4:	b480      	push	{r7}
 8018bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018bd8:	bf00      	nop
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be0:	4770      	bx	lr

08018be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8018be2:	b480      	push	{r7}
 8018be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8018be6:	bf00      	nop
 8018be8:	46bd      	mov	sp, r7
 8018bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bee:	4770      	bx	lr

08018bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8018bf4:	f000 ffdc 	bl	8019bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8018bf8:	bf00      	nop
 8018bfa:	bd80      	pop	{r7, pc}

08018bfc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 8018c00:	2001      	movs	r0, #1
 8018c02:	f003 fced 	bl	801c5e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8018c06:	bf00      	nop
 8018c08:	bd80      	pop	{r7, pc}

08018c0a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8018c0a:	b580      	push	{r7, lr}
 8018c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 8018c0e:	2002      	movs	r0, #2
 8018c10:	f003 fce6 	bl	801c5e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8018c14:	bf00      	nop
 8018c16:	bd80      	pop	{r7, pc}

08018c18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8018c1c:	4802      	ldr	r0, [pc, #8]	; (8018c28 <TIM4_IRQHandler+0x10>)
 8018c1e:	f006 fc03 	bl	801f428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8018c22:	bf00      	nop
 8018c24:	bd80      	pop	{r7, pc}
 8018c26:	bf00      	nop
 8018c28:	2000bd8c 	.word	0x2000bd8c

08018c2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8018c30:	4802      	ldr	r0, [pc, #8]	; (8018c3c <USART1_IRQHandler+0x10>)
 8018c32:	f006 fe1d 	bl	801f870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8018c36:	bf00      	nop
 8018c38:	bd80      	pop	{r7, pc}
 8018c3a:	bf00      	nop
 8018c3c:	2000dcc4 	.word	0x2000dcc4

08018c40 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8018c40:	b580      	push	{r7, lr}
 8018c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8018c44:	4802      	ldr	r0, [pc, #8]	; (8018c50 <TIM5_IRQHandler+0x10>)
 8018c46:	f006 fbef 	bl	801f428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8018c4a:	bf00      	nop
 8018c4c:	bd80      	pop	{r7, pc}
 8018c4e:	bf00      	nop
 8018c50:	2000be48 	.word	0x2000be48

08018c54 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8018c54:	b580      	push	{r7, lr}
 8018c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8018c58:	4802      	ldr	r0, [pc, #8]	; (8018c64 <UART4_IRQHandler+0x10>)
 8018c5a:	f006 fe09 	bl	801f870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8018c5e:	bf00      	nop
 8018c60:	bd80      	pop	{r7, pc}
 8018c62:	bf00      	nop
 8018c64:	2000da9c 	.word	0x2000da9c

08018c68 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8018c68:	b580      	push	{r7, lr}
 8018c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8018c6c:	4802      	ldr	r0, [pc, #8]	; (8018c78 <UART5_IRQHandler+0x10>)
 8018c6e:	f006 fdff 	bl	801f870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8018c72:	bf00      	nop
 8018c74:	bd80      	pop	{r7, pc}
 8018c76:	bf00      	nop
 8018c78:	2000db54 	.word	0x2000db54

08018c7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8018c80:	4802      	ldr	r0, [pc, #8]	; (8018c8c <TIM6_DAC_IRQHandler+0x10>)
 8018c82:	f006 fbd1 	bl	801f428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8018c86:	bf00      	nop
 8018c88:	bd80      	pop	{r7, pc}
 8018c8a:	bf00      	nop
 8018c8c:	2000bf04 	.word	0x2000bf04

08018c90 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8018c94:	4802      	ldr	r0, [pc, #8]	; (8018ca0 <TIM7_IRQHandler+0x10>)
 8018c96:	f006 fbc7 	bl	801f428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8018c9a:	bf00      	nop
 8018c9c:	bd80      	pop	{r7, pc}
 8018c9e:	bf00      	nop
 8018ca0:	2000bfc0 	.word	0x2000bfc0

08018ca4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8018ca8:	4802      	ldr	r0, [pc, #8]	; (8018cb4 <ETH_IRQHandler+0x10>)
 8018caa:	f002 fbbb 	bl	801b424 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8018cae:	bf00      	nop
 8018cb0:	bd80      	pop	{r7, pc}
 8018cb2:	bf00      	nop
 8018cb4:	200126d8 	.word	0x200126d8

08018cb8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8018cbc:	4802      	ldr	r0, [pc, #8]	; (8018cc8 <CAN2_RX0_IRQHandler+0x10>)
 8018cbe:	f001 fc5d 	bl	801a57c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8018cc2:	bf00      	nop
 8018cc4:	bd80      	pop	{r7, pc}
 8018cc6:	bf00      	nop
 8018cc8:	2000b2f4 	.word	0x2000b2f4

08018ccc <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8018ccc:	b580      	push	{r7, lr}
 8018cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8018cd0:	4802      	ldr	r0, [pc, #8]	; (8018cdc <CAN2_RX1_IRQHandler+0x10>)
 8018cd2:	f001 fc53 	bl	801a57c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8018cd6:	bf00      	nop
 8018cd8:	bd80      	pop	{r7, pc}
 8018cda:	bf00      	nop
 8018cdc:	2000b2f4 	.word	0x2000b2f4

08018ce0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8018ce4:	4802      	ldr	r0, [pc, #8]	; (8018cf0 <UART7_IRQHandler+0x10>)
 8018ce6:	f006 fdc3 	bl	801f870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8018cea:	bf00      	nop
 8018cec:	bd80      	pop	{r7, pc}
 8018cee:	bf00      	nop
 8018cf0:	2000dc0c 	.word	0x2000dc0c

08018cf4 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8018cf8:	4802      	ldr	r0, [pc, #8]	; (8018d04 <CAN3_RX0_IRQHandler+0x10>)
 8018cfa:	f001 fc3f 	bl	801a57c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8018cfe:	bf00      	nop
 8018d00:	bd80      	pop	{r7, pc}
 8018d02:	bf00      	nop
 8018d04:	2000b358 	.word	0x2000b358

08018d08 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8018d0c:	4802      	ldr	r0, [pc, #8]	; (8018d18 <CAN3_RX1_IRQHandler+0x10>)
 8018d0e:	f001 fc35 	bl	801a57c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 8018d12:	bf00      	nop
 8018d14:	bd80      	pop	{r7, pc}
 8018d16:	bf00      	nop
 8018d18:	2000b358 	.word	0x2000b358

08018d1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8018d1c:	b480      	push	{r7}
 8018d1e:	af00      	add	r7, sp, #0
	return 1;
 8018d20:	2301      	movs	r3, #1
}
 8018d22:	4618      	mov	r0, r3
 8018d24:	46bd      	mov	sp, r7
 8018d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2a:	4770      	bx	lr

08018d2c <_kill>:

int _kill(int pid, int sig)
{
 8018d2c:	b480      	push	{r7}
 8018d2e:	b083      	sub	sp, #12
 8018d30:	af00      	add	r7, sp, #0
 8018d32:	6078      	str	r0, [r7, #4]
 8018d34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8018d36:	4b05      	ldr	r3, [pc, #20]	; (8018d4c <_kill+0x20>)
 8018d38:	2216      	movs	r2, #22
 8018d3a:	601a      	str	r2, [r3, #0]
	return -1;
 8018d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018d40:	4618      	mov	r0, r3
 8018d42:	370c      	adds	r7, #12
 8018d44:	46bd      	mov	sp, r7
 8018d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d4a:	4770      	bx	lr
 8018d4c:	2001631c 	.word	0x2001631c

08018d50 <_exit>:

void _exit (int status)
{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b082      	sub	sp, #8
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8018d58:	f04f 31ff 	mov.w	r1, #4294967295
 8018d5c:	6878      	ldr	r0, [r7, #4]
 8018d5e:	f7ff ffe5 	bl	8018d2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8018d62:	e7fe      	b.n	8018d62 <_exit+0x12>

08018d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b086      	sub	sp, #24
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	60f8      	str	r0, [r7, #12]
 8018d6c:	60b9      	str	r1, [r7, #8]
 8018d6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018d70:	2300      	movs	r3, #0
 8018d72:	617b      	str	r3, [r7, #20]
 8018d74:	e00a      	b.n	8018d8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8018d76:	f3af 8000 	nop.w
 8018d7a:	4601      	mov	r1, r0
 8018d7c:	68bb      	ldr	r3, [r7, #8]
 8018d7e:	1c5a      	adds	r2, r3, #1
 8018d80:	60ba      	str	r2, [r7, #8]
 8018d82:	b2ca      	uxtb	r2, r1
 8018d84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018d86:	697b      	ldr	r3, [r7, #20]
 8018d88:	3301      	adds	r3, #1
 8018d8a:	617b      	str	r3, [r7, #20]
 8018d8c:	697a      	ldr	r2, [r7, #20]
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	429a      	cmp	r2, r3
 8018d92:	dbf0      	blt.n	8018d76 <_read+0x12>
	}

return len;
 8018d94:	687b      	ldr	r3, [r7, #4]
}
 8018d96:	4618      	mov	r0, r3
 8018d98:	3718      	adds	r7, #24
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	bd80      	pop	{r7, pc}

08018d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8018d9e:	b580      	push	{r7, lr}
 8018da0:	b086      	sub	sp, #24
 8018da2:	af00      	add	r7, sp, #0
 8018da4:	60f8      	str	r0, [r7, #12]
 8018da6:	60b9      	str	r1, [r7, #8]
 8018da8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018daa:	2300      	movs	r3, #0
 8018dac:	617b      	str	r3, [r7, #20]
 8018dae:	e009      	b.n	8018dc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8018db0:	68bb      	ldr	r3, [r7, #8]
 8018db2:	1c5a      	adds	r2, r3, #1
 8018db4:	60ba      	str	r2, [r7, #8]
 8018db6:	781b      	ldrb	r3, [r3, #0]
 8018db8:	4618      	mov	r0, r3
 8018dba:	f7e7 fe6b 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018dbe:	697b      	ldr	r3, [r7, #20]
 8018dc0:	3301      	adds	r3, #1
 8018dc2:	617b      	str	r3, [r7, #20]
 8018dc4:	697a      	ldr	r2, [r7, #20]
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	429a      	cmp	r2, r3
 8018dca:	dbf1      	blt.n	8018db0 <_write+0x12>
	}
	return len;
 8018dcc:	687b      	ldr	r3, [r7, #4]
}
 8018dce:	4618      	mov	r0, r3
 8018dd0:	3718      	adds	r7, #24
 8018dd2:	46bd      	mov	sp, r7
 8018dd4:	bd80      	pop	{r7, pc}

08018dd6 <_close>:

int _close(int file)
{
 8018dd6:	b480      	push	{r7}
 8018dd8:	b083      	sub	sp, #12
 8018dda:	af00      	add	r7, sp, #0
 8018ddc:	6078      	str	r0, [r7, #4]
	return -1;
 8018dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018de2:	4618      	mov	r0, r3
 8018de4:	370c      	adds	r7, #12
 8018de6:	46bd      	mov	sp, r7
 8018de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dec:	4770      	bx	lr

08018dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8018dee:	b480      	push	{r7}
 8018df0:	b083      	sub	sp, #12
 8018df2:	af00      	add	r7, sp, #0
 8018df4:	6078      	str	r0, [r7, #4]
 8018df6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8018df8:	683b      	ldr	r3, [r7, #0]
 8018dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018dfe:	605a      	str	r2, [r3, #4]
	return 0;
 8018e00:	2300      	movs	r3, #0
}
 8018e02:	4618      	mov	r0, r3
 8018e04:	370c      	adds	r7, #12
 8018e06:	46bd      	mov	sp, r7
 8018e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0c:	4770      	bx	lr

08018e0e <_isatty>:

int _isatty(int file)
{
 8018e0e:	b480      	push	{r7}
 8018e10:	b083      	sub	sp, #12
 8018e12:	af00      	add	r7, sp, #0
 8018e14:	6078      	str	r0, [r7, #4]
	return 1;
 8018e16:	2301      	movs	r3, #1
}
 8018e18:	4618      	mov	r0, r3
 8018e1a:	370c      	adds	r7, #12
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e22:	4770      	bx	lr

08018e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8018e24:	b480      	push	{r7}
 8018e26:	b085      	sub	sp, #20
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	60f8      	str	r0, [r7, #12]
 8018e2c:	60b9      	str	r1, [r7, #8]
 8018e2e:	607a      	str	r2, [r7, #4]
	return 0;
 8018e30:	2300      	movs	r3, #0
}
 8018e32:	4618      	mov	r0, r3
 8018e34:	3714      	adds	r7, #20
 8018e36:	46bd      	mov	sp, r7
 8018e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e3c:	4770      	bx	lr
	...

08018e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8018e40:	b480      	push	{r7}
 8018e42:	b087      	sub	sp, #28
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8018e48:	4a14      	ldr	r2, [pc, #80]	; (8018e9c <_sbrk+0x5c>)
 8018e4a:	4b15      	ldr	r3, [pc, #84]	; (8018ea0 <_sbrk+0x60>)
 8018e4c:	1ad3      	subs	r3, r2, r3
 8018e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8018e50:	697b      	ldr	r3, [r7, #20]
 8018e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8018e54:	4b13      	ldr	r3, [pc, #76]	; (8018ea4 <_sbrk+0x64>)
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d102      	bne.n	8018e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8018e5c:	4b11      	ldr	r3, [pc, #68]	; (8018ea4 <_sbrk+0x64>)
 8018e5e:	4a12      	ldr	r2, [pc, #72]	; (8018ea8 <_sbrk+0x68>)
 8018e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8018e62:	4b10      	ldr	r3, [pc, #64]	; (8018ea4 <_sbrk+0x64>)
 8018e64:	681a      	ldr	r2, [r3, #0]
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	4413      	add	r3, r2
 8018e6a:	693a      	ldr	r2, [r7, #16]
 8018e6c:	429a      	cmp	r2, r3
 8018e6e:	d205      	bcs.n	8018e7c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8018e70:	4b0e      	ldr	r3, [pc, #56]	; (8018eac <_sbrk+0x6c>)
 8018e72:	220c      	movs	r2, #12
 8018e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8018e76:	f04f 33ff 	mov.w	r3, #4294967295
 8018e7a:	e009      	b.n	8018e90 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8018e7c:	4b09      	ldr	r3, [pc, #36]	; (8018ea4 <_sbrk+0x64>)
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8018e82:	4b08      	ldr	r3, [pc, #32]	; (8018ea4 <_sbrk+0x64>)
 8018e84:	681a      	ldr	r2, [r3, #0]
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	4413      	add	r3, r2
 8018e8a:	4a06      	ldr	r2, [pc, #24]	; (8018ea4 <_sbrk+0x64>)
 8018e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8018e8e:	68fb      	ldr	r3, [r7, #12]
}
 8018e90:	4618      	mov	r0, r3
 8018e92:	371c      	adds	r7, #28
 8018e94:	46bd      	mov	sp, r7
 8018e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e9a:	4770      	bx	lr
 8018e9c:	20080000 	.word	0x20080000
 8018ea0:	00000400 	.word	0x00000400
 8018ea4:	2000bd88 	.word	0x2000bd88
 8018ea8:	20016328 	.word	0x20016328
 8018eac:	2001631c 	.word	0x2001631c

08018eb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8018eb0:	b480      	push	{r7}
 8018eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8018eb4:	4b06      	ldr	r3, [pc, #24]	; (8018ed0 <SystemInit+0x20>)
 8018eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018eba:	4a05      	ldr	r2, [pc, #20]	; (8018ed0 <SystemInit+0x20>)
 8018ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8018ec4:	bf00      	nop
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ecc:	4770      	bx	lr
 8018ece:	bf00      	nop
 8018ed0:	e000ed00 	.word	0xe000ed00

08018ed4 <MX_UART5_Init>:
  /* USER CODE END UART4_Init 2 */

}
/* UART5 init function */
void MX_UART5_Init(void)
{
 8018ed4:	b580      	push	{r7, lr}
 8018ed6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8018ed8:	4b16      	ldr	r3, [pc, #88]	; (8018f34 <MX_UART5_Init+0x60>)
 8018eda:	4a17      	ldr	r2, [pc, #92]	; (8018f38 <MX_UART5_Init+0x64>)
 8018edc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8018ede:	4b15      	ldr	r3, [pc, #84]	; (8018f34 <MX_UART5_Init+0x60>)
 8018ee0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8018ee4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8018ee6:	4b13      	ldr	r3, [pc, #76]	; (8018f34 <MX_UART5_Init+0x60>)
 8018ee8:	2200      	movs	r2, #0
 8018eea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8018eec:	4b11      	ldr	r3, [pc, #68]	; (8018f34 <MX_UART5_Init+0x60>)
 8018eee:	2200      	movs	r2, #0
 8018ef0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8018ef2:	4b10      	ldr	r3, [pc, #64]	; (8018f34 <MX_UART5_Init+0x60>)
 8018ef4:	2200      	movs	r2, #0
 8018ef6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8018ef8:	4b0e      	ldr	r3, [pc, #56]	; (8018f34 <MX_UART5_Init+0x60>)
 8018efa:	220c      	movs	r2, #12
 8018efc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018efe:	4b0d      	ldr	r3, [pc, #52]	; (8018f34 <MX_UART5_Init+0x60>)
 8018f00:	2200      	movs	r2, #0
 8018f02:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8018f04:	4b0b      	ldr	r3, [pc, #44]	; (8018f34 <MX_UART5_Init+0x60>)
 8018f06:	2200      	movs	r2, #0
 8018f08:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8018f0a:	4b0a      	ldr	r3, [pc, #40]	; (8018f34 <MX_UART5_Init+0x60>)
 8018f0c:	2200      	movs	r2, #0
 8018f0e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018f10:	4b08      	ldr	r3, [pc, #32]	; (8018f34 <MX_UART5_Init+0x60>)
 8018f12:	2200      	movs	r2, #0
 8018f14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8018f16:	4807      	ldr	r0, [pc, #28]	; (8018f34 <MX_UART5_Init+0x60>)
 8018f18:	f006 fbc8 	bl	801f6ac <HAL_UART_Init>
 8018f1c:	4603      	mov	r3, r0
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d001      	beq.n	8018f26 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8018f22:	f7ff f85f 	bl	8017fe4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018f26:	2280      	movs	r2, #128	; 0x80
 8018f28:	4904      	ldr	r1, [pc, #16]	; (8018f3c <MX_UART5_Init+0x68>)
 8018f2a:	4802      	ldr	r0, [pc, #8]	; (8018f34 <MX_UART5_Init+0x60>)
 8018f2c:	f007 ff2a 	bl	8020d84 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END UART5_Init 2 */

}
 8018f30:	bf00      	nop
 8018f32:	bd80      	pop	{r7, pc}
 8018f34:	2000db54 	.word	0x2000db54
 8018f38:	40005000 	.word	0x40005000
 8018f3c:	2000d91c 	.word	0x2000d91c

08018f40 <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8018f44:	4b16      	ldr	r3, [pc, #88]	; (8018fa0 <MX_USART1_UART_Init+0x60>)
 8018f46:	4a17      	ldr	r2, [pc, #92]	; (8018fa4 <MX_USART1_UART_Init+0x64>)
 8018f48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8018f4a:	4b15      	ldr	r3, [pc, #84]	; (8018fa0 <MX_USART1_UART_Init+0x60>)
 8018f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8018f50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8018f52:	4b13      	ldr	r3, [pc, #76]	; (8018fa0 <MX_USART1_UART_Init+0x60>)
 8018f54:	2200      	movs	r2, #0
 8018f56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8018f58:	4b11      	ldr	r3, [pc, #68]	; (8018fa0 <MX_USART1_UART_Init+0x60>)
 8018f5a:	2200      	movs	r2, #0
 8018f5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8018f5e:	4b10      	ldr	r3, [pc, #64]	; (8018fa0 <MX_USART1_UART_Init+0x60>)
 8018f60:	2200      	movs	r2, #0
 8018f62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8018f64:	4b0e      	ldr	r3, [pc, #56]	; (8018fa0 <MX_USART1_UART_Init+0x60>)
 8018f66:	220c      	movs	r2, #12
 8018f68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018f6a:	4b0d      	ldr	r3, [pc, #52]	; (8018fa0 <MX_USART1_UART_Init+0x60>)
 8018f6c:	2200      	movs	r2, #0
 8018f6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8018f70:	4b0b      	ldr	r3, [pc, #44]	; (8018fa0 <MX_USART1_UART_Init+0x60>)
 8018f72:	2200      	movs	r2, #0
 8018f74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8018f76:	4b0a      	ldr	r3, [pc, #40]	; (8018fa0 <MX_USART1_UART_Init+0x60>)
 8018f78:	2200      	movs	r2, #0
 8018f7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018f7c:	4b08      	ldr	r3, [pc, #32]	; (8018fa0 <MX_USART1_UART_Init+0x60>)
 8018f7e:	2200      	movs	r2, #0
 8018f80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8018f82:	4807      	ldr	r0, [pc, #28]	; (8018fa0 <MX_USART1_UART_Init+0x60>)
 8018f84:	f006 fb92 	bl	801f6ac <HAL_UART_Init>
 8018f88:	4603      	mov	r3, r0
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d001      	beq.n	8018f92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8018f8e:	f7ff f829 	bl	8017fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018f92:	2280      	movs	r2, #128	; 0x80
 8018f94:	4904      	ldr	r1, [pc, #16]	; (8018fa8 <MX_USART1_UART_Init+0x68>)
 8018f96:	4802      	ldr	r0, [pc, #8]	; (8018fa0 <MX_USART1_UART_Init+0x60>)
 8018f98:	f007 fef4 	bl	8020d84 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8018f9c:	bf00      	nop
 8018f9e:	bd80      	pop	{r7, pc}
 8018fa0:	2000dcc4 	.word	0x2000dcc4
 8018fa4:	40011000 	.word	0x40011000
 8018fa8:	2000d89c 	.word	0x2000d89c

08018fac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b0b4      	sub	sp, #208	; 0xd0
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018fb4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8018fb8:	2200      	movs	r2, #0
 8018fba:	601a      	str	r2, [r3, #0]
 8018fbc:	605a      	str	r2, [r3, #4]
 8018fbe:	609a      	str	r2, [r3, #8]
 8018fc0:	60da      	str	r2, [r3, #12]
 8018fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018fc8:	2290      	movs	r2, #144	; 0x90
 8018fca:	2100      	movs	r1, #0
 8018fcc:	4618      	mov	r0, r3
 8018fce:	f00d fd25 	bl	8026a1c <memset>
  if(uartHandle->Instance==UART4)
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	4aa7      	ldr	r2, [pc, #668]	; (8019274 <HAL_UART_MspInit+0x2c8>)
 8018fd8:	4293      	cmp	r3, r2
 8018fda:	d145      	bne.n	8019068 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8018fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018fe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018fea:	4618      	mov	r0, r3
 8018fec:	f004 fdfe 	bl	801dbec <HAL_RCCEx_PeriphCLKConfig>
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d001      	beq.n	8018ffa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8018ff6:	f7fe fff5 	bl	8017fe4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8018ffa:	4b9f      	ldr	r3, [pc, #636]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8018ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ffe:	4a9e      	ldr	r2, [pc, #632]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8019000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8019004:	6413      	str	r3, [r2, #64]	; 0x40
 8019006:	4b9c      	ldr	r3, [pc, #624]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8019008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801900a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801900e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019010:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8019012:	4b99      	ldr	r3, [pc, #612]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8019014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019016:	4a98      	ldr	r2, [pc, #608]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8019018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801901c:	6313      	str	r3, [r2, #48]	; 0x30
 801901e:	4b96      	ldr	r3, [pc, #600]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8019020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019026:	627b      	str	r3, [r7, #36]	; 0x24
 8019028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 801902a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801902e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019032:	2302      	movs	r3, #2
 8019034:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019038:	2300      	movs	r3, #0
 801903a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801903e:	2303      	movs	r3, #3
 8019040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8019044:	2308      	movs	r3, #8
 8019046:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801904a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801904e:	4619      	mov	r1, r3
 8019050:	488a      	ldr	r0, [pc, #552]	; (801927c <HAL_UART_MspInit+0x2d0>)
 8019052:	f003 f8cd 	bl	801c1f0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8019056:	2200      	movs	r2, #0
 8019058:	2105      	movs	r1, #5
 801905a:	2034      	movs	r0, #52	; 0x34
 801905c:	f001 fd9d 	bl	801ab9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8019060:	2034      	movs	r0, #52	; 0x34
 8019062:	f001 fdb6 	bl	801abd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8019066:	e100      	b.n	801926a <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	4a84      	ldr	r2, [pc, #528]	; (8019280 <HAL_UART_MspInit+0x2d4>)
 801906e:	4293      	cmp	r3, r2
 8019070:	d167      	bne.n	8019142 <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8019072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019076:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8019078:	2300      	movs	r3, #0
 801907a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801907e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019082:	4618      	mov	r0, r3
 8019084:	f004 fdb2 	bl	801dbec <HAL_RCCEx_PeriphCLKConfig>
 8019088:	4603      	mov	r3, r0
 801908a:	2b00      	cmp	r3, #0
 801908c:	d001      	beq.n	8019092 <HAL_UART_MspInit+0xe6>
      Error_Handler();
 801908e:	f7fe ffa9 	bl	8017fe4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8019092:	4b79      	ldr	r3, [pc, #484]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8019094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019096:	4a78      	ldr	r2, [pc, #480]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8019098:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801909c:	6413      	str	r3, [r2, #64]	; 0x40
 801909e:	4b76      	ldr	r3, [pc, #472]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 80190a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80190a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80190a6:	623b      	str	r3, [r7, #32]
 80190a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80190aa:	4b73      	ldr	r3, [pc, #460]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 80190ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190ae:	4a72      	ldr	r2, [pc, #456]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 80190b0:	f043 0308 	orr.w	r3, r3, #8
 80190b4:	6313      	str	r3, [r2, #48]	; 0x30
 80190b6:	4b70      	ldr	r3, [pc, #448]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 80190b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190ba:	f003 0308 	and.w	r3, r3, #8
 80190be:	61fb      	str	r3, [r7, #28]
 80190c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80190c2:	4b6d      	ldr	r3, [pc, #436]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 80190c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190c6:	4a6c      	ldr	r2, [pc, #432]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 80190c8:	f043 0302 	orr.w	r3, r3, #2
 80190cc:	6313      	str	r3, [r2, #48]	; 0x30
 80190ce:	4b6a      	ldr	r3, [pc, #424]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 80190d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190d2:	f003 0302 	and.w	r3, r3, #2
 80190d6:	61bb      	str	r3, [r7, #24]
 80190d8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 80190da:	2304      	movs	r3, #4
 80190dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80190e0:	2302      	movs	r3, #2
 80190e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80190e6:	2300      	movs	r3, #0
 80190e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80190ec:	2303      	movs	r3, #3
 80190ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80190f2:	2308      	movs	r3, #8
 80190f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 80190f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80190fc:	4619      	mov	r1, r3
 80190fe:	4861      	ldr	r0, [pc, #388]	; (8019284 <HAL_UART_MspInit+0x2d8>)
 8019100:	f003 f876 	bl	801c1f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8019104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019108:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801910c:	2302      	movs	r3, #2
 801910e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019112:	2300      	movs	r3, #0
 8019114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019118:	2303      	movs	r3, #3
 801911a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 801911e:	2307      	movs	r3, #7
 8019120:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8019124:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8019128:	4619      	mov	r1, r3
 801912a:	4857      	ldr	r0, [pc, #348]	; (8019288 <HAL_UART_MspInit+0x2dc>)
 801912c:	f003 f860 	bl	801c1f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8019130:	2200      	movs	r2, #0
 8019132:	2105      	movs	r1, #5
 8019134:	2035      	movs	r0, #53	; 0x35
 8019136:	f001 fd30 	bl	801ab9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 801913a:	2035      	movs	r0, #53	; 0x35
 801913c:	f001 fd49 	bl	801abd2 <HAL_NVIC_EnableIRQ>
}
 8019140:	e093      	b.n	801926a <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	4a51      	ldr	r2, [pc, #324]	; (801928c <HAL_UART_MspInit+0x2e0>)
 8019148:	4293      	cmp	r3, r2
 801914a:	d145      	bne.n	80191d8 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 801914c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019150:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8019152:	2300      	movs	r3, #0
 8019154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8019158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801915c:	4618      	mov	r0, r3
 801915e:	f004 fd45 	bl	801dbec <HAL_RCCEx_PeriphCLKConfig>
 8019162:	4603      	mov	r3, r0
 8019164:	2b00      	cmp	r3, #0
 8019166:	d001      	beq.n	801916c <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8019168:	f7fe ff3c 	bl	8017fe4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 801916c:	4b42      	ldr	r3, [pc, #264]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 801916e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019170:	4a41      	ldr	r2, [pc, #260]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8019172:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8019176:	6413      	str	r3, [r2, #64]	; 0x40
 8019178:	4b3f      	ldr	r3, [pc, #252]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 801917a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801917c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8019180:	617b      	str	r3, [r7, #20]
 8019182:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8019184:	4b3c      	ldr	r3, [pc, #240]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8019186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019188:	4a3b      	ldr	r2, [pc, #236]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 801918a:	f043 0320 	orr.w	r3, r3, #32
 801918e:	6313      	str	r3, [r2, #48]	; 0x30
 8019190:	4b39      	ldr	r3, [pc, #228]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8019192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019194:	f003 0320 	and.w	r3, r3, #32
 8019198:	613b      	str	r3, [r7, #16]
 801919a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 801919c:	23c0      	movs	r3, #192	; 0xc0
 801919e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80191a2:	2302      	movs	r3, #2
 80191a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80191a8:	2300      	movs	r3, #0
 80191aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80191ae:	2303      	movs	r3, #3
 80191b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80191b4:	2308      	movs	r3, #8
 80191b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80191ba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80191be:	4619      	mov	r1, r3
 80191c0:	4833      	ldr	r0, [pc, #204]	; (8019290 <HAL_UART_MspInit+0x2e4>)
 80191c2:	f003 f815 	bl	801c1f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80191c6:	2200      	movs	r2, #0
 80191c8:	2105      	movs	r1, #5
 80191ca:	2052      	movs	r0, #82	; 0x52
 80191cc:	f001 fce5 	bl	801ab9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80191d0:	2052      	movs	r0, #82	; 0x52
 80191d2:	f001 fcfe 	bl	801abd2 <HAL_NVIC_EnableIRQ>
}
 80191d6:	e048      	b.n	801926a <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	4a2d      	ldr	r2, [pc, #180]	; (8019294 <HAL_UART_MspInit+0x2e8>)
 80191de:	4293      	cmp	r3, r2
 80191e0:	d143      	bne.n	801926a <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80191e2:	2340      	movs	r3, #64	; 0x40
 80191e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80191e6:	2300      	movs	r3, #0
 80191e8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80191ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80191ee:	4618      	mov	r0, r3
 80191f0:	f004 fcfc 	bl	801dbec <HAL_RCCEx_PeriphCLKConfig>
 80191f4:	4603      	mov	r3, r0
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d001      	beq.n	80191fe <HAL_UART_MspInit+0x252>
      Error_Handler();
 80191fa:	f7fe fef3 	bl	8017fe4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80191fe:	4b1e      	ldr	r3, [pc, #120]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8019200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019202:	4a1d      	ldr	r2, [pc, #116]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8019204:	f043 0310 	orr.w	r3, r3, #16
 8019208:	6453      	str	r3, [r2, #68]	; 0x44
 801920a:	4b1b      	ldr	r3, [pc, #108]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 801920c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801920e:	f003 0310 	and.w	r3, r3, #16
 8019212:	60fb      	str	r3, [r7, #12]
 8019214:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019216:	4b18      	ldr	r3, [pc, #96]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8019218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801921a:	4a17      	ldr	r2, [pc, #92]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 801921c:	f043 0301 	orr.w	r3, r3, #1
 8019220:	6313      	str	r3, [r2, #48]	; 0x30
 8019222:	4b15      	ldr	r3, [pc, #84]	; (8019278 <HAL_UART_MspInit+0x2cc>)
 8019224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019226:	f003 0301 	and.w	r3, r3, #1
 801922a:	60bb      	str	r3, [r7, #8]
 801922c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 801922e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8019232:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019236:	2302      	movs	r3, #2
 8019238:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801923c:	2300      	movs	r3, #0
 801923e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019242:	2303      	movs	r3, #3
 8019244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8019248:	2307      	movs	r3, #7
 801924a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801924e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8019252:	4619      	mov	r1, r3
 8019254:	4810      	ldr	r0, [pc, #64]	; (8019298 <HAL_UART_MspInit+0x2ec>)
 8019256:	f002 ffcb 	bl	801c1f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 801925a:	2200      	movs	r2, #0
 801925c:	2107      	movs	r1, #7
 801925e:	2025      	movs	r0, #37	; 0x25
 8019260:	f001 fc9b 	bl	801ab9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8019264:	2025      	movs	r0, #37	; 0x25
 8019266:	f001 fcb4 	bl	801abd2 <HAL_NVIC_EnableIRQ>
}
 801926a:	bf00      	nop
 801926c:	37d0      	adds	r7, #208	; 0xd0
 801926e:	46bd      	mov	sp, r7
 8019270:	bd80      	pop	{r7, pc}
 8019272:	bf00      	nop
 8019274:	40004c00 	.word	0x40004c00
 8019278:	40023800 	.word	0x40023800
 801927c:	40021c00 	.word	0x40021c00
 8019280:	40005000 	.word	0x40005000
 8019284:	40020c00 	.word	0x40020c00
 8019288:	40020400 	.word	0x40020400
 801928c:	40007800 	.word	0x40007800
 8019290:	40021400 	.word	0x40021400
 8019294:	40011000 	.word	0x40011000
 8019298:	40020000 	.word	0x40020000

0801929c <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 801929c:	b580      	push	{r7, lr}
 801929e:	b082      	sub	sp, #8
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80192a4:	4b17      	ldr	r3, [pc, #92]	; (8019304 <UART4_Init+0x68>)
 80192a6:	4a18      	ldr	r2, [pc, #96]	; (8019308 <UART4_Init+0x6c>)
 80192a8:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 80192aa:	4a16      	ldr	r2, [pc, #88]	; (8019304 <UART4_Init+0x68>)
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80192b0:	4b14      	ldr	r3, [pc, #80]	; (8019304 <UART4_Init+0x68>)
 80192b2:	2200      	movs	r2, #0
 80192b4:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80192b6:	4b13      	ldr	r3, [pc, #76]	; (8019304 <UART4_Init+0x68>)
 80192b8:	2200      	movs	r2, #0
 80192ba:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80192bc:	4b11      	ldr	r3, [pc, #68]	; (8019304 <UART4_Init+0x68>)
 80192be:	2200      	movs	r2, #0
 80192c0:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80192c2:	4b10      	ldr	r3, [pc, #64]	; (8019304 <UART4_Init+0x68>)
 80192c4:	220c      	movs	r2, #12
 80192c6:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80192c8:	4b0e      	ldr	r3, [pc, #56]	; (8019304 <UART4_Init+0x68>)
 80192ca:	2200      	movs	r2, #0
 80192cc:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80192ce:	4b0d      	ldr	r3, [pc, #52]	; (8019304 <UART4_Init+0x68>)
 80192d0:	2200      	movs	r2, #0
 80192d2:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80192d4:	4b0b      	ldr	r3, [pc, #44]	; (8019304 <UART4_Init+0x68>)
 80192d6:	2200      	movs	r2, #0
 80192d8:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80192da:	4b0a      	ldr	r3, [pc, #40]	; (8019304 <UART4_Init+0x68>)
 80192dc:	2200      	movs	r2, #0
 80192de:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80192e0:	4808      	ldr	r0, [pc, #32]	; (8019304 <UART4_Init+0x68>)
 80192e2:	f006 f9e3 	bl	801f6ac <HAL_UART_Init>
 80192e6:	4603      	mov	r3, r0
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d001      	beq.n	80192f0 <UART4_Init+0x54>
	{
		Error_Handler();
 80192ec:	f7fe fe7a 	bl	8017fe4 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80192f0:	2280      	movs	r2, #128	; 0x80
 80192f2:	4906      	ldr	r1, [pc, #24]	; (801930c <UART4_Init+0x70>)
 80192f4:	4803      	ldr	r0, [pc, #12]	; (8019304 <UART4_Init+0x68>)
 80192f6:	f007 fd45 	bl	8020d84 <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 80192fa:	bf00      	nop
 80192fc:	3708      	adds	r7, #8
 80192fe:	46bd      	mov	sp, r7
 8019300:	bd80      	pop	{r7, pc}
 8019302:	bf00      	nop
 8019304:	2000da9c 	.word	0x2000da9c
 8019308:	40004c00 	.word	0x40004c00
 801930c:	2000da1c 	.word	0x2000da1c

08019310 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b084      	sub	sp, #16
 8019314:	af00      	add	r7, sp, #0
 8019316:	6078      	str	r0, [r7, #4]
 8019318:	460b      	mov	r3, r1
 801931a:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	4a68      	ldr	r2, [pc, #416]	; (80194c4 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8019322:	4293      	cmp	r3, r2
 8019324:	d129      	bne.n	801937a <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8019326:	2280      	movs	r2, #128	; 0x80
 8019328:	4967      	ldr	r1, [pc, #412]	; (80194c8 <HAL_UARTEx_RxEventCallback+0x1b8>)
 801932a:	4868      	ldr	r0, [pc, #416]	; (80194cc <HAL_UARTEx_RxEventCallback+0x1bc>)
 801932c:	f007 fd2a 	bl	8020d84 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8019330:	2300      	movs	r3, #0
 8019332:	81fb      	strh	r3, [r7, #14]
 8019334:	e017      	b.n	8019366 <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 8019336:	89fa      	ldrh	r2, [r7, #14]
 8019338:	4b65      	ldr	r3, [pc, #404]	; (80194d0 <HAL_UARTEx_RxEventCallback+0x1c0>)
 801933a:	881b      	ldrh	r3, [r3, #0]
 801933c:	1c59      	adds	r1, r3, #1
 801933e:	b288      	uxth	r0, r1
 8019340:	4963      	ldr	r1, [pc, #396]	; (80194d0 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8019342:	8008      	strh	r0, [r1, #0]
 8019344:	4619      	mov	r1, r3
 8019346:	4b60      	ldr	r3, [pc, #384]	; (80194c8 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8019348:	5c9a      	ldrb	r2, [r3, r2]
 801934a:	4b61      	ldr	r3, [pc, #388]	; (80194d0 <HAL_UARTEx_RxEventCallback+0x1c0>)
 801934c:	440b      	add	r3, r1
 801934e:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 8019350:	4b5f      	ldr	r3, [pc, #380]	; (80194d0 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8019352:	881b      	ldrh	r3, [r3, #0]
 8019354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019358:	d302      	bcc.n	8019360 <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 801935a:	4b5d      	ldr	r3, [pc, #372]	; (80194d0 <HAL_UARTEx_RxEventCallback+0x1c0>)
 801935c:	2200      	movs	r2, #0
 801935e:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 8019360:	89fb      	ldrh	r3, [r7, #14]
 8019362:	3301      	adds	r3, #1
 8019364:	81fb      	strh	r3, [r7, #14]
 8019366:	89fa      	ldrh	r2, [r7, #14]
 8019368:	887b      	ldrh	r3, [r7, #2]
 801936a:	429a      	cmp	r2, r3
 801936c:	d3e3      	bcc.n	8019336 <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 801936e:	f000 fc33 	bl	8019bd8 <HAL_GetTick>
 8019372:	4603      	mov	r3, r0
 8019374:	4a57      	ldr	r2, [pc, #348]	; (80194d4 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8019376:	6013      	str	r3, [r2, #0]
		{
			DataIntervalFound = HAL_Elaps_Ticks(UART4_Intr_Clk);
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 8019378:	e0a0      	b.n	80194bc <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART5)
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	4a56      	ldr	r2, [pc, #344]	; (80194d8 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8019380:	4293      	cmp	r3, r2
 8019382:	d129      	bne.n	80193d8 <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8019384:	2280      	movs	r2, #128	; 0x80
 8019386:	4955      	ldr	r1, [pc, #340]	; (80194dc <HAL_UARTEx_RxEventCallback+0x1cc>)
 8019388:	4855      	ldr	r0, [pc, #340]	; (80194e0 <HAL_UARTEx_RxEventCallback+0x1d0>)
 801938a:	f007 fcfb 	bl	8020d84 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 801938e:	2300      	movs	r3, #0
 8019390:	81bb      	strh	r3, [r7, #12]
 8019392:	e01c      	b.n	80193ce <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 8019394:	89ba      	ldrh	r2, [r7, #12]
 8019396:	4b53      	ldr	r3, [pc, #332]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8019398:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 801939c:	1c59      	adds	r1, r3, #1
 801939e:	b288      	uxth	r0, r1
 80193a0:	4950      	ldr	r1, [pc, #320]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80193a2:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 80193a6:	4619      	mov	r1, r3
 80193a8:	4b4c      	ldr	r3, [pc, #304]	; (80194dc <HAL_UARTEx_RxEventCallback+0x1cc>)
 80193aa:	5c9a      	ldrb	r2, [r3, r2]
 80193ac:	4b4d      	ldr	r3, [pc, #308]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80193ae:	440b      	add	r3, r1
 80193b0:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 80193b4:	4b4b      	ldr	r3, [pc, #300]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80193b6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80193ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80193be:	d303      	bcc.n	80193c8 <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 80193c0:	4b48      	ldr	r3, [pc, #288]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80193c2:	2200      	movs	r2, #0
 80193c4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 80193c8:	89bb      	ldrh	r3, [r7, #12]
 80193ca:	3301      	adds	r3, #1
 80193cc:	81bb      	strh	r3, [r7, #12]
 80193ce:	89ba      	ldrh	r2, [r7, #12]
 80193d0:	887b      	ldrh	r3, [r7, #2]
 80193d2:	429a      	cmp	r2, r3
 80193d4:	d3de      	bcc.n	8019394 <HAL_UARTEx_RxEventCallback+0x84>
}
 80193d6:	e071      	b.n	80194bc <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART7)
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	4a42      	ldr	r2, [pc, #264]	; (80194e8 <HAL_UARTEx_RxEventCallback+0x1d8>)
 80193de:	4293      	cmp	r3, r2
 80193e0:	d129      	bne.n	8019436 <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80193e2:	2280      	movs	r2, #128	; 0x80
 80193e4:	4941      	ldr	r1, [pc, #260]	; (80194ec <HAL_UARTEx_RxEventCallback+0x1dc>)
 80193e6:	4842      	ldr	r0, [pc, #264]	; (80194f0 <HAL_UARTEx_RxEventCallback+0x1e0>)
 80193e8:	f007 fccc 	bl	8020d84 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 80193ec:	2300      	movs	r3, #0
 80193ee:	817b      	strh	r3, [r7, #10]
 80193f0:	e01c      	b.n	801942c <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 80193f2:	897a      	ldrh	r2, [r7, #10]
 80193f4:	4b3b      	ldr	r3, [pc, #236]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80193f6:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 80193fa:	1c59      	adds	r1, r3, #1
 80193fc:	b288      	uxth	r0, r1
 80193fe:	4939      	ldr	r1, [pc, #228]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8019400:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 8019404:	4619      	mov	r1, r3
 8019406:	4b39      	ldr	r3, [pc, #228]	; (80194ec <HAL_UARTEx_RxEventCallback+0x1dc>)
 8019408:	5c9a      	ldrb	r2, [r3, r2]
 801940a:	4b36      	ldr	r3, [pc, #216]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 801940c:	440b      	add	r3, r1
 801940e:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 8019412:	4b34      	ldr	r3, [pc, #208]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8019414:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8019418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801941c:	d303      	bcc.n	8019426 <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 801941e:	4b31      	ldr	r3, [pc, #196]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8019420:	2200      	movs	r2, #0
 8019422:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 8019426:	897b      	ldrh	r3, [r7, #10]
 8019428:	3301      	adds	r3, #1
 801942a:	817b      	strh	r3, [r7, #10]
 801942c:	897a      	ldrh	r2, [r7, #10]
 801942e:	887b      	ldrh	r3, [r7, #2]
 8019430:	429a      	cmp	r2, r3
 8019432:	d3de      	bcc.n	80193f2 <HAL_UARTEx_RxEventCallback+0xe2>
}
 8019434:	e042      	b.n	80194bc <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART4)
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	4a2e      	ldr	r2, [pc, #184]	; (80194f4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 801943c:	4293      	cmp	r3, r2
 801943e:	d13d      	bne.n	80194bc <HAL_UARTEx_RxEventCallback+0x1ac>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8019440:	2280      	movs	r2, #128	; 0x80
 8019442:	492d      	ldr	r1, [pc, #180]	; (80194f8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8019444:	482d      	ldr	r0, [pc, #180]	; (80194fc <HAL_UARTEx_RxEventCallback+0x1ec>)
 8019446:	f007 fc9d 	bl	8020d84 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 801944a:	2300      	movs	r3, #0
 801944c:	813b      	strh	r3, [r7, #8]
 801944e:	e01c      	b.n	801948a <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 8019450:	893a      	ldrh	r2, [r7, #8]
 8019452:	4b24      	ldr	r3, [pc, #144]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8019454:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8019458:	1c59      	adds	r1, r3, #1
 801945a:	b288      	uxth	r0, r1
 801945c:	4921      	ldr	r1, [pc, #132]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 801945e:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 8019462:	4619      	mov	r1, r3
 8019464:	4b24      	ldr	r3, [pc, #144]	; (80194f8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8019466:	5c9a      	ldrb	r2, [r3, r2]
 8019468:	4b1e      	ldr	r3, [pc, #120]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 801946a:	440b      	add	r3, r1
 801946c:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 8019470:	4b1c      	ldr	r3, [pc, #112]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8019472:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8019476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801947a:	d303      	bcc.n	8019484 <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 801947c:	4b19      	ldr	r3, [pc, #100]	; (80194e4 <HAL_UARTEx_RxEventCallback+0x1d4>)
 801947e:	2200      	movs	r2, #0
 8019480:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 8019484:	893b      	ldrh	r3, [r7, #8]
 8019486:	3301      	adds	r3, #1
 8019488:	813b      	strh	r3, [r7, #8]
 801948a:	893a      	ldrh	r2, [r7, #8]
 801948c:	887b      	ldrh	r3, [r7, #2]
 801948e:	429a      	cmp	r2, r3
 8019490:	d3de      	bcc.n	8019450 <HAL_UARTEx_RxEventCallback+0x140>
		if(HAL_Elaps_Ticks(UART4_Intr_Clk) > 50)
 8019492:	4b1b      	ldr	r3, [pc, #108]	; (8019500 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	4618      	mov	r0, r3
 8019498:	f7f7 f880 	bl	801059c <HAL_Elaps_Ticks>
 801949c:	4603      	mov	r3, r0
 801949e:	2b32      	cmp	r3, #50	; 0x32
 80194a0:	d907      	bls.n	80194b2 <HAL_UARTEx_RxEventCallback+0x1a2>
			DataIntervalFound = HAL_Elaps_Ticks(UART4_Intr_Clk);
 80194a2:	4b17      	ldr	r3, [pc, #92]	; (8019500 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	4618      	mov	r0, r3
 80194a8:	f7f7 f878 	bl	801059c <HAL_Elaps_Ticks>
 80194ac:	4603      	mov	r3, r0
 80194ae:	4a15      	ldr	r2, [pc, #84]	; (8019504 <HAL_UARTEx_RxEventCallback+0x1f4>)
 80194b0:	6013      	str	r3, [r2, #0]
		UART4_Intr_Clk = HAL_GetTick();
 80194b2:	f000 fb91 	bl	8019bd8 <HAL_GetTick>
 80194b6:	4603      	mov	r3, r0
 80194b8:	4a11      	ldr	r2, [pc, #68]	; (8019500 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80194ba:	6013      	str	r3, [r2, #0]
}
 80194bc:	bf00      	nop
 80194be:	3710      	adds	r7, #16
 80194c0:	46bd      	mov	sp, r7
 80194c2:	bd80      	pop	{r7, pc}
 80194c4:	40011000 	.word	0x40011000
 80194c8:	2000d89c 	.word	0x2000d89c
 80194cc:	2000dcc4 	.word	0x2000dcc4
 80194d0:	2000d098 	.word	0x2000d098
 80194d4:	2000c080 	.word	0x2000c080
 80194d8:	40005000 	.word	0x40005000
 80194dc:	2000d91c 	.word	0x2000d91c
 80194e0:	2000db54 	.word	0x2000db54
 80194e4:	2000c088 	.word	0x2000c088
 80194e8:	40007800 	.word	0x40007800
 80194ec:	2000d99c 	.word	0x2000d99c
 80194f0:	2000dc0c 	.word	0x2000dc0c
 80194f4:	40004c00 	.word	0x40004c00
 80194f8:	2000da1c 	.word	0x2000da1c
 80194fc:	2000da9c 	.word	0x2000da9c
 8019500:	2000c07c 	.word	0x2000c07c
 8019504:	2000c084 	.word	0x2000c084

08019508 <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 8019508:	b480      	push	{r7}
 801950a:	b085      	sub	sp, #20
 801950c:	af00      	add	r7, sp, #0
 801950e:	4603      	mov	r3, r0
 8019510:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 8019512:	2300      	movs	r3, #0
 8019514:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 8019516:	79fb      	ldrb	r3, [r7, #7]
 8019518:	2b00      	cmp	r3, #0
 801951a:	d115      	bne.n	8019548 <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 801951c:	79fa      	ldrb	r2, [r7, #7]
 801951e:	4918      	ldr	r1, [pc, #96]	; (8019580 <Com_DataReady+0x78>)
 8019520:	4613      	mov	r3, r2
 8019522:	025b      	lsls	r3, r3, #9
 8019524:	4413      	add	r3, r2
 8019526:	009b      	lsls	r3, r3, #2
 8019528:	440b      	add	r3, r1
 801952a:	8819      	ldrh	r1, [r3, #0]
 801952c:	79fa      	ldrb	r2, [r7, #7]
 801952e:	4814      	ldr	r0, [pc, #80]	; (8019580 <Com_DataReady+0x78>)
 8019530:	4613      	mov	r3, r2
 8019532:	025b      	lsls	r3, r3, #9
 8019534:	4413      	add	r3, r2
 8019536:	009b      	lsls	r3, r3, #2
 8019538:	4403      	add	r3, r0
 801953a:	3302      	adds	r3, #2
 801953c:	881b      	ldrh	r3, [r3, #0]
 801953e:	4299      	cmp	r1, r3
 8019540:	d017      	beq.n	8019572 <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8019542:	2301      	movs	r3, #1
 8019544:	73fb      	strb	r3, [r7, #15]
 8019546:	e014      	b.n	8019572 <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 8019548:	79fa      	ldrb	r2, [r7, #7]
 801954a:	490e      	ldr	r1, [pc, #56]	; (8019584 <Com_DataReady+0x7c>)
 801954c:	4613      	mov	r3, r2
 801954e:	021b      	lsls	r3, r3, #8
 8019550:	4413      	add	r3, r2
 8019552:	009b      	lsls	r3, r3, #2
 8019554:	440b      	add	r3, r1
 8019556:	8819      	ldrh	r1, [r3, #0]
 8019558:	79fa      	ldrb	r2, [r7, #7]
 801955a:	480a      	ldr	r0, [pc, #40]	; (8019584 <Com_DataReady+0x7c>)
 801955c:	4613      	mov	r3, r2
 801955e:	021b      	lsls	r3, r3, #8
 8019560:	4413      	add	r3, r2
 8019562:	009b      	lsls	r3, r3, #2
 8019564:	4403      	add	r3, r0
 8019566:	3302      	adds	r3, #2
 8019568:	881b      	ldrh	r3, [r3, #0]
 801956a:	4299      	cmp	r1, r3
 801956c:	d001      	beq.n	8019572 <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 801956e:	2301      	movs	r3, #1
 8019570:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 8019572:	7bfb      	ldrb	r3, [r7, #15]
}
 8019574:	4618      	mov	r0, r3
 8019576:	3714      	adds	r7, #20
 8019578:	46bd      	mov	sp, r7
 801957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801957e:	4770      	bx	lr
 8019580:	2000d098 	.word	0x2000d098
 8019584:	2000c088 	.word	0x2000c088

08019588 <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 8019588:	b4b0      	push	{r4, r5, r7}
 801958a:	b085      	sub	sp, #20
 801958c:	af00      	add	r7, sp, #0
 801958e:	4603      	mov	r3, r0
 8019590:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 8019592:	2300      	movs	r3, #0
 8019594:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 8019596:	79fb      	ldrb	r3, [r7, #7]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d135      	bne.n	8019608 <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 801959c:	79f9      	ldrb	r1, [r7, #7]
 801959e:	79fa      	ldrb	r2, [r7, #7]
 80195a0:	4837      	ldr	r0, [pc, #220]	; (8019680 <Com_Get_Byte+0xf8>)
 80195a2:	4613      	mov	r3, r2
 80195a4:	025b      	lsls	r3, r3, #9
 80195a6:	4413      	add	r3, r2
 80195a8:	009b      	lsls	r3, r3, #2
 80195aa:	4403      	add	r3, r0
 80195ac:	3302      	adds	r3, #2
 80195ae:	8818      	ldrh	r0, [r3, #0]
 80195b0:	1c43      	adds	r3, r0, #1
 80195b2:	b29d      	uxth	r5, r3
 80195b4:	4c32      	ldr	r4, [pc, #200]	; (8019680 <Com_Get_Byte+0xf8>)
 80195b6:	4613      	mov	r3, r2
 80195b8:	025b      	lsls	r3, r3, #9
 80195ba:	4413      	add	r3, r2
 80195bc:	009b      	lsls	r3, r3, #2
 80195be:	4423      	add	r3, r4
 80195c0:	3302      	adds	r3, #2
 80195c2:	462a      	mov	r2, r5
 80195c4:	801a      	strh	r2, [r3, #0]
 80195c6:	4a2e      	ldr	r2, [pc, #184]	; (8019680 <Com_Get_Byte+0xf8>)
 80195c8:	460b      	mov	r3, r1
 80195ca:	025b      	lsls	r3, r3, #9
 80195cc:	440b      	add	r3, r1
 80195ce:	009b      	lsls	r3, r3, #2
 80195d0:	4413      	add	r3, r2
 80195d2:	4403      	add	r3, r0
 80195d4:	3304      	adds	r3, #4
 80195d6:	781b      	ldrb	r3, [r3, #0]
 80195d8:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 80195da:	79fa      	ldrb	r2, [r7, #7]
 80195dc:	4928      	ldr	r1, [pc, #160]	; (8019680 <Com_Get_Byte+0xf8>)
 80195de:	4613      	mov	r3, r2
 80195e0:	025b      	lsls	r3, r3, #9
 80195e2:	4413      	add	r3, r2
 80195e4:	009b      	lsls	r3, r3, #2
 80195e6:	440b      	add	r3, r1
 80195e8:	3302      	adds	r3, #2
 80195ea:	881b      	ldrh	r3, [r3, #0]
 80195ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80195f0:	d33f      	bcc.n	8019672 <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 80195f2:	79fa      	ldrb	r2, [r7, #7]
 80195f4:	4922      	ldr	r1, [pc, #136]	; (8019680 <Com_Get_Byte+0xf8>)
 80195f6:	4613      	mov	r3, r2
 80195f8:	025b      	lsls	r3, r3, #9
 80195fa:	4413      	add	r3, r2
 80195fc:	009b      	lsls	r3, r3, #2
 80195fe:	440b      	add	r3, r1
 8019600:	3302      	adds	r3, #2
 8019602:	2200      	movs	r2, #0
 8019604:	801a      	strh	r2, [r3, #0]
 8019606:	e034      	b.n	8019672 <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 8019608:	79f9      	ldrb	r1, [r7, #7]
 801960a:	79fa      	ldrb	r2, [r7, #7]
 801960c:	481d      	ldr	r0, [pc, #116]	; (8019684 <Com_Get_Byte+0xfc>)
 801960e:	4613      	mov	r3, r2
 8019610:	021b      	lsls	r3, r3, #8
 8019612:	4413      	add	r3, r2
 8019614:	009b      	lsls	r3, r3, #2
 8019616:	4403      	add	r3, r0
 8019618:	3302      	adds	r3, #2
 801961a:	8818      	ldrh	r0, [r3, #0]
 801961c:	1c43      	adds	r3, r0, #1
 801961e:	b29d      	uxth	r5, r3
 8019620:	4c18      	ldr	r4, [pc, #96]	; (8019684 <Com_Get_Byte+0xfc>)
 8019622:	4613      	mov	r3, r2
 8019624:	021b      	lsls	r3, r3, #8
 8019626:	4413      	add	r3, r2
 8019628:	009b      	lsls	r3, r3, #2
 801962a:	4423      	add	r3, r4
 801962c:	3302      	adds	r3, #2
 801962e:	462a      	mov	r2, r5
 8019630:	801a      	strh	r2, [r3, #0]
 8019632:	4a14      	ldr	r2, [pc, #80]	; (8019684 <Com_Get_Byte+0xfc>)
 8019634:	460b      	mov	r3, r1
 8019636:	021b      	lsls	r3, r3, #8
 8019638:	440b      	add	r3, r1
 801963a:	009b      	lsls	r3, r3, #2
 801963c:	4413      	add	r3, r2
 801963e:	4403      	add	r3, r0
 8019640:	3304      	adds	r3, #4
 8019642:	781b      	ldrb	r3, [r3, #0]
 8019644:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 8019646:	79fa      	ldrb	r2, [r7, #7]
 8019648:	490e      	ldr	r1, [pc, #56]	; (8019684 <Com_Get_Byte+0xfc>)
 801964a:	4613      	mov	r3, r2
 801964c:	021b      	lsls	r3, r3, #8
 801964e:	4413      	add	r3, r2
 8019650:	009b      	lsls	r3, r3, #2
 8019652:	440b      	add	r3, r1
 8019654:	3302      	adds	r3, #2
 8019656:	881b      	ldrh	r3, [r3, #0]
 8019658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801965c:	d309      	bcc.n	8019672 <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 801965e:	79fa      	ldrb	r2, [r7, #7]
 8019660:	4908      	ldr	r1, [pc, #32]	; (8019684 <Com_Get_Byte+0xfc>)
 8019662:	4613      	mov	r3, r2
 8019664:	021b      	lsls	r3, r3, #8
 8019666:	4413      	add	r3, r2
 8019668:	009b      	lsls	r3, r3, #2
 801966a:	440b      	add	r3, r1
 801966c:	3302      	adds	r3, #2
 801966e:	2200      	movs	r2, #0
 8019670:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 8019672:	7bfb      	ldrb	r3, [r7, #15]
}
 8019674:	4618      	mov	r0, r3
 8019676:	3714      	adds	r7, #20
 8019678:	46bd      	mov	sp, r7
 801967a:	bcb0      	pop	{r4, r5, r7}
 801967c:	4770      	bx	lr
 801967e:	bf00      	nop
 8019680:	2000d098 	.word	0x2000d098
 8019684:	2000c088 	.word	0x2000c088

08019688 <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b084      	sub	sp, #16
 801968c:	af00      	add	r7, sp, #0
 801968e:	4603      	mov	r3, r0
 8019690:	6039      	str	r1, [r7, #0]
 8019692:	71fb      	strb	r3, [r7, #7]
 8019694:	4613      	mov	r3, r2
 8019696:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 8019698:	2300      	movs	r3, #0
 801969a:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 801969c:	2300      	movs	r3, #0
 801969e:	81fb      	strh	r3, [r7, #14]
 80196a0:	e03a      	b.n	8019718 <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 80196a2:	89fb      	ldrh	r3, [r7, #14]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d00a      	beq.n	80196be <CommTransmitMessage+0x36>
 80196a8:	89fb      	ldrh	r3, [r7, #14]
 80196aa:	683a      	ldr	r2, [r7, #0]
 80196ac:	4413      	add	r3, r2
 80196ae:	781b      	ldrb	r3, [r3, #0]
 80196b0:	2b24      	cmp	r3, #36	; 0x24
 80196b2:	d104      	bne.n	80196be <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 80196b4:	79fb      	ldrb	r3, [r7, #7]
 80196b6:	2105      	movs	r1, #5
 80196b8:	4618      	mov	r0, r3
 80196ba:	f000 f835 	bl	8019728 <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 80196be:	89fb      	ldrh	r3, [r7, #14]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d00e      	beq.n	80196e2 <CommTransmitMessage+0x5a>
 80196c4:	89fa      	ldrh	r2, [r7, #14]
 80196c6:	88bb      	ldrh	r3, [r7, #4]
 80196c8:	429a      	cmp	r2, r3
 80196ca:	d20a      	bcs.n	80196e2 <CommTransmitMessage+0x5a>
 80196cc:	89fb      	ldrh	r3, [r7, #14]
 80196ce:	683a      	ldr	r2, [r7, #0]
 80196d0:	4413      	add	r3, r2
 80196d2:	781b      	ldrb	r3, [r3, #0]
 80196d4:	2b05      	cmp	r3, #5
 80196d6:	d104      	bne.n	80196e2 <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 80196d8:	79fb      	ldrb	r3, [r7, #7]
 80196da:	2105      	movs	r1, #5
 80196dc:	4618      	mov	r0, r3
 80196de:	f000 f823 	bl	8019728 <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 80196e2:	89fb      	ldrh	r3, [r7, #14]
 80196e4:	683a      	ldr	r2, [r7, #0]
 80196e6:	4413      	add	r3, r2
 80196e8:	781b      	ldrb	r3, [r3, #0]
 80196ea:	2b26      	cmp	r3, #38	; 0x26
 80196ec:	d108      	bne.n	8019700 <CommTransmitMessage+0x78>
 80196ee:	89fa      	ldrh	r2, [r7, #14]
 80196f0:	88bb      	ldrh	r3, [r7, #4]
 80196f2:	429a      	cmp	r2, r3
 80196f4:	d004      	beq.n	8019700 <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 80196f6:	79fb      	ldrb	r3, [r7, #7]
 80196f8:	2105      	movs	r1, #5
 80196fa:	4618      	mov	r0, r3
 80196fc:	f000 f814 	bl	8019728 <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 8019700:	89fb      	ldrh	r3, [r7, #14]
 8019702:	683a      	ldr	r2, [r7, #0]
 8019704:	4413      	add	r3, r2
 8019706:	781a      	ldrb	r2, [r3, #0]
 8019708:	79fb      	ldrb	r3, [r7, #7]
 801970a:	4611      	mov	r1, r2
 801970c:	4618      	mov	r0, r3
 801970e:	f000 f80b 	bl	8019728 <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8019712:	89fb      	ldrh	r3, [r7, #14]
 8019714:	3301      	adds	r3, #1
 8019716:	81fb      	strh	r3, [r7, #14]
 8019718:	89fa      	ldrh	r2, [r7, #14]
 801971a:	88bb      	ldrh	r3, [r7, #4]
 801971c:	429a      	cmp	r2, r3
 801971e:	d9c0      	bls.n	80196a2 <CommTransmitMessage+0x1a>
	}

	return;
 8019720:	bf00      	nop
}
 8019722:	3710      	adds	r7, #16
 8019724:	46bd      	mov	sp, r7
 8019726:	bd80      	pop	{r7, pc}

08019728 <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 8019728:	b580      	push	{r7, lr}
 801972a:	b084      	sub	sp, #16
 801972c:	af00      	add	r7, sp, #0
 801972e:	4603      	mov	r3, r0
 8019730:	460a      	mov	r2, r1
 8019732:	71fb      	strb	r3, [r7, #7]
 8019734:	4613      	mov	r3, r2
 8019736:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 8019738:	1dbb      	adds	r3, r7, #6
 801973a:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 801973c:	79fb      	ldrb	r3, [r7, #7]
 801973e:	2b00      	cmp	r3, #0
 8019740:	d107      	bne.n	8019752 <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 8019742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019746:	2201      	movs	r2, #1
 8019748:	68f9      	ldr	r1, [r7, #12]
 801974a:	4816      	ldr	r0, [pc, #88]	; (80197a4 <Com_SendByte+0x7c>)
 801974c:	f006 f80c 	bl	801f768 <HAL_UART_Transmit>
 8019750:	e01f      	b.n	8019792 <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 8019752:	79fb      	ldrb	r3, [r7, #7]
 8019754:	2b01      	cmp	r3, #1
 8019756:	d107      	bne.n	8019768 <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 8019758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801975c:	2201      	movs	r2, #1
 801975e:	68f9      	ldr	r1, [r7, #12]
 8019760:	4811      	ldr	r0, [pc, #68]	; (80197a8 <Com_SendByte+0x80>)
 8019762:	f006 f801 	bl	801f768 <HAL_UART_Transmit>
 8019766:	e014      	b.n	8019792 <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 8019768:	79fb      	ldrb	r3, [r7, #7]
 801976a:	2b02      	cmp	r3, #2
 801976c:	d107      	bne.n	801977e <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 801976e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019772:	2201      	movs	r2, #1
 8019774:	68f9      	ldr	r1, [r7, #12]
 8019776:	480d      	ldr	r0, [pc, #52]	; (80197ac <Com_SendByte+0x84>)
 8019778:	f005 fff6 	bl	801f768 <HAL_UART_Transmit>
 801977c:	e009      	b.n	8019792 <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 801977e:	79fb      	ldrb	r3, [r7, #7]
 8019780:	2b03      	cmp	r3, #3
 8019782:	d106      	bne.n	8019792 <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 8019784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019788:	2201      	movs	r2, #1
 801978a:	68f9      	ldr	r1, [r7, #12]
 801978c:	4808      	ldr	r0, [pc, #32]	; (80197b0 <Com_SendByte+0x88>)
 801978e:	f005 ffeb 	bl	801f768 <HAL_UART_Transmit>
	}

	ptr=NULL;
 8019792:	2300      	movs	r3, #0
 8019794:	60fb      	str	r3, [r7, #12]
	free(ptr);
 8019796:	68f8      	ldr	r0, [r7, #12]
 8019798:	f00d f900 	bl	802699c <free>
}
 801979c:	bf00      	nop
 801979e:	3710      	adds	r7, #16
 80197a0:	46bd      	mov	sp, r7
 80197a2:	bd80      	pop	{r7, pc}
 80197a4:	2000dcc4 	.word	0x2000dcc4
 80197a8:	2000db54 	.word	0x2000db54
 80197ac:	2000dc0c 	.word	0x2000dc0c
 80197b0:	2000da9c 	.word	0x2000da9c

080197b4 <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80197b8:	2280      	movs	r2, #128	; 0x80
 80197ba:	490a      	ldr	r1, [pc, #40]	; (80197e4 <Enable_UART_Interrupts+0x30>)
 80197bc:	480a      	ldr	r0, [pc, #40]	; (80197e8 <Enable_UART_Interrupts+0x34>)
 80197be:	f007 fae1 	bl	8020d84 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80197c2:	2280      	movs	r2, #128	; 0x80
 80197c4:	4909      	ldr	r1, [pc, #36]	; (80197ec <Enable_UART_Interrupts+0x38>)
 80197c6:	480a      	ldr	r0, [pc, #40]	; (80197f0 <Enable_UART_Interrupts+0x3c>)
 80197c8:	f007 fadc 	bl	8020d84 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80197cc:	2280      	movs	r2, #128	; 0x80
 80197ce:	4909      	ldr	r1, [pc, #36]	; (80197f4 <Enable_UART_Interrupts+0x40>)
 80197d0:	4809      	ldr	r0, [pc, #36]	; (80197f8 <Enable_UART_Interrupts+0x44>)
 80197d2:	f007 fad7 	bl	8020d84 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80197d6:	2280      	movs	r2, #128	; 0x80
 80197d8:	4908      	ldr	r1, [pc, #32]	; (80197fc <Enable_UART_Interrupts+0x48>)
 80197da:	4809      	ldr	r0, [pc, #36]	; (8019800 <Enable_UART_Interrupts+0x4c>)
 80197dc:	f007 fad2 	bl	8020d84 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80197e0:	bf00      	nop
 80197e2:	bd80      	pop	{r7, pc}
 80197e4:	2000d89c 	.word	0x2000d89c
 80197e8:	2000dcc4 	.word	0x2000dcc4
 80197ec:	2000d91c 	.word	0x2000d91c
 80197f0:	2000db54 	.word	0x2000db54
 80197f4:	2000d99c 	.word	0x2000d99c
 80197f8:	2000dc0c 	.word	0x2000dc0c
 80197fc:	2000da1c 	.word	0x2000da1c
 8019800:	2000da9c 	.word	0x2000da9c

08019804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8019804:	f8df d034 	ldr.w	sp, [pc, #52]	; 801983c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8019808:	480d      	ldr	r0, [pc, #52]	; (8019840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801980a:	490e      	ldr	r1, [pc, #56]	; (8019844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 801980c:	4a0e      	ldr	r2, [pc, #56]	; (8019848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801980e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019810:	e002      	b.n	8019818 <LoopCopyDataInit>

08019812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8019812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8019816:	3304      	adds	r3, #4

08019818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8019818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801981a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801981c:	d3f9      	bcc.n	8019812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801981e:	4a0b      	ldr	r2, [pc, #44]	; (801984c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8019820:	4c0b      	ldr	r4, [pc, #44]	; (8019850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8019822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019824:	e001      	b.n	801982a <LoopFillZerobss>

08019826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8019826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8019828:	3204      	adds	r2, #4

0801982a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801982a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801982c:	d3fb      	bcc.n	8019826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801982e:	f7ff fb3f 	bl	8018eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019832:	f00d f887 	bl	8026944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8019836:	f7fe f9e7 	bl	8017c08 <main>
  bx  lr    
 801983a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801983c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8019840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8019844:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 8019848:	0802e1e4 	.word	0x0802e1e4
  ldr r2, =_sbss
 801984c:	200004e4 	.word	0x200004e4
  ldr r4, =_ebss
 8019850:	20016324 	.word	0x20016324

08019854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019854:	e7fe      	b.n	8019854 <ADC_IRQHandler>

08019856 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8019856:	b480      	push	{r7}
 8019858:	b083      	sub	sp, #12
 801985a:	af00      	add	r7, sp, #0
 801985c:	6078      	str	r0, [r7, #4]
 801985e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d00b      	beq.n	801987e <DP83848_RegisterBusIO+0x28>
 8019866:	683b      	ldr	r3, [r7, #0]
 8019868:	68db      	ldr	r3, [r3, #12]
 801986a:	2b00      	cmp	r3, #0
 801986c:	d007      	beq.n	801987e <DP83848_RegisterBusIO+0x28>
 801986e:	683b      	ldr	r3, [r7, #0]
 8019870:	689b      	ldr	r3, [r3, #8]
 8019872:	2b00      	cmp	r3, #0
 8019874:	d003      	beq.n	801987e <DP83848_RegisterBusIO+0x28>
 8019876:	683b      	ldr	r3, [r7, #0]
 8019878:	691b      	ldr	r3, [r3, #16]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d102      	bne.n	8019884 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 801987e:	f04f 33ff 	mov.w	r3, #4294967295
 8019882:	e014      	b.n	80198ae <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8019884:	683b      	ldr	r3, [r7, #0]
 8019886:	681a      	ldr	r2, [r3, #0]
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 801988c:	683b      	ldr	r3, [r7, #0]
 801988e:	685a      	ldr	r2, [r3, #4]
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8019894:	683b      	ldr	r3, [r7, #0]
 8019896:	68da      	ldr	r2, [r3, #12]
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 801989c:	683b      	ldr	r3, [r7, #0]
 801989e:	689a      	ldr	r2, [r3, #8]
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80198a4:	683b      	ldr	r3, [r7, #0]
 80198a6:	691a      	ldr	r2, [r3, #16]
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 80198ac:	2300      	movs	r3, #0
}
 80198ae:	4618      	mov	r0, r3
 80198b0:	370c      	adds	r7, #12
 80198b2:	46bd      	mov	sp, r7
 80198b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b8:	4770      	bx	lr

080198ba <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 80198ba:	b580      	push	{r7, lr}
 80198bc:	b086      	sub	sp, #24
 80198be:	af00      	add	r7, sp, #0
 80198c0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80198c2:	2300      	movs	r3, #0
 80198c4:	60fb      	str	r3, [r7, #12]
 80198c6:	2300      	movs	r3, #0
 80198c8:	60bb      	str	r3, [r7, #8]
 80198ca:	2300      	movs	r3, #0
 80198cc:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 80198ce:	2300      	movs	r3, #0
 80198d0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	685b      	ldr	r3, [r3, #4]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d17c      	bne.n	80199d4 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	689b      	ldr	r3, [r3, #8]
 80198de:	2b00      	cmp	r3, #0
 80198e0:	d002      	beq.n	80198e8 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	689b      	ldr	r3, [r3, #8]
 80198e6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	2220      	movs	r2, #32
 80198ec:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80198ee:	2300      	movs	r3, #0
 80198f0:	617b      	str	r3, [r7, #20]
 80198f2:	e01c      	b.n	801992e <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	695b      	ldr	r3, [r3, #20]
 80198f8:	f107 0208 	add.w	r2, r7, #8
 80198fc:	2119      	movs	r1, #25
 80198fe:	6978      	ldr	r0, [r7, #20]
 8019900:	4798      	blx	r3
 8019902:	4603      	mov	r3, r0
 8019904:	2b00      	cmp	r3, #0
 8019906:	da03      	bge.n	8019910 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8019908:	f06f 0304 	mvn.w	r3, #4
 801990c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 801990e:	e00b      	b.n	8019928 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8019910:	68bb      	ldr	r3, [r7, #8]
 8019912:	f003 031f 	and.w	r3, r3, #31
 8019916:	697a      	ldr	r2, [r7, #20]
 8019918:	429a      	cmp	r2, r3
 801991a:	d105      	bne.n	8019928 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	697a      	ldr	r2, [r7, #20]
 8019920:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8019922:	2300      	movs	r3, #0
 8019924:	613b      	str	r3, [r7, #16]
         break;
 8019926:	e005      	b.n	8019934 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8019928:	697b      	ldr	r3, [r7, #20]
 801992a:	3301      	adds	r3, #1
 801992c:	617b      	str	r3, [r7, #20]
 801992e:	697b      	ldr	r3, [r7, #20]
 8019930:	2b1f      	cmp	r3, #31
 8019932:	d9df      	bls.n	80198f4 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	2b1f      	cmp	r3, #31
 801993a:	d902      	bls.n	8019942 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 801993c:	f06f 0302 	mvn.w	r3, #2
 8019940:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8019942:	693b      	ldr	r3, [r7, #16]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d145      	bne.n	80199d4 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	691b      	ldr	r3, [r3, #16]
 801994c:	687a      	ldr	r2, [r7, #4]
 801994e:	6810      	ldr	r0, [r2, #0]
 8019950:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019954:	2100      	movs	r1, #0
 8019956:	4798      	blx	r3
 8019958:	4603      	mov	r3, r0
 801995a:	2b00      	cmp	r3, #0
 801995c:	db37      	blt.n	80199ce <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	695b      	ldr	r3, [r3, #20]
 8019962:	687a      	ldr	r2, [r7, #4]
 8019964:	6810      	ldr	r0, [r2, #0]
 8019966:	f107 0208 	add.w	r2, r7, #8
 801996a:	2100      	movs	r1, #0
 801996c:	4798      	blx	r3
 801996e:	4603      	mov	r3, r0
 8019970:	2b00      	cmp	r3, #0
 8019972:	db28      	blt.n	80199c6 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	699b      	ldr	r3, [r3, #24]
 8019978:	4798      	blx	r3
 801997a:	4603      	mov	r3, r0
 801997c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 801997e:	e01c      	b.n	80199ba <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	699b      	ldr	r3, [r3, #24]
 8019984:	4798      	blx	r3
 8019986:	4603      	mov	r3, r0
 8019988:	461a      	mov	r2, r3
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	1ad3      	subs	r3, r2, r3
 801998e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8019992:	d80e      	bhi.n	80199b2 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	695b      	ldr	r3, [r3, #20]
 8019998:	687a      	ldr	r2, [r7, #4]
 801999a:	6810      	ldr	r0, [r2, #0]
 801999c:	f107 0208 	add.w	r2, r7, #8
 80199a0:	2100      	movs	r1, #0
 80199a2:	4798      	blx	r3
 80199a4:	4603      	mov	r3, r0
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	da07      	bge.n	80199ba <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 80199aa:	f06f 0304 	mvn.w	r3, #4
 80199ae:	613b      	str	r3, [r7, #16]
                 break;
 80199b0:	e010      	b.n	80199d4 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 80199b2:	f06f 0301 	mvn.w	r3, #1
 80199b6:	613b      	str	r3, [r7, #16]
               break;
 80199b8:	e00c      	b.n	80199d4 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80199ba:	68bb      	ldr	r3, [r7, #8]
 80199bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d1dd      	bne.n	8019980 <DP83848_Init+0xc6>
 80199c4:	e006      	b.n	80199d4 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 80199c6:	f06f 0304 	mvn.w	r3, #4
 80199ca:	613b      	str	r3, [r7, #16]
 80199cc:	e002      	b.n	80199d4 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 80199ce:	f06f 0303 	mvn.w	r3, #3
 80199d2:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 80199d4:	693b      	ldr	r3, [r7, #16]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d112      	bne.n	8019a00 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	699b      	ldr	r3, [r3, #24]
 80199de:	4798      	blx	r3
 80199e0:	4603      	mov	r3, r0
 80199e2:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 80199e4:	bf00      	nop
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	699b      	ldr	r3, [r3, #24]
 80199ea:	4798      	blx	r3
 80199ec:	4603      	mov	r3, r0
 80199ee:	461a      	mov	r2, r3
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	1ad3      	subs	r3, r2, r3
 80199f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80199f8:	d9f5      	bls.n	80199e6 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	2201      	movs	r2, #1
 80199fe:	605a      	str	r2, [r3, #4]
   }

   return status;
 8019a00:	693b      	ldr	r3, [r7, #16]
 }
 8019a02:	4618      	mov	r0, r3
 8019a04:	3718      	adds	r7, #24
 8019a06:	46bd      	mov	sp, r7
 8019a08:	bd80      	pop	{r7, pc}

08019a0a <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8019a0a:	b580      	push	{r7, lr}
 8019a0c:	b084      	sub	sp, #16
 8019a0e:	af00      	add	r7, sp, #0
 8019a10:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8019a12:	2300      	movs	r3, #0
 8019a14:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	695b      	ldr	r3, [r3, #20]
 8019a1a:	687a      	ldr	r2, [r7, #4]
 8019a1c:	6810      	ldr	r0, [r2, #0]
 8019a1e:	f107 020c 	add.w	r2, r7, #12
 8019a22:	2101      	movs	r1, #1
 8019a24:	4798      	blx	r3
 8019a26:	4603      	mov	r3, r0
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	da02      	bge.n	8019a32 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8019a2c:	f06f 0304 	mvn.w	r3, #4
 8019a30:	e06e      	b.n	8019b10 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	695b      	ldr	r3, [r3, #20]
 8019a36:	687a      	ldr	r2, [r7, #4]
 8019a38:	6810      	ldr	r0, [r2, #0]
 8019a3a:	f107 020c 	add.w	r2, r7, #12
 8019a3e:	2101      	movs	r1, #1
 8019a40:	4798      	blx	r3
 8019a42:	4603      	mov	r3, r0
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	da02      	bge.n	8019a4e <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8019a48:	f06f 0304 	mvn.w	r3, #4
 8019a4c:	e060      	b.n	8019b10 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	f003 0304 	and.w	r3, r3, #4
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d101      	bne.n	8019a5c <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8019a58:	2301      	movs	r3, #1
 8019a5a:	e059      	b.n	8019b10 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	695b      	ldr	r3, [r3, #20]
 8019a60:	687a      	ldr	r2, [r7, #4]
 8019a62:	6810      	ldr	r0, [r2, #0]
 8019a64:	f107 020c 	add.w	r2, r7, #12
 8019a68:	2100      	movs	r1, #0
 8019a6a:	4798      	blx	r3
 8019a6c:	4603      	mov	r3, r0
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	da02      	bge.n	8019a78 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8019a72:	f06f 0304 	mvn.w	r3, #4
 8019a76:	e04b      	b.n	8019b10 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d11b      	bne.n	8019aba <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d006      	beq.n	8019a9a <DP83848_GetLinkState+0x90>
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d001      	beq.n	8019a9a <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8019a96:	2302      	movs	r3, #2
 8019a98:	e03a      	b.n	8019b10 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d001      	beq.n	8019aa8 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8019aa4:	2303      	movs	r3, #3
 8019aa6:	e033      	b.n	8019b10 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d001      	beq.n	8019ab6 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8019ab2:	2304      	movs	r3, #4
 8019ab4:	e02c      	b.n	8019b10 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8019ab6:	2305      	movs	r3, #5
 8019ab8:	e02a      	b.n	8019b10 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	695b      	ldr	r3, [r3, #20]
 8019abe:	687a      	ldr	r2, [r7, #4]
 8019ac0:	6810      	ldr	r0, [r2, #0]
 8019ac2:	f107 020c 	add.w	r2, r7, #12
 8019ac6:	2110      	movs	r1, #16
 8019ac8:	4798      	blx	r3
 8019aca:	4603      	mov	r3, r0
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	da02      	bge.n	8019ad6 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8019ad0:	f06f 0304 	mvn.w	r3, #4
 8019ad4:	e01c      	b.n	8019b10 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d101      	bne.n	8019ae4 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8019ae0:	2306      	movs	r3, #6
 8019ae2:	e015      	b.n	8019b10 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	f003 0306 	and.w	r3, r3, #6
 8019aea:	2b04      	cmp	r3, #4
 8019aec:	d101      	bne.n	8019af2 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8019aee:	2302      	movs	r3, #2
 8019af0:	e00e      	b.n	8019b10 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	f003 0306 	and.w	r3, r3, #6
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d101      	bne.n	8019b00 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8019afc:	2303      	movs	r3, #3
 8019afe:	e007      	b.n	8019b10 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	f003 0306 	and.w	r3, r3, #6
 8019b06:	2b06      	cmp	r3, #6
 8019b08:	d101      	bne.n	8019b0e <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8019b0a:	2304      	movs	r3, #4
 8019b0c:	e000      	b.n	8019b10 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8019b0e:	2305      	movs	r3, #5
    }
  }
}
 8019b10:	4618      	mov	r0, r3
 8019b12:	3710      	adds	r7, #16
 8019b14:	46bd      	mov	sp, r7
 8019b16:	bd80      	pop	{r7, pc}

08019b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8019b18:	b580      	push	{r7, lr}
 8019b1a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8019b1c:	4b0b      	ldr	r3, [pc, #44]	; (8019b4c <HAL_Init+0x34>)
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	4a0a      	ldr	r2, [pc, #40]	; (8019b4c <HAL_Init+0x34>)
 8019b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019b26:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8019b28:	4b08      	ldr	r3, [pc, #32]	; (8019b4c <HAL_Init+0x34>)
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	4a07      	ldr	r2, [pc, #28]	; (8019b4c <HAL_Init+0x34>)
 8019b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8019b34:	2003      	movs	r0, #3
 8019b36:	f001 f825 	bl	801ab84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8019b3a:	2007      	movs	r0, #7
 8019b3c:	f000 f808 	bl	8019b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8019b40:	f7ff f80e 	bl	8018b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8019b44:	2300      	movs	r3, #0
}
 8019b46:	4618      	mov	r0, r3
 8019b48:	bd80      	pop	{r7, pc}
 8019b4a:	bf00      	nop
 8019b4c:	40023c00 	.word	0x40023c00

08019b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b082      	sub	sp, #8
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8019b58:	4b12      	ldr	r3, [pc, #72]	; (8019ba4 <HAL_InitTick+0x54>)
 8019b5a:	681a      	ldr	r2, [r3, #0]
 8019b5c:	4b12      	ldr	r3, [pc, #72]	; (8019ba8 <HAL_InitTick+0x58>)
 8019b5e:	781b      	ldrb	r3, [r3, #0]
 8019b60:	4619      	mov	r1, r3
 8019b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8019b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b6e:	4618      	mov	r0, r3
 8019b70:	f001 f83d 	bl	801abee <HAL_SYSTICK_Config>
 8019b74:	4603      	mov	r3, r0
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d001      	beq.n	8019b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8019b7a:	2301      	movs	r3, #1
 8019b7c:	e00e      	b.n	8019b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	2b0f      	cmp	r3, #15
 8019b82:	d80a      	bhi.n	8019b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8019b84:	2200      	movs	r2, #0
 8019b86:	6879      	ldr	r1, [r7, #4]
 8019b88:	f04f 30ff 	mov.w	r0, #4294967295
 8019b8c:	f001 f805 	bl	801ab9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8019b90:	4a06      	ldr	r2, [pc, #24]	; (8019bac <HAL_InitTick+0x5c>)
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8019b96:	2300      	movs	r3, #0
 8019b98:	e000      	b.n	8019b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8019b9a:	2301      	movs	r3, #1
}
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	3708      	adds	r7, #8
 8019ba0:	46bd      	mov	sp, r7
 8019ba2:	bd80      	pop	{r7, pc}
 8019ba4:	2000031c 	.word	0x2000031c
 8019ba8:	20000324 	.word	0x20000324
 8019bac:	20000320 	.word	0x20000320

08019bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8019bb0:	b480      	push	{r7}
 8019bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8019bb4:	4b06      	ldr	r3, [pc, #24]	; (8019bd0 <HAL_IncTick+0x20>)
 8019bb6:	781b      	ldrb	r3, [r3, #0]
 8019bb8:	461a      	mov	r2, r3
 8019bba:	4b06      	ldr	r3, [pc, #24]	; (8019bd4 <HAL_IncTick+0x24>)
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	4413      	add	r3, r2
 8019bc0:	4a04      	ldr	r2, [pc, #16]	; (8019bd4 <HAL_IncTick+0x24>)
 8019bc2:	6013      	str	r3, [r2, #0]
}
 8019bc4:	bf00      	nop
 8019bc6:	46bd      	mov	sp, r7
 8019bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bcc:	4770      	bx	lr
 8019bce:	bf00      	nop
 8019bd0:	20000324 	.word	0x20000324
 8019bd4:	2000dd7c 	.word	0x2000dd7c

08019bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019bd8:	b480      	push	{r7}
 8019bda:	af00      	add	r7, sp, #0
  return uwTick;
 8019bdc:	4b03      	ldr	r3, [pc, #12]	; (8019bec <HAL_GetTick+0x14>)
 8019bde:	681b      	ldr	r3, [r3, #0]
}
 8019be0:	4618      	mov	r0, r3
 8019be2:	46bd      	mov	sp, r7
 8019be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be8:	4770      	bx	lr
 8019bea:	bf00      	nop
 8019bec:	2000dd7c 	.word	0x2000dd7c

08019bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8019bf0:	b580      	push	{r7, lr}
 8019bf2:	b084      	sub	sp, #16
 8019bf4:	af00      	add	r7, sp, #0
 8019bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8019bf8:	f7ff ffee 	bl	8019bd8 <HAL_GetTick>
 8019bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c08:	d005      	beq.n	8019c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8019c0a:	4b0a      	ldr	r3, [pc, #40]	; (8019c34 <HAL_Delay+0x44>)
 8019c0c:	781b      	ldrb	r3, [r3, #0]
 8019c0e:	461a      	mov	r2, r3
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	4413      	add	r3, r2
 8019c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8019c16:	bf00      	nop
 8019c18:	f7ff ffde 	bl	8019bd8 <HAL_GetTick>
 8019c1c:	4602      	mov	r2, r0
 8019c1e:	68bb      	ldr	r3, [r7, #8]
 8019c20:	1ad3      	subs	r3, r2, r3
 8019c22:	68fa      	ldr	r2, [r7, #12]
 8019c24:	429a      	cmp	r2, r3
 8019c26:	d8f7      	bhi.n	8019c18 <HAL_Delay+0x28>
  {
  }
}
 8019c28:	bf00      	nop
 8019c2a:	bf00      	nop
 8019c2c:	3710      	adds	r7, #16
 8019c2e:	46bd      	mov	sp, r7
 8019c30:	bd80      	pop	{r7, pc}
 8019c32:	bf00      	nop
 8019c34:	20000324 	.word	0x20000324

08019c38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b084      	sub	sp, #16
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d101      	bne.n	8019c4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8019c46:	2301      	movs	r3, #1
 8019c48:	e11c      	b.n	8019e84 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019c50:	b2db      	uxtb	r3, r3
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d131      	bne.n	8019cba <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	4a8c      	ldr	r2, [pc, #560]	; (8019e8c <HAL_CAN_Init+0x254>)
 8019c5a:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	4a8c      	ldr	r2, [pc, #560]	; (8019e90 <HAL_CAN_Init+0x258>)
 8019c60:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	4a8b      	ldr	r2, [pc, #556]	; (8019e94 <HAL_CAN_Init+0x25c>)
 8019c66:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	4a8b      	ldr	r2, [pc, #556]	; (8019e98 <HAL_CAN_Init+0x260>)
 8019c6c:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	4a8a      	ldr	r2, [pc, #552]	; (8019e9c <HAL_CAN_Init+0x264>)
 8019c72:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	4a8a      	ldr	r2, [pc, #552]	; (8019ea0 <HAL_CAN_Init+0x268>)
 8019c78:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	4a89      	ldr	r2, [pc, #548]	; (8019ea4 <HAL_CAN_Init+0x26c>)
 8019c7e:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	4a89      	ldr	r2, [pc, #548]	; (8019ea8 <HAL_CAN_Init+0x270>)
 8019c84:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	4a88      	ldr	r2, [pc, #544]	; (8019eac <HAL_CAN_Init+0x274>)
 8019c8a:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	4a88      	ldr	r2, [pc, #544]	; (8019eb0 <HAL_CAN_Init+0x278>)
 8019c90:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	4a87      	ldr	r2, [pc, #540]	; (8019eb4 <HAL_CAN_Init+0x27c>)
 8019c96:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	4a87      	ldr	r2, [pc, #540]	; (8019eb8 <HAL_CAN_Init+0x280>)
 8019c9c:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	4a86      	ldr	r2, [pc, #536]	; (8019ebc <HAL_CAN_Init+0x284>)
 8019ca2:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d102      	bne.n	8019cb2 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	4a84      	ldr	r2, [pc, #528]	; (8019ec0 <HAL_CAN_Init+0x288>)
 8019cb0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cb6:	6878      	ldr	r0, [r7, #4]
 8019cb8:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	681a      	ldr	r2, [r3, #0]
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	f042 0201 	orr.w	r2, r2, #1
 8019cc8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019cca:	f7ff ff85 	bl	8019bd8 <HAL_GetTick>
 8019cce:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8019cd0:	e012      	b.n	8019cf8 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8019cd2:	f7ff ff81 	bl	8019bd8 <HAL_GetTick>
 8019cd6:	4602      	mov	r2, r0
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	1ad3      	subs	r3, r2, r3
 8019cdc:	2b0a      	cmp	r3, #10
 8019cde:	d90b      	bls.n	8019cf8 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ce4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	2205      	movs	r2, #5
 8019cf0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8019cf4:	2301      	movs	r3, #1
 8019cf6:	e0c5      	b.n	8019e84 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	685b      	ldr	r3, [r3, #4]
 8019cfe:	f003 0301 	and.w	r3, r3, #1
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d0e5      	beq.n	8019cd2 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	681a      	ldr	r2, [r3, #0]
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	f022 0202 	bic.w	r2, r2, #2
 8019d14:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019d16:	f7ff ff5f 	bl	8019bd8 <HAL_GetTick>
 8019d1a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8019d1c:	e012      	b.n	8019d44 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8019d1e:	f7ff ff5b 	bl	8019bd8 <HAL_GetTick>
 8019d22:	4602      	mov	r2, r0
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	1ad3      	subs	r3, r2, r3
 8019d28:	2b0a      	cmp	r3, #10
 8019d2a:	d90b      	bls.n	8019d44 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d30:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	2205      	movs	r2, #5
 8019d3c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8019d40:	2301      	movs	r3, #1
 8019d42:	e09f      	b.n	8019e84 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	685b      	ldr	r3, [r3, #4]
 8019d4a:	f003 0302 	and.w	r3, r3, #2
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d1e5      	bne.n	8019d1e <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	7e1b      	ldrb	r3, [r3, #24]
 8019d56:	2b01      	cmp	r3, #1
 8019d58:	d108      	bne.n	8019d6c <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	681a      	ldr	r2, [r3, #0]
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019d68:	601a      	str	r2, [r3, #0]
 8019d6a:	e007      	b.n	8019d7c <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	681a      	ldr	r2, [r3, #0]
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019d7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	7e5b      	ldrb	r3, [r3, #25]
 8019d80:	2b01      	cmp	r3, #1
 8019d82:	d108      	bne.n	8019d96 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	681a      	ldr	r2, [r3, #0]
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019d92:	601a      	str	r2, [r3, #0]
 8019d94:	e007      	b.n	8019da6 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	681a      	ldr	r2, [r3, #0]
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019da4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	7e9b      	ldrb	r3, [r3, #26]
 8019daa:	2b01      	cmp	r3, #1
 8019dac:	d108      	bne.n	8019dc0 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	681a      	ldr	r2, [r3, #0]
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	f042 0220 	orr.w	r2, r2, #32
 8019dbc:	601a      	str	r2, [r3, #0]
 8019dbe:	e007      	b.n	8019dd0 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	681a      	ldr	r2, [r3, #0]
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	f022 0220 	bic.w	r2, r2, #32
 8019dce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	7edb      	ldrb	r3, [r3, #27]
 8019dd4:	2b01      	cmp	r3, #1
 8019dd6:	d108      	bne.n	8019dea <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	681a      	ldr	r2, [r3, #0]
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	f022 0210 	bic.w	r2, r2, #16
 8019de6:	601a      	str	r2, [r3, #0]
 8019de8:	e007      	b.n	8019dfa <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	681a      	ldr	r2, [r3, #0]
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	f042 0210 	orr.w	r2, r2, #16
 8019df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	7f1b      	ldrb	r3, [r3, #28]
 8019dfe:	2b01      	cmp	r3, #1
 8019e00:	d108      	bne.n	8019e14 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	681a      	ldr	r2, [r3, #0]
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	f042 0208 	orr.w	r2, r2, #8
 8019e10:	601a      	str	r2, [r3, #0]
 8019e12:	e007      	b.n	8019e24 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	681a      	ldr	r2, [r3, #0]
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	f022 0208 	bic.w	r2, r2, #8
 8019e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	7f5b      	ldrb	r3, [r3, #29]
 8019e28:	2b01      	cmp	r3, #1
 8019e2a:	d108      	bne.n	8019e3e <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	681a      	ldr	r2, [r3, #0]
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	f042 0204 	orr.w	r2, r2, #4
 8019e3a:	601a      	str	r2, [r3, #0]
 8019e3c:	e007      	b.n	8019e4e <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	681a      	ldr	r2, [r3, #0]
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	f022 0204 	bic.w	r2, r2, #4
 8019e4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	689a      	ldr	r2, [r3, #8]
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	68db      	ldr	r3, [r3, #12]
 8019e56:	431a      	orrs	r2, r3
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	691b      	ldr	r3, [r3, #16]
 8019e5c:	431a      	orrs	r2, r3
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	695b      	ldr	r3, [r3, #20]
 8019e62:	ea42 0103 	orr.w	r1, r2, r3
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	685b      	ldr	r3, [r3, #4]
 8019e6a:	1e5a      	subs	r2, r3, #1
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	430a      	orrs	r2, r1
 8019e72:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	2200      	movs	r2, #0
 8019e78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	2201      	movs	r2, #1
 8019e7e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8019e82:	2300      	movs	r3, #0
}
 8019e84:	4618      	mov	r0, r3
 8019e86:	3710      	adds	r7, #16
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	bd80      	pop	{r7, pc}
 8019e8c:	080119c1 	.word	0x080119c1
 8019e90:	0801a97f 	.word	0x0801a97f
 8019e94:	08011add 	.word	0x08011add
 8019e98:	0801a993 	.word	0x0801a993
 8019e9c:	0801a907 	.word	0x0801a907
 8019ea0:	0801a91b 	.word	0x0801a91b
 8019ea4:	0801a92f 	.word	0x0801a92f
 8019ea8:	0801a943 	.word	0x0801a943
 8019eac:	0801a957 	.word	0x0801a957
 8019eb0:	0801a96b 	.word	0x0801a96b
 8019eb4:	0801a9a7 	.word	0x0801a9a7
 8019eb8:	0801a9bb 	.word	0x0801a9bb
 8019ebc:	0801a9cf 	.word	0x0801a9cf
 8019ec0:	08010fc1 	.word	0x08010fc1

08019ec4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8019ec4:	b480      	push	{r7}
 8019ec6:	b087      	sub	sp, #28
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	6078      	str	r0, [r7, #4]
 8019ecc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019eda:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8019edc:	7cfb      	ldrb	r3, [r7, #19]
 8019ede:	2b01      	cmp	r3, #1
 8019ee0:	d003      	beq.n	8019eea <HAL_CAN_ConfigFilter+0x26>
 8019ee2:	7cfb      	ldrb	r3, [r7, #19]
 8019ee4:	2b02      	cmp	r3, #2
 8019ee6:	f040 80c7 	bne.w	801a078 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	4a69      	ldr	r2, [pc, #420]	; (801a094 <HAL_CAN_ConfigFilter+0x1d0>)
 8019ef0:	4293      	cmp	r3, r2
 8019ef2:	d001      	beq.n	8019ef8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8019ef4:	4b68      	ldr	r3, [pc, #416]	; (801a098 <HAL_CAN_ConfigFilter+0x1d4>)
 8019ef6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8019ef8:	697b      	ldr	r3, [r7, #20]
 8019efa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8019efe:	f043 0201 	orr.w	r2, r3, #1
 8019f02:	697b      	ldr	r3, [r7, #20]
 8019f04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8019f08:	697b      	ldr	r3, [r7, #20]
 8019f0a:	4a63      	ldr	r2, [pc, #396]	; (801a098 <HAL_CAN_ConfigFilter+0x1d4>)
 8019f0c:	4293      	cmp	r3, r2
 8019f0e:	d111      	bne.n	8019f34 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8019f10:	697b      	ldr	r3, [r7, #20]
 8019f12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8019f16:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8019f1a:	697b      	ldr	r3, [r7, #20]
 8019f1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8019f20:	697b      	ldr	r3, [r7, #20]
 8019f22:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8019f26:	683b      	ldr	r3, [r7, #0]
 8019f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f2a:	021b      	lsls	r3, r3, #8
 8019f2c:	431a      	orrs	r2, r3
 8019f2e:	697b      	ldr	r3, [r7, #20]
 8019f30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8019f34:	683b      	ldr	r3, [r7, #0]
 8019f36:	695b      	ldr	r3, [r3, #20]
 8019f38:	f003 031f 	and.w	r3, r3, #31
 8019f3c:	2201      	movs	r2, #1
 8019f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8019f42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8019f44:	697b      	ldr	r3, [r7, #20]
 8019f46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	43db      	mvns	r3, r3
 8019f4e:	401a      	ands	r2, r3
 8019f50:	697b      	ldr	r3, [r7, #20]
 8019f52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8019f56:	683b      	ldr	r3, [r7, #0]
 8019f58:	69db      	ldr	r3, [r3, #28]
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d123      	bne.n	8019fa6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8019f5e:	697b      	ldr	r3, [r7, #20]
 8019f60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	43db      	mvns	r3, r3
 8019f68:	401a      	ands	r2, r3
 8019f6a:	697b      	ldr	r3, [r7, #20]
 8019f6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8019f70:	683b      	ldr	r3, [r7, #0]
 8019f72:	68db      	ldr	r3, [r3, #12]
 8019f74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8019f76:	683b      	ldr	r3, [r7, #0]
 8019f78:	685b      	ldr	r3, [r3, #4]
 8019f7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019f7c:	683a      	ldr	r2, [r7, #0]
 8019f7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8019f80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019f82:	697b      	ldr	r3, [r7, #20]
 8019f84:	3248      	adds	r2, #72	; 0x48
 8019f86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019f8a:	683b      	ldr	r3, [r7, #0]
 8019f8c:	689b      	ldr	r3, [r3, #8]
 8019f8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8019f90:	683b      	ldr	r3, [r7, #0]
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019f96:	683b      	ldr	r3, [r7, #0]
 8019f98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019f9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019f9c:	6979      	ldr	r1, [r7, #20]
 8019f9e:	3348      	adds	r3, #72	; 0x48
 8019fa0:	00db      	lsls	r3, r3, #3
 8019fa2:	440b      	add	r3, r1
 8019fa4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8019fa6:	683b      	ldr	r3, [r7, #0]
 8019fa8:	69db      	ldr	r3, [r3, #28]
 8019faa:	2b01      	cmp	r3, #1
 8019fac:	d122      	bne.n	8019ff4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8019fae:	697b      	ldr	r3, [r7, #20]
 8019fb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	431a      	orrs	r2, r3
 8019fb8:	697b      	ldr	r3, [r7, #20]
 8019fba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8019fbe:	683b      	ldr	r3, [r7, #0]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8019fc4:	683b      	ldr	r3, [r7, #0]
 8019fc6:	685b      	ldr	r3, [r3, #4]
 8019fc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019fca:	683a      	ldr	r2, [r7, #0]
 8019fcc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8019fce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019fd0:	697b      	ldr	r3, [r7, #20]
 8019fd2:	3248      	adds	r2, #72	; 0x48
 8019fd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019fd8:	683b      	ldr	r3, [r7, #0]
 8019fda:	689b      	ldr	r3, [r3, #8]
 8019fdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8019fde:	683b      	ldr	r3, [r7, #0]
 8019fe0:	68db      	ldr	r3, [r3, #12]
 8019fe2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019fe4:	683b      	ldr	r3, [r7, #0]
 8019fe6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019fe8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019fea:	6979      	ldr	r1, [r7, #20]
 8019fec:	3348      	adds	r3, #72	; 0x48
 8019fee:	00db      	lsls	r3, r3, #3
 8019ff0:	440b      	add	r3, r1
 8019ff2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8019ff4:	683b      	ldr	r3, [r7, #0]
 8019ff6:	699b      	ldr	r3, [r3, #24]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d109      	bne.n	801a010 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8019ffc:	697b      	ldr	r3, [r7, #20]
 8019ffe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	43db      	mvns	r3, r3
 801a006:	401a      	ands	r2, r3
 801a008:	697b      	ldr	r3, [r7, #20]
 801a00a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 801a00e:	e007      	b.n	801a020 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 801a010:	697b      	ldr	r3, [r7, #20]
 801a012:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	431a      	orrs	r2, r3
 801a01a:	697b      	ldr	r3, [r7, #20]
 801a01c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 801a020:	683b      	ldr	r3, [r7, #0]
 801a022:	691b      	ldr	r3, [r3, #16]
 801a024:	2b00      	cmp	r3, #0
 801a026:	d109      	bne.n	801a03c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 801a028:	697b      	ldr	r3, [r7, #20]
 801a02a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	43db      	mvns	r3, r3
 801a032:	401a      	ands	r2, r3
 801a034:	697b      	ldr	r3, [r7, #20]
 801a036:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 801a03a:	e007      	b.n	801a04c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 801a03c:	697b      	ldr	r3, [r7, #20]
 801a03e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	431a      	orrs	r2, r3
 801a046:	697b      	ldr	r3, [r7, #20]
 801a048:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 801a04c:	683b      	ldr	r3, [r7, #0]
 801a04e:	6a1b      	ldr	r3, [r3, #32]
 801a050:	2b01      	cmp	r3, #1
 801a052:	d107      	bne.n	801a064 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 801a054:	697b      	ldr	r3, [r7, #20]
 801a056:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	431a      	orrs	r2, r3
 801a05e:	697b      	ldr	r3, [r7, #20]
 801a060:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 801a064:	697b      	ldr	r3, [r7, #20]
 801a066:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801a06a:	f023 0201 	bic.w	r2, r3, #1
 801a06e:	697b      	ldr	r3, [r7, #20]
 801a070:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 801a074:	2300      	movs	r3, #0
 801a076:	e006      	b.n	801a086 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a07c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801a084:	2301      	movs	r3, #1
  }
}
 801a086:	4618      	mov	r0, r3
 801a088:	371c      	adds	r7, #28
 801a08a:	46bd      	mov	sp, r7
 801a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a090:	4770      	bx	lr
 801a092:	bf00      	nop
 801a094:	40003400 	.word	0x40003400
 801a098:	40006400 	.word	0x40006400

0801a09c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 801a09c:	b580      	push	{r7, lr}
 801a09e:	b084      	sub	sp, #16
 801a0a0:	af00      	add	r7, sp, #0
 801a0a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a0aa:	b2db      	uxtb	r3, r3
 801a0ac:	2b01      	cmp	r3, #1
 801a0ae:	d12e      	bne.n	801a10e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	2202      	movs	r2, #2
 801a0b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	681a      	ldr	r2, [r3, #0]
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	f022 0201 	bic.w	r2, r2, #1
 801a0c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801a0c8:	f7ff fd86 	bl	8019bd8 <HAL_GetTick>
 801a0cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801a0ce:	e012      	b.n	801a0f6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801a0d0:	f7ff fd82 	bl	8019bd8 <HAL_GetTick>
 801a0d4:	4602      	mov	r2, r0
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	1ad3      	subs	r3, r2, r3
 801a0da:	2b0a      	cmp	r3, #10
 801a0dc:	d90b      	bls.n	801a0f6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	2205      	movs	r2, #5
 801a0ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801a0f2:	2301      	movs	r3, #1
 801a0f4:	e012      	b.n	801a11c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	685b      	ldr	r3, [r3, #4]
 801a0fc:	f003 0301 	and.w	r3, r3, #1
 801a100:	2b00      	cmp	r3, #0
 801a102:	d1e5      	bne.n	801a0d0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	2200      	movs	r2, #0
 801a108:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 801a10a:	2300      	movs	r3, #0
 801a10c:	e006      	b.n	801a11c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a112:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801a11a:	2301      	movs	r3, #1
  }
}
 801a11c:	4618      	mov	r0, r3
 801a11e:	3710      	adds	r7, #16
 801a120:	46bd      	mov	sp, r7
 801a122:	bd80      	pop	{r7, pc}

0801a124 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 801a124:	b480      	push	{r7}
 801a126:	b089      	sub	sp, #36	; 0x24
 801a128:	af00      	add	r7, sp, #0
 801a12a:	60f8      	str	r0, [r7, #12]
 801a12c:	60b9      	str	r1, [r7, #8]
 801a12e:	607a      	str	r2, [r7, #4]
 801a130:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a138:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	689b      	ldr	r3, [r3, #8]
 801a140:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 801a142:	7ffb      	ldrb	r3, [r7, #31]
 801a144:	2b01      	cmp	r3, #1
 801a146:	d003      	beq.n	801a150 <HAL_CAN_AddTxMessage+0x2c>
 801a148:	7ffb      	ldrb	r3, [r7, #31]
 801a14a:	2b02      	cmp	r3, #2
 801a14c:	f040 80ad 	bne.w	801a2aa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 801a150:	69bb      	ldr	r3, [r7, #24]
 801a152:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801a156:	2b00      	cmp	r3, #0
 801a158:	d10a      	bne.n	801a170 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801a15a:	69bb      	ldr	r3, [r7, #24]
 801a15c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 801a160:	2b00      	cmp	r3, #0
 801a162:	d105      	bne.n	801a170 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 801a164:	69bb      	ldr	r3, [r7, #24]
 801a166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	f000 8095 	beq.w	801a29a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 801a170:	69bb      	ldr	r3, [r7, #24]
 801a172:	0e1b      	lsrs	r3, r3, #24
 801a174:	f003 0303 	and.w	r3, r3, #3
 801a178:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 801a17a:	2201      	movs	r2, #1
 801a17c:	697b      	ldr	r3, [r7, #20]
 801a17e:	409a      	lsls	r2, r3
 801a180:	683b      	ldr	r3, [r7, #0]
 801a182:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 801a184:	68bb      	ldr	r3, [r7, #8]
 801a186:	689b      	ldr	r3, [r3, #8]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d10d      	bne.n	801a1a8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 801a18c:	68bb      	ldr	r3, [r7, #8]
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 801a192:	68bb      	ldr	r3, [r7, #8]
 801a194:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 801a196:	68f9      	ldr	r1, [r7, #12]
 801a198:	6809      	ldr	r1, [r1, #0]
 801a19a:	431a      	orrs	r2, r3
 801a19c:	697b      	ldr	r3, [r7, #20]
 801a19e:	3318      	adds	r3, #24
 801a1a0:	011b      	lsls	r3, r3, #4
 801a1a2:	440b      	add	r3, r1
 801a1a4:	601a      	str	r2, [r3, #0]
 801a1a6:	e00f      	b.n	801a1c8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801a1a8:	68bb      	ldr	r3, [r7, #8]
 801a1aa:	685b      	ldr	r3, [r3, #4]
 801a1ac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 801a1ae:	68bb      	ldr	r3, [r7, #8]
 801a1b0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801a1b2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 801a1b4:	68bb      	ldr	r3, [r7, #8]
 801a1b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801a1b8:	68f9      	ldr	r1, [r7, #12]
 801a1ba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 801a1bc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801a1be:	697b      	ldr	r3, [r7, #20]
 801a1c0:	3318      	adds	r3, #24
 801a1c2:	011b      	lsls	r3, r3, #4
 801a1c4:	440b      	add	r3, r1
 801a1c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	6819      	ldr	r1, [r3, #0]
 801a1cc:	68bb      	ldr	r3, [r7, #8]
 801a1ce:	691a      	ldr	r2, [r3, #16]
 801a1d0:	697b      	ldr	r3, [r7, #20]
 801a1d2:	3318      	adds	r3, #24
 801a1d4:	011b      	lsls	r3, r3, #4
 801a1d6:	440b      	add	r3, r1
 801a1d8:	3304      	adds	r3, #4
 801a1da:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 801a1dc:	68bb      	ldr	r3, [r7, #8]
 801a1de:	7d1b      	ldrb	r3, [r3, #20]
 801a1e0:	2b01      	cmp	r3, #1
 801a1e2:	d111      	bne.n	801a208 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	681a      	ldr	r2, [r3, #0]
 801a1e8:	697b      	ldr	r3, [r7, #20]
 801a1ea:	3318      	adds	r3, #24
 801a1ec:	011b      	lsls	r3, r3, #4
 801a1ee:	4413      	add	r3, r2
 801a1f0:	3304      	adds	r3, #4
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	68fa      	ldr	r2, [r7, #12]
 801a1f6:	6811      	ldr	r1, [r2, #0]
 801a1f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801a1fc:	697b      	ldr	r3, [r7, #20]
 801a1fe:	3318      	adds	r3, #24
 801a200:	011b      	lsls	r3, r3, #4
 801a202:	440b      	add	r3, r1
 801a204:	3304      	adds	r3, #4
 801a206:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	3307      	adds	r3, #7
 801a20c:	781b      	ldrb	r3, [r3, #0]
 801a20e:	061a      	lsls	r2, r3, #24
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	3306      	adds	r3, #6
 801a214:	781b      	ldrb	r3, [r3, #0]
 801a216:	041b      	lsls	r3, r3, #16
 801a218:	431a      	orrs	r2, r3
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	3305      	adds	r3, #5
 801a21e:	781b      	ldrb	r3, [r3, #0]
 801a220:	021b      	lsls	r3, r3, #8
 801a222:	4313      	orrs	r3, r2
 801a224:	687a      	ldr	r2, [r7, #4]
 801a226:	3204      	adds	r2, #4
 801a228:	7812      	ldrb	r2, [r2, #0]
 801a22a:	4610      	mov	r0, r2
 801a22c:	68fa      	ldr	r2, [r7, #12]
 801a22e:	6811      	ldr	r1, [r2, #0]
 801a230:	ea43 0200 	orr.w	r2, r3, r0
 801a234:	697b      	ldr	r3, [r7, #20]
 801a236:	011b      	lsls	r3, r3, #4
 801a238:	440b      	add	r3, r1
 801a23a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 801a23e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	3303      	adds	r3, #3
 801a244:	781b      	ldrb	r3, [r3, #0]
 801a246:	061a      	lsls	r2, r3, #24
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	3302      	adds	r3, #2
 801a24c:	781b      	ldrb	r3, [r3, #0]
 801a24e:	041b      	lsls	r3, r3, #16
 801a250:	431a      	orrs	r2, r3
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	3301      	adds	r3, #1
 801a256:	781b      	ldrb	r3, [r3, #0]
 801a258:	021b      	lsls	r3, r3, #8
 801a25a:	4313      	orrs	r3, r2
 801a25c:	687a      	ldr	r2, [r7, #4]
 801a25e:	7812      	ldrb	r2, [r2, #0]
 801a260:	4610      	mov	r0, r2
 801a262:	68fa      	ldr	r2, [r7, #12]
 801a264:	6811      	ldr	r1, [r2, #0]
 801a266:	ea43 0200 	orr.w	r2, r3, r0
 801a26a:	697b      	ldr	r3, [r7, #20]
 801a26c:	011b      	lsls	r3, r3, #4
 801a26e:	440b      	add	r3, r1
 801a270:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 801a274:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	681a      	ldr	r2, [r3, #0]
 801a27a:	697b      	ldr	r3, [r7, #20]
 801a27c:	3318      	adds	r3, #24
 801a27e:	011b      	lsls	r3, r3, #4
 801a280:	4413      	add	r3, r2
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	68fa      	ldr	r2, [r7, #12]
 801a286:	6811      	ldr	r1, [r2, #0]
 801a288:	f043 0201 	orr.w	r2, r3, #1
 801a28c:	697b      	ldr	r3, [r7, #20]
 801a28e:	3318      	adds	r3, #24
 801a290:	011b      	lsls	r3, r3, #4
 801a292:	440b      	add	r3, r1
 801a294:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 801a296:	2300      	movs	r3, #0
 801a298:	e00e      	b.n	801a2b8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801a29a:	68fb      	ldr	r3, [r7, #12]
 801a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a29e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801a2a2:	68fb      	ldr	r3, [r7, #12]
 801a2a4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 801a2a6:	2301      	movs	r3, #1
 801a2a8:	e006      	b.n	801a2b8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801a2b2:	68fb      	ldr	r3, [r7, #12]
 801a2b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801a2b6:	2301      	movs	r3, #1
  }
}
 801a2b8:	4618      	mov	r0, r3
 801a2ba:	3724      	adds	r7, #36	; 0x24
 801a2bc:	46bd      	mov	sp, r7
 801a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2c2:	4770      	bx	lr

0801a2c4 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 801a2c4:	b480      	push	{r7}
 801a2c6:	b085      	sub	sp, #20
 801a2c8:	af00      	add	r7, sp, #0
 801a2ca:	6078      	str	r0, [r7, #4]
 801a2cc:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 801a2ce:	2300      	movs	r3, #0
 801a2d0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a2d8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 801a2da:	7afb      	ldrb	r3, [r7, #11]
 801a2dc:	2b01      	cmp	r3, #1
 801a2de:	d002      	beq.n	801a2e6 <HAL_CAN_IsTxMessagePending+0x22>
 801a2e0:	7afb      	ldrb	r3, [r7, #11]
 801a2e2:	2b02      	cmp	r3, #2
 801a2e4:	d10b      	bne.n	801a2fe <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	689a      	ldr	r2, [r3, #8]
 801a2ec:	683b      	ldr	r3, [r7, #0]
 801a2ee:	069b      	lsls	r3, r3, #26
 801a2f0:	401a      	ands	r2, r3
 801a2f2:	683b      	ldr	r3, [r7, #0]
 801a2f4:	069b      	lsls	r3, r3, #26
 801a2f6:	429a      	cmp	r2, r3
 801a2f8:	d001      	beq.n	801a2fe <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 801a2fa:	2301      	movs	r3, #1
 801a2fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 801a2fe:	68fb      	ldr	r3, [r7, #12]
}
 801a300:	4618      	mov	r0, r3
 801a302:	3714      	adds	r7, #20
 801a304:	46bd      	mov	sp, r7
 801a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a30a:	4770      	bx	lr

0801a30c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 801a30c:	b480      	push	{r7}
 801a30e:	b087      	sub	sp, #28
 801a310:	af00      	add	r7, sp, #0
 801a312:	60f8      	str	r0, [r7, #12]
 801a314:	60b9      	str	r1, [r7, #8]
 801a316:	607a      	str	r2, [r7, #4]
 801a318:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801a31a:	68fb      	ldr	r3, [r7, #12]
 801a31c:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a320:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 801a322:	7dfb      	ldrb	r3, [r7, #23]
 801a324:	2b01      	cmp	r3, #1
 801a326:	d003      	beq.n	801a330 <HAL_CAN_GetRxMessage+0x24>
 801a328:	7dfb      	ldrb	r3, [r7, #23]
 801a32a:	2b02      	cmp	r3, #2
 801a32c:	f040 80f3 	bne.w	801a516 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801a330:	68bb      	ldr	r3, [r7, #8]
 801a332:	2b00      	cmp	r3, #0
 801a334:	d10e      	bne.n	801a354 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 801a336:	68fb      	ldr	r3, [r7, #12]
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	68db      	ldr	r3, [r3, #12]
 801a33c:	f003 0303 	and.w	r3, r3, #3
 801a340:	2b00      	cmp	r3, #0
 801a342:	d116      	bne.n	801a372 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a348:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801a350:	2301      	movs	r3, #1
 801a352:	e0e7      	b.n	801a524 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	691b      	ldr	r3, [r3, #16]
 801a35a:	f003 0303 	and.w	r3, r3, #3
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d107      	bne.n	801a372 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a366:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801a36e:	2301      	movs	r3, #1
 801a370:	e0d8      	b.n	801a524 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	681a      	ldr	r2, [r3, #0]
 801a376:	68bb      	ldr	r3, [r7, #8]
 801a378:	331b      	adds	r3, #27
 801a37a:	011b      	lsls	r3, r3, #4
 801a37c:	4413      	add	r3, r2
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	f003 0204 	and.w	r2, r3, #4
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	689b      	ldr	r3, [r3, #8]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d10c      	bne.n	801a3aa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 801a390:	68fb      	ldr	r3, [r7, #12]
 801a392:	681a      	ldr	r2, [r3, #0]
 801a394:	68bb      	ldr	r3, [r7, #8]
 801a396:	331b      	adds	r3, #27
 801a398:	011b      	lsls	r3, r3, #4
 801a39a:	4413      	add	r3, r2
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	0d5b      	lsrs	r3, r3, #21
 801a3a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	601a      	str	r2, [r3, #0]
 801a3a8:	e00b      	b.n	801a3c2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 801a3aa:	68fb      	ldr	r3, [r7, #12]
 801a3ac:	681a      	ldr	r2, [r3, #0]
 801a3ae:	68bb      	ldr	r3, [r7, #8]
 801a3b0:	331b      	adds	r3, #27
 801a3b2:	011b      	lsls	r3, r3, #4
 801a3b4:	4413      	add	r3, r2
 801a3b6:	681b      	ldr	r3, [r3, #0]
 801a3b8:	08db      	lsrs	r3, r3, #3
 801a3ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	681a      	ldr	r2, [r3, #0]
 801a3c6:	68bb      	ldr	r3, [r7, #8]
 801a3c8:	331b      	adds	r3, #27
 801a3ca:	011b      	lsls	r3, r3, #4
 801a3cc:	4413      	add	r3, r2
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	f003 0202 	and.w	r2, r3, #2
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 801a3d8:	68fb      	ldr	r3, [r7, #12]
 801a3da:	681a      	ldr	r2, [r3, #0]
 801a3dc:	68bb      	ldr	r3, [r7, #8]
 801a3de:	331b      	adds	r3, #27
 801a3e0:	011b      	lsls	r3, r3, #4
 801a3e2:	4413      	add	r3, r2
 801a3e4:	3304      	adds	r3, #4
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	f003 020f 	and.w	r2, r3, #15
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 801a3f0:	68fb      	ldr	r3, [r7, #12]
 801a3f2:	681a      	ldr	r2, [r3, #0]
 801a3f4:	68bb      	ldr	r3, [r7, #8]
 801a3f6:	331b      	adds	r3, #27
 801a3f8:	011b      	lsls	r3, r3, #4
 801a3fa:	4413      	add	r3, r2
 801a3fc:	3304      	adds	r3, #4
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	0a1b      	lsrs	r3, r3, #8
 801a402:	b2da      	uxtb	r2, r3
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	681a      	ldr	r2, [r3, #0]
 801a40c:	68bb      	ldr	r3, [r7, #8]
 801a40e:	331b      	adds	r3, #27
 801a410:	011b      	lsls	r3, r3, #4
 801a412:	4413      	add	r3, r2
 801a414:	3304      	adds	r3, #4
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	0c1b      	lsrs	r3, r3, #16
 801a41a:	b29a      	uxth	r2, r3
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	681a      	ldr	r2, [r3, #0]
 801a424:	68bb      	ldr	r3, [r7, #8]
 801a426:	011b      	lsls	r3, r3, #4
 801a428:	4413      	add	r3, r2
 801a42a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	b2da      	uxtb	r2, r3
 801a432:	683b      	ldr	r3, [r7, #0]
 801a434:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	681a      	ldr	r2, [r3, #0]
 801a43a:	68bb      	ldr	r3, [r7, #8]
 801a43c:	011b      	lsls	r3, r3, #4
 801a43e:	4413      	add	r3, r2
 801a440:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	0a1a      	lsrs	r2, r3, #8
 801a448:	683b      	ldr	r3, [r7, #0]
 801a44a:	3301      	adds	r3, #1
 801a44c:	b2d2      	uxtb	r2, r2
 801a44e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	681a      	ldr	r2, [r3, #0]
 801a454:	68bb      	ldr	r3, [r7, #8]
 801a456:	011b      	lsls	r3, r3, #4
 801a458:	4413      	add	r3, r2
 801a45a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	0c1a      	lsrs	r2, r3, #16
 801a462:	683b      	ldr	r3, [r7, #0]
 801a464:	3302      	adds	r3, #2
 801a466:	b2d2      	uxtb	r2, r2
 801a468:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 801a46a:	68fb      	ldr	r3, [r7, #12]
 801a46c:	681a      	ldr	r2, [r3, #0]
 801a46e:	68bb      	ldr	r3, [r7, #8]
 801a470:	011b      	lsls	r3, r3, #4
 801a472:	4413      	add	r3, r2
 801a474:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	0e1a      	lsrs	r2, r3, #24
 801a47c:	683b      	ldr	r3, [r7, #0]
 801a47e:	3303      	adds	r3, #3
 801a480:	b2d2      	uxtb	r2, r2
 801a482:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	681a      	ldr	r2, [r3, #0]
 801a488:	68bb      	ldr	r3, [r7, #8]
 801a48a:	011b      	lsls	r3, r3, #4
 801a48c:	4413      	add	r3, r2
 801a48e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801a492:	681a      	ldr	r2, [r3, #0]
 801a494:	683b      	ldr	r3, [r7, #0]
 801a496:	3304      	adds	r3, #4
 801a498:	b2d2      	uxtb	r2, r2
 801a49a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 801a49c:	68fb      	ldr	r3, [r7, #12]
 801a49e:	681a      	ldr	r2, [r3, #0]
 801a4a0:	68bb      	ldr	r3, [r7, #8]
 801a4a2:	011b      	lsls	r3, r3, #4
 801a4a4:	4413      	add	r3, r2
 801a4a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	0a1a      	lsrs	r2, r3, #8
 801a4ae:	683b      	ldr	r3, [r7, #0]
 801a4b0:	3305      	adds	r3, #5
 801a4b2:	b2d2      	uxtb	r2, r2
 801a4b4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 801a4b6:	68fb      	ldr	r3, [r7, #12]
 801a4b8:	681a      	ldr	r2, [r3, #0]
 801a4ba:	68bb      	ldr	r3, [r7, #8]
 801a4bc:	011b      	lsls	r3, r3, #4
 801a4be:	4413      	add	r3, r2
 801a4c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	0c1a      	lsrs	r2, r3, #16
 801a4c8:	683b      	ldr	r3, [r7, #0]
 801a4ca:	3306      	adds	r3, #6
 801a4cc:	b2d2      	uxtb	r2, r2
 801a4ce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	681a      	ldr	r2, [r3, #0]
 801a4d4:	68bb      	ldr	r3, [r7, #8]
 801a4d6:	011b      	lsls	r3, r3, #4
 801a4d8:	4413      	add	r3, r2
 801a4da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	0e1a      	lsrs	r2, r3, #24
 801a4e2:	683b      	ldr	r3, [r7, #0]
 801a4e4:	3307      	adds	r3, #7
 801a4e6:	b2d2      	uxtb	r2, r2
 801a4e8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801a4ea:	68bb      	ldr	r3, [r7, #8]
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d108      	bne.n	801a502 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 801a4f0:	68fb      	ldr	r3, [r7, #12]
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	68da      	ldr	r2, [r3, #12]
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	f042 0220 	orr.w	r2, r2, #32
 801a4fe:	60da      	str	r2, [r3, #12]
 801a500:	e007      	b.n	801a512 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	691a      	ldr	r2, [r3, #16]
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	f042 0220 	orr.w	r2, r2, #32
 801a510:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 801a512:	2300      	movs	r3, #0
 801a514:	e006      	b.n	801a524 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801a516:	68fb      	ldr	r3, [r7, #12]
 801a518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a51a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801a51e:	68fb      	ldr	r3, [r7, #12]
 801a520:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801a522:	2301      	movs	r3, #1
  }
}
 801a524:	4618      	mov	r0, r3
 801a526:	371c      	adds	r7, #28
 801a528:	46bd      	mov	sp, r7
 801a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a52e:	4770      	bx	lr

0801a530 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 801a530:	b480      	push	{r7}
 801a532:	b085      	sub	sp, #20
 801a534:	af00      	add	r7, sp, #0
 801a536:	6078      	str	r0, [r7, #4]
 801a538:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a540:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 801a542:	7bfb      	ldrb	r3, [r7, #15]
 801a544:	2b01      	cmp	r3, #1
 801a546:	d002      	beq.n	801a54e <HAL_CAN_ActivateNotification+0x1e>
 801a548:	7bfb      	ldrb	r3, [r7, #15]
 801a54a:	2b02      	cmp	r3, #2
 801a54c:	d109      	bne.n	801a562 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	6959      	ldr	r1, [r3, #20]
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	683a      	ldr	r2, [r7, #0]
 801a55a:	430a      	orrs	r2, r1
 801a55c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 801a55e:	2300      	movs	r3, #0
 801a560:	e006      	b.n	801a570 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a566:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801a56e:	2301      	movs	r3, #1
  }
}
 801a570:	4618      	mov	r0, r3
 801a572:	3714      	adds	r7, #20
 801a574:	46bd      	mov	sp, r7
 801a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a57a:	4770      	bx	lr

0801a57c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 801a57c:	b580      	push	{r7, lr}
 801a57e:	b08a      	sub	sp, #40	; 0x28
 801a580:	af00      	add	r7, sp, #0
 801a582:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 801a584:	2300      	movs	r3, #0
 801a586:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	695b      	ldr	r3, [r3, #20]
 801a58e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	685b      	ldr	r3, [r3, #4]
 801a596:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	689b      	ldr	r3, [r3, #8]
 801a59e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	68db      	ldr	r3, [r3, #12]
 801a5a6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	691b      	ldr	r3, [r3, #16]
 801a5ae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	699b      	ldr	r3, [r3, #24]
 801a5b6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 801a5b8:	6a3b      	ldr	r3, [r7, #32]
 801a5ba:	f003 0301 	and.w	r3, r3, #1
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	f000 8083 	beq.w	801a6ca <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 801a5c4:	69bb      	ldr	r3, [r7, #24]
 801a5c6:	f003 0301 	and.w	r3, r3, #1
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d025      	beq.n	801a61a <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	2201      	movs	r2, #1
 801a5d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 801a5d6:	69bb      	ldr	r3, [r7, #24]
 801a5d8:	f003 0302 	and.w	r3, r3, #2
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d004      	beq.n	801a5ea <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	4798      	blx	r3
 801a5e8:	e017      	b.n	801a61a <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 801a5ea:	69bb      	ldr	r3, [r7, #24]
 801a5ec:	f003 0304 	and.w	r3, r3, #4
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d004      	beq.n	801a5fe <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 801a5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a5fa:	627b      	str	r3, [r7, #36]	; 0x24
 801a5fc:	e00d      	b.n	801a61a <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 801a5fe:	69bb      	ldr	r3, [r7, #24]
 801a600:	f003 0308 	and.w	r3, r3, #8
 801a604:	2b00      	cmp	r3, #0
 801a606:	d004      	beq.n	801a612 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 801a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a60a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801a60e:	627b      	str	r3, [r7, #36]	; 0x24
 801a610:	e003      	b.n	801a61a <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a616:	6878      	ldr	r0, [r7, #4]
 801a618:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 801a61a:	69bb      	ldr	r3, [r7, #24]
 801a61c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a620:	2b00      	cmp	r3, #0
 801a622:	d026      	beq.n	801a672 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a62c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 801a62e:	69bb      	ldr	r3, [r7, #24]
 801a630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a634:	2b00      	cmp	r3, #0
 801a636:	d004      	beq.n	801a642 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a63c:	6878      	ldr	r0, [r7, #4]
 801a63e:	4798      	blx	r3
 801a640:	e017      	b.n	801a672 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 801a642:	69bb      	ldr	r3, [r7, #24]
 801a644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d004      	beq.n	801a656 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 801a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a64e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a652:	627b      	str	r3, [r7, #36]	; 0x24
 801a654:	e00d      	b.n	801a672 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 801a656:	69bb      	ldr	r3, [r7, #24]
 801a658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d004      	beq.n	801a66a <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 801a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a666:	627b      	str	r3, [r7, #36]	; 0x24
 801a668:	e003      	b.n	801a672 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a66e:	6878      	ldr	r0, [r7, #4]
 801a670:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 801a672:	69bb      	ldr	r3, [r7, #24]
 801a674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d026      	beq.n	801a6ca <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801a684:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 801a686:	69bb      	ldr	r3, [r7, #24]
 801a688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d004      	beq.n	801a69a <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a694:	6878      	ldr	r0, [r7, #4]
 801a696:	4798      	blx	r3
 801a698:	e017      	b.n	801a6ca <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 801a69a:	69bb      	ldr	r3, [r7, #24]
 801a69c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d004      	beq.n	801a6ae <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 801a6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a6aa:	627b      	str	r3, [r7, #36]	; 0x24
 801a6ac:	e00d      	b.n	801a6ca <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 801a6ae:	69bb      	ldr	r3, [r7, #24]
 801a6b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d004      	beq.n	801a6c2 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 801a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a6be:	627b      	str	r3, [r7, #36]	; 0x24
 801a6c0:	e003      	b.n	801a6ca <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a6c6:	6878      	ldr	r0, [r7, #4]
 801a6c8:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 801a6ca:	6a3b      	ldr	r3, [r7, #32]
 801a6cc:	f003 0308 	and.w	r3, r3, #8
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	d00c      	beq.n	801a6ee <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 801a6d4:	697b      	ldr	r3, [r7, #20]
 801a6d6:	f003 0310 	and.w	r3, r3, #16
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d007      	beq.n	801a6ee <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 801a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801a6e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	2210      	movs	r2, #16
 801a6ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 801a6ee:	6a3b      	ldr	r3, [r7, #32]
 801a6f0:	f003 0304 	and.w	r3, r3, #4
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d00c      	beq.n	801a712 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 801a6f8:	697b      	ldr	r3, [r7, #20]
 801a6fa:	f003 0308 	and.w	r3, r3, #8
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d007      	beq.n	801a712 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	2208      	movs	r2, #8
 801a708:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a70e:	6878      	ldr	r0, [r7, #4]
 801a710:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 801a712:	6a3b      	ldr	r3, [r7, #32]
 801a714:	f003 0302 	and.w	r3, r3, #2
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d00a      	beq.n	801a732 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	68db      	ldr	r3, [r3, #12]
 801a722:	f003 0303 	and.w	r3, r3, #3
 801a726:	2b00      	cmp	r3, #0
 801a728:	d003      	beq.n	801a732 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a72e:	6878      	ldr	r0, [r7, #4]
 801a730:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 801a732:	6a3b      	ldr	r3, [r7, #32]
 801a734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d00c      	beq.n	801a756 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 801a73c:	693b      	ldr	r3, [r7, #16]
 801a73e:	f003 0310 	and.w	r3, r3, #16
 801a742:	2b00      	cmp	r3, #0
 801a744:	d007      	beq.n	801a756 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 801a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a748:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801a74c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	2210      	movs	r2, #16
 801a754:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 801a756:	6a3b      	ldr	r3, [r7, #32]
 801a758:	f003 0320 	and.w	r3, r3, #32
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	d00c      	beq.n	801a77a <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 801a760:	693b      	ldr	r3, [r7, #16]
 801a762:	f003 0308 	and.w	r3, r3, #8
 801a766:	2b00      	cmp	r3, #0
 801a768:	d007      	beq.n	801a77a <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	2208      	movs	r2, #8
 801a770:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a776:	6878      	ldr	r0, [r7, #4]
 801a778:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 801a77a:	6a3b      	ldr	r3, [r7, #32]
 801a77c:	f003 0310 	and.w	r3, r3, #16
 801a780:	2b00      	cmp	r3, #0
 801a782:	d00a      	beq.n	801a79a <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	691b      	ldr	r3, [r3, #16]
 801a78a:	f003 0303 	and.w	r3, r3, #3
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d003      	beq.n	801a79a <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a796:	6878      	ldr	r0, [r7, #4]
 801a798:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 801a79a:	6a3b      	ldr	r3, [r7, #32]
 801a79c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d00c      	beq.n	801a7be <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 801a7a4:	69fb      	ldr	r3, [r7, #28]
 801a7a6:	f003 0310 	and.w	r3, r3, #16
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d007      	beq.n	801a7be <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	2210      	movs	r2, #16
 801a7b4:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a7ba:	6878      	ldr	r0, [r7, #4]
 801a7bc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 801a7be:	6a3b      	ldr	r3, [r7, #32]
 801a7c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d00c      	beq.n	801a7e2 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 801a7c8:	69fb      	ldr	r3, [r7, #28]
 801a7ca:	f003 0308 	and.w	r3, r3, #8
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d007      	beq.n	801a7e2 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	2208      	movs	r2, #8
 801a7d8:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a7de:	6878      	ldr	r0, [r7, #4]
 801a7e0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 801a7e2:	6a3b      	ldr	r3, [r7, #32]
 801a7e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d07b      	beq.n	801a8e4 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 801a7ec:	69fb      	ldr	r3, [r7, #28]
 801a7ee:	f003 0304 	and.w	r3, r3, #4
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d072      	beq.n	801a8dc <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 801a7f6:	6a3b      	ldr	r3, [r7, #32]
 801a7f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d008      	beq.n	801a812 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 801a806:	2b00      	cmp	r3, #0
 801a808:	d003      	beq.n	801a812 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 801a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a80c:	f043 0301 	orr.w	r3, r3, #1
 801a810:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801a812:	6a3b      	ldr	r3, [r7, #32]
 801a814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d008      	beq.n	801a82e <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801a822:	2b00      	cmp	r3, #0
 801a824:	d003      	beq.n	801a82e <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 801a826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a828:	f043 0302 	orr.w	r3, r3, #2
 801a82c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801a82e:	6a3b      	ldr	r3, [r7, #32]
 801a830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a834:	2b00      	cmp	r3, #0
 801a836:	d008      	beq.n	801a84a <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 801a838:	68fb      	ldr	r3, [r7, #12]
 801a83a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d003      	beq.n	801a84a <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 801a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a844:	f043 0304 	orr.w	r3, r3, #4
 801a848:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 801a84a:	6a3b      	ldr	r3, [r7, #32]
 801a84c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a850:	2b00      	cmp	r3, #0
 801a852:	d043      	beq.n	801a8dc <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d03e      	beq.n	801a8dc <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801a864:	2b60      	cmp	r3, #96	; 0x60
 801a866:	d02b      	beq.n	801a8c0 <HAL_CAN_IRQHandler+0x344>
 801a868:	2b60      	cmp	r3, #96	; 0x60
 801a86a:	d82e      	bhi.n	801a8ca <HAL_CAN_IRQHandler+0x34e>
 801a86c:	2b50      	cmp	r3, #80	; 0x50
 801a86e:	d022      	beq.n	801a8b6 <HAL_CAN_IRQHandler+0x33a>
 801a870:	2b50      	cmp	r3, #80	; 0x50
 801a872:	d82a      	bhi.n	801a8ca <HAL_CAN_IRQHandler+0x34e>
 801a874:	2b40      	cmp	r3, #64	; 0x40
 801a876:	d019      	beq.n	801a8ac <HAL_CAN_IRQHandler+0x330>
 801a878:	2b40      	cmp	r3, #64	; 0x40
 801a87a:	d826      	bhi.n	801a8ca <HAL_CAN_IRQHandler+0x34e>
 801a87c:	2b30      	cmp	r3, #48	; 0x30
 801a87e:	d010      	beq.n	801a8a2 <HAL_CAN_IRQHandler+0x326>
 801a880:	2b30      	cmp	r3, #48	; 0x30
 801a882:	d822      	bhi.n	801a8ca <HAL_CAN_IRQHandler+0x34e>
 801a884:	2b10      	cmp	r3, #16
 801a886:	d002      	beq.n	801a88e <HAL_CAN_IRQHandler+0x312>
 801a888:	2b20      	cmp	r3, #32
 801a88a:	d005      	beq.n	801a898 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 801a88c:	e01d      	b.n	801a8ca <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 801a88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a890:	f043 0308 	orr.w	r3, r3, #8
 801a894:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a896:	e019      	b.n	801a8cc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 801a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a89a:	f043 0310 	orr.w	r3, r3, #16
 801a89e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a8a0:	e014      	b.n	801a8cc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 801a8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8a4:	f043 0320 	orr.w	r3, r3, #32
 801a8a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a8aa:	e00f      	b.n	801a8cc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 801a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a8b4:	e00a      	b.n	801a8cc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 801a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a8bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a8be:	e005      	b.n	801a8cc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 801a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a8c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a8c8:	e000      	b.n	801a8cc <HAL_CAN_IRQHandler+0x350>
            break;
 801a8ca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	699a      	ldr	r2, [r3, #24]
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801a8da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	2204      	movs	r2, #4
 801a8e2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 801a8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d009      	beq.n	801a8fe <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8f0:	431a      	orrs	r2, r3
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a8fa:	6878      	ldr	r0, [r7, #4]
 801a8fc:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 801a8fe:	bf00      	nop
 801a900:	3728      	adds	r7, #40	; 0x28
 801a902:	46bd      	mov	sp, r7
 801a904:	bd80      	pop	{r7, pc}

0801a906 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801a906:	b480      	push	{r7}
 801a908:	b083      	sub	sp, #12
 801a90a:	af00      	add	r7, sp, #0
 801a90c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 801a90e:	bf00      	nop
 801a910:	370c      	adds	r7, #12
 801a912:	46bd      	mov	sp, r7
 801a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a918:	4770      	bx	lr

0801a91a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801a91a:	b480      	push	{r7}
 801a91c:	b083      	sub	sp, #12
 801a91e:	af00      	add	r7, sp, #0
 801a920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 801a922:	bf00      	nop
 801a924:	370c      	adds	r7, #12
 801a926:	46bd      	mov	sp, r7
 801a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a92c:	4770      	bx	lr

0801a92e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801a92e:	b480      	push	{r7}
 801a930:	b083      	sub	sp, #12
 801a932:	af00      	add	r7, sp, #0
 801a934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 801a936:	bf00      	nop
 801a938:	370c      	adds	r7, #12
 801a93a:	46bd      	mov	sp, r7
 801a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a940:	4770      	bx	lr

0801a942 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 801a942:	b480      	push	{r7}
 801a944:	b083      	sub	sp, #12
 801a946:	af00      	add	r7, sp, #0
 801a948:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 801a94a:	bf00      	nop
 801a94c:	370c      	adds	r7, #12
 801a94e:	46bd      	mov	sp, r7
 801a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a954:	4770      	bx	lr

0801a956 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 801a956:	b480      	push	{r7}
 801a958:	b083      	sub	sp, #12
 801a95a:	af00      	add	r7, sp, #0
 801a95c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 801a95e:	bf00      	nop
 801a960:	370c      	adds	r7, #12
 801a962:	46bd      	mov	sp, r7
 801a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a968:	4770      	bx	lr

0801a96a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 801a96a:	b480      	push	{r7}
 801a96c:	b083      	sub	sp, #12
 801a96e:	af00      	add	r7, sp, #0
 801a970:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 801a972:	bf00      	nop
 801a974:	370c      	adds	r7, #12
 801a976:	46bd      	mov	sp, r7
 801a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a97c:	4770      	bx	lr

0801a97e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 801a97e:	b480      	push	{r7}
 801a980:	b083      	sub	sp, #12
 801a982:	af00      	add	r7, sp, #0
 801a984:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 801a986:	bf00      	nop
 801a988:	370c      	adds	r7, #12
 801a98a:	46bd      	mov	sp, r7
 801a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a990:	4770      	bx	lr

0801a992 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 801a992:	b480      	push	{r7}
 801a994:	b083      	sub	sp, #12
 801a996:	af00      	add	r7, sp, #0
 801a998:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 801a99a:	bf00      	nop
 801a99c:	370c      	adds	r7, #12
 801a99e:	46bd      	mov	sp, r7
 801a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9a4:	4770      	bx	lr

0801a9a6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 801a9a6:	b480      	push	{r7}
 801a9a8:	b083      	sub	sp, #12
 801a9aa:	af00      	add	r7, sp, #0
 801a9ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 801a9ae:	bf00      	nop
 801a9b0:	370c      	adds	r7, #12
 801a9b2:	46bd      	mov	sp, r7
 801a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9b8:	4770      	bx	lr

0801a9ba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 801a9ba:	b480      	push	{r7}
 801a9bc:	b083      	sub	sp, #12
 801a9be:	af00      	add	r7, sp, #0
 801a9c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 801a9c2:	bf00      	nop
 801a9c4:	370c      	adds	r7, #12
 801a9c6:	46bd      	mov	sp, r7
 801a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9cc:	4770      	bx	lr

0801a9ce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 801a9ce:	b480      	push	{r7}
 801a9d0:	b083      	sub	sp, #12
 801a9d2:	af00      	add	r7, sp, #0
 801a9d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 801a9d6:	bf00      	nop
 801a9d8:	370c      	adds	r7, #12
 801a9da:	46bd      	mov	sp, r7
 801a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9e0:	4770      	bx	lr
	...

0801a9e4 <__NVIC_SetPriorityGrouping>:
{
 801a9e4:	b480      	push	{r7}
 801a9e6:	b085      	sub	sp, #20
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	f003 0307 	and.w	r3, r3, #7
 801a9f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a9f4:	4b0b      	ldr	r3, [pc, #44]	; (801aa24 <__NVIC_SetPriorityGrouping+0x40>)
 801a9f6:	68db      	ldr	r3, [r3, #12]
 801a9f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a9fa:	68ba      	ldr	r2, [r7, #8]
 801a9fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801aa00:	4013      	ands	r3, r2
 801aa02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801aa08:	68bb      	ldr	r3, [r7, #8]
 801aa0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801aa0c:	4b06      	ldr	r3, [pc, #24]	; (801aa28 <__NVIC_SetPriorityGrouping+0x44>)
 801aa0e:	4313      	orrs	r3, r2
 801aa10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801aa12:	4a04      	ldr	r2, [pc, #16]	; (801aa24 <__NVIC_SetPriorityGrouping+0x40>)
 801aa14:	68bb      	ldr	r3, [r7, #8]
 801aa16:	60d3      	str	r3, [r2, #12]
}
 801aa18:	bf00      	nop
 801aa1a:	3714      	adds	r7, #20
 801aa1c:	46bd      	mov	sp, r7
 801aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa22:	4770      	bx	lr
 801aa24:	e000ed00 	.word	0xe000ed00
 801aa28:	05fa0000 	.word	0x05fa0000

0801aa2c <__NVIC_GetPriorityGrouping>:
{
 801aa2c:	b480      	push	{r7}
 801aa2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801aa30:	4b04      	ldr	r3, [pc, #16]	; (801aa44 <__NVIC_GetPriorityGrouping+0x18>)
 801aa32:	68db      	ldr	r3, [r3, #12]
 801aa34:	0a1b      	lsrs	r3, r3, #8
 801aa36:	f003 0307 	and.w	r3, r3, #7
}
 801aa3a:	4618      	mov	r0, r3
 801aa3c:	46bd      	mov	sp, r7
 801aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa42:	4770      	bx	lr
 801aa44:	e000ed00 	.word	0xe000ed00

0801aa48 <__NVIC_EnableIRQ>:
{
 801aa48:	b480      	push	{r7}
 801aa4a:	b083      	sub	sp, #12
 801aa4c:	af00      	add	r7, sp, #0
 801aa4e:	4603      	mov	r3, r0
 801aa50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801aa52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	db0b      	blt.n	801aa72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801aa5a:	79fb      	ldrb	r3, [r7, #7]
 801aa5c:	f003 021f 	and.w	r2, r3, #31
 801aa60:	4907      	ldr	r1, [pc, #28]	; (801aa80 <__NVIC_EnableIRQ+0x38>)
 801aa62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aa66:	095b      	lsrs	r3, r3, #5
 801aa68:	2001      	movs	r0, #1
 801aa6a:	fa00 f202 	lsl.w	r2, r0, r2
 801aa6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801aa72:	bf00      	nop
 801aa74:	370c      	adds	r7, #12
 801aa76:	46bd      	mov	sp, r7
 801aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa7c:	4770      	bx	lr
 801aa7e:	bf00      	nop
 801aa80:	e000e100 	.word	0xe000e100

0801aa84 <__NVIC_SetPriority>:
{
 801aa84:	b480      	push	{r7}
 801aa86:	b083      	sub	sp, #12
 801aa88:	af00      	add	r7, sp, #0
 801aa8a:	4603      	mov	r3, r0
 801aa8c:	6039      	str	r1, [r7, #0]
 801aa8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801aa90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	db0a      	blt.n	801aaae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801aa98:	683b      	ldr	r3, [r7, #0]
 801aa9a:	b2da      	uxtb	r2, r3
 801aa9c:	490c      	ldr	r1, [pc, #48]	; (801aad0 <__NVIC_SetPriority+0x4c>)
 801aa9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aaa2:	0112      	lsls	r2, r2, #4
 801aaa4:	b2d2      	uxtb	r2, r2
 801aaa6:	440b      	add	r3, r1
 801aaa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801aaac:	e00a      	b.n	801aac4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801aaae:	683b      	ldr	r3, [r7, #0]
 801aab0:	b2da      	uxtb	r2, r3
 801aab2:	4908      	ldr	r1, [pc, #32]	; (801aad4 <__NVIC_SetPriority+0x50>)
 801aab4:	79fb      	ldrb	r3, [r7, #7]
 801aab6:	f003 030f 	and.w	r3, r3, #15
 801aaba:	3b04      	subs	r3, #4
 801aabc:	0112      	lsls	r2, r2, #4
 801aabe:	b2d2      	uxtb	r2, r2
 801aac0:	440b      	add	r3, r1
 801aac2:	761a      	strb	r2, [r3, #24]
}
 801aac4:	bf00      	nop
 801aac6:	370c      	adds	r7, #12
 801aac8:	46bd      	mov	sp, r7
 801aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aace:	4770      	bx	lr
 801aad0:	e000e100 	.word	0xe000e100
 801aad4:	e000ed00 	.word	0xe000ed00

0801aad8 <NVIC_EncodePriority>:
{
 801aad8:	b480      	push	{r7}
 801aada:	b089      	sub	sp, #36	; 0x24
 801aadc:	af00      	add	r7, sp, #0
 801aade:	60f8      	str	r0, [r7, #12]
 801aae0:	60b9      	str	r1, [r7, #8]
 801aae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	f003 0307 	and.w	r3, r3, #7
 801aaea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801aaec:	69fb      	ldr	r3, [r7, #28]
 801aaee:	f1c3 0307 	rsb	r3, r3, #7
 801aaf2:	2b04      	cmp	r3, #4
 801aaf4:	bf28      	it	cs
 801aaf6:	2304      	movcs	r3, #4
 801aaf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801aafa:	69fb      	ldr	r3, [r7, #28]
 801aafc:	3304      	adds	r3, #4
 801aafe:	2b06      	cmp	r3, #6
 801ab00:	d902      	bls.n	801ab08 <NVIC_EncodePriority+0x30>
 801ab02:	69fb      	ldr	r3, [r7, #28]
 801ab04:	3b03      	subs	r3, #3
 801ab06:	e000      	b.n	801ab0a <NVIC_EncodePriority+0x32>
 801ab08:	2300      	movs	r3, #0
 801ab0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801ab0c:	f04f 32ff 	mov.w	r2, #4294967295
 801ab10:	69bb      	ldr	r3, [r7, #24]
 801ab12:	fa02 f303 	lsl.w	r3, r2, r3
 801ab16:	43da      	mvns	r2, r3
 801ab18:	68bb      	ldr	r3, [r7, #8]
 801ab1a:	401a      	ands	r2, r3
 801ab1c:	697b      	ldr	r3, [r7, #20]
 801ab1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801ab20:	f04f 31ff 	mov.w	r1, #4294967295
 801ab24:	697b      	ldr	r3, [r7, #20]
 801ab26:	fa01 f303 	lsl.w	r3, r1, r3
 801ab2a:	43d9      	mvns	r1, r3
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801ab30:	4313      	orrs	r3, r2
}
 801ab32:	4618      	mov	r0, r3
 801ab34:	3724      	adds	r7, #36	; 0x24
 801ab36:	46bd      	mov	sp, r7
 801ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab3c:	4770      	bx	lr
	...

0801ab40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801ab40:	b580      	push	{r7, lr}
 801ab42:	b082      	sub	sp, #8
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	3b01      	subs	r3, #1
 801ab4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ab50:	d301      	bcc.n	801ab56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801ab52:	2301      	movs	r3, #1
 801ab54:	e00f      	b.n	801ab76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801ab56:	4a0a      	ldr	r2, [pc, #40]	; (801ab80 <SysTick_Config+0x40>)
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	3b01      	subs	r3, #1
 801ab5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801ab5e:	210f      	movs	r1, #15
 801ab60:	f04f 30ff 	mov.w	r0, #4294967295
 801ab64:	f7ff ff8e 	bl	801aa84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801ab68:	4b05      	ldr	r3, [pc, #20]	; (801ab80 <SysTick_Config+0x40>)
 801ab6a:	2200      	movs	r2, #0
 801ab6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801ab6e:	4b04      	ldr	r3, [pc, #16]	; (801ab80 <SysTick_Config+0x40>)
 801ab70:	2207      	movs	r2, #7
 801ab72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801ab74:	2300      	movs	r3, #0
}
 801ab76:	4618      	mov	r0, r3
 801ab78:	3708      	adds	r7, #8
 801ab7a:	46bd      	mov	sp, r7
 801ab7c:	bd80      	pop	{r7, pc}
 801ab7e:	bf00      	nop
 801ab80:	e000e010 	.word	0xe000e010

0801ab84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b082      	sub	sp, #8
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801ab8c:	6878      	ldr	r0, [r7, #4]
 801ab8e:	f7ff ff29 	bl	801a9e4 <__NVIC_SetPriorityGrouping>
}
 801ab92:	bf00      	nop
 801ab94:	3708      	adds	r7, #8
 801ab96:	46bd      	mov	sp, r7
 801ab98:	bd80      	pop	{r7, pc}

0801ab9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801ab9a:	b580      	push	{r7, lr}
 801ab9c:	b086      	sub	sp, #24
 801ab9e:	af00      	add	r7, sp, #0
 801aba0:	4603      	mov	r3, r0
 801aba2:	60b9      	str	r1, [r7, #8]
 801aba4:	607a      	str	r2, [r7, #4]
 801aba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 801aba8:	2300      	movs	r3, #0
 801abaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801abac:	f7ff ff3e 	bl	801aa2c <__NVIC_GetPriorityGrouping>
 801abb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801abb2:	687a      	ldr	r2, [r7, #4]
 801abb4:	68b9      	ldr	r1, [r7, #8]
 801abb6:	6978      	ldr	r0, [r7, #20]
 801abb8:	f7ff ff8e 	bl	801aad8 <NVIC_EncodePriority>
 801abbc:	4602      	mov	r2, r0
 801abbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801abc2:	4611      	mov	r1, r2
 801abc4:	4618      	mov	r0, r3
 801abc6:	f7ff ff5d 	bl	801aa84 <__NVIC_SetPriority>
}
 801abca:	bf00      	nop
 801abcc:	3718      	adds	r7, #24
 801abce:	46bd      	mov	sp, r7
 801abd0:	bd80      	pop	{r7, pc}

0801abd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801abd2:	b580      	push	{r7, lr}
 801abd4:	b082      	sub	sp, #8
 801abd6:	af00      	add	r7, sp, #0
 801abd8:	4603      	mov	r3, r0
 801abda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801abdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801abe0:	4618      	mov	r0, r3
 801abe2:	f7ff ff31 	bl	801aa48 <__NVIC_EnableIRQ>
}
 801abe6:	bf00      	nop
 801abe8:	3708      	adds	r7, #8
 801abea:	46bd      	mov	sp, r7
 801abec:	bd80      	pop	{r7, pc}

0801abee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801abee:	b580      	push	{r7, lr}
 801abf0:	b082      	sub	sp, #8
 801abf2:	af00      	add	r7, sp, #0
 801abf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801abf6:	6878      	ldr	r0, [r7, #4]
 801abf8:	f7ff ffa2 	bl	801ab40 <SysTick_Config>
 801abfc:	4603      	mov	r3, r0
}
 801abfe:	4618      	mov	r0, r3
 801ac00:	3708      	adds	r7, #8
 801ac02:	46bd      	mov	sp, r7
 801ac04:	bd80      	pop	{r7, pc}
	...

0801ac08 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801ac08:	b480      	push	{r7}
 801ac0a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801ac0c:	f3bf 8f5f 	dmb	sy
}
 801ac10:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801ac12:	4b07      	ldr	r3, [pc, #28]	; (801ac30 <HAL_MPU_Disable+0x28>)
 801ac14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac16:	4a06      	ldr	r2, [pc, #24]	; (801ac30 <HAL_MPU_Disable+0x28>)
 801ac18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ac1c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801ac1e:	4b05      	ldr	r3, [pc, #20]	; (801ac34 <HAL_MPU_Disable+0x2c>)
 801ac20:	2200      	movs	r2, #0
 801ac22:	605a      	str	r2, [r3, #4]
}
 801ac24:	bf00      	nop
 801ac26:	46bd      	mov	sp, r7
 801ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac2c:	4770      	bx	lr
 801ac2e:	bf00      	nop
 801ac30:	e000ed00 	.word	0xe000ed00
 801ac34:	e000ed90 	.word	0xe000ed90

0801ac38 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801ac38:	b480      	push	{r7}
 801ac3a:	b083      	sub	sp, #12
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801ac40:	4a0b      	ldr	r2, [pc, #44]	; (801ac70 <HAL_MPU_Enable+0x38>)
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	f043 0301 	orr.w	r3, r3, #1
 801ac48:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801ac4a:	4b0a      	ldr	r3, [pc, #40]	; (801ac74 <HAL_MPU_Enable+0x3c>)
 801ac4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac4e:	4a09      	ldr	r2, [pc, #36]	; (801ac74 <HAL_MPU_Enable+0x3c>)
 801ac50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ac54:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801ac56:	f3bf 8f4f 	dsb	sy
}
 801ac5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801ac5c:	f3bf 8f6f 	isb	sy
}
 801ac60:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801ac62:	bf00      	nop
 801ac64:	370c      	adds	r7, #12
 801ac66:	46bd      	mov	sp, r7
 801ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac6c:	4770      	bx	lr
 801ac6e:	bf00      	nop
 801ac70:	e000ed90 	.word	0xe000ed90
 801ac74:	e000ed00 	.word	0xe000ed00

0801ac78 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801ac78:	b480      	push	{r7}
 801ac7a:	b083      	sub	sp, #12
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	785a      	ldrb	r2, [r3, #1]
 801ac84:	4b1d      	ldr	r3, [pc, #116]	; (801acfc <HAL_MPU_ConfigRegion+0x84>)
 801ac86:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	781b      	ldrb	r3, [r3, #0]
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d029      	beq.n	801ace4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 801ac90:	4a1a      	ldr	r2, [pc, #104]	; (801acfc <HAL_MPU_ConfigRegion+0x84>)
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	685b      	ldr	r3, [r3, #4]
 801ac96:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	7b1b      	ldrb	r3, [r3, #12]
 801ac9c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	7adb      	ldrb	r3, [r3, #11]
 801aca2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801aca4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	7a9b      	ldrb	r3, [r3, #10]
 801acaa:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801acac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	7b5b      	ldrb	r3, [r3, #13]
 801acb2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801acb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	7b9b      	ldrb	r3, [r3, #14]
 801acba:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801acbc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	7bdb      	ldrb	r3, [r3, #15]
 801acc2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801acc4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	7a5b      	ldrb	r3, [r3, #9]
 801acca:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801accc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	7a1b      	ldrb	r3, [r3, #8]
 801acd2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801acd4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801acd6:	687a      	ldr	r2, [r7, #4]
 801acd8:	7812      	ldrb	r2, [r2, #0]
 801acda:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801acdc:	4a07      	ldr	r2, [pc, #28]	; (801acfc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801acde:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801ace0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 801ace2:	e005      	b.n	801acf0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 801ace4:	4b05      	ldr	r3, [pc, #20]	; (801acfc <HAL_MPU_ConfigRegion+0x84>)
 801ace6:	2200      	movs	r2, #0
 801ace8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 801acea:	4b04      	ldr	r3, [pc, #16]	; (801acfc <HAL_MPU_ConfigRegion+0x84>)
 801acec:	2200      	movs	r2, #0
 801acee:	611a      	str	r2, [r3, #16]
}
 801acf0:	bf00      	nop
 801acf2:	370c      	adds	r7, #12
 801acf4:	46bd      	mov	sp, r7
 801acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acfa:	4770      	bx	lr
 801acfc:	e000ed90 	.word	0xe000ed90

0801ad00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801ad00:	b580      	push	{r7, lr}
 801ad02:	b084      	sub	sp, #16
 801ad04:	af00      	add	r7, sp, #0
 801ad06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801ad0e:	f7fe ff63 	bl	8019bd8 <HAL_GetTick>
 801ad12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801ad1a:	b2db      	uxtb	r3, r3
 801ad1c:	2b02      	cmp	r3, #2
 801ad1e:	d008      	beq.n	801ad32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	2280      	movs	r2, #128	; 0x80
 801ad24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	2200      	movs	r2, #0
 801ad2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801ad2e:	2301      	movs	r3, #1
 801ad30:	e052      	b.n	801add8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	681a      	ldr	r2, [r3, #0]
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	f022 0216 	bic.w	r2, r2, #22
 801ad40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	695a      	ldr	r2, [r3, #20]
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ad50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d103      	bne.n	801ad62 <HAL_DMA_Abort+0x62>
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d007      	beq.n	801ad72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	681a      	ldr	r2, [r3, #0]
 801ad68:	687b      	ldr	r3, [r7, #4]
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	f022 0208 	bic.w	r2, r2, #8
 801ad70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	681a      	ldr	r2, [r3, #0]
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	f022 0201 	bic.w	r2, r2, #1
 801ad80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801ad82:	e013      	b.n	801adac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801ad84:	f7fe ff28 	bl	8019bd8 <HAL_GetTick>
 801ad88:	4602      	mov	r2, r0
 801ad8a:	68bb      	ldr	r3, [r7, #8]
 801ad8c:	1ad3      	subs	r3, r2, r3
 801ad8e:	2b05      	cmp	r3, #5
 801ad90:	d90c      	bls.n	801adac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	2220      	movs	r2, #32
 801ad96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	2203      	movs	r2, #3
 801ad9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	2200      	movs	r2, #0
 801ada4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 801ada8:	2303      	movs	r3, #3
 801adaa:	e015      	b.n	801add8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	f003 0301 	and.w	r3, r3, #1
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d1e4      	bne.n	801ad84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801adbe:	223f      	movs	r2, #63	; 0x3f
 801adc0:	409a      	lsls	r2, r3
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	2201      	movs	r2, #1
 801adca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	2200      	movs	r2, #0
 801add2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 801add6:	2300      	movs	r3, #0
}
 801add8:	4618      	mov	r0, r3
 801adda:	3710      	adds	r7, #16
 801addc:	46bd      	mov	sp, r7
 801adde:	bd80      	pop	{r7, pc}

0801ade0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801ade0:	b480      	push	{r7}
 801ade2:	b083      	sub	sp, #12
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801adee:	b2db      	uxtb	r3, r3
 801adf0:	2b02      	cmp	r3, #2
 801adf2:	d004      	beq.n	801adfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	2280      	movs	r2, #128	; 0x80
 801adf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801adfa:	2301      	movs	r3, #1
 801adfc:	e00c      	b.n	801ae18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	2205      	movs	r2, #5
 801ae02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	681a      	ldr	r2, [r3, #0]
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	f022 0201 	bic.w	r2, r2, #1
 801ae14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801ae16:	2300      	movs	r3, #0
}
 801ae18:	4618      	mov	r0, r3
 801ae1a:	370c      	adds	r7, #12
 801ae1c:	46bd      	mov	sp, r7
 801ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae22:	4770      	bx	lr

0801ae24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 801ae24:	b580      	push	{r7, lr}
 801ae26:	b084      	sub	sp, #16
 801ae28:	af00      	add	r7, sp, #0
 801ae2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d101      	bne.n	801ae36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 801ae32:	2301      	movs	r3, #1
 801ae34:	e06a      	b.n	801af0c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d106      	bne.n	801ae4e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	2223      	movs	r2, #35	; 0x23
 801ae44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 801ae48:	6878      	ldr	r0, [r7, #4]
 801ae4a:	f006 fbaf 	bl	80215ac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ae4e:	4b31      	ldr	r3, [pc, #196]	; (801af14 <HAL_ETH_Init+0xf0>)
 801ae50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae52:	4a30      	ldr	r2, [pc, #192]	; (801af14 <HAL_ETH_Init+0xf0>)
 801ae54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801ae58:	6453      	str	r3, [r2, #68]	; 0x44
 801ae5a:	4b2e      	ldr	r3, [pc, #184]	; (801af14 <HAL_ETH_Init+0xf0>)
 801ae5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801ae62:	60bb      	str	r3, [r7, #8]
 801ae64:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 801ae66:	4b2c      	ldr	r3, [pc, #176]	; (801af18 <HAL_ETH_Init+0xf4>)
 801ae68:	685b      	ldr	r3, [r3, #4]
 801ae6a:	4a2b      	ldr	r2, [pc, #172]	; (801af18 <HAL_ETH_Init+0xf4>)
 801ae6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801ae70:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 801ae72:	4b29      	ldr	r3, [pc, #164]	; (801af18 <HAL_ETH_Init+0xf4>)
 801ae74:	685a      	ldr	r2, [r3, #4]
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	689b      	ldr	r3, [r3, #8]
 801ae7a:	4927      	ldr	r1, [pc, #156]	; (801af18 <HAL_ETH_Init+0xf4>)
 801ae7c:	4313      	orrs	r3, r2
 801ae7e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 801ae80:	4b25      	ldr	r3, [pc, #148]	; (801af18 <HAL_ETH_Init+0xf4>)
 801ae82:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	681b      	ldr	r3, [r3, #0]
 801ae88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	687a      	ldr	r2, [r7, #4]
 801ae90:	6812      	ldr	r2, [r2, #0]
 801ae92:	f043 0301 	orr.w	r3, r3, #1
 801ae96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801ae9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801ae9c:	f7fe fe9c 	bl	8019bd8 <HAL_GetTick>
 801aea0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 801aea2:	e011      	b.n	801aec8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 801aea4:	f7fe fe98 	bl	8019bd8 <HAL_GetTick>
 801aea8:	4602      	mov	r2, r0
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	1ad3      	subs	r3, r2, r3
 801aeae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801aeb2:	d909      	bls.n	801aec8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	2204      	movs	r2, #4
 801aeb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	22e0      	movs	r2, #224	; 0xe0
 801aec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 801aec4:	2301      	movs	r3, #1
 801aec6:	e021      	b.n	801af0c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	f003 0301 	and.w	r3, r3, #1
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d1e4      	bne.n	801aea4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 801aeda:	6878      	ldr	r0, [r7, #4]
 801aedc:	f000 fee4 	bl	801bca8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 801aee0:	6878      	ldr	r0, [r7, #4]
 801aee2:	f000 ff8b 	bl	801bdfc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 801aee6:	6878      	ldr	r0, [r7, #4]
 801aee8:	f000 ffe1 	bl	801beae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	685b      	ldr	r3, [r3, #4]
 801aef0:	461a      	mov	r2, r3
 801aef2:	2100      	movs	r1, #0
 801aef4:	6878      	ldr	r0, [r7, #4]
 801aef6:	f000 ff49 	bl	801bd8c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	2200      	movs	r2, #0
 801aefe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	2210      	movs	r2, #16
 801af06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801af0a:	2300      	movs	r3, #0
}
 801af0c:	4618      	mov	r0, r3
 801af0e:	3710      	adds	r7, #16
 801af10:	46bd      	mov	sp, r7
 801af12:	bd80      	pop	{r7, pc}
 801af14:	40023800 	.word	0x40023800
 801af18:	40013800 	.word	0x40013800

0801af1c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	b084      	sub	sp, #16
 801af20:	af00      	add	r7, sp, #0
 801af22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801af2a:	2b10      	cmp	r3, #16
 801af2c:	d150      	bne.n	801afd0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	2223      	movs	r2, #35	; 0x23
 801af32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	2204      	movs	r2, #4
 801af3a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 801af3c:	6878      	ldr	r0, [r7, #4]
 801af3e:	f000 f9fd 	bl	801b33c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	681a      	ldr	r2, [r3, #0]
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	f042 0208 	orr.w	r2, r2, #8
 801af50:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801af5a:	2001      	movs	r0, #1
 801af5c:	f7fe fe48 	bl	8019bf0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	68fa      	ldr	r2, [r7, #12]
 801af66:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	681a      	ldr	r2, [r3, #0]
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	681b      	ldr	r3, [r3, #0]
 801af72:	f042 0204 	orr.w	r2, r2, #4
 801af76:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801af80:	2001      	movs	r0, #1
 801af82:	f7fe fe35 	bl	8019bf0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	68fa      	ldr	r2, [r7, #12]
 801af8c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 801af8e:	6878      	ldr	r0, [r7, #4]
 801af90:	f000 fd2a 	bl	801b9e8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801af9c:	699b      	ldr	r3, [r3, #24]
 801af9e:	687a      	ldr	r2, [r7, #4]
 801afa0:	6812      	ldr	r2, [r2, #0]
 801afa2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801afa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801afaa:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801afb4:	699b      	ldr	r3, [r3, #24]
 801afb6:	687a      	ldr	r2, [r7, #4]
 801afb8:	6812      	ldr	r2, [r2, #0]
 801afba:	f043 0302 	orr.w	r3, r3, #2
 801afbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801afc2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	2223      	movs	r2, #35	; 0x23
 801afc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801afcc:	2300      	movs	r3, #0
 801afce:	e000      	b.n	801afd2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 801afd0:	2301      	movs	r3, #1
  }
}
 801afd2:	4618      	mov	r0, r3
 801afd4:	3710      	adds	r7, #16
 801afd6:	46bd      	mov	sp, r7
 801afd8:	bd80      	pop	{r7, pc}

0801afda <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 801afda:	b580      	push	{r7, lr}
 801afdc:	b084      	sub	sp, #16
 801afde:	af00      	add	r7, sp, #0
 801afe0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801afe8:	2b23      	cmp	r3, #35	; 0x23
 801afea:	d14a      	bne.n	801b082 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	2223      	movs	r2, #35	; 0x23
 801aff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801affc:	699b      	ldr	r3, [r3, #24]
 801affe:	687a      	ldr	r2, [r7, #4]
 801b000:	6812      	ldr	r2, [r2, #0]
 801b002:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b006:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801b00a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b014:	699b      	ldr	r3, [r3, #24]
 801b016:	687a      	ldr	r2, [r7, #4]
 801b018:	6812      	ldr	r2, [r2, #0]
 801b01a:	f023 0302 	bic.w	r3, r3, #2
 801b01e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801b022:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	681b      	ldr	r3, [r3, #0]
 801b028:	681a      	ldr	r2, [r3, #0]
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	f022 0204 	bic.w	r2, r2, #4
 801b032:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801b03c:	2001      	movs	r0, #1
 801b03e:	f7fe fdd7 	bl	8019bf0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	68fa      	ldr	r2, [r7, #12]
 801b048:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 801b04a:	6878      	ldr	r0, [r7, #4]
 801b04c:	f000 fccc 	bl	801b9e8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	681a      	ldr	r2, [r3, #0]
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	f022 0208 	bic.w	r2, r2, #8
 801b05e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801b068:	2001      	movs	r0, #1
 801b06a:	f7fe fdc1 	bl	8019bf0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	68fa      	ldr	r2, [r7, #12]
 801b074:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	2210      	movs	r2, #16
 801b07a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 801b07e:	2300      	movs	r3, #0
 801b080:	e000      	b.n	801b084 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 801b082:	2301      	movs	r3, #1
  }
}
 801b084:	4618      	mov	r0, r3
 801b086:	3710      	adds	r7, #16
 801b088:	46bd      	mov	sp, r7
 801b08a:	bd80      	pop	{r7, pc}

0801b08c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 801b08c:	b580      	push	{r7, lr}
 801b08e:	b086      	sub	sp, #24
 801b090:	af00      	add	r7, sp, #0
 801b092:	60f8      	str	r0, [r7, #12]
 801b094:	60b9      	str	r1, [r7, #8]
 801b096:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 801b098:	68bb      	ldr	r3, [r7, #8]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d109      	bne.n	801b0b2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b0a4:	f043 0201 	orr.w	r2, r3, #1
 801b0a8:	68fb      	ldr	r3, [r7, #12]
 801b0aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 801b0ae:	2301      	movs	r3, #1
 801b0b0:	e07c      	b.n	801b1ac <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 801b0b2:	68fb      	ldr	r3, [r7, #12]
 801b0b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b0b8:	2b23      	cmp	r3, #35	; 0x23
 801b0ba:	d176      	bne.n	801b1aa <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 801b0bc:	2200      	movs	r2, #0
 801b0be:	68b9      	ldr	r1, [r7, #8]
 801b0c0:	68f8      	ldr	r0, [r7, #12]
 801b0c2:	f000 ff61 	bl	801bf88 <ETH_Prepare_Tx_Descriptors>
 801b0c6:	4603      	mov	r3, r0
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d009      	beq.n	801b0e0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b0d2:	f043 0202 	orr.w	r2, r3, #2
 801b0d6:	68fb      	ldr	r3, [r7, #12]
 801b0d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 801b0dc:	2301      	movs	r3, #1
 801b0de:	e065      	b.n	801b1ac <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 801b0e0:	f3bf 8f4f 	dsb	sy
}
 801b0e4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	3206      	adds	r2, #6
 801b0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b0f2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0f8:	1c5a      	adds	r2, r3, #1
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	629a      	str	r2, [r3, #40]	; 0x28
 801b0fe:	68fb      	ldr	r3, [r7, #12]
 801b100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b102:	2b03      	cmp	r3, #3
 801b104:	d904      	bls.n	801b110 <HAL_ETH_Transmit+0x84>
 801b106:	68fb      	ldr	r3, [r7, #12]
 801b108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b10a:	1f1a      	subs	r2, r3, #4
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 801b110:	68fb      	ldr	r3, [r7, #12]
 801b112:	6a99      	ldr	r1, [r3, #40]	; 0x28
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	681a      	ldr	r2, [r3, #0]
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	3106      	adds	r1, #6
 801b11c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b120:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801b124:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 801b126:	f7fe fd57 	bl	8019bd8 <HAL_GetTick>
 801b12a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801b12c:	e037      	b.n	801b19e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b136:	695b      	ldr	r3, [r3, #20]
 801b138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d011      	beq.n	801b164 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b146:	f043 0208 	orr.w	r2, r3, #8
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b158:	695a      	ldr	r2, [r3, #20]
 801b15a:	68fb      	ldr	r3, [r7, #12]
 801b15c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 801b160:	2301      	movs	r3, #1
 801b162:	e023      	b.n	801b1ac <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b16a:	d018      	beq.n	801b19e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801b16c:	f7fe fd34 	bl	8019bd8 <HAL_GetTick>
 801b170:	4602      	mov	r2, r0
 801b172:	693b      	ldr	r3, [r7, #16]
 801b174:	1ad3      	subs	r3, r2, r3
 801b176:	687a      	ldr	r2, [r7, #4]
 801b178:	429a      	cmp	r2, r3
 801b17a:	d302      	bcc.n	801b182 <HAL_ETH_Transmit+0xf6>
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d10d      	bne.n	801b19e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b188:	f043 0204 	orr.w	r2, r3, #4
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 801b192:	697b      	ldr	r3, [r7, #20]
 801b194:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 801b198:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 801b19a:	2301      	movs	r3, #1
 801b19c:	e006      	b.n	801b1ac <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801b19e:	697b      	ldr	r3, [r7, #20]
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	dbc3      	blt.n	801b12e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 801b1a6:	2300      	movs	r3, #0
 801b1a8:	e000      	b.n	801b1ac <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 801b1aa:	2301      	movs	r3, #1
  }
}
 801b1ac:	4618      	mov	r0, r3
 801b1ae:	3718      	adds	r7, #24
 801b1b0:	46bd      	mov	sp, r7
 801b1b2:	bd80      	pop	{r7, pc}

0801b1b4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 801b1b4:	b580      	push	{r7, lr}
 801b1b6:	b088      	sub	sp, #32
 801b1b8:	af00      	add	r7, sp, #0
 801b1ba:	6078      	str	r0, [r7, #4]
 801b1bc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 801b1be:	2300      	movs	r3, #0
 801b1c0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 801b1c2:	2300      	movs	r3, #0
 801b1c4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 801b1c6:	683b      	ldr	r3, [r7, #0]
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d109      	bne.n	801b1e0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b1d2:	f043 0201 	orr.w	r2, r3, #1
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 801b1dc:	2301      	movs	r3, #1
 801b1de:	e0a8      	b.n	801b332 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b1e6:	2b23      	cmp	r3, #35	; 0x23
 801b1e8:	d001      	beq.n	801b1ee <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 801b1ea:	2301      	movs	r3, #1
 801b1ec:	e0a1      	b.n	801b332 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b1f2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	69fa      	ldr	r2, [r7, #28]
 801b1f8:	3212      	adds	r2, #18
 801b1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b1fe:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b204:	f1c3 0304 	rsb	r3, r3, #4
 801b208:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801b20a:	e06a      	b.n	801b2e2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 801b20c:	69bb      	ldr	r3, [r7, #24]
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b214:	2b00      	cmp	r3, #0
 801b216:	d007      	beq.n	801b228 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 801b218:	69bb      	ldr	r3, [r7, #24]
 801b21a:	699a      	ldr	r2, [r3, #24]
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 801b220:	69bb      	ldr	r3, [r7, #24]
 801b222:	69da      	ldr	r2, [r3, #28]
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 801b228:	69bb      	ldr	r3, [r7, #24]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b230:	2b00      	cmp	r3, #0
 801b232:	d103      	bne.n	801b23c <HAL_ETH_ReadData+0x88>
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d040      	beq.n	801b2be <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 801b23c:	69bb      	ldr	r3, [r7, #24]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b244:	2b00      	cmp	r3, #0
 801b246:	d005      	beq.n	801b254 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	2200      	movs	r2, #0
 801b24c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	2200      	movs	r2, #0
 801b252:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	695b      	ldr	r3, [r3, #20]
 801b258:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 801b25a:	69bb      	ldr	r3, [r7, #24]
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b262:	2b00      	cmp	r3, #0
 801b264:	d00c      	beq.n	801b280 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 801b266:	69bb      	ldr	r3, [r7, #24]
 801b268:	681b      	ldr	r3, [r3, #0]
 801b26a:	0c1b      	lsrs	r3, r3, #16
 801b26c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b270:	3b04      	subs	r3, #4
 801b272:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 801b274:	69bb      	ldr	r3, [r7, #24]
 801b276:	681a      	ldr	r2, [r3, #0]
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 801b27c:	2301      	movs	r3, #1
 801b27e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 801b280:	69bb      	ldr	r3, [r7, #24]
 801b282:	689a      	ldr	r2, [r3, #8]
 801b284:	69bb      	ldr	r3, [r7, #24]
 801b286:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 801b294:	69bb      	ldr	r3, [r7, #24]
 801b296:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 801b298:	461a      	mov	r2, r3
 801b29a:	693b      	ldr	r3, [r7, #16]
 801b29c:	b29b      	uxth	r3, r3
 801b29e:	f006 fb4f 	bl	8021940 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b2a6:	1c5a      	adds	r2, r3, #1
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801b2b0:	693b      	ldr	r3, [r7, #16]
 801b2b2:	441a      	add	r2, r3
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 801b2b8:	69bb      	ldr	r3, [r7, #24]
 801b2ba:	2200      	movs	r2, #0
 801b2bc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 801b2be:	69fb      	ldr	r3, [r7, #28]
 801b2c0:	3301      	adds	r3, #1
 801b2c2:	61fb      	str	r3, [r7, #28]
 801b2c4:	69fb      	ldr	r3, [r7, #28]
 801b2c6:	2b03      	cmp	r3, #3
 801b2c8:	d902      	bls.n	801b2d0 <HAL_ETH_ReadData+0x11c>
 801b2ca:	69fb      	ldr	r3, [r7, #28]
 801b2cc:	3b04      	subs	r3, #4
 801b2ce:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	69fa      	ldr	r2, [r7, #28]
 801b2d4:	3212      	adds	r2, #18
 801b2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b2da:	61bb      	str	r3, [r7, #24]
    desccnt++;
 801b2dc:	697b      	ldr	r3, [r7, #20]
 801b2de:	3301      	adds	r3, #1
 801b2e0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801b2e2:	69bb      	ldr	r3, [r7, #24]
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	db06      	blt.n	801b2f8 <HAL_ETH_ReadData+0x144>
 801b2ea:	697a      	ldr	r2, [r7, #20]
 801b2ec:	68bb      	ldr	r3, [r7, #8]
 801b2ee:	429a      	cmp	r2, r3
 801b2f0:	d202      	bcs.n	801b2f8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 801b2f2:	7bfb      	ldrb	r3, [r7, #15]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d089      	beq.n	801b20c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b2fc:	697b      	ldr	r3, [r7, #20]
 801b2fe:	441a      	add	r2, r3
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d002      	beq.n	801b312 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 801b30c:	6878      	ldr	r0, [r7, #4]
 801b30e:	f000 f815 	bl	801b33c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	69fa      	ldr	r2, [r7, #28]
 801b316:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 801b318:	7bfb      	ldrb	r3, [r7, #15]
 801b31a:	2b01      	cmp	r3, #1
 801b31c:	d108      	bne.n	801b330 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801b322:	683b      	ldr	r3, [r7, #0]
 801b324:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	2200      	movs	r2, #0
 801b32a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801b32c:	2300      	movs	r3, #0
 801b32e:	e000      	b.n	801b332 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 801b330:	2301      	movs	r3, #1
}
 801b332:	4618      	mov	r0, r3
 801b334:	3720      	adds	r7, #32
 801b336:	46bd      	mov	sp, r7
 801b338:	bd80      	pop	{r7, pc}
	...

0801b33c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 801b33c:	b580      	push	{r7, lr}
 801b33e:	b088      	sub	sp, #32
 801b340:	af00      	add	r7, sp, #0
 801b342:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 801b344:	2300      	movs	r3, #0
 801b346:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 801b348:	2301      	movs	r3, #1
 801b34a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b350:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	69fa      	ldr	r2, [r7, #28]
 801b356:	3212      	adds	r2, #18
 801b358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b35c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b362:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 801b364:	e040      	b.n	801b3e8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 801b366:	697b      	ldr	r3, [r7, #20]
 801b368:	6a1b      	ldr	r3, [r3, #32]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d112      	bne.n	801b394 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 801b36e:	f107 030c 	add.w	r3, r7, #12
 801b372:	4618      	mov	r0, r3
 801b374:	f006 fab4 	bl	80218e0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 801b378:	68fb      	ldr	r3, [r7, #12]
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d102      	bne.n	801b384 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 801b37e:	2300      	movs	r3, #0
 801b380:	74fb      	strb	r3, [r7, #19]
 801b382:	e007      	b.n	801b394 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 801b384:	68fb      	ldr	r3, [r7, #12]
 801b386:	461a      	mov	r2, r3
 801b388:	697b      	ldr	r3, [r7, #20]
 801b38a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 801b38c:	68fb      	ldr	r3, [r7, #12]
 801b38e:	461a      	mov	r2, r3
 801b390:	697b      	ldr	r3, [r7, #20]
 801b392:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 801b394:	7cfb      	ldrb	r3, [r7, #19]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d026      	beq.n	801b3e8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d103      	bne.n	801b3aa <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 801b3a2:	697b      	ldr	r3, [r7, #20]
 801b3a4:	4a1e      	ldr	r2, [pc, #120]	; (801b420 <ETH_UpdateDescriptor+0xe4>)
 801b3a6:	605a      	str	r2, [r3, #4]
 801b3a8:	e003      	b.n	801b3b2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 801b3aa:	697b      	ldr	r3, [r7, #20]
 801b3ac:	f244 52f8 	movw	r2, #17912	; 0x45f8
 801b3b0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 801b3b2:	f3bf 8f5f 	dmb	sy
}
 801b3b6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 801b3b8:	697b      	ldr	r3, [r7, #20]
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801b3c0:	697b      	ldr	r3, [r7, #20]
 801b3c2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 801b3c4:	69fb      	ldr	r3, [r7, #28]
 801b3c6:	3301      	adds	r3, #1
 801b3c8:	61fb      	str	r3, [r7, #28]
 801b3ca:	69fb      	ldr	r3, [r7, #28]
 801b3cc:	2b03      	cmp	r3, #3
 801b3ce:	d902      	bls.n	801b3d6 <ETH_UpdateDescriptor+0x9a>
 801b3d0:	69fb      	ldr	r3, [r7, #28]
 801b3d2:	3b04      	subs	r3, #4
 801b3d4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	69fa      	ldr	r2, [r7, #28]
 801b3da:	3212      	adds	r2, #18
 801b3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b3e0:	617b      	str	r3, [r7, #20]
      desccount--;
 801b3e2:	69bb      	ldr	r3, [r7, #24]
 801b3e4:	3b01      	subs	r3, #1
 801b3e6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 801b3e8:	69bb      	ldr	r3, [r7, #24]
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d002      	beq.n	801b3f4 <ETH_UpdateDescriptor+0xb8>
 801b3ee:	7cfb      	ldrb	r3, [r7, #19]
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d1b8      	bne.n	801b366 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b3f8:	69ba      	ldr	r2, [r7, #24]
 801b3fa:	429a      	cmp	r2, r3
 801b3fc:	d00c      	beq.n	801b418 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b406:	461a      	mov	r2, r3
 801b408:	2300      	movs	r3, #0
 801b40a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	69fa      	ldr	r2, [r7, #28]
 801b410:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	69ba      	ldr	r2, [r7, #24]
 801b416:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 801b418:	bf00      	nop
 801b41a:	3720      	adds	r7, #32
 801b41c:	46bd      	mov	sp, r7
 801b41e:	bd80      	pop	{r7, pc}
 801b420:	800045f8 	.word	0x800045f8

0801b424 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 801b424:	b580      	push	{r7, lr}
 801b426:	b082      	sub	sp, #8
 801b428:	af00      	add	r7, sp, #0
 801b42a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b434:	695b      	ldr	r3, [r3, #20]
 801b436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b43a:	2b40      	cmp	r3, #64	; 0x40
 801b43c:	d112      	bne.n	801b464 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b446:	69db      	ldr	r3, [r3, #28]
 801b448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b44c:	2b40      	cmp	r3, #64	; 0x40
 801b44e:	d109      	bne.n	801b464 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b458:	461a      	mov	r2, r3
 801b45a:	4b50      	ldr	r3, [pc, #320]	; (801b59c <HAL_ETH_IRQHandler+0x178>)
 801b45c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 801b45e:	6878      	ldr	r0, [r7, #4]
 801b460:	f000 f8ac 	bl	801b5bc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b46c:	695b      	ldr	r3, [r3, #20]
 801b46e:	f003 0301 	and.w	r3, r3, #1
 801b472:	2b01      	cmp	r3, #1
 801b474:	d113      	bne.n	801b49e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b47e:	69db      	ldr	r3, [r3, #28]
 801b480:	f003 0301 	and.w	r3, r3, #1
 801b484:	2b01      	cmp	r3, #1
 801b486:	d10a      	bne.n	801b49e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b490:	461a      	mov	r2, r3
 801b492:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 801b496:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 801b498:	6878      	ldr	r0, [r7, #4]
 801b49a:	f000 f885 	bl	801b5a8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b4a6:	695b      	ldr	r3, [r3, #20]
 801b4a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b4ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b4b0:	d14c      	bne.n	801b54c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b4ba:	69db      	ldr	r3, [r3, #28]
 801b4bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b4c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b4c4:	d142      	bne.n	801b54c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b4cc:	f043 0208 	orr.w	r2, r3, #8
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b4de:	695b      	ldr	r3, [r3, #20]
 801b4e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b4e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b4e8:	d11a      	bne.n	801b520 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b4f2:	695a      	ldr	r2, [r3, #20]
 801b4f4:	4b2a      	ldr	r3, [pc, #168]	; (801b5a0 <HAL_ETH_IRQHandler+0x17c>)
 801b4f6:	4013      	ands	r3, r2
 801b4f8:	687a      	ldr	r2, [r7, #4]
 801b4fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b506:	69db      	ldr	r3, [r3, #28]
 801b508:	687a      	ldr	r2, [r7, #4]
 801b50a:	6812      	ldr	r2, [r2, #0]
 801b50c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 801b510:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801b514:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	22e0      	movs	r2, #224	; 0xe0
 801b51a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801b51e:	e012      	b.n	801b546 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b528:	695a      	ldr	r2, [r3, #20]
 801b52a:	f248 6380 	movw	r3, #34432	; 0x8680
 801b52e:	4013      	ands	r3, r2
 801b530:	687a      	ldr	r2, [r7, #4]
 801b532:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b53e:	461a      	mov	r2, r3
 801b540:	f248 6380 	movw	r3, #34432	; 0x8680
 801b544:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 801b546:	6878      	ldr	r0, [r7, #4]
 801b548:	f000 f842 	bl	801b5d0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b552:	f003 0308 	and.w	r3, r3, #8
 801b556:	2b08      	cmp	r3, #8
 801b558:	d10e      	bne.n	801b578 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b560:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 801b56a:	6878      	ldr	r0, [r7, #4]
 801b56c:	f000 f83a 	bl	801b5e4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	2200      	movs	r2, #0
 801b574:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 801b578:	4b0a      	ldr	r3, [pc, #40]	; (801b5a4 <HAL_ETH_IRQHandler+0x180>)
 801b57a:	695b      	ldr	r3, [r3, #20]
 801b57c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801b580:	2b00      	cmp	r3, #0
 801b582:	d006      	beq.n	801b592 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 801b584:	4b07      	ldr	r3, [pc, #28]	; (801b5a4 <HAL_ETH_IRQHandler+0x180>)
 801b586:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801b58a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 801b58c:	6878      	ldr	r0, [r7, #4]
 801b58e:	f000 f833 	bl	801b5f8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 801b592:	bf00      	nop
 801b594:	3708      	adds	r7, #8
 801b596:	46bd      	mov	sp, r7
 801b598:	bd80      	pop	{r7, pc}
 801b59a:	bf00      	nop
 801b59c:	00010040 	.word	0x00010040
 801b5a0:	007e2000 	.word	0x007e2000
 801b5a4:	40013c00 	.word	0x40013c00

0801b5a8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 801b5a8:	b480      	push	{r7}
 801b5aa:	b083      	sub	sp, #12
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 801b5b0:	bf00      	nop
 801b5b2:	370c      	adds	r7, #12
 801b5b4:	46bd      	mov	sp, r7
 801b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ba:	4770      	bx	lr

0801b5bc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 801b5bc:	b480      	push	{r7}
 801b5be:	b083      	sub	sp, #12
 801b5c0:	af00      	add	r7, sp, #0
 801b5c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 801b5c4:	bf00      	nop
 801b5c6:	370c      	adds	r7, #12
 801b5c8:	46bd      	mov	sp, r7
 801b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ce:	4770      	bx	lr

0801b5d0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 801b5d0:	b480      	push	{r7}
 801b5d2:	b083      	sub	sp, #12
 801b5d4:	af00      	add	r7, sp, #0
 801b5d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 801b5d8:	bf00      	nop
 801b5da:	370c      	adds	r7, #12
 801b5dc:	46bd      	mov	sp, r7
 801b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5e2:	4770      	bx	lr

0801b5e4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 801b5e4:	b480      	push	{r7}
 801b5e6:	b083      	sub	sp, #12
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 801b5ec:	bf00      	nop
 801b5ee:	370c      	adds	r7, #12
 801b5f0:	46bd      	mov	sp, r7
 801b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5f6:	4770      	bx	lr

0801b5f8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 801b5f8:	b480      	push	{r7}
 801b5fa:	b083      	sub	sp, #12
 801b5fc:	af00      	add	r7, sp, #0
 801b5fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 801b600:	bf00      	nop
 801b602:	370c      	adds	r7, #12
 801b604:	46bd      	mov	sp, r7
 801b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b60a:	4770      	bx	lr

0801b60c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 801b60c:	b580      	push	{r7, lr}
 801b60e:	b086      	sub	sp, #24
 801b610:	af00      	add	r7, sp, #0
 801b612:	60f8      	str	r0, [r7, #12]
 801b614:	60b9      	str	r1, [r7, #8]
 801b616:	607a      	str	r2, [r7, #4]
 801b618:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 801b61a:	68fb      	ldr	r3, [r7, #12]
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	691b      	ldr	r3, [r3, #16]
 801b620:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 801b622:	697b      	ldr	r3, [r7, #20]
 801b624:	f003 031c 	and.w	r3, r3, #28
 801b628:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 801b62a:	68bb      	ldr	r3, [r7, #8]
 801b62c:	02db      	lsls	r3, r3, #11
 801b62e:	b29b      	uxth	r3, r3
 801b630:	697a      	ldr	r2, [r7, #20]
 801b632:	4313      	orrs	r3, r2
 801b634:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	019b      	lsls	r3, r3, #6
 801b63a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801b63e:	697a      	ldr	r2, [r7, #20]
 801b640:	4313      	orrs	r3, r2
 801b642:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 801b644:	697b      	ldr	r3, [r7, #20]
 801b646:	f023 0302 	bic.w	r3, r3, #2
 801b64a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 801b64c:	697b      	ldr	r3, [r7, #20]
 801b64e:	f043 0301 	orr.w	r3, r3, #1
 801b652:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	697a      	ldr	r2, [r7, #20]
 801b65a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 801b65c:	f7fe fabc 	bl	8019bd8 <HAL_GetTick>
 801b660:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801b662:	e00d      	b.n	801b680 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 801b664:	f7fe fab8 	bl	8019bd8 <HAL_GetTick>
 801b668:	4602      	mov	r2, r0
 801b66a:	693b      	ldr	r3, [r7, #16]
 801b66c:	1ad3      	subs	r3, r2, r3
 801b66e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b672:	d301      	bcc.n	801b678 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 801b674:	2301      	movs	r3, #1
 801b676:	e010      	b.n	801b69a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	691b      	ldr	r3, [r3, #16]
 801b67e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801b680:	697b      	ldr	r3, [r7, #20]
 801b682:	f003 0301 	and.w	r3, r3, #1
 801b686:	2b00      	cmp	r3, #0
 801b688:	d1ec      	bne.n	801b664 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 801b68a:	68fb      	ldr	r3, [r7, #12]
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	695b      	ldr	r3, [r3, #20]
 801b690:	b29b      	uxth	r3, r3
 801b692:	461a      	mov	r2, r3
 801b694:	683b      	ldr	r3, [r7, #0]
 801b696:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801b698:	2300      	movs	r3, #0
}
 801b69a:	4618      	mov	r0, r3
 801b69c:	3718      	adds	r7, #24
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	bd80      	pop	{r7, pc}

0801b6a2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 801b6a2:	b580      	push	{r7, lr}
 801b6a4:	b086      	sub	sp, #24
 801b6a6:	af00      	add	r7, sp, #0
 801b6a8:	60f8      	str	r0, [r7, #12]
 801b6aa:	60b9      	str	r1, [r7, #8]
 801b6ac:	607a      	str	r2, [r7, #4]
 801b6ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 801b6b0:	68fb      	ldr	r3, [r7, #12]
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	691b      	ldr	r3, [r3, #16]
 801b6b6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 801b6b8:	697b      	ldr	r3, [r7, #20]
 801b6ba:	f003 031c 	and.w	r3, r3, #28
 801b6be:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 801b6c0:	68bb      	ldr	r3, [r7, #8]
 801b6c2:	02db      	lsls	r3, r3, #11
 801b6c4:	b29b      	uxth	r3, r3
 801b6c6:	697a      	ldr	r2, [r7, #20]
 801b6c8:	4313      	orrs	r3, r2
 801b6ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	019b      	lsls	r3, r3, #6
 801b6d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801b6d4:	697a      	ldr	r2, [r7, #20]
 801b6d6:	4313      	orrs	r3, r2
 801b6d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 801b6da:	697b      	ldr	r3, [r7, #20]
 801b6dc:	f043 0302 	orr.w	r3, r3, #2
 801b6e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 801b6e2:	697b      	ldr	r3, [r7, #20]
 801b6e4:	f043 0301 	orr.w	r3, r3, #1
 801b6e8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 801b6ea:	683b      	ldr	r3, [r7, #0]
 801b6ec:	b29a      	uxth	r2, r3
 801b6ee:	68fb      	ldr	r3, [r7, #12]
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 801b6f4:	68fb      	ldr	r3, [r7, #12]
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	697a      	ldr	r2, [r7, #20]
 801b6fa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b6fc:	f7fe fa6c 	bl	8019bd8 <HAL_GetTick>
 801b700:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801b702:	e00d      	b.n	801b720 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 801b704:	f7fe fa68 	bl	8019bd8 <HAL_GetTick>
 801b708:	4602      	mov	r2, r0
 801b70a:	693b      	ldr	r3, [r7, #16]
 801b70c:	1ad3      	subs	r3, r2, r3
 801b70e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b712:	d301      	bcc.n	801b718 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 801b714:	2301      	movs	r3, #1
 801b716:	e009      	b.n	801b72c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	691b      	ldr	r3, [r3, #16]
 801b71e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801b720:	697b      	ldr	r3, [r7, #20]
 801b722:	f003 0301 	and.w	r3, r3, #1
 801b726:	2b00      	cmp	r3, #0
 801b728:	d1ec      	bne.n	801b704 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 801b72a:	2300      	movs	r3, #0
}
 801b72c:	4618      	mov	r0, r3
 801b72e:	3718      	adds	r7, #24
 801b730:	46bd      	mov	sp, r7
 801b732:	bd80      	pop	{r7, pc}

0801b734 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 801b734:	b480      	push	{r7}
 801b736:	b083      	sub	sp, #12
 801b738:	af00      	add	r7, sp, #0
 801b73a:	6078      	str	r0, [r7, #4]
 801b73c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801b73e:	683b      	ldr	r3, [r7, #0]
 801b740:	2b00      	cmp	r3, #0
 801b742:	d101      	bne.n	801b748 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 801b744:	2301      	movs	r3, #1
 801b746:	e0d9      	b.n	801b8fc <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	681b      	ldr	r3, [r3, #0]
 801b74e:	f003 0310 	and.w	r3, r3, #16
 801b752:	2b00      	cmp	r3, #0
 801b754:	bf14      	ite	ne
 801b756:	2301      	movne	r3, #1
 801b758:	2300      	moveq	r3, #0
 801b75a:	b2db      	uxtb	r3, r3
 801b75c:	461a      	mov	r2, r3
 801b75e:	683b      	ldr	r3, [r7, #0]
 801b760:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801b76e:	683b      	ldr	r3, [r7, #0]
 801b770:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	681b      	ldr	r3, [r3, #0]
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	bf0c      	ite	eq
 801b780:	2301      	moveq	r3, #1
 801b782:	2300      	movne	r3, #0
 801b784:	b2db      	uxtb	r3, r3
 801b786:	461a      	mov	r2, r3
 801b788:	683b      	ldr	r3, [r7, #0]
 801b78a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	681b      	ldr	r3, [r3, #0]
 801b794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 801b798:	2b00      	cmp	r3, #0
 801b79a:	bf14      	ite	ne
 801b79c:	2301      	movne	r3, #1
 801b79e:	2300      	moveq	r3, #0
 801b7a0:	b2db      	uxtb	r3, r3
 801b7a2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 801b7a4:	683b      	ldr	r3, [r7, #0]
 801b7a6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	bf0c      	ite	eq
 801b7b6:	2301      	moveq	r3, #1
 801b7b8:	2300      	movne	r3, #0
 801b7ba:	b2db      	uxtb	r3, r3
 801b7bc:	461a      	mov	r2, r3
 801b7be:	683b      	ldr	r3, [r7, #0]
 801b7c0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	bf14      	ite	ne
 801b7d0:	2301      	movne	r3, #1
 801b7d2:	2300      	moveq	r3, #0
 801b7d4:	b2db      	uxtb	r3, r3
 801b7d6:	461a      	mov	r2, r3
 801b7d8:	683b      	ldr	r3, [r7, #0]
 801b7da:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	681b      	ldr	r3, [r3, #0]
 801b7e2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 801b7e6:	683b      	ldr	r3, [r7, #0]
 801b7e8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	681b      	ldr	r3, [r3, #0]
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 801b7f4:	683b      	ldr	r3, [r7, #0]
 801b7f6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b802:	2b00      	cmp	r3, #0
 801b804:	bf0c      	ite	eq
 801b806:	2301      	moveq	r3, #1
 801b808:	2300      	movne	r3, #0
 801b80a:	b2db      	uxtb	r3, r3
 801b80c:	461a      	mov	r2, r3
 801b80e:	683b      	ldr	r3, [r7, #0]
 801b810:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	681b      	ldr	r3, [r3, #0]
 801b818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	bf0c      	ite	eq
 801b820:	2301      	moveq	r3, #1
 801b822:	2300      	movne	r3, #0
 801b824:	b2db      	uxtb	r3, r3
 801b826:	461a      	mov	r2, r3
 801b828:	683b      	ldr	r3, [r7, #0]
 801b82a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b836:	2b00      	cmp	r3, #0
 801b838:	bf14      	ite	ne
 801b83a:	2301      	movne	r3, #1
 801b83c:	2300      	moveq	r3, #0
 801b83e:	b2db      	uxtb	r3, r3
 801b840:	461a      	mov	r2, r3
 801b842:	683b      	ldr	r3, [r7, #0]
 801b844:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	681b      	ldr	r3, [r3, #0]
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 801b850:	683b      	ldr	r3, [r7, #0]
 801b852:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b85e:	2b00      	cmp	r3, #0
 801b860:	bf14      	ite	ne
 801b862:	2301      	movne	r3, #1
 801b864:	2300      	moveq	r3, #0
 801b866:	b2db      	uxtb	r3, r3
 801b868:	461a      	mov	r2, r3
 801b86a:	683b      	ldr	r3, [r7, #0]
 801b86c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	681b      	ldr	r3, [r3, #0]
 801b872:	699b      	ldr	r3, [r3, #24]
 801b874:	f003 0302 	and.w	r3, r3, #2
 801b878:	2b00      	cmp	r3, #0
 801b87a:	bf14      	ite	ne
 801b87c:	2301      	movne	r3, #1
 801b87e:	2300      	moveq	r3, #0
 801b880:	b2db      	uxtb	r3, r3
 801b882:	461a      	mov	r2, r3
 801b884:	683b      	ldr	r3, [r7, #0]
 801b886:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	699b      	ldr	r3, [r3, #24]
 801b890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b894:	2b00      	cmp	r3, #0
 801b896:	bf0c      	ite	eq
 801b898:	2301      	moveq	r3, #1
 801b89a:	2300      	movne	r3, #0
 801b89c:	b2db      	uxtb	r3, r3
 801b89e:	461a      	mov	r2, r3
 801b8a0:	683b      	ldr	r3, [r7, #0]
 801b8a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	699b      	ldr	r3, [r3, #24]
 801b8ac:	f003 0230 	and.w	r2, r3, #48	; 0x30
 801b8b0:	683b      	ldr	r3, [r7, #0]
 801b8b2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	699b      	ldr	r3, [r3, #24]
 801b8ba:	0c1b      	lsrs	r3, r3, #16
 801b8bc:	b29a      	uxth	r2, r3
 801b8be:	683b      	ldr	r3, [r7, #0]
 801b8c0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	699b      	ldr	r3, [r3, #24]
 801b8c8:	f003 0304 	and.w	r3, r3, #4
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	bf14      	ite	ne
 801b8d0:	2301      	movne	r3, #1
 801b8d2:	2300      	moveq	r3, #0
 801b8d4:	b2db      	uxtb	r3, r3
 801b8d6:	461a      	mov	r2, r3
 801b8d8:	683b      	ldr	r3, [r7, #0]
 801b8da:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	699b      	ldr	r3, [r3, #24]
 801b8e4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	bf14      	ite	ne
 801b8ec:	2301      	movne	r3, #1
 801b8ee:	2300      	moveq	r3, #0
 801b8f0:	b2db      	uxtb	r3, r3
 801b8f2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801b8f4:	683b      	ldr	r3, [r7, #0]
 801b8f6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 801b8fa:	2300      	movs	r3, #0
}
 801b8fc:	4618      	mov	r0, r3
 801b8fe:	370c      	adds	r7, #12
 801b900:	46bd      	mov	sp, r7
 801b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b906:	4770      	bx	lr

0801b908 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 801b908:	b580      	push	{r7, lr}
 801b90a:	b082      	sub	sp, #8
 801b90c:	af00      	add	r7, sp, #0
 801b90e:	6078      	str	r0, [r7, #4]
 801b910:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801b912:	683b      	ldr	r3, [r7, #0]
 801b914:	2b00      	cmp	r3, #0
 801b916:	d101      	bne.n	801b91c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 801b918:	2301      	movs	r3, #1
 801b91a:	e00b      	b.n	801b934 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b922:	2b10      	cmp	r3, #16
 801b924:	d105      	bne.n	801b932 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 801b926:	6839      	ldr	r1, [r7, #0]
 801b928:	6878      	ldr	r0, [r7, #4]
 801b92a:	f000 f883 	bl	801ba34 <ETH_SetMACConfig>

    return HAL_OK;
 801b92e:	2300      	movs	r3, #0
 801b930:	e000      	b.n	801b934 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 801b932:	2301      	movs	r3, #1
  }
}
 801b934:	4618      	mov	r0, r3
 801b936:	3708      	adds	r7, #8
 801b938:	46bd      	mov	sp, r7
 801b93a:	bd80      	pop	{r7, pc}

0801b93c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 801b93c:	b580      	push	{r7, lr}
 801b93e:	b084      	sub	sp, #16
 801b940:	af00      	add	r7, sp, #0
 801b942:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	681b      	ldr	r3, [r3, #0]
 801b948:	691b      	ldr	r3, [r3, #16]
 801b94a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 801b94c:	68fb      	ldr	r3, [r7, #12]
 801b94e:	f023 031c 	bic.w	r3, r3, #28
 801b952:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 801b954:	f002 f916 	bl	801db84 <HAL_RCC_GetHCLKFreq>
 801b958:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 801b95a:	68bb      	ldr	r3, [r7, #8]
 801b95c:	4a1d      	ldr	r2, [pc, #116]	; (801b9d4 <HAL_ETH_SetMDIOClockRange+0x98>)
 801b95e:	4293      	cmp	r3, r2
 801b960:	d908      	bls.n	801b974 <HAL_ETH_SetMDIOClockRange+0x38>
 801b962:	68bb      	ldr	r3, [r7, #8]
 801b964:	4a1c      	ldr	r2, [pc, #112]	; (801b9d8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 801b966:	4293      	cmp	r3, r2
 801b968:	d804      	bhi.n	801b974 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 801b96a:	68fb      	ldr	r3, [r7, #12]
 801b96c:	f043 0308 	orr.w	r3, r3, #8
 801b970:	60fb      	str	r3, [r7, #12]
 801b972:	e027      	b.n	801b9c4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 801b974:	68bb      	ldr	r3, [r7, #8]
 801b976:	4a18      	ldr	r2, [pc, #96]	; (801b9d8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 801b978:	4293      	cmp	r3, r2
 801b97a:	d908      	bls.n	801b98e <HAL_ETH_SetMDIOClockRange+0x52>
 801b97c:	68bb      	ldr	r3, [r7, #8]
 801b97e:	4a17      	ldr	r2, [pc, #92]	; (801b9dc <HAL_ETH_SetMDIOClockRange+0xa0>)
 801b980:	4293      	cmp	r3, r2
 801b982:	d204      	bcs.n	801b98e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 801b984:	68fb      	ldr	r3, [r7, #12]
 801b986:	f043 030c 	orr.w	r3, r3, #12
 801b98a:	60fb      	str	r3, [r7, #12]
 801b98c:	e01a      	b.n	801b9c4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 801b98e:	68bb      	ldr	r3, [r7, #8]
 801b990:	4a12      	ldr	r2, [pc, #72]	; (801b9dc <HAL_ETH_SetMDIOClockRange+0xa0>)
 801b992:	4293      	cmp	r3, r2
 801b994:	d303      	bcc.n	801b99e <HAL_ETH_SetMDIOClockRange+0x62>
 801b996:	68bb      	ldr	r3, [r7, #8]
 801b998:	4a11      	ldr	r2, [pc, #68]	; (801b9e0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 801b99a:	4293      	cmp	r3, r2
 801b99c:	d911      	bls.n	801b9c2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 801b99e:	68bb      	ldr	r3, [r7, #8]
 801b9a0:	4a0f      	ldr	r2, [pc, #60]	; (801b9e0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 801b9a2:	4293      	cmp	r3, r2
 801b9a4:	d908      	bls.n	801b9b8 <HAL_ETH_SetMDIOClockRange+0x7c>
 801b9a6:	68bb      	ldr	r3, [r7, #8]
 801b9a8:	4a0e      	ldr	r2, [pc, #56]	; (801b9e4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 801b9aa:	4293      	cmp	r3, r2
 801b9ac:	d804      	bhi.n	801b9b8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	f043 0304 	orr.w	r3, r3, #4
 801b9b4:	60fb      	str	r3, [r7, #12]
 801b9b6:	e005      	b.n	801b9c4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 801b9b8:	68fb      	ldr	r3, [r7, #12]
 801b9ba:	f043 0310 	orr.w	r3, r3, #16
 801b9be:	60fb      	str	r3, [r7, #12]
 801b9c0:	e000      	b.n	801b9c4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 801b9c2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	68fa      	ldr	r2, [r7, #12]
 801b9ca:	611a      	str	r2, [r3, #16]
}
 801b9cc:	bf00      	nop
 801b9ce:	3710      	adds	r7, #16
 801b9d0:	46bd      	mov	sp, r7
 801b9d2:	bd80      	pop	{r7, pc}
 801b9d4:	01312cff 	.word	0x01312cff
 801b9d8:	02160ebf 	.word	0x02160ebf
 801b9dc:	03938700 	.word	0x03938700
 801b9e0:	05f5e0ff 	.word	0x05f5e0ff
 801b9e4:	08f0d17f 	.word	0x08f0d17f

0801b9e8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 801b9e8:	b580      	push	{r7, lr}
 801b9ea:	b084      	sub	sp, #16
 801b9ec:	af00      	add	r7, sp, #0
 801b9ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 801b9f0:	2300      	movs	r3, #0
 801b9f2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b9fc:	699b      	ldr	r3, [r3, #24]
 801b9fe:	687a      	ldr	r2, [r7, #4]
 801ba00:	6812      	ldr	r2, [r2, #0]
 801ba02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ba06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801ba0a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ba14:	699b      	ldr	r3, [r3, #24]
 801ba16:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801ba18:	2001      	movs	r0, #1
 801ba1a:	f7fe f8e9 	bl	8019bf0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	681a      	ldr	r2, [r3, #0]
 801ba22:	68fb      	ldr	r3, [r7, #12]
 801ba24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801ba28:	6193      	str	r3, [r2, #24]
}
 801ba2a:	bf00      	nop
 801ba2c:	3710      	adds	r7, #16
 801ba2e:	46bd      	mov	sp, r7
 801ba30:	bd80      	pop	{r7, pc}
	...

0801ba34 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 801ba34:	b580      	push	{r7, lr}
 801ba36:	b084      	sub	sp, #16
 801ba38:	af00      	add	r7, sp, #0
 801ba3a:	6078      	str	r0, [r7, #4]
 801ba3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 801ba46:	68fa      	ldr	r2, [r7, #12]
 801ba48:	4b51      	ldr	r3, [pc, #324]	; (801bb90 <ETH_SetMACConfig+0x15c>)
 801ba4a:	4013      	ands	r3, r2
 801ba4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801ba4e:	683b      	ldr	r3, [r7, #0]
 801ba50:	7c1b      	ldrb	r3, [r3, #16]
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d102      	bne.n	801ba5c <ETH_SetMACConfig+0x28>
 801ba56:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801ba5a:	e000      	b.n	801ba5e <ETH_SetMACConfig+0x2a>
 801ba5c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801ba5e:	683b      	ldr	r3, [r7, #0]
 801ba60:	7c5b      	ldrb	r3, [r3, #17]
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d102      	bne.n	801ba6c <ETH_SetMACConfig+0x38>
 801ba66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801ba6a:	e000      	b.n	801ba6e <ETH_SetMACConfig+0x3a>
 801ba6c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801ba6e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 801ba70:	683b      	ldr	r3, [r7, #0]
 801ba72:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801ba74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801ba76:	683b      	ldr	r3, [r7, #0]
 801ba78:	7fdb      	ldrb	r3, [r3, #31]
 801ba7a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 801ba7c:	431a      	orrs	r2, r3
                        macconf->Speed |
 801ba7e:	683b      	ldr	r3, [r7, #0]
 801ba80:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801ba82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801ba84:	683a      	ldr	r2, [r7, #0]
 801ba86:	7f92      	ldrb	r2, [r2, #30]
 801ba88:	2a00      	cmp	r2, #0
 801ba8a:	d102      	bne.n	801ba92 <ETH_SetMACConfig+0x5e>
 801ba8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801ba90:	e000      	b.n	801ba94 <ETH_SetMACConfig+0x60>
 801ba92:	2200      	movs	r2, #0
                        macconf->Speed |
 801ba94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801ba96:	683b      	ldr	r3, [r7, #0]
 801ba98:	7f1b      	ldrb	r3, [r3, #28]
 801ba9a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801ba9c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 801ba9e:	683b      	ldr	r3, [r7, #0]
 801baa0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801baa2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801baa4:	683b      	ldr	r3, [r7, #0]
 801baa6:	791b      	ldrb	r3, [r3, #4]
 801baa8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 801baaa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801baac:	683a      	ldr	r2, [r7, #0]
 801baae:	f892 2020 	ldrb.w	r2, [r2, #32]
 801bab2:	2a00      	cmp	r2, #0
 801bab4:	d102      	bne.n	801babc <ETH_SetMACConfig+0x88>
 801bab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 801baba:	e000      	b.n	801babe <ETH_SetMACConfig+0x8a>
 801babc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801babe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801bac0:	683b      	ldr	r3, [r7, #0]
 801bac2:	7bdb      	ldrb	r3, [r3, #15]
 801bac4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801bac6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 801bac8:	683b      	ldr	r3, [r7, #0]
 801baca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801bacc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 801bace:	683b      	ldr	r3, [r7, #0]
 801bad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bad4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801bad6:	4313      	orrs	r3, r2
 801bad8:	68fa      	ldr	r2, [r7, #12]
 801bada:	4313      	orrs	r3, r2
 801badc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	681b      	ldr	r3, [r3, #0]
 801bae2:	68fa      	ldr	r2, [r7, #12]
 801bae4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	681b      	ldr	r3, [r3, #0]
 801baec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801baee:	2001      	movs	r0, #1
 801baf0:	f7fe f87e 	bl	8019bf0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	68fa      	ldr	r2, [r7, #12]
 801bafa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	699b      	ldr	r3, [r3, #24]
 801bb02:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 801bb04:	68fa      	ldr	r2, [r7, #12]
 801bb06:	f64f 7341 	movw	r3, #65345	; 0xff41
 801bb0a:	4013      	ands	r3, r2
 801bb0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801bb0e:	683b      	ldr	r3, [r7, #0]
 801bb10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bb12:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801bb14:	683a      	ldr	r2, [r7, #0]
 801bb16:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 801bb1a:	2a00      	cmp	r2, #0
 801bb1c:	d101      	bne.n	801bb22 <ETH_SetMACConfig+0xee>
 801bb1e:	2280      	movs	r2, #128	; 0x80
 801bb20:	e000      	b.n	801bb24 <ETH_SetMACConfig+0xf0>
 801bb22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801bb24:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 801bb26:	683b      	ldr	r3, [r7, #0]
 801bb28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801bb2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801bb2c:	683a      	ldr	r2, [r7, #0]
 801bb2e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 801bb32:	2a01      	cmp	r2, #1
 801bb34:	d101      	bne.n	801bb3a <ETH_SetMACConfig+0x106>
 801bb36:	2208      	movs	r2, #8
 801bb38:	e000      	b.n	801bb3c <ETH_SetMACConfig+0x108>
 801bb3a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 801bb3c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 801bb3e:	683a      	ldr	r2, [r7, #0]
 801bb40:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 801bb44:	2a01      	cmp	r2, #1
 801bb46:	d101      	bne.n	801bb4c <ETH_SetMACConfig+0x118>
 801bb48:	2204      	movs	r2, #4
 801bb4a:	e000      	b.n	801bb4e <ETH_SetMACConfig+0x11a>
 801bb4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801bb4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 801bb50:	683a      	ldr	r2, [r7, #0]
 801bb52:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 801bb56:	2a01      	cmp	r2, #1
 801bb58:	d101      	bne.n	801bb5e <ETH_SetMACConfig+0x12a>
 801bb5a:	2202      	movs	r2, #2
 801bb5c:	e000      	b.n	801bb60 <ETH_SetMACConfig+0x12c>
 801bb5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801bb60:	4313      	orrs	r3, r2
 801bb62:	68fa      	ldr	r2, [r7, #12]
 801bb64:	4313      	orrs	r3, r2
 801bb66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	68fa      	ldr	r2, [r7, #12]
 801bb6e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	699b      	ldr	r3, [r3, #24]
 801bb76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801bb78:	2001      	movs	r0, #1
 801bb7a:	f7fe f839 	bl	8019bf0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	68fa      	ldr	r2, [r7, #12]
 801bb84:	619a      	str	r2, [r3, #24]
}
 801bb86:	bf00      	nop
 801bb88:	3710      	adds	r7, #16
 801bb8a:	46bd      	mov	sp, r7
 801bb8c:	bd80      	pop	{r7, pc}
 801bb8e:	bf00      	nop
 801bb90:	ff20810f 	.word	0xff20810f

0801bb94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 801bb94:	b580      	push	{r7, lr}
 801bb96:	b084      	sub	sp, #16
 801bb98:	af00      	add	r7, sp, #0
 801bb9a:	6078      	str	r0, [r7, #4]
 801bb9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bba6:	699b      	ldr	r3, [r3, #24]
 801bba8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 801bbaa:	68fa      	ldr	r2, [r7, #12]
 801bbac:	4b3d      	ldr	r3, [pc, #244]	; (801bca4 <ETH_SetDMAConfig+0x110>)
 801bbae:	4013      	ands	r3, r2
 801bbb0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801bbb2:	683b      	ldr	r3, [r7, #0]
 801bbb4:	7b1b      	ldrb	r3, [r3, #12]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d102      	bne.n	801bbc0 <ETH_SetDMAConfig+0x2c>
 801bbba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801bbbe:	e000      	b.n	801bbc2 <ETH_SetDMAConfig+0x2e>
 801bbc0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801bbc2:	683b      	ldr	r3, [r7, #0]
 801bbc4:	7b5b      	ldrb	r3, [r3, #13]
 801bbc6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801bbc8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801bbca:	683a      	ldr	r2, [r7, #0]
 801bbcc:	7f52      	ldrb	r2, [r2, #29]
 801bbce:	2a00      	cmp	r2, #0
 801bbd0:	d102      	bne.n	801bbd8 <ETH_SetDMAConfig+0x44>
 801bbd2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801bbd6:	e000      	b.n	801bbda <ETH_SetDMAConfig+0x46>
 801bbd8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801bbda:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 801bbdc:	683b      	ldr	r3, [r7, #0]
 801bbde:	7b9b      	ldrb	r3, [r3, #14]
 801bbe0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801bbe2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 801bbe4:	683b      	ldr	r3, [r7, #0]
 801bbe6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 801bbe8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 801bbea:	683b      	ldr	r3, [r7, #0]
 801bbec:	7f1b      	ldrb	r3, [r3, #28]
 801bbee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 801bbf0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801bbf2:	683b      	ldr	r3, [r7, #0]
 801bbf4:	7f9b      	ldrb	r3, [r3, #30]
 801bbf6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 801bbf8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 801bbfa:	683b      	ldr	r3, [r7, #0]
 801bbfc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801bbfe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 801bc00:	683b      	ldr	r3, [r7, #0]
 801bc02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801bc06:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801bc08:	4313      	orrs	r3, r2
 801bc0a:	68fa      	ldr	r2, [r7, #12]
 801bc0c:	4313      	orrs	r3, r2
 801bc0e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bc18:	461a      	mov	r2, r3
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	681b      	ldr	r3, [r3, #0]
 801bc22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bc26:	699b      	ldr	r3, [r3, #24]
 801bc28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801bc2a:	2001      	movs	r0, #1
 801bc2c:	f7fd ffe0 	bl	8019bf0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bc38:	461a      	mov	r2, r3
 801bc3a:	68fb      	ldr	r3, [r7, #12]
 801bc3c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801bc3e:	683b      	ldr	r3, [r7, #0]
 801bc40:	791b      	ldrb	r3, [r3, #4]
 801bc42:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 801bc44:	683b      	ldr	r3, [r7, #0]
 801bc46:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801bc48:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801bc4a:	683b      	ldr	r3, [r7, #0]
 801bc4c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 801bc4e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 801bc50:	683b      	ldr	r3, [r7, #0]
 801bc52:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801bc54:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 801bc56:	683b      	ldr	r3, [r7, #0]
 801bc58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801bc5c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 801bc5e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 801bc60:	683b      	ldr	r3, [r7, #0]
 801bc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc64:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 801bc66:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 801bc68:	683b      	ldr	r3, [r7, #0]
 801bc6a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 801bc6c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801bc6e:	687a      	ldr	r2, [r7, #4]
 801bc70:	6812      	ldr	r2, [r2, #0]
 801bc72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801bc76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801bc7a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	681b      	ldr	r3, [r3, #0]
 801bc80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801bc88:	2001      	movs	r0, #1
 801bc8a:	f7fd ffb1 	bl	8019bf0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	681b      	ldr	r3, [r3, #0]
 801bc92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bc96:	461a      	mov	r2, r3
 801bc98:	68fb      	ldr	r3, [r7, #12]
 801bc9a:	6013      	str	r3, [r2, #0]
}
 801bc9c:	bf00      	nop
 801bc9e:	3710      	adds	r7, #16
 801bca0:	46bd      	mov	sp, r7
 801bca2:	bd80      	pop	{r7, pc}
 801bca4:	f8de3f23 	.word	0xf8de3f23

0801bca8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 801bca8:	b580      	push	{r7, lr}
 801bcaa:	b0a6      	sub	sp, #152	; 0x98
 801bcac:	af00      	add	r7, sp, #0
 801bcae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 801bcb0:	2301      	movs	r3, #1
 801bcb2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 801bcb6:	2301      	movs	r3, #1
 801bcb8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 801bcbc:	2300      	movs	r3, #0
 801bcbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801bcc0:	2300      	movs	r3, #0
 801bcc2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 801bcc6:	2301      	movs	r3, #1
 801bcc8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 801bccc:	2300      	movs	r3, #0
 801bcce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 801bcd2:	2301      	movs	r3, #1
 801bcd4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 801bcd8:	2300      	movs	r3, #0
 801bcda:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 801bcde:	2300      	movs	r3, #0
 801bce0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801bce4:	2300      	movs	r3, #0
 801bce6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 801bce8:	2300      	movs	r3, #0
 801bcea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 801bcee:	2300      	movs	r3, #0
 801bcf0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 801bcf2:	2300      	movs	r3, #0
 801bcf4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 801bcfe:	2300      	movs	r3, #0
 801bd00:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 801bd04:	2300      	movs	r3, #0
 801bd06:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 801bd0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801bd0e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801bd10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801bd14:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801bd16:	2300      	movs	r3, #0
 801bd18:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 801bd1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801bd20:	4619      	mov	r1, r3
 801bd22:	6878      	ldr	r0, [r7, #4]
 801bd24:	f7ff fe86 	bl	801ba34 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 801bd28:	2301      	movs	r3, #1
 801bd2a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 801bd2c:	2301      	movs	r3, #1
 801bd2e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 801bd30:	2301      	movs	r3, #1
 801bd32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 801bd36:	2301      	movs	r3, #1
 801bd38:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 801bd3a:	2300      	movs	r3, #0
 801bd3c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 801bd3e:	2300      	movs	r3, #0
 801bd40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 801bd44:	2300      	movs	r3, #0
 801bd46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 801bd4a:	2300      	movs	r3, #0
 801bd4c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 801bd4e:	2301      	movs	r3, #1
 801bd50:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801bd54:	2301      	movs	r3, #1
 801bd56:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801bd58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801bd5c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801bd5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801bd62:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801bd64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801bd68:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 801bd6a:	2301      	movs	r3, #1
 801bd6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 801bd70:	2300      	movs	r3, #0
 801bd72:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 801bd74:	2300      	movs	r3, #0
 801bd76:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 801bd78:	f107 0308 	add.w	r3, r7, #8
 801bd7c:	4619      	mov	r1, r3
 801bd7e:	6878      	ldr	r0, [r7, #4]
 801bd80:	f7ff ff08 	bl	801bb94 <ETH_SetDMAConfig>
}
 801bd84:	bf00      	nop
 801bd86:	3798      	adds	r7, #152	; 0x98
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	bd80      	pop	{r7, pc}

0801bd8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 801bd8c:	b480      	push	{r7}
 801bd8e:	b087      	sub	sp, #28
 801bd90:	af00      	add	r7, sp, #0
 801bd92:	60f8      	str	r0, [r7, #12]
 801bd94:	60b9      	str	r1, [r7, #8]
 801bd96:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	3305      	adds	r3, #5
 801bd9c:	781b      	ldrb	r3, [r3, #0]
 801bd9e:	021b      	lsls	r3, r3, #8
 801bda0:	687a      	ldr	r2, [r7, #4]
 801bda2:	3204      	adds	r2, #4
 801bda4:	7812      	ldrb	r2, [r2, #0]
 801bda6:	4313      	orrs	r3, r2
 801bda8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 801bdaa:	68ba      	ldr	r2, [r7, #8]
 801bdac:	4b11      	ldr	r3, [pc, #68]	; (801bdf4 <ETH_MACAddressConfig+0x68>)
 801bdae:	4413      	add	r3, r2
 801bdb0:	461a      	mov	r2, r3
 801bdb2:	697b      	ldr	r3, [r7, #20]
 801bdb4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	3303      	adds	r3, #3
 801bdba:	781b      	ldrb	r3, [r3, #0]
 801bdbc:	061a      	lsls	r2, r3, #24
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	3302      	adds	r3, #2
 801bdc2:	781b      	ldrb	r3, [r3, #0]
 801bdc4:	041b      	lsls	r3, r3, #16
 801bdc6:	431a      	orrs	r2, r3
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	3301      	adds	r3, #1
 801bdcc:	781b      	ldrb	r3, [r3, #0]
 801bdce:	021b      	lsls	r3, r3, #8
 801bdd0:	4313      	orrs	r3, r2
 801bdd2:	687a      	ldr	r2, [r7, #4]
 801bdd4:	7812      	ldrb	r2, [r2, #0]
 801bdd6:	4313      	orrs	r3, r2
 801bdd8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 801bdda:	68ba      	ldr	r2, [r7, #8]
 801bddc:	4b06      	ldr	r3, [pc, #24]	; (801bdf8 <ETH_MACAddressConfig+0x6c>)
 801bdde:	4413      	add	r3, r2
 801bde0:	461a      	mov	r2, r3
 801bde2:	697b      	ldr	r3, [r7, #20]
 801bde4:	6013      	str	r3, [r2, #0]
}
 801bde6:	bf00      	nop
 801bde8:	371c      	adds	r7, #28
 801bdea:	46bd      	mov	sp, r7
 801bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdf0:	4770      	bx	lr
 801bdf2:	bf00      	nop
 801bdf4:	40028040 	.word	0x40028040
 801bdf8:	40028044 	.word	0x40028044

0801bdfc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 801bdfc:	b480      	push	{r7}
 801bdfe:	b085      	sub	sp, #20
 801be00:	af00      	add	r7, sp, #0
 801be02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801be04:	2300      	movs	r3, #0
 801be06:	60fb      	str	r3, [r7, #12]
 801be08:	e03e      	b.n	801be88 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	68d9      	ldr	r1, [r3, #12]
 801be0e:	68fa      	ldr	r2, [r7, #12]
 801be10:	4613      	mov	r3, r2
 801be12:	009b      	lsls	r3, r3, #2
 801be14:	4413      	add	r3, r2
 801be16:	00db      	lsls	r3, r3, #3
 801be18:	440b      	add	r3, r1
 801be1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 801be1c:	68bb      	ldr	r3, [r7, #8]
 801be1e:	2200      	movs	r2, #0
 801be20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 801be22:	68bb      	ldr	r3, [r7, #8]
 801be24:	2200      	movs	r2, #0
 801be26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 801be28:	68bb      	ldr	r3, [r7, #8]
 801be2a:	2200      	movs	r2, #0
 801be2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 801be2e:	68bb      	ldr	r3, [r7, #8]
 801be30:	2200      	movs	r2, #0
 801be32:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 801be34:	68b9      	ldr	r1, [r7, #8]
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	68fa      	ldr	r2, [r7, #12]
 801be3a:	3206      	adds	r2, #6
 801be3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 801be40:	68bb      	ldr	r3, [r7, #8]
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801be48:	68bb      	ldr	r3, [r7, #8]
 801be4a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 801be4c:	68fb      	ldr	r3, [r7, #12]
 801be4e:	2b02      	cmp	r3, #2
 801be50:	d80c      	bhi.n	801be6c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	68d9      	ldr	r1, [r3, #12]
 801be56:	68fb      	ldr	r3, [r7, #12]
 801be58:	1c5a      	adds	r2, r3, #1
 801be5a:	4613      	mov	r3, r2
 801be5c:	009b      	lsls	r3, r3, #2
 801be5e:	4413      	add	r3, r2
 801be60:	00db      	lsls	r3, r3, #3
 801be62:	440b      	add	r3, r1
 801be64:	461a      	mov	r2, r3
 801be66:	68bb      	ldr	r3, [r7, #8]
 801be68:	60da      	str	r2, [r3, #12]
 801be6a:	e004      	b.n	801be76 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	68db      	ldr	r3, [r3, #12]
 801be70:	461a      	mov	r2, r3
 801be72:	68bb      	ldr	r3, [r7, #8]
 801be74:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 801be76:	68bb      	ldr	r3, [r7, #8]
 801be78:	681b      	ldr	r3, [r3, #0]
 801be7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 801be7e:	68bb      	ldr	r3, [r7, #8]
 801be80:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801be82:	68fb      	ldr	r3, [r7, #12]
 801be84:	3301      	adds	r3, #1
 801be86:	60fb      	str	r3, [r7, #12]
 801be88:	68fb      	ldr	r3, [r7, #12]
 801be8a:	2b03      	cmp	r3, #3
 801be8c:	d9bd      	bls.n	801be0a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	2200      	movs	r2, #0
 801be92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	68da      	ldr	r2, [r3, #12]
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	681b      	ldr	r3, [r3, #0]
 801be9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bea0:	611a      	str	r2, [r3, #16]
}
 801bea2:	bf00      	nop
 801bea4:	3714      	adds	r7, #20
 801bea6:	46bd      	mov	sp, r7
 801bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beac:	4770      	bx	lr

0801beae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 801beae:	b480      	push	{r7}
 801beb0:	b085      	sub	sp, #20
 801beb2:	af00      	add	r7, sp, #0
 801beb4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801beb6:	2300      	movs	r3, #0
 801beb8:	60fb      	str	r3, [r7, #12]
 801beba:	e046      	b.n	801bf4a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	6919      	ldr	r1, [r3, #16]
 801bec0:	68fa      	ldr	r2, [r7, #12]
 801bec2:	4613      	mov	r3, r2
 801bec4:	009b      	lsls	r3, r3, #2
 801bec6:	4413      	add	r3, r2
 801bec8:	00db      	lsls	r3, r3, #3
 801beca:	440b      	add	r3, r1
 801becc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 801bece:	68bb      	ldr	r3, [r7, #8]
 801bed0:	2200      	movs	r2, #0
 801bed2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 801bed4:	68bb      	ldr	r3, [r7, #8]
 801bed6:	2200      	movs	r2, #0
 801bed8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 801beda:	68bb      	ldr	r3, [r7, #8]
 801bedc:	2200      	movs	r2, #0
 801bede:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 801bee0:	68bb      	ldr	r3, [r7, #8]
 801bee2:	2200      	movs	r2, #0
 801bee4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 801bee6:	68bb      	ldr	r3, [r7, #8]
 801bee8:	2200      	movs	r2, #0
 801beea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 801beec:	68bb      	ldr	r3, [r7, #8]
 801beee:	2200      	movs	r2, #0
 801bef0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 801bef2:	68bb      	ldr	r3, [r7, #8]
 801bef4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801bef8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 801befa:	68bb      	ldr	r3, [r7, #8]
 801befc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 801bf00:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 801bf02:	68bb      	ldr	r3, [r7, #8]
 801bf04:	685b      	ldr	r3, [r3, #4]
 801bf06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801bf0a:	68bb      	ldr	r3, [r7, #8]
 801bf0c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 801bf0e:	68b9      	ldr	r1, [r7, #8]
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	68fa      	ldr	r2, [r7, #12]
 801bf14:	3212      	adds	r2, #18
 801bf16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 801bf1a:	68fb      	ldr	r3, [r7, #12]
 801bf1c:	2b02      	cmp	r3, #2
 801bf1e:	d80c      	bhi.n	801bf3a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	6919      	ldr	r1, [r3, #16]
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	1c5a      	adds	r2, r3, #1
 801bf28:	4613      	mov	r3, r2
 801bf2a:	009b      	lsls	r3, r3, #2
 801bf2c:	4413      	add	r3, r2
 801bf2e:	00db      	lsls	r3, r3, #3
 801bf30:	440b      	add	r3, r1
 801bf32:	461a      	mov	r2, r3
 801bf34:	68bb      	ldr	r3, [r7, #8]
 801bf36:	60da      	str	r2, [r3, #12]
 801bf38:	e004      	b.n	801bf44 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	691b      	ldr	r3, [r3, #16]
 801bf3e:	461a      	mov	r2, r3
 801bf40:	68bb      	ldr	r3, [r7, #8]
 801bf42:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801bf44:	68fb      	ldr	r3, [r7, #12]
 801bf46:	3301      	adds	r3, #1
 801bf48:	60fb      	str	r3, [r7, #12]
 801bf4a:	68fb      	ldr	r3, [r7, #12]
 801bf4c:	2b03      	cmp	r3, #3
 801bf4e:	d9b5      	bls.n	801bebc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	2200      	movs	r2, #0
 801bf54:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	2200      	movs	r2, #0
 801bf5a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	2200      	movs	r2, #0
 801bf60:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	2200      	movs	r2, #0
 801bf66:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	2200      	movs	r2, #0
 801bf6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	691a      	ldr	r2, [r3, #16]
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	681b      	ldr	r3, [r3, #0]
 801bf76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bf7a:	60da      	str	r2, [r3, #12]
}
 801bf7c:	bf00      	nop
 801bf7e:	3714      	adds	r7, #20
 801bf80:	46bd      	mov	sp, r7
 801bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf86:	4770      	bx	lr

0801bf88 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 801bf88:	b480      	push	{r7}
 801bf8a:	b08d      	sub	sp, #52	; 0x34
 801bf8c:	af00      	add	r7, sp, #0
 801bf8e:	60f8      	str	r0, [r7, #12]
 801bf90:	60b9      	str	r1, [r7, #8]
 801bf92:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 801bf94:	68fb      	ldr	r3, [r7, #12]
 801bf96:	3318      	adds	r3, #24
 801bf98:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 801bf9a:	697b      	ldr	r3, [r7, #20]
 801bf9c:	691b      	ldr	r3, [r3, #16]
 801bf9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 801bfa0:	697b      	ldr	r3, [r7, #20]
 801bfa2:	691b      	ldr	r3, [r3, #16]
 801bfa4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 801bfa6:	2300      	movs	r3, #0
 801bfa8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801bfaa:	697b      	ldr	r3, [r7, #20]
 801bfac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bfae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bfb2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 801bfb4:	68bb      	ldr	r3, [r7, #8]
 801bfb6:	689b      	ldr	r3, [r3, #8]
 801bfb8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 801bfba:	2300      	movs	r3, #0
 801bfbc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801bfbe:	6a3b      	ldr	r3, [r7, #32]
 801bfc0:	681b      	ldr	r3, [r3, #0]
 801bfc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801bfc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801bfca:	d007      	beq.n	801bfdc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801bfcc:	697a      	ldr	r2, [r7, #20]
 801bfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfd0:	3304      	adds	r3, #4
 801bfd2:	009b      	lsls	r3, r3, #2
 801bfd4:	4413      	add	r3, r2
 801bfd6:	685b      	ldr	r3, [r3, #4]
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	d001      	beq.n	801bfe0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 801bfdc:	2302      	movs	r3, #2
 801bfde:	e0ff      	b.n	801c1e0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 801bfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfe2:	3301      	adds	r3, #1
 801bfe4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 801bfe6:	69fb      	ldr	r3, [r7, #28]
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	461a      	mov	r2, r3
 801bfec:	6a3b      	ldr	r3, [r7, #32]
 801bfee:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 801bff0:	6a3b      	ldr	r3, [r7, #32]
 801bff2:	685a      	ldr	r2, [r3, #4]
 801bff4:	4b7d      	ldr	r3, [pc, #500]	; (801c1ec <ETH_Prepare_Tx_Descriptors+0x264>)
 801bff6:	4013      	ands	r3, r2
 801bff8:	69fa      	ldr	r2, [r7, #28]
 801bffa:	6852      	ldr	r2, [r2, #4]
 801bffc:	431a      	orrs	r2, r3
 801bffe:	6a3b      	ldr	r3, [r7, #32]
 801c000:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 801c002:	68bb      	ldr	r3, [r7, #8]
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	f003 0301 	and.w	r3, r3, #1
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	d008      	beq.n	801c020 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 801c00e:	6a3b      	ldr	r3, [r7, #32]
 801c010:	681b      	ldr	r3, [r3, #0]
 801c012:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801c016:	68bb      	ldr	r3, [r7, #8]
 801c018:	695b      	ldr	r3, [r3, #20]
 801c01a:	431a      	orrs	r2, r3
 801c01c:	6a3b      	ldr	r3, [r7, #32]
 801c01e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 801c020:	68bb      	ldr	r3, [r7, #8]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	f003 0320 	and.w	r3, r3, #32
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d008      	beq.n	801c03e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 801c02c:	6a3b      	ldr	r3, [r7, #32]
 801c02e:	681b      	ldr	r3, [r3, #0]
 801c030:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801c034:	68bb      	ldr	r3, [r7, #8]
 801c036:	691b      	ldr	r3, [r3, #16]
 801c038:	431a      	orrs	r2, r3
 801c03a:	6a3b      	ldr	r3, [r7, #32]
 801c03c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 801c03e:	68bb      	ldr	r3, [r7, #8]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	f003 0304 	and.w	r3, r3, #4
 801c046:	2b00      	cmp	r3, #0
 801c048:	d005      	beq.n	801c056 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 801c04a:	6a3b      	ldr	r3, [r7, #32]
 801c04c:	681b      	ldr	r3, [r3, #0]
 801c04e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801c052:	6a3b      	ldr	r3, [r7, #32]
 801c054:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 801c056:	6a3b      	ldr	r3, [r7, #32]
 801c058:	681b      	ldr	r3, [r3, #0]
 801c05a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801c05e:	6a3b      	ldr	r3, [r7, #32]
 801c060:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801c062:	f3bf 8f5f 	dmb	sy
}
 801c066:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801c068:	6a3b      	ldr	r3, [r7, #32]
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801c070:	6a3b      	ldr	r3, [r7, #32]
 801c072:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 801c074:	e082      	b.n	801c17c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 801c076:	6a3b      	ldr	r3, [r7, #32]
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801c07e:	6a3b      	ldr	r3, [r7, #32]
 801c080:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	2b00      	cmp	r3, #0
 801c086:	d006      	beq.n	801c096 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801c088:	6a3b      	ldr	r3, [r7, #32]
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801c090:	6a3b      	ldr	r3, [r7, #32]
 801c092:	601a      	str	r2, [r3, #0]
 801c094:	e005      	b.n	801c0a2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801c096:	6a3b      	ldr	r3, [r7, #32]
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801c09e:	6a3b      	ldr	r3, [r7, #32]
 801c0a0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 801c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0a4:	3301      	adds	r3, #1
 801c0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0aa:	2b03      	cmp	r3, #3
 801c0ac:	d902      	bls.n	801c0b4 <ETH_Prepare_Tx_Descriptors+0x12c>
 801c0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0b0:	3b04      	subs	r3, #4
 801c0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801c0b4:	697b      	ldr	r3, [r7, #20]
 801c0b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c0bc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 801c0be:	6a3b      	ldr	r3, [r7, #32]
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801c0c6:	6a3b      	ldr	r3, [r7, #32]
 801c0c8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801c0ca:	6a3b      	ldr	r3, [r7, #32]
 801c0cc:	681b      	ldr	r3, [r3, #0]
 801c0ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c0d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c0d6:	d007      	beq.n	801c0e8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801c0d8:	697a      	ldr	r2, [r7, #20]
 801c0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0dc:	3304      	adds	r3, #4
 801c0de:	009b      	lsls	r3, r3, #2
 801c0e0:	4413      	add	r3, r2
 801c0e2:	685b      	ldr	r3, [r3, #4]
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	d029      	beq.n	801c13c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 801c0e8:	693b      	ldr	r3, [r7, #16]
 801c0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801c0ec:	697b      	ldr	r3, [r7, #20]
 801c0ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c0f4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 801c0f6:	2300      	movs	r3, #0
 801c0f8:	62bb      	str	r3, [r7, #40]	; 0x28
 801c0fa:	e019      	b.n	801c130 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 801c0fc:	f3bf 8f5f 	dmb	sy
}
 801c100:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801c102:	6a3b      	ldr	r3, [r7, #32]
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801c10a:	6a3b      	ldr	r3, [r7, #32]
 801c10c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 801c10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c110:	3301      	adds	r3, #1
 801c112:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c116:	2b03      	cmp	r3, #3
 801c118:	d902      	bls.n	801c120 <ETH_Prepare_Tx_Descriptors+0x198>
 801c11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c11c:	3b04      	subs	r3, #4
 801c11e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801c120:	697b      	ldr	r3, [r7, #20]
 801c122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c128:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 801c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c12c:	3301      	adds	r3, #1
 801c12e:	62bb      	str	r3, [r7, #40]	; 0x28
 801c130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c134:	429a      	cmp	r2, r3
 801c136:	d3e1      	bcc.n	801c0fc <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 801c138:	2302      	movs	r3, #2
 801c13a:	e051      	b.n	801c1e0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 801c13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c13e:	3301      	adds	r3, #1
 801c140:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 801c142:	69fb      	ldr	r3, [r7, #28]
 801c144:	689b      	ldr	r3, [r3, #8]
 801c146:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 801c148:	69fb      	ldr	r3, [r7, #28]
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	461a      	mov	r2, r3
 801c14e:	6a3b      	ldr	r3, [r7, #32]
 801c150:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 801c152:	6a3b      	ldr	r3, [r7, #32]
 801c154:	685a      	ldr	r2, [r3, #4]
 801c156:	4b25      	ldr	r3, [pc, #148]	; (801c1ec <ETH_Prepare_Tx_Descriptors+0x264>)
 801c158:	4013      	ands	r3, r2
 801c15a:	69fa      	ldr	r2, [r7, #28]
 801c15c:	6852      	ldr	r2, [r2, #4]
 801c15e:	431a      	orrs	r2, r3
 801c160:	6a3b      	ldr	r3, [r7, #32]
 801c162:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 801c164:	69bb      	ldr	r3, [r7, #24]
 801c166:	3301      	adds	r3, #1
 801c168:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 801c16a:	f3bf 8f5f 	dmb	sy
}
 801c16e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801c170:	6a3b      	ldr	r3, [r7, #32]
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801c178:	6a3b      	ldr	r3, [r7, #32]
 801c17a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 801c17c:	69fb      	ldr	r3, [r7, #28]
 801c17e:	689b      	ldr	r3, [r3, #8]
 801c180:	2b00      	cmp	r3, #0
 801c182:	f47f af78 	bne.w	801c076 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d006      	beq.n	801c19a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801c18c:	6a3b      	ldr	r3, [r7, #32]
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801c194:	6a3b      	ldr	r3, [r7, #32]
 801c196:	601a      	str	r2, [r3, #0]
 801c198:	e005      	b.n	801c1a6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801c19a:	6a3b      	ldr	r3, [r7, #32]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801c1a2:	6a3b      	ldr	r3, [r7, #32]
 801c1a4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 801c1a6:	6a3b      	ldr	r3, [r7, #32]
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801c1ae:	6a3b      	ldr	r3, [r7, #32]
 801c1b0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 801c1b2:	697b      	ldr	r3, [r7, #20]
 801c1b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c1b6:	6979      	ldr	r1, [r7, #20]
 801c1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c1ba:	3304      	adds	r3, #4
 801c1bc:	009b      	lsls	r3, r3, #2
 801c1be:	440b      	add	r3, r1
 801c1c0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 801c1c2:	697b      	ldr	r3, [r7, #20]
 801c1c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c1c6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c1c8:	b672      	cpsid	i
}
 801c1ca:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 801c1cc:	697b      	ldr	r3, [r7, #20]
 801c1ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c1d0:	69bb      	ldr	r3, [r7, #24]
 801c1d2:	4413      	add	r3, r2
 801c1d4:	1c5a      	adds	r2, r3, #1
 801c1d6:	697b      	ldr	r3, [r7, #20]
 801c1d8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 801c1da:	b662      	cpsie	i
}
 801c1dc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 801c1de:	2300      	movs	r3, #0
}
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	3734      	adds	r7, #52	; 0x34
 801c1e4:	46bd      	mov	sp, r7
 801c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ea:	4770      	bx	lr
 801c1ec:	ffffe000 	.word	0xffffe000

0801c1f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c1f0:	b480      	push	{r7}
 801c1f2:	b089      	sub	sp, #36	; 0x24
 801c1f4:	af00      	add	r7, sp, #0
 801c1f6:	6078      	str	r0, [r7, #4]
 801c1f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 801c1fa:	2300      	movs	r3, #0
 801c1fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 801c1fe:	2300      	movs	r3, #0
 801c200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 801c202:	2300      	movs	r3, #0
 801c204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 801c206:	2300      	movs	r3, #0
 801c208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 801c20a:	2300      	movs	r3, #0
 801c20c:	61fb      	str	r3, [r7, #28]
 801c20e:	e175      	b.n	801c4fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 801c210:	2201      	movs	r2, #1
 801c212:	69fb      	ldr	r3, [r7, #28]
 801c214:	fa02 f303 	lsl.w	r3, r2, r3
 801c218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801c21a:	683b      	ldr	r3, [r7, #0]
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	697a      	ldr	r2, [r7, #20]
 801c220:	4013      	ands	r3, r2
 801c222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801c224:	693a      	ldr	r2, [r7, #16]
 801c226:	697b      	ldr	r3, [r7, #20]
 801c228:	429a      	cmp	r2, r3
 801c22a:	f040 8164 	bne.w	801c4f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801c22e:	683b      	ldr	r3, [r7, #0]
 801c230:	685b      	ldr	r3, [r3, #4]
 801c232:	f003 0303 	and.w	r3, r3, #3
 801c236:	2b01      	cmp	r3, #1
 801c238:	d005      	beq.n	801c246 <HAL_GPIO_Init+0x56>
 801c23a:	683b      	ldr	r3, [r7, #0]
 801c23c:	685b      	ldr	r3, [r3, #4]
 801c23e:	f003 0303 	and.w	r3, r3, #3
 801c242:	2b02      	cmp	r3, #2
 801c244:	d130      	bne.n	801c2a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	689b      	ldr	r3, [r3, #8]
 801c24a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801c24c:	69fb      	ldr	r3, [r7, #28]
 801c24e:	005b      	lsls	r3, r3, #1
 801c250:	2203      	movs	r2, #3
 801c252:	fa02 f303 	lsl.w	r3, r2, r3
 801c256:	43db      	mvns	r3, r3
 801c258:	69ba      	ldr	r2, [r7, #24]
 801c25a:	4013      	ands	r3, r2
 801c25c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 801c25e:	683b      	ldr	r3, [r7, #0]
 801c260:	68da      	ldr	r2, [r3, #12]
 801c262:	69fb      	ldr	r3, [r7, #28]
 801c264:	005b      	lsls	r3, r3, #1
 801c266:	fa02 f303 	lsl.w	r3, r2, r3
 801c26a:	69ba      	ldr	r2, [r7, #24]
 801c26c:	4313      	orrs	r3, r2
 801c26e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801c270:	687b      	ldr	r3, [r7, #4]
 801c272:	69ba      	ldr	r2, [r7, #24]
 801c274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	685b      	ldr	r3, [r3, #4]
 801c27a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801c27c:	2201      	movs	r2, #1
 801c27e:	69fb      	ldr	r3, [r7, #28]
 801c280:	fa02 f303 	lsl.w	r3, r2, r3
 801c284:	43db      	mvns	r3, r3
 801c286:	69ba      	ldr	r2, [r7, #24]
 801c288:	4013      	ands	r3, r2
 801c28a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c28c:	683b      	ldr	r3, [r7, #0]
 801c28e:	685b      	ldr	r3, [r3, #4]
 801c290:	091b      	lsrs	r3, r3, #4
 801c292:	f003 0201 	and.w	r2, r3, #1
 801c296:	69fb      	ldr	r3, [r7, #28]
 801c298:	fa02 f303 	lsl.w	r3, r2, r3
 801c29c:	69ba      	ldr	r2, [r7, #24]
 801c29e:	4313      	orrs	r3, r2
 801c2a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	69ba      	ldr	r2, [r7, #24]
 801c2a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c2a8:	683b      	ldr	r3, [r7, #0]
 801c2aa:	685b      	ldr	r3, [r3, #4]
 801c2ac:	f003 0303 	and.w	r3, r3, #3
 801c2b0:	2b03      	cmp	r3, #3
 801c2b2:	d017      	beq.n	801c2e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	68db      	ldr	r3, [r3, #12]
 801c2b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801c2ba:	69fb      	ldr	r3, [r7, #28]
 801c2bc:	005b      	lsls	r3, r3, #1
 801c2be:	2203      	movs	r2, #3
 801c2c0:	fa02 f303 	lsl.w	r3, r2, r3
 801c2c4:	43db      	mvns	r3, r3
 801c2c6:	69ba      	ldr	r2, [r7, #24]
 801c2c8:	4013      	ands	r3, r2
 801c2ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 801c2cc:	683b      	ldr	r3, [r7, #0]
 801c2ce:	689a      	ldr	r2, [r3, #8]
 801c2d0:	69fb      	ldr	r3, [r7, #28]
 801c2d2:	005b      	lsls	r3, r3, #1
 801c2d4:	fa02 f303 	lsl.w	r3, r2, r3
 801c2d8:	69ba      	ldr	r2, [r7, #24]
 801c2da:	4313      	orrs	r3, r2
 801c2dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	69ba      	ldr	r2, [r7, #24]
 801c2e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c2e4:	683b      	ldr	r3, [r7, #0]
 801c2e6:	685b      	ldr	r3, [r3, #4]
 801c2e8:	f003 0303 	and.w	r3, r3, #3
 801c2ec:	2b02      	cmp	r3, #2
 801c2ee:	d123      	bne.n	801c338 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 801c2f0:	69fb      	ldr	r3, [r7, #28]
 801c2f2:	08da      	lsrs	r2, r3, #3
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	3208      	adds	r2, #8
 801c2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c2fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801c2fe:	69fb      	ldr	r3, [r7, #28]
 801c300:	f003 0307 	and.w	r3, r3, #7
 801c304:	009b      	lsls	r3, r3, #2
 801c306:	220f      	movs	r2, #15
 801c308:	fa02 f303 	lsl.w	r3, r2, r3
 801c30c:	43db      	mvns	r3, r3
 801c30e:	69ba      	ldr	r2, [r7, #24]
 801c310:	4013      	ands	r3, r2
 801c312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 801c314:	683b      	ldr	r3, [r7, #0]
 801c316:	691a      	ldr	r2, [r3, #16]
 801c318:	69fb      	ldr	r3, [r7, #28]
 801c31a:	f003 0307 	and.w	r3, r3, #7
 801c31e:	009b      	lsls	r3, r3, #2
 801c320:	fa02 f303 	lsl.w	r3, r2, r3
 801c324:	69ba      	ldr	r2, [r7, #24]
 801c326:	4313      	orrs	r3, r2
 801c328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 801c32a:	69fb      	ldr	r3, [r7, #28]
 801c32c:	08da      	lsrs	r2, r3, #3
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	3208      	adds	r2, #8
 801c332:	69b9      	ldr	r1, [r7, #24]
 801c334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801c33e:	69fb      	ldr	r3, [r7, #28]
 801c340:	005b      	lsls	r3, r3, #1
 801c342:	2203      	movs	r2, #3
 801c344:	fa02 f303 	lsl.w	r3, r2, r3
 801c348:	43db      	mvns	r3, r3
 801c34a:	69ba      	ldr	r2, [r7, #24]
 801c34c:	4013      	ands	r3, r2
 801c34e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801c350:	683b      	ldr	r3, [r7, #0]
 801c352:	685b      	ldr	r3, [r3, #4]
 801c354:	f003 0203 	and.w	r2, r3, #3
 801c358:	69fb      	ldr	r3, [r7, #28]
 801c35a:	005b      	lsls	r3, r3, #1
 801c35c:	fa02 f303 	lsl.w	r3, r2, r3
 801c360:	69ba      	ldr	r2, [r7, #24]
 801c362:	4313      	orrs	r3, r2
 801c364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	69ba      	ldr	r2, [r7, #24]
 801c36a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801c36c:	683b      	ldr	r3, [r7, #0]
 801c36e:	685b      	ldr	r3, [r3, #4]
 801c370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801c374:	2b00      	cmp	r3, #0
 801c376:	f000 80be 	beq.w	801c4f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c37a:	4b66      	ldr	r3, [pc, #408]	; (801c514 <HAL_GPIO_Init+0x324>)
 801c37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c37e:	4a65      	ldr	r2, [pc, #404]	; (801c514 <HAL_GPIO_Init+0x324>)
 801c380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801c384:	6453      	str	r3, [r2, #68]	; 0x44
 801c386:	4b63      	ldr	r3, [pc, #396]	; (801c514 <HAL_GPIO_Init+0x324>)
 801c388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c38a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c38e:	60fb      	str	r3, [r7, #12]
 801c390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 801c392:	4a61      	ldr	r2, [pc, #388]	; (801c518 <HAL_GPIO_Init+0x328>)
 801c394:	69fb      	ldr	r3, [r7, #28]
 801c396:	089b      	lsrs	r3, r3, #2
 801c398:	3302      	adds	r3, #2
 801c39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c39e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801c3a0:	69fb      	ldr	r3, [r7, #28]
 801c3a2:	f003 0303 	and.w	r3, r3, #3
 801c3a6:	009b      	lsls	r3, r3, #2
 801c3a8:	220f      	movs	r2, #15
 801c3aa:	fa02 f303 	lsl.w	r3, r2, r3
 801c3ae:	43db      	mvns	r3, r3
 801c3b0:	69ba      	ldr	r2, [r7, #24]
 801c3b2:	4013      	ands	r3, r2
 801c3b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	4a58      	ldr	r2, [pc, #352]	; (801c51c <HAL_GPIO_Init+0x32c>)
 801c3ba:	4293      	cmp	r3, r2
 801c3bc:	d037      	beq.n	801c42e <HAL_GPIO_Init+0x23e>
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	4a57      	ldr	r2, [pc, #348]	; (801c520 <HAL_GPIO_Init+0x330>)
 801c3c2:	4293      	cmp	r3, r2
 801c3c4:	d031      	beq.n	801c42a <HAL_GPIO_Init+0x23a>
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	4a56      	ldr	r2, [pc, #344]	; (801c524 <HAL_GPIO_Init+0x334>)
 801c3ca:	4293      	cmp	r3, r2
 801c3cc:	d02b      	beq.n	801c426 <HAL_GPIO_Init+0x236>
 801c3ce:	687b      	ldr	r3, [r7, #4]
 801c3d0:	4a55      	ldr	r2, [pc, #340]	; (801c528 <HAL_GPIO_Init+0x338>)
 801c3d2:	4293      	cmp	r3, r2
 801c3d4:	d025      	beq.n	801c422 <HAL_GPIO_Init+0x232>
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	4a54      	ldr	r2, [pc, #336]	; (801c52c <HAL_GPIO_Init+0x33c>)
 801c3da:	4293      	cmp	r3, r2
 801c3dc:	d01f      	beq.n	801c41e <HAL_GPIO_Init+0x22e>
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	4a53      	ldr	r2, [pc, #332]	; (801c530 <HAL_GPIO_Init+0x340>)
 801c3e2:	4293      	cmp	r3, r2
 801c3e4:	d019      	beq.n	801c41a <HAL_GPIO_Init+0x22a>
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	4a52      	ldr	r2, [pc, #328]	; (801c534 <HAL_GPIO_Init+0x344>)
 801c3ea:	4293      	cmp	r3, r2
 801c3ec:	d013      	beq.n	801c416 <HAL_GPIO_Init+0x226>
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	4a51      	ldr	r2, [pc, #324]	; (801c538 <HAL_GPIO_Init+0x348>)
 801c3f2:	4293      	cmp	r3, r2
 801c3f4:	d00d      	beq.n	801c412 <HAL_GPIO_Init+0x222>
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	4a50      	ldr	r2, [pc, #320]	; (801c53c <HAL_GPIO_Init+0x34c>)
 801c3fa:	4293      	cmp	r3, r2
 801c3fc:	d007      	beq.n	801c40e <HAL_GPIO_Init+0x21e>
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	4a4f      	ldr	r2, [pc, #316]	; (801c540 <HAL_GPIO_Init+0x350>)
 801c402:	4293      	cmp	r3, r2
 801c404:	d101      	bne.n	801c40a <HAL_GPIO_Init+0x21a>
 801c406:	2309      	movs	r3, #9
 801c408:	e012      	b.n	801c430 <HAL_GPIO_Init+0x240>
 801c40a:	230a      	movs	r3, #10
 801c40c:	e010      	b.n	801c430 <HAL_GPIO_Init+0x240>
 801c40e:	2308      	movs	r3, #8
 801c410:	e00e      	b.n	801c430 <HAL_GPIO_Init+0x240>
 801c412:	2307      	movs	r3, #7
 801c414:	e00c      	b.n	801c430 <HAL_GPIO_Init+0x240>
 801c416:	2306      	movs	r3, #6
 801c418:	e00a      	b.n	801c430 <HAL_GPIO_Init+0x240>
 801c41a:	2305      	movs	r3, #5
 801c41c:	e008      	b.n	801c430 <HAL_GPIO_Init+0x240>
 801c41e:	2304      	movs	r3, #4
 801c420:	e006      	b.n	801c430 <HAL_GPIO_Init+0x240>
 801c422:	2303      	movs	r3, #3
 801c424:	e004      	b.n	801c430 <HAL_GPIO_Init+0x240>
 801c426:	2302      	movs	r3, #2
 801c428:	e002      	b.n	801c430 <HAL_GPIO_Init+0x240>
 801c42a:	2301      	movs	r3, #1
 801c42c:	e000      	b.n	801c430 <HAL_GPIO_Init+0x240>
 801c42e:	2300      	movs	r3, #0
 801c430:	69fa      	ldr	r2, [r7, #28]
 801c432:	f002 0203 	and.w	r2, r2, #3
 801c436:	0092      	lsls	r2, r2, #2
 801c438:	4093      	lsls	r3, r2
 801c43a:	69ba      	ldr	r2, [r7, #24]
 801c43c:	4313      	orrs	r3, r2
 801c43e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 801c440:	4935      	ldr	r1, [pc, #212]	; (801c518 <HAL_GPIO_Init+0x328>)
 801c442:	69fb      	ldr	r3, [r7, #28]
 801c444:	089b      	lsrs	r3, r3, #2
 801c446:	3302      	adds	r3, #2
 801c448:	69ba      	ldr	r2, [r7, #24]
 801c44a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801c44e:	4b3d      	ldr	r3, [pc, #244]	; (801c544 <HAL_GPIO_Init+0x354>)
 801c450:	689b      	ldr	r3, [r3, #8]
 801c452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801c454:	693b      	ldr	r3, [r7, #16]
 801c456:	43db      	mvns	r3, r3
 801c458:	69ba      	ldr	r2, [r7, #24]
 801c45a:	4013      	ands	r3, r2
 801c45c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801c45e:	683b      	ldr	r3, [r7, #0]
 801c460:	685b      	ldr	r3, [r3, #4]
 801c462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801c466:	2b00      	cmp	r3, #0
 801c468:	d003      	beq.n	801c472 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 801c46a:	69ba      	ldr	r2, [r7, #24]
 801c46c:	693b      	ldr	r3, [r7, #16]
 801c46e:	4313      	orrs	r3, r2
 801c470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801c472:	4a34      	ldr	r2, [pc, #208]	; (801c544 <HAL_GPIO_Init+0x354>)
 801c474:	69bb      	ldr	r3, [r7, #24]
 801c476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801c478:	4b32      	ldr	r3, [pc, #200]	; (801c544 <HAL_GPIO_Init+0x354>)
 801c47a:	68db      	ldr	r3, [r3, #12]
 801c47c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801c47e:	693b      	ldr	r3, [r7, #16]
 801c480:	43db      	mvns	r3, r3
 801c482:	69ba      	ldr	r2, [r7, #24]
 801c484:	4013      	ands	r3, r2
 801c486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801c488:	683b      	ldr	r3, [r7, #0]
 801c48a:	685b      	ldr	r3, [r3, #4]
 801c48c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c490:	2b00      	cmp	r3, #0
 801c492:	d003      	beq.n	801c49c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 801c494:	69ba      	ldr	r2, [r7, #24]
 801c496:	693b      	ldr	r3, [r7, #16]
 801c498:	4313      	orrs	r3, r2
 801c49a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801c49c:	4a29      	ldr	r2, [pc, #164]	; (801c544 <HAL_GPIO_Init+0x354>)
 801c49e:	69bb      	ldr	r3, [r7, #24]
 801c4a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801c4a2:	4b28      	ldr	r3, [pc, #160]	; (801c544 <HAL_GPIO_Init+0x354>)
 801c4a4:	685b      	ldr	r3, [r3, #4]
 801c4a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801c4a8:	693b      	ldr	r3, [r7, #16]
 801c4aa:	43db      	mvns	r3, r3
 801c4ac:	69ba      	ldr	r2, [r7, #24]
 801c4ae:	4013      	ands	r3, r2
 801c4b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801c4b2:	683b      	ldr	r3, [r7, #0]
 801c4b4:	685b      	ldr	r3, [r3, #4]
 801c4b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	d003      	beq.n	801c4c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801c4be:	69ba      	ldr	r2, [r7, #24]
 801c4c0:	693b      	ldr	r3, [r7, #16]
 801c4c2:	4313      	orrs	r3, r2
 801c4c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801c4c6:	4a1f      	ldr	r2, [pc, #124]	; (801c544 <HAL_GPIO_Init+0x354>)
 801c4c8:	69bb      	ldr	r3, [r7, #24]
 801c4ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801c4cc:	4b1d      	ldr	r3, [pc, #116]	; (801c544 <HAL_GPIO_Init+0x354>)
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801c4d2:	693b      	ldr	r3, [r7, #16]
 801c4d4:	43db      	mvns	r3, r3
 801c4d6:	69ba      	ldr	r2, [r7, #24]
 801c4d8:	4013      	ands	r3, r2
 801c4da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801c4dc:	683b      	ldr	r3, [r7, #0]
 801c4de:	685b      	ldr	r3, [r3, #4]
 801c4e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d003      	beq.n	801c4f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 801c4e8:	69ba      	ldr	r2, [r7, #24]
 801c4ea:	693b      	ldr	r3, [r7, #16]
 801c4ec:	4313      	orrs	r3, r2
 801c4ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801c4f0:	4a14      	ldr	r2, [pc, #80]	; (801c544 <HAL_GPIO_Init+0x354>)
 801c4f2:	69bb      	ldr	r3, [r7, #24]
 801c4f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 801c4f6:	69fb      	ldr	r3, [r7, #28]
 801c4f8:	3301      	adds	r3, #1
 801c4fa:	61fb      	str	r3, [r7, #28]
 801c4fc:	69fb      	ldr	r3, [r7, #28]
 801c4fe:	2b0f      	cmp	r3, #15
 801c500:	f67f ae86 	bls.w	801c210 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 801c504:	bf00      	nop
 801c506:	bf00      	nop
 801c508:	3724      	adds	r7, #36	; 0x24
 801c50a:	46bd      	mov	sp, r7
 801c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c510:	4770      	bx	lr
 801c512:	bf00      	nop
 801c514:	40023800 	.word	0x40023800
 801c518:	40013800 	.word	0x40013800
 801c51c:	40020000 	.word	0x40020000
 801c520:	40020400 	.word	0x40020400
 801c524:	40020800 	.word	0x40020800
 801c528:	40020c00 	.word	0x40020c00
 801c52c:	40021000 	.word	0x40021000
 801c530:	40021400 	.word	0x40021400
 801c534:	40021800 	.word	0x40021800
 801c538:	40021c00 	.word	0x40021c00
 801c53c:	40022000 	.word	0x40022000
 801c540:	40022400 	.word	0x40022400
 801c544:	40013c00 	.word	0x40013c00

0801c548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801c548:	b480      	push	{r7}
 801c54a:	b085      	sub	sp, #20
 801c54c:	af00      	add	r7, sp, #0
 801c54e:	6078      	str	r0, [r7, #4]
 801c550:	460b      	mov	r3, r1
 801c552:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	691a      	ldr	r2, [r3, #16]
 801c558:	887b      	ldrh	r3, [r7, #2]
 801c55a:	4013      	ands	r3, r2
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d002      	beq.n	801c566 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801c560:	2301      	movs	r3, #1
 801c562:	73fb      	strb	r3, [r7, #15]
 801c564:	e001      	b.n	801c56a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801c566:	2300      	movs	r3, #0
 801c568:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801c56a:	7bfb      	ldrb	r3, [r7, #15]
}
 801c56c:	4618      	mov	r0, r3
 801c56e:	3714      	adds	r7, #20
 801c570:	46bd      	mov	sp, r7
 801c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c576:	4770      	bx	lr

0801c578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c578:	b480      	push	{r7}
 801c57a:	b083      	sub	sp, #12
 801c57c:	af00      	add	r7, sp, #0
 801c57e:	6078      	str	r0, [r7, #4]
 801c580:	460b      	mov	r3, r1
 801c582:	807b      	strh	r3, [r7, #2]
 801c584:	4613      	mov	r3, r2
 801c586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801c588:	787b      	ldrb	r3, [r7, #1]
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d003      	beq.n	801c596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801c58e:	887a      	ldrh	r2, [r7, #2]
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 801c594:	e003      	b.n	801c59e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 801c596:	887b      	ldrh	r3, [r7, #2]
 801c598:	041a      	lsls	r2, r3, #16
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	619a      	str	r2, [r3, #24]
}
 801c59e:	bf00      	nop
 801c5a0:	370c      	adds	r7, #12
 801c5a2:	46bd      	mov	sp, r7
 801c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5a8:	4770      	bx	lr

0801c5aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801c5aa:	b480      	push	{r7}
 801c5ac:	b085      	sub	sp, #20
 801c5ae:	af00      	add	r7, sp, #0
 801c5b0:	6078      	str	r0, [r7, #4]
 801c5b2:	460b      	mov	r3, r1
 801c5b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	695b      	ldr	r3, [r3, #20]
 801c5ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801c5bc:	887a      	ldrh	r2, [r7, #2]
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	4013      	ands	r3, r2
 801c5c2:	041a      	lsls	r2, r3, #16
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	43d9      	mvns	r1, r3
 801c5c8:	887b      	ldrh	r3, [r7, #2]
 801c5ca:	400b      	ands	r3, r1
 801c5cc:	431a      	orrs	r2, r3
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	619a      	str	r2, [r3, #24]
}
 801c5d2:	bf00      	nop
 801c5d4:	3714      	adds	r7, #20
 801c5d6:	46bd      	mov	sp, r7
 801c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5dc:	4770      	bx	lr
	...

0801c5e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801c5e0:	b580      	push	{r7, lr}
 801c5e2:	b082      	sub	sp, #8
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	4603      	mov	r3, r0
 801c5e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801c5ea:	4b08      	ldr	r3, [pc, #32]	; (801c60c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801c5ec:	695a      	ldr	r2, [r3, #20]
 801c5ee:	88fb      	ldrh	r3, [r7, #6]
 801c5f0:	4013      	ands	r3, r2
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d006      	beq.n	801c604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801c5f6:	4a05      	ldr	r2, [pc, #20]	; (801c60c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801c5f8:	88fb      	ldrh	r3, [r7, #6]
 801c5fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801c5fc:	88fb      	ldrh	r3, [r7, #6]
 801c5fe:	4618      	mov	r0, r3
 801c600:	f000 f806 	bl	801c610 <HAL_GPIO_EXTI_Callback>
  }
}
 801c604:	bf00      	nop
 801c606:	3708      	adds	r7, #8
 801c608:	46bd      	mov	sp, r7
 801c60a:	bd80      	pop	{r7, pc}
 801c60c:	40013c00 	.word	0x40013c00

0801c610 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801c610:	b480      	push	{r7}
 801c612:	b083      	sub	sp, #12
 801c614:	af00      	add	r7, sp, #0
 801c616:	4603      	mov	r3, r0
 801c618:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801c61a:	bf00      	nop
 801c61c:	370c      	adds	r7, #12
 801c61e:	46bd      	mov	sp, r7
 801c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c624:	4770      	bx	lr
	...

0801c628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801c628:	b580      	push	{r7, lr}
 801c62a:	b082      	sub	sp, #8
 801c62c:	af00      	add	r7, sp, #0
 801c62e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	2b00      	cmp	r3, #0
 801c634:	d101      	bne.n	801c63a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801c636:	2301      	movs	r3, #1
 801c638:	e07f      	b.n	801c73a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c640:	b2db      	uxtb	r3, r3
 801c642:	2b00      	cmp	r3, #0
 801c644:	d106      	bne.n	801c654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	2200      	movs	r2, #0
 801c64a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801c64e:	6878      	ldr	r0, [r7, #4]
 801c650:	f7fa f87e 	bl	8016750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	2224      	movs	r2, #36	; 0x24
 801c658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	681a      	ldr	r2, [r3, #0]
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	681b      	ldr	r3, [r3, #0]
 801c666:	f022 0201 	bic.w	r2, r2, #1
 801c66a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	685a      	ldr	r2, [r3, #4]
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801c678:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	689a      	ldr	r2, [r3, #8]
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801c688:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	68db      	ldr	r3, [r3, #12]
 801c68e:	2b01      	cmp	r3, #1
 801c690:	d107      	bne.n	801c6a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	689a      	ldr	r2, [r3, #8]
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801c69e:	609a      	str	r2, [r3, #8]
 801c6a0:	e006      	b.n	801c6b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	689a      	ldr	r2, [r3, #8]
 801c6a6:	687b      	ldr	r3, [r7, #4]
 801c6a8:	681b      	ldr	r3, [r3, #0]
 801c6aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801c6ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	68db      	ldr	r3, [r3, #12]
 801c6b4:	2b02      	cmp	r3, #2
 801c6b6:	d104      	bne.n	801c6c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c6c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801c6c2:	687b      	ldr	r3, [r7, #4]
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	6859      	ldr	r1, [r3, #4]
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	681a      	ldr	r2, [r3, #0]
 801c6cc:	4b1d      	ldr	r3, [pc, #116]	; (801c744 <HAL_I2C_Init+0x11c>)
 801c6ce:	430b      	orrs	r3, r1
 801c6d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	68da      	ldr	r2, [r3, #12]
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801c6e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	691a      	ldr	r2, [r3, #16]
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	695b      	ldr	r3, [r3, #20]
 801c6ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	699b      	ldr	r3, [r3, #24]
 801c6f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801c6f4:	687b      	ldr	r3, [r7, #4]
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	430a      	orrs	r2, r1
 801c6fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	69d9      	ldr	r1, [r3, #28]
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	6a1a      	ldr	r2, [r3, #32]
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	681b      	ldr	r3, [r3, #0]
 801c708:	430a      	orrs	r2, r1
 801c70a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	681b      	ldr	r3, [r3, #0]
 801c710:	681a      	ldr	r2, [r3, #0]
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	681b      	ldr	r3, [r3, #0]
 801c716:	f042 0201 	orr.w	r2, r2, #1
 801c71a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c71c:	687b      	ldr	r3, [r7, #4]
 801c71e:	2200      	movs	r2, #0
 801c720:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	2220      	movs	r2, #32
 801c726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	2200      	movs	r2, #0
 801c72e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	2200      	movs	r2, #0
 801c734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 801c738:	2300      	movs	r3, #0
}
 801c73a:	4618      	mov	r0, r3
 801c73c:	3708      	adds	r7, #8
 801c73e:	46bd      	mov	sp, r7
 801c740:	bd80      	pop	{r7, pc}
 801c742:	bf00      	nop
 801c744:	02008000 	.word	0x02008000

0801c748 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c748:	b580      	push	{r7, lr}
 801c74a:	b088      	sub	sp, #32
 801c74c:	af02      	add	r7, sp, #8
 801c74e:	60f8      	str	r0, [r7, #12]
 801c750:	4608      	mov	r0, r1
 801c752:	4611      	mov	r1, r2
 801c754:	461a      	mov	r2, r3
 801c756:	4603      	mov	r3, r0
 801c758:	817b      	strh	r3, [r7, #10]
 801c75a:	460b      	mov	r3, r1
 801c75c:	813b      	strh	r3, [r7, #8]
 801c75e:	4613      	mov	r3, r2
 801c760:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c768:	b2db      	uxtb	r3, r3
 801c76a:	2b20      	cmp	r3, #32
 801c76c:	f040 80f9 	bne.w	801c962 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 801c770:	6a3b      	ldr	r3, [r7, #32]
 801c772:	2b00      	cmp	r3, #0
 801c774:	d002      	beq.n	801c77c <HAL_I2C_Mem_Write+0x34>
 801c776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d105      	bne.n	801c788 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c782:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801c784:	2301      	movs	r3, #1
 801c786:	e0ed      	b.n	801c964 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c78e:	2b01      	cmp	r3, #1
 801c790:	d101      	bne.n	801c796 <HAL_I2C_Mem_Write+0x4e>
 801c792:	2302      	movs	r3, #2
 801c794:	e0e6      	b.n	801c964 <HAL_I2C_Mem_Write+0x21c>
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	2201      	movs	r2, #1
 801c79a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801c79e:	f7fd fa1b 	bl	8019bd8 <HAL_GetTick>
 801c7a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801c7a4:	697b      	ldr	r3, [r7, #20]
 801c7a6:	9300      	str	r3, [sp, #0]
 801c7a8:	2319      	movs	r3, #25
 801c7aa:	2201      	movs	r2, #1
 801c7ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801c7b0:	68f8      	ldr	r0, [r7, #12]
 801c7b2:	f000 fac3 	bl	801cd3c <I2C_WaitOnFlagUntilTimeout>
 801c7b6:	4603      	mov	r3, r0
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d001      	beq.n	801c7c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 801c7bc:	2301      	movs	r3, #1
 801c7be:	e0d1      	b.n	801c964 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801c7c0:	68fb      	ldr	r3, [r7, #12]
 801c7c2:	2221      	movs	r2, #33	; 0x21
 801c7c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	2240      	movs	r2, #64	; 0x40
 801c7cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c7d0:	68fb      	ldr	r3, [r7, #12]
 801c7d2:	2200      	movs	r2, #0
 801c7d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	6a3a      	ldr	r2, [r7, #32]
 801c7da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c7e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801c7e2:	68fb      	ldr	r3, [r7, #12]
 801c7e4:	2200      	movs	r2, #0
 801c7e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801c7e8:	88f8      	ldrh	r0, [r7, #6]
 801c7ea:	893a      	ldrh	r2, [r7, #8]
 801c7ec:	8979      	ldrh	r1, [r7, #10]
 801c7ee:	697b      	ldr	r3, [r7, #20]
 801c7f0:	9301      	str	r3, [sp, #4]
 801c7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7f4:	9300      	str	r3, [sp, #0]
 801c7f6:	4603      	mov	r3, r0
 801c7f8:	68f8      	ldr	r0, [r7, #12]
 801c7fa:	f000 f9d3 	bl	801cba4 <I2C_RequestMemoryWrite>
 801c7fe:	4603      	mov	r3, r0
 801c800:	2b00      	cmp	r3, #0
 801c802:	d005      	beq.n	801c810 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	2200      	movs	r2, #0
 801c808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801c80c:	2301      	movs	r3, #1
 801c80e:	e0a9      	b.n	801c964 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c814:	b29b      	uxth	r3, r3
 801c816:	2bff      	cmp	r3, #255	; 0xff
 801c818:	d90e      	bls.n	801c838 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801c81a:	68fb      	ldr	r3, [r7, #12]
 801c81c:	22ff      	movs	r2, #255	; 0xff
 801c81e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c824:	b2da      	uxtb	r2, r3
 801c826:	8979      	ldrh	r1, [r7, #10]
 801c828:	2300      	movs	r3, #0
 801c82a:	9300      	str	r3, [sp, #0]
 801c82c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c830:	68f8      	ldr	r0, [r7, #12]
 801c832:	f000 fc1f 	bl	801d074 <I2C_TransferConfig>
 801c836:	e00f      	b.n	801c858 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801c838:	68fb      	ldr	r3, [r7, #12]
 801c83a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c83c:	b29a      	uxth	r2, r3
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c846:	b2da      	uxtb	r2, r3
 801c848:	8979      	ldrh	r1, [r7, #10]
 801c84a:	2300      	movs	r3, #0
 801c84c:	9300      	str	r3, [sp, #0]
 801c84e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c852:	68f8      	ldr	r0, [r7, #12]
 801c854:	f000 fc0e 	bl	801d074 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801c858:	697a      	ldr	r2, [r7, #20]
 801c85a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c85c:	68f8      	ldr	r0, [r7, #12]
 801c85e:	f000 faad 	bl	801cdbc <I2C_WaitOnTXISFlagUntilTimeout>
 801c862:	4603      	mov	r3, r0
 801c864:	2b00      	cmp	r3, #0
 801c866:	d001      	beq.n	801c86c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 801c868:	2301      	movs	r3, #1
 801c86a:	e07b      	b.n	801c964 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c870:	781a      	ldrb	r2, [r3, #0]
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c87c:	1c5a      	adds	r2, r3, #1
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c886:	b29b      	uxth	r3, r3
 801c888:	3b01      	subs	r3, #1
 801c88a:	b29a      	uxth	r2, r3
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c894:	3b01      	subs	r3, #1
 801c896:	b29a      	uxth	r2, r3
 801c898:	68fb      	ldr	r3, [r7, #12]
 801c89a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c8a0:	b29b      	uxth	r3, r3
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d034      	beq.n	801c910 <HAL_I2C_Mem_Write+0x1c8>
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	d130      	bne.n	801c910 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801c8ae:	697b      	ldr	r3, [r7, #20]
 801c8b0:	9300      	str	r3, [sp, #0]
 801c8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c8b4:	2200      	movs	r2, #0
 801c8b6:	2180      	movs	r1, #128	; 0x80
 801c8b8:	68f8      	ldr	r0, [r7, #12]
 801c8ba:	f000 fa3f 	bl	801cd3c <I2C_WaitOnFlagUntilTimeout>
 801c8be:	4603      	mov	r3, r0
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d001      	beq.n	801c8c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 801c8c4:	2301      	movs	r3, #1
 801c8c6:	e04d      	b.n	801c964 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c8c8:	68fb      	ldr	r3, [r7, #12]
 801c8ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c8cc:	b29b      	uxth	r3, r3
 801c8ce:	2bff      	cmp	r3, #255	; 0xff
 801c8d0:	d90e      	bls.n	801c8f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801c8d2:	68fb      	ldr	r3, [r7, #12]
 801c8d4:	22ff      	movs	r2, #255	; 0xff
 801c8d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801c8d8:	68fb      	ldr	r3, [r7, #12]
 801c8da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c8dc:	b2da      	uxtb	r2, r3
 801c8de:	8979      	ldrh	r1, [r7, #10]
 801c8e0:	2300      	movs	r3, #0
 801c8e2:	9300      	str	r3, [sp, #0]
 801c8e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c8e8:	68f8      	ldr	r0, [r7, #12]
 801c8ea:	f000 fbc3 	bl	801d074 <I2C_TransferConfig>
 801c8ee:	e00f      	b.n	801c910 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c8f4:	b29a      	uxth	r2, r3
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c8fe:	b2da      	uxtb	r2, r3
 801c900:	8979      	ldrh	r1, [r7, #10]
 801c902:	2300      	movs	r3, #0
 801c904:	9300      	str	r3, [sp, #0]
 801c906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c90a:	68f8      	ldr	r0, [r7, #12]
 801c90c:	f000 fbb2 	bl	801d074 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c914:	b29b      	uxth	r3, r3
 801c916:	2b00      	cmp	r3, #0
 801c918:	d19e      	bne.n	801c858 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801c91a:	697a      	ldr	r2, [r7, #20]
 801c91c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c91e:	68f8      	ldr	r0, [r7, #12]
 801c920:	f000 fa8c 	bl	801ce3c <I2C_WaitOnSTOPFlagUntilTimeout>
 801c924:	4603      	mov	r3, r0
 801c926:	2b00      	cmp	r3, #0
 801c928:	d001      	beq.n	801c92e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 801c92a:	2301      	movs	r3, #1
 801c92c:	e01a      	b.n	801c964 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	681b      	ldr	r3, [r3, #0]
 801c932:	2220      	movs	r2, #32
 801c934:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801c936:	68fb      	ldr	r3, [r7, #12]
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	6859      	ldr	r1, [r3, #4]
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	681a      	ldr	r2, [r3, #0]
 801c940:	4b0a      	ldr	r3, [pc, #40]	; (801c96c <HAL_I2C_Mem_Write+0x224>)
 801c942:	400b      	ands	r3, r1
 801c944:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	2220      	movs	r2, #32
 801c94a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801c94e:	68fb      	ldr	r3, [r7, #12]
 801c950:	2200      	movs	r2, #0
 801c952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c956:	68fb      	ldr	r3, [r7, #12]
 801c958:	2200      	movs	r2, #0
 801c95a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801c95e:	2300      	movs	r3, #0
 801c960:	e000      	b.n	801c964 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801c962:	2302      	movs	r3, #2
  }
}
 801c964:	4618      	mov	r0, r3
 801c966:	3718      	adds	r7, #24
 801c968:	46bd      	mov	sp, r7
 801c96a:	bd80      	pop	{r7, pc}
 801c96c:	fe00e800 	.word	0xfe00e800

0801c970 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c970:	b580      	push	{r7, lr}
 801c972:	b088      	sub	sp, #32
 801c974:	af02      	add	r7, sp, #8
 801c976:	60f8      	str	r0, [r7, #12]
 801c978:	4608      	mov	r0, r1
 801c97a:	4611      	mov	r1, r2
 801c97c:	461a      	mov	r2, r3
 801c97e:	4603      	mov	r3, r0
 801c980:	817b      	strh	r3, [r7, #10]
 801c982:	460b      	mov	r3, r1
 801c984:	813b      	strh	r3, [r7, #8]
 801c986:	4613      	mov	r3, r2
 801c988:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c990:	b2db      	uxtb	r3, r3
 801c992:	2b20      	cmp	r3, #32
 801c994:	f040 80fd 	bne.w	801cb92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 801c998:	6a3b      	ldr	r3, [r7, #32]
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d002      	beq.n	801c9a4 <HAL_I2C_Mem_Read+0x34>
 801c99e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d105      	bne.n	801c9b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c9aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801c9ac:	2301      	movs	r3, #1
 801c9ae:	e0f1      	b.n	801cb94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c9b0:	68fb      	ldr	r3, [r7, #12]
 801c9b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c9b6:	2b01      	cmp	r3, #1
 801c9b8:	d101      	bne.n	801c9be <HAL_I2C_Mem_Read+0x4e>
 801c9ba:	2302      	movs	r3, #2
 801c9bc:	e0ea      	b.n	801cb94 <HAL_I2C_Mem_Read+0x224>
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	2201      	movs	r2, #1
 801c9c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801c9c6:	f7fd f907 	bl	8019bd8 <HAL_GetTick>
 801c9ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801c9cc:	697b      	ldr	r3, [r7, #20]
 801c9ce:	9300      	str	r3, [sp, #0]
 801c9d0:	2319      	movs	r3, #25
 801c9d2:	2201      	movs	r2, #1
 801c9d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801c9d8:	68f8      	ldr	r0, [r7, #12]
 801c9da:	f000 f9af 	bl	801cd3c <I2C_WaitOnFlagUntilTimeout>
 801c9de:	4603      	mov	r3, r0
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d001      	beq.n	801c9e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 801c9e4:	2301      	movs	r3, #1
 801c9e6:	e0d5      	b.n	801cb94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801c9e8:	68fb      	ldr	r3, [r7, #12]
 801c9ea:	2222      	movs	r2, #34	; 0x22
 801c9ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801c9f0:	68fb      	ldr	r3, [r7, #12]
 801c9f2:	2240      	movs	r2, #64	; 0x40
 801c9f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	2200      	movs	r2, #0
 801c9fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	6a3a      	ldr	r2, [r7, #32]
 801ca02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801ca04:	68fb      	ldr	r3, [r7, #12]
 801ca06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ca08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	2200      	movs	r2, #0
 801ca0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801ca10:	88f8      	ldrh	r0, [r7, #6]
 801ca12:	893a      	ldrh	r2, [r7, #8]
 801ca14:	8979      	ldrh	r1, [r7, #10]
 801ca16:	697b      	ldr	r3, [r7, #20]
 801ca18:	9301      	str	r3, [sp, #4]
 801ca1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca1c:	9300      	str	r3, [sp, #0]
 801ca1e:	4603      	mov	r3, r0
 801ca20:	68f8      	ldr	r0, [r7, #12]
 801ca22:	f000 f913 	bl	801cc4c <I2C_RequestMemoryRead>
 801ca26:	4603      	mov	r3, r0
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	d005      	beq.n	801ca38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801ca2c:	68fb      	ldr	r3, [r7, #12]
 801ca2e:	2200      	movs	r2, #0
 801ca30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801ca34:	2301      	movs	r3, #1
 801ca36:	e0ad      	b.n	801cb94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801ca38:	68fb      	ldr	r3, [r7, #12]
 801ca3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ca3c:	b29b      	uxth	r3, r3
 801ca3e:	2bff      	cmp	r3, #255	; 0xff
 801ca40:	d90e      	bls.n	801ca60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	22ff      	movs	r2, #255	; 0xff
 801ca46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801ca48:	68fb      	ldr	r3, [r7, #12]
 801ca4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ca4c:	b2da      	uxtb	r2, r3
 801ca4e:	8979      	ldrh	r1, [r7, #10]
 801ca50:	4b52      	ldr	r3, [pc, #328]	; (801cb9c <HAL_I2C_Mem_Read+0x22c>)
 801ca52:	9300      	str	r3, [sp, #0]
 801ca54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801ca58:	68f8      	ldr	r0, [r7, #12]
 801ca5a:	f000 fb0b 	bl	801d074 <I2C_TransferConfig>
 801ca5e:	e00f      	b.n	801ca80 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801ca60:	68fb      	ldr	r3, [r7, #12]
 801ca62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ca64:	b29a      	uxth	r2, r3
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801ca6a:	68fb      	ldr	r3, [r7, #12]
 801ca6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ca6e:	b2da      	uxtb	r2, r3
 801ca70:	8979      	ldrh	r1, [r7, #10]
 801ca72:	4b4a      	ldr	r3, [pc, #296]	; (801cb9c <HAL_I2C_Mem_Read+0x22c>)
 801ca74:	9300      	str	r3, [sp, #0]
 801ca76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801ca7a:	68f8      	ldr	r0, [r7, #12]
 801ca7c:	f000 fafa 	bl	801d074 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801ca80:	697b      	ldr	r3, [r7, #20]
 801ca82:	9300      	str	r3, [sp, #0]
 801ca84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca86:	2200      	movs	r2, #0
 801ca88:	2104      	movs	r1, #4
 801ca8a:	68f8      	ldr	r0, [r7, #12]
 801ca8c:	f000 f956 	bl	801cd3c <I2C_WaitOnFlagUntilTimeout>
 801ca90:	4603      	mov	r3, r0
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d001      	beq.n	801ca9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801ca96:	2301      	movs	r3, #1
 801ca98:	e07c      	b.n	801cb94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801ca9a:	68fb      	ldr	r3, [r7, #12]
 801ca9c:	681b      	ldr	r3, [r3, #0]
 801ca9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801caa4:	b2d2      	uxtb	r2, r2
 801caa6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801caa8:	68fb      	ldr	r3, [r7, #12]
 801caaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801caac:	1c5a      	adds	r2, r3, #1
 801caae:	68fb      	ldr	r3, [r7, #12]
 801cab0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801cab2:	68fb      	ldr	r3, [r7, #12]
 801cab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cab6:	3b01      	subs	r3, #1
 801cab8:	b29a      	uxth	r2, r3
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cac2:	b29b      	uxth	r3, r3
 801cac4:	3b01      	subs	r3, #1
 801cac6:	b29a      	uxth	r2, r3
 801cac8:	68fb      	ldr	r3, [r7, #12]
 801caca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801cacc:	68fb      	ldr	r3, [r7, #12]
 801cace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cad0:	b29b      	uxth	r3, r3
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	d034      	beq.n	801cb40 <HAL_I2C_Mem_Read+0x1d0>
 801cad6:	68fb      	ldr	r3, [r7, #12]
 801cad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d130      	bne.n	801cb40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801cade:	697b      	ldr	r3, [r7, #20]
 801cae0:	9300      	str	r3, [sp, #0]
 801cae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cae4:	2200      	movs	r2, #0
 801cae6:	2180      	movs	r1, #128	; 0x80
 801cae8:	68f8      	ldr	r0, [r7, #12]
 801caea:	f000 f927 	bl	801cd3c <I2C_WaitOnFlagUntilTimeout>
 801caee:	4603      	mov	r3, r0
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d001      	beq.n	801caf8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 801caf4:	2301      	movs	r3, #1
 801caf6:	e04d      	b.n	801cb94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801caf8:	68fb      	ldr	r3, [r7, #12]
 801cafa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cafc:	b29b      	uxth	r3, r3
 801cafe:	2bff      	cmp	r3, #255	; 0xff
 801cb00:	d90e      	bls.n	801cb20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801cb02:	68fb      	ldr	r3, [r7, #12]
 801cb04:	22ff      	movs	r2, #255	; 0xff
 801cb06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801cb08:	68fb      	ldr	r3, [r7, #12]
 801cb0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cb0c:	b2da      	uxtb	r2, r3
 801cb0e:	8979      	ldrh	r1, [r7, #10]
 801cb10:	2300      	movs	r3, #0
 801cb12:	9300      	str	r3, [sp, #0]
 801cb14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801cb18:	68f8      	ldr	r0, [r7, #12]
 801cb1a:	f000 faab 	bl	801d074 <I2C_TransferConfig>
 801cb1e:	e00f      	b.n	801cb40 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cb24:	b29a      	uxth	r2, r3
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cb2e:	b2da      	uxtb	r2, r3
 801cb30:	8979      	ldrh	r1, [r7, #10]
 801cb32:	2300      	movs	r3, #0
 801cb34:	9300      	str	r3, [sp, #0]
 801cb36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801cb3a:	68f8      	ldr	r0, [r7, #12]
 801cb3c:	f000 fa9a 	bl	801d074 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cb44:	b29b      	uxth	r3, r3
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d19a      	bne.n	801ca80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801cb4a:	697a      	ldr	r2, [r7, #20]
 801cb4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801cb4e:	68f8      	ldr	r0, [r7, #12]
 801cb50:	f000 f974 	bl	801ce3c <I2C_WaitOnSTOPFlagUntilTimeout>
 801cb54:	4603      	mov	r3, r0
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d001      	beq.n	801cb5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801cb5a:	2301      	movs	r3, #1
 801cb5c:	e01a      	b.n	801cb94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801cb5e:	68fb      	ldr	r3, [r7, #12]
 801cb60:	681b      	ldr	r3, [r3, #0]
 801cb62:	2220      	movs	r2, #32
 801cb64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801cb66:	68fb      	ldr	r3, [r7, #12]
 801cb68:	681b      	ldr	r3, [r3, #0]
 801cb6a:	6859      	ldr	r1, [r3, #4]
 801cb6c:	68fb      	ldr	r3, [r7, #12]
 801cb6e:	681a      	ldr	r2, [r3, #0]
 801cb70:	4b0b      	ldr	r3, [pc, #44]	; (801cba0 <HAL_I2C_Mem_Read+0x230>)
 801cb72:	400b      	ands	r3, r1
 801cb74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801cb76:	68fb      	ldr	r3, [r7, #12]
 801cb78:	2220      	movs	r2, #32
 801cb7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801cb7e:	68fb      	ldr	r3, [r7, #12]
 801cb80:	2200      	movs	r2, #0
 801cb82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801cb86:	68fb      	ldr	r3, [r7, #12]
 801cb88:	2200      	movs	r2, #0
 801cb8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801cb8e:	2300      	movs	r3, #0
 801cb90:	e000      	b.n	801cb94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801cb92:	2302      	movs	r3, #2
  }
}
 801cb94:	4618      	mov	r0, r3
 801cb96:	3718      	adds	r7, #24
 801cb98:	46bd      	mov	sp, r7
 801cb9a:	bd80      	pop	{r7, pc}
 801cb9c:	80002400 	.word	0x80002400
 801cba0:	fe00e800 	.word	0xfe00e800

0801cba4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 801cba4:	b580      	push	{r7, lr}
 801cba6:	b086      	sub	sp, #24
 801cba8:	af02      	add	r7, sp, #8
 801cbaa:	60f8      	str	r0, [r7, #12]
 801cbac:	4608      	mov	r0, r1
 801cbae:	4611      	mov	r1, r2
 801cbb0:	461a      	mov	r2, r3
 801cbb2:	4603      	mov	r3, r0
 801cbb4:	817b      	strh	r3, [r7, #10]
 801cbb6:	460b      	mov	r3, r1
 801cbb8:	813b      	strh	r3, [r7, #8]
 801cbba:	4613      	mov	r3, r2
 801cbbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801cbbe:	88fb      	ldrh	r3, [r7, #6]
 801cbc0:	b2da      	uxtb	r2, r3
 801cbc2:	8979      	ldrh	r1, [r7, #10]
 801cbc4:	4b20      	ldr	r3, [pc, #128]	; (801cc48 <I2C_RequestMemoryWrite+0xa4>)
 801cbc6:	9300      	str	r3, [sp, #0]
 801cbc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801cbcc:	68f8      	ldr	r0, [r7, #12]
 801cbce:	f000 fa51 	bl	801d074 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801cbd2:	69fa      	ldr	r2, [r7, #28]
 801cbd4:	69b9      	ldr	r1, [r7, #24]
 801cbd6:	68f8      	ldr	r0, [r7, #12]
 801cbd8:	f000 f8f0 	bl	801cdbc <I2C_WaitOnTXISFlagUntilTimeout>
 801cbdc:	4603      	mov	r3, r0
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d001      	beq.n	801cbe6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801cbe2:	2301      	movs	r3, #1
 801cbe4:	e02c      	b.n	801cc40 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801cbe6:	88fb      	ldrh	r3, [r7, #6]
 801cbe8:	2b01      	cmp	r3, #1
 801cbea:	d105      	bne.n	801cbf8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801cbec:	893b      	ldrh	r3, [r7, #8]
 801cbee:	b2da      	uxtb	r2, r3
 801cbf0:	68fb      	ldr	r3, [r7, #12]
 801cbf2:	681b      	ldr	r3, [r3, #0]
 801cbf4:	629a      	str	r2, [r3, #40]	; 0x28
 801cbf6:	e015      	b.n	801cc24 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801cbf8:	893b      	ldrh	r3, [r7, #8]
 801cbfa:	0a1b      	lsrs	r3, r3, #8
 801cbfc:	b29b      	uxth	r3, r3
 801cbfe:	b2da      	uxtb	r2, r3
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801cc06:	69fa      	ldr	r2, [r7, #28]
 801cc08:	69b9      	ldr	r1, [r7, #24]
 801cc0a:	68f8      	ldr	r0, [r7, #12]
 801cc0c:	f000 f8d6 	bl	801cdbc <I2C_WaitOnTXISFlagUntilTimeout>
 801cc10:	4603      	mov	r3, r0
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	d001      	beq.n	801cc1a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 801cc16:	2301      	movs	r3, #1
 801cc18:	e012      	b.n	801cc40 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801cc1a:	893b      	ldrh	r3, [r7, #8]
 801cc1c:	b2da      	uxtb	r2, r3
 801cc1e:	68fb      	ldr	r3, [r7, #12]
 801cc20:	681b      	ldr	r3, [r3, #0]
 801cc22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 801cc24:	69fb      	ldr	r3, [r7, #28]
 801cc26:	9300      	str	r3, [sp, #0]
 801cc28:	69bb      	ldr	r3, [r7, #24]
 801cc2a:	2200      	movs	r2, #0
 801cc2c:	2180      	movs	r1, #128	; 0x80
 801cc2e:	68f8      	ldr	r0, [r7, #12]
 801cc30:	f000 f884 	bl	801cd3c <I2C_WaitOnFlagUntilTimeout>
 801cc34:	4603      	mov	r3, r0
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d001      	beq.n	801cc3e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801cc3a:	2301      	movs	r3, #1
 801cc3c:	e000      	b.n	801cc40 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801cc3e:	2300      	movs	r3, #0
}
 801cc40:	4618      	mov	r0, r3
 801cc42:	3710      	adds	r7, #16
 801cc44:	46bd      	mov	sp, r7
 801cc46:	bd80      	pop	{r7, pc}
 801cc48:	80002000 	.word	0x80002000

0801cc4c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801cc4c:	b580      	push	{r7, lr}
 801cc4e:	b086      	sub	sp, #24
 801cc50:	af02      	add	r7, sp, #8
 801cc52:	60f8      	str	r0, [r7, #12]
 801cc54:	4608      	mov	r0, r1
 801cc56:	4611      	mov	r1, r2
 801cc58:	461a      	mov	r2, r3
 801cc5a:	4603      	mov	r3, r0
 801cc5c:	817b      	strh	r3, [r7, #10]
 801cc5e:	460b      	mov	r3, r1
 801cc60:	813b      	strh	r3, [r7, #8]
 801cc62:	4613      	mov	r3, r2
 801cc64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801cc66:	88fb      	ldrh	r3, [r7, #6]
 801cc68:	b2da      	uxtb	r2, r3
 801cc6a:	8979      	ldrh	r1, [r7, #10]
 801cc6c:	4b20      	ldr	r3, [pc, #128]	; (801ccf0 <I2C_RequestMemoryRead+0xa4>)
 801cc6e:	9300      	str	r3, [sp, #0]
 801cc70:	2300      	movs	r3, #0
 801cc72:	68f8      	ldr	r0, [r7, #12]
 801cc74:	f000 f9fe 	bl	801d074 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801cc78:	69fa      	ldr	r2, [r7, #28]
 801cc7a:	69b9      	ldr	r1, [r7, #24]
 801cc7c:	68f8      	ldr	r0, [r7, #12]
 801cc7e:	f000 f89d 	bl	801cdbc <I2C_WaitOnTXISFlagUntilTimeout>
 801cc82:	4603      	mov	r3, r0
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d001      	beq.n	801cc8c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 801cc88:	2301      	movs	r3, #1
 801cc8a:	e02c      	b.n	801cce6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801cc8c:	88fb      	ldrh	r3, [r7, #6]
 801cc8e:	2b01      	cmp	r3, #1
 801cc90:	d105      	bne.n	801cc9e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801cc92:	893b      	ldrh	r3, [r7, #8]
 801cc94:	b2da      	uxtb	r2, r3
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	629a      	str	r2, [r3, #40]	; 0x28
 801cc9c:	e015      	b.n	801ccca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801cc9e:	893b      	ldrh	r3, [r7, #8]
 801cca0:	0a1b      	lsrs	r3, r3, #8
 801cca2:	b29b      	uxth	r3, r3
 801cca4:	b2da      	uxtb	r2, r3
 801cca6:	68fb      	ldr	r3, [r7, #12]
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801ccac:	69fa      	ldr	r2, [r7, #28]
 801ccae:	69b9      	ldr	r1, [r7, #24]
 801ccb0:	68f8      	ldr	r0, [r7, #12]
 801ccb2:	f000 f883 	bl	801cdbc <I2C_WaitOnTXISFlagUntilTimeout>
 801ccb6:	4603      	mov	r3, r0
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d001      	beq.n	801ccc0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801ccbc:	2301      	movs	r3, #1
 801ccbe:	e012      	b.n	801cce6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801ccc0:	893b      	ldrh	r3, [r7, #8]
 801ccc2:	b2da      	uxtb	r2, r3
 801ccc4:	68fb      	ldr	r3, [r7, #12]
 801ccc6:	681b      	ldr	r3, [r3, #0]
 801ccc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801ccca:	69fb      	ldr	r3, [r7, #28]
 801cccc:	9300      	str	r3, [sp, #0]
 801ccce:	69bb      	ldr	r3, [r7, #24]
 801ccd0:	2200      	movs	r2, #0
 801ccd2:	2140      	movs	r1, #64	; 0x40
 801ccd4:	68f8      	ldr	r0, [r7, #12]
 801ccd6:	f000 f831 	bl	801cd3c <I2C_WaitOnFlagUntilTimeout>
 801ccda:	4603      	mov	r3, r0
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d001      	beq.n	801cce4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 801cce0:	2301      	movs	r3, #1
 801cce2:	e000      	b.n	801cce6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 801cce4:	2300      	movs	r3, #0
}
 801cce6:	4618      	mov	r0, r3
 801cce8:	3710      	adds	r7, #16
 801ccea:	46bd      	mov	sp, r7
 801ccec:	bd80      	pop	{r7, pc}
 801ccee:	bf00      	nop
 801ccf0:	80002000 	.word	0x80002000

0801ccf4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801ccf4:	b480      	push	{r7}
 801ccf6:	b083      	sub	sp, #12
 801ccf8:	af00      	add	r7, sp, #0
 801ccfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	681b      	ldr	r3, [r3, #0]
 801cd00:	699b      	ldr	r3, [r3, #24]
 801cd02:	f003 0302 	and.w	r3, r3, #2
 801cd06:	2b02      	cmp	r3, #2
 801cd08:	d103      	bne.n	801cd12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	2200      	movs	r2, #0
 801cd10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	699b      	ldr	r3, [r3, #24]
 801cd18:	f003 0301 	and.w	r3, r3, #1
 801cd1c:	2b01      	cmp	r3, #1
 801cd1e:	d007      	beq.n	801cd30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	699a      	ldr	r2, [r3, #24]
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	f042 0201 	orr.w	r2, r2, #1
 801cd2e:	619a      	str	r2, [r3, #24]
  }
}
 801cd30:	bf00      	nop
 801cd32:	370c      	adds	r7, #12
 801cd34:	46bd      	mov	sp, r7
 801cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd3a:	4770      	bx	lr

0801cd3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801cd3c:	b580      	push	{r7, lr}
 801cd3e:	b084      	sub	sp, #16
 801cd40:	af00      	add	r7, sp, #0
 801cd42:	60f8      	str	r0, [r7, #12]
 801cd44:	60b9      	str	r1, [r7, #8]
 801cd46:	603b      	str	r3, [r7, #0]
 801cd48:	4613      	mov	r3, r2
 801cd4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801cd4c:	e022      	b.n	801cd94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801cd4e:	683b      	ldr	r3, [r7, #0]
 801cd50:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd54:	d01e      	beq.n	801cd94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801cd56:	f7fc ff3f 	bl	8019bd8 <HAL_GetTick>
 801cd5a:	4602      	mov	r2, r0
 801cd5c:	69bb      	ldr	r3, [r7, #24]
 801cd5e:	1ad3      	subs	r3, r2, r3
 801cd60:	683a      	ldr	r2, [r7, #0]
 801cd62:	429a      	cmp	r2, r3
 801cd64:	d302      	bcc.n	801cd6c <I2C_WaitOnFlagUntilTimeout+0x30>
 801cd66:	683b      	ldr	r3, [r7, #0]
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d113      	bne.n	801cd94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801cd6c:	68fb      	ldr	r3, [r7, #12]
 801cd6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cd70:	f043 0220 	orr.w	r2, r3, #32
 801cd74:	68fb      	ldr	r3, [r7, #12]
 801cd76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	2220      	movs	r2, #32
 801cd7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801cd80:	68fb      	ldr	r3, [r7, #12]
 801cd82:	2200      	movs	r2, #0
 801cd84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	2200      	movs	r2, #0
 801cd8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801cd90:	2301      	movs	r3, #1
 801cd92:	e00f      	b.n	801cdb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801cd94:	68fb      	ldr	r3, [r7, #12]
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	699a      	ldr	r2, [r3, #24]
 801cd9a:	68bb      	ldr	r3, [r7, #8]
 801cd9c:	4013      	ands	r3, r2
 801cd9e:	68ba      	ldr	r2, [r7, #8]
 801cda0:	429a      	cmp	r2, r3
 801cda2:	bf0c      	ite	eq
 801cda4:	2301      	moveq	r3, #1
 801cda6:	2300      	movne	r3, #0
 801cda8:	b2db      	uxtb	r3, r3
 801cdaa:	461a      	mov	r2, r3
 801cdac:	79fb      	ldrb	r3, [r7, #7]
 801cdae:	429a      	cmp	r2, r3
 801cdb0:	d0cd      	beq.n	801cd4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801cdb2:	2300      	movs	r3, #0
}
 801cdb4:	4618      	mov	r0, r3
 801cdb6:	3710      	adds	r7, #16
 801cdb8:	46bd      	mov	sp, r7
 801cdba:	bd80      	pop	{r7, pc}

0801cdbc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801cdbc:	b580      	push	{r7, lr}
 801cdbe:	b084      	sub	sp, #16
 801cdc0:	af00      	add	r7, sp, #0
 801cdc2:	60f8      	str	r0, [r7, #12]
 801cdc4:	60b9      	str	r1, [r7, #8]
 801cdc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801cdc8:	e02c      	b.n	801ce24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801cdca:	687a      	ldr	r2, [r7, #4]
 801cdcc:	68b9      	ldr	r1, [r7, #8]
 801cdce:	68f8      	ldr	r0, [r7, #12]
 801cdd0:	f000 f870 	bl	801ceb4 <I2C_IsErrorOccurred>
 801cdd4:	4603      	mov	r3, r0
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d001      	beq.n	801cdde <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801cdda:	2301      	movs	r3, #1
 801cddc:	e02a      	b.n	801ce34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801cdde:	68bb      	ldr	r3, [r7, #8]
 801cde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cde4:	d01e      	beq.n	801ce24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801cde6:	f7fc fef7 	bl	8019bd8 <HAL_GetTick>
 801cdea:	4602      	mov	r2, r0
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	1ad3      	subs	r3, r2, r3
 801cdf0:	68ba      	ldr	r2, [r7, #8]
 801cdf2:	429a      	cmp	r2, r3
 801cdf4:	d302      	bcc.n	801cdfc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801cdf6:	68bb      	ldr	r3, [r7, #8]
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d113      	bne.n	801ce24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801cdfc:	68fb      	ldr	r3, [r7, #12]
 801cdfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce00:	f043 0220 	orr.w	r2, r3, #32
 801ce04:	68fb      	ldr	r3, [r7, #12]
 801ce06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	2220      	movs	r2, #32
 801ce0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ce10:	68fb      	ldr	r3, [r7, #12]
 801ce12:	2200      	movs	r2, #0
 801ce14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ce18:	68fb      	ldr	r3, [r7, #12]
 801ce1a:	2200      	movs	r2, #0
 801ce1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801ce20:	2301      	movs	r3, #1
 801ce22:	e007      	b.n	801ce34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	699b      	ldr	r3, [r3, #24]
 801ce2a:	f003 0302 	and.w	r3, r3, #2
 801ce2e:	2b02      	cmp	r3, #2
 801ce30:	d1cb      	bne.n	801cdca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801ce32:	2300      	movs	r3, #0
}
 801ce34:	4618      	mov	r0, r3
 801ce36:	3710      	adds	r7, #16
 801ce38:	46bd      	mov	sp, r7
 801ce3a:	bd80      	pop	{r7, pc}

0801ce3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801ce3c:	b580      	push	{r7, lr}
 801ce3e:	b084      	sub	sp, #16
 801ce40:	af00      	add	r7, sp, #0
 801ce42:	60f8      	str	r0, [r7, #12]
 801ce44:	60b9      	str	r1, [r7, #8]
 801ce46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801ce48:	e028      	b.n	801ce9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801ce4a:	687a      	ldr	r2, [r7, #4]
 801ce4c:	68b9      	ldr	r1, [r7, #8]
 801ce4e:	68f8      	ldr	r0, [r7, #12]
 801ce50:	f000 f830 	bl	801ceb4 <I2C_IsErrorOccurred>
 801ce54:	4603      	mov	r3, r0
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d001      	beq.n	801ce5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801ce5a:	2301      	movs	r3, #1
 801ce5c:	e026      	b.n	801ceac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ce5e:	f7fc febb 	bl	8019bd8 <HAL_GetTick>
 801ce62:	4602      	mov	r2, r0
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	1ad3      	subs	r3, r2, r3
 801ce68:	68ba      	ldr	r2, [r7, #8]
 801ce6a:	429a      	cmp	r2, r3
 801ce6c:	d302      	bcc.n	801ce74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801ce6e:	68bb      	ldr	r3, [r7, #8]
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d113      	bne.n	801ce9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801ce74:	68fb      	ldr	r3, [r7, #12]
 801ce76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce78:	f043 0220 	orr.w	r2, r3, #32
 801ce7c:	68fb      	ldr	r3, [r7, #12]
 801ce7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	2220      	movs	r2, #32
 801ce84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	2200      	movs	r2, #0
 801ce8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801ce90:	68fb      	ldr	r3, [r7, #12]
 801ce92:	2200      	movs	r2, #0
 801ce94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801ce98:	2301      	movs	r3, #1
 801ce9a:	e007      	b.n	801ceac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801ce9c:	68fb      	ldr	r3, [r7, #12]
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	699b      	ldr	r3, [r3, #24]
 801cea2:	f003 0320 	and.w	r3, r3, #32
 801cea6:	2b20      	cmp	r3, #32
 801cea8:	d1cf      	bne.n	801ce4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801ceaa:	2300      	movs	r3, #0
}
 801ceac:	4618      	mov	r0, r3
 801ceae:	3710      	adds	r7, #16
 801ceb0:	46bd      	mov	sp, r7
 801ceb2:	bd80      	pop	{r7, pc}

0801ceb4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801ceb4:	b580      	push	{r7, lr}
 801ceb6:	b08a      	sub	sp, #40	; 0x28
 801ceb8:	af00      	add	r7, sp, #0
 801ceba:	60f8      	str	r0, [r7, #12]
 801cebc:	60b9      	str	r1, [r7, #8]
 801cebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801cec0:	2300      	movs	r3, #0
 801cec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	681b      	ldr	r3, [r3, #0]
 801ceca:	699b      	ldr	r3, [r3, #24]
 801cecc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801cece:	2300      	movs	r3, #0
 801ced0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801ced6:	69bb      	ldr	r3, [r7, #24]
 801ced8:	f003 0310 	and.w	r3, r3, #16
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d068      	beq.n	801cfb2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801cee0:	68fb      	ldr	r3, [r7, #12]
 801cee2:	681b      	ldr	r3, [r3, #0]
 801cee4:	2210      	movs	r2, #16
 801cee6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801cee8:	e049      	b.n	801cf7e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801ceea:	68bb      	ldr	r3, [r7, #8]
 801ceec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cef0:	d045      	beq.n	801cf7e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801cef2:	f7fc fe71 	bl	8019bd8 <HAL_GetTick>
 801cef6:	4602      	mov	r2, r0
 801cef8:	69fb      	ldr	r3, [r7, #28]
 801cefa:	1ad3      	subs	r3, r2, r3
 801cefc:	68ba      	ldr	r2, [r7, #8]
 801cefe:	429a      	cmp	r2, r3
 801cf00:	d302      	bcc.n	801cf08 <I2C_IsErrorOccurred+0x54>
 801cf02:	68bb      	ldr	r3, [r7, #8]
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	d13a      	bne.n	801cf7e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801cf08:	68fb      	ldr	r3, [r7, #12]
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	685b      	ldr	r3, [r3, #4]
 801cf0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801cf12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801cf14:	68fb      	ldr	r3, [r7, #12]
 801cf16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801cf1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	681b      	ldr	r3, [r3, #0]
 801cf20:	699b      	ldr	r3, [r3, #24]
 801cf22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801cf26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cf2a:	d121      	bne.n	801cf70 <I2C_IsErrorOccurred+0xbc>
 801cf2c:	697b      	ldr	r3, [r7, #20]
 801cf2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801cf32:	d01d      	beq.n	801cf70 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801cf34:	7cfb      	ldrb	r3, [r7, #19]
 801cf36:	2b20      	cmp	r3, #32
 801cf38:	d01a      	beq.n	801cf70 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801cf3a:	68fb      	ldr	r3, [r7, #12]
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	685a      	ldr	r2, [r3, #4]
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801cf48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801cf4a:	f7fc fe45 	bl	8019bd8 <HAL_GetTick>
 801cf4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801cf50:	e00e      	b.n	801cf70 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801cf52:	f7fc fe41 	bl	8019bd8 <HAL_GetTick>
 801cf56:	4602      	mov	r2, r0
 801cf58:	69fb      	ldr	r3, [r7, #28]
 801cf5a:	1ad3      	subs	r3, r2, r3
 801cf5c:	2b19      	cmp	r3, #25
 801cf5e:	d907      	bls.n	801cf70 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 801cf60:	6a3b      	ldr	r3, [r7, #32]
 801cf62:	f043 0320 	orr.w	r3, r3, #32
 801cf66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801cf68:	2301      	movs	r3, #1
 801cf6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801cf6e:	e006      	b.n	801cf7e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	699b      	ldr	r3, [r3, #24]
 801cf76:	f003 0320 	and.w	r3, r3, #32
 801cf7a:	2b20      	cmp	r3, #32
 801cf7c:	d1e9      	bne.n	801cf52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801cf7e:	68fb      	ldr	r3, [r7, #12]
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	699b      	ldr	r3, [r3, #24]
 801cf84:	f003 0320 	and.w	r3, r3, #32
 801cf88:	2b20      	cmp	r3, #32
 801cf8a:	d003      	beq.n	801cf94 <I2C_IsErrorOccurred+0xe0>
 801cf8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d0aa      	beq.n	801ceea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801cf94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	d103      	bne.n	801cfa4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801cf9c:	68fb      	ldr	r3, [r7, #12]
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	2220      	movs	r2, #32
 801cfa2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801cfa4:	6a3b      	ldr	r3, [r7, #32]
 801cfa6:	f043 0304 	orr.w	r3, r3, #4
 801cfaa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801cfac:	2301      	movs	r3, #1
 801cfae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801cfb2:	68fb      	ldr	r3, [r7, #12]
 801cfb4:	681b      	ldr	r3, [r3, #0]
 801cfb6:	699b      	ldr	r3, [r3, #24]
 801cfb8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801cfba:	69bb      	ldr	r3, [r7, #24]
 801cfbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d00b      	beq.n	801cfdc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801cfc4:	6a3b      	ldr	r3, [r7, #32]
 801cfc6:	f043 0301 	orr.w	r3, r3, #1
 801cfca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801cfd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801cfd6:	2301      	movs	r3, #1
 801cfd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801cfdc:	69bb      	ldr	r3, [r7, #24]
 801cfde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d00b      	beq.n	801cffe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801cfe6:	6a3b      	ldr	r3, [r7, #32]
 801cfe8:	f043 0308 	orr.w	r3, r3, #8
 801cfec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	681b      	ldr	r3, [r3, #0]
 801cff2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801cff6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801cff8:	2301      	movs	r3, #1
 801cffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801cffe:	69bb      	ldr	r3, [r7, #24]
 801d000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d004:	2b00      	cmp	r3, #0
 801d006:	d00b      	beq.n	801d020 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801d008:	6a3b      	ldr	r3, [r7, #32]
 801d00a:	f043 0302 	orr.w	r3, r3, #2
 801d00e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801d010:	68fb      	ldr	r3, [r7, #12]
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d018:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801d01a:	2301      	movs	r3, #1
 801d01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801d020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d024:	2b00      	cmp	r3, #0
 801d026:	d01c      	beq.n	801d062 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801d028:	68f8      	ldr	r0, [r7, #12]
 801d02a:	f7ff fe63 	bl	801ccf4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801d02e:	68fb      	ldr	r3, [r7, #12]
 801d030:	681b      	ldr	r3, [r3, #0]
 801d032:	6859      	ldr	r1, [r3, #4]
 801d034:	68fb      	ldr	r3, [r7, #12]
 801d036:	681a      	ldr	r2, [r3, #0]
 801d038:	4b0d      	ldr	r3, [pc, #52]	; (801d070 <I2C_IsErrorOccurred+0x1bc>)
 801d03a:	400b      	ands	r3, r1
 801d03c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801d03e:	68fb      	ldr	r3, [r7, #12]
 801d040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d042:	6a3b      	ldr	r3, [r7, #32]
 801d044:	431a      	orrs	r2, r3
 801d046:	68fb      	ldr	r3, [r7, #12]
 801d048:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801d04a:	68fb      	ldr	r3, [r7, #12]
 801d04c:	2220      	movs	r2, #32
 801d04e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801d052:	68fb      	ldr	r3, [r7, #12]
 801d054:	2200      	movs	r2, #0
 801d056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801d05a:	68fb      	ldr	r3, [r7, #12]
 801d05c:	2200      	movs	r2, #0
 801d05e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801d062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801d066:	4618      	mov	r0, r3
 801d068:	3728      	adds	r7, #40	; 0x28
 801d06a:	46bd      	mov	sp, r7
 801d06c:	bd80      	pop	{r7, pc}
 801d06e:	bf00      	nop
 801d070:	fe00e800 	.word	0xfe00e800

0801d074 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801d074:	b480      	push	{r7}
 801d076:	b087      	sub	sp, #28
 801d078:	af00      	add	r7, sp, #0
 801d07a:	60f8      	str	r0, [r7, #12]
 801d07c:	607b      	str	r3, [r7, #4]
 801d07e:	460b      	mov	r3, r1
 801d080:	817b      	strh	r3, [r7, #10]
 801d082:	4613      	mov	r3, r2
 801d084:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801d086:	897b      	ldrh	r3, [r7, #10]
 801d088:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801d08c:	7a7b      	ldrb	r3, [r7, #9]
 801d08e:	041b      	lsls	r3, r3, #16
 801d090:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801d094:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801d09a:	6a3b      	ldr	r3, [r7, #32]
 801d09c:	4313      	orrs	r3, r2
 801d09e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d0a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	681b      	ldr	r3, [r3, #0]
 801d0a8:	685a      	ldr	r2, [r3, #4]
 801d0aa:	6a3b      	ldr	r3, [r7, #32]
 801d0ac:	0d5b      	lsrs	r3, r3, #21
 801d0ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801d0b2:	4b08      	ldr	r3, [pc, #32]	; (801d0d4 <I2C_TransferConfig+0x60>)
 801d0b4:	430b      	orrs	r3, r1
 801d0b6:	43db      	mvns	r3, r3
 801d0b8:	ea02 0103 	and.w	r1, r2, r3
 801d0bc:	68fb      	ldr	r3, [r7, #12]
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	697a      	ldr	r2, [r7, #20]
 801d0c2:	430a      	orrs	r2, r1
 801d0c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801d0c6:	bf00      	nop
 801d0c8:	371c      	adds	r7, #28
 801d0ca:	46bd      	mov	sp, r7
 801d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0d0:	4770      	bx	lr
 801d0d2:	bf00      	nop
 801d0d4:	03ff63ff 	.word	0x03ff63ff

0801d0d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801d0d8:	b480      	push	{r7}
 801d0da:	b083      	sub	sp, #12
 801d0dc:	af00      	add	r7, sp, #0
 801d0de:	6078      	str	r0, [r7, #4]
 801d0e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d0e8:	b2db      	uxtb	r3, r3
 801d0ea:	2b20      	cmp	r3, #32
 801d0ec:	d138      	bne.n	801d160 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801d0f4:	2b01      	cmp	r3, #1
 801d0f6:	d101      	bne.n	801d0fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801d0f8:	2302      	movs	r3, #2
 801d0fa:	e032      	b.n	801d162 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	2201      	movs	r2, #1
 801d100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	2224      	movs	r2, #36	; 0x24
 801d108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	681b      	ldr	r3, [r3, #0]
 801d110:	681a      	ldr	r2, [r3, #0]
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	681b      	ldr	r3, [r3, #0]
 801d116:	f022 0201 	bic.w	r2, r2, #1
 801d11a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	681b      	ldr	r3, [r3, #0]
 801d120:	681a      	ldr	r2, [r3, #0]
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	681b      	ldr	r3, [r3, #0]
 801d126:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d12a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	6819      	ldr	r1, [r3, #0]
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	681b      	ldr	r3, [r3, #0]
 801d136:	683a      	ldr	r2, [r7, #0]
 801d138:	430a      	orrs	r2, r1
 801d13a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801d13c:	687b      	ldr	r3, [r7, #4]
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	681a      	ldr	r2, [r3, #0]
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	f042 0201 	orr.w	r2, r2, #1
 801d14a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	2220      	movs	r2, #32
 801d150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	2200      	movs	r2, #0
 801d158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801d15c:	2300      	movs	r3, #0
 801d15e:	e000      	b.n	801d162 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801d160:	2302      	movs	r3, #2
  }
}
 801d162:	4618      	mov	r0, r3
 801d164:	370c      	adds	r7, #12
 801d166:	46bd      	mov	sp, r7
 801d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d16c:	4770      	bx	lr

0801d16e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801d16e:	b480      	push	{r7}
 801d170:	b085      	sub	sp, #20
 801d172:	af00      	add	r7, sp, #0
 801d174:	6078      	str	r0, [r7, #4]
 801d176:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801d17e:	b2db      	uxtb	r3, r3
 801d180:	2b20      	cmp	r3, #32
 801d182:	d139      	bne.n	801d1f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801d18a:	2b01      	cmp	r3, #1
 801d18c:	d101      	bne.n	801d192 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801d18e:	2302      	movs	r3, #2
 801d190:	e033      	b.n	801d1fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801d192:	687b      	ldr	r3, [r7, #4]
 801d194:	2201      	movs	r2, #1
 801d196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	2224      	movs	r2, #36	; 0x24
 801d19e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801d1a2:	687b      	ldr	r3, [r7, #4]
 801d1a4:	681b      	ldr	r3, [r3, #0]
 801d1a6:	681a      	ldr	r2, [r3, #0]
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	681b      	ldr	r3, [r3, #0]
 801d1ac:	f022 0201 	bic.w	r2, r2, #1
 801d1b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	681b      	ldr	r3, [r3, #0]
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801d1ba:	68fb      	ldr	r3, [r7, #12]
 801d1bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801d1c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801d1c2:	683b      	ldr	r3, [r7, #0]
 801d1c4:	021b      	lsls	r3, r3, #8
 801d1c6:	68fa      	ldr	r2, [r7, #12]
 801d1c8:	4313      	orrs	r3, r2
 801d1ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	68fa      	ldr	r2, [r7, #12]
 801d1d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	681b      	ldr	r3, [r3, #0]
 801d1d8:	681a      	ldr	r2, [r3, #0]
 801d1da:	687b      	ldr	r3, [r7, #4]
 801d1dc:	681b      	ldr	r3, [r3, #0]
 801d1de:	f042 0201 	orr.w	r2, r2, #1
 801d1e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	2220      	movs	r2, #32
 801d1e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	2200      	movs	r2, #0
 801d1f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801d1f4:	2300      	movs	r3, #0
 801d1f6:	e000      	b.n	801d1fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801d1f8:	2302      	movs	r3, #2
  }
}
 801d1fa:	4618      	mov	r0, r3
 801d1fc:	3714      	adds	r7, #20
 801d1fe:	46bd      	mov	sp, r7
 801d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d204:	4770      	bx	lr

0801d206 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 801d206:	b580      	push	{r7, lr}
 801d208:	b084      	sub	sp, #16
 801d20a:	af00      	add	r7, sp, #0
 801d20c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	2b00      	cmp	r3, #0
 801d212:	d101      	bne.n	801d218 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 801d214:	2301      	movs	r3, #1
 801d216:	e041      	b.n	801d29c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 801d220:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	681b      	ldr	r3, [r3, #0]
 801d226:	f245 5255 	movw	r2, #21845	; 0x5555
 801d22a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	687a      	ldr	r2, [r7, #4]
 801d232:	6852      	ldr	r2, [r2, #4]
 801d234:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	687a      	ldr	r2, [r7, #4]
 801d23c:	6892      	ldr	r2, [r2, #8]
 801d23e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 801d240:	f7fc fcca 	bl	8019bd8 <HAL_GetTick>
 801d244:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801d246:	e00f      	b.n	801d268 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801d248:	f7fc fcc6 	bl	8019bd8 <HAL_GetTick>
 801d24c:	4602      	mov	r2, r0
 801d24e:	68fb      	ldr	r3, [r7, #12]
 801d250:	1ad3      	subs	r3, r2, r3
 801d252:	2b31      	cmp	r3, #49	; 0x31
 801d254:	d908      	bls.n	801d268 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	68db      	ldr	r3, [r3, #12]
 801d25c:	f003 0307 	and.w	r3, r3, #7
 801d260:	2b00      	cmp	r3, #0
 801d262:	d001      	beq.n	801d268 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 801d264:	2303      	movs	r3, #3
 801d266:	e019      	b.n	801d29c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	68db      	ldr	r3, [r3, #12]
 801d26e:	f003 0307 	and.w	r3, r3, #7
 801d272:	2b00      	cmp	r3, #0
 801d274:	d1e8      	bne.n	801d248 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 801d276:	687b      	ldr	r3, [r7, #4]
 801d278:	681b      	ldr	r3, [r3, #0]
 801d27a:	691a      	ldr	r2, [r3, #16]
 801d27c:	687b      	ldr	r3, [r7, #4]
 801d27e:	68db      	ldr	r3, [r3, #12]
 801d280:	429a      	cmp	r2, r3
 801d282:	d005      	beq.n	801d290 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	681b      	ldr	r3, [r3, #0]
 801d288:	687a      	ldr	r2, [r7, #4]
 801d28a:	68d2      	ldr	r2, [r2, #12]
 801d28c:	611a      	str	r2, [r3, #16]
 801d28e:	e004      	b.n	801d29a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801d298:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801d29a:	2300      	movs	r3, #0
}
 801d29c:	4618      	mov	r0, r3
 801d29e:	3710      	adds	r7, #16
 801d2a0:	46bd      	mov	sp, r7
 801d2a2:	bd80      	pop	{r7, pc}

0801d2a4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801d2a4:	b480      	push	{r7}
 801d2a6:	b083      	sub	sp, #12
 801d2a8:	af00      	add	r7, sp, #0
 801d2aa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	681b      	ldr	r3, [r3, #0]
 801d2b0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801d2b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801d2b6:	2300      	movs	r3, #0
}
 801d2b8:	4618      	mov	r0, r3
 801d2ba:	370c      	adds	r7, #12
 801d2bc:	46bd      	mov	sp, r7
 801d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2c2:	4770      	bx	lr

0801d2c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801d2c4:	b580      	push	{r7, lr}
 801d2c6:	b086      	sub	sp, #24
 801d2c8:	af00      	add	r7, sp, #0
 801d2ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d101      	bne.n	801d2da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 801d2d6:	2301      	movs	r3, #1
 801d2d8:	e29b      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	f003 0301 	and.w	r3, r3, #1
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	f000 8087 	beq.w	801d3f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801d2e8:	4b96      	ldr	r3, [pc, #600]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d2ea:	689b      	ldr	r3, [r3, #8]
 801d2ec:	f003 030c 	and.w	r3, r3, #12
 801d2f0:	2b04      	cmp	r3, #4
 801d2f2:	d00c      	beq.n	801d30e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801d2f4:	4b93      	ldr	r3, [pc, #588]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d2f6:	689b      	ldr	r3, [r3, #8]
 801d2f8:	f003 030c 	and.w	r3, r3, #12
 801d2fc:	2b08      	cmp	r3, #8
 801d2fe:	d112      	bne.n	801d326 <HAL_RCC_OscConfig+0x62>
 801d300:	4b90      	ldr	r3, [pc, #576]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d302:	685b      	ldr	r3, [r3, #4]
 801d304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d30c:	d10b      	bne.n	801d326 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801d30e:	4b8d      	ldr	r3, [pc, #564]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d310:	681b      	ldr	r3, [r3, #0]
 801d312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d316:	2b00      	cmp	r3, #0
 801d318:	d06c      	beq.n	801d3f4 <HAL_RCC_OscConfig+0x130>
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	685b      	ldr	r3, [r3, #4]
 801d31e:	2b00      	cmp	r3, #0
 801d320:	d168      	bne.n	801d3f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801d322:	2301      	movs	r3, #1
 801d324:	e275      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801d326:	687b      	ldr	r3, [r7, #4]
 801d328:	685b      	ldr	r3, [r3, #4]
 801d32a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d32e:	d106      	bne.n	801d33e <HAL_RCC_OscConfig+0x7a>
 801d330:	4b84      	ldr	r3, [pc, #528]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	4a83      	ldr	r2, [pc, #524]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d33a:	6013      	str	r3, [r2, #0]
 801d33c:	e02e      	b.n	801d39c <HAL_RCC_OscConfig+0xd8>
 801d33e:	687b      	ldr	r3, [r7, #4]
 801d340:	685b      	ldr	r3, [r3, #4]
 801d342:	2b00      	cmp	r3, #0
 801d344:	d10c      	bne.n	801d360 <HAL_RCC_OscConfig+0x9c>
 801d346:	4b7f      	ldr	r3, [pc, #508]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d348:	681b      	ldr	r3, [r3, #0]
 801d34a:	4a7e      	ldr	r2, [pc, #504]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d34c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d350:	6013      	str	r3, [r2, #0]
 801d352:	4b7c      	ldr	r3, [pc, #496]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	4a7b      	ldr	r2, [pc, #492]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d358:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801d35c:	6013      	str	r3, [r2, #0]
 801d35e:	e01d      	b.n	801d39c <HAL_RCC_OscConfig+0xd8>
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	685b      	ldr	r3, [r3, #4]
 801d364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801d368:	d10c      	bne.n	801d384 <HAL_RCC_OscConfig+0xc0>
 801d36a:	4b76      	ldr	r3, [pc, #472]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	4a75      	ldr	r2, [pc, #468]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801d374:	6013      	str	r3, [r2, #0]
 801d376:	4b73      	ldr	r3, [pc, #460]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	4a72      	ldr	r2, [pc, #456]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d37c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d380:	6013      	str	r3, [r2, #0]
 801d382:	e00b      	b.n	801d39c <HAL_RCC_OscConfig+0xd8>
 801d384:	4b6f      	ldr	r3, [pc, #444]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	4a6e      	ldr	r2, [pc, #440]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d38a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d38e:	6013      	str	r3, [r2, #0]
 801d390:	4b6c      	ldr	r3, [pc, #432]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	4a6b      	ldr	r2, [pc, #428]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801d39a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	685b      	ldr	r3, [r3, #4]
 801d3a0:	2b00      	cmp	r3, #0
 801d3a2:	d013      	beq.n	801d3cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d3a4:	f7fc fc18 	bl	8019bd8 <HAL_GetTick>
 801d3a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d3aa:	e008      	b.n	801d3be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d3ac:	f7fc fc14 	bl	8019bd8 <HAL_GetTick>
 801d3b0:	4602      	mov	r2, r0
 801d3b2:	693b      	ldr	r3, [r7, #16]
 801d3b4:	1ad3      	subs	r3, r2, r3
 801d3b6:	2b64      	cmp	r3, #100	; 0x64
 801d3b8:	d901      	bls.n	801d3be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801d3ba:	2303      	movs	r3, #3
 801d3bc:	e229      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d3be:	4b61      	ldr	r3, [pc, #388]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d3c0:	681b      	ldr	r3, [r3, #0]
 801d3c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d0f0      	beq.n	801d3ac <HAL_RCC_OscConfig+0xe8>
 801d3ca:	e014      	b.n	801d3f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d3cc:	f7fc fc04 	bl	8019bd8 <HAL_GetTick>
 801d3d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801d3d2:	e008      	b.n	801d3e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d3d4:	f7fc fc00 	bl	8019bd8 <HAL_GetTick>
 801d3d8:	4602      	mov	r2, r0
 801d3da:	693b      	ldr	r3, [r7, #16]
 801d3dc:	1ad3      	subs	r3, r2, r3
 801d3de:	2b64      	cmp	r3, #100	; 0x64
 801d3e0:	d901      	bls.n	801d3e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801d3e2:	2303      	movs	r3, #3
 801d3e4:	e215      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801d3e6:	4b57      	ldr	r3, [pc, #348]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	d1f0      	bne.n	801d3d4 <HAL_RCC_OscConfig+0x110>
 801d3f2:	e000      	b.n	801d3f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801d3f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	f003 0302 	and.w	r3, r3, #2
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	d069      	beq.n	801d4d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801d402:	4b50      	ldr	r3, [pc, #320]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d404:	689b      	ldr	r3, [r3, #8]
 801d406:	f003 030c 	and.w	r3, r3, #12
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	d00b      	beq.n	801d426 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801d40e:	4b4d      	ldr	r3, [pc, #308]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d410:	689b      	ldr	r3, [r3, #8]
 801d412:	f003 030c 	and.w	r3, r3, #12
 801d416:	2b08      	cmp	r3, #8
 801d418:	d11c      	bne.n	801d454 <HAL_RCC_OscConfig+0x190>
 801d41a:	4b4a      	ldr	r3, [pc, #296]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d41c:	685b      	ldr	r3, [r3, #4]
 801d41e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d422:	2b00      	cmp	r3, #0
 801d424:	d116      	bne.n	801d454 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801d426:	4b47      	ldr	r3, [pc, #284]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d428:	681b      	ldr	r3, [r3, #0]
 801d42a:	f003 0302 	and.w	r3, r3, #2
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d005      	beq.n	801d43e <HAL_RCC_OscConfig+0x17a>
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	68db      	ldr	r3, [r3, #12]
 801d436:	2b01      	cmp	r3, #1
 801d438:	d001      	beq.n	801d43e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801d43a:	2301      	movs	r3, #1
 801d43c:	e1e9      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d43e:	4b41      	ldr	r3, [pc, #260]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d440:	681b      	ldr	r3, [r3, #0]
 801d442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	691b      	ldr	r3, [r3, #16]
 801d44a:	00db      	lsls	r3, r3, #3
 801d44c:	493d      	ldr	r1, [pc, #244]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d44e:	4313      	orrs	r3, r2
 801d450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801d452:	e040      	b.n	801d4d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	68db      	ldr	r3, [r3, #12]
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d023      	beq.n	801d4a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801d45c:	4b39      	ldr	r3, [pc, #228]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d45e:	681b      	ldr	r3, [r3, #0]
 801d460:	4a38      	ldr	r2, [pc, #224]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d462:	f043 0301 	orr.w	r3, r3, #1
 801d466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d468:	f7fc fbb6 	bl	8019bd8 <HAL_GetTick>
 801d46c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801d46e:	e008      	b.n	801d482 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d470:	f7fc fbb2 	bl	8019bd8 <HAL_GetTick>
 801d474:	4602      	mov	r2, r0
 801d476:	693b      	ldr	r3, [r7, #16]
 801d478:	1ad3      	subs	r3, r2, r3
 801d47a:	2b02      	cmp	r3, #2
 801d47c:	d901      	bls.n	801d482 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 801d47e:	2303      	movs	r3, #3
 801d480:	e1c7      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801d482:	4b30      	ldr	r3, [pc, #192]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d484:	681b      	ldr	r3, [r3, #0]
 801d486:	f003 0302 	and.w	r3, r3, #2
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d0f0      	beq.n	801d470 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d48e:	4b2d      	ldr	r3, [pc, #180]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d490:	681b      	ldr	r3, [r3, #0]
 801d492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	691b      	ldr	r3, [r3, #16]
 801d49a:	00db      	lsls	r3, r3, #3
 801d49c:	4929      	ldr	r1, [pc, #164]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d49e:	4313      	orrs	r3, r2
 801d4a0:	600b      	str	r3, [r1, #0]
 801d4a2:	e018      	b.n	801d4d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801d4a4:	4b27      	ldr	r3, [pc, #156]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	4a26      	ldr	r2, [pc, #152]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d4aa:	f023 0301 	bic.w	r3, r3, #1
 801d4ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d4b0:	f7fc fb92 	bl	8019bd8 <HAL_GetTick>
 801d4b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801d4b6:	e008      	b.n	801d4ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d4b8:	f7fc fb8e 	bl	8019bd8 <HAL_GetTick>
 801d4bc:	4602      	mov	r2, r0
 801d4be:	693b      	ldr	r3, [r7, #16]
 801d4c0:	1ad3      	subs	r3, r2, r3
 801d4c2:	2b02      	cmp	r3, #2
 801d4c4:	d901      	bls.n	801d4ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801d4c6:	2303      	movs	r3, #3
 801d4c8:	e1a3      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801d4ca:	4b1e      	ldr	r3, [pc, #120]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d4cc:	681b      	ldr	r3, [r3, #0]
 801d4ce:	f003 0302 	and.w	r3, r3, #2
 801d4d2:	2b00      	cmp	r3, #0
 801d4d4:	d1f0      	bne.n	801d4b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	681b      	ldr	r3, [r3, #0]
 801d4da:	f003 0308 	and.w	r3, r3, #8
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d038      	beq.n	801d554 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801d4e2:	687b      	ldr	r3, [r7, #4]
 801d4e4:	695b      	ldr	r3, [r3, #20]
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d019      	beq.n	801d51e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801d4ea:	4b16      	ldr	r3, [pc, #88]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d4ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d4ee:	4a15      	ldr	r2, [pc, #84]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d4f0:	f043 0301 	orr.w	r3, r3, #1
 801d4f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d4f6:	f7fc fb6f 	bl	8019bd8 <HAL_GetTick>
 801d4fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801d4fc:	e008      	b.n	801d510 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d4fe:	f7fc fb6b 	bl	8019bd8 <HAL_GetTick>
 801d502:	4602      	mov	r2, r0
 801d504:	693b      	ldr	r3, [r7, #16]
 801d506:	1ad3      	subs	r3, r2, r3
 801d508:	2b02      	cmp	r3, #2
 801d50a:	d901      	bls.n	801d510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801d50c:	2303      	movs	r3, #3
 801d50e:	e180      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801d510:	4b0c      	ldr	r3, [pc, #48]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d514:	f003 0302 	and.w	r3, r3, #2
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d0f0      	beq.n	801d4fe <HAL_RCC_OscConfig+0x23a>
 801d51c:	e01a      	b.n	801d554 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801d51e:	4b09      	ldr	r3, [pc, #36]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d522:	4a08      	ldr	r2, [pc, #32]	; (801d544 <HAL_RCC_OscConfig+0x280>)
 801d524:	f023 0301 	bic.w	r3, r3, #1
 801d528:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d52a:	f7fc fb55 	bl	8019bd8 <HAL_GetTick>
 801d52e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801d530:	e00a      	b.n	801d548 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d532:	f7fc fb51 	bl	8019bd8 <HAL_GetTick>
 801d536:	4602      	mov	r2, r0
 801d538:	693b      	ldr	r3, [r7, #16]
 801d53a:	1ad3      	subs	r3, r2, r3
 801d53c:	2b02      	cmp	r3, #2
 801d53e:	d903      	bls.n	801d548 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801d540:	2303      	movs	r3, #3
 801d542:	e166      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
 801d544:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801d548:	4b92      	ldr	r3, [pc, #584]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d54a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d54c:	f003 0302 	and.w	r3, r3, #2
 801d550:	2b00      	cmp	r3, #0
 801d552:	d1ee      	bne.n	801d532 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	f003 0304 	and.w	r3, r3, #4
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	f000 80a4 	beq.w	801d6aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801d562:	4b8c      	ldr	r3, [pc, #560]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d10d      	bne.n	801d58a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801d56e:	4b89      	ldr	r3, [pc, #548]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d572:	4a88      	ldr	r2, [pc, #544]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d578:	6413      	str	r3, [r2, #64]	; 0x40
 801d57a:	4b86      	ldr	r3, [pc, #536]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d57e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d582:	60bb      	str	r3, [r7, #8]
 801d584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801d586:	2301      	movs	r3, #1
 801d588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801d58a:	4b83      	ldr	r3, [pc, #524]	; (801d798 <HAL_RCC_OscConfig+0x4d4>)
 801d58c:	681b      	ldr	r3, [r3, #0]
 801d58e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d592:	2b00      	cmp	r3, #0
 801d594:	d118      	bne.n	801d5c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 801d596:	4b80      	ldr	r3, [pc, #512]	; (801d798 <HAL_RCC_OscConfig+0x4d4>)
 801d598:	681b      	ldr	r3, [r3, #0]
 801d59a:	4a7f      	ldr	r2, [pc, #508]	; (801d798 <HAL_RCC_OscConfig+0x4d4>)
 801d59c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d5a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801d5a2:	f7fc fb19 	bl	8019bd8 <HAL_GetTick>
 801d5a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801d5a8:	e008      	b.n	801d5bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d5aa:	f7fc fb15 	bl	8019bd8 <HAL_GetTick>
 801d5ae:	4602      	mov	r2, r0
 801d5b0:	693b      	ldr	r3, [r7, #16]
 801d5b2:	1ad3      	subs	r3, r2, r3
 801d5b4:	2b64      	cmp	r3, #100	; 0x64
 801d5b6:	d901      	bls.n	801d5bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 801d5b8:	2303      	movs	r3, #3
 801d5ba:	e12a      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801d5bc:	4b76      	ldr	r3, [pc, #472]	; (801d798 <HAL_RCC_OscConfig+0x4d4>)
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d0f0      	beq.n	801d5aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d5c8:	687b      	ldr	r3, [r7, #4]
 801d5ca:	689b      	ldr	r3, [r3, #8]
 801d5cc:	2b01      	cmp	r3, #1
 801d5ce:	d106      	bne.n	801d5de <HAL_RCC_OscConfig+0x31a>
 801d5d0:	4b70      	ldr	r3, [pc, #448]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d5d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d5d4:	4a6f      	ldr	r2, [pc, #444]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d5d6:	f043 0301 	orr.w	r3, r3, #1
 801d5da:	6713      	str	r3, [r2, #112]	; 0x70
 801d5dc:	e02d      	b.n	801d63a <HAL_RCC_OscConfig+0x376>
 801d5de:	687b      	ldr	r3, [r7, #4]
 801d5e0:	689b      	ldr	r3, [r3, #8]
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d10c      	bne.n	801d600 <HAL_RCC_OscConfig+0x33c>
 801d5e6:	4b6b      	ldr	r3, [pc, #428]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d5ea:	4a6a      	ldr	r2, [pc, #424]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d5ec:	f023 0301 	bic.w	r3, r3, #1
 801d5f0:	6713      	str	r3, [r2, #112]	; 0x70
 801d5f2:	4b68      	ldr	r3, [pc, #416]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d5f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d5f6:	4a67      	ldr	r2, [pc, #412]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d5f8:	f023 0304 	bic.w	r3, r3, #4
 801d5fc:	6713      	str	r3, [r2, #112]	; 0x70
 801d5fe:	e01c      	b.n	801d63a <HAL_RCC_OscConfig+0x376>
 801d600:	687b      	ldr	r3, [r7, #4]
 801d602:	689b      	ldr	r3, [r3, #8]
 801d604:	2b05      	cmp	r3, #5
 801d606:	d10c      	bne.n	801d622 <HAL_RCC_OscConfig+0x35e>
 801d608:	4b62      	ldr	r3, [pc, #392]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d60a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d60c:	4a61      	ldr	r2, [pc, #388]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d60e:	f043 0304 	orr.w	r3, r3, #4
 801d612:	6713      	str	r3, [r2, #112]	; 0x70
 801d614:	4b5f      	ldr	r3, [pc, #380]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d618:	4a5e      	ldr	r2, [pc, #376]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d61a:	f043 0301 	orr.w	r3, r3, #1
 801d61e:	6713      	str	r3, [r2, #112]	; 0x70
 801d620:	e00b      	b.n	801d63a <HAL_RCC_OscConfig+0x376>
 801d622:	4b5c      	ldr	r3, [pc, #368]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d626:	4a5b      	ldr	r2, [pc, #364]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d628:	f023 0301 	bic.w	r3, r3, #1
 801d62c:	6713      	str	r3, [r2, #112]	; 0x70
 801d62e:	4b59      	ldr	r3, [pc, #356]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d632:	4a58      	ldr	r2, [pc, #352]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d634:	f023 0304 	bic.w	r3, r3, #4
 801d638:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	689b      	ldr	r3, [r3, #8]
 801d63e:	2b00      	cmp	r3, #0
 801d640:	d015      	beq.n	801d66e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d642:	f7fc fac9 	bl	8019bd8 <HAL_GetTick>
 801d646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d648:	e00a      	b.n	801d660 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d64a:	f7fc fac5 	bl	8019bd8 <HAL_GetTick>
 801d64e:	4602      	mov	r2, r0
 801d650:	693b      	ldr	r3, [r7, #16]
 801d652:	1ad3      	subs	r3, r2, r3
 801d654:	f241 3288 	movw	r2, #5000	; 0x1388
 801d658:	4293      	cmp	r3, r2
 801d65a:	d901      	bls.n	801d660 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 801d65c:	2303      	movs	r3, #3
 801d65e:	e0d8      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d660:	4b4c      	ldr	r3, [pc, #304]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d664:	f003 0302 	and.w	r3, r3, #2
 801d668:	2b00      	cmp	r3, #0
 801d66a:	d0ee      	beq.n	801d64a <HAL_RCC_OscConfig+0x386>
 801d66c:	e014      	b.n	801d698 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d66e:	f7fc fab3 	bl	8019bd8 <HAL_GetTick>
 801d672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801d674:	e00a      	b.n	801d68c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d676:	f7fc faaf 	bl	8019bd8 <HAL_GetTick>
 801d67a:	4602      	mov	r2, r0
 801d67c:	693b      	ldr	r3, [r7, #16]
 801d67e:	1ad3      	subs	r3, r2, r3
 801d680:	f241 3288 	movw	r2, #5000	; 0x1388
 801d684:	4293      	cmp	r3, r2
 801d686:	d901      	bls.n	801d68c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 801d688:	2303      	movs	r3, #3
 801d68a:	e0c2      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801d68c:	4b41      	ldr	r3, [pc, #260]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d68e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d690:	f003 0302 	and.w	r3, r3, #2
 801d694:	2b00      	cmp	r3, #0
 801d696:	d1ee      	bne.n	801d676 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801d698:	7dfb      	ldrb	r3, [r7, #23]
 801d69a:	2b01      	cmp	r3, #1
 801d69c:	d105      	bne.n	801d6aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801d69e:	4b3d      	ldr	r3, [pc, #244]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6a2:	4a3c      	ldr	r2, [pc, #240]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d6a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d6a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	699b      	ldr	r3, [r3, #24]
 801d6ae:	2b00      	cmp	r3, #0
 801d6b0:	f000 80ae 	beq.w	801d810 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801d6b4:	4b37      	ldr	r3, [pc, #220]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d6b6:	689b      	ldr	r3, [r3, #8]
 801d6b8:	f003 030c 	and.w	r3, r3, #12
 801d6bc:	2b08      	cmp	r3, #8
 801d6be:	d06d      	beq.n	801d79c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801d6c0:	687b      	ldr	r3, [r7, #4]
 801d6c2:	699b      	ldr	r3, [r3, #24]
 801d6c4:	2b02      	cmp	r3, #2
 801d6c6:	d14b      	bne.n	801d760 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d6c8:	4b32      	ldr	r3, [pc, #200]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d6ca:	681b      	ldr	r3, [r3, #0]
 801d6cc:	4a31      	ldr	r2, [pc, #196]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d6ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d6d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d6d4:	f7fc fa80 	bl	8019bd8 <HAL_GetTick>
 801d6d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801d6da:	e008      	b.n	801d6ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d6dc:	f7fc fa7c 	bl	8019bd8 <HAL_GetTick>
 801d6e0:	4602      	mov	r2, r0
 801d6e2:	693b      	ldr	r3, [r7, #16]
 801d6e4:	1ad3      	subs	r3, r2, r3
 801d6e6:	2b02      	cmp	r3, #2
 801d6e8:	d901      	bls.n	801d6ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 801d6ea:	2303      	movs	r3, #3
 801d6ec:	e091      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801d6ee:	4b29      	ldr	r3, [pc, #164]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	d1f0      	bne.n	801d6dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	69da      	ldr	r2, [r3, #28]
 801d6fe:	687b      	ldr	r3, [r7, #4]
 801d700:	6a1b      	ldr	r3, [r3, #32]
 801d702:	431a      	orrs	r2, r3
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d708:	019b      	lsls	r3, r3, #6
 801d70a:	431a      	orrs	r2, r3
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d710:	085b      	lsrs	r3, r3, #1
 801d712:	3b01      	subs	r3, #1
 801d714:	041b      	lsls	r3, r3, #16
 801d716:	431a      	orrs	r2, r3
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d71c:	061b      	lsls	r3, r3, #24
 801d71e:	431a      	orrs	r2, r3
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d724:	071b      	lsls	r3, r3, #28
 801d726:	491b      	ldr	r1, [pc, #108]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d728:	4313      	orrs	r3, r2
 801d72a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801d72c:	4b19      	ldr	r3, [pc, #100]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d72e:	681b      	ldr	r3, [r3, #0]
 801d730:	4a18      	ldr	r2, [pc, #96]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d738:	f7fc fa4e 	bl	8019bd8 <HAL_GetTick>
 801d73c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801d73e:	e008      	b.n	801d752 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d740:	f7fc fa4a 	bl	8019bd8 <HAL_GetTick>
 801d744:	4602      	mov	r2, r0
 801d746:	693b      	ldr	r3, [r7, #16]
 801d748:	1ad3      	subs	r3, r2, r3
 801d74a:	2b02      	cmp	r3, #2
 801d74c:	d901      	bls.n	801d752 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 801d74e:	2303      	movs	r3, #3
 801d750:	e05f      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801d752:	4b10      	ldr	r3, [pc, #64]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d0f0      	beq.n	801d740 <HAL_RCC_OscConfig+0x47c>
 801d75e:	e057      	b.n	801d810 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d760:	4b0c      	ldr	r3, [pc, #48]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d762:	681b      	ldr	r3, [r3, #0]
 801d764:	4a0b      	ldr	r2, [pc, #44]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d76a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d76c:	f7fc fa34 	bl	8019bd8 <HAL_GetTick>
 801d770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801d772:	e008      	b.n	801d786 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d774:	f7fc fa30 	bl	8019bd8 <HAL_GetTick>
 801d778:	4602      	mov	r2, r0
 801d77a:	693b      	ldr	r3, [r7, #16]
 801d77c:	1ad3      	subs	r3, r2, r3
 801d77e:	2b02      	cmp	r3, #2
 801d780:	d901      	bls.n	801d786 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 801d782:	2303      	movs	r3, #3
 801d784:	e045      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801d786:	4b03      	ldr	r3, [pc, #12]	; (801d794 <HAL_RCC_OscConfig+0x4d0>)
 801d788:	681b      	ldr	r3, [r3, #0]
 801d78a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d78e:	2b00      	cmp	r3, #0
 801d790:	d1f0      	bne.n	801d774 <HAL_RCC_OscConfig+0x4b0>
 801d792:	e03d      	b.n	801d810 <HAL_RCC_OscConfig+0x54c>
 801d794:	40023800 	.word	0x40023800
 801d798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 801d79c:	4b1f      	ldr	r3, [pc, #124]	; (801d81c <HAL_RCC_OscConfig+0x558>)
 801d79e:	685b      	ldr	r3, [r3, #4]
 801d7a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	699b      	ldr	r3, [r3, #24]
 801d7a6:	2b01      	cmp	r3, #1
 801d7a8:	d030      	beq.n	801d80c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d7aa:	68fb      	ldr	r3, [r7, #12]
 801d7ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d7b4:	429a      	cmp	r2, r3
 801d7b6:	d129      	bne.n	801d80c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801d7b8:	68fb      	ldr	r3, [r7, #12]
 801d7ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d7c2:	429a      	cmp	r2, r3
 801d7c4:	d122      	bne.n	801d80c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801d7c6:	68fa      	ldr	r2, [r7, #12]
 801d7c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801d7cc:	4013      	ands	r3, r2
 801d7ce:	687a      	ldr	r2, [r7, #4]
 801d7d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801d7d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801d7d4:	4293      	cmp	r3, r2
 801d7d6:	d119      	bne.n	801d80c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801d7d8:	68fb      	ldr	r3, [r7, #12]
 801d7da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d7e2:	085b      	lsrs	r3, r3, #1
 801d7e4:	3b01      	subs	r3, #1
 801d7e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801d7e8:	429a      	cmp	r2, r3
 801d7ea:	d10f      	bne.n	801d80c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801d7ec:	68fb      	ldr	r3, [r7, #12]
 801d7ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801d7f8:	429a      	cmp	r2, r3
 801d7fa:	d107      	bne.n	801d80c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801d7fc:	68fb      	ldr	r3, [r7, #12]
 801d7fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d806:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801d808:	429a      	cmp	r2, r3
 801d80a:	d001      	beq.n	801d810 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 801d80c:	2301      	movs	r3, #1
 801d80e:	e000      	b.n	801d812 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 801d810:	2300      	movs	r3, #0
}
 801d812:	4618      	mov	r0, r3
 801d814:	3718      	adds	r7, #24
 801d816:	46bd      	mov	sp, r7
 801d818:	bd80      	pop	{r7, pc}
 801d81a:	bf00      	nop
 801d81c:	40023800 	.word	0x40023800

0801d820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801d820:	b580      	push	{r7, lr}
 801d822:	b084      	sub	sp, #16
 801d824:	af00      	add	r7, sp, #0
 801d826:	6078      	str	r0, [r7, #4]
 801d828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801d82a:	2300      	movs	r3, #0
 801d82c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	2b00      	cmp	r3, #0
 801d832:	d101      	bne.n	801d838 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801d834:	2301      	movs	r3, #1
 801d836:	e0d0      	b.n	801d9da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d838:	4b6a      	ldr	r3, [pc, #424]	; (801d9e4 <HAL_RCC_ClockConfig+0x1c4>)
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	f003 030f 	and.w	r3, r3, #15
 801d840:	683a      	ldr	r2, [r7, #0]
 801d842:	429a      	cmp	r2, r3
 801d844:	d910      	bls.n	801d868 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d846:	4b67      	ldr	r3, [pc, #412]	; (801d9e4 <HAL_RCC_ClockConfig+0x1c4>)
 801d848:	681b      	ldr	r3, [r3, #0]
 801d84a:	f023 020f 	bic.w	r2, r3, #15
 801d84e:	4965      	ldr	r1, [pc, #404]	; (801d9e4 <HAL_RCC_ClockConfig+0x1c4>)
 801d850:	683b      	ldr	r3, [r7, #0]
 801d852:	4313      	orrs	r3, r2
 801d854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d856:	4b63      	ldr	r3, [pc, #396]	; (801d9e4 <HAL_RCC_ClockConfig+0x1c4>)
 801d858:	681b      	ldr	r3, [r3, #0]
 801d85a:	f003 030f 	and.w	r3, r3, #15
 801d85e:	683a      	ldr	r2, [r7, #0]
 801d860:	429a      	cmp	r2, r3
 801d862:	d001      	beq.n	801d868 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801d864:	2301      	movs	r3, #1
 801d866:	e0b8      	b.n	801d9da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	681b      	ldr	r3, [r3, #0]
 801d86c:	f003 0302 	and.w	r3, r3, #2
 801d870:	2b00      	cmp	r3, #0
 801d872:	d020      	beq.n	801d8b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	f003 0304 	and.w	r3, r3, #4
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	d005      	beq.n	801d88c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801d880:	4b59      	ldr	r3, [pc, #356]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d882:	689b      	ldr	r3, [r3, #8]
 801d884:	4a58      	ldr	r2, [pc, #352]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801d88a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	681b      	ldr	r3, [r3, #0]
 801d890:	f003 0308 	and.w	r3, r3, #8
 801d894:	2b00      	cmp	r3, #0
 801d896:	d005      	beq.n	801d8a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801d898:	4b53      	ldr	r3, [pc, #332]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d89a:	689b      	ldr	r3, [r3, #8]
 801d89c:	4a52      	ldr	r2, [pc, #328]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d89e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801d8a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d8a4:	4b50      	ldr	r3, [pc, #320]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d8a6:	689b      	ldr	r3, [r3, #8]
 801d8a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	689b      	ldr	r3, [r3, #8]
 801d8b0:	494d      	ldr	r1, [pc, #308]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d8b2:	4313      	orrs	r3, r2
 801d8b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d8b6:	687b      	ldr	r3, [r7, #4]
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	f003 0301 	and.w	r3, r3, #1
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	d040      	beq.n	801d944 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	685b      	ldr	r3, [r3, #4]
 801d8c6:	2b01      	cmp	r3, #1
 801d8c8:	d107      	bne.n	801d8da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d8ca:	4b47      	ldr	r3, [pc, #284]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	d115      	bne.n	801d902 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801d8d6:	2301      	movs	r3, #1
 801d8d8:	e07f      	b.n	801d9da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d8da:	687b      	ldr	r3, [r7, #4]
 801d8dc:	685b      	ldr	r3, [r3, #4]
 801d8de:	2b02      	cmp	r3, #2
 801d8e0:	d107      	bne.n	801d8f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801d8e2:	4b41      	ldr	r3, [pc, #260]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d8ea:	2b00      	cmp	r3, #0
 801d8ec:	d109      	bne.n	801d902 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801d8ee:	2301      	movs	r3, #1
 801d8f0:	e073      	b.n	801d9da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801d8f2:	4b3d      	ldr	r3, [pc, #244]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	f003 0302 	and.w	r3, r3, #2
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d101      	bne.n	801d902 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801d8fe:	2301      	movs	r3, #1
 801d900:	e06b      	b.n	801d9da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801d902:	4b39      	ldr	r3, [pc, #228]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d904:	689b      	ldr	r3, [r3, #8]
 801d906:	f023 0203 	bic.w	r2, r3, #3
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	685b      	ldr	r3, [r3, #4]
 801d90e:	4936      	ldr	r1, [pc, #216]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d910:	4313      	orrs	r3, r2
 801d912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d914:	f7fc f960 	bl	8019bd8 <HAL_GetTick>
 801d918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d91a:	e00a      	b.n	801d932 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d91c:	f7fc f95c 	bl	8019bd8 <HAL_GetTick>
 801d920:	4602      	mov	r2, r0
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	1ad3      	subs	r3, r2, r3
 801d926:	f241 3288 	movw	r2, #5000	; 0x1388
 801d92a:	4293      	cmp	r3, r2
 801d92c:	d901      	bls.n	801d932 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 801d92e:	2303      	movs	r3, #3
 801d930:	e053      	b.n	801d9da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d932:	4b2d      	ldr	r3, [pc, #180]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d934:	689b      	ldr	r3, [r3, #8]
 801d936:	f003 020c 	and.w	r2, r3, #12
 801d93a:	687b      	ldr	r3, [r7, #4]
 801d93c:	685b      	ldr	r3, [r3, #4]
 801d93e:	009b      	lsls	r3, r3, #2
 801d940:	429a      	cmp	r2, r3
 801d942:	d1eb      	bne.n	801d91c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801d944:	4b27      	ldr	r3, [pc, #156]	; (801d9e4 <HAL_RCC_ClockConfig+0x1c4>)
 801d946:	681b      	ldr	r3, [r3, #0]
 801d948:	f003 030f 	and.w	r3, r3, #15
 801d94c:	683a      	ldr	r2, [r7, #0]
 801d94e:	429a      	cmp	r2, r3
 801d950:	d210      	bcs.n	801d974 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d952:	4b24      	ldr	r3, [pc, #144]	; (801d9e4 <HAL_RCC_ClockConfig+0x1c4>)
 801d954:	681b      	ldr	r3, [r3, #0]
 801d956:	f023 020f 	bic.w	r2, r3, #15
 801d95a:	4922      	ldr	r1, [pc, #136]	; (801d9e4 <HAL_RCC_ClockConfig+0x1c4>)
 801d95c:	683b      	ldr	r3, [r7, #0]
 801d95e:	4313      	orrs	r3, r2
 801d960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d962:	4b20      	ldr	r3, [pc, #128]	; (801d9e4 <HAL_RCC_ClockConfig+0x1c4>)
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	f003 030f 	and.w	r3, r3, #15
 801d96a:	683a      	ldr	r2, [r7, #0]
 801d96c:	429a      	cmp	r2, r3
 801d96e:	d001      	beq.n	801d974 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 801d970:	2301      	movs	r3, #1
 801d972:	e032      	b.n	801d9da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d974:	687b      	ldr	r3, [r7, #4]
 801d976:	681b      	ldr	r3, [r3, #0]
 801d978:	f003 0304 	and.w	r3, r3, #4
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	d008      	beq.n	801d992 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801d980:	4b19      	ldr	r3, [pc, #100]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d982:	689b      	ldr	r3, [r3, #8]
 801d984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801d988:	687b      	ldr	r3, [r7, #4]
 801d98a:	68db      	ldr	r3, [r3, #12]
 801d98c:	4916      	ldr	r1, [pc, #88]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d98e:	4313      	orrs	r3, r2
 801d990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d992:	687b      	ldr	r3, [r7, #4]
 801d994:	681b      	ldr	r3, [r3, #0]
 801d996:	f003 0308 	and.w	r3, r3, #8
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	d009      	beq.n	801d9b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801d99e:	4b12      	ldr	r3, [pc, #72]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d9a0:	689b      	ldr	r3, [r3, #8]
 801d9a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	691b      	ldr	r3, [r3, #16]
 801d9aa:	00db      	lsls	r3, r3, #3
 801d9ac:	490e      	ldr	r1, [pc, #56]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d9ae:	4313      	orrs	r3, r2
 801d9b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801d9b2:	f000 f821 	bl	801d9f8 <HAL_RCC_GetSysClockFreq>
 801d9b6:	4602      	mov	r2, r0
 801d9b8:	4b0b      	ldr	r3, [pc, #44]	; (801d9e8 <HAL_RCC_ClockConfig+0x1c8>)
 801d9ba:	689b      	ldr	r3, [r3, #8]
 801d9bc:	091b      	lsrs	r3, r3, #4
 801d9be:	f003 030f 	and.w	r3, r3, #15
 801d9c2:	490a      	ldr	r1, [pc, #40]	; (801d9ec <HAL_RCC_ClockConfig+0x1cc>)
 801d9c4:	5ccb      	ldrb	r3, [r1, r3]
 801d9c6:	fa22 f303 	lsr.w	r3, r2, r3
 801d9ca:	4a09      	ldr	r2, [pc, #36]	; (801d9f0 <HAL_RCC_ClockConfig+0x1d0>)
 801d9cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801d9ce:	4b09      	ldr	r3, [pc, #36]	; (801d9f4 <HAL_RCC_ClockConfig+0x1d4>)
 801d9d0:	681b      	ldr	r3, [r3, #0]
 801d9d2:	4618      	mov	r0, r3
 801d9d4:	f7fc f8bc 	bl	8019b50 <HAL_InitTick>

  return HAL_OK;
 801d9d8:	2300      	movs	r3, #0
}
 801d9da:	4618      	mov	r0, r3
 801d9dc:	3710      	adds	r7, #16
 801d9de:	46bd      	mov	sp, r7
 801d9e0:	bd80      	pop	{r7, pc}
 801d9e2:	bf00      	nop
 801d9e4:	40023c00 	.word	0x40023c00
 801d9e8:	40023800 	.word	0x40023800
 801d9ec:	0802dfe4 	.word	0x0802dfe4
 801d9f0:	2000031c 	.word	0x2000031c
 801d9f4:	20000320 	.word	0x20000320

0801d9f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801d9f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d9fc:	b090      	sub	sp, #64	; 0x40
 801d9fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 801da00:	2300      	movs	r3, #0
 801da02:	637b      	str	r3, [r7, #52]	; 0x34
 801da04:	2300      	movs	r3, #0
 801da06:	63fb      	str	r3, [r7, #60]	; 0x3c
 801da08:	2300      	movs	r3, #0
 801da0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 801da0c:	2300      	movs	r3, #0
 801da0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801da10:	4b59      	ldr	r3, [pc, #356]	; (801db78 <HAL_RCC_GetSysClockFreq+0x180>)
 801da12:	689b      	ldr	r3, [r3, #8]
 801da14:	f003 030c 	and.w	r3, r3, #12
 801da18:	2b08      	cmp	r3, #8
 801da1a:	d00d      	beq.n	801da38 <HAL_RCC_GetSysClockFreq+0x40>
 801da1c:	2b08      	cmp	r3, #8
 801da1e:	f200 80a1 	bhi.w	801db64 <HAL_RCC_GetSysClockFreq+0x16c>
 801da22:	2b00      	cmp	r3, #0
 801da24:	d002      	beq.n	801da2c <HAL_RCC_GetSysClockFreq+0x34>
 801da26:	2b04      	cmp	r3, #4
 801da28:	d003      	beq.n	801da32 <HAL_RCC_GetSysClockFreq+0x3a>
 801da2a:	e09b      	b.n	801db64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801da2c:	4b53      	ldr	r3, [pc, #332]	; (801db7c <HAL_RCC_GetSysClockFreq+0x184>)
 801da2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801da30:	e09b      	b.n	801db6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801da32:	4b53      	ldr	r3, [pc, #332]	; (801db80 <HAL_RCC_GetSysClockFreq+0x188>)
 801da34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801da36:	e098      	b.n	801db6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801da38:	4b4f      	ldr	r3, [pc, #316]	; (801db78 <HAL_RCC_GetSysClockFreq+0x180>)
 801da3a:	685b      	ldr	r3, [r3, #4]
 801da3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801da40:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801da42:	4b4d      	ldr	r3, [pc, #308]	; (801db78 <HAL_RCC_GetSysClockFreq+0x180>)
 801da44:	685b      	ldr	r3, [r3, #4]
 801da46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801da4a:	2b00      	cmp	r3, #0
 801da4c:	d028      	beq.n	801daa0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801da4e:	4b4a      	ldr	r3, [pc, #296]	; (801db78 <HAL_RCC_GetSysClockFreq+0x180>)
 801da50:	685b      	ldr	r3, [r3, #4]
 801da52:	099b      	lsrs	r3, r3, #6
 801da54:	2200      	movs	r2, #0
 801da56:	623b      	str	r3, [r7, #32]
 801da58:	627a      	str	r2, [r7, #36]	; 0x24
 801da5a:	6a3b      	ldr	r3, [r7, #32]
 801da5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 801da60:	2100      	movs	r1, #0
 801da62:	4b47      	ldr	r3, [pc, #284]	; (801db80 <HAL_RCC_GetSysClockFreq+0x188>)
 801da64:	fb03 f201 	mul.w	r2, r3, r1
 801da68:	2300      	movs	r3, #0
 801da6a:	fb00 f303 	mul.w	r3, r0, r3
 801da6e:	4413      	add	r3, r2
 801da70:	4a43      	ldr	r2, [pc, #268]	; (801db80 <HAL_RCC_GetSysClockFreq+0x188>)
 801da72:	fba0 1202 	umull	r1, r2, r0, r2
 801da76:	62fa      	str	r2, [r7, #44]	; 0x2c
 801da78:	460a      	mov	r2, r1
 801da7a:	62ba      	str	r2, [r7, #40]	; 0x28
 801da7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801da7e:	4413      	add	r3, r2
 801da80:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da84:	2200      	movs	r2, #0
 801da86:	61bb      	str	r3, [r7, #24]
 801da88:	61fa      	str	r2, [r7, #28]
 801da8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801da8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801da92:	f7e2 fc3d 	bl	8000310 <__aeabi_uldivmod>
 801da96:	4602      	mov	r2, r0
 801da98:	460b      	mov	r3, r1
 801da9a:	4613      	mov	r3, r2
 801da9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801da9e:	e053      	b.n	801db48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801daa0:	4b35      	ldr	r3, [pc, #212]	; (801db78 <HAL_RCC_GetSysClockFreq+0x180>)
 801daa2:	685b      	ldr	r3, [r3, #4]
 801daa4:	099b      	lsrs	r3, r3, #6
 801daa6:	2200      	movs	r2, #0
 801daa8:	613b      	str	r3, [r7, #16]
 801daaa:	617a      	str	r2, [r7, #20]
 801daac:	693b      	ldr	r3, [r7, #16]
 801daae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801dab2:	f04f 0b00 	mov.w	fp, #0
 801dab6:	4652      	mov	r2, sl
 801dab8:	465b      	mov	r3, fp
 801daba:	f04f 0000 	mov.w	r0, #0
 801dabe:	f04f 0100 	mov.w	r1, #0
 801dac2:	0159      	lsls	r1, r3, #5
 801dac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801dac8:	0150      	lsls	r0, r2, #5
 801daca:	4602      	mov	r2, r0
 801dacc:	460b      	mov	r3, r1
 801dace:	ebb2 080a 	subs.w	r8, r2, sl
 801dad2:	eb63 090b 	sbc.w	r9, r3, fp
 801dad6:	f04f 0200 	mov.w	r2, #0
 801dada:	f04f 0300 	mov.w	r3, #0
 801dade:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801dae2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801dae6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801daea:	ebb2 0408 	subs.w	r4, r2, r8
 801daee:	eb63 0509 	sbc.w	r5, r3, r9
 801daf2:	f04f 0200 	mov.w	r2, #0
 801daf6:	f04f 0300 	mov.w	r3, #0
 801dafa:	00eb      	lsls	r3, r5, #3
 801dafc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801db00:	00e2      	lsls	r2, r4, #3
 801db02:	4614      	mov	r4, r2
 801db04:	461d      	mov	r5, r3
 801db06:	eb14 030a 	adds.w	r3, r4, sl
 801db0a:	603b      	str	r3, [r7, #0]
 801db0c:	eb45 030b 	adc.w	r3, r5, fp
 801db10:	607b      	str	r3, [r7, #4]
 801db12:	f04f 0200 	mov.w	r2, #0
 801db16:	f04f 0300 	mov.w	r3, #0
 801db1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801db1e:	4629      	mov	r1, r5
 801db20:	028b      	lsls	r3, r1, #10
 801db22:	4621      	mov	r1, r4
 801db24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801db28:	4621      	mov	r1, r4
 801db2a:	028a      	lsls	r2, r1, #10
 801db2c:	4610      	mov	r0, r2
 801db2e:	4619      	mov	r1, r3
 801db30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db32:	2200      	movs	r2, #0
 801db34:	60bb      	str	r3, [r7, #8]
 801db36:	60fa      	str	r2, [r7, #12]
 801db38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801db3c:	f7e2 fbe8 	bl	8000310 <__aeabi_uldivmod>
 801db40:	4602      	mov	r2, r0
 801db42:	460b      	mov	r3, r1
 801db44:	4613      	mov	r3, r2
 801db46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 801db48:	4b0b      	ldr	r3, [pc, #44]	; (801db78 <HAL_RCC_GetSysClockFreq+0x180>)
 801db4a:	685b      	ldr	r3, [r3, #4]
 801db4c:	0c1b      	lsrs	r3, r3, #16
 801db4e:	f003 0303 	and.w	r3, r3, #3
 801db52:	3301      	adds	r3, #1
 801db54:	005b      	lsls	r3, r3, #1
 801db56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 801db58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801db5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db5c:	fbb2 f3f3 	udiv	r3, r2, r3
 801db60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801db62:	e002      	b.n	801db6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801db64:	4b05      	ldr	r3, [pc, #20]	; (801db7c <HAL_RCC_GetSysClockFreq+0x184>)
 801db66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801db68:	bf00      	nop
    }
  }
  return sysclockfreq;
 801db6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 801db6c:	4618      	mov	r0, r3
 801db6e:	3740      	adds	r7, #64	; 0x40
 801db70:	46bd      	mov	sp, r7
 801db72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801db76:	bf00      	nop
 801db78:	40023800 	.word	0x40023800
 801db7c:	00f42400 	.word	0x00f42400
 801db80:	00b71b00 	.word	0x00b71b00

0801db84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801db84:	b480      	push	{r7}
 801db86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801db88:	4b03      	ldr	r3, [pc, #12]	; (801db98 <HAL_RCC_GetHCLKFreq+0x14>)
 801db8a:	681b      	ldr	r3, [r3, #0]
}
 801db8c:	4618      	mov	r0, r3
 801db8e:	46bd      	mov	sp, r7
 801db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db94:	4770      	bx	lr
 801db96:	bf00      	nop
 801db98:	2000031c 	.word	0x2000031c

0801db9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801db9c:	b580      	push	{r7, lr}
 801db9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801dba0:	f7ff fff0 	bl	801db84 <HAL_RCC_GetHCLKFreq>
 801dba4:	4602      	mov	r2, r0
 801dba6:	4b05      	ldr	r3, [pc, #20]	; (801dbbc <HAL_RCC_GetPCLK1Freq+0x20>)
 801dba8:	689b      	ldr	r3, [r3, #8]
 801dbaa:	0a9b      	lsrs	r3, r3, #10
 801dbac:	f003 0307 	and.w	r3, r3, #7
 801dbb0:	4903      	ldr	r1, [pc, #12]	; (801dbc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 801dbb2:	5ccb      	ldrb	r3, [r1, r3]
 801dbb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 801dbb8:	4618      	mov	r0, r3
 801dbba:	bd80      	pop	{r7, pc}
 801dbbc:	40023800 	.word	0x40023800
 801dbc0:	0802dff4 	.word	0x0802dff4

0801dbc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801dbc4:	b580      	push	{r7, lr}
 801dbc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801dbc8:	f7ff ffdc 	bl	801db84 <HAL_RCC_GetHCLKFreq>
 801dbcc:	4602      	mov	r2, r0
 801dbce:	4b05      	ldr	r3, [pc, #20]	; (801dbe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 801dbd0:	689b      	ldr	r3, [r3, #8]
 801dbd2:	0b5b      	lsrs	r3, r3, #13
 801dbd4:	f003 0307 	and.w	r3, r3, #7
 801dbd8:	4903      	ldr	r1, [pc, #12]	; (801dbe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 801dbda:	5ccb      	ldrb	r3, [r1, r3]
 801dbdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 801dbe0:	4618      	mov	r0, r3
 801dbe2:	bd80      	pop	{r7, pc}
 801dbe4:	40023800 	.word	0x40023800
 801dbe8:	0802dff4 	.word	0x0802dff4

0801dbec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801dbec:	b580      	push	{r7, lr}
 801dbee:	b088      	sub	sp, #32
 801dbf0:	af00      	add	r7, sp, #0
 801dbf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 801dbf4:	2300      	movs	r3, #0
 801dbf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 801dbf8:	2300      	movs	r3, #0
 801dbfa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 801dbfc:	2300      	movs	r3, #0
 801dbfe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801dc00:	2300      	movs	r3, #0
 801dc02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 801dc04:	2300      	movs	r3, #0
 801dc06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	f003 0301 	and.w	r3, r3, #1
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	d012      	beq.n	801dc3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801dc14:	4b69      	ldr	r3, [pc, #420]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dc16:	689b      	ldr	r3, [r3, #8]
 801dc18:	4a68      	ldr	r2, [pc, #416]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dc1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801dc1e:	6093      	str	r3, [r2, #8]
 801dc20:	4b66      	ldr	r3, [pc, #408]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dc22:	689a      	ldr	r2, [r3, #8]
 801dc24:	687b      	ldr	r3, [r7, #4]
 801dc26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dc28:	4964      	ldr	r1, [pc, #400]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dc2a:	4313      	orrs	r3, r2
 801dc2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	d101      	bne.n	801dc3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 801dc36:	2301      	movs	r3, #1
 801dc38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	681b      	ldr	r3, [r3, #0]
 801dc3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	d017      	beq.n	801dc76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801dc46:	4b5d      	ldr	r3, [pc, #372]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dc48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dc4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dc54:	4959      	ldr	r1, [pc, #356]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dc56:	4313      	orrs	r3, r2
 801dc58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dc60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801dc64:	d101      	bne.n	801dc6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 801dc66:	2301      	movs	r3, #1
 801dc68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801dc6a:	687b      	ldr	r3, [r7, #4]
 801dc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dc6e:	2b00      	cmp	r3, #0
 801dc70:	d101      	bne.n	801dc76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801dc72:	2301      	movs	r3, #1
 801dc74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	681b      	ldr	r3, [r3, #0]
 801dc7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d017      	beq.n	801dcb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801dc82:	4b4e      	ldr	r3, [pc, #312]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dc84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dc88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dc90:	494a      	ldr	r1, [pc, #296]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dc92:	4313      	orrs	r3, r2
 801dc94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801dc98:	687b      	ldr	r3, [r7, #4]
 801dc9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dc9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801dca0:	d101      	bne.n	801dca6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801dca2:	2301      	movs	r3, #1
 801dca4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d101      	bne.n	801dcb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801dcae:	2301      	movs	r3, #1
 801dcb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	681b      	ldr	r3, [r3, #0]
 801dcb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	d001      	beq.n	801dcc2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801dcbe:	2301      	movs	r3, #1
 801dcc0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	681b      	ldr	r3, [r3, #0]
 801dcc6:	f003 0320 	and.w	r3, r3, #32
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	f000 808b 	beq.w	801dde6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801dcd0:	4b3a      	ldr	r3, [pc, #232]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dcd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dcd4:	4a39      	ldr	r2, [pc, #228]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dcd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801dcda:	6413      	str	r3, [r2, #64]	; 0x40
 801dcdc:	4b37      	ldr	r3, [pc, #220]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dcde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801dce4:	60bb      	str	r3, [r7, #8]
 801dce6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801dce8:	4b35      	ldr	r3, [pc, #212]	; (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801dcea:	681b      	ldr	r3, [r3, #0]
 801dcec:	4a34      	ldr	r2, [pc, #208]	; (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801dcee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801dcf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801dcf4:	f7fb ff70 	bl	8019bd8 <HAL_GetTick>
 801dcf8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801dcfa:	e008      	b.n	801dd0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801dcfc:	f7fb ff6c 	bl	8019bd8 <HAL_GetTick>
 801dd00:	4602      	mov	r2, r0
 801dd02:	697b      	ldr	r3, [r7, #20]
 801dd04:	1ad3      	subs	r3, r2, r3
 801dd06:	2b64      	cmp	r3, #100	; 0x64
 801dd08:	d901      	bls.n	801dd0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 801dd0a:	2303      	movs	r3, #3
 801dd0c:	e38f      	b.n	801e42e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801dd0e:	4b2c      	ldr	r3, [pc, #176]	; (801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801dd10:	681b      	ldr	r3, [r3, #0]
 801dd12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d0f0      	beq.n	801dcfc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801dd1a:	4b28      	ldr	r3, [pc, #160]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dd1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dd1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801dd22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801dd24:	693b      	ldr	r3, [r7, #16]
 801dd26:	2b00      	cmp	r3, #0
 801dd28:	d035      	beq.n	801dd96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801dd32:	693a      	ldr	r2, [r7, #16]
 801dd34:	429a      	cmp	r2, r3
 801dd36:	d02e      	beq.n	801dd96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801dd38:	4b20      	ldr	r3, [pc, #128]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dd3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dd3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801dd40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801dd42:	4b1e      	ldr	r3, [pc, #120]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dd44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dd46:	4a1d      	ldr	r2, [pc, #116]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dd48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801dd4c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801dd4e:	4b1b      	ldr	r3, [pc, #108]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dd50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dd52:	4a1a      	ldr	r2, [pc, #104]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dd54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dd58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 801dd5a:	4a18      	ldr	r2, [pc, #96]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dd5c:	693b      	ldr	r3, [r7, #16]
 801dd5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801dd60:	4b16      	ldr	r3, [pc, #88]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dd62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dd64:	f003 0301 	and.w	r3, r3, #1
 801dd68:	2b01      	cmp	r3, #1
 801dd6a:	d114      	bne.n	801dd96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801dd6c:	f7fb ff34 	bl	8019bd8 <HAL_GetTick>
 801dd70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801dd72:	e00a      	b.n	801dd8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801dd74:	f7fb ff30 	bl	8019bd8 <HAL_GetTick>
 801dd78:	4602      	mov	r2, r0
 801dd7a:	697b      	ldr	r3, [r7, #20]
 801dd7c:	1ad3      	subs	r3, r2, r3
 801dd7e:	f241 3288 	movw	r2, #5000	; 0x1388
 801dd82:	4293      	cmp	r3, r2
 801dd84:	d901      	bls.n	801dd8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 801dd86:	2303      	movs	r3, #3
 801dd88:	e351      	b.n	801e42e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801dd8a:	4b0c      	ldr	r3, [pc, #48]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dd8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dd8e:	f003 0302 	and.w	r3, r3, #2
 801dd92:	2b00      	cmp	r3, #0
 801dd94:	d0ee      	beq.n	801dd74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801dd9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801dda2:	d111      	bne.n	801ddc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 801dda4:	4b05      	ldr	r3, [pc, #20]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dda6:	689b      	ldr	r3, [r3, #8]
 801dda8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801ddb0:	4b04      	ldr	r3, [pc, #16]	; (801ddc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801ddb2:	400b      	ands	r3, r1
 801ddb4:	4901      	ldr	r1, [pc, #4]	; (801ddbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801ddb6:	4313      	orrs	r3, r2
 801ddb8:	608b      	str	r3, [r1, #8]
 801ddba:	e00b      	b.n	801ddd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 801ddbc:	40023800 	.word	0x40023800
 801ddc0:	40007000 	.word	0x40007000
 801ddc4:	0ffffcff 	.word	0x0ffffcff
 801ddc8:	4bac      	ldr	r3, [pc, #688]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ddca:	689b      	ldr	r3, [r3, #8]
 801ddcc:	4aab      	ldr	r2, [pc, #684]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ddce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801ddd2:	6093      	str	r3, [r2, #8]
 801ddd4:	4ba9      	ldr	r3, [pc, #676]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ddd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801dde0:	49a6      	ldr	r1, [pc, #664]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dde2:	4313      	orrs	r3, r2
 801dde4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	f003 0310 	and.w	r3, r3, #16
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	d010      	beq.n	801de14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801ddf2:	4ba2      	ldr	r3, [pc, #648]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ddf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ddf8:	4aa0      	ldr	r2, [pc, #640]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ddfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ddfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801de02:	4b9e      	ldr	r3, [pc, #632]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801de0c:	499b      	ldr	r1, [pc, #620]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de0e:	4313      	orrs	r3, r2
 801de10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d00a      	beq.n	801de36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801de20:	4b96      	ldr	r3, [pc, #600]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801de2e:	4993      	ldr	r1, [pc, #588]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de30:	4313      	orrs	r3, r2
 801de32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	681b      	ldr	r3, [r3, #0]
 801de3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801de3e:	2b00      	cmp	r3, #0
 801de40:	d00a      	beq.n	801de58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801de42:	4b8e      	ldr	r3, [pc, #568]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801de50:	498a      	ldr	r1, [pc, #552]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de52:	4313      	orrs	r3, r2
 801de54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	681b      	ldr	r3, [r3, #0]
 801de5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801de60:	2b00      	cmp	r3, #0
 801de62:	d00a      	beq.n	801de7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801de64:	4b85      	ldr	r3, [pc, #532]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801de6e:	687b      	ldr	r3, [r7, #4]
 801de70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801de72:	4982      	ldr	r1, [pc, #520]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de74:	4313      	orrs	r3, r2
 801de76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801de7a:	687b      	ldr	r3, [r7, #4]
 801de7c:	681b      	ldr	r3, [r3, #0]
 801de7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801de82:	2b00      	cmp	r3, #0
 801de84:	d00a      	beq.n	801de9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801de86:	4b7d      	ldr	r3, [pc, #500]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801de94:	4979      	ldr	r1, [pc, #484]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de96:	4313      	orrs	r3, r2
 801de98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801de9c:	687b      	ldr	r3, [r7, #4]
 801de9e:	681b      	ldr	r3, [r3, #0]
 801dea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d00a      	beq.n	801debe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801dea8:	4b74      	ldr	r3, [pc, #464]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801deaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801deae:	f023 0203 	bic.w	r2, r3, #3
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801deb6:	4971      	ldr	r1, [pc, #452]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801deb8:	4313      	orrs	r3, r2
 801deba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	681b      	ldr	r3, [r3, #0]
 801dec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801dec6:	2b00      	cmp	r3, #0
 801dec8:	d00a      	beq.n	801dee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801deca:	4b6c      	ldr	r3, [pc, #432]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801decc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ded0:	f023 020c 	bic.w	r2, r3, #12
 801ded4:	687b      	ldr	r3, [r7, #4]
 801ded6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ded8:	4968      	ldr	r1, [pc, #416]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801deda:	4313      	orrs	r3, r2
 801dedc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801dee0:	687b      	ldr	r3, [r7, #4]
 801dee2:	681b      	ldr	r3, [r3, #0]
 801dee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dee8:	2b00      	cmp	r3, #0
 801deea:	d00a      	beq.n	801df02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801deec:	4b63      	ldr	r3, [pc, #396]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801deee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801def2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801defa:	4960      	ldr	r1, [pc, #384]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801defc:	4313      	orrs	r3, r2
 801defe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801df02:	687b      	ldr	r3, [r7, #4]
 801df04:	681b      	ldr	r3, [r3, #0]
 801df06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d00a      	beq.n	801df24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801df0e:	4b5b      	ldr	r3, [pc, #364]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801df10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801df14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801df18:	687b      	ldr	r3, [r7, #4]
 801df1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801df1c:	4957      	ldr	r1, [pc, #348]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801df1e:	4313      	orrs	r3, r2
 801df20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801df24:	687b      	ldr	r3, [r7, #4]
 801df26:	681b      	ldr	r3, [r3, #0]
 801df28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801df2c:	2b00      	cmp	r3, #0
 801df2e:	d00a      	beq.n	801df46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801df30:	4b52      	ldr	r3, [pc, #328]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801df32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801df36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801df3e:	494f      	ldr	r1, [pc, #316]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801df40:	4313      	orrs	r3, r2
 801df42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	681b      	ldr	r3, [r3, #0]
 801df4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801df4e:	2b00      	cmp	r3, #0
 801df50:	d00a      	beq.n	801df68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801df52:	4b4a      	ldr	r3, [pc, #296]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801df54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801df58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801df60:	4946      	ldr	r1, [pc, #280]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801df62:	4313      	orrs	r3, r2
 801df64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 801df68:	687b      	ldr	r3, [r7, #4]
 801df6a:	681b      	ldr	r3, [r3, #0]
 801df6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801df70:	2b00      	cmp	r3, #0
 801df72:	d00a      	beq.n	801df8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801df74:	4b41      	ldr	r3, [pc, #260]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801df76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801df7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801df82:	493e      	ldr	r1, [pc, #248]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801df84:	4313      	orrs	r3, r2
 801df86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 801df8a:	687b      	ldr	r3, [r7, #4]
 801df8c:	681b      	ldr	r3, [r3, #0]
 801df8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801df92:	2b00      	cmp	r3, #0
 801df94:	d00a      	beq.n	801dfac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801df96:	4b39      	ldr	r3, [pc, #228]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801df98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801df9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dfa4:	4935      	ldr	r1, [pc, #212]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dfa6:	4313      	orrs	r3, r2
 801dfa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801dfac:	687b      	ldr	r3, [r7, #4]
 801dfae:	681b      	ldr	r3, [r3, #0]
 801dfb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801dfb4:	2b00      	cmp	r3, #0
 801dfb6:	d00a      	beq.n	801dfce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801dfb8:	4b30      	ldr	r3, [pc, #192]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dfba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dfbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dfc6:	492d      	ldr	r1, [pc, #180]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dfc8:	4313      	orrs	r3, r2
 801dfca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	d011      	beq.n	801dffe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801dfda:	4b28      	ldr	r3, [pc, #160]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dfdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dfe0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801dfe8:	4924      	ldr	r1, [pc, #144]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dfea:	4313      	orrs	r3, r2
 801dfec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 801dff0:	687b      	ldr	r3, [r7, #4]
 801dff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801dff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801dff8:	d101      	bne.n	801dffe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 801dffa:	2301      	movs	r3, #1
 801dffc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	681b      	ldr	r3, [r3, #0]
 801e002:	f003 0308 	and.w	r3, r3, #8
 801e006:	2b00      	cmp	r3, #0
 801e008:	d001      	beq.n	801e00e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 801e00a:	2301      	movs	r3, #1
 801e00c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	681b      	ldr	r3, [r3, #0]
 801e012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e016:	2b00      	cmp	r3, #0
 801e018:	d00a      	beq.n	801e030 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801e01a:	4b18      	ldr	r3, [pc, #96]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801e01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e020:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801e024:	687b      	ldr	r3, [r7, #4]
 801e026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e028:	4914      	ldr	r1, [pc, #80]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801e02a:	4313      	orrs	r3, r2
 801e02c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	681b      	ldr	r3, [r3, #0]
 801e034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e038:	2b00      	cmp	r3, #0
 801e03a:	d00b      	beq.n	801e054 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801e03c:	4b0f      	ldr	r3, [pc, #60]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801e03e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e042:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801e04c:	490b      	ldr	r1, [pc, #44]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801e04e:	4313      	orrs	r3, r2
 801e050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 801e054:	687b      	ldr	r3, [r7, #4]
 801e056:	681b      	ldr	r3, [r3, #0]
 801e058:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	d00f      	beq.n	801e080 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 801e060:	4b06      	ldr	r3, [pc, #24]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801e062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e066:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801e06a:	687b      	ldr	r3, [r7, #4]
 801e06c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e070:	4902      	ldr	r1, [pc, #8]	; (801e07c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801e072:	4313      	orrs	r3, r2
 801e074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801e078:	e002      	b.n	801e080 <HAL_RCCEx_PeriphCLKConfig+0x494>
 801e07a:	bf00      	nop
 801e07c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801e080:	687b      	ldr	r3, [r7, #4]
 801e082:	681b      	ldr	r3, [r3, #0]
 801e084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e088:	2b00      	cmp	r3, #0
 801e08a:	d00b      	beq.n	801e0a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801e08c:	4b8a      	ldr	r3, [pc, #552]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e08e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801e092:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801e096:	687b      	ldr	r3, [r7, #4]
 801e098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e09c:	4986      	ldr	r1, [pc, #536]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e09e:	4313      	orrs	r3, r2
 801e0a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d00b      	beq.n	801e0c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 801e0b0:	4b81      	ldr	r3, [pc, #516]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e0b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801e0b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801e0ba:	687b      	ldr	r3, [r7, #4]
 801e0bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801e0c0:	497d      	ldr	r1, [pc, #500]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e0c2:	4313      	orrs	r3, r2
 801e0c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801e0c8:	69fb      	ldr	r3, [r7, #28]
 801e0ca:	2b01      	cmp	r3, #1
 801e0cc:	d006      	beq.n	801e0dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e0d6:	2b00      	cmp	r3, #0
 801e0d8:	f000 80d6 	beq.w	801e288 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801e0dc:	4b76      	ldr	r3, [pc, #472]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e0de:	681b      	ldr	r3, [r3, #0]
 801e0e0:	4a75      	ldr	r2, [pc, #468]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e0e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801e0e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e0e8:	f7fb fd76 	bl	8019bd8 <HAL_GetTick>
 801e0ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801e0ee:	e008      	b.n	801e102 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801e0f0:	f7fb fd72 	bl	8019bd8 <HAL_GetTick>
 801e0f4:	4602      	mov	r2, r0
 801e0f6:	697b      	ldr	r3, [r7, #20]
 801e0f8:	1ad3      	subs	r3, r2, r3
 801e0fa:	2b64      	cmp	r3, #100	; 0x64
 801e0fc:	d901      	bls.n	801e102 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801e0fe:	2303      	movs	r3, #3
 801e100:	e195      	b.n	801e42e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801e102:	4b6d      	ldr	r3, [pc, #436]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e104:	681b      	ldr	r3, [r3, #0]
 801e106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d1f0      	bne.n	801e0f0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 801e10e:	687b      	ldr	r3, [r7, #4]
 801e110:	681b      	ldr	r3, [r3, #0]
 801e112:	f003 0301 	and.w	r3, r3, #1
 801e116:	2b00      	cmp	r3, #0
 801e118:	d021      	beq.n	801e15e <HAL_RCCEx_PeriphCLKConfig+0x572>
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e11e:	2b00      	cmp	r3, #0
 801e120:	d11d      	bne.n	801e15e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801e122:	4b65      	ldr	r3, [pc, #404]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e128:	0c1b      	lsrs	r3, r3, #16
 801e12a:	f003 0303 	and.w	r3, r3, #3
 801e12e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801e130:	4b61      	ldr	r3, [pc, #388]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e136:	0e1b      	lsrs	r3, r3, #24
 801e138:	f003 030f 	and.w	r3, r3, #15
 801e13c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	685b      	ldr	r3, [r3, #4]
 801e142:	019a      	lsls	r2, r3, #6
 801e144:	693b      	ldr	r3, [r7, #16]
 801e146:	041b      	lsls	r3, r3, #16
 801e148:	431a      	orrs	r2, r3
 801e14a:	68fb      	ldr	r3, [r7, #12]
 801e14c:	061b      	lsls	r3, r3, #24
 801e14e:	431a      	orrs	r2, r3
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	689b      	ldr	r3, [r3, #8]
 801e154:	071b      	lsls	r3, r3, #28
 801e156:	4958      	ldr	r1, [pc, #352]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e158:	4313      	orrs	r3, r2
 801e15a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	681b      	ldr	r3, [r3, #0]
 801e162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e166:	2b00      	cmp	r3, #0
 801e168:	d004      	beq.n	801e174 <HAL_RCCEx_PeriphCLKConfig+0x588>
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e16e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e172:	d00a      	beq.n	801e18a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	681b      	ldr	r3, [r3, #0]
 801e178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d02e      	beq.n	801e1de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e188:	d129      	bne.n	801e1de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801e18a:	4b4b      	ldr	r3, [pc, #300]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e18c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e190:	0c1b      	lsrs	r3, r3, #16
 801e192:	f003 0303 	and.w	r3, r3, #3
 801e196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801e198:	4b47      	ldr	r3, [pc, #284]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e19a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e19e:	0f1b      	lsrs	r3, r3, #28
 801e1a0:	f003 0307 	and.w	r3, r3, #7
 801e1a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 801e1a6:	687b      	ldr	r3, [r7, #4]
 801e1a8:	685b      	ldr	r3, [r3, #4]
 801e1aa:	019a      	lsls	r2, r3, #6
 801e1ac:	693b      	ldr	r3, [r7, #16]
 801e1ae:	041b      	lsls	r3, r3, #16
 801e1b0:	431a      	orrs	r2, r3
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	68db      	ldr	r3, [r3, #12]
 801e1b6:	061b      	lsls	r3, r3, #24
 801e1b8:	431a      	orrs	r2, r3
 801e1ba:	68fb      	ldr	r3, [r7, #12]
 801e1bc:	071b      	lsls	r3, r3, #28
 801e1be:	493e      	ldr	r1, [pc, #248]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e1c0:	4313      	orrs	r3, r2
 801e1c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801e1c6:	4b3c      	ldr	r3, [pc, #240]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e1c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801e1cc:	f023 021f 	bic.w	r2, r3, #31
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1d4:	3b01      	subs	r3, #1
 801e1d6:	4938      	ldr	r1, [pc, #224]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e1d8:	4313      	orrs	r3, r2
 801e1da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801e1de:	687b      	ldr	r3, [r7, #4]
 801e1e0:	681b      	ldr	r3, [r3, #0]
 801e1e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	d01d      	beq.n	801e226 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801e1ea:	4b33      	ldr	r3, [pc, #204]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e1f0:	0e1b      	lsrs	r3, r3, #24
 801e1f2:	f003 030f 	and.w	r3, r3, #15
 801e1f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801e1f8:	4b2f      	ldr	r3, [pc, #188]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e1fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e1fe:	0f1b      	lsrs	r3, r3, #28
 801e200:	f003 0307 	and.w	r3, r3, #7
 801e204:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	685b      	ldr	r3, [r3, #4]
 801e20a:	019a      	lsls	r2, r3, #6
 801e20c:	687b      	ldr	r3, [r7, #4]
 801e20e:	691b      	ldr	r3, [r3, #16]
 801e210:	041b      	lsls	r3, r3, #16
 801e212:	431a      	orrs	r2, r3
 801e214:	693b      	ldr	r3, [r7, #16]
 801e216:	061b      	lsls	r3, r3, #24
 801e218:	431a      	orrs	r2, r3
 801e21a:	68fb      	ldr	r3, [r7, #12]
 801e21c:	071b      	lsls	r3, r3, #28
 801e21e:	4926      	ldr	r1, [pc, #152]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e220:	4313      	orrs	r3, r2
 801e222:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e22e:	2b00      	cmp	r3, #0
 801e230:	d011      	beq.n	801e256 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	685b      	ldr	r3, [r3, #4]
 801e236:	019a      	lsls	r2, r3, #6
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	691b      	ldr	r3, [r3, #16]
 801e23c:	041b      	lsls	r3, r3, #16
 801e23e:	431a      	orrs	r2, r3
 801e240:	687b      	ldr	r3, [r7, #4]
 801e242:	68db      	ldr	r3, [r3, #12]
 801e244:	061b      	lsls	r3, r3, #24
 801e246:	431a      	orrs	r2, r3
 801e248:	687b      	ldr	r3, [r7, #4]
 801e24a:	689b      	ldr	r3, [r3, #8]
 801e24c:	071b      	lsls	r3, r3, #28
 801e24e:	491a      	ldr	r1, [pc, #104]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e250:	4313      	orrs	r3, r2
 801e252:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801e256:	4b18      	ldr	r3, [pc, #96]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e258:	681b      	ldr	r3, [r3, #0]
 801e25a:	4a17      	ldr	r2, [pc, #92]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e25c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801e260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e262:	f7fb fcb9 	bl	8019bd8 <HAL_GetTick>
 801e266:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801e268:	e008      	b.n	801e27c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801e26a:	f7fb fcb5 	bl	8019bd8 <HAL_GetTick>
 801e26e:	4602      	mov	r2, r0
 801e270:	697b      	ldr	r3, [r7, #20]
 801e272:	1ad3      	subs	r3, r2, r3
 801e274:	2b64      	cmp	r3, #100	; 0x64
 801e276:	d901      	bls.n	801e27c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801e278:	2303      	movs	r3, #3
 801e27a:	e0d8      	b.n	801e42e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801e27c:	4b0e      	ldr	r3, [pc, #56]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e27e:	681b      	ldr	r3, [r3, #0]
 801e280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e284:	2b00      	cmp	r3, #0
 801e286:	d0f0      	beq.n	801e26a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 801e288:	69bb      	ldr	r3, [r7, #24]
 801e28a:	2b01      	cmp	r3, #1
 801e28c:	f040 80ce 	bne.w	801e42c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801e290:	4b09      	ldr	r3, [pc, #36]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e292:	681b      	ldr	r3, [r3, #0]
 801e294:	4a08      	ldr	r2, [pc, #32]	; (801e2b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801e29a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e29c:	f7fb fc9c 	bl	8019bd8 <HAL_GetTick>
 801e2a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801e2a2:	e00b      	b.n	801e2bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801e2a4:	f7fb fc98 	bl	8019bd8 <HAL_GetTick>
 801e2a8:	4602      	mov	r2, r0
 801e2aa:	697b      	ldr	r3, [r7, #20]
 801e2ac:	1ad3      	subs	r3, r2, r3
 801e2ae:	2b64      	cmp	r3, #100	; 0x64
 801e2b0:	d904      	bls.n	801e2bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801e2b2:	2303      	movs	r3, #3
 801e2b4:	e0bb      	b.n	801e42e <HAL_RCCEx_PeriphCLKConfig+0x842>
 801e2b6:	bf00      	nop
 801e2b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801e2bc:	4b5e      	ldr	r3, [pc, #376]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e2c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e2c8:	d0ec      	beq.n	801e2a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801e2ca:	687b      	ldr	r3, [r7, #4]
 801e2cc:	681b      	ldr	r3, [r3, #0]
 801e2ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	d003      	beq.n	801e2de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	d009      	beq.n	801e2f2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	d02e      	beq.n	801e348 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801e2ea:	687b      	ldr	r3, [r7, #4]
 801e2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	d12a      	bne.n	801e348 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801e2f2:	4b51      	ldr	r3, [pc, #324]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e2f8:	0c1b      	lsrs	r3, r3, #16
 801e2fa:	f003 0303 	and.w	r3, r3, #3
 801e2fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801e300:	4b4d      	ldr	r3, [pc, #308]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e306:	0f1b      	lsrs	r3, r3, #28
 801e308:	f003 0307 	and.w	r3, r3, #7
 801e30c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801e30e:	687b      	ldr	r3, [r7, #4]
 801e310:	695b      	ldr	r3, [r3, #20]
 801e312:	019a      	lsls	r2, r3, #6
 801e314:	693b      	ldr	r3, [r7, #16]
 801e316:	041b      	lsls	r3, r3, #16
 801e318:	431a      	orrs	r2, r3
 801e31a:	687b      	ldr	r3, [r7, #4]
 801e31c:	699b      	ldr	r3, [r3, #24]
 801e31e:	061b      	lsls	r3, r3, #24
 801e320:	431a      	orrs	r2, r3
 801e322:	68fb      	ldr	r3, [r7, #12]
 801e324:	071b      	lsls	r3, r3, #28
 801e326:	4944      	ldr	r1, [pc, #272]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e328:	4313      	orrs	r3, r2
 801e32a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801e32e:	4b42      	ldr	r3, [pc, #264]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801e334:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e33c:	3b01      	subs	r3, #1
 801e33e:	021b      	lsls	r3, r3, #8
 801e340:	493d      	ldr	r1, [pc, #244]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e342:	4313      	orrs	r3, r2
 801e344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801e348:	687b      	ldr	r3, [r7, #4]
 801e34a:	681b      	ldr	r3, [r3, #0]
 801e34c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e350:	2b00      	cmp	r3, #0
 801e352:	d022      	beq.n	801e39a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 801e354:	687b      	ldr	r3, [r7, #4]
 801e356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801e35c:	d11d      	bne.n	801e39a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801e35e:	4b36      	ldr	r3, [pc, #216]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e364:	0e1b      	lsrs	r3, r3, #24
 801e366:	f003 030f 	and.w	r3, r3, #15
 801e36a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801e36c:	4b32      	ldr	r3, [pc, #200]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e36e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e372:	0f1b      	lsrs	r3, r3, #28
 801e374:	f003 0307 	and.w	r3, r3, #7
 801e378:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	695b      	ldr	r3, [r3, #20]
 801e37e:	019a      	lsls	r2, r3, #6
 801e380:	687b      	ldr	r3, [r7, #4]
 801e382:	6a1b      	ldr	r3, [r3, #32]
 801e384:	041b      	lsls	r3, r3, #16
 801e386:	431a      	orrs	r2, r3
 801e388:	693b      	ldr	r3, [r7, #16]
 801e38a:	061b      	lsls	r3, r3, #24
 801e38c:	431a      	orrs	r2, r3
 801e38e:	68fb      	ldr	r3, [r7, #12]
 801e390:	071b      	lsls	r3, r3, #28
 801e392:	4929      	ldr	r1, [pc, #164]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e394:	4313      	orrs	r3, r2
 801e396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 801e39a:	687b      	ldr	r3, [r7, #4]
 801e39c:	681b      	ldr	r3, [r3, #0]
 801e39e:	f003 0308 	and.w	r3, r3, #8
 801e3a2:	2b00      	cmp	r3, #0
 801e3a4:	d028      	beq.n	801e3f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801e3a6:	4b24      	ldr	r3, [pc, #144]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e3ac:	0e1b      	lsrs	r3, r3, #24
 801e3ae:	f003 030f 	and.w	r3, r3, #15
 801e3b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801e3b4:	4b20      	ldr	r3, [pc, #128]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e3ba:	0c1b      	lsrs	r3, r3, #16
 801e3bc:	f003 0303 	and.w	r3, r3, #3
 801e3c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801e3c2:	687b      	ldr	r3, [r7, #4]
 801e3c4:	695b      	ldr	r3, [r3, #20]
 801e3c6:	019a      	lsls	r2, r3, #6
 801e3c8:	68fb      	ldr	r3, [r7, #12]
 801e3ca:	041b      	lsls	r3, r3, #16
 801e3cc:	431a      	orrs	r2, r3
 801e3ce:	693b      	ldr	r3, [r7, #16]
 801e3d0:	061b      	lsls	r3, r3, #24
 801e3d2:	431a      	orrs	r2, r3
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	69db      	ldr	r3, [r3, #28]
 801e3d8:	071b      	lsls	r3, r3, #28
 801e3da:	4917      	ldr	r1, [pc, #92]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e3dc:	4313      	orrs	r3, r2
 801e3de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801e3e2:	4b15      	ldr	r3, [pc, #84]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e3e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801e3e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3f0:	4911      	ldr	r1, [pc, #68]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e3f2:	4313      	orrs	r3, r2
 801e3f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801e3f8:	4b0f      	ldr	r3, [pc, #60]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e3fa:	681b      	ldr	r3, [r3, #0]
 801e3fc:	4a0e      	ldr	r2, [pc, #56]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e3fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e404:	f7fb fbe8 	bl	8019bd8 <HAL_GetTick>
 801e408:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801e40a:	e008      	b.n	801e41e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801e40c:	f7fb fbe4 	bl	8019bd8 <HAL_GetTick>
 801e410:	4602      	mov	r2, r0
 801e412:	697b      	ldr	r3, [r7, #20]
 801e414:	1ad3      	subs	r3, r2, r3
 801e416:	2b64      	cmp	r3, #100	; 0x64
 801e418:	d901      	bls.n	801e41e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801e41a:	2303      	movs	r3, #3
 801e41c:	e007      	b.n	801e42e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801e41e:	4b06      	ldr	r3, [pc, #24]	; (801e438 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e420:	681b      	ldr	r3, [r3, #0]
 801e422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e42a:	d1ef      	bne.n	801e40c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 801e42c:	2300      	movs	r3, #0
}
 801e42e:	4618      	mov	r0, r3
 801e430:	3720      	adds	r7, #32
 801e432:	46bd      	mov	sp, r7
 801e434:	bd80      	pop	{r7, pc}
 801e436:	bf00      	nop
 801e438:	40023800 	.word	0x40023800

0801e43c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801e43c:	b580      	push	{r7, lr}
 801e43e:	b082      	sub	sp, #8
 801e440:	af00      	add	r7, sp, #0
 801e442:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	2b00      	cmp	r3, #0
 801e448:	d101      	bne.n	801e44e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801e44a:	2301      	movs	r3, #1
 801e44c:	e01c      	b.n	801e488 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801e44e:	687b      	ldr	r3, [r7, #4]
 801e450:	795b      	ldrb	r3, [r3, #5]
 801e452:	b2db      	uxtb	r3, r3
 801e454:	2b00      	cmp	r3, #0
 801e456:	d105      	bne.n	801e464 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	2200      	movs	r2, #0
 801e45c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801e45e:	6878      	ldr	r0, [r7, #4]
 801e460:	f7f9 fdda 	bl	8018018 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801e464:	687b      	ldr	r3, [r7, #4]
 801e466:	2202      	movs	r2, #2
 801e468:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	681b      	ldr	r3, [r3, #0]
 801e46e:	681a      	ldr	r2, [r3, #0]
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	f042 0204 	orr.w	r2, r2, #4
 801e478:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	2201      	movs	r2, #1
 801e47e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	2200      	movs	r2, #0
 801e484:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801e486:	2300      	movs	r3, #0
}
 801e488:	4618      	mov	r0, r3
 801e48a:	3708      	adds	r7, #8
 801e48c:	46bd      	mov	sp, r7
 801e48e:	bd80      	pop	{r7, pc}

0801e490 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801e490:	b580      	push	{r7, lr}
 801e492:	b084      	sub	sp, #16
 801e494:	af00      	add	r7, sp, #0
 801e496:	6078      	str	r0, [r7, #4]
 801e498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e49a:	2300      	movs	r3, #0
 801e49c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	791b      	ldrb	r3, [r3, #4]
 801e4a2:	2b01      	cmp	r3, #1
 801e4a4:	d101      	bne.n	801e4aa <HAL_RNG_GenerateRandomNumber+0x1a>
 801e4a6:	2302      	movs	r3, #2
 801e4a8:	e044      	b.n	801e534 <HAL_RNG_GenerateRandomNumber+0xa4>
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	2201      	movs	r2, #1
 801e4ae:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	795b      	ldrb	r3, [r3, #5]
 801e4b4:	b2db      	uxtb	r3, r3
 801e4b6:	2b01      	cmp	r3, #1
 801e4b8:	d133      	bne.n	801e522 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801e4ba:	687b      	ldr	r3, [r7, #4]
 801e4bc:	2202      	movs	r2, #2
 801e4be:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 801e4c0:	f7fb fb8a 	bl	8019bd8 <HAL_GetTick>
 801e4c4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801e4c6:	e018      	b.n	801e4fa <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801e4c8:	f7fb fb86 	bl	8019bd8 <HAL_GetTick>
 801e4cc:	4602      	mov	r2, r0
 801e4ce:	68bb      	ldr	r3, [r7, #8]
 801e4d0:	1ad3      	subs	r3, r2, r3
 801e4d2:	2b02      	cmp	r3, #2
 801e4d4:	d911      	bls.n	801e4fa <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	685b      	ldr	r3, [r3, #4]
 801e4dc:	f003 0301 	and.w	r3, r3, #1
 801e4e0:	2b01      	cmp	r3, #1
 801e4e2:	d00a      	beq.n	801e4fa <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	2201      	movs	r2, #1
 801e4e8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	2202      	movs	r2, #2
 801e4ee:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	2200      	movs	r2, #0
 801e4f4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 801e4f6:	2301      	movs	r3, #1
 801e4f8:	e01c      	b.n	801e534 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	681b      	ldr	r3, [r3, #0]
 801e4fe:	685b      	ldr	r3, [r3, #4]
 801e500:	f003 0301 	and.w	r3, r3, #1
 801e504:	2b01      	cmp	r3, #1
 801e506:	d1df      	bne.n	801e4c8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801e508:	687b      	ldr	r3, [r7, #4]
 801e50a:	681b      	ldr	r3, [r3, #0]
 801e50c:	689a      	ldr	r2, [r3, #8]
 801e50e:	687b      	ldr	r3, [r7, #4]
 801e510:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	68da      	ldr	r2, [r3, #12]
 801e516:	683b      	ldr	r3, [r7, #0]
 801e518:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	2201      	movs	r2, #1
 801e51e:	715a      	strb	r2, [r3, #5]
 801e520:	e004      	b.n	801e52c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801e522:	687b      	ldr	r3, [r7, #4]
 801e524:	2204      	movs	r2, #4
 801e526:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 801e528:	2301      	movs	r3, #1
 801e52a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801e52c:	687b      	ldr	r3, [r7, #4]
 801e52e:	2200      	movs	r2, #0
 801e530:	711a      	strb	r2, [r3, #4]

  return status;
 801e532:	7bfb      	ldrb	r3, [r7, #15]
}
 801e534:	4618      	mov	r0, r3
 801e536:	3710      	adds	r7, #16
 801e538:	46bd      	mov	sp, r7
 801e53a:	bd80      	pop	{r7, pc}

0801e53c <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 801e53c:	b580      	push	{r7, lr}
 801e53e:	b082      	sub	sp, #8
 801e540:	af00      	add	r7, sp, #0
 801e542:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	330c      	adds	r3, #12
 801e548:	4619      	mov	r1, r3
 801e54a:	6878      	ldr	r0, [r7, #4]
 801e54c:	f7ff ffa0 	bl	801e490 <HAL_RNG_GenerateRandomNumber>
 801e550:	4603      	mov	r3, r0
 801e552:	2b00      	cmp	r3, #0
 801e554:	d102      	bne.n	801e55c <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	68db      	ldr	r3, [r3, #12]
 801e55a:	e000      	b.n	801e55e <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 801e55c:	2300      	movs	r3, #0
  }
}
 801e55e:	4618      	mov	r0, r3
 801e560:	3708      	adds	r7, #8
 801e562:	46bd      	mov	sp, r7
 801e564:	bd80      	pop	{r7, pc}

0801e566 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801e566:	b580      	push	{r7, lr}
 801e568:	b084      	sub	sp, #16
 801e56a:	af00      	add	r7, sp, #0
 801e56c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801e56e:	687b      	ldr	r3, [r7, #4]
 801e570:	2b00      	cmp	r3, #0
 801e572:	d101      	bne.n	801e578 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801e574:	2301      	movs	r3, #1
 801e576:	e09d      	b.n	801e6b4 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	d108      	bne.n	801e592 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	685b      	ldr	r3, [r3, #4]
 801e584:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e588:	d009      	beq.n	801e59e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801e58a:	687b      	ldr	r3, [r7, #4]
 801e58c:	2200      	movs	r2, #0
 801e58e:	61da      	str	r2, [r3, #28]
 801e590:	e005      	b.n	801e59e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	2200      	movs	r2, #0
 801e596:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	2200      	movs	r2, #0
 801e59c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	2200      	movs	r2, #0
 801e5a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e5aa:	b2db      	uxtb	r3, r3
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	d106      	bne.n	801e5be <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	2200      	movs	r2, #0
 801e5b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801e5b8:	6878      	ldr	r0, [r7, #4]
 801e5ba:	f7f9 fdb5 	bl	8018128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801e5be:	687b      	ldr	r3, [r7, #4]
 801e5c0:	2202      	movs	r2, #2
 801e5c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801e5c6:	687b      	ldr	r3, [r7, #4]
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	681a      	ldr	r2, [r3, #0]
 801e5cc:	687b      	ldr	r3, [r7, #4]
 801e5ce:	681b      	ldr	r3, [r3, #0]
 801e5d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e5d4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e5d6:	687b      	ldr	r3, [r7, #4]
 801e5d8:	68db      	ldr	r3, [r3, #12]
 801e5da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e5de:	d902      	bls.n	801e5e6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801e5e0:	2300      	movs	r3, #0
 801e5e2:	60fb      	str	r3, [r7, #12]
 801e5e4:	e002      	b.n	801e5ec <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801e5e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801e5ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	68db      	ldr	r3, [r3, #12]
 801e5f0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801e5f4:	d007      	beq.n	801e606 <HAL_SPI_Init+0xa0>
 801e5f6:	687b      	ldr	r3, [r7, #4]
 801e5f8:	68db      	ldr	r3, [r3, #12]
 801e5fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e5fe:	d002      	beq.n	801e606 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	2200      	movs	r2, #0
 801e604:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801e606:	687b      	ldr	r3, [r7, #4]
 801e608:	685b      	ldr	r3, [r3, #4]
 801e60a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801e60e:	687b      	ldr	r3, [r7, #4]
 801e610:	689b      	ldr	r3, [r3, #8]
 801e612:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801e616:	431a      	orrs	r2, r3
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	691b      	ldr	r3, [r3, #16]
 801e61c:	f003 0302 	and.w	r3, r3, #2
 801e620:	431a      	orrs	r2, r3
 801e622:	687b      	ldr	r3, [r7, #4]
 801e624:	695b      	ldr	r3, [r3, #20]
 801e626:	f003 0301 	and.w	r3, r3, #1
 801e62a:	431a      	orrs	r2, r3
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	699b      	ldr	r3, [r3, #24]
 801e630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801e634:	431a      	orrs	r2, r3
 801e636:	687b      	ldr	r3, [r7, #4]
 801e638:	69db      	ldr	r3, [r3, #28]
 801e63a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801e63e:	431a      	orrs	r2, r3
 801e640:	687b      	ldr	r3, [r7, #4]
 801e642:	6a1b      	ldr	r3, [r3, #32]
 801e644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e648:	ea42 0103 	orr.w	r1, r2, r3
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e650:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	681b      	ldr	r3, [r3, #0]
 801e658:	430a      	orrs	r2, r1
 801e65a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	699b      	ldr	r3, [r3, #24]
 801e660:	0c1b      	lsrs	r3, r3, #16
 801e662:	f003 0204 	and.w	r2, r3, #4
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e66a:	f003 0310 	and.w	r3, r3, #16
 801e66e:	431a      	orrs	r2, r3
 801e670:	687b      	ldr	r3, [r7, #4]
 801e672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e674:	f003 0308 	and.w	r3, r3, #8
 801e678:	431a      	orrs	r2, r3
 801e67a:	687b      	ldr	r3, [r7, #4]
 801e67c:	68db      	ldr	r3, [r3, #12]
 801e67e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801e682:	ea42 0103 	orr.w	r1, r2, r3
 801e686:	68fb      	ldr	r3, [r7, #12]
 801e688:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801e68c:	687b      	ldr	r3, [r7, #4]
 801e68e:	681b      	ldr	r3, [r3, #0]
 801e690:	430a      	orrs	r2, r1
 801e692:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	681b      	ldr	r3, [r3, #0]
 801e698:	69da      	ldr	r2, [r3, #28]
 801e69a:	687b      	ldr	r3, [r7, #4]
 801e69c:	681b      	ldr	r3, [r3, #0]
 801e69e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e6a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801e6a4:	687b      	ldr	r3, [r7, #4]
 801e6a6:	2200      	movs	r2, #0
 801e6a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	2201      	movs	r2, #1
 801e6ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801e6b2:	2300      	movs	r3, #0
}
 801e6b4:	4618      	mov	r0, r3
 801e6b6:	3710      	adds	r7, #16
 801e6b8:	46bd      	mov	sp, r7
 801e6ba:	bd80      	pop	{r7, pc}

0801e6bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e6bc:	b580      	push	{r7, lr}
 801e6be:	b088      	sub	sp, #32
 801e6c0:	af00      	add	r7, sp, #0
 801e6c2:	60f8      	str	r0, [r7, #12]
 801e6c4:	60b9      	str	r1, [r7, #8]
 801e6c6:	603b      	str	r3, [r7, #0]
 801e6c8:	4613      	mov	r3, r2
 801e6ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801e6cc:	2300      	movs	r3, #0
 801e6ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801e6d0:	68fb      	ldr	r3, [r7, #12]
 801e6d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801e6d6:	2b01      	cmp	r3, #1
 801e6d8:	d101      	bne.n	801e6de <HAL_SPI_Transmit+0x22>
 801e6da:	2302      	movs	r3, #2
 801e6dc:	e158      	b.n	801e990 <HAL_SPI_Transmit+0x2d4>
 801e6de:	68fb      	ldr	r3, [r7, #12]
 801e6e0:	2201      	movs	r2, #1
 801e6e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801e6e6:	f7fb fa77 	bl	8019bd8 <HAL_GetTick>
 801e6ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801e6ec:	88fb      	ldrh	r3, [r7, #6]
 801e6ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801e6f0:	68fb      	ldr	r3, [r7, #12]
 801e6f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e6f6:	b2db      	uxtb	r3, r3
 801e6f8:	2b01      	cmp	r3, #1
 801e6fa:	d002      	beq.n	801e702 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801e6fc:	2302      	movs	r3, #2
 801e6fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 801e700:	e13d      	b.n	801e97e <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801e702:	68bb      	ldr	r3, [r7, #8]
 801e704:	2b00      	cmp	r3, #0
 801e706:	d002      	beq.n	801e70e <HAL_SPI_Transmit+0x52>
 801e708:	88fb      	ldrh	r3, [r7, #6]
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	d102      	bne.n	801e714 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801e70e:	2301      	movs	r3, #1
 801e710:	77fb      	strb	r3, [r7, #31]
    goto error;
 801e712:	e134      	b.n	801e97e <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801e714:	68fb      	ldr	r3, [r7, #12]
 801e716:	2203      	movs	r2, #3
 801e718:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801e71c:	68fb      	ldr	r3, [r7, #12]
 801e71e:	2200      	movs	r2, #0
 801e720:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801e722:	68fb      	ldr	r3, [r7, #12]
 801e724:	68ba      	ldr	r2, [r7, #8]
 801e726:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801e728:	68fb      	ldr	r3, [r7, #12]
 801e72a:	88fa      	ldrh	r2, [r7, #6]
 801e72c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801e72e:	68fb      	ldr	r3, [r7, #12]
 801e730:	88fa      	ldrh	r2, [r7, #6]
 801e732:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801e734:	68fb      	ldr	r3, [r7, #12]
 801e736:	2200      	movs	r2, #0
 801e738:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801e73a:	68fb      	ldr	r3, [r7, #12]
 801e73c:	2200      	movs	r2, #0
 801e73e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801e742:	68fb      	ldr	r3, [r7, #12]
 801e744:	2200      	movs	r2, #0
 801e746:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801e74a:	68fb      	ldr	r3, [r7, #12]
 801e74c:	2200      	movs	r2, #0
 801e74e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801e750:	68fb      	ldr	r3, [r7, #12]
 801e752:	2200      	movs	r2, #0
 801e754:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e756:	68fb      	ldr	r3, [r7, #12]
 801e758:	689b      	ldr	r3, [r3, #8]
 801e75a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e75e:	d10f      	bne.n	801e780 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801e760:	68fb      	ldr	r3, [r7, #12]
 801e762:	681b      	ldr	r3, [r3, #0]
 801e764:	681a      	ldr	r2, [r3, #0]
 801e766:	68fb      	ldr	r3, [r7, #12]
 801e768:	681b      	ldr	r3, [r3, #0]
 801e76a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e76e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801e770:	68fb      	ldr	r3, [r7, #12]
 801e772:	681b      	ldr	r3, [r3, #0]
 801e774:	681a      	ldr	r2, [r3, #0]
 801e776:	68fb      	ldr	r3, [r7, #12]
 801e778:	681b      	ldr	r3, [r3, #0]
 801e77a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801e77e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e780:	68fb      	ldr	r3, [r7, #12]
 801e782:	681b      	ldr	r3, [r3, #0]
 801e784:	681b      	ldr	r3, [r3, #0]
 801e786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e78a:	2b40      	cmp	r3, #64	; 0x40
 801e78c:	d007      	beq.n	801e79e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e78e:	68fb      	ldr	r3, [r7, #12]
 801e790:	681b      	ldr	r3, [r3, #0]
 801e792:	681a      	ldr	r2, [r3, #0]
 801e794:	68fb      	ldr	r3, [r7, #12]
 801e796:	681b      	ldr	r3, [r3, #0]
 801e798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e79c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e79e:	68fb      	ldr	r3, [r7, #12]
 801e7a0:	68db      	ldr	r3, [r3, #12]
 801e7a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e7a6:	d94b      	bls.n	801e840 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e7a8:	68fb      	ldr	r3, [r7, #12]
 801e7aa:	685b      	ldr	r3, [r3, #4]
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	d002      	beq.n	801e7b6 <HAL_SPI_Transmit+0xfa>
 801e7b0:	8afb      	ldrh	r3, [r7, #22]
 801e7b2:	2b01      	cmp	r3, #1
 801e7b4:	d13e      	bne.n	801e834 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e7b6:	68fb      	ldr	r3, [r7, #12]
 801e7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7ba:	881a      	ldrh	r2, [r3, #0]
 801e7bc:	68fb      	ldr	r3, [r7, #12]
 801e7be:	681b      	ldr	r3, [r3, #0]
 801e7c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801e7c2:	68fb      	ldr	r3, [r7, #12]
 801e7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7c6:	1c9a      	adds	r2, r3, #2
 801e7c8:	68fb      	ldr	r3, [r7, #12]
 801e7ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801e7cc:	68fb      	ldr	r3, [r7, #12]
 801e7ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e7d0:	b29b      	uxth	r3, r3
 801e7d2:	3b01      	subs	r3, #1
 801e7d4:	b29a      	uxth	r2, r3
 801e7d6:	68fb      	ldr	r3, [r7, #12]
 801e7d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801e7da:	e02b      	b.n	801e834 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801e7dc:	68fb      	ldr	r3, [r7, #12]
 801e7de:	681b      	ldr	r3, [r3, #0]
 801e7e0:	689b      	ldr	r3, [r3, #8]
 801e7e2:	f003 0302 	and.w	r3, r3, #2
 801e7e6:	2b02      	cmp	r3, #2
 801e7e8:	d112      	bne.n	801e810 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e7ea:	68fb      	ldr	r3, [r7, #12]
 801e7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7ee:	881a      	ldrh	r2, [r3, #0]
 801e7f0:	68fb      	ldr	r3, [r7, #12]
 801e7f2:	681b      	ldr	r3, [r3, #0]
 801e7f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e7f6:	68fb      	ldr	r3, [r7, #12]
 801e7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7fa:	1c9a      	adds	r2, r3, #2
 801e7fc:	68fb      	ldr	r3, [r7, #12]
 801e7fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e800:	68fb      	ldr	r3, [r7, #12]
 801e802:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e804:	b29b      	uxth	r3, r3
 801e806:	3b01      	subs	r3, #1
 801e808:	b29a      	uxth	r2, r3
 801e80a:	68fb      	ldr	r3, [r7, #12]
 801e80c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e80e:	e011      	b.n	801e834 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e810:	f7fb f9e2 	bl	8019bd8 <HAL_GetTick>
 801e814:	4602      	mov	r2, r0
 801e816:	69bb      	ldr	r3, [r7, #24]
 801e818:	1ad3      	subs	r3, r2, r3
 801e81a:	683a      	ldr	r2, [r7, #0]
 801e81c:	429a      	cmp	r2, r3
 801e81e:	d803      	bhi.n	801e828 <HAL_SPI_Transmit+0x16c>
 801e820:	683b      	ldr	r3, [r7, #0]
 801e822:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e826:	d102      	bne.n	801e82e <HAL_SPI_Transmit+0x172>
 801e828:	683b      	ldr	r3, [r7, #0]
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	d102      	bne.n	801e834 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801e82e:	2303      	movs	r3, #3
 801e830:	77fb      	strb	r3, [r7, #31]
          goto error;
 801e832:	e0a4      	b.n	801e97e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801e834:	68fb      	ldr	r3, [r7, #12]
 801e836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e838:	b29b      	uxth	r3, r3
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d1ce      	bne.n	801e7dc <HAL_SPI_Transmit+0x120>
 801e83e:	e07c      	b.n	801e93a <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e840:	68fb      	ldr	r3, [r7, #12]
 801e842:	685b      	ldr	r3, [r3, #4]
 801e844:	2b00      	cmp	r3, #0
 801e846:	d002      	beq.n	801e84e <HAL_SPI_Transmit+0x192>
 801e848:	8afb      	ldrh	r3, [r7, #22]
 801e84a:	2b01      	cmp	r3, #1
 801e84c:	d170      	bne.n	801e930 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801e84e:	68fb      	ldr	r3, [r7, #12]
 801e850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e852:	b29b      	uxth	r3, r3
 801e854:	2b01      	cmp	r3, #1
 801e856:	d912      	bls.n	801e87e <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e858:	68fb      	ldr	r3, [r7, #12]
 801e85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e85c:	881a      	ldrh	r2, [r3, #0]
 801e85e:	68fb      	ldr	r3, [r7, #12]
 801e860:	681b      	ldr	r3, [r3, #0]
 801e862:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e864:	68fb      	ldr	r3, [r7, #12]
 801e866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e868:	1c9a      	adds	r2, r3, #2
 801e86a:	68fb      	ldr	r3, [r7, #12]
 801e86c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801e86e:	68fb      	ldr	r3, [r7, #12]
 801e870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e872:	b29b      	uxth	r3, r3
 801e874:	3b02      	subs	r3, #2
 801e876:	b29a      	uxth	r2, r3
 801e878:	68fb      	ldr	r3, [r7, #12]
 801e87a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e87c:	e058      	b.n	801e930 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801e87e:	68fb      	ldr	r3, [r7, #12]
 801e880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e882:	68fb      	ldr	r3, [r7, #12]
 801e884:	681b      	ldr	r3, [r3, #0]
 801e886:	330c      	adds	r3, #12
 801e888:	7812      	ldrb	r2, [r2, #0]
 801e88a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801e88c:	68fb      	ldr	r3, [r7, #12]
 801e88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e890:	1c5a      	adds	r2, r3, #1
 801e892:	68fb      	ldr	r3, [r7, #12]
 801e894:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e896:	68fb      	ldr	r3, [r7, #12]
 801e898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e89a:	b29b      	uxth	r3, r3
 801e89c:	3b01      	subs	r3, #1
 801e89e:	b29a      	uxth	r2, r3
 801e8a0:	68fb      	ldr	r3, [r7, #12]
 801e8a2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801e8a4:	e044      	b.n	801e930 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801e8a6:	68fb      	ldr	r3, [r7, #12]
 801e8a8:	681b      	ldr	r3, [r3, #0]
 801e8aa:	689b      	ldr	r3, [r3, #8]
 801e8ac:	f003 0302 	and.w	r3, r3, #2
 801e8b0:	2b02      	cmp	r3, #2
 801e8b2:	d12b      	bne.n	801e90c <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801e8b4:	68fb      	ldr	r3, [r7, #12]
 801e8b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e8b8:	b29b      	uxth	r3, r3
 801e8ba:	2b01      	cmp	r3, #1
 801e8bc:	d912      	bls.n	801e8e4 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e8be:	68fb      	ldr	r3, [r7, #12]
 801e8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8c2:	881a      	ldrh	r2, [r3, #0]
 801e8c4:	68fb      	ldr	r3, [r7, #12]
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801e8ca:	68fb      	ldr	r3, [r7, #12]
 801e8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8ce:	1c9a      	adds	r2, r3, #2
 801e8d0:	68fb      	ldr	r3, [r7, #12]
 801e8d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801e8d4:	68fb      	ldr	r3, [r7, #12]
 801e8d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e8d8:	b29b      	uxth	r3, r3
 801e8da:	3b02      	subs	r3, #2
 801e8dc:	b29a      	uxth	r2, r3
 801e8de:	68fb      	ldr	r3, [r7, #12]
 801e8e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e8e2:	e025      	b.n	801e930 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801e8e4:	68fb      	ldr	r3, [r7, #12]
 801e8e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e8e8:	68fb      	ldr	r3, [r7, #12]
 801e8ea:	681b      	ldr	r3, [r3, #0]
 801e8ec:	330c      	adds	r3, #12
 801e8ee:	7812      	ldrb	r2, [r2, #0]
 801e8f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801e8f2:	68fb      	ldr	r3, [r7, #12]
 801e8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8f6:	1c5a      	adds	r2, r3, #1
 801e8f8:	68fb      	ldr	r3, [r7, #12]
 801e8fa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801e8fc:	68fb      	ldr	r3, [r7, #12]
 801e8fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e900:	b29b      	uxth	r3, r3
 801e902:	3b01      	subs	r3, #1
 801e904:	b29a      	uxth	r2, r3
 801e906:	68fb      	ldr	r3, [r7, #12]
 801e908:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e90a:	e011      	b.n	801e930 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e90c:	f7fb f964 	bl	8019bd8 <HAL_GetTick>
 801e910:	4602      	mov	r2, r0
 801e912:	69bb      	ldr	r3, [r7, #24]
 801e914:	1ad3      	subs	r3, r2, r3
 801e916:	683a      	ldr	r2, [r7, #0]
 801e918:	429a      	cmp	r2, r3
 801e91a:	d803      	bhi.n	801e924 <HAL_SPI_Transmit+0x268>
 801e91c:	683b      	ldr	r3, [r7, #0]
 801e91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e922:	d102      	bne.n	801e92a <HAL_SPI_Transmit+0x26e>
 801e924:	683b      	ldr	r3, [r7, #0]
 801e926:	2b00      	cmp	r3, #0
 801e928:	d102      	bne.n	801e930 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801e92a:	2303      	movs	r3, #3
 801e92c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801e92e:	e026      	b.n	801e97e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801e930:	68fb      	ldr	r3, [r7, #12]
 801e932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e934:	b29b      	uxth	r3, r3
 801e936:	2b00      	cmp	r3, #0
 801e938:	d1b5      	bne.n	801e8a6 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e93a:	69ba      	ldr	r2, [r7, #24]
 801e93c:	6839      	ldr	r1, [r7, #0]
 801e93e:	68f8      	ldr	r0, [r7, #12]
 801e940:	f000 fd08 	bl	801f354 <SPI_EndRxTxTransaction>
 801e944:	4603      	mov	r3, r0
 801e946:	2b00      	cmp	r3, #0
 801e948:	d002      	beq.n	801e950 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e94a:	68fb      	ldr	r3, [r7, #12]
 801e94c:	2220      	movs	r2, #32
 801e94e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801e950:	68fb      	ldr	r3, [r7, #12]
 801e952:	689b      	ldr	r3, [r3, #8]
 801e954:	2b00      	cmp	r3, #0
 801e956:	d10a      	bne.n	801e96e <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801e958:	2300      	movs	r3, #0
 801e95a:	613b      	str	r3, [r7, #16]
 801e95c:	68fb      	ldr	r3, [r7, #12]
 801e95e:	681b      	ldr	r3, [r3, #0]
 801e960:	68db      	ldr	r3, [r3, #12]
 801e962:	613b      	str	r3, [r7, #16]
 801e964:	68fb      	ldr	r3, [r7, #12]
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	689b      	ldr	r3, [r3, #8]
 801e96a:	613b      	str	r3, [r7, #16]
 801e96c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e96e:	68fb      	ldr	r3, [r7, #12]
 801e970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e972:	2b00      	cmp	r3, #0
 801e974:	d002      	beq.n	801e97c <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801e976:	2301      	movs	r3, #1
 801e978:	77fb      	strb	r3, [r7, #31]
 801e97a:	e000      	b.n	801e97e <HAL_SPI_Transmit+0x2c2>
  }

error:
 801e97c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e97e:	68fb      	ldr	r3, [r7, #12]
 801e980:	2201      	movs	r2, #1
 801e982:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801e986:	68fb      	ldr	r3, [r7, #12]
 801e988:	2200      	movs	r2, #0
 801e98a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e98e:	7ffb      	ldrb	r3, [r7, #31]
}
 801e990:	4618      	mov	r0, r3
 801e992:	3720      	adds	r7, #32
 801e994:	46bd      	mov	sp, r7
 801e996:	bd80      	pop	{r7, pc}

0801e998 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e998:	b580      	push	{r7, lr}
 801e99a:	b088      	sub	sp, #32
 801e99c:	af02      	add	r7, sp, #8
 801e99e:	60f8      	str	r0, [r7, #12]
 801e9a0:	60b9      	str	r1, [r7, #8]
 801e9a2:	603b      	str	r3, [r7, #0]
 801e9a4:	4613      	mov	r3, r2
 801e9a6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801e9a8:	2300      	movs	r3, #0
 801e9aa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801e9ac:	68fb      	ldr	r3, [r7, #12]
 801e9ae:	685b      	ldr	r3, [r3, #4]
 801e9b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e9b4:	d112      	bne.n	801e9dc <HAL_SPI_Receive+0x44>
 801e9b6:	68fb      	ldr	r3, [r7, #12]
 801e9b8:	689b      	ldr	r3, [r3, #8]
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	d10e      	bne.n	801e9dc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801e9be:	68fb      	ldr	r3, [r7, #12]
 801e9c0:	2204      	movs	r2, #4
 801e9c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801e9c6:	88fa      	ldrh	r2, [r7, #6]
 801e9c8:	683b      	ldr	r3, [r7, #0]
 801e9ca:	9300      	str	r3, [sp, #0]
 801e9cc:	4613      	mov	r3, r2
 801e9ce:	68ba      	ldr	r2, [r7, #8]
 801e9d0:	68b9      	ldr	r1, [r7, #8]
 801e9d2:	68f8      	ldr	r0, [r7, #12]
 801e9d4:	f000 f910 	bl	801ebf8 <HAL_SPI_TransmitReceive>
 801e9d8:	4603      	mov	r3, r0
 801e9da:	e109      	b.n	801ebf0 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801e9dc:	68fb      	ldr	r3, [r7, #12]
 801e9de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801e9e2:	2b01      	cmp	r3, #1
 801e9e4:	d101      	bne.n	801e9ea <HAL_SPI_Receive+0x52>
 801e9e6:	2302      	movs	r3, #2
 801e9e8:	e102      	b.n	801ebf0 <HAL_SPI_Receive+0x258>
 801e9ea:	68fb      	ldr	r3, [r7, #12]
 801e9ec:	2201      	movs	r2, #1
 801e9ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801e9f2:	f7fb f8f1 	bl	8019bd8 <HAL_GetTick>
 801e9f6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801e9f8:	68fb      	ldr	r3, [r7, #12]
 801e9fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e9fe:	b2db      	uxtb	r3, r3
 801ea00:	2b01      	cmp	r3, #1
 801ea02:	d002      	beq.n	801ea0a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801ea04:	2302      	movs	r3, #2
 801ea06:	75fb      	strb	r3, [r7, #23]
    goto error;
 801ea08:	e0e9      	b.n	801ebde <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801ea0a:	68bb      	ldr	r3, [r7, #8]
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	d002      	beq.n	801ea16 <HAL_SPI_Receive+0x7e>
 801ea10:	88fb      	ldrh	r3, [r7, #6]
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	d102      	bne.n	801ea1c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801ea16:	2301      	movs	r3, #1
 801ea18:	75fb      	strb	r3, [r7, #23]
    goto error;
 801ea1a:	e0e0      	b.n	801ebde <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801ea1c:	68fb      	ldr	r3, [r7, #12]
 801ea1e:	2204      	movs	r2, #4
 801ea20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801ea24:	68fb      	ldr	r3, [r7, #12]
 801ea26:	2200      	movs	r2, #0
 801ea28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801ea2a:	68fb      	ldr	r3, [r7, #12]
 801ea2c:	68ba      	ldr	r2, [r7, #8]
 801ea2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801ea30:	68fb      	ldr	r3, [r7, #12]
 801ea32:	88fa      	ldrh	r2, [r7, #6]
 801ea34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801ea38:	68fb      	ldr	r3, [r7, #12]
 801ea3a:	88fa      	ldrh	r2, [r7, #6]
 801ea3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801ea40:	68fb      	ldr	r3, [r7, #12]
 801ea42:	2200      	movs	r2, #0
 801ea44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801ea46:	68fb      	ldr	r3, [r7, #12]
 801ea48:	2200      	movs	r2, #0
 801ea4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801ea4c:	68fb      	ldr	r3, [r7, #12]
 801ea4e:	2200      	movs	r2, #0
 801ea50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801ea52:	68fb      	ldr	r3, [r7, #12]
 801ea54:	2200      	movs	r2, #0
 801ea56:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801ea58:	68fb      	ldr	r3, [r7, #12]
 801ea5a:	2200      	movs	r2, #0
 801ea5c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ea5e:	68fb      	ldr	r3, [r7, #12]
 801ea60:	68db      	ldr	r3, [r3, #12]
 801ea62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801ea66:	d908      	bls.n	801ea7a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ea68:	68fb      	ldr	r3, [r7, #12]
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	685a      	ldr	r2, [r3, #4]
 801ea6e:	68fb      	ldr	r3, [r7, #12]
 801ea70:	681b      	ldr	r3, [r3, #0]
 801ea72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801ea76:	605a      	str	r2, [r3, #4]
 801ea78:	e007      	b.n	801ea8a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ea7a:	68fb      	ldr	r3, [r7, #12]
 801ea7c:	681b      	ldr	r3, [r3, #0]
 801ea7e:	685a      	ldr	r2, [r3, #4]
 801ea80:	68fb      	ldr	r3, [r7, #12]
 801ea82:	681b      	ldr	r3, [r3, #0]
 801ea84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ea88:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ea8a:	68fb      	ldr	r3, [r7, #12]
 801ea8c:	689b      	ldr	r3, [r3, #8]
 801ea8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ea92:	d10f      	bne.n	801eab4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801ea94:	68fb      	ldr	r3, [r7, #12]
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	681a      	ldr	r2, [r3, #0]
 801ea9a:	68fb      	ldr	r3, [r7, #12]
 801ea9c:	681b      	ldr	r3, [r3, #0]
 801ea9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801eaa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801eaa4:	68fb      	ldr	r3, [r7, #12]
 801eaa6:	681b      	ldr	r3, [r3, #0]
 801eaa8:	681a      	ldr	r2, [r3, #0]
 801eaaa:	68fb      	ldr	r3, [r7, #12]
 801eaac:	681b      	ldr	r3, [r3, #0]
 801eaae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801eab2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801eab4:	68fb      	ldr	r3, [r7, #12]
 801eab6:	681b      	ldr	r3, [r3, #0]
 801eab8:	681b      	ldr	r3, [r3, #0]
 801eaba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801eabe:	2b40      	cmp	r3, #64	; 0x40
 801eac0:	d007      	beq.n	801ead2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801eac2:	68fb      	ldr	r3, [r7, #12]
 801eac4:	681b      	ldr	r3, [r3, #0]
 801eac6:	681a      	ldr	r2, [r3, #0]
 801eac8:	68fb      	ldr	r3, [r7, #12]
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ead0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801ead2:	68fb      	ldr	r3, [r7, #12]
 801ead4:	68db      	ldr	r3, [r3, #12]
 801ead6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801eada:	d867      	bhi.n	801ebac <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801eadc:	e030      	b.n	801eb40 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801eade:	68fb      	ldr	r3, [r7, #12]
 801eae0:	681b      	ldr	r3, [r3, #0]
 801eae2:	689b      	ldr	r3, [r3, #8]
 801eae4:	f003 0301 	and.w	r3, r3, #1
 801eae8:	2b01      	cmp	r3, #1
 801eaea:	d117      	bne.n	801eb1c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801eaec:	68fb      	ldr	r3, [r7, #12]
 801eaee:	681b      	ldr	r3, [r3, #0]
 801eaf0:	f103 020c 	add.w	r2, r3, #12
 801eaf4:	68fb      	ldr	r3, [r7, #12]
 801eaf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eaf8:	7812      	ldrb	r2, [r2, #0]
 801eafa:	b2d2      	uxtb	r2, r2
 801eafc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801eafe:	68fb      	ldr	r3, [r7, #12]
 801eb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eb02:	1c5a      	adds	r2, r3, #1
 801eb04:	68fb      	ldr	r3, [r7, #12]
 801eb06:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801eb08:	68fb      	ldr	r3, [r7, #12]
 801eb0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801eb0e:	b29b      	uxth	r3, r3
 801eb10:	3b01      	subs	r3, #1
 801eb12:	b29a      	uxth	r2, r3
 801eb14:	68fb      	ldr	r3, [r7, #12]
 801eb16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801eb1a:	e011      	b.n	801eb40 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801eb1c:	f7fb f85c 	bl	8019bd8 <HAL_GetTick>
 801eb20:	4602      	mov	r2, r0
 801eb22:	693b      	ldr	r3, [r7, #16]
 801eb24:	1ad3      	subs	r3, r2, r3
 801eb26:	683a      	ldr	r2, [r7, #0]
 801eb28:	429a      	cmp	r2, r3
 801eb2a:	d803      	bhi.n	801eb34 <HAL_SPI_Receive+0x19c>
 801eb2c:	683b      	ldr	r3, [r7, #0]
 801eb2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eb32:	d102      	bne.n	801eb3a <HAL_SPI_Receive+0x1a2>
 801eb34:	683b      	ldr	r3, [r7, #0]
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	d102      	bne.n	801eb40 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801eb3a:	2303      	movs	r3, #3
 801eb3c:	75fb      	strb	r3, [r7, #23]
          goto error;
 801eb3e:	e04e      	b.n	801ebde <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801eb40:	68fb      	ldr	r3, [r7, #12]
 801eb42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801eb46:	b29b      	uxth	r3, r3
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d1c8      	bne.n	801eade <HAL_SPI_Receive+0x146>
 801eb4c:	e034      	b.n	801ebb8 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801eb4e:	68fb      	ldr	r3, [r7, #12]
 801eb50:	681b      	ldr	r3, [r3, #0]
 801eb52:	689b      	ldr	r3, [r3, #8]
 801eb54:	f003 0301 	and.w	r3, r3, #1
 801eb58:	2b01      	cmp	r3, #1
 801eb5a:	d115      	bne.n	801eb88 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801eb5c:	68fb      	ldr	r3, [r7, #12]
 801eb5e:	681b      	ldr	r3, [r3, #0]
 801eb60:	68da      	ldr	r2, [r3, #12]
 801eb62:	68fb      	ldr	r3, [r7, #12]
 801eb64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eb66:	b292      	uxth	r2, r2
 801eb68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801eb6a:	68fb      	ldr	r3, [r7, #12]
 801eb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801eb6e:	1c9a      	adds	r2, r3, #2
 801eb70:	68fb      	ldr	r3, [r7, #12]
 801eb72:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801eb74:	68fb      	ldr	r3, [r7, #12]
 801eb76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801eb7a:	b29b      	uxth	r3, r3
 801eb7c:	3b01      	subs	r3, #1
 801eb7e:	b29a      	uxth	r2, r3
 801eb80:	68fb      	ldr	r3, [r7, #12]
 801eb82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801eb86:	e011      	b.n	801ebac <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801eb88:	f7fb f826 	bl	8019bd8 <HAL_GetTick>
 801eb8c:	4602      	mov	r2, r0
 801eb8e:	693b      	ldr	r3, [r7, #16]
 801eb90:	1ad3      	subs	r3, r2, r3
 801eb92:	683a      	ldr	r2, [r7, #0]
 801eb94:	429a      	cmp	r2, r3
 801eb96:	d803      	bhi.n	801eba0 <HAL_SPI_Receive+0x208>
 801eb98:	683b      	ldr	r3, [r7, #0]
 801eb9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eb9e:	d102      	bne.n	801eba6 <HAL_SPI_Receive+0x20e>
 801eba0:	683b      	ldr	r3, [r7, #0]
 801eba2:	2b00      	cmp	r3, #0
 801eba4:	d102      	bne.n	801ebac <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801eba6:	2303      	movs	r3, #3
 801eba8:	75fb      	strb	r3, [r7, #23]
          goto error;
 801ebaa:	e018      	b.n	801ebde <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801ebac:	68fb      	ldr	r3, [r7, #12]
 801ebae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ebb2:	b29b      	uxth	r3, r3
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	d1ca      	bne.n	801eb4e <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801ebb8:	693a      	ldr	r2, [r7, #16]
 801ebba:	6839      	ldr	r1, [r7, #0]
 801ebbc:	68f8      	ldr	r0, [r7, #12]
 801ebbe:	f000 fb4d 	bl	801f25c <SPI_EndRxTransaction>
 801ebc2:	4603      	mov	r3, r0
 801ebc4:	2b00      	cmp	r3, #0
 801ebc6:	d002      	beq.n	801ebce <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801ebc8:	68fb      	ldr	r3, [r7, #12]
 801ebca:	2220      	movs	r2, #32
 801ebcc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801ebce:	68fb      	ldr	r3, [r7, #12]
 801ebd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ebd2:	2b00      	cmp	r3, #0
 801ebd4:	d002      	beq.n	801ebdc <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801ebd6:	2301      	movs	r3, #1
 801ebd8:	75fb      	strb	r3, [r7, #23]
 801ebda:	e000      	b.n	801ebde <HAL_SPI_Receive+0x246>
  }

error :
 801ebdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801ebde:	68fb      	ldr	r3, [r7, #12]
 801ebe0:	2201      	movs	r2, #1
 801ebe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801ebe6:	68fb      	ldr	r3, [r7, #12]
 801ebe8:	2200      	movs	r2, #0
 801ebea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801ebee:	7dfb      	ldrb	r3, [r7, #23]
}
 801ebf0:	4618      	mov	r0, r3
 801ebf2:	3718      	adds	r7, #24
 801ebf4:	46bd      	mov	sp, r7
 801ebf6:	bd80      	pop	{r7, pc}

0801ebf8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801ebf8:	b580      	push	{r7, lr}
 801ebfa:	b08a      	sub	sp, #40	; 0x28
 801ebfc:	af00      	add	r7, sp, #0
 801ebfe:	60f8      	str	r0, [r7, #12]
 801ec00:	60b9      	str	r1, [r7, #8]
 801ec02:	607a      	str	r2, [r7, #4]
 801ec04:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801ec06:	2301      	movs	r3, #1
 801ec08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801ec0a:	2300      	movs	r3, #0
 801ec0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801ec10:	68fb      	ldr	r3, [r7, #12]
 801ec12:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801ec16:	2b01      	cmp	r3, #1
 801ec18:	d101      	bne.n	801ec1e <HAL_SPI_TransmitReceive+0x26>
 801ec1a:	2302      	movs	r3, #2
 801ec1c:	e1fb      	b.n	801f016 <HAL_SPI_TransmitReceive+0x41e>
 801ec1e:	68fb      	ldr	r3, [r7, #12]
 801ec20:	2201      	movs	r2, #1
 801ec22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801ec26:	f7fa ffd7 	bl	8019bd8 <HAL_GetTick>
 801ec2a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801ec2c:	68fb      	ldr	r3, [r7, #12]
 801ec2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801ec32:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801ec34:	68fb      	ldr	r3, [r7, #12]
 801ec36:	685b      	ldr	r3, [r3, #4]
 801ec38:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801ec3a:	887b      	ldrh	r3, [r7, #2]
 801ec3c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801ec3e:	887b      	ldrh	r3, [r7, #2]
 801ec40:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801ec42:	7efb      	ldrb	r3, [r7, #27]
 801ec44:	2b01      	cmp	r3, #1
 801ec46:	d00e      	beq.n	801ec66 <HAL_SPI_TransmitReceive+0x6e>
 801ec48:	697b      	ldr	r3, [r7, #20]
 801ec4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ec4e:	d106      	bne.n	801ec5e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801ec50:	68fb      	ldr	r3, [r7, #12]
 801ec52:	689b      	ldr	r3, [r3, #8]
 801ec54:	2b00      	cmp	r3, #0
 801ec56:	d102      	bne.n	801ec5e <HAL_SPI_TransmitReceive+0x66>
 801ec58:	7efb      	ldrb	r3, [r7, #27]
 801ec5a:	2b04      	cmp	r3, #4
 801ec5c:	d003      	beq.n	801ec66 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801ec5e:	2302      	movs	r3, #2
 801ec60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801ec64:	e1cd      	b.n	801f002 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801ec66:	68bb      	ldr	r3, [r7, #8]
 801ec68:	2b00      	cmp	r3, #0
 801ec6a:	d005      	beq.n	801ec78 <HAL_SPI_TransmitReceive+0x80>
 801ec6c:	687b      	ldr	r3, [r7, #4]
 801ec6e:	2b00      	cmp	r3, #0
 801ec70:	d002      	beq.n	801ec78 <HAL_SPI_TransmitReceive+0x80>
 801ec72:	887b      	ldrh	r3, [r7, #2]
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	d103      	bne.n	801ec80 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801ec78:	2301      	movs	r3, #1
 801ec7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801ec7e:	e1c0      	b.n	801f002 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801ec80:	68fb      	ldr	r3, [r7, #12]
 801ec82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801ec86:	b2db      	uxtb	r3, r3
 801ec88:	2b04      	cmp	r3, #4
 801ec8a:	d003      	beq.n	801ec94 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801ec8c:	68fb      	ldr	r3, [r7, #12]
 801ec8e:	2205      	movs	r2, #5
 801ec90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801ec94:	68fb      	ldr	r3, [r7, #12]
 801ec96:	2200      	movs	r2, #0
 801ec98:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801ec9a:	68fb      	ldr	r3, [r7, #12]
 801ec9c:	687a      	ldr	r2, [r7, #4]
 801ec9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801eca0:	68fb      	ldr	r3, [r7, #12]
 801eca2:	887a      	ldrh	r2, [r7, #2]
 801eca4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801eca8:	68fb      	ldr	r3, [r7, #12]
 801ecaa:	887a      	ldrh	r2, [r7, #2]
 801ecac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801ecb0:	68fb      	ldr	r3, [r7, #12]
 801ecb2:	68ba      	ldr	r2, [r7, #8]
 801ecb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801ecb6:	68fb      	ldr	r3, [r7, #12]
 801ecb8:	887a      	ldrh	r2, [r7, #2]
 801ecba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801ecbc:	68fb      	ldr	r3, [r7, #12]
 801ecbe:	887a      	ldrh	r2, [r7, #2]
 801ecc0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801ecc2:	68fb      	ldr	r3, [r7, #12]
 801ecc4:	2200      	movs	r2, #0
 801ecc6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801ecc8:	68fb      	ldr	r3, [r7, #12]
 801ecca:	2200      	movs	r2, #0
 801eccc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801ecce:	68fb      	ldr	r3, [r7, #12]
 801ecd0:	68db      	ldr	r3, [r3, #12]
 801ecd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801ecd6:	d802      	bhi.n	801ecde <HAL_SPI_TransmitReceive+0xe6>
 801ecd8:	8a3b      	ldrh	r3, [r7, #16]
 801ecda:	2b01      	cmp	r3, #1
 801ecdc:	d908      	bls.n	801ecf0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ecde:	68fb      	ldr	r3, [r7, #12]
 801ece0:	681b      	ldr	r3, [r3, #0]
 801ece2:	685a      	ldr	r2, [r3, #4]
 801ece4:	68fb      	ldr	r3, [r7, #12]
 801ece6:	681b      	ldr	r3, [r3, #0]
 801ece8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801ecec:	605a      	str	r2, [r3, #4]
 801ecee:	e007      	b.n	801ed00 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ecf0:	68fb      	ldr	r3, [r7, #12]
 801ecf2:	681b      	ldr	r3, [r3, #0]
 801ecf4:	685a      	ldr	r2, [r3, #4]
 801ecf6:	68fb      	ldr	r3, [r7, #12]
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ecfe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801ed00:	68fb      	ldr	r3, [r7, #12]
 801ed02:	681b      	ldr	r3, [r3, #0]
 801ed04:	681b      	ldr	r3, [r3, #0]
 801ed06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ed0a:	2b40      	cmp	r3, #64	; 0x40
 801ed0c:	d007      	beq.n	801ed1e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801ed0e:	68fb      	ldr	r3, [r7, #12]
 801ed10:	681b      	ldr	r3, [r3, #0]
 801ed12:	681a      	ldr	r2, [r3, #0]
 801ed14:	68fb      	ldr	r3, [r7, #12]
 801ed16:	681b      	ldr	r3, [r3, #0]
 801ed18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ed1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ed1e:	68fb      	ldr	r3, [r7, #12]
 801ed20:	68db      	ldr	r3, [r3, #12]
 801ed22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801ed26:	d97c      	bls.n	801ee22 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ed28:	68fb      	ldr	r3, [r7, #12]
 801ed2a:	685b      	ldr	r3, [r3, #4]
 801ed2c:	2b00      	cmp	r3, #0
 801ed2e:	d002      	beq.n	801ed36 <HAL_SPI_TransmitReceive+0x13e>
 801ed30:	8a7b      	ldrh	r3, [r7, #18]
 801ed32:	2b01      	cmp	r3, #1
 801ed34:	d169      	bne.n	801ee0a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ed36:	68fb      	ldr	r3, [r7, #12]
 801ed38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed3a:	881a      	ldrh	r2, [r3, #0]
 801ed3c:	68fb      	ldr	r3, [r7, #12]
 801ed3e:	681b      	ldr	r3, [r3, #0]
 801ed40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801ed42:	68fb      	ldr	r3, [r7, #12]
 801ed44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed46:	1c9a      	adds	r2, r3, #2
 801ed48:	68fb      	ldr	r3, [r7, #12]
 801ed4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801ed4c:	68fb      	ldr	r3, [r7, #12]
 801ed4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ed50:	b29b      	uxth	r3, r3
 801ed52:	3b01      	subs	r3, #1
 801ed54:	b29a      	uxth	r2, r3
 801ed56:	68fb      	ldr	r3, [r7, #12]
 801ed58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ed5a:	e056      	b.n	801ee0a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801ed5c:	68fb      	ldr	r3, [r7, #12]
 801ed5e:	681b      	ldr	r3, [r3, #0]
 801ed60:	689b      	ldr	r3, [r3, #8]
 801ed62:	f003 0302 	and.w	r3, r3, #2
 801ed66:	2b02      	cmp	r3, #2
 801ed68:	d11b      	bne.n	801eda2 <HAL_SPI_TransmitReceive+0x1aa>
 801ed6a:	68fb      	ldr	r3, [r7, #12]
 801ed6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ed6e:	b29b      	uxth	r3, r3
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	d016      	beq.n	801eda2 <HAL_SPI_TransmitReceive+0x1aa>
 801ed74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed76:	2b01      	cmp	r3, #1
 801ed78:	d113      	bne.n	801eda2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ed7a:	68fb      	ldr	r3, [r7, #12]
 801ed7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed7e:	881a      	ldrh	r2, [r3, #0]
 801ed80:	68fb      	ldr	r3, [r7, #12]
 801ed82:	681b      	ldr	r3, [r3, #0]
 801ed84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801ed86:	68fb      	ldr	r3, [r7, #12]
 801ed88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed8a:	1c9a      	adds	r2, r3, #2
 801ed8c:	68fb      	ldr	r3, [r7, #12]
 801ed8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801ed90:	68fb      	ldr	r3, [r7, #12]
 801ed92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ed94:	b29b      	uxth	r3, r3
 801ed96:	3b01      	subs	r3, #1
 801ed98:	b29a      	uxth	r2, r3
 801ed9a:	68fb      	ldr	r3, [r7, #12]
 801ed9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801ed9e:	2300      	movs	r3, #0
 801eda0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801eda2:	68fb      	ldr	r3, [r7, #12]
 801eda4:	681b      	ldr	r3, [r3, #0]
 801eda6:	689b      	ldr	r3, [r3, #8]
 801eda8:	f003 0301 	and.w	r3, r3, #1
 801edac:	2b01      	cmp	r3, #1
 801edae:	d11c      	bne.n	801edea <HAL_SPI_TransmitReceive+0x1f2>
 801edb0:	68fb      	ldr	r3, [r7, #12]
 801edb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801edb6:	b29b      	uxth	r3, r3
 801edb8:	2b00      	cmp	r3, #0
 801edba:	d016      	beq.n	801edea <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801edbc:	68fb      	ldr	r3, [r7, #12]
 801edbe:	681b      	ldr	r3, [r3, #0]
 801edc0:	68da      	ldr	r2, [r3, #12]
 801edc2:	68fb      	ldr	r3, [r7, #12]
 801edc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801edc6:	b292      	uxth	r2, r2
 801edc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801edca:	68fb      	ldr	r3, [r7, #12]
 801edcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801edce:	1c9a      	adds	r2, r3, #2
 801edd0:	68fb      	ldr	r3, [r7, #12]
 801edd2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801edd4:	68fb      	ldr	r3, [r7, #12]
 801edd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801edda:	b29b      	uxth	r3, r3
 801eddc:	3b01      	subs	r3, #1
 801edde:	b29a      	uxth	r2, r3
 801ede0:	68fb      	ldr	r3, [r7, #12]
 801ede2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801ede6:	2301      	movs	r3, #1
 801ede8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801edea:	f7fa fef5 	bl	8019bd8 <HAL_GetTick>
 801edee:	4602      	mov	r2, r0
 801edf0:	69fb      	ldr	r3, [r7, #28]
 801edf2:	1ad3      	subs	r3, r2, r3
 801edf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801edf6:	429a      	cmp	r2, r3
 801edf8:	d807      	bhi.n	801ee0a <HAL_SPI_TransmitReceive+0x212>
 801edfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801edfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee00:	d003      	beq.n	801ee0a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801ee02:	2303      	movs	r3, #3
 801ee04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801ee08:	e0fb      	b.n	801f002 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ee0a:	68fb      	ldr	r3, [r7, #12]
 801ee0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ee0e:	b29b      	uxth	r3, r3
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	d1a3      	bne.n	801ed5c <HAL_SPI_TransmitReceive+0x164>
 801ee14:	68fb      	ldr	r3, [r7, #12]
 801ee16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ee1a:	b29b      	uxth	r3, r3
 801ee1c:	2b00      	cmp	r3, #0
 801ee1e:	d19d      	bne.n	801ed5c <HAL_SPI_TransmitReceive+0x164>
 801ee20:	e0df      	b.n	801efe2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ee22:	68fb      	ldr	r3, [r7, #12]
 801ee24:	685b      	ldr	r3, [r3, #4]
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	d003      	beq.n	801ee32 <HAL_SPI_TransmitReceive+0x23a>
 801ee2a:	8a7b      	ldrh	r3, [r7, #18]
 801ee2c:	2b01      	cmp	r3, #1
 801ee2e:	f040 80cb 	bne.w	801efc8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801ee32:	68fb      	ldr	r3, [r7, #12]
 801ee34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ee36:	b29b      	uxth	r3, r3
 801ee38:	2b01      	cmp	r3, #1
 801ee3a:	d912      	bls.n	801ee62 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ee3c:	68fb      	ldr	r3, [r7, #12]
 801ee3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee40:	881a      	ldrh	r2, [r3, #0]
 801ee42:	68fb      	ldr	r3, [r7, #12]
 801ee44:	681b      	ldr	r3, [r3, #0]
 801ee46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801ee48:	68fb      	ldr	r3, [r7, #12]
 801ee4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee4c:	1c9a      	adds	r2, r3, #2
 801ee4e:	68fb      	ldr	r3, [r7, #12]
 801ee50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801ee52:	68fb      	ldr	r3, [r7, #12]
 801ee54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ee56:	b29b      	uxth	r3, r3
 801ee58:	3b02      	subs	r3, #2
 801ee5a:	b29a      	uxth	r2, r3
 801ee5c:	68fb      	ldr	r3, [r7, #12]
 801ee5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 801ee60:	e0b2      	b.n	801efc8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801ee62:	68fb      	ldr	r3, [r7, #12]
 801ee64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ee66:	68fb      	ldr	r3, [r7, #12]
 801ee68:	681b      	ldr	r3, [r3, #0]
 801ee6a:	330c      	adds	r3, #12
 801ee6c:	7812      	ldrb	r2, [r2, #0]
 801ee6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801ee70:	68fb      	ldr	r3, [r7, #12]
 801ee72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ee74:	1c5a      	adds	r2, r3, #1
 801ee76:	68fb      	ldr	r3, [r7, #12]
 801ee78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801ee7a:	68fb      	ldr	r3, [r7, #12]
 801ee7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ee7e:	b29b      	uxth	r3, r3
 801ee80:	3b01      	subs	r3, #1
 801ee82:	b29a      	uxth	r2, r3
 801ee84:	68fb      	ldr	r3, [r7, #12]
 801ee86:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ee88:	e09e      	b.n	801efc8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801ee8a:	68fb      	ldr	r3, [r7, #12]
 801ee8c:	681b      	ldr	r3, [r3, #0]
 801ee8e:	689b      	ldr	r3, [r3, #8]
 801ee90:	f003 0302 	and.w	r3, r3, #2
 801ee94:	2b02      	cmp	r3, #2
 801ee96:	d134      	bne.n	801ef02 <HAL_SPI_TransmitReceive+0x30a>
 801ee98:	68fb      	ldr	r3, [r7, #12]
 801ee9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ee9c:	b29b      	uxth	r3, r3
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	d02f      	beq.n	801ef02 <HAL_SPI_TransmitReceive+0x30a>
 801eea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eea4:	2b01      	cmp	r3, #1
 801eea6:	d12c      	bne.n	801ef02 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801eea8:	68fb      	ldr	r3, [r7, #12]
 801eeaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801eeac:	b29b      	uxth	r3, r3
 801eeae:	2b01      	cmp	r3, #1
 801eeb0:	d912      	bls.n	801eed8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801eeb2:	68fb      	ldr	r3, [r7, #12]
 801eeb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eeb6:	881a      	ldrh	r2, [r3, #0]
 801eeb8:	68fb      	ldr	r3, [r7, #12]
 801eeba:	681b      	ldr	r3, [r3, #0]
 801eebc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801eebe:	68fb      	ldr	r3, [r7, #12]
 801eec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eec2:	1c9a      	adds	r2, r3, #2
 801eec4:	68fb      	ldr	r3, [r7, #12]
 801eec6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801eec8:	68fb      	ldr	r3, [r7, #12]
 801eeca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801eecc:	b29b      	uxth	r3, r3
 801eece:	3b02      	subs	r3, #2
 801eed0:	b29a      	uxth	r2, r3
 801eed2:	68fb      	ldr	r3, [r7, #12]
 801eed4:	87da      	strh	r2, [r3, #62]	; 0x3e
 801eed6:	e012      	b.n	801eefe <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801eed8:	68fb      	ldr	r3, [r7, #12]
 801eeda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801eedc:	68fb      	ldr	r3, [r7, #12]
 801eede:	681b      	ldr	r3, [r3, #0]
 801eee0:	330c      	adds	r3, #12
 801eee2:	7812      	ldrb	r2, [r2, #0]
 801eee4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801eee6:	68fb      	ldr	r3, [r7, #12]
 801eee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eeea:	1c5a      	adds	r2, r3, #1
 801eeec:	68fb      	ldr	r3, [r7, #12]
 801eeee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801eef0:	68fb      	ldr	r3, [r7, #12]
 801eef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801eef4:	b29b      	uxth	r3, r3
 801eef6:	3b01      	subs	r3, #1
 801eef8:	b29a      	uxth	r2, r3
 801eefa:	68fb      	ldr	r3, [r7, #12]
 801eefc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801eefe:	2300      	movs	r3, #0
 801ef00:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801ef02:	68fb      	ldr	r3, [r7, #12]
 801ef04:	681b      	ldr	r3, [r3, #0]
 801ef06:	689b      	ldr	r3, [r3, #8]
 801ef08:	f003 0301 	and.w	r3, r3, #1
 801ef0c:	2b01      	cmp	r3, #1
 801ef0e:	d148      	bne.n	801efa2 <HAL_SPI_TransmitReceive+0x3aa>
 801ef10:	68fb      	ldr	r3, [r7, #12]
 801ef12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ef16:	b29b      	uxth	r3, r3
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	d042      	beq.n	801efa2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801ef1c:	68fb      	ldr	r3, [r7, #12]
 801ef1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ef22:	b29b      	uxth	r3, r3
 801ef24:	2b01      	cmp	r3, #1
 801ef26:	d923      	bls.n	801ef70 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801ef28:	68fb      	ldr	r3, [r7, #12]
 801ef2a:	681b      	ldr	r3, [r3, #0]
 801ef2c:	68da      	ldr	r2, [r3, #12]
 801ef2e:	68fb      	ldr	r3, [r7, #12]
 801ef30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef32:	b292      	uxth	r2, r2
 801ef34:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801ef36:	68fb      	ldr	r3, [r7, #12]
 801ef38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef3a:	1c9a      	adds	r2, r3, #2
 801ef3c:	68fb      	ldr	r3, [r7, #12]
 801ef3e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801ef40:	68fb      	ldr	r3, [r7, #12]
 801ef42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ef46:	b29b      	uxth	r3, r3
 801ef48:	3b02      	subs	r3, #2
 801ef4a:	b29a      	uxth	r2, r3
 801ef4c:	68fb      	ldr	r3, [r7, #12]
 801ef4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801ef52:	68fb      	ldr	r3, [r7, #12]
 801ef54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ef58:	b29b      	uxth	r3, r3
 801ef5a:	2b01      	cmp	r3, #1
 801ef5c:	d81f      	bhi.n	801ef9e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ef5e:	68fb      	ldr	r3, [r7, #12]
 801ef60:	681b      	ldr	r3, [r3, #0]
 801ef62:	685a      	ldr	r2, [r3, #4]
 801ef64:	68fb      	ldr	r3, [r7, #12]
 801ef66:	681b      	ldr	r3, [r3, #0]
 801ef68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ef6c:	605a      	str	r2, [r3, #4]
 801ef6e:	e016      	b.n	801ef9e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801ef70:	68fb      	ldr	r3, [r7, #12]
 801ef72:	681b      	ldr	r3, [r3, #0]
 801ef74:	f103 020c 	add.w	r2, r3, #12
 801ef78:	68fb      	ldr	r3, [r7, #12]
 801ef7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef7c:	7812      	ldrb	r2, [r2, #0]
 801ef7e:	b2d2      	uxtb	r2, r2
 801ef80:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801ef82:	68fb      	ldr	r3, [r7, #12]
 801ef84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef86:	1c5a      	adds	r2, r3, #1
 801ef88:	68fb      	ldr	r3, [r7, #12]
 801ef8a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801ef8c:	68fb      	ldr	r3, [r7, #12]
 801ef8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ef92:	b29b      	uxth	r3, r3
 801ef94:	3b01      	subs	r3, #1
 801ef96:	b29a      	uxth	r2, r3
 801ef98:	68fb      	ldr	r3, [r7, #12]
 801ef9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801ef9e:	2301      	movs	r3, #1
 801efa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801efa2:	f7fa fe19 	bl	8019bd8 <HAL_GetTick>
 801efa6:	4602      	mov	r2, r0
 801efa8:	69fb      	ldr	r3, [r7, #28]
 801efaa:	1ad3      	subs	r3, r2, r3
 801efac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801efae:	429a      	cmp	r2, r3
 801efb0:	d803      	bhi.n	801efba <HAL_SPI_TransmitReceive+0x3c2>
 801efb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801efb8:	d102      	bne.n	801efc0 <HAL_SPI_TransmitReceive+0x3c8>
 801efba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d103      	bne.n	801efc8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801efc0:	2303      	movs	r3, #3
 801efc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801efc6:	e01c      	b.n	801f002 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801efc8:	68fb      	ldr	r3, [r7, #12]
 801efca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801efcc:	b29b      	uxth	r3, r3
 801efce:	2b00      	cmp	r3, #0
 801efd0:	f47f af5b 	bne.w	801ee8a <HAL_SPI_TransmitReceive+0x292>
 801efd4:	68fb      	ldr	r3, [r7, #12]
 801efd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801efda:	b29b      	uxth	r3, r3
 801efdc:	2b00      	cmp	r3, #0
 801efde:	f47f af54 	bne.w	801ee8a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801efe2:	69fa      	ldr	r2, [r7, #28]
 801efe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801efe6:	68f8      	ldr	r0, [r7, #12]
 801efe8:	f000 f9b4 	bl	801f354 <SPI_EndRxTxTransaction>
 801efec:	4603      	mov	r3, r0
 801efee:	2b00      	cmp	r3, #0
 801eff0:	d006      	beq.n	801f000 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801eff2:	2301      	movs	r3, #1
 801eff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801eff8:	68fb      	ldr	r3, [r7, #12]
 801effa:	2220      	movs	r2, #32
 801effc:	661a      	str	r2, [r3, #96]	; 0x60
 801effe:	e000      	b.n	801f002 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801f000:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801f002:	68fb      	ldr	r3, [r7, #12]
 801f004:	2201      	movs	r2, #1
 801f006:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801f00a:	68fb      	ldr	r3, [r7, #12]
 801f00c:	2200      	movs	r2, #0
 801f00e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801f012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801f016:	4618      	mov	r0, r3
 801f018:	3728      	adds	r7, #40	; 0x28
 801f01a:	46bd      	mov	sp, r7
 801f01c:	bd80      	pop	{r7, pc}
	...

0801f020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801f020:	b580      	push	{r7, lr}
 801f022:	b088      	sub	sp, #32
 801f024:	af00      	add	r7, sp, #0
 801f026:	60f8      	str	r0, [r7, #12]
 801f028:	60b9      	str	r1, [r7, #8]
 801f02a:	603b      	str	r3, [r7, #0]
 801f02c:	4613      	mov	r3, r2
 801f02e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801f030:	f7fa fdd2 	bl	8019bd8 <HAL_GetTick>
 801f034:	4602      	mov	r2, r0
 801f036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f038:	1a9b      	subs	r3, r3, r2
 801f03a:	683a      	ldr	r2, [r7, #0]
 801f03c:	4413      	add	r3, r2
 801f03e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801f040:	f7fa fdca 	bl	8019bd8 <HAL_GetTick>
 801f044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801f046:	4b39      	ldr	r3, [pc, #228]	; (801f12c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801f048:	681b      	ldr	r3, [r3, #0]
 801f04a:	015b      	lsls	r3, r3, #5
 801f04c:	0d1b      	lsrs	r3, r3, #20
 801f04e:	69fa      	ldr	r2, [r7, #28]
 801f050:	fb02 f303 	mul.w	r3, r2, r3
 801f054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801f056:	e054      	b.n	801f102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801f058:	683b      	ldr	r3, [r7, #0]
 801f05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f05e:	d050      	beq.n	801f102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801f060:	f7fa fdba 	bl	8019bd8 <HAL_GetTick>
 801f064:	4602      	mov	r2, r0
 801f066:	69bb      	ldr	r3, [r7, #24]
 801f068:	1ad3      	subs	r3, r2, r3
 801f06a:	69fa      	ldr	r2, [r7, #28]
 801f06c:	429a      	cmp	r2, r3
 801f06e:	d902      	bls.n	801f076 <SPI_WaitFlagStateUntilTimeout+0x56>
 801f070:	69fb      	ldr	r3, [r7, #28]
 801f072:	2b00      	cmp	r3, #0
 801f074:	d13d      	bne.n	801f0f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801f076:	68fb      	ldr	r3, [r7, #12]
 801f078:	681b      	ldr	r3, [r3, #0]
 801f07a:	685a      	ldr	r2, [r3, #4]
 801f07c:	68fb      	ldr	r3, [r7, #12]
 801f07e:	681b      	ldr	r3, [r3, #0]
 801f080:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801f084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801f086:	68fb      	ldr	r3, [r7, #12]
 801f088:	685b      	ldr	r3, [r3, #4]
 801f08a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f08e:	d111      	bne.n	801f0b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 801f090:	68fb      	ldr	r3, [r7, #12]
 801f092:	689b      	ldr	r3, [r3, #8]
 801f094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f098:	d004      	beq.n	801f0a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801f09a:	68fb      	ldr	r3, [r7, #12]
 801f09c:	689b      	ldr	r3, [r3, #8]
 801f09e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f0a2:	d107      	bne.n	801f0b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801f0a4:	68fb      	ldr	r3, [r7, #12]
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	681a      	ldr	r2, [r3, #0]
 801f0aa:	68fb      	ldr	r3, [r7, #12]
 801f0ac:	681b      	ldr	r3, [r3, #0]
 801f0ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801f0b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801f0b4:	68fb      	ldr	r3, [r7, #12]
 801f0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f0b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f0bc:	d10f      	bne.n	801f0de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801f0be:	68fb      	ldr	r3, [r7, #12]
 801f0c0:	681b      	ldr	r3, [r3, #0]
 801f0c2:	681a      	ldr	r2, [r3, #0]
 801f0c4:	68fb      	ldr	r3, [r7, #12]
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801f0cc:	601a      	str	r2, [r3, #0]
 801f0ce:	68fb      	ldr	r3, [r7, #12]
 801f0d0:	681b      	ldr	r3, [r3, #0]
 801f0d2:	681a      	ldr	r2, [r3, #0]
 801f0d4:	68fb      	ldr	r3, [r7, #12]
 801f0d6:	681b      	ldr	r3, [r3, #0]
 801f0d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801f0dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801f0de:	68fb      	ldr	r3, [r7, #12]
 801f0e0:	2201      	movs	r2, #1
 801f0e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801f0e6:	68fb      	ldr	r3, [r7, #12]
 801f0e8:	2200      	movs	r2, #0
 801f0ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801f0ee:	2303      	movs	r3, #3
 801f0f0:	e017      	b.n	801f122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801f0f2:	697b      	ldr	r3, [r7, #20]
 801f0f4:	2b00      	cmp	r3, #0
 801f0f6:	d101      	bne.n	801f0fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801f0f8:	2300      	movs	r3, #0
 801f0fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801f0fc:	697b      	ldr	r3, [r7, #20]
 801f0fe:	3b01      	subs	r3, #1
 801f100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801f102:	68fb      	ldr	r3, [r7, #12]
 801f104:	681b      	ldr	r3, [r3, #0]
 801f106:	689a      	ldr	r2, [r3, #8]
 801f108:	68bb      	ldr	r3, [r7, #8]
 801f10a:	4013      	ands	r3, r2
 801f10c:	68ba      	ldr	r2, [r7, #8]
 801f10e:	429a      	cmp	r2, r3
 801f110:	bf0c      	ite	eq
 801f112:	2301      	moveq	r3, #1
 801f114:	2300      	movne	r3, #0
 801f116:	b2db      	uxtb	r3, r3
 801f118:	461a      	mov	r2, r3
 801f11a:	79fb      	ldrb	r3, [r7, #7]
 801f11c:	429a      	cmp	r2, r3
 801f11e:	d19b      	bne.n	801f058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801f120:	2300      	movs	r3, #0
}
 801f122:	4618      	mov	r0, r3
 801f124:	3720      	adds	r7, #32
 801f126:	46bd      	mov	sp, r7
 801f128:	bd80      	pop	{r7, pc}
 801f12a:	bf00      	nop
 801f12c:	2000031c 	.word	0x2000031c

0801f130 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801f130:	b580      	push	{r7, lr}
 801f132:	b08a      	sub	sp, #40	; 0x28
 801f134:	af00      	add	r7, sp, #0
 801f136:	60f8      	str	r0, [r7, #12]
 801f138:	60b9      	str	r1, [r7, #8]
 801f13a:	607a      	str	r2, [r7, #4]
 801f13c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801f13e:	2300      	movs	r3, #0
 801f140:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801f142:	f7fa fd49 	bl	8019bd8 <HAL_GetTick>
 801f146:	4602      	mov	r2, r0
 801f148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f14a:	1a9b      	subs	r3, r3, r2
 801f14c:	683a      	ldr	r2, [r7, #0]
 801f14e:	4413      	add	r3, r2
 801f150:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801f152:	f7fa fd41 	bl	8019bd8 <HAL_GetTick>
 801f156:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801f158:	68fb      	ldr	r3, [r7, #12]
 801f15a:	681b      	ldr	r3, [r3, #0]
 801f15c:	330c      	adds	r3, #12
 801f15e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801f160:	4b3d      	ldr	r3, [pc, #244]	; (801f258 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801f162:	681a      	ldr	r2, [r3, #0]
 801f164:	4613      	mov	r3, r2
 801f166:	009b      	lsls	r3, r3, #2
 801f168:	4413      	add	r3, r2
 801f16a:	00da      	lsls	r2, r3, #3
 801f16c:	1ad3      	subs	r3, r2, r3
 801f16e:	0d1b      	lsrs	r3, r3, #20
 801f170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f172:	fb02 f303 	mul.w	r3, r2, r3
 801f176:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801f178:	e060      	b.n	801f23c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801f17a:	68bb      	ldr	r3, [r7, #8]
 801f17c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801f180:	d107      	bne.n	801f192 <SPI_WaitFifoStateUntilTimeout+0x62>
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	2b00      	cmp	r3, #0
 801f186:	d104      	bne.n	801f192 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801f188:	69fb      	ldr	r3, [r7, #28]
 801f18a:	781b      	ldrb	r3, [r3, #0]
 801f18c:	b2db      	uxtb	r3, r3
 801f18e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801f190:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801f192:	683b      	ldr	r3, [r7, #0]
 801f194:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f198:	d050      	beq.n	801f23c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801f19a:	f7fa fd1d 	bl	8019bd8 <HAL_GetTick>
 801f19e:	4602      	mov	r2, r0
 801f1a0:	6a3b      	ldr	r3, [r7, #32]
 801f1a2:	1ad3      	subs	r3, r2, r3
 801f1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f1a6:	429a      	cmp	r2, r3
 801f1a8:	d902      	bls.n	801f1b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 801f1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d13d      	bne.n	801f22c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801f1b0:	68fb      	ldr	r3, [r7, #12]
 801f1b2:	681b      	ldr	r3, [r3, #0]
 801f1b4:	685a      	ldr	r2, [r3, #4]
 801f1b6:	68fb      	ldr	r3, [r7, #12]
 801f1b8:	681b      	ldr	r3, [r3, #0]
 801f1ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801f1be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801f1c0:	68fb      	ldr	r3, [r7, #12]
 801f1c2:	685b      	ldr	r3, [r3, #4]
 801f1c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f1c8:	d111      	bne.n	801f1ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 801f1ca:	68fb      	ldr	r3, [r7, #12]
 801f1cc:	689b      	ldr	r3, [r3, #8]
 801f1ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f1d2:	d004      	beq.n	801f1de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801f1d4:	68fb      	ldr	r3, [r7, #12]
 801f1d6:	689b      	ldr	r3, [r3, #8]
 801f1d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f1dc:	d107      	bne.n	801f1ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801f1de:	68fb      	ldr	r3, [r7, #12]
 801f1e0:	681b      	ldr	r3, [r3, #0]
 801f1e2:	681a      	ldr	r2, [r3, #0]
 801f1e4:	68fb      	ldr	r3, [r7, #12]
 801f1e6:	681b      	ldr	r3, [r3, #0]
 801f1e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801f1ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801f1ee:	68fb      	ldr	r3, [r7, #12]
 801f1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f1f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f1f6:	d10f      	bne.n	801f218 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801f1f8:	68fb      	ldr	r3, [r7, #12]
 801f1fa:	681b      	ldr	r3, [r3, #0]
 801f1fc:	681a      	ldr	r2, [r3, #0]
 801f1fe:	68fb      	ldr	r3, [r7, #12]
 801f200:	681b      	ldr	r3, [r3, #0]
 801f202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801f206:	601a      	str	r2, [r3, #0]
 801f208:	68fb      	ldr	r3, [r7, #12]
 801f20a:	681b      	ldr	r3, [r3, #0]
 801f20c:	681a      	ldr	r2, [r3, #0]
 801f20e:	68fb      	ldr	r3, [r7, #12]
 801f210:	681b      	ldr	r3, [r3, #0]
 801f212:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801f216:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801f218:	68fb      	ldr	r3, [r7, #12]
 801f21a:	2201      	movs	r2, #1
 801f21c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801f220:	68fb      	ldr	r3, [r7, #12]
 801f222:	2200      	movs	r2, #0
 801f224:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801f228:	2303      	movs	r3, #3
 801f22a:	e010      	b.n	801f24e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801f22c:	69bb      	ldr	r3, [r7, #24]
 801f22e:	2b00      	cmp	r3, #0
 801f230:	d101      	bne.n	801f236 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801f232:	2300      	movs	r3, #0
 801f234:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801f236:	69bb      	ldr	r3, [r7, #24]
 801f238:	3b01      	subs	r3, #1
 801f23a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801f23c:	68fb      	ldr	r3, [r7, #12]
 801f23e:	681b      	ldr	r3, [r3, #0]
 801f240:	689a      	ldr	r2, [r3, #8]
 801f242:	68bb      	ldr	r3, [r7, #8]
 801f244:	4013      	ands	r3, r2
 801f246:	687a      	ldr	r2, [r7, #4]
 801f248:	429a      	cmp	r2, r3
 801f24a:	d196      	bne.n	801f17a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801f24c:	2300      	movs	r3, #0
}
 801f24e:	4618      	mov	r0, r3
 801f250:	3728      	adds	r7, #40	; 0x28
 801f252:	46bd      	mov	sp, r7
 801f254:	bd80      	pop	{r7, pc}
 801f256:	bf00      	nop
 801f258:	2000031c 	.word	0x2000031c

0801f25c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801f25c:	b580      	push	{r7, lr}
 801f25e:	b088      	sub	sp, #32
 801f260:	af02      	add	r7, sp, #8
 801f262:	60f8      	str	r0, [r7, #12]
 801f264:	60b9      	str	r1, [r7, #8]
 801f266:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801f268:	68fb      	ldr	r3, [r7, #12]
 801f26a:	685b      	ldr	r3, [r3, #4]
 801f26c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f270:	d111      	bne.n	801f296 <SPI_EndRxTransaction+0x3a>
 801f272:	68fb      	ldr	r3, [r7, #12]
 801f274:	689b      	ldr	r3, [r3, #8]
 801f276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f27a:	d004      	beq.n	801f286 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801f27c:	68fb      	ldr	r3, [r7, #12]
 801f27e:	689b      	ldr	r3, [r3, #8]
 801f280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f284:	d107      	bne.n	801f296 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801f286:	68fb      	ldr	r3, [r7, #12]
 801f288:	681b      	ldr	r3, [r3, #0]
 801f28a:	681a      	ldr	r2, [r3, #0]
 801f28c:	68fb      	ldr	r3, [r7, #12]
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801f294:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801f296:	68fb      	ldr	r3, [r7, #12]
 801f298:	685b      	ldr	r3, [r3, #4]
 801f29a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f29e:	d112      	bne.n	801f2c6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	9300      	str	r3, [sp, #0]
 801f2a4:	68bb      	ldr	r3, [r7, #8]
 801f2a6:	2200      	movs	r2, #0
 801f2a8:	2180      	movs	r1, #128	; 0x80
 801f2aa:	68f8      	ldr	r0, [r7, #12]
 801f2ac:	f7ff feb8 	bl	801f020 <SPI_WaitFlagStateUntilTimeout>
 801f2b0:	4603      	mov	r3, r0
 801f2b2:	2b00      	cmp	r3, #0
 801f2b4:	d021      	beq.n	801f2fa <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801f2b6:	68fb      	ldr	r3, [r7, #12]
 801f2b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f2ba:	f043 0220 	orr.w	r2, r3, #32
 801f2be:	68fb      	ldr	r3, [r7, #12]
 801f2c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801f2c2:	2303      	movs	r3, #3
 801f2c4:	e03d      	b.n	801f342 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801f2c6:	4b21      	ldr	r3, [pc, #132]	; (801f34c <SPI_EndRxTransaction+0xf0>)
 801f2c8:	681b      	ldr	r3, [r3, #0]
 801f2ca:	4a21      	ldr	r2, [pc, #132]	; (801f350 <SPI_EndRxTransaction+0xf4>)
 801f2cc:	fba2 2303 	umull	r2, r3, r2, r3
 801f2d0:	0d5b      	lsrs	r3, r3, #21
 801f2d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f2d6:	fb02 f303 	mul.w	r3, r2, r3
 801f2da:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801f2dc:	697b      	ldr	r3, [r7, #20]
 801f2de:	2b00      	cmp	r3, #0
 801f2e0:	d00a      	beq.n	801f2f8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 801f2e2:	697b      	ldr	r3, [r7, #20]
 801f2e4:	3b01      	subs	r3, #1
 801f2e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801f2e8:	68fb      	ldr	r3, [r7, #12]
 801f2ea:	681b      	ldr	r3, [r3, #0]
 801f2ec:	689b      	ldr	r3, [r3, #8]
 801f2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f2f2:	2b80      	cmp	r3, #128	; 0x80
 801f2f4:	d0f2      	beq.n	801f2dc <SPI_EndRxTransaction+0x80>
 801f2f6:	e000      	b.n	801f2fa <SPI_EndRxTransaction+0x9e>
        break;
 801f2f8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801f2fa:	68fb      	ldr	r3, [r7, #12]
 801f2fc:	685b      	ldr	r3, [r3, #4]
 801f2fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f302:	d11d      	bne.n	801f340 <SPI_EndRxTransaction+0xe4>
 801f304:	68fb      	ldr	r3, [r7, #12]
 801f306:	689b      	ldr	r3, [r3, #8]
 801f308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f30c:	d004      	beq.n	801f318 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801f30e:	68fb      	ldr	r3, [r7, #12]
 801f310:	689b      	ldr	r3, [r3, #8]
 801f312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f316:	d113      	bne.n	801f340 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801f318:	687b      	ldr	r3, [r7, #4]
 801f31a:	9300      	str	r3, [sp, #0]
 801f31c:	68bb      	ldr	r3, [r7, #8]
 801f31e:	2200      	movs	r2, #0
 801f320:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801f324:	68f8      	ldr	r0, [r7, #12]
 801f326:	f7ff ff03 	bl	801f130 <SPI_WaitFifoStateUntilTimeout>
 801f32a:	4603      	mov	r3, r0
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	d007      	beq.n	801f340 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801f330:	68fb      	ldr	r3, [r7, #12]
 801f332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f334:	f043 0220 	orr.w	r2, r3, #32
 801f338:	68fb      	ldr	r3, [r7, #12]
 801f33a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801f33c:	2303      	movs	r3, #3
 801f33e:	e000      	b.n	801f342 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801f340:	2300      	movs	r3, #0
}
 801f342:	4618      	mov	r0, r3
 801f344:	3718      	adds	r7, #24
 801f346:	46bd      	mov	sp, r7
 801f348:	bd80      	pop	{r7, pc}
 801f34a:	bf00      	nop
 801f34c:	2000031c 	.word	0x2000031c
 801f350:	165e9f81 	.word	0x165e9f81

0801f354 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801f354:	b580      	push	{r7, lr}
 801f356:	b088      	sub	sp, #32
 801f358:	af02      	add	r7, sp, #8
 801f35a:	60f8      	str	r0, [r7, #12]
 801f35c:	60b9      	str	r1, [r7, #8]
 801f35e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801f360:	687b      	ldr	r3, [r7, #4]
 801f362:	9300      	str	r3, [sp, #0]
 801f364:	68bb      	ldr	r3, [r7, #8]
 801f366:	2200      	movs	r2, #0
 801f368:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801f36c:	68f8      	ldr	r0, [r7, #12]
 801f36e:	f7ff fedf 	bl	801f130 <SPI_WaitFifoStateUntilTimeout>
 801f372:	4603      	mov	r3, r0
 801f374:	2b00      	cmp	r3, #0
 801f376:	d007      	beq.n	801f388 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801f378:	68fb      	ldr	r3, [r7, #12]
 801f37a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f37c:	f043 0220 	orr.w	r2, r3, #32
 801f380:	68fb      	ldr	r3, [r7, #12]
 801f382:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801f384:	2303      	movs	r3, #3
 801f386:	e046      	b.n	801f416 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801f388:	4b25      	ldr	r3, [pc, #148]	; (801f420 <SPI_EndRxTxTransaction+0xcc>)
 801f38a:	681b      	ldr	r3, [r3, #0]
 801f38c:	4a25      	ldr	r2, [pc, #148]	; (801f424 <SPI_EndRxTxTransaction+0xd0>)
 801f38e:	fba2 2303 	umull	r2, r3, r2, r3
 801f392:	0d5b      	lsrs	r3, r3, #21
 801f394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f398:	fb02 f303 	mul.w	r3, r2, r3
 801f39c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801f39e:	68fb      	ldr	r3, [r7, #12]
 801f3a0:	685b      	ldr	r3, [r3, #4]
 801f3a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f3a6:	d112      	bne.n	801f3ce <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	9300      	str	r3, [sp, #0]
 801f3ac:	68bb      	ldr	r3, [r7, #8]
 801f3ae:	2200      	movs	r2, #0
 801f3b0:	2180      	movs	r1, #128	; 0x80
 801f3b2:	68f8      	ldr	r0, [r7, #12]
 801f3b4:	f7ff fe34 	bl	801f020 <SPI_WaitFlagStateUntilTimeout>
 801f3b8:	4603      	mov	r3, r0
 801f3ba:	2b00      	cmp	r3, #0
 801f3bc:	d016      	beq.n	801f3ec <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801f3be:	68fb      	ldr	r3, [r7, #12]
 801f3c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f3c2:	f043 0220 	orr.w	r2, r3, #32
 801f3c6:	68fb      	ldr	r3, [r7, #12]
 801f3c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801f3ca:	2303      	movs	r3, #3
 801f3cc:	e023      	b.n	801f416 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801f3ce:	697b      	ldr	r3, [r7, #20]
 801f3d0:	2b00      	cmp	r3, #0
 801f3d2:	d00a      	beq.n	801f3ea <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 801f3d4:	697b      	ldr	r3, [r7, #20]
 801f3d6:	3b01      	subs	r3, #1
 801f3d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801f3da:	68fb      	ldr	r3, [r7, #12]
 801f3dc:	681b      	ldr	r3, [r3, #0]
 801f3de:	689b      	ldr	r3, [r3, #8]
 801f3e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f3e4:	2b80      	cmp	r3, #128	; 0x80
 801f3e6:	d0f2      	beq.n	801f3ce <SPI_EndRxTxTransaction+0x7a>
 801f3e8:	e000      	b.n	801f3ec <SPI_EndRxTxTransaction+0x98>
        break;
 801f3ea:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801f3ec:	687b      	ldr	r3, [r7, #4]
 801f3ee:	9300      	str	r3, [sp, #0]
 801f3f0:	68bb      	ldr	r3, [r7, #8]
 801f3f2:	2200      	movs	r2, #0
 801f3f4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801f3f8:	68f8      	ldr	r0, [r7, #12]
 801f3fa:	f7ff fe99 	bl	801f130 <SPI_WaitFifoStateUntilTimeout>
 801f3fe:	4603      	mov	r3, r0
 801f400:	2b00      	cmp	r3, #0
 801f402:	d007      	beq.n	801f414 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801f404:	68fb      	ldr	r3, [r7, #12]
 801f406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f408:	f043 0220 	orr.w	r2, r3, #32
 801f40c:	68fb      	ldr	r3, [r7, #12]
 801f40e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801f410:	2303      	movs	r3, #3
 801f412:	e000      	b.n	801f416 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 801f414:	2300      	movs	r3, #0
}
 801f416:	4618      	mov	r0, r3
 801f418:	3718      	adds	r7, #24
 801f41a:	46bd      	mov	sp, r7
 801f41c:	bd80      	pop	{r7, pc}
 801f41e:	bf00      	nop
 801f420:	2000031c 	.word	0x2000031c
 801f424:	165e9f81 	.word	0x165e9f81

0801f428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801f428:	b580      	push	{r7, lr}
 801f42a:	b082      	sub	sp, #8
 801f42c:	af00      	add	r7, sp, #0
 801f42e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801f430:	687b      	ldr	r3, [r7, #4]
 801f432:	681b      	ldr	r3, [r3, #0]
 801f434:	691b      	ldr	r3, [r3, #16]
 801f436:	f003 0302 	and.w	r3, r3, #2
 801f43a:	2b02      	cmp	r3, #2
 801f43c:	d128      	bne.n	801f490 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801f43e:	687b      	ldr	r3, [r7, #4]
 801f440:	681b      	ldr	r3, [r3, #0]
 801f442:	68db      	ldr	r3, [r3, #12]
 801f444:	f003 0302 	and.w	r3, r3, #2
 801f448:	2b02      	cmp	r3, #2
 801f44a:	d121      	bne.n	801f490 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801f44c:	687b      	ldr	r3, [r7, #4]
 801f44e:	681b      	ldr	r3, [r3, #0]
 801f450:	f06f 0202 	mvn.w	r2, #2
 801f454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801f456:	687b      	ldr	r3, [r7, #4]
 801f458:	2201      	movs	r2, #1
 801f45a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801f45c:	687b      	ldr	r3, [r7, #4]
 801f45e:	681b      	ldr	r3, [r3, #0]
 801f460:	699b      	ldr	r3, [r3, #24]
 801f462:	f003 0303 	and.w	r3, r3, #3
 801f466:	2b00      	cmp	r3, #0
 801f468:	d005      	beq.n	801f476 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801f46a:	687b      	ldr	r3, [r7, #4]
 801f46c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801f470:	6878      	ldr	r0, [r7, #4]
 801f472:	4798      	blx	r3
 801f474:	e009      	b.n	801f48a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801f476:	687b      	ldr	r3, [r7, #4]
 801f478:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801f47c:	6878      	ldr	r0, [r7, #4]
 801f47e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801f486:	6878      	ldr	r0, [r7, #4]
 801f488:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f48a:	687b      	ldr	r3, [r7, #4]
 801f48c:	2200      	movs	r2, #0
 801f48e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	681b      	ldr	r3, [r3, #0]
 801f494:	691b      	ldr	r3, [r3, #16]
 801f496:	f003 0304 	and.w	r3, r3, #4
 801f49a:	2b04      	cmp	r3, #4
 801f49c:	d128      	bne.n	801f4f0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801f49e:	687b      	ldr	r3, [r7, #4]
 801f4a0:	681b      	ldr	r3, [r3, #0]
 801f4a2:	68db      	ldr	r3, [r3, #12]
 801f4a4:	f003 0304 	and.w	r3, r3, #4
 801f4a8:	2b04      	cmp	r3, #4
 801f4aa:	d121      	bne.n	801f4f0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	681b      	ldr	r3, [r3, #0]
 801f4b0:	f06f 0204 	mvn.w	r2, #4
 801f4b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801f4b6:	687b      	ldr	r3, [r7, #4]
 801f4b8:	2202      	movs	r2, #2
 801f4ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801f4bc:	687b      	ldr	r3, [r7, #4]
 801f4be:	681b      	ldr	r3, [r3, #0]
 801f4c0:	699b      	ldr	r3, [r3, #24]
 801f4c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f4c6:	2b00      	cmp	r3, #0
 801f4c8:	d005      	beq.n	801f4d6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801f4d0:	6878      	ldr	r0, [r7, #4]
 801f4d2:	4798      	blx	r3
 801f4d4:	e009      	b.n	801f4ea <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801f4d6:	687b      	ldr	r3, [r7, #4]
 801f4d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801f4dc:	6878      	ldr	r0, [r7, #4]
 801f4de:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801f4e6:	6878      	ldr	r0, [r7, #4]
 801f4e8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	2200      	movs	r2, #0
 801f4ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	681b      	ldr	r3, [r3, #0]
 801f4f4:	691b      	ldr	r3, [r3, #16]
 801f4f6:	f003 0308 	and.w	r3, r3, #8
 801f4fa:	2b08      	cmp	r3, #8
 801f4fc:	d128      	bne.n	801f550 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801f4fe:	687b      	ldr	r3, [r7, #4]
 801f500:	681b      	ldr	r3, [r3, #0]
 801f502:	68db      	ldr	r3, [r3, #12]
 801f504:	f003 0308 	and.w	r3, r3, #8
 801f508:	2b08      	cmp	r3, #8
 801f50a:	d121      	bne.n	801f550 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	681b      	ldr	r3, [r3, #0]
 801f510:	f06f 0208 	mvn.w	r2, #8
 801f514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	2204      	movs	r2, #4
 801f51a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801f51c:	687b      	ldr	r3, [r7, #4]
 801f51e:	681b      	ldr	r3, [r3, #0]
 801f520:	69db      	ldr	r3, [r3, #28]
 801f522:	f003 0303 	and.w	r3, r3, #3
 801f526:	2b00      	cmp	r3, #0
 801f528:	d005      	beq.n	801f536 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801f530:	6878      	ldr	r0, [r7, #4]
 801f532:	4798      	blx	r3
 801f534:	e009      	b.n	801f54a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801f536:	687b      	ldr	r3, [r7, #4]
 801f538:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801f53c:	6878      	ldr	r0, [r7, #4]
 801f53e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801f540:	687b      	ldr	r3, [r7, #4]
 801f542:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801f546:	6878      	ldr	r0, [r7, #4]
 801f548:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f54a:	687b      	ldr	r3, [r7, #4]
 801f54c:	2200      	movs	r2, #0
 801f54e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801f550:	687b      	ldr	r3, [r7, #4]
 801f552:	681b      	ldr	r3, [r3, #0]
 801f554:	691b      	ldr	r3, [r3, #16]
 801f556:	f003 0310 	and.w	r3, r3, #16
 801f55a:	2b10      	cmp	r3, #16
 801f55c:	d128      	bne.n	801f5b0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801f55e:	687b      	ldr	r3, [r7, #4]
 801f560:	681b      	ldr	r3, [r3, #0]
 801f562:	68db      	ldr	r3, [r3, #12]
 801f564:	f003 0310 	and.w	r3, r3, #16
 801f568:	2b10      	cmp	r3, #16
 801f56a:	d121      	bne.n	801f5b0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801f56c:	687b      	ldr	r3, [r7, #4]
 801f56e:	681b      	ldr	r3, [r3, #0]
 801f570:	f06f 0210 	mvn.w	r2, #16
 801f574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801f576:	687b      	ldr	r3, [r7, #4]
 801f578:	2208      	movs	r2, #8
 801f57a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	681b      	ldr	r3, [r3, #0]
 801f580:	69db      	ldr	r3, [r3, #28]
 801f582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f586:	2b00      	cmp	r3, #0
 801f588:	d005      	beq.n	801f596 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801f58a:	687b      	ldr	r3, [r7, #4]
 801f58c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801f590:	6878      	ldr	r0, [r7, #4]
 801f592:	4798      	blx	r3
 801f594:	e009      	b.n	801f5aa <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801f596:	687b      	ldr	r3, [r7, #4]
 801f598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801f59c:	6878      	ldr	r0, [r7, #4]
 801f59e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801f5a0:	687b      	ldr	r3, [r7, #4]
 801f5a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801f5a6:	6878      	ldr	r0, [r7, #4]
 801f5a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f5aa:	687b      	ldr	r3, [r7, #4]
 801f5ac:	2200      	movs	r2, #0
 801f5ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801f5b0:	687b      	ldr	r3, [r7, #4]
 801f5b2:	681b      	ldr	r3, [r3, #0]
 801f5b4:	691b      	ldr	r3, [r3, #16]
 801f5b6:	f003 0301 	and.w	r3, r3, #1
 801f5ba:	2b01      	cmp	r3, #1
 801f5bc:	d110      	bne.n	801f5e0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801f5be:	687b      	ldr	r3, [r7, #4]
 801f5c0:	681b      	ldr	r3, [r3, #0]
 801f5c2:	68db      	ldr	r3, [r3, #12]
 801f5c4:	f003 0301 	and.w	r3, r3, #1
 801f5c8:	2b01      	cmp	r3, #1
 801f5ca:	d109      	bne.n	801f5e0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	681b      	ldr	r3, [r3, #0]
 801f5d0:	f06f 0201 	mvn.w	r2, #1
 801f5d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801f5d6:	687b      	ldr	r3, [r7, #4]
 801f5d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f5dc:	6878      	ldr	r0, [r7, #4]
 801f5de:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801f5e0:	687b      	ldr	r3, [r7, #4]
 801f5e2:	681b      	ldr	r3, [r3, #0]
 801f5e4:	691b      	ldr	r3, [r3, #16]
 801f5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f5ea:	2b80      	cmp	r3, #128	; 0x80
 801f5ec:	d110      	bne.n	801f610 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f5ee:	687b      	ldr	r3, [r7, #4]
 801f5f0:	681b      	ldr	r3, [r3, #0]
 801f5f2:	68db      	ldr	r3, [r3, #12]
 801f5f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f5f8:	2b80      	cmp	r3, #128	; 0x80
 801f5fa:	d109      	bne.n	801f610 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801f5fc:	687b      	ldr	r3, [r7, #4]
 801f5fe:	681b      	ldr	r3, [r3, #0]
 801f600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801f604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801f60c:	6878      	ldr	r0, [r7, #4]
 801f60e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801f610:	687b      	ldr	r3, [r7, #4]
 801f612:	681b      	ldr	r3, [r3, #0]
 801f614:	691b      	ldr	r3, [r3, #16]
 801f616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f61e:	d110      	bne.n	801f642 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f620:	687b      	ldr	r3, [r7, #4]
 801f622:	681b      	ldr	r3, [r3, #0]
 801f624:	68db      	ldr	r3, [r3, #12]
 801f626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f62a:	2b80      	cmp	r3, #128	; 0x80
 801f62c:	d109      	bne.n	801f642 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	681b      	ldr	r3, [r3, #0]
 801f632:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801f636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801f63e:	6878      	ldr	r0, [r7, #4]
 801f640:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801f642:	687b      	ldr	r3, [r7, #4]
 801f644:	681b      	ldr	r3, [r3, #0]
 801f646:	691b      	ldr	r3, [r3, #16]
 801f648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f64c:	2b40      	cmp	r3, #64	; 0x40
 801f64e:	d110      	bne.n	801f672 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801f650:	687b      	ldr	r3, [r7, #4]
 801f652:	681b      	ldr	r3, [r3, #0]
 801f654:	68db      	ldr	r3, [r3, #12]
 801f656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f65a:	2b40      	cmp	r3, #64	; 0x40
 801f65c:	d109      	bne.n	801f672 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	681b      	ldr	r3, [r3, #0]
 801f662:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801f666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801f66e:	6878      	ldr	r0, [r7, #4]
 801f670:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801f672:	687b      	ldr	r3, [r7, #4]
 801f674:	681b      	ldr	r3, [r3, #0]
 801f676:	691b      	ldr	r3, [r3, #16]
 801f678:	f003 0320 	and.w	r3, r3, #32
 801f67c:	2b20      	cmp	r3, #32
 801f67e:	d110      	bne.n	801f6a2 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801f680:	687b      	ldr	r3, [r7, #4]
 801f682:	681b      	ldr	r3, [r3, #0]
 801f684:	68db      	ldr	r3, [r3, #12]
 801f686:	f003 0320 	and.w	r3, r3, #32
 801f68a:	2b20      	cmp	r3, #32
 801f68c:	d109      	bne.n	801f6a2 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801f68e:	687b      	ldr	r3, [r7, #4]
 801f690:	681b      	ldr	r3, [r3, #0]
 801f692:	f06f 0220 	mvn.w	r2, #32
 801f696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801f698:	687b      	ldr	r3, [r7, #4]
 801f69a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801f69e:	6878      	ldr	r0, [r7, #4]
 801f6a0:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f6a2:	bf00      	nop
 801f6a4:	3708      	adds	r7, #8
 801f6a6:	46bd      	mov	sp, r7
 801f6a8:	bd80      	pop	{r7, pc}
	...

0801f6ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f6ac:	b580      	push	{r7, lr}
 801f6ae:	b082      	sub	sp, #8
 801f6b0:	af00      	add	r7, sp, #0
 801f6b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	2b00      	cmp	r3, #0
 801f6b8:	d101      	bne.n	801f6be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f6ba:	2301      	movs	r3, #1
 801f6bc:	e04e      	b.n	801f75c <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f6be:	687b      	ldr	r3, [r7, #4]
 801f6c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d114      	bne.n	801f6f0 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	2200      	movs	r2, #0
 801f6ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801f6ce:	6878      	ldr	r0, [r7, #4]
 801f6d0:	f000 fc1c 	bl	801ff0c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801f6d4:	687b      	ldr	r3, [r7, #4]
 801f6d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801f6da:	2b00      	cmp	r3, #0
 801f6dc:	d103      	bne.n	801f6e6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801f6de:	687b      	ldr	r3, [r7, #4]
 801f6e0:	4a20      	ldr	r2, [pc, #128]	; (801f764 <HAL_UART_Init+0xb8>)
 801f6e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801f6e6:	687b      	ldr	r3, [r7, #4]
 801f6e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801f6ec:	6878      	ldr	r0, [r7, #4]
 801f6ee:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f6f0:	687b      	ldr	r3, [r7, #4]
 801f6f2:	2224      	movs	r2, #36	; 0x24
 801f6f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801f6f6:	687b      	ldr	r3, [r7, #4]
 801f6f8:	681b      	ldr	r3, [r3, #0]
 801f6fa:	681a      	ldr	r2, [r3, #0]
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	681b      	ldr	r3, [r3, #0]
 801f700:	f022 0201 	bic.w	r2, r2, #1
 801f704:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f706:	6878      	ldr	r0, [r7, #4]
 801f708:	f000 fc46 	bl	801ff98 <UART_SetConfig>
 801f70c:	4603      	mov	r3, r0
 801f70e:	2b01      	cmp	r3, #1
 801f710:	d101      	bne.n	801f716 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 801f712:	2301      	movs	r3, #1
 801f714:	e022      	b.n	801f75c <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f716:	687b      	ldr	r3, [r7, #4]
 801f718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	d002      	beq.n	801f724 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 801f71e:	6878      	ldr	r0, [r7, #4]
 801f720:	f000 fe9e 	bl	8020460 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	681b      	ldr	r3, [r3, #0]
 801f728:	685a      	ldr	r2, [r3, #4]
 801f72a:	687b      	ldr	r3, [r7, #4]
 801f72c:	681b      	ldr	r3, [r3, #0]
 801f72e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801f732:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f734:	687b      	ldr	r3, [r7, #4]
 801f736:	681b      	ldr	r3, [r3, #0]
 801f738:	689a      	ldr	r2, [r3, #8]
 801f73a:	687b      	ldr	r3, [r7, #4]
 801f73c:	681b      	ldr	r3, [r3, #0]
 801f73e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801f742:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f744:	687b      	ldr	r3, [r7, #4]
 801f746:	681b      	ldr	r3, [r3, #0]
 801f748:	681a      	ldr	r2, [r3, #0]
 801f74a:	687b      	ldr	r3, [r7, #4]
 801f74c:	681b      	ldr	r3, [r3, #0]
 801f74e:	f042 0201 	orr.w	r2, r2, #1
 801f752:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f754:	6878      	ldr	r0, [r7, #4]
 801f756:	f000 ff25 	bl	80205a4 <UART_CheckIdleState>
 801f75a:	4603      	mov	r3, r0
}
 801f75c:	4618      	mov	r0, r3
 801f75e:	3708      	adds	r7, #8
 801f760:	46bd      	mov	sp, r7
 801f762:	bd80      	pop	{r7, pc}
 801f764:	08018fad 	.word	0x08018fad

0801f768 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f768:	b580      	push	{r7, lr}
 801f76a:	b08a      	sub	sp, #40	; 0x28
 801f76c:	af02      	add	r7, sp, #8
 801f76e:	60f8      	str	r0, [r7, #12]
 801f770:	60b9      	str	r1, [r7, #8]
 801f772:	603b      	str	r3, [r7, #0]
 801f774:	4613      	mov	r3, r2
 801f776:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f778:	68fb      	ldr	r3, [r7, #12]
 801f77a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801f77c:	2b20      	cmp	r3, #32
 801f77e:	d171      	bne.n	801f864 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801f780:	68bb      	ldr	r3, [r7, #8]
 801f782:	2b00      	cmp	r3, #0
 801f784:	d002      	beq.n	801f78c <HAL_UART_Transmit+0x24>
 801f786:	88fb      	ldrh	r3, [r7, #6]
 801f788:	2b00      	cmp	r3, #0
 801f78a:	d101      	bne.n	801f790 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801f78c:	2301      	movs	r3, #1
 801f78e:	e06a      	b.n	801f866 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f790:	68fb      	ldr	r3, [r7, #12]
 801f792:	2200      	movs	r2, #0
 801f794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f798:	68fb      	ldr	r3, [r7, #12]
 801f79a:	2221      	movs	r2, #33	; 0x21
 801f79c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f79e:	f7fa fa1b 	bl	8019bd8 <HAL_GetTick>
 801f7a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f7a4:	68fb      	ldr	r3, [r7, #12]
 801f7a6:	88fa      	ldrh	r2, [r7, #6]
 801f7a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801f7ac:	68fb      	ldr	r3, [r7, #12]
 801f7ae:	88fa      	ldrh	r2, [r7, #6]
 801f7b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f7b4:	68fb      	ldr	r3, [r7, #12]
 801f7b6:	689b      	ldr	r3, [r3, #8]
 801f7b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f7bc:	d108      	bne.n	801f7d0 <HAL_UART_Transmit+0x68>
 801f7be:	68fb      	ldr	r3, [r7, #12]
 801f7c0:	691b      	ldr	r3, [r3, #16]
 801f7c2:	2b00      	cmp	r3, #0
 801f7c4:	d104      	bne.n	801f7d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801f7c6:	2300      	movs	r3, #0
 801f7c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f7ca:	68bb      	ldr	r3, [r7, #8]
 801f7cc:	61bb      	str	r3, [r7, #24]
 801f7ce:	e003      	b.n	801f7d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801f7d0:	68bb      	ldr	r3, [r7, #8]
 801f7d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f7d4:	2300      	movs	r3, #0
 801f7d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801f7d8:	e02c      	b.n	801f834 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f7da:	683b      	ldr	r3, [r7, #0]
 801f7dc:	9300      	str	r3, [sp, #0]
 801f7de:	697b      	ldr	r3, [r7, #20]
 801f7e0:	2200      	movs	r2, #0
 801f7e2:	2180      	movs	r1, #128	; 0x80
 801f7e4:	68f8      	ldr	r0, [r7, #12]
 801f7e6:	f000 ff2a 	bl	802063e <UART_WaitOnFlagUntilTimeout>
 801f7ea:	4603      	mov	r3, r0
 801f7ec:	2b00      	cmp	r3, #0
 801f7ee:	d001      	beq.n	801f7f4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801f7f0:	2303      	movs	r3, #3
 801f7f2:	e038      	b.n	801f866 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801f7f4:	69fb      	ldr	r3, [r7, #28]
 801f7f6:	2b00      	cmp	r3, #0
 801f7f8:	d10b      	bne.n	801f812 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f7fa:	69bb      	ldr	r3, [r7, #24]
 801f7fc:	881b      	ldrh	r3, [r3, #0]
 801f7fe:	461a      	mov	r2, r3
 801f800:	68fb      	ldr	r3, [r7, #12]
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f808:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801f80a:	69bb      	ldr	r3, [r7, #24]
 801f80c:	3302      	adds	r3, #2
 801f80e:	61bb      	str	r3, [r7, #24]
 801f810:	e007      	b.n	801f822 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801f812:	69fb      	ldr	r3, [r7, #28]
 801f814:	781a      	ldrb	r2, [r3, #0]
 801f816:	68fb      	ldr	r3, [r7, #12]
 801f818:	681b      	ldr	r3, [r3, #0]
 801f81a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801f81c:	69fb      	ldr	r3, [r7, #28]
 801f81e:	3301      	adds	r3, #1
 801f820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f822:	68fb      	ldr	r3, [r7, #12]
 801f824:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801f828:	b29b      	uxth	r3, r3
 801f82a:	3b01      	subs	r3, #1
 801f82c:	b29a      	uxth	r2, r3
 801f82e:	68fb      	ldr	r3, [r7, #12]
 801f830:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801f834:	68fb      	ldr	r3, [r7, #12]
 801f836:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801f83a:	b29b      	uxth	r3, r3
 801f83c:	2b00      	cmp	r3, #0
 801f83e:	d1cc      	bne.n	801f7da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f840:	683b      	ldr	r3, [r7, #0]
 801f842:	9300      	str	r3, [sp, #0]
 801f844:	697b      	ldr	r3, [r7, #20]
 801f846:	2200      	movs	r2, #0
 801f848:	2140      	movs	r1, #64	; 0x40
 801f84a:	68f8      	ldr	r0, [r7, #12]
 801f84c:	f000 fef7 	bl	802063e <UART_WaitOnFlagUntilTimeout>
 801f850:	4603      	mov	r3, r0
 801f852:	2b00      	cmp	r3, #0
 801f854:	d001      	beq.n	801f85a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801f856:	2303      	movs	r3, #3
 801f858:	e005      	b.n	801f866 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f85a:	68fb      	ldr	r3, [r7, #12]
 801f85c:	2220      	movs	r2, #32
 801f85e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801f860:	2300      	movs	r3, #0
 801f862:	e000      	b.n	801f866 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801f864:	2302      	movs	r3, #2
  }
}
 801f866:	4618      	mov	r0, r3
 801f868:	3720      	adds	r7, #32
 801f86a:	46bd      	mov	sp, r7
 801f86c:	bd80      	pop	{r7, pc}
	...

0801f870 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801f870:	b580      	push	{r7, lr}
 801f872:	b0ba      	sub	sp, #232	; 0xe8
 801f874:	af00      	add	r7, sp, #0
 801f876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801f878:	687b      	ldr	r3, [r7, #4]
 801f87a:	681b      	ldr	r3, [r3, #0]
 801f87c:	69db      	ldr	r3, [r3, #28]
 801f87e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801f882:	687b      	ldr	r3, [r7, #4]
 801f884:	681b      	ldr	r3, [r3, #0]
 801f886:	681b      	ldr	r3, [r3, #0]
 801f888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	681b      	ldr	r3, [r3, #0]
 801f890:	689b      	ldr	r3, [r3, #8]
 801f892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801f896:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801f89a:	f640 030f 	movw	r3, #2063	; 0x80f
 801f89e:	4013      	ands	r3, r2
 801f8a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801f8a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	d115      	bne.n	801f8d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801f8ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f8b0:	f003 0320 	and.w	r3, r3, #32
 801f8b4:	2b00      	cmp	r3, #0
 801f8b6:	d00f      	beq.n	801f8d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801f8b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f8bc:	f003 0320 	and.w	r3, r3, #32
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	d009      	beq.n	801f8d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f8c8:	2b00      	cmp	r3, #0
 801f8ca:	f000 82b8 	beq.w	801fe3e <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 801f8ce:	687b      	ldr	r3, [r7, #4]
 801f8d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f8d2:	6878      	ldr	r0, [r7, #4]
 801f8d4:	4798      	blx	r3
      }
      return;
 801f8d6:	e2b2      	b.n	801fe3e <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801f8d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801f8dc:	2b00      	cmp	r3, #0
 801f8de:	f000 811d 	beq.w	801fb1c <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801f8e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f8e6:	f003 0301 	and.w	r3, r3, #1
 801f8ea:	2b00      	cmp	r3, #0
 801f8ec:	d106      	bne.n	801f8fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801f8ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801f8f2:	4b88      	ldr	r3, [pc, #544]	; (801fb14 <HAL_UART_IRQHandler+0x2a4>)
 801f8f4:	4013      	ands	r3, r2
 801f8f6:	2b00      	cmp	r3, #0
 801f8f8:	f000 8110 	beq.w	801fb1c <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801f8fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f900:	f003 0301 	and.w	r3, r3, #1
 801f904:	2b00      	cmp	r3, #0
 801f906:	d011      	beq.n	801f92c <HAL_UART_IRQHandler+0xbc>
 801f908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f90c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f910:	2b00      	cmp	r3, #0
 801f912:	d00b      	beq.n	801f92c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801f914:	687b      	ldr	r3, [r7, #4]
 801f916:	681b      	ldr	r3, [r3, #0]
 801f918:	2201      	movs	r2, #1
 801f91a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f922:	f043 0201 	orr.w	r2, r3, #1
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801f92c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f930:	f003 0302 	and.w	r3, r3, #2
 801f934:	2b00      	cmp	r3, #0
 801f936:	d011      	beq.n	801f95c <HAL_UART_IRQHandler+0xec>
 801f938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f93c:	f003 0301 	and.w	r3, r3, #1
 801f940:	2b00      	cmp	r3, #0
 801f942:	d00b      	beq.n	801f95c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801f944:	687b      	ldr	r3, [r7, #4]
 801f946:	681b      	ldr	r3, [r3, #0]
 801f948:	2202      	movs	r2, #2
 801f94a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801f94c:	687b      	ldr	r3, [r7, #4]
 801f94e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f952:	f043 0204 	orr.w	r2, r3, #4
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801f95c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f960:	f003 0304 	and.w	r3, r3, #4
 801f964:	2b00      	cmp	r3, #0
 801f966:	d011      	beq.n	801f98c <HAL_UART_IRQHandler+0x11c>
 801f968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f96c:	f003 0301 	and.w	r3, r3, #1
 801f970:	2b00      	cmp	r3, #0
 801f972:	d00b      	beq.n	801f98c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	681b      	ldr	r3, [r3, #0]
 801f978:	2204      	movs	r2, #4
 801f97a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801f97c:	687b      	ldr	r3, [r7, #4]
 801f97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f982:	f043 0202 	orr.w	r2, r3, #2
 801f986:	687b      	ldr	r3, [r7, #4]
 801f988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801f98c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f990:	f003 0308 	and.w	r3, r3, #8
 801f994:	2b00      	cmp	r3, #0
 801f996:	d017      	beq.n	801f9c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801f998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f99c:	f003 0320 	and.w	r3, r3, #32
 801f9a0:	2b00      	cmp	r3, #0
 801f9a2:	d105      	bne.n	801f9b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801f9a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f9a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801f9ac:	2b00      	cmp	r3, #0
 801f9ae:	d00b      	beq.n	801f9c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801f9b0:	687b      	ldr	r3, [r7, #4]
 801f9b2:	681b      	ldr	r3, [r3, #0]
 801f9b4:	2208      	movs	r2, #8
 801f9b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801f9b8:	687b      	ldr	r3, [r7, #4]
 801f9ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f9be:	f043 0208 	orr.w	r2, r3, #8
 801f9c2:	687b      	ldr	r3, [r7, #4]
 801f9c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801f9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f9cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f9d0:	2b00      	cmp	r3, #0
 801f9d2:	d012      	beq.n	801f9fa <HAL_UART_IRQHandler+0x18a>
 801f9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f9d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801f9dc:	2b00      	cmp	r3, #0
 801f9de:	d00c      	beq.n	801f9fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801f9e0:	687b      	ldr	r3, [r7, #4]
 801f9e2:	681b      	ldr	r3, [r3, #0]
 801f9e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f9e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801f9ea:	687b      	ldr	r3, [r7, #4]
 801f9ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f9f0:	f043 0220 	orr.w	r2, r3, #32
 801f9f4:	687b      	ldr	r3, [r7, #4]
 801f9f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801f9fa:	687b      	ldr	r3, [r7, #4]
 801f9fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801fa00:	2b00      	cmp	r3, #0
 801fa02:	f000 821e 	beq.w	801fe42 <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801fa06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801fa0a:	f003 0320 	and.w	r3, r3, #32
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	d00d      	beq.n	801fa2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801fa12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801fa16:	f003 0320 	and.w	r3, r3, #32
 801fa1a:	2b00      	cmp	r3, #0
 801fa1c:	d007      	beq.n	801fa2e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801fa22:	2b00      	cmp	r3, #0
 801fa24:	d003      	beq.n	801fa2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801fa26:	687b      	ldr	r3, [r7, #4]
 801fa28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801fa2a:	6878      	ldr	r0, [r7, #4]
 801fa2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801fa34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801fa38:	687b      	ldr	r3, [r7, #4]
 801fa3a:	681b      	ldr	r3, [r3, #0]
 801fa3c:	689b      	ldr	r3, [r3, #8]
 801fa3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fa42:	2b40      	cmp	r3, #64	; 0x40
 801fa44:	d005      	beq.n	801fa52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801fa46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801fa4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	d053      	beq.n	801fafa <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801fa52:	6878      	ldr	r0, [r7, #4]
 801fa54:	f000 ff80 	bl	8020958 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801fa58:	687b      	ldr	r3, [r7, #4]
 801fa5a:	681b      	ldr	r3, [r3, #0]
 801fa5c:	689b      	ldr	r3, [r3, #8]
 801fa5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fa62:	2b40      	cmp	r3, #64	; 0x40
 801fa64:	d143      	bne.n	801faee <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	681b      	ldr	r3, [r3, #0]
 801fa6a:	3308      	adds	r3, #8
 801fa6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fa70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801fa74:	e853 3f00 	ldrex	r3, [r3]
 801fa78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801fa7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801fa80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801fa84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801fa88:	687b      	ldr	r3, [r7, #4]
 801fa8a:	681b      	ldr	r3, [r3, #0]
 801fa8c:	3308      	adds	r3, #8
 801fa8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801fa92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801fa96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fa9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801fa9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801faa2:	e841 2300 	strex	r3, r2, [r1]
 801faa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801faaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801faae:	2b00      	cmp	r3, #0
 801fab0:	d1d9      	bne.n	801fa66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801fab2:	687b      	ldr	r3, [r7, #4]
 801fab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801fab6:	2b00      	cmp	r3, #0
 801fab8:	d013      	beq.n	801fae2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801faba:	687b      	ldr	r3, [r7, #4]
 801fabc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801fabe:	4a16      	ldr	r2, [pc, #88]	; (801fb18 <HAL_UART_IRQHandler+0x2a8>)
 801fac0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801fac2:	687b      	ldr	r3, [r7, #4]
 801fac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801fac6:	4618      	mov	r0, r3
 801fac8:	f7fb f98a 	bl	801ade0 <HAL_DMA_Abort_IT>
 801facc:	4603      	mov	r3, r0
 801face:	2b00      	cmp	r3, #0
 801fad0:	d01d      	beq.n	801fb0e <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801fad2:	687b      	ldr	r3, [r7, #4]
 801fad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801fad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fad8:	687a      	ldr	r2, [r7, #4]
 801fada:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801fadc:	4610      	mov	r0, r2
 801fade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801fae0:	e015      	b.n	801fb0e <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801fae2:	687b      	ldr	r3, [r7, #4]
 801fae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801fae8:	6878      	ldr	r0, [r7, #4]
 801faea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801faec:	e00f      	b.n	801fb0e <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801faee:	687b      	ldr	r3, [r7, #4]
 801faf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801faf4:	6878      	ldr	r0, [r7, #4]
 801faf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801faf8:	e009      	b.n	801fb0e <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801fafa:	687b      	ldr	r3, [r7, #4]
 801fafc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801fb00:	6878      	ldr	r0, [r7, #4]
 801fb02:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fb04:	687b      	ldr	r3, [r7, #4]
 801fb06:	2200      	movs	r2, #0
 801fb08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801fb0c:	e199      	b.n	801fe42 <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801fb0e:	bf00      	nop
    return;
 801fb10:	e197      	b.n	801fe42 <HAL_UART_IRQHandler+0x5d2>
 801fb12:	bf00      	nop
 801fb14:	04000120 	.word	0x04000120
 801fb18:	08020a21 	.word	0x08020a21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801fb1c:	687b      	ldr	r3, [r7, #4]
 801fb1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801fb20:	2b01      	cmp	r3, #1
 801fb22:	f040 8150 	bne.w	801fdc6 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801fb26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801fb2a:	f003 0310 	and.w	r3, r3, #16
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	f000 8149 	beq.w	801fdc6 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801fb34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801fb38:	f003 0310 	and.w	r3, r3, #16
 801fb3c:	2b00      	cmp	r3, #0
 801fb3e:	f000 8142 	beq.w	801fdc6 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801fb42:	687b      	ldr	r3, [r7, #4]
 801fb44:	681b      	ldr	r3, [r3, #0]
 801fb46:	2210      	movs	r2, #16
 801fb48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801fb4a:	687b      	ldr	r3, [r7, #4]
 801fb4c:	681b      	ldr	r3, [r3, #0]
 801fb4e:	689b      	ldr	r3, [r3, #8]
 801fb50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fb54:	2b40      	cmp	r3, #64	; 0x40
 801fb56:	f040 80b8 	bne.w	801fcca <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801fb5a:	687b      	ldr	r3, [r7, #4]
 801fb5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801fb5e:	681b      	ldr	r3, [r3, #0]
 801fb60:	685b      	ldr	r3, [r3, #4]
 801fb62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801fb66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801fb6a:	2b00      	cmp	r3, #0
 801fb6c:	f000 816b 	beq.w	801fe46 <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801fb70:	687b      	ldr	r3, [r7, #4]
 801fb72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801fb76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801fb7a:	429a      	cmp	r2, r3
 801fb7c:	f080 8163 	bcs.w	801fe46 <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801fb80:	687b      	ldr	r3, [r7, #4]
 801fb82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801fb86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801fb8a:	687b      	ldr	r3, [r7, #4]
 801fb8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801fb8e:	69db      	ldr	r3, [r3, #28]
 801fb90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fb94:	f000 8086 	beq.w	801fca4 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801fb98:	687b      	ldr	r3, [r7, #4]
 801fb9a:	681b      	ldr	r3, [r3, #0]
 801fb9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fba0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801fba4:	e853 3f00 	ldrex	r3, [r3]
 801fba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801fbac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801fbb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801fbb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801fbb8:	687b      	ldr	r3, [r7, #4]
 801fbba:	681b      	ldr	r3, [r3, #0]
 801fbbc:	461a      	mov	r2, r3
 801fbbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801fbc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801fbc6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fbca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801fbce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801fbd2:	e841 2300 	strex	r3, r2, [r1]
 801fbd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801fbda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	d1da      	bne.n	801fb98 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fbe2:	687b      	ldr	r3, [r7, #4]
 801fbe4:	681b      	ldr	r3, [r3, #0]
 801fbe6:	3308      	adds	r3, #8
 801fbe8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fbea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801fbec:	e853 3f00 	ldrex	r3, [r3]
 801fbf0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801fbf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801fbf4:	f023 0301 	bic.w	r3, r3, #1
 801fbf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801fbfc:	687b      	ldr	r3, [r7, #4]
 801fbfe:	681b      	ldr	r3, [r3, #0]
 801fc00:	3308      	adds	r3, #8
 801fc02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801fc06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801fc0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fc0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801fc0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801fc12:	e841 2300 	strex	r3, r2, [r1]
 801fc16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801fc18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	d1e1      	bne.n	801fbe2 <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801fc1e:	687b      	ldr	r3, [r7, #4]
 801fc20:	681b      	ldr	r3, [r3, #0]
 801fc22:	3308      	adds	r3, #8
 801fc24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fc26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801fc28:	e853 3f00 	ldrex	r3, [r3]
 801fc2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801fc2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801fc30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801fc34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	681b      	ldr	r3, [r3, #0]
 801fc3c:	3308      	adds	r3, #8
 801fc3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801fc42:	66fa      	str	r2, [r7, #108]	; 0x6c
 801fc44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fc46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801fc48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801fc4a:	e841 2300 	strex	r3, r2, [r1]
 801fc4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801fc50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801fc52:	2b00      	cmp	r3, #0
 801fc54:	d1e3      	bne.n	801fc1e <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801fc56:	687b      	ldr	r3, [r7, #4]
 801fc58:	2220      	movs	r2, #32
 801fc5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fc5e:	687b      	ldr	r3, [r7, #4]
 801fc60:	2200      	movs	r2, #0
 801fc62:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801fc64:	687b      	ldr	r3, [r7, #4]
 801fc66:	681b      	ldr	r3, [r3, #0]
 801fc68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fc6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fc6c:	e853 3f00 	ldrex	r3, [r3]
 801fc70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801fc72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fc74:	f023 0310 	bic.w	r3, r3, #16
 801fc78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801fc7c:	687b      	ldr	r3, [r7, #4]
 801fc7e:	681b      	ldr	r3, [r3, #0]
 801fc80:	461a      	mov	r2, r3
 801fc82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801fc86:	65bb      	str	r3, [r7, #88]	; 0x58
 801fc88:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fc8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801fc8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801fc8e:	e841 2300 	strex	r3, r2, [r1]
 801fc92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801fc94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fc96:	2b00      	cmp	r3, #0
 801fc98:	d1e4      	bne.n	801fc64 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801fc9a:	687b      	ldr	r3, [r7, #4]
 801fc9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801fc9e:	4618      	mov	r0, r3
 801fca0:	f7fb f82e 	bl	801ad00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801fca4:	687b      	ldr	r3, [r7, #4]
 801fca6:	2202      	movs	r2, #2
 801fca8:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801fcaa:	687b      	ldr	r3, [r7, #4]
 801fcac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801fcb0:	687a      	ldr	r2, [r7, #4]
 801fcb2:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 801fcb6:	687a      	ldr	r2, [r7, #4]
 801fcb8:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 801fcbc:	b292      	uxth	r2, r2
 801fcbe:	1a8a      	subs	r2, r1, r2
 801fcc0:	b292      	uxth	r2, r2
 801fcc2:	4611      	mov	r1, r2
 801fcc4:	6878      	ldr	r0, [r7, #4]
 801fcc6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801fcc8:	e0bd      	b.n	801fe46 <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801fcca:	687b      	ldr	r3, [r7, #4]
 801fccc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801fcd0:	687b      	ldr	r3, [r7, #4]
 801fcd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801fcd6:	b29b      	uxth	r3, r3
 801fcd8:	1ad3      	subs	r3, r2, r3
 801fcda:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801fcde:	687b      	ldr	r3, [r7, #4]
 801fce0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801fce4:	b29b      	uxth	r3, r3
 801fce6:	2b00      	cmp	r3, #0
 801fce8:	f000 80af 	beq.w	801fe4a <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 801fcec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	f000 80aa 	beq.w	801fe4a <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801fcf6:	687b      	ldr	r3, [r7, #4]
 801fcf8:	681b      	ldr	r3, [r3, #0]
 801fcfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fcfe:	e853 3f00 	ldrex	r3, [r3]
 801fd02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801fd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fd06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801fd0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801fd0e:	687b      	ldr	r3, [r7, #4]
 801fd10:	681b      	ldr	r3, [r3, #0]
 801fd12:	461a      	mov	r2, r3
 801fd14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801fd18:	647b      	str	r3, [r7, #68]	; 0x44
 801fd1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fd1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801fd1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fd20:	e841 2300 	strex	r3, r2, [r1]
 801fd24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801fd26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fd28:	2b00      	cmp	r3, #0
 801fd2a:	d1e4      	bne.n	801fcf6 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fd2c:	687b      	ldr	r3, [r7, #4]
 801fd2e:	681b      	ldr	r3, [r3, #0]
 801fd30:	3308      	adds	r3, #8
 801fd32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd36:	e853 3f00 	ldrex	r3, [r3]
 801fd3a:	623b      	str	r3, [r7, #32]
   return(result);
 801fd3c:	6a3b      	ldr	r3, [r7, #32]
 801fd3e:	f023 0301 	bic.w	r3, r3, #1
 801fd42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801fd46:	687b      	ldr	r3, [r7, #4]
 801fd48:	681b      	ldr	r3, [r3, #0]
 801fd4a:	3308      	adds	r3, #8
 801fd4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801fd50:	633a      	str	r2, [r7, #48]	; 0x30
 801fd52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fd54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801fd56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fd58:	e841 2300 	strex	r3, r2, [r1]
 801fd5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801fd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	d1e3      	bne.n	801fd2c <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	2220      	movs	r2, #32
 801fd68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fd6c:	687b      	ldr	r3, [r7, #4]
 801fd6e:	2200      	movs	r2, #0
 801fd70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	2200      	movs	r2, #0
 801fd76:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801fd78:	687b      	ldr	r3, [r7, #4]
 801fd7a:	681b      	ldr	r3, [r3, #0]
 801fd7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fd7e:	693b      	ldr	r3, [r7, #16]
 801fd80:	e853 3f00 	ldrex	r3, [r3]
 801fd84:	60fb      	str	r3, [r7, #12]
   return(result);
 801fd86:	68fb      	ldr	r3, [r7, #12]
 801fd88:	f023 0310 	bic.w	r3, r3, #16
 801fd8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	681b      	ldr	r3, [r3, #0]
 801fd94:	461a      	mov	r2, r3
 801fd96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801fd9a:	61fb      	str	r3, [r7, #28]
 801fd9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fd9e:	69b9      	ldr	r1, [r7, #24]
 801fda0:	69fa      	ldr	r2, [r7, #28]
 801fda2:	e841 2300 	strex	r3, r2, [r1]
 801fda6:	617b      	str	r3, [r7, #20]
   return(result);
 801fda8:	697b      	ldr	r3, [r7, #20]
 801fdaa:	2b00      	cmp	r3, #0
 801fdac:	d1e4      	bne.n	801fd78 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801fdae:	687b      	ldr	r3, [r7, #4]
 801fdb0:	2202      	movs	r2, #2
 801fdb2:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801fdb4:	687b      	ldr	r3, [r7, #4]
 801fdb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801fdba:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801fdbe:	4611      	mov	r1, r2
 801fdc0:	6878      	ldr	r0, [r7, #4]
 801fdc2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801fdc4:	e041      	b.n	801fe4a <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801fdc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801fdca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	d010      	beq.n	801fdf4 <HAL_UART_IRQHandler+0x584>
 801fdd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801fdd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fdda:	2b00      	cmp	r3, #0
 801fddc:	d00a      	beq.n	801fdf4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801fdde:	687b      	ldr	r3, [r7, #4]
 801fde0:	681b      	ldr	r3, [r3, #0]
 801fde2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801fde6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801fde8:	687b      	ldr	r3, [r7, #4]
 801fdea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801fdee:	6878      	ldr	r0, [r7, #4]
 801fdf0:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801fdf2:	e02d      	b.n	801fe50 <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801fdf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801fdf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fdfc:	2b00      	cmp	r3, #0
 801fdfe:	d00e      	beq.n	801fe1e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801fe00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801fe04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fe08:	2b00      	cmp	r3, #0
 801fe0a:	d008      	beq.n	801fe1e <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801fe0c:	687b      	ldr	r3, [r7, #4]
 801fe0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d01c      	beq.n	801fe4e <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 801fe14:	687b      	ldr	r3, [r7, #4]
 801fe16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fe18:	6878      	ldr	r0, [r7, #4]
 801fe1a:	4798      	blx	r3
    }
    return;
 801fe1c:	e017      	b.n	801fe4e <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801fe1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801fe22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fe26:	2b00      	cmp	r3, #0
 801fe28:	d012      	beq.n	801fe50 <HAL_UART_IRQHandler+0x5e0>
 801fe2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801fe2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d00c      	beq.n	801fe50 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 801fe36:	6878      	ldr	r0, [r7, #4]
 801fe38:	f000 fe0a 	bl	8020a50 <UART_EndTransmit_IT>
    return;
 801fe3c:	e008      	b.n	801fe50 <HAL_UART_IRQHandler+0x5e0>
      return;
 801fe3e:	bf00      	nop
 801fe40:	e006      	b.n	801fe50 <HAL_UART_IRQHandler+0x5e0>
    return;
 801fe42:	bf00      	nop
 801fe44:	e004      	b.n	801fe50 <HAL_UART_IRQHandler+0x5e0>
      return;
 801fe46:	bf00      	nop
 801fe48:	e002      	b.n	801fe50 <HAL_UART_IRQHandler+0x5e0>
      return;
 801fe4a:	bf00      	nop
 801fe4c:	e000      	b.n	801fe50 <HAL_UART_IRQHandler+0x5e0>
    return;
 801fe4e:	bf00      	nop
  }

}
 801fe50:	37e8      	adds	r7, #232	; 0xe8
 801fe52:	46bd      	mov	sp, r7
 801fe54:	bd80      	pop	{r7, pc}
 801fe56:	bf00      	nop

0801fe58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801fe58:	b480      	push	{r7}
 801fe5a:	b083      	sub	sp, #12
 801fe5c:	af00      	add	r7, sp, #0
 801fe5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801fe60:	bf00      	nop
 801fe62:	370c      	adds	r7, #12
 801fe64:	46bd      	mov	sp, r7
 801fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe6a:	4770      	bx	lr

0801fe6c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801fe6c:	b480      	push	{r7}
 801fe6e:	b083      	sub	sp, #12
 801fe70:	af00      	add	r7, sp, #0
 801fe72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801fe74:	bf00      	nop
 801fe76:	370c      	adds	r7, #12
 801fe78:	46bd      	mov	sp, r7
 801fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe7e:	4770      	bx	lr

0801fe80 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801fe80:	b480      	push	{r7}
 801fe82:	b083      	sub	sp, #12
 801fe84:	af00      	add	r7, sp, #0
 801fe86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801fe88:	bf00      	nop
 801fe8a:	370c      	adds	r7, #12
 801fe8c:	46bd      	mov	sp, r7
 801fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe92:	4770      	bx	lr

0801fe94 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801fe94:	b480      	push	{r7}
 801fe96:	b083      	sub	sp, #12
 801fe98:	af00      	add	r7, sp, #0
 801fe9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801fe9c:	bf00      	nop
 801fe9e:	370c      	adds	r7, #12
 801fea0:	46bd      	mov	sp, r7
 801fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fea6:	4770      	bx	lr

0801fea8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801fea8:	b480      	push	{r7}
 801feaa:	b083      	sub	sp, #12
 801feac:	af00      	add	r7, sp, #0
 801feae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801feb0:	bf00      	nop
 801feb2:	370c      	adds	r7, #12
 801feb4:	46bd      	mov	sp, r7
 801feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801feba:	4770      	bx	lr

0801febc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801febc:	b480      	push	{r7}
 801febe:	b083      	sub	sp, #12
 801fec0:	af00      	add	r7, sp, #0
 801fec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801fec4:	bf00      	nop
 801fec6:	370c      	adds	r7, #12
 801fec8:	46bd      	mov	sp, r7
 801feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fece:	4770      	bx	lr

0801fed0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801fed0:	b480      	push	{r7}
 801fed2:	b083      	sub	sp, #12
 801fed4:	af00      	add	r7, sp, #0
 801fed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801fed8:	bf00      	nop
 801feda:	370c      	adds	r7, #12
 801fedc:	46bd      	mov	sp, r7
 801fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fee2:	4770      	bx	lr

0801fee4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801fee4:	b480      	push	{r7}
 801fee6:	b083      	sub	sp, #12
 801fee8:	af00      	add	r7, sp, #0
 801feea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801feec:	bf00      	nop
 801feee:	370c      	adds	r7, #12
 801fef0:	46bd      	mov	sp, r7
 801fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fef6:	4770      	bx	lr

0801fef8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801fef8:	b480      	push	{r7}
 801fefa:	b083      	sub	sp, #12
 801fefc:	af00      	add	r7, sp, #0
 801fefe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801ff00:	bf00      	nop
 801ff02:	370c      	adds	r7, #12
 801ff04:	46bd      	mov	sp, r7
 801ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff0a:	4770      	bx	lr

0801ff0c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801ff0c:	b480      	push	{r7}
 801ff0e:	b083      	sub	sp, #12
 801ff10:	af00      	add	r7, sp, #0
 801ff12:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	4a16      	ldr	r2, [pc, #88]	; (801ff70 <UART_InitCallbacksToDefault+0x64>)
 801ff18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801ff1c:	687b      	ldr	r3, [r7, #4]
 801ff1e:	4a15      	ldr	r2, [pc, #84]	; (801ff74 <UART_InitCallbacksToDefault+0x68>)
 801ff20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801ff24:	687b      	ldr	r3, [r7, #4]
 801ff26:	4a14      	ldr	r2, [pc, #80]	; (801ff78 <UART_InitCallbacksToDefault+0x6c>)
 801ff28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801ff2c:	687b      	ldr	r3, [r7, #4]
 801ff2e:	4a13      	ldr	r2, [pc, #76]	; (801ff7c <UART_InitCallbacksToDefault+0x70>)
 801ff30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801ff34:	687b      	ldr	r3, [r7, #4]
 801ff36:	4a12      	ldr	r2, [pc, #72]	; (801ff80 <UART_InitCallbacksToDefault+0x74>)
 801ff38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	4a11      	ldr	r2, [pc, #68]	; (801ff84 <UART_InitCallbacksToDefault+0x78>)
 801ff40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801ff44:	687b      	ldr	r3, [r7, #4]
 801ff46:	4a10      	ldr	r2, [pc, #64]	; (801ff88 <UART_InitCallbacksToDefault+0x7c>)
 801ff48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801ff4c:	687b      	ldr	r3, [r7, #4]
 801ff4e:	4a0f      	ldr	r2, [pc, #60]	; (801ff8c <UART_InitCallbacksToDefault+0x80>)
 801ff50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801ff54:	687b      	ldr	r3, [r7, #4]
 801ff56:	4a0e      	ldr	r2, [pc, #56]	; (801ff90 <UART_InitCallbacksToDefault+0x84>)
 801ff58:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801ff5c:	687b      	ldr	r3, [r7, #4]
 801ff5e:	4a0d      	ldr	r2, [pc, #52]	; (801ff94 <UART_InitCallbacksToDefault+0x88>)
 801ff60:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 801ff64:	bf00      	nop
 801ff66:	370c      	adds	r7, #12
 801ff68:	46bd      	mov	sp, r7
 801ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff6e:	4770      	bx	lr
 801ff70:	0801fe6d 	.word	0x0801fe6d
 801ff74:	0801fe59 	.word	0x0801fe59
 801ff78:	0801fe95 	.word	0x0801fe95
 801ff7c:	0801fe81 	.word	0x0801fe81
 801ff80:	0801fea9 	.word	0x0801fea9
 801ff84:	0801febd 	.word	0x0801febd
 801ff88:	0801fed1 	.word	0x0801fed1
 801ff8c:	0801fee5 	.word	0x0801fee5
 801ff90:	0801fef9 	.word	0x0801fef9
 801ff94:	08019311 	.word	0x08019311

0801ff98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801ff98:	b580      	push	{r7, lr}
 801ff9a:	b088      	sub	sp, #32
 801ff9c:	af00      	add	r7, sp, #0
 801ff9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801ffa0:	2300      	movs	r3, #0
 801ffa2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801ffa4:	687b      	ldr	r3, [r7, #4]
 801ffa6:	689a      	ldr	r2, [r3, #8]
 801ffa8:	687b      	ldr	r3, [r7, #4]
 801ffaa:	691b      	ldr	r3, [r3, #16]
 801ffac:	431a      	orrs	r2, r3
 801ffae:	687b      	ldr	r3, [r7, #4]
 801ffb0:	695b      	ldr	r3, [r3, #20]
 801ffb2:	431a      	orrs	r2, r3
 801ffb4:	687b      	ldr	r3, [r7, #4]
 801ffb6:	69db      	ldr	r3, [r3, #28]
 801ffb8:	4313      	orrs	r3, r2
 801ffba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801ffbc:	687b      	ldr	r3, [r7, #4]
 801ffbe:	681b      	ldr	r3, [r3, #0]
 801ffc0:	681a      	ldr	r2, [r3, #0]
 801ffc2:	4ba6      	ldr	r3, [pc, #664]	; (802025c <UART_SetConfig+0x2c4>)
 801ffc4:	4013      	ands	r3, r2
 801ffc6:	687a      	ldr	r2, [r7, #4]
 801ffc8:	6812      	ldr	r2, [r2, #0]
 801ffca:	6979      	ldr	r1, [r7, #20]
 801ffcc:	430b      	orrs	r3, r1
 801ffce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801ffd0:	687b      	ldr	r3, [r7, #4]
 801ffd2:	681b      	ldr	r3, [r3, #0]
 801ffd4:	685b      	ldr	r3, [r3, #4]
 801ffd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	68da      	ldr	r2, [r3, #12]
 801ffde:	687b      	ldr	r3, [r7, #4]
 801ffe0:	681b      	ldr	r3, [r3, #0]
 801ffe2:	430a      	orrs	r2, r1
 801ffe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801ffe6:	687b      	ldr	r3, [r7, #4]
 801ffe8:	699b      	ldr	r3, [r3, #24]
 801ffea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801ffec:	687b      	ldr	r3, [r7, #4]
 801ffee:	6a1b      	ldr	r3, [r3, #32]
 801fff0:	697a      	ldr	r2, [r7, #20]
 801fff2:	4313      	orrs	r3, r2
 801fff4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801fff6:	687b      	ldr	r3, [r7, #4]
 801fff8:	681b      	ldr	r3, [r3, #0]
 801fffa:	689b      	ldr	r3, [r3, #8]
 801fffc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8020000:	687b      	ldr	r3, [r7, #4]
 8020002:	681b      	ldr	r3, [r3, #0]
 8020004:	697a      	ldr	r2, [r7, #20]
 8020006:	430a      	orrs	r2, r1
 8020008:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802000a:	687b      	ldr	r3, [r7, #4]
 802000c:	681b      	ldr	r3, [r3, #0]
 802000e:	4a94      	ldr	r2, [pc, #592]	; (8020260 <UART_SetConfig+0x2c8>)
 8020010:	4293      	cmp	r3, r2
 8020012:	d120      	bne.n	8020056 <UART_SetConfig+0xbe>
 8020014:	4b93      	ldr	r3, [pc, #588]	; (8020264 <UART_SetConfig+0x2cc>)
 8020016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802001a:	f003 0303 	and.w	r3, r3, #3
 802001e:	2b03      	cmp	r3, #3
 8020020:	d816      	bhi.n	8020050 <UART_SetConfig+0xb8>
 8020022:	a201      	add	r2, pc, #4	; (adr r2, 8020028 <UART_SetConfig+0x90>)
 8020024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020028:	08020039 	.word	0x08020039
 802002c:	08020045 	.word	0x08020045
 8020030:	0802003f 	.word	0x0802003f
 8020034:	0802004b 	.word	0x0802004b
 8020038:	2301      	movs	r3, #1
 802003a:	77fb      	strb	r3, [r7, #31]
 802003c:	e150      	b.n	80202e0 <UART_SetConfig+0x348>
 802003e:	2302      	movs	r3, #2
 8020040:	77fb      	strb	r3, [r7, #31]
 8020042:	e14d      	b.n	80202e0 <UART_SetConfig+0x348>
 8020044:	2304      	movs	r3, #4
 8020046:	77fb      	strb	r3, [r7, #31]
 8020048:	e14a      	b.n	80202e0 <UART_SetConfig+0x348>
 802004a:	2308      	movs	r3, #8
 802004c:	77fb      	strb	r3, [r7, #31]
 802004e:	e147      	b.n	80202e0 <UART_SetConfig+0x348>
 8020050:	2310      	movs	r3, #16
 8020052:	77fb      	strb	r3, [r7, #31]
 8020054:	e144      	b.n	80202e0 <UART_SetConfig+0x348>
 8020056:	687b      	ldr	r3, [r7, #4]
 8020058:	681b      	ldr	r3, [r3, #0]
 802005a:	4a83      	ldr	r2, [pc, #524]	; (8020268 <UART_SetConfig+0x2d0>)
 802005c:	4293      	cmp	r3, r2
 802005e:	d132      	bne.n	80200c6 <UART_SetConfig+0x12e>
 8020060:	4b80      	ldr	r3, [pc, #512]	; (8020264 <UART_SetConfig+0x2cc>)
 8020062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8020066:	f003 030c 	and.w	r3, r3, #12
 802006a:	2b0c      	cmp	r3, #12
 802006c:	d828      	bhi.n	80200c0 <UART_SetConfig+0x128>
 802006e:	a201      	add	r2, pc, #4	; (adr r2, 8020074 <UART_SetConfig+0xdc>)
 8020070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020074:	080200a9 	.word	0x080200a9
 8020078:	080200c1 	.word	0x080200c1
 802007c:	080200c1 	.word	0x080200c1
 8020080:	080200c1 	.word	0x080200c1
 8020084:	080200b5 	.word	0x080200b5
 8020088:	080200c1 	.word	0x080200c1
 802008c:	080200c1 	.word	0x080200c1
 8020090:	080200c1 	.word	0x080200c1
 8020094:	080200af 	.word	0x080200af
 8020098:	080200c1 	.word	0x080200c1
 802009c:	080200c1 	.word	0x080200c1
 80200a0:	080200c1 	.word	0x080200c1
 80200a4:	080200bb 	.word	0x080200bb
 80200a8:	2300      	movs	r3, #0
 80200aa:	77fb      	strb	r3, [r7, #31]
 80200ac:	e118      	b.n	80202e0 <UART_SetConfig+0x348>
 80200ae:	2302      	movs	r3, #2
 80200b0:	77fb      	strb	r3, [r7, #31]
 80200b2:	e115      	b.n	80202e0 <UART_SetConfig+0x348>
 80200b4:	2304      	movs	r3, #4
 80200b6:	77fb      	strb	r3, [r7, #31]
 80200b8:	e112      	b.n	80202e0 <UART_SetConfig+0x348>
 80200ba:	2308      	movs	r3, #8
 80200bc:	77fb      	strb	r3, [r7, #31]
 80200be:	e10f      	b.n	80202e0 <UART_SetConfig+0x348>
 80200c0:	2310      	movs	r3, #16
 80200c2:	77fb      	strb	r3, [r7, #31]
 80200c4:	e10c      	b.n	80202e0 <UART_SetConfig+0x348>
 80200c6:	687b      	ldr	r3, [r7, #4]
 80200c8:	681b      	ldr	r3, [r3, #0]
 80200ca:	4a68      	ldr	r2, [pc, #416]	; (802026c <UART_SetConfig+0x2d4>)
 80200cc:	4293      	cmp	r3, r2
 80200ce:	d120      	bne.n	8020112 <UART_SetConfig+0x17a>
 80200d0:	4b64      	ldr	r3, [pc, #400]	; (8020264 <UART_SetConfig+0x2cc>)
 80200d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80200d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80200da:	2b30      	cmp	r3, #48	; 0x30
 80200dc:	d013      	beq.n	8020106 <UART_SetConfig+0x16e>
 80200de:	2b30      	cmp	r3, #48	; 0x30
 80200e0:	d814      	bhi.n	802010c <UART_SetConfig+0x174>
 80200e2:	2b20      	cmp	r3, #32
 80200e4:	d009      	beq.n	80200fa <UART_SetConfig+0x162>
 80200e6:	2b20      	cmp	r3, #32
 80200e8:	d810      	bhi.n	802010c <UART_SetConfig+0x174>
 80200ea:	2b00      	cmp	r3, #0
 80200ec:	d002      	beq.n	80200f4 <UART_SetConfig+0x15c>
 80200ee:	2b10      	cmp	r3, #16
 80200f0:	d006      	beq.n	8020100 <UART_SetConfig+0x168>
 80200f2:	e00b      	b.n	802010c <UART_SetConfig+0x174>
 80200f4:	2300      	movs	r3, #0
 80200f6:	77fb      	strb	r3, [r7, #31]
 80200f8:	e0f2      	b.n	80202e0 <UART_SetConfig+0x348>
 80200fa:	2302      	movs	r3, #2
 80200fc:	77fb      	strb	r3, [r7, #31]
 80200fe:	e0ef      	b.n	80202e0 <UART_SetConfig+0x348>
 8020100:	2304      	movs	r3, #4
 8020102:	77fb      	strb	r3, [r7, #31]
 8020104:	e0ec      	b.n	80202e0 <UART_SetConfig+0x348>
 8020106:	2308      	movs	r3, #8
 8020108:	77fb      	strb	r3, [r7, #31]
 802010a:	e0e9      	b.n	80202e0 <UART_SetConfig+0x348>
 802010c:	2310      	movs	r3, #16
 802010e:	77fb      	strb	r3, [r7, #31]
 8020110:	e0e6      	b.n	80202e0 <UART_SetConfig+0x348>
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	681b      	ldr	r3, [r3, #0]
 8020116:	4a56      	ldr	r2, [pc, #344]	; (8020270 <UART_SetConfig+0x2d8>)
 8020118:	4293      	cmp	r3, r2
 802011a:	d120      	bne.n	802015e <UART_SetConfig+0x1c6>
 802011c:	4b51      	ldr	r3, [pc, #324]	; (8020264 <UART_SetConfig+0x2cc>)
 802011e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8020122:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8020126:	2bc0      	cmp	r3, #192	; 0xc0
 8020128:	d013      	beq.n	8020152 <UART_SetConfig+0x1ba>
 802012a:	2bc0      	cmp	r3, #192	; 0xc0
 802012c:	d814      	bhi.n	8020158 <UART_SetConfig+0x1c0>
 802012e:	2b80      	cmp	r3, #128	; 0x80
 8020130:	d009      	beq.n	8020146 <UART_SetConfig+0x1ae>
 8020132:	2b80      	cmp	r3, #128	; 0x80
 8020134:	d810      	bhi.n	8020158 <UART_SetConfig+0x1c0>
 8020136:	2b00      	cmp	r3, #0
 8020138:	d002      	beq.n	8020140 <UART_SetConfig+0x1a8>
 802013a:	2b40      	cmp	r3, #64	; 0x40
 802013c:	d006      	beq.n	802014c <UART_SetConfig+0x1b4>
 802013e:	e00b      	b.n	8020158 <UART_SetConfig+0x1c0>
 8020140:	2300      	movs	r3, #0
 8020142:	77fb      	strb	r3, [r7, #31]
 8020144:	e0cc      	b.n	80202e0 <UART_SetConfig+0x348>
 8020146:	2302      	movs	r3, #2
 8020148:	77fb      	strb	r3, [r7, #31]
 802014a:	e0c9      	b.n	80202e0 <UART_SetConfig+0x348>
 802014c:	2304      	movs	r3, #4
 802014e:	77fb      	strb	r3, [r7, #31]
 8020150:	e0c6      	b.n	80202e0 <UART_SetConfig+0x348>
 8020152:	2308      	movs	r3, #8
 8020154:	77fb      	strb	r3, [r7, #31]
 8020156:	e0c3      	b.n	80202e0 <UART_SetConfig+0x348>
 8020158:	2310      	movs	r3, #16
 802015a:	77fb      	strb	r3, [r7, #31]
 802015c:	e0c0      	b.n	80202e0 <UART_SetConfig+0x348>
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	681b      	ldr	r3, [r3, #0]
 8020162:	4a44      	ldr	r2, [pc, #272]	; (8020274 <UART_SetConfig+0x2dc>)
 8020164:	4293      	cmp	r3, r2
 8020166:	d125      	bne.n	80201b4 <UART_SetConfig+0x21c>
 8020168:	4b3e      	ldr	r3, [pc, #248]	; (8020264 <UART_SetConfig+0x2cc>)
 802016a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802016e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8020172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8020176:	d017      	beq.n	80201a8 <UART_SetConfig+0x210>
 8020178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802017c:	d817      	bhi.n	80201ae <UART_SetConfig+0x216>
 802017e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020182:	d00b      	beq.n	802019c <UART_SetConfig+0x204>
 8020184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020188:	d811      	bhi.n	80201ae <UART_SetConfig+0x216>
 802018a:	2b00      	cmp	r3, #0
 802018c:	d003      	beq.n	8020196 <UART_SetConfig+0x1fe>
 802018e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020192:	d006      	beq.n	80201a2 <UART_SetConfig+0x20a>
 8020194:	e00b      	b.n	80201ae <UART_SetConfig+0x216>
 8020196:	2300      	movs	r3, #0
 8020198:	77fb      	strb	r3, [r7, #31]
 802019a:	e0a1      	b.n	80202e0 <UART_SetConfig+0x348>
 802019c:	2302      	movs	r3, #2
 802019e:	77fb      	strb	r3, [r7, #31]
 80201a0:	e09e      	b.n	80202e0 <UART_SetConfig+0x348>
 80201a2:	2304      	movs	r3, #4
 80201a4:	77fb      	strb	r3, [r7, #31]
 80201a6:	e09b      	b.n	80202e0 <UART_SetConfig+0x348>
 80201a8:	2308      	movs	r3, #8
 80201aa:	77fb      	strb	r3, [r7, #31]
 80201ac:	e098      	b.n	80202e0 <UART_SetConfig+0x348>
 80201ae:	2310      	movs	r3, #16
 80201b0:	77fb      	strb	r3, [r7, #31]
 80201b2:	e095      	b.n	80202e0 <UART_SetConfig+0x348>
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	681b      	ldr	r3, [r3, #0]
 80201b8:	4a2f      	ldr	r2, [pc, #188]	; (8020278 <UART_SetConfig+0x2e0>)
 80201ba:	4293      	cmp	r3, r2
 80201bc:	d125      	bne.n	802020a <UART_SetConfig+0x272>
 80201be:	4b29      	ldr	r3, [pc, #164]	; (8020264 <UART_SetConfig+0x2cc>)
 80201c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80201c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80201c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80201cc:	d017      	beq.n	80201fe <UART_SetConfig+0x266>
 80201ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80201d2:	d817      	bhi.n	8020204 <UART_SetConfig+0x26c>
 80201d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80201d8:	d00b      	beq.n	80201f2 <UART_SetConfig+0x25a>
 80201da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80201de:	d811      	bhi.n	8020204 <UART_SetConfig+0x26c>
 80201e0:	2b00      	cmp	r3, #0
 80201e2:	d003      	beq.n	80201ec <UART_SetConfig+0x254>
 80201e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80201e8:	d006      	beq.n	80201f8 <UART_SetConfig+0x260>
 80201ea:	e00b      	b.n	8020204 <UART_SetConfig+0x26c>
 80201ec:	2301      	movs	r3, #1
 80201ee:	77fb      	strb	r3, [r7, #31]
 80201f0:	e076      	b.n	80202e0 <UART_SetConfig+0x348>
 80201f2:	2302      	movs	r3, #2
 80201f4:	77fb      	strb	r3, [r7, #31]
 80201f6:	e073      	b.n	80202e0 <UART_SetConfig+0x348>
 80201f8:	2304      	movs	r3, #4
 80201fa:	77fb      	strb	r3, [r7, #31]
 80201fc:	e070      	b.n	80202e0 <UART_SetConfig+0x348>
 80201fe:	2308      	movs	r3, #8
 8020200:	77fb      	strb	r3, [r7, #31]
 8020202:	e06d      	b.n	80202e0 <UART_SetConfig+0x348>
 8020204:	2310      	movs	r3, #16
 8020206:	77fb      	strb	r3, [r7, #31]
 8020208:	e06a      	b.n	80202e0 <UART_SetConfig+0x348>
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	681b      	ldr	r3, [r3, #0]
 802020e:	4a1b      	ldr	r2, [pc, #108]	; (802027c <UART_SetConfig+0x2e4>)
 8020210:	4293      	cmp	r3, r2
 8020212:	d138      	bne.n	8020286 <UART_SetConfig+0x2ee>
 8020214:	4b13      	ldr	r3, [pc, #76]	; (8020264 <UART_SetConfig+0x2cc>)
 8020216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802021a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 802021e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8020222:	d017      	beq.n	8020254 <UART_SetConfig+0x2bc>
 8020224:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8020228:	d82a      	bhi.n	8020280 <UART_SetConfig+0x2e8>
 802022a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802022e:	d00b      	beq.n	8020248 <UART_SetConfig+0x2b0>
 8020230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020234:	d824      	bhi.n	8020280 <UART_SetConfig+0x2e8>
 8020236:	2b00      	cmp	r3, #0
 8020238:	d003      	beq.n	8020242 <UART_SetConfig+0x2aa>
 802023a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802023e:	d006      	beq.n	802024e <UART_SetConfig+0x2b6>
 8020240:	e01e      	b.n	8020280 <UART_SetConfig+0x2e8>
 8020242:	2300      	movs	r3, #0
 8020244:	77fb      	strb	r3, [r7, #31]
 8020246:	e04b      	b.n	80202e0 <UART_SetConfig+0x348>
 8020248:	2302      	movs	r3, #2
 802024a:	77fb      	strb	r3, [r7, #31]
 802024c:	e048      	b.n	80202e0 <UART_SetConfig+0x348>
 802024e:	2304      	movs	r3, #4
 8020250:	77fb      	strb	r3, [r7, #31]
 8020252:	e045      	b.n	80202e0 <UART_SetConfig+0x348>
 8020254:	2308      	movs	r3, #8
 8020256:	77fb      	strb	r3, [r7, #31]
 8020258:	e042      	b.n	80202e0 <UART_SetConfig+0x348>
 802025a:	bf00      	nop
 802025c:	efff69f3 	.word	0xefff69f3
 8020260:	40011000 	.word	0x40011000
 8020264:	40023800 	.word	0x40023800
 8020268:	40004400 	.word	0x40004400
 802026c:	40004800 	.word	0x40004800
 8020270:	40004c00 	.word	0x40004c00
 8020274:	40005000 	.word	0x40005000
 8020278:	40011400 	.word	0x40011400
 802027c:	40007800 	.word	0x40007800
 8020280:	2310      	movs	r3, #16
 8020282:	77fb      	strb	r3, [r7, #31]
 8020284:	e02c      	b.n	80202e0 <UART_SetConfig+0x348>
 8020286:	687b      	ldr	r3, [r7, #4]
 8020288:	681b      	ldr	r3, [r3, #0]
 802028a:	4a72      	ldr	r2, [pc, #456]	; (8020454 <UART_SetConfig+0x4bc>)
 802028c:	4293      	cmp	r3, r2
 802028e:	d125      	bne.n	80202dc <UART_SetConfig+0x344>
 8020290:	4b71      	ldr	r3, [pc, #452]	; (8020458 <UART_SetConfig+0x4c0>)
 8020292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8020296:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802029a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 802029e:	d017      	beq.n	80202d0 <UART_SetConfig+0x338>
 80202a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80202a4:	d817      	bhi.n	80202d6 <UART_SetConfig+0x33e>
 80202a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80202aa:	d00b      	beq.n	80202c4 <UART_SetConfig+0x32c>
 80202ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80202b0:	d811      	bhi.n	80202d6 <UART_SetConfig+0x33e>
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	d003      	beq.n	80202be <UART_SetConfig+0x326>
 80202b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80202ba:	d006      	beq.n	80202ca <UART_SetConfig+0x332>
 80202bc:	e00b      	b.n	80202d6 <UART_SetConfig+0x33e>
 80202be:	2300      	movs	r3, #0
 80202c0:	77fb      	strb	r3, [r7, #31]
 80202c2:	e00d      	b.n	80202e0 <UART_SetConfig+0x348>
 80202c4:	2302      	movs	r3, #2
 80202c6:	77fb      	strb	r3, [r7, #31]
 80202c8:	e00a      	b.n	80202e0 <UART_SetConfig+0x348>
 80202ca:	2304      	movs	r3, #4
 80202cc:	77fb      	strb	r3, [r7, #31]
 80202ce:	e007      	b.n	80202e0 <UART_SetConfig+0x348>
 80202d0:	2308      	movs	r3, #8
 80202d2:	77fb      	strb	r3, [r7, #31]
 80202d4:	e004      	b.n	80202e0 <UART_SetConfig+0x348>
 80202d6:	2310      	movs	r3, #16
 80202d8:	77fb      	strb	r3, [r7, #31]
 80202da:	e001      	b.n	80202e0 <UART_SetConfig+0x348>
 80202dc:	2310      	movs	r3, #16
 80202de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80202e0:	687b      	ldr	r3, [r7, #4]
 80202e2:	69db      	ldr	r3, [r3, #28]
 80202e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80202e8:	d15b      	bne.n	80203a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80202ea:	7ffb      	ldrb	r3, [r7, #31]
 80202ec:	2b08      	cmp	r3, #8
 80202ee:	d828      	bhi.n	8020342 <UART_SetConfig+0x3aa>
 80202f0:	a201      	add	r2, pc, #4	; (adr r2, 80202f8 <UART_SetConfig+0x360>)
 80202f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80202f6:	bf00      	nop
 80202f8:	0802031d 	.word	0x0802031d
 80202fc:	08020325 	.word	0x08020325
 8020300:	0802032d 	.word	0x0802032d
 8020304:	08020343 	.word	0x08020343
 8020308:	08020333 	.word	0x08020333
 802030c:	08020343 	.word	0x08020343
 8020310:	08020343 	.word	0x08020343
 8020314:	08020343 	.word	0x08020343
 8020318:	0802033b 	.word	0x0802033b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802031c:	f7fd fc3e 	bl	801db9c <HAL_RCC_GetPCLK1Freq>
 8020320:	61b8      	str	r0, [r7, #24]
        break;
 8020322:	e013      	b.n	802034c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020324:	f7fd fc4e 	bl	801dbc4 <HAL_RCC_GetPCLK2Freq>
 8020328:	61b8      	str	r0, [r7, #24]
        break;
 802032a:	e00f      	b.n	802034c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 802032c:	4b4b      	ldr	r3, [pc, #300]	; (802045c <UART_SetConfig+0x4c4>)
 802032e:	61bb      	str	r3, [r7, #24]
        break;
 8020330:	e00c      	b.n	802034c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8020332:	f7fd fb61 	bl	801d9f8 <HAL_RCC_GetSysClockFreq>
 8020336:	61b8      	str	r0, [r7, #24]
        break;
 8020338:	e008      	b.n	802034c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802033a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802033e:	61bb      	str	r3, [r7, #24]
        break;
 8020340:	e004      	b.n	802034c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8020342:	2300      	movs	r3, #0
 8020344:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8020346:	2301      	movs	r3, #1
 8020348:	77bb      	strb	r3, [r7, #30]
        break;
 802034a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 802034c:	69bb      	ldr	r3, [r7, #24]
 802034e:	2b00      	cmp	r3, #0
 8020350:	d074      	beq.n	802043c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8020352:	69bb      	ldr	r3, [r7, #24]
 8020354:	005a      	lsls	r2, r3, #1
 8020356:	687b      	ldr	r3, [r7, #4]
 8020358:	685b      	ldr	r3, [r3, #4]
 802035a:	085b      	lsrs	r3, r3, #1
 802035c:	441a      	add	r2, r3
 802035e:	687b      	ldr	r3, [r7, #4]
 8020360:	685b      	ldr	r3, [r3, #4]
 8020362:	fbb2 f3f3 	udiv	r3, r2, r3
 8020366:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020368:	693b      	ldr	r3, [r7, #16]
 802036a:	2b0f      	cmp	r3, #15
 802036c:	d916      	bls.n	802039c <UART_SetConfig+0x404>
 802036e:	693b      	ldr	r3, [r7, #16]
 8020370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020374:	d212      	bcs.n	802039c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8020376:	693b      	ldr	r3, [r7, #16]
 8020378:	b29b      	uxth	r3, r3
 802037a:	f023 030f 	bic.w	r3, r3, #15
 802037e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8020380:	693b      	ldr	r3, [r7, #16]
 8020382:	085b      	lsrs	r3, r3, #1
 8020384:	b29b      	uxth	r3, r3
 8020386:	f003 0307 	and.w	r3, r3, #7
 802038a:	b29a      	uxth	r2, r3
 802038c:	89fb      	ldrh	r3, [r7, #14]
 802038e:	4313      	orrs	r3, r2
 8020390:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	681b      	ldr	r3, [r3, #0]
 8020396:	89fa      	ldrh	r2, [r7, #14]
 8020398:	60da      	str	r2, [r3, #12]
 802039a:	e04f      	b.n	802043c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 802039c:	2301      	movs	r3, #1
 802039e:	77bb      	strb	r3, [r7, #30]
 80203a0:	e04c      	b.n	802043c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80203a2:	7ffb      	ldrb	r3, [r7, #31]
 80203a4:	2b08      	cmp	r3, #8
 80203a6:	d828      	bhi.n	80203fa <UART_SetConfig+0x462>
 80203a8:	a201      	add	r2, pc, #4	; (adr r2, 80203b0 <UART_SetConfig+0x418>)
 80203aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80203ae:	bf00      	nop
 80203b0:	080203d5 	.word	0x080203d5
 80203b4:	080203dd 	.word	0x080203dd
 80203b8:	080203e5 	.word	0x080203e5
 80203bc:	080203fb 	.word	0x080203fb
 80203c0:	080203eb 	.word	0x080203eb
 80203c4:	080203fb 	.word	0x080203fb
 80203c8:	080203fb 	.word	0x080203fb
 80203cc:	080203fb 	.word	0x080203fb
 80203d0:	080203f3 	.word	0x080203f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80203d4:	f7fd fbe2 	bl	801db9c <HAL_RCC_GetPCLK1Freq>
 80203d8:	61b8      	str	r0, [r7, #24]
        break;
 80203da:	e013      	b.n	8020404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80203dc:	f7fd fbf2 	bl	801dbc4 <HAL_RCC_GetPCLK2Freq>
 80203e0:	61b8      	str	r0, [r7, #24]
        break;
 80203e2:	e00f      	b.n	8020404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80203e4:	4b1d      	ldr	r3, [pc, #116]	; (802045c <UART_SetConfig+0x4c4>)
 80203e6:	61bb      	str	r3, [r7, #24]
        break;
 80203e8:	e00c      	b.n	8020404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80203ea:	f7fd fb05 	bl	801d9f8 <HAL_RCC_GetSysClockFreq>
 80203ee:	61b8      	str	r0, [r7, #24]
        break;
 80203f0:	e008      	b.n	8020404 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80203f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80203f6:	61bb      	str	r3, [r7, #24]
        break;
 80203f8:	e004      	b.n	8020404 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80203fa:	2300      	movs	r3, #0
 80203fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80203fe:	2301      	movs	r3, #1
 8020400:	77bb      	strb	r3, [r7, #30]
        break;
 8020402:	bf00      	nop
    }

    if (pclk != 0U)
 8020404:	69bb      	ldr	r3, [r7, #24]
 8020406:	2b00      	cmp	r3, #0
 8020408:	d018      	beq.n	802043c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 802040a:	687b      	ldr	r3, [r7, #4]
 802040c:	685b      	ldr	r3, [r3, #4]
 802040e:	085a      	lsrs	r2, r3, #1
 8020410:	69bb      	ldr	r3, [r7, #24]
 8020412:	441a      	add	r2, r3
 8020414:	687b      	ldr	r3, [r7, #4]
 8020416:	685b      	ldr	r3, [r3, #4]
 8020418:	fbb2 f3f3 	udiv	r3, r2, r3
 802041c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802041e:	693b      	ldr	r3, [r7, #16]
 8020420:	2b0f      	cmp	r3, #15
 8020422:	d909      	bls.n	8020438 <UART_SetConfig+0x4a0>
 8020424:	693b      	ldr	r3, [r7, #16]
 8020426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802042a:	d205      	bcs.n	8020438 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802042c:	693b      	ldr	r3, [r7, #16]
 802042e:	b29a      	uxth	r2, r3
 8020430:	687b      	ldr	r3, [r7, #4]
 8020432:	681b      	ldr	r3, [r3, #0]
 8020434:	60da      	str	r2, [r3, #12]
 8020436:	e001      	b.n	802043c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8020438:	2301      	movs	r3, #1
 802043a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	2200      	movs	r2, #0
 8020440:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8020442:	687b      	ldr	r3, [r7, #4]
 8020444:	2200      	movs	r2, #0
 8020446:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8020448:	7fbb      	ldrb	r3, [r7, #30]
}
 802044a:	4618      	mov	r0, r3
 802044c:	3720      	adds	r7, #32
 802044e:	46bd      	mov	sp, r7
 8020450:	bd80      	pop	{r7, pc}
 8020452:	bf00      	nop
 8020454:	40007c00 	.word	0x40007c00
 8020458:	40023800 	.word	0x40023800
 802045c:	00f42400 	.word	0x00f42400

08020460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8020460:	b480      	push	{r7}
 8020462:	b083      	sub	sp, #12
 8020464:	af00      	add	r7, sp, #0
 8020466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8020468:	687b      	ldr	r3, [r7, #4]
 802046a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802046c:	f003 0301 	and.w	r3, r3, #1
 8020470:	2b00      	cmp	r3, #0
 8020472:	d00a      	beq.n	802048a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8020474:	687b      	ldr	r3, [r7, #4]
 8020476:	681b      	ldr	r3, [r3, #0]
 8020478:	685b      	ldr	r3, [r3, #4]
 802047a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 802047e:	687b      	ldr	r3, [r7, #4]
 8020480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020482:	687b      	ldr	r3, [r7, #4]
 8020484:	681b      	ldr	r3, [r3, #0]
 8020486:	430a      	orrs	r2, r1
 8020488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802048e:	f003 0302 	and.w	r3, r3, #2
 8020492:	2b00      	cmp	r3, #0
 8020494:	d00a      	beq.n	80204ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8020496:	687b      	ldr	r3, [r7, #4]
 8020498:	681b      	ldr	r3, [r3, #0]
 802049a:	685b      	ldr	r3, [r3, #4]
 802049c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80204a4:	687b      	ldr	r3, [r7, #4]
 80204a6:	681b      	ldr	r3, [r3, #0]
 80204a8:	430a      	orrs	r2, r1
 80204aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80204ac:	687b      	ldr	r3, [r7, #4]
 80204ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80204b0:	f003 0304 	and.w	r3, r3, #4
 80204b4:	2b00      	cmp	r3, #0
 80204b6:	d00a      	beq.n	80204ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80204b8:	687b      	ldr	r3, [r7, #4]
 80204ba:	681b      	ldr	r3, [r3, #0]
 80204bc:	685b      	ldr	r3, [r3, #4]
 80204be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80204c2:	687b      	ldr	r3, [r7, #4]
 80204c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80204c6:	687b      	ldr	r3, [r7, #4]
 80204c8:	681b      	ldr	r3, [r3, #0]
 80204ca:	430a      	orrs	r2, r1
 80204cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80204ce:	687b      	ldr	r3, [r7, #4]
 80204d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80204d2:	f003 0308 	and.w	r3, r3, #8
 80204d6:	2b00      	cmp	r3, #0
 80204d8:	d00a      	beq.n	80204f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80204da:	687b      	ldr	r3, [r7, #4]
 80204dc:	681b      	ldr	r3, [r3, #0]
 80204de:	685b      	ldr	r3, [r3, #4]
 80204e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80204e4:	687b      	ldr	r3, [r7, #4]
 80204e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	681b      	ldr	r3, [r3, #0]
 80204ec:	430a      	orrs	r2, r1
 80204ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80204f0:	687b      	ldr	r3, [r7, #4]
 80204f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80204f4:	f003 0310 	and.w	r3, r3, #16
 80204f8:	2b00      	cmp	r3, #0
 80204fa:	d00a      	beq.n	8020512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80204fc:	687b      	ldr	r3, [r7, #4]
 80204fe:	681b      	ldr	r3, [r3, #0]
 8020500:	689b      	ldr	r3, [r3, #8]
 8020502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8020506:	687b      	ldr	r3, [r7, #4]
 8020508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802050a:	687b      	ldr	r3, [r7, #4]
 802050c:	681b      	ldr	r3, [r3, #0]
 802050e:	430a      	orrs	r2, r1
 8020510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8020512:	687b      	ldr	r3, [r7, #4]
 8020514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020516:	f003 0320 	and.w	r3, r3, #32
 802051a:	2b00      	cmp	r3, #0
 802051c:	d00a      	beq.n	8020534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 802051e:	687b      	ldr	r3, [r7, #4]
 8020520:	681b      	ldr	r3, [r3, #0]
 8020522:	689b      	ldr	r3, [r3, #8]
 8020524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8020528:	687b      	ldr	r3, [r7, #4]
 802052a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802052c:	687b      	ldr	r3, [r7, #4]
 802052e:	681b      	ldr	r3, [r3, #0]
 8020530:	430a      	orrs	r2, r1
 8020532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8020534:	687b      	ldr	r3, [r7, #4]
 8020536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802053c:	2b00      	cmp	r3, #0
 802053e:	d01a      	beq.n	8020576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8020540:	687b      	ldr	r3, [r7, #4]
 8020542:	681b      	ldr	r3, [r3, #0]
 8020544:	685b      	ldr	r3, [r3, #4]
 8020546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802054e:	687b      	ldr	r3, [r7, #4]
 8020550:	681b      	ldr	r3, [r3, #0]
 8020552:	430a      	orrs	r2, r1
 8020554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8020556:	687b      	ldr	r3, [r7, #4]
 8020558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802055a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802055e:	d10a      	bne.n	8020576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8020560:	687b      	ldr	r3, [r7, #4]
 8020562:	681b      	ldr	r3, [r3, #0]
 8020564:	685b      	ldr	r3, [r3, #4]
 8020566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 802056a:	687b      	ldr	r3, [r7, #4]
 802056c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802056e:	687b      	ldr	r3, [r7, #4]
 8020570:	681b      	ldr	r3, [r3, #0]
 8020572:	430a      	orrs	r2, r1
 8020574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8020576:	687b      	ldr	r3, [r7, #4]
 8020578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802057a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802057e:	2b00      	cmp	r3, #0
 8020580:	d00a      	beq.n	8020598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8020582:	687b      	ldr	r3, [r7, #4]
 8020584:	681b      	ldr	r3, [r3, #0]
 8020586:	685b      	ldr	r3, [r3, #4]
 8020588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 802058c:	687b      	ldr	r3, [r7, #4]
 802058e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8020590:	687b      	ldr	r3, [r7, #4]
 8020592:	681b      	ldr	r3, [r3, #0]
 8020594:	430a      	orrs	r2, r1
 8020596:	605a      	str	r2, [r3, #4]
  }
}
 8020598:	bf00      	nop
 802059a:	370c      	adds	r7, #12
 802059c:	46bd      	mov	sp, r7
 802059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205a2:	4770      	bx	lr

080205a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80205a4:	b580      	push	{r7, lr}
 80205a6:	b086      	sub	sp, #24
 80205a8:	af02      	add	r7, sp, #8
 80205aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80205ac:	687b      	ldr	r3, [r7, #4]
 80205ae:	2200      	movs	r2, #0
 80205b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80205b4:	f7f9 fb10 	bl	8019bd8 <HAL_GetTick>
 80205b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80205ba:	687b      	ldr	r3, [r7, #4]
 80205bc:	681b      	ldr	r3, [r3, #0]
 80205be:	681b      	ldr	r3, [r3, #0]
 80205c0:	f003 0308 	and.w	r3, r3, #8
 80205c4:	2b08      	cmp	r3, #8
 80205c6:	d10e      	bne.n	80205e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80205c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80205cc:	9300      	str	r3, [sp, #0]
 80205ce:	68fb      	ldr	r3, [r7, #12]
 80205d0:	2200      	movs	r2, #0
 80205d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80205d6:	6878      	ldr	r0, [r7, #4]
 80205d8:	f000 f831 	bl	802063e <UART_WaitOnFlagUntilTimeout>
 80205dc:	4603      	mov	r3, r0
 80205de:	2b00      	cmp	r3, #0
 80205e0:	d001      	beq.n	80205e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80205e2:	2303      	movs	r3, #3
 80205e4:	e027      	b.n	8020636 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80205e6:	687b      	ldr	r3, [r7, #4]
 80205e8:	681b      	ldr	r3, [r3, #0]
 80205ea:	681b      	ldr	r3, [r3, #0]
 80205ec:	f003 0304 	and.w	r3, r3, #4
 80205f0:	2b04      	cmp	r3, #4
 80205f2:	d10e      	bne.n	8020612 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80205f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80205f8:	9300      	str	r3, [sp, #0]
 80205fa:	68fb      	ldr	r3, [r7, #12]
 80205fc:	2200      	movs	r2, #0
 80205fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8020602:	6878      	ldr	r0, [r7, #4]
 8020604:	f000 f81b 	bl	802063e <UART_WaitOnFlagUntilTimeout>
 8020608:	4603      	mov	r3, r0
 802060a:	2b00      	cmp	r3, #0
 802060c:	d001      	beq.n	8020612 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 802060e:	2303      	movs	r3, #3
 8020610:	e011      	b.n	8020636 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8020612:	687b      	ldr	r3, [r7, #4]
 8020614:	2220      	movs	r2, #32
 8020616:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8020618:	687b      	ldr	r3, [r7, #4]
 802061a:	2220      	movs	r2, #32
 802061c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020620:	687b      	ldr	r3, [r7, #4]
 8020622:	2200      	movs	r2, #0
 8020624:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8020626:	687b      	ldr	r3, [r7, #4]
 8020628:	2200      	movs	r2, #0
 802062a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 802062c:	687b      	ldr	r3, [r7, #4]
 802062e:	2200      	movs	r2, #0
 8020630:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8020634:	2300      	movs	r3, #0
}
 8020636:	4618      	mov	r0, r3
 8020638:	3710      	adds	r7, #16
 802063a:	46bd      	mov	sp, r7
 802063c:	bd80      	pop	{r7, pc}

0802063e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802063e:	b580      	push	{r7, lr}
 8020640:	b09c      	sub	sp, #112	; 0x70
 8020642:	af00      	add	r7, sp, #0
 8020644:	60f8      	str	r0, [r7, #12]
 8020646:	60b9      	str	r1, [r7, #8]
 8020648:	603b      	str	r3, [r7, #0]
 802064a:	4613      	mov	r3, r2
 802064c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802064e:	e0a7      	b.n	80207a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8020650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8020652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020656:	f000 80a3 	beq.w	80207a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802065a:	f7f9 fabd 	bl	8019bd8 <HAL_GetTick>
 802065e:	4602      	mov	r2, r0
 8020660:	683b      	ldr	r3, [r7, #0]
 8020662:	1ad3      	subs	r3, r2, r3
 8020664:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8020666:	429a      	cmp	r2, r3
 8020668:	d302      	bcc.n	8020670 <UART_WaitOnFlagUntilTimeout+0x32>
 802066a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802066c:	2b00      	cmp	r3, #0
 802066e:	d13f      	bne.n	80206f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8020670:	68fb      	ldr	r3, [r7, #12]
 8020672:	681b      	ldr	r3, [r3, #0]
 8020674:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020678:	e853 3f00 	ldrex	r3, [r3]
 802067c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 802067e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020680:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8020684:	667b      	str	r3, [r7, #100]	; 0x64
 8020686:	68fb      	ldr	r3, [r7, #12]
 8020688:	681b      	ldr	r3, [r3, #0]
 802068a:	461a      	mov	r2, r3
 802068c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802068e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8020690:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8020694:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8020696:	e841 2300 	strex	r3, r2, [r1]
 802069a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 802069c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802069e:	2b00      	cmp	r3, #0
 80206a0:	d1e6      	bne.n	8020670 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80206a2:	68fb      	ldr	r3, [r7, #12]
 80206a4:	681b      	ldr	r3, [r3, #0]
 80206a6:	3308      	adds	r3, #8
 80206a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80206aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80206ac:	e853 3f00 	ldrex	r3, [r3]
 80206b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80206b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80206b4:	f023 0301 	bic.w	r3, r3, #1
 80206b8:	663b      	str	r3, [r7, #96]	; 0x60
 80206ba:	68fb      	ldr	r3, [r7, #12]
 80206bc:	681b      	ldr	r3, [r3, #0]
 80206be:	3308      	adds	r3, #8
 80206c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80206c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80206c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80206c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80206c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80206ca:	e841 2300 	strex	r3, r2, [r1]
 80206ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80206d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80206d2:	2b00      	cmp	r3, #0
 80206d4:	d1e5      	bne.n	80206a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80206d6:	68fb      	ldr	r3, [r7, #12]
 80206d8:	2220      	movs	r2, #32
 80206da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80206dc:	68fb      	ldr	r3, [r7, #12]
 80206de:	2220      	movs	r2, #32
 80206e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80206e4:	68fb      	ldr	r3, [r7, #12]
 80206e6:	2200      	movs	r2, #0
 80206e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80206ec:	2303      	movs	r3, #3
 80206ee:	e068      	b.n	80207c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80206f0:	68fb      	ldr	r3, [r7, #12]
 80206f2:	681b      	ldr	r3, [r3, #0]
 80206f4:	681b      	ldr	r3, [r3, #0]
 80206f6:	f003 0304 	and.w	r3, r3, #4
 80206fa:	2b00      	cmp	r3, #0
 80206fc:	d050      	beq.n	80207a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80206fe:	68fb      	ldr	r3, [r7, #12]
 8020700:	681b      	ldr	r3, [r3, #0]
 8020702:	69db      	ldr	r3, [r3, #28]
 8020704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8020708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802070c:	d148      	bne.n	80207a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802070e:	68fb      	ldr	r3, [r7, #12]
 8020710:	681b      	ldr	r3, [r3, #0]
 8020712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020716:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8020718:	68fb      	ldr	r3, [r7, #12]
 802071a:	681b      	ldr	r3, [r3, #0]
 802071c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802071e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020720:	e853 3f00 	ldrex	r3, [r3]
 8020724:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8020726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020728:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802072c:	66fb      	str	r3, [r7, #108]	; 0x6c
 802072e:	68fb      	ldr	r3, [r7, #12]
 8020730:	681b      	ldr	r3, [r3, #0]
 8020732:	461a      	mov	r2, r3
 8020734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8020736:	637b      	str	r3, [r7, #52]	; 0x34
 8020738:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802073a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802073c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802073e:	e841 2300 	strex	r3, r2, [r1]
 8020742:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8020744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020746:	2b00      	cmp	r3, #0
 8020748:	d1e6      	bne.n	8020718 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802074a:	68fb      	ldr	r3, [r7, #12]
 802074c:	681b      	ldr	r3, [r3, #0]
 802074e:	3308      	adds	r3, #8
 8020750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020752:	697b      	ldr	r3, [r7, #20]
 8020754:	e853 3f00 	ldrex	r3, [r3]
 8020758:	613b      	str	r3, [r7, #16]
   return(result);
 802075a:	693b      	ldr	r3, [r7, #16]
 802075c:	f023 0301 	bic.w	r3, r3, #1
 8020760:	66bb      	str	r3, [r7, #104]	; 0x68
 8020762:	68fb      	ldr	r3, [r7, #12]
 8020764:	681b      	ldr	r3, [r3, #0]
 8020766:	3308      	adds	r3, #8
 8020768:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802076a:	623a      	str	r2, [r7, #32]
 802076c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802076e:	69f9      	ldr	r1, [r7, #28]
 8020770:	6a3a      	ldr	r2, [r7, #32]
 8020772:	e841 2300 	strex	r3, r2, [r1]
 8020776:	61bb      	str	r3, [r7, #24]
   return(result);
 8020778:	69bb      	ldr	r3, [r7, #24]
 802077a:	2b00      	cmp	r3, #0
 802077c:	d1e5      	bne.n	802074a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 802077e:	68fb      	ldr	r3, [r7, #12]
 8020780:	2220      	movs	r2, #32
 8020782:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8020784:	68fb      	ldr	r3, [r7, #12]
 8020786:	2220      	movs	r2, #32
 8020788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802078c:	68fb      	ldr	r3, [r7, #12]
 802078e:	2220      	movs	r2, #32
 8020790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8020794:	68fb      	ldr	r3, [r7, #12]
 8020796:	2200      	movs	r2, #0
 8020798:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 802079c:	2303      	movs	r3, #3
 802079e:	e010      	b.n	80207c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80207a0:	68fb      	ldr	r3, [r7, #12]
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	69da      	ldr	r2, [r3, #28]
 80207a6:	68bb      	ldr	r3, [r7, #8]
 80207a8:	4013      	ands	r3, r2
 80207aa:	68ba      	ldr	r2, [r7, #8]
 80207ac:	429a      	cmp	r2, r3
 80207ae:	bf0c      	ite	eq
 80207b0:	2301      	moveq	r3, #1
 80207b2:	2300      	movne	r3, #0
 80207b4:	b2db      	uxtb	r3, r3
 80207b6:	461a      	mov	r2, r3
 80207b8:	79fb      	ldrb	r3, [r7, #7]
 80207ba:	429a      	cmp	r2, r3
 80207bc:	f43f af48 	beq.w	8020650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80207c0:	2300      	movs	r3, #0
}
 80207c2:	4618      	mov	r0, r3
 80207c4:	3770      	adds	r7, #112	; 0x70
 80207c6:	46bd      	mov	sp, r7
 80207c8:	bd80      	pop	{r7, pc}
	...

080207cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80207cc:	b480      	push	{r7}
 80207ce:	b097      	sub	sp, #92	; 0x5c
 80207d0:	af00      	add	r7, sp, #0
 80207d2:	60f8      	str	r0, [r7, #12]
 80207d4:	60b9      	str	r1, [r7, #8]
 80207d6:	4613      	mov	r3, r2
 80207d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80207da:	68fb      	ldr	r3, [r7, #12]
 80207dc:	68ba      	ldr	r2, [r7, #8]
 80207de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80207e0:	68fb      	ldr	r3, [r7, #12]
 80207e2:	88fa      	ldrh	r2, [r7, #6]
 80207e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80207e8:	68fb      	ldr	r3, [r7, #12]
 80207ea:	88fa      	ldrh	r2, [r7, #6]
 80207ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80207f0:	68fb      	ldr	r3, [r7, #12]
 80207f2:	2200      	movs	r2, #0
 80207f4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80207f6:	68fb      	ldr	r3, [r7, #12]
 80207f8:	689b      	ldr	r3, [r3, #8]
 80207fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80207fe:	d10e      	bne.n	802081e <UART_Start_Receive_IT+0x52>
 8020800:	68fb      	ldr	r3, [r7, #12]
 8020802:	691b      	ldr	r3, [r3, #16]
 8020804:	2b00      	cmp	r3, #0
 8020806:	d105      	bne.n	8020814 <UART_Start_Receive_IT+0x48>
 8020808:	68fb      	ldr	r3, [r7, #12]
 802080a:	f240 12ff 	movw	r2, #511	; 0x1ff
 802080e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8020812:	e02d      	b.n	8020870 <UART_Start_Receive_IT+0xa4>
 8020814:	68fb      	ldr	r3, [r7, #12]
 8020816:	22ff      	movs	r2, #255	; 0xff
 8020818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 802081c:	e028      	b.n	8020870 <UART_Start_Receive_IT+0xa4>
 802081e:	68fb      	ldr	r3, [r7, #12]
 8020820:	689b      	ldr	r3, [r3, #8]
 8020822:	2b00      	cmp	r3, #0
 8020824:	d10d      	bne.n	8020842 <UART_Start_Receive_IT+0x76>
 8020826:	68fb      	ldr	r3, [r7, #12]
 8020828:	691b      	ldr	r3, [r3, #16]
 802082a:	2b00      	cmp	r3, #0
 802082c:	d104      	bne.n	8020838 <UART_Start_Receive_IT+0x6c>
 802082e:	68fb      	ldr	r3, [r7, #12]
 8020830:	22ff      	movs	r2, #255	; 0xff
 8020832:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8020836:	e01b      	b.n	8020870 <UART_Start_Receive_IT+0xa4>
 8020838:	68fb      	ldr	r3, [r7, #12]
 802083a:	227f      	movs	r2, #127	; 0x7f
 802083c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8020840:	e016      	b.n	8020870 <UART_Start_Receive_IT+0xa4>
 8020842:	68fb      	ldr	r3, [r7, #12]
 8020844:	689b      	ldr	r3, [r3, #8]
 8020846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 802084a:	d10d      	bne.n	8020868 <UART_Start_Receive_IT+0x9c>
 802084c:	68fb      	ldr	r3, [r7, #12]
 802084e:	691b      	ldr	r3, [r3, #16]
 8020850:	2b00      	cmp	r3, #0
 8020852:	d104      	bne.n	802085e <UART_Start_Receive_IT+0x92>
 8020854:	68fb      	ldr	r3, [r7, #12]
 8020856:	227f      	movs	r2, #127	; 0x7f
 8020858:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 802085c:	e008      	b.n	8020870 <UART_Start_Receive_IT+0xa4>
 802085e:	68fb      	ldr	r3, [r7, #12]
 8020860:	223f      	movs	r2, #63	; 0x3f
 8020862:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8020866:	e003      	b.n	8020870 <UART_Start_Receive_IT+0xa4>
 8020868:	68fb      	ldr	r3, [r7, #12]
 802086a:	2200      	movs	r2, #0
 802086c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020870:	68fb      	ldr	r3, [r7, #12]
 8020872:	2200      	movs	r2, #0
 8020874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8020878:	68fb      	ldr	r3, [r7, #12]
 802087a:	2222      	movs	r2, #34	; 0x22
 802087c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020880:	68fb      	ldr	r3, [r7, #12]
 8020882:	681b      	ldr	r3, [r3, #0]
 8020884:	3308      	adds	r3, #8
 8020886:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802088a:	e853 3f00 	ldrex	r3, [r3]
 802088e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8020890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020892:	f043 0301 	orr.w	r3, r3, #1
 8020896:	657b      	str	r3, [r7, #84]	; 0x54
 8020898:	68fb      	ldr	r3, [r7, #12]
 802089a:	681b      	ldr	r3, [r3, #0]
 802089c:	3308      	adds	r3, #8
 802089e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80208a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80208a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80208a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80208a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80208a8:	e841 2300 	strex	r3, r2, [r1]
 80208ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80208ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	d1e5      	bne.n	8020880 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80208b4:	68fb      	ldr	r3, [r7, #12]
 80208b6:	689b      	ldr	r3, [r3, #8]
 80208b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80208bc:	d107      	bne.n	80208ce <UART_Start_Receive_IT+0x102>
 80208be:	68fb      	ldr	r3, [r7, #12]
 80208c0:	691b      	ldr	r3, [r3, #16]
 80208c2:	2b00      	cmp	r3, #0
 80208c4:	d103      	bne.n	80208ce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80208c6:	68fb      	ldr	r3, [r7, #12]
 80208c8:	4a21      	ldr	r2, [pc, #132]	; (8020950 <UART_Start_Receive_IT+0x184>)
 80208ca:	669a      	str	r2, [r3, #104]	; 0x68
 80208cc:	e002      	b.n	80208d4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80208ce:	68fb      	ldr	r3, [r7, #12]
 80208d0:	4a20      	ldr	r2, [pc, #128]	; (8020954 <UART_Start_Receive_IT+0x188>)
 80208d2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80208d4:	68fb      	ldr	r3, [r7, #12]
 80208d6:	691b      	ldr	r3, [r3, #16]
 80208d8:	2b00      	cmp	r3, #0
 80208da:	d019      	beq.n	8020910 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80208dc:	68fb      	ldr	r3, [r7, #12]
 80208de:	681b      	ldr	r3, [r3, #0]
 80208e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80208e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208e4:	e853 3f00 	ldrex	r3, [r3]
 80208e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80208ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80208ec:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80208f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80208f2:	68fb      	ldr	r3, [r7, #12]
 80208f4:	681b      	ldr	r3, [r3, #0]
 80208f6:	461a      	mov	r2, r3
 80208f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80208fa:	637b      	str	r3, [r7, #52]	; 0x34
 80208fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80208fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8020900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020902:	e841 2300 	strex	r3, r2, [r1]
 8020906:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8020908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802090a:	2b00      	cmp	r3, #0
 802090c:	d1e6      	bne.n	80208dc <UART_Start_Receive_IT+0x110>
 802090e:	e018      	b.n	8020942 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8020910:	68fb      	ldr	r3, [r7, #12]
 8020912:	681b      	ldr	r3, [r3, #0]
 8020914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020916:	697b      	ldr	r3, [r7, #20]
 8020918:	e853 3f00 	ldrex	r3, [r3]
 802091c:	613b      	str	r3, [r7, #16]
   return(result);
 802091e:	693b      	ldr	r3, [r7, #16]
 8020920:	f043 0320 	orr.w	r3, r3, #32
 8020924:	653b      	str	r3, [r7, #80]	; 0x50
 8020926:	68fb      	ldr	r3, [r7, #12]
 8020928:	681b      	ldr	r3, [r3, #0]
 802092a:	461a      	mov	r2, r3
 802092c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802092e:	623b      	str	r3, [r7, #32]
 8020930:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020932:	69f9      	ldr	r1, [r7, #28]
 8020934:	6a3a      	ldr	r2, [r7, #32]
 8020936:	e841 2300 	strex	r3, r2, [r1]
 802093a:	61bb      	str	r3, [r7, #24]
   return(result);
 802093c:	69bb      	ldr	r3, [r7, #24]
 802093e:	2b00      	cmp	r3, #0
 8020940:	d1e6      	bne.n	8020910 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8020942:	2300      	movs	r3, #0
}
 8020944:	4618      	mov	r0, r3
 8020946:	375c      	adds	r7, #92	; 0x5c
 8020948:	46bd      	mov	sp, r7
 802094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802094e:	4770      	bx	lr
 8020950:	08020c17 	.word	0x08020c17
 8020954:	08020aa9 	.word	0x08020aa9

08020958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8020958:	b480      	push	{r7}
 802095a:	b095      	sub	sp, #84	; 0x54
 802095c:	af00      	add	r7, sp, #0
 802095e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8020960:	687b      	ldr	r3, [r7, #4]
 8020962:	681b      	ldr	r3, [r3, #0]
 8020964:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020968:	e853 3f00 	ldrex	r3, [r3]
 802096c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802096e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020970:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8020974:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020976:	687b      	ldr	r3, [r7, #4]
 8020978:	681b      	ldr	r3, [r3, #0]
 802097a:	461a      	mov	r2, r3
 802097c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802097e:	643b      	str	r3, [r7, #64]	; 0x40
 8020980:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020982:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8020984:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020986:	e841 2300 	strex	r3, r2, [r1]
 802098a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802098c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802098e:	2b00      	cmp	r3, #0
 8020990:	d1e6      	bne.n	8020960 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020992:	687b      	ldr	r3, [r7, #4]
 8020994:	681b      	ldr	r3, [r3, #0]
 8020996:	3308      	adds	r3, #8
 8020998:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802099a:	6a3b      	ldr	r3, [r7, #32]
 802099c:	e853 3f00 	ldrex	r3, [r3]
 80209a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80209a2:	69fb      	ldr	r3, [r7, #28]
 80209a4:	f023 0301 	bic.w	r3, r3, #1
 80209a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	681b      	ldr	r3, [r3, #0]
 80209ae:	3308      	adds	r3, #8
 80209b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80209b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80209b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80209b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80209b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80209ba:	e841 2300 	strex	r3, r2, [r1]
 80209be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80209c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	d1e5      	bne.n	8020992 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80209c6:	687b      	ldr	r3, [r7, #4]
 80209c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80209ca:	2b01      	cmp	r3, #1
 80209cc:	d118      	bne.n	8020a00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80209ce:	687b      	ldr	r3, [r7, #4]
 80209d0:	681b      	ldr	r3, [r3, #0]
 80209d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80209d4:	68fb      	ldr	r3, [r7, #12]
 80209d6:	e853 3f00 	ldrex	r3, [r3]
 80209da:	60bb      	str	r3, [r7, #8]
   return(result);
 80209dc:	68bb      	ldr	r3, [r7, #8]
 80209de:	f023 0310 	bic.w	r3, r3, #16
 80209e2:	647b      	str	r3, [r7, #68]	; 0x44
 80209e4:	687b      	ldr	r3, [r7, #4]
 80209e6:	681b      	ldr	r3, [r3, #0]
 80209e8:	461a      	mov	r2, r3
 80209ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80209ec:	61bb      	str	r3, [r7, #24]
 80209ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80209f0:	6979      	ldr	r1, [r7, #20]
 80209f2:	69ba      	ldr	r2, [r7, #24]
 80209f4:	e841 2300 	strex	r3, r2, [r1]
 80209f8:	613b      	str	r3, [r7, #16]
   return(result);
 80209fa:	693b      	ldr	r3, [r7, #16]
 80209fc:	2b00      	cmp	r3, #0
 80209fe:	d1e6      	bne.n	80209ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8020a00:	687b      	ldr	r3, [r7, #4]
 8020a02:	2220      	movs	r2, #32
 8020a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020a08:	687b      	ldr	r3, [r7, #4]
 8020a0a:	2200      	movs	r2, #0
 8020a0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8020a0e:	687b      	ldr	r3, [r7, #4]
 8020a10:	2200      	movs	r2, #0
 8020a12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8020a14:	bf00      	nop
 8020a16:	3754      	adds	r7, #84	; 0x54
 8020a18:	46bd      	mov	sp, r7
 8020a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a1e:	4770      	bx	lr

08020a20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8020a20:	b580      	push	{r7, lr}
 8020a22:	b084      	sub	sp, #16
 8020a24:	af00      	add	r7, sp, #0
 8020a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8020a28:	687b      	ldr	r3, [r7, #4]
 8020a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8020a2e:	68fb      	ldr	r3, [r7, #12]
 8020a30:	2200      	movs	r2, #0
 8020a32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8020a36:	68fb      	ldr	r3, [r7, #12]
 8020a38:	2200      	movs	r2, #0
 8020a3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8020a3e:	68fb      	ldr	r3, [r7, #12]
 8020a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8020a44:	68f8      	ldr	r0, [r7, #12]
 8020a46:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8020a48:	bf00      	nop
 8020a4a:	3710      	adds	r7, #16
 8020a4c:	46bd      	mov	sp, r7
 8020a4e:	bd80      	pop	{r7, pc}

08020a50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8020a50:	b580      	push	{r7, lr}
 8020a52:	b088      	sub	sp, #32
 8020a54:	af00      	add	r7, sp, #0
 8020a56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8020a58:	687b      	ldr	r3, [r7, #4]
 8020a5a:	681b      	ldr	r3, [r3, #0]
 8020a5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020a5e:	68fb      	ldr	r3, [r7, #12]
 8020a60:	e853 3f00 	ldrex	r3, [r3]
 8020a64:	60bb      	str	r3, [r7, #8]
   return(result);
 8020a66:	68bb      	ldr	r3, [r7, #8]
 8020a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020a6c:	61fb      	str	r3, [r7, #28]
 8020a6e:	687b      	ldr	r3, [r7, #4]
 8020a70:	681b      	ldr	r3, [r3, #0]
 8020a72:	461a      	mov	r2, r3
 8020a74:	69fb      	ldr	r3, [r7, #28]
 8020a76:	61bb      	str	r3, [r7, #24]
 8020a78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020a7a:	6979      	ldr	r1, [r7, #20]
 8020a7c:	69ba      	ldr	r2, [r7, #24]
 8020a7e:	e841 2300 	strex	r3, r2, [r1]
 8020a82:	613b      	str	r3, [r7, #16]
   return(result);
 8020a84:	693b      	ldr	r3, [r7, #16]
 8020a86:	2b00      	cmp	r3, #0
 8020a88:	d1e6      	bne.n	8020a58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8020a8a:	687b      	ldr	r3, [r7, #4]
 8020a8c:	2220      	movs	r2, #32
 8020a8e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8020a90:	687b      	ldr	r3, [r7, #4]
 8020a92:	2200      	movs	r2, #0
 8020a94:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8020a96:	687b      	ldr	r3, [r7, #4]
 8020a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8020a9c:	6878      	ldr	r0, [r7, #4]
 8020a9e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8020aa0:	bf00      	nop
 8020aa2:	3720      	adds	r7, #32
 8020aa4:	46bd      	mov	sp, r7
 8020aa6:	bd80      	pop	{r7, pc}

08020aa8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8020aa8:	b580      	push	{r7, lr}
 8020aaa:	b096      	sub	sp, #88	; 0x58
 8020aac:	af00      	add	r7, sp, #0
 8020aae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8020ab0:	687b      	ldr	r3, [r7, #4]
 8020ab2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8020ab6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020ac0:	2b22      	cmp	r3, #34	; 0x22
 8020ac2:	f040 809c 	bne.w	8020bfe <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8020ac6:	687b      	ldr	r3, [r7, #4]
 8020ac8:	681b      	ldr	r3, [r3, #0]
 8020aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020acc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8020ad0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8020ad4:	b2d9      	uxtb	r1, r3
 8020ad6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8020ada:	b2da      	uxtb	r2, r3
 8020adc:	687b      	ldr	r3, [r7, #4]
 8020ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020ae0:	400a      	ands	r2, r1
 8020ae2:	b2d2      	uxtb	r2, r2
 8020ae4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020aea:	1c5a      	adds	r2, r3, #1
 8020aec:	687b      	ldr	r3, [r7, #4]
 8020aee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8020af0:	687b      	ldr	r3, [r7, #4]
 8020af2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8020af6:	b29b      	uxth	r3, r3
 8020af8:	3b01      	subs	r3, #1
 8020afa:	b29a      	uxth	r2, r3
 8020afc:	687b      	ldr	r3, [r7, #4]
 8020afe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8020b02:	687b      	ldr	r3, [r7, #4]
 8020b04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8020b08:	b29b      	uxth	r3, r3
 8020b0a:	2b00      	cmp	r3, #0
 8020b0c:	d17f      	bne.n	8020c0e <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8020b0e:	687b      	ldr	r3, [r7, #4]
 8020b10:	681b      	ldr	r3, [r3, #0]
 8020b12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b16:	e853 3f00 	ldrex	r3, [r3]
 8020b1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8020b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020b1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8020b22:	653b      	str	r3, [r7, #80]	; 0x50
 8020b24:	687b      	ldr	r3, [r7, #4]
 8020b26:	681b      	ldr	r3, [r3, #0]
 8020b28:	461a      	mov	r2, r3
 8020b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8020b2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020b30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8020b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020b34:	e841 2300 	strex	r3, r2, [r1]
 8020b38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8020b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020b3c:	2b00      	cmp	r3, #0
 8020b3e:	d1e6      	bne.n	8020b0e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020b40:	687b      	ldr	r3, [r7, #4]
 8020b42:	681b      	ldr	r3, [r3, #0]
 8020b44:	3308      	adds	r3, #8
 8020b46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b4a:	e853 3f00 	ldrex	r3, [r3]
 8020b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8020b50:	6a3b      	ldr	r3, [r7, #32]
 8020b52:	f023 0301 	bic.w	r3, r3, #1
 8020b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020b58:	687b      	ldr	r3, [r7, #4]
 8020b5a:	681b      	ldr	r3, [r3, #0]
 8020b5c:	3308      	adds	r3, #8
 8020b5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8020b60:	633a      	str	r2, [r7, #48]	; 0x30
 8020b62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020b64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020b68:	e841 2300 	strex	r3, r2, [r1]
 8020b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8020b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b70:	2b00      	cmp	r3, #0
 8020b72:	d1e5      	bne.n	8020b40 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8020b74:	687b      	ldr	r3, [r7, #4]
 8020b76:	2220      	movs	r2, #32
 8020b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8020b7c:	687b      	ldr	r3, [r7, #4]
 8020b7e:	2200      	movs	r2, #0
 8020b80:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8020b82:	687b      	ldr	r3, [r7, #4]
 8020b84:	2200      	movs	r2, #0
 8020b86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020b88:	687b      	ldr	r3, [r7, #4]
 8020b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020b8c:	2b01      	cmp	r3, #1
 8020b8e:	d130      	bne.n	8020bf2 <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020b90:	687b      	ldr	r3, [r7, #4]
 8020b92:	2200      	movs	r2, #0
 8020b94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	681b      	ldr	r3, [r3, #0]
 8020b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020b9c:	693b      	ldr	r3, [r7, #16]
 8020b9e:	e853 3f00 	ldrex	r3, [r3]
 8020ba2:	60fb      	str	r3, [r7, #12]
   return(result);
 8020ba4:	68fb      	ldr	r3, [r7, #12]
 8020ba6:	f023 0310 	bic.w	r3, r3, #16
 8020baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8020bac:	687b      	ldr	r3, [r7, #4]
 8020bae:	681b      	ldr	r3, [r3, #0]
 8020bb0:	461a      	mov	r2, r3
 8020bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020bb4:	61fb      	str	r3, [r7, #28]
 8020bb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020bb8:	69b9      	ldr	r1, [r7, #24]
 8020bba:	69fa      	ldr	r2, [r7, #28]
 8020bbc:	e841 2300 	strex	r3, r2, [r1]
 8020bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8020bc2:	697b      	ldr	r3, [r7, #20]
 8020bc4:	2b00      	cmp	r3, #0
 8020bc6:	d1e6      	bne.n	8020b96 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8020bc8:	687b      	ldr	r3, [r7, #4]
 8020bca:	681b      	ldr	r3, [r3, #0]
 8020bcc:	69db      	ldr	r3, [r3, #28]
 8020bce:	f003 0310 	and.w	r3, r3, #16
 8020bd2:	2b10      	cmp	r3, #16
 8020bd4:	d103      	bne.n	8020bde <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8020bd6:	687b      	ldr	r3, [r7, #4]
 8020bd8:	681b      	ldr	r3, [r3, #0]
 8020bda:	2210      	movs	r2, #16
 8020bdc:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8020bde:	687b      	ldr	r3, [r7, #4]
 8020be0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8020be4:	687a      	ldr	r2, [r7, #4]
 8020be6:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8020bea:	4611      	mov	r1, r2
 8020bec:	6878      	ldr	r0, [r7, #4]
 8020bee:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8020bf0:	e00d      	b.n	8020c0e <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 8020bf2:	687b      	ldr	r3, [r7, #4]
 8020bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8020bf8:	6878      	ldr	r0, [r7, #4]
 8020bfa:	4798      	blx	r3
}
 8020bfc:	e007      	b.n	8020c0e <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8020bfe:	687b      	ldr	r3, [r7, #4]
 8020c00:	681b      	ldr	r3, [r3, #0]
 8020c02:	699a      	ldr	r2, [r3, #24]
 8020c04:	687b      	ldr	r3, [r7, #4]
 8020c06:	681b      	ldr	r3, [r3, #0]
 8020c08:	f042 0208 	orr.w	r2, r2, #8
 8020c0c:	619a      	str	r2, [r3, #24]
}
 8020c0e:	bf00      	nop
 8020c10:	3758      	adds	r7, #88	; 0x58
 8020c12:	46bd      	mov	sp, r7
 8020c14:	bd80      	pop	{r7, pc}

08020c16 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8020c16:	b580      	push	{r7, lr}
 8020c18:	b096      	sub	sp, #88	; 0x58
 8020c1a:	af00      	add	r7, sp, #0
 8020c1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8020c1e:	687b      	ldr	r3, [r7, #4]
 8020c20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8020c24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8020c28:	687b      	ldr	r3, [r7, #4]
 8020c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020c2e:	2b22      	cmp	r3, #34	; 0x22
 8020c30:	f040 809c 	bne.w	8020d6c <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	681b      	ldr	r3, [r3, #0]
 8020c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c3a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8020c3e:	687b      	ldr	r3, [r7, #4]
 8020c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020c42:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8020c44:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8020c48:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8020c4c:	4013      	ands	r3, r2
 8020c4e:	b29a      	uxth	r2, r3
 8020c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020c52:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8020c54:	687b      	ldr	r3, [r7, #4]
 8020c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020c58:	1c9a      	adds	r2, r3, #2
 8020c5a:	687b      	ldr	r3, [r7, #4]
 8020c5c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8020c5e:	687b      	ldr	r3, [r7, #4]
 8020c60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8020c64:	b29b      	uxth	r3, r3
 8020c66:	3b01      	subs	r3, #1
 8020c68:	b29a      	uxth	r2, r3
 8020c6a:	687b      	ldr	r3, [r7, #4]
 8020c6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8020c70:	687b      	ldr	r3, [r7, #4]
 8020c72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8020c76:	b29b      	uxth	r3, r3
 8020c78:	2b00      	cmp	r3, #0
 8020c7a:	d17f      	bne.n	8020d7c <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8020c7c:	687b      	ldr	r3, [r7, #4]
 8020c7e:	681b      	ldr	r3, [r3, #0]
 8020c80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020c84:	e853 3f00 	ldrex	r3, [r3]
 8020c88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8020c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8020c90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020c92:	687b      	ldr	r3, [r7, #4]
 8020c94:	681b      	ldr	r3, [r3, #0]
 8020c96:	461a      	mov	r2, r3
 8020c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8020c9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020c9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8020ca0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020ca2:	e841 2300 	strex	r3, r2, [r1]
 8020ca6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8020ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020caa:	2b00      	cmp	r3, #0
 8020cac:	d1e6      	bne.n	8020c7c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020cae:	687b      	ldr	r3, [r7, #4]
 8020cb0:	681b      	ldr	r3, [r3, #0]
 8020cb2:	3308      	adds	r3, #8
 8020cb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020cb6:	6a3b      	ldr	r3, [r7, #32]
 8020cb8:	e853 3f00 	ldrex	r3, [r3]
 8020cbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8020cbe:	69fb      	ldr	r3, [r7, #28]
 8020cc0:	f023 0301 	bic.w	r3, r3, #1
 8020cc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8020cc6:	687b      	ldr	r3, [r7, #4]
 8020cc8:	681b      	ldr	r3, [r3, #0]
 8020cca:	3308      	adds	r3, #8
 8020ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8020cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020cd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020cd6:	e841 2300 	strex	r3, r2, [r1]
 8020cda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8020cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d1e5      	bne.n	8020cae <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8020ce2:	687b      	ldr	r3, [r7, #4]
 8020ce4:	2220      	movs	r2, #32
 8020ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8020cea:	687b      	ldr	r3, [r7, #4]
 8020cec:	2200      	movs	r2, #0
 8020cee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8020cf0:	687b      	ldr	r3, [r7, #4]
 8020cf2:	2200      	movs	r2, #0
 8020cf4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020cfa:	2b01      	cmp	r3, #1
 8020cfc:	d130      	bne.n	8020d60 <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020cfe:	687b      	ldr	r3, [r7, #4]
 8020d00:	2200      	movs	r2, #0
 8020d02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020d04:	687b      	ldr	r3, [r7, #4]
 8020d06:	681b      	ldr	r3, [r3, #0]
 8020d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020d0a:	68fb      	ldr	r3, [r7, #12]
 8020d0c:	e853 3f00 	ldrex	r3, [r3]
 8020d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8020d12:	68bb      	ldr	r3, [r7, #8]
 8020d14:	f023 0310 	bic.w	r3, r3, #16
 8020d18:	647b      	str	r3, [r7, #68]	; 0x44
 8020d1a:	687b      	ldr	r3, [r7, #4]
 8020d1c:	681b      	ldr	r3, [r3, #0]
 8020d1e:	461a      	mov	r2, r3
 8020d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020d22:	61bb      	str	r3, [r7, #24]
 8020d24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020d26:	6979      	ldr	r1, [r7, #20]
 8020d28:	69ba      	ldr	r2, [r7, #24]
 8020d2a:	e841 2300 	strex	r3, r2, [r1]
 8020d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8020d30:	693b      	ldr	r3, [r7, #16]
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	d1e6      	bne.n	8020d04 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8020d36:	687b      	ldr	r3, [r7, #4]
 8020d38:	681b      	ldr	r3, [r3, #0]
 8020d3a:	69db      	ldr	r3, [r3, #28]
 8020d3c:	f003 0310 	and.w	r3, r3, #16
 8020d40:	2b10      	cmp	r3, #16
 8020d42:	d103      	bne.n	8020d4c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8020d44:	687b      	ldr	r3, [r7, #4]
 8020d46:	681b      	ldr	r3, [r3, #0]
 8020d48:	2210      	movs	r2, #16
 8020d4a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8020d4c:	687b      	ldr	r3, [r7, #4]
 8020d4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8020d52:	687a      	ldr	r2, [r7, #4]
 8020d54:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8020d58:	4611      	mov	r1, r2
 8020d5a:	6878      	ldr	r0, [r7, #4]
 8020d5c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8020d5e:	e00d      	b.n	8020d7c <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8020d66:	6878      	ldr	r0, [r7, #4]
 8020d68:	4798      	blx	r3
}
 8020d6a:	e007      	b.n	8020d7c <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8020d6c:	687b      	ldr	r3, [r7, #4]
 8020d6e:	681b      	ldr	r3, [r3, #0]
 8020d70:	699a      	ldr	r2, [r3, #24]
 8020d72:	687b      	ldr	r3, [r7, #4]
 8020d74:	681b      	ldr	r3, [r3, #0]
 8020d76:	f042 0208 	orr.w	r2, r2, #8
 8020d7a:	619a      	str	r2, [r3, #24]
}
 8020d7c:	bf00      	nop
 8020d7e:	3758      	adds	r7, #88	; 0x58
 8020d80:	46bd      	mov	sp, r7
 8020d82:	bd80      	pop	{r7, pc}

08020d84 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8020d84:	b580      	push	{r7, lr}
 8020d86:	b08c      	sub	sp, #48	; 0x30
 8020d88:	af00      	add	r7, sp, #0
 8020d8a:	60f8      	str	r0, [r7, #12]
 8020d8c:	60b9      	str	r1, [r7, #8]
 8020d8e:	4613      	mov	r3, r2
 8020d90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8020d92:	68fb      	ldr	r3, [r7, #12]
 8020d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020d98:	2b20      	cmp	r3, #32
 8020d9a:	d142      	bne.n	8020e22 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8020d9c:	68bb      	ldr	r3, [r7, #8]
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d002      	beq.n	8020da8 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8020da2:	88fb      	ldrh	r3, [r7, #6]
 8020da4:	2b00      	cmp	r3, #0
 8020da6:	d101      	bne.n	8020dac <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8020da8:	2301      	movs	r3, #1
 8020daa:	e03b      	b.n	8020e24 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8020dac:	68fb      	ldr	r3, [r7, #12]
 8020dae:	2201      	movs	r2, #1
 8020db0:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8020db2:	68fb      	ldr	r3, [r7, #12]
 8020db4:	2200      	movs	r2, #0
 8020db6:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8020db8:	88fb      	ldrh	r3, [r7, #6]
 8020dba:	461a      	mov	r2, r3
 8020dbc:	68b9      	ldr	r1, [r7, #8]
 8020dbe:	68f8      	ldr	r0, [r7, #12]
 8020dc0:	f7ff fd04 	bl	80207cc <UART_Start_Receive_IT>
 8020dc4:	4603      	mov	r3, r0
 8020dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8020dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8020dce:	2b00      	cmp	r3, #0
 8020dd0:	d124      	bne.n	8020e1c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020dd2:	68fb      	ldr	r3, [r7, #12]
 8020dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020dd6:	2b01      	cmp	r3, #1
 8020dd8:	d11d      	bne.n	8020e16 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8020dda:	68fb      	ldr	r3, [r7, #12]
 8020ddc:	681b      	ldr	r3, [r3, #0]
 8020dde:	2210      	movs	r2, #16
 8020de0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020de2:	68fb      	ldr	r3, [r7, #12]
 8020de4:	681b      	ldr	r3, [r3, #0]
 8020de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020de8:	69bb      	ldr	r3, [r7, #24]
 8020dea:	e853 3f00 	ldrex	r3, [r3]
 8020dee:	617b      	str	r3, [r7, #20]
   return(result);
 8020df0:	697b      	ldr	r3, [r7, #20]
 8020df2:	f043 0310 	orr.w	r3, r3, #16
 8020df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8020df8:	68fb      	ldr	r3, [r7, #12]
 8020dfa:	681b      	ldr	r3, [r3, #0]
 8020dfc:	461a      	mov	r2, r3
 8020dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e00:	627b      	str	r3, [r7, #36]	; 0x24
 8020e02:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020e04:	6a39      	ldr	r1, [r7, #32]
 8020e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020e08:	e841 2300 	strex	r3, r2, [r1]
 8020e0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8020e0e:	69fb      	ldr	r3, [r7, #28]
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	d1e6      	bne.n	8020de2 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 8020e14:	e002      	b.n	8020e1c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8020e16:	2301      	movs	r3, #1
 8020e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8020e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8020e20:	e000      	b.n	8020e24 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8020e22:	2302      	movs	r3, #2
  }
}
 8020e24:	4618      	mov	r0, r3
 8020e26:	3730      	adds	r7, #48	; 0x30
 8020e28:	46bd      	mov	sp, r7
 8020e2a:	bd80      	pop	{r7, pc}

08020e2c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8020e2c:	b580      	push	{r7, lr}
 8020e2e:	b084      	sub	sp, #16
 8020e30:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8020e32:	4b2f      	ldr	r3, [pc, #188]	; (8020ef0 <MX_LWIP_Init+0xc4>)
 8020e34:	22c0      	movs	r2, #192	; 0xc0
 8020e36:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8020e38:	4b2d      	ldr	r3, [pc, #180]	; (8020ef0 <MX_LWIP_Init+0xc4>)
 8020e3a:	22a8      	movs	r2, #168	; 0xa8
 8020e3c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 8020e3e:	4b2c      	ldr	r3, [pc, #176]	; (8020ef0 <MX_LWIP_Init+0xc4>)
 8020e40:	220c      	movs	r2, #12
 8020e42:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8020e44:	4b2a      	ldr	r3, [pc, #168]	; (8020ef0 <MX_LWIP_Init+0xc4>)
 8020e46:	2264      	movs	r2, #100	; 0x64
 8020e48:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8020e4a:	4b2a      	ldr	r3, [pc, #168]	; (8020ef4 <MX_LWIP_Init+0xc8>)
 8020e4c:	22ff      	movs	r2, #255	; 0xff
 8020e4e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8020e50:	4b28      	ldr	r3, [pc, #160]	; (8020ef4 <MX_LWIP_Init+0xc8>)
 8020e52:	22ff      	movs	r2, #255	; 0xff
 8020e54:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8020e56:	4b27      	ldr	r3, [pc, #156]	; (8020ef4 <MX_LWIP_Init+0xc8>)
 8020e58:	22ff      	movs	r2, #255	; 0xff
 8020e5a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8020e5c:	4b25      	ldr	r3, [pc, #148]	; (8020ef4 <MX_LWIP_Init+0xc8>)
 8020e5e:	2200      	movs	r2, #0
 8020e60:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8020e62:	4b25      	ldr	r3, [pc, #148]	; (8020ef8 <MX_LWIP_Init+0xcc>)
 8020e64:	22c0      	movs	r2, #192	; 0xc0
 8020e66:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8020e68:	4b23      	ldr	r3, [pc, #140]	; (8020ef8 <MX_LWIP_Init+0xcc>)
 8020e6a:	22a8      	movs	r2, #168	; 0xa8
 8020e6c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 8020e6e:	4b22      	ldr	r3, [pc, #136]	; (8020ef8 <MX_LWIP_Init+0xcc>)
 8020e70:	220c      	movs	r2, #12
 8020e72:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8020e74:	4b20      	ldr	r3, [pc, #128]	; (8020ef8 <MX_LWIP_Init+0xcc>)
 8020e76:	2201      	movs	r2, #1
 8020e78:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 8020e7a:	4b20      	ldr	r3, [pc, #128]	; (8020efc <MX_LWIP_Init+0xd0>)
 8020e7c:	781b      	ldrb	r3, [r3, #0]
 8020e7e:	2b01      	cmp	r3, #1
 8020e80:	d002      	beq.n	8020e88 <MX_LWIP_Init+0x5c>
 8020e82:	2b02      	cmp	r3, #2
 8020e84:	d03c      	beq.n	8020f00 <MX_LWIP_Init+0xd4>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 8020e86:	e162      	b.n	802114e <MX_LWIP_Init+0x322>
		IP_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];
 8020e88:	4b1c      	ldr	r3, [pc, #112]	; (8020efc <MX_LWIP_Init+0xd0>)
 8020e8a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8020e8e:	4b18      	ldr	r3, [pc, #96]	; (8020ef0 <MX_LWIP_Init+0xc4>)
 8020e90:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 8020e92:	4b1a      	ldr	r3, [pc, #104]	; (8020efc <MX_LWIP_Init+0xd0>)
 8020e94:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8020e98:	4b15      	ldr	r3, [pc, #84]	; (8020ef0 <MX_LWIP_Init+0xc4>)
 8020e9a:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 8020e9c:	4b17      	ldr	r3, [pc, #92]	; (8020efc <MX_LWIP_Init+0xd0>)
 8020e9e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8020ea2:	4b13      	ldr	r3, [pc, #76]	; (8020ef0 <MX_LWIP_Init+0xc4>)
 8020ea4:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 8020ea6:	4b15      	ldr	r3, [pc, #84]	; (8020efc <MX_LWIP_Init+0xd0>)
 8020ea8:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8020eac:	4b10      	ldr	r3, [pc, #64]	; (8020ef0 <MX_LWIP_Init+0xc4>)
 8020eae:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 8020eb0:	4b10      	ldr	r3, [pc, #64]	; (8020ef4 <MX_LWIP_Init+0xc8>)
 8020eb2:	22ff      	movs	r2, #255	; 0xff
 8020eb4:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 8020eb6:	4b0f      	ldr	r3, [pc, #60]	; (8020ef4 <MX_LWIP_Init+0xc8>)
 8020eb8:	22ff      	movs	r2, #255	; 0xff
 8020eba:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 8020ebc:	4b0d      	ldr	r3, [pc, #52]	; (8020ef4 <MX_LWIP_Init+0xc8>)
 8020ebe:	22ff      	movs	r2, #255	; 0xff
 8020ec0:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 8020ec2:	4b0c      	ldr	r3, [pc, #48]	; (8020ef4 <MX_LWIP_Init+0xc8>)
 8020ec4:	2200      	movs	r2, #0
 8020ec6:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];;
 8020ec8:	4b0c      	ldr	r3, [pc, #48]	; (8020efc <MX_LWIP_Init+0xd0>)
 8020eca:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8020ece:	4b0a      	ldr	r3, [pc, #40]	; (8020ef8 <MX_LWIP_Init+0xcc>)
 8020ed0:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 8020ed2:	4b0a      	ldr	r3, [pc, #40]	; (8020efc <MX_LWIP_Init+0xd0>)
 8020ed4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8020ed8:	4b07      	ldr	r3, [pc, #28]	; (8020ef8 <MX_LWIP_Init+0xcc>)
 8020eda:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 8020edc:	4b07      	ldr	r3, [pc, #28]	; (8020efc <MX_LWIP_Init+0xd0>)
 8020ede:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8020ee2:	4b05      	ldr	r3, [pc, #20]	; (8020ef8 <MX_LWIP_Init+0xcc>)
 8020ee4:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 8020ee6:	4b04      	ldr	r3, [pc, #16]	; (8020ef8 <MX_LWIP_Init+0xcc>)
 8020ee8:	2201      	movs	r2, #1
 8020eea:	70da      	strb	r2, [r3, #3]
		break;
 8020eec:	e03b      	b.n	8020f66 <MX_LWIP_Init+0x13a>
 8020eee:	bf00      	nop
 8020ef0:	2000ddd0 	.word	0x2000ddd0
 8020ef4:	2000ddd4 	.word	0x2000ddd4
 8020ef8:	2000ddd8 	.word	0x2000ddd8
 8020efc:	20000504 	.word	0x20000504
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 8020f00:	4b94      	ldr	r3, [pc, #592]	; (8021154 <MX_LWIP_Init+0x328>)
 8020f02:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 8020f06:	4b94      	ldr	r3, [pc, #592]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020f08:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 8020f0a:	4b92      	ldr	r3, [pc, #584]	; (8021154 <MX_LWIP_Init+0x328>)
 8020f0c:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 8020f10:	4b91      	ldr	r3, [pc, #580]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020f12:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 8020f14:	4b8f      	ldr	r3, [pc, #572]	; (8021154 <MX_LWIP_Init+0x328>)
 8020f16:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 8020f1a:	4b8f      	ldr	r3, [pc, #572]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020f1c:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 8020f1e:	4b8d      	ldr	r3, [pc, #564]	; (8021154 <MX_LWIP_Init+0x328>)
 8020f20:	f893 22a8 	ldrb.w	r2, [r3, #680]	; 0x2a8
 8020f24:	4b8c      	ldr	r3, [pc, #560]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020f26:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 8020f28:	4b8c      	ldr	r3, [pc, #560]	; (802115c <MX_LWIP_Init+0x330>)
 8020f2a:	22ff      	movs	r2, #255	; 0xff
 8020f2c:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 8020f2e:	4b8b      	ldr	r3, [pc, #556]	; (802115c <MX_LWIP_Init+0x330>)
 8020f30:	22ff      	movs	r2, #255	; 0xff
 8020f32:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 8020f34:	4b89      	ldr	r3, [pc, #548]	; (802115c <MX_LWIP_Init+0x330>)
 8020f36:	22ff      	movs	r2, #255	; 0xff
 8020f38:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 8020f3a:	4b88      	ldr	r3, [pc, #544]	; (802115c <MX_LWIP_Init+0x330>)
 8020f3c:	2200      	movs	r2, #0
 8020f3e:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 8020f40:	4b84      	ldr	r3, [pc, #528]	; (8021154 <MX_LWIP_Init+0x328>)
 8020f42:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 8020f46:	4b86      	ldr	r3, [pc, #536]	; (8021160 <MX_LWIP_Init+0x334>)
 8020f48:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 8020f4a:	4b82      	ldr	r3, [pc, #520]	; (8021154 <MX_LWIP_Init+0x328>)
 8020f4c:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 8020f50:	4b83      	ldr	r3, [pc, #524]	; (8021160 <MX_LWIP_Init+0x334>)
 8020f52:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 8020f54:	4b7f      	ldr	r3, [pc, #508]	; (8021154 <MX_LWIP_Init+0x328>)
 8020f56:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 8020f5a:	4b81      	ldr	r3, [pc, #516]	; (8021160 <MX_LWIP_Init+0x334>)
 8020f5c:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 8020f5e:	4b80      	ldr	r3, [pc, #512]	; (8021160 <MX_LWIP_Init+0x334>)
 8020f60:	2201      	movs	r2, #1
 8020f62:	70da      	strb	r2, [r3, #3]
		break;
 8020f64:	bf00      	nop
	}

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8020f66:	f000 fd42 	bl	80219ee <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8020f6a:	4b7b      	ldr	r3, [pc, #492]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020f6c:	781b      	ldrb	r3, [r3, #0]
 8020f6e:	061a      	lsls	r2, r3, #24
 8020f70:	4b79      	ldr	r3, [pc, #484]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020f72:	785b      	ldrb	r3, [r3, #1]
 8020f74:	041b      	lsls	r3, r3, #16
 8020f76:	431a      	orrs	r2, r3
 8020f78:	4b77      	ldr	r3, [pc, #476]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020f7a:	789b      	ldrb	r3, [r3, #2]
 8020f7c:	021b      	lsls	r3, r3, #8
 8020f7e:	4313      	orrs	r3, r2
 8020f80:	4a75      	ldr	r2, [pc, #468]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020f82:	78d2      	ldrb	r2, [r2, #3]
 8020f84:	4313      	orrs	r3, r2
 8020f86:	061a      	lsls	r2, r3, #24
 8020f88:	4b73      	ldr	r3, [pc, #460]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020f8a:	781b      	ldrb	r3, [r3, #0]
 8020f8c:	0619      	lsls	r1, r3, #24
 8020f8e:	4b72      	ldr	r3, [pc, #456]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020f90:	785b      	ldrb	r3, [r3, #1]
 8020f92:	041b      	lsls	r3, r3, #16
 8020f94:	4319      	orrs	r1, r3
 8020f96:	4b70      	ldr	r3, [pc, #448]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020f98:	789b      	ldrb	r3, [r3, #2]
 8020f9a:	021b      	lsls	r3, r3, #8
 8020f9c:	430b      	orrs	r3, r1
 8020f9e:	496e      	ldr	r1, [pc, #440]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020fa0:	78c9      	ldrb	r1, [r1, #3]
 8020fa2:	430b      	orrs	r3, r1
 8020fa4:	021b      	lsls	r3, r3, #8
 8020fa6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8020faa:	431a      	orrs	r2, r3
 8020fac:	4b6a      	ldr	r3, [pc, #424]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020fae:	781b      	ldrb	r3, [r3, #0]
 8020fb0:	0619      	lsls	r1, r3, #24
 8020fb2:	4b69      	ldr	r3, [pc, #420]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020fb4:	785b      	ldrb	r3, [r3, #1]
 8020fb6:	041b      	lsls	r3, r3, #16
 8020fb8:	4319      	orrs	r1, r3
 8020fba:	4b67      	ldr	r3, [pc, #412]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020fbc:	789b      	ldrb	r3, [r3, #2]
 8020fbe:	021b      	lsls	r3, r3, #8
 8020fc0:	430b      	orrs	r3, r1
 8020fc2:	4965      	ldr	r1, [pc, #404]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020fc4:	78c9      	ldrb	r1, [r1, #3]
 8020fc6:	430b      	orrs	r3, r1
 8020fc8:	0a1b      	lsrs	r3, r3, #8
 8020fca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020fce:	431a      	orrs	r2, r3
 8020fd0:	4b61      	ldr	r3, [pc, #388]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020fd2:	781b      	ldrb	r3, [r3, #0]
 8020fd4:	0619      	lsls	r1, r3, #24
 8020fd6:	4b60      	ldr	r3, [pc, #384]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020fd8:	785b      	ldrb	r3, [r3, #1]
 8020fda:	041b      	lsls	r3, r3, #16
 8020fdc:	4319      	orrs	r1, r3
 8020fde:	4b5e      	ldr	r3, [pc, #376]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020fe0:	789b      	ldrb	r3, [r3, #2]
 8020fe2:	021b      	lsls	r3, r3, #8
 8020fe4:	430b      	orrs	r3, r1
 8020fe6:	495c      	ldr	r1, [pc, #368]	; (8021158 <MX_LWIP_Init+0x32c>)
 8020fe8:	78c9      	ldrb	r1, [r1, #3]
 8020fea:	430b      	orrs	r3, r1
 8020fec:	0e1b      	lsrs	r3, r3, #24
 8020fee:	4313      	orrs	r3, r2
 8020ff0:	4a5c      	ldr	r2, [pc, #368]	; (8021164 <MX_LWIP_Init+0x338>)
 8020ff2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8020ff4:	4b59      	ldr	r3, [pc, #356]	; (802115c <MX_LWIP_Init+0x330>)
 8020ff6:	781b      	ldrb	r3, [r3, #0]
 8020ff8:	061a      	lsls	r2, r3, #24
 8020ffa:	4b58      	ldr	r3, [pc, #352]	; (802115c <MX_LWIP_Init+0x330>)
 8020ffc:	785b      	ldrb	r3, [r3, #1]
 8020ffe:	041b      	lsls	r3, r3, #16
 8021000:	431a      	orrs	r2, r3
 8021002:	4b56      	ldr	r3, [pc, #344]	; (802115c <MX_LWIP_Init+0x330>)
 8021004:	789b      	ldrb	r3, [r3, #2]
 8021006:	021b      	lsls	r3, r3, #8
 8021008:	4313      	orrs	r3, r2
 802100a:	4a54      	ldr	r2, [pc, #336]	; (802115c <MX_LWIP_Init+0x330>)
 802100c:	78d2      	ldrb	r2, [r2, #3]
 802100e:	4313      	orrs	r3, r2
 8021010:	061a      	lsls	r2, r3, #24
 8021012:	4b52      	ldr	r3, [pc, #328]	; (802115c <MX_LWIP_Init+0x330>)
 8021014:	781b      	ldrb	r3, [r3, #0]
 8021016:	0619      	lsls	r1, r3, #24
 8021018:	4b50      	ldr	r3, [pc, #320]	; (802115c <MX_LWIP_Init+0x330>)
 802101a:	785b      	ldrb	r3, [r3, #1]
 802101c:	041b      	lsls	r3, r3, #16
 802101e:	4319      	orrs	r1, r3
 8021020:	4b4e      	ldr	r3, [pc, #312]	; (802115c <MX_LWIP_Init+0x330>)
 8021022:	789b      	ldrb	r3, [r3, #2]
 8021024:	021b      	lsls	r3, r3, #8
 8021026:	430b      	orrs	r3, r1
 8021028:	494c      	ldr	r1, [pc, #304]	; (802115c <MX_LWIP_Init+0x330>)
 802102a:	78c9      	ldrb	r1, [r1, #3]
 802102c:	430b      	orrs	r3, r1
 802102e:	021b      	lsls	r3, r3, #8
 8021030:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8021034:	431a      	orrs	r2, r3
 8021036:	4b49      	ldr	r3, [pc, #292]	; (802115c <MX_LWIP_Init+0x330>)
 8021038:	781b      	ldrb	r3, [r3, #0]
 802103a:	0619      	lsls	r1, r3, #24
 802103c:	4b47      	ldr	r3, [pc, #284]	; (802115c <MX_LWIP_Init+0x330>)
 802103e:	785b      	ldrb	r3, [r3, #1]
 8021040:	041b      	lsls	r3, r3, #16
 8021042:	4319      	orrs	r1, r3
 8021044:	4b45      	ldr	r3, [pc, #276]	; (802115c <MX_LWIP_Init+0x330>)
 8021046:	789b      	ldrb	r3, [r3, #2]
 8021048:	021b      	lsls	r3, r3, #8
 802104a:	430b      	orrs	r3, r1
 802104c:	4943      	ldr	r1, [pc, #268]	; (802115c <MX_LWIP_Init+0x330>)
 802104e:	78c9      	ldrb	r1, [r1, #3]
 8021050:	430b      	orrs	r3, r1
 8021052:	0a1b      	lsrs	r3, r3, #8
 8021054:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021058:	431a      	orrs	r2, r3
 802105a:	4b40      	ldr	r3, [pc, #256]	; (802115c <MX_LWIP_Init+0x330>)
 802105c:	781b      	ldrb	r3, [r3, #0]
 802105e:	0619      	lsls	r1, r3, #24
 8021060:	4b3e      	ldr	r3, [pc, #248]	; (802115c <MX_LWIP_Init+0x330>)
 8021062:	785b      	ldrb	r3, [r3, #1]
 8021064:	041b      	lsls	r3, r3, #16
 8021066:	4319      	orrs	r1, r3
 8021068:	4b3c      	ldr	r3, [pc, #240]	; (802115c <MX_LWIP_Init+0x330>)
 802106a:	789b      	ldrb	r3, [r3, #2]
 802106c:	021b      	lsls	r3, r3, #8
 802106e:	430b      	orrs	r3, r1
 8021070:	493a      	ldr	r1, [pc, #232]	; (802115c <MX_LWIP_Init+0x330>)
 8021072:	78c9      	ldrb	r1, [r1, #3]
 8021074:	430b      	orrs	r3, r1
 8021076:	0e1b      	lsrs	r3, r3, #24
 8021078:	4313      	orrs	r3, r2
 802107a:	4a3b      	ldr	r2, [pc, #236]	; (8021168 <MX_LWIP_Init+0x33c>)
 802107c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 802107e:	4b38      	ldr	r3, [pc, #224]	; (8021160 <MX_LWIP_Init+0x334>)
 8021080:	781b      	ldrb	r3, [r3, #0]
 8021082:	061a      	lsls	r2, r3, #24
 8021084:	4b36      	ldr	r3, [pc, #216]	; (8021160 <MX_LWIP_Init+0x334>)
 8021086:	785b      	ldrb	r3, [r3, #1]
 8021088:	041b      	lsls	r3, r3, #16
 802108a:	431a      	orrs	r2, r3
 802108c:	4b34      	ldr	r3, [pc, #208]	; (8021160 <MX_LWIP_Init+0x334>)
 802108e:	789b      	ldrb	r3, [r3, #2]
 8021090:	021b      	lsls	r3, r3, #8
 8021092:	4313      	orrs	r3, r2
 8021094:	4a32      	ldr	r2, [pc, #200]	; (8021160 <MX_LWIP_Init+0x334>)
 8021096:	78d2      	ldrb	r2, [r2, #3]
 8021098:	4313      	orrs	r3, r2
 802109a:	061a      	lsls	r2, r3, #24
 802109c:	4b30      	ldr	r3, [pc, #192]	; (8021160 <MX_LWIP_Init+0x334>)
 802109e:	781b      	ldrb	r3, [r3, #0]
 80210a0:	0619      	lsls	r1, r3, #24
 80210a2:	4b2f      	ldr	r3, [pc, #188]	; (8021160 <MX_LWIP_Init+0x334>)
 80210a4:	785b      	ldrb	r3, [r3, #1]
 80210a6:	041b      	lsls	r3, r3, #16
 80210a8:	4319      	orrs	r1, r3
 80210aa:	4b2d      	ldr	r3, [pc, #180]	; (8021160 <MX_LWIP_Init+0x334>)
 80210ac:	789b      	ldrb	r3, [r3, #2]
 80210ae:	021b      	lsls	r3, r3, #8
 80210b0:	430b      	orrs	r3, r1
 80210b2:	492b      	ldr	r1, [pc, #172]	; (8021160 <MX_LWIP_Init+0x334>)
 80210b4:	78c9      	ldrb	r1, [r1, #3]
 80210b6:	430b      	orrs	r3, r1
 80210b8:	021b      	lsls	r3, r3, #8
 80210ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80210be:	431a      	orrs	r2, r3
 80210c0:	4b27      	ldr	r3, [pc, #156]	; (8021160 <MX_LWIP_Init+0x334>)
 80210c2:	781b      	ldrb	r3, [r3, #0]
 80210c4:	0619      	lsls	r1, r3, #24
 80210c6:	4b26      	ldr	r3, [pc, #152]	; (8021160 <MX_LWIP_Init+0x334>)
 80210c8:	785b      	ldrb	r3, [r3, #1]
 80210ca:	041b      	lsls	r3, r3, #16
 80210cc:	4319      	orrs	r1, r3
 80210ce:	4b24      	ldr	r3, [pc, #144]	; (8021160 <MX_LWIP_Init+0x334>)
 80210d0:	789b      	ldrb	r3, [r3, #2]
 80210d2:	021b      	lsls	r3, r3, #8
 80210d4:	430b      	orrs	r3, r1
 80210d6:	4922      	ldr	r1, [pc, #136]	; (8021160 <MX_LWIP_Init+0x334>)
 80210d8:	78c9      	ldrb	r1, [r1, #3]
 80210da:	430b      	orrs	r3, r1
 80210dc:	0a1b      	lsrs	r3, r3, #8
 80210de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80210e2:	431a      	orrs	r2, r3
 80210e4:	4b1e      	ldr	r3, [pc, #120]	; (8021160 <MX_LWIP_Init+0x334>)
 80210e6:	781b      	ldrb	r3, [r3, #0]
 80210e8:	0619      	lsls	r1, r3, #24
 80210ea:	4b1d      	ldr	r3, [pc, #116]	; (8021160 <MX_LWIP_Init+0x334>)
 80210ec:	785b      	ldrb	r3, [r3, #1]
 80210ee:	041b      	lsls	r3, r3, #16
 80210f0:	4319      	orrs	r1, r3
 80210f2:	4b1b      	ldr	r3, [pc, #108]	; (8021160 <MX_LWIP_Init+0x334>)
 80210f4:	789b      	ldrb	r3, [r3, #2]
 80210f6:	021b      	lsls	r3, r3, #8
 80210f8:	430b      	orrs	r3, r1
 80210fa:	4919      	ldr	r1, [pc, #100]	; (8021160 <MX_LWIP_Init+0x334>)
 80210fc:	78c9      	ldrb	r1, [r1, #3]
 80210fe:	430b      	orrs	r3, r1
 8021100:	0e1b      	lsrs	r3, r3, #24
 8021102:	4313      	orrs	r3, r2
 8021104:	4a19      	ldr	r2, [pc, #100]	; (802116c <MX_LWIP_Init+0x340>)
 8021106:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8021108:	4b19      	ldr	r3, [pc, #100]	; (8021170 <MX_LWIP_Init+0x344>)
 802110a:	9302      	str	r3, [sp, #8]
 802110c:	4b19      	ldr	r3, [pc, #100]	; (8021174 <MX_LWIP_Init+0x348>)
 802110e:	9301      	str	r3, [sp, #4]
 8021110:	2300      	movs	r3, #0
 8021112:	9300      	str	r3, [sp, #0]
 8021114:	4b15      	ldr	r3, [pc, #84]	; (802116c <MX_LWIP_Init+0x340>)
 8021116:	4a14      	ldr	r2, [pc, #80]	; (8021168 <MX_LWIP_Init+0x33c>)
 8021118:	4912      	ldr	r1, [pc, #72]	; (8021164 <MX_LWIP_Init+0x338>)
 802111a:	4817      	ldr	r0, [pc, #92]	; (8021178 <MX_LWIP_Init+0x34c>)
 802111c:	f001 f998 	bl	8022450 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8021120:	4815      	ldr	r0, [pc, #84]	; (8021178 <MX_LWIP_Init+0x34c>)
 8021122:	f001 fb49 	bl	80227b8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8021126:	4b14      	ldr	r3, [pc, #80]	; (8021178 <MX_LWIP_Init+0x34c>)
 8021128:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802112c:	089b      	lsrs	r3, r3, #2
 802112e:	f003 0301 	and.w	r3, r3, #1
 8021132:	b2db      	uxtb	r3, r3
 8021134:	2b00      	cmp	r3, #0
 8021136:	d003      	beq.n	8021140 <MX_LWIP_Init+0x314>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8021138:	480f      	ldr	r0, [pc, #60]	; (8021178 <MX_LWIP_Init+0x34c>)
 802113a:	f001 fb4d 	bl	80227d8 <netif_set_up>
 802113e:	e002      	b.n	8021146 <MX_LWIP_Init+0x31a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8021140:	480d      	ldr	r0, [pc, #52]	; (8021178 <MX_LWIP_Init+0x34c>)
 8021142:	f001 fbb5 	bl	80228b0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8021146:	490d      	ldr	r1, [pc, #52]	; (802117c <MX_LWIP_Init+0x350>)
 8021148:	480b      	ldr	r0, [pc, #44]	; (8021178 <MX_LWIP_Init+0x34c>)
 802114a:	f001 fc47 	bl	80229dc <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 802114e:	46bd      	mov	sp, r7
 8021150:	bd80      	pop	{r7, pc}
 8021152:	bf00      	nop
 8021154:	20000504 	.word	0x20000504
 8021158:	2000ddd0 	.word	0x2000ddd0
 802115c:	2000ddd4 	.word	0x2000ddd4
 8021160:	2000ddd8 	.word	0x2000ddd8
 8021164:	2000ddc4 	.word	0x2000ddc4
 8021168:	2000ddc8 	.word	0x2000ddc8
 802116c:	2000ddcc 	.word	0x2000ddcc
 8021170:	08026799 	.word	0x08026799
 8021174:	0802150d 	.word	0x0802150d
 8021178:	2000dd84 	.word	0x2000dd84
 802117c:	080211d1 	.word	0x080211d1

08021180 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8021180:	b580      	push	{r7, lr}
 8021182:	b082      	sub	sp, #8
 8021184:	af00      	add	r7, sp, #0
 8021186:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8021188:	f7f8 fd26 	bl	8019bd8 <HAL_GetTick>
 802118c:	4602      	mov	r2, r0
 802118e:	4b08      	ldr	r3, [pc, #32]	; (80211b0 <Ethernet_Link_Periodic_Handle+0x30>)
 8021190:	681b      	ldr	r3, [r3, #0]
 8021192:	1ad3      	subs	r3, r2, r3
 8021194:	2b63      	cmp	r3, #99	; 0x63
 8021196:	d907      	bls.n	80211a8 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8021198:	f7f8 fd1e 	bl	8019bd8 <HAL_GetTick>
 802119c:	4603      	mov	r3, r0
 802119e:	4a04      	ldr	r2, [pc, #16]	; (80211b0 <Ethernet_Link_Periodic_Handle+0x30>)
 80211a0:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80211a2:	6878      	ldr	r0, [r7, #4]
 80211a4:	f000 fb10 	bl	80217c8 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80211a8:	bf00      	nop
 80211aa:	3708      	adds	r7, #8
 80211ac:	46bd      	mov	sp, r7
 80211ae:	bd80      	pop	{r7, pc}
 80211b0:	2000dd80 	.word	0x2000dd80

080211b4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80211b4:	b580      	push	{r7, lr}
 80211b6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80211b8:	4804      	ldr	r0, [pc, #16]	; (80211cc <MX_LWIP_Process+0x18>)
 80211ba:	f000 f987 	bl	80214cc <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80211be:	f002 fb83 	bl	80238c8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80211c2:	4802      	ldr	r0, [pc, #8]	; (80211cc <MX_LWIP_Process+0x18>)
 80211c4:	f7ff ffdc 	bl	8021180 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80211c8:	bf00      	nop
 80211ca:	bd80      	pop	{r7, pc}
 80211cc:	2000dd84 	.word	0x2000dd84

080211d0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80211d0:	b480      	push	{r7}
 80211d2:	b083      	sub	sp, #12
 80211d4:	af00      	add	r7, sp, #0
 80211d6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80211d8:	bf00      	nop
 80211da:	370c      	adds	r7, #12
 80211dc:	46bd      	mov	sp, r7
 80211de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211e2:	4770      	bx	lr

080211e4 <SCB_InvalidateDCache_by_Addr>:
{
 80211e4:	b480      	push	{r7}
 80211e6:	b087      	sub	sp, #28
 80211e8:	af00      	add	r7, sp, #0
 80211ea:	6078      	str	r0, [r7, #4]
 80211ec:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80211ee:	683b      	ldr	r3, [r7, #0]
 80211f0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80211f2:	687b      	ldr	r3, [r7, #4]
 80211f4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80211f6:	2320      	movs	r3, #32
 80211f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80211fa:	f3bf 8f4f 	dsb	sy
}
 80211fe:	bf00      	nop
    while (op_size > 0) {
 8021200:	e00b      	b.n	802121a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8021202:	4a0d      	ldr	r2, [pc, #52]	; (8021238 <SCB_InvalidateDCache_by_Addr+0x54>)
 8021204:	693b      	ldr	r3, [r7, #16]
 8021206:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 802120a:	68fb      	ldr	r3, [r7, #12]
 802120c:	693a      	ldr	r2, [r7, #16]
 802120e:	4413      	add	r3, r2
 8021210:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8021212:	697a      	ldr	r2, [r7, #20]
 8021214:	68fb      	ldr	r3, [r7, #12]
 8021216:	1ad3      	subs	r3, r2, r3
 8021218:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 802121a:	697b      	ldr	r3, [r7, #20]
 802121c:	2b00      	cmp	r3, #0
 802121e:	dcf0      	bgt.n	8021202 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8021220:	f3bf 8f4f 	dsb	sy
}
 8021224:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8021226:	f3bf 8f6f 	isb	sy
}
 802122a:	bf00      	nop
}
 802122c:	bf00      	nop
 802122e:	371c      	adds	r7, #28
 8021230:	46bd      	mov	sp, r7
 8021232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021236:	4770      	bx	lr
 8021238:	e000ed00 	.word	0xe000ed00

0802123c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 802123c:	b580      	push	{r7, lr}
 802123e:	b084      	sub	sp, #16
 8021240:	af00      	add	r7, sp, #0
 8021242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8021244:	2300      	movs	r3, #0
 8021246:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8021248:	4b47      	ldr	r3, [pc, #284]	; (8021368 <low_level_init+0x12c>)
 802124a:	4a48      	ldr	r2, [pc, #288]	; (802136c <low_level_init+0x130>)
 802124c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 802124e:	2300      	movs	r3, #0
 8021250:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8021252:	2380      	movs	r3, #128	; 0x80
 8021254:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8021256:	23e1      	movs	r3, #225	; 0xe1
 8021258:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 802125a:	2300      	movs	r3, #0
 802125c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 802125e:	2300      	movs	r3, #0
 8021260:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8021262:	2300      	movs	r3, #0
 8021264:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8021266:	4a40      	ldr	r2, [pc, #256]	; (8021368 <low_level_init+0x12c>)
 8021268:	f107 0308 	add.w	r3, r7, #8
 802126c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 802126e:	4b3e      	ldr	r3, [pc, #248]	; (8021368 <low_level_init+0x12c>)
 8021270:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8021274:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8021276:	4b3c      	ldr	r3, [pc, #240]	; (8021368 <low_level_init+0x12c>)
 8021278:	4a3d      	ldr	r2, [pc, #244]	; (8021370 <low_level_init+0x134>)
 802127a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 802127c:	4b3a      	ldr	r3, [pc, #232]	; (8021368 <low_level_init+0x12c>)
 802127e:	4a3d      	ldr	r2, [pc, #244]	; (8021374 <low_level_init+0x138>)
 8021280:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8021282:	4b39      	ldr	r3, [pc, #228]	; (8021368 <low_level_init+0x12c>)
 8021284:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8021288:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
	switch(EI_data.ProtocolType)
 802128a:	4b3b      	ldr	r3, [pc, #236]	; (8021378 <low_level_init+0x13c>)
 802128c:	781b      	ldrb	r3, [r3, #0]
 802128e:	2b01      	cmp	r3, #1
 8021290:	d002      	beq.n	8021298 <low_level_init+0x5c>
 8021292:	2b02      	cmp	r3, #2
 8021294:	d004      	beq.n	80212a0 <low_level_init+0x64>
		break;
	case SIEMENS:
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
		break;
	default:
		return;
 8021296:	e063      	b.n	8021360 <low_level_init+0x124>
		heth.Init.MACAddr = &EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0];
 8021298:	4b33      	ldr	r3, [pc, #204]	; (8021368 <low_level_init+0x12c>)
 802129a:	4a38      	ldr	r2, [pc, #224]	; (802137c <low_level_init+0x140>)
 802129c:	605a      	str	r2, [r3, #4]
		break;
 802129e:	e003      	b.n	80212a8 <low_level_init+0x6c>
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
 80212a0:	4b31      	ldr	r3, [pc, #196]	; (8021368 <low_level_init+0x12c>)
 80212a2:	4a37      	ldr	r2, [pc, #220]	; (8021380 <low_level_init+0x144>)
 80212a4:	605a      	str	r2, [r3, #4]
		break;
 80212a6:	bf00      	nop
	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80212a8:	482f      	ldr	r0, [pc, #188]	; (8021368 <low_level_init+0x12c>)
 80212aa:	f7f9 fdbb 	bl	801ae24 <HAL_ETH_Init>
 80212ae:	4603      	mov	r3, r0
 80212b0:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80212b2:	2238      	movs	r2, #56	; 0x38
 80212b4:	2100      	movs	r1, #0
 80212b6:	4833      	ldr	r0, [pc, #204]	; (8021384 <low_level_init+0x148>)
 80212b8:	f005 fbb0 	bl	8026a1c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80212bc:	4b31      	ldr	r3, [pc, #196]	; (8021384 <low_level_init+0x148>)
 80212be:	2221      	movs	r2, #33	; 0x21
 80212c0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80212c2:	4b30      	ldr	r3, [pc, #192]	; (8021384 <low_level_init+0x148>)
 80212c4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80212c8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80212ca:	4b2e      	ldr	r3, [pc, #184]	; (8021384 <low_level_init+0x148>)
 80212cc:	2200      	movs	r2, #0
 80212ce:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80212d0:	482d      	ldr	r0, [pc, #180]	; (8021388 <low_level_init+0x14c>)
 80212d2:	f000 ff3d 	bl	8022150 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80212d6:	687b      	ldr	r3, [r7, #4]
 80212d8:	2206      	movs	r2, #6
 80212da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80212de:	4b22      	ldr	r3, [pc, #136]	; (8021368 <low_level_init+0x12c>)
 80212e0:	685b      	ldr	r3, [r3, #4]
 80212e2:	781a      	ldrb	r2, [r3, #0]
 80212e4:	687b      	ldr	r3, [r7, #4]
 80212e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80212ea:	4b1f      	ldr	r3, [pc, #124]	; (8021368 <low_level_init+0x12c>)
 80212ec:	685b      	ldr	r3, [r3, #4]
 80212ee:	785a      	ldrb	r2, [r3, #1]
 80212f0:	687b      	ldr	r3, [r7, #4]
 80212f2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80212f6:	4b1c      	ldr	r3, [pc, #112]	; (8021368 <low_level_init+0x12c>)
 80212f8:	685b      	ldr	r3, [r3, #4]
 80212fa:	789a      	ldrb	r2, [r3, #2]
 80212fc:	687b      	ldr	r3, [r7, #4]
 80212fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8021302:	4b19      	ldr	r3, [pc, #100]	; (8021368 <low_level_init+0x12c>)
 8021304:	685b      	ldr	r3, [r3, #4]
 8021306:	78da      	ldrb	r2, [r3, #3]
 8021308:	687b      	ldr	r3, [r7, #4]
 802130a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 802130e:	4b16      	ldr	r3, [pc, #88]	; (8021368 <low_level_init+0x12c>)
 8021310:	685b      	ldr	r3, [r3, #4]
 8021312:	791a      	ldrb	r2, [r3, #4]
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 802131a:	4b13      	ldr	r3, [pc, #76]	; (8021368 <low_level_init+0x12c>)
 802131c:	685b      	ldr	r3, [r3, #4]
 802131e:	795a      	ldrb	r2, [r3, #5]
 8021320:	687b      	ldr	r3, [r7, #4]
 8021322:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8021326:	687b      	ldr	r3, [r7, #4]
 8021328:	f240 52dc 	movw	r2, #1500	; 0x5dc
 802132c:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 802132e:	687b      	ldr	r3, [r7, #4]
 8021330:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021334:	f043 030a 	orr.w	r3, r3, #10
 8021338:	b2da      	uxtb	r2, r3
 802133a:	687b      	ldr	r3, [r7, #4]
 802133c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8021340:	4912      	ldr	r1, [pc, #72]	; (802138c <low_level_init+0x150>)
 8021342:	4813      	ldr	r0, [pc, #76]	; (8021390 <low_level_init+0x154>)
 8021344:	f7f8 fa87 	bl	8019856 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8021348:	4811      	ldr	r0, [pc, #68]	; (8021390 <low_level_init+0x154>)
 802134a:	f7f8 fab6 	bl	80198ba <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 802134e:	7bfb      	ldrb	r3, [r7, #15]
 8021350:	2b00      	cmp	r3, #0
 8021352:	d103      	bne.n	802135c <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8021354:	6878      	ldr	r0, [r7, #4]
 8021356:	f000 fa37 	bl	80217c8 <ethernet_link_check_state>
 802135a:	e001      	b.n	8021360 <low_level_init+0x124>
  }
  else
  {
    Error_Handler();
 802135c:	f7f6 fe42 	bl	8017fe4 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8021360:	3710      	adds	r7, #16
 8021362:	46bd      	mov	sp, r7
 8021364:	bd80      	pop	{r7, pc}
 8021366:	bf00      	nop
 8021368:	200126d8 	.word	0x200126d8
 802136c:	40028000 	.word	0x40028000
 8021370:	20000444 	.word	0x20000444
 8021374:	200003a4 	.word	0x200003a4
 8021378:	20000504 	.word	0x20000504
 802137c:	20000543 	.word	0x20000543
 8021380:	200007b1 	.word	0x200007b1
 8021384:	20012788 	.word	0x20012788
 8021388:	0802dffc 	.word	0x0802dffc
 802138c:	20000328 	.word	0x20000328
 8021390:	200127c0 	.word	0x200127c0

08021394 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8021394:	b580      	push	{r7, lr}
 8021396:	b092      	sub	sp, #72	; 0x48
 8021398:	af00      	add	r7, sp, #0
 802139a:	6078      	str	r0, [r7, #4]
 802139c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 802139e:	2300      	movs	r3, #0
 80213a0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80213a2:	2300      	movs	r3, #0
 80213a4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80213a6:	2300      	movs	r3, #0
 80213a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80213ac:	f107 030c 	add.w	r3, r7, #12
 80213b0:	2230      	movs	r2, #48	; 0x30
 80213b2:	2100      	movs	r1, #0
 80213b4:	4618      	mov	r0, r3
 80213b6:	f005 fb31 	bl	8026a1c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80213ba:	f107 030c 	add.w	r3, r7, #12
 80213be:	2230      	movs	r2, #48	; 0x30
 80213c0:	2100      	movs	r1, #0
 80213c2:	4618      	mov	r0, r3
 80213c4:	f005 fb2a 	bl	8026a1c <memset>

  for(q = p; q != NULL; q = q->next)
 80213c8:	683b      	ldr	r3, [r7, #0]
 80213ca:	643b      	str	r3, [r7, #64]	; 0x40
 80213cc:	e045      	b.n	802145a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80213ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80213d0:	2b03      	cmp	r3, #3
 80213d2:	d902      	bls.n	80213da <low_level_output+0x46>
      return ERR_IF;
 80213d4:	f06f 030b 	mvn.w	r3, #11
 80213d8:	e055      	b.n	8021486 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80213da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80213dc:	6859      	ldr	r1, [r3, #4]
 80213de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80213e0:	4613      	mov	r3, r2
 80213e2:	005b      	lsls	r3, r3, #1
 80213e4:	4413      	add	r3, r2
 80213e6:	009b      	lsls	r3, r3, #2
 80213e8:	3348      	adds	r3, #72	; 0x48
 80213ea:	443b      	add	r3, r7
 80213ec:	3b3c      	subs	r3, #60	; 0x3c
 80213ee:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80213f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80213f2:	895b      	ldrh	r3, [r3, #10]
 80213f4:	4619      	mov	r1, r3
 80213f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80213f8:	4613      	mov	r3, r2
 80213fa:	005b      	lsls	r3, r3, #1
 80213fc:	4413      	add	r3, r2
 80213fe:	009b      	lsls	r3, r3, #2
 8021400:	3348      	adds	r3, #72	; 0x48
 8021402:	443b      	add	r3, r7
 8021404:	3b38      	subs	r3, #56	; 0x38
 8021406:	6019      	str	r1, [r3, #0]

    if(i>0)
 8021408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802140a:	2b00      	cmp	r3, #0
 802140c:	d011      	beq.n	8021432 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 802140e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021410:	1e5a      	subs	r2, r3, #1
 8021412:	f107 000c 	add.w	r0, r7, #12
 8021416:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8021418:	460b      	mov	r3, r1
 802141a:	005b      	lsls	r3, r3, #1
 802141c:	440b      	add	r3, r1
 802141e:	009b      	lsls	r3, r3, #2
 8021420:	18c1      	adds	r1, r0, r3
 8021422:	4613      	mov	r3, r2
 8021424:	005b      	lsls	r3, r3, #1
 8021426:	4413      	add	r3, r2
 8021428:	009b      	lsls	r3, r3, #2
 802142a:	3348      	adds	r3, #72	; 0x48
 802142c:	443b      	add	r3, r7
 802142e:	3b34      	subs	r3, #52	; 0x34
 8021430:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8021432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021434:	681b      	ldr	r3, [r3, #0]
 8021436:	2b00      	cmp	r3, #0
 8021438:	d109      	bne.n	802144e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 802143a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802143c:	4613      	mov	r3, r2
 802143e:	005b      	lsls	r3, r3, #1
 8021440:	4413      	add	r3, r2
 8021442:	009b      	lsls	r3, r3, #2
 8021444:	3348      	adds	r3, #72	; 0x48
 8021446:	443b      	add	r3, r7
 8021448:	3b34      	subs	r3, #52	; 0x34
 802144a:	2200      	movs	r2, #0
 802144c:	601a      	str	r2, [r3, #0]
    }

    i++;
 802144e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021450:	3301      	adds	r3, #1
 8021452:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8021454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021456:	681b      	ldr	r3, [r3, #0]
 8021458:	643b      	str	r3, [r7, #64]	; 0x40
 802145a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802145c:	2b00      	cmp	r3, #0
 802145e:	d1b6      	bne.n	80213ce <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8021460:	683b      	ldr	r3, [r7, #0]
 8021462:	891b      	ldrh	r3, [r3, #8]
 8021464:	461a      	mov	r2, r3
 8021466:	4b0a      	ldr	r3, [pc, #40]	; (8021490 <low_level_output+0xfc>)
 8021468:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 802146a:	4a09      	ldr	r2, [pc, #36]	; (8021490 <low_level_output+0xfc>)
 802146c:	f107 030c 	add.w	r3, r7, #12
 8021470:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8021472:	4a07      	ldr	r2, [pc, #28]	; (8021490 <low_level_output+0xfc>)
 8021474:	683b      	ldr	r3, [r7, #0]
 8021476:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8021478:	2214      	movs	r2, #20
 802147a:	4905      	ldr	r1, [pc, #20]	; (8021490 <low_level_output+0xfc>)
 802147c:	4805      	ldr	r0, [pc, #20]	; (8021494 <low_level_output+0x100>)
 802147e:	f7f9 fe05 	bl	801b08c <HAL_ETH_Transmit>

  return errval;
 8021482:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8021486:	4618      	mov	r0, r3
 8021488:	3748      	adds	r7, #72	; 0x48
 802148a:	46bd      	mov	sp, r7
 802148c:	bd80      	pop	{r7, pc}
 802148e:	bf00      	nop
 8021490:	20012788 	.word	0x20012788
 8021494:	200126d8 	.word	0x200126d8

08021498 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8021498:	b580      	push	{r7, lr}
 802149a:	b084      	sub	sp, #16
 802149c:	af00      	add	r7, sp, #0
 802149e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80214a0:	2300      	movs	r3, #0
 80214a2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80214a4:	4b07      	ldr	r3, [pc, #28]	; (80214c4 <low_level_input+0x2c>)
 80214a6:	781b      	ldrb	r3, [r3, #0]
 80214a8:	2b00      	cmp	r3, #0
 80214aa:	d105      	bne.n	80214b8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80214ac:	f107 030c 	add.w	r3, r7, #12
 80214b0:	4619      	mov	r1, r3
 80214b2:	4805      	ldr	r0, [pc, #20]	; (80214c8 <low_level_input+0x30>)
 80214b4:	f7f9 fe7e 	bl	801b1b4 <HAL_ETH_ReadData>
  }

  return p;
 80214b8:	68fb      	ldr	r3, [r7, #12]
}
 80214ba:	4618      	mov	r0, r3
 80214bc:	3710      	adds	r7, #16
 80214be:	46bd      	mov	sp, r7
 80214c0:	bd80      	pop	{r7, pc}
 80214c2:	bf00      	nop
 80214c4:	200126d4 	.word	0x200126d4
 80214c8:	200126d8 	.word	0x200126d8

080214cc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80214cc:	b580      	push	{r7, lr}
 80214ce:	b084      	sub	sp, #16
 80214d0:	af00      	add	r7, sp, #0
 80214d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80214d4:	2300      	movs	r3, #0
 80214d6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80214d8:	6878      	ldr	r0, [r7, #4]
 80214da:	f7ff ffdd 	bl	8021498 <low_level_input>
 80214de:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80214e0:	68fb      	ldr	r3, [r7, #12]
 80214e2:	2b00      	cmp	r3, #0
 80214e4:	d00a      	beq.n	80214fc <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80214e6:	687b      	ldr	r3, [r7, #4]
 80214e8:	691b      	ldr	r3, [r3, #16]
 80214ea:	6879      	ldr	r1, [r7, #4]
 80214ec:	68f8      	ldr	r0, [r7, #12]
 80214ee:	4798      	blx	r3
 80214f0:	4603      	mov	r3, r0
 80214f2:	2b00      	cmp	r3, #0
 80214f4:	d002      	beq.n	80214fc <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80214f6:	68f8      	ldr	r0, [r7, #12]
 80214f8:	f001 fe40 	bl	802317c <pbuf_free>
      }
    }
  } while(p!=NULL);
 80214fc:	68fb      	ldr	r3, [r7, #12]
 80214fe:	2b00      	cmp	r3, #0
 8021500:	d1ea      	bne.n	80214d8 <ethernetif_input+0xc>
}
 8021502:	bf00      	nop
 8021504:	bf00      	nop
 8021506:	3710      	adds	r7, #16
 8021508:	46bd      	mov	sp, r7
 802150a:	bd80      	pop	{r7, pc}

0802150c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 802150c:	b580      	push	{r7, lr}
 802150e:	b082      	sub	sp, #8
 8021510:	af00      	add	r7, sp, #0
 8021512:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	2b00      	cmp	r3, #0
 8021518:	d106      	bne.n	8021528 <ethernetif_init+0x1c>
 802151a:	4b0e      	ldr	r3, [pc, #56]	; (8021554 <ethernetif_init+0x48>)
 802151c:	f240 1287 	movw	r2, #391	; 0x187
 8021520:	490d      	ldr	r1, [pc, #52]	; (8021558 <ethernetif_init+0x4c>)
 8021522:	480e      	ldr	r0, [pc, #56]	; (802155c <ethernetif_init+0x50>)
 8021524:	f005 fb62 	bl	8026bec <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8021528:	687b      	ldr	r3, [r7, #4]
 802152a:	2273      	movs	r2, #115	; 0x73
 802152c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8021530:	687b      	ldr	r3, [r7, #4]
 8021532:	2274      	movs	r2, #116	; 0x74
 8021534:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	4a09      	ldr	r2, [pc, #36]	; (8021560 <ethernetif_init+0x54>)
 802153c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 802153e:	687b      	ldr	r3, [r7, #4]
 8021540:	4a08      	ldr	r2, [pc, #32]	; (8021564 <ethernetif_init+0x58>)
 8021542:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8021544:	6878      	ldr	r0, [r7, #4]
 8021546:	f7ff fe79 	bl	802123c <low_level_init>

  return ERR_OK;
 802154a:	2300      	movs	r3, #0
}
 802154c:	4618      	mov	r0, r3
 802154e:	3708      	adds	r7, #8
 8021550:	46bd      	mov	sp, r7
 8021552:	bd80      	pop	{r7, pc}
 8021554:	0802c554 	.word	0x0802c554
 8021558:	0802c570 	.word	0x0802c570
 802155c:	0802c580 	.word	0x0802c580
 8021560:	08024b29 	.word	0x08024b29
 8021564:	08021395 	.word	0x08021395

08021568 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8021568:	b580      	push	{r7, lr}
 802156a:	b084      	sub	sp, #16
 802156c:	af00      	add	r7, sp, #0
 802156e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8021570:	687b      	ldr	r3, [r7, #4]
 8021572:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8021574:	68f9      	ldr	r1, [r7, #12]
 8021576:	4807      	ldr	r0, [pc, #28]	; (8021594 <pbuf_free_custom+0x2c>)
 8021578:	f000 fecc 	bl	8022314 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 802157c:	4b06      	ldr	r3, [pc, #24]	; (8021598 <pbuf_free_custom+0x30>)
 802157e:	781b      	ldrb	r3, [r3, #0]
 8021580:	2b01      	cmp	r3, #1
 8021582:	d102      	bne.n	802158a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8021584:	4b04      	ldr	r3, [pc, #16]	; (8021598 <pbuf_free_custom+0x30>)
 8021586:	2200      	movs	r2, #0
 8021588:	701a      	strb	r2, [r3, #0]
  }
}
 802158a:	bf00      	nop
 802158c:	3710      	adds	r7, #16
 802158e:	46bd      	mov	sp, r7
 8021590:	bd80      	pop	{r7, pc}
 8021592:	bf00      	nop
 8021594:	0802dffc 	.word	0x0802dffc
 8021598:	200126d4 	.word	0x200126d4

0802159c <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 802159c:	b580      	push	{r7, lr}
 802159e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80215a0:	f7f8 fb1a 	bl	8019bd8 <HAL_GetTick>
 80215a4:	4603      	mov	r3, r0
}
 80215a6:	4618      	mov	r0, r3
 80215a8:	bd80      	pop	{r7, pc}
	...

080215ac <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80215ac:	b580      	push	{r7, lr}
 80215ae:	b08e      	sub	sp, #56	; 0x38
 80215b0:	af00      	add	r7, sp, #0
 80215b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80215b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80215b8:	2200      	movs	r2, #0
 80215ba:	601a      	str	r2, [r3, #0]
 80215bc:	605a      	str	r2, [r3, #4]
 80215be:	609a      	str	r2, [r3, #8]
 80215c0:	60da      	str	r2, [r3, #12]
 80215c2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80215c4:	687b      	ldr	r3, [r7, #4]
 80215c6:	681b      	ldr	r3, [r3, #0]
 80215c8:	4a52      	ldr	r2, [pc, #328]	; (8021714 <HAL_ETH_MspInit+0x168>)
 80215ca:	4293      	cmp	r3, r2
 80215cc:	f040 809e 	bne.w	802170c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80215d0:	4b51      	ldr	r3, [pc, #324]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 80215d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215d4:	4a50      	ldr	r2, [pc, #320]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 80215d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80215da:	6313      	str	r3, [r2, #48]	; 0x30
 80215dc:	4b4e      	ldr	r3, [pc, #312]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 80215de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80215e4:	623b      	str	r3, [r7, #32]
 80215e6:	6a3b      	ldr	r3, [r7, #32]
 80215e8:	4b4b      	ldr	r3, [pc, #300]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 80215ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215ec:	4a4a      	ldr	r2, [pc, #296]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 80215ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80215f2:	6313      	str	r3, [r2, #48]	; 0x30
 80215f4:	4b48      	ldr	r3, [pc, #288]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 80215f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80215fc:	61fb      	str	r3, [r7, #28]
 80215fe:	69fb      	ldr	r3, [r7, #28]
 8021600:	4b45      	ldr	r3, [pc, #276]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 8021602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021604:	4a44      	ldr	r2, [pc, #272]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 8021606:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802160a:	6313      	str	r3, [r2, #48]	; 0x30
 802160c:	4b42      	ldr	r3, [pc, #264]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 802160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8021614:	61bb      	str	r3, [r7, #24]
 8021616:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021618:	4b3f      	ldr	r3, [pc, #252]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 802161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802161c:	4a3e      	ldr	r2, [pc, #248]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 802161e:	f043 0304 	orr.w	r3, r3, #4
 8021622:	6313      	str	r3, [r2, #48]	; 0x30
 8021624:	4b3c      	ldr	r3, [pc, #240]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 8021626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021628:	f003 0304 	and.w	r3, r3, #4
 802162c:	617b      	str	r3, [r7, #20]
 802162e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021630:	4b39      	ldr	r3, [pc, #228]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 8021632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021634:	4a38      	ldr	r2, [pc, #224]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 8021636:	f043 0301 	orr.w	r3, r3, #1
 802163a:	6313      	str	r3, [r2, #48]	; 0x30
 802163c:	4b36      	ldr	r3, [pc, #216]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 802163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021640:	f003 0301 	and.w	r3, r3, #1
 8021644:	613b      	str	r3, [r7, #16]
 8021646:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021648:	4b33      	ldr	r3, [pc, #204]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 802164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802164c:	4a32      	ldr	r2, [pc, #200]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 802164e:	f043 0302 	orr.w	r3, r3, #2
 8021652:	6313      	str	r3, [r2, #48]	; 0x30
 8021654:	4b30      	ldr	r3, [pc, #192]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 8021656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021658:	f003 0302 	and.w	r3, r3, #2
 802165c:	60fb      	str	r3, [r7, #12]
 802165e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8021660:	4b2d      	ldr	r3, [pc, #180]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 8021662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021664:	4a2c      	ldr	r2, [pc, #176]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 8021666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802166a:	6313      	str	r3, [r2, #48]	; 0x30
 802166c:	4b2a      	ldr	r3, [pc, #168]	; (8021718 <HAL_ETH_MspInit+0x16c>)
 802166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021674:	60bb      	str	r3, [r7, #8]
 8021676:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 8021678:	2332      	movs	r3, #50	; 0x32
 802167a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802167c:	2302      	movs	r3, #2
 802167e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021680:	2300      	movs	r3, #0
 8021682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021684:	2303      	movs	r3, #3
 8021686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8021688:	230b      	movs	r3, #11
 802168a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802168c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021690:	4619      	mov	r1, r3
 8021692:	4822      	ldr	r0, [pc, #136]	; (802171c <HAL_ETH_MspInit+0x170>)
 8021694:	f7fa fdac 	bl	801c1f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 8021698:	2386      	movs	r3, #134	; 0x86
 802169a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802169c:	2302      	movs	r3, #2
 802169e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80216a0:	2300      	movs	r3, #0
 80216a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80216a4:	2303      	movs	r3, #3
 80216a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80216a8:	230b      	movs	r3, #11
 80216aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80216ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80216b0:	4619      	mov	r1, r3
 80216b2:	481b      	ldr	r0, [pc, #108]	; (8021720 <HAL_ETH_MspInit+0x174>)
 80216b4:	f7fa fd9c 	bl	801c1f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 80216b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80216bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80216be:	2302      	movs	r3, #2
 80216c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80216c2:	2300      	movs	r3, #0
 80216c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80216c6:	2303      	movs	r3, #3
 80216c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80216ca:	230b      	movs	r3, #11
 80216cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 80216ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80216d2:	4619      	mov	r1, r3
 80216d4:	4813      	ldr	r0, [pc, #76]	; (8021724 <HAL_ETH_MspInit+0x178>)
 80216d6:	f7fa fd8b 	bl	801c1f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 80216da:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80216de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80216e0:	2302      	movs	r3, #2
 80216e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80216e4:	2300      	movs	r3, #0
 80216e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80216e8:	2303      	movs	r3, #3
 80216ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80216ec:	230b      	movs	r3, #11
 80216ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80216f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80216f4:	4619      	mov	r1, r3
 80216f6:	480c      	ldr	r0, [pc, #48]	; (8021728 <HAL_ETH_MspInit+0x17c>)
 80216f8:	f7fa fd7a 	bl	801c1f0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 80216fc:	2200      	movs	r2, #0
 80216fe:	2101      	movs	r1, #1
 8021700:	203d      	movs	r0, #61	; 0x3d
 8021702:	f7f9 fa4a 	bl	801ab9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8021706:	203d      	movs	r0, #61	; 0x3d
 8021708:	f7f9 fa63 	bl	801abd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 802170c:	bf00      	nop
 802170e:	3738      	adds	r7, #56	; 0x38
 8021710:	46bd      	mov	sp, r7
 8021712:	bd80      	pop	{r7, pc}
 8021714:	40028000 	.word	0x40028000
 8021718:	40023800 	.word	0x40023800
 802171c:	40020800 	.word	0x40020800
 8021720:	40020000 	.word	0x40020000
 8021724:	40020400 	.word	0x40020400
 8021728:	40021800 	.word	0x40021800

0802172c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 802172c:	b580      	push	{r7, lr}
 802172e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8021730:	4802      	ldr	r0, [pc, #8]	; (802173c <ETH_PHY_IO_Init+0x10>)
 8021732:	f7fa f903 	bl	801b93c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8021736:	2300      	movs	r3, #0
}
 8021738:	4618      	mov	r0, r3
 802173a:	bd80      	pop	{r7, pc}
 802173c:	200126d8 	.word	0x200126d8

08021740 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8021740:	b480      	push	{r7}
 8021742:	af00      	add	r7, sp, #0
  return 0;
 8021744:	2300      	movs	r3, #0
}
 8021746:	4618      	mov	r0, r3
 8021748:	46bd      	mov	sp, r7
 802174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802174e:	4770      	bx	lr

08021750 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8021750:	b580      	push	{r7, lr}
 8021752:	b084      	sub	sp, #16
 8021754:	af00      	add	r7, sp, #0
 8021756:	60f8      	str	r0, [r7, #12]
 8021758:	60b9      	str	r1, [r7, #8]
 802175a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 802175c:	687b      	ldr	r3, [r7, #4]
 802175e:	68ba      	ldr	r2, [r7, #8]
 8021760:	68f9      	ldr	r1, [r7, #12]
 8021762:	4807      	ldr	r0, [pc, #28]	; (8021780 <ETH_PHY_IO_ReadReg+0x30>)
 8021764:	f7f9 ff52 	bl	801b60c <HAL_ETH_ReadPHYRegister>
 8021768:	4603      	mov	r3, r0
 802176a:	2b00      	cmp	r3, #0
 802176c:	d002      	beq.n	8021774 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 802176e:	f04f 33ff 	mov.w	r3, #4294967295
 8021772:	e000      	b.n	8021776 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8021774:	2300      	movs	r3, #0
}
 8021776:	4618      	mov	r0, r3
 8021778:	3710      	adds	r7, #16
 802177a:	46bd      	mov	sp, r7
 802177c:	bd80      	pop	{r7, pc}
 802177e:	bf00      	nop
 8021780:	200126d8 	.word	0x200126d8

08021784 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8021784:	b580      	push	{r7, lr}
 8021786:	b084      	sub	sp, #16
 8021788:	af00      	add	r7, sp, #0
 802178a:	60f8      	str	r0, [r7, #12]
 802178c:	60b9      	str	r1, [r7, #8]
 802178e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8021790:	687b      	ldr	r3, [r7, #4]
 8021792:	68ba      	ldr	r2, [r7, #8]
 8021794:	68f9      	ldr	r1, [r7, #12]
 8021796:	4807      	ldr	r0, [pc, #28]	; (80217b4 <ETH_PHY_IO_WriteReg+0x30>)
 8021798:	f7f9 ff83 	bl	801b6a2 <HAL_ETH_WritePHYRegister>
 802179c:	4603      	mov	r3, r0
 802179e:	2b00      	cmp	r3, #0
 80217a0:	d002      	beq.n	80217a8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80217a2:	f04f 33ff 	mov.w	r3, #4294967295
 80217a6:	e000      	b.n	80217aa <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80217a8:	2300      	movs	r3, #0
}
 80217aa:	4618      	mov	r0, r3
 80217ac:	3710      	adds	r7, #16
 80217ae:	46bd      	mov	sp, r7
 80217b0:	bd80      	pop	{r7, pc}
 80217b2:	bf00      	nop
 80217b4:	200126d8 	.word	0x200126d8

080217b8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80217b8:	b580      	push	{r7, lr}
 80217ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80217bc:	f7f8 fa0c 	bl	8019bd8 <HAL_GetTick>
 80217c0:	4603      	mov	r3, r0
}
 80217c2:	4618      	mov	r0, r3
 80217c4:	bd80      	pop	{r7, pc}
	...

080217c8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80217c8:	b580      	push	{r7, lr}
 80217ca:	b0a0      	sub	sp, #128	; 0x80
 80217cc:	af00      	add	r7, sp, #0
 80217ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80217d0:	f107 030c 	add.w	r3, r7, #12
 80217d4:	2264      	movs	r2, #100	; 0x64
 80217d6:	2100      	movs	r1, #0
 80217d8:	4618      	mov	r0, r3
 80217da:	f005 f91f 	bl	8026a1c <memset>
  int32_t PHYLinkState = 0;
 80217de:	2300      	movs	r3, #0
 80217e0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80217e2:	2300      	movs	r3, #0
 80217e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80217e6:	2300      	movs	r3, #0
 80217e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80217ea:	2300      	movs	r3, #0
 80217ec:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80217ee:	483a      	ldr	r0, [pc, #232]	; (80218d8 <ethernet_link_check_state+0x110>)
 80217f0:	f7f8 f90b 	bl	8019a0a <DP83848_GetLinkState>
 80217f4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 80217f6:	687b      	ldr	r3, [r7, #4]
 80217f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80217fc:	089b      	lsrs	r3, r3, #2
 80217fe:	f003 0301 	and.w	r3, r3, #1
 8021802:	b2db      	uxtb	r3, r3
 8021804:	2b00      	cmp	r3, #0
 8021806:	d00c      	beq.n	8021822 <ethernet_link_check_state+0x5a>
 8021808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802180a:	2b01      	cmp	r3, #1
 802180c:	dc09      	bgt.n	8021822 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 802180e:	4833      	ldr	r0, [pc, #204]	; (80218dc <ethernet_link_check_state+0x114>)
 8021810:	f7f9 fbe3 	bl	801afda <HAL_ETH_Stop>
    netif_set_down(netif);
 8021814:	6878      	ldr	r0, [r7, #4]
 8021816:	f001 f84b 	bl	80228b0 <netif_set_down>
    netif_set_link_down(netif);
 802181a:	6878      	ldr	r0, [r7, #4]
 802181c:	f001 f8ae 	bl	802297c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8021820:	e055      	b.n	80218ce <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8021822:	687b      	ldr	r3, [r7, #4]
 8021824:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021828:	f003 0304 	and.w	r3, r3, #4
 802182c:	2b00      	cmp	r3, #0
 802182e:	d14e      	bne.n	80218ce <ethernet_link_check_state+0x106>
 8021830:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021832:	2b01      	cmp	r3, #1
 8021834:	dd4b      	ble.n	80218ce <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8021836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021838:	3b02      	subs	r3, #2
 802183a:	2b03      	cmp	r3, #3
 802183c:	d82a      	bhi.n	8021894 <ethernet_link_check_state+0xcc>
 802183e:	a201      	add	r2, pc, #4	; (adr r2, 8021844 <ethernet_link_check_state+0x7c>)
 8021840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021844:	08021855 	.word	0x08021855
 8021848:	08021867 	.word	0x08021867
 802184c:	08021877 	.word	0x08021877
 8021850:	08021887 	.word	0x08021887
      duplex = ETH_FULLDUPLEX_MODE;
 8021854:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021858:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 802185a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802185e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8021860:	2301      	movs	r3, #1
 8021862:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8021864:	e017      	b.n	8021896 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8021866:	2300      	movs	r3, #0
 8021868:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 802186a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802186e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8021870:	2301      	movs	r3, #1
 8021872:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8021874:	e00f      	b.n	8021896 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8021876:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802187a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 802187c:	2300      	movs	r3, #0
 802187e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8021880:	2301      	movs	r3, #1
 8021882:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8021884:	e007      	b.n	8021896 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8021886:	2300      	movs	r3, #0
 8021888:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 802188a:	2300      	movs	r3, #0
 802188c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 802188e:	2301      	movs	r3, #1
 8021890:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8021892:	e000      	b.n	8021896 <ethernet_link_check_state+0xce>
      break;
 8021894:	bf00      	nop
    if(linkchanged)
 8021896:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021898:	2b00      	cmp	r3, #0
 802189a:	d018      	beq.n	80218ce <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 802189c:	f107 030c 	add.w	r3, r7, #12
 80218a0:	4619      	mov	r1, r3
 80218a2:	480e      	ldr	r0, [pc, #56]	; (80218dc <ethernet_link_check_state+0x114>)
 80218a4:	f7f9 ff46 	bl	801b734 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80218a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80218aa:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80218ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80218ae:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80218b0:	f107 030c 	add.w	r3, r7, #12
 80218b4:	4619      	mov	r1, r3
 80218b6:	4809      	ldr	r0, [pc, #36]	; (80218dc <ethernet_link_check_state+0x114>)
 80218b8:	f7fa f826 	bl	801b908 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80218bc:	4807      	ldr	r0, [pc, #28]	; (80218dc <ethernet_link_check_state+0x114>)
 80218be:	f7f9 fb2d 	bl	801af1c <HAL_ETH_Start>
      netif_set_up(netif);
 80218c2:	6878      	ldr	r0, [r7, #4]
 80218c4:	f000 ff88 	bl	80227d8 <netif_set_up>
      netif_set_link_up(netif);
 80218c8:	6878      	ldr	r0, [r7, #4]
 80218ca:	f001 f823 	bl	8022914 <netif_set_link_up>
}
 80218ce:	bf00      	nop
 80218d0:	3780      	adds	r7, #128	; 0x80
 80218d2:	46bd      	mov	sp, r7
 80218d4:	bd80      	pop	{r7, pc}
 80218d6:	bf00      	nop
 80218d8:	200127c0 	.word	0x200127c0
 80218dc:	200126d8 	.word	0x200126d8

080218e0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80218e0:	b580      	push	{r7, lr}
 80218e2:	b086      	sub	sp, #24
 80218e4:	af02      	add	r7, sp, #8
 80218e6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80218e8:	4812      	ldr	r0, [pc, #72]	; (8021934 <HAL_ETH_RxAllocateCallback+0x54>)
 80218ea:	f000 fca5 	bl	8022238 <memp_malloc_pool>
 80218ee:	60f8      	str	r0, [r7, #12]
	if (p)
 80218f0:	68fb      	ldr	r3, [r7, #12]
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	d014      	beq.n	8021920 <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80218f6:	68fb      	ldr	r3, [r7, #12]
 80218f8:	f103 0214 	add.w	r2, r3, #20
 80218fc:	687b      	ldr	r3, [r7, #4]
 80218fe:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 8021900:	68fb      	ldr	r3, [r7, #12]
 8021902:	4a0d      	ldr	r2, [pc, #52]	; (8021938 <HAL_ETH_RxAllocateCallback+0x58>)
 8021904:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8021906:	687b      	ldr	r3, [r7, #4]
 8021908:	681b      	ldr	r3, [r3, #0]
 802190a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 802190e:	9201      	str	r2, [sp, #4]
 8021910:	9300      	str	r3, [sp, #0]
 8021912:	68fb      	ldr	r3, [r7, #12]
 8021914:	2241      	movs	r2, #65	; 0x41
 8021916:	2100      	movs	r1, #0
 8021918:	2000      	movs	r0, #0
 802191a:	f001 fa75 	bl	8022e08 <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 802191e:	e005      	b.n	802192c <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 8021920:	4b06      	ldr	r3, [pc, #24]	; (802193c <HAL_ETH_RxAllocateCallback+0x5c>)
 8021922:	2201      	movs	r2, #1
 8021924:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 8021926:	687b      	ldr	r3, [r7, #4]
 8021928:	2200      	movs	r2, #0
 802192a:	601a      	str	r2, [r3, #0]
}
 802192c:	bf00      	nop
 802192e:	3710      	adds	r7, #16
 8021930:	46bd      	mov	sp, r7
 8021932:	bd80      	pop	{r7, pc}
 8021934:	0802dffc 	.word	0x0802dffc
 8021938:	08021569 	.word	0x08021569
 802193c:	200126d4 	.word	0x200126d4

08021940 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8021940:	b580      	push	{r7, lr}
 8021942:	b088      	sub	sp, #32
 8021944:	af00      	add	r7, sp, #0
 8021946:	60f8      	str	r0, [r7, #12]
 8021948:	60b9      	str	r1, [r7, #8]
 802194a:	607a      	str	r2, [r7, #4]
 802194c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 802194e:	68fb      	ldr	r3, [r7, #12]
 8021950:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8021952:	68bb      	ldr	r3, [r7, #8]
 8021954:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 8021956:	2300      	movs	r3, #0
 8021958:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 802195a:	687b      	ldr	r3, [r7, #4]
 802195c:	3b14      	subs	r3, #20
 802195e:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 8021960:	69fb      	ldr	r3, [r7, #28]
 8021962:	2200      	movs	r2, #0
 8021964:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 8021966:	69fb      	ldr	r3, [r7, #28]
 8021968:	2200      	movs	r2, #0
 802196a:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 802196c:	69fb      	ldr	r3, [r7, #28]
 802196e:	887a      	ldrh	r2, [r7, #2]
 8021970:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 8021972:	69bb      	ldr	r3, [r7, #24]
 8021974:	681b      	ldr	r3, [r3, #0]
 8021976:	2b00      	cmp	r3, #0
 8021978:	d103      	bne.n	8021982 <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 802197a:	69bb      	ldr	r3, [r7, #24]
 802197c:	69fa      	ldr	r2, [r7, #28]
 802197e:	601a      	str	r2, [r3, #0]
 8021980:	e003      	b.n	802198a <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 8021982:	697b      	ldr	r3, [r7, #20]
 8021984:	681b      	ldr	r3, [r3, #0]
 8021986:	69fa      	ldr	r2, [r7, #28]
 8021988:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 802198a:	697b      	ldr	r3, [r7, #20]
 802198c:	69fa      	ldr	r2, [r7, #28]
 802198e:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 8021990:	69bb      	ldr	r3, [r7, #24]
 8021992:	681b      	ldr	r3, [r3, #0]
 8021994:	61fb      	str	r3, [r7, #28]
 8021996:	e009      	b.n	80219ac <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 8021998:	69fb      	ldr	r3, [r7, #28]
 802199a:	891a      	ldrh	r2, [r3, #8]
 802199c:	887b      	ldrh	r3, [r7, #2]
 802199e:	4413      	add	r3, r2
 80219a0:	b29a      	uxth	r2, r3
 80219a2:	69fb      	ldr	r3, [r7, #28]
 80219a4:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 80219a6:	69fb      	ldr	r3, [r7, #28]
 80219a8:	681b      	ldr	r3, [r3, #0]
 80219aa:	61fb      	str	r3, [r7, #28]
 80219ac:	69fb      	ldr	r3, [r7, #28]
 80219ae:	2b00      	cmp	r3, #0
 80219b0:	d1f2      	bne.n	8021998 <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80219b2:	887b      	ldrh	r3, [r7, #2]
 80219b4:	4619      	mov	r1, r3
 80219b6:	6878      	ldr	r0, [r7, #4]
 80219b8:	f7ff fc14 	bl	80211e4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80219bc:	bf00      	nop
 80219be:	3720      	adds	r7, #32
 80219c0:	46bd      	mov	sp, r7
 80219c2:	bd80      	pop	{r7, pc}

080219c4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80219c4:	b480      	push	{r7}
 80219c6:	b083      	sub	sp, #12
 80219c8:	af00      	add	r7, sp, #0
 80219ca:	4603      	mov	r3, r0
 80219cc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80219ce:	88fb      	ldrh	r3, [r7, #6]
 80219d0:	021b      	lsls	r3, r3, #8
 80219d2:	b21a      	sxth	r2, r3
 80219d4:	88fb      	ldrh	r3, [r7, #6]
 80219d6:	0a1b      	lsrs	r3, r3, #8
 80219d8:	b29b      	uxth	r3, r3
 80219da:	b21b      	sxth	r3, r3
 80219dc:	4313      	orrs	r3, r2
 80219de:	b21b      	sxth	r3, r3
 80219e0:	b29b      	uxth	r3, r3
}
 80219e2:	4618      	mov	r0, r3
 80219e4:	370c      	adds	r7, #12
 80219e6:	46bd      	mov	sp, r7
 80219e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219ec:	4770      	bx	lr

080219ee <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80219ee:	b580      	push	{r7, lr}
 80219f0:	b082      	sub	sp, #8
 80219f2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80219f4:	2300      	movs	r3, #0
 80219f6:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80219f8:	f000 f8d2 	bl	8021ba0 <mem_init>
  memp_init();
 80219fc:	f000 fbd8 	bl	80221b0 <memp_init>
  pbuf_init();
  netif_init();
 8021a00:	f000 fcfc 	bl	80223fc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8021a04:	f001 ff9a 	bl	802393c <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8021a08:	f001 ff16 	bl	8023838 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8021a0c:	bf00      	nop
 8021a0e:	3708      	adds	r7, #8
 8021a10:	46bd      	mov	sp, r7
 8021a12:	bd80      	pop	{r7, pc}

08021a14 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8021a14:	b480      	push	{r7}
 8021a16:	b083      	sub	sp, #12
 8021a18:	af00      	add	r7, sp, #0
 8021a1a:	4603      	mov	r3, r0
 8021a1c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8021a1e:	4b05      	ldr	r3, [pc, #20]	; (8021a34 <ptr_to_mem+0x20>)
 8021a20:	681a      	ldr	r2, [r3, #0]
 8021a22:	88fb      	ldrh	r3, [r7, #6]
 8021a24:	4413      	add	r3, r2
}
 8021a26:	4618      	mov	r0, r3
 8021a28:	370c      	adds	r7, #12
 8021a2a:	46bd      	mov	sp, r7
 8021a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a30:	4770      	bx	lr
 8021a32:	bf00      	nop
 8021a34:	20012e4c 	.word	0x20012e4c

08021a38 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8021a38:	b480      	push	{r7}
 8021a3a:	b083      	sub	sp, #12
 8021a3c:	af00      	add	r7, sp, #0
 8021a3e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8021a40:	4b05      	ldr	r3, [pc, #20]	; (8021a58 <mem_to_ptr+0x20>)
 8021a42:	681b      	ldr	r3, [r3, #0]
 8021a44:	687a      	ldr	r2, [r7, #4]
 8021a46:	1ad3      	subs	r3, r2, r3
 8021a48:	b29b      	uxth	r3, r3
}
 8021a4a:	4618      	mov	r0, r3
 8021a4c:	370c      	adds	r7, #12
 8021a4e:	46bd      	mov	sp, r7
 8021a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a54:	4770      	bx	lr
 8021a56:	bf00      	nop
 8021a58:	20012e4c 	.word	0x20012e4c

08021a5c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8021a5c:	b590      	push	{r4, r7, lr}
 8021a5e:	b085      	sub	sp, #20
 8021a60:	af00      	add	r7, sp, #0
 8021a62:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8021a64:	4b45      	ldr	r3, [pc, #276]	; (8021b7c <plug_holes+0x120>)
 8021a66:	681b      	ldr	r3, [r3, #0]
 8021a68:	687a      	ldr	r2, [r7, #4]
 8021a6a:	429a      	cmp	r2, r3
 8021a6c:	d206      	bcs.n	8021a7c <plug_holes+0x20>
 8021a6e:	4b44      	ldr	r3, [pc, #272]	; (8021b80 <plug_holes+0x124>)
 8021a70:	f240 12df 	movw	r2, #479	; 0x1df
 8021a74:	4943      	ldr	r1, [pc, #268]	; (8021b84 <plug_holes+0x128>)
 8021a76:	4844      	ldr	r0, [pc, #272]	; (8021b88 <plug_holes+0x12c>)
 8021a78:	f005 f8b8 	bl	8026bec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8021a7c:	4b43      	ldr	r3, [pc, #268]	; (8021b8c <plug_holes+0x130>)
 8021a7e:	681b      	ldr	r3, [r3, #0]
 8021a80:	687a      	ldr	r2, [r7, #4]
 8021a82:	429a      	cmp	r2, r3
 8021a84:	d306      	bcc.n	8021a94 <plug_holes+0x38>
 8021a86:	4b3e      	ldr	r3, [pc, #248]	; (8021b80 <plug_holes+0x124>)
 8021a88:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8021a8c:	4940      	ldr	r1, [pc, #256]	; (8021b90 <plug_holes+0x134>)
 8021a8e:	483e      	ldr	r0, [pc, #248]	; (8021b88 <plug_holes+0x12c>)
 8021a90:	f005 f8ac 	bl	8026bec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8021a94:	687b      	ldr	r3, [r7, #4]
 8021a96:	791b      	ldrb	r3, [r3, #4]
 8021a98:	2b00      	cmp	r3, #0
 8021a9a:	d006      	beq.n	8021aaa <plug_holes+0x4e>
 8021a9c:	4b38      	ldr	r3, [pc, #224]	; (8021b80 <plug_holes+0x124>)
 8021a9e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8021aa2:	493c      	ldr	r1, [pc, #240]	; (8021b94 <plug_holes+0x138>)
 8021aa4:	4838      	ldr	r0, [pc, #224]	; (8021b88 <plug_holes+0x12c>)
 8021aa6:	f005 f8a1 	bl	8026bec <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8021aaa:	687b      	ldr	r3, [r7, #4]
 8021aac:	881b      	ldrh	r3, [r3, #0]
 8021aae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021ab2:	d906      	bls.n	8021ac2 <plug_holes+0x66>
 8021ab4:	4b32      	ldr	r3, [pc, #200]	; (8021b80 <plug_holes+0x124>)
 8021ab6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8021aba:	4937      	ldr	r1, [pc, #220]	; (8021b98 <plug_holes+0x13c>)
 8021abc:	4832      	ldr	r0, [pc, #200]	; (8021b88 <plug_holes+0x12c>)
 8021abe:	f005 f895 	bl	8026bec <iprintf>

  nmem = ptr_to_mem(mem->next);
 8021ac2:	687b      	ldr	r3, [r7, #4]
 8021ac4:	881b      	ldrh	r3, [r3, #0]
 8021ac6:	4618      	mov	r0, r3
 8021ac8:	f7ff ffa4 	bl	8021a14 <ptr_to_mem>
 8021acc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8021ace:	687a      	ldr	r2, [r7, #4]
 8021ad0:	68fb      	ldr	r3, [r7, #12]
 8021ad2:	429a      	cmp	r2, r3
 8021ad4:	d024      	beq.n	8021b20 <plug_holes+0xc4>
 8021ad6:	68fb      	ldr	r3, [r7, #12]
 8021ad8:	791b      	ldrb	r3, [r3, #4]
 8021ada:	2b00      	cmp	r3, #0
 8021adc:	d120      	bne.n	8021b20 <plug_holes+0xc4>
 8021ade:	4b2b      	ldr	r3, [pc, #172]	; (8021b8c <plug_holes+0x130>)
 8021ae0:	681b      	ldr	r3, [r3, #0]
 8021ae2:	68fa      	ldr	r2, [r7, #12]
 8021ae4:	429a      	cmp	r2, r3
 8021ae6:	d01b      	beq.n	8021b20 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8021ae8:	4b2c      	ldr	r3, [pc, #176]	; (8021b9c <plug_holes+0x140>)
 8021aea:	681b      	ldr	r3, [r3, #0]
 8021aec:	68fa      	ldr	r2, [r7, #12]
 8021aee:	429a      	cmp	r2, r3
 8021af0:	d102      	bne.n	8021af8 <plug_holes+0x9c>
      lfree = mem;
 8021af2:	4a2a      	ldr	r2, [pc, #168]	; (8021b9c <plug_holes+0x140>)
 8021af4:	687b      	ldr	r3, [r7, #4]
 8021af6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8021af8:	68fb      	ldr	r3, [r7, #12]
 8021afa:	881a      	ldrh	r2, [r3, #0]
 8021afc:	687b      	ldr	r3, [r7, #4]
 8021afe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8021b00:	68fb      	ldr	r3, [r7, #12]
 8021b02:	881b      	ldrh	r3, [r3, #0]
 8021b04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021b08:	d00a      	beq.n	8021b20 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8021b0a:	68fb      	ldr	r3, [r7, #12]
 8021b0c:	881b      	ldrh	r3, [r3, #0]
 8021b0e:	4618      	mov	r0, r3
 8021b10:	f7ff ff80 	bl	8021a14 <ptr_to_mem>
 8021b14:	4604      	mov	r4, r0
 8021b16:	6878      	ldr	r0, [r7, #4]
 8021b18:	f7ff ff8e 	bl	8021a38 <mem_to_ptr>
 8021b1c:	4603      	mov	r3, r0
 8021b1e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	885b      	ldrh	r3, [r3, #2]
 8021b24:	4618      	mov	r0, r3
 8021b26:	f7ff ff75 	bl	8021a14 <ptr_to_mem>
 8021b2a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8021b2c:	68ba      	ldr	r2, [r7, #8]
 8021b2e:	687b      	ldr	r3, [r7, #4]
 8021b30:	429a      	cmp	r2, r3
 8021b32:	d01f      	beq.n	8021b74 <plug_holes+0x118>
 8021b34:	68bb      	ldr	r3, [r7, #8]
 8021b36:	791b      	ldrb	r3, [r3, #4]
 8021b38:	2b00      	cmp	r3, #0
 8021b3a:	d11b      	bne.n	8021b74 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8021b3c:	4b17      	ldr	r3, [pc, #92]	; (8021b9c <plug_holes+0x140>)
 8021b3e:	681b      	ldr	r3, [r3, #0]
 8021b40:	687a      	ldr	r2, [r7, #4]
 8021b42:	429a      	cmp	r2, r3
 8021b44:	d102      	bne.n	8021b4c <plug_holes+0xf0>
      lfree = pmem;
 8021b46:	4a15      	ldr	r2, [pc, #84]	; (8021b9c <plug_holes+0x140>)
 8021b48:	68bb      	ldr	r3, [r7, #8]
 8021b4a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8021b4c:	687b      	ldr	r3, [r7, #4]
 8021b4e:	881a      	ldrh	r2, [r3, #0]
 8021b50:	68bb      	ldr	r3, [r7, #8]
 8021b52:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8021b54:	687b      	ldr	r3, [r7, #4]
 8021b56:	881b      	ldrh	r3, [r3, #0]
 8021b58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021b5c:	d00a      	beq.n	8021b74 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8021b5e:	687b      	ldr	r3, [r7, #4]
 8021b60:	881b      	ldrh	r3, [r3, #0]
 8021b62:	4618      	mov	r0, r3
 8021b64:	f7ff ff56 	bl	8021a14 <ptr_to_mem>
 8021b68:	4604      	mov	r4, r0
 8021b6a:	68b8      	ldr	r0, [r7, #8]
 8021b6c:	f7ff ff64 	bl	8021a38 <mem_to_ptr>
 8021b70:	4603      	mov	r3, r0
 8021b72:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8021b74:	bf00      	nop
 8021b76:	3714      	adds	r7, #20
 8021b78:	46bd      	mov	sp, r7
 8021b7a:	bd90      	pop	{r4, r7, pc}
 8021b7c:	20012e4c 	.word	0x20012e4c
 8021b80:	0802c5a8 	.word	0x0802c5a8
 8021b84:	0802c5d8 	.word	0x0802c5d8
 8021b88:	0802c5f0 	.word	0x0802c5f0
 8021b8c:	20012e50 	.word	0x20012e50
 8021b90:	0802c618 	.word	0x0802c618
 8021b94:	0802c634 	.word	0x0802c634
 8021b98:	0802c650 	.word	0x0802c650
 8021b9c:	20012e54 	.word	0x20012e54

08021ba0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8021ba0:	b580      	push	{r7, lr}
 8021ba2:	b082      	sub	sp, #8
 8021ba4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8021ba6:	4b18      	ldr	r3, [pc, #96]	; (8021c08 <mem_init+0x68>)
 8021ba8:	3303      	adds	r3, #3
 8021baa:	f023 0303 	bic.w	r3, r3, #3
 8021bae:	461a      	mov	r2, r3
 8021bb0:	4b16      	ldr	r3, [pc, #88]	; (8021c0c <mem_init+0x6c>)
 8021bb2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8021bb4:	4b15      	ldr	r3, [pc, #84]	; (8021c0c <mem_init+0x6c>)
 8021bb6:	681b      	ldr	r3, [r3, #0]
 8021bb8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8021bba:	687b      	ldr	r3, [r7, #4]
 8021bbc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8021bc0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8021bc2:	687b      	ldr	r3, [r7, #4]
 8021bc4:	2200      	movs	r2, #0
 8021bc6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8021bc8:	687b      	ldr	r3, [r7, #4]
 8021bca:	2200      	movs	r2, #0
 8021bcc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8021bce:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8021bd2:	f7ff ff1f 	bl	8021a14 <ptr_to_mem>
 8021bd6:	4603      	mov	r3, r0
 8021bd8:	4a0d      	ldr	r2, [pc, #52]	; (8021c10 <mem_init+0x70>)
 8021bda:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8021bdc:	4b0c      	ldr	r3, [pc, #48]	; (8021c10 <mem_init+0x70>)
 8021bde:	681b      	ldr	r3, [r3, #0]
 8021be0:	2201      	movs	r2, #1
 8021be2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8021be4:	4b0a      	ldr	r3, [pc, #40]	; (8021c10 <mem_init+0x70>)
 8021be6:	681b      	ldr	r3, [r3, #0]
 8021be8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8021bec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8021bee:	4b08      	ldr	r3, [pc, #32]	; (8021c10 <mem_init+0x70>)
 8021bf0:	681b      	ldr	r3, [r3, #0]
 8021bf2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8021bf6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8021bf8:	4b04      	ldr	r3, [pc, #16]	; (8021c0c <mem_init+0x6c>)
 8021bfa:	681b      	ldr	r3, [r3, #0]
 8021bfc:	4a05      	ldr	r2, [pc, #20]	; (8021c14 <mem_init+0x74>)
 8021bfe:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8021c00:	bf00      	nop
 8021c02:	3708      	adds	r7, #8
 8021c04:	46bd      	mov	sp, r7
 8021c06:	bd80      	pop	{r7, pc}
 8021c08:	200127f8 	.word	0x200127f8
 8021c0c:	20012e4c 	.word	0x20012e4c
 8021c10:	20012e50 	.word	0x20012e50
 8021c14:	20012e54 	.word	0x20012e54

08021c18 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8021c18:	b580      	push	{r7, lr}
 8021c1a:	b086      	sub	sp, #24
 8021c1c:	af00      	add	r7, sp, #0
 8021c1e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8021c20:	6878      	ldr	r0, [r7, #4]
 8021c22:	f7ff ff09 	bl	8021a38 <mem_to_ptr>
 8021c26:	4603      	mov	r3, r0
 8021c28:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8021c2a:	687b      	ldr	r3, [r7, #4]
 8021c2c:	881b      	ldrh	r3, [r3, #0]
 8021c2e:	4618      	mov	r0, r3
 8021c30:	f7ff fef0 	bl	8021a14 <ptr_to_mem>
 8021c34:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8021c36:	687b      	ldr	r3, [r7, #4]
 8021c38:	885b      	ldrh	r3, [r3, #2]
 8021c3a:	4618      	mov	r0, r3
 8021c3c:	f7ff feea 	bl	8021a14 <ptr_to_mem>
 8021c40:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8021c42:	687b      	ldr	r3, [r7, #4]
 8021c44:	881b      	ldrh	r3, [r3, #0]
 8021c46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021c4a:	d818      	bhi.n	8021c7e <mem_link_valid+0x66>
 8021c4c:	687b      	ldr	r3, [r7, #4]
 8021c4e:	885b      	ldrh	r3, [r3, #2]
 8021c50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021c54:	d813      	bhi.n	8021c7e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8021c5a:	8afa      	ldrh	r2, [r7, #22]
 8021c5c:	429a      	cmp	r2, r3
 8021c5e:	d004      	beq.n	8021c6a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8021c60:	68fb      	ldr	r3, [r7, #12]
 8021c62:	881b      	ldrh	r3, [r3, #0]
 8021c64:	8afa      	ldrh	r2, [r7, #22]
 8021c66:	429a      	cmp	r2, r3
 8021c68:	d109      	bne.n	8021c7e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8021c6a:	4b08      	ldr	r3, [pc, #32]	; (8021c8c <mem_link_valid+0x74>)
 8021c6c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8021c6e:	693a      	ldr	r2, [r7, #16]
 8021c70:	429a      	cmp	r2, r3
 8021c72:	d006      	beq.n	8021c82 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8021c74:	693b      	ldr	r3, [r7, #16]
 8021c76:	885b      	ldrh	r3, [r3, #2]
 8021c78:	8afa      	ldrh	r2, [r7, #22]
 8021c7a:	429a      	cmp	r2, r3
 8021c7c:	d001      	beq.n	8021c82 <mem_link_valid+0x6a>
    return 0;
 8021c7e:	2300      	movs	r3, #0
 8021c80:	e000      	b.n	8021c84 <mem_link_valid+0x6c>
  }
  return 1;
 8021c82:	2301      	movs	r3, #1
}
 8021c84:	4618      	mov	r0, r3
 8021c86:	3718      	adds	r7, #24
 8021c88:	46bd      	mov	sp, r7
 8021c8a:	bd80      	pop	{r7, pc}
 8021c8c:	20012e50 	.word	0x20012e50

08021c90 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8021c90:	b580      	push	{r7, lr}
 8021c92:	b084      	sub	sp, #16
 8021c94:	af00      	add	r7, sp, #0
 8021c96:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8021c98:	687b      	ldr	r3, [r7, #4]
 8021c9a:	2b00      	cmp	r3, #0
 8021c9c:	d04c      	beq.n	8021d38 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8021c9e:	687b      	ldr	r3, [r7, #4]
 8021ca0:	f003 0303 	and.w	r3, r3, #3
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	d007      	beq.n	8021cb8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8021ca8:	4b25      	ldr	r3, [pc, #148]	; (8021d40 <mem_free+0xb0>)
 8021caa:	f240 2273 	movw	r2, #627	; 0x273
 8021cae:	4925      	ldr	r1, [pc, #148]	; (8021d44 <mem_free+0xb4>)
 8021cb0:	4825      	ldr	r0, [pc, #148]	; (8021d48 <mem_free+0xb8>)
 8021cb2:	f004 ff9b 	bl	8026bec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8021cb6:	e040      	b.n	8021d3a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8021cb8:	687b      	ldr	r3, [r7, #4]
 8021cba:	3b08      	subs	r3, #8
 8021cbc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8021cbe:	4b23      	ldr	r3, [pc, #140]	; (8021d4c <mem_free+0xbc>)
 8021cc0:	681b      	ldr	r3, [r3, #0]
 8021cc2:	68fa      	ldr	r2, [r7, #12]
 8021cc4:	429a      	cmp	r2, r3
 8021cc6:	d306      	bcc.n	8021cd6 <mem_free+0x46>
 8021cc8:	687b      	ldr	r3, [r7, #4]
 8021cca:	f103 020c 	add.w	r2, r3, #12
 8021cce:	4b20      	ldr	r3, [pc, #128]	; (8021d50 <mem_free+0xc0>)
 8021cd0:	681b      	ldr	r3, [r3, #0]
 8021cd2:	429a      	cmp	r2, r3
 8021cd4:	d907      	bls.n	8021ce6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8021cd6:	4b1a      	ldr	r3, [pc, #104]	; (8021d40 <mem_free+0xb0>)
 8021cd8:	f240 227f 	movw	r2, #639	; 0x27f
 8021cdc:	491d      	ldr	r1, [pc, #116]	; (8021d54 <mem_free+0xc4>)
 8021cde:	481a      	ldr	r0, [pc, #104]	; (8021d48 <mem_free+0xb8>)
 8021ce0:	f004 ff84 	bl	8026bec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8021ce4:	e029      	b.n	8021d3a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8021ce6:	68fb      	ldr	r3, [r7, #12]
 8021ce8:	791b      	ldrb	r3, [r3, #4]
 8021cea:	2b00      	cmp	r3, #0
 8021cec:	d107      	bne.n	8021cfe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8021cee:	4b14      	ldr	r3, [pc, #80]	; (8021d40 <mem_free+0xb0>)
 8021cf0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8021cf4:	4918      	ldr	r1, [pc, #96]	; (8021d58 <mem_free+0xc8>)
 8021cf6:	4814      	ldr	r0, [pc, #80]	; (8021d48 <mem_free+0xb8>)
 8021cf8:	f004 ff78 	bl	8026bec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8021cfc:	e01d      	b.n	8021d3a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8021cfe:	68f8      	ldr	r0, [r7, #12]
 8021d00:	f7ff ff8a 	bl	8021c18 <mem_link_valid>
 8021d04:	4603      	mov	r3, r0
 8021d06:	2b00      	cmp	r3, #0
 8021d08:	d107      	bne.n	8021d1a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8021d0a:	4b0d      	ldr	r3, [pc, #52]	; (8021d40 <mem_free+0xb0>)
 8021d0c:	f240 2295 	movw	r2, #661	; 0x295
 8021d10:	4912      	ldr	r1, [pc, #72]	; (8021d5c <mem_free+0xcc>)
 8021d12:	480d      	ldr	r0, [pc, #52]	; (8021d48 <mem_free+0xb8>)
 8021d14:	f004 ff6a 	bl	8026bec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8021d18:	e00f      	b.n	8021d3a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8021d1a:	68fb      	ldr	r3, [r7, #12]
 8021d1c:	2200      	movs	r2, #0
 8021d1e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8021d20:	4b0f      	ldr	r3, [pc, #60]	; (8021d60 <mem_free+0xd0>)
 8021d22:	681b      	ldr	r3, [r3, #0]
 8021d24:	68fa      	ldr	r2, [r7, #12]
 8021d26:	429a      	cmp	r2, r3
 8021d28:	d202      	bcs.n	8021d30 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8021d2a:	4a0d      	ldr	r2, [pc, #52]	; (8021d60 <mem_free+0xd0>)
 8021d2c:	68fb      	ldr	r3, [r7, #12]
 8021d2e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8021d30:	68f8      	ldr	r0, [r7, #12]
 8021d32:	f7ff fe93 	bl	8021a5c <plug_holes>
 8021d36:	e000      	b.n	8021d3a <mem_free+0xaa>
    return;
 8021d38:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8021d3a:	3710      	adds	r7, #16
 8021d3c:	46bd      	mov	sp, r7
 8021d3e:	bd80      	pop	{r7, pc}
 8021d40:	0802c5a8 	.word	0x0802c5a8
 8021d44:	0802c67c 	.word	0x0802c67c
 8021d48:	0802c5f0 	.word	0x0802c5f0
 8021d4c:	20012e4c 	.word	0x20012e4c
 8021d50:	20012e50 	.word	0x20012e50
 8021d54:	0802c6a0 	.word	0x0802c6a0
 8021d58:	0802c6bc 	.word	0x0802c6bc
 8021d5c:	0802c6e4 	.word	0x0802c6e4
 8021d60:	20012e54 	.word	0x20012e54

08021d64 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8021d64:	b580      	push	{r7, lr}
 8021d66:	b088      	sub	sp, #32
 8021d68:	af00      	add	r7, sp, #0
 8021d6a:	6078      	str	r0, [r7, #4]
 8021d6c:	460b      	mov	r3, r1
 8021d6e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8021d70:	887b      	ldrh	r3, [r7, #2]
 8021d72:	3303      	adds	r3, #3
 8021d74:	b29b      	uxth	r3, r3
 8021d76:	f023 0303 	bic.w	r3, r3, #3
 8021d7a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8021d7c:	8bfb      	ldrh	r3, [r7, #30]
 8021d7e:	2b0b      	cmp	r3, #11
 8021d80:	d801      	bhi.n	8021d86 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8021d82:	230c      	movs	r3, #12
 8021d84:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8021d86:	8bfb      	ldrh	r3, [r7, #30]
 8021d88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021d8c:	d803      	bhi.n	8021d96 <mem_trim+0x32>
 8021d8e:	8bfa      	ldrh	r2, [r7, #30]
 8021d90:	887b      	ldrh	r3, [r7, #2]
 8021d92:	429a      	cmp	r2, r3
 8021d94:	d201      	bcs.n	8021d9a <mem_trim+0x36>
    return NULL;
 8021d96:	2300      	movs	r3, #0
 8021d98:	e0cc      	b.n	8021f34 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8021d9a:	4b68      	ldr	r3, [pc, #416]	; (8021f3c <mem_trim+0x1d8>)
 8021d9c:	681b      	ldr	r3, [r3, #0]
 8021d9e:	687a      	ldr	r2, [r7, #4]
 8021da0:	429a      	cmp	r2, r3
 8021da2:	d304      	bcc.n	8021dae <mem_trim+0x4a>
 8021da4:	4b66      	ldr	r3, [pc, #408]	; (8021f40 <mem_trim+0x1dc>)
 8021da6:	681b      	ldr	r3, [r3, #0]
 8021da8:	687a      	ldr	r2, [r7, #4]
 8021daa:	429a      	cmp	r2, r3
 8021dac:	d306      	bcc.n	8021dbc <mem_trim+0x58>
 8021dae:	4b65      	ldr	r3, [pc, #404]	; (8021f44 <mem_trim+0x1e0>)
 8021db0:	f240 22d1 	movw	r2, #721	; 0x2d1
 8021db4:	4964      	ldr	r1, [pc, #400]	; (8021f48 <mem_trim+0x1e4>)
 8021db6:	4865      	ldr	r0, [pc, #404]	; (8021f4c <mem_trim+0x1e8>)
 8021db8:	f004 ff18 	bl	8026bec <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8021dbc:	4b5f      	ldr	r3, [pc, #380]	; (8021f3c <mem_trim+0x1d8>)
 8021dbe:	681b      	ldr	r3, [r3, #0]
 8021dc0:	687a      	ldr	r2, [r7, #4]
 8021dc2:	429a      	cmp	r2, r3
 8021dc4:	d304      	bcc.n	8021dd0 <mem_trim+0x6c>
 8021dc6:	4b5e      	ldr	r3, [pc, #376]	; (8021f40 <mem_trim+0x1dc>)
 8021dc8:	681b      	ldr	r3, [r3, #0]
 8021dca:	687a      	ldr	r2, [r7, #4]
 8021dcc:	429a      	cmp	r2, r3
 8021dce:	d301      	bcc.n	8021dd4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8021dd0:	687b      	ldr	r3, [r7, #4]
 8021dd2:	e0af      	b.n	8021f34 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8021dd4:	687b      	ldr	r3, [r7, #4]
 8021dd6:	3b08      	subs	r3, #8
 8021dd8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8021dda:	69b8      	ldr	r0, [r7, #24]
 8021ddc:	f7ff fe2c 	bl	8021a38 <mem_to_ptr>
 8021de0:	4603      	mov	r3, r0
 8021de2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8021de4:	69bb      	ldr	r3, [r7, #24]
 8021de6:	881a      	ldrh	r2, [r3, #0]
 8021de8:	8afb      	ldrh	r3, [r7, #22]
 8021dea:	1ad3      	subs	r3, r2, r3
 8021dec:	b29b      	uxth	r3, r3
 8021dee:	3b08      	subs	r3, #8
 8021df0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8021df2:	8bfa      	ldrh	r2, [r7, #30]
 8021df4:	8abb      	ldrh	r3, [r7, #20]
 8021df6:	429a      	cmp	r2, r3
 8021df8:	d906      	bls.n	8021e08 <mem_trim+0xa4>
 8021dfa:	4b52      	ldr	r3, [pc, #328]	; (8021f44 <mem_trim+0x1e0>)
 8021dfc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8021e00:	4953      	ldr	r1, [pc, #332]	; (8021f50 <mem_trim+0x1ec>)
 8021e02:	4852      	ldr	r0, [pc, #328]	; (8021f4c <mem_trim+0x1e8>)
 8021e04:	f004 fef2 	bl	8026bec <iprintf>
  if (newsize > size) {
 8021e08:	8bfa      	ldrh	r2, [r7, #30]
 8021e0a:	8abb      	ldrh	r3, [r7, #20]
 8021e0c:	429a      	cmp	r2, r3
 8021e0e:	d901      	bls.n	8021e14 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8021e10:	2300      	movs	r3, #0
 8021e12:	e08f      	b.n	8021f34 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8021e14:	8bfa      	ldrh	r2, [r7, #30]
 8021e16:	8abb      	ldrh	r3, [r7, #20]
 8021e18:	429a      	cmp	r2, r3
 8021e1a:	d101      	bne.n	8021e20 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8021e1c:	687b      	ldr	r3, [r7, #4]
 8021e1e:	e089      	b.n	8021f34 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8021e20:	69bb      	ldr	r3, [r7, #24]
 8021e22:	881b      	ldrh	r3, [r3, #0]
 8021e24:	4618      	mov	r0, r3
 8021e26:	f7ff fdf5 	bl	8021a14 <ptr_to_mem>
 8021e2a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8021e2c:	693b      	ldr	r3, [r7, #16]
 8021e2e:	791b      	ldrb	r3, [r3, #4]
 8021e30:	2b00      	cmp	r3, #0
 8021e32:	d13f      	bne.n	8021eb4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8021e34:	69bb      	ldr	r3, [r7, #24]
 8021e36:	881b      	ldrh	r3, [r3, #0]
 8021e38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021e3c:	d106      	bne.n	8021e4c <mem_trim+0xe8>
 8021e3e:	4b41      	ldr	r3, [pc, #260]	; (8021f44 <mem_trim+0x1e0>)
 8021e40:	f240 22f5 	movw	r2, #757	; 0x2f5
 8021e44:	4943      	ldr	r1, [pc, #268]	; (8021f54 <mem_trim+0x1f0>)
 8021e46:	4841      	ldr	r0, [pc, #260]	; (8021f4c <mem_trim+0x1e8>)
 8021e48:	f004 fed0 	bl	8026bec <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8021e4c:	693b      	ldr	r3, [r7, #16]
 8021e4e:	881b      	ldrh	r3, [r3, #0]
 8021e50:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8021e52:	8afa      	ldrh	r2, [r7, #22]
 8021e54:	8bfb      	ldrh	r3, [r7, #30]
 8021e56:	4413      	add	r3, r2
 8021e58:	b29b      	uxth	r3, r3
 8021e5a:	3308      	adds	r3, #8
 8021e5c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8021e5e:	4b3e      	ldr	r3, [pc, #248]	; (8021f58 <mem_trim+0x1f4>)
 8021e60:	681b      	ldr	r3, [r3, #0]
 8021e62:	693a      	ldr	r2, [r7, #16]
 8021e64:	429a      	cmp	r2, r3
 8021e66:	d106      	bne.n	8021e76 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8021e68:	89fb      	ldrh	r3, [r7, #14]
 8021e6a:	4618      	mov	r0, r3
 8021e6c:	f7ff fdd2 	bl	8021a14 <ptr_to_mem>
 8021e70:	4603      	mov	r3, r0
 8021e72:	4a39      	ldr	r2, [pc, #228]	; (8021f58 <mem_trim+0x1f4>)
 8021e74:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8021e76:	89fb      	ldrh	r3, [r7, #14]
 8021e78:	4618      	mov	r0, r3
 8021e7a:	f7ff fdcb 	bl	8021a14 <ptr_to_mem>
 8021e7e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8021e80:	693b      	ldr	r3, [r7, #16]
 8021e82:	2200      	movs	r2, #0
 8021e84:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8021e86:	693b      	ldr	r3, [r7, #16]
 8021e88:	89ba      	ldrh	r2, [r7, #12]
 8021e8a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8021e8c:	693b      	ldr	r3, [r7, #16]
 8021e8e:	8afa      	ldrh	r2, [r7, #22]
 8021e90:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8021e92:	69bb      	ldr	r3, [r7, #24]
 8021e94:	89fa      	ldrh	r2, [r7, #14]
 8021e96:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8021e98:	693b      	ldr	r3, [r7, #16]
 8021e9a:	881b      	ldrh	r3, [r3, #0]
 8021e9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021ea0:	d047      	beq.n	8021f32 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8021ea2:	693b      	ldr	r3, [r7, #16]
 8021ea4:	881b      	ldrh	r3, [r3, #0]
 8021ea6:	4618      	mov	r0, r3
 8021ea8:	f7ff fdb4 	bl	8021a14 <ptr_to_mem>
 8021eac:	4602      	mov	r2, r0
 8021eae:	89fb      	ldrh	r3, [r7, #14]
 8021eb0:	8053      	strh	r3, [r2, #2]
 8021eb2:	e03e      	b.n	8021f32 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8021eb4:	8bfb      	ldrh	r3, [r7, #30]
 8021eb6:	f103 0214 	add.w	r2, r3, #20
 8021eba:	8abb      	ldrh	r3, [r7, #20]
 8021ebc:	429a      	cmp	r2, r3
 8021ebe:	d838      	bhi.n	8021f32 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8021ec0:	8afa      	ldrh	r2, [r7, #22]
 8021ec2:	8bfb      	ldrh	r3, [r7, #30]
 8021ec4:	4413      	add	r3, r2
 8021ec6:	b29b      	uxth	r3, r3
 8021ec8:	3308      	adds	r3, #8
 8021eca:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8021ecc:	69bb      	ldr	r3, [r7, #24]
 8021ece:	881b      	ldrh	r3, [r3, #0]
 8021ed0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021ed4:	d106      	bne.n	8021ee4 <mem_trim+0x180>
 8021ed6:	4b1b      	ldr	r3, [pc, #108]	; (8021f44 <mem_trim+0x1e0>)
 8021ed8:	f240 3216 	movw	r2, #790	; 0x316
 8021edc:	491d      	ldr	r1, [pc, #116]	; (8021f54 <mem_trim+0x1f0>)
 8021ede:	481b      	ldr	r0, [pc, #108]	; (8021f4c <mem_trim+0x1e8>)
 8021ee0:	f004 fe84 	bl	8026bec <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8021ee4:	89fb      	ldrh	r3, [r7, #14]
 8021ee6:	4618      	mov	r0, r3
 8021ee8:	f7ff fd94 	bl	8021a14 <ptr_to_mem>
 8021eec:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8021eee:	4b1a      	ldr	r3, [pc, #104]	; (8021f58 <mem_trim+0x1f4>)
 8021ef0:	681b      	ldr	r3, [r3, #0]
 8021ef2:	693a      	ldr	r2, [r7, #16]
 8021ef4:	429a      	cmp	r2, r3
 8021ef6:	d202      	bcs.n	8021efe <mem_trim+0x19a>
      lfree = mem2;
 8021ef8:	4a17      	ldr	r2, [pc, #92]	; (8021f58 <mem_trim+0x1f4>)
 8021efa:	693b      	ldr	r3, [r7, #16]
 8021efc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8021efe:	693b      	ldr	r3, [r7, #16]
 8021f00:	2200      	movs	r2, #0
 8021f02:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8021f04:	69bb      	ldr	r3, [r7, #24]
 8021f06:	881a      	ldrh	r2, [r3, #0]
 8021f08:	693b      	ldr	r3, [r7, #16]
 8021f0a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8021f0c:	693b      	ldr	r3, [r7, #16]
 8021f0e:	8afa      	ldrh	r2, [r7, #22]
 8021f10:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8021f12:	69bb      	ldr	r3, [r7, #24]
 8021f14:	89fa      	ldrh	r2, [r7, #14]
 8021f16:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8021f18:	693b      	ldr	r3, [r7, #16]
 8021f1a:	881b      	ldrh	r3, [r3, #0]
 8021f1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021f20:	d007      	beq.n	8021f32 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8021f22:	693b      	ldr	r3, [r7, #16]
 8021f24:	881b      	ldrh	r3, [r3, #0]
 8021f26:	4618      	mov	r0, r3
 8021f28:	f7ff fd74 	bl	8021a14 <ptr_to_mem>
 8021f2c:	4602      	mov	r2, r0
 8021f2e:	89fb      	ldrh	r3, [r7, #14]
 8021f30:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8021f32:	687b      	ldr	r3, [r7, #4]
}
 8021f34:	4618      	mov	r0, r3
 8021f36:	3720      	adds	r7, #32
 8021f38:	46bd      	mov	sp, r7
 8021f3a:	bd80      	pop	{r7, pc}
 8021f3c:	20012e4c 	.word	0x20012e4c
 8021f40:	20012e50 	.word	0x20012e50
 8021f44:	0802c5a8 	.word	0x0802c5a8
 8021f48:	0802c718 	.word	0x0802c718
 8021f4c:	0802c5f0 	.word	0x0802c5f0
 8021f50:	0802c730 	.word	0x0802c730
 8021f54:	0802c750 	.word	0x0802c750
 8021f58:	20012e54 	.word	0x20012e54

08021f5c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8021f5c:	b580      	push	{r7, lr}
 8021f5e:	b088      	sub	sp, #32
 8021f60:	af00      	add	r7, sp, #0
 8021f62:	4603      	mov	r3, r0
 8021f64:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8021f66:	88fb      	ldrh	r3, [r7, #6]
 8021f68:	2b00      	cmp	r3, #0
 8021f6a:	d101      	bne.n	8021f70 <mem_malloc+0x14>
    return NULL;
 8021f6c:	2300      	movs	r3, #0
 8021f6e:	e0d9      	b.n	8022124 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8021f70:	88fb      	ldrh	r3, [r7, #6]
 8021f72:	3303      	adds	r3, #3
 8021f74:	b29b      	uxth	r3, r3
 8021f76:	f023 0303 	bic.w	r3, r3, #3
 8021f7a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8021f7c:	8bbb      	ldrh	r3, [r7, #28]
 8021f7e:	2b0b      	cmp	r3, #11
 8021f80:	d801      	bhi.n	8021f86 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8021f82:	230c      	movs	r3, #12
 8021f84:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8021f86:	8bbb      	ldrh	r3, [r7, #28]
 8021f88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021f8c:	d803      	bhi.n	8021f96 <mem_malloc+0x3a>
 8021f8e:	8bba      	ldrh	r2, [r7, #28]
 8021f90:	88fb      	ldrh	r3, [r7, #6]
 8021f92:	429a      	cmp	r2, r3
 8021f94:	d201      	bcs.n	8021f9a <mem_malloc+0x3e>
    return NULL;
 8021f96:	2300      	movs	r3, #0
 8021f98:	e0c4      	b.n	8022124 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8021f9a:	4b64      	ldr	r3, [pc, #400]	; (802212c <mem_malloc+0x1d0>)
 8021f9c:	681b      	ldr	r3, [r3, #0]
 8021f9e:	4618      	mov	r0, r3
 8021fa0:	f7ff fd4a 	bl	8021a38 <mem_to_ptr>
 8021fa4:	4603      	mov	r3, r0
 8021fa6:	83fb      	strh	r3, [r7, #30]
 8021fa8:	e0b4      	b.n	8022114 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8021faa:	8bfb      	ldrh	r3, [r7, #30]
 8021fac:	4618      	mov	r0, r3
 8021fae:	f7ff fd31 	bl	8021a14 <ptr_to_mem>
 8021fb2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8021fb4:	697b      	ldr	r3, [r7, #20]
 8021fb6:	791b      	ldrb	r3, [r3, #4]
 8021fb8:	2b00      	cmp	r3, #0
 8021fba:	f040 80a4 	bne.w	8022106 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8021fbe:	697b      	ldr	r3, [r7, #20]
 8021fc0:	881b      	ldrh	r3, [r3, #0]
 8021fc2:	461a      	mov	r2, r3
 8021fc4:	8bfb      	ldrh	r3, [r7, #30]
 8021fc6:	1ad3      	subs	r3, r2, r3
 8021fc8:	f1a3 0208 	sub.w	r2, r3, #8
 8021fcc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8021fce:	429a      	cmp	r2, r3
 8021fd0:	f0c0 8099 	bcc.w	8022106 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8021fd4:	697b      	ldr	r3, [r7, #20]
 8021fd6:	881b      	ldrh	r3, [r3, #0]
 8021fd8:	461a      	mov	r2, r3
 8021fda:	8bfb      	ldrh	r3, [r7, #30]
 8021fdc:	1ad3      	subs	r3, r2, r3
 8021fde:	f1a3 0208 	sub.w	r2, r3, #8
 8021fe2:	8bbb      	ldrh	r3, [r7, #28]
 8021fe4:	3314      	adds	r3, #20
 8021fe6:	429a      	cmp	r2, r3
 8021fe8:	d333      	bcc.n	8022052 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8021fea:	8bfa      	ldrh	r2, [r7, #30]
 8021fec:	8bbb      	ldrh	r3, [r7, #28]
 8021fee:	4413      	add	r3, r2
 8021ff0:	b29b      	uxth	r3, r3
 8021ff2:	3308      	adds	r3, #8
 8021ff4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8021ff6:	8a7b      	ldrh	r3, [r7, #18]
 8021ff8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021ffc:	d106      	bne.n	802200c <mem_malloc+0xb0>
 8021ffe:	4b4c      	ldr	r3, [pc, #304]	; (8022130 <mem_malloc+0x1d4>)
 8022000:	f240 3287 	movw	r2, #903	; 0x387
 8022004:	494b      	ldr	r1, [pc, #300]	; (8022134 <mem_malloc+0x1d8>)
 8022006:	484c      	ldr	r0, [pc, #304]	; (8022138 <mem_malloc+0x1dc>)
 8022008:	f004 fdf0 	bl	8026bec <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 802200c:	8a7b      	ldrh	r3, [r7, #18]
 802200e:	4618      	mov	r0, r3
 8022010:	f7ff fd00 	bl	8021a14 <ptr_to_mem>
 8022014:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8022016:	68fb      	ldr	r3, [r7, #12]
 8022018:	2200      	movs	r2, #0
 802201a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 802201c:	697b      	ldr	r3, [r7, #20]
 802201e:	881a      	ldrh	r2, [r3, #0]
 8022020:	68fb      	ldr	r3, [r7, #12]
 8022022:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8022024:	68fb      	ldr	r3, [r7, #12]
 8022026:	8bfa      	ldrh	r2, [r7, #30]
 8022028:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 802202a:	697b      	ldr	r3, [r7, #20]
 802202c:	8a7a      	ldrh	r2, [r7, #18]
 802202e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8022030:	697b      	ldr	r3, [r7, #20]
 8022032:	2201      	movs	r2, #1
 8022034:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8022036:	68fb      	ldr	r3, [r7, #12]
 8022038:	881b      	ldrh	r3, [r3, #0]
 802203a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802203e:	d00b      	beq.n	8022058 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8022040:	68fb      	ldr	r3, [r7, #12]
 8022042:	881b      	ldrh	r3, [r3, #0]
 8022044:	4618      	mov	r0, r3
 8022046:	f7ff fce5 	bl	8021a14 <ptr_to_mem>
 802204a:	4602      	mov	r2, r0
 802204c:	8a7b      	ldrh	r3, [r7, #18]
 802204e:	8053      	strh	r3, [r2, #2]
 8022050:	e002      	b.n	8022058 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8022052:	697b      	ldr	r3, [r7, #20]
 8022054:	2201      	movs	r2, #1
 8022056:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8022058:	4b34      	ldr	r3, [pc, #208]	; (802212c <mem_malloc+0x1d0>)
 802205a:	681b      	ldr	r3, [r3, #0]
 802205c:	697a      	ldr	r2, [r7, #20]
 802205e:	429a      	cmp	r2, r3
 8022060:	d127      	bne.n	80220b2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8022062:	4b32      	ldr	r3, [pc, #200]	; (802212c <mem_malloc+0x1d0>)
 8022064:	681b      	ldr	r3, [r3, #0]
 8022066:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8022068:	e005      	b.n	8022076 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 802206a:	69bb      	ldr	r3, [r7, #24]
 802206c:	881b      	ldrh	r3, [r3, #0]
 802206e:	4618      	mov	r0, r3
 8022070:	f7ff fcd0 	bl	8021a14 <ptr_to_mem>
 8022074:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8022076:	69bb      	ldr	r3, [r7, #24]
 8022078:	791b      	ldrb	r3, [r3, #4]
 802207a:	2b00      	cmp	r3, #0
 802207c:	d004      	beq.n	8022088 <mem_malloc+0x12c>
 802207e:	4b2f      	ldr	r3, [pc, #188]	; (802213c <mem_malloc+0x1e0>)
 8022080:	681b      	ldr	r3, [r3, #0]
 8022082:	69ba      	ldr	r2, [r7, #24]
 8022084:	429a      	cmp	r2, r3
 8022086:	d1f0      	bne.n	802206a <mem_malloc+0x10e>
          }
          lfree = cur;
 8022088:	4a28      	ldr	r2, [pc, #160]	; (802212c <mem_malloc+0x1d0>)
 802208a:	69bb      	ldr	r3, [r7, #24]
 802208c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 802208e:	4b27      	ldr	r3, [pc, #156]	; (802212c <mem_malloc+0x1d0>)
 8022090:	681a      	ldr	r2, [r3, #0]
 8022092:	4b2a      	ldr	r3, [pc, #168]	; (802213c <mem_malloc+0x1e0>)
 8022094:	681b      	ldr	r3, [r3, #0]
 8022096:	429a      	cmp	r2, r3
 8022098:	d00b      	beq.n	80220b2 <mem_malloc+0x156>
 802209a:	4b24      	ldr	r3, [pc, #144]	; (802212c <mem_malloc+0x1d0>)
 802209c:	681b      	ldr	r3, [r3, #0]
 802209e:	791b      	ldrb	r3, [r3, #4]
 80220a0:	2b00      	cmp	r3, #0
 80220a2:	d006      	beq.n	80220b2 <mem_malloc+0x156>
 80220a4:	4b22      	ldr	r3, [pc, #136]	; (8022130 <mem_malloc+0x1d4>)
 80220a6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80220aa:	4925      	ldr	r1, [pc, #148]	; (8022140 <mem_malloc+0x1e4>)
 80220ac:	4822      	ldr	r0, [pc, #136]	; (8022138 <mem_malloc+0x1dc>)
 80220ae:	f004 fd9d 	bl	8026bec <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80220b2:	8bba      	ldrh	r2, [r7, #28]
 80220b4:	697b      	ldr	r3, [r7, #20]
 80220b6:	4413      	add	r3, r2
 80220b8:	3308      	adds	r3, #8
 80220ba:	4a20      	ldr	r2, [pc, #128]	; (802213c <mem_malloc+0x1e0>)
 80220bc:	6812      	ldr	r2, [r2, #0]
 80220be:	4293      	cmp	r3, r2
 80220c0:	d906      	bls.n	80220d0 <mem_malloc+0x174>
 80220c2:	4b1b      	ldr	r3, [pc, #108]	; (8022130 <mem_malloc+0x1d4>)
 80220c4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80220c8:	491e      	ldr	r1, [pc, #120]	; (8022144 <mem_malloc+0x1e8>)
 80220ca:	481b      	ldr	r0, [pc, #108]	; (8022138 <mem_malloc+0x1dc>)
 80220cc:	f004 fd8e 	bl	8026bec <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80220d0:	697b      	ldr	r3, [r7, #20]
 80220d2:	f003 0303 	and.w	r3, r3, #3
 80220d6:	2b00      	cmp	r3, #0
 80220d8:	d006      	beq.n	80220e8 <mem_malloc+0x18c>
 80220da:	4b15      	ldr	r3, [pc, #84]	; (8022130 <mem_malloc+0x1d4>)
 80220dc:	f240 32bb 	movw	r2, #955	; 0x3bb
 80220e0:	4919      	ldr	r1, [pc, #100]	; (8022148 <mem_malloc+0x1ec>)
 80220e2:	4815      	ldr	r0, [pc, #84]	; (8022138 <mem_malloc+0x1dc>)
 80220e4:	f004 fd82 	bl	8026bec <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80220e8:	697b      	ldr	r3, [r7, #20]
 80220ea:	f003 0303 	and.w	r3, r3, #3
 80220ee:	2b00      	cmp	r3, #0
 80220f0:	d006      	beq.n	8022100 <mem_malloc+0x1a4>
 80220f2:	4b0f      	ldr	r3, [pc, #60]	; (8022130 <mem_malloc+0x1d4>)
 80220f4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80220f8:	4914      	ldr	r1, [pc, #80]	; (802214c <mem_malloc+0x1f0>)
 80220fa:	480f      	ldr	r0, [pc, #60]	; (8022138 <mem_malloc+0x1dc>)
 80220fc:	f004 fd76 	bl	8026bec <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8022100:	697b      	ldr	r3, [r7, #20]
 8022102:	3308      	adds	r3, #8
 8022104:	e00e      	b.n	8022124 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8022106:	8bfb      	ldrh	r3, [r7, #30]
 8022108:	4618      	mov	r0, r3
 802210a:	f7ff fc83 	bl	8021a14 <ptr_to_mem>
 802210e:	4603      	mov	r3, r0
 8022110:	881b      	ldrh	r3, [r3, #0]
 8022112:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8022114:	8bfa      	ldrh	r2, [r7, #30]
 8022116:	8bbb      	ldrh	r3, [r7, #28]
 8022118:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 802211c:	429a      	cmp	r2, r3
 802211e:	f4ff af44 	bcc.w	8021faa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8022122:	2300      	movs	r3, #0
}
 8022124:	4618      	mov	r0, r3
 8022126:	3720      	adds	r7, #32
 8022128:	46bd      	mov	sp, r7
 802212a:	bd80      	pop	{r7, pc}
 802212c:	20012e54 	.word	0x20012e54
 8022130:	0802c5a8 	.word	0x0802c5a8
 8022134:	0802c750 	.word	0x0802c750
 8022138:	0802c5f0 	.word	0x0802c5f0
 802213c:	20012e50 	.word	0x20012e50
 8022140:	0802c764 	.word	0x0802c764
 8022144:	0802c780 	.word	0x0802c780
 8022148:	0802c7b0 	.word	0x0802c7b0
 802214c:	0802c7e0 	.word	0x0802c7e0

08022150 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8022150:	b480      	push	{r7}
 8022152:	b085      	sub	sp, #20
 8022154:	af00      	add	r7, sp, #0
 8022156:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8022158:	687b      	ldr	r3, [r7, #4]
 802215a:	689b      	ldr	r3, [r3, #8]
 802215c:	2200      	movs	r2, #0
 802215e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8022160:	687b      	ldr	r3, [r7, #4]
 8022162:	685b      	ldr	r3, [r3, #4]
 8022164:	3303      	adds	r3, #3
 8022166:	f023 0303 	bic.w	r3, r3, #3
 802216a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 802216c:	2300      	movs	r3, #0
 802216e:	60fb      	str	r3, [r7, #12]
 8022170:	e011      	b.n	8022196 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8022172:	687b      	ldr	r3, [r7, #4]
 8022174:	689b      	ldr	r3, [r3, #8]
 8022176:	681a      	ldr	r2, [r3, #0]
 8022178:	68bb      	ldr	r3, [r7, #8]
 802217a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 802217c:	687b      	ldr	r3, [r7, #4]
 802217e:	689b      	ldr	r3, [r3, #8]
 8022180:	68ba      	ldr	r2, [r7, #8]
 8022182:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8022184:	687b      	ldr	r3, [r7, #4]
 8022186:	881b      	ldrh	r3, [r3, #0]
 8022188:	461a      	mov	r2, r3
 802218a:	68bb      	ldr	r3, [r7, #8]
 802218c:	4413      	add	r3, r2
 802218e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8022190:	68fb      	ldr	r3, [r7, #12]
 8022192:	3301      	adds	r3, #1
 8022194:	60fb      	str	r3, [r7, #12]
 8022196:	687b      	ldr	r3, [r7, #4]
 8022198:	885b      	ldrh	r3, [r3, #2]
 802219a:	461a      	mov	r2, r3
 802219c:	68fb      	ldr	r3, [r7, #12]
 802219e:	4293      	cmp	r3, r2
 80221a0:	dbe7      	blt.n	8022172 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80221a2:	bf00      	nop
 80221a4:	bf00      	nop
 80221a6:	3714      	adds	r7, #20
 80221a8:	46bd      	mov	sp, r7
 80221aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221ae:	4770      	bx	lr

080221b0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80221b0:	b580      	push	{r7, lr}
 80221b2:	b082      	sub	sp, #8
 80221b4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80221b6:	2300      	movs	r3, #0
 80221b8:	80fb      	strh	r3, [r7, #6]
 80221ba:	e009      	b.n	80221d0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80221bc:	88fb      	ldrh	r3, [r7, #6]
 80221be:	4a08      	ldr	r2, [pc, #32]	; (80221e0 <memp_init+0x30>)
 80221c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80221c4:	4618      	mov	r0, r3
 80221c6:	f7ff ffc3 	bl	8022150 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80221ca:	88fb      	ldrh	r3, [r7, #6]
 80221cc:	3301      	adds	r3, #1
 80221ce:	80fb      	strh	r3, [r7, #6]
 80221d0:	88fb      	ldrh	r3, [r7, #6]
 80221d2:	2b05      	cmp	r3, #5
 80221d4:	d9f2      	bls.n	80221bc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80221d6:	bf00      	nop
 80221d8:	bf00      	nop
 80221da:	3708      	adds	r7, #8
 80221dc:	46bd      	mov	sp, r7
 80221de:	bd80      	pop	{r7, pc}
 80221e0:	0802e050 	.word	0x0802e050

080221e4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80221e4:	b580      	push	{r7, lr}
 80221e6:	b084      	sub	sp, #16
 80221e8:	af00      	add	r7, sp, #0
 80221ea:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80221ec:	687b      	ldr	r3, [r7, #4]
 80221ee:	689b      	ldr	r3, [r3, #8]
 80221f0:	681b      	ldr	r3, [r3, #0]
 80221f2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80221f4:	68fb      	ldr	r3, [r7, #12]
 80221f6:	2b00      	cmp	r3, #0
 80221f8:	d012      	beq.n	8022220 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80221fa:	687b      	ldr	r3, [r7, #4]
 80221fc:	689b      	ldr	r3, [r3, #8]
 80221fe:	68fa      	ldr	r2, [r7, #12]
 8022200:	6812      	ldr	r2, [r2, #0]
 8022202:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8022204:	68fb      	ldr	r3, [r7, #12]
 8022206:	f003 0303 	and.w	r3, r3, #3
 802220a:	2b00      	cmp	r3, #0
 802220c:	d006      	beq.n	802221c <do_memp_malloc_pool+0x38>
 802220e:	4b07      	ldr	r3, [pc, #28]	; (802222c <do_memp_malloc_pool+0x48>)
 8022210:	f44f 728c 	mov.w	r2, #280	; 0x118
 8022214:	4906      	ldr	r1, [pc, #24]	; (8022230 <do_memp_malloc_pool+0x4c>)
 8022216:	4807      	ldr	r0, [pc, #28]	; (8022234 <do_memp_malloc_pool+0x50>)
 8022218:	f004 fce8 	bl	8026bec <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 802221c:	68fb      	ldr	r3, [r7, #12]
 802221e:	e000      	b.n	8022222 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8022220:	2300      	movs	r3, #0
}
 8022222:	4618      	mov	r0, r3
 8022224:	3710      	adds	r7, #16
 8022226:	46bd      	mov	sp, r7
 8022228:	bd80      	pop	{r7, pc}
 802222a:	bf00      	nop
 802222c:	0802c804 	.word	0x0802c804
 8022230:	0802c834 	.word	0x0802c834
 8022234:	0802c858 	.word	0x0802c858

08022238 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8022238:	b580      	push	{r7, lr}
 802223a:	b082      	sub	sp, #8
 802223c:	af00      	add	r7, sp, #0
 802223e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8022240:	687b      	ldr	r3, [r7, #4]
 8022242:	2b00      	cmp	r3, #0
 8022244:	d106      	bne.n	8022254 <memp_malloc_pool+0x1c>
 8022246:	4b0a      	ldr	r3, [pc, #40]	; (8022270 <memp_malloc_pool+0x38>)
 8022248:	f44f 729e 	mov.w	r2, #316	; 0x13c
 802224c:	4909      	ldr	r1, [pc, #36]	; (8022274 <memp_malloc_pool+0x3c>)
 802224e:	480a      	ldr	r0, [pc, #40]	; (8022278 <memp_malloc_pool+0x40>)
 8022250:	f004 fccc 	bl	8026bec <iprintf>
  if (desc == NULL) {
 8022254:	687b      	ldr	r3, [r7, #4]
 8022256:	2b00      	cmp	r3, #0
 8022258:	d101      	bne.n	802225e <memp_malloc_pool+0x26>
    return NULL;
 802225a:	2300      	movs	r3, #0
 802225c:	e003      	b.n	8022266 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 802225e:	6878      	ldr	r0, [r7, #4]
 8022260:	f7ff ffc0 	bl	80221e4 <do_memp_malloc_pool>
 8022264:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8022266:	4618      	mov	r0, r3
 8022268:	3708      	adds	r7, #8
 802226a:	46bd      	mov	sp, r7
 802226c:	bd80      	pop	{r7, pc}
 802226e:	bf00      	nop
 8022270:	0802c804 	.word	0x0802c804
 8022274:	0802c880 	.word	0x0802c880
 8022278:	0802c858 	.word	0x0802c858

0802227c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 802227c:	b580      	push	{r7, lr}
 802227e:	b084      	sub	sp, #16
 8022280:	af00      	add	r7, sp, #0
 8022282:	4603      	mov	r3, r0
 8022284:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8022286:	79fb      	ldrb	r3, [r7, #7]
 8022288:	2b05      	cmp	r3, #5
 802228a:	d908      	bls.n	802229e <memp_malloc+0x22>
 802228c:	4b0a      	ldr	r3, [pc, #40]	; (80222b8 <memp_malloc+0x3c>)
 802228e:	f240 1257 	movw	r2, #343	; 0x157
 8022292:	490a      	ldr	r1, [pc, #40]	; (80222bc <memp_malloc+0x40>)
 8022294:	480a      	ldr	r0, [pc, #40]	; (80222c0 <memp_malloc+0x44>)
 8022296:	f004 fca9 	bl	8026bec <iprintf>
 802229a:	2300      	movs	r3, #0
 802229c:	e008      	b.n	80222b0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 802229e:	79fb      	ldrb	r3, [r7, #7]
 80222a0:	4a08      	ldr	r2, [pc, #32]	; (80222c4 <memp_malloc+0x48>)
 80222a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80222a6:	4618      	mov	r0, r3
 80222a8:	f7ff ff9c 	bl	80221e4 <do_memp_malloc_pool>
 80222ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80222ae:	68fb      	ldr	r3, [r7, #12]
}
 80222b0:	4618      	mov	r0, r3
 80222b2:	3710      	adds	r7, #16
 80222b4:	46bd      	mov	sp, r7
 80222b6:	bd80      	pop	{r7, pc}
 80222b8:	0802c804 	.word	0x0802c804
 80222bc:	0802c894 	.word	0x0802c894
 80222c0:	0802c858 	.word	0x0802c858
 80222c4:	0802e050 	.word	0x0802e050

080222c8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80222c8:	b580      	push	{r7, lr}
 80222ca:	b084      	sub	sp, #16
 80222cc:	af00      	add	r7, sp, #0
 80222ce:	6078      	str	r0, [r7, #4]
 80222d0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80222d2:	683b      	ldr	r3, [r7, #0]
 80222d4:	f003 0303 	and.w	r3, r3, #3
 80222d8:	2b00      	cmp	r3, #0
 80222da:	d006      	beq.n	80222ea <do_memp_free_pool+0x22>
 80222dc:	4b0a      	ldr	r3, [pc, #40]	; (8022308 <do_memp_free_pool+0x40>)
 80222de:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80222e2:	490a      	ldr	r1, [pc, #40]	; (802230c <do_memp_free_pool+0x44>)
 80222e4:	480a      	ldr	r0, [pc, #40]	; (8022310 <do_memp_free_pool+0x48>)
 80222e6:	f004 fc81 	bl	8026bec <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80222ea:	683b      	ldr	r3, [r7, #0]
 80222ec:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80222ee:	687b      	ldr	r3, [r7, #4]
 80222f0:	689b      	ldr	r3, [r3, #8]
 80222f2:	681a      	ldr	r2, [r3, #0]
 80222f4:	68fb      	ldr	r3, [r7, #12]
 80222f6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80222f8:	687b      	ldr	r3, [r7, #4]
 80222fa:	689b      	ldr	r3, [r3, #8]
 80222fc:	68fa      	ldr	r2, [r7, #12]
 80222fe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8022300:	bf00      	nop
 8022302:	3710      	adds	r7, #16
 8022304:	46bd      	mov	sp, r7
 8022306:	bd80      	pop	{r7, pc}
 8022308:	0802c804 	.word	0x0802c804
 802230c:	0802c8b4 	.word	0x0802c8b4
 8022310:	0802c858 	.word	0x0802c858

08022314 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8022314:	b580      	push	{r7, lr}
 8022316:	b082      	sub	sp, #8
 8022318:	af00      	add	r7, sp, #0
 802231a:	6078      	str	r0, [r7, #4]
 802231c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 802231e:	687b      	ldr	r3, [r7, #4]
 8022320:	2b00      	cmp	r3, #0
 8022322:	d106      	bne.n	8022332 <memp_free_pool+0x1e>
 8022324:	4b0a      	ldr	r3, [pc, #40]	; (8022350 <memp_free_pool+0x3c>)
 8022326:	f240 1295 	movw	r2, #405	; 0x195
 802232a:	490a      	ldr	r1, [pc, #40]	; (8022354 <memp_free_pool+0x40>)
 802232c:	480a      	ldr	r0, [pc, #40]	; (8022358 <memp_free_pool+0x44>)
 802232e:	f004 fc5d 	bl	8026bec <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8022332:	687b      	ldr	r3, [r7, #4]
 8022334:	2b00      	cmp	r3, #0
 8022336:	d007      	beq.n	8022348 <memp_free_pool+0x34>
 8022338:	683b      	ldr	r3, [r7, #0]
 802233a:	2b00      	cmp	r3, #0
 802233c:	d004      	beq.n	8022348 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 802233e:	6839      	ldr	r1, [r7, #0]
 8022340:	6878      	ldr	r0, [r7, #4]
 8022342:	f7ff ffc1 	bl	80222c8 <do_memp_free_pool>
 8022346:	e000      	b.n	802234a <memp_free_pool+0x36>
    return;
 8022348:	bf00      	nop
}
 802234a:	3708      	adds	r7, #8
 802234c:	46bd      	mov	sp, r7
 802234e:	bd80      	pop	{r7, pc}
 8022350:	0802c804 	.word	0x0802c804
 8022354:	0802c880 	.word	0x0802c880
 8022358:	0802c858 	.word	0x0802c858

0802235c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 802235c:	b580      	push	{r7, lr}
 802235e:	b082      	sub	sp, #8
 8022360:	af00      	add	r7, sp, #0
 8022362:	4603      	mov	r3, r0
 8022364:	6039      	str	r1, [r7, #0]
 8022366:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8022368:	79fb      	ldrb	r3, [r7, #7]
 802236a:	2b05      	cmp	r3, #5
 802236c:	d907      	bls.n	802237e <memp_free+0x22>
 802236e:	4b0c      	ldr	r3, [pc, #48]	; (80223a0 <memp_free+0x44>)
 8022370:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8022374:	490b      	ldr	r1, [pc, #44]	; (80223a4 <memp_free+0x48>)
 8022376:	480c      	ldr	r0, [pc, #48]	; (80223a8 <memp_free+0x4c>)
 8022378:	f004 fc38 	bl	8026bec <iprintf>
 802237c:	e00c      	b.n	8022398 <memp_free+0x3c>

  if (mem == NULL) {
 802237e:	683b      	ldr	r3, [r7, #0]
 8022380:	2b00      	cmp	r3, #0
 8022382:	d008      	beq.n	8022396 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8022384:	79fb      	ldrb	r3, [r7, #7]
 8022386:	4a09      	ldr	r2, [pc, #36]	; (80223ac <memp_free+0x50>)
 8022388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802238c:	6839      	ldr	r1, [r7, #0]
 802238e:	4618      	mov	r0, r3
 8022390:	f7ff ff9a 	bl	80222c8 <do_memp_free_pool>
 8022394:	e000      	b.n	8022398 <memp_free+0x3c>
    return;
 8022396:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8022398:	3708      	adds	r7, #8
 802239a:	46bd      	mov	sp, r7
 802239c:	bd80      	pop	{r7, pc}
 802239e:	bf00      	nop
 80223a0:	0802c804 	.word	0x0802c804
 80223a4:	0802c8d4 	.word	0x0802c8d4
 80223a8:	0802c858 	.word	0x0802c858
 80223ac:	0802e050 	.word	0x0802e050

080223b0 <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 80223b0:	b580      	push	{r7, lr}
 80223b2:	b082      	sub	sp, #8
 80223b4:	af00      	add	r7, sp, #0
 80223b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 80223b8:	687b      	ldr	r3, [r7, #4]
 80223ba:	2b00      	cmp	r3, #0
 80223bc:	d105      	bne.n	80223ca <netif_loopif_init+0x1a>
 80223be:	4b0b      	ldr	r3, [pc, #44]	; (80223ec <netif_loopif_init+0x3c>)
 80223c0:	2299      	movs	r2, #153	; 0x99
 80223c2:	490b      	ldr	r1, [pc, #44]	; (80223f0 <netif_loopif_init+0x40>)
 80223c4:	480b      	ldr	r0, [pc, #44]	; (80223f4 <netif_loopif_init+0x44>)
 80223c6:	f004 fc11 	bl	8026bec <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 80223ca:	687b      	ldr	r3, [r7, #4]
 80223cc:	226c      	movs	r2, #108	; 0x6c
 80223ce:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 80223d2:	687b      	ldr	r3, [r7, #4]
 80223d4:	226f      	movs	r2, #111	; 0x6f
 80223d6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	4a06      	ldr	r2, [pc, #24]	; (80223f8 <netif_loopif_init+0x48>)
 80223de:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 80223e0:	2300      	movs	r3, #0
}
 80223e2:	4618      	mov	r0, r3
 80223e4:	3708      	adds	r7, #8
 80223e6:	46bd      	mov	sp, r7
 80223e8:	bd80      	pop	{r7, pc}
 80223ea:	bf00      	nop
 80223ec:	0802c8f0 	.word	0x0802c8f0
 80223f0:	0802c924 	.word	0x0802c924
 80223f4:	0802c948 	.word	0x0802c948
 80223f8:	08022add 	.word	0x08022add

080223fc <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80223fc:	b580      	push	{r7, lr}
 80223fe:	b088      	sub	sp, #32
 8022400:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 8022402:	4b0f      	ldr	r3, [pc, #60]	; (8022440 <netif_init+0x44>)
 8022404:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 8022406:	4b0e      	ldr	r3, [pc, #56]	; (8022440 <netif_init+0x44>)
 8022408:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 802240a:	23ff      	movs	r3, #255	; 0xff
 802240c:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 802240e:	1d3b      	adds	r3, r7, #4
 8022410:	f107 0208 	add.w	r2, r7, #8
 8022414:	f107 010c 	add.w	r1, r7, #12
 8022418:	480a      	ldr	r0, [pc, #40]	; (8022444 <netif_init+0x48>)
 802241a:	9002      	str	r0, [sp, #8]
 802241c:	480a      	ldr	r0, [pc, #40]	; (8022448 <netif_init+0x4c>)
 802241e:	9001      	str	r0, [sp, #4]
 8022420:	2000      	movs	r0, #0
 8022422:	9000      	str	r0, [sp, #0]
 8022424:	4809      	ldr	r0, [pc, #36]	; (802244c <netif_init+0x50>)
 8022426:	f000 f813 	bl	8022450 <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 802242a:	4808      	ldr	r0, [pc, #32]	; (802244c <netif_init+0x50>)
 802242c:	f000 fa72 	bl	8022914 <netif_set_link_up>
  netif_set_up(&loop_netif);
 8022430:	4806      	ldr	r0, [pc, #24]	; (802244c <netif_init+0x50>)
 8022432:	f000 f9d1 	bl	80227d8 <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 8022436:	bf00      	nop
 8022438:	3710      	adds	r7, #16
 802243a:	46bd      	mov	sp, r7
 802243c:	bd80      	pop	{r7, pc}
 802243e:	bf00      	nop
 8022440:	0100007f 	.word	0x0100007f
 8022444:	08025579 	.word	0x08025579
 8022448:	080223b1 	.word	0x080223b1
 802244c:	20015dfc 	.word	0x20015dfc

08022450 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8022450:	b580      	push	{r7, lr}
 8022452:	b086      	sub	sp, #24
 8022454:	af00      	add	r7, sp, #0
 8022456:	60f8      	str	r0, [r7, #12]
 8022458:	60b9      	str	r1, [r7, #8]
 802245a:	607a      	str	r2, [r7, #4]
 802245c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 802245e:	68fb      	ldr	r3, [r7, #12]
 8022460:	2b00      	cmp	r3, #0
 8022462:	d108      	bne.n	8022476 <netif_add+0x26>
 8022464:	4b5a      	ldr	r3, [pc, #360]	; (80225d0 <netif_add+0x180>)
 8022466:	f240 1227 	movw	r2, #295	; 0x127
 802246a:	495a      	ldr	r1, [pc, #360]	; (80225d4 <netif_add+0x184>)
 802246c:	485a      	ldr	r0, [pc, #360]	; (80225d8 <netif_add+0x188>)
 802246e:	f004 fbbd 	bl	8026bec <iprintf>
 8022472:	2300      	movs	r3, #0
 8022474:	e0a8      	b.n	80225c8 <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8022476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022478:	2b00      	cmp	r3, #0
 802247a:	d108      	bne.n	802248e <netif_add+0x3e>
 802247c:	4b54      	ldr	r3, [pc, #336]	; (80225d0 <netif_add+0x180>)
 802247e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8022482:	4956      	ldr	r1, [pc, #344]	; (80225dc <netif_add+0x18c>)
 8022484:	4854      	ldr	r0, [pc, #336]	; (80225d8 <netif_add+0x188>)
 8022486:	f004 fbb1 	bl	8026bec <iprintf>
 802248a:	2300      	movs	r3, #0
 802248c:	e09c      	b.n	80225c8 <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 802248e:	68bb      	ldr	r3, [r7, #8]
 8022490:	2b00      	cmp	r3, #0
 8022492:	d101      	bne.n	8022498 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8022494:	4b52      	ldr	r3, [pc, #328]	; (80225e0 <netif_add+0x190>)
 8022496:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8022498:	687b      	ldr	r3, [r7, #4]
 802249a:	2b00      	cmp	r3, #0
 802249c:	d101      	bne.n	80224a2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 802249e:	4b50      	ldr	r3, [pc, #320]	; (80225e0 <netif_add+0x190>)
 80224a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80224a2:	683b      	ldr	r3, [r7, #0]
 80224a4:	2b00      	cmp	r3, #0
 80224a6:	d101      	bne.n	80224ac <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80224a8:	4b4d      	ldr	r3, [pc, #308]	; (80225e0 <netif_add+0x190>)
 80224aa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80224ac:	68fb      	ldr	r3, [r7, #12]
 80224ae:	2200      	movs	r2, #0
 80224b0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80224b2:	68fb      	ldr	r3, [r7, #12]
 80224b4:	2200      	movs	r2, #0
 80224b6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80224b8:	68fb      	ldr	r3, [r7, #12]
 80224ba:	2200      	movs	r2, #0
 80224bc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80224be:	68fb      	ldr	r3, [r7, #12]
 80224c0:	4a48      	ldr	r2, [pc, #288]	; (80225e4 <netif_add+0x194>)
 80224c2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80224c4:	68fb      	ldr	r3, [r7, #12]
 80224c6:	2200      	movs	r2, #0
 80224c8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80224ca:	68fb      	ldr	r3, [r7, #12]
 80224cc:	2200      	movs	r2, #0
 80224ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80224d2:	68fb      	ldr	r3, [r7, #12]
 80224d4:	2200      	movs	r2, #0
 80224d6:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 80224d8:	68fb      	ldr	r3, [r7, #12]
 80224da:	2200      	movs	r2, #0
 80224dc:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 80224de:	68fb      	ldr	r3, [r7, #12]
 80224e0:	2200      	movs	r2, #0
 80224e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80224e4:	68fb      	ldr	r3, [r7, #12]
 80224e6:	6a3a      	ldr	r2, [r7, #32]
 80224e8:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 80224ea:	4b3f      	ldr	r3, [pc, #252]	; (80225e8 <netif_add+0x198>)
 80224ec:	781a      	ldrb	r2, [r3, #0]
 80224ee:	68fb      	ldr	r3, [r7, #12]
 80224f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80224f4:	68fb      	ldr	r3, [r7, #12]
 80224f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80224f8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80224fa:	683b      	ldr	r3, [r7, #0]
 80224fc:	687a      	ldr	r2, [r7, #4]
 80224fe:	68b9      	ldr	r1, [r7, #8]
 8022500:	68f8      	ldr	r0, [r7, #12]
 8022502:	f000 f90f 	bl	8022724 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8022506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022508:	68f8      	ldr	r0, [r7, #12]
 802250a:	4798      	blx	r3
 802250c:	4603      	mov	r3, r0
 802250e:	2b00      	cmp	r3, #0
 8022510:	d001      	beq.n	8022516 <netif_add+0xc6>
    return NULL;
 8022512:	2300      	movs	r3, #0
 8022514:	e058      	b.n	80225c8 <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8022516:	68fb      	ldr	r3, [r7, #12]
 8022518:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802251c:	2bff      	cmp	r3, #255	; 0xff
 802251e:	d103      	bne.n	8022528 <netif_add+0xd8>
        netif->num = 0;
 8022520:	68fb      	ldr	r3, [r7, #12]
 8022522:	2200      	movs	r2, #0
 8022524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8022528:	2300      	movs	r3, #0
 802252a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 802252c:	4b2f      	ldr	r3, [pc, #188]	; (80225ec <netif_add+0x19c>)
 802252e:	681b      	ldr	r3, [r3, #0]
 8022530:	617b      	str	r3, [r7, #20]
 8022532:	e02b      	b.n	802258c <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8022534:	697a      	ldr	r2, [r7, #20]
 8022536:	68fb      	ldr	r3, [r7, #12]
 8022538:	429a      	cmp	r2, r3
 802253a:	d106      	bne.n	802254a <netif_add+0xfa>
 802253c:	4b24      	ldr	r3, [pc, #144]	; (80225d0 <netif_add+0x180>)
 802253e:	f240 128b 	movw	r2, #395	; 0x18b
 8022542:	492b      	ldr	r1, [pc, #172]	; (80225f0 <netif_add+0x1a0>)
 8022544:	4824      	ldr	r0, [pc, #144]	; (80225d8 <netif_add+0x188>)
 8022546:	f004 fb51 	bl	8026bec <iprintf>
        num_netifs++;
 802254a:	693b      	ldr	r3, [r7, #16]
 802254c:	3301      	adds	r3, #1
 802254e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8022550:	693b      	ldr	r3, [r7, #16]
 8022552:	2bff      	cmp	r3, #255	; 0xff
 8022554:	dd06      	ble.n	8022564 <netif_add+0x114>
 8022556:	4b1e      	ldr	r3, [pc, #120]	; (80225d0 <netif_add+0x180>)
 8022558:	f240 128d 	movw	r2, #397	; 0x18d
 802255c:	4925      	ldr	r1, [pc, #148]	; (80225f4 <netif_add+0x1a4>)
 802255e:	481e      	ldr	r0, [pc, #120]	; (80225d8 <netif_add+0x188>)
 8022560:	f004 fb44 	bl	8026bec <iprintf>
        if (netif2->num == netif->num) {
 8022564:	697b      	ldr	r3, [r7, #20]
 8022566:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 802256a:	68fb      	ldr	r3, [r7, #12]
 802256c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8022570:	429a      	cmp	r2, r3
 8022572:	d108      	bne.n	8022586 <netif_add+0x136>
          netif->num++;
 8022574:	68fb      	ldr	r3, [r7, #12]
 8022576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802257a:	3301      	adds	r3, #1
 802257c:	b2da      	uxtb	r2, r3
 802257e:	68fb      	ldr	r3, [r7, #12]
 8022580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8022584:	e005      	b.n	8022592 <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8022586:	697b      	ldr	r3, [r7, #20]
 8022588:	681b      	ldr	r3, [r3, #0]
 802258a:	617b      	str	r3, [r7, #20]
 802258c:	697b      	ldr	r3, [r7, #20]
 802258e:	2b00      	cmp	r3, #0
 8022590:	d1d0      	bne.n	8022534 <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 8022592:	697b      	ldr	r3, [r7, #20]
 8022594:	2b00      	cmp	r3, #0
 8022596:	d1be      	bne.n	8022516 <netif_add+0xc6>
  }
  if (netif->num == 254) {
 8022598:	68fb      	ldr	r3, [r7, #12]
 802259a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802259e:	2bfe      	cmp	r3, #254	; 0xfe
 80225a0:	d103      	bne.n	80225aa <netif_add+0x15a>
    netif_num = 0;
 80225a2:	4b11      	ldr	r3, [pc, #68]	; (80225e8 <netif_add+0x198>)
 80225a4:	2200      	movs	r2, #0
 80225a6:	701a      	strb	r2, [r3, #0]
 80225a8:	e006      	b.n	80225b8 <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80225aa:	68fb      	ldr	r3, [r7, #12]
 80225ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80225b0:	3301      	adds	r3, #1
 80225b2:	b2da      	uxtb	r2, r3
 80225b4:	4b0c      	ldr	r3, [pc, #48]	; (80225e8 <netif_add+0x198>)
 80225b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80225b8:	4b0c      	ldr	r3, [pc, #48]	; (80225ec <netif_add+0x19c>)
 80225ba:	681a      	ldr	r2, [r3, #0]
 80225bc:	68fb      	ldr	r3, [r7, #12]
 80225be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80225c0:	4a0a      	ldr	r2, [pc, #40]	; (80225ec <netif_add+0x19c>)
 80225c2:	68fb      	ldr	r3, [r7, #12]
 80225c4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80225c6:	68fb      	ldr	r3, [r7, #12]
}
 80225c8:	4618      	mov	r0, r3
 80225ca:	3718      	adds	r7, #24
 80225cc:	46bd      	mov	sp, r7
 80225ce:	bd80      	pop	{r7, pc}
 80225d0:	0802c8f0 	.word	0x0802c8f0
 80225d4:	0802c9a8 	.word	0x0802c9a8
 80225d8:	0802c948 	.word	0x0802c948
 80225dc:	0802c9c4 	.word	0x0802c9c4
 80225e0:	0802e078 	.word	0x0802e078
 80225e4:	08022afb 	.word	0x08022afb
 80225e8:	20015df8 	.word	0x20015df8
 80225ec:	20015df0 	.word	0x20015df0
 80225f0:	0802c9e8 	.word	0x0802c9e8
 80225f4:	0802c9fc 	.word	0x0802c9fc

080225f8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80225f8:	b580      	push	{r7, lr}
 80225fa:	b082      	sub	sp, #8
 80225fc:	af00      	add	r7, sp, #0
 80225fe:	6078      	str	r0, [r7, #4]
 8022600:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8022602:	6839      	ldr	r1, [r7, #0]
 8022604:	6878      	ldr	r0, [r7, #4]
 8022606:	f001 fe13 	bl	8024230 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 802260a:	bf00      	nop
 802260c:	3708      	adds	r7, #8
 802260e:	46bd      	mov	sp, r7
 8022610:	bd80      	pop	{r7, pc}
	...

08022614 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8022614:	b580      	push	{r7, lr}
 8022616:	b086      	sub	sp, #24
 8022618:	af00      	add	r7, sp, #0
 802261a:	60f8      	str	r0, [r7, #12]
 802261c:	60b9      	str	r1, [r7, #8]
 802261e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8022620:	68bb      	ldr	r3, [r7, #8]
 8022622:	2b00      	cmp	r3, #0
 8022624:	d106      	bne.n	8022634 <netif_do_set_ipaddr+0x20>
 8022626:	4b1d      	ldr	r3, [pc, #116]	; (802269c <netif_do_set_ipaddr+0x88>)
 8022628:	f240 12cb 	movw	r2, #459	; 0x1cb
 802262c:	491c      	ldr	r1, [pc, #112]	; (80226a0 <netif_do_set_ipaddr+0x8c>)
 802262e:	481d      	ldr	r0, [pc, #116]	; (80226a4 <netif_do_set_ipaddr+0x90>)
 8022630:	f004 fadc 	bl	8026bec <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8022634:	687b      	ldr	r3, [r7, #4]
 8022636:	2b00      	cmp	r3, #0
 8022638:	d106      	bne.n	8022648 <netif_do_set_ipaddr+0x34>
 802263a:	4b18      	ldr	r3, [pc, #96]	; (802269c <netif_do_set_ipaddr+0x88>)
 802263c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8022640:	4917      	ldr	r1, [pc, #92]	; (80226a0 <netif_do_set_ipaddr+0x8c>)
 8022642:	4818      	ldr	r0, [pc, #96]	; (80226a4 <netif_do_set_ipaddr+0x90>)
 8022644:	f004 fad2 	bl	8026bec <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8022648:	68bb      	ldr	r3, [r7, #8]
 802264a:	681a      	ldr	r2, [r3, #0]
 802264c:	68fb      	ldr	r3, [r7, #12]
 802264e:	3304      	adds	r3, #4
 8022650:	681b      	ldr	r3, [r3, #0]
 8022652:	429a      	cmp	r2, r3
 8022654:	d01c      	beq.n	8022690 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8022656:	68bb      	ldr	r3, [r7, #8]
 8022658:	681b      	ldr	r3, [r3, #0]
 802265a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 802265c:	68fb      	ldr	r3, [r7, #12]
 802265e:	3304      	adds	r3, #4
 8022660:	681a      	ldr	r2, [r3, #0]
 8022662:	687b      	ldr	r3, [r7, #4]
 8022664:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8022666:	f107 0314 	add.w	r3, r7, #20
 802266a:	4619      	mov	r1, r3
 802266c:	6878      	ldr	r0, [r7, #4]
 802266e:	f7ff ffc3 	bl	80225f8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8022672:	68bb      	ldr	r3, [r7, #8]
 8022674:	2b00      	cmp	r3, #0
 8022676:	d002      	beq.n	802267e <netif_do_set_ipaddr+0x6a>
 8022678:	68bb      	ldr	r3, [r7, #8]
 802267a:	681b      	ldr	r3, [r3, #0]
 802267c:	e000      	b.n	8022680 <netif_do_set_ipaddr+0x6c>
 802267e:	2300      	movs	r3, #0
 8022680:	68fa      	ldr	r2, [r7, #12]
 8022682:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8022684:	2101      	movs	r1, #1
 8022686:	68f8      	ldr	r0, [r7, #12]
 8022688:	f000 f8d2 	bl	8022830 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 802268c:	2301      	movs	r3, #1
 802268e:	e000      	b.n	8022692 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8022690:	2300      	movs	r3, #0
}
 8022692:	4618      	mov	r0, r3
 8022694:	3718      	adds	r7, #24
 8022696:	46bd      	mov	sp, r7
 8022698:	bd80      	pop	{r7, pc}
 802269a:	bf00      	nop
 802269c:	0802c8f0 	.word	0x0802c8f0
 80226a0:	0802ca2c 	.word	0x0802ca2c
 80226a4:	0802c948 	.word	0x0802c948

080226a8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80226a8:	b480      	push	{r7}
 80226aa:	b085      	sub	sp, #20
 80226ac:	af00      	add	r7, sp, #0
 80226ae:	60f8      	str	r0, [r7, #12]
 80226b0:	60b9      	str	r1, [r7, #8]
 80226b2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80226b4:	68bb      	ldr	r3, [r7, #8]
 80226b6:	681a      	ldr	r2, [r3, #0]
 80226b8:	68fb      	ldr	r3, [r7, #12]
 80226ba:	3308      	adds	r3, #8
 80226bc:	681b      	ldr	r3, [r3, #0]
 80226be:	429a      	cmp	r2, r3
 80226c0:	d00a      	beq.n	80226d8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80226c2:	68bb      	ldr	r3, [r7, #8]
 80226c4:	2b00      	cmp	r3, #0
 80226c6:	d002      	beq.n	80226ce <netif_do_set_netmask+0x26>
 80226c8:	68bb      	ldr	r3, [r7, #8]
 80226ca:	681b      	ldr	r3, [r3, #0]
 80226cc:	e000      	b.n	80226d0 <netif_do_set_netmask+0x28>
 80226ce:	2300      	movs	r3, #0
 80226d0:	68fa      	ldr	r2, [r7, #12]
 80226d2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80226d4:	2301      	movs	r3, #1
 80226d6:	e000      	b.n	80226da <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80226d8:	2300      	movs	r3, #0
}
 80226da:	4618      	mov	r0, r3
 80226dc:	3714      	adds	r7, #20
 80226de:	46bd      	mov	sp, r7
 80226e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226e4:	4770      	bx	lr

080226e6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80226e6:	b480      	push	{r7}
 80226e8:	b085      	sub	sp, #20
 80226ea:	af00      	add	r7, sp, #0
 80226ec:	60f8      	str	r0, [r7, #12]
 80226ee:	60b9      	str	r1, [r7, #8]
 80226f0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80226f2:	68bb      	ldr	r3, [r7, #8]
 80226f4:	681a      	ldr	r2, [r3, #0]
 80226f6:	68fb      	ldr	r3, [r7, #12]
 80226f8:	330c      	adds	r3, #12
 80226fa:	681b      	ldr	r3, [r3, #0]
 80226fc:	429a      	cmp	r2, r3
 80226fe:	d00a      	beq.n	8022716 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8022700:	68bb      	ldr	r3, [r7, #8]
 8022702:	2b00      	cmp	r3, #0
 8022704:	d002      	beq.n	802270c <netif_do_set_gw+0x26>
 8022706:	68bb      	ldr	r3, [r7, #8]
 8022708:	681b      	ldr	r3, [r3, #0]
 802270a:	e000      	b.n	802270e <netif_do_set_gw+0x28>
 802270c:	2300      	movs	r3, #0
 802270e:	68fa      	ldr	r2, [r7, #12]
 8022710:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8022712:	2301      	movs	r3, #1
 8022714:	e000      	b.n	8022718 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8022716:	2300      	movs	r3, #0
}
 8022718:	4618      	mov	r0, r3
 802271a:	3714      	adds	r7, #20
 802271c:	46bd      	mov	sp, r7
 802271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022722:	4770      	bx	lr

08022724 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8022724:	b580      	push	{r7, lr}
 8022726:	b088      	sub	sp, #32
 8022728:	af00      	add	r7, sp, #0
 802272a:	60f8      	str	r0, [r7, #12]
 802272c:	60b9      	str	r1, [r7, #8]
 802272e:	607a      	str	r2, [r7, #4]
 8022730:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8022732:	2300      	movs	r3, #0
 8022734:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8022736:	2300      	movs	r3, #0
 8022738:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 802273a:	68bb      	ldr	r3, [r7, #8]
 802273c:	2b00      	cmp	r3, #0
 802273e:	d101      	bne.n	8022744 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8022740:	4b1c      	ldr	r3, [pc, #112]	; (80227b4 <netif_set_addr+0x90>)
 8022742:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8022744:	687b      	ldr	r3, [r7, #4]
 8022746:	2b00      	cmp	r3, #0
 8022748:	d101      	bne.n	802274e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 802274a:	4b1a      	ldr	r3, [pc, #104]	; (80227b4 <netif_set_addr+0x90>)
 802274c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 802274e:	683b      	ldr	r3, [r7, #0]
 8022750:	2b00      	cmp	r3, #0
 8022752:	d101      	bne.n	8022758 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8022754:	4b17      	ldr	r3, [pc, #92]	; (80227b4 <netif_set_addr+0x90>)
 8022756:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8022758:	68bb      	ldr	r3, [r7, #8]
 802275a:	2b00      	cmp	r3, #0
 802275c:	d003      	beq.n	8022766 <netif_set_addr+0x42>
 802275e:	68bb      	ldr	r3, [r7, #8]
 8022760:	681b      	ldr	r3, [r3, #0]
 8022762:	2b00      	cmp	r3, #0
 8022764:	d101      	bne.n	802276a <netif_set_addr+0x46>
 8022766:	2301      	movs	r3, #1
 8022768:	e000      	b.n	802276c <netif_set_addr+0x48>
 802276a:	2300      	movs	r3, #0
 802276c:	617b      	str	r3, [r7, #20]
  if (remove) {
 802276e:	697b      	ldr	r3, [r7, #20]
 8022770:	2b00      	cmp	r3, #0
 8022772:	d006      	beq.n	8022782 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8022774:	f107 0310 	add.w	r3, r7, #16
 8022778:	461a      	mov	r2, r3
 802277a:	68b9      	ldr	r1, [r7, #8]
 802277c:	68f8      	ldr	r0, [r7, #12]
 802277e:	f7ff ff49 	bl	8022614 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8022782:	69fa      	ldr	r2, [r7, #28]
 8022784:	6879      	ldr	r1, [r7, #4]
 8022786:	68f8      	ldr	r0, [r7, #12]
 8022788:	f7ff ff8e 	bl	80226a8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 802278c:	69ba      	ldr	r2, [r7, #24]
 802278e:	6839      	ldr	r1, [r7, #0]
 8022790:	68f8      	ldr	r0, [r7, #12]
 8022792:	f7ff ffa8 	bl	80226e6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8022796:	697b      	ldr	r3, [r7, #20]
 8022798:	2b00      	cmp	r3, #0
 802279a:	d106      	bne.n	80227aa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 802279c:	f107 0310 	add.w	r3, r7, #16
 80227a0:	461a      	mov	r2, r3
 80227a2:	68b9      	ldr	r1, [r7, #8]
 80227a4:	68f8      	ldr	r0, [r7, #12]
 80227a6:	f7ff ff35 	bl	8022614 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80227aa:	bf00      	nop
 80227ac:	3720      	adds	r7, #32
 80227ae:	46bd      	mov	sp, r7
 80227b0:	bd80      	pop	{r7, pc}
 80227b2:	bf00      	nop
 80227b4:	0802e078 	.word	0x0802e078

080227b8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80227b8:	b480      	push	{r7}
 80227ba:	b083      	sub	sp, #12
 80227bc:	af00      	add	r7, sp, #0
 80227be:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80227c0:	4a04      	ldr	r2, [pc, #16]	; (80227d4 <netif_set_default+0x1c>)
 80227c2:	687b      	ldr	r3, [r7, #4]
 80227c4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80227c6:	bf00      	nop
 80227c8:	370c      	adds	r7, #12
 80227ca:	46bd      	mov	sp, r7
 80227cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227d0:	4770      	bx	lr
 80227d2:	bf00      	nop
 80227d4:	20015df4 	.word	0x20015df4

080227d8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80227d8:	b580      	push	{r7, lr}
 80227da:	b082      	sub	sp, #8
 80227dc:	af00      	add	r7, sp, #0
 80227de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80227e0:	687b      	ldr	r3, [r7, #4]
 80227e2:	2b00      	cmp	r3, #0
 80227e4:	d107      	bne.n	80227f6 <netif_set_up+0x1e>
 80227e6:	4b0f      	ldr	r3, [pc, #60]	; (8022824 <netif_set_up+0x4c>)
 80227e8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80227ec:	490e      	ldr	r1, [pc, #56]	; (8022828 <netif_set_up+0x50>)
 80227ee:	480f      	ldr	r0, [pc, #60]	; (802282c <netif_set_up+0x54>)
 80227f0:	f004 f9fc 	bl	8026bec <iprintf>
 80227f4:	e013      	b.n	802281e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80227f6:	687b      	ldr	r3, [r7, #4]
 80227f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80227fc:	f003 0301 	and.w	r3, r3, #1
 8022800:	2b00      	cmp	r3, #0
 8022802:	d10c      	bne.n	802281e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802280a:	f043 0301 	orr.w	r3, r3, #1
 802280e:	b2da      	uxtb	r2, r3
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8022816:	2103      	movs	r1, #3
 8022818:	6878      	ldr	r0, [r7, #4]
 802281a:	f000 f809 	bl	8022830 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 802281e:	3708      	adds	r7, #8
 8022820:	46bd      	mov	sp, r7
 8022822:	bd80      	pop	{r7, pc}
 8022824:	0802c8f0 	.word	0x0802c8f0
 8022828:	0802ca9c 	.word	0x0802ca9c
 802282c:	0802c948 	.word	0x0802c948

08022830 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8022830:	b580      	push	{r7, lr}
 8022832:	b082      	sub	sp, #8
 8022834:	af00      	add	r7, sp, #0
 8022836:	6078      	str	r0, [r7, #4]
 8022838:	460b      	mov	r3, r1
 802283a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 802283c:	687b      	ldr	r3, [r7, #4]
 802283e:	2b00      	cmp	r3, #0
 8022840:	d106      	bne.n	8022850 <netif_issue_reports+0x20>
 8022842:	4b18      	ldr	r3, [pc, #96]	; (80228a4 <netif_issue_reports+0x74>)
 8022844:	f240 326d 	movw	r2, #877	; 0x36d
 8022848:	4917      	ldr	r1, [pc, #92]	; (80228a8 <netif_issue_reports+0x78>)
 802284a:	4818      	ldr	r0, [pc, #96]	; (80228ac <netif_issue_reports+0x7c>)
 802284c:	f004 f9ce 	bl	8026bec <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8022850:	687b      	ldr	r3, [r7, #4]
 8022852:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022856:	f003 0304 	and.w	r3, r3, #4
 802285a:	2b00      	cmp	r3, #0
 802285c:	d01e      	beq.n	802289c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 802285e:	687b      	ldr	r3, [r7, #4]
 8022860:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022864:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8022868:	2b00      	cmp	r3, #0
 802286a:	d017      	beq.n	802289c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 802286c:	78fb      	ldrb	r3, [r7, #3]
 802286e:	f003 0301 	and.w	r3, r3, #1
 8022872:	2b00      	cmp	r3, #0
 8022874:	d013      	beq.n	802289e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8022876:	687b      	ldr	r3, [r7, #4]
 8022878:	3304      	adds	r3, #4
 802287a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 802287c:	2b00      	cmp	r3, #0
 802287e:	d00e      	beq.n	802289e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8022880:	687b      	ldr	r3, [r7, #4]
 8022882:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022886:	f003 0308 	and.w	r3, r3, #8
 802288a:	2b00      	cmp	r3, #0
 802288c:	d007      	beq.n	802289e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 802288e:	687b      	ldr	r3, [r7, #4]
 8022890:	3304      	adds	r3, #4
 8022892:	4619      	mov	r1, r3
 8022894:	6878      	ldr	r0, [r7, #4]
 8022896:	f002 fc35 	bl	8025104 <etharp_request>
 802289a:	e000      	b.n	802289e <netif_issue_reports+0x6e>
    return;
 802289c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 802289e:	3708      	adds	r7, #8
 80228a0:	46bd      	mov	sp, r7
 80228a2:	bd80      	pop	{r7, pc}
 80228a4:	0802c8f0 	.word	0x0802c8f0
 80228a8:	0802cab8 	.word	0x0802cab8
 80228ac:	0802c948 	.word	0x0802c948

080228b0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80228b0:	b580      	push	{r7, lr}
 80228b2:	b082      	sub	sp, #8
 80228b4:	af00      	add	r7, sp, #0
 80228b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	d107      	bne.n	80228ce <netif_set_down+0x1e>
 80228be:	4b12      	ldr	r3, [pc, #72]	; (8022908 <netif_set_down+0x58>)
 80228c0:	f240 329b 	movw	r2, #923	; 0x39b
 80228c4:	4911      	ldr	r1, [pc, #68]	; (802290c <netif_set_down+0x5c>)
 80228c6:	4812      	ldr	r0, [pc, #72]	; (8022910 <netif_set_down+0x60>)
 80228c8:	f004 f990 	bl	8026bec <iprintf>
 80228cc:	e019      	b.n	8022902 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80228ce:	687b      	ldr	r3, [r7, #4]
 80228d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80228d4:	f003 0301 	and.w	r3, r3, #1
 80228d8:	2b00      	cmp	r3, #0
 80228da:	d012      	beq.n	8022902 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80228dc:	687b      	ldr	r3, [r7, #4]
 80228de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80228e2:	f023 0301 	bic.w	r3, r3, #1
 80228e6:	b2da      	uxtb	r2, r3
 80228e8:	687b      	ldr	r3, [r7, #4]
 80228ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80228ee:	687b      	ldr	r3, [r7, #4]
 80228f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80228f4:	f003 0308 	and.w	r3, r3, #8
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	d002      	beq.n	8022902 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80228fc:	6878      	ldr	r0, [r7, #4]
 80228fe:	f001 ffbf 	bl	8024880 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8022902:	3708      	adds	r7, #8
 8022904:	46bd      	mov	sp, r7
 8022906:	bd80      	pop	{r7, pc}
 8022908:	0802c8f0 	.word	0x0802c8f0
 802290c:	0802cadc 	.word	0x0802cadc
 8022910:	0802c948 	.word	0x0802c948

08022914 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8022914:	b580      	push	{r7, lr}
 8022916:	b082      	sub	sp, #8
 8022918:	af00      	add	r7, sp, #0
 802291a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 802291c:	687b      	ldr	r3, [r7, #4]
 802291e:	2b00      	cmp	r3, #0
 8022920:	d107      	bne.n	8022932 <netif_set_link_up+0x1e>
 8022922:	4b13      	ldr	r3, [pc, #76]	; (8022970 <netif_set_link_up+0x5c>)
 8022924:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8022928:	4912      	ldr	r1, [pc, #72]	; (8022974 <netif_set_link_up+0x60>)
 802292a:	4813      	ldr	r0, [pc, #76]	; (8022978 <netif_set_link_up+0x64>)
 802292c:	f004 f95e 	bl	8026bec <iprintf>
 8022930:	e01b      	b.n	802296a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8022932:	687b      	ldr	r3, [r7, #4]
 8022934:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022938:	f003 0304 	and.w	r3, r3, #4
 802293c:	2b00      	cmp	r3, #0
 802293e:	d114      	bne.n	802296a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8022940:	687b      	ldr	r3, [r7, #4]
 8022942:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022946:	f043 0304 	orr.w	r3, r3, #4
 802294a:	b2da      	uxtb	r2, r3
 802294c:	687b      	ldr	r3, [r7, #4]
 802294e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8022952:	2103      	movs	r1, #3
 8022954:	6878      	ldr	r0, [r7, #4]
 8022956:	f7ff ff6b 	bl	8022830 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 802295a:	687b      	ldr	r3, [r7, #4]
 802295c:	69db      	ldr	r3, [r3, #28]
 802295e:	2b00      	cmp	r3, #0
 8022960:	d003      	beq.n	802296a <netif_set_link_up+0x56>
 8022962:	687b      	ldr	r3, [r7, #4]
 8022964:	69db      	ldr	r3, [r3, #28]
 8022966:	6878      	ldr	r0, [r7, #4]
 8022968:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 802296a:	3708      	adds	r7, #8
 802296c:	46bd      	mov	sp, r7
 802296e:	bd80      	pop	{r7, pc}
 8022970:	0802c8f0 	.word	0x0802c8f0
 8022974:	0802cafc 	.word	0x0802cafc
 8022978:	0802c948 	.word	0x0802c948

0802297c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 802297c:	b580      	push	{r7, lr}
 802297e:	b082      	sub	sp, #8
 8022980:	af00      	add	r7, sp, #0
 8022982:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8022984:	687b      	ldr	r3, [r7, #4]
 8022986:	2b00      	cmp	r3, #0
 8022988:	d107      	bne.n	802299a <netif_set_link_down+0x1e>
 802298a:	4b11      	ldr	r3, [pc, #68]	; (80229d0 <netif_set_link_down+0x54>)
 802298c:	f240 4206 	movw	r2, #1030	; 0x406
 8022990:	4910      	ldr	r1, [pc, #64]	; (80229d4 <netif_set_link_down+0x58>)
 8022992:	4811      	ldr	r0, [pc, #68]	; (80229d8 <netif_set_link_down+0x5c>)
 8022994:	f004 f92a 	bl	8026bec <iprintf>
 8022998:	e017      	b.n	80229ca <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 802299a:	687b      	ldr	r3, [r7, #4]
 802299c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80229a0:	f003 0304 	and.w	r3, r3, #4
 80229a4:	2b00      	cmp	r3, #0
 80229a6:	d010      	beq.n	80229ca <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80229a8:	687b      	ldr	r3, [r7, #4]
 80229aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80229ae:	f023 0304 	bic.w	r3, r3, #4
 80229b2:	b2da      	uxtb	r2, r3
 80229b4:	687b      	ldr	r3, [r7, #4]
 80229b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80229ba:	687b      	ldr	r3, [r7, #4]
 80229bc:	69db      	ldr	r3, [r3, #28]
 80229be:	2b00      	cmp	r3, #0
 80229c0:	d003      	beq.n	80229ca <netif_set_link_down+0x4e>
 80229c2:	687b      	ldr	r3, [r7, #4]
 80229c4:	69db      	ldr	r3, [r3, #28]
 80229c6:	6878      	ldr	r0, [r7, #4]
 80229c8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80229ca:	3708      	adds	r7, #8
 80229cc:	46bd      	mov	sp, r7
 80229ce:	bd80      	pop	{r7, pc}
 80229d0:	0802c8f0 	.word	0x0802c8f0
 80229d4:	0802cb20 	.word	0x0802cb20
 80229d8:	0802c948 	.word	0x0802c948

080229dc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80229dc:	b480      	push	{r7}
 80229de:	b083      	sub	sp, #12
 80229e0:	af00      	add	r7, sp, #0
 80229e2:	6078      	str	r0, [r7, #4]
 80229e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80229e6:	687b      	ldr	r3, [r7, #4]
 80229e8:	2b00      	cmp	r3, #0
 80229ea:	d002      	beq.n	80229f2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80229ec:	687b      	ldr	r3, [r7, #4]
 80229ee:	683a      	ldr	r2, [r7, #0]
 80229f0:	61da      	str	r2, [r3, #28]
  }
}
 80229f2:	bf00      	nop
 80229f4:	370c      	adds	r7, #12
 80229f6:	46bd      	mov	sp, r7
 80229f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229fc:	4770      	bx	lr
	...

08022a00 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 8022a00:	b580      	push	{r7, lr}
 8022a02:	b086      	sub	sp, #24
 8022a04:	af00      	add	r7, sp, #0
 8022a06:	6078      	str	r0, [r7, #4]
 8022a08:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 8022a0a:	687b      	ldr	r3, [r7, #4]
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	d106      	bne.n	8022a1e <netif_loop_output+0x1e>
 8022a10:	4b2d      	ldr	r3, [pc, #180]	; (8022ac8 <netif_loop_output+0xc8>)
 8022a12:	f240 424b 	movw	r2, #1099	; 0x44b
 8022a16:	492d      	ldr	r1, [pc, #180]	; (8022acc <netif_loop_output+0xcc>)
 8022a18:	482d      	ldr	r0, [pc, #180]	; (8022ad0 <netif_loop_output+0xd0>)
 8022a1a:	f004 f8e7 	bl	8026bec <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 8022a1e:	683b      	ldr	r3, [r7, #0]
 8022a20:	2b00      	cmp	r3, #0
 8022a22:	d106      	bne.n	8022a32 <netif_loop_output+0x32>
 8022a24:	4b28      	ldr	r3, [pc, #160]	; (8022ac8 <netif_loop_output+0xc8>)
 8022a26:	f240 424c 	movw	r2, #1100	; 0x44c
 8022a2a:	492a      	ldr	r1, [pc, #168]	; (8022ad4 <netif_loop_output+0xd4>)
 8022a2c:	4828      	ldr	r0, [pc, #160]	; (8022ad0 <netif_loop_output+0xd0>)
 8022a2e:	f004 f8dd 	bl	8026bec <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8022a32:	683b      	ldr	r3, [r7, #0]
 8022a34:	891b      	ldrh	r3, [r3, #8]
 8022a36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022a3a:	4619      	mov	r1, r3
 8022a3c:	200e      	movs	r0, #14
 8022a3e:	f000 f8bb 	bl	8022bb8 <pbuf_alloc>
 8022a42:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 8022a44:	693b      	ldr	r3, [r7, #16]
 8022a46:	2b00      	cmp	r3, #0
 8022a48:	d102      	bne.n	8022a50 <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 8022a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8022a4e:	e037      	b.n	8022ac0 <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 8022a50:	6839      	ldr	r1, [r7, #0]
 8022a52:	6938      	ldr	r0, [r7, #16]
 8022a54:	f000 fcba 	bl	80233cc <pbuf_copy>
 8022a58:	4603      	mov	r3, r0
 8022a5a:	73fb      	strb	r3, [r7, #15]
 8022a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022a60:	2b00      	cmp	r3, #0
 8022a62:	d005      	beq.n	8022a70 <netif_loop_output+0x70>
    pbuf_free(r);
 8022a64:	6938      	ldr	r0, [r7, #16]
 8022a66:	f000 fb89 	bl	802317c <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 8022a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022a6e:	e027      	b.n	8022ac0 <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 8022a70:	693b      	ldr	r3, [r7, #16]
 8022a72:	617b      	str	r3, [r7, #20]
 8022a74:	e002      	b.n	8022a7c <netif_loop_output+0x7c>
 8022a76:	697b      	ldr	r3, [r7, #20]
 8022a78:	681b      	ldr	r3, [r3, #0]
 8022a7a:	617b      	str	r3, [r7, #20]
 8022a7c:	697b      	ldr	r3, [r7, #20]
 8022a7e:	681b      	ldr	r3, [r3, #0]
 8022a80:	2b00      	cmp	r3, #0
 8022a82:	d1f8      	bne.n	8022a76 <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 8022a84:	687b      	ldr	r3, [r7, #4]
 8022a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a88:	2b00      	cmp	r3, #0
 8022a8a:	d012      	beq.n	8022ab2 <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 8022a8c:	687b      	ldr	r3, [r7, #4]
 8022a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022a90:	2b00      	cmp	r3, #0
 8022a92:	d106      	bne.n	8022aa2 <netif_loop_output+0xa2>
 8022a94:	4b0c      	ldr	r3, [pc, #48]	; (8022ac8 <netif_loop_output+0xc8>)
 8022a96:	f240 4277 	movw	r2, #1143	; 0x477
 8022a9a:	490f      	ldr	r1, [pc, #60]	; (8022ad8 <netif_loop_output+0xd8>)
 8022a9c:	480c      	ldr	r0, [pc, #48]	; (8022ad0 <netif_loop_output+0xd0>)
 8022a9e:	f004 f8a5 	bl	8026bec <iprintf>
    netif->loop_last->next = r;
 8022aa2:	687b      	ldr	r3, [r7, #4]
 8022aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022aa6:	693a      	ldr	r2, [r7, #16]
 8022aa8:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 8022aaa:	687b      	ldr	r3, [r7, #4]
 8022aac:	697a      	ldr	r2, [r7, #20]
 8022aae:	63da      	str	r2, [r3, #60]	; 0x3c
 8022ab0:	e005      	b.n	8022abe <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	693a      	ldr	r2, [r7, #16]
 8022ab6:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 8022ab8:	687b      	ldr	r3, [r7, #4]
 8022aba:	697a      	ldr	r2, [r7, #20]
 8022abc:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 8022abe:	2300      	movs	r3, #0
}
 8022ac0:	4618      	mov	r0, r3
 8022ac2:	3718      	adds	r7, #24
 8022ac4:	46bd      	mov	sp, r7
 8022ac6:	bd80      	pop	{r7, pc}
 8022ac8:	0802c8f0 	.word	0x0802c8f0
 8022acc:	0802cb44 	.word	0x0802cb44
 8022ad0:	0802c948 	.word	0x0802c948
 8022ad4:	0802cb68 	.word	0x0802cb68
 8022ad8:	0802cb88 	.word	0x0802cb88

08022adc <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 8022adc:	b580      	push	{r7, lr}
 8022ade:	b084      	sub	sp, #16
 8022ae0:	af00      	add	r7, sp, #0
 8022ae2:	60f8      	str	r0, [r7, #12]
 8022ae4:	60b9      	str	r1, [r7, #8]
 8022ae6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 8022ae8:	68b9      	ldr	r1, [r7, #8]
 8022aea:	68f8      	ldr	r0, [r7, #12]
 8022aec:	f7ff ff88 	bl	8022a00 <netif_loop_output>
 8022af0:	4603      	mov	r3, r0
}
 8022af2:	4618      	mov	r0, r3
 8022af4:	3710      	adds	r7, #16
 8022af6:	46bd      	mov	sp, r7
 8022af8:	bd80      	pop	{r7, pc}

08022afa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8022afa:	b480      	push	{r7}
 8022afc:	b085      	sub	sp, #20
 8022afe:	af00      	add	r7, sp, #0
 8022b00:	60f8      	str	r0, [r7, #12]
 8022b02:	60b9      	str	r1, [r7, #8]
 8022b04:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8022b06:	f06f 030b 	mvn.w	r3, #11
}
 8022b0a:	4618      	mov	r0, r3
 8022b0c:	3714      	adds	r7, #20
 8022b0e:	46bd      	mov	sp, r7
 8022b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b14:	4770      	bx	lr
	...

08022b18 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8022b18:	b480      	push	{r7}
 8022b1a:	b085      	sub	sp, #20
 8022b1c:	af00      	add	r7, sp, #0
 8022b1e:	4603      	mov	r3, r0
 8022b20:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8022b22:	79fb      	ldrb	r3, [r7, #7]
 8022b24:	2b00      	cmp	r3, #0
 8022b26:	d013      	beq.n	8022b50 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8022b28:	4b0d      	ldr	r3, [pc, #52]	; (8022b60 <netif_get_by_index+0x48>)
 8022b2a:	681b      	ldr	r3, [r3, #0]
 8022b2c:	60fb      	str	r3, [r7, #12]
 8022b2e:	e00c      	b.n	8022b4a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8022b30:	68fb      	ldr	r3, [r7, #12]
 8022b32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8022b36:	3301      	adds	r3, #1
 8022b38:	b2db      	uxtb	r3, r3
 8022b3a:	79fa      	ldrb	r2, [r7, #7]
 8022b3c:	429a      	cmp	r2, r3
 8022b3e:	d101      	bne.n	8022b44 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8022b40:	68fb      	ldr	r3, [r7, #12]
 8022b42:	e006      	b.n	8022b52 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8022b44:	68fb      	ldr	r3, [r7, #12]
 8022b46:	681b      	ldr	r3, [r3, #0]
 8022b48:	60fb      	str	r3, [r7, #12]
 8022b4a:	68fb      	ldr	r3, [r7, #12]
 8022b4c:	2b00      	cmp	r3, #0
 8022b4e:	d1ef      	bne.n	8022b30 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8022b50:	2300      	movs	r3, #0
}
 8022b52:	4618      	mov	r0, r3
 8022b54:	3714      	adds	r7, #20
 8022b56:	46bd      	mov	sp, r7
 8022b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b5c:	4770      	bx	lr
 8022b5e:	bf00      	nop
 8022b60:	20015df0 	.word	0x20015df0

08022b64 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8022b64:	b480      	push	{r7}
 8022b66:	b085      	sub	sp, #20
 8022b68:	af00      	add	r7, sp, #0
 8022b6a:	60f8      	str	r0, [r7, #12]
 8022b6c:	60b9      	str	r1, [r7, #8]
 8022b6e:	4611      	mov	r1, r2
 8022b70:	461a      	mov	r2, r3
 8022b72:	460b      	mov	r3, r1
 8022b74:	80fb      	strh	r3, [r7, #6]
 8022b76:	4613      	mov	r3, r2
 8022b78:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8022b7a:	68fb      	ldr	r3, [r7, #12]
 8022b7c:	2200      	movs	r2, #0
 8022b7e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8022b80:	68fb      	ldr	r3, [r7, #12]
 8022b82:	68ba      	ldr	r2, [r7, #8]
 8022b84:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8022b86:	68fb      	ldr	r3, [r7, #12]
 8022b88:	88fa      	ldrh	r2, [r7, #6]
 8022b8a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8022b8c:	68fb      	ldr	r3, [r7, #12]
 8022b8e:	88ba      	ldrh	r2, [r7, #4]
 8022b90:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8022b92:	8b3b      	ldrh	r3, [r7, #24]
 8022b94:	b2da      	uxtb	r2, r3
 8022b96:	68fb      	ldr	r3, [r7, #12]
 8022b98:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8022b9a:	68fb      	ldr	r3, [r7, #12]
 8022b9c:	7f3a      	ldrb	r2, [r7, #28]
 8022b9e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8022ba0:	68fb      	ldr	r3, [r7, #12]
 8022ba2:	2201      	movs	r2, #1
 8022ba4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8022ba6:	68fb      	ldr	r3, [r7, #12]
 8022ba8:	2200      	movs	r2, #0
 8022baa:	73da      	strb	r2, [r3, #15]
}
 8022bac:	bf00      	nop
 8022bae:	3714      	adds	r7, #20
 8022bb0:	46bd      	mov	sp, r7
 8022bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bb6:	4770      	bx	lr

08022bb8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8022bb8:	b580      	push	{r7, lr}
 8022bba:	b08c      	sub	sp, #48	; 0x30
 8022bbc:	af02      	add	r7, sp, #8
 8022bbe:	4603      	mov	r3, r0
 8022bc0:	71fb      	strb	r3, [r7, #7]
 8022bc2:	460b      	mov	r3, r1
 8022bc4:	80bb      	strh	r3, [r7, #4]
 8022bc6:	4613      	mov	r3, r2
 8022bc8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8022bca:	79fb      	ldrb	r3, [r7, #7]
 8022bcc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8022bce:	887b      	ldrh	r3, [r7, #2]
 8022bd0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8022bd4:	d07d      	beq.n	8022cd2 <pbuf_alloc+0x11a>
 8022bd6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8022bda:	f300 80c6 	bgt.w	8022d6a <pbuf_alloc+0x1b2>
 8022bde:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8022be2:	d010      	beq.n	8022c06 <pbuf_alloc+0x4e>
 8022be4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8022be8:	f300 80bf 	bgt.w	8022d6a <pbuf_alloc+0x1b2>
 8022bec:	2b01      	cmp	r3, #1
 8022bee:	d002      	beq.n	8022bf6 <pbuf_alloc+0x3e>
 8022bf0:	2b41      	cmp	r3, #65	; 0x41
 8022bf2:	f040 80ba 	bne.w	8022d6a <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8022bf6:	887a      	ldrh	r2, [r7, #2]
 8022bf8:	88bb      	ldrh	r3, [r7, #4]
 8022bfa:	4619      	mov	r1, r3
 8022bfc:	2000      	movs	r0, #0
 8022bfe:	f000 f8cf 	bl	8022da0 <pbuf_alloc_reference>
 8022c02:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8022c04:	e0bb      	b.n	8022d7e <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8022c06:	2300      	movs	r3, #0
 8022c08:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8022c0a:	2300      	movs	r3, #0
 8022c0c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8022c0e:	88bb      	ldrh	r3, [r7, #4]
 8022c10:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8022c12:	2005      	movs	r0, #5
 8022c14:	f7ff fb32 	bl	802227c <memp_malloc>
 8022c18:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8022c1a:	693b      	ldr	r3, [r7, #16]
 8022c1c:	2b00      	cmp	r3, #0
 8022c1e:	d107      	bne.n	8022c30 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 8022c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022c22:	2b00      	cmp	r3, #0
 8022c24:	d002      	beq.n	8022c2c <pbuf_alloc+0x74>
            pbuf_free(p);
 8022c26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022c28:	f000 faa8 	bl	802317c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8022c2c:	2300      	movs	r3, #0
 8022c2e:	e0a7      	b.n	8022d80 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8022c30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022c32:	3303      	adds	r3, #3
 8022c34:	b29b      	uxth	r3, r3
 8022c36:	f023 0303 	bic.w	r3, r3, #3
 8022c3a:	b29b      	uxth	r3, r3
 8022c3c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8022c40:	b29b      	uxth	r3, r3
 8022c42:	8b7a      	ldrh	r2, [r7, #26]
 8022c44:	4293      	cmp	r3, r2
 8022c46:	bf28      	it	cs
 8022c48:	4613      	movcs	r3, r2
 8022c4a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8022c4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022c4e:	3310      	adds	r3, #16
 8022c50:	693a      	ldr	r2, [r7, #16]
 8022c52:	4413      	add	r3, r2
 8022c54:	3303      	adds	r3, #3
 8022c56:	f023 0303 	bic.w	r3, r3, #3
 8022c5a:	4618      	mov	r0, r3
 8022c5c:	89f9      	ldrh	r1, [r7, #14]
 8022c5e:	8b7a      	ldrh	r2, [r7, #26]
 8022c60:	2300      	movs	r3, #0
 8022c62:	9301      	str	r3, [sp, #4]
 8022c64:	887b      	ldrh	r3, [r7, #2]
 8022c66:	9300      	str	r3, [sp, #0]
 8022c68:	460b      	mov	r3, r1
 8022c6a:	4601      	mov	r1, r0
 8022c6c:	6938      	ldr	r0, [r7, #16]
 8022c6e:	f7ff ff79 	bl	8022b64 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8022c72:	693b      	ldr	r3, [r7, #16]
 8022c74:	685b      	ldr	r3, [r3, #4]
 8022c76:	f003 0303 	and.w	r3, r3, #3
 8022c7a:	2b00      	cmp	r3, #0
 8022c7c:	d006      	beq.n	8022c8c <pbuf_alloc+0xd4>
 8022c7e:	4b42      	ldr	r3, [pc, #264]	; (8022d88 <pbuf_alloc+0x1d0>)
 8022c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022c84:	4941      	ldr	r1, [pc, #260]	; (8022d8c <pbuf_alloc+0x1d4>)
 8022c86:	4842      	ldr	r0, [pc, #264]	; (8022d90 <pbuf_alloc+0x1d8>)
 8022c88:	f003 ffb0 	bl	8026bec <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8022c8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022c8e:	3303      	adds	r3, #3
 8022c90:	f023 0303 	bic.w	r3, r3, #3
 8022c94:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8022c98:	d106      	bne.n	8022ca8 <pbuf_alloc+0xf0>
 8022c9a:	4b3b      	ldr	r3, [pc, #236]	; (8022d88 <pbuf_alloc+0x1d0>)
 8022c9c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8022ca0:	493c      	ldr	r1, [pc, #240]	; (8022d94 <pbuf_alloc+0x1dc>)
 8022ca2:	483b      	ldr	r0, [pc, #236]	; (8022d90 <pbuf_alloc+0x1d8>)
 8022ca4:	f003 ffa2 	bl	8026bec <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8022ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022caa:	2b00      	cmp	r3, #0
 8022cac:	d102      	bne.n	8022cb4 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8022cae:	693b      	ldr	r3, [r7, #16]
 8022cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8022cb2:	e002      	b.n	8022cba <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8022cb4:	69fb      	ldr	r3, [r7, #28]
 8022cb6:	693a      	ldr	r2, [r7, #16]
 8022cb8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8022cba:	693b      	ldr	r3, [r7, #16]
 8022cbc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8022cbe:	8b7a      	ldrh	r2, [r7, #26]
 8022cc0:	89fb      	ldrh	r3, [r7, #14]
 8022cc2:	1ad3      	subs	r3, r2, r3
 8022cc4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8022cc6:	2300      	movs	r3, #0
 8022cc8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8022cca:	8b7b      	ldrh	r3, [r7, #26]
 8022ccc:	2b00      	cmp	r3, #0
 8022cce:	d1a0      	bne.n	8022c12 <pbuf_alloc+0x5a>
      break;
 8022cd0:	e055      	b.n	8022d7e <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8022cd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022cd4:	3303      	adds	r3, #3
 8022cd6:	b29b      	uxth	r3, r3
 8022cd8:	f023 0303 	bic.w	r3, r3, #3
 8022cdc:	b29a      	uxth	r2, r3
 8022cde:	88bb      	ldrh	r3, [r7, #4]
 8022ce0:	3303      	adds	r3, #3
 8022ce2:	b29b      	uxth	r3, r3
 8022ce4:	f023 0303 	bic.w	r3, r3, #3
 8022ce8:	b29b      	uxth	r3, r3
 8022cea:	4413      	add	r3, r2
 8022cec:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8022cee:	8b3b      	ldrh	r3, [r7, #24]
 8022cf0:	3310      	adds	r3, #16
 8022cf2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8022cf4:	8b3a      	ldrh	r2, [r7, #24]
 8022cf6:	88bb      	ldrh	r3, [r7, #4]
 8022cf8:	3303      	adds	r3, #3
 8022cfa:	f023 0303 	bic.w	r3, r3, #3
 8022cfe:	429a      	cmp	r2, r3
 8022d00:	d306      	bcc.n	8022d10 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8022d02:	8afa      	ldrh	r2, [r7, #22]
 8022d04:	88bb      	ldrh	r3, [r7, #4]
 8022d06:	3303      	adds	r3, #3
 8022d08:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8022d0c:	429a      	cmp	r2, r3
 8022d0e:	d201      	bcs.n	8022d14 <pbuf_alloc+0x15c>
        return NULL;
 8022d10:	2300      	movs	r3, #0
 8022d12:	e035      	b.n	8022d80 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8022d14:	8afb      	ldrh	r3, [r7, #22]
 8022d16:	4618      	mov	r0, r3
 8022d18:	f7ff f920 	bl	8021f5c <mem_malloc>
 8022d1c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8022d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022d20:	2b00      	cmp	r3, #0
 8022d22:	d101      	bne.n	8022d28 <pbuf_alloc+0x170>
        return NULL;
 8022d24:	2300      	movs	r3, #0
 8022d26:	e02b      	b.n	8022d80 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8022d28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022d2a:	3310      	adds	r3, #16
 8022d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022d2e:	4413      	add	r3, r2
 8022d30:	3303      	adds	r3, #3
 8022d32:	f023 0303 	bic.w	r3, r3, #3
 8022d36:	4618      	mov	r0, r3
 8022d38:	88b9      	ldrh	r1, [r7, #4]
 8022d3a:	88ba      	ldrh	r2, [r7, #4]
 8022d3c:	2300      	movs	r3, #0
 8022d3e:	9301      	str	r3, [sp, #4]
 8022d40:	887b      	ldrh	r3, [r7, #2]
 8022d42:	9300      	str	r3, [sp, #0]
 8022d44:	460b      	mov	r3, r1
 8022d46:	4601      	mov	r1, r0
 8022d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022d4a:	f7ff ff0b 	bl	8022b64 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8022d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022d50:	685b      	ldr	r3, [r3, #4]
 8022d52:	f003 0303 	and.w	r3, r3, #3
 8022d56:	2b00      	cmp	r3, #0
 8022d58:	d010      	beq.n	8022d7c <pbuf_alloc+0x1c4>
 8022d5a:	4b0b      	ldr	r3, [pc, #44]	; (8022d88 <pbuf_alloc+0x1d0>)
 8022d5c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8022d60:	490d      	ldr	r1, [pc, #52]	; (8022d98 <pbuf_alloc+0x1e0>)
 8022d62:	480b      	ldr	r0, [pc, #44]	; (8022d90 <pbuf_alloc+0x1d8>)
 8022d64:	f003 ff42 	bl	8026bec <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8022d68:	e008      	b.n	8022d7c <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8022d6a:	4b07      	ldr	r3, [pc, #28]	; (8022d88 <pbuf_alloc+0x1d0>)
 8022d6c:	f240 1227 	movw	r2, #295	; 0x127
 8022d70:	490a      	ldr	r1, [pc, #40]	; (8022d9c <pbuf_alloc+0x1e4>)
 8022d72:	4807      	ldr	r0, [pc, #28]	; (8022d90 <pbuf_alloc+0x1d8>)
 8022d74:	f003 ff3a 	bl	8026bec <iprintf>
      return NULL;
 8022d78:	2300      	movs	r3, #0
 8022d7a:	e001      	b.n	8022d80 <pbuf_alloc+0x1c8>
      break;
 8022d7c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8022d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8022d80:	4618      	mov	r0, r3
 8022d82:	3728      	adds	r7, #40	; 0x28
 8022d84:	46bd      	mov	sp, r7
 8022d86:	bd80      	pop	{r7, pc}
 8022d88:	0802cc28 	.word	0x0802cc28
 8022d8c:	0802cc58 	.word	0x0802cc58
 8022d90:	0802cc88 	.word	0x0802cc88
 8022d94:	0802ccb0 	.word	0x0802ccb0
 8022d98:	0802cce4 	.word	0x0802cce4
 8022d9c:	0802cd10 	.word	0x0802cd10

08022da0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8022da0:	b580      	push	{r7, lr}
 8022da2:	b086      	sub	sp, #24
 8022da4:	af02      	add	r7, sp, #8
 8022da6:	6078      	str	r0, [r7, #4]
 8022da8:	460b      	mov	r3, r1
 8022daa:	807b      	strh	r3, [r7, #2]
 8022dac:	4613      	mov	r3, r2
 8022dae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8022db0:	883b      	ldrh	r3, [r7, #0]
 8022db2:	2b41      	cmp	r3, #65	; 0x41
 8022db4:	d009      	beq.n	8022dca <pbuf_alloc_reference+0x2a>
 8022db6:	883b      	ldrh	r3, [r7, #0]
 8022db8:	2b01      	cmp	r3, #1
 8022dba:	d006      	beq.n	8022dca <pbuf_alloc_reference+0x2a>
 8022dbc:	4b0f      	ldr	r3, [pc, #60]	; (8022dfc <pbuf_alloc_reference+0x5c>)
 8022dbe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8022dc2:	490f      	ldr	r1, [pc, #60]	; (8022e00 <pbuf_alloc_reference+0x60>)
 8022dc4:	480f      	ldr	r0, [pc, #60]	; (8022e04 <pbuf_alloc_reference+0x64>)
 8022dc6:	f003 ff11 	bl	8026bec <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8022dca:	2004      	movs	r0, #4
 8022dcc:	f7ff fa56 	bl	802227c <memp_malloc>
 8022dd0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8022dd2:	68fb      	ldr	r3, [r7, #12]
 8022dd4:	2b00      	cmp	r3, #0
 8022dd6:	d101      	bne.n	8022ddc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8022dd8:	2300      	movs	r3, #0
 8022dda:	e00b      	b.n	8022df4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8022ddc:	8879      	ldrh	r1, [r7, #2]
 8022dde:	887a      	ldrh	r2, [r7, #2]
 8022de0:	2300      	movs	r3, #0
 8022de2:	9301      	str	r3, [sp, #4]
 8022de4:	883b      	ldrh	r3, [r7, #0]
 8022de6:	9300      	str	r3, [sp, #0]
 8022de8:	460b      	mov	r3, r1
 8022dea:	6879      	ldr	r1, [r7, #4]
 8022dec:	68f8      	ldr	r0, [r7, #12]
 8022dee:	f7ff feb9 	bl	8022b64 <pbuf_init_alloced_pbuf>
  return p;
 8022df2:	68fb      	ldr	r3, [r7, #12]
}
 8022df4:	4618      	mov	r0, r3
 8022df6:	3710      	adds	r7, #16
 8022df8:	46bd      	mov	sp, r7
 8022dfa:	bd80      	pop	{r7, pc}
 8022dfc:	0802cc28 	.word	0x0802cc28
 8022e00:	0802cd2c 	.word	0x0802cd2c
 8022e04:	0802cc88 	.word	0x0802cc88

08022e08 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8022e08:	b580      	push	{r7, lr}
 8022e0a:	b088      	sub	sp, #32
 8022e0c:	af02      	add	r7, sp, #8
 8022e0e:	607b      	str	r3, [r7, #4]
 8022e10:	4603      	mov	r3, r0
 8022e12:	73fb      	strb	r3, [r7, #15]
 8022e14:	460b      	mov	r3, r1
 8022e16:	81bb      	strh	r3, [r7, #12]
 8022e18:	4613      	mov	r3, r2
 8022e1a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8022e1c:	7bfb      	ldrb	r3, [r7, #15]
 8022e1e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8022e20:	8a7b      	ldrh	r3, [r7, #18]
 8022e22:	3303      	adds	r3, #3
 8022e24:	f023 0203 	bic.w	r2, r3, #3
 8022e28:	89bb      	ldrh	r3, [r7, #12]
 8022e2a:	441a      	add	r2, r3
 8022e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022e2e:	429a      	cmp	r2, r3
 8022e30:	d901      	bls.n	8022e36 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8022e32:	2300      	movs	r3, #0
 8022e34:	e018      	b.n	8022e68 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8022e36:	6a3b      	ldr	r3, [r7, #32]
 8022e38:	2b00      	cmp	r3, #0
 8022e3a:	d007      	beq.n	8022e4c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8022e3c:	8a7b      	ldrh	r3, [r7, #18]
 8022e3e:	3303      	adds	r3, #3
 8022e40:	f023 0303 	bic.w	r3, r3, #3
 8022e44:	6a3a      	ldr	r2, [r7, #32]
 8022e46:	4413      	add	r3, r2
 8022e48:	617b      	str	r3, [r7, #20]
 8022e4a:	e001      	b.n	8022e50 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8022e4c:	2300      	movs	r3, #0
 8022e4e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8022e50:	6878      	ldr	r0, [r7, #4]
 8022e52:	89b9      	ldrh	r1, [r7, #12]
 8022e54:	89ba      	ldrh	r2, [r7, #12]
 8022e56:	2302      	movs	r3, #2
 8022e58:	9301      	str	r3, [sp, #4]
 8022e5a:	897b      	ldrh	r3, [r7, #10]
 8022e5c:	9300      	str	r3, [sp, #0]
 8022e5e:	460b      	mov	r3, r1
 8022e60:	6979      	ldr	r1, [r7, #20]
 8022e62:	f7ff fe7f 	bl	8022b64 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8022e66:	687b      	ldr	r3, [r7, #4]
}
 8022e68:	4618      	mov	r0, r3
 8022e6a:	3718      	adds	r7, #24
 8022e6c:	46bd      	mov	sp, r7
 8022e6e:	bd80      	pop	{r7, pc}

08022e70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8022e70:	b580      	push	{r7, lr}
 8022e72:	b084      	sub	sp, #16
 8022e74:	af00      	add	r7, sp, #0
 8022e76:	6078      	str	r0, [r7, #4]
 8022e78:	460b      	mov	r3, r1
 8022e7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8022e7c:	687b      	ldr	r3, [r7, #4]
 8022e7e:	2b00      	cmp	r3, #0
 8022e80:	d106      	bne.n	8022e90 <pbuf_realloc+0x20>
 8022e82:	4b3a      	ldr	r3, [pc, #232]	; (8022f6c <pbuf_realloc+0xfc>)
 8022e84:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8022e88:	4939      	ldr	r1, [pc, #228]	; (8022f70 <pbuf_realloc+0x100>)
 8022e8a:	483a      	ldr	r0, [pc, #232]	; (8022f74 <pbuf_realloc+0x104>)
 8022e8c:	f003 feae 	bl	8026bec <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8022e90:	687b      	ldr	r3, [r7, #4]
 8022e92:	891b      	ldrh	r3, [r3, #8]
 8022e94:	887a      	ldrh	r2, [r7, #2]
 8022e96:	429a      	cmp	r2, r3
 8022e98:	d263      	bcs.n	8022f62 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8022e9a:	687b      	ldr	r3, [r7, #4]
 8022e9c:	891a      	ldrh	r2, [r3, #8]
 8022e9e:	887b      	ldrh	r3, [r7, #2]
 8022ea0:	1ad3      	subs	r3, r2, r3
 8022ea2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8022ea4:	887b      	ldrh	r3, [r7, #2]
 8022ea6:	817b      	strh	r3, [r7, #10]
  q = p;
 8022ea8:	687b      	ldr	r3, [r7, #4]
 8022eaa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8022eac:	e018      	b.n	8022ee0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8022eae:	68fb      	ldr	r3, [r7, #12]
 8022eb0:	895b      	ldrh	r3, [r3, #10]
 8022eb2:	897a      	ldrh	r2, [r7, #10]
 8022eb4:	1ad3      	subs	r3, r2, r3
 8022eb6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8022eb8:	68fb      	ldr	r3, [r7, #12]
 8022eba:	891a      	ldrh	r2, [r3, #8]
 8022ebc:	893b      	ldrh	r3, [r7, #8]
 8022ebe:	1ad3      	subs	r3, r2, r3
 8022ec0:	b29a      	uxth	r2, r3
 8022ec2:	68fb      	ldr	r3, [r7, #12]
 8022ec4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8022ec6:	68fb      	ldr	r3, [r7, #12]
 8022ec8:	681b      	ldr	r3, [r3, #0]
 8022eca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8022ecc:	68fb      	ldr	r3, [r7, #12]
 8022ece:	2b00      	cmp	r3, #0
 8022ed0:	d106      	bne.n	8022ee0 <pbuf_realloc+0x70>
 8022ed2:	4b26      	ldr	r3, [pc, #152]	; (8022f6c <pbuf_realloc+0xfc>)
 8022ed4:	f240 12af 	movw	r2, #431	; 0x1af
 8022ed8:	4927      	ldr	r1, [pc, #156]	; (8022f78 <pbuf_realloc+0x108>)
 8022eda:	4826      	ldr	r0, [pc, #152]	; (8022f74 <pbuf_realloc+0x104>)
 8022edc:	f003 fe86 	bl	8026bec <iprintf>
  while (rem_len > q->len) {
 8022ee0:	68fb      	ldr	r3, [r7, #12]
 8022ee2:	895b      	ldrh	r3, [r3, #10]
 8022ee4:	897a      	ldrh	r2, [r7, #10]
 8022ee6:	429a      	cmp	r2, r3
 8022ee8:	d8e1      	bhi.n	8022eae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8022eea:	68fb      	ldr	r3, [r7, #12]
 8022eec:	7b1b      	ldrb	r3, [r3, #12]
 8022eee:	f003 030f 	and.w	r3, r3, #15
 8022ef2:	2b00      	cmp	r3, #0
 8022ef4:	d121      	bne.n	8022f3a <pbuf_realloc+0xca>
 8022ef6:	68fb      	ldr	r3, [r7, #12]
 8022ef8:	895b      	ldrh	r3, [r3, #10]
 8022efa:	897a      	ldrh	r2, [r7, #10]
 8022efc:	429a      	cmp	r2, r3
 8022efe:	d01c      	beq.n	8022f3a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8022f00:	68fb      	ldr	r3, [r7, #12]
 8022f02:	7b5b      	ldrb	r3, [r3, #13]
 8022f04:	f003 0302 	and.w	r3, r3, #2
 8022f08:	2b00      	cmp	r3, #0
 8022f0a:	d116      	bne.n	8022f3a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8022f0c:	68fb      	ldr	r3, [r7, #12]
 8022f0e:	685a      	ldr	r2, [r3, #4]
 8022f10:	68fb      	ldr	r3, [r7, #12]
 8022f12:	1ad3      	subs	r3, r2, r3
 8022f14:	b29a      	uxth	r2, r3
 8022f16:	897b      	ldrh	r3, [r7, #10]
 8022f18:	4413      	add	r3, r2
 8022f1a:	b29b      	uxth	r3, r3
 8022f1c:	4619      	mov	r1, r3
 8022f1e:	68f8      	ldr	r0, [r7, #12]
 8022f20:	f7fe ff20 	bl	8021d64 <mem_trim>
 8022f24:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8022f26:	68fb      	ldr	r3, [r7, #12]
 8022f28:	2b00      	cmp	r3, #0
 8022f2a:	d106      	bne.n	8022f3a <pbuf_realloc+0xca>
 8022f2c:	4b0f      	ldr	r3, [pc, #60]	; (8022f6c <pbuf_realloc+0xfc>)
 8022f2e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8022f32:	4912      	ldr	r1, [pc, #72]	; (8022f7c <pbuf_realloc+0x10c>)
 8022f34:	480f      	ldr	r0, [pc, #60]	; (8022f74 <pbuf_realloc+0x104>)
 8022f36:	f003 fe59 	bl	8026bec <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8022f3a:	68fb      	ldr	r3, [r7, #12]
 8022f3c:	897a      	ldrh	r2, [r7, #10]
 8022f3e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8022f40:	68fb      	ldr	r3, [r7, #12]
 8022f42:	895a      	ldrh	r2, [r3, #10]
 8022f44:	68fb      	ldr	r3, [r7, #12]
 8022f46:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8022f48:	68fb      	ldr	r3, [r7, #12]
 8022f4a:	681b      	ldr	r3, [r3, #0]
 8022f4c:	2b00      	cmp	r3, #0
 8022f4e:	d004      	beq.n	8022f5a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8022f50:	68fb      	ldr	r3, [r7, #12]
 8022f52:	681b      	ldr	r3, [r3, #0]
 8022f54:	4618      	mov	r0, r3
 8022f56:	f000 f911 	bl	802317c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8022f5a:	68fb      	ldr	r3, [r7, #12]
 8022f5c:	2200      	movs	r2, #0
 8022f5e:	601a      	str	r2, [r3, #0]
 8022f60:	e000      	b.n	8022f64 <pbuf_realloc+0xf4>
    return;
 8022f62:	bf00      	nop

}
 8022f64:	3710      	adds	r7, #16
 8022f66:	46bd      	mov	sp, r7
 8022f68:	bd80      	pop	{r7, pc}
 8022f6a:	bf00      	nop
 8022f6c:	0802cc28 	.word	0x0802cc28
 8022f70:	0802cd40 	.word	0x0802cd40
 8022f74:	0802cc88 	.word	0x0802cc88
 8022f78:	0802cd58 	.word	0x0802cd58
 8022f7c:	0802cd70 	.word	0x0802cd70

08022f80 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8022f80:	b580      	push	{r7, lr}
 8022f82:	b086      	sub	sp, #24
 8022f84:	af00      	add	r7, sp, #0
 8022f86:	60f8      	str	r0, [r7, #12]
 8022f88:	60b9      	str	r1, [r7, #8]
 8022f8a:	4613      	mov	r3, r2
 8022f8c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8022f8e:	68fb      	ldr	r3, [r7, #12]
 8022f90:	2b00      	cmp	r3, #0
 8022f92:	d106      	bne.n	8022fa2 <pbuf_add_header_impl+0x22>
 8022f94:	4b2b      	ldr	r3, [pc, #172]	; (8023044 <pbuf_add_header_impl+0xc4>)
 8022f96:	f240 12df 	movw	r2, #479	; 0x1df
 8022f9a:	492b      	ldr	r1, [pc, #172]	; (8023048 <pbuf_add_header_impl+0xc8>)
 8022f9c:	482b      	ldr	r0, [pc, #172]	; (802304c <pbuf_add_header_impl+0xcc>)
 8022f9e:	f003 fe25 	bl	8026bec <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8022fa2:	68fb      	ldr	r3, [r7, #12]
 8022fa4:	2b00      	cmp	r3, #0
 8022fa6:	d003      	beq.n	8022fb0 <pbuf_add_header_impl+0x30>
 8022fa8:	68bb      	ldr	r3, [r7, #8]
 8022faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022fae:	d301      	bcc.n	8022fb4 <pbuf_add_header_impl+0x34>
    return 1;
 8022fb0:	2301      	movs	r3, #1
 8022fb2:	e043      	b.n	802303c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8022fb4:	68bb      	ldr	r3, [r7, #8]
 8022fb6:	2b00      	cmp	r3, #0
 8022fb8:	d101      	bne.n	8022fbe <pbuf_add_header_impl+0x3e>
    return 0;
 8022fba:	2300      	movs	r3, #0
 8022fbc:	e03e      	b.n	802303c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8022fbe:	68bb      	ldr	r3, [r7, #8]
 8022fc0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8022fc2:	68fb      	ldr	r3, [r7, #12]
 8022fc4:	891a      	ldrh	r2, [r3, #8]
 8022fc6:	8a7b      	ldrh	r3, [r7, #18]
 8022fc8:	4413      	add	r3, r2
 8022fca:	b29b      	uxth	r3, r3
 8022fcc:	8a7a      	ldrh	r2, [r7, #18]
 8022fce:	429a      	cmp	r2, r3
 8022fd0:	d901      	bls.n	8022fd6 <pbuf_add_header_impl+0x56>
    return 1;
 8022fd2:	2301      	movs	r3, #1
 8022fd4:	e032      	b.n	802303c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8022fd6:	68fb      	ldr	r3, [r7, #12]
 8022fd8:	7b1b      	ldrb	r3, [r3, #12]
 8022fda:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8022fdc:	8a3b      	ldrh	r3, [r7, #16]
 8022fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022fe2:	2b00      	cmp	r3, #0
 8022fe4:	d00c      	beq.n	8023000 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8022fe6:	68fb      	ldr	r3, [r7, #12]
 8022fe8:	685a      	ldr	r2, [r3, #4]
 8022fea:	68bb      	ldr	r3, [r7, #8]
 8022fec:	425b      	negs	r3, r3
 8022fee:	4413      	add	r3, r2
 8022ff0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8022ff2:	68fb      	ldr	r3, [r7, #12]
 8022ff4:	3310      	adds	r3, #16
 8022ff6:	697a      	ldr	r2, [r7, #20]
 8022ff8:	429a      	cmp	r2, r3
 8022ffa:	d20d      	bcs.n	8023018 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8022ffc:	2301      	movs	r3, #1
 8022ffe:	e01d      	b.n	802303c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8023000:	79fb      	ldrb	r3, [r7, #7]
 8023002:	2b00      	cmp	r3, #0
 8023004:	d006      	beq.n	8023014 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8023006:	68fb      	ldr	r3, [r7, #12]
 8023008:	685a      	ldr	r2, [r3, #4]
 802300a:	68bb      	ldr	r3, [r7, #8]
 802300c:	425b      	negs	r3, r3
 802300e:	4413      	add	r3, r2
 8023010:	617b      	str	r3, [r7, #20]
 8023012:	e001      	b.n	8023018 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8023014:	2301      	movs	r3, #1
 8023016:	e011      	b.n	802303c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8023018:	68fb      	ldr	r3, [r7, #12]
 802301a:	697a      	ldr	r2, [r7, #20]
 802301c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 802301e:	68fb      	ldr	r3, [r7, #12]
 8023020:	895a      	ldrh	r2, [r3, #10]
 8023022:	8a7b      	ldrh	r3, [r7, #18]
 8023024:	4413      	add	r3, r2
 8023026:	b29a      	uxth	r2, r3
 8023028:	68fb      	ldr	r3, [r7, #12]
 802302a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 802302c:	68fb      	ldr	r3, [r7, #12]
 802302e:	891a      	ldrh	r2, [r3, #8]
 8023030:	8a7b      	ldrh	r3, [r7, #18]
 8023032:	4413      	add	r3, r2
 8023034:	b29a      	uxth	r2, r3
 8023036:	68fb      	ldr	r3, [r7, #12]
 8023038:	811a      	strh	r2, [r3, #8]


  return 0;
 802303a:	2300      	movs	r3, #0
}
 802303c:	4618      	mov	r0, r3
 802303e:	3718      	adds	r7, #24
 8023040:	46bd      	mov	sp, r7
 8023042:	bd80      	pop	{r7, pc}
 8023044:	0802cc28 	.word	0x0802cc28
 8023048:	0802cd8c 	.word	0x0802cd8c
 802304c:	0802cc88 	.word	0x0802cc88

08023050 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8023050:	b580      	push	{r7, lr}
 8023052:	b082      	sub	sp, #8
 8023054:	af00      	add	r7, sp, #0
 8023056:	6078      	str	r0, [r7, #4]
 8023058:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 802305a:	2200      	movs	r2, #0
 802305c:	6839      	ldr	r1, [r7, #0]
 802305e:	6878      	ldr	r0, [r7, #4]
 8023060:	f7ff ff8e 	bl	8022f80 <pbuf_add_header_impl>
 8023064:	4603      	mov	r3, r0
}
 8023066:	4618      	mov	r0, r3
 8023068:	3708      	adds	r7, #8
 802306a:	46bd      	mov	sp, r7
 802306c:	bd80      	pop	{r7, pc}
	...

08023070 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8023070:	b580      	push	{r7, lr}
 8023072:	b084      	sub	sp, #16
 8023074:	af00      	add	r7, sp, #0
 8023076:	6078      	str	r0, [r7, #4]
 8023078:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 802307a:	687b      	ldr	r3, [r7, #4]
 802307c:	2b00      	cmp	r3, #0
 802307e:	d106      	bne.n	802308e <pbuf_remove_header+0x1e>
 8023080:	4b20      	ldr	r3, [pc, #128]	; (8023104 <pbuf_remove_header+0x94>)
 8023082:	f240 224b 	movw	r2, #587	; 0x24b
 8023086:	4920      	ldr	r1, [pc, #128]	; (8023108 <pbuf_remove_header+0x98>)
 8023088:	4820      	ldr	r0, [pc, #128]	; (802310c <pbuf_remove_header+0x9c>)
 802308a:	f003 fdaf 	bl	8026bec <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 802308e:	687b      	ldr	r3, [r7, #4]
 8023090:	2b00      	cmp	r3, #0
 8023092:	d003      	beq.n	802309c <pbuf_remove_header+0x2c>
 8023094:	683b      	ldr	r3, [r7, #0]
 8023096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802309a:	d301      	bcc.n	80230a0 <pbuf_remove_header+0x30>
    return 1;
 802309c:	2301      	movs	r3, #1
 802309e:	e02c      	b.n	80230fa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80230a0:	683b      	ldr	r3, [r7, #0]
 80230a2:	2b00      	cmp	r3, #0
 80230a4:	d101      	bne.n	80230aa <pbuf_remove_header+0x3a>
    return 0;
 80230a6:	2300      	movs	r3, #0
 80230a8:	e027      	b.n	80230fa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80230aa:	683b      	ldr	r3, [r7, #0]
 80230ac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80230ae:	687b      	ldr	r3, [r7, #4]
 80230b0:	895b      	ldrh	r3, [r3, #10]
 80230b2:	89fa      	ldrh	r2, [r7, #14]
 80230b4:	429a      	cmp	r2, r3
 80230b6:	d908      	bls.n	80230ca <pbuf_remove_header+0x5a>
 80230b8:	4b12      	ldr	r3, [pc, #72]	; (8023104 <pbuf_remove_header+0x94>)
 80230ba:	f240 2255 	movw	r2, #597	; 0x255
 80230be:	4914      	ldr	r1, [pc, #80]	; (8023110 <pbuf_remove_header+0xa0>)
 80230c0:	4812      	ldr	r0, [pc, #72]	; (802310c <pbuf_remove_header+0x9c>)
 80230c2:	f003 fd93 	bl	8026bec <iprintf>
 80230c6:	2301      	movs	r3, #1
 80230c8:	e017      	b.n	80230fa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80230ca:	687b      	ldr	r3, [r7, #4]
 80230cc:	685b      	ldr	r3, [r3, #4]
 80230ce:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80230d0:	687b      	ldr	r3, [r7, #4]
 80230d2:	685a      	ldr	r2, [r3, #4]
 80230d4:	683b      	ldr	r3, [r7, #0]
 80230d6:	441a      	add	r2, r3
 80230d8:	687b      	ldr	r3, [r7, #4]
 80230da:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80230dc:	687b      	ldr	r3, [r7, #4]
 80230de:	895a      	ldrh	r2, [r3, #10]
 80230e0:	89fb      	ldrh	r3, [r7, #14]
 80230e2:	1ad3      	subs	r3, r2, r3
 80230e4:	b29a      	uxth	r2, r3
 80230e6:	687b      	ldr	r3, [r7, #4]
 80230e8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80230ea:	687b      	ldr	r3, [r7, #4]
 80230ec:	891a      	ldrh	r2, [r3, #8]
 80230ee:	89fb      	ldrh	r3, [r7, #14]
 80230f0:	1ad3      	subs	r3, r2, r3
 80230f2:	b29a      	uxth	r2, r3
 80230f4:	687b      	ldr	r3, [r7, #4]
 80230f6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80230f8:	2300      	movs	r3, #0
}
 80230fa:	4618      	mov	r0, r3
 80230fc:	3710      	adds	r7, #16
 80230fe:	46bd      	mov	sp, r7
 8023100:	bd80      	pop	{r7, pc}
 8023102:	bf00      	nop
 8023104:	0802cc28 	.word	0x0802cc28
 8023108:	0802cd8c 	.word	0x0802cd8c
 802310c:	0802cc88 	.word	0x0802cc88
 8023110:	0802cd98 	.word	0x0802cd98

08023114 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8023114:	b580      	push	{r7, lr}
 8023116:	b082      	sub	sp, #8
 8023118:	af00      	add	r7, sp, #0
 802311a:	6078      	str	r0, [r7, #4]
 802311c:	460b      	mov	r3, r1
 802311e:	807b      	strh	r3, [r7, #2]
 8023120:	4613      	mov	r3, r2
 8023122:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8023124:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8023128:	2b00      	cmp	r3, #0
 802312a:	da08      	bge.n	802313e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 802312c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8023130:	425b      	negs	r3, r3
 8023132:	4619      	mov	r1, r3
 8023134:	6878      	ldr	r0, [r7, #4]
 8023136:	f7ff ff9b 	bl	8023070 <pbuf_remove_header>
 802313a:	4603      	mov	r3, r0
 802313c:	e007      	b.n	802314e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 802313e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8023142:	787a      	ldrb	r2, [r7, #1]
 8023144:	4619      	mov	r1, r3
 8023146:	6878      	ldr	r0, [r7, #4]
 8023148:	f7ff ff1a 	bl	8022f80 <pbuf_add_header_impl>
 802314c:	4603      	mov	r3, r0
  }
}
 802314e:	4618      	mov	r0, r3
 8023150:	3708      	adds	r7, #8
 8023152:	46bd      	mov	sp, r7
 8023154:	bd80      	pop	{r7, pc}

08023156 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8023156:	b580      	push	{r7, lr}
 8023158:	b082      	sub	sp, #8
 802315a:	af00      	add	r7, sp, #0
 802315c:	6078      	str	r0, [r7, #4]
 802315e:	460b      	mov	r3, r1
 8023160:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8023162:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8023166:	2201      	movs	r2, #1
 8023168:	4619      	mov	r1, r3
 802316a:	6878      	ldr	r0, [r7, #4]
 802316c:	f7ff ffd2 	bl	8023114 <pbuf_header_impl>
 8023170:	4603      	mov	r3, r0
}
 8023172:	4618      	mov	r0, r3
 8023174:	3708      	adds	r7, #8
 8023176:	46bd      	mov	sp, r7
 8023178:	bd80      	pop	{r7, pc}
	...

0802317c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 802317c:	b580      	push	{r7, lr}
 802317e:	b086      	sub	sp, #24
 8023180:	af00      	add	r7, sp, #0
 8023182:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8023184:	687b      	ldr	r3, [r7, #4]
 8023186:	2b00      	cmp	r3, #0
 8023188:	d10b      	bne.n	80231a2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 802318a:	687b      	ldr	r3, [r7, #4]
 802318c:	2b00      	cmp	r3, #0
 802318e:	d106      	bne.n	802319e <pbuf_free+0x22>
 8023190:	4b38      	ldr	r3, [pc, #224]	; (8023274 <pbuf_free+0xf8>)
 8023192:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8023196:	4938      	ldr	r1, [pc, #224]	; (8023278 <pbuf_free+0xfc>)
 8023198:	4838      	ldr	r0, [pc, #224]	; (802327c <pbuf_free+0x100>)
 802319a:	f003 fd27 	bl	8026bec <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 802319e:	2300      	movs	r3, #0
 80231a0:	e063      	b.n	802326a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80231a2:	2300      	movs	r3, #0
 80231a4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80231a6:	e05c      	b.n	8023262 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80231a8:	687b      	ldr	r3, [r7, #4]
 80231aa:	7b9b      	ldrb	r3, [r3, #14]
 80231ac:	2b00      	cmp	r3, #0
 80231ae:	d106      	bne.n	80231be <pbuf_free+0x42>
 80231b0:	4b30      	ldr	r3, [pc, #192]	; (8023274 <pbuf_free+0xf8>)
 80231b2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80231b6:	4932      	ldr	r1, [pc, #200]	; (8023280 <pbuf_free+0x104>)
 80231b8:	4830      	ldr	r0, [pc, #192]	; (802327c <pbuf_free+0x100>)
 80231ba:	f003 fd17 	bl	8026bec <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80231be:	687b      	ldr	r3, [r7, #4]
 80231c0:	7b9b      	ldrb	r3, [r3, #14]
 80231c2:	3b01      	subs	r3, #1
 80231c4:	b2da      	uxtb	r2, r3
 80231c6:	687b      	ldr	r3, [r7, #4]
 80231c8:	739a      	strb	r2, [r3, #14]
 80231ca:	687b      	ldr	r3, [r7, #4]
 80231cc:	7b9b      	ldrb	r3, [r3, #14]
 80231ce:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80231d0:	7dbb      	ldrb	r3, [r7, #22]
 80231d2:	2b00      	cmp	r3, #0
 80231d4:	d143      	bne.n	802325e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80231d6:	687b      	ldr	r3, [r7, #4]
 80231d8:	681b      	ldr	r3, [r3, #0]
 80231da:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80231dc:	687b      	ldr	r3, [r7, #4]
 80231de:	7b1b      	ldrb	r3, [r3, #12]
 80231e0:	f003 030f 	and.w	r3, r3, #15
 80231e4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80231e6:	687b      	ldr	r3, [r7, #4]
 80231e8:	7b5b      	ldrb	r3, [r3, #13]
 80231ea:	f003 0302 	and.w	r3, r3, #2
 80231ee:	2b00      	cmp	r3, #0
 80231f0:	d011      	beq.n	8023216 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80231f2:	687b      	ldr	r3, [r7, #4]
 80231f4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80231f6:	68bb      	ldr	r3, [r7, #8]
 80231f8:	691b      	ldr	r3, [r3, #16]
 80231fa:	2b00      	cmp	r3, #0
 80231fc:	d106      	bne.n	802320c <pbuf_free+0x90>
 80231fe:	4b1d      	ldr	r3, [pc, #116]	; (8023274 <pbuf_free+0xf8>)
 8023200:	f240 22ff 	movw	r2, #767	; 0x2ff
 8023204:	491f      	ldr	r1, [pc, #124]	; (8023284 <pbuf_free+0x108>)
 8023206:	481d      	ldr	r0, [pc, #116]	; (802327c <pbuf_free+0x100>)
 8023208:	f003 fcf0 	bl	8026bec <iprintf>
        pc->custom_free_function(p);
 802320c:	68bb      	ldr	r3, [r7, #8]
 802320e:	691b      	ldr	r3, [r3, #16]
 8023210:	6878      	ldr	r0, [r7, #4]
 8023212:	4798      	blx	r3
 8023214:	e01d      	b.n	8023252 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8023216:	7bfb      	ldrb	r3, [r7, #15]
 8023218:	2b02      	cmp	r3, #2
 802321a:	d104      	bne.n	8023226 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 802321c:	6879      	ldr	r1, [r7, #4]
 802321e:	2005      	movs	r0, #5
 8023220:	f7ff f89c 	bl	802235c <memp_free>
 8023224:	e015      	b.n	8023252 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8023226:	7bfb      	ldrb	r3, [r7, #15]
 8023228:	2b01      	cmp	r3, #1
 802322a:	d104      	bne.n	8023236 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 802322c:	6879      	ldr	r1, [r7, #4]
 802322e:	2004      	movs	r0, #4
 8023230:	f7ff f894 	bl	802235c <memp_free>
 8023234:	e00d      	b.n	8023252 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8023236:	7bfb      	ldrb	r3, [r7, #15]
 8023238:	2b00      	cmp	r3, #0
 802323a:	d103      	bne.n	8023244 <pbuf_free+0xc8>
          mem_free(p);
 802323c:	6878      	ldr	r0, [r7, #4]
 802323e:	f7fe fd27 	bl	8021c90 <mem_free>
 8023242:	e006      	b.n	8023252 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8023244:	4b0b      	ldr	r3, [pc, #44]	; (8023274 <pbuf_free+0xf8>)
 8023246:	f240 320f 	movw	r2, #783	; 0x30f
 802324a:	490f      	ldr	r1, [pc, #60]	; (8023288 <pbuf_free+0x10c>)
 802324c:	480b      	ldr	r0, [pc, #44]	; (802327c <pbuf_free+0x100>)
 802324e:	f003 fccd 	bl	8026bec <iprintf>
        }
      }
      count++;
 8023252:	7dfb      	ldrb	r3, [r7, #23]
 8023254:	3301      	adds	r3, #1
 8023256:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8023258:	693b      	ldr	r3, [r7, #16]
 802325a:	607b      	str	r3, [r7, #4]
 802325c:	e001      	b.n	8023262 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 802325e:	2300      	movs	r3, #0
 8023260:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8023262:	687b      	ldr	r3, [r7, #4]
 8023264:	2b00      	cmp	r3, #0
 8023266:	d19f      	bne.n	80231a8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8023268:	7dfb      	ldrb	r3, [r7, #23]
}
 802326a:	4618      	mov	r0, r3
 802326c:	3718      	adds	r7, #24
 802326e:	46bd      	mov	sp, r7
 8023270:	bd80      	pop	{r7, pc}
 8023272:	bf00      	nop
 8023274:	0802cc28 	.word	0x0802cc28
 8023278:	0802cd8c 	.word	0x0802cd8c
 802327c:	0802cc88 	.word	0x0802cc88
 8023280:	0802cdb8 	.word	0x0802cdb8
 8023284:	0802cdd0 	.word	0x0802cdd0
 8023288:	0802cdf4 	.word	0x0802cdf4

0802328c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 802328c:	b480      	push	{r7}
 802328e:	b085      	sub	sp, #20
 8023290:	af00      	add	r7, sp, #0
 8023292:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8023294:	2300      	movs	r3, #0
 8023296:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8023298:	e005      	b.n	80232a6 <pbuf_clen+0x1a>
    ++len;
 802329a:	89fb      	ldrh	r3, [r7, #14]
 802329c:	3301      	adds	r3, #1
 802329e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80232a0:	687b      	ldr	r3, [r7, #4]
 80232a2:	681b      	ldr	r3, [r3, #0]
 80232a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80232a6:	687b      	ldr	r3, [r7, #4]
 80232a8:	2b00      	cmp	r3, #0
 80232aa:	d1f6      	bne.n	802329a <pbuf_clen+0xe>
  }
  return len;
 80232ac:	89fb      	ldrh	r3, [r7, #14]
}
 80232ae:	4618      	mov	r0, r3
 80232b0:	3714      	adds	r7, #20
 80232b2:	46bd      	mov	sp, r7
 80232b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232b8:	4770      	bx	lr
	...

080232bc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80232bc:	b580      	push	{r7, lr}
 80232be:	b082      	sub	sp, #8
 80232c0:	af00      	add	r7, sp, #0
 80232c2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80232c4:	687b      	ldr	r3, [r7, #4]
 80232c6:	2b00      	cmp	r3, #0
 80232c8:	d010      	beq.n	80232ec <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80232ca:	687b      	ldr	r3, [r7, #4]
 80232cc:	7b9b      	ldrb	r3, [r3, #14]
 80232ce:	3301      	adds	r3, #1
 80232d0:	b2da      	uxtb	r2, r3
 80232d2:	687b      	ldr	r3, [r7, #4]
 80232d4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80232d6:	687b      	ldr	r3, [r7, #4]
 80232d8:	7b9b      	ldrb	r3, [r3, #14]
 80232da:	2b00      	cmp	r3, #0
 80232dc:	d106      	bne.n	80232ec <pbuf_ref+0x30>
 80232de:	4b05      	ldr	r3, [pc, #20]	; (80232f4 <pbuf_ref+0x38>)
 80232e0:	f240 3242 	movw	r2, #834	; 0x342
 80232e4:	4904      	ldr	r1, [pc, #16]	; (80232f8 <pbuf_ref+0x3c>)
 80232e6:	4805      	ldr	r0, [pc, #20]	; (80232fc <pbuf_ref+0x40>)
 80232e8:	f003 fc80 	bl	8026bec <iprintf>
  }
}
 80232ec:	bf00      	nop
 80232ee:	3708      	adds	r7, #8
 80232f0:	46bd      	mov	sp, r7
 80232f2:	bd80      	pop	{r7, pc}
 80232f4:	0802cc28 	.word	0x0802cc28
 80232f8:	0802ce08 	.word	0x0802ce08
 80232fc:	0802cc88 	.word	0x0802cc88

08023300 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8023300:	b580      	push	{r7, lr}
 8023302:	b084      	sub	sp, #16
 8023304:	af00      	add	r7, sp, #0
 8023306:	6078      	str	r0, [r7, #4]
 8023308:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 802330a:	687b      	ldr	r3, [r7, #4]
 802330c:	2b00      	cmp	r3, #0
 802330e:	d002      	beq.n	8023316 <pbuf_cat+0x16>
 8023310:	683b      	ldr	r3, [r7, #0]
 8023312:	2b00      	cmp	r3, #0
 8023314:	d107      	bne.n	8023326 <pbuf_cat+0x26>
 8023316:	4b20      	ldr	r3, [pc, #128]	; (8023398 <pbuf_cat+0x98>)
 8023318:	f240 3259 	movw	r2, #857	; 0x359
 802331c:	491f      	ldr	r1, [pc, #124]	; (802339c <pbuf_cat+0x9c>)
 802331e:	4820      	ldr	r0, [pc, #128]	; (80233a0 <pbuf_cat+0xa0>)
 8023320:	f003 fc64 	bl	8026bec <iprintf>
 8023324:	e034      	b.n	8023390 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8023326:	687b      	ldr	r3, [r7, #4]
 8023328:	60fb      	str	r3, [r7, #12]
 802332a:	e00a      	b.n	8023342 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 802332c:	68fb      	ldr	r3, [r7, #12]
 802332e:	891a      	ldrh	r2, [r3, #8]
 8023330:	683b      	ldr	r3, [r7, #0]
 8023332:	891b      	ldrh	r3, [r3, #8]
 8023334:	4413      	add	r3, r2
 8023336:	b29a      	uxth	r2, r3
 8023338:	68fb      	ldr	r3, [r7, #12]
 802333a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 802333c:	68fb      	ldr	r3, [r7, #12]
 802333e:	681b      	ldr	r3, [r3, #0]
 8023340:	60fb      	str	r3, [r7, #12]
 8023342:	68fb      	ldr	r3, [r7, #12]
 8023344:	681b      	ldr	r3, [r3, #0]
 8023346:	2b00      	cmp	r3, #0
 8023348:	d1f0      	bne.n	802332c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 802334a:	68fb      	ldr	r3, [r7, #12]
 802334c:	891a      	ldrh	r2, [r3, #8]
 802334e:	68fb      	ldr	r3, [r7, #12]
 8023350:	895b      	ldrh	r3, [r3, #10]
 8023352:	429a      	cmp	r2, r3
 8023354:	d006      	beq.n	8023364 <pbuf_cat+0x64>
 8023356:	4b10      	ldr	r3, [pc, #64]	; (8023398 <pbuf_cat+0x98>)
 8023358:	f240 3262 	movw	r2, #866	; 0x362
 802335c:	4911      	ldr	r1, [pc, #68]	; (80233a4 <pbuf_cat+0xa4>)
 802335e:	4810      	ldr	r0, [pc, #64]	; (80233a0 <pbuf_cat+0xa0>)
 8023360:	f003 fc44 	bl	8026bec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8023364:	68fb      	ldr	r3, [r7, #12]
 8023366:	681b      	ldr	r3, [r3, #0]
 8023368:	2b00      	cmp	r3, #0
 802336a:	d006      	beq.n	802337a <pbuf_cat+0x7a>
 802336c:	4b0a      	ldr	r3, [pc, #40]	; (8023398 <pbuf_cat+0x98>)
 802336e:	f240 3263 	movw	r2, #867	; 0x363
 8023372:	490d      	ldr	r1, [pc, #52]	; (80233a8 <pbuf_cat+0xa8>)
 8023374:	480a      	ldr	r0, [pc, #40]	; (80233a0 <pbuf_cat+0xa0>)
 8023376:	f003 fc39 	bl	8026bec <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 802337a:	68fb      	ldr	r3, [r7, #12]
 802337c:	891a      	ldrh	r2, [r3, #8]
 802337e:	683b      	ldr	r3, [r7, #0]
 8023380:	891b      	ldrh	r3, [r3, #8]
 8023382:	4413      	add	r3, r2
 8023384:	b29a      	uxth	r2, r3
 8023386:	68fb      	ldr	r3, [r7, #12]
 8023388:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 802338a:	68fb      	ldr	r3, [r7, #12]
 802338c:	683a      	ldr	r2, [r7, #0]
 802338e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8023390:	3710      	adds	r7, #16
 8023392:	46bd      	mov	sp, r7
 8023394:	bd80      	pop	{r7, pc}
 8023396:	bf00      	nop
 8023398:	0802cc28 	.word	0x0802cc28
 802339c:	0802ce1c 	.word	0x0802ce1c
 80233a0:	0802cc88 	.word	0x0802cc88
 80233a4:	0802ce54 	.word	0x0802ce54
 80233a8:	0802ce84 	.word	0x0802ce84

080233ac <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80233ac:	b580      	push	{r7, lr}
 80233ae:	b082      	sub	sp, #8
 80233b0:	af00      	add	r7, sp, #0
 80233b2:	6078      	str	r0, [r7, #4]
 80233b4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80233b6:	6839      	ldr	r1, [r7, #0]
 80233b8:	6878      	ldr	r0, [r7, #4]
 80233ba:	f7ff ffa1 	bl	8023300 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80233be:	6838      	ldr	r0, [r7, #0]
 80233c0:	f7ff ff7c 	bl	80232bc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80233c4:	bf00      	nop
 80233c6:	3708      	adds	r7, #8
 80233c8:	46bd      	mov	sp, r7
 80233ca:	bd80      	pop	{r7, pc}

080233cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80233cc:	b580      	push	{r7, lr}
 80233ce:	b086      	sub	sp, #24
 80233d0:	af00      	add	r7, sp, #0
 80233d2:	6078      	str	r0, [r7, #4]
 80233d4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80233d6:	2300      	movs	r3, #0
 80233d8:	617b      	str	r3, [r7, #20]
 80233da:	2300      	movs	r3, #0
 80233dc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80233de:	687b      	ldr	r3, [r7, #4]
 80233e0:	2b00      	cmp	r3, #0
 80233e2:	d008      	beq.n	80233f6 <pbuf_copy+0x2a>
 80233e4:	683b      	ldr	r3, [r7, #0]
 80233e6:	2b00      	cmp	r3, #0
 80233e8:	d005      	beq.n	80233f6 <pbuf_copy+0x2a>
 80233ea:	687b      	ldr	r3, [r7, #4]
 80233ec:	891a      	ldrh	r2, [r3, #8]
 80233ee:	683b      	ldr	r3, [r7, #0]
 80233f0:	891b      	ldrh	r3, [r3, #8]
 80233f2:	429a      	cmp	r2, r3
 80233f4:	d209      	bcs.n	802340a <pbuf_copy+0x3e>
 80233f6:	4b57      	ldr	r3, [pc, #348]	; (8023554 <pbuf_copy+0x188>)
 80233f8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80233fc:	4956      	ldr	r1, [pc, #344]	; (8023558 <pbuf_copy+0x18c>)
 80233fe:	4857      	ldr	r0, [pc, #348]	; (802355c <pbuf_copy+0x190>)
 8023400:	f003 fbf4 	bl	8026bec <iprintf>
 8023404:	f06f 030f 	mvn.w	r3, #15
 8023408:	e09f      	b.n	802354a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 802340a:	687b      	ldr	r3, [r7, #4]
 802340c:	895b      	ldrh	r3, [r3, #10]
 802340e:	461a      	mov	r2, r3
 8023410:	697b      	ldr	r3, [r7, #20]
 8023412:	1ad2      	subs	r2, r2, r3
 8023414:	683b      	ldr	r3, [r7, #0]
 8023416:	895b      	ldrh	r3, [r3, #10]
 8023418:	4619      	mov	r1, r3
 802341a:	693b      	ldr	r3, [r7, #16]
 802341c:	1acb      	subs	r3, r1, r3
 802341e:	429a      	cmp	r2, r3
 8023420:	d306      	bcc.n	8023430 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8023422:	683b      	ldr	r3, [r7, #0]
 8023424:	895b      	ldrh	r3, [r3, #10]
 8023426:	461a      	mov	r2, r3
 8023428:	693b      	ldr	r3, [r7, #16]
 802342a:	1ad3      	subs	r3, r2, r3
 802342c:	60fb      	str	r3, [r7, #12]
 802342e:	e005      	b.n	802343c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8023430:	687b      	ldr	r3, [r7, #4]
 8023432:	895b      	ldrh	r3, [r3, #10]
 8023434:	461a      	mov	r2, r3
 8023436:	697b      	ldr	r3, [r7, #20]
 8023438:	1ad3      	subs	r3, r2, r3
 802343a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 802343c:	687b      	ldr	r3, [r7, #4]
 802343e:	685a      	ldr	r2, [r3, #4]
 8023440:	697b      	ldr	r3, [r7, #20]
 8023442:	18d0      	adds	r0, r2, r3
 8023444:	683b      	ldr	r3, [r7, #0]
 8023446:	685a      	ldr	r2, [r3, #4]
 8023448:	693b      	ldr	r3, [r7, #16]
 802344a:	4413      	add	r3, r2
 802344c:	68fa      	ldr	r2, [r7, #12]
 802344e:	4619      	mov	r1, r3
 8023450:	f003 fabc 	bl	80269cc <memcpy>
    offset_to += len;
 8023454:	697a      	ldr	r2, [r7, #20]
 8023456:	68fb      	ldr	r3, [r7, #12]
 8023458:	4413      	add	r3, r2
 802345a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 802345c:	693a      	ldr	r2, [r7, #16]
 802345e:	68fb      	ldr	r3, [r7, #12]
 8023460:	4413      	add	r3, r2
 8023462:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8023464:	687b      	ldr	r3, [r7, #4]
 8023466:	895b      	ldrh	r3, [r3, #10]
 8023468:	461a      	mov	r2, r3
 802346a:	697b      	ldr	r3, [r7, #20]
 802346c:	4293      	cmp	r3, r2
 802346e:	d906      	bls.n	802347e <pbuf_copy+0xb2>
 8023470:	4b38      	ldr	r3, [pc, #224]	; (8023554 <pbuf_copy+0x188>)
 8023472:	f240 32d9 	movw	r2, #985	; 0x3d9
 8023476:	493a      	ldr	r1, [pc, #232]	; (8023560 <pbuf_copy+0x194>)
 8023478:	4838      	ldr	r0, [pc, #224]	; (802355c <pbuf_copy+0x190>)
 802347a:	f003 fbb7 	bl	8026bec <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 802347e:	683b      	ldr	r3, [r7, #0]
 8023480:	895b      	ldrh	r3, [r3, #10]
 8023482:	461a      	mov	r2, r3
 8023484:	693b      	ldr	r3, [r7, #16]
 8023486:	4293      	cmp	r3, r2
 8023488:	d906      	bls.n	8023498 <pbuf_copy+0xcc>
 802348a:	4b32      	ldr	r3, [pc, #200]	; (8023554 <pbuf_copy+0x188>)
 802348c:	f240 32da 	movw	r2, #986	; 0x3da
 8023490:	4934      	ldr	r1, [pc, #208]	; (8023564 <pbuf_copy+0x198>)
 8023492:	4832      	ldr	r0, [pc, #200]	; (802355c <pbuf_copy+0x190>)
 8023494:	f003 fbaa 	bl	8026bec <iprintf>
    if (offset_from >= p_from->len) {
 8023498:	683b      	ldr	r3, [r7, #0]
 802349a:	895b      	ldrh	r3, [r3, #10]
 802349c:	461a      	mov	r2, r3
 802349e:	693b      	ldr	r3, [r7, #16]
 80234a0:	4293      	cmp	r3, r2
 80234a2:	d304      	bcc.n	80234ae <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80234a4:	2300      	movs	r3, #0
 80234a6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80234a8:	683b      	ldr	r3, [r7, #0]
 80234aa:	681b      	ldr	r3, [r3, #0]
 80234ac:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80234ae:	687b      	ldr	r3, [r7, #4]
 80234b0:	895b      	ldrh	r3, [r3, #10]
 80234b2:	461a      	mov	r2, r3
 80234b4:	697b      	ldr	r3, [r7, #20]
 80234b6:	4293      	cmp	r3, r2
 80234b8:	d114      	bne.n	80234e4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80234ba:	2300      	movs	r3, #0
 80234bc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80234be:	687b      	ldr	r3, [r7, #4]
 80234c0:	681b      	ldr	r3, [r3, #0]
 80234c2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80234c4:	687b      	ldr	r3, [r7, #4]
 80234c6:	2b00      	cmp	r3, #0
 80234c8:	d10c      	bne.n	80234e4 <pbuf_copy+0x118>
 80234ca:	683b      	ldr	r3, [r7, #0]
 80234cc:	2b00      	cmp	r3, #0
 80234ce:	d009      	beq.n	80234e4 <pbuf_copy+0x118>
 80234d0:	4b20      	ldr	r3, [pc, #128]	; (8023554 <pbuf_copy+0x188>)
 80234d2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80234d6:	4924      	ldr	r1, [pc, #144]	; (8023568 <pbuf_copy+0x19c>)
 80234d8:	4820      	ldr	r0, [pc, #128]	; (802355c <pbuf_copy+0x190>)
 80234da:	f003 fb87 	bl	8026bec <iprintf>
 80234de:	f06f 030f 	mvn.w	r3, #15
 80234e2:	e032      	b.n	802354a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80234e4:	683b      	ldr	r3, [r7, #0]
 80234e6:	2b00      	cmp	r3, #0
 80234e8:	d013      	beq.n	8023512 <pbuf_copy+0x146>
 80234ea:	683b      	ldr	r3, [r7, #0]
 80234ec:	895a      	ldrh	r2, [r3, #10]
 80234ee:	683b      	ldr	r3, [r7, #0]
 80234f0:	891b      	ldrh	r3, [r3, #8]
 80234f2:	429a      	cmp	r2, r3
 80234f4:	d10d      	bne.n	8023512 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80234f6:	683b      	ldr	r3, [r7, #0]
 80234f8:	681b      	ldr	r3, [r3, #0]
 80234fa:	2b00      	cmp	r3, #0
 80234fc:	d009      	beq.n	8023512 <pbuf_copy+0x146>
 80234fe:	4b15      	ldr	r3, [pc, #84]	; (8023554 <pbuf_copy+0x188>)
 8023500:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8023504:	4919      	ldr	r1, [pc, #100]	; (802356c <pbuf_copy+0x1a0>)
 8023506:	4815      	ldr	r0, [pc, #84]	; (802355c <pbuf_copy+0x190>)
 8023508:	f003 fb70 	bl	8026bec <iprintf>
 802350c:	f06f 0305 	mvn.w	r3, #5
 8023510:	e01b      	b.n	802354a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8023512:	687b      	ldr	r3, [r7, #4]
 8023514:	2b00      	cmp	r3, #0
 8023516:	d013      	beq.n	8023540 <pbuf_copy+0x174>
 8023518:	687b      	ldr	r3, [r7, #4]
 802351a:	895a      	ldrh	r2, [r3, #10]
 802351c:	687b      	ldr	r3, [r7, #4]
 802351e:	891b      	ldrh	r3, [r3, #8]
 8023520:	429a      	cmp	r2, r3
 8023522:	d10d      	bne.n	8023540 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8023524:	687b      	ldr	r3, [r7, #4]
 8023526:	681b      	ldr	r3, [r3, #0]
 8023528:	2b00      	cmp	r3, #0
 802352a:	d009      	beq.n	8023540 <pbuf_copy+0x174>
 802352c:	4b09      	ldr	r3, [pc, #36]	; (8023554 <pbuf_copy+0x188>)
 802352e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8023532:	490e      	ldr	r1, [pc, #56]	; (802356c <pbuf_copy+0x1a0>)
 8023534:	4809      	ldr	r0, [pc, #36]	; (802355c <pbuf_copy+0x190>)
 8023536:	f003 fb59 	bl	8026bec <iprintf>
 802353a:	f06f 0305 	mvn.w	r3, #5
 802353e:	e004      	b.n	802354a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8023540:	683b      	ldr	r3, [r7, #0]
 8023542:	2b00      	cmp	r3, #0
 8023544:	f47f af61 	bne.w	802340a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8023548:	2300      	movs	r3, #0
}
 802354a:	4618      	mov	r0, r3
 802354c:	3718      	adds	r7, #24
 802354e:	46bd      	mov	sp, r7
 8023550:	bd80      	pop	{r7, pc}
 8023552:	bf00      	nop
 8023554:	0802cc28 	.word	0x0802cc28
 8023558:	0802ced0 	.word	0x0802ced0
 802355c:	0802cc88 	.word	0x0802cc88
 8023560:	0802cf00 	.word	0x0802cf00
 8023564:	0802cf18 	.word	0x0802cf18
 8023568:	0802cf34 	.word	0x0802cf34
 802356c:	0802cf44 	.word	0x0802cf44

08023570 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8023570:	b580      	push	{r7, lr}
 8023572:	b088      	sub	sp, #32
 8023574:	af00      	add	r7, sp, #0
 8023576:	60f8      	str	r0, [r7, #12]
 8023578:	60b9      	str	r1, [r7, #8]
 802357a:	4613      	mov	r3, r2
 802357c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 802357e:	88fb      	ldrh	r3, [r7, #6]
 8023580:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8023582:	2300      	movs	r3, #0
 8023584:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8023586:	68fb      	ldr	r3, [r7, #12]
 8023588:	2b00      	cmp	r3, #0
 802358a:	d109      	bne.n	80235a0 <pbuf_take+0x30>
 802358c:	4b3a      	ldr	r3, [pc, #232]	; (8023678 <pbuf_take+0x108>)
 802358e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8023592:	493a      	ldr	r1, [pc, #232]	; (802367c <pbuf_take+0x10c>)
 8023594:	483a      	ldr	r0, [pc, #232]	; (8023680 <pbuf_take+0x110>)
 8023596:	f003 fb29 	bl	8026bec <iprintf>
 802359a:	f06f 030f 	mvn.w	r3, #15
 802359e:	e067      	b.n	8023670 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80235a0:	68bb      	ldr	r3, [r7, #8]
 80235a2:	2b00      	cmp	r3, #0
 80235a4:	d109      	bne.n	80235ba <pbuf_take+0x4a>
 80235a6:	4b34      	ldr	r3, [pc, #208]	; (8023678 <pbuf_take+0x108>)
 80235a8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80235ac:	4935      	ldr	r1, [pc, #212]	; (8023684 <pbuf_take+0x114>)
 80235ae:	4834      	ldr	r0, [pc, #208]	; (8023680 <pbuf_take+0x110>)
 80235b0:	f003 fb1c 	bl	8026bec <iprintf>
 80235b4:	f06f 030f 	mvn.w	r3, #15
 80235b8:	e05a      	b.n	8023670 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80235ba:	68fb      	ldr	r3, [r7, #12]
 80235bc:	891b      	ldrh	r3, [r3, #8]
 80235be:	88fa      	ldrh	r2, [r7, #6]
 80235c0:	429a      	cmp	r2, r3
 80235c2:	d909      	bls.n	80235d8 <pbuf_take+0x68>
 80235c4:	4b2c      	ldr	r3, [pc, #176]	; (8023678 <pbuf_take+0x108>)
 80235c6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80235ca:	492f      	ldr	r1, [pc, #188]	; (8023688 <pbuf_take+0x118>)
 80235cc:	482c      	ldr	r0, [pc, #176]	; (8023680 <pbuf_take+0x110>)
 80235ce:	f003 fb0d 	bl	8026bec <iprintf>
 80235d2:	f04f 33ff 	mov.w	r3, #4294967295
 80235d6:	e04b      	b.n	8023670 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80235d8:	68fb      	ldr	r3, [r7, #12]
 80235da:	2b00      	cmp	r3, #0
 80235dc:	d007      	beq.n	80235ee <pbuf_take+0x7e>
 80235de:	68bb      	ldr	r3, [r7, #8]
 80235e0:	2b00      	cmp	r3, #0
 80235e2:	d004      	beq.n	80235ee <pbuf_take+0x7e>
 80235e4:	68fb      	ldr	r3, [r7, #12]
 80235e6:	891b      	ldrh	r3, [r3, #8]
 80235e8:	88fa      	ldrh	r2, [r7, #6]
 80235ea:	429a      	cmp	r2, r3
 80235ec:	d902      	bls.n	80235f4 <pbuf_take+0x84>
    return ERR_ARG;
 80235ee:	f06f 030f 	mvn.w	r3, #15
 80235f2:	e03d      	b.n	8023670 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80235f4:	68fb      	ldr	r3, [r7, #12]
 80235f6:	61fb      	str	r3, [r7, #28]
 80235f8:	e028      	b.n	802364c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80235fa:	69fb      	ldr	r3, [r7, #28]
 80235fc:	2b00      	cmp	r3, #0
 80235fe:	d106      	bne.n	802360e <pbuf_take+0x9e>
 8023600:	4b1d      	ldr	r3, [pc, #116]	; (8023678 <pbuf_take+0x108>)
 8023602:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8023606:	4921      	ldr	r1, [pc, #132]	; (802368c <pbuf_take+0x11c>)
 8023608:	481d      	ldr	r0, [pc, #116]	; (8023680 <pbuf_take+0x110>)
 802360a:	f003 faef 	bl	8026bec <iprintf>
    buf_copy_len = total_copy_len;
 802360e:	697b      	ldr	r3, [r7, #20]
 8023610:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8023612:	69fb      	ldr	r3, [r7, #28]
 8023614:	895b      	ldrh	r3, [r3, #10]
 8023616:	461a      	mov	r2, r3
 8023618:	69bb      	ldr	r3, [r7, #24]
 802361a:	4293      	cmp	r3, r2
 802361c:	d902      	bls.n	8023624 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 802361e:	69fb      	ldr	r3, [r7, #28]
 8023620:	895b      	ldrh	r3, [r3, #10]
 8023622:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8023624:	69fb      	ldr	r3, [r7, #28]
 8023626:	6858      	ldr	r0, [r3, #4]
 8023628:	68ba      	ldr	r2, [r7, #8]
 802362a:	693b      	ldr	r3, [r7, #16]
 802362c:	4413      	add	r3, r2
 802362e:	69ba      	ldr	r2, [r7, #24]
 8023630:	4619      	mov	r1, r3
 8023632:	f003 f9cb 	bl	80269cc <memcpy>
    total_copy_len -= buf_copy_len;
 8023636:	697a      	ldr	r2, [r7, #20]
 8023638:	69bb      	ldr	r3, [r7, #24]
 802363a:	1ad3      	subs	r3, r2, r3
 802363c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 802363e:	693a      	ldr	r2, [r7, #16]
 8023640:	69bb      	ldr	r3, [r7, #24]
 8023642:	4413      	add	r3, r2
 8023644:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8023646:	69fb      	ldr	r3, [r7, #28]
 8023648:	681b      	ldr	r3, [r3, #0]
 802364a:	61fb      	str	r3, [r7, #28]
 802364c:	697b      	ldr	r3, [r7, #20]
 802364e:	2b00      	cmp	r3, #0
 8023650:	d1d3      	bne.n	80235fa <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8023652:	697b      	ldr	r3, [r7, #20]
 8023654:	2b00      	cmp	r3, #0
 8023656:	d103      	bne.n	8023660 <pbuf_take+0xf0>
 8023658:	88fb      	ldrh	r3, [r7, #6]
 802365a:	693a      	ldr	r2, [r7, #16]
 802365c:	429a      	cmp	r2, r3
 802365e:	d006      	beq.n	802366e <pbuf_take+0xfe>
 8023660:	4b05      	ldr	r3, [pc, #20]	; (8023678 <pbuf_take+0x108>)
 8023662:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8023666:	490a      	ldr	r1, [pc, #40]	; (8023690 <pbuf_take+0x120>)
 8023668:	4805      	ldr	r0, [pc, #20]	; (8023680 <pbuf_take+0x110>)
 802366a:	f003 fabf 	bl	8026bec <iprintf>
  return ERR_OK;
 802366e:	2300      	movs	r3, #0
}
 8023670:	4618      	mov	r0, r3
 8023672:	3720      	adds	r7, #32
 8023674:	46bd      	mov	sp, r7
 8023676:	bd80      	pop	{r7, pc}
 8023678:	0802cc28 	.word	0x0802cc28
 802367c:	0802d000 	.word	0x0802d000
 8023680:	0802cc88 	.word	0x0802cc88
 8023684:	0802d018 	.word	0x0802d018
 8023688:	0802d034 	.word	0x0802d034
 802368c:	0802d054 	.word	0x0802d054
 8023690:	0802d06c 	.word	0x0802d06c

08023694 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8023694:	b580      	push	{r7, lr}
 8023696:	b084      	sub	sp, #16
 8023698:	af00      	add	r7, sp, #0
 802369a:	4603      	mov	r3, r0
 802369c:	603a      	str	r2, [r7, #0]
 802369e:	71fb      	strb	r3, [r7, #7]
 80236a0:	460b      	mov	r3, r1
 80236a2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80236a4:	683b      	ldr	r3, [r7, #0]
 80236a6:	8919      	ldrh	r1, [r3, #8]
 80236a8:	88ba      	ldrh	r2, [r7, #4]
 80236aa:	79fb      	ldrb	r3, [r7, #7]
 80236ac:	4618      	mov	r0, r3
 80236ae:	f7ff fa83 	bl	8022bb8 <pbuf_alloc>
 80236b2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80236b4:	68fb      	ldr	r3, [r7, #12]
 80236b6:	2b00      	cmp	r3, #0
 80236b8:	d101      	bne.n	80236be <pbuf_clone+0x2a>
    return NULL;
 80236ba:	2300      	movs	r3, #0
 80236bc:	e011      	b.n	80236e2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80236be:	6839      	ldr	r1, [r7, #0]
 80236c0:	68f8      	ldr	r0, [r7, #12]
 80236c2:	f7ff fe83 	bl	80233cc <pbuf_copy>
 80236c6:	4603      	mov	r3, r0
 80236c8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80236ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80236ce:	2b00      	cmp	r3, #0
 80236d0:	d006      	beq.n	80236e0 <pbuf_clone+0x4c>
 80236d2:	4b06      	ldr	r3, [pc, #24]	; (80236ec <pbuf_clone+0x58>)
 80236d4:	f240 5224 	movw	r2, #1316	; 0x524
 80236d8:	4905      	ldr	r1, [pc, #20]	; (80236f0 <pbuf_clone+0x5c>)
 80236da:	4806      	ldr	r0, [pc, #24]	; (80236f4 <pbuf_clone+0x60>)
 80236dc:	f003 fa86 	bl	8026bec <iprintf>
  return q;
 80236e0:	68fb      	ldr	r3, [r7, #12]
}
 80236e2:	4618      	mov	r0, r3
 80236e4:	3710      	adds	r7, #16
 80236e6:	46bd      	mov	sp, r7
 80236e8:	bd80      	pop	{r7, pc}
 80236ea:	bf00      	nop
 80236ec:	0802cc28 	.word	0x0802cc28
 80236f0:	0802d09c 	.word	0x0802d09c
 80236f4:	0802cc88 	.word	0x0802cc88

080236f8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80236f8:	b580      	push	{r7, lr}
 80236fa:	b086      	sub	sp, #24
 80236fc:	af00      	add	r7, sp, #0
 80236fe:	60f8      	str	r0, [r7, #12]
 8023700:	60b9      	str	r1, [r7, #8]
 8023702:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8023704:	2003      	movs	r0, #3
 8023706:	f7fe fdb9 	bl	802227c <memp_malloc>
 802370a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 802370c:	693b      	ldr	r3, [r7, #16]
 802370e:	2b00      	cmp	r3, #0
 8023710:	d109      	bne.n	8023726 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8023712:	693b      	ldr	r3, [r7, #16]
 8023714:	2b00      	cmp	r3, #0
 8023716:	d151      	bne.n	80237bc <sys_timeout_abs+0xc4>
 8023718:	4b2a      	ldr	r3, [pc, #168]	; (80237c4 <sys_timeout_abs+0xcc>)
 802371a:	22be      	movs	r2, #190	; 0xbe
 802371c:	492a      	ldr	r1, [pc, #168]	; (80237c8 <sys_timeout_abs+0xd0>)
 802371e:	482b      	ldr	r0, [pc, #172]	; (80237cc <sys_timeout_abs+0xd4>)
 8023720:	f003 fa64 	bl	8026bec <iprintf>
    return;
 8023724:	e04a      	b.n	80237bc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8023726:	693b      	ldr	r3, [r7, #16]
 8023728:	2200      	movs	r2, #0
 802372a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 802372c:	693b      	ldr	r3, [r7, #16]
 802372e:	68ba      	ldr	r2, [r7, #8]
 8023730:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8023732:	693b      	ldr	r3, [r7, #16]
 8023734:	687a      	ldr	r2, [r7, #4]
 8023736:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8023738:	693b      	ldr	r3, [r7, #16]
 802373a:	68fa      	ldr	r2, [r7, #12]
 802373c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 802373e:	4b24      	ldr	r3, [pc, #144]	; (80237d0 <sys_timeout_abs+0xd8>)
 8023740:	681b      	ldr	r3, [r3, #0]
 8023742:	2b00      	cmp	r3, #0
 8023744:	d103      	bne.n	802374e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8023746:	4a22      	ldr	r2, [pc, #136]	; (80237d0 <sys_timeout_abs+0xd8>)
 8023748:	693b      	ldr	r3, [r7, #16]
 802374a:	6013      	str	r3, [r2, #0]
    return;
 802374c:	e037      	b.n	80237be <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 802374e:	693b      	ldr	r3, [r7, #16]
 8023750:	685a      	ldr	r2, [r3, #4]
 8023752:	4b1f      	ldr	r3, [pc, #124]	; (80237d0 <sys_timeout_abs+0xd8>)
 8023754:	681b      	ldr	r3, [r3, #0]
 8023756:	685b      	ldr	r3, [r3, #4]
 8023758:	1ad3      	subs	r3, r2, r3
 802375a:	0fdb      	lsrs	r3, r3, #31
 802375c:	f003 0301 	and.w	r3, r3, #1
 8023760:	b2db      	uxtb	r3, r3
 8023762:	2b00      	cmp	r3, #0
 8023764:	d007      	beq.n	8023776 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8023766:	4b1a      	ldr	r3, [pc, #104]	; (80237d0 <sys_timeout_abs+0xd8>)
 8023768:	681a      	ldr	r2, [r3, #0]
 802376a:	693b      	ldr	r3, [r7, #16]
 802376c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 802376e:	4a18      	ldr	r2, [pc, #96]	; (80237d0 <sys_timeout_abs+0xd8>)
 8023770:	693b      	ldr	r3, [r7, #16]
 8023772:	6013      	str	r3, [r2, #0]
 8023774:	e023      	b.n	80237be <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8023776:	4b16      	ldr	r3, [pc, #88]	; (80237d0 <sys_timeout_abs+0xd8>)
 8023778:	681b      	ldr	r3, [r3, #0]
 802377a:	617b      	str	r3, [r7, #20]
 802377c:	e01a      	b.n	80237b4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 802377e:	697b      	ldr	r3, [r7, #20]
 8023780:	681b      	ldr	r3, [r3, #0]
 8023782:	2b00      	cmp	r3, #0
 8023784:	d00b      	beq.n	802379e <sys_timeout_abs+0xa6>
 8023786:	693b      	ldr	r3, [r7, #16]
 8023788:	685a      	ldr	r2, [r3, #4]
 802378a:	697b      	ldr	r3, [r7, #20]
 802378c:	681b      	ldr	r3, [r3, #0]
 802378e:	685b      	ldr	r3, [r3, #4]
 8023790:	1ad3      	subs	r3, r2, r3
 8023792:	0fdb      	lsrs	r3, r3, #31
 8023794:	f003 0301 	and.w	r3, r3, #1
 8023798:	b2db      	uxtb	r3, r3
 802379a:	2b00      	cmp	r3, #0
 802379c:	d007      	beq.n	80237ae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 802379e:	697b      	ldr	r3, [r7, #20]
 80237a0:	681a      	ldr	r2, [r3, #0]
 80237a2:	693b      	ldr	r3, [r7, #16]
 80237a4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80237a6:	697b      	ldr	r3, [r7, #20]
 80237a8:	693a      	ldr	r2, [r7, #16]
 80237aa:	601a      	str	r2, [r3, #0]
        break;
 80237ac:	e007      	b.n	80237be <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80237ae:	697b      	ldr	r3, [r7, #20]
 80237b0:	681b      	ldr	r3, [r3, #0]
 80237b2:	617b      	str	r3, [r7, #20]
 80237b4:	697b      	ldr	r3, [r7, #20]
 80237b6:	2b00      	cmp	r3, #0
 80237b8:	d1e1      	bne.n	802377e <sys_timeout_abs+0x86>
 80237ba:	e000      	b.n	80237be <sys_timeout_abs+0xc6>
    return;
 80237bc:	bf00      	nop
      }
    }
  }
}
 80237be:	3718      	adds	r7, #24
 80237c0:	46bd      	mov	sp, r7
 80237c2:	bd80      	pop	{r7, pc}
 80237c4:	0802d0b0 	.word	0x0802d0b0
 80237c8:	0802d0e4 	.word	0x0802d0e4
 80237cc:	0802d124 	.word	0x0802d124
 80237d0:	20015e3c 	.word	0x20015e3c

080237d4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80237d4:	b580      	push	{r7, lr}
 80237d6:	b086      	sub	sp, #24
 80237d8:	af00      	add	r7, sp, #0
 80237da:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80237dc:	687b      	ldr	r3, [r7, #4]
 80237de:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80237e0:	697b      	ldr	r3, [r7, #20]
 80237e2:	685b      	ldr	r3, [r3, #4]
 80237e4:	4798      	blx	r3

  now = sys_now();
 80237e6:	f7fd fed9 	bl	802159c <sys_now>
 80237ea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80237ec:	697b      	ldr	r3, [r7, #20]
 80237ee:	681a      	ldr	r2, [r3, #0]
 80237f0:	4b0f      	ldr	r3, [pc, #60]	; (8023830 <lwip_cyclic_timer+0x5c>)
 80237f2:	681b      	ldr	r3, [r3, #0]
 80237f4:	4413      	add	r3, r2
 80237f6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80237f8:	68fa      	ldr	r2, [r7, #12]
 80237fa:	693b      	ldr	r3, [r7, #16]
 80237fc:	1ad3      	subs	r3, r2, r3
 80237fe:	0fdb      	lsrs	r3, r3, #31
 8023800:	f003 0301 	and.w	r3, r3, #1
 8023804:	b2db      	uxtb	r3, r3
 8023806:	2b00      	cmp	r3, #0
 8023808:	d009      	beq.n	802381e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 802380a:	697b      	ldr	r3, [r7, #20]
 802380c:	681a      	ldr	r2, [r3, #0]
 802380e:	693b      	ldr	r3, [r7, #16]
 8023810:	4413      	add	r3, r2
 8023812:	687a      	ldr	r2, [r7, #4]
 8023814:	4907      	ldr	r1, [pc, #28]	; (8023834 <lwip_cyclic_timer+0x60>)
 8023816:	4618      	mov	r0, r3
 8023818:	f7ff ff6e 	bl	80236f8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 802381c:	e004      	b.n	8023828 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 802381e:	687a      	ldr	r2, [r7, #4]
 8023820:	4904      	ldr	r1, [pc, #16]	; (8023834 <lwip_cyclic_timer+0x60>)
 8023822:	68f8      	ldr	r0, [r7, #12]
 8023824:	f7ff ff68 	bl	80236f8 <sys_timeout_abs>
}
 8023828:	bf00      	nop
 802382a:	3718      	adds	r7, #24
 802382c:	46bd      	mov	sp, r7
 802382e:	bd80      	pop	{r7, pc}
 8023830:	20015e40 	.word	0x20015e40
 8023834:	080237d5 	.word	0x080237d5

08023838 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8023838:	b580      	push	{r7, lr}
 802383a:	b082      	sub	sp, #8
 802383c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 802383e:	2300      	movs	r3, #0
 8023840:	607b      	str	r3, [r7, #4]
 8023842:	e00e      	b.n	8023862 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8023844:	4a0b      	ldr	r2, [pc, #44]	; (8023874 <sys_timeouts_init+0x3c>)
 8023846:	687b      	ldr	r3, [r7, #4]
 8023848:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 802384c:	687b      	ldr	r3, [r7, #4]
 802384e:	00db      	lsls	r3, r3, #3
 8023850:	4a08      	ldr	r2, [pc, #32]	; (8023874 <sys_timeouts_init+0x3c>)
 8023852:	4413      	add	r3, r2
 8023854:	461a      	mov	r2, r3
 8023856:	4908      	ldr	r1, [pc, #32]	; (8023878 <sys_timeouts_init+0x40>)
 8023858:	f000 f810 	bl	802387c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 802385c:	687b      	ldr	r3, [r7, #4]
 802385e:	3301      	adds	r3, #1
 8023860:	607b      	str	r3, [r7, #4]
 8023862:	687b      	ldr	r3, [r7, #4]
 8023864:	2b01      	cmp	r3, #1
 8023866:	d9ed      	bls.n	8023844 <sys_timeouts_init+0xc>
  }
}
 8023868:	bf00      	nop
 802386a:	bf00      	nop
 802386c:	3708      	adds	r7, #8
 802386e:	46bd      	mov	sp, r7
 8023870:	bd80      	pop	{r7, pc}
 8023872:	bf00      	nop
 8023874:	0802e068 	.word	0x0802e068
 8023878:	080237d5 	.word	0x080237d5

0802387c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 802387c:	b580      	push	{r7, lr}
 802387e:	b086      	sub	sp, #24
 8023880:	af00      	add	r7, sp, #0
 8023882:	60f8      	str	r0, [r7, #12]
 8023884:	60b9      	str	r1, [r7, #8]
 8023886:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8023888:	68fb      	ldr	r3, [r7, #12]
 802388a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802388e:	d306      	bcc.n	802389e <sys_timeout+0x22>
 8023890:	4b0a      	ldr	r3, [pc, #40]	; (80238bc <sys_timeout+0x40>)
 8023892:	f240 1229 	movw	r2, #297	; 0x129
 8023896:	490a      	ldr	r1, [pc, #40]	; (80238c0 <sys_timeout+0x44>)
 8023898:	480a      	ldr	r0, [pc, #40]	; (80238c4 <sys_timeout+0x48>)
 802389a:	f003 f9a7 	bl	8026bec <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 802389e:	f7fd fe7d 	bl	802159c <sys_now>
 80238a2:	4602      	mov	r2, r0
 80238a4:	68fb      	ldr	r3, [r7, #12]
 80238a6:	4413      	add	r3, r2
 80238a8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80238aa:	687a      	ldr	r2, [r7, #4]
 80238ac:	68b9      	ldr	r1, [r7, #8]
 80238ae:	6978      	ldr	r0, [r7, #20]
 80238b0:	f7ff ff22 	bl	80236f8 <sys_timeout_abs>
#endif
}
 80238b4:	bf00      	nop
 80238b6:	3718      	adds	r7, #24
 80238b8:	46bd      	mov	sp, r7
 80238ba:	bd80      	pop	{r7, pc}
 80238bc:	0802d0b0 	.word	0x0802d0b0
 80238c0:	0802d14c 	.word	0x0802d14c
 80238c4:	0802d124 	.word	0x0802d124

080238c8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80238c8:	b580      	push	{r7, lr}
 80238ca:	b084      	sub	sp, #16
 80238cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80238ce:	f7fd fe65 	bl	802159c <sys_now>
 80238d2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80238d4:	4b17      	ldr	r3, [pc, #92]	; (8023934 <sys_check_timeouts+0x6c>)
 80238d6:	681b      	ldr	r3, [r3, #0]
 80238d8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80238da:	68bb      	ldr	r3, [r7, #8]
 80238dc:	2b00      	cmp	r3, #0
 80238de:	d022      	beq.n	8023926 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80238e0:	68bb      	ldr	r3, [r7, #8]
 80238e2:	685b      	ldr	r3, [r3, #4]
 80238e4:	68fa      	ldr	r2, [r7, #12]
 80238e6:	1ad3      	subs	r3, r2, r3
 80238e8:	0fdb      	lsrs	r3, r3, #31
 80238ea:	f003 0301 	and.w	r3, r3, #1
 80238ee:	b2db      	uxtb	r3, r3
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	d11a      	bne.n	802392a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80238f4:	68bb      	ldr	r3, [r7, #8]
 80238f6:	681b      	ldr	r3, [r3, #0]
 80238f8:	4a0e      	ldr	r2, [pc, #56]	; (8023934 <sys_check_timeouts+0x6c>)
 80238fa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80238fc:	68bb      	ldr	r3, [r7, #8]
 80238fe:	689b      	ldr	r3, [r3, #8]
 8023900:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8023902:	68bb      	ldr	r3, [r7, #8]
 8023904:	68db      	ldr	r3, [r3, #12]
 8023906:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8023908:	68bb      	ldr	r3, [r7, #8]
 802390a:	685b      	ldr	r3, [r3, #4]
 802390c:	4a0a      	ldr	r2, [pc, #40]	; (8023938 <sys_check_timeouts+0x70>)
 802390e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8023910:	68b9      	ldr	r1, [r7, #8]
 8023912:	2003      	movs	r0, #3
 8023914:	f7fe fd22 	bl	802235c <memp_free>
    if (handler != NULL) {
 8023918:	687b      	ldr	r3, [r7, #4]
 802391a:	2b00      	cmp	r3, #0
 802391c:	d0da      	beq.n	80238d4 <sys_check_timeouts+0xc>
      handler(arg);
 802391e:	687b      	ldr	r3, [r7, #4]
 8023920:	6838      	ldr	r0, [r7, #0]
 8023922:	4798      	blx	r3
  do {
 8023924:	e7d6      	b.n	80238d4 <sys_check_timeouts+0xc>
      return;
 8023926:	bf00      	nop
 8023928:	e000      	b.n	802392c <sys_check_timeouts+0x64>
      return;
 802392a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 802392c:	3710      	adds	r7, #16
 802392e:	46bd      	mov	sp, r7
 8023930:	bd80      	pop	{r7, pc}
 8023932:	bf00      	nop
 8023934:	20015e3c 	.word	0x20015e3c
 8023938:	20015e40 	.word	0x20015e40

0802393c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 802393c:	b580      	push	{r7, lr}
 802393e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8023940:	f003 f9f8 	bl	8026d34 <rand>
 8023944:	4603      	mov	r3, r0
 8023946:	b29b      	uxth	r3, r3
 8023948:	f3c3 030d 	ubfx	r3, r3, #0, #14
 802394c:	b29b      	uxth	r3, r3
 802394e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8023952:	b29a      	uxth	r2, r3
 8023954:	4b01      	ldr	r3, [pc, #4]	; (802395c <udp_init+0x20>)
 8023956:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8023958:	bf00      	nop
 802395a:	bd80      	pop	{r7, pc}
 802395c:	2000033c 	.word	0x2000033c

08023960 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8023960:	b480      	push	{r7}
 8023962:	b083      	sub	sp, #12
 8023964:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8023966:	2300      	movs	r3, #0
 8023968:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 802396a:	4b17      	ldr	r3, [pc, #92]	; (80239c8 <udp_new_port+0x68>)
 802396c:	881b      	ldrh	r3, [r3, #0]
 802396e:	1c5a      	adds	r2, r3, #1
 8023970:	b291      	uxth	r1, r2
 8023972:	4a15      	ldr	r2, [pc, #84]	; (80239c8 <udp_new_port+0x68>)
 8023974:	8011      	strh	r1, [r2, #0]
 8023976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802397a:	4293      	cmp	r3, r2
 802397c:	d103      	bne.n	8023986 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 802397e:	4b12      	ldr	r3, [pc, #72]	; (80239c8 <udp_new_port+0x68>)
 8023980:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8023984:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8023986:	4b11      	ldr	r3, [pc, #68]	; (80239cc <udp_new_port+0x6c>)
 8023988:	681b      	ldr	r3, [r3, #0]
 802398a:	603b      	str	r3, [r7, #0]
 802398c:	e011      	b.n	80239b2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 802398e:	683b      	ldr	r3, [r7, #0]
 8023990:	8a5a      	ldrh	r2, [r3, #18]
 8023992:	4b0d      	ldr	r3, [pc, #52]	; (80239c8 <udp_new_port+0x68>)
 8023994:	881b      	ldrh	r3, [r3, #0]
 8023996:	429a      	cmp	r2, r3
 8023998:	d108      	bne.n	80239ac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 802399a:	88fb      	ldrh	r3, [r7, #6]
 802399c:	3301      	adds	r3, #1
 802399e:	80fb      	strh	r3, [r7, #6]
 80239a0:	88fb      	ldrh	r3, [r7, #6]
 80239a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80239a6:	d3e0      	bcc.n	802396a <udp_new_port+0xa>
        return 0;
 80239a8:	2300      	movs	r3, #0
 80239aa:	e007      	b.n	80239bc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80239ac:	683b      	ldr	r3, [r7, #0]
 80239ae:	68db      	ldr	r3, [r3, #12]
 80239b0:	603b      	str	r3, [r7, #0]
 80239b2:	683b      	ldr	r3, [r7, #0]
 80239b4:	2b00      	cmp	r3, #0
 80239b6:	d1ea      	bne.n	802398e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80239b8:	4b03      	ldr	r3, [pc, #12]	; (80239c8 <udp_new_port+0x68>)
 80239ba:	881b      	ldrh	r3, [r3, #0]
}
 80239bc:	4618      	mov	r0, r3
 80239be:	370c      	adds	r7, #12
 80239c0:	46bd      	mov	sp, r7
 80239c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239c6:	4770      	bx	lr
 80239c8:	2000033c 	.word	0x2000033c
 80239cc:	20015e44 	.word	0x20015e44

080239d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80239d0:	b580      	push	{r7, lr}
 80239d2:	b084      	sub	sp, #16
 80239d4:	af00      	add	r7, sp, #0
 80239d6:	60f8      	str	r0, [r7, #12]
 80239d8:	60b9      	str	r1, [r7, #8]
 80239da:	4613      	mov	r3, r2
 80239dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80239de:	68fb      	ldr	r3, [r7, #12]
 80239e0:	2b00      	cmp	r3, #0
 80239e2:	d105      	bne.n	80239f0 <udp_input_local_match+0x20>
 80239e4:	4b27      	ldr	r3, [pc, #156]	; (8023a84 <udp_input_local_match+0xb4>)
 80239e6:	2287      	movs	r2, #135	; 0x87
 80239e8:	4927      	ldr	r1, [pc, #156]	; (8023a88 <udp_input_local_match+0xb8>)
 80239ea:	4828      	ldr	r0, [pc, #160]	; (8023a8c <udp_input_local_match+0xbc>)
 80239ec:	f003 f8fe 	bl	8026bec <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80239f0:	68bb      	ldr	r3, [r7, #8]
 80239f2:	2b00      	cmp	r3, #0
 80239f4:	d105      	bne.n	8023a02 <udp_input_local_match+0x32>
 80239f6:	4b23      	ldr	r3, [pc, #140]	; (8023a84 <udp_input_local_match+0xb4>)
 80239f8:	2288      	movs	r2, #136	; 0x88
 80239fa:	4925      	ldr	r1, [pc, #148]	; (8023a90 <udp_input_local_match+0xc0>)
 80239fc:	4823      	ldr	r0, [pc, #140]	; (8023a8c <udp_input_local_match+0xbc>)
 80239fe:	f003 f8f5 	bl	8026bec <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8023a02:	68fb      	ldr	r3, [r7, #12]
 8023a04:	7a1b      	ldrb	r3, [r3, #8]
 8023a06:	2b00      	cmp	r3, #0
 8023a08:	d00b      	beq.n	8023a22 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8023a0a:	68fb      	ldr	r3, [r7, #12]
 8023a0c:	7a1a      	ldrb	r2, [r3, #8]
 8023a0e:	4b21      	ldr	r3, [pc, #132]	; (8023a94 <udp_input_local_match+0xc4>)
 8023a10:	685b      	ldr	r3, [r3, #4]
 8023a12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8023a16:	3301      	adds	r3, #1
 8023a18:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8023a1a:	429a      	cmp	r2, r3
 8023a1c:	d001      	beq.n	8023a22 <udp_input_local_match+0x52>
    return 0;
 8023a1e:	2300      	movs	r3, #0
 8023a20:	e02b      	b.n	8023a7a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8023a22:	79fb      	ldrb	r3, [r7, #7]
 8023a24:	2b00      	cmp	r3, #0
 8023a26:	d018      	beq.n	8023a5a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8023a28:	68fb      	ldr	r3, [r7, #12]
 8023a2a:	2b00      	cmp	r3, #0
 8023a2c:	d013      	beq.n	8023a56 <udp_input_local_match+0x86>
 8023a2e:	68fb      	ldr	r3, [r7, #12]
 8023a30:	681b      	ldr	r3, [r3, #0]
 8023a32:	2b00      	cmp	r3, #0
 8023a34:	d00f      	beq.n	8023a56 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8023a36:	4b17      	ldr	r3, [pc, #92]	; (8023a94 <udp_input_local_match+0xc4>)
 8023a38:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8023a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023a3e:	d00a      	beq.n	8023a56 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8023a40:	68fb      	ldr	r3, [r7, #12]
 8023a42:	681a      	ldr	r2, [r3, #0]
 8023a44:	4b13      	ldr	r3, [pc, #76]	; (8023a94 <udp_input_local_match+0xc4>)
 8023a46:	695b      	ldr	r3, [r3, #20]
 8023a48:	405a      	eors	r2, r3
 8023a4a:	68bb      	ldr	r3, [r7, #8]
 8023a4c:	3308      	adds	r3, #8
 8023a4e:	681b      	ldr	r3, [r3, #0]
 8023a50:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8023a52:	2b00      	cmp	r3, #0
 8023a54:	d110      	bne.n	8023a78 <udp_input_local_match+0xa8>
          return 1;
 8023a56:	2301      	movs	r3, #1
 8023a58:	e00f      	b.n	8023a7a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8023a5a:	68fb      	ldr	r3, [r7, #12]
 8023a5c:	2b00      	cmp	r3, #0
 8023a5e:	d009      	beq.n	8023a74 <udp_input_local_match+0xa4>
 8023a60:	68fb      	ldr	r3, [r7, #12]
 8023a62:	681b      	ldr	r3, [r3, #0]
 8023a64:	2b00      	cmp	r3, #0
 8023a66:	d005      	beq.n	8023a74 <udp_input_local_match+0xa4>
 8023a68:	68fb      	ldr	r3, [r7, #12]
 8023a6a:	681a      	ldr	r2, [r3, #0]
 8023a6c:	4b09      	ldr	r3, [pc, #36]	; (8023a94 <udp_input_local_match+0xc4>)
 8023a6e:	695b      	ldr	r3, [r3, #20]
 8023a70:	429a      	cmp	r2, r3
 8023a72:	d101      	bne.n	8023a78 <udp_input_local_match+0xa8>
        return 1;
 8023a74:	2301      	movs	r3, #1
 8023a76:	e000      	b.n	8023a7a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8023a78:	2300      	movs	r3, #0
}
 8023a7a:	4618      	mov	r0, r3
 8023a7c:	3710      	adds	r7, #16
 8023a7e:	46bd      	mov	sp, r7
 8023a80:	bd80      	pop	{r7, pc}
 8023a82:	bf00      	nop
 8023a84:	0802d198 	.word	0x0802d198
 8023a88:	0802d1c8 	.word	0x0802d1c8
 8023a8c:	0802d1ec 	.word	0x0802d1ec
 8023a90:	0802d214 	.word	0x0802d214
 8023a94:	200127e0 	.word	0x200127e0

08023a98 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8023a98:	b590      	push	{r4, r7, lr}
 8023a9a:	b08d      	sub	sp, #52	; 0x34
 8023a9c:	af02      	add	r7, sp, #8
 8023a9e:	6078      	str	r0, [r7, #4]
 8023aa0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8023aa2:	2300      	movs	r3, #0
 8023aa4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8023aa6:	687b      	ldr	r3, [r7, #4]
 8023aa8:	2b00      	cmp	r3, #0
 8023aaa:	d105      	bne.n	8023ab8 <udp_input+0x20>
 8023aac:	4b7c      	ldr	r3, [pc, #496]	; (8023ca0 <udp_input+0x208>)
 8023aae:	22cf      	movs	r2, #207	; 0xcf
 8023ab0:	497c      	ldr	r1, [pc, #496]	; (8023ca4 <udp_input+0x20c>)
 8023ab2:	487d      	ldr	r0, [pc, #500]	; (8023ca8 <udp_input+0x210>)
 8023ab4:	f003 f89a 	bl	8026bec <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8023ab8:	683b      	ldr	r3, [r7, #0]
 8023aba:	2b00      	cmp	r3, #0
 8023abc:	d105      	bne.n	8023aca <udp_input+0x32>
 8023abe:	4b78      	ldr	r3, [pc, #480]	; (8023ca0 <udp_input+0x208>)
 8023ac0:	22d0      	movs	r2, #208	; 0xd0
 8023ac2:	497a      	ldr	r1, [pc, #488]	; (8023cac <udp_input+0x214>)
 8023ac4:	4878      	ldr	r0, [pc, #480]	; (8023ca8 <udp_input+0x210>)
 8023ac6:	f003 f891 	bl	8026bec <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8023aca:	687b      	ldr	r3, [r7, #4]
 8023acc:	895b      	ldrh	r3, [r3, #10]
 8023ace:	2b07      	cmp	r3, #7
 8023ad0:	d803      	bhi.n	8023ada <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8023ad2:	6878      	ldr	r0, [r7, #4]
 8023ad4:	f7ff fb52 	bl	802317c <pbuf_free>
    goto end;
 8023ad8:	e0de      	b.n	8023c98 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8023ada:	687b      	ldr	r3, [r7, #4]
 8023adc:	685b      	ldr	r3, [r3, #4]
 8023ade:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8023ae0:	4b73      	ldr	r3, [pc, #460]	; (8023cb0 <udp_input+0x218>)
 8023ae2:	695b      	ldr	r3, [r3, #20]
 8023ae4:	4a72      	ldr	r2, [pc, #456]	; (8023cb0 <udp_input+0x218>)
 8023ae6:	6812      	ldr	r2, [r2, #0]
 8023ae8:	4611      	mov	r1, r2
 8023aea:	4618      	mov	r0, r3
 8023aec:	f001 ff44 	bl	8025978 <ip4_addr_isbroadcast_u32>
 8023af0:	4603      	mov	r3, r0
 8023af2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8023af4:	697b      	ldr	r3, [r7, #20]
 8023af6:	881b      	ldrh	r3, [r3, #0]
 8023af8:	b29b      	uxth	r3, r3
 8023afa:	4618      	mov	r0, r3
 8023afc:	f7fd ff62 	bl	80219c4 <lwip_htons>
 8023b00:	4603      	mov	r3, r0
 8023b02:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8023b04:	697b      	ldr	r3, [r7, #20]
 8023b06:	885b      	ldrh	r3, [r3, #2]
 8023b08:	b29b      	uxth	r3, r3
 8023b0a:	4618      	mov	r0, r3
 8023b0c:	f7fd ff5a 	bl	80219c4 <lwip_htons>
 8023b10:	4603      	mov	r3, r0
 8023b12:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8023b14:	2300      	movs	r3, #0
 8023b16:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8023b18:	2300      	movs	r3, #0
 8023b1a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8023b1c:	2300      	movs	r3, #0
 8023b1e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8023b20:	4b64      	ldr	r3, [pc, #400]	; (8023cb4 <udp_input+0x21c>)
 8023b22:	681b      	ldr	r3, [r3, #0]
 8023b24:	627b      	str	r3, [r7, #36]	; 0x24
 8023b26:	e054      	b.n	8023bd2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8023b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b2a:	8a5b      	ldrh	r3, [r3, #18]
 8023b2c:	89fa      	ldrh	r2, [r7, #14]
 8023b2e:	429a      	cmp	r2, r3
 8023b30:	d14a      	bne.n	8023bc8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8023b32:	7cfb      	ldrb	r3, [r7, #19]
 8023b34:	461a      	mov	r2, r3
 8023b36:	6839      	ldr	r1, [r7, #0]
 8023b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023b3a:	f7ff ff49 	bl	80239d0 <udp_input_local_match>
 8023b3e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8023b40:	2b00      	cmp	r3, #0
 8023b42:	d041      	beq.n	8023bc8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8023b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b46:	7c1b      	ldrb	r3, [r3, #16]
 8023b48:	f003 0304 	and.w	r3, r3, #4
 8023b4c:	2b00      	cmp	r3, #0
 8023b4e:	d11d      	bne.n	8023b8c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8023b50:	69fb      	ldr	r3, [r7, #28]
 8023b52:	2b00      	cmp	r3, #0
 8023b54:	d102      	bne.n	8023b5c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8023b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b58:	61fb      	str	r3, [r7, #28]
 8023b5a:	e017      	b.n	8023b8c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8023b5c:	7cfb      	ldrb	r3, [r7, #19]
 8023b5e:	2b00      	cmp	r3, #0
 8023b60:	d014      	beq.n	8023b8c <udp_input+0xf4>
 8023b62:	4b53      	ldr	r3, [pc, #332]	; (8023cb0 <udp_input+0x218>)
 8023b64:	695b      	ldr	r3, [r3, #20]
 8023b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023b6a:	d10f      	bne.n	8023b8c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8023b6c:	69fb      	ldr	r3, [r7, #28]
 8023b6e:	681a      	ldr	r2, [r3, #0]
 8023b70:	683b      	ldr	r3, [r7, #0]
 8023b72:	3304      	adds	r3, #4
 8023b74:	681b      	ldr	r3, [r3, #0]
 8023b76:	429a      	cmp	r2, r3
 8023b78:	d008      	beq.n	8023b8c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8023b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b7c:	681a      	ldr	r2, [r3, #0]
 8023b7e:	683b      	ldr	r3, [r7, #0]
 8023b80:	3304      	adds	r3, #4
 8023b82:	681b      	ldr	r3, [r3, #0]
 8023b84:	429a      	cmp	r2, r3
 8023b86:	d101      	bne.n	8023b8c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8023b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b8a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8023b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b8e:	8a9b      	ldrh	r3, [r3, #20]
 8023b90:	8a3a      	ldrh	r2, [r7, #16]
 8023b92:	429a      	cmp	r2, r3
 8023b94:	d118      	bne.n	8023bc8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8023b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b98:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8023b9a:	2b00      	cmp	r3, #0
 8023b9c:	d005      	beq.n	8023baa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8023b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023ba0:	685a      	ldr	r2, [r3, #4]
 8023ba2:	4b43      	ldr	r3, [pc, #268]	; (8023cb0 <udp_input+0x218>)
 8023ba4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8023ba6:	429a      	cmp	r2, r3
 8023ba8:	d10e      	bne.n	8023bc8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8023baa:	6a3b      	ldr	r3, [r7, #32]
 8023bac:	2b00      	cmp	r3, #0
 8023bae:	d014      	beq.n	8023bda <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8023bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023bb2:	68da      	ldr	r2, [r3, #12]
 8023bb4:	6a3b      	ldr	r3, [r7, #32]
 8023bb6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8023bb8:	4b3e      	ldr	r3, [pc, #248]	; (8023cb4 <udp_input+0x21c>)
 8023bba:	681a      	ldr	r2, [r3, #0]
 8023bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023bbe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8023bc0:	4a3c      	ldr	r2, [pc, #240]	; (8023cb4 <udp_input+0x21c>)
 8023bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023bc4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8023bc6:	e008      	b.n	8023bda <udp_input+0x142>
      }
    }

    prev = pcb;
 8023bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023bca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8023bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023bce:	68db      	ldr	r3, [r3, #12]
 8023bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8023bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023bd4:	2b00      	cmp	r3, #0
 8023bd6:	d1a7      	bne.n	8023b28 <udp_input+0x90>
 8023bd8:	e000      	b.n	8023bdc <udp_input+0x144>
        break;
 8023bda:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8023bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023bde:	2b00      	cmp	r3, #0
 8023be0:	d101      	bne.n	8023be6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8023be2:	69fb      	ldr	r3, [r7, #28]
 8023be4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8023be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023be8:	2b00      	cmp	r3, #0
 8023bea:	d002      	beq.n	8023bf2 <udp_input+0x15a>
    for_us = 1;
 8023bec:	2301      	movs	r3, #1
 8023bee:	76fb      	strb	r3, [r7, #27]
 8023bf0:	e00a      	b.n	8023c08 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8023bf2:	683b      	ldr	r3, [r7, #0]
 8023bf4:	3304      	adds	r3, #4
 8023bf6:	681a      	ldr	r2, [r3, #0]
 8023bf8:	4b2d      	ldr	r3, [pc, #180]	; (8023cb0 <udp_input+0x218>)
 8023bfa:	695b      	ldr	r3, [r3, #20]
 8023bfc:	429a      	cmp	r2, r3
 8023bfe:	bf0c      	ite	eq
 8023c00:	2301      	moveq	r3, #1
 8023c02:	2300      	movne	r3, #0
 8023c04:	b2db      	uxtb	r3, r3
 8023c06:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8023c08:	7efb      	ldrb	r3, [r7, #27]
 8023c0a:	2b00      	cmp	r3, #0
 8023c0c:	d041      	beq.n	8023c92 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8023c0e:	2108      	movs	r1, #8
 8023c10:	6878      	ldr	r0, [r7, #4]
 8023c12:	f7ff fa2d 	bl	8023070 <pbuf_remove_header>
 8023c16:	4603      	mov	r3, r0
 8023c18:	2b00      	cmp	r3, #0
 8023c1a:	d00a      	beq.n	8023c32 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8023c1c:	4b20      	ldr	r3, [pc, #128]	; (8023ca0 <udp_input+0x208>)
 8023c1e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8023c22:	4925      	ldr	r1, [pc, #148]	; (8023cb8 <udp_input+0x220>)
 8023c24:	4820      	ldr	r0, [pc, #128]	; (8023ca8 <udp_input+0x210>)
 8023c26:	f002 ffe1 	bl	8026bec <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8023c2a:	6878      	ldr	r0, [r7, #4]
 8023c2c:	f7ff faa6 	bl	802317c <pbuf_free>
      goto end;
 8023c30:	e032      	b.n	8023c98 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8023c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023c34:	2b00      	cmp	r3, #0
 8023c36:	d012      	beq.n	8023c5e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8023c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023c3a:	699b      	ldr	r3, [r3, #24]
 8023c3c:	2b00      	cmp	r3, #0
 8023c3e:	d00a      	beq.n	8023c56 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8023c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023c42:	699c      	ldr	r4, [r3, #24]
 8023c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023c46:	69d8      	ldr	r0, [r3, #28]
 8023c48:	8a3b      	ldrh	r3, [r7, #16]
 8023c4a:	9300      	str	r3, [sp, #0]
 8023c4c:	4b1b      	ldr	r3, [pc, #108]	; (8023cbc <udp_input+0x224>)
 8023c4e:	687a      	ldr	r2, [r7, #4]
 8023c50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8023c52:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8023c54:	e021      	b.n	8023c9a <udp_input+0x202>
        pbuf_free(p);
 8023c56:	6878      	ldr	r0, [r7, #4]
 8023c58:	f7ff fa90 	bl	802317c <pbuf_free>
        goto end;
 8023c5c:	e01c      	b.n	8023c98 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8023c5e:	7cfb      	ldrb	r3, [r7, #19]
 8023c60:	2b00      	cmp	r3, #0
 8023c62:	d112      	bne.n	8023c8a <udp_input+0x1f2>
 8023c64:	4b12      	ldr	r3, [pc, #72]	; (8023cb0 <udp_input+0x218>)
 8023c66:	695b      	ldr	r3, [r3, #20]
 8023c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023c6c:	2be0      	cmp	r3, #224	; 0xe0
 8023c6e:	d00c      	beq.n	8023c8a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8023c70:	4b0f      	ldr	r3, [pc, #60]	; (8023cb0 <udp_input+0x218>)
 8023c72:	899b      	ldrh	r3, [r3, #12]
 8023c74:	3308      	adds	r3, #8
 8023c76:	b29b      	uxth	r3, r3
 8023c78:	b21b      	sxth	r3, r3
 8023c7a:	4619      	mov	r1, r3
 8023c7c:	6878      	ldr	r0, [r7, #4]
 8023c7e:	f7ff fa6a 	bl	8023156 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8023c82:	2103      	movs	r1, #3
 8023c84:	6878      	ldr	r0, [r7, #4]
 8023c86:	f001 fb53 	bl	8025330 <icmp_dest_unreach>
      pbuf_free(p);
 8023c8a:	6878      	ldr	r0, [r7, #4]
 8023c8c:	f7ff fa76 	bl	802317c <pbuf_free>
  return;
 8023c90:	e003      	b.n	8023c9a <udp_input+0x202>
    pbuf_free(p);
 8023c92:	6878      	ldr	r0, [r7, #4]
 8023c94:	f7ff fa72 	bl	802317c <pbuf_free>
  return;
 8023c98:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8023c9a:	372c      	adds	r7, #44	; 0x2c
 8023c9c:	46bd      	mov	sp, r7
 8023c9e:	bd90      	pop	{r4, r7, pc}
 8023ca0:	0802d198 	.word	0x0802d198
 8023ca4:	0802d23c 	.word	0x0802d23c
 8023ca8:	0802d1ec 	.word	0x0802d1ec
 8023cac:	0802d254 	.word	0x0802d254
 8023cb0:	200127e0 	.word	0x200127e0
 8023cb4:	20015e44 	.word	0x20015e44
 8023cb8:	0802d270 	.word	0x0802d270
 8023cbc:	200127f0 	.word	0x200127f0

08023cc0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8023cc0:	b580      	push	{r7, lr}
 8023cc2:	b088      	sub	sp, #32
 8023cc4:	af02      	add	r7, sp, #8
 8023cc6:	60f8      	str	r0, [r7, #12]
 8023cc8:	60b9      	str	r1, [r7, #8]
 8023cca:	607a      	str	r2, [r7, #4]
 8023ccc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8023cce:	68fb      	ldr	r3, [r7, #12]
 8023cd0:	2b00      	cmp	r3, #0
 8023cd2:	d109      	bne.n	8023ce8 <udp_sendto+0x28>
 8023cd4:	4b23      	ldr	r3, [pc, #140]	; (8023d64 <udp_sendto+0xa4>)
 8023cd6:	f44f 7206 	mov.w	r2, #536	; 0x218
 8023cda:	4923      	ldr	r1, [pc, #140]	; (8023d68 <udp_sendto+0xa8>)
 8023cdc:	4823      	ldr	r0, [pc, #140]	; (8023d6c <udp_sendto+0xac>)
 8023cde:	f002 ff85 	bl	8026bec <iprintf>
 8023ce2:	f06f 030f 	mvn.w	r3, #15
 8023ce6:	e038      	b.n	8023d5a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8023ce8:	68bb      	ldr	r3, [r7, #8]
 8023cea:	2b00      	cmp	r3, #0
 8023cec:	d109      	bne.n	8023d02 <udp_sendto+0x42>
 8023cee:	4b1d      	ldr	r3, [pc, #116]	; (8023d64 <udp_sendto+0xa4>)
 8023cf0:	f240 2219 	movw	r2, #537	; 0x219
 8023cf4:	491e      	ldr	r1, [pc, #120]	; (8023d70 <udp_sendto+0xb0>)
 8023cf6:	481d      	ldr	r0, [pc, #116]	; (8023d6c <udp_sendto+0xac>)
 8023cf8:	f002 ff78 	bl	8026bec <iprintf>
 8023cfc:	f06f 030f 	mvn.w	r3, #15
 8023d00:	e02b      	b.n	8023d5a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8023d02:	687b      	ldr	r3, [r7, #4]
 8023d04:	2b00      	cmp	r3, #0
 8023d06:	d109      	bne.n	8023d1c <udp_sendto+0x5c>
 8023d08:	4b16      	ldr	r3, [pc, #88]	; (8023d64 <udp_sendto+0xa4>)
 8023d0a:	f240 221a 	movw	r2, #538	; 0x21a
 8023d0e:	4919      	ldr	r1, [pc, #100]	; (8023d74 <udp_sendto+0xb4>)
 8023d10:	4816      	ldr	r0, [pc, #88]	; (8023d6c <udp_sendto+0xac>)
 8023d12:	f002 ff6b 	bl	8026bec <iprintf>
 8023d16:	f06f 030f 	mvn.w	r3, #15
 8023d1a:	e01e      	b.n	8023d5a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8023d1c:	68fb      	ldr	r3, [r7, #12]
 8023d1e:	7a1b      	ldrb	r3, [r3, #8]
 8023d20:	2b00      	cmp	r3, #0
 8023d22:	d006      	beq.n	8023d32 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8023d24:	68fb      	ldr	r3, [r7, #12]
 8023d26:	7a1b      	ldrb	r3, [r3, #8]
 8023d28:	4618      	mov	r0, r3
 8023d2a:	f7fe fef5 	bl	8022b18 <netif_get_by_index>
 8023d2e:	6178      	str	r0, [r7, #20]
 8023d30:	e003      	b.n	8023d3a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8023d32:	6878      	ldr	r0, [r7, #4]
 8023d34:	f001 fb86 	bl	8025444 <ip4_route>
 8023d38:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8023d3a:	697b      	ldr	r3, [r7, #20]
 8023d3c:	2b00      	cmp	r3, #0
 8023d3e:	d102      	bne.n	8023d46 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8023d40:	f06f 0303 	mvn.w	r3, #3
 8023d44:	e009      	b.n	8023d5a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8023d46:	887a      	ldrh	r2, [r7, #2]
 8023d48:	697b      	ldr	r3, [r7, #20]
 8023d4a:	9300      	str	r3, [sp, #0]
 8023d4c:	4613      	mov	r3, r2
 8023d4e:	687a      	ldr	r2, [r7, #4]
 8023d50:	68b9      	ldr	r1, [r7, #8]
 8023d52:	68f8      	ldr	r0, [r7, #12]
 8023d54:	f000 f810 	bl	8023d78 <udp_sendto_if>
 8023d58:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8023d5a:	4618      	mov	r0, r3
 8023d5c:	3718      	adds	r7, #24
 8023d5e:	46bd      	mov	sp, r7
 8023d60:	bd80      	pop	{r7, pc}
 8023d62:	bf00      	nop
 8023d64:	0802d198 	.word	0x0802d198
 8023d68:	0802d2bc 	.word	0x0802d2bc
 8023d6c:	0802d1ec 	.word	0x0802d1ec
 8023d70:	0802d2d4 	.word	0x0802d2d4
 8023d74:	0802d2f0 	.word	0x0802d2f0

08023d78 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8023d78:	b580      	push	{r7, lr}
 8023d7a:	b088      	sub	sp, #32
 8023d7c:	af02      	add	r7, sp, #8
 8023d7e:	60f8      	str	r0, [r7, #12]
 8023d80:	60b9      	str	r1, [r7, #8]
 8023d82:	607a      	str	r2, [r7, #4]
 8023d84:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8023d86:	68fb      	ldr	r3, [r7, #12]
 8023d88:	2b00      	cmp	r3, #0
 8023d8a:	d109      	bne.n	8023da0 <udp_sendto_if+0x28>
 8023d8c:	4b2e      	ldr	r3, [pc, #184]	; (8023e48 <udp_sendto_if+0xd0>)
 8023d8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023d92:	492e      	ldr	r1, [pc, #184]	; (8023e4c <udp_sendto_if+0xd4>)
 8023d94:	482e      	ldr	r0, [pc, #184]	; (8023e50 <udp_sendto_if+0xd8>)
 8023d96:	f002 ff29 	bl	8026bec <iprintf>
 8023d9a:	f06f 030f 	mvn.w	r3, #15
 8023d9e:	e04f      	b.n	8023e40 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8023da0:	68bb      	ldr	r3, [r7, #8]
 8023da2:	2b00      	cmp	r3, #0
 8023da4:	d109      	bne.n	8023dba <udp_sendto_if+0x42>
 8023da6:	4b28      	ldr	r3, [pc, #160]	; (8023e48 <udp_sendto_if+0xd0>)
 8023da8:	f240 2281 	movw	r2, #641	; 0x281
 8023dac:	4929      	ldr	r1, [pc, #164]	; (8023e54 <udp_sendto_if+0xdc>)
 8023dae:	4828      	ldr	r0, [pc, #160]	; (8023e50 <udp_sendto_if+0xd8>)
 8023db0:	f002 ff1c 	bl	8026bec <iprintf>
 8023db4:	f06f 030f 	mvn.w	r3, #15
 8023db8:	e042      	b.n	8023e40 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8023dba:	687b      	ldr	r3, [r7, #4]
 8023dbc:	2b00      	cmp	r3, #0
 8023dbe:	d109      	bne.n	8023dd4 <udp_sendto_if+0x5c>
 8023dc0:	4b21      	ldr	r3, [pc, #132]	; (8023e48 <udp_sendto_if+0xd0>)
 8023dc2:	f240 2282 	movw	r2, #642	; 0x282
 8023dc6:	4924      	ldr	r1, [pc, #144]	; (8023e58 <udp_sendto_if+0xe0>)
 8023dc8:	4821      	ldr	r0, [pc, #132]	; (8023e50 <udp_sendto_if+0xd8>)
 8023dca:	f002 ff0f 	bl	8026bec <iprintf>
 8023dce:	f06f 030f 	mvn.w	r3, #15
 8023dd2:	e035      	b.n	8023e40 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8023dd4:	6a3b      	ldr	r3, [r7, #32]
 8023dd6:	2b00      	cmp	r3, #0
 8023dd8:	d109      	bne.n	8023dee <udp_sendto_if+0x76>
 8023dda:	4b1b      	ldr	r3, [pc, #108]	; (8023e48 <udp_sendto_if+0xd0>)
 8023ddc:	f240 2283 	movw	r2, #643	; 0x283
 8023de0:	491e      	ldr	r1, [pc, #120]	; (8023e5c <udp_sendto_if+0xe4>)
 8023de2:	481b      	ldr	r0, [pc, #108]	; (8023e50 <udp_sendto_if+0xd8>)
 8023de4:	f002 ff02 	bl	8026bec <iprintf>
 8023de8:	f06f 030f 	mvn.w	r3, #15
 8023dec:	e028      	b.n	8023e40 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8023dee:	68fb      	ldr	r3, [r7, #12]
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	d009      	beq.n	8023e08 <udp_sendto_if+0x90>
 8023df4:	68fb      	ldr	r3, [r7, #12]
 8023df6:	681b      	ldr	r3, [r3, #0]
 8023df8:	2b00      	cmp	r3, #0
 8023dfa:	d005      	beq.n	8023e08 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8023dfc:	68fb      	ldr	r3, [r7, #12]
 8023dfe:	681b      	ldr	r3, [r3, #0]
 8023e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8023e04:	2be0      	cmp	r3, #224	; 0xe0
 8023e06:	d103      	bne.n	8023e10 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8023e08:	6a3b      	ldr	r3, [r7, #32]
 8023e0a:	3304      	adds	r3, #4
 8023e0c:	617b      	str	r3, [r7, #20]
 8023e0e:	e00b      	b.n	8023e28 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8023e10:	68fb      	ldr	r3, [r7, #12]
 8023e12:	681a      	ldr	r2, [r3, #0]
 8023e14:	6a3b      	ldr	r3, [r7, #32]
 8023e16:	3304      	adds	r3, #4
 8023e18:	681b      	ldr	r3, [r3, #0]
 8023e1a:	429a      	cmp	r2, r3
 8023e1c:	d002      	beq.n	8023e24 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8023e1e:	f06f 0303 	mvn.w	r3, #3
 8023e22:	e00d      	b.n	8023e40 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8023e24:	68fb      	ldr	r3, [r7, #12]
 8023e26:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8023e28:	887a      	ldrh	r2, [r7, #2]
 8023e2a:	697b      	ldr	r3, [r7, #20]
 8023e2c:	9301      	str	r3, [sp, #4]
 8023e2e:	6a3b      	ldr	r3, [r7, #32]
 8023e30:	9300      	str	r3, [sp, #0]
 8023e32:	4613      	mov	r3, r2
 8023e34:	687a      	ldr	r2, [r7, #4]
 8023e36:	68b9      	ldr	r1, [r7, #8]
 8023e38:	68f8      	ldr	r0, [r7, #12]
 8023e3a:	f000 f811 	bl	8023e60 <udp_sendto_if_src>
 8023e3e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8023e40:	4618      	mov	r0, r3
 8023e42:	3718      	adds	r7, #24
 8023e44:	46bd      	mov	sp, r7
 8023e46:	bd80      	pop	{r7, pc}
 8023e48:	0802d198 	.word	0x0802d198
 8023e4c:	0802d30c 	.word	0x0802d30c
 8023e50:	0802d1ec 	.word	0x0802d1ec
 8023e54:	0802d328 	.word	0x0802d328
 8023e58:	0802d344 	.word	0x0802d344
 8023e5c:	0802d364 	.word	0x0802d364

08023e60 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8023e60:	b580      	push	{r7, lr}
 8023e62:	b08c      	sub	sp, #48	; 0x30
 8023e64:	af04      	add	r7, sp, #16
 8023e66:	60f8      	str	r0, [r7, #12]
 8023e68:	60b9      	str	r1, [r7, #8]
 8023e6a:	607a      	str	r2, [r7, #4]
 8023e6c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8023e6e:	68fb      	ldr	r3, [r7, #12]
 8023e70:	2b00      	cmp	r3, #0
 8023e72:	d109      	bne.n	8023e88 <udp_sendto_if_src+0x28>
 8023e74:	4b65      	ldr	r3, [pc, #404]	; (802400c <udp_sendto_if_src+0x1ac>)
 8023e76:	f240 22d1 	movw	r2, #721	; 0x2d1
 8023e7a:	4965      	ldr	r1, [pc, #404]	; (8024010 <udp_sendto_if_src+0x1b0>)
 8023e7c:	4865      	ldr	r0, [pc, #404]	; (8024014 <udp_sendto_if_src+0x1b4>)
 8023e7e:	f002 feb5 	bl	8026bec <iprintf>
 8023e82:	f06f 030f 	mvn.w	r3, #15
 8023e86:	e0bc      	b.n	8024002 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8023e88:	68bb      	ldr	r3, [r7, #8]
 8023e8a:	2b00      	cmp	r3, #0
 8023e8c:	d109      	bne.n	8023ea2 <udp_sendto_if_src+0x42>
 8023e8e:	4b5f      	ldr	r3, [pc, #380]	; (802400c <udp_sendto_if_src+0x1ac>)
 8023e90:	f240 22d2 	movw	r2, #722	; 0x2d2
 8023e94:	4960      	ldr	r1, [pc, #384]	; (8024018 <udp_sendto_if_src+0x1b8>)
 8023e96:	485f      	ldr	r0, [pc, #380]	; (8024014 <udp_sendto_if_src+0x1b4>)
 8023e98:	f002 fea8 	bl	8026bec <iprintf>
 8023e9c:	f06f 030f 	mvn.w	r3, #15
 8023ea0:	e0af      	b.n	8024002 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8023ea2:	687b      	ldr	r3, [r7, #4]
 8023ea4:	2b00      	cmp	r3, #0
 8023ea6:	d109      	bne.n	8023ebc <udp_sendto_if_src+0x5c>
 8023ea8:	4b58      	ldr	r3, [pc, #352]	; (802400c <udp_sendto_if_src+0x1ac>)
 8023eaa:	f240 22d3 	movw	r2, #723	; 0x2d3
 8023eae:	495b      	ldr	r1, [pc, #364]	; (802401c <udp_sendto_if_src+0x1bc>)
 8023eb0:	4858      	ldr	r0, [pc, #352]	; (8024014 <udp_sendto_if_src+0x1b4>)
 8023eb2:	f002 fe9b 	bl	8026bec <iprintf>
 8023eb6:	f06f 030f 	mvn.w	r3, #15
 8023eba:	e0a2      	b.n	8024002 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8023ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023ebe:	2b00      	cmp	r3, #0
 8023ec0:	d109      	bne.n	8023ed6 <udp_sendto_if_src+0x76>
 8023ec2:	4b52      	ldr	r3, [pc, #328]	; (802400c <udp_sendto_if_src+0x1ac>)
 8023ec4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8023ec8:	4955      	ldr	r1, [pc, #340]	; (8024020 <udp_sendto_if_src+0x1c0>)
 8023eca:	4852      	ldr	r0, [pc, #328]	; (8024014 <udp_sendto_if_src+0x1b4>)
 8023ecc:	f002 fe8e 	bl	8026bec <iprintf>
 8023ed0:	f06f 030f 	mvn.w	r3, #15
 8023ed4:	e095      	b.n	8024002 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8023ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023ed8:	2b00      	cmp	r3, #0
 8023eda:	d109      	bne.n	8023ef0 <udp_sendto_if_src+0x90>
 8023edc:	4b4b      	ldr	r3, [pc, #300]	; (802400c <udp_sendto_if_src+0x1ac>)
 8023ede:	f240 22d5 	movw	r2, #725	; 0x2d5
 8023ee2:	4950      	ldr	r1, [pc, #320]	; (8024024 <udp_sendto_if_src+0x1c4>)
 8023ee4:	484b      	ldr	r0, [pc, #300]	; (8024014 <udp_sendto_if_src+0x1b4>)
 8023ee6:	f002 fe81 	bl	8026bec <iprintf>
 8023eea:	f06f 030f 	mvn.w	r3, #15
 8023eee:	e088      	b.n	8024002 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8023ef0:	68fb      	ldr	r3, [r7, #12]
 8023ef2:	8a5b      	ldrh	r3, [r3, #18]
 8023ef4:	2b00      	cmp	r3, #0
 8023ef6:	d10f      	bne.n	8023f18 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8023ef8:	68f9      	ldr	r1, [r7, #12]
 8023efa:	68fb      	ldr	r3, [r7, #12]
 8023efc:	8a5b      	ldrh	r3, [r3, #18]
 8023efe:	461a      	mov	r2, r3
 8023f00:	68f8      	ldr	r0, [r7, #12]
 8023f02:	f000 f893 	bl	802402c <udp_bind>
 8023f06:	4603      	mov	r3, r0
 8023f08:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8023f0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8023f0e:	2b00      	cmp	r3, #0
 8023f10:	d002      	beq.n	8023f18 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8023f12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8023f16:	e074      	b.n	8024002 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8023f18:	68bb      	ldr	r3, [r7, #8]
 8023f1a:	891b      	ldrh	r3, [r3, #8]
 8023f1c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8023f20:	4293      	cmp	r3, r2
 8023f22:	d902      	bls.n	8023f2a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8023f24:	f04f 33ff 	mov.w	r3, #4294967295
 8023f28:	e06b      	b.n	8024002 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8023f2a:	2108      	movs	r1, #8
 8023f2c:	68b8      	ldr	r0, [r7, #8]
 8023f2e:	f7ff f88f 	bl	8023050 <pbuf_add_header>
 8023f32:	4603      	mov	r3, r0
 8023f34:	2b00      	cmp	r3, #0
 8023f36:	d015      	beq.n	8023f64 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8023f38:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023f3c:	2108      	movs	r1, #8
 8023f3e:	2022      	movs	r0, #34	; 0x22
 8023f40:	f7fe fe3a 	bl	8022bb8 <pbuf_alloc>
 8023f44:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8023f46:	69fb      	ldr	r3, [r7, #28]
 8023f48:	2b00      	cmp	r3, #0
 8023f4a:	d102      	bne.n	8023f52 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8023f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8023f50:	e057      	b.n	8024002 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8023f52:	68bb      	ldr	r3, [r7, #8]
 8023f54:	891b      	ldrh	r3, [r3, #8]
 8023f56:	2b00      	cmp	r3, #0
 8023f58:	d006      	beq.n	8023f68 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8023f5a:	68b9      	ldr	r1, [r7, #8]
 8023f5c:	69f8      	ldr	r0, [r7, #28]
 8023f5e:	f7ff fa25 	bl	80233ac <pbuf_chain>
 8023f62:	e001      	b.n	8023f68 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8023f64:	68bb      	ldr	r3, [r7, #8]
 8023f66:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8023f68:	69fb      	ldr	r3, [r7, #28]
 8023f6a:	895b      	ldrh	r3, [r3, #10]
 8023f6c:	2b07      	cmp	r3, #7
 8023f6e:	d806      	bhi.n	8023f7e <udp_sendto_if_src+0x11e>
 8023f70:	4b26      	ldr	r3, [pc, #152]	; (802400c <udp_sendto_if_src+0x1ac>)
 8023f72:	f240 320d 	movw	r2, #781	; 0x30d
 8023f76:	492c      	ldr	r1, [pc, #176]	; (8024028 <udp_sendto_if_src+0x1c8>)
 8023f78:	4826      	ldr	r0, [pc, #152]	; (8024014 <udp_sendto_if_src+0x1b4>)
 8023f7a:	f002 fe37 	bl	8026bec <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8023f7e:	69fb      	ldr	r3, [r7, #28]
 8023f80:	685b      	ldr	r3, [r3, #4]
 8023f82:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8023f84:	68fb      	ldr	r3, [r7, #12]
 8023f86:	8a5b      	ldrh	r3, [r3, #18]
 8023f88:	4618      	mov	r0, r3
 8023f8a:	f7fd fd1b 	bl	80219c4 <lwip_htons>
 8023f8e:	4603      	mov	r3, r0
 8023f90:	461a      	mov	r2, r3
 8023f92:	697b      	ldr	r3, [r7, #20]
 8023f94:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8023f96:	887b      	ldrh	r3, [r7, #2]
 8023f98:	4618      	mov	r0, r3
 8023f9a:	f7fd fd13 	bl	80219c4 <lwip_htons>
 8023f9e:	4603      	mov	r3, r0
 8023fa0:	461a      	mov	r2, r3
 8023fa2:	697b      	ldr	r3, [r7, #20]
 8023fa4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8023fa6:	697b      	ldr	r3, [r7, #20]
 8023fa8:	2200      	movs	r2, #0
 8023faa:	719a      	strb	r2, [r3, #6]
 8023fac:	2200      	movs	r2, #0
 8023fae:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8023fb0:	69fb      	ldr	r3, [r7, #28]
 8023fb2:	891b      	ldrh	r3, [r3, #8]
 8023fb4:	4618      	mov	r0, r3
 8023fb6:	f7fd fd05 	bl	80219c4 <lwip_htons>
 8023fba:	4603      	mov	r3, r0
 8023fbc:	461a      	mov	r2, r3
 8023fbe:	697b      	ldr	r3, [r7, #20]
 8023fc0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8023fc2:	2311      	movs	r3, #17
 8023fc4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8023fc6:	68fb      	ldr	r3, [r7, #12]
 8023fc8:	7adb      	ldrb	r3, [r3, #11]
 8023fca:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8023fcc:	68fb      	ldr	r3, [r7, #12]
 8023fce:	7a9b      	ldrb	r3, [r3, #10]
 8023fd0:	7cb9      	ldrb	r1, [r7, #18]
 8023fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023fd4:	9202      	str	r2, [sp, #8]
 8023fd6:	7cfa      	ldrb	r2, [r7, #19]
 8023fd8:	9201      	str	r2, [sp, #4]
 8023fda:	9300      	str	r3, [sp, #0]
 8023fdc:	460b      	mov	r3, r1
 8023fde:	687a      	ldr	r2, [r7, #4]
 8023fe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023fe2:	69f8      	ldr	r0, [r7, #28]
 8023fe4:	f001 fc0c 	bl	8025800 <ip4_output_if_src>
 8023fe8:	4603      	mov	r3, r0
 8023fea:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8023fec:	69fa      	ldr	r2, [r7, #28]
 8023fee:	68bb      	ldr	r3, [r7, #8]
 8023ff0:	429a      	cmp	r2, r3
 8023ff2:	d004      	beq.n	8023ffe <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8023ff4:	69f8      	ldr	r0, [r7, #28]
 8023ff6:	f7ff f8c1 	bl	802317c <pbuf_free>
    q = NULL;
 8023ffa:	2300      	movs	r3, #0
 8023ffc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8023ffe:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8024002:	4618      	mov	r0, r3
 8024004:	3720      	adds	r7, #32
 8024006:	46bd      	mov	sp, r7
 8024008:	bd80      	pop	{r7, pc}
 802400a:	bf00      	nop
 802400c:	0802d198 	.word	0x0802d198
 8024010:	0802d384 	.word	0x0802d384
 8024014:	0802d1ec 	.word	0x0802d1ec
 8024018:	0802d3a4 	.word	0x0802d3a4
 802401c:	0802d3c4 	.word	0x0802d3c4
 8024020:	0802d3e8 	.word	0x0802d3e8
 8024024:	0802d40c 	.word	0x0802d40c
 8024028:	0802d430 	.word	0x0802d430

0802402c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 802402c:	b580      	push	{r7, lr}
 802402e:	b086      	sub	sp, #24
 8024030:	af00      	add	r7, sp, #0
 8024032:	60f8      	str	r0, [r7, #12]
 8024034:	60b9      	str	r1, [r7, #8]
 8024036:	4613      	mov	r3, r2
 8024038:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 802403a:	68bb      	ldr	r3, [r7, #8]
 802403c:	2b00      	cmp	r3, #0
 802403e:	d101      	bne.n	8024044 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8024040:	4b39      	ldr	r3, [pc, #228]	; (8024128 <udp_bind+0xfc>)
 8024042:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8024044:	68fb      	ldr	r3, [r7, #12]
 8024046:	2b00      	cmp	r3, #0
 8024048:	d109      	bne.n	802405e <udp_bind+0x32>
 802404a:	4b38      	ldr	r3, [pc, #224]	; (802412c <udp_bind+0x100>)
 802404c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8024050:	4937      	ldr	r1, [pc, #220]	; (8024130 <udp_bind+0x104>)
 8024052:	4838      	ldr	r0, [pc, #224]	; (8024134 <udp_bind+0x108>)
 8024054:	f002 fdca 	bl	8026bec <iprintf>
 8024058:	f06f 030f 	mvn.w	r3, #15
 802405c:	e060      	b.n	8024120 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 802405e:	2300      	movs	r3, #0
 8024060:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8024062:	4b35      	ldr	r3, [pc, #212]	; (8024138 <udp_bind+0x10c>)
 8024064:	681b      	ldr	r3, [r3, #0]
 8024066:	617b      	str	r3, [r7, #20]
 8024068:	e009      	b.n	802407e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 802406a:	68fa      	ldr	r2, [r7, #12]
 802406c:	697b      	ldr	r3, [r7, #20]
 802406e:	429a      	cmp	r2, r3
 8024070:	d102      	bne.n	8024078 <udp_bind+0x4c>
      rebind = 1;
 8024072:	2301      	movs	r3, #1
 8024074:	74fb      	strb	r3, [r7, #19]
      break;
 8024076:	e005      	b.n	8024084 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8024078:	697b      	ldr	r3, [r7, #20]
 802407a:	68db      	ldr	r3, [r3, #12]
 802407c:	617b      	str	r3, [r7, #20]
 802407e:	697b      	ldr	r3, [r7, #20]
 8024080:	2b00      	cmp	r3, #0
 8024082:	d1f2      	bne.n	802406a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8024084:	88fb      	ldrh	r3, [r7, #6]
 8024086:	2b00      	cmp	r3, #0
 8024088:	d109      	bne.n	802409e <udp_bind+0x72>
    port = udp_new_port();
 802408a:	f7ff fc69 	bl	8023960 <udp_new_port>
 802408e:	4603      	mov	r3, r0
 8024090:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8024092:	88fb      	ldrh	r3, [r7, #6]
 8024094:	2b00      	cmp	r3, #0
 8024096:	d12c      	bne.n	80240f2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8024098:	f06f 0307 	mvn.w	r3, #7
 802409c:	e040      	b.n	8024120 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802409e:	4b26      	ldr	r3, [pc, #152]	; (8024138 <udp_bind+0x10c>)
 80240a0:	681b      	ldr	r3, [r3, #0]
 80240a2:	617b      	str	r3, [r7, #20]
 80240a4:	e022      	b.n	80240ec <udp_bind+0xc0>
      if (pcb != ipcb) {
 80240a6:	68fa      	ldr	r2, [r7, #12]
 80240a8:	697b      	ldr	r3, [r7, #20]
 80240aa:	429a      	cmp	r2, r3
 80240ac:	d01b      	beq.n	80240e6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80240ae:	697b      	ldr	r3, [r7, #20]
 80240b0:	8a5b      	ldrh	r3, [r3, #18]
 80240b2:	88fa      	ldrh	r2, [r7, #6]
 80240b4:	429a      	cmp	r2, r3
 80240b6:	d116      	bne.n	80240e6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80240b8:	697b      	ldr	r3, [r7, #20]
 80240ba:	681a      	ldr	r2, [r3, #0]
 80240bc:	68bb      	ldr	r3, [r7, #8]
 80240be:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80240c0:	429a      	cmp	r2, r3
 80240c2:	d00d      	beq.n	80240e0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80240c4:	68bb      	ldr	r3, [r7, #8]
 80240c6:	2b00      	cmp	r3, #0
 80240c8:	d00a      	beq.n	80240e0 <udp_bind+0xb4>
 80240ca:	68bb      	ldr	r3, [r7, #8]
 80240cc:	681b      	ldr	r3, [r3, #0]
 80240ce:	2b00      	cmp	r3, #0
 80240d0:	d006      	beq.n	80240e0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80240d2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80240d4:	2b00      	cmp	r3, #0
 80240d6:	d003      	beq.n	80240e0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80240d8:	697b      	ldr	r3, [r7, #20]
 80240da:	681b      	ldr	r3, [r3, #0]
 80240dc:	2b00      	cmp	r3, #0
 80240de:	d102      	bne.n	80240e6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80240e0:	f06f 0307 	mvn.w	r3, #7
 80240e4:	e01c      	b.n	8024120 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80240e6:	697b      	ldr	r3, [r7, #20]
 80240e8:	68db      	ldr	r3, [r3, #12]
 80240ea:	617b      	str	r3, [r7, #20]
 80240ec:	697b      	ldr	r3, [r7, #20]
 80240ee:	2b00      	cmp	r3, #0
 80240f0:	d1d9      	bne.n	80240a6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80240f2:	68bb      	ldr	r3, [r7, #8]
 80240f4:	2b00      	cmp	r3, #0
 80240f6:	d002      	beq.n	80240fe <udp_bind+0xd2>
 80240f8:	68bb      	ldr	r3, [r7, #8]
 80240fa:	681b      	ldr	r3, [r3, #0]
 80240fc:	e000      	b.n	8024100 <udp_bind+0xd4>
 80240fe:	2300      	movs	r3, #0
 8024100:	68fa      	ldr	r2, [r7, #12]
 8024102:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8024104:	68fb      	ldr	r3, [r7, #12]
 8024106:	88fa      	ldrh	r2, [r7, #6]
 8024108:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 802410a:	7cfb      	ldrb	r3, [r7, #19]
 802410c:	2b00      	cmp	r3, #0
 802410e:	d106      	bne.n	802411e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8024110:	4b09      	ldr	r3, [pc, #36]	; (8024138 <udp_bind+0x10c>)
 8024112:	681a      	ldr	r2, [r3, #0]
 8024114:	68fb      	ldr	r3, [r7, #12]
 8024116:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8024118:	4a07      	ldr	r2, [pc, #28]	; (8024138 <udp_bind+0x10c>)
 802411a:	68fb      	ldr	r3, [r7, #12]
 802411c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 802411e:	2300      	movs	r3, #0
}
 8024120:	4618      	mov	r0, r3
 8024122:	3718      	adds	r7, #24
 8024124:	46bd      	mov	sp, r7
 8024126:	bd80      	pop	{r7, pc}
 8024128:	0802e078 	.word	0x0802e078
 802412c:	0802d198 	.word	0x0802d198
 8024130:	0802d460 	.word	0x0802d460
 8024134:	0802d1ec 	.word	0x0802d1ec
 8024138:	20015e44 	.word	0x20015e44

0802413c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 802413c:	b580      	push	{r7, lr}
 802413e:	b084      	sub	sp, #16
 8024140:	af00      	add	r7, sp, #0
 8024142:	60f8      	str	r0, [r7, #12]
 8024144:	60b9      	str	r1, [r7, #8]
 8024146:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8024148:	68fb      	ldr	r3, [r7, #12]
 802414a:	2b00      	cmp	r3, #0
 802414c:	d107      	bne.n	802415e <udp_recv+0x22>
 802414e:	4b08      	ldr	r3, [pc, #32]	; (8024170 <udp_recv+0x34>)
 8024150:	f240 428a 	movw	r2, #1162	; 0x48a
 8024154:	4907      	ldr	r1, [pc, #28]	; (8024174 <udp_recv+0x38>)
 8024156:	4808      	ldr	r0, [pc, #32]	; (8024178 <udp_recv+0x3c>)
 8024158:	f002 fd48 	bl	8026bec <iprintf>
 802415c:	e005      	b.n	802416a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 802415e:	68fb      	ldr	r3, [r7, #12]
 8024160:	68ba      	ldr	r2, [r7, #8]
 8024162:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8024164:	68fb      	ldr	r3, [r7, #12]
 8024166:	687a      	ldr	r2, [r7, #4]
 8024168:	61da      	str	r2, [r3, #28]
}
 802416a:	3710      	adds	r7, #16
 802416c:	46bd      	mov	sp, r7
 802416e:	bd80      	pop	{r7, pc}
 8024170:	0802d198 	.word	0x0802d198
 8024174:	0802d4cc 	.word	0x0802d4cc
 8024178:	0802d1ec 	.word	0x0802d1ec

0802417c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 802417c:	b580      	push	{r7, lr}
 802417e:	b084      	sub	sp, #16
 8024180:	af00      	add	r7, sp, #0
 8024182:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8024184:	687b      	ldr	r3, [r7, #4]
 8024186:	2b00      	cmp	r3, #0
 8024188:	d107      	bne.n	802419a <udp_remove+0x1e>
 802418a:	4b19      	ldr	r3, [pc, #100]	; (80241f0 <udp_remove+0x74>)
 802418c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8024190:	4918      	ldr	r1, [pc, #96]	; (80241f4 <udp_remove+0x78>)
 8024192:	4819      	ldr	r0, [pc, #100]	; (80241f8 <udp_remove+0x7c>)
 8024194:	f002 fd2a 	bl	8026bec <iprintf>
 8024198:	e026      	b.n	80241e8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 802419a:	4b18      	ldr	r3, [pc, #96]	; (80241fc <udp_remove+0x80>)
 802419c:	681b      	ldr	r3, [r3, #0]
 802419e:	687a      	ldr	r2, [r7, #4]
 80241a0:	429a      	cmp	r2, r3
 80241a2:	d105      	bne.n	80241b0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80241a4:	4b15      	ldr	r3, [pc, #84]	; (80241fc <udp_remove+0x80>)
 80241a6:	681b      	ldr	r3, [r3, #0]
 80241a8:	68db      	ldr	r3, [r3, #12]
 80241aa:	4a14      	ldr	r2, [pc, #80]	; (80241fc <udp_remove+0x80>)
 80241ac:	6013      	str	r3, [r2, #0]
 80241ae:	e017      	b.n	80241e0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80241b0:	4b12      	ldr	r3, [pc, #72]	; (80241fc <udp_remove+0x80>)
 80241b2:	681b      	ldr	r3, [r3, #0]
 80241b4:	60fb      	str	r3, [r7, #12]
 80241b6:	e010      	b.n	80241da <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80241b8:	68fb      	ldr	r3, [r7, #12]
 80241ba:	68db      	ldr	r3, [r3, #12]
 80241bc:	2b00      	cmp	r3, #0
 80241be:	d009      	beq.n	80241d4 <udp_remove+0x58>
 80241c0:	68fb      	ldr	r3, [r7, #12]
 80241c2:	68db      	ldr	r3, [r3, #12]
 80241c4:	687a      	ldr	r2, [r7, #4]
 80241c6:	429a      	cmp	r2, r3
 80241c8:	d104      	bne.n	80241d4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80241ca:	687b      	ldr	r3, [r7, #4]
 80241cc:	68da      	ldr	r2, [r3, #12]
 80241ce:	68fb      	ldr	r3, [r7, #12]
 80241d0:	60da      	str	r2, [r3, #12]
        break;
 80241d2:	e005      	b.n	80241e0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80241d4:	68fb      	ldr	r3, [r7, #12]
 80241d6:	68db      	ldr	r3, [r3, #12]
 80241d8:	60fb      	str	r3, [r7, #12]
 80241da:	68fb      	ldr	r3, [r7, #12]
 80241dc:	2b00      	cmp	r3, #0
 80241de:	d1eb      	bne.n	80241b8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80241e0:	6879      	ldr	r1, [r7, #4]
 80241e2:	2000      	movs	r0, #0
 80241e4:	f7fe f8ba 	bl	802235c <memp_free>
}
 80241e8:	3710      	adds	r7, #16
 80241ea:	46bd      	mov	sp, r7
 80241ec:	bd80      	pop	{r7, pc}
 80241ee:	bf00      	nop
 80241f0:	0802d198 	.word	0x0802d198
 80241f4:	0802d4e4 	.word	0x0802d4e4
 80241f8:	0802d1ec 	.word	0x0802d1ec
 80241fc:	20015e44 	.word	0x20015e44

08024200 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8024200:	b580      	push	{r7, lr}
 8024202:	b082      	sub	sp, #8
 8024204:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8024206:	2000      	movs	r0, #0
 8024208:	f7fe f838 	bl	802227c <memp_malloc>
 802420c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 802420e:	687b      	ldr	r3, [r7, #4]
 8024210:	2b00      	cmp	r3, #0
 8024212:	d007      	beq.n	8024224 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8024214:	2220      	movs	r2, #32
 8024216:	2100      	movs	r1, #0
 8024218:	6878      	ldr	r0, [r7, #4]
 802421a:	f002 fbff 	bl	8026a1c <memset>
    pcb->ttl = UDP_TTL;
 802421e:	687b      	ldr	r3, [r7, #4]
 8024220:	22ff      	movs	r2, #255	; 0xff
 8024222:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8024224:	687b      	ldr	r3, [r7, #4]
}
 8024226:	4618      	mov	r0, r3
 8024228:	3708      	adds	r7, #8
 802422a:	46bd      	mov	sp, r7
 802422c:	bd80      	pop	{r7, pc}
	...

08024230 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8024230:	b480      	push	{r7}
 8024232:	b085      	sub	sp, #20
 8024234:	af00      	add	r7, sp, #0
 8024236:	6078      	str	r0, [r7, #4]
 8024238:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 802423a:	687b      	ldr	r3, [r7, #4]
 802423c:	2b00      	cmp	r3, #0
 802423e:	d01e      	beq.n	802427e <udp_netif_ip_addr_changed+0x4e>
 8024240:	687b      	ldr	r3, [r7, #4]
 8024242:	681b      	ldr	r3, [r3, #0]
 8024244:	2b00      	cmp	r3, #0
 8024246:	d01a      	beq.n	802427e <udp_netif_ip_addr_changed+0x4e>
 8024248:	683b      	ldr	r3, [r7, #0]
 802424a:	2b00      	cmp	r3, #0
 802424c:	d017      	beq.n	802427e <udp_netif_ip_addr_changed+0x4e>
 802424e:	683b      	ldr	r3, [r7, #0]
 8024250:	681b      	ldr	r3, [r3, #0]
 8024252:	2b00      	cmp	r3, #0
 8024254:	d013      	beq.n	802427e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8024256:	4b0d      	ldr	r3, [pc, #52]	; (802428c <udp_netif_ip_addr_changed+0x5c>)
 8024258:	681b      	ldr	r3, [r3, #0]
 802425a:	60fb      	str	r3, [r7, #12]
 802425c:	e00c      	b.n	8024278 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802425e:	68fb      	ldr	r3, [r7, #12]
 8024260:	681a      	ldr	r2, [r3, #0]
 8024262:	687b      	ldr	r3, [r7, #4]
 8024264:	681b      	ldr	r3, [r3, #0]
 8024266:	429a      	cmp	r2, r3
 8024268:	d103      	bne.n	8024272 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802426a:	683b      	ldr	r3, [r7, #0]
 802426c:	681a      	ldr	r2, [r3, #0]
 802426e:	68fb      	ldr	r3, [r7, #12]
 8024270:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8024272:	68fb      	ldr	r3, [r7, #12]
 8024274:	68db      	ldr	r3, [r3, #12]
 8024276:	60fb      	str	r3, [r7, #12]
 8024278:	68fb      	ldr	r3, [r7, #12]
 802427a:	2b00      	cmp	r3, #0
 802427c:	d1ef      	bne.n	802425e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 802427e:	bf00      	nop
 8024280:	3714      	adds	r7, #20
 8024282:	46bd      	mov	sp, r7
 8024284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024288:	4770      	bx	lr
 802428a:	bf00      	nop
 802428c:	20015e44 	.word	0x20015e44

08024290 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8024290:	b580      	push	{r7, lr}
 8024292:	b082      	sub	sp, #8
 8024294:	af00      	add	r7, sp, #0
 8024296:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8024298:	4915      	ldr	r1, [pc, #84]	; (80242f0 <etharp_free_entry+0x60>)
 802429a:	687a      	ldr	r2, [r7, #4]
 802429c:	4613      	mov	r3, r2
 802429e:	005b      	lsls	r3, r3, #1
 80242a0:	4413      	add	r3, r2
 80242a2:	00db      	lsls	r3, r3, #3
 80242a4:	440b      	add	r3, r1
 80242a6:	681b      	ldr	r3, [r3, #0]
 80242a8:	2b00      	cmp	r3, #0
 80242aa:	d013      	beq.n	80242d4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80242ac:	4910      	ldr	r1, [pc, #64]	; (80242f0 <etharp_free_entry+0x60>)
 80242ae:	687a      	ldr	r2, [r7, #4]
 80242b0:	4613      	mov	r3, r2
 80242b2:	005b      	lsls	r3, r3, #1
 80242b4:	4413      	add	r3, r2
 80242b6:	00db      	lsls	r3, r3, #3
 80242b8:	440b      	add	r3, r1
 80242ba:	681b      	ldr	r3, [r3, #0]
 80242bc:	4618      	mov	r0, r3
 80242be:	f7fe ff5d 	bl	802317c <pbuf_free>
    arp_table[i].q = NULL;
 80242c2:	490b      	ldr	r1, [pc, #44]	; (80242f0 <etharp_free_entry+0x60>)
 80242c4:	687a      	ldr	r2, [r7, #4]
 80242c6:	4613      	mov	r3, r2
 80242c8:	005b      	lsls	r3, r3, #1
 80242ca:	4413      	add	r3, r2
 80242cc:	00db      	lsls	r3, r3, #3
 80242ce:	440b      	add	r3, r1
 80242d0:	2200      	movs	r2, #0
 80242d2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80242d4:	4906      	ldr	r1, [pc, #24]	; (80242f0 <etharp_free_entry+0x60>)
 80242d6:	687a      	ldr	r2, [r7, #4]
 80242d8:	4613      	mov	r3, r2
 80242da:	005b      	lsls	r3, r3, #1
 80242dc:	4413      	add	r3, r2
 80242de:	00db      	lsls	r3, r3, #3
 80242e0:	440b      	add	r3, r1
 80242e2:	3314      	adds	r3, #20
 80242e4:	2200      	movs	r2, #0
 80242e6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80242e8:	bf00      	nop
 80242ea:	3708      	adds	r7, #8
 80242ec:	46bd      	mov	sp, r7
 80242ee:	bd80      	pop	{r7, pc}
 80242f0:	20015e48 	.word	0x20015e48

080242f4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80242f4:	b580      	push	{r7, lr}
 80242f6:	b082      	sub	sp, #8
 80242f8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80242fa:	2300      	movs	r3, #0
 80242fc:	607b      	str	r3, [r7, #4]
 80242fe:	e096      	b.n	802442e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8024300:	494f      	ldr	r1, [pc, #316]	; (8024440 <etharp_tmr+0x14c>)
 8024302:	687a      	ldr	r2, [r7, #4]
 8024304:	4613      	mov	r3, r2
 8024306:	005b      	lsls	r3, r3, #1
 8024308:	4413      	add	r3, r2
 802430a:	00db      	lsls	r3, r3, #3
 802430c:	440b      	add	r3, r1
 802430e:	3314      	adds	r3, #20
 8024310:	781b      	ldrb	r3, [r3, #0]
 8024312:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8024314:	78fb      	ldrb	r3, [r7, #3]
 8024316:	2b00      	cmp	r3, #0
 8024318:	f000 8086 	beq.w	8024428 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 802431c:	4948      	ldr	r1, [pc, #288]	; (8024440 <etharp_tmr+0x14c>)
 802431e:	687a      	ldr	r2, [r7, #4]
 8024320:	4613      	mov	r3, r2
 8024322:	005b      	lsls	r3, r3, #1
 8024324:	4413      	add	r3, r2
 8024326:	00db      	lsls	r3, r3, #3
 8024328:	440b      	add	r3, r1
 802432a:	3312      	adds	r3, #18
 802432c:	881b      	ldrh	r3, [r3, #0]
 802432e:	3301      	adds	r3, #1
 8024330:	b298      	uxth	r0, r3
 8024332:	4943      	ldr	r1, [pc, #268]	; (8024440 <etharp_tmr+0x14c>)
 8024334:	687a      	ldr	r2, [r7, #4]
 8024336:	4613      	mov	r3, r2
 8024338:	005b      	lsls	r3, r3, #1
 802433a:	4413      	add	r3, r2
 802433c:	00db      	lsls	r3, r3, #3
 802433e:	440b      	add	r3, r1
 8024340:	3312      	adds	r3, #18
 8024342:	4602      	mov	r2, r0
 8024344:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8024346:	493e      	ldr	r1, [pc, #248]	; (8024440 <etharp_tmr+0x14c>)
 8024348:	687a      	ldr	r2, [r7, #4]
 802434a:	4613      	mov	r3, r2
 802434c:	005b      	lsls	r3, r3, #1
 802434e:	4413      	add	r3, r2
 8024350:	00db      	lsls	r3, r3, #3
 8024352:	440b      	add	r3, r1
 8024354:	3312      	adds	r3, #18
 8024356:	881b      	ldrh	r3, [r3, #0]
 8024358:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 802435c:	d215      	bcs.n	802438a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802435e:	4938      	ldr	r1, [pc, #224]	; (8024440 <etharp_tmr+0x14c>)
 8024360:	687a      	ldr	r2, [r7, #4]
 8024362:	4613      	mov	r3, r2
 8024364:	005b      	lsls	r3, r3, #1
 8024366:	4413      	add	r3, r2
 8024368:	00db      	lsls	r3, r3, #3
 802436a:	440b      	add	r3, r1
 802436c:	3314      	adds	r3, #20
 802436e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8024370:	2b01      	cmp	r3, #1
 8024372:	d10e      	bne.n	8024392 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8024374:	4932      	ldr	r1, [pc, #200]	; (8024440 <etharp_tmr+0x14c>)
 8024376:	687a      	ldr	r2, [r7, #4]
 8024378:	4613      	mov	r3, r2
 802437a:	005b      	lsls	r3, r3, #1
 802437c:	4413      	add	r3, r2
 802437e:	00db      	lsls	r3, r3, #3
 8024380:	440b      	add	r3, r1
 8024382:	3312      	adds	r3, #18
 8024384:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8024386:	2b04      	cmp	r3, #4
 8024388:	d903      	bls.n	8024392 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 802438a:	6878      	ldr	r0, [r7, #4]
 802438c:	f7ff ff80 	bl	8024290 <etharp_free_entry>
 8024390:	e04a      	b.n	8024428 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8024392:	492b      	ldr	r1, [pc, #172]	; (8024440 <etharp_tmr+0x14c>)
 8024394:	687a      	ldr	r2, [r7, #4]
 8024396:	4613      	mov	r3, r2
 8024398:	005b      	lsls	r3, r3, #1
 802439a:	4413      	add	r3, r2
 802439c:	00db      	lsls	r3, r3, #3
 802439e:	440b      	add	r3, r1
 80243a0:	3314      	adds	r3, #20
 80243a2:	781b      	ldrb	r3, [r3, #0]
 80243a4:	2b03      	cmp	r3, #3
 80243a6:	d10a      	bne.n	80243be <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80243a8:	4925      	ldr	r1, [pc, #148]	; (8024440 <etharp_tmr+0x14c>)
 80243aa:	687a      	ldr	r2, [r7, #4]
 80243ac:	4613      	mov	r3, r2
 80243ae:	005b      	lsls	r3, r3, #1
 80243b0:	4413      	add	r3, r2
 80243b2:	00db      	lsls	r3, r3, #3
 80243b4:	440b      	add	r3, r1
 80243b6:	3314      	adds	r3, #20
 80243b8:	2204      	movs	r2, #4
 80243ba:	701a      	strb	r2, [r3, #0]
 80243bc:	e034      	b.n	8024428 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80243be:	4920      	ldr	r1, [pc, #128]	; (8024440 <etharp_tmr+0x14c>)
 80243c0:	687a      	ldr	r2, [r7, #4]
 80243c2:	4613      	mov	r3, r2
 80243c4:	005b      	lsls	r3, r3, #1
 80243c6:	4413      	add	r3, r2
 80243c8:	00db      	lsls	r3, r3, #3
 80243ca:	440b      	add	r3, r1
 80243cc:	3314      	adds	r3, #20
 80243ce:	781b      	ldrb	r3, [r3, #0]
 80243d0:	2b04      	cmp	r3, #4
 80243d2:	d10a      	bne.n	80243ea <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80243d4:	491a      	ldr	r1, [pc, #104]	; (8024440 <etharp_tmr+0x14c>)
 80243d6:	687a      	ldr	r2, [r7, #4]
 80243d8:	4613      	mov	r3, r2
 80243da:	005b      	lsls	r3, r3, #1
 80243dc:	4413      	add	r3, r2
 80243de:	00db      	lsls	r3, r3, #3
 80243e0:	440b      	add	r3, r1
 80243e2:	3314      	adds	r3, #20
 80243e4:	2202      	movs	r2, #2
 80243e6:	701a      	strb	r2, [r3, #0]
 80243e8:	e01e      	b.n	8024428 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80243ea:	4915      	ldr	r1, [pc, #84]	; (8024440 <etharp_tmr+0x14c>)
 80243ec:	687a      	ldr	r2, [r7, #4]
 80243ee:	4613      	mov	r3, r2
 80243f0:	005b      	lsls	r3, r3, #1
 80243f2:	4413      	add	r3, r2
 80243f4:	00db      	lsls	r3, r3, #3
 80243f6:	440b      	add	r3, r1
 80243f8:	3314      	adds	r3, #20
 80243fa:	781b      	ldrb	r3, [r3, #0]
 80243fc:	2b01      	cmp	r3, #1
 80243fe:	d113      	bne.n	8024428 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8024400:	490f      	ldr	r1, [pc, #60]	; (8024440 <etharp_tmr+0x14c>)
 8024402:	687a      	ldr	r2, [r7, #4]
 8024404:	4613      	mov	r3, r2
 8024406:	005b      	lsls	r3, r3, #1
 8024408:	4413      	add	r3, r2
 802440a:	00db      	lsls	r3, r3, #3
 802440c:	440b      	add	r3, r1
 802440e:	3308      	adds	r3, #8
 8024410:	6818      	ldr	r0, [r3, #0]
 8024412:	687a      	ldr	r2, [r7, #4]
 8024414:	4613      	mov	r3, r2
 8024416:	005b      	lsls	r3, r3, #1
 8024418:	4413      	add	r3, r2
 802441a:	00db      	lsls	r3, r3, #3
 802441c:	4a08      	ldr	r2, [pc, #32]	; (8024440 <etharp_tmr+0x14c>)
 802441e:	4413      	add	r3, r2
 8024420:	3304      	adds	r3, #4
 8024422:	4619      	mov	r1, r3
 8024424:	f000 fe6e 	bl	8025104 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024428:	687b      	ldr	r3, [r7, #4]
 802442a:	3301      	adds	r3, #1
 802442c:	607b      	str	r3, [r7, #4]
 802442e:	687b      	ldr	r3, [r7, #4]
 8024430:	2b31      	cmp	r3, #49	; 0x31
 8024432:	f77f af65 	ble.w	8024300 <etharp_tmr+0xc>
      }
    }
  }
}
 8024436:	bf00      	nop
 8024438:	bf00      	nop
 802443a:	3708      	adds	r7, #8
 802443c:	46bd      	mov	sp, r7
 802443e:	bd80      	pop	{r7, pc}
 8024440:	20015e48 	.word	0x20015e48

08024444 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8024444:	b580      	push	{r7, lr}
 8024446:	b08a      	sub	sp, #40	; 0x28
 8024448:	af00      	add	r7, sp, #0
 802444a:	60f8      	str	r0, [r7, #12]
 802444c:	460b      	mov	r3, r1
 802444e:	607a      	str	r2, [r7, #4]
 8024450:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8024452:	2332      	movs	r3, #50	; 0x32
 8024454:	84fb      	strh	r3, [r7, #38]	; 0x26
 8024456:	2332      	movs	r3, #50	; 0x32
 8024458:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 802445a:	2332      	movs	r3, #50	; 0x32
 802445c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 802445e:	2300      	movs	r3, #0
 8024460:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8024462:	2332      	movs	r3, #50	; 0x32
 8024464:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8024466:	2300      	movs	r3, #0
 8024468:	83bb      	strh	r3, [r7, #28]
 802446a:	2300      	movs	r3, #0
 802446c:	837b      	strh	r3, [r7, #26]
 802446e:	2300      	movs	r3, #0
 8024470:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024472:	2300      	movs	r3, #0
 8024474:	843b      	strh	r3, [r7, #32]
 8024476:	e0ae      	b.n	80245d6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8024478:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802447c:	49a6      	ldr	r1, [pc, #664]	; (8024718 <etharp_find_entry+0x2d4>)
 802447e:	4613      	mov	r3, r2
 8024480:	005b      	lsls	r3, r3, #1
 8024482:	4413      	add	r3, r2
 8024484:	00db      	lsls	r3, r3, #3
 8024486:	440b      	add	r3, r1
 8024488:	3314      	adds	r3, #20
 802448a:	781b      	ldrb	r3, [r3, #0]
 802448c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 802448e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8024492:	2b32      	cmp	r3, #50	; 0x32
 8024494:	d105      	bne.n	80244a2 <etharp_find_entry+0x5e>
 8024496:	7dfb      	ldrb	r3, [r7, #23]
 8024498:	2b00      	cmp	r3, #0
 802449a:	d102      	bne.n	80244a2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 802449c:	8c3b      	ldrh	r3, [r7, #32]
 802449e:	847b      	strh	r3, [r7, #34]	; 0x22
 80244a0:	e095      	b.n	80245ce <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80244a2:	7dfb      	ldrb	r3, [r7, #23]
 80244a4:	2b00      	cmp	r3, #0
 80244a6:	f000 8092 	beq.w	80245ce <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80244aa:	7dfb      	ldrb	r3, [r7, #23]
 80244ac:	2b01      	cmp	r3, #1
 80244ae:	d009      	beq.n	80244c4 <etharp_find_entry+0x80>
 80244b0:	7dfb      	ldrb	r3, [r7, #23]
 80244b2:	2b01      	cmp	r3, #1
 80244b4:	d806      	bhi.n	80244c4 <etharp_find_entry+0x80>
 80244b6:	4b99      	ldr	r3, [pc, #612]	; (802471c <etharp_find_entry+0x2d8>)
 80244b8:	f240 1223 	movw	r2, #291	; 0x123
 80244bc:	4998      	ldr	r1, [pc, #608]	; (8024720 <etharp_find_entry+0x2dc>)
 80244be:	4899      	ldr	r0, [pc, #612]	; (8024724 <etharp_find_entry+0x2e0>)
 80244c0:	f002 fb94 	bl	8026bec <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80244c4:	68fb      	ldr	r3, [r7, #12]
 80244c6:	2b00      	cmp	r3, #0
 80244c8:	d020      	beq.n	802450c <etharp_find_entry+0xc8>
 80244ca:	68fb      	ldr	r3, [r7, #12]
 80244cc:	6819      	ldr	r1, [r3, #0]
 80244ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80244d2:	4891      	ldr	r0, [pc, #580]	; (8024718 <etharp_find_entry+0x2d4>)
 80244d4:	4613      	mov	r3, r2
 80244d6:	005b      	lsls	r3, r3, #1
 80244d8:	4413      	add	r3, r2
 80244da:	00db      	lsls	r3, r3, #3
 80244dc:	4403      	add	r3, r0
 80244de:	3304      	adds	r3, #4
 80244e0:	681b      	ldr	r3, [r3, #0]
 80244e2:	4299      	cmp	r1, r3
 80244e4:	d112      	bne.n	802450c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80244e6:	687b      	ldr	r3, [r7, #4]
 80244e8:	2b00      	cmp	r3, #0
 80244ea:	d00c      	beq.n	8024506 <etharp_find_entry+0xc2>
 80244ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80244f0:	4989      	ldr	r1, [pc, #548]	; (8024718 <etharp_find_entry+0x2d4>)
 80244f2:	4613      	mov	r3, r2
 80244f4:	005b      	lsls	r3, r3, #1
 80244f6:	4413      	add	r3, r2
 80244f8:	00db      	lsls	r3, r3, #3
 80244fa:	440b      	add	r3, r1
 80244fc:	3308      	adds	r3, #8
 80244fe:	681b      	ldr	r3, [r3, #0]
 8024500:	687a      	ldr	r2, [r7, #4]
 8024502:	429a      	cmp	r2, r3
 8024504:	d102      	bne.n	802450c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8024506:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802450a:	e100      	b.n	802470e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 802450c:	7dfb      	ldrb	r3, [r7, #23]
 802450e:	2b01      	cmp	r3, #1
 8024510:	d140      	bne.n	8024594 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8024512:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024516:	4980      	ldr	r1, [pc, #512]	; (8024718 <etharp_find_entry+0x2d4>)
 8024518:	4613      	mov	r3, r2
 802451a:	005b      	lsls	r3, r3, #1
 802451c:	4413      	add	r3, r2
 802451e:	00db      	lsls	r3, r3, #3
 8024520:	440b      	add	r3, r1
 8024522:	681b      	ldr	r3, [r3, #0]
 8024524:	2b00      	cmp	r3, #0
 8024526:	d01a      	beq.n	802455e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8024528:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802452c:	497a      	ldr	r1, [pc, #488]	; (8024718 <etharp_find_entry+0x2d4>)
 802452e:	4613      	mov	r3, r2
 8024530:	005b      	lsls	r3, r3, #1
 8024532:	4413      	add	r3, r2
 8024534:	00db      	lsls	r3, r3, #3
 8024536:	440b      	add	r3, r1
 8024538:	3312      	adds	r3, #18
 802453a:	881b      	ldrh	r3, [r3, #0]
 802453c:	8bba      	ldrh	r2, [r7, #28]
 802453e:	429a      	cmp	r2, r3
 8024540:	d845      	bhi.n	80245ce <etharp_find_entry+0x18a>
            old_queue = i;
 8024542:	8c3b      	ldrh	r3, [r7, #32]
 8024544:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8024546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802454a:	4973      	ldr	r1, [pc, #460]	; (8024718 <etharp_find_entry+0x2d4>)
 802454c:	4613      	mov	r3, r2
 802454e:	005b      	lsls	r3, r3, #1
 8024550:	4413      	add	r3, r2
 8024552:	00db      	lsls	r3, r3, #3
 8024554:	440b      	add	r3, r1
 8024556:	3312      	adds	r3, #18
 8024558:	881b      	ldrh	r3, [r3, #0]
 802455a:	83bb      	strh	r3, [r7, #28]
 802455c:	e037      	b.n	80245ce <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 802455e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024562:	496d      	ldr	r1, [pc, #436]	; (8024718 <etharp_find_entry+0x2d4>)
 8024564:	4613      	mov	r3, r2
 8024566:	005b      	lsls	r3, r3, #1
 8024568:	4413      	add	r3, r2
 802456a:	00db      	lsls	r3, r3, #3
 802456c:	440b      	add	r3, r1
 802456e:	3312      	adds	r3, #18
 8024570:	881b      	ldrh	r3, [r3, #0]
 8024572:	8b7a      	ldrh	r2, [r7, #26]
 8024574:	429a      	cmp	r2, r3
 8024576:	d82a      	bhi.n	80245ce <etharp_find_entry+0x18a>
            old_pending = i;
 8024578:	8c3b      	ldrh	r3, [r7, #32]
 802457a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 802457c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024580:	4965      	ldr	r1, [pc, #404]	; (8024718 <etharp_find_entry+0x2d4>)
 8024582:	4613      	mov	r3, r2
 8024584:	005b      	lsls	r3, r3, #1
 8024586:	4413      	add	r3, r2
 8024588:	00db      	lsls	r3, r3, #3
 802458a:	440b      	add	r3, r1
 802458c:	3312      	adds	r3, #18
 802458e:	881b      	ldrh	r3, [r3, #0]
 8024590:	837b      	strh	r3, [r7, #26]
 8024592:	e01c      	b.n	80245ce <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8024594:	7dfb      	ldrb	r3, [r7, #23]
 8024596:	2b01      	cmp	r3, #1
 8024598:	d919      	bls.n	80245ce <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 802459a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802459e:	495e      	ldr	r1, [pc, #376]	; (8024718 <etharp_find_entry+0x2d4>)
 80245a0:	4613      	mov	r3, r2
 80245a2:	005b      	lsls	r3, r3, #1
 80245a4:	4413      	add	r3, r2
 80245a6:	00db      	lsls	r3, r3, #3
 80245a8:	440b      	add	r3, r1
 80245aa:	3312      	adds	r3, #18
 80245ac:	881b      	ldrh	r3, [r3, #0]
 80245ae:	8b3a      	ldrh	r2, [r7, #24]
 80245b0:	429a      	cmp	r2, r3
 80245b2:	d80c      	bhi.n	80245ce <etharp_find_entry+0x18a>
            old_stable = i;
 80245b4:	8c3b      	ldrh	r3, [r7, #32]
 80245b6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80245b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80245bc:	4956      	ldr	r1, [pc, #344]	; (8024718 <etharp_find_entry+0x2d4>)
 80245be:	4613      	mov	r3, r2
 80245c0:	005b      	lsls	r3, r3, #1
 80245c2:	4413      	add	r3, r2
 80245c4:	00db      	lsls	r3, r3, #3
 80245c6:	440b      	add	r3, r1
 80245c8:	3312      	adds	r3, #18
 80245ca:	881b      	ldrh	r3, [r3, #0]
 80245cc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80245ce:	8c3b      	ldrh	r3, [r7, #32]
 80245d0:	3301      	adds	r3, #1
 80245d2:	b29b      	uxth	r3, r3
 80245d4:	843b      	strh	r3, [r7, #32]
 80245d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80245da:	2b31      	cmp	r3, #49	; 0x31
 80245dc:	f77f af4c 	ble.w	8024478 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80245e0:	7afb      	ldrb	r3, [r7, #11]
 80245e2:	f003 0302 	and.w	r3, r3, #2
 80245e6:	2b00      	cmp	r3, #0
 80245e8:	d108      	bne.n	80245fc <etharp_find_entry+0x1b8>
 80245ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80245ee:	2b32      	cmp	r3, #50	; 0x32
 80245f0:	d107      	bne.n	8024602 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80245f2:	7afb      	ldrb	r3, [r7, #11]
 80245f4:	f003 0301 	and.w	r3, r3, #1
 80245f8:	2b00      	cmp	r3, #0
 80245fa:	d102      	bne.n	8024602 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80245fc:	f04f 33ff 	mov.w	r3, #4294967295
 8024600:	e085      	b.n	802470e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8024602:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8024606:	2b31      	cmp	r3, #49	; 0x31
 8024608:	dc02      	bgt.n	8024610 <etharp_find_entry+0x1cc>
    i = empty;
 802460a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802460c:	843b      	strh	r3, [r7, #32]
 802460e:	e039      	b.n	8024684 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8024610:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8024614:	2b31      	cmp	r3, #49	; 0x31
 8024616:	dc14      	bgt.n	8024642 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8024618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802461a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 802461c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024620:	493d      	ldr	r1, [pc, #244]	; (8024718 <etharp_find_entry+0x2d4>)
 8024622:	4613      	mov	r3, r2
 8024624:	005b      	lsls	r3, r3, #1
 8024626:	4413      	add	r3, r2
 8024628:	00db      	lsls	r3, r3, #3
 802462a:	440b      	add	r3, r1
 802462c:	681b      	ldr	r3, [r3, #0]
 802462e:	2b00      	cmp	r3, #0
 8024630:	d018      	beq.n	8024664 <etharp_find_entry+0x220>
 8024632:	4b3a      	ldr	r3, [pc, #232]	; (802471c <etharp_find_entry+0x2d8>)
 8024634:	f240 126d 	movw	r2, #365	; 0x16d
 8024638:	493b      	ldr	r1, [pc, #236]	; (8024728 <etharp_find_entry+0x2e4>)
 802463a:	483a      	ldr	r0, [pc, #232]	; (8024724 <etharp_find_entry+0x2e0>)
 802463c:	f002 fad6 	bl	8026bec <iprintf>
 8024640:	e010      	b.n	8024664 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8024642:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8024646:	2b31      	cmp	r3, #49	; 0x31
 8024648:	dc02      	bgt.n	8024650 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 802464a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802464c:	843b      	strh	r3, [r7, #32]
 802464e:	e009      	b.n	8024664 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8024650:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8024654:	2b31      	cmp	r3, #49	; 0x31
 8024656:	dc02      	bgt.n	802465e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8024658:	8bfb      	ldrh	r3, [r7, #30]
 802465a:	843b      	strh	r3, [r7, #32]
 802465c:	e002      	b.n	8024664 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 802465e:	f04f 33ff 	mov.w	r3, #4294967295
 8024662:	e054      	b.n	802470e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8024664:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8024668:	2b31      	cmp	r3, #49	; 0x31
 802466a:	dd06      	ble.n	802467a <etharp_find_entry+0x236>
 802466c:	4b2b      	ldr	r3, [pc, #172]	; (802471c <etharp_find_entry+0x2d8>)
 802466e:	f240 127f 	movw	r2, #383	; 0x17f
 8024672:	492e      	ldr	r1, [pc, #184]	; (802472c <etharp_find_entry+0x2e8>)
 8024674:	482b      	ldr	r0, [pc, #172]	; (8024724 <etharp_find_entry+0x2e0>)
 8024676:	f002 fab9 	bl	8026bec <iprintf>
    etharp_free_entry(i);
 802467a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802467e:	4618      	mov	r0, r3
 8024680:	f7ff fe06 	bl	8024290 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8024684:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8024688:	2b31      	cmp	r3, #49	; 0x31
 802468a:	dd06      	ble.n	802469a <etharp_find_entry+0x256>
 802468c:	4b23      	ldr	r3, [pc, #140]	; (802471c <etharp_find_entry+0x2d8>)
 802468e:	f240 1283 	movw	r2, #387	; 0x183
 8024692:	4926      	ldr	r1, [pc, #152]	; (802472c <etharp_find_entry+0x2e8>)
 8024694:	4823      	ldr	r0, [pc, #140]	; (8024724 <etharp_find_entry+0x2e0>)
 8024696:	f002 faa9 	bl	8026bec <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 802469a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802469e:	491e      	ldr	r1, [pc, #120]	; (8024718 <etharp_find_entry+0x2d4>)
 80246a0:	4613      	mov	r3, r2
 80246a2:	005b      	lsls	r3, r3, #1
 80246a4:	4413      	add	r3, r2
 80246a6:	00db      	lsls	r3, r3, #3
 80246a8:	440b      	add	r3, r1
 80246aa:	3314      	adds	r3, #20
 80246ac:	781b      	ldrb	r3, [r3, #0]
 80246ae:	2b00      	cmp	r3, #0
 80246b0:	d006      	beq.n	80246c0 <etharp_find_entry+0x27c>
 80246b2:	4b1a      	ldr	r3, [pc, #104]	; (802471c <etharp_find_entry+0x2d8>)
 80246b4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80246b8:	491d      	ldr	r1, [pc, #116]	; (8024730 <etharp_find_entry+0x2ec>)
 80246ba:	481a      	ldr	r0, [pc, #104]	; (8024724 <etharp_find_entry+0x2e0>)
 80246bc:	f002 fa96 	bl	8026bec <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80246c0:	68fb      	ldr	r3, [r7, #12]
 80246c2:	2b00      	cmp	r3, #0
 80246c4:	d00b      	beq.n	80246de <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80246c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80246ca:	68fb      	ldr	r3, [r7, #12]
 80246cc:	6819      	ldr	r1, [r3, #0]
 80246ce:	4812      	ldr	r0, [pc, #72]	; (8024718 <etharp_find_entry+0x2d4>)
 80246d0:	4613      	mov	r3, r2
 80246d2:	005b      	lsls	r3, r3, #1
 80246d4:	4413      	add	r3, r2
 80246d6:	00db      	lsls	r3, r3, #3
 80246d8:	4403      	add	r3, r0
 80246da:	3304      	adds	r3, #4
 80246dc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80246de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80246e2:	490d      	ldr	r1, [pc, #52]	; (8024718 <etharp_find_entry+0x2d4>)
 80246e4:	4613      	mov	r3, r2
 80246e6:	005b      	lsls	r3, r3, #1
 80246e8:	4413      	add	r3, r2
 80246ea:	00db      	lsls	r3, r3, #3
 80246ec:	440b      	add	r3, r1
 80246ee:	3312      	adds	r3, #18
 80246f0:	2200      	movs	r2, #0
 80246f2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80246f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80246f8:	4907      	ldr	r1, [pc, #28]	; (8024718 <etharp_find_entry+0x2d4>)
 80246fa:	4613      	mov	r3, r2
 80246fc:	005b      	lsls	r3, r3, #1
 80246fe:	4413      	add	r3, r2
 8024700:	00db      	lsls	r3, r3, #3
 8024702:	440b      	add	r3, r1
 8024704:	3308      	adds	r3, #8
 8024706:	687a      	ldr	r2, [r7, #4]
 8024708:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 802470a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 802470e:	4618      	mov	r0, r3
 8024710:	3728      	adds	r7, #40	; 0x28
 8024712:	46bd      	mov	sp, r7
 8024714:	bd80      	pop	{r7, pc}
 8024716:	bf00      	nop
 8024718:	20015e48 	.word	0x20015e48
 802471c:	0802d4fc 	.word	0x0802d4fc
 8024720:	0802d534 	.word	0x0802d534
 8024724:	0802d574 	.word	0x0802d574
 8024728:	0802d59c 	.word	0x0802d59c
 802472c:	0802d5b4 	.word	0x0802d5b4
 8024730:	0802d5c8 	.word	0x0802d5c8

08024734 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8024734:	b580      	push	{r7, lr}
 8024736:	b088      	sub	sp, #32
 8024738:	af02      	add	r7, sp, #8
 802473a:	60f8      	str	r0, [r7, #12]
 802473c:	60b9      	str	r1, [r7, #8]
 802473e:	607a      	str	r2, [r7, #4]
 8024740:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8024742:	68fb      	ldr	r3, [r7, #12]
 8024744:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8024748:	2b06      	cmp	r3, #6
 802474a:	d006      	beq.n	802475a <etharp_update_arp_entry+0x26>
 802474c:	4b48      	ldr	r3, [pc, #288]	; (8024870 <etharp_update_arp_entry+0x13c>)
 802474e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8024752:	4948      	ldr	r1, [pc, #288]	; (8024874 <etharp_update_arp_entry+0x140>)
 8024754:	4848      	ldr	r0, [pc, #288]	; (8024878 <etharp_update_arp_entry+0x144>)
 8024756:	f002 fa49 	bl	8026bec <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 802475a:	68bb      	ldr	r3, [r7, #8]
 802475c:	2b00      	cmp	r3, #0
 802475e:	d012      	beq.n	8024786 <etharp_update_arp_entry+0x52>
 8024760:	68bb      	ldr	r3, [r7, #8]
 8024762:	681b      	ldr	r3, [r3, #0]
 8024764:	2b00      	cmp	r3, #0
 8024766:	d00e      	beq.n	8024786 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8024768:	68bb      	ldr	r3, [r7, #8]
 802476a:	681b      	ldr	r3, [r3, #0]
 802476c:	68f9      	ldr	r1, [r7, #12]
 802476e:	4618      	mov	r0, r3
 8024770:	f001 f902 	bl	8025978 <ip4_addr_isbroadcast_u32>
 8024774:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8024776:	2b00      	cmp	r3, #0
 8024778:	d105      	bne.n	8024786 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 802477a:	68bb      	ldr	r3, [r7, #8]
 802477c:	681b      	ldr	r3, [r3, #0]
 802477e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8024782:	2be0      	cmp	r3, #224	; 0xe0
 8024784:	d102      	bne.n	802478c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8024786:	f06f 030f 	mvn.w	r3, #15
 802478a:	e06c      	b.n	8024866 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 802478c:	78fb      	ldrb	r3, [r7, #3]
 802478e:	68fa      	ldr	r2, [r7, #12]
 8024790:	4619      	mov	r1, r3
 8024792:	68b8      	ldr	r0, [r7, #8]
 8024794:	f7ff fe56 	bl	8024444 <etharp_find_entry>
 8024798:	4603      	mov	r3, r0
 802479a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 802479c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80247a0:	2b00      	cmp	r3, #0
 80247a2:	da02      	bge.n	80247aa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80247a4:	8afb      	ldrh	r3, [r7, #22]
 80247a6:	b25b      	sxtb	r3, r3
 80247a8:	e05d      	b.n	8024866 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80247aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80247ae:	4933      	ldr	r1, [pc, #204]	; (802487c <etharp_update_arp_entry+0x148>)
 80247b0:	4613      	mov	r3, r2
 80247b2:	005b      	lsls	r3, r3, #1
 80247b4:	4413      	add	r3, r2
 80247b6:	00db      	lsls	r3, r3, #3
 80247b8:	440b      	add	r3, r1
 80247ba:	3314      	adds	r3, #20
 80247bc:	2202      	movs	r2, #2
 80247be:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80247c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80247c4:	492d      	ldr	r1, [pc, #180]	; (802487c <etharp_update_arp_entry+0x148>)
 80247c6:	4613      	mov	r3, r2
 80247c8:	005b      	lsls	r3, r3, #1
 80247ca:	4413      	add	r3, r2
 80247cc:	00db      	lsls	r3, r3, #3
 80247ce:	440b      	add	r3, r1
 80247d0:	3308      	adds	r3, #8
 80247d2:	68fa      	ldr	r2, [r7, #12]
 80247d4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80247d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80247da:	4613      	mov	r3, r2
 80247dc:	005b      	lsls	r3, r3, #1
 80247de:	4413      	add	r3, r2
 80247e0:	00db      	lsls	r3, r3, #3
 80247e2:	3308      	adds	r3, #8
 80247e4:	4a25      	ldr	r2, [pc, #148]	; (802487c <etharp_update_arp_entry+0x148>)
 80247e6:	4413      	add	r3, r2
 80247e8:	3304      	adds	r3, #4
 80247ea:	2206      	movs	r2, #6
 80247ec:	6879      	ldr	r1, [r7, #4]
 80247ee:	4618      	mov	r0, r3
 80247f0:	f002 f8ec 	bl	80269cc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80247f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80247f8:	4920      	ldr	r1, [pc, #128]	; (802487c <etharp_update_arp_entry+0x148>)
 80247fa:	4613      	mov	r3, r2
 80247fc:	005b      	lsls	r3, r3, #1
 80247fe:	4413      	add	r3, r2
 8024800:	00db      	lsls	r3, r3, #3
 8024802:	440b      	add	r3, r1
 8024804:	3312      	adds	r3, #18
 8024806:	2200      	movs	r2, #0
 8024808:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 802480a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802480e:	491b      	ldr	r1, [pc, #108]	; (802487c <etharp_update_arp_entry+0x148>)
 8024810:	4613      	mov	r3, r2
 8024812:	005b      	lsls	r3, r3, #1
 8024814:	4413      	add	r3, r2
 8024816:	00db      	lsls	r3, r3, #3
 8024818:	440b      	add	r3, r1
 802481a:	681b      	ldr	r3, [r3, #0]
 802481c:	2b00      	cmp	r3, #0
 802481e:	d021      	beq.n	8024864 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8024820:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024824:	4915      	ldr	r1, [pc, #84]	; (802487c <etharp_update_arp_entry+0x148>)
 8024826:	4613      	mov	r3, r2
 8024828:	005b      	lsls	r3, r3, #1
 802482a:	4413      	add	r3, r2
 802482c:	00db      	lsls	r3, r3, #3
 802482e:	440b      	add	r3, r1
 8024830:	681b      	ldr	r3, [r3, #0]
 8024832:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8024834:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024838:	4910      	ldr	r1, [pc, #64]	; (802487c <etharp_update_arp_entry+0x148>)
 802483a:	4613      	mov	r3, r2
 802483c:	005b      	lsls	r3, r3, #1
 802483e:	4413      	add	r3, r2
 8024840:	00db      	lsls	r3, r3, #3
 8024842:	440b      	add	r3, r1
 8024844:	2200      	movs	r2, #0
 8024846:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8024848:	68fb      	ldr	r3, [r7, #12]
 802484a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 802484e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8024852:	9300      	str	r3, [sp, #0]
 8024854:	687b      	ldr	r3, [r7, #4]
 8024856:	6939      	ldr	r1, [r7, #16]
 8024858:	68f8      	ldr	r0, [r7, #12]
 802485a:	f002 f82b 	bl	80268b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 802485e:	6938      	ldr	r0, [r7, #16]
 8024860:	f7fe fc8c 	bl	802317c <pbuf_free>
  }
  return ERR_OK;
 8024864:	2300      	movs	r3, #0
}
 8024866:	4618      	mov	r0, r3
 8024868:	3718      	adds	r7, #24
 802486a:	46bd      	mov	sp, r7
 802486c:	bd80      	pop	{r7, pc}
 802486e:	bf00      	nop
 8024870:	0802d4fc 	.word	0x0802d4fc
 8024874:	0802d5f4 	.word	0x0802d5f4
 8024878:	0802d574 	.word	0x0802d574
 802487c:	20015e48 	.word	0x20015e48

08024880 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8024880:	b580      	push	{r7, lr}
 8024882:	b084      	sub	sp, #16
 8024884:	af00      	add	r7, sp, #0
 8024886:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024888:	2300      	movs	r3, #0
 802488a:	60fb      	str	r3, [r7, #12]
 802488c:	e01e      	b.n	80248cc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 802488e:	4913      	ldr	r1, [pc, #76]	; (80248dc <etharp_cleanup_netif+0x5c>)
 8024890:	68fa      	ldr	r2, [r7, #12]
 8024892:	4613      	mov	r3, r2
 8024894:	005b      	lsls	r3, r3, #1
 8024896:	4413      	add	r3, r2
 8024898:	00db      	lsls	r3, r3, #3
 802489a:	440b      	add	r3, r1
 802489c:	3314      	adds	r3, #20
 802489e:	781b      	ldrb	r3, [r3, #0]
 80248a0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80248a2:	7afb      	ldrb	r3, [r7, #11]
 80248a4:	2b00      	cmp	r3, #0
 80248a6:	d00e      	beq.n	80248c6 <etharp_cleanup_netif+0x46>
 80248a8:	490c      	ldr	r1, [pc, #48]	; (80248dc <etharp_cleanup_netif+0x5c>)
 80248aa:	68fa      	ldr	r2, [r7, #12]
 80248ac:	4613      	mov	r3, r2
 80248ae:	005b      	lsls	r3, r3, #1
 80248b0:	4413      	add	r3, r2
 80248b2:	00db      	lsls	r3, r3, #3
 80248b4:	440b      	add	r3, r1
 80248b6:	3308      	adds	r3, #8
 80248b8:	681b      	ldr	r3, [r3, #0]
 80248ba:	687a      	ldr	r2, [r7, #4]
 80248bc:	429a      	cmp	r2, r3
 80248be:	d102      	bne.n	80248c6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80248c0:	68f8      	ldr	r0, [r7, #12]
 80248c2:	f7ff fce5 	bl	8024290 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80248c6:	68fb      	ldr	r3, [r7, #12]
 80248c8:	3301      	adds	r3, #1
 80248ca:	60fb      	str	r3, [r7, #12]
 80248cc:	68fb      	ldr	r3, [r7, #12]
 80248ce:	2b31      	cmp	r3, #49	; 0x31
 80248d0:	dddd      	ble.n	802488e <etharp_cleanup_netif+0xe>
    }
  }
}
 80248d2:	bf00      	nop
 80248d4:	bf00      	nop
 80248d6:	3710      	adds	r7, #16
 80248d8:	46bd      	mov	sp, r7
 80248da:	bd80      	pop	{r7, pc}
 80248dc:	20015e48 	.word	0x20015e48

080248e0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80248e0:	b5b0      	push	{r4, r5, r7, lr}
 80248e2:	b08a      	sub	sp, #40	; 0x28
 80248e4:	af04      	add	r7, sp, #16
 80248e6:	6078      	str	r0, [r7, #4]
 80248e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80248ea:	683b      	ldr	r3, [r7, #0]
 80248ec:	2b00      	cmp	r3, #0
 80248ee:	d107      	bne.n	8024900 <etharp_input+0x20>
 80248f0:	4b3d      	ldr	r3, [pc, #244]	; (80249e8 <etharp_input+0x108>)
 80248f2:	f240 228a 	movw	r2, #650	; 0x28a
 80248f6:	493d      	ldr	r1, [pc, #244]	; (80249ec <etharp_input+0x10c>)
 80248f8:	483d      	ldr	r0, [pc, #244]	; (80249f0 <etharp_input+0x110>)
 80248fa:	f002 f977 	bl	8026bec <iprintf>
 80248fe:	e06f      	b.n	80249e0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8024900:	687b      	ldr	r3, [r7, #4]
 8024902:	685b      	ldr	r3, [r3, #4]
 8024904:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8024906:	693b      	ldr	r3, [r7, #16]
 8024908:	881b      	ldrh	r3, [r3, #0]
 802490a:	b29b      	uxth	r3, r3
 802490c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024910:	d10c      	bne.n	802492c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8024912:	693b      	ldr	r3, [r7, #16]
 8024914:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8024916:	2b06      	cmp	r3, #6
 8024918:	d108      	bne.n	802492c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 802491a:	693b      	ldr	r3, [r7, #16]
 802491c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802491e:	2b04      	cmp	r3, #4
 8024920:	d104      	bne.n	802492c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8024922:	693b      	ldr	r3, [r7, #16]
 8024924:	885b      	ldrh	r3, [r3, #2]
 8024926:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8024928:	2b08      	cmp	r3, #8
 802492a:	d003      	beq.n	8024934 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 802492c:	6878      	ldr	r0, [r7, #4]
 802492e:	f7fe fc25 	bl	802317c <pbuf_free>
    return;
 8024932:	e055      	b.n	80249e0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8024934:	693b      	ldr	r3, [r7, #16]
 8024936:	330e      	adds	r3, #14
 8024938:	681b      	ldr	r3, [r3, #0]
 802493a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 802493c:	693b      	ldr	r3, [r7, #16]
 802493e:	3318      	adds	r3, #24
 8024940:	681b      	ldr	r3, [r3, #0]
 8024942:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8024944:	683b      	ldr	r3, [r7, #0]
 8024946:	3304      	adds	r3, #4
 8024948:	681b      	ldr	r3, [r3, #0]
 802494a:	2b00      	cmp	r3, #0
 802494c:	d102      	bne.n	8024954 <etharp_input+0x74>
    for_us = 0;
 802494e:	2300      	movs	r3, #0
 8024950:	75fb      	strb	r3, [r7, #23]
 8024952:	e009      	b.n	8024968 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8024954:	68ba      	ldr	r2, [r7, #8]
 8024956:	683b      	ldr	r3, [r7, #0]
 8024958:	3304      	adds	r3, #4
 802495a:	681b      	ldr	r3, [r3, #0]
 802495c:	429a      	cmp	r2, r3
 802495e:	bf0c      	ite	eq
 8024960:	2301      	moveq	r3, #1
 8024962:	2300      	movne	r3, #0
 8024964:	b2db      	uxtb	r3, r3
 8024966:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8024968:	693b      	ldr	r3, [r7, #16]
 802496a:	f103 0208 	add.w	r2, r3, #8
 802496e:	7dfb      	ldrb	r3, [r7, #23]
 8024970:	2b00      	cmp	r3, #0
 8024972:	d001      	beq.n	8024978 <etharp_input+0x98>
 8024974:	2301      	movs	r3, #1
 8024976:	e000      	b.n	802497a <etharp_input+0x9a>
 8024978:	2302      	movs	r3, #2
 802497a:	f107 010c 	add.w	r1, r7, #12
 802497e:	6838      	ldr	r0, [r7, #0]
 8024980:	f7ff fed8 	bl	8024734 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8024984:	693b      	ldr	r3, [r7, #16]
 8024986:	88db      	ldrh	r3, [r3, #6]
 8024988:	b29b      	uxth	r3, r3
 802498a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802498e:	d003      	beq.n	8024998 <etharp_input+0xb8>
 8024990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024994:	d01e      	beq.n	80249d4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8024996:	e020      	b.n	80249da <etharp_input+0xfa>
      if (for_us) {
 8024998:	7dfb      	ldrb	r3, [r7, #23]
 802499a:	2b00      	cmp	r3, #0
 802499c:	d01c      	beq.n	80249d8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802499e:	683b      	ldr	r3, [r7, #0]
 80249a0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80249a4:	693b      	ldr	r3, [r7, #16]
 80249a6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80249aa:	683b      	ldr	r3, [r7, #0]
 80249ac:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80249b0:	683b      	ldr	r3, [r7, #0]
 80249b2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80249b4:	693a      	ldr	r2, [r7, #16]
 80249b6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80249b8:	2102      	movs	r1, #2
 80249ba:	9103      	str	r1, [sp, #12]
 80249bc:	f107 010c 	add.w	r1, r7, #12
 80249c0:	9102      	str	r1, [sp, #8]
 80249c2:	9201      	str	r2, [sp, #4]
 80249c4:	9300      	str	r3, [sp, #0]
 80249c6:	462b      	mov	r3, r5
 80249c8:	4622      	mov	r2, r4
 80249ca:	4601      	mov	r1, r0
 80249cc:	6838      	ldr	r0, [r7, #0]
 80249ce:	f000 faeb 	bl	8024fa8 <etharp_raw>
      break;
 80249d2:	e001      	b.n	80249d8 <etharp_input+0xf8>
      break;
 80249d4:	bf00      	nop
 80249d6:	e000      	b.n	80249da <etharp_input+0xfa>
      break;
 80249d8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80249da:	6878      	ldr	r0, [r7, #4]
 80249dc:	f7fe fbce 	bl	802317c <pbuf_free>
}
 80249e0:	3718      	adds	r7, #24
 80249e2:	46bd      	mov	sp, r7
 80249e4:	bdb0      	pop	{r4, r5, r7, pc}
 80249e6:	bf00      	nop
 80249e8:	0802d4fc 	.word	0x0802d4fc
 80249ec:	0802d64c 	.word	0x0802d64c
 80249f0:	0802d574 	.word	0x0802d574

080249f4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80249f4:	b580      	push	{r7, lr}
 80249f6:	b086      	sub	sp, #24
 80249f8:	af02      	add	r7, sp, #8
 80249fa:	60f8      	str	r0, [r7, #12]
 80249fc:	60b9      	str	r1, [r7, #8]
 80249fe:	4613      	mov	r3, r2
 8024a00:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8024a02:	79fa      	ldrb	r2, [r7, #7]
 8024a04:	4944      	ldr	r1, [pc, #272]	; (8024b18 <etharp_output_to_arp_index+0x124>)
 8024a06:	4613      	mov	r3, r2
 8024a08:	005b      	lsls	r3, r3, #1
 8024a0a:	4413      	add	r3, r2
 8024a0c:	00db      	lsls	r3, r3, #3
 8024a0e:	440b      	add	r3, r1
 8024a10:	3314      	adds	r3, #20
 8024a12:	781b      	ldrb	r3, [r3, #0]
 8024a14:	2b01      	cmp	r3, #1
 8024a16:	d806      	bhi.n	8024a26 <etharp_output_to_arp_index+0x32>
 8024a18:	4b40      	ldr	r3, [pc, #256]	; (8024b1c <etharp_output_to_arp_index+0x128>)
 8024a1a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8024a1e:	4940      	ldr	r1, [pc, #256]	; (8024b20 <etharp_output_to_arp_index+0x12c>)
 8024a20:	4840      	ldr	r0, [pc, #256]	; (8024b24 <etharp_output_to_arp_index+0x130>)
 8024a22:	f002 f8e3 	bl	8026bec <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8024a26:	79fa      	ldrb	r2, [r7, #7]
 8024a28:	493b      	ldr	r1, [pc, #236]	; (8024b18 <etharp_output_to_arp_index+0x124>)
 8024a2a:	4613      	mov	r3, r2
 8024a2c:	005b      	lsls	r3, r3, #1
 8024a2e:	4413      	add	r3, r2
 8024a30:	00db      	lsls	r3, r3, #3
 8024a32:	440b      	add	r3, r1
 8024a34:	3314      	adds	r3, #20
 8024a36:	781b      	ldrb	r3, [r3, #0]
 8024a38:	2b02      	cmp	r3, #2
 8024a3a:	d153      	bne.n	8024ae4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8024a3c:	79fa      	ldrb	r2, [r7, #7]
 8024a3e:	4936      	ldr	r1, [pc, #216]	; (8024b18 <etharp_output_to_arp_index+0x124>)
 8024a40:	4613      	mov	r3, r2
 8024a42:	005b      	lsls	r3, r3, #1
 8024a44:	4413      	add	r3, r2
 8024a46:	00db      	lsls	r3, r3, #3
 8024a48:	440b      	add	r3, r1
 8024a4a:	3312      	adds	r3, #18
 8024a4c:	881b      	ldrh	r3, [r3, #0]
 8024a4e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8024a52:	d919      	bls.n	8024a88 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8024a54:	79fa      	ldrb	r2, [r7, #7]
 8024a56:	4613      	mov	r3, r2
 8024a58:	005b      	lsls	r3, r3, #1
 8024a5a:	4413      	add	r3, r2
 8024a5c:	00db      	lsls	r3, r3, #3
 8024a5e:	4a2e      	ldr	r2, [pc, #184]	; (8024b18 <etharp_output_to_arp_index+0x124>)
 8024a60:	4413      	add	r3, r2
 8024a62:	3304      	adds	r3, #4
 8024a64:	4619      	mov	r1, r3
 8024a66:	68f8      	ldr	r0, [r7, #12]
 8024a68:	f000 fb4c 	bl	8025104 <etharp_request>
 8024a6c:	4603      	mov	r3, r0
 8024a6e:	2b00      	cmp	r3, #0
 8024a70:	d138      	bne.n	8024ae4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8024a72:	79fa      	ldrb	r2, [r7, #7]
 8024a74:	4928      	ldr	r1, [pc, #160]	; (8024b18 <etharp_output_to_arp_index+0x124>)
 8024a76:	4613      	mov	r3, r2
 8024a78:	005b      	lsls	r3, r3, #1
 8024a7a:	4413      	add	r3, r2
 8024a7c:	00db      	lsls	r3, r3, #3
 8024a7e:	440b      	add	r3, r1
 8024a80:	3314      	adds	r3, #20
 8024a82:	2203      	movs	r2, #3
 8024a84:	701a      	strb	r2, [r3, #0]
 8024a86:	e02d      	b.n	8024ae4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8024a88:	79fa      	ldrb	r2, [r7, #7]
 8024a8a:	4923      	ldr	r1, [pc, #140]	; (8024b18 <etharp_output_to_arp_index+0x124>)
 8024a8c:	4613      	mov	r3, r2
 8024a8e:	005b      	lsls	r3, r3, #1
 8024a90:	4413      	add	r3, r2
 8024a92:	00db      	lsls	r3, r3, #3
 8024a94:	440b      	add	r3, r1
 8024a96:	3312      	adds	r3, #18
 8024a98:	881b      	ldrh	r3, [r3, #0]
 8024a9a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8024a9e:	d321      	bcc.n	8024ae4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8024aa0:	79fa      	ldrb	r2, [r7, #7]
 8024aa2:	4613      	mov	r3, r2
 8024aa4:	005b      	lsls	r3, r3, #1
 8024aa6:	4413      	add	r3, r2
 8024aa8:	00db      	lsls	r3, r3, #3
 8024aaa:	4a1b      	ldr	r2, [pc, #108]	; (8024b18 <etharp_output_to_arp_index+0x124>)
 8024aac:	4413      	add	r3, r2
 8024aae:	1d19      	adds	r1, r3, #4
 8024ab0:	79fa      	ldrb	r2, [r7, #7]
 8024ab2:	4613      	mov	r3, r2
 8024ab4:	005b      	lsls	r3, r3, #1
 8024ab6:	4413      	add	r3, r2
 8024ab8:	00db      	lsls	r3, r3, #3
 8024aba:	3308      	adds	r3, #8
 8024abc:	4a16      	ldr	r2, [pc, #88]	; (8024b18 <etharp_output_to_arp_index+0x124>)
 8024abe:	4413      	add	r3, r2
 8024ac0:	3304      	adds	r3, #4
 8024ac2:	461a      	mov	r2, r3
 8024ac4:	68f8      	ldr	r0, [r7, #12]
 8024ac6:	f000 fafb 	bl	80250c0 <etharp_request_dst>
 8024aca:	4603      	mov	r3, r0
 8024acc:	2b00      	cmp	r3, #0
 8024ace:	d109      	bne.n	8024ae4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8024ad0:	79fa      	ldrb	r2, [r7, #7]
 8024ad2:	4911      	ldr	r1, [pc, #68]	; (8024b18 <etharp_output_to_arp_index+0x124>)
 8024ad4:	4613      	mov	r3, r2
 8024ad6:	005b      	lsls	r3, r3, #1
 8024ad8:	4413      	add	r3, r2
 8024ada:	00db      	lsls	r3, r3, #3
 8024adc:	440b      	add	r3, r1
 8024ade:	3314      	adds	r3, #20
 8024ae0:	2203      	movs	r2, #3
 8024ae2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8024ae4:	68fb      	ldr	r3, [r7, #12]
 8024ae6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8024aea:	79fa      	ldrb	r2, [r7, #7]
 8024aec:	4613      	mov	r3, r2
 8024aee:	005b      	lsls	r3, r3, #1
 8024af0:	4413      	add	r3, r2
 8024af2:	00db      	lsls	r3, r3, #3
 8024af4:	3308      	adds	r3, #8
 8024af6:	4a08      	ldr	r2, [pc, #32]	; (8024b18 <etharp_output_to_arp_index+0x124>)
 8024af8:	4413      	add	r3, r2
 8024afa:	3304      	adds	r3, #4
 8024afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8024b00:	9200      	str	r2, [sp, #0]
 8024b02:	460a      	mov	r2, r1
 8024b04:	68b9      	ldr	r1, [r7, #8]
 8024b06:	68f8      	ldr	r0, [r7, #12]
 8024b08:	f001 fed4 	bl	80268b4 <ethernet_output>
 8024b0c:	4603      	mov	r3, r0
}
 8024b0e:	4618      	mov	r0, r3
 8024b10:	3710      	adds	r7, #16
 8024b12:	46bd      	mov	sp, r7
 8024b14:	bd80      	pop	{r7, pc}
 8024b16:	bf00      	nop
 8024b18:	20015e48 	.word	0x20015e48
 8024b1c:	0802d4fc 	.word	0x0802d4fc
 8024b20:	0802d66c 	.word	0x0802d66c
 8024b24:	0802d574 	.word	0x0802d574

08024b28 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8024b28:	b580      	push	{r7, lr}
 8024b2a:	b08a      	sub	sp, #40	; 0x28
 8024b2c:	af02      	add	r7, sp, #8
 8024b2e:	60f8      	str	r0, [r7, #12]
 8024b30:	60b9      	str	r1, [r7, #8]
 8024b32:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8024b34:	687b      	ldr	r3, [r7, #4]
 8024b36:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8024b38:	68fb      	ldr	r3, [r7, #12]
 8024b3a:	2b00      	cmp	r3, #0
 8024b3c:	d106      	bne.n	8024b4c <etharp_output+0x24>
 8024b3e:	4b73      	ldr	r3, [pc, #460]	; (8024d0c <etharp_output+0x1e4>)
 8024b40:	f240 321e 	movw	r2, #798	; 0x31e
 8024b44:	4972      	ldr	r1, [pc, #456]	; (8024d10 <etharp_output+0x1e8>)
 8024b46:	4873      	ldr	r0, [pc, #460]	; (8024d14 <etharp_output+0x1ec>)
 8024b48:	f002 f850 	bl	8026bec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8024b4c:	68bb      	ldr	r3, [r7, #8]
 8024b4e:	2b00      	cmp	r3, #0
 8024b50:	d106      	bne.n	8024b60 <etharp_output+0x38>
 8024b52:	4b6e      	ldr	r3, [pc, #440]	; (8024d0c <etharp_output+0x1e4>)
 8024b54:	f240 321f 	movw	r2, #799	; 0x31f
 8024b58:	496f      	ldr	r1, [pc, #444]	; (8024d18 <etharp_output+0x1f0>)
 8024b5a:	486e      	ldr	r0, [pc, #440]	; (8024d14 <etharp_output+0x1ec>)
 8024b5c:	f002 f846 	bl	8026bec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8024b60:	687b      	ldr	r3, [r7, #4]
 8024b62:	2b00      	cmp	r3, #0
 8024b64:	d106      	bne.n	8024b74 <etharp_output+0x4c>
 8024b66:	4b69      	ldr	r3, [pc, #420]	; (8024d0c <etharp_output+0x1e4>)
 8024b68:	f44f 7248 	mov.w	r2, #800	; 0x320
 8024b6c:	496b      	ldr	r1, [pc, #428]	; (8024d1c <etharp_output+0x1f4>)
 8024b6e:	4869      	ldr	r0, [pc, #420]	; (8024d14 <etharp_output+0x1ec>)
 8024b70:	f002 f83c 	bl	8026bec <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8024b74:	687b      	ldr	r3, [r7, #4]
 8024b76:	681b      	ldr	r3, [r3, #0]
 8024b78:	68f9      	ldr	r1, [r7, #12]
 8024b7a:	4618      	mov	r0, r3
 8024b7c:	f000 fefc 	bl	8025978 <ip4_addr_isbroadcast_u32>
 8024b80:	4603      	mov	r3, r0
 8024b82:	2b00      	cmp	r3, #0
 8024b84:	d002      	beq.n	8024b8c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8024b86:	4b66      	ldr	r3, [pc, #408]	; (8024d20 <etharp_output+0x1f8>)
 8024b88:	61fb      	str	r3, [r7, #28]
 8024b8a:	e0af      	b.n	8024cec <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8024b8c:	687b      	ldr	r3, [r7, #4]
 8024b8e:	681b      	ldr	r3, [r3, #0]
 8024b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024b94:	2be0      	cmp	r3, #224	; 0xe0
 8024b96:	d118      	bne.n	8024bca <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8024b98:	2301      	movs	r3, #1
 8024b9a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8024b9c:	2300      	movs	r3, #0
 8024b9e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8024ba0:	235e      	movs	r3, #94	; 0x5e
 8024ba2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8024ba4:	687b      	ldr	r3, [r7, #4]
 8024ba6:	3301      	adds	r3, #1
 8024ba8:	781b      	ldrb	r3, [r3, #0]
 8024baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024bae:	b2db      	uxtb	r3, r3
 8024bb0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8024bb2:	687b      	ldr	r3, [r7, #4]
 8024bb4:	3302      	adds	r3, #2
 8024bb6:	781b      	ldrb	r3, [r3, #0]
 8024bb8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8024bba:	687b      	ldr	r3, [r7, #4]
 8024bbc:	3303      	adds	r3, #3
 8024bbe:	781b      	ldrb	r3, [r3, #0]
 8024bc0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8024bc2:	f107 0310 	add.w	r3, r7, #16
 8024bc6:	61fb      	str	r3, [r7, #28]
 8024bc8:	e090      	b.n	8024cec <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8024bca:	687b      	ldr	r3, [r7, #4]
 8024bcc:	681a      	ldr	r2, [r3, #0]
 8024bce:	68fb      	ldr	r3, [r7, #12]
 8024bd0:	3304      	adds	r3, #4
 8024bd2:	681b      	ldr	r3, [r3, #0]
 8024bd4:	405a      	eors	r2, r3
 8024bd6:	68fb      	ldr	r3, [r7, #12]
 8024bd8:	3308      	adds	r3, #8
 8024bda:	681b      	ldr	r3, [r3, #0]
 8024bdc:	4013      	ands	r3, r2
 8024bde:	2b00      	cmp	r3, #0
 8024be0:	d012      	beq.n	8024c08 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8024be2:	687b      	ldr	r3, [r7, #4]
 8024be4:	681b      	ldr	r3, [r3, #0]
 8024be6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8024be8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8024bec:	4293      	cmp	r3, r2
 8024bee:	d00b      	beq.n	8024c08 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8024bf0:	68fb      	ldr	r3, [r7, #12]
 8024bf2:	330c      	adds	r3, #12
 8024bf4:	681b      	ldr	r3, [r3, #0]
 8024bf6:	2b00      	cmp	r3, #0
 8024bf8:	d003      	beq.n	8024c02 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8024bfa:	68fb      	ldr	r3, [r7, #12]
 8024bfc:	330c      	adds	r3, #12
 8024bfe:	61bb      	str	r3, [r7, #24]
 8024c00:	e002      	b.n	8024c08 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8024c02:	f06f 0303 	mvn.w	r3, #3
 8024c06:	e07d      	b.n	8024d04 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8024c08:	4b46      	ldr	r3, [pc, #280]	; (8024d24 <etharp_output+0x1fc>)
 8024c0a:	781b      	ldrb	r3, [r3, #0]
 8024c0c:	4619      	mov	r1, r3
 8024c0e:	4a46      	ldr	r2, [pc, #280]	; (8024d28 <etharp_output+0x200>)
 8024c10:	460b      	mov	r3, r1
 8024c12:	005b      	lsls	r3, r3, #1
 8024c14:	440b      	add	r3, r1
 8024c16:	00db      	lsls	r3, r3, #3
 8024c18:	4413      	add	r3, r2
 8024c1a:	3314      	adds	r3, #20
 8024c1c:	781b      	ldrb	r3, [r3, #0]
 8024c1e:	2b01      	cmp	r3, #1
 8024c20:	d925      	bls.n	8024c6e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8024c22:	4b40      	ldr	r3, [pc, #256]	; (8024d24 <etharp_output+0x1fc>)
 8024c24:	781b      	ldrb	r3, [r3, #0]
 8024c26:	4619      	mov	r1, r3
 8024c28:	4a3f      	ldr	r2, [pc, #252]	; (8024d28 <etharp_output+0x200>)
 8024c2a:	460b      	mov	r3, r1
 8024c2c:	005b      	lsls	r3, r3, #1
 8024c2e:	440b      	add	r3, r1
 8024c30:	00db      	lsls	r3, r3, #3
 8024c32:	4413      	add	r3, r2
 8024c34:	3308      	adds	r3, #8
 8024c36:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8024c38:	68fa      	ldr	r2, [r7, #12]
 8024c3a:	429a      	cmp	r2, r3
 8024c3c:	d117      	bne.n	8024c6e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8024c3e:	69bb      	ldr	r3, [r7, #24]
 8024c40:	681a      	ldr	r2, [r3, #0]
 8024c42:	4b38      	ldr	r3, [pc, #224]	; (8024d24 <etharp_output+0x1fc>)
 8024c44:	781b      	ldrb	r3, [r3, #0]
 8024c46:	4618      	mov	r0, r3
 8024c48:	4937      	ldr	r1, [pc, #220]	; (8024d28 <etharp_output+0x200>)
 8024c4a:	4603      	mov	r3, r0
 8024c4c:	005b      	lsls	r3, r3, #1
 8024c4e:	4403      	add	r3, r0
 8024c50:	00db      	lsls	r3, r3, #3
 8024c52:	440b      	add	r3, r1
 8024c54:	3304      	adds	r3, #4
 8024c56:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8024c58:	429a      	cmp	r2, r3
 8024c5a:	d108      	bne.n	8024c6e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8024c5c:	4b31      	ldr	r3, [pc, #196]	; (8024d24 <etharp_output+0x1fc>)
 8024c5e:	781b      	ldrb	r3, [r3, #0]
 8024c60:	461a      	mov	r2, r3
 8024c62:	68b9      	ldr	r1, [r7, #8]
 8024c64:	68f8      	ldr	r0, [r7, #12]
 8024c66:	f7ff fec5 	bl	80249f4 <etharp_output_to_arp_index>
 8024c6a:	4603      	mov	r3, r0
 8024c6c:	e04a      	b.n	8024d04 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8024c6e:	2300      	movs	r3, #0
 8024c70:	75fb      	strb	r3, [r7, #23]
 8024c72:	e031      	b.n	8024cd8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8024c74:	7dfa      	ldrb	r2, [r7, #23]
 8024c76:	492c      	ldr	r1, [pc, #176]	; (8024d28 <etharp_output+0x200>)
 8024c78:	4613      	mov	r3, r2
 8024c7a:	005b      	lsls	r3, r3, #1
 8024c7c:	4413      	add	r3, r2
 8024c7e:	00db      	lsls	r3, r3, #3
 8024c80:	440b      	add	r3, r1
 8024c82:	3314      	adds	r3, #20
 8024c84:	781b      	ldrb	r3, [r3, #0]
 8024c86:	2b01      	cmp	r3, #1
 8024c88:	d923      	bls.n	8024cd2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8024c8a:	7dfa      	ldrb	r2, [r7, #23]
 8024c8c:	4926      	ldr	r1, [pc, #152]	; (8024d28 <etharp_output+0x200>)
 8024c8e:	4613      	mov	r3, r2
 8024c90:	005b      	lsls	r3, r3, #1
 8024c92:	4413      	add	r3, r2
 8024c94:	00db      	lsls	r3, r3, #3
 8024c96:	440b      	add	r3, r1
 8024c98:	3308      	adds	r3, #8
 8024c9a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8024c9c:	68fa      	ldr	r2, [r7, #12]
 8024c9e:	429a      	cmp	r2, r3
 8024ca0:	d117      	bne.n	8024cd2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8024ca2:	69bb      	ldr	r3, [r7, #24]
 8024ca4:	6819      	ldr	r1, [r3, #0]
 8024ca6:	7dfa      	ldrb	r2, [r7, #23]
 8024ca8:	481f      	ldr	r0, [pc, #124]	; (8024d28 <etharp_output+0x200>)
 8024caa:	4613      	mov	r3, r2
 8024cac:	005b      	lsls	r3, r3, #1
 8024cae:	4413      	add	r3, r2
 8024cb0:	00db      	lsls	r3, r3, #3
 8024cb2:	4403      	add	r3, r0
 8024cb4:	3304      	adds	r3, #4
 8024cb6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8024cb8:	4299      	cmp	r1, r3
 8024cba:	d10a      	bne.n	8024cd2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8024cbc:	4a19      	ldr	r2, [pc, #100]	; (8024d24 <etharp_output+0x1fc>)
 8024cbe:	7dfb      	ldrb	r3, [r7, #23]
 8024cc0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8024cc2:	7dfb      	ldrb	r3, [r7, #23]
 8024cc4:	461a      	mov	r2, r3
 8024cc6:	68b9      	ldr	r1, [r7, #8]
 8024cc8:	68f8      	ldr	r0, [r7, #12]
 8024cca:	f7ff fe93 	bl	80249f4 <etharp_output_to_arp_index>
 8024cce:	4603      	mov	r3, r0
 8024cd0:	e018      	b.n	8024d04 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8024cd2:	7dfb      	ldrb	r3, [r7, #23]
 8024cd4:	3301      	adds	r3, #1
 8024cd6:	75fb      	strb	r3, [r7, #23]
 8024cd8:	7dfb      	ldrb	r3, [r7, #23]
 8024cda:	2b31      	cmp	r3, #49	; 0x31
 8024cdc:	d9ca      	bls.n	8024c74 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8024cde:	68ba      	ldr	r2, [r7, #8]
 8024ce0:	69b9      	ldr	r1, [r7, #24]
 8024ce2:	68f8      	ldr	r0, [r7, #12]
 8024ce4:	f000 f822 	bl	8024d2c <etharp_query>
 8024ce8:	4603      	mov	r3, r0
 8024cea:	e00b      	b.n	8024d04 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8024cec:	68fb      	ldr	r3, [r7, #12]
 8024cee:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8024cf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8024cf6:	9300      	str	r3, [sp, #0]
 8024cf8:	69fb      	ldr	r3, [r7, #28]
 8024cfa:	68b9      	ldr	r1, [r7, #8]
 8024cfc:	68f8      	ldr	r0, [r7, #12]
 8024cfe:	f001 fdd9 	bl	80268b4 <ethernet_output>
 8024d02:	4603      	mov	r3, r0
}
 8024d04:	4618      	mov	r0, r3
 8024d06:	3720      	adds	r7, #32
 8024d08:	46bd      	mov	sp, r7
 8024d0a:	bd80      	pop	{r7, pc}
 8024d0c:	0802d4fc 	.word	0x0802d4fc
 8024d10:	0802d64c 	.word	0x0802d64c
 8024d14:	0802d574 	.word	0x0802d574
 8024d18:	0802d69c 	.word	0x0802d69c
 8024d1c:	0802d63c 	.word	0x0802d63c
 8024d20:	0802e07c 	.word	0x0802e07c
 8024d24:	200162f8 	.word	0x200162f8
 8024d28:	20015e48 	.word	0x20015e48

08024d2c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8024d2c:	b580      	push	{r7, lr}
 8024d2e:	b08c      	sub	sp, #48	; 0x30
 8024d30:	af02      	add	r7, sp, #8
 8024d32:	60f8      	str	r0, [r7, #12]
 8024d34:	60b9      	str	r1, [r7, #8]
 8024d36:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8024d38:	68fb      	ldr	r3, [r7, #12]
 8024d3a:	332a      	adds	r3, #42	; 0x2a
 8024d3c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8024d3e:	23ff      	movs	r3, #255	; 0xff
 8024d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8024d44:	2300      	movs	r3, #0
 8024d46:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8024d48:	68bb      	ldr	r3, [r7, #8]
 8024d4a:	681b      	ldr	r3, [r3, #0]
 8024d4c:	68f9      	ldr	r1, [r7, #12]
 8024d4e:	4618      	mov	r0, r3
 8024d50:	f000 fe12 	bl	8025978 <ip4_addr_isbroadcast_u32>
 8024d54:	4603      	mov	r3, r0
 8024d56:	2b00      	cmp	r3, #0
 8024d58:	d10c      	bne.n	8024d74 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8024d5a:	68bb      	ldr	r3, [r7, #8]
 8024d5c:	681b      	ldr	r3, [r3, #0]
 8024d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8024d62:	2be0      	cmp	r3, #224	; 0xe0
 8024d64:	d006      	beq.n	8024d74 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8024d66:	68bb      	ldr	r3, [r7, #8]
 8024d68:	2b00      	cmp	r3, #0
 8024d6a:	d003      	beq.n	8024d74 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8024d6c:	68bb      	ldr	r3, [r7, #8]
 8024d6e:	681b      	ldr	r3, [r3, #0]
 8024d70:	2b00      	cmp	r3, #0
 8024d72:	d102      	bne.n	8024d7a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8024d74:	f06f 030f 	mvn.w	r3, #15
 8024d78:	e101      	b.n	8024f7e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8024d7a:	68fa      	ldr	r2, [r7, #12]
 8024d7c:	2101      	movs	r1, #1
 8024d7e:	68b8      	ldr	r0, [r7, #8]
 8024d80:	f7ff fb60 	bl	8024444 <etharp_find_entry>
 8024d84:	4603      	mov	r3, r0
 8024d86:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8024d88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8024d8c:	2b00      	cmp	r3, #0
 8024d8e:	da02      	bge.n	8024d96 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8024d90:	8a7b      	ldrh	r3, [r7, #18]
 8024d92:	b25b      	sxtb	r3, r3
 8024d94:	e0f3      	b.n	8024f7e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8024d96:	8a7b      	ldrh	r3, [r7, #18]
 8024d98:	2b7e      	cmp	r3, #126	; 0x7e
 8024d9a:	d906      	bls.n	8024daa <etharp_query+0x7e>
 8024d9c:	4b7a      	ldr	r3, [pc, #488]	; (8024f88 <etharp_query+0x25c>)
 8024d9e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8024da2:	497a      	ldr	r1, [pc, #488]	; (8024f8c <etharp_query+0x260>)
 8024da4:	487a      	ldr	r0, [pc, #488]	; (8024f90 <etharp_query+0x264>)
 8024da6:	f001 ff21 	bl	8026bec <iprintf>
  i = (netif_addr_idx_t)i_err;
 8024daa:	8a7b      	ldrh	r3, [r7, #18]
 8024dac:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8024dae:	7c7a      	ldrb	r2, [r7, #17]
 8024db0:	4978      	ldr	r1, [pc, #480]	; (8024f94 <etharp_query+0x268>)
 8024db2:	4613      	mov	r3, r2
 8024db4:	005b      	lsls	r3, r3, #1
 8024db6:	4413      	add	r3, r2
 8024db8:	00db      	lsls	r3, r3, #3
 8024dba:	440b      	add	r3, r1
 8024dbc:	3314      	adds	r3, #20
 8024dbe:	781b      	ldrb	r3, [r3, #0]
 8024dc0:	2b00      	cmp	r3, #0
 8024dc2:	d115      	bne.n	8024df0 <etharp_query+0xc4>
    is_new_entry = 1;
 8024dc4:	2301      	movs	r3, #1
 8024dc6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8024dc8:	7c7a      	ldrb	r2, [r7, #17]
 8024dca:	4972      	ldr	r1, [pc, #456]	; (8024f94 <etharp_query+0x268>)
 8024dcc:	4613      	mov	r3, r2
 8024dce:	005b      	lsls	r3, r3, #1
 8024dd0:	4413      	add	r3, r2
 8024dd2:	00db      	lsls	r3, r3, #3
 8024dd4:	440b      	add	r3, r1
 8024dd6:	3314      	adds	r3, #20
 8024dd8:	2201      	movs	r2, #1
 8024dda:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8024ddc:	7c7a      	ldrb	r2, [r7, #17]
 8024dde:	496d      	ldr	r1, [pc, #436]	; (8024f94 <etharp_query+0x268>)
 8024de0:	4613      	mov	r3, r2
 8024de2:	005b      	lsls	r3, r3, #1
 8024de4:	4413      	add	r3, r2
 8024de6:	00db      	lsls	r3, r3, #3
 8024de8:	440b      	add	r3, r1
 8024dea:	3308      	adds	r3, #8
 8024dec:	68fa      	ldr	r2, [r7, #12]
 8024dee:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8024df0:	7c7a      	ldrb	r2, [r7, #17]
 8024df2:	4968      	ldr	r1, [pc, #416]	; (8024f94 <etharp_query+0x268>)
 8024df4:	4613      	mov	r3, r2
 8024df6:	005b      	lsls	r3, r3, #1
 8024df8:	4413      	add	r3, r2
 8024dfa:	00db      	lsls	r3, r3, #3
 8024dfc:	440b      	add	r3, r1
 8024dfe:	3314      	adds	r3, #20
 8024e00:	781b      	ldrb	r3, [r3, #0]
 8024e02:	2b01      	cmp	r3, #1
 8024e04:	d011      	beq.n	8024e2a <etharp_query+0xfe>
 8024e06:	7c7a      	ldrb	r2, [r7, #17]
 8024e08:	4962      	ldr	r1, [pc, #392]	; (8024f94 <etharp_query+0x268>)
 8024e0a:	4613      	mov	r3, r2
 8024e0c:	005b      	lsls	r3, r3, #1
 8024e0e:	4413      	add	r3, r2
 8024e10:	00db      	lsls	r3, r3, #3
 8024e12:	440b      	add	r3, r1
 8024e14:	3314      	adds	r3, #20
 8024e16:	781b      	ldrb	r3, [r3, #0]
 8024e18:	2b01      	cmp	r3, #1
 8024e1a:	d806      	bhi.n	8024e2a <etharp_query+0xfe>
 8024e1c:	4b5a      	ldr	r3, [pc, #360]	; (8024f88 <etharp_query+0x25c>)
 8024e1e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8024e22:	495d      	ldr	r1, [pc, #372]	; (8024f98 <etharp_query+0x26c>)
 8024e24:	485a      	ldr	r0, [pc, #360]	; (8024f90 <etharp_query+0x264>)
 8024e26:	f001 fee1 	bl	8026bec <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8024e2a:	6a3b      	ldr	r3, [r7, #32]
 8024e2c:	2b00      	cmp	r3, #0
 8024e2e:	d102      	bne.n	8024e36 <etharp_query+0x10a>
 8024e30:	687b      	ldr	r3, [r7, #4]
 8024e32:	2b00      	cmp	r3, #0
 8024e34:	d10c      	bne.n	8024e50 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8024e36:	68b9      	ldr	r1, [r7, #8]
 8024e38:	68f8      	ldr	r0, [r7, #12]
 8024e3a:	f000 f963 	bl	8025104 <etharp_request>
 8024e3e:	4603      	mov	r3, r0
 8024e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8024e44:	687b      	ldr	r3, [r7, #4]
 8024e46:	2b00      	cmp	r3, #0
 8024e48:	d102      	bne.n	8024e50 <etharp_query+0x124>
      return result;
 8024e4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8024e4e:	e096      	b.n	8024f7e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8024e50:	687b      	ldr	r3, [r7, #4]
 8024e52:	2b00      	cmp	r3, #0
 8024e54:	d106      	bne.n	8024e64 <etharp_query+0x138>
 8024e56:	4b4c      	ldr	r3, [pc, #304]	; (8024f88 <etharp_query+0x25c>)
 8024e58:	f240 32e1 	movw	r2, #993	; 0x3e1
 8024e5c:	494f      	ldr	r1, [pc, #316]	; (8024f9c <etharp_query+0x270>)
 8024e5e:	484c      	ldr	r0, [pc, #304]	; (8024f90 <etharp_query+0x264>)
 8024e60:	f001 fec4 	bl	8026bec <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8024e64:	7c7a      	ldrb	r2, [r7, #17]
 8024e66:	494b      	ldr	r1, [pc, #300]	; (8024f94 <etharp_query+0x268>)
 8024e68:	4613      	mov	r3, r2
 8024e6a:	005b      	lsls	r3, r3, #1
 8024e6c:	4413      	add	r3, r2
 8024e6e:	00db      	lsls	r3, r3, #3
 8024e70:	440b      	add	r3, r1
 8024e72:	3314      	adds	r3, #20
 8024e74:	781b      	ldrb	r3, [r3, #0]
 8024e76:	2b01      	cmp	r3, #1
 8024e78:	d917      	bls.n	8024eaa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8024e7a:	4a49      	ldr	r2, [pc, #292]	; (8024fa0 <etharp_query+0x274>)
 8024e7c:	7c7b      	ldrb	r3, [r7, #17]
 8024e7e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8024e80:	7c7a      	ldrb	r2, [r7, #17]
 8024e82:	4613      	mov	r3, r2
 8024e84:	005b      	lsls	r3, r3, #1
 8024e86:	4413      	add	r3, r2
 8024e88:	00db      	lsls	r3, r3, #3
 8024e8a:	3308      	adds	r3, #8
 8024e8c:	4a41      	ldr	r2, [pc, #260]	; (8024f94 <etharp_query+0x268>)
 8024e8e:	4413      	add	r3, r2
 8024e90:	3304      	adds	r3, #4
 8024e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8024e96:	9200      	str	r2, [sp, #0]
 8024e98:	697a      	ldr	r2, [r7, #20]
 8024e9a:	6879      	ldr	r1, [r7, #4]
 8024e9c:	68f8      	ldr	r0, [r7, #12]
 8024e9e:	f001 fd09 	bl	80268b4 <ethernet_output>
 8024ea2:	4603      	mov	r3, r0
 8024ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8024ea8:	e067      	b.n	8024f7a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8024eaa:	7c7a      	ldrb	r2, [r7, #17]
 8024eac:	4939      	ldr	r1, [pc, #228]	; (8024f94 <etharp_query+0x268>)
 8024eae:	4613      	mov	r3, r2
 8024eb0:	005b      	lsls	r3, r3, #1
 8024eb2:	4413      	add	r3, r2
 8024eb4:	00db      	lsls	r3, r3, #3
 8024eb6:	440b      	add	r3, r1
 8024eb8:	3314      	adds	r3, #20
 8024eba:	781b      	ldrb	r3, [r3, #0]
 8024ebc:	2b01      	cmp	r3, #1
 8024ebe:	d15c      	bne.n	8024f7a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8024ec0:	2300      	movs	r3, #0
 8024ec2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8024ec4:	687b      	ldr	r3, [r7, #4]
 8024ec6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8024ec8:	e01c      	b.n	8024f04 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8024eca:	69fb      	ldr	r3, [r7, #28]
 8024ecc:	895a      	ldrh	r2, [r3, #10]
 8024ece:	69fb      	ldr	r3, [r7, #28]
 8024ed0:	891b      	ldrh	r3, [r3, #8]
 8024ed2:	429a      	cmp	r2, r3
 8024ed4:	d10a      	bne.n	8024eec <etharp_query+0x1c0>
 8024ed6:	69fb      	ldr	r3, [r7, #28]
 8024ed8:	681b      	ldr	r3, [r3, #0]
 8024eda:	2b00      	cmp	r3, #0
 8024edc:	d006      	beq.n	8024eec <etharp_query+0x1c0>
 8024ede:	4b2a      	ldr	r3, [pc, #168]	; (8024f88 <etharp_query+0x25c>)
 8024ee0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8024ee4:	492f      	ldr	r1, [pc, #188]	; (8024fa4 <etharp_query+0x278>)
 8024ee6:	482a      	ldr	r0, [pc, #168]	; (8024f90 <etharp_query+0x264>)
 8024ee8:	f001 fe80 	bl	8026bec <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8024eec:	69fb      	ldr	r3, [r7, #28]
 8024eee:	7b1b      	ldrb	r3, [r3, #12]
 8024ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024ef4:	2b00      	cmp	r3, #0
 8024ef6:	d002      	beq.n	8024efe <etharp_query+0x1d2>
        copy_needed = 1;
 8024ef8:	2301      	movs	r3, #1
 8024efa:	61bb      	str	r3, [r7, #24]
        break;
 8024efc:	e005      	b.n	8024f0a <etharp_query+0x1de>
      }
      p = p->next;
 8024efe:	69fb      	ldr	r3, [r7, #28]
 8024f00:	681b      	ldr	r3, [r3, #0]
 8024f02:	61fb      	str	r3, [r7, #28]
    while (p) {
 8024f04:	69fb      	ldr	r3, [r7, #28]
 8024f06:	2b00      	cmp	r3, #0
 8024f08:	d1df      	bne.n	8024eca <etharp_query+0x19e>
    }
    if (copy_needed) {
 8024f0a:	69bb      	ldr	r3, [r7, #24]
 8024f0c:	2b00      	cmp	r3, #0
 8024f0e:	d007      	beq.n	8024f20 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8024f10:	687a      	ldr	r2, [r7, #4]
 8024f12:	f44f 7120 	mov.w	r1, #640	; 0x280
 8024f16:	200e      	movs	r0, #14
 8024f18:	f7fe fbbc 	bl	8023694 <pbuf_clone>
 8024f1c:	61f8      	str	r0, [r7, #28]
 8024f1e:	e004      	b.n	8024f2a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8024f20:	687b      	ldr	r3, [r7, #4]
 8024f22:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8024f24:	69f8      	ldr	r0, [r7, #28]
 8024f26:	f7fe f9c9 	bl	80232bc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8024f2a:	69fb      	ldr	r3, [r7, #28]
 8024f2c:	2b00      	cmp	r3, #0
 8024f2e:	d021      	beq.n	8024f74 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8024f30:	7c7a      	ldrb	r2, [r7, #17]
 8024f32:	4918      	ldr	r1, [pc, #96]	; (8024f94 <etharp_query+0x268>)
 8024f34:	4613      	mov	r3, r2
 8024f36:	005b      	lsls	r3, r3, #1
 8024f38:	4413      	add	r3, r2
 8024f3a:	00db      	lsls	r3, r3, #3
 8024f3c:	440b      	add	r3, r1
 8024f3e:	681b      	ldr	r3, [r3, #0]
 8024f40:	2b00      	cmp	r3, #0
 8024f42:	d00a      	beq.n	8024f5a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8024f44:	7c7a      	ldrb	r2, [r7, #17]
 8024f46:	4913      	ldr	r1, [pc, #76]	; (8024f94 <etharp_query+0x268>)
 8024f48:	4613      	mov	r3, r2
 8024f4a:	005b      	lsls	r3, r3, #1
 8024f4c:	4413      	add	r3, r2
 8024f4e:	00db      	lsls	r3, r3, #3
 8024f50:	440b      	add	r3, r1
 8024f52:	681b      	ldr	r3, [r3, #0]
 8024f54:	4618      	mov	r0, r3
 8024f56:	f7fe f911 	bl	802317c <pbuf_free>
      }
      arp_table[i].q = p;
 8024f5a:	7c7a      	ldrb	r2, [r7, #17]
 8024f5c:	490d      	ldr	r1, [pc, #52]	; (8024f94 <etharp_query+0x268>)
 8024f5e:	4613      	mov	r3, r2
 8024f60:	005b      	lsls	r3, r3, #1
 8024f62:	4413      	add	r3, r2
 8024f64:	00db      	lsls	r3, r3, #3
 8024f66:	440b      	add	r3, r1
 8024f68:	69fa      	ldr	r2, [r7, #28]
 8024f6a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8024f6c:	2300      	movs	r3, #0
 8024f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8024f72:	e002      	b.n	8024f7a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8024f74:	23ff      	movs	r3, #255	; 0xff
 8024f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8024f7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8024f7e:	4618      	mov	r0, r3
 8024f80:	3728      	adds	r7, #40	; 0x28
 8024f82:	46bd      	mov	sp, r7
 8024f84:	bd80      	pop	{r7, pc}
 8024f86:	bf00      	nop
 8024f88:	0802d4fc 	.word	0x0802d4fc
 8024f8c:	0802d6a8 	.word	0x0802d6a8
 8024f90:	0802d574 	.word	0x0802d574
 8024f94:	20015e48 	.word	0x20015e48
 8024f98:	0802d6b8 	.word	0x0802d6b8
 8024f9c:	0802d69c 	.word	0x0802d69c
 8024fa0:	200162f8 	.word	0x200162f8
 8024fa4:	0802d6e0 	.word	0x0802d6e0

08024fa8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8024fa8:	b580      	push	{r7, lr}
 8024faa:	b08a      	sub	sp, #40	; 0x28
 8024fac:	af02      	add	r7, sp, #8
 8024fae:	60f8      	str	r0, [r7, #12]
 8024fb0:	60b9      	str	r1, [r7, #8]
 8024fb2:	607a      	str	r2, [r7, #4]
 8024fb4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8024fb6:	2300      	movs	r3, #0
 8024fb8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8024fba:	68fb      	ldr	r3, [r7, #12]
 8024fbc:	2b00      	cmp	r3, #0
 8024fbe:	d106      	bne.n	8024fce <etharp_raw+0x26>
 8024fc0:	4b3a      	ldr	r3, [pc, #232]	; (80250ac <etharp_raw+0x104>)
 8024fc2:	f240 4257 	movw	r2, #1111	; 0x457
 8024fc6:	493a      	ldr	r1, [pc, #232]	; (80250b0 <etharp_raw+0x108>)
 8024fc8:	483a      	ldr	r0, [pc, #232]	; (80250b4 <etharp_raw+0x10c>)
 8024fca:	f001 fe0f 	bl	8026bec <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8024fce:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024fd2:	211c      	movs	r1, #28
 8024fd4:	200e      	movs	r0, #14
 8024fd6:	f7fd fdef 	bl	8022bb8 <pbuf_alloc>
 8024fda:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8024fdc:	69bb      	ldr	r3, [r7, #24]
 8024fde:	2b00      	cmp	r3, #0
 8024fe0:	d102      	bne.n	8024fe8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8024fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8024fe6:	e05d      	b.n	80250a4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8024fe8:	69bb      	ldr	r3, [r7, #24]
 8024fea:	895b      	ldrh	r3, [r3, #10]
 8024fec:	2b1b      	cmp	r3, #27
 8024fee:	d806      	bhi.n	8024ffe <etharp_raw+0x56>
 8024ff0:	4b2e      	ldr	r3, [pc, #184]	; (80250ac <etharp_raw+0x104>)
 8024ff2:	f240 4262 	movw	r2, #1122	; 0x462
 8024ff6:	4930      	ldr	r1, [pc, #192]	; (80250b8 <etharp_raw+0x110>)
 8024ff8:	482e      	ldr	r0, [pc, #184]	; (80250b4 <etharp_raw+0x10c>)
 8024ffa:	f001 fdf7 	bl	8026bec <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8024ffe:	69bb      	ldr	r3, [r7, #24]
 8025000:	685b      	ldr	r3, [r3, #4]
 8025002:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8025004:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8025006:	4618      	mov	r0, r3
 8025008:	f7fc fcdc 	bl	80219c4 <lwip_htons>
 802500c:	4603      	mov	r3, r0
 802500e:	461a      	mov	r2, r3
 8025010:	697b      	ldr	r3, [r7, #20]
 8025012:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8025014:	68fb      	ldr	r3, [r7, #12]
 8025016:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802501a:	2b06      	cmp	r3, #6
 802501c:	d006      	beq.n	802502c <etharp_raw+0x84>
 802501e:	4b23      	ldr	r3, [pc, #140]	; (80250ac <etharp_raw+0x104>)
 8025020:	f240 4269 	movw	r2, #1129	; 0x469
 8025024:	4925      	ldr	r1, [pc, #148]	; (80250bc <etharp_raw+0x114>)
 8025026:	4823      	ldr	r0, [pc, #140]	; (80250b4 <etharp_raw+0x10c>)
 8025028:	f001 fde0 	bl	8026bec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 802502c:	697b      	ldr	r3, [r7, #20]
 802502e:	3308      	adds	r3, #8
 8025030:	2206      	movs	r2, #6
 8025032:	6839      	ldr	r1, [r7, #0]
 8025034:	4618      	mov	r0, r3
 8025036:	f001 fcc9 	bl	80269cc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 802503a:	697b      	ldr	r3, [r7, #20]
 802503c:	3312      	adds	r3, #18
 802503e:	2206      	movs	r2, #6
 8025040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8025042:	4618      	mov	r0, r3
 8025044:	f001 fcc2 	bl	80269cc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8025048:	697b      	ldr	r3, [r7, #20]
 802504a:	330e      	adds	r3, #14
 802504c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802504e:	6812      	ldr	r2, [r2, #0]
 8025050:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8025052:	697b      	ldr	r3, [r7, #20]
 8025054:	3318      	adds	r3, #24
 8025056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025058:	6812      	ldr	r2, [r2, #0]
 802505a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 802505c:	697b      	ldr	r3, [r7, #20]
 802505e:	2200      	movs	r2, #0
 8025060:	701a      	strb	r2, [r3, #0]
 8025062:	2200      	movs	r2, #0
 8025064:	f042 0201 	orr.w	r2, r2, #1
 8025068:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802506a:	697b      	ldr	r3, [r7, #20]
 802506c:	2200      	movs	r2, #0
 802506e:	f042 0208 	orr.w	r2, r2, #8
 8025072:	709a      	strb	r2, [r3, #2]
 8025074:	2200      	movs	r2, #0
 8025076:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8025078:	697b      	ldr	r3, [r7, #20]
 802507a:	2206      	movs	r2, #6
 802507c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 802507e:	697b      	ldr	r3, [r7, #20]
 8025080:	2204      	movs	r2, #4
 8025082:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8025084:	f640 0306 	movw	r3, #2054	; 0x806
 8025088:	9300      	str	r3, [sp, #0]
 802508a:	687b      	ldr	r3, [r7, #4]
 802508c:	68ba      	ldr	r2, [r7, #8]
 802508e:	69b9      	ldr	r1, [r7, #24]
 8025090:	68f8      	ldr	r0, [r7, #12]
 8025092:	f001 fc0f 	bl	80268b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8025096:	69b8      	ldr	r0, [r7, #24]
 8025098:	f7fe f870 	bl	802317c <pbuf_free>
  p = NULL;
 802509c:	2300      	movs	r3, #0
 802509e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80250a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80250a4:	4618      	mov	r0, r3
 80250a6:	3720      	adds	r7, #32
 80250a8:	46bd      	mov	sp, r7
 80250aa:	bd80      	pop	{r7, pc}
 80250ac:	0802d4fc 	.word	0x0802d4fc
 80250b0:	0802d64c 	.word	0x0802d64c
 80250b4:	0802d574 	.word	0x0802d574
 80250b8:	0802d6fc 	.word	0x0802d6fc
 80250bc:	0802d730 	.word	0x0802d730

080250c0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80250c0:	b580      	push	{r7, lr}
 80250c2:	b088      	sub	sp, #32
 80250c4:	af04      	add	r7, sp, #16
 80250c6:	60f8      	str	r0, [r7, #12]
 80250c8:	60b9      	str	r1, [r7, #8]
 80250ca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80250cc:	68fb      	ldr	r3, [r7, #12]
 80250ce:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80250d2:	68fb      	ldr	r3, [r7, #12]
 80250d4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80250d8:	68fb      	ldr	r3, [r7, #12]
 80250da:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80250dc:	2201      	movs	r2, #1
 80250de:	9203      	str	r2, [sp, #12]
 80250e0:	68ba      	ldr	r2, [r7, #8]
 80250e2:	9202      	str	r2, [sp, #8]
 80250e4:	4a06      	ldr	r2, [pc, #24]	; (8025100 <etharp_request_dst+0x40>)
 80250e6:	9201      	str	r2, [sp, #4]
 80250e8:	9300      	str	r3, [sp, #0]
 80250ea:	4603      	mov	r3, r0
 80250ec:	687a      	ldr	r2, [r7, #4]
 80250ee:	68f8      	ldr	r0, [r7, #12]
 80250f0:	f7ff ff5a 	bl	8024fa8 <etharp_raw>
 80250f4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80250f6:	4618      	mov	r0, r3
 80250f8:	3710      	adds	r7, #16
 80250fa:	46bd      	mov	sp, r7
 80250fc:	bd80      	pop	{r7, pc}
 80250fe:	bf00      	nop
 8025100:	0802e084 	.word	0x0802e084

08025104 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8025104:	b580      	push	{r7, lr}
 8025106:	b082      	sub	sp, #8
 8025108:	af00      	add	r7, sp, #0
 802510a:	6078      	str	r0, [r7, #4]
 802510c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 802510e:	4a05      	ldr	r2, [pc, #20]	; (8025124 <etharp_request+0x20>)
 8025110:	6839      	ldr	r1, [r7, #0]
 8025112:	6878      	ldr	r0, [r7, #4]
 8025114:	f7ff ffd4 	bl	80250c0 <etharp_request_dst>
 8025118:	4603      	mov	r3, r0
}
 802511a:	4618      	mov	r0, r3
 802511c:	3708      	adds	r7, #8
 802511e:	46bd      	mov	sp, r7
 8025120:	bd80      	pop	{r7, pc}
 8025122:	bf00      	nop
 8025124:	0802e07c 	.word	0x0802e07c

08025128 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8025128:	b580      	push	{r7, lr}
 802512a:	b08e      	sub	sp, #56	; 0x38
 802512c:	af04      	add	r7, sp, #16
 802512e:	6078      	str	r0, [r7, #4]
 8025130:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8025132:	4b79      	ldr	r3, [pc, #484]	; (8025318 <icmp_input+0x1f0>)
 8025134:	689b      	ldr	r3, [r3, #8]
 8025136:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8025138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802513a:	781b      	ldrb	r3, [r3, #0]
 802513c:	f003 030f 	and.w	r3, r3, #15
 8025140:	b2db      	uxtb	r3, r3
 8025142:	009b      	lsls	r3, r3, #2
 8025144:	b2db      	uxtb	r3, r3
 8025146:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8025148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802514a:	2b13      	cmp	r3, #19
 802514c:	f240 80cd 	bls.w	80252ea <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8025150:	687b      	ldr	r3, [r7, #4]
 8025152:	895b      	ldrh	r3, [r3, #10]
 8025154:	2b03      	cmp	r3, #3
 8025156:	f240 80ca 	bls.w	80252ee <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802515a:	687b      	ldr	r3, [r7, #4]
 802515c:	685b      	ldr	r3, [r3, #4]
 802515e:	781b      	ldrb	r3, [r3, #0]
 8025160:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8025164:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8025168:	2b00      	cmp	r3, #0
 802516a:	f000 80b7 	beq.w	80252dc <icmp_input+0x1b4>
 802516e:	2b08      	cmp	r3, #8
 8025170:	f040 80b7 	bne.w	80252e2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8025174:	4b69      	ldr	r3, [pc, #420]	; (802531c <icmp_input+0x1f4>)
 8025176:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8025178:	4b67      	ldr	r3, [pc, #412]	; (8025318 <icmp_input+0x1f0>)
 802517a:	695b      	ldr	r3, [r3, #20]
 802517c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8025180:	2be0      	cmp	r3, #224	; 0xe0
 8025182:	f000 80bb 	beq.w	80252fc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8025186:	4b64      	ldr	r3, [pc, #400]	; (8025318 <icmp_input+0x1f0>)
 8025188:	695b      	ldr	r3, [r3, #20]
 802518a:	4a63      	ldr	r2, [pc, #396]	; (8025318 <icmp_input+0x1f0>)
 802518c:	6812      	ldr	r2, [r2, #0]
 802518e:	4611      	mov	r1, r2
 8025190:	4618      	mov	r0, r3
 8025192:	f000 fbf1 	bl	8025978 <ip4_addr_isbroadcast_u32>
 8025196:	4603      	mov	r3, r0
 8025198:	2b00      	cmp	r3, #0
 802519a:	f040 80b1 	bne.w	8025300 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 802519e:	687b      	ldr	r3, [r7, #4]
 80251a0:	891b      	ldrh	r3, [r3, #8]
 80251a2:	2b07      	cmp	r3, #7
 80251a4:	f240 80a5 	bls.w	80252f2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80251a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80251aa:	330e      	adds	r3, #14
 80251ac:	4619      	mov	r1, r3
 80251ae:	6878      	ldr	r0, [r7, #4]
 80251b0:	f7fd ff4e 	bl	8023050 <pbuf_add_header>
 80251b4:	4603      	mov	r3, r0
 80251b6:	2b00      	cmp	r3, #0
 80251b8:	d04b      	beq.n	8025252 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80251ba:	687b      	ldr	r3, [r7, #4]
 80251bc:	891a      	ldrh	r2, [r3, #8]
 80251be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80251c0:	4413      	add	r3, r2
 80251c2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80251c4:	687b      	ldr	r3, [r7, #4]
 80251c6:	891b      	ldrh	r3, [r3, #8]
 80251c8:	8b7a      	ldrh	r2, [r7, #26]
 80251ca:	429a      	cmp	r2, r3
 80251cc:	f0c0 809a 	bcc.w	8025304 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80251d0:	8b7b      	ldrh	r3, [r7, #26]
 80251d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80251d6:	4619      	mov	r1, r3
 80251d8:	200e      	movs	r0, #14
 80251da:	f7fd fced 	bl	8022bb8 <pbuf_alloc>
 80251de:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80251e0:	697b      	ldr	r3, [r7, #20]
 80251e2:	2b00      	cmp	r3, #0
 80251e4:	f000 8090 	beq.w	8025308 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80251e8:	697b      	ldr	r3, [r7, #20]
 80251ea:	895b      	ldrh	r3, [r3, #10]
 80251ec:	461a      	mov	r2, r3
 80251ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80251f0:	3308      	adds	r3, #8
 80251f2:	429a      	cmp	r2, r3
 80251f4:	d203      	bcs.n	80251fe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80251f6:	6978      	ldr	r0, [r7, #20]
 80251f8:	f7fd ffc0 	bl	802317c <pbuf_free>
          goto icmperr;
 80251fc:	e085      	b.n	802530a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80251fe:	697b      	ldr	r3, [r7, #20]
 8025200:	685b      	ldr	r3, [r3, #4]
 8025202:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8025204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025206:	4618      	mov	r0, r3
 8025208:	f001 fbe0 	bl	80269cc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 802520c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802520e:	4619      	mov	r1, r3
 8025210:	6978      	ldr	r0, [r7, #20]
 8025212:	f7fd ff2d 	bl	8023070 <pbuf_remove_header>
 8025216:	4603      	mov	r3, r0
 8025218:	2b00      	cmp	r3, #0
 802521a:	d009      	beq.n	8025230 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 802521c:	4b40      	ldr	r3, [pc, #256]	; (8025320 <icmp_input+0x1f8>)
 802521e:	22b6      	movs	r2, #182	; 0xb6
 8025220:	4940      	ldr	r1, [pc, #256]	; (8025324 <icmp_input+0x1fc>)
 8025222:	4841      	ldr	r0, [pc, #260]	; (8025328 <icmp_input+0x200>)
 8025224:	f001 fce2 	bl	8026bec <iprintf>
          pbuf_free(r);
 8025228:	6978      	ldr	r0, [r7, #20]
 802522a:	f7fd ffa7 	bl	802317c <pbuf_free>
          goto icmperr;
 802522e:	e06c      	b.n	802530a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8025230:	6879      	ldr	r1, [r7, #4]
 8025232:	6978      	ldr	r0, [r7, #20]
 8025234:	f7fe f8ca 	bl	80233cc <pbuf_copy>
 8025238:	4603      	mov	r3, r0
 802523a:	2b00      	cmp	r3, #0
 802523c:	d003      	beq.n	8025246 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 802523e:	6978      	ldr	r0, [r7, #20]
 8025240:	f7fd ff9c 	bl	802317c <pbuf_free>
          goto icmperr;
 8025244:	e061      	b.n	802530a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8025246:	6878      	ldr	r0, [r7, #4]
 8025248:	f7fd ff98 	bl	802317c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 802524c:	697b      	ldr	r3, [r7, #20]
 802524e:	607b      	str	r3, [r7, #4]
 8025250:	e00f      	b.n	8025272 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8025252:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8025254:	330e      	adds	r3, #14
 8025256:	4619      	mov	r1, r3
 8025258:	6878      	ldr	r0, [r7, #4]
 802525a:	f7fd ff09 	bl	8023070 <pbuf_remove_header>
 802525e:	4603      	mov	r3, r0
 8025260:	2b00      	cmp	r3, #0
 8025262:	d006      	beq.n	8025272 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8025264:	4b2e      	ldr	r3, [pc, #184]	; (8025320 <icmp_input+0x1f8>)
 8025266:	22c7      	movs	r2, #199	; 0xc7
 8025268:	4930      	ldr	r1, [pc, #192]	; (802532c <icmp_input+0x204>)
 802526a:	482f      	ldr	r0, [pc, #188]	; (8025328 <icmp_input+0x200>)
 802526c:	f001 fcbe 	bl	8026bec <iprintf>
          goto icmperr;
 8025270:	e04b      	b.n	802530a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8025272:	687b      	ldr	r3, [r7, #4]
 8025274:	685b      	ldr	r3, [r3, #4]
 8025276:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8025278:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802527a:	4619      	mov	r1, r3
 802527c:	6878      	ldr	r0, [r7, #4]
 802527e:	f7fd fee7 	bl	8023050 <pbuf_add_header>
 8025282:	4603      	mov	r3, r0
 8025284:	2b00      	cmp	r3, #0
 8025286:	d12b      	bne.n	80252e0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8025288:	687b      	ldr	r3, [r7, #4]
 802528a:	685b      	ldr	r3, [r3, #4]
 802528c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 802528e:	69fb      	ldr	r3, [r7, #28]
 8025290:	681a      	ldr	r2, [r3, #0]
 8025292:	68fb      	ldr	r3, [r7, #12]
 8025294:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8025296:	4b20      	ldr	r3, [pc, #128]	; (8025318 <icmp_input+0x1f0>)
 8025298:	691a      	ldr	r2, [r3, #16]
 802529a:	68fb      	ldr	r3, [r7, #12]
 802529c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 802529e:	693b      	ldr	r3, [r7, #16]
 80252a0:	2200      	movs	r2, #0
 80252a2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80252a4:	693b      	ldr	r3, [r7, #16]
 80252a6:	2200      	movs	r2, #0
 80252a8:	709a      	strb	r2, [r3, #2]
 80252aa:	2200      	movs	r2, #0
 80252ac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80252ae:	68fb      	ldr	r3, [r7, #12]
 80252b0:	22ff      	movs	r2, #255	; 0xff
 80252b2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80252b4:	68fb      	ldr	r3, [r7, #12]
 80252b6:	2200      	movs	r2, #0
 80252b8:	729a      	strb	r2, [r3, #10]
 80252ba:	2200      	movs	r2, #0
 80252bc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80252be:	683b      	ldr	r3, [r7, #0]
 80252c0:	9302      	str	r3, [sp, #8]
 80252c2:	2301      	movs	r3, #1
 80252c4:	9301      	str	r3, [sp, #4]
 80252c6:	2300      	movs	r3, #0
 80252c8:	9300      	str	r3, [sp, #0]
 80252ca:	23ff      	movs	r3, #255	; 0xff
 80252cc:	2200      	movs	r2, #0
 80252ce:	69f9      	ldr	r1, [r7, #28]
 80252d0:	6878      	ldr	r0, [r7, #4]
 80252d2:	f000 fa6b 	bl	80257ac <ip4_output_if>
 80252d6:	4603      	mov	r3, r0
 80252d8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80252da:	e001      	b.n	80252e0 <icmp_input+0x1b8>
      break;
 80252dc:	bf00      	nop
 80252de:	e000      	b.n	80252e2 <icmp_input+0x1ba>
      break;
 80252e0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80252e2:	6878      	ldr	r0, [r7, #4]
 80252e4:	f7fd ff4a 	bl	802317c <pbuf_free>
  return;
 80252e8:	e013      	b.n	8025312 <icmp_input+0x1ea>
    goto lenerr;
 80252ea:	bf00      	nop
 80252ec:	e002      	b.n	80252f4 <icmp_input+0x1cc>
    goto lenerr;
 80252ee:	bf00      	nop
 80252f0:	e000      	b.n	80252f4 <icmp_input+0x1cc>
        goto lenerr;
 80252f2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80252f4:	6878      	ldr	r0, [r7, #4]
 80252f6:	f7fd ff41 	bl	802317c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80252fa:	e00a      	b.n	8025312 <icmp_input+0x1ea>
        goto icmperr;
 80252fc:	bf00      	nop
 80252fe:	e004      	b.n	802530a <icmp_input+0x1e2>
        goto icmperr;
 8025300:	bf00      	nop
 8025302:	e002      	b.n	802530a <icmp_input+0x1e2>
          goto icmperr;
 8025304:	bf00      	nop
 8025306:	e000      	b.n	802530a <icmp_input+0x1e2>
          goto icmperr;
 8025308:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 802530a:	6878      	ldr	r0, [r7, #4]
 802530c:	f7fd ff36 	bl	802317c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8025310:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8025312:	3728      	adds	r7, #40	; 0x28
 8025314:	46bd      	mov	sp, r7
 8025316:	bd80      	pop	{r7, pc}
 8025318:	200127e0 	.word	0x200127e0
 802531c:	200127f4 	.word	0x200127f4
 8025320:	0802d774 	.word	0x0802d774
 8025324:	0802d7ac 	.word	0x0802d7ac
 8025328:	0802d7e4 	.word	0x0802d7e4
 802532c:	0802d80c 	.word	0x0802d80c

08025330 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8025330:	b580      	push	{r7, lr}
 8025332:	b082      	sub	sp, #8
 8025334:	af00      	add	r7, sp, #0
 8025336:	6078      	str	r0, [r7, #4]
 8025338:	460b      	mov	r3, r1
 802533a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 802533c:	78fb      	ldrb	r3, [r7, #3]
 802533e:	461a      	mov	r2, r3
 8025340:	2103      	movs	r1, #3
 8025342:	6878      	ldr	r0, [r7, #4]
 8025344:	f000 f814 	bl	8025370 <icmp_send_response>
}
 8025348:	bf00      	nop
 802534a:	3708      	adds	r7, #8
 802534c:	46bd      	mov	sp, r7
 802534e:	bd80      	pop	{r7, pc}

08025350 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8025350:	b580      	push	{r7, lr}
 8025352:	b082      	sub	sp, #8
 8025354:	af00      	add	r7, sp, #0
 8025356:	6078      	str	r0, [r7, #4]
 8025358:	460b      	mov	r3, r1
 802535a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 802535c:	78fb      	ldrb	r3, [r7, #3]
 802535e:	461a      	mov	r2, r3
 8025360:	210b      	movs	r1, #11
 8025362:	6878      	ldr	r0, [r7, #4]
 8025364:	f000 f804 	bl	8025370 <icmp_send_response>
}
 8025368:	bf00      	nop
 802536a:	3708      	adds	r7, #8
 802536c:	46bd      	mov	sp, r7
 802536e:	bd80      	pop	{r7, pc}

08025370 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8025370:	b580      	push	{r7, lr}
 8025372:	b08c      	sub	sp, #48	; 0x30
 8025374:	af04      	add	r7, sp, #16
 8025376:	6078      	str	r0, [r7, #4]
 8025378:	460b      	mov	r3, r1
 802537a:	70fb      	strb	r3, [r7, #3]
 802537c:	4613      	mov	r3, r2
 802537e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8025380:	f44f 7220 	mov.w	r2, #640	; 0x280
 8025384:	2124      	movs	r1, #36	; 0x24
 8025386:	2022      	movs	r0, #34	; 0x22
 8025388:	f7fd fc16 	bl	8022bb8 <pbuf_alloc>
 802538c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 802538e:	69fb      	ldr	r3, [r7, #28]
 8025390:	2b00      	cmp	r3, #0
 8025392:	d04c      	beq.n	802542e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8025394:	69fb      	ldr	r3, [r7, #28]
 8025396:	895b      	ldrh	r3, [r3, #10]
 8025398:	2b23      	cmp	r3, #35	; 0x23
 802539a:	d806      	bhi.n	80253aa <icmp_send_response+0x3a>
 802539c:	4b26      	ldr	r3, [pc, #152]	; (8025438 <icmp_send_response+0xc8>)
 802539e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80253a2:	4926      	ldr	r1, [pc, #152]	; (802543c <icmp_send_response+0xcc>)
 80253a4:	4826      	ldr	r0, [pc, #152]	; (8025440 <icmp_send_response+0xd0>)
 80253a6:	f001 fc21 	bl	8026bec <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80253aa:	687b      	ldr	r3, [r7, #4]
 80253ac:	685b      	ldr	r3, [r3, #4]
 80253ae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80253b0:	69fb      	ldr	r3, [r7, #28]
 80253b2:	685b      	ldr	r3, [r3, #4]
 80253b4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80253b6:	697b      	ldr	r3, [r7, #20]
 80253b8:	78fa      	ldrb	r2, [r7, #3]
 80253ba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80253bc:	697b      	ldr	r3, [r7, #20]
 80253be:	78ba      	ldrb	r2, [r7, #2]
 80253c0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80253c2:	697b      	ldr	r3, [r7, #20]
 80253c4:	2200      	movs	r2, #0
 80253c6:	711a      	strb	r2, [r3, #4]
 80253c8:	2200      	movs	r2, #0
 80253ca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80253cc:	697b      	ldr	r3, [r7, #20]
 80253ce:	2200      	movs	r2, #0
 80253d0:	719a      	strb	r2, [r3, #6]
 80253d2:	2200      	movs	r2, #0
 80253d4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80253d6:	69fb      	ldr	r3, [r7, #28]
 80253d8:	685b      	ldr	r3, [r3, #4]
 80253da:	f103 0008 	add.w	r0, r3, #8
 80253de:	687b      	ldr	r3, [r7, #4]
 80253e0:	685b      	ldr	r3, [r3, #4]
 80253e2:	221c      	movs	r2, #28
 80253e4:	4619      	mov	r1, r3
 80253e6:	f001 faf1 	bl	80269cc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80253ea:	69bb      	ldr	r3, [r7, #24]
 80253ec:	68db      	ldr	r3, [r3, #12]
 80253ee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80253f0:	f107 030c 	add.w	r3, r7, #12
 80253f4:	4618      	mov	r0, r3
 80253f6:	f000 f825 	bl	8025444 <ip4_route>
 80253fa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80253fc:	693b      	ldr	r3, [r7, #16]
 80253fe:	2b00      	cmp	r3, #0
 8025400:	d011      	beq.n	8025426 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8025402:	697b      	ldr	r3, [r7, #20]
 8025404:	2200      	movs	r2, #0
 8025406:	709a      	strb	r2, [r3, #2]
 8025408:	2200      	movs	r2, #0
 802540a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 802540c:	f107 020c 	add.w	r2, r7, #12
 8025410:	693b      	ldr	r3, [r7, #16]
 8025412:	9302      	str	r3, [sp, #8]
 8025414:	2301      	movs	r3, #1
 8025416:	9301      	str	r3, [sp, #4]
 8025418:	2300      	movs	r3, #0
 802541a:	9300      	str	r3, [sp, #0]
 802541c:	23ff      	movs	r3, #255	; 0xff
 802541e:	2100      	movs	r1, #0
 8025420:	69f8      	ldr	r0, [r7, #28]
 8025422:	f000 f9c3 	bl	80257ac <ip4_output_if>
  }
  pbuf_free(q);
 8025426:	69f8      	ldr	r0, [r7, #28]
 8025428:	f7fd fea8 	bl	802317c <pbuf_free>
 802542c:	e000      	b.n	8025430 <icmp_send_response+0xc0>
    return;
 802542e:	bf00      	nop
}
 8025430:	3720      	adds	r7, #32
 8025432:	46bd      	mov	sp, r7
 8025434:	bd80      	pop	{r7, pc}
 8025436:	bf00      	nop
 8025438:	0802d774 	.word	0x0802d774
 802543c:	0802d840 	.word	0x0802d840
 8025440:	0802d7e4 	.word	0x0802d7e4

08025444 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8025444:	b480      	push	{r7}
 8025446:	b085      	sub	sp, #20
 8025448:	af00      	add	r7, sp, #0
 802544a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 802544c:	4b33      	ldr	r3, [pc, #204]	; (802551c <ip4_route+0xd8>)
 802544e:	681b      	ldr	r3, [r3, #0]
 8025450:	60fb      	str	r3, [r7, #12]
 8025452:	e036      	b.n	80254c2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8025454:	68fb      	ldr	r3, [r7, #12]
 8025456:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802545a:	f003 0301 	and.w	r3, r3, #1
 802545e:	b2db      	uxtb	r3, r3
 8025460:	2b00      	cmp	r3, #0
 8025462:	d02b      	beq.n	80254bc <ip4_route+0x78>
 8025464:	68fb      	ldr	r3, [r7, #12]
 8025466:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802546a:	089b      	lsrs	r3, r3, #2
 802546c:	f003 0301 	and.w	r3, r3, #1
 8025470:	b2db      	uxtb	r3, r3
 8025472:	2b00      	cmp	r3, #0
 8025474:	d022      	beq.n	80254bc <ip4_route+0x78>
 8025476:	68fb      	ldr	r3, [r7, #12]
 8025478:	3304      	adds	r3, #4
 802547a:	681b      	ldr	r3, [r3, #0]
 802547c:	2b00      	cmp	r3, #0
 802547e:	d01d      	beq.n	80254bc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8025480:	687b      	ldr	r3, [r7, #4]
 8025482:	681a      	ldr	r2, [r3, #0]
 8025484:	68fb      	ldr	r3, [r7, #12]
 8025486:	3304      	adds	r3, #4
 8025488:	681b      	ldr	r3, [r3, #0]
 802548a:	405a      	eors	r2, r3
 802548c:	68fb      	ldr	r3, [r7, #12]
 802548e:	3308      	adds	r3, #8
 8025490:	681b      	ldr	r3, [r3, #0]
 8025492:	4013      	ands	r3, r2
 8025494:	2b00      	cmp	r3, #0
 8025496:	d101      	bne.n	802549c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8025498:	68fb      	ldr	r3, [r7, #12]
 802549a:	e038      	b.n	802550e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 802549c:	68fb      	ldr	r3, [r7, #12]
 802549e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80254a2:	f003 0302 	and.w	r3, r3, #2
 80254a6:	2b00      	cmp	r3, #0
 80254a8:	d108      	bne.n	80254bc <ip4_route+0x78>
 80254aa:	687b      	ldr	r3, [r7, #4]
 80254ac:	681a      	ldr	r2, [r3, #0]
 80254ae:	68fb      	ldr	r3, [r7, #12]
 80254b0:	330c      	adds	r3, #12
 80254b2:	681b      	ldr	r3, [r3, #0]
 80254b4:	429a      	cmp	r2, r3
 80254b6:	d101      	bne.n	80254bc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80254b8:	68fb      	ldr	r3, [r7, #12]
 80254ba:	e028      	b.n	802550e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80254bc:	68fb      	ldr	r3, [r7, #12]
 80254be:	681b      	ldr	r3, [r3, #0]
 80254c0:	60fb      	str	r3, [r7, #12]
 80254c2:	68fb      	ldr	r3, [r7, #12]
 80254c4:	2b00      	cmp	r3, #0
 80254c6:	d1c5      	bne.n	8025454 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80254c8:	4b15      	ldr	r3, [pc, #84]	; (8025520 <ip4_route+0xdc>)
 80254ca:	681b      	ldr	r3, [r3, #0]
 80254cc:	2b00      	cmp	r3, #0
 80254ce:	d01a      	beq.n	8025506 <ip4_route+0xc2>
 80254d0:	4b13      	ldr	r3, [pc, #76]	; (8025520 <ip4_route+0xdc>)
 80254d2:	681b      	ldr	r3, [r3, #0]
 80254d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80254d8:	f003 0301 	and.w	r3, r3, #1
 80254dc:	2b00      	cmp	r3, #0
 80254de:	d012      	beq.n	8025506 <ip4_route+0xc2>
 80254e0:	4b0f      	ldr	r3, [pc, #60]	; (8025520 <ip4_route+0xdc>)
 80254e2:	681b      	ldr	r3, [r3, #0]
 80254e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80254e8:	f003 0304 	and.w	r3, r3, #4
 80254ec:	2b00      	cmp	r3, #0
 80254ee:	d00a      	beq.n	8025506 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80254f0:	4b0b      	ldr	r3, [pc, #44]	; (8025520 <ip4_route+0xdc>)
 80254f2:	681b      	ldr	r3, [r3, #0]
 80254f4:	3304      	adds	r3, #4
 80254f6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80254f8:	2b00      	cmp	r3, #0
 80254fa:	d004      	beq.n	8025506 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80254fc:	687b      	ldr	r3, [r7, #4]
 80254fe:	681b      	ldr	r3, [r3, #0]
 8025500:	b2db      	uxtb	r3, r3
 8025502:	2b7f      	cmp	r3, #127	; 0x7f
 8025504:	d101      	bne.n	802550a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8025506:	2300      	movs	r3, #0
 8025508:	e001      	b.n	802550e <ip4_route+0xca>
  }

  return netif_default;
 802550a:	4b05      	ldr	r3, [pc, #20]	; (8025520 <ip4_route+0xdc>)
 802550c:	681b      	ldr	r3, [r3, #0]
}
 802550e:	4618      	mov	r0, r3
 8025510:	3714      	adds	r7, #20
 8025512:	46bd      	mov	sp, r7
 8025514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025518:	4770      	bx	lr
 802551a:	bf00      	nop
 802551c:	20015df0 	.word	0x20015df0
 8025520:	20015df4 	.word	0x20015df4

08025524 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8025524:	b580      	push	{r7, lr}
 8025526:	b082      	sub	sp, #8
 8025528:	af00      	add	r7, sp, #0
 802552a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 802552c:	687b      	ldr	r3, [r7, #4]
 802552e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8025532:	f003 0301 	and.w	r3, r3, #1
 8025536:	b2db      	uxtb	r3, r3
 8025538:	2b00      	cmp	r3, #0
 802553a:	d016      	beq.n	802556a <ip4_input_accept+0x46>
 802553c:	687b      	ldr	r3, [r7, #4]
 802553e:	3304      	adds	r3, #4
 8025540:	681b      	ldr	r3, [r3, #0]
 8025542:	2b00      	cmp	r3, #0
 8025544:	d011      	beq.n	802556a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8025546:	4b0b      	ldr	r3, [pc, #44]	; (8025574 <ip4_input_accept+0x50>)
 8025548:	695a      	ldr	r2, [r3, #20]
 802554a:	687b      	ldr	r3, [r7, #4]
 802554c:	3304      	adds	r3, #4
 802554e:	681b      	ldr	r3, [r3, #0]
 8025550:	429a      	cmp	r2, r3
 8025552:	d008      	beq.n	8025566 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8025554:	4b07      	ldr	r3, [pc, #28]	; (8025574 <ip4_input_accept+0x50>)
 8025556:	695b      	ldr	r3, [r3, #20]
 8025558:	6879      	ldr	r1, [r7, #4]
 802555a:	4618      	mov	r0, r3
 802555c:	f000 fa0c 	bl	8025978 <ip4_addr_isbroadcast_u32>
 8025560:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8025562:	2b00      	cmp	r3, #0
 8025564:	d001      	beq.n	802556a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8025566:	2301      	movs	r3, #1
 8025568:	e000      	b.n	802556c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802556a:	2300      	movs	r3, #0
}
 802556c:	4618      	mov	r0, r3
 802556e:	3708      	adds	r7, #8
 8025570:	46bd      	mov	sp, r7
 8025572:	bd80      	pop	{r7, pc}
 8025574:	200127e0 	.word	0x200127e0

08025578 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8025578:	b580      	push	{r7, lr}
 802557a:	b086      	sub	sp, #24
 802557c:	af00      	add	r7, sp, #0
 802557e:	6078      	str	r0, [r7, #4]
 8025580:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8025582:	687b      	ldr	r3, [r7, #4]
 8025584:	685b      	ldr	r3, [r3, #4]
 8025586:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8025588:	697b      	ldr	r3, [r7, #20]
 802558a:	781b      	ldrb	r3, [r3, #0]
 802558c:	091b      	lsrs	r3, r3, #4
 802558e:	b2db      	uxtb	r3, r3
 8025590:	2b04      	cmp	r3, #4
 8025592:	d004      	beq.n	802559e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8025594:	6878      	ldr	r0, [r7, #4]
 8025596:	f7fd fdf1 	bl	802317c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 802559a:	2300      	movs	r3, #0
 802559c:	e0fd      	b.n	802579a <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 802559e:	697b      	ldr	r3, [r7, #20]
 80255a0:	781b      	ldrb	r3, [r3, #0]
 80255a2:	f003 030f 	and.w	r3, r3, #15
 80255a6:	b2db      	uxtb	r3, r3
 80255a8:	009b      	lsls	r3, r3, #2
 80255aa:	b2db      	uxtb	r3, r3
 80255ac:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80255ae:	697b      	ldr	r3, [r7, #20]
 80255b0:	885b      	ldrh	r3, [r3, #2]
 80255b2:	b29b      	uxth	r3, r3
 80255b4:	4618      	mov	r0, r3
 80255b6:	f7fc fa05 	bl	80219c4 <lwip_htons>
 80255ba:	4603      	mov	r3, r0
 80255bc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80255be:	687b      	ldr	r3, [r7, #4]
 80255c0:	891b      	ldrh	r3, [r3, #8]
 80255c2:	89ba      	ldrh	r2, [r7, #12]
 80255c4:	429a      	cmp	r2, r3
 80255c6:	d204      	bcs.n	80255d2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80255c8:	89bb      	ldrh	r3, [r7, #12]
 80255ca:	4619      	mov	r1, r3
 80255cc:	6878      	ldr	r0, [r7, #4]
 80255ce:	f7fd fc4f 	bl	8022e70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80255d2:	687b      	ldr	r3, [r7, #4]
 80255d4:	895b      	ldrh	r3, [r3, #10]
 80255d6:	89fa      	ldrh	r2, [r7, #14]
 80255d8:	429a      	cmp	r2, r3
 80255da:	d807      	bhi.n	80255ec <ip4_input+0x74>
 80255dc:	687b      	ldr	r3, [r7, #4]
 80255de:	891b      	ldrh	r3, [r3, #8]
 80255e0:	89ba      	ldrh	r2, [r7, #12]
 80255e2:	429a      	cmp	r2, r3
 80255e4:	d802      	bhi.n	80255ec <ip4_input+0x74>
 80255e6:	89fb      	ldrh	r3, [r7, #14]
 80255e8:	2b13      	cmp	r3, #19
 80255ea:	d804      	bhi.n	80255f6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80255ec:	6878      	ldr	r0, [r7, #4]
 80255ee:	f7fd fdc5 	bl	802317c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80255f2:	2300      	movs	r3, #0
 80255f4:	e0d1      	b.n	802579a <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80255f6:	697b      	ldr	r3, [r7, #20]
 80255f8:	691b      	ldr	r3, [r3, #16]
 80255fa:	4a6a      	ldr	r2, [pc, #424]	; (80257a4 <ip4_input+0x22c>)
 80255fc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80255fe:	697b      	ldr	r3, [r7, #20]
 8025600:	68db      	ldr	r3, [r3, #12]
 8025602:	4a68      	ldr	r2, [pc, #416]	; (80257a4 <ip4_input+0x22c>)
 8025604:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8025606:	4b67      	ldr	r3, [pc, #412]	; (80257a4 <ip4_input+0x22c>)
 8025608:	695b      	ldr	r3, [r3, #20]
 802560a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802560e:	2be0      	cmp	r3, #224	; 0xe0
 8025610:	d112      	bne.n	8025638 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8025612:	683b      	ldr	r3, [r7, #0]
 8025614:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8025618:	f003 0301 	and.w	r3, r3, #1
 802561c:	b2db      	uxtb	r3, r3
 802561e:	2b00      	cmp	r3, #0
 8025620:	d007      	beq.n	8025632 <ip4_input+0xba>
 8025622:	683b      	ldr	r3, [r7, #0]
 8025624:	3304      	adds	r3, #4
 8025626:	681b      	ldr	r3, [r3, #0]
 8025628:	2b00      	cmp	r3, #0
 802562a:	d002      	beq.n	8025632 <ip4_input+0xba>
      netif = inp;
 802562c:	683b      	ldr	r3, [r7, #0]
 802562e:	613b      	str	r3, [r7, #16]
 8025630:	e02a      	b.n	8025688 <ip4_input+0x110>
    } else {
      netif = NULL;
 8025632:	2300      	movs	r3, #0
 8025634:	613b      	str	r3, [r7, #16]
 8025636:	e027      	b.n	8025688 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8025638:	6838      	ldr	r0, [r7, #0]
 802563a:	f7ff ff73 	bl	8025524 <ip4_input_accept>
 802563e:	4603      	mov	r3, r0
 8025640:	2b00      	cmp	r3, #0
 8025642:	d002      	beq.n	802564a <ip4_input+0xd2>
      netif = inp;
 8025644:	683b      	ldr	r3, [r7, #0]
 8025646:	613b      	str	r3, [r7, #16]
 8025648:	e01e      	b.n	8025688 <ip4_input+0x110>
    } else {
      netif = NULL;
 802564a:	2300      	movs	r3, #0
 802564c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 802564e:	4b55      	ldr	r3, [pc, #340]	; (80257a4 <ip4_input+0x22c>)
 8025650:	695b      	ldr	r3, [r3, #20]
 8025652:	b2db      	uxtb	r3, r3
 8025654:	2b7f      	cmp	r3, #127	; 0x7f
 8025656:	d017      	beq.n	8025688 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8025658:	4b53      	ldr	r3, [pc, #332]	; (80257a8 <ip4_input+0x230>)
 802565a:	681b      	ldr	r3, [r3, #0]
 802565c:	613b      	str	r3, [r7, #16]
 802565e:	e00e      	b.n	802567e <ip4_input+0x106>
          if (netif == inp) {
 8025660:	693a      	ldr	r2, [r7, #16]
 8025662:	683b      	ldr	r3, [r7, #0]
 8025664:	429a      	cmp	r2, r3
 8025666:	d006      	beq.n	8025676 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8025668:	6938      	ldr	r0, [r7, #16]
 802566a:	f7ff ff5b 	bl	8025524 <ip4_input_accept>
 802566e:	4603      	mov	r3, r0
 8025670:	2b00      	cmp	r3, #0
 8025672:	d108      	bne.n	8025686 <ip4_input+0x10e>
 8025674:	e000      	b.n	8025678 <ip4_input+0x100>
            continue;
 8025676:	bf00      	nop
        NETIF_FOREACH(netif) {
 8025678:	693b      	ldr	r3, [r7, #16]
 802567a:	681b      	ldr	r3, [r3, #0]
 802567c:	613b      	str	r3, [r7, #16]
 802567e:	693b      	ldr	r3, [r7, #16]
 8025680:	2b00      	cmp	r3, #0
 8025682:	d1ed      	bne.n	8025660 <ip4_input+0xe8>
 8025684:	e000      	b.n	8025688 <ip4_input+0x110>
            break;
 8025686:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8025688:	4b46      	ldr	r3, [pc, #280]	; (80257a4 <ip4_input+0x22c>)
 802568a:	691b      	ldr	r3, [r3, #16]
 802568c:	6839      	ldr	r1, [r7, #0]
 802568e:	4618      	mov	r0, r3
 8025690:	f000 f972 	bl	8025978 <ip4_addr_isbroadcast_u32>
 8025694:	4603      	mov	r3, r0
 8025696:	2b00      	cmp	r3, #0
 8025698:	d105      	bne.n	80256a6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 802569a:	4b42      	ldr	r3, [pc, #264]	; (80257a4 <ip4_input+0x22c>)
 802569c:	691b      	ldr	r3, [r3, #16]
 802569e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80256a2:	2be0      	cmp	r3, #224	; 0xe0
 80256a4:	d104      	bne.n	80256b0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80256a6:	6878      	ldr	r0, [r7, #4]
 80256a8:	f7fd fd68 	bl	802317c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80256ac:	2300      	movs	r3, #0
 80256ae:	e074      	b.n	802579a <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80256b0:	693b      	ldr	r3, [r7, #16]
 80256b2:	2b00      	cmp	r3, #0
 80256b4:	d104      	bne.n	80256c0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80256b6:	6878      	ldr	r0, [r7, #4]
 80256b8:	f7fd fd60 	bl	802317c <pbuf_free>
    return ERR_OK;
 80256bc:	2300      	movs	r3, #0
 80256be:	e06c      	b.n	802579a <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80256c0:	697b      	ldr	r3, [r7, #20]
 80256c2:	88db      	ldrh	r3, [r3, #6]
 80256c4:	b29b      	uxth	r3, r3
 80256c6:	461a      	mov	r2, r3
 80256c8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80256cc:	4013      	ands	r3, r2
 80256ce:	2b00      	cmp	r3, #0
 80256d0:	d00b      	beq.n	80256ea <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80256d2:	6878      	ldr	r0, [r7, #4]
 80256d4:	f000 fd26 	bl	8026124 <ip4_reass>
 80256d8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80256da:	687b      	ldr	r3, [r7, #4]
 80256dc:	2b00      	cmp	r3, #0
 80256de:	d101      	bne.n	80256e4 <ip4_input+0x16c>
      return ERR_OK;
 80256e0:	2300      	movs	r3, #0
 80256e2:	e05a      	b.n	802579a <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80256e4:	687b      	ldr	r3, [r7, #4]
 80256e6:	685b      	ldr	r3, [r3, #4]
 80256e8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80256ea:	4a2e      	ldr	r2, [pc, #184]	; (80257a4 <ip4_input+0x22c>)
 80256ec:	693b      	ldr	r3, [r7, #16]
 80256ee:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80256f0:	4a2c      	ldr	r2, [pc, #176]	; (80257a4 <ip4_input+0x22c>)
 80256f2:	683b      	ldr	r3, [r7, #0]
 80256f4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80256f6:	4a2b      	ldr	r2, [pc, #172]	; (80257a4 <ip4_input+0x22c>)
 80256f8:	697b      	ldr	r3, [r7, #20]
 80256fa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80256fc:	697b      	ldr	r3, [r7, #20]
 80256fe:	781b      	ldrb	r3, [r3, #0]
 8025700:	f003 030f 	and.w	r3, r3, #15
 8025704:	b2db      	uxtb	r3, r3
 8025706:	009b      	lsls	r3, r3, #2
 8025708:	b2db      	uxtb	r3, r3
 802570a:	b29a      	uxth	r2, r3
 802570c:	4b25      	ldr	r3, [pc, #148]	; (80257a4 <ip4_input+0x22c>)
 802570e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8025710:	89fb      	ldrh	r3, [r7, #14]
 8025712:	4619      	mov	r1, r3
 8025714:	6878      	ldr	r0, [r7, #4]
 8025716:	f7fd fcab 	bl	8023070 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802571a:	697b      	ldr	r3, [r7, #20]
 802571c:	7a5b      	ldrb	r3, [r3, #9]
 802571e:	2b01      	cmp	r3, #1
 8025720:	d006      	beq.n	8025730 <ip4_input+0x1b8>
 8025722:	2b11      	cmp	r3, #17
 8025724:	d109      	bne.n	802573a <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8025726:	6839      	ldr	r1, [r7, #0]
 8025728:	6878      	ldr	r0, [r7, #4]
 802572a:	f7fe f9b5 	bl	8023a98 <udp_input>
        break;
 802572e:	e021      	b.n	8025774 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8025730:	6839      	ldr	r1, [r7, #0]
 8025732:	6878      	ldr	r0, [r7, #4]
 8025734:	f7ff fcf8 	bl	8025128 <icmp_input>
        break;
 8025738:	e01c      	b.n	8025774 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802573a:	4b1a      	ldr	r3, [pc, #104]	; (80257a4 <ip4_input+0x22c>)
 802573c:	695b      	ldr	r3, [r3, #20]
 802573e:	6939      	ldr	r1, [r7, #16]
 8025740:	4618      	mov	r0, r3
 8025742:	f000 f919 	bl	8025978 <ip4_addr_isbroadcast_u32>
 8025746:	4603      	mov	r3, r0
 8025748:	2b00      	cmp	r3, #0
 802574a:	d10f      	bne.n	802576c <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802574c:	4b15      	ldr	r3, [pc, #84]	; (80257a4 <ip4_input+0x22c>)
 802574e:	695b      	ldr	r3, [r3, #20]
 8025750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8025754:	2be0      	cmp	r3, #224	; 0xe0
 8025756:	d009      	beq.n	802576c <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8025758:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802575c:	4619      	mov	r1, r3
 802575e:	6878      	ldr	r0, [r7, #4]
 8025760:	f7fd fcf9 	bl	8023156 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8025764:	2102      	movs	r1, #2
 8025766:	6878      	ldr	r0, [r7, #4]
 8025768:	f7ff fde2 	bl	8025330 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 802576c:	6878      	ldr	r0, [r7, #4]
 802576e:	f7fd fd05 	bl	802317c <pbuf_free>
        break;
 8025772:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8025774:	4b0b      	ldr	r3, [pc, #44]	; (80257a4 <ip4_input+0x22c>)
 8025776:	2200      	movs	r2, #0
 8025778:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 802577a:	4b0a      	ldr	r3, [pc, #40]	; (80257a4 <ip4_input+0x22c>)
 802577c:	2200      	movs	r2, #0
 802577e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8025780:	4b08      	ldr	r3, [pc, #32]	; (80257a4 <ip4_input+0x22c>)
 8025782:	2200      	movs	r2, #0
 8025784:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8025786:	4b07      	ldr	r3, [pc, #28]	; (80257a4 <ip4_input+0x22c>)
 8025788:	2200      	movs	r2, #0
 802578a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 802578c:	4b05      	ldr	r3, [pc, #20]	; (80257a4 <ip4_input+0x22c>)
 802578e:	2200      	movs	r2, #0
 8025790:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8025792:	4b04      	ldr	r3, [pc, #16]	; (80257a4 <ip4_input+0x22c>)
 8025794:	2200      	movs	r2, #0
 8025796:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8025798:	2300      	movs	r3, #0
}
 802579a:	4618      	mov	r0, r3
 802579c:	3718      	adds	r7, #24
 802579e:	46bd      	mov	sp, r7
 80257a0:	bd80      	pop	{r7, pc}
 80257a2:	bf00      	nop
 80257a4:	200127e0 	.word	0x200127e0
 80257a8:	20015df0 	.word	0x20015df0

080257ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80257ac:	b580      	push	{r7, lr}
 80257ae:	b08a      	sub	sp, #40	; 0x28
 80257b0:	af04      	add	r7, sp, #16
 80257b2:	60f8      	str	r0, [r7, #12]
 80257b4:	60b9      	str	r1, [r7, #8]
 80257b6:	607a      	str	r2, [r7, #4]
 80257b8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80257ba:	68bb      	ldr	r3, [r7, #8]
 80257bc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80257be:	687b      	ldr	r3, [r7, #4]
 80257c0:	2b00      	cmp	r3, #0
 80257c2:	d009      	beq.n	80257d8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80257c4:	68bb      	ldr	r3, [r7, #8]
 80257c6:	2b00      	cmp	r3, #0
 80257c8:	d003      	beq.n	80257d2 <ip4_output_if+0x26>
 80257ca:	68bb      	ldr	r3, [r7, #8]
 80257cc:	681b      	ldr	r3, [r3, #0]
 80257ce:	2b00      	cmp	r3, #0
 80257d0:	d102      	bne.n	80257d8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80257d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257d4:	3304      	adds	r3, #4
 80257d6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80257d8:	78fa      	ldrb	r2, [r7, #3]
 80257da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257dc:	9302      	str	r3, [sp, #8]
 80257de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80257e2:	9301      	str	r3, [sp, #4]
 80257e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80257e8:	9300      	str	r3, [sp, #0]
 80257ea:	4613      	mov	r3, r2
 80257ec:	687a      	ldr	r2, [r7, #4]
 80257ee:	6979      	ldr	r1, [r7, #20]
 80257f0:	68f8      	ldr	r0, [r7, #12]
 80257f2:	f000 f805 	bl	8025800 <ip4_output_if_src>
 80257f6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80257f8:	4618      	mov	r0, r3
 80257fa:	3718      	adds	r7, #24
 80257fc:	46bd      	mov	sp, r7
 80257fe:	bd80      	pop	{r7, pc}

08025800 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8025800:	b580      	push	{r7, lr}
 8025802:	b088      	sub	sp, #32
 8025804:	af00      	add	r7, sp, #0
 8025806:	60f8      	str	r0, [r7, #12]
 8025808:	60b9      	str	r1, [r7, #8]
 802580a:	607a      	str	r2, [r7, #4]
 802580c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 802580e:	68fb      	ldr	r3, [r7, #12]
 8025810:	7b9b      	ldrb	r3, [r3, #14]
 8025812:	2b01      	cmp	r3, #1
 8025814:	d006      	beq.n	8025824 <ip4_output_if_src+0x24>
 8025816:	4b52      	ldr	r3, [pc, #328]	; (8025960 <ip4_output_if_src+0x160>)
 8025818:	f44f 7255 	mov.w	r2, #852	; 0x354
 802581c:	4951      	ldr	r1, [pc, #324]	; (8025964 <ip4_output_if_src+0x164>)
 802581e:	4852      	ldr	r0, [pc, #328]	; (8025968 <ip4_output_if_src+0x168>)
 8025820:	f001 f9e4 	bl	8026bec <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8025824:	687b      	ldr	r3, [r7, #4]
 8025826:	2b00      	cmp	r3, #0
 8025828:	d060      	beq.n	80258ec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 802582a:	2314      	movs	r3, #20
 802582c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 802582e:	2114      	movs	r1, #20
 8025830:	68f8      	ldr	r0, [r7, #12]
 8025832:	f7fd fc0d 	bl	8023050 <pbuf_add_header>
 8025836:	4603      	mov	r3, r0
 8025838:	2b00      	cmp	r3, #0
 802583a:	d002      	beq.n	8025842 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 802583c:	f06f 0301 	mvn.w	r3, #1
 8025840:	e089      	b.n	8025956 <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8025842:	68fb      	ldr	r3, [r7, #12]
 8025844:	685b      	ldr	r3, [r3, #4]
 8025846:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8025848:	68fb      	ldr	r3, [r7, #12]
 802584a:	895b      	ldrh	r3, [r3, #10]
 802584c:	2b13      	cmp	r3, #19
 802584e:	d806      	bhi.n	802585e <ip4_output_if_src+0x5e>
 8025850:	4b43      	ldr	r3, [pc, #268]	; (8025960 <ip4_output_if_src+0x160>)
 8025852:	f44f 7262 	mov.w	r2, #904	; 0x388
 8025856:	4945      	ldr	r1, [pc, #276]	; (802596c <ip4_output_if_src+0x16c>)
 8025858:	4843      	ldr	r0, [pc, #268]	; (8025968 <ip4_output_if_src+0x168>)
 802585a:	f001 f9c7 	bl	8026bec <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 802585e:	69fb      	ldr	r3, [r7, #28]
 8025860:	78fa      	ldrb	r2, [r7, #3]
 8025862:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8025864:	69fb      	ldr	r3, [r7, #28]
 8025866:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 802586a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 802586c:	687b      	ldr	r3, [r7, #4]
 802586e:	681a      	ldr	r2, [r3, #0]
 8025870:	69fb      	ldr	r3, [r7, #28]
 8025872:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8025874:	8b7b      	ldrh	r3, [r7, #26]
 8025876:	089b      	lsrs	r3, r3, #2
 8025878:	b29b      	uxth	r3, r3
 802587a:	b2db      	uxtb	r3, r3
 802587c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025880:	b2da      	uxtb	r2, r3
 8025882:	69fb      	ldr	r3, [r7, #28]
 8025884:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8025886:	69fb      	ldr	r3, [r7, #28]
 8025888:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 802588c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 802588e:	68fb      	ldr	r3, [r7, #12]
 8025890:	891b      	ldrh	r3, [r3, #8]
 8025892:	4618      	mov	r0, r3
 8025894:	f7fc f896 	bl	80219c4 <lwip_htons>
 8025898:	4603      	mov	r3, r0
 802589a:	461a      	mov	r2, r3
 802589c:	69fb      	ldr	r3, [r7, #28]
 802589e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80258a0:	69fb      	ldr	r3, [r7, #28]
 80258a2:	2200      	movs	r2, #0
 80258a4:	719a      	strb	r2, [r3, #6]
 80258a6:	2200      	movs	r2, #0
 80258a8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80258aa:	4b31      	ldr	r3, [pc, #196]	; (8025970 <ip4_output_if_src+0x170>)
 80258ac:	881b      	ldrh	r3, [r3, #0]
 80258ae:	4618      	mov	r0, r3
 80258b0:	f7fc f888 	bl	80219c4 <lwip_htons>
 80258b4:	4603      	mov	r3, r0
 80258b6:	461a      	mov	r2, r3
 80258b8:	69fb      	ldr	r3, [r7, #28]
 80258ba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80258bc:	4b2c      	ldr	r3, [pc, #176]	; (8025970 <ip4_output_if_src+0x170>)
 80258be:	881b      	ldrh	r3, [r3, #0]
 80258c0:	3301      	adds	r3, #1
 80258c2:	b29a      	uxth	r2, r3
 80258c4:	4b2a      	ldr	r3, [pc, #168]	; (8025970 <ip4_output_if_src+0x170>)
 80258c6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80258c8:	68bb      	ldr	r3, [r7, #8]
 80258ca:	2b00      	cmp	r3, #0
 80258cc:	d104      	bne.n	80258d8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80258ce:	4b29      	ldr	r3, [pc, #164]	; (8025974 <ip4_output_if_src+0x174>)
 80258d0:	681a      	ldr	r2, [r3, #0]
 80258d2:	69fb      	ldr	r3, [r7, #28]
 80258d4:	60da      	str	r2, [r3, #12]
 80258d6:	e003      	b.n	80258e0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80258d8:	68bb      	ldr	r3, [r7, #8]
 80258da:	681a      	ldr	r2, [r3, #0]
 80258dc:	69fb      	ldr	r3, [r7, #28]
 80258de:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80258e0:	69fb      	ldr	r3, [r7, #28]
 80258e2:	2200      	movs	r2, #0
 80258e4:	729a      	strb	r2, [r3, #10]
 80258e6:	2200      	movs	r2, #0
 80258e8:	72da      	strb	r2, [r3, #11]
 80258ea:	e00f      	b.n	802590c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80258ec:	68fb      	ldr	r3, [r7, #12]
 80258ee:	895b      	ldrh	r3, [r3, #10]
 80258f0:	2b13      	cmp	r3, #19
 80258f2:	d802      	bhi.n	80258fa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80258f4:	f06f 0301 	mvn.w	r3, #1
 80258f8:	e02d      	b.n	8025956 <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80258fa:	68fb      	ldr	r3, [r7, #12]
 80258fc:	685b      	ldr	r3, [r3, #4]
 80258fe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8025900:	69fb      	ldr	r3, [r7, #28]
 8025902:	691b      	ldr	r3, [r3, #16]
 8025904:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8025906:	f107 0314 	add.w	r3, r7, #20
 802590a:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 802590c:	687b      	ldr	r3, [r7, #4]
 802590e:	681a      	ldr	r2, [r3, #0]
 8025910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025912:	3304      	adds	r3, #4
 8025914:	681b      	ldr	r3, [r3, #0]
 8025916:	429a      	cmp	r2, r3
 8025918:	d105      	bne.n	8025926 <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 802591a:	68f9      	ldr	r1, [r7, #12]
 802591c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802591e:	f7fd f86f 	bl	8022a00 <netif_loop_output>
 8025922:	4603      	mov	r3, r0
 8025924:	e017      	b.n	8025956 <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8025926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802592a:	2b00      	cmp	r3, #0
 802592c:	d00c      	beq.n	8025948 <ip4_output_if_src+0x148>
 802592e:	68fb      	ldr	r3, [r7, #12]
 8025930:	891a      	ldrh	r2, [r3, #8]
 8025932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025936:	429a      	cmp	r2, r3
 8025938:	d906      	bls.n	8025948 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 802593a:	687a      	ldr	r2, [r7, #4]
 802593c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802593e:	68f8      	ldr	r0, [r7, #12]
 8025940:	f000 fde4 	bl	802650c <ip4_frag>
 8025944:	4603      	mov	r3, r0
 8025946:	e006      	b.n	8025956 <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8025948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802594a:	695b      	ldr	r3, [r3, #20]
 802594c:	687a      	ldr	r2, [r7, #4]
 802594e:	68f9      	ldr	r1, [r7, #12]
 8025950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025952:	4798      	blx	r3
 8025954:	4603      	mov	r3, r0
}
 8025956:	4618      	mov	r0, r3
 8025958:	3720      	adds	r7, #32
 802595a:	46bd      	mov	sp, r7
 802595c:	bd80      	pop	{r7, pc}
 802595e:	bf00      	nop
 8025960:	0802d86c 	.word	0x0802d86c
 8025964:	0802d8a0 	.word	0x0802d8a0
 8025968:	0802d8ac 	.word	0x0802d8ac
 802596c:	0802d8d4 	.word	0x0802d8d4
 8025970:	200162fa 	.word	0x200162fa
 8025974:	0802e078 	.word	0x0802e078

08025978 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8025978:	b480      	push	{r7}
 802597a:	b085      	sub	sp, #20
 802597c:	af00      	add	r7, sp, #0
 802597e:	6078      	str	r0, [r7, #4]
 8025980:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8025982:	687b      	ldr	r3, [r7, #4]
 8025984:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8025986:	687b      	ldr	r3, [r7, #4]
 8025988:	f1b3 3fff 	cmp.w	r3, #4294967295
 802598c:	d002      	beq.n	8025994 <ip4_addr_isbroadcast_u32+0x1c>
 802598e:	687b      	ldr	r3, [r7, #4]
 8025990:	2b00      	cmp	r3, #0
 8025992:	d101      	bne.n	8025998 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8025994:	2301      	movs	r3, #1
 8025996:	e02a      	b.n	80259ee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8025998:	683b      	ldr	r3, [r7, #0]
 802599a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802599e:	f003 0302 	and.w	r3, r3, #2
 80259a2:	2b00      	cmp	r3, #0
 80259a4:	d101      	bne.n	80259aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80259a6:	2300      	movs	r3, #0
 80259a8:	e021      	b.n	80259ee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80259aa:	683b      	ldr	r3, [r7, #0]
 80259ac:	3304      	adds	r3, #4
 80259ae:	681b      	ldr	r3, [r3, #0]
 80259b0:	687a      	ldr	r2, [r7, #4]
 80259b2:	429a      	cmp	r2, r3
 80259b4:	d101      	bne.n	80259ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80259b6:	2300      	movs	r3, #0
 80259b8:	e019      	b.n	80259ee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80259ba:	68fa      	ldr	r2, [r7, #12]
 80259bc:	683b      	ldr	r3, [r7, #0]
 80259be:	3304      	adds	r3, #4
 80259c0:	681b      	ldr	r3, [r3, #0]
 80259c2:	405a      	eors	r2, r3
 80259c4:	683b      	ldr	r3, [r7, #0]
 80259c6:	3308      	adds	r3, #8
 80259c8:	681b      	ldr	r3, [r3, #0]
 80259ca:	4013      	ands	r3, r2
 80259cc:	2b00      	cmp	r3, #0
 80259ce:	d10d      	bne.n	80259ec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80259d0:	683b      	ldr	r3, [r7, #0]
 80259d2:	3308      	adds	r3, #8
 80259d4:	681b      	ldr	r3, [r3, #0]
 80259d6:	43da      	mvns	r2, r3
 80259d8:	687b      	ldr	r3, [r7, #4]
 80259da:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80259dc:	683b      	ldr	r3, [r7, #0]
 80259de:	3308      	adds	r3, #8
 80259e0:	681b      	ldr	r3, [r3, #0]
 80259e2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80259e4:	429a      	cmp	r2, r3
 80259e6:	d101      	bne.n	80259ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80259e8:	2301      	movs	r3, #1
 80259ea:	e000      	b.n	80259ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80259ec:	2300      	movs	r3, #0
  }
}
 80259ee:	4618      	mov	r0, r3
 80259f0:	3714      	adds	r7, #20
 80259f2:	46bd      	mov	sp, r7
 80259f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259f8:	4770      	bx	lr
	...

080259fc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80259fc:	b580      	push	{r7, lr}
 80259fe:	b082      	sub	sp, #8
 8025a00:	af00      	add	r7, sp, #0
 8025a02:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8025a04:	2210      	movs	r2, #16
 8025a06:	4904      	ldr	r1, [pc, #16]	; (8025a18 <ip4addr_ntoa+0x1c>)
 8025a08:	6878      	ldr	r0, [r7, #4]
 8025a0a:	f000 f807 	bl	8025a1c <ip4addr_ntoa_r>
 8025a0e:	4603      	mov	r3, r0
}
 8025a10:	4618      	mov	r0, r3
 8025a12:	3708      	adds	r7, #8
 8025a14:	46bd      	mov	sp, r7
 8025a16:	bd80      	pop	{r7, pc}
 8025a18:	200162fc 	.word	0x200162fc

08025a1c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8025a1c:	b480      	push	{r7}
 8025a1e:	b08d      	sub	sp, #52	; 0x34
 8025a20:	af00      	add	r7, sp, #0
 8025a22:	60f8      	str	r0, [r7, #12]
 8025a24:	60b9      	str	r1, [r7, #8]
 8025a26:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8025a28:	2300      	movs	r3, #0
 8025a2a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8025a2c:	68fb      	ldr	r3, [r7, #12]
 8025a2e:	681b      	ldr	r3, [r3, #0]
 8025a30:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8025a32:	68bb      	ldr	r3, [r7, #8]
 8025a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8025a36:	f107 0318 	add.w	r3, r7, #24
 8025a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8025a3c:	2300      	movs	r3, #0
 8025a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8025a42:	e058      	b.n	8025af6 <ip4addr_ntoa_r+0xda>
    i = 0;
 8025a44:	2300      	movs	r3, #0
 8025a46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8025a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a4c:	781a      	ldrb	r2, [r3, #0]
 8025a4e:	4b32      	ldr	r3, [pc, #200]	; (8025b18 <ip4addr_ntoa_r+0xfc>)
 8025a50:	fba3 1302 	umull	r1, r3, r3, r2
 8025a54:	08d9      	lsrs	r1, r3, #3
 8025a56:	460b      	mov	r3, r1
 8025a58:	009b      	lsls	r3, r3, #2
 8025a5a:	440b      	add	r3, r1
 8025a5c:	005b      	lsls	r3, r3, #1
 8025a5e:	1ad3      	subs	r3, r2, r3
 8025a60:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8025a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a64:	781b      	ldrb	r3, [r3, #0]
 8025a66:	4a2c      	ldr	r2, [pc, #176]	; (8025b18 <ip4addr_ntoa_r+0xfc>)
 8025a68:	fba2 2303 	umull	r2, r3, r2, r3
 8025a6c:	08db      	lsrs	r3, r3, #3
 8025a6e:	b2da      	uxtb	r2, r3
 8025a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a72:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8025a74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8025a78:	1c5a      	adds	r2, r3, #1
 8025a7a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8025a7e:	4619      	mov	r1, r3
 8025a80:	7ffb      	ldrb	r3, [r7, #31]
 8025a82:	3330      	adds	r3, #48	; 0x30
 8025a84:	b2da      	uxtb	r2, r3
 8025a86:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8025a8a:	443b      	add	r3, r7
 8025a8c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8025a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a92:	781b      	ldrb	r3, [r3, #0]
 8025a94:	2b00      	cmp	r3, #0
 8025a96:	d1d8      	bne.n	8025a4a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8025a98:	e011      	b.n	8025abe <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8025a9a:	6a3b      	ldr	r3, [r7, #32]
 8025a9c:	1c5a      	adds	r2, r3, #1
 8025a9e:	623a      	str	r2, [r7, #32]
 8025aa0:	687a      	ldr	r2, [r7, #4]
 8025aa2:	429a      	cmp	r2, r3
 8025aa4:	dc01      	bgt.n	8025aaa <ip4addr_ntoa_r+0x8e>
        return NULL;
 8025aa6:	2300      	movs	r3, #0
 8025aa8:	e030      	b.n	8025b0c <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8025aaa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8025aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ab0:	1c59      	adds	r1, r3, #1
 8025ab2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8025ab4:	3230      	adds	r2, #48	; 0x30
 8025ab6:	443a      	add	r2, r7
 8025ab8:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8025abc:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8025abe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8025ac2:	1e5a      	subs	r2, r3, #1
 8025ac4:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8025ac8:	2b00      	cmp	r3, #0
 8025aca:	d1e6      	bne.n	8025a9a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8025acc:	6a3b      	ldr	r3, [r7, #32]
 8025ace:	1c5a      	adds	r2, r3, #1
 8025ad0:	623a      	str	r2, [r7, #32]
 8025ad2:	687a      	ldr	r2, [r7, #4]
 8025ad4:	429a      	cmp	r2, r3
 8025ad6:	dc01      	bgt.n	8025adc <ip4addr_ntoa_r+0xc0>
      return NULL;
 8025ad8:	2300      	movs	r3, #0
 8025ada:	e017      	b.n	8025b0c <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8025adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ade:	1c5a      	adds	r2, r3, #1
 8025ae0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8025ae2:	222e      	movs	r2, #46	; 0x2e
 8025ae4:	701a      	strb	r2, [r3, #0]
    ap++;
 8025ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025ae8:	3301      	adds	r3, #1
 8025aea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8025aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8025af0:	3301      	adds	r3, #1
 8025af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8025af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8025afa:	2b03      	cmp	r3, #3
 8025afc:	d9a2      	bls.n	8025a44 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8025afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025b00:	3b01      	subs	r3, #1
 8025b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025b06:	2200      	movs	r2, #0
 8025b08:	701a      	strb	r2, [r3, #0]
  return buf;
 8025b0a:	68bb      	ldr	r3, [r7, #8]
}
 8025b0c:	4618      	mov	r0, r3
 8025b0e:	3734      	adds	r7, #52	; 0x34
 8025b10:	46bd      	mov	sp, r7
 8025b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b16:	4770      	bx	lr
 8025b18:	cccccccd 	.word	0xcccccccd

08025b1c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8025b1c:	b580      	push	{r7, lr}
 8025b1e:	b084      	sub	sp, #16
 8025b20:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8025b22:	2300      	movs	r3, #0
 8025b24:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8025b26:	4b12      	ldr	r3, [pc, #72]	; (8025b70 <ip_reass_tmr+0x54>)
 8025b28:	681b      	ldr	r3, [r3, #0]
 8025b2a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8025b2c:	e018      	b.n	8025b60 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8025b2e:	68fb      	ldr	r3, [r7, #12]
 8025b30:	7fdb      	ldrb	r3, [r3, #31]
 8025b32:	2b00      	cmp	r3, #0
 8025b34:	d00b      	beq.n	8025b4e <ip_reass_tmr+0x32>
      r->timer--;
 8025b36:	68fb      	ldr	r3, [r7, #12]
 8025b38:	7fdb      	ldrb	r3, [r3, #31]
 8025b3a:	3b01      	subs	r3, #1
 8025b3c:	b2da      	uxtb	r2, r3
 8025b3e:	68fb      	ldr	r3, [r7, #12]
 8025b40:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8025b42:	68fb      	ldr	r3, [r7, #12]
 8025b44:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8025b46:	68fb      	ldr	r3, [r7, #12]
 8025b48:	681b      	ldr	r3, [r3, #0]
 8025b4a:	60fb      	str	r3, [r7, #12]
 8025b4c:	e008      	b.n	8025b60 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8025b4e:	68fb      	ldr	r3, [r7, #12]
 8025b50:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8025b52:	68fb      	ldr	r3, [r7, #12]
 8025b54:	681b      	ldr	r3, [r3, #0]
 8025b56:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8025b58:	68b9      	ldr	r1, [r7, #8]
 8025b5a:	6878      	ldr	r0, [r7, #4]
 8025b5c:	f000 f80a 	bl	8025b74 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8025b60:	68fb      	ldr	r3, [r7, #12]
 8025b62:	2b00      	cmp	r3, #0
 8025b64:	d1e3      	bne.n	8025b2e <ip_reass_tmr+0x12>
    }
  }
}
 8025b66:	bf00      	nop
 8025b68:	bf00      	nop
 8025b6a:	3710      	adds	r7, #16
 8025b6c:	46bd      	mov	sp, r7
 8025b6e:	bd80      	pop	{r7, pc}
 8025b70:	2001630c 	.word	0x2001630c

08025b74 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8025b74:	b580      	push	{r7, lr}
 8025b76:	b088      	sub	sp, #32
 8025b78:	af00      	add	r7, sp, #0
 8025b7a:	6078      	str	r0, [r7, #4]
 8025b7c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8025b7e:	2300      	movs	r3, #0
 8025b80:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8025b82:	683a      	ldr	r2, [r7, #0]
 8025b84:	687b      	ldr	r3, [r7, #4]
 8025b86:	429a      	cmp	r2, r3
 8025b88:	d105      	bne.n	8025b96 <ip_reass_free_complete_datagram+0x22>
 8025b8a:	4b45      	ldr	r3, [pc, #276]	; (8025ca0 <ip_reass_free_complete_datagram+0x12c>)
 8025b8c:	22ab      	movs	r2, #171	; 0xab
 8025b8e:	4945      	ldr	r1, [pc, #276]	; (8025ca4 <ip_reass_free_complete_datagram+0x130>)
 8025b90:	4845      	ldr	r0, [pc, #276]	; (8025ca8 <ip_reass_free_complete_datagram+0x134>)
 8025b92:	f001 f82b 	bl	8026bec <iprintf>
  if (prev != NULL) {
 8025b96:	683b      	ldr	r3, [r7, #0]
 8025b98:	2b00      	cmp	r3, #0
 8025b9a:	d00a      	beq.n	8025bb2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8025b9c:	683b      	ldr	r3, [r7, #0]
 8025b9e:	681b      	ldr	r3, [r3, #0]
 8025ba0:	687a      	ldr	r2, [r7, #4]
 8025ba2:	429a      	cmp	r2, r3
 8025ba4:	d005      	beq.n	8025bb2 <ip_reass_free_complete_datagram+0x3e>
 8025ba6:	4b3e      	ldr	r3, [pc, #248]	; (8025ca0 <ip_reass_free_complete_datagram+0x12c>)
 8025ba8:	22ad      	movs	r2, #173	; 0xad
 8025baa:	4940      	ldr	r1, [pc, #256]	; (8025cac <ip_reass_free_complete_datagram+0x138>)
 8025bac:	483e      	ldr	r0, [pc, #248]	; (8025ca8 <ip_reass_free_complete_datagram+0x134>)
 8025bae:	f001 f81d 	bl	8026bec <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8025bb2:	687b      	ldr	r3, [r7, #4]
 8025bb4:	685b      	ldr	r3, [r3, #4]
 8025bb6:	685b      	ldr	r3, [r3, #4]
 8025bb8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8025bba:	697b      	ldr	r3, [r7, #20]
 8025bbc:	889b      	ldrh	r3, [r3, #4]
 8025bbe:	b29b      	uxth	r3, r3
 8025bc0:	2b00      	cmp	r3, #0
 8025bc2:	d12a      	bne.n	8025c1a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8025bc4:	687b      	ldr	r3, [r7, #4]
 8025bc6:	685b      	ldr	r3, [r3, #4]
 8025bc8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8025bca:	697b      	ldr	r3, [r7, #20]
 8025bcc:	681a      	ldr	r2, [r3, #0]
 8025bce:	687b      	ldr	r3, [r7, #4]
 8025bd0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8025bd2:	69bb      	ldr	r3, [r7, #24]
 8025bd4:	6858      	ldr	r0, [r3, #4]
 8025bd6:	687b      	ldr	r3, [r7, #4]
 8025bd8:	3308      	adds	r3, #8
 8025bda:	2214      	movs	r2, #20
 8025bdc:	4619      	mov	r1, r3
 8025bde:	f000 fef5 	bl	80269cc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8025be2:	2101      	movs	r1, #1
 8025be4:	69b8      	ldr	r0, [r7, #24]
 8025be6:	f7ff fbb3 	bl	8025350 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8025bea:	69b8      	ldr	r0, [r7, #24]
 8025bec:	f7fd fb4e 	bl	802328c <pbuf_clen>
 8025bf0:	4603      	mov	r3, r0
 8025bf2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8025bf4:	8bfa      	ldrh	r2, [r7, #30]
 8025bf6:	8a7b      	ldrh	r3, [r7, #18]
 8025bf8:	4413      	add	r3, r2
 8025bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025bfe:	db05      	blt.n	8025c0c <ip_reass_free_complete_datagram+0x98>
 8025c00:	4b27      	ldr	r3, [pc, #156]	; (8025ca0 <ip_reass_free_complete_datagram+0x12c>)
 8025c02:	22bc      	movs	r2, #188	; 0xbc
 8025c04:	492a      	ldr	r1, [pc, #168]	; (8025cb0 <ip_reass_free_complete_datagram+0x13c>)
 8025c06:	4828      	ldr	r0, [pc, #160]	; (8025ca8 <ip_reass_free_complete_datagram+0x134>)
 8025c08:	f000 fff0 	bl	8026bec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8025c0c:	8bfa      	ldrh	r2, [r7, #30]
 8025c0e:	8a7b      	ldrh	r3, [r7, #18]
 8025c10:	4413      	add	r3, r2
 8025c12:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8025c14:	69b8      	ldr	r0, [r7, #24]
 8025c16:	f7fd fab1 	bl	802317c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8025c1a:	687b      	ldr	r3, [r7, #4]
 8025c1c:	685b      	ldr	r3, [r3, #4]
 8025c1e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8025c20:	e01f      	b.n	8025c62 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8025c22:	69bb      	ldr	r3, [r7, #24]
 8025c24:	685b      	ldr	r3, [r3, #4]
 8025c26:	617b      	str	r3, [r7, #20]
    pcur = p;
 8025c28:	69bb      	ldr	r3, [r7, #24]
 8025c2a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8025c2c:	697b      	ldr	r3, [r7, #20]
 8025c2e:	681b      	ldr	r3, [r3, #0]
 8025c30:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8025c32:	68f8      	ldr	r0, [r7, #12]
 8025c34:	f7fd fb2a 	bl	802328c <pbuf_clen>
 8025c38:	4603      	mov	r3, r0
 8025c3a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8025c3c:	8bfa      	ldrh	r2, [r7, #30]
 8025c3e:	8a7b      	ldrh	r3, [r7, #18]
 8025c40:	4413      	add	r3, r2
 8025c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025c46:	db05      	blt.n	8025c54 <ip_reass_free_complete_datagram+0xe0>
 8025c48:	4b15      	ldr	r3, [pc, #84]	; (8025ca0 <ip_reass_free_complete_datagram+0x12c>)
 8025c4a:	22cc      	movs	r2, #204	; 0xcc
 8025c4c:	4918      	ldr	r1, [pc, #96]	; (8025cb0 <ip_reass_free_complete_datagram+0x13c>)
 8025c4e:	4816      	ldr	r0, [pc, #88]	; (8025ca8 <ip_reass_free_complete_datagram+0x134>)
 8025c50:	f000 ffcc 	bl	8026bec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8025c54:	8bfa      	ldrh	r2, [r7, #30]
 8025c56:	8a7b      	ldrh	r3, [r7, #18]
 8025c58:	4413      	add	r3, r2
 8025c5a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8025c5c:	68f8      	ldr	r0, [r7, #12]
 8025c5e:	f7fd fa8d 	bl	802317c <pbuf_free>
  while (p != NULL) {
 8025c62:	69bb      	ldr	r3, [r7, #24]
 8025c64:	2b00      	cmp	r3, #0
 8025c66:	d1dc      	bne.n	8025c22 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8025c68:	6839      	ldr	r1, [r7, #0]
 8025c6a:	6878      	ldr	r0, [r7, #4]
 8025c6c:	f000 f8c2 	bl	8025df4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8025c70:	4b10      	ldr	r3, [pc, #64]	; (8025cb4 <ip_reass_free_complete_datagram+0x140>)
 8025c72:	881b      	ldrh	r3, [r3, #0]
 8025c74:	8bfa      	ldrh	r2, [r7, #30]
 8025c76:	429a      	cmp	r2, r3
 8025c78:	d905      	bls.n	8025c86 <ip_reass_free_complete_datagram+0x112>
 8025c7a:	4b09      	ldr	r3, [pc, #36]	; (8025ca0 <ip_reass_free_complete_datagram+0x12c>)
 8025c7c:	22d2      	movs	r2, #210	; 0xd2
 8025c7e:	490e      	ldr	r1, [pc, #56]	; (8025cb8 <ip_reass_free_complete_datagram+0x144>)
 8025c80:	4809      	ldr	r0, [pc, #36]	; (8025ca8 <ip_reass_free_complete_datagram+0x134>)
 8025c82:	f000 ffb3 	bl	8026bec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8025c86:	4b0b      	ldr	r3, [pc, #44]	; (8025cb4 <ip_reass_free_complete_datagram+0x140>)
 8025c88:	881a      	ldrh	r2, [r3, #0]
 8025c8a:	8bfb      	ldrh	r3, [r7, #30]
 8025c8c:	1ad3      	subs	r3, r2, r3
 8025c8e:	b29a      	uxth	r2, r3
 8025c90:	4b08      	ldr	r3, [pc, #32]	; (8025cb4 <ip_reass_free_complete_datagram+0x140>)
 8025c92:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8025c94:	8bfb      	ldrh	r3, [r7, #30]
}
 8025c96:	4618      	mov	r0, r3
 8025c98:	3720      	adds	r7, #32
 8025c9a:	46bd      	mov	sp, r7
 8025c9c:	bd80      	pop	{r7, pc}
 8025c9e:	bf00      	nop
 8025ca0:	0802d904 	.word	0x0802d904
 8025ca4:	0802d940 	.word	0x0802d940
 8025ca8:	0802d94c 	.word	0x0802d94c
 8025cac:	0802d974 	.word	0x0802d974
 8025cb0:	0802d988 	.word	0x0802d988
 8025cb4:	20016310 	.word	0x20016310
 8025cb8:	0802d9a8 	.word	0x0802d9a8

08025cbc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8025cbc:	b580      	push	{r7, lr}
 8025cbe:	b08a      	sub	sp, #40	; 0x28
 8025cc0:	af00      	add	r7, sp, #0
 8025cc2:	6078      	str	r0, [r7, #4]
 8025cc4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8025cc6:	2300      	movs	r3, #0
 8025cc8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8025cca:	2300      	movs	r3, #0
 8025ccc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8025cce:	2300      	movs	r3, #0
 8025cd0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8025cd2:	2300      	movs	r3, #0
 8025cd4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8025cd6:	2300      	movs	r3, #0
 8025cd8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8025cda:	4b28      	ldr	r3, [pc, #160]	; (8025d7c <ip_reass_remove_oldest_datagram+0xc0>)
 8025cdc:	681b      	ldr	r3, [r3, #0]
 8025cde:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8025ce0:	e030      	b.n	8025d44 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8025ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ce4:	695a      	ldr	r2, [r3, #20]
 8025ce6:	687b      	ldr	r3, [r7, #4]
 8025ce8:	68db      	ldr	r3, [r3, #12]
 8025cea:	429a      	cmp	r2, r3
 8025cec:	d10c      	bne.n	8025d08 <ip_reass_remove_oldest_datagram+0x4c>
 8025cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025cf0:	699a      	ldr	r2, [r3, #24]
 8025cf2:	687b      	ldr	r3, [r7, #4]
 8025cf4:	691b      	ldr	r3, [r3, #16]
 8025cf6:	429a      	cmp	r2, r3
 8025cf8:	d106      	bne.n	8025d08 <ip_reass_remove_oldest_datagram+0x4c>
 8025cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025cfc:	899a      	ldrh	r2, [r3, #12]
 8025cfe:	687b      	ldr	r3, [r7, #4]
 8025d00:	889b      	ldrh	r3, [r3, #4]
 8025d02:	b29b      	uxth	r3, r3
 8025d04:	429a      	cmp	r2, r3
 8025d06:	d014      	beq.n	8025d32 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8025d08:	693b      	ldr	r3, [r7, #16]
 8025d0a:	3301      	adds	r3, #1
 8025d0c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8025d0e:	6a3b      	ldr	r3, [r7, #32]
 8025d10:	2b00      	cmp	r3, #0
 8025d12:	d104      	bne.n	8025d1e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8025d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d16:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8025d18:	69fb      	ldr	r3, [r7, #28]
 8025d1a:	61bb      	str	r3, [r7, #24]
 8025d1c:	e009      	b.n	8025d32 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8025d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d20:	7fda      	ldrb	r2, [r3, #31]
 8025d22:	6a3b      	ldr	r3, [r7, #32]
 8025d24:	7fdb      	ldrb	r3, [r3, #31]
 8025d26:	429a      	cmp	r2, r3
 8025d28:	d803      	bhi.n	8025d32 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8025d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d2c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8025d2e:	69fb      	ldr	r3, [r7, #28]
 8025d30:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8025d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d34:	681b      	ldr	r3, [r3, #0]
 8025d36:	2b00      	cmp	r3, #0
 8025d38:	d001      	beq.n	8025d3e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8025d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d3c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8025d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d40:	681b      	ldr	r3, [r3, #0]
 8025d42:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8025d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d46:	2b00      	cmp	r3, #0
 8025d48:	d1cb      	bne.n	8025ce2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8025d4a:	6a3b      	ldr	r3, [r7, #32]
 8025d4c:	2b00      	cmp	r3, #0
 8025d4e:	d008      	beq.n	8025d62 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8025d50:	69b9      	ldr	r1, [r7, #24]
 8025d52:	6a38      	ldr	r0, [r7, #32]
 8025d54:	f7ff ff0e 	bl	8025b74 <ip_reass_free_complete_datagram>
 8025d58:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8025d5a:	697a      	ldr	r2, [r7, #20]
 8025d5c:	68fb      	ldr	r3, [r7, #12]
 8025d5e:	4413      	add	r3, r2
 8025d60:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8025d62:	697a      	ldr	r2, [r7, #20]
 8025d64:	683b      	ldr	r3, [r7, #0]
 8025d66:	429a      	cmp	r2, r3
 8025d68:	da02      	bge.n	8025d70 <ip_reass_remove_oldest_datagram+0xb4>
 8025d6a:	693b      	ldr	r3, [r7, #16]
 8025d6c:	2b01      	cmp	r3, #1
 8025d6e:	dcac      	bgt.n	8025cca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8025d70:	697b      	ldr	r3, [r7, #20]
}
 8025d72:	4618      	mov	r0, r3
 8025d74:	3728      	adds	r7, #40	; 0x28
 8025d76:	46bd      	mov	sp, r7
 8025d78:	bd80      	pop	{r7, pc}
 8025d7a:	bf00      	nop
 8025d7c:	2001630c 	.word	0x2001630c

08025d80 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8025d80:	b580      	push	{r7, lr}
 8025d82:	b084      	sub	sp, #16
 8025d84:	af00      	add	r7, sp, #0
 8025d86:	6078      	str	r0, [r7, #4]
 8025d88:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8025d8a:	2001      	movs	r0, #1
 8025d8c:	f7fc fa76 	bl	802227c <memp_malloc>
 8025d90:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8025d92:	68fb      	ldr	r3, [r7, #12]
 8025d94:	2b00      	cmp	r3, #0
 8025d96:	d110      	bne.n	8025dba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8025d98:	6839      	ldr	r1, [r7, #0]
 8025d9a:	6878      	ldr	r0, [r7, #4]
 8025d9c:	f7ff ff8e 	bl	8025cbc <ip_reass_remove_oldest_datagram>
 8025da0:	4602      	mov	r2, r0
 8025da2:	683b      	ldr	r3, [r7, #0]
 8025da4:	4293      	cmp	r3, r2
 8025da6:	dc03      	bgt.n	8025db0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8025da8:	2001      	movs	r0, #1
 8025daa:	f7fc fa67 	bl	802227c <memp_malloc>
 8025dae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8025db0:	68fb      	ldr	r3, [r7, #12]
 8025db2:	2b00      	cmp	r3, #0
 8025db4:	d101      	bne.n	8025dba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8025db6:	2300      	movs	r3, #0
 8025db8:	e016      	b.n	8025de8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8025dba:	2220      	movs	r2, #32
 8025dbc:	2100      	movs	r1, #0
 8025dbe:	68f8      	ldr	r0, [r7, #12]
 8025dc0:	f000 fe2c 	bl	8026a1c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8025dc4:	68fb      	ldr	r3, [r7, #12]
 8025dc6:	220f      	movs	r2, #15
 8025dc8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8025dca:	4b09      	ldr	r3, [pc, #36]	; (8025df0 <ip_reass_enqueue_new_datagram+0x70>)
 8025dcc:	681a      	ldr	r2, [r3, #0]
 8025dce:	68fb      	ldr	r3, [r7, #12]
 8025dd0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8025dd2:	4a07      	ldr	r2, [pc, #28]	; (8025df0 <ip_reass_enqueue_new_datagram+0x70>)
 8025dd4:	68fb      	ldr	r3, [r7, #12]
 8025dd6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8025dd8:	68fb      	ldr	r3, [r7, #12]
 8025dda:	3308      	adds	r3, #8
 8025ddc:	2214      	movs	r2, #20
 8025dde:	6879      	ldr	r1, [r7, #4]
 8025de0:	4618      	mov	r0, r3
 8025de2:	f000 fdf3 	bl	80269cc <memcpy>
  return ipr;
 8025de6:	68fb      	ldr	r3, [r7, #12]
}
 8025de8:	4618      	mov	r0, r3
 8025dea:	3710      	adds	r7, #16
 8025dec:	46bd      	mov	sp, r7
 8025dee:	bd80      	pop	{r7, pc}
 8025df0:	2001630c 	.word	0x2001630c

08025df4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8025df4:	b580      	push	{r7, lr}
 8025df6:	b082      	sub	sp, #8
 8025df8:	af00      	add	r7, sp, #0
 8025dfa:	6078      	str	r0, [r7, #4]
 8025dfc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8025dfe:	4b10      	ldr	r3, [pc, #64]	; (8025e40 <ip_reass_dequeue_datagram+0x4c>)
 8025e00:	681b      	ldr	r3, [r3, #0]
 8025e02:	687a      	ldr	r2, [r7, #4]
 8025e04:	429a      	cmp	r2, r3
 8025e06:	d104      	bne.n	8025e12 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8025e08:	687b      	ldr	r3, [r7, #4]
 8025e0a:	681b      	ldr	r3, [r3, #0]
 8025e0c:	4a0c      	ldr	r2, [pc, #48]	; (8025e40 <ip_reass_dequeue_datagram+0x4c>)
 8025e0e:	6013      	str	r3, [r2, #0]
 8025e10:	e00d      	b.n	8025e2e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8025e12:	683b      	ldr	r3, [r7, #0]
 8025e14:	2b00      	cmp	r3, #0
 8025e16:	d106      	bne.n	8025e26 <ip_reass_dequeue_datagram+0x32>
 8025e18:	4b0a      	ldr	r3, [pc, #40]	; (8025e44 <ip_reass_dequeue_datagram+0x50>)
 8025e1a:	f240 1245 	movw	r2, #325	; 0x145
 8025e1e:	490a      	ldr	r1, [pc, #40]	; (8025e48 <ip_reass_dequeue_datagram+0x54>)
 8025e20:	480a      	ldr	r0, [pc, #40]	; (8025e4c <ip_reass_dequeue_datagram+0x58>)
 8025e22:	f000 fee3 	bl	8026bec <iprintf>
    prev->next = ipr->next;
 8025e26:	687b      	ldr	r3, [r7, #4]
 8025e28:	681a      	ldr	r2, [r3, #0]
 8025e2a:	683b      	ldr	r3, [r7, #0]
 8025e2c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8025e2e:	6879      	ldr	r1, [r7, #4]
 8025e30:	2001      	movs	r0, #1
 8025e32:	f7fc fa93 	bl	802235c <memp_free>
}
 8025e36:	bf00      	nop
 8025e38:	3708      	adds	r7, #8
 8025e3a:	46bd      	mov	sp, r7
 8025e3c:	bd80      	pop	{r7, pc}
 8025e3e:	bf00      	nop
 8025e40:	2001630c 	.word	0x2001630c
 8025e44:	0802d904 	.word	0x0802d904
 8025e48:	0802d9cc 	.word	0x0802d9cc
 8025e4c:	0802d94c 	.word	0x0802d94c

08025e50 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8025e50:	b580      	push	{r7, lr}
 8025e52:	b08c      	sub	sp, #48	; 0x30
 8025e54:	af00      	add	r7, sp, #0
 8025e56:	60f8      	str	r0, [r7, #12]
 8025e58:	60b9      	str	r1, [r7, #8]
 8025e5a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8025e5c:	2300      	movs	r3, #0
 8025e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8025e60:	2301      	movs	r3, #1
 8025e62:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8025e64:	68bb      	ldr	r3, [r7, #8]
 8025e66:	685b      	ldr	r3, [r3, #4]
 8025e68:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8025e6a:	69fb      	ldr	r3, [r7, #28]
 8025e6c:	885b      	ldrh	r3, [r3, #2]
 8025e6e:	b29b      	uxth	r3, r3
 8025e70:	4618      	mov	r0, r3
 8025e72:	f7fb fda7 	bl	80219c4 <lwip_htons>
 8025e76:	4603      	mov	r3, r0
 8025e78:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8025e7a:	69fb      	ldr	r3, [r7, #28]
 8025e7c:	781b      	ldrb	r3, [r3, #0]
 8025e7e:	f003 030f 	and.w	r3, r3, #15
 8025e82:	b2db      	uxtb	r3, r3
 8025e84:	009b      	lsls	r3, r3, #2
 8025e86:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8025e88:	7e7b      	ldrb	r3, [r7, #25]
 8025e8a:	b29b      	uxth	r3, r3
 8025e8c:	8b7a      	ldrh	r2, [r7, #26]
 8025e8e:	429a      	cmp	r2, r3
 8025e90:	d202      	bcs.n	8025e98 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025e92:	f04f 33ff 	mov.w	r3, #4294967295
 8025e96:	e135      	b.n	8026104 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8025e98:	7e7b      	ldrb	r3, [r7, #25]
 8025e9a:	b29b      	uxth	r3, r3
 8025e9c:	8b7a      	ldrh	r2, [r7, #26]
 8025e9e:	1ad3      	subs	r3, r2, r3
 8025ea0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8025ea2:	69fb      	ldr	r3, [r7, #28]
 8025ea4:	88db      	ldrh	r3, [r3, #6]
 8025ea6:	b29b      	uxth	r3, r3
 8025ea8:	4618      	mov	r0, r3
 8025eaa:	f7fb fd8b 	bl	80219c4 <lwip_htons>
 8025eae:	4603      	mov	r3, r0
 8025eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025eb4:	b29b      	uxth	r3, r3
 8025eb6:	00db      	lsls	r3, r3, #3
 8025eb8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8025eba:	68bb      	ldr	r3, [r7, #8]
 8025ebc:	685b      	ldr	r3, [r3, #4]
 8025ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8025ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ec2:	2200      	movs	r2, #0
 8025ec4:	701a      	strb	r2, [r3, #0]
 8025ec6:	2200      	movs	r2, #0
 8025ec8:	705a      	strb	r2, [r3, #1]
 8025eca:	2200      	movs	r2, #0
 8025ecc:	709a      	strb	r2, [r3, #2]
 8025ece:	2200      	movs	r2, #0
 8025ed0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8025ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ed4:	8afa      	ldrh	r2, [r7, #22]
 8025ed6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8025ed8:	8afa      	ldrh	r2, [r7, #22]
 8025eda:	8b7b      	ldrh	r3, [r7, #26]
 8025edc:	4413      	add	r3, r2
 8025ede:	b29a      	uxth	r2, r3
 8025ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ee2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8025ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ee6:	88db      	ldrh	r3, [r3, #6]
 8025ee8:	b29b      	uxth	r3, r3
 8025eea:	8afa      	ldrh	r2, [r7, #22]
 8025eec:	429a      	cmp	r2, r3
 8025eee:	d902      	bls.n	8025ef6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8025ef4:	e106      	b.n	8026104 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8025ef6:	68fb      	ldr	r3, [r7, #12]
 8025ef8:	685b      	ldr	r3, [r3, #4]
 8025efa:	627b      	str	r3, [r7, #36]	; 0x24
 8025efc:	e068      	b.n	8025fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8025efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f00:	685b      	ldr	r3, [r3, #4]
 8025f02:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8025f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f06:	889b      	ldrh	r3, [r3, #4]
 8025f08:	b29a      	uxth	r2, r3
 8025f0a:	693b      	ldr	r3, [r7, #16]
 8025f0c:	889b      	ldrh	r3, [r3, #4]
 8025f0e:	b29b      	uxth	r3, r3
 8025f10:	429a      	cmp	r2, r3
 8025f12:	d235      	bcs.n	8025f80 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8025f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025f18:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8025f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f1c:	2b00      	cmp	r3, #0
 8025f1e:	d020      	beq.n	8025f62 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8025f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f22:	889b      	ldrh	r3, [r3, #4]
 8025f24:	b29a      	uxth	r2, r3
 8025f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f28:	88db      	ldrh	r3, [r3, #6]
 8025f2a:	b29b      	uxth	r3, r3
 8025f2c:	429a      	cmp	r2, r3
 8025f2e:	d307      	bcc.n	8025f40 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8025f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f32:	88db      	ldrh	r3, [r3, #6]
 8025f34:	b29a      	uxth	r2, r3
 8025f36:	693b      	ldr	r3, [r7, #16]
 8025f38:	889b      	ldrh	r3, [r3, #4]
 8025f3a:	b29b      	uxth	r3, r3
 8025f3c:	429a      	cmp	r2, r3
 8025f3e:	d902      	bls.n	8025f46 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025f40:	f04f 33ff 	mov.w	r3, #4294967295
 8025f44:	e0de      	b.n	8026104 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8025f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f48:	68ba      	ldr	r2, [r7, #8]
 8025f4a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8025f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f4e:	88db      	ldrh	r3, [r3, #6]
 8025f50:	b29a      	uxth	r2, r3
 8025f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f54:	889b      	ldrh	r3, [r3, #4]
 8025f56:	b29b      	uxth	r3, r3
 8025f58:	429a      	cmp	r2, r3
 8025f5a:	d03d      	beq.n	8025fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8025f5c:	2300      	movs	r3, #0
 8025f5e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8025f60:	e03a      	b.n	8025fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8025f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f64:	88db      	ldrh	r3, [r3, #6]
 8025f66:	b29a      	uxth	r2, r3
 8025f68:	693b      	ldr	r3, [r7, #16]
 8025f6a:	889b      	ldrh	r3, [r3, #4]
 8025f6c:	b29b      	uxth	r3, r3
 8025f6e:	429a      	cmp	r2, r3
 8025f70:	d902      	bls.n	8025f78 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025f72:	f04f 33ff 	mov.w	r3, #4294967295
 8025f76:	e0c5      	b.n	8026104 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8025f78:	68fb      	ldr	r3, [r7, #12]
 8025f7a:	68ba      	ldr	r2, [r7, #8]
 8025f7c:	605a      	str	r2, [r3, #4]
      break;
 8025f7e:	e02b      	b.n	8025fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8025f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f82:	889b      	ldrh	r3, [r3, #4]
 8025f84:	b29a      	uxth	r2, r3
 8025f86:	693b      	ldr	r3, [r7, #16]
 8025f88:	889b      	ldrh	r3, [r3, #4]
 8025f8a:	b29b      	uxth	r3, r3
 8025f8c:	429a      	cmp	r2, r3
 8025f8e:	d102      	bne.n	8025f96 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025f90:	f04f 33ff 	mov.w	r3, #4294967295
 8025f94:	e0b6      	b.n	8026104 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8025f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f98:	889b      	ldrh	r3, [r3, #4]
 8025f9a:	b29a      	uxth	r2, r3
 8025f9c:	693b      	ldr	r3, [r7, #16]
 8025f9e:	88db      	ldrh	r3, [r3, #6]
 8025fa0:	b29b      	uxth	r3, r3
 8025fa2:	429a      	cmp	r2, r3
 8025fa4:	d202      	bcs.n	8025fac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8025faa:	e0ab      	b.n	8026104 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8025fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fae:	2b00      	cmp	r3, #0
 8025fb0:	d009      	beq.n	8025fc6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8025fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fb4:	88db      	ldrh	r3, [r3, #6]
 8025fb6:	b29a      	uxth	r2, r3
 8025fb8:	693b      	ldr	r3, [r7, #16]
 8025fba:	889b      	ldrh	r3, [r3, #4]
 8025fbc:	b29b      	uxth	r3, r3
 8025fbe:	429a      	cmp	r2, r3
 8025fc0:	d001      	beq.n	8025fc6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8025fc2:	2300      	movs	r3, #0
 8025fc4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8025fc6:	693b      	ldr	r3, [r7, #16]
 8025fc8:	681b      	ldr	r3, [r3, #0]
 8025fca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8025fcc:	693b      	ldr	r3, [r7, #16]
 8025fce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8025fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025fd2:	2b00      	cmp	r3, #0
 8025fd4:	d193      	bne.n	8025efe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8025fd6:	e000      	b.n	8025fda <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8025fd8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8025fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025fdc:	2b00      	cmp	r3, #0
 8025fde:	d12d      	bne.n	802603c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8025fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fe2:	2b00      	cmp	r3, #0
 8025fe4:	d01c      	beq.n	8026020 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8025fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fe8:	88db      	ldrh	r3, [r3, #6]
 8025fea:	b29a      	uxth	r2, r3
 8025fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025fee:	889b      	ldrh	r3, [r3, #4]
 8025ff0:	b29b      	uxth	r3, r3
 8025ff2:	429a      	cmp	r2, r3
 8025ff4:	d906      	bls.n	8026004 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8025ff6:	4b45      	ldr	r3, [pc, #276]	; (802610c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025ff8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8025ffc:	4944      	ldr	r1, [pc, #272]	; (8026110 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8025ffe:	4845      	ldr	r0, [pc, #276]	; (8026114 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8026000:	f000 fdf4 	bl	8026bec <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8026004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026006:	68ba      	ldr	r2, [r7, #8]
 8026008:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 802600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802600c:	88db      	ldrh	r3, [r3, #6]
 802600e:	b29a      	uxth	r2, r3
 8026010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026012:	889b      	ldrh	r3, [r3, #4]
 8026014:	b29b      	uxth	r3, r3
 8026016:	429a      	cmp	r2, r3
 8026018:	d010      	beq.n	802603c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 802601a:	2300      	movs	r3, #0
 802601c:	623b      	str	r3, [r7, #32]
 802601e:	e00d      	b.n	802603c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8026020:	68fb      	ldr	r3, [r7, #12]
 8026022:	685b      	ldr	r3, [r3, #4]
 8026024:	2b00      	cmp	r3, #0
 8026026:	d006      	beq.n	8026036 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8026028:	4b38      	ldr	r3, [pc, #224]	; (802610c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802602a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 802602e:	493a      	ldr	r1, [pc, #232]	; (8026118 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8026030:	4838      	ldr	r0, [pc, #224]	; (8026114 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8026032:	f000 fddb 	bl	8026bec <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8026036:	68fb      	ldr	r3, [r7, #12]
 8026038:	68ba      	ldr	r2, [r7, #8]
 802603a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 802603c:	687b      	ldr	r3, [r7, #4]
 802603e:	2b00      	cmp	r3, #0
 8026040:	d105      	bne.n	802604e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8026042:	68fb      	ldr	r3, [r7, #12]
 8026044:	7f9b      	ldrb	r3, [r3, #30]
 8026046:	f003 0301 	and.w	r3, r3, #1
 802604a:	2b00      	cmp	r3, #0
 802604c:	d059      	beq.n	8026102 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 802604e:	6a3b      	ldr	r3, [r7, #32]
 8026050:	2b00      	cmp	r3, #0
 8026052:	d04f      	beq.n	80260f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8026054:	68fb      	ldr	r3, [r7, #12]
 8026056:	685b      	ldr	r3, [r3, #4]
 8026058:	2b00      	cmp	r3, #0
 802605a:	d006      	beq.n	802606a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 802605c:	68fb      	ldr	r3, [r7, #12]
 802605e:	685b      	ldr	r3, [r3, #4]
 8026060:	685b      	ldr	r3, [r3, #4]
 8026062:	889b      	ldrh	r3, [r3, #4]
 8026064:	b29b      	uxth	r3, r3
 8026066:	2b00      	cmp	r3, #0
 8026068:	d002      	beq.n	8026070 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 802606a:	2300      	movs	r3, #0
 802606c:	623b      	str	r3, [r7, #32]
 802606e:	e041      	b.n	80260f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8026070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026072:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8026074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026076:	681b      	ldr	r3, [r3, #0]
 8026078:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802607a:	e012      	b.n	80260a2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 802607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802607e:	685b      	ldr	r3, [r3, #4]
 8026080:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8026082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026084:	88db      	ldrh	r3, [r3, #6]
 8026086:	b29a      	uxth	r2, r3
 8026088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802608a:	889b      	ldrh	r3, [r3, #4]
 802608c:	b29b      	uxth	r3, r3
 802608e:	429a      	cmp	r2, r3
 8026090:	d002      	beq.n	8026098 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8026092:	2300      	movs	r3, #0
 8026094:	623b      	str	r3, [r7, #32]
            break;
 8026096:	e007      	b.n	80260a8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8026098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802609a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 802609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802609e:	681b      	ldr	r3, [r3, #0]
 80260a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80260a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80260a4:	2b00      	cmp	r3, #0
 80260a6:	d1e9      	bne.n	802607c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80260a8:	6a3b      	ldr	r3, [r7, #32]
 80260aa:	2b00      	cmp	r3, #0
 80260ac:	d022      	beq.n	80260f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80260ae:	68fb      	ldr	r3, [r7, #12]
 80260b0:	685b      	ldr	r3, [r3, #4]
 80260b2:	2b00      	cmp	r3, #0
 80260b4:	d106      	bne.n	80260c4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80260b6:	4b15      	ldr	r3, [pc, #84]	; (802610c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80260b8:	f240 12df 	movw	r2, #479	; 0x1df
 80260bc:	4917      	ldr	r1, [pc, #92]	; (802611c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80260be:	4815      	ldr	r0, [pc, #84]	; (8026114 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80260c0:	f000 fd94 	bl	8026bec <iprintf>
          LWIP_ASSERT("sanity check",
 80260c4:	68fb      	ldr	r3, [r7, #12]
 80260c6:	685b      	ldr	r3, [r3, #4]
 80260c8:	685b      	ldr	r3, [r3, #4]
 80260ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80260cc:	429a      	cmp	r2, r3
 80260ce:	d106      	bne.n	80260de <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80260d0:	4b0e      	ldr	r3, [pc, #56]	; (802610c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80260d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80260d6:	4911      	ldr	r1, [pc, #68]	; (802611c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80260d8:	480e      	ldr	r0, [pc, #56]	; (8026114 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80260da:	f000 fd87 	bl	8026bec <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80260de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80260e0:	681b      	ldr	r3, [r3, #0]
 80260e2:	2b00      	cmp	r3, #0
 80260e4:	d006      	beq.n	80260f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80260e6:	4b09      	ldr	r3, [pc, #36]	; (802610c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80260e8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80260ec:	490c      	ldr	r1, [pc, #48]	; (8026120 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80260ee:	4809      	ldr	r0, [pc, #36]	; (8026114 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80260f0:	f000 fd7c 	bl	8026bec <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80260f4:	6a3b      	ldr	r3, [r7, #32]
 80260f6:	2b00      	cmp	r3, #0
 80260f8:	bf14      	ite	ne
 80260fa:	2301      	movne	r3, #1
 80260fc:	2300      	moveq	r3, #0
 80260fe:	b2db      	uxtb	r3, r3
 8026100:	e000      	b.n	8026104 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8026102:	2300      	movs	r3, #0
}
 8026104:	4618      	mov	r0, r3
 8026106:	3730      	adds	r7, #48	; 0x30
 8026108:	46bd      	mov	sp, r7
 802610a:	bd80      	pop	{r7, pc}
 802610c:	0802d904 	.word	0x0802d904
 8026110:	0802d9e8 	.word	0x0802d9e8
 8026114:	0802d94c 	.word	0x0802d94c
 8026118:	0802da08 	.word	0x0802da08
 802611c:	0802da40 	.word	0x0802da40
 8026120:	0802da50 	.word	0x0802da50

08026124 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8026124:	b580      	push	{r7, lr}
 8026126:	b08e      	sub	sp, #56	; 0x38
 8026128:	af00      	add	r7, sp, #0
 802612a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 802612c:	687b      	ldr	r3, [r7, #4]
 802612e:	685b      	ldr	r3, [r3, #4]
 8026130:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8026132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026134:	781b      	ldrb	r3, [r3, #0]
 8026136:	f003 030f 	and.w	r3, r3, #15
 802613a:	b2db      	uxtb	r3, r3
 802613c:	009b      	lsls	r3, r3, #2
 802613e:	b2db      	uxtb	r3, r3
 8026140:	2b14      	cmp	r3, #20
 8026142:	f040 8171 	bne.w	8026428 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8026146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026148:	88db      	ldrh	r3, [r3, #6]
 802614a:	b29b      	uxth	r3, r3
 802614c:	4618      	mov	r0, r3
 802614e:	f7fb fc39 	bl	80219c4 <lwip_htons>
 8026152:	4603      	mov	r3, r0
 8026154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8026158:	b29b      	uxth	r3, r3
 802615a:	00db      	lsls	r3, r3, #3
 802615c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026160:	885b      	ldrh	r3, [r3, #2]
 8026162:	b29b      	uxth	r3, r3
 8026164:	4618      	mov	r0, r3
 8026166:	f7fb fc2d 	bl	80219c4 <lwip_htons>
 802616a:	4603      	mov	r3, r0
 802616c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 802616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026170:	781b      	ldrb	r3, [r3, #0]
 8026172:	f003 030f 	and.w	r3, r3, #15
 8026176:	b2db      	uxtb	r3, r3
 8026178:	009b      	lsls	r3, r3, #2
 802617a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 802617e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8026182:	b29b      	uxth	r3, r3
 8026184:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8026186:	429a      	cmp	r2, r3
 8026188:	f0c0 8150 	bcc.w	802642c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 802618c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8026190:	b29b      	uxth	r3, r3
 8026192:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8026194:	1ad3      	subs	r3, r2, r3
 8026196:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8026198:	6878      	ldr	r0, [r7, #4]
 802619a:	f7fd f877 	bl	802328c <pbuf_clen>
 802619e:	4603      	mov	r3, r0
 80261a0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80261a2:	4b8c      	ldr	r3, [pc, #560]	; (80263d4 <ip4_reass+0x2b0>)
 80261a4:	881b      	ldrh	r3, [r3, #0]
 80261a6:	461a      	mov	r2, r3
 80261a8:	8c3b      	ldrh	r3, [r7, #32]
 80261aa:	4413      	add	r3, r2
 80261ac:	2b0a      	cmp	r3, #10
 80261ae:	dd10      	ble.n	80261d2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80261b0:	8c3b      	ldrh	r3, [r7, #32]
 80261b2:	4619      	mov	r1, r3
 80261b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80261b6:	f7ff fd81 	bl	8025cbc <ip_reass_remove_oldest_datagram>
 80261ba:	4603      	mov	r3, r0
 80261bc:	2b00      	cmp	r3, #0
 80261be:	f000 8137 	beq.w	8026430 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80261c2:	4b84      	ldr	r3, [pc, #528]	; (80263d4 <ip4_reass+0x2b0>)
 80261c4:	881b      	ldrh	r3, [r3, #0]
 80261c6:	461a      	mov	r2, r3
 80261c8:	8c3b      	ldrh	r3, [r7, #32]
 80261ca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80261cc:	2b0a      	cmp	r3, #10
 80261ce:	f300 812f 	bgt.w	8026430 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80261d2:	4b81      	ldr	r3, [pc, #516]	; (80263d8 <ip4_reass+0x2b4>)
 80261d4:	681b      	ldr	r3, [r3, #0]
 80261d6:	633b      	str	r3, [r7, #48]	; 0x30
 80261d8:	e015      	b.n	8026206 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80261da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261dc:	695a      	ldr	r2, [r3, #20]
 80261de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80261e0:	68db      	ldr	r3, [r3, #12]
 80261e2:	429a      	cmp	r2, r3
 80261e4:	d10c      	bne.n	8026200 <ip4_reass+0xdc>
 80261e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261e8:	699a      	ldr	r2, [r3, #24]
 80261ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80261ec:	691b      	ldr	r3, [r3, #16]
 80261ee:	429a      	cmp	r2, r3
 80261f0:	d106      	bne.n	8026200 <ip4_reass+0xdc>
 80261f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261f4:	899a      	ldrh	r2, [r3, #12]
 80261f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80261f8:	889b      	ldrh	r3, [r3, #4]
 80261fa:	b29b      	uxth	r3, r3
 80261fc:	429a      	cmp	r2, r3
 80261fe:	d006      	beq.n	802620e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8026200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026202:	681b      	ldr	r3, [r3, #0]
 8026204:	633b      	str	r3, [r7, #48]	; 0x30
 8026206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026208:	2b00      	cmp	r3, #0
 802620a:	d1e6      	bne.n	80261da <ip4_reass+0xb6>
 802620c:	e000      	b.n	8026210 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 802620e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8026210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026212:	2b00      	cmp	r3, #0
 8026214:	d109      	bne.n	802622a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8026216:	8c3b      	ldrh	r3, [r7, #32]
 8026218:	4619      	mov	r1, r3
 802621a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802621c:	f7ff fdb0 	bl	8025d80 <ip_reass_enqueue_new_datagram>
 8026220:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8026222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026224:	2b00      	cmp	r3, #0
 8026226:	d11c      	bne.n	8026262 <ip4_reass+0x13e>
      goto nullreturn;
 8026228:	e105      	b.n	8026436 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802622c:	88db      	ldrh	r3, [r3, #6]
 802622e:	b29b      	uxth	r3, r3
 8026230:	4618      	mov	r0, r3
 8026232:	f7fb fbc7 	bl	80219c4 <lwip_htons>
 8026236:	4603      	mov	r3, r0
 8026238:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802623c:	2b00      	cmp	r3, #0
 802623e:	d110      	bne.n	8026262 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8026240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026242:	89db      	ldrh	r3, [r3, #14]
 8026244:	4618      	mov	r0, r3
 8026246:	f7fb fbbd 	bl	80219c4 <lwip_htons>
 802624a:	4603      	mov	r3, r0
 802624c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8026250:	2b00      	cmp	r3, #0
 8026252:	d006      	beq.n	8026262 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8026254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026256:	3308      	adds	r3, #8
 8026258:	2214      	movs	r2, #20
 802625a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802625c:	4618      	mov	r0, r3
 802625e:	f000 fbb5 	bl	80269cc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8026262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026264:	88db      	ldrh	r3, [r3, #6]
 8026266:	b29b      	uxth	r3, r3
 8026268:	f003 0320 	and.w	r3, r3, #32
 802626c:	2b00      	cmp	r3, #0
 802626e:	bf0c      	ite	eq
 8026270:	2301      	moveq	r3, #1
 8026272:	2300      	movne	r3, #0
 8026274:	b2db      	uxtb	r3, r3
 8026276:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8026278:	69fb      	ldr	r3, [r7, #28]
 802627a:	2b00      	cmp	r3, #0
 802627c:	d00e      	beq.n	802629c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 802627e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8026280:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8026282:	4413      	add	r3, r2
 8026284:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8026286:	8b7a      	ldrh	r2, [r7, #26]
 8026288:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802628a:	429a      	cmp	r2, r3
 802628c:	f0c0 80a0 	bcc.w	80263d0 <ip4_reass+0x2ac>
 8026290:	8b7b      	ldrh	r3, [r7, #26]
 8026292:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8026296:	4293      	cmp	r3, r2
 8026298:	f200 809a 	bhi.w	80263d0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 802629c:	69fa      	ldr	r2, [r7, #28]
 802629e:	6879      	ldr	r1, [r7, #4]
 80262a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80262a2:	f7ff fdd5 	bl	8025e50 <ip_reass_chain_frag_into_datagram_and_validate>
 80262a6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80262a8:	697b      	ldr	r3, [r7, #20]
 80262aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80262ae:	f000 809b 	beq.w	80263e8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80262b2:	4b48      	ldr	r3, [pc, #288]	; (80263d4 <ip4_reass+0x2b0>)
 80262b4:	881a      	ldrh	r2, [r3, #0]
 80262b6:	8c3b      	ldrh	r3, [r7, #32]
 80262b8:	4413      	add	r3, r2
 80262ba:	b29a      	uxth	r2, r3
 80262bc:	4b45      	ldr	r3, [pc, #276]	; (80263d4 <ip4_reass+0x2b0>)
 80262be:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80262c0:	69fb      	ldr	r3, [r7, #28]
 80262c2:	2b00      	cmp	r3, #0
 80262c4:	d00d      	beq.n	80262e2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80262c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80262c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80262ca:	4413      	add	r3, r2
 80262cc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80262ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80262d0:	8a7a      	ldrh	r2, [r7, #18]
 80262d2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80262d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80262d6:	7f9b      	ldrb	r3, [r3, #30]
 80262d8:	f043 0301 	orr.w	r3, r3, #1
 80262dc:	b2da      	uxtb	r2, r3
 80262de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80262e0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80262e2:	697b      	ldr	r3, [r7, #20]
 80262e4:	2b01      	cmp	r3, #1
 80262e6:	d171      	bne.n	80263cc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80262e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80262ea:	8b9b      	ldrh	r3, [r3, #28]
 80262ec:	3314      	adds	r3, #20
 80262ee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80262f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80262f2:	685b      	ldr	r3, [r3, #4]
 80262f4:	685b      	ldr	r3, [r3, #4]
 80262f6:	681b      	ldr	r3, [r3, #0]
 80262f8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80262fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80262fc:	685b      	ldr	r3, [r3, #4]
 80262fe:	685b      	ldr	r3, [r3, #4]
 8026300:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8026302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026304:	3308      	adds	r3, #8
 8026306:	2214      	movs	r2, #20
 8026308:	4619      	mov	r1, r3
 802630a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802630c:	f000 fb5e 	bl	80269cc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8026310:	8a3b      	ldrh	r3, [r7, #16]
 8026312:	4618      	mov	r0, r3
 8026314:	f7fb fb56 	bl	80219c4 <lwip_htons>
 8026318:	4603      	mov	r3, r0
 802631a:	461a      	mov	r2, r3
 802631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802631e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8026320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026322:	2200      	movs	r2, #0
 8026324:	719a      	strb	r2, [r3, #6]
 8026326:	2200      	movs	r2, #0
 8026328:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 802632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802632c:	2200      	movs	r2, #0
 802632e:	729a      	strb	r2, [r3, #10]
 8026330:	2200      	movs	r2, #0
 8026332:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8026334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026336:	685b      	ldr	r3, [r3, #4]
 8026338:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 802633a:	e00d      	b.n	8026358 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 802633c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802633e:	685b      	ldr	r3, [r3, #4]
 8026340:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8026342:	2114      	movs	r1, #20
 8026344:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8026346:	f7fc fe93 	bl	8023070 <pbuf_remove_header>
      pbuf_cat(p, r);
 802634a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802634c:	6878      	ldr	r0, [r7, #4]
 802634e:	f7fc ffd7 	bl	8023300 <pbuf_cat>
      r = iprh->next_pbuf;
 8026352:	68fb      	ldr	r3, [r7, #12]
 8026354:	681b      	ldr	r3, [r3, #0]
 8026356:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8026358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802635a:	2b00      	cmp	r3, #0
 802635c:	d1ee      	bne.n	802633c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802635e:	4b1e      	ldr	r3, [pc, #120]	; (80263d8 <ip4_reass+0x2b4>)
 8026360:	681b      	ldr	r3, [r3, #0]
 8026362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026364:	429a      	cmp	r2, r3
 8026366:	d102      	bne.n	802636e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8026368:	2300      	movs	r3, #0
 802636a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802636c:	e010      	b.n	8026390 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802636e:	4b1a      	ldr	r3, [pc, #104]	; (80263d8 <ip4_reass+0x2b4>)
 8026370:	681b      	ldr	r3, [r3, #0]
 8026372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026374:	e007      	b.n	8026386 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8026376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026378:	681b      	ldr	r3, [r3, #0]
 802637a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802637c:	429a      	cmp	r2, r3
 802637e:	d006      	beq.n	802638e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8026380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026382:	681b      	ldr	r3, [r3, #0]
 8026384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026388:	2b00      	cmp	r3, #0
 802638a:	d1f4      	bne.n	8026376 <ip4_reass+0x252>
 802638c:	e000      	b.n	8026390 <ip4_reass+0x26c>
          break;
 802638e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8026390:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8026392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8026394:	f7ff fd2e 	bl	8025df4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8026398:	6878      	ldr	r0, [r7, #4]
 802639a:	f7fc ff77 	bl	802328c <pbuf_clen>
 802639e:	4603      	mov	r3, r0
 80263a0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80263a2:	4b0c      	ldr	r3, [pc, #48]	; (80263d4 <ip4_reass+0x2b0>)
 80263a4:	881b      	ldrh	r3, [r3, #0]
 80263a6:	8c3a      	ldrh	r2, [r7, #32]
 80263a8:	429a      	cmp	r2, r3
 80263aa:	d906      	bls.n	80263ba <ip4_reass+0x296>
 80263ac:	4b0b      	ldr	r3, [pc, #44]	; (80263dc <ip4_reass+0x2b8>)
 80263ae:	f240 229b 	movw	r2, #667	; 0x29b
 80263b2:	490b      	ldr	r1, [pc, #44]	; (80263e0 <ip4_reass+0x2bc>)
 80263b4:	480b      	ldr	r0, [pc, #44]	; (80263e4 <ip4_reass+0x2c0>)
 80263b6:	f000 fc19 	bl	8026bec <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80263ba:	4b06      	ldr	r3, [pc, #24]	; (80263d4 <ip4_reass+0x2b0>)
 80263bc:	881a      	ldrh	r2, [r3, #0]
 80263be:	8c3b      	ldrh	r3, [r7, #32]
 80263c0:	1ad3      	subs	r3, r2, r3
 80263c2:	b29a      	uxth	r2, r3
 80263c4:	4b03      	ldr	r3, [pc, #12]	; (80263d4 <ip4_reass+0x2b0>)
 80263c6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80263c8:	687b      	ldr	r3, [r7, #4]
 80263ca:	e038      	b.n	802643e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80263cc:	2300      	movs	r3, #0
 80263ce:	e036      	b.n	802643e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80263d0:	bf00      	nop
 80263d2:	e00a      	b.n	80263ea <ip4_reass+0x2c6>
 80263d4:	20016310 	.word	0x20016310
 80263d8:	2001630c 	.word	0x2001630c
 80263dc:	0802d904 	.word	0x0802d904
 80263e0:	0802da74 	.word	0x0802da74
 80263e4:	0802d94c 	.word	0x0802d94c
    goto nullreturn_ipr;
 80263e8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80263ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80263ec:	2b00      	cmp	r3, #0
 80263ee:	d106      	bne.n	80263fe <ip4_reass+0x2da>
 80263f0:	4b15      	ldr	r3, [pc, #84]	; (8026448 <ip4_reass+0x324>)
 80263f2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80263f6:	4915      	ldr	r1, [pc, #84]	; (802644c <ip4_reass+0x328>)
 80263f8:	4815      	ldr	r0, [pc, #84]	; (8026450 <ip4_reass+0x32c>)
 80263fa:	f000 fbf7 	bl	8026bec <iprintf>
  if (ipr->p == NULL) {
 80263fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026400:	685b      	ldr	r3, [r3, #4]
 8026402:	2b00      	cmp	r3, #0
 8026404:	d116      	bne.n	8026434 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8026406:	4b13      	ldr	r3, [pc, #76]	; (8026454 <ip4_reass+0x330>)
 8026408:	681b      	ldr	r3, [r3, #0]
 802640a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802640c:	429a      	cmp	r2, r3
 802640e:	d006      	beq.n	802641e <ip4_reass+0x2fa>
 8026410:	4b0d      	ldr	r3, [pc, #52]	; (8026448 <ip4_reass+0x324>)
 8026412:	f240 22ab 	movw	r2, #683	; 0x2ab
 8026416:	4910      	ldr	r1, [pc, #64]	; (8026458 <ip4_reass+0x334>)
 8026418:	480d      	ldr	r0, [pc, #52]	; (8026450 <ip4_reass+0x32c>)
 802641a:	f000 fbe7 	bl	8026bec <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 802641e:	2100      	movs	r1, #0
 8026420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8026422:	f7ff fce7 	bl	8025df4 <ip_reass_dequeue_datagram>
 8026426:	e006      	b.n	8026436 <ip4_reass+0x312>
    goto nullreturn;
 8026428:	bf00      	nop
 802642a:	e004      	b.n	8026436 <ip4_reass+0x312>
    goto nullreturn;
 802642c:	bf00      	nop
 802642e:	e002      	b.n	8026436 <ip4_reass+0x312>
      goto nullreturn;
 8026430:	bf00      	nop
 8026432:	e000      	b.n	8026436 <ip4_reass+0x312>
  }

nullreturn:
 8026434:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8026436:	6878      	ldr	r0, [r7, #4]
 8026438:	f7fc fea0 	bl	802317c <pbuf_free>
  return NULL;
 802643c:	2300      	movs	r3, #0
}
 802643e:	4618      	mov	r0, r3
 8026440:	3738      	adds	r7, #56	; 0x38
 8026442:	46bd      	mov	sp, r7
 8026444:	bd80      	pop	{r7, pc}
 8026446:	bf00      	nop
 8026448:	0802d904 	.word	0x0802d904
 802644c:	0802da90 	.word	0x0802da90
 8026450:	0802d94c 	.word	0x0802d94c
 8026454:	2001630c 	.word	0x2001630c
 8026458:	0802da9c 	.word	0x0802da9c

0802645c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 802645c:	b580      	push	{r7, lr}
 802645e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8026460:	2002      	movs	r0, #2
 8026462:	f7fb ff0b 	bl	802227c <memp_malloc>
 8026466:	4603      	mov	r3, r0
}
 8026468:	4618      	mov	r0, r3
 802646a:	bd80      	pop	{r7, pc}

0802646c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 802646c:	b580      	push	{r7, lr}
 802646e:	b082      	sub	sp, #8
 8026470:	af00      	add	r7, sp, #0
 8026472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8026474:	687b      	ldr	r3, [r7, #4]
 8026476:	2b00      	cmp	r3, #0
 8026478:	d106      	bne.n	8026488 <ip_frag_free_pbuf_custom_ref+0x1c>
 802647a:	4b07      	ldr	r3, [pc, #28]	; (8026498 <ip_frag_free_pbuf_custom_ref+0x2c>)
 802647c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8026480:	4906      	ldr	r1, [pc, #24]	; (802649c <ip_frag_free_pbuf_custom_ref+0x30>)
 8026482:	4807      	ldr	r0, [pc, #28]	; (80264a0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8026484:	f000 fbb2 	bl	8026bec <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8026488:	6879      	ldr	r1, [r7, #4]
 802648a:	2002      	movs	r0, #2
 802648c:	f7fb ff66 	bl	802235c <memp_free>
}
 8026490:	bf00      	nop
 8026492:	3708      	adds	r7, #8
 8026494:	46bd      	mov	sp, r7
 8026496:	bd80      	pop	{r7, pc}
 8026498:	0802d904 	.word	0x0802d904
 802649c:	0802dabc 	.word	0x0802dabc
 80264a0:	0802d94c 	.word	0x0802d94c

080264a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80264a4:	b580      	push	{r7, lr}
 80264a6:	b084      	sub	sp, #16
 80264a8:	af00      	add	r7, sp, #0
 80264aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80264ac:	687b      	ldr	r3, [r7, #4]
 80264ae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80264b0:	68fb      	ldr	r3, [r7, #12]
 80264b2:	2b00      	cmp	r3, #0
 80264b4:	d106      	bne.n	80264c4 <ipfrag_free_pbuf_custom+0x20>
 80264b6:	4b11      	ldr	r3, [pc, #68]	; (80264fc <ipfrag_free_pbuf_custom+0x58>)
 80264b8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80264bc:	4910      	ldr	r1, [pc, #64]	; (8026500 <ipfrag_free_pbuf_custom+0x5c>)
 80264be:	4811      	ldr	r0, [pc, #68]	; (8026504 <ipfrag_free_pbuf_custom+0x60>)
 80264c0:	f000 fb94 	bl	8026bec <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80264c4:	68fa      	ldr	r2, [r7, #12]
 80264c6:	687b      	ldr	r3, [r7, #4]
 80264c8:	429a      	cmp	r2, r3
 80264ca:	d006      	beq.n	80264da <ipfrag_free_pbuf_custom+0x36>
 80264cc:	4b0b      	ldr	r3, [pc, #44]	; (80264fc <ipfrag_free_pbuf_custom+0x58>)
 80264ce:	f240 22cf 	movw	r2, #719	; 0x2cf
 80264d2:	490d      	ldr	r1, [pc, #52]	; (8026508 <ipfrag_free_pbuf_custom+0x64>)
 80264d4:	480b      	ldr	r0, [pc, #44]	; (8026504 <ipfrag_free_pbuf_custom+0x60>)
 80264d6:	f000 fb89 	bl	8026bec <iprintf>
  if (pcr->original != NULL) {
 80264da:	68fb      	ldr	r3, [r7, #12]
 80264dc:	695b      	ldr	r3, [r3, #20]
 80264de:	2b00      	cmp	r3, #0
 80264e0:	d004      	beq.n	80264ec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80264e2:	68fb      	ldr	r3, [r7, #12]
 80264e4:	695b      	ldr	r3, [r3, #20]
 80264e6:	4618      	mov	r0, r3
 80264e8:	f7fc fe48 	bl	802317c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80264ec:	68f8      	ldr	r0, [r7, #12]
 80264ee:	f7ff ffbd 	bl	802646c <ip_frag_free_pbuf_custom_ref>
}
 80264f2:	bf00      	nop
 80264f4:	3710      	adds	r7, #16
 80264f6:	46bd      	mov	sp, r7
 80264f8:	bd80      	pop	{r7, pc}
 80264fa:	bf00      	nop
 80264fc:	0802d904 	.word	0x0802d904
 8026500:	0802dac8 	.word	0x0802dac8
 8026504:	0802d94c 	.word	0x0802d94c
 8026508:	0802dad4 	.word	0x0802dad4

0802650c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 802650c:	b580      	push	{r7, lr}
 802650e:	b094      	sub	sp, #80	; 0x50
 8026510:	af02      	add	r7, sp, #8
 8026512:	60f8      	str	r0, [r7, #12]
 8026514:	60b9      	str	r1, [r7, #8]
 8026516:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8026518:	2300      	movs	r3, #0
 802651a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802651e:	68bb      	ldr	r3, [r7, #8]
 8026520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8026522:	3b14      	subs	r3, #20
 8026524:	2b00      	cmp	r3, #0
 8026526:	da00      	bge.n	802652a <ip4_frag+0x1e>
 8026528:	3307      	adds	r3, #7
 802652a:	10db      	asrs	r3, r3, #3
 802652c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 802652e:	2314      	movs	r3, #20
 8026530:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8026532:	68fb      	ldr	r3, [r7, #12]
 8026534:	685b      	ldr	r3, [r3, #4]
 8026536:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8026538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802653a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 802653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802653e:	781b      	ldrb	r3, [r3, #0]
 8026540:	f003 030f 	and.w	r3, r3, #15
 8026544:	b2db      	uxtb	r3, r3
 8026546:	009b      	lsls	r3, r3, #2
 8026548:	b2db      	uxtb	r3, r3
 802654a:	2b14      	cmp	r3, #20
 802654c:	d002      	beq.n	8026554 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 802654e:	f06f 0305 	mvn.w	r3, #5
 8026552:	e110      	b.n	8026776 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8026554:	68fb      	ldr	r3, [r7, #12]
 8026556:	895b      	ldrh	r3, [r3, #10]
 8026558:	2b13      	cmp	r3, #19
 802655a:	d809      	bhi.n	8026570 <ip4_frag+0x64>
 802655c:	4b88      	ldr	r3, [pc, #544]	; (8026780 <ip4_frag+0x274>)
 802655e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8026562:	4988      	ldr	r1, [pc, #544]	; (8026784 <ip4_frag+0x278>)
 8026564:	4888      	ldr	r0, [pc, #544]	; (8026788 <ip4_frag+0x27c>)
 8026566:	f000 fb41 	bl	8026bec <iprintf>
 802656a:	f06f 0305 	mvn.w	r3, #5
 802656e:	e102      	b.n	8026776 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8026570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026572:	88db      	ldrh	r3, [r3, #6]
 8026574:	b29b      	uxth	r3, r3
 8026576:	4618      	mov	r0, r3
 8026578:	f7fb fa24 	bl	80219c4 <lwip_htons>
 802657c:	4603      	mov	r3, r0
 802657e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8026580:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8026582:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8026586:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802658a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802658c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8026590:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8026592:	68fb      	ldr	r3, [r7, #12]
 8026594:	891b      	ldrh	r3, [r3, #8]
 8026596:	3b14      	subs	r3, #20
 8026598:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 802659c:	e0e1      	b.n	8026762 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802659e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80265a0:	00db      	lsls	r3, r3, #3
 80265a2:	b29b      	uxth	r3, r3
 80265a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80265a8:	4293      	cmp	r3, r2
 80265aa:	bf28      	it	cs
 80265ac:	4613      	movcs	r3, r2
 80265ae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80265b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80265b4:	2114      	movs	r1, #20
 80265b6:	200e      	movs	r0, #14
 80265b8:	f7fc fafe 	bl	8022bb8 <pbuf_alloc>
 80265bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80265be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80265c0:	2b00      	cmp	r3, #0
 80265c2:	f000 80d5 	beq.w	8026770 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80265c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80265c8:	895b      	ldrh	r3, [r3, #10]
 80265ca:	2b13      	cmp	r3, #19
 80265cc:	d806      	bhi.n	80265dc <ip4_frag+0xd0>
 80265ce:	4b6c      	ldr	r3, [pc, #432]	; (8026780 <ip4_frag+0x274>)
 80265d0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80265d4:	496d      	ldr	r1, [pc, #436]	; (802678c <ip4_frag+0x280>)
 80265d6:	486c      	ldr	r0, [pc, #432]	; (8026788 <ip4_frag+0x27c>)
 80265d8:	f000 fb08 	bl	8026bec <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80265dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80265de:	685b      	ldr	r3, [r3, #4]
 80265e0:	2214      	movs	r2, #20
 80265e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80265e4:	4618      	mov	r0, r3
 80265e6:	f000 f9f1 	bl	80269cc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80265ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80265ec:	685b      	ldr	r3, [r3, #4]
 80265ee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80265f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80265f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80265f6:	e064      	b.n	80266c2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80265f8:	68fb      	ldr	r3, [r7, #12]
 80265fa:	895a      	ldrh	r2, [r3, #10]
 80265fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80265fe:	1ad3      	subs	r3, r2, r3
 8026600:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8026602:	68fb      	ldr	r3, [r7, #12]
 8026604:	895b      	ldrh	r3, [r3, #10]
 8026606:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8026608:	429a      	cmp	r2, r3
 802660a:	d906      	bls.n	802661a <ip4_frag+0x10e>
 802660c:	4b5c      	ldr	r3, [pc, #368]	; (8026780 <ip4_frag+0x274>)
 802660e:	f240 322d 	movw	r2, #813	; 0x32d
 8026612:	495f      	ldr	r1, [pc, #380]	; (8026790 <ip4_frag+0x284>)
 8026614:	485c      	ldr	r0, [pc, #368]	; (8026788 <ip4_frag+0x27c>)
 8026616:	f000 fae9 	bl	8026bec <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 802661a:	8bfa      	ldrh	r2, [r7, #30]
 802661c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026620:	4293      	cmp	r3, r2
 8026622:	bf28      	it	cs
 8026624:	4613      	movcs	r3, r2
 8026626:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 802662a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802662e:	2b00      	cmp	r3, #0
 8026630:	d105      	bne.n	802663e <ip4_frag+0x132>
        poff = 0;
 8026632:	2300      	movs	r3, #0
 8026634:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8026636:	68fb      	ldr	r3, [r7, #12]
 8026638:	681b      	ldr	r3, [r3, #0]
 802663a:	60fb      	str	r3, [r7, #12]
        continue;
 802663c:	e041      	b.n	80266c2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 802663e:	f7ff ff0d 	bl	802645c <ip_frag_alloc_pbuf_custom_ref>
 8026642:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8026644:	69bb      	ldr	r3, [r7, #24]
 8026646:	2b00      	cmp	r3, #0
 8026648:	d103      	bne.n	8026652 <ip4_frag+0x146>
        pbuf_free(rambuf);
 802664a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802664c:	f7fc fd96 	bl	802317c <pbuf_free>
        goto memerr;
 8026650:	e08f      	b.n	8026772 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8026652:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8026654:	68fb      	ldr	r3, [r7, #12]
 8026656:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8026658:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802665a:	4413      	add	r3, r2
 802665c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8026660:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8026664:	9201      	str	r2, [sp, #4]
 8026666:	9300      	str	r3, [sp, #0]
 8026668:	4603      	mov	r3, r0
 802666a:	2241      	movs	r2, #65	; 0x41
 802666c:	2000      	movs	r0, #0
 802666e:	f7fc fbcb 	bl	8022e08 <pbuf_alloced_custom>
 8026672:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8026674:	697b      	ldr	r3, [r7, #20]
 8026676:	2b00      	cmp	r3, #0
 8026678:	d106      	bne.n	8026688 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 802667a:	69b8      	ldr	r0, [r7, #24]
 802667c:	f7ff fef6 	bl	802646c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8026680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8026682:	f7fc fd7b 	bl	802317c <pbuf_free>
        goto memerr;
 8026686:	e074      	b.n	8026772 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8026688:	68f8      	ldr	r0, [r7, #12]
 802668a:	f7fc fe17 	bl	80232bc <pbuf_ref>
      pcr->original = p;
 802668e:	69bb      	ldr	r3, [r7, #24]
 8026690:	68fa      	ldr	r2, [r7, #12]
 8026692:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8026694:	69bb      	ldr	r3, [r7, #24]
 8026696:	4a3f      	ldr	r2, [pc, #252]	; (8026794 <ip4_frag+0x288>)
 8026698:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 802669a:	6979      	ldr	r1, [r7, #20]
 802669c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802669e:	f7fc fe2f 	bl	8023300 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80266a2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80266a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80266aa:	1ad3      	subs	r3, r2, r3
 80266ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80266b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80266b4:	2b00      	cmp	r3, #0
 80266b6:	d004      	beq.n	80266c2 <ip4_frag+0x1b6>
        poff = 0;
 80266b8:	2300      	movs	r3, #0
 80266ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80266bc:	68fb      	ldr	r3, [r7, #12]
 80266be:	681b      	ldr	r3, [r3, #0]
 80266c0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80266c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80266c6:	2b00      	cmp	r3, #0
 80266c8:	d196      	bne.n	80265f8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80266ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80266cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80266d0:	4413      	add	r3, r2
 80266d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80266d4:	68bb      	ldr	r3, [r7, #8]
 80266d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80266d8:	f1a3 0213 	sub.w	r2, r3, #19
 80266dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80266e0:	429a      	cmp	r2, r3
 80266e2:	bfcc      	ite	gt
 80266e4:	2301      	movgt	r3, #1
 80266e6:	2300      	movle	r3, #0
 80266e8:	b2db      	uxtb	r3, r3
 80266ea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80266ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80266f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80266f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80266f6:	6a3b      	ldr	r3, [r7, #32]
 80266f8:	2b00      	cmp	r3, #0
 80266fa:	d002      	beq.n	8026702 <ip4_frag+0x1f6>
 80266fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80266fe:	2b00      	cmp	r3, #0
 8026700:	d003      	beq.n	802670a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8026702:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8026704:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8026708:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 802670a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802670c:	4618      	mov	r0, r3
 802670e:	f7fb f959 	bl	80219c4 <lwip_htons>
 8026712:	4603      	mov	r3, r0
 8026714:	461a      	mov	r2, r3
 8026716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026718:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802671a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802671c:	3314      	adds	r3, #20
 802671e:	b29b      	uxth	r3, r3
 8026720:	4618      	mov	r0, r3
 8026722:	f7fb f94f 	bl	80219c4 <lwip_htons>
 8026726:	4603      	mov	r3, r0
 8026728:	461a      	mov	r2, r3
 802672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802672c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 802672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026730:	2200      	movs	r2, #0
 8026732:	729a      	strb	r2, [r3, #10]
 8026734:	2200      	movs	r2, #0
 8026736:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8026738:	68bb      	ldr	r3, [r7, #8]
 802673a:	695b      	ldr	r3, [r3, #20]
 802673c:	687a      	ldr	r2, [r7, #4]
 802673e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026740:	68b8      	ldr	r0, [r7, #8]
 8026742:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8026744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8026746:	f7fc fd19 	bl	802317c <pbuf_free>
    left = (u16_t)(left - fragsize);
 802674a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802674e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8026750:	1ad3      	subs	r3, r2, r3
 8026752:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8026756:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 802675a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802675c:	4413      	add	r3, r2
 802675e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8026762:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8026766:	2b00      	cmp	r3, #0
 8026768:	f47f af19 	bne.w	802659e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 802676c:	2300      	movs	r3, #0
 802676e:	e002      	b.n	8026776 <ip4_frag+0x26a>
      goto memerr;
 8026770:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8026772:	f04f 33ff 	mov.w	r3, #4294967295
}
 8026776:	4618      	mov	r0, r3
 8026778:	3748      	adds	r7, #72	; 0x48
 802677a:	46bd      	mov	sp, r7
 802677c:	bd80      	pop	{r7, pc}
 802677e:	bf00      	nop
 8026780:	0802d904 	.word	0x0802d904
 8026784:	0802dae0 	.word	0x0802dae0
 8026788:	0802d94c 	.word	0x0802d94c
 802678c:	0802dafc 	.word	0x0802dafc
 8026790:	0802db1c 	.word	0x0802db1c
 8026794:	080264a5 	.word	0x080264a5

08026798 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8026798:	b580      	push	{r7, lr}
 802679a:	b086      	sub	sp, #24
 802679c:	af00      	add	r7, sp, #0
 802679e:	6078      	str	r0, [r7, #4]
 80267a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80267a2:	230e      	movs	r3, #14
 80267a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80267a6:	687b      	ldr	r3, [r7, #4]
 80267a8:	895b      	ldrh	r3, [r3, #10]
 80267aa:	2b0e      	cmp	r3, #14
 80267ac:	d96e      	bls.n	802688c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80267ae:	687b      	ldr	r3, [r7, #4]
 80267b0:	7bdb      	ldrb	r3, [r3, #15]
 80267b2:	2b00      	cmp	r3, #0
 80267b4:	d106      	bne.n	80267c4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80267b6:	683b      	ldr	r3, [r7, #0]
 80267b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80267bc:	3301      	adds	r3, #1
 80267be:	b2da      	uxtb	r2, r3
 80267c0:	687b      	ldr	r3, [r7, #4]
 80267c2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80267c4:	687b      	ldr	r3, [r7, #4]
 80267c6:	685b      	ldr	r3, [r3, #4]
 80267c8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80267ca:	693b      	ldr	r3, [r7, #16]
 80267cc:	7b1a      	ldrb	r2, [r3, #12]
 80267ce:	7b5b      	ldrb	r3, [r3, #13]
 80267d0:	021b      	lsls	r3, r3, #8
 80267d2:	4313      	orrs	r3, r2
 80267d4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80267d6:	693b      	ldr	r3, [r7, #16]
 80267d8:	781b      	ldrb	r3, [r3, #0]
 80267da:	f003 0301 	and.w	r3, r3, #1
 80267de:	2b00      	cmp	r3, #0
 80267e0:	d023      	beq.n	802682a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80267e2:	693b      	ldr	r3, [r7, #16]
 80267e4:	781b      	ldrb	r3, [r3, #0]
 80267e6:	2b01      	cmp	r3, #1
 80267e8:	d10f      	bne.n	802680a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80267ea:	693b      	ldr	r3, [r7, #16]
 80267ec:	785b      	ldrb	r3, [r3, #1]
 80267ee:	2b00      	cmp	r3, #0
 80267f0:	d11b      	bne.n	802682a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80267f2:	693b      	ldr	r3, [r7, #16]
 80267f4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80267f6:	2b5e      	cmp	r3, #94	; 0x5e
 80267f8:	d117      	bne.n	802682a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80267fa:	687b      	ldr	r3, [r7, #4]
 80267fc:	7b5b      	ldrb	r3, [r3, #13]
 80267fe:	f043 0310 	orr.w	r3, r3, #16
 8026802:	b2da      	uxtb	r2, r3
 8026804:	687b      	ldr	r3, [r7, #4]
 8026806:	735a      	strb	r2, [r3, #13]
 8026808:	e00f      	b.n	802682a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 802680a:	693b      	ldr	r3, [r7, #16]
 802680c:	2206      	movs	r2, #6
 802680e:	4928      	ldr	r1, [pc, #160]	; (80268b0 <ethernet_input+0x118>)
 8026810:	4618      	mov	r0, r3
 8026812:	f000 f8cb 	bl	80269ac <memcmp>
 8026816:	4603      	mov	r3, r0
 8026818:	2b00      	cmp	r3, #0
 802681a:	d106      	bne.n	802682a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 802681c:	687b      	ldr	r3, [r7, #4]
 802681e:	7b5b      	ldrb	r3, [r3, #13]
 8026820:	f043 0308 	orr.w	r3, r3, #8
 8026824:	b2da      	uxtb	r2, r3
 8026826:	687b      	ldr	r3, [r7, #4]
 8026828:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 802682a:	89fb      	ldrh	r3, [r7, #14]
 802682c:	2b08      	cmp	r3, #8
 802682e:	d003      	beq.n	8026838 <ethernet_input+0xa0>
 8026830:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8026834:	d014      	beq.n	8026860 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8026836:	e032      	b.n	802689e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8026838:	683b      	ldr	r3, [r7, #0]
 802683a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802683e:	f003 0308 	and.w	r3, r3, #8
 8026842:	2b00      	cmp	r3, #0
 8026844:	d024      	beq.n	8026890 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8026846:	8afb      	ldrh	r3, [r7, #22]
 8026848:	4619      	mov	r1, r3
 802684a:	6878      	ldr	r0, [r7, #4]
 802684c:	f7fc fc10 	bl	8023070 <pbuf_remove_header>
 8026850:	4603      	mov	r3, r0
 8026852:	2b00      	cmp	r3, #0
 8026854:	d11e      	bne.n	8026894 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8026856:	6839      	ldr	r1, [r7, #0]
 8026858:	6878      	ldr	r0, [r7, #4]
 802685a:	f7fe fe8d 	bl	8025578 <ip4_input>
      break;
 802685e:	e013      	b.n	8026888 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8026860:	683b      	ldr	r3, [r7, #0]
 8026862:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8026866:	f003 0308 	and.w	r3, r3, #8
 802686a:	2b00      	cmp	r3, #0
 802686c:	d014      	beq.n	8026898 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802686e:	8afb      	ldrh	r3, [r7, #22]
 8026870:	4619      	mov	r1, r3
 8026872:	6878      	ldr	r0, [r7, #4]
 8026874:	f7fc fbfc 	bl	8023070 <pbuf_remove_header>
 8026878:	4603      	mov	r3, r0
 802687a:	2b00      	cmp	r3, #0
 802687c:	d10e      	bne.n	802689c <ethernet_input+0x104>
        etharp_input(p, netif);
 802687e:	6839      	ldr	r1, [r7, #0]
 8026880:	6878      	ldr	r0, [r7, #4]
 8026882:	f7fe f82d 	bl	80248e0 <etharp_input>
      break;
 8026886:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8026888:	2300      	movs	r3, #0
 802688a:	e00c      	b.n	80268a6 <ethernet_input+0x10e>
    goto free_and_return;
 802688c:	bf00      	nop
 802688e:	e006      	b.n	802689e <ethernet_input+0x106>
        goto free_and_return;
 8026890:	bf00      	nop
 8026892:	e004      	b.n	802689e <ethernet_input+0x106>
        goto free_and_return;
 8026894:	bf00      	nop
 8026896:	e002      	b.n	802689e <ethernet_input+0x106>
        goto free_and_return;
 8026898:	bf00      	nop
 802689a:	e000      	b.n	802689e <ethernet_input+0x106>
        goto free_and_return;
 802689c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802689e:	6878      	ldr	r0, [r7, #4]
 80268a0:	f7fc fc6c 	bl	802317c <pbuf_free>
  return ERR_OK;
 80268a4:	2300      	movs	r3, #0
}
 80268a6:	4618      	mov	r0, r3
 80268a8:	3718      	adds	r7, #24
 80268aa:	46bd      	mov	sp, r7
 80268ac:	bd80      	pop	{r7, pc}
 80268ae:	bf00      	nop
 80268b0:	0802e07c 	.word	0x0802e07c

080268b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80268b4:	b580      	push	{r7, lr}
 80268b6:	b086      	sub	sp, #24
 80268b8:	af00      	add	r7, sp, #0
 80268ba:	60f8      	str	r0, [r7, #12]
 80268bc:	60b9      	str	r1, [r7, #8]
 80268be:	607a      	str	r2, [r7, #4]
 80268c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80268c2:	8c3b      	ldrh	r3, [r7, #32]
 80268c4:	4618      	mov	r0, r3
 80268c6:	f7fb f87d 	bl	80219c4 <lwip_htons>
 80268ca:	4603      	mov	r3, r0
 80268cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80268ce:	210e      	movs	r1, #14
 80268d0:	68b8      	ldr	r0, [r7, #8]
 80268d2:	f7fc fbbd 	bl	8023050 <pbuf_add_header>
 80268d6:	4603      	mov	r3, r0
 80268d8:	2b00      	cmp	r3, #0
 80268da:	d125      	bne.n	8026928 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80268dc:	68bb      	ldr	r3, [r7, #8]
 80268de:	685b      	ldr	r3, [r3, #4]
 80268e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80268e2:	693b      	ldr	r3, [r7, #16]
 80268e4:	8afa      	ldrh	r2, [r7, #22]
 80268e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80268e8:	693b      	ldr	r3, [r7, #16]
 80268ea:	2206      	movs	r2, #6
 80268ec:	6839      	ldr	r1, [r7, #0]
 80268ee:	4618      	mov	r0, r3
 80268f0:	f000 f86c 	bl	80269cc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80268f4:	693b      	ldr	r3, [r7, #16]
 80268f6:	3306      	adds	r3, #6
 80268f8:	2206      	movs	r2, #6
 80268fa:	6879      	ldr	r1, [r7, #4]
 80268fc:	4618      	mov	r0, r3
 80268fe:	f000 f865 	bl	80269cc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8026902:	68fb      	ldr	r3, [r7, #12]
 8026904:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8026908:	2b06      	cmp	r3, #6
 802690a:	d006      	beq.n	802691a <ethernet_output+0x66>
 802690c:	4b0a      	ldr	r3, [pc, #40]	; (8026938 <ethernet_output+0x84>)
 802690e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8026912:	490a      	ldr	r1, [pc, #40]	; (802693c <ethernet_output+0x88>)
 8026914:	480a      	ldr	r0, [pc, #40]	; (8026940 <ethernet_output+0x8c>)
 8026916:	f000 f969 	bl	8026bec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802691a:	68fb      	ldr	r3, [r7, #12]
 802691c:	699b      	ldr	r3, [r3, #24]
 802691e:	68b9      	ldr	r1, [r7, #8]
 8026920:	68f8      	ldr	r0, [r7, #12]
 8026922:	4798      	blx	r3
 8026924:	4603      	mov	r3, r0
 8026926:	e002      	b.n	802692e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8026928:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 802692a:	f06f 0301 	mvn.w	r3, #1
}
 802692e:	4618      	mov	r0, r3
 8026930:	3718      	adds	r7, #24
 8026932:	46bd      	mov	sp, r7
 8026934:	bd80      	pop	{r7, pc}
 8026936:	bf00      	nop
 8026938:	0802db2c 	.word	0x0802db2c
 802693c:	0802db64 	.word	0x0802db64
 8026940:	0802db98 	.word	0x0802db98

08026944 <__libc_init_array>:
 8026944:	b570      	push	{r4, r5, r6, lr}
 8026946:	4d0d      	ldr	r5, [pc, #52]	; (802697c <__libc_init_array+0x38>)
 8026948:	4c0d      	ldr	r4, [pc, #52]	; (8026980 <__libc_init_array+0x3c>)
 802694a:	1b64      	subs	r4, r4, r5
 802694c:	10a4      	asrs	r4, r4, #2
 802694e:	2600      	movs	r6, #0
 8026950:	42a6      	cmp	r6, r4
 8026952:	d109      	bne.n	8026968 <__libc_init_array+0x24>
 8026954:	4d0b      	ldr	r5, [pc, #44]	; (8026984 <__libc_init_array+0x40>)
 8026956:	4c0c      	ldr	r4, [pc, #48]	; (8026988 <__libc_init_array+0x44>)
 8026958:	f001 fbfe 	bl	8028158 <_init>
 802695c:	1b64      	subs	r4, r4, r5
 802695e:	10a4      	asrs	r4, r4, #2
 8026960:	2600      	movs	r6, #0
 8026962:	42a6      	cmp	r6, r4
 8026964:	d105      	bne.n	8026972 <__libc_init_array+0x2e>
 8026966:	bd70      	pop	{r4, r5, r6, pc}
 8026968:	f855 3b04 	ldr.w	r3, [r5], #4
 802696c:	4798      	blx	r3
 802696e:	3601      	adds	r6, #1
 8026970:	e7ee      	b.n	8026950 <__libc_init_array+0xc>
 8026972:	f855 3b04 	ldr.w	r3, [r5], #4
 8026976:	4798      	blx	r3
 8026978:	3601      	adds	r6, #1
 802697a:	e7f2      	b.n	8026962 <__libc_init_array+0x1e>
 802697c:	0802e1dc 	.word	0x0802e1dc
 8026980:	0802e1dc 	.word	0x0802e1dc
 8026984:	0802e1dc 	.word	0x0802e1dc
 8026988:	0802e1e0 	.word	0x0802e1e0

0802698c <malloc>:
 802698c:	4b02      	ldr	r3, [pc, #8]	; (8026998 <malloc+0xc>)
 802698e:	4601      	mov	r1, r0
 8026990:	6818      	ldr	r0, [r3, #0]
 8026992:	f000 b8b7 	b.w	8026b04 <_malloc_r>
 8026996:	bf00      	nop
 8026998:	20000340 	.word	0x20000340

0802699c <free>:
 802699c:	4b02      	ldr	r3, [pc, #8]	; (80269a8 <free+0xc>)
 802699e:	4601      	mov	r1, r0
 80269a0:	6818      	ldr	r0, [r3, #0]
 80269a2:	f000 b843 	b.w	8026a2c <_free_r>
 80269a6:	bf00      	nop
 80269a8:	20000340 	.word	0x20000340

080269ac <memcmp>:
 80269ac:	b510      	push	{r4, lr}
 80269ae:	3901      	subs	r1, #1
 80269b0:	4402      	add	r2, r0
 80269b2:	4290      	cmp	r0, r2
 80269b4:	d101      	bne.n	80269ba <memcmp+0xe>
 80269b6:	2000      	movs	r0, #0
 80269b8:	e005      	b.n	80269c6 <memcmp+0x1a>
 80269ba:	7803      	ldrb	r3, [r0, #0]
 80269bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80269c0:	42a3      	cmp	r3, r4
 80269c2:	d001      	beq.n	80269c8 <memcmp+0x1c>
 80269c4:	1b18      	subs	r0, r3, r4
 80269c6:	bd10      	pop	{r4, pc}
 80269c8:	3001      	adds	r0, #1
 80269ca:	e7f2      	b.n	80269b2 <memcmp+0x6>

080269cc <memcpy>:
 80269cc:	440a      	add	r2, r1
 80269ce:	4291      	cmp	r1, r2
 80269d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80269d4:	d100      	bne.n	80269d8 <memcpy+0xc>
 80269d6:	4770      	bx	lr
 80269d8:	b510      	push	{r4, lr}
 80269da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80269de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80269e2:	4291      	cmp	r1, r2
 80269e4:	d1f9      	bne.n	80269da <memcpy+0xe>
 80269e6:	bd10      	pop	{r4, pc}

080269e8 <memmove>:
 80269e8:	4288      	cmp	r0, r1
 80269ea:	b510      	push	{r4, lr}
 80269ec:	eb01 0402 	add.w	r4, r1, r2
 80269f0:	d902      	bls.n	80269f8 <memmove+0x10>
 80269f2:	4284      	cmp	r4, r0
 80269f4:	4623      	mov	r3, r4
 80269f6:	d807      	bhi.n	8026a08 <memmove+0x20>
 80269f8:	1e43      	subs	r3, r0, #1
 80269fa:	42a1      	cmp	r1, r4
 80269fc:	d008      	beq.n	8026a10 <memmove+0x28>
 80269fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026a02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026a06:	e7f8      	b.n	80269fa <memmove+0x12>
 8026a08:	4402      	add	r2, r0
 8026a0a:	4601      	mov	r1, r0
 8026a0c:	428a      	cmp	r2, r1
 8026a0e:	d100      	bne.n	8026a12 <memmove+0x2a>
 8026a10:	bd10      	pop	{r4, pc}
 8026a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8026a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8026a1a:	e7f7      	b.n	8026a0c <memmove+0x24>

08026a1c <memset>:
 8026a1c:	4402      	add	r2, r0
 8026a1e:	4603      	mov	r3, r0
 8026a20:	4293      	cmp	r3, r2
 8026a22:	d100      	bne.n	8026a26 <memset+0xa>
 8026a24:	4770      	bx	lr
 8026a26:	f803 1b01 	strb.w	r1, [r3], #1
 8026a2a:	e7f9      	b.n	8026a20 <memset+0x4>

08026a2c <_free_r>:
 8026a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026a2e:	2900      	cmp	r1, #0
 8026a30:	d044      	beq.n	8026abc <_free_r+0x90>
 8026a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026a36:	9001      	str	r0, [sp, #4]
 8026a38:	2b00      	cmp	r3, #0
 8026a3a:	f1a1 0404 	sub.w	r4, r1, #4
 8026a3e:	bfb8      	it	lt
 8026a40:	18e4      	addlt	r4, r4, r3
 8026a42:	f000 fdbb 	bl	80275bc <__malloc_lock>
 8026a46:	4a1e      	ldr	r2, [pc, #120]	; (8026ac0 <_free_r+0x94>)
 8026a48:	9801      	ldr	r0, [sp, #4]
 8026a4a:	6813      	ldr	r3, [r2, #0]
 8026a4c:	b933      	cbnz	r3, 8026a5c <_free_r+0x30>
 8026a4e:	6063      	str	r3, [r4, #4]
 8026a50:	6014      	str	r4, [r2, #0]
 8026a52:	b003      	add	sp, #12
 8026a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026a58:	f000 bdb6 	b.w	80275c8 <__malloc_unlock>
 8026a5c:	42a3      	cmp	r3, r4
 8026a5e:	d908      	bls.n	8026a72 <_free_r+0x46>
 8026a60:	6825      	ldr	r5, [r4, #0]
 8026a62:	1961      	adds	r1, r4, r5
 8026a64:	428b      	cmp	r3, r1
 8026a66:	bf01      	itttt	eq
 8026a68:	6819      	ldreq	r1, [r3, #0]
 8026a6a:	685b      	ldreq	r3, [r3, #4]
 8026a6c:	1949      	addeq	r1, r1, r5
 8026a6e:	6021      	streq	r1, [r4, #0]
 8026a70:	e7ed      	b.n	8026a4e <_free_r+0x22>
 8026a72:	461a      	mov	r2, r3
 8026a74:	685b      	ldr	r3, [r3, #4]
 8026a76:	b10b      	cbz	r3, 8026a7c <_free_r+0x50>
 8026a78:	42a3      	cmp	r3, r4
 8026a7a:	d9fa      	bls.n	8026a72 <_free_r+0x46>
 8026a7c:	6811      	ldr	r1, [r2, #0]
 8026a7e:	1855      	adds	r5, r2, r1
 8026a80:	42a5      	cmp	r5, r4
 8026a82:	d10b      	bne.n	8026a9c <_free_r+0x70>
 8026a84:	6824      	ldr	r4, [r4, #0]
 8026a86:	4421      	add	r1, r4
 8026a88:	1854      	adds	r4, r2, r1
 8026a8a:	42a3      	cmp	r3, r4
 8026a8c:	6011      	str	r1, [r2, #0]
 8026a8e:	d1e0      	bne.n	8026a52 <_free_r+0x26>
 8026a90:	681c      	ldr	r4, [r3, #0]
 8026a92:	685b      	ldr	r3, [r3, #4]
 8026a94:	6053      	str	r3, [r2, #4]
 8026a96:	4421      	add	r1, r4
 8026a98:	6011      	str	r1, [r2, #0]
 8026a9a:	e7da      	b.n	8026a52 <_free_r+0x26>
 8026a9c:	d902      	bls.n	8026aa4 <_free_r+0x78>
 8026a9e:	230c      	movs	r3, #12
 8026aa0:	6003      	str	r3, [r0, #0]
 8026aa2:	e7d6      	b.n	8026a52 <_free_r+0x26>
 8026aa4:	6825      	ldr	r5, [r4, #0]
 8026aa6:	1961      	adds	r1, r4, r5
 8026aa8:	428b      	cmp	r3, r1
 8026aaa:	bf04      	itt	eq
 8026aac:	6819      	ldreq	r1, [r3, #0]
 8026aae:	685b      	ldreq	r3, [r3, #4]
 8026ab0:	6063      	str	r3, [r4, #4]
 8026ab2:	bf04      	itt	eq
 8026ab4:	1949      	addeq	r1, r1, r5
 8026ab6:	6021      	streq	r1, [r4, #0]
 8026ab8:	6054      	str	r4, [r2, #4]
 8026aba:	e7ca      	b.n	8026a52 <_free_r+0x26>
 8026abc:	b003      	add	sp, #12
 8026abe:	bd30      	pop	{r4, r5, pc}
 8026ac0:	20016314 	.word	0x20016314

08026ac4 <sbrk_aligned>:
 8026ac4:	b570      	push	{r4, r5, r6, lr}
 8026ac6:	4e0e      	ldr	r6, [pc, #56]	; (8026b00 <sbrk_aligned+0x3c>)
 8026ac8:	460c      	mov	r4, r1
 8026aca:	6831      	ldr	r1, [r6, #0]
 8026acc:	4605      	mov	r5, r0
 8026ace:	b911      	cbnz	r1, 8026ad6 <sbrk_aligned+0x12>
 8026ad0:	f000 f96e 	bl	8026db0 <_sbrk_r>
 8026ad4:	6030      	str	r0, [r6, #0]
 8026ad6:	4621      	mov	r1, r4
 8026ad8:	4628      	mov	r0, r5
 8026ada:	f000 f969 	bl	8026db0 <_sbrk_r>
 8026ade:	1c43      	adds	r3, r0, #1
 8026ae0:	d00a      	beq.n	8026af8 <sbrk_aligned+0x34>
 8026ae2:	1cc4      	adds	r4, r0, #3
 8026ae4:	f024 0403 	bic.w	r4, r4, #3
 8026ae8:	42a0      	cmp	r0, r4
 8026aea:	d007      	beq.n	8026afc <sbrk_aligned+0x38>
 8026aec:	1a21      	subs	r1, r4, r0
 8026aee:	4628      	mov	r0, r5
 8026af0:	f000 f95e 	bl	8026db0 <_sbrk_r>
 8026af4:	3001      	adds	r0, #1
 8026af6:	d101      	bne.n	8026afc <sbrk_aligned+0x38>
 8026af8:	f04f 34ff 	mov.w	r4, #4294967295
 8026afc:	4620      	mov	r0, r4
 8026afe:	bd70      	pop	{r4, r5, r6, pc}
 8026b00:	20016318 	.word	0x20016318

08026b04 <_malloc_r>:
 8026b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026b08:	1ccd      	adds	r5, r1, #3
 8026b0a:	f025 0503 	bic.w	r5, r5, #3
 8026b0e:	3508      	adds	r5, #8
 8026b10:	2d0c      	cmp	r5, #12
 8026b12:	bf38      	it	cc
 8026b14:	250c      	movcc	r5, #12
 8026b16:	2d00      	cmp	r5, #0
 8026b18:	4607      	mov	r7, r0
 8026b1a:	db01      	blt.n	8026b20 <_malloc_r+0x1c>
 8026b1c:	42a9      	cmp	r1, r5
 8026b1e:	d905      	bls.n	8026b2c <_malloc_r+0x28>
 8026b20:	230c      	movs	r3, #12
 8026b22:	603b      	str	r3, [r7, #0]
 8026b24:	2600      	movs	r6, #0
 8026b26:	4630      	mov	r0, r6
 8026b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026b2c:	4e2e      	ldr	r6, [pc, #184]	; (8026be8 <_malloc_r+0xe4>)
 8026b2e:	f000 fd45 	bl	80275bc <__malloc_lock>
 8026b32:	6833      	ldr	r3, [r6, #0]
 8026b34:	461c      	mov	r4, r3
 8026b36:	bb34      	cbnz	r4, 8026b86 <_malloc_r+0x82>
 8026b38:	4629      	mov	r1, r5
 8026b3a:	4638      	mov	r0, r7
 8026b3c:	f7ff ffc2 	bl	8026ac4 <sbrk_aligned>
 8026b40:	1c43      	adds	r3, r0, #1
 8026b42:	4604      	mov	r4, r0
 8026b44:	d14d      	bne.n	8026be2 <_malloc_r+0xde>
 8026b46:	6834      	ldr	r4, [r6, #0]
 8026b48:	4626      	mov	r6, r4
 8026b4a:	2e00      	cmp	r6, #0
 8026b4c:	d140      	bne.n	8026bd0 <_malloc_r+0xcc>
 8026b4e:	6823      	ldr	r3, [r4, #0]
 8026b50:	4631      	mov	r1, r6
 8026b52:	4638      	mov	r0, r7
 8026b54:	eb04 0803 	add.w	r8, r4, r3
 8026b58:	f000 f92a 	bl	8026db0 <_sbrk_r>
 8026b5c:	4580      	cmp	r8, r0
 8026b5e:	d13a      	bne.n	8026bd6 <_malloc_r+0xd2>
 8026b60:	6821      	ldr	r1, [r4, #0]
 8026b62:	3503      	adds	r5, #3
 8026b64:	1a6d      	subs	r5, r5, r1
 8026b66:	f025 0503 	bic.w	r5, r5, #3
 8026b6a:	3508      	adds	r5, #8
 8026b6c:	2d0c      	cmp	r5, #12
 8026b6e:	bf38      	it	cc
 8026b70:	250c      	movcc	r5, #12
 8026b72:	4629      	mov	r1, r5
 8026b74:	4638      	mov	r0, r7
 8026b76:	f7ff ffa5 	bl	8026ac4 <sbrk_aligned>
 8026b7a:	3001      	adds	r0, #1
 8026b7c:	d02b      	beq.n	8026bd6 <_malloc_r+0xd2>
 8026b7e:	6823      	ldr	r3, [r4, #0]
 8026b80:	442b      	add	r3, r5
 8026b82:	6023      	str	r3, [r4, #0]
 8026b84:	e00e      	b.n	8026ba4 <_malloc_r+0xa0>
 8026b86:	6822      	ldr	r2, [r4, #0]
 8026b88:	1b52      	subs	r2, r2, r5
 8026b8a:	d41e      	bmi.n	8026bca <_malloc_r+0xc6>
 8026b8c:	2a0b      	cmp	r2, #11
 8026b8e:	d916      	bls.n	8026bbe <_malloc_r+0xba>
 8026b90:	1961      	adds	r1, r4, r5
 8026b92:	42a3      	cmp	r3, r4
 8026b94:	6025      	str	r5, [r4, #0]
 8026b96:	bf18      	it	ne
 8026b98:	6059      	strne	r1, [r3, #4]
 8026b9a:	6863      	ldr	r3, [r4, #4]
 8026b9c:	bf08      	it	eq
 8026b9e:	6031      	streq	r1, [r6, #0]
 8026ba0:	5162      	str	r2, [r4, r5]
 8026ba2:	604b      	str	r3, [r1, #4]
 8026ba4:	4638      	mov	r0, r7
 8026ba6:	f104 060b 	add.w	r6, r4, #11
 8026baa:	f000 fd0d 	bl	80275c8 <__malloc_unlock>
 8026bae:	f026 0607 	bic.w	r6, r6, #7
 8026bb2:	1d23      	adds	r3, r4, #4
 8026bb4:	1af2      	subs	r2, r6, r3
 8026bb6:	d0b6      	beq.n	8026b26 <_malloc_r+0x22>
 8026bb8:	1b9b      	subs	r3, r3, r6
 8026bba:	50a3      	str	r3, [r4, r2]
 8026bbc:	e7b3      	b.n	8026b26 <_malloc_r+0x22>
 8026bbe:	6862      	ldr	r2, [r4, #4]
 8026bc0:	42a3      	cmp	r3, r4
 8026bc2:	bf0c      	ite	eq
 8026bc4:	6032      	streq	r2, [r6, #0]
 8026bc6:	605a      	strne	r2, [r3, #4]
 8026bc8:	e7ec      	b.n	8026ba4 <_malloc_r+0xa0>
 8026bca:	4623      	mov	r3, r4
 8026bcc:	6864      	ldr	r4, [r4, #4]
 8026bce:	e7b2      	b.n	8026b36 <_malloc_r+0x32>
 8026bd0:	4634      	mov	r4, r6
 8026bd2:	6876      	ldr	r6, [r6, #4]
 8026bd4:	e7b9      	b.n	8026b4a <_malloc_r+0x46>
 8026bd6:	230c      	movs	r3, #12
 8026bd8:	603b      	str	r3, [r7, #0]
 8026bda:	4638      	mov	r0, r7
 8026bdc:	f000 fcf4 	bl	80275c8 <__malloc_unlock>
 8026be0:	e7a1      	b.n	8026b26 <_malloc_r+0x22>
 8026be2:	6025      	str	r5, [r4, #0]
 8026be4:	e7de      	b.n	8026ba4 <_malloc_r+0xa0>
 8026be6:	bf00      	nop
 8026be8:	20016314 	.word	0x20016314

08026bec <iprintf>:
 8026bec:	b40f      	push	{r0, r1, r2, r3}
 8026bee:	4b0a      	ldr	r3, [pc, #40]	; (8026c18 <iprintf+0x2c>)
 8026bf0:	b513      	push	{r0, r1, r4, lr}
 8026bf2:	681c      	ldr	r4, [r3, #0]
 8026bf4:	b124      	cbz	r4, 8026c00 <iprintf+0x14>
 8026bf6:	69a3      	ldr	r3, [r4, #24]
 8026bf8:	b913      	cbnz	r3, 8026c00 <iprintf+0x14>
 8026bfa:	4620      	mov	r0, r4
 8026bfc:	f000 fbc6 	bl	802738c <__sinit>
 8026c00:	ab05      	add	r3, sp, #20
 8026c02:	9a04      	ldr	r2, [sp, #16]
 8026c04:	68a1      	ldr	r1, [r4, #8]
 8026c06:	9301      	str	r3, [sp, #4]
 8026c08:	4620      	mov	r0, r4
 8026c0a:	f000 fe69 	bl	80278e0 <_vfiprintf_r>
 8026c0e:	b002      	add	sp, #8
 8026c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026c14:	b004      	add	sp, #16
 8026c16:	4770      	bx	lr
 8026c18:	20000340 	.word	0x20000340

08026c1c <putchar>:
 8026c1c:	4b09      	ldr	r3, [pc, #36]	; (8026c44 <putchar+0x28>)
 8026c1e:	b513      	push	{r0, r1, r4, lr}
 8026c20:	681c      	ldr	r4, [r3, #0]
 8026c22:	4601      	mov	r1, r0
 8026c24:	b134      	cbz	r4, 8026c34 <putchar+0x18>
 8026c26:	69a3      	ldr	r3, [r4, #24]
 8026c28:	b923      	cbnz	r3, 8026c34 <putchar+0x18>
 8026c2a:	9001      	str	r0, [sp, #4]
 8026c2c:	4620      	mov	r0, r4
 8026c2e:	f000 fbad 	bl	802738c <__sinit>
 8026c32:	9901      	ldr	r1, [sp, #4]
 8026c34:	68a2      	ldr	r2, [r4, #8]
 8026c36:	4620      	mov	r0, r4
 8026c38:	b002      	add	sp, #8
 8026c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026c3e:	f001 b913 	b.w	8027e68 <_putc_r>
 8026c42:	bf00      	nop
 8026c44:	20000340 	.word	0x20000340

08026c48 <_puts_r>:
 8026c48:	b570      	push	{r4, r5, r6, lr}
 8026c4a:	460e      	mov	r6, r1
 8026c4c:	4605      	mov	r5, r0
 8026c4e:	b118      	cbz	r0, 8026c58 <_puts_r+0x10>
 8026c50:	6983      	ldr	r3, [r0, #24]
 8026c52:	b90b      	cbnz	r3, 8026c58 <_puts_r+0x10>
 8026c54:	f000 fb9a 	bl	802738c <__sinit>
 8026c58:	69ab      	ldr	r3, [r5, #24]
 8026c5a:	68ac      	ldr	r4, [r5, #8]
 8026c5c:	b913      	cbnz	r3, 8026c64 <_puts_r+0x1c>
 8026c5e:	4628      	mov	r0, r5
 8026c60:	f000 fb94 	bl	802738c <__sinit>
 8026c64:	4b2c      	ldr	r3, [pc, #176]	; (8026d18 <_puts_r+0xd0>)
 8026c66:	429c      	cmp	r4, r3
 8026c68:	d120      	bne.n	8026cac <_puts_r+0x64>
 8026c6a:	686c      	ldr	r4, [r5, #4]
 8026c6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026c6e:	07db      	lsls	r3, r3, #31
 8026c70:	d405      	bmi.n	8026c7e <_puts_r+0x36>
 8026c72:	89a3      	ldrh	r3, [r4, #12]
 8026c74:	0598      	lsls	r0, r3, #22
 8026c76:	d402      	bmi.n	8026c7e <_puts_r+0x36>
 8026c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026c7a:	f000 fc37 	bl	80274ec <__retarget_lock_acquire_recursive>
 8026c7e:	89a3      	ldrh	r3, [r4, #12]
 8026c80:	0719      	lsls	r1, r3, #28
 8026c82:	d51d      	bpl.n	8026cc0 <_puts_r+0x78>
 8026c84:	6923      	ldr	r3, [r4, #16]
 8026c86:	b1db      	cbz	r3, 8026cc0 <_puts_r+0x78>
 8026c88:	3e01      	subs	r6, #1
 8026c8a:	68a3      	ldr	r3, [r4, #8]
 8026c8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8026c90:	3b01      	subs	r3, #1
 8026c92:	60a3      	str	r3, [r4, #8]
 8026c94:	bb39      	cbnz	r1, 8026ce6 <_puts_r+0x9e>
 8026c96:	2b00      	cmp	r3, #0
 8026c98:	da38      	bge.n	8026d0c <_puts_r+0xc4>
 8026c9a:	4622      	mov	r2, r4
 8026c9c:	210a      	movs	r1, #10
 8026c9e:	4628      	mov	r0, r5
 8026ca0:	f000 f97c 	bl	8026f9c <__swbuf_r>
 8026ca4:	3001      	adds	r0, #1
 8026ca6:	d011      	beq.n	8026ccc <_puts_r+0x84>
 8026ca8:	250a      	movs	r5, #10
 8026caa:	e011      	b.n	8026cd0 <_puts_r+0x88>
 8026cac:	4b1b      	ldr	r3, [pc, #108]	; (8026d1c <_puts_r+0xd4>)
 8026cae:	429c      	cmp	r4, r3
 8026cb0:	d101      	bne.n	8026cb6 <_puts_r+0x6e>
 8026cb2:	68ac      	ldr	r4, [r5, #8]
 8026cb4:	e7da      	b.n	8026c6c <_puts_r+0x24>
 8026cb6:	4b1a      	ldr	r3, [pc, #104]	; (8026d20 <_puts_r+0xd8>)
 8026cb8:	429c      	cmp	r4, r3
 8026cba:	bf08      	it	eq
 8026cbc:	68ec      	ldreq	r4, [r5, #12]
 8026cbe:	e7d5      	b.n	8026c6c <_puts_r+0x24>
 8026cc0:	4621      	mov	r1, r4
 8026cc2:	4628      	mov	r0, r5
 8026cc4:	f000 f9bc 	bl	8027040 <__swsetup_r>
 8026cc8:	2800      	cmp	r0, #0
 8026cca:	d0dd      	beq.n	8026c88 <_puts_r+0x40>
 8026ccc:	f04f 35ff 	mov.w	r5, #4294967295
 8026cd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026cd2:	07da      	lsls	r2, r3, #31
 8026cd4:	d405      	bmi.n	8026ce2 <_puts_r+0x9a>
 8026cd6:	89a3      	ldrh	r3, [r4, #12]
 8026cd8:	059b      	lsls	r3, r3, #22
 8026cda:	d402      	bmi.n	8026ce2 <_puts_r+0x9a>
 8026cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026cde:	f000 fc06 	bl	80274ee <__retarget_lock_release_recursive>
 8026ce2:	4628      	mov	r0, r5
 8026ce4:	bd70      	pop	{r4, r5, r6, pc}
 8026ce6:	2b00      	cmp	r3, #0
 8026ce8:	da04      	bge.n	8026cf4 <_puts_r+0xac>
 8026cea:	69a2      	ldr	r2, [r4, #24]
 8026cec:	429a      	cmp	r2, r3
 8026cee:	dc06      	bgt.n	8026cfe <_puts_r+0xb6>
 8026cf0:	290a      	cmp	r1, #10
 8026cf2:	d004      	beq.n	8026cfe <_puts_r+0xb6>
 8026cf4:	6823      	ldr	r3, [r4, #0]
 8026cf6:	1c5a      	adds	r2, r3, #1
 8026cf8:	6022      	str	r2, [r4, #0]
 8026cfa:	7019      	strb	r1, [r3, #0]
 8026cfc:	e7c5      	b.n	8026c8a <_puts_r+0x42>
 8026cfe:	4622      	mov	r2, r4
 8026d00:	4628      	mov	r0, r5
 8026d02:	f000 f94b 	bl	8026f9c <__swbuf_r>
 8026d06:	3001      	adds	r0, #1
 8026d08:	d1bf      	bne.n	8026c8a <_puts_r+0x42>
 8026d0a:	e7df      	b.n	8026ccc <_puts_r+0x84>
 8026d0c:	6823      	ldr	r3, [r4, #0]
 8026d0e:	250a      	movs	r5, #10
 8026d10:	1c5a      	adds	r2, r3, #1
 8026d12:	6022      	str	r2, [r4, #0]
 8026d14:	701d      	strb	r5, [r3, #0]
 8026d16:	e7db      	b.n	8026cd0 <_puts_r+0x88>
 8026d18:	0802e160 	.word	0x0802e160
 8026d1c:	0802e180 	.word	0x0802e180
 8026d20:	0802e140 	.word	0x0802e140

08026d24 <puts>:
 8026d24:	4b02      	ldr	r3, [pc, #8]	; (8026d30 <puts+0xc>)
 8026d26:	4601      	mov	r1, r0
 8026d28:	6818      	ldr	r0, [r3, #0]
 8026d2a:	f7ff bf8d 	b.w	8026c48 <_puts_r>
 8026d2e:	bf00      	nop
 8026d30:	20000340 	.word	0x20000340

08026d34 <rand>:
 8026d34:	4b16      	ldr	r3, [pc, #88]	; (8026d90 <rand+0x5c>)
 8026d36:	b510      	push	{r4, lr}
 8026d38:	681c      	ldr	r4, [r3, #0]
 8026d3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026d3c:	b9b3      	cbnz	r3, 8026d6c <rand+0x38>
 8026d3e:	2018      	movs	r0, #24
 8026d40:	f7ff fe24 	bl	802698c <malloc>
 8026d44:	63a0      	str	r0, [r4, #56]	; 0x38
 8026d46:	b928      	cbnz	r0, 8026d54 <rand+0x20>
 8026d48:	4602      	mov	r2, r0
 8026d4a:	4b12      	ldr	r3, [pc, #72]	; (8026d94 <rand+0x60>)
 8026d4c:	4812      	ldr	r0, [pc, #72]	; (8026d98 <rand+0x64>)
 8026d4e:	214e      	movs	r1, #78	; 0x4e
 8026d50:	f000 f9e4 	bl	802711c <__assert_func>
 8026d54:	4a11      	ldr	r2, [pc, #68]	; (8026d9c <rand+0x68>)
 8026d56:	4b12      	ldr	r3, [pc, #72]	; (8026da0 <rand+0x6c>)
 8026d58:	e9c0 2300 	strd	r2, r3, [r0]
 8026d5c:	4b11      	ldr	r3, [pc, #68]	; (8026da4 <rand+0x70>)
 8026d5e:	6083      	str	r3, [r0, #8]
 8026d60:	230b      	movs	r3, #11
 8026d62:	8183      	strh	r3, [r0, #12]
 8026d64:	2201      	movs	r2, #1
 8026d66:	2300      	movs	r3, #0
 8026d68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8026d6c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8026d6e:	4a0e      	ldr	r2, [pc, #56]	; (8026da8 <rand+0x74>)
 8026d70:	6920      	ldr	r0, [r4, #16]
 8026d72:	6963      	ldr	r3, [r4, #20]
 8026d74:	490d      	ldr	r1, [pc, #52]	; (8026dac <rand+0x78>)
 8026d76:	4342      	muls	r2, r0
 8026d78:	fb01 2203 	mla	r2, r1, r3, r2
 8026d7c:	fba0 0101 	umull	r0, r1, r0, r1
 8026d80:	1c43      	adds	r3, r0, #1
 8026d82:	eb42 0001 	adc.w	r0, r2, r1
 8026d86:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8026d8a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8026d8e:	bd10      	pop	{r4, pc}
 8026d90:	20000340 	.word	0x20000340
 8026d94:	0802e090 	.word	0x0802e090
 8026d98:	0802e0a7 	.word	0x0802e0a7
 8026d9c:	abcd330e 	.word	0xabcd330e
 8026da0:	e66d1234 	.word	0xe66d1234
 8026da4:	0005deec 	.word	0x0005deec
 8026da8:	5851f42d 	.word	0x5851f42d
 8026dac:	4c957f2d 	.word	0x4c957f2d

08026db0 <_sbrk_r>:
 8026db0:	b538      	push	{r3, r4, r5, lr}
 8026db2:	4d06      	ldr	r5, [pc, #24]	; (8026dcc <_sbrk_r+0x1c>)
 8026db4:	2300      	movs	r3, #0
 8026db6:	4604      	mov	r4, r0
 8026db8:	4608      	mov	r0, r1
 8026dba:	602b      	str	r3, [r5, #0]
 8026dbc:	f7f2 f840 	bl	8018e40 <_sbrk>
 8026dc0:	1c43      	adds	r3, r0, #1
 8026dc2:	d102      	bne.n	8026dca <_sbrk_r+0x1a>
 8026dc4:	682b      	ldr	r3, [r5, #0]
 8026dc6:	b103      	cbz	r3, 8026dca <_sbrk_r+0x1a>
 8026dc8:	6023      	str	r3, [r4, #0]
 8026dca:	bd38      	pop	{r3, r4, r5, pc}
 8026dcc:	2001631c 	.word	0x2001631c

08026dd0 <setvbuf>:
 8026dd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026dd4:	461d      	mov	r5, r3
 8026dd6:	4b5d      	ldr	r3, [pc, #372]	; (8026f4c <setvbuf+0x17c>)
 8026dd8:	681f      	ldr	r7, [r3, #0]
 8026dda:	4604      	mov	r4, r0
 8026ddc:	460e      	mov	r6, r1
 8026dde:	4690      	mov	r8, r2
 8026de0:	b127      	cbz	r7, 8026dec <setvbuf+0x1c>
 8026de2:	69bb      	ldr	r3, [r7, #24]
 8026de4:	b913      	cbnz	r3, 8026dec <setvbuf+0x1c>
 8026de6:	4638      	mov	r0, r7
 8026de8:	f000 fad0 	bl	802738c <__sinit>
 8026dec:	4b58      	ldr	r3, [pc, #352]	; (8026f50 <setvbuf+0x180>)
 8026dee:	429c      	cmp	r4, r3
 8026df0:	d167      	bne.n	8026ec2 <setvbuf+0xf2>
 8026df2:	687c      	ldr	r4, [r7, #4]
 8026df4:	f1b8 0f02 	cmp.w	r8, #2
 8026df8:	d006      	beq.n	8026e08 <setvbuf+0x38>
 8026dfa:	f1b8 0f01 	cmp.w	r8, #1
 8026dfe:	f200 809f 	bhi.w	8026f40 <setvbuf+0x170>
 8026e02:	2d00      	cmp	r5, #0
 8026e04:	f2c0 809c 	blt.w	8026f40 <setvbuf+0x170>
 8026e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026e0a:	07db      	lsls	r3, r3, #31
 8026e0c:	d405      	bmi.n	8026e1a <setvbuf+0x4a>
 8026e0e:	89a3      	ldrh	r3, [r4, #12]
 8026e10:	0598      	lsls	r0, r3, #22
 8026e12:	d402      	bmi.n	8026e1a <setvbuf+0x4a>
 8026e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026e16:	f000 fb69 	bl	80274ec <__retarget_lock_acquire_recursive>
 8026e1a:	4621      	mov	r1, r4
 8026e1c:	4638      	mov	r0, r7
 8026e1e:	f000 fa21 	bl	8027264 <_fflush_r>
 8026e22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026e24:	b141      	cbz	r1, 8026e38 <setvbuf+0x68>
 8026e26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026e2a:	4299      	cmp	r1, r3
 8026e2c:	d002      	beq.n	8026e34 <setvbuf+0x64>
 8026e2e:	4638      	mov	r0, r7
 8026e30:	f7ff fdfc 	bl	8026a2c <_free_r>
 8026e34:	2300      	movs	r3, #0
 8026e36:	6363      	str	r3, [r4, #52]	; 0x34
 8026e38:	2300      	movs	r3, #0
 8026e3a:	61a3      	str	r3, [r4, #24]
 8026e3c:	6063      	str	r3, [r4, #4]
 8026e3e:	89a3      	ldrh	r3, [r4, #12]
 8026e40:	0619      	lsls	r1, r3, #24
 8026e42:	d503      	bpl.n	8026e4c <setvbuf+0x7c>
 8026e44:	6921      	ldr	r1, [r4, #16]
 8026e46:	4638      	mov	r0, r7
 8026e48:	f7ff fdf0 	bl	8026a2c <_free_r>
 8026e4c:	89a3      	ldrh	r3, [r4, #12]
 8026e4e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8026e52:	f023 0303 	bic.w	r3, r3, #3
 8026e56:	f1b8 0f02 	cmp.w	r8, #2
 8026e5a:	81a3      	strh	r3, [r4, #12]
 8026e5c:	d06c      	beq.n	8026f38 <setvbuf+0x168>
 8026e5e:	ab01      	add	r3, sp, #4
 8026e60:	466a      	mov	r2, sp
 8026e62:	4621      	mov	r1, r4
 8026e64:	4638      	mov	r0, r7
 8026e66:	f000 fb43 	bl	80274f0 <__swhatbuf_r>
 8026e6a:	89a3      	ldrh	r3, [r4, #12]
 8026e6c:	4318      	orrs	r0, r3
 8026e6e:	81a0      	strh	r0, [r4, #12]
 8026e70:	2d00      	cmp	r5, #0
 8026e72:	d130      	bne.n	8026ed6 <setvbuf+0x106>
 8026e74:	9d00      	ldr	r5, [sp, #0]
 8026e76:	4628      	mov	r0, r5
 8026e78:	f7ff fd88 	bl	802698c <malloc>
 8026e7c:	4606      	mov	r6, r0
 8026e7e:	2800      	cmp	r0, #0
 8026e80:	d155      	bne.n	8026f2e <setvbuf+0x15e>
 8026e82:	f8dd 9000 	ldr.w	r9, [sp]
 8026e86:	45a9      	cmp	r9, r5
 8026e88:	d14a      	bne.n	8026f20 <setvbuf+0x150>
 8026e8a:	f04f 35ff 	mov.w	r5, #4294967295
 8026e8e:	2200      	movs	r2, #0
 8026e90:	60a2      	str	r2, [r4, #8]
 8026e92:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8026e96:	6022      	str	r2, [r4, #0]
 8026e98:	6122      	str	r2, [r4, #16]
 8026e9a:	2201      	movs	r2, #1
 8026e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026ea0:	6162      	str	r2, [r4, #20]
 8026ea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026ea4:	f043 0302 	orr.w	r3, r3, #2
 8026ea8:	07d2      	lsls	r2, r2, #31
 8026eaa:	81a3      	strh	r3, [r4, #12]
 8026eac:	d405      	bmi.n	8026eba <setvbuf+0xea>
 8026eae:	f413 7f00 	tst.w	r3, #512	; 0x200
 8026eb2:	d102      	bne.n	8026eba <setvbuf+0xea>
 8026eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026eb6:	f000 fb1a 	bl	80274ee <__retarget_lock_release_recursive>
 8026eba:	4628      	mov	r0, r5
 8026ebc:	b003      	add	sp, #12
 8026ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026ec2:	4b24      	ldr	r3, [pc, #144]	; (8026f54 <setvbuf+0x184>)
 8026ec4:	429c      	cmp	r4, r3
 8026ec6:	d101      	bne.n	8026ecc <setvbuf+0xfc>
 8026ec8:	68bc      	ldr	r4, [r7, #8]
 8026eca:	e793      	b.n	8026df4 <setvbuf+0x24>
 8026ecc:	4b22      	ldr	r3, [pc, #136]	; (8026f58 <setvbuf+0x188>)
 8026ece:	429c      	cmp	r4, r3
 8026ed0:	bf08      	it	eq
 8026ed2:	68fc      	ldreq	r4, [r7, #12]
 8026ed4:	e78e      	b.n	8026df4 <setvbuf+0x24>
 8026ed6:	2e00      	cmp	r6, #0
 8026ed8:	d0cd      	beq.n	8026e76 <setvbuf+0xa6>
 8026eda:	69bb      	ldr	r3, [r7, #24]
 8026edc:	b913      	cbnz	r3, 8026ee4 <setvbuf+0x114>
 8026ede:	4638      	mov	r0, r7
 8026ee0:	f000 fa54 	bl	802738c <__sinit>
 8026ee4:	f1b8 0f01 	cmp.w	r8, #1
 8026ee8:	bf08      	it	eq
 8026eea:	89a3      	ldrheq	r3, [r4, #12]
 8026eec:	6026      	str	r6, [r4, #0]
 8026eee:	bf04      	itt	eq
 8026ef0:	f043 0301 	orreq.w	r3, r3, #1
 8026ef4:	81a3      	strheq	r3, [r4, #12]
 8026ef6:	89a2      	ldrh	r2, [r4, #12]
 8026ef8:	f012 0308 	ands.w	r3, r2, #8
 8026efc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8026f00:	d01c      	beq.n	8026f3c <setvbuf+0x16c>
 8026f02:	07d3      	lsls	r3, r2, #31
 8026f04:	bf41      	itttt	mi
 8026f06:	2300      	movmi	r3, #0
 8026f08:	426d      	negmi	r5, r5
 8026f0a:	60a3      	strmi	r3, [r4, #8]
 8026f0c:	61a5      	strmi	r5, [r4, #24]
 8026f0e:	bf58      	it	pl
 8026f10:	60a5      	strpl	r5, [r4, #8]
 8026f12:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8026f14:	f015 0501 	ands.w	r5, r5, #1
 8026f18:	d115      	bne.n	8026f46 <setvbuf+0x176>
 8026f1a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8026f1e:	e7c8      	b.n	8026eb2 <setvbuf+0xe2>
 8026f20:	4648      	mov	r0, r9
 8026f22:	f7ff fd33 	bl	802698c <malloc>
 8026f26:	4606      	mov	r6, r0
 8026f28:	2800      	cmp	r0, #0
 8026f2a:	d0ae      	beq.n	8026e8a <setvbuf+0xba>
 8026f2c:	464d      	mov	r5, r9
 8026f2e:	89a3      	ldrh	r3, [r4, #12]
 8026f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026f34:	81a3      	strh	r3, [r4, #12]
 8026f36:	e7d0      	b.n	8026eda <setvbuf+0x10a>
 8026f38:	2500      	movs	r5, #0
 8026f3a:	e7a8      	b.n	8026e8e <setvbuf+0xbe>
 8026f3c:	60a3      	str	r3, [r4, #8]
 8026f3e:	e7e8      	b.n	8026f12 <setvbuf+0x142>
 8026f40:	f04f 35ff 	mov.w	r5, #4294967295
 8026f44:	e7b9      	b.n	8026eba <setvbuf+0xea>
 8026f46:	2500      	movs	r5, #0
 8026f48:	e7b7      	b.n	8026eba <setvbuf+0xea>
 8026f4a:	bf00      	nop
 8026f4c:	20000340 	.word	0x20000340
 8026f50:	0802e160 	.word	0x0802e160
 8026f54:	0802e180 	.word	0x0802e180
 8026f58:	0802e140 	.word	0x0802e140

08026f5c <siprintf>:
 8026f5c:	b40e      	push	{r1, r2, r3}
 8026f5e:	b500      	push	{lr}
 8026f60:	b09c      	sub	sp, #112	; 0x70
 8026f62:	ab1d      	add	r3, sp, #116	; 0x74
 8026f64:	9002      	str	r0, [sp, #8]
 8026f66:	9006      	str	r0, [sp, #24]
 8026f68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026f6c:	4809      	ldr	r0, [pc, #36]	; (8026f94 <siprintf+0x38>)
 8026f6e:	9107      	str	r1, [sp, #28]
 8026f70:	9104      	str	r1, [sp, #16]
 8026f72:	4909      	ldr	r1, [pc, #36]	; (8026f98 <siprintf+0x3c>)
 8026f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8026f78:	9105      	str	r1, [sp, #20]
 8026f7a:	6800      	ldr	r0, [r0, #0]
 8026f7c:	9301      	str	r3, [sp, #4]
 8026f7e:	a902      	add	r1, sp, #8
 8026f80:	f000 fb84 	bl	802768c <_svfiprintf_r>
 8026f84:	9b02      	ldr	r3, [sp, #8]
 8026f86:	2200      	movs	r2, #0
 8026f88:	701a      	strb	r2, [r3, #0]
 8026f8a:	b01c      	add	sp, #112	; 0x70
 8026f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8026f90:	b003      	add	sp, #12
 8026f92:	4770      	bx	lr
 8026f94:	20000340 	.word	0x20000340
 8026f98:	ffff0208 	.word	0xffff0208

08026f9c <__swbuf_r>:
 8026f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026f9e:	460e      	mov	r6, r1
 8026fa0:	4614      	mov	r4, r2
 8026fa2:	4605      	mov	r5, r0
 8026fa4:	b118      	cbz	r0, 8026fae <__swbuf_r+0x12>
 8026fa6:	6983      	ldr	r3, [r0, #24]
 8026fa8:	b90b      	cbnz	r3, 8026fae <__swbuf_r+0x12>
 8026faa:	f000 f9ef 	bl	802738c <__sinit>
 8026fae:	4b21      	ldr	r3, [pc, #132]	; (8027034 <__swbuf_r+0x98>)
 8026fb0:	429c      	cmp	r4, r3
 8026fb2:	d12b      	bne.n	802700c <__swbuf_r+0x70>
 8026fb4:	686c      	ldr	r4, [r5, #4]
 8026fb6:	69a3      	ldr	r3, [r4, #24]
 8026fb8:	60a3      	str	r3, [r4, #8]
 8026fba:	89a3      	ldrh	r3, [r4, #12]
 8026fbc:	071a      	lsls	r2, r3, #28
 8026fbe:	d52f      	bpl.n	8027020 <__swbuf_r+0x84>
 8026fc0:	6923      	ldr	r3, [r4, #16]
 8026fc2:	b36b      	cbz	r3, 8027020 <__swbuf_r+0x84>
 8026fc4:	6923      	ldr	r3, [r4, #16]
 8026fc6:	6820      	ldr	r0, [r4, #0]
 8026fc8:	1ac0      	subs	r0, r0, r3
 8026fca:	6963      	ldr	r3, [r4, #20]
 8026fcc:	b2f6      	uxtb	r6, r6
 8026fce:	4283      	cmp	r3, r0
 8026fd0:	4637      	mov	r7, r6
 8026fd2:	dc04      	bgt.n	8026fde <__swbuf_r+0x42>
 8026fd4:	4621      	mov	r1, r4
 8026fd6:	4628      	mov	r0, r5
 8026fd8:	f000 f944 	bl	8027264 <_fflush_r>
 8026fdc:	bb30      	cbnz	r0, 802702c <__swbuf_r+0x90>
 8026fde:	68a3      	ldr	r3, [r4, #8]
 8026fe0:	3b01      	subs	r3, #1
 8026fe2:	60a3      	str	r3, [r4, #8]
 8026fe4:	6823      	ldr	r3, [r4, #0]
 8026fe6:	1c5a      	adds	r2, r3, #1
 8026fe8:	6022      	str	r2, [r4, #0]
 8026fea:	701e      	strb	r6, [r3, #0]
 8026fec:	6963      	ldr	r3, [r4, #20]
 8026fee:	3001      	adds	r0, #1
 8026ff0:	4283      	cmp	r3, r0
 8026ff2:	d004      	beq.n	8026ffe <__swbuf_r+0x62>
 8026ff4:	89a3      	ldrh	r3, [r4, #12]
 8026ff6:	07db      	lsls	r3, r3, #31
 8026ff8:	d506      	bpl.n	8027008 <__swbuf_r+0x6c>
 8026ffa:	2e0a      	cmp	r6, #10
 8026ffc:	d104      	bne.n	8027008 <__swbuf_r+0x6c>
 8026ffe:	4621      	mov	r1, r4
 8027000:	4628      	mov	r0, r5
 8027002:	f000 f92f 	bl	8027264 <_fflush_r>
 8027006:	b988      	cbnz	r0, 802702c <__swbuf_r+0x90>
 8027008:	4638      	mov	r0, r7
 802700a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802700c:	4b0a      	ldr	r3, [pc, #40]	; (8027038 <__swbuf_r+0x9c>)
 802700e:	429c      	cmp	r4, r3
 8027010:	d101      	bne.n	8027016 <__swbuf_r+0x7a>
 8027012:	68ac      	ldr	r4, [r5, #8]
 8027014:	e7cf      	b.n	8026fb6 <__swbuf_r+0x1a>
 8027016:	4b09      	ldr	r3, [pc, #36]	; (802703c <__swbuf_r+0xa0>)
 8027018:	429c      	cmp	r4, r3
 802701a:	bf08      	it	eq
 802701c:	68ec      	ldreq	r4, [r5, #12]
 802701e:	e7ca      	b.n	8026fb6 <__swbuf_r+0x1a>
 8027020:	4621      	mov	r1, r4
 8027022:	4628      	mov	r0, r5
 8027024:	f000 f80c 	bl	8027040 <__swsetup_r>
 8027028:	2800      	cmp	r0, #0
 802702a:	d0cb      	beq.n	8026fc4 <__swbuf_r+0x28>
 802702c:	f04f 37ff 	mov.w	r7, #4294967295
 8027030:	e7ea      	b.n	8027008 <__swbuf_r+0x6c>
 8027032:	bf00      	nop
 8027034:	0802e160 	.word	0x0802e160
 8027038:	0802e180 	.word	0x0802e180
 802703c:	0802e140 	.word	0x0802e140

08027040 <__swsetup_r>:
 8027040:	4b32      	ldr	r3, [pc, #200]	; (802710c <__swsetup_r+0xcc>)
 8027042:	b570      	push	{r4, r5, r6, lr}
 8027044:	681d      	ldr	r5, [r3, #0]
 8027046:	4606      	mov	r6, r0
 8027048:	460c      	mov	r4, r1
 802704a:	b125      	cbz	r5, 8027056 <__swsetup_r+0x16>
 802704c:	69ab      	ldr	r3, [r5, #24]
 802704e:	b913      	cbnz	r3, 8027056 <__swsetup_r+0x16>
 8027050:	4628      	mov	r0, r5
 8027052:	f000 f99b 	bl	802738c <__sinit>
 8027056:	4b2e      	ldr	r3, [pc, #184]	; (8027110 <__swsetup_r+0xd0>)
 8027058:	429c      	cmp	r4, r3
 802705a:	d10f      	bne.n	802707c <__swsetup_r+0x3c>
 802705c:	686c      	ldr	r4, [r5, #4]
 802705e:	89a3      	ldrh	r3, [r4, #12]
 8027060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027064:	0719      	lsls	r1, r3, #28
 8027066:	d42c      	bmi.n	80270c2 <__swsetup_r+0x82>
 8027068:	06dd      	lsls	r5, r3, #27
 802706a:	d411      	bmi.n	8027090 <__swsetup_r+0x50>
 802706c:	2309      	movs	r3, #9
 802706e:	6033      	str	r3, [r6, #0]
 8027070:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027074:	81a3      	strh	r3, [r4, #12]
 8027076:	f04f 30ff 	mov.w	r0, #4294967295
 802707a:	e03e      	b.n	80270fa <__swsetup_r+0xba>
 802707c:	4b25      	ldr	r3, [pc, #148]	; (8027114 <__swsetup_r+0xd4>)
 802707e:	429c      	cmp	r4, r3
 8027080:	d101      	bne.n	8027086 <__swsetup_r+0x46>
 8027082:	68ac      	ldr	r4, [r5, #8]
 8027084:	e7eb      	b.n	802705e <__swsetup_r+0x1e>
 8027086:	4b24      	ldr	r3, [pc, #144]	; (8027118 <__swsetup_r+0xd8>)
 8027088:	429c      	cmp	r4, r3
 802708a:	bf08      	it	eq
 802708c:	68ec      	ldreq	r4, [r5, #12]
 802708e:	e7e6      	b.n	802705e <__swsetup_r+0x1e>
 8027090:	0758      	lsls	r0, r3, #29
 8027092:	d512      	bpl.n	80270ba <__swsetup_r+0x7a>
 8027094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027096:	b141      	cbz	r1, 80270aa <__swsetup_r+0x6a>
 8027098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802709c:	4299      	cmp	r1, r3
 802709e:	d002      	beq.n	80270a6 <__swsetup_r+0x66>
 80270a0:	4630      	mov	r0, r6
 80270a2:	f7ff fcc3 	bl	8026a2c <_free_r>
 80270a6:	2300      	movs	r3, #0
 80270a8:	6363      	str	r3, [r4, #52]	; 0x34
 80270aa:	89a3      	ldrh	r3, [r4, #12]
 80270ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80270b0:	81a3      	strh	r3, [r4, #12]
 80270b2:	2300      	movs	r3, #0
 80270b4:	6063      	str	r3, [r4, #4]
 80270b6:	6923      	ldr	r3, [r4, #16]
 80270b8:	6023      	str	r3, [r4, #0]
 80270ba:	89a3      	ldrh	r3, [r4, #12]
 80270bc:	f043 0308 	orr.w	r3, r3, #8
 80270c0:	81a3      	strh	r3, [r4, #12]
 80270c2:	6923      	ldr	r3, [r4, #16]
 80270c4:	b94b      	cbnz	r3, 80270da <__swsetup_r+0x9a>
 80270c6:	89a3      	ldrh	r3, [r4, #12]
 80270c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80270cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80270d0:	d003      	beq.n	80270da <__swsetup_r+0x9a>
 80270d2:	4621      	mov	r1, r4
 80270d4:	4630      	mov	r0, r6
 80270d6:	f000 fa31 	bl	802753c <__smakebuf_r>
 80270da:	89a0      	ldrh	r0, [r4, #12]
 80270dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80270e0:	f010 0301 	ands.w	r3, r0, #1
 80270e4:	d00a      	beq.n	80270fc <__swsetup_r+0xbc>
 80270e6:	2300      	movs	r3, #0
 80270e8:	60a3      	str	r3, [r4, #8]
 80270ea:	6963      	ldr	r3, [r4, #20]
 80270ec:	425b      	negs	r3, r3
 80270ee:	61a3      	str	r3, [r4, #24]
 80270f0:	6923      	ldr	r3, [r4, #16]
 80270f2:	b943      	cbnz	r3, 8027106 <__swsetup_r+0xc6>
 80270f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80270f8:	d1ba      	bne.n	8027070 <__swsetup_r+0x30>
 80270fa:	bd70      	pop	{r4, r5, r6, pc}
 80270fc:	0781      	lsls	r1, r0, #30
 80270fe:	bf58      	it	pl
 8027100:	6963      	ldrpl	r3, [r4, #20]
 8027102:	60a3      	str	r3, [r4, #8]
 8027104:	e7f4      	b.n	80270f0 <__swsetup_r+0xb0>
 8027106:	2000      	movs	r0, #0
 8027108:	e7f7      	b.n	80270fa <__swsetup_r+0xba>
 802710a:	bf00      	nop
 802710c:	20000340 	.word	0x20000340
 8027110:	0802e160 	.word	0x0802e160
 8027114:	0802e180 	.word	0x0802e180
 8027118:	0802e140 	.word	0x0802e140

0802711c <__assert_func>:
 802711c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802711e:	4614      	mov	r4, r2
 8027120:	461a      	mov	r2, r3
 8027122:	4b09      	ldr	r3, [pc, #36]	; (8027148 <__assert_func+0x2c>)
 8027124:	681b      	ldr	r3, [r3, #0]
 8027126:	4605      	mov	r5, r0
 8027128:	68d8      	ldr	r0, [r3, #12]
 802712a:	b14c      	cbz	r4, 8027140 <__assert_func+0x24>
 802712c:	4b07      	ldr	r3, [pc, #28]	; (802714c <__assert_func+0x30>)
 802712e:	9100      	str	r1, [sp, #0]
 8027130:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8027134:	4906      	ldr	r1, [pc, #24]	; (8027150 <__assert_func+0x34>)
 8027136:	462b      	mov	r3, r5
 8027138:	f000 f9a6 	bl	8027488 <fiprintf>
 802713c:	f000 ff32 	bl	8027fa4 <abort>
 8027140:	4b04      	ldr	r3, [pc, #16]	; (8027154 <__assert_func+0x38>)
 8027142:	461c      	mov	r4, r3
 8027144:	e7f3      	b.n	802712e <__assert_func+0x12>
 8027146:	bf00      	nop
 8027148:	20000340 	.word	0x20000340
 802714c:	0802e102 	.word	0x0802e102
 8027150:	0802e10f 	.word	0x0802e10f
 8027154:	0802e13d 	.word	0x0802e13d

08027158 <__sflush_r>:
 8027158:	898a      	ldrh	r2, [r1, #12]
 802715a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802715e:	4605      	mov	r5, r0
 8027160:	0710      	lsls	r0, r2, #28
 8027162:	460c      	mov	r4, r1
 8027164:	d458      	bmi.n	8027218 <__sflush_r+0xc0>
 8027166:	684b      	ldr	r3, [r1, #4]
 8027168:	2b00      	cmp	r3, #0
 802716a:	dc05      	bgt.n	8027178 <__sflush_r+0x20>
 802716c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802716e:	2b00      	cmp	r3, #0
 8027170:	dc02      	bgt.n	8027178 <__sflush_r+0x20>
 8027172:	2000      	movs	r0, #0
 8027174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802717a:	2e00      	cmp	r6, #0
 802717c:	d0f9      	beq.n	8027172 <__sflush_r+0x1a>
 802717e:	2300      	movs	r3, #0
 8027180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027184:	682f      	ldr	r7, [r5, #0]
 8027186:	602b      	str	r3, [r5, #0]
 8027188:	d032      	beq.n	80271f0 <__sflush_r+0x98>
 802718a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802718c:	89a3      	ldrh	r3, [r4, #12]
 802718e:	075a      	lsls	r2, r3, #29
 8027190:	d505      	bpl.n	802719e <__sflush_r+0x46>
 8027192:	6863      	ldr	r3, [r4, #4]
 8027194:	1ac0      	subs	r0, r0, r3
 8027196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027198:	b10b      	cbz	r3, 802719e <__sflush_r+0x46>
 802719a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802719c:	1ac0      	subs	r0, r0, r3
 802719e:	2300      	movs	r3, #0
 80271a0:	4602      	mov	r2, r0
 80271a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80271a4:	6a21      	ldr	r1, [r4, #32]
 80271a6:	4628      	mov	r0, r5
 80271a8:	47b0      	blx	r6
 80271aa:	1c43      	adds	r3, r0, #1
 80271ac:	89a3      	ldrh	r3, [r4, #12]
 80271ae:	d106      	bne.n	80271be <__sflush_r+0x66>
 80271b0:	6829      	ldr	r1, [r5, #0]
 80271b2:	291d      	cmp	r1, #29
 80271b4:	d82c      	bhi.n	8027210 <__sflush_r+0xb8>
 80271b6:	4a2a      	ldr	r2, [pc, #168]	; (8027260 <__sflush_r+0x108>)
 80271b8:	40ca      	lsrs	r2, r1
 80271ba:	07d6      	lsls	r6, r2, #31
 80271bc:	d528      	bpl.n	8027210 <__sflush_r+0xb8>
 80271be:	2200      	movs	r2, #0
 80271c0:	6062      	str	r2, [r4, #4]
 80271c2:	04d9      	lsls	r1, r3, #19
 80271c4:	6922      	ldr	r2, [r4, #16]
 80271c6:	6022      	str	r2, [r4, #0]
 80271c8:	d504      	bpl.n	80271d4 <__sflush_r+0x7c>
 80271ca:	1c42      	adds	r2, r0, #1
 80271cc:	d101      	bne.n	80271d2 <__sflush_r+0x7a>
 80271ce:	682b      	ldr	r3, [r5, #0]
 80271d0:	b903      	cbnz	r3, 80271d4 <__sflush_r+0x7c>
 80271d2:	6560      	str	r0, [r4, #84]	; 0x54
 80271d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80271d6:	602f      	str	r7, [r5, #0]
 80271d8:	2900      	cmp	r1, #0
 80271da:	d0ca      	beq.n	8027172 <__sflush_r+0x1a>
 80271dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80271e0:	4299      	cmp	r1, r3
 80271e2:	d002      	beq.n	80271ea <__sflush_r+0x92>
 80271e4:	4628      	mov	r0, r5
 80271e6:	f7ff fc21 	bl	8026a2c <_free_r>
 80271ea:	2000      	movs	r0, #0
 80271ec:	6360      	str	r0, [r4, #52]	; 0x34
 80271ee:	e7c1      	b.n	8027174 <__sflush_r+0x1c>
 80271f0:	6a21      	ldr	r1, [r4, #32]
 80271f2:	2301      	movs	r3, #1
 80271f4:	4628      	mov	r0, r5
 80271f6:	47b0      	blx	r6
 80271f8:	1c41      	adds	r1, r0, #1
 80271fa:	d1c7      	bne.n	802718c <__sflush_r+0x34>
 80271fc:	682b      	ldr	r3, [r5, #0]
 80271fe:	2b00      	cmp	r3, #0
 8027200:	d0c4      	beq.n	802718c <__sflush_r+0x34>
 8027202:	2b1d      	cmp	r3, #29
 8027204:	d001      	beq.n	802720a <__sflush_r+0xb2>
 8027206:	2b16      	cmp	r3, #22
 8027208:	d101      	bne.n	802720e <__sflush_r+0xb6>
 802720a:	602f      	str	r7, [r5, #0]
 802720c:	e7b1      	b.n	8027172 <__sflush_r+0x1a>
 802720e:	89a3      	ldrh	r3, [r4, #12]
 8027210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027214:	81a3      	strh	r3, [r4, #12]
 8027216:	e7ad      	b.n	8027174 <__sflush_r+0x1c>
 8027218:	690f      	ldr	r7, [r1, #16]
 802721a:	2f00      	cmp	r7, #0
 802721c:	d0a9      	beq.n	8027172 <__sflush_r+0x1a>
 802721e:	0793      	lsls	r3, r2, #30
 8027220:	680e      	ldr	r6, [r1, #0]
 8027222:	bf08      	it	eq
 8027224:	694b      	ldreq	r3, [r1, #20]
 8027226:	600f      	str	r7, [r1, #0]
 8027228:	bf18      	it	ne
 802722a:	2300      	movne	r3, #0
 802722c:	eba6 0807 	sub.w	r8, r6, r7
 8027230:	608b      	str	r3, [r1, #8]
 8027232:	f1b8 0f00 	cmp.w	r8, #0
 8027236:	dd9c      	ble.n	8027172 <__sflush_r+0x1a>
 8027238:	6a21      	ldr	r1, [r4, #32]
 802723a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802723c:	4643      	mov	r3, r8
 802723e:	463a      	mov	r2, r7
 8027240:	4628      	mov	r0, r5
 8027242:	47b0      	blx	r6
 8027244:	2800      	cmp	r0, #0
 8027246:	dc06      	bgt.n	8027256 <__sflush_r+0xfe>
 8027248:	89a3      	ldrh	r3, [r4, #12]
 802724a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802724e:	81a3      	strh	r3, [r4, #12]
 8027250:	f04f 30ff 	mov.w	r0, #4294967295
 8027254:	e78e      	b.n	8027174 <__sflush_r+0x1c>
 8027256:	4407      	add	r7, r0
 8027258:	eba8 0800 	sub.w	r8, r8, r0
 802725c:	e7e9      	b.n	8027232 <__sflush_r+0xda>
 802725e:	bf00      	nop
 8027260:	20400001 	.word	0x20400001

08027264 <_fflush_r>:
 8027264:	b538      	push	{r3, r4, r5, lr}
 8027266:	690b      	ldr	r3, [r1, #16]
 8027268:	4605      	mov	r5, r0
 802726a:	460c      	mov	r4, r1
 802726c:	b913      	cbnz	r3, 8027274 <_fflush_r+0x10>
 802726e:	2500      	movs	r5, #0
 8027270:	4628      	mov	r0, r5
 8027272:	bd38      	pop	{r3, r4, r5, pc}
 8027274:	b118      	cbz	r0, 802727e <_fflush_r+0x1a>
 8027276:	6983      	ldr	r3, [r0, #24]
 8027278:	b90b      	cbnz	r3, 802727e <_fflush_r+0x1a>
 802727a:	f000 f887 	bl	802738c <__sinit>
 802727e:	4b14      	ldr	r3, [pc, #80]	; (80272d0 <_fflush_r+0x6c>)
 8027280:	429c      	cmp	r4, r3
 8027282:	d11b      	bne.n	80272bc <_fflush_r+0x58>
 8027284:	686c      	ldr	r4, [r5, #4]
 8027286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802728a:	2b00      	cmp	r3, #0
 802728c:	d0ef      	beq.n	802726e <_fflush_r+0xa>
 802728e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027290:	07d0      	lsls	r0, r2, #31
 8027292:	d404      	bmi.n	802729e <_fflush_r+0x3a>
 8027294:	0599      	lsls	r1, r3, #22
 8027296:	d402      	bmi.n	802729e <_fflush_r+0x3a>
 8027298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802729a:	f000 f927 	bl	80274ec <__retarget_lock_acquire_recursive>
 802729e:	4628      	mov	r0, r5
 80272a0:	4621      	mov	r1, r4
 80272a2:	f7ff ff59 	bl	8027158 <__sflush_r>
 80272a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80272a8:	07da      	lsls	r2, r3, #31
 80272aa:	4605      	mov	r5, r0
 80272ac:	d4e0      	bmi.n	8027270 <_fflush_r+0xc>
 80272ae:	89a3      	ldrh	r3, [r4, #12]
 80272b0:	059b      	lsls	r3, r3, #22
 80272b2:	d4dd      	bmi.n	8027270 <_fflush_r+0xc>
 80272b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80272b6:	f000 f91a 	bl	80274ee <__retarget_lock_release_recursive>
 80272ba:	e7d9      	b.n	8027270 <_fflush_r+0xc>
 80272bc:	4b05      	ldr	r3, [pc, #20]	; (80272d4 <_fflush_r+0x70>)
 80272be:	429c      	cmp	r4, r3
 80272c0:	d101      	bne.n	80272c6 <_fflush_r+0x62>
 80272c2:	68ac      	ldr	r4, [r5, #8]
 80272c4:	e7df      	b.n	8027286 <_fflush_r+0x22>
 80272c6:	4b04      	ldr	r3, [pc, #16]	; (80272d8 <_fflush_r+0x74>)
 80272c8:	429c      	cmp	r4, r3
 80272ca:	bf08      	it	eq
 80272cc:	68ec      	ldreq	r4, [r5, #12]
 80272ce:	e7da      	b.n	8027286 <_fflush_r+0x22>
 80272d0:	0802e160 	.word	0x0802e160
 80272d4:	0802e180 	.word	0x0802e180
 80272d8:	0802e140 	.word	0x0802e140

080272dc <std>:
 80272dc:	2300      	movs	r3, #0
 80272de:	b510      	push	{r4, lr}
 80272e0:	4604      	mov	r4, r0
 80272e2:	e9c0 3300 	strd	r3, r3, [r0]
 80272e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80272ea:	6083      	str	r3, [r0, #8]
 80272ec:	8181      	strh	r1, [r0, #12]
 80272ee:	6643      	str	r3, [r0, #100]	; 0x64
 80272f0:	81c2      	strh	r2, [r0, #14]
 80272f2:	6183      	str	r3, [r0, #24]
 80272f4:	4619      	mov	r1, r3
 80272f6:	2208      	movs	r2, #8
 80272f8:	305c      	adds	r0, #92	; 0x5c
 80272fa:	f7ff fb8f 	bl	8026a1c <memset>
 80272fe:	4b05      	ldr	r3, [pc, #20]	; (8027314 <std+0x38>)
 8027300:	6263      	str	r3, [r4, #36]	; 0x24
 8027302:	4b05      	ldr	r3, [pc, #20]	; (8027318 <std+0x3c>)
 8027304:	62a3      	str	r3, [r4, #40]	; 0x28
 8027306:	4b05      	ldr	r3, [pc, #20]	; (802731c <std+0x40>)
 8027308:	62e3      	str	r3, [r4, #44]	; 0x2c
 802730a:	4b05      	ldr	r3, [pc, #20]	; (8027320 <std+0x44>)
 802730c:	6224      	str	r4, [r4, #32]
 802730e:	6323      	str	r3, [r4, #48]	; 0x30
 8027310:	bd10      	pop	{r4, pc}
 8027312:	bf00      	nop
 8027314:	08027ef9 	.word	0x08027ef9
 8027318:	08027f1b 	.word	0x08027f1b
 802731c:	08027f53 	.word	0x08027f53
 8027320:	08027f77 	.word	0x08027f77

08027324 <_cleanup_r>:
 8027324:	4901      	ldr	r1, [pc, #4]	; (802732c <_cleanup_r+0x8>)
 8027326:	f000 b8c1 	b.w	80274ac <_fwalk_reent>
 802732a:	bf00      	nop
 802732c:	08027265 	.word	0x08027265

08027330 <__sfmoreglue>:
 8027330:	b570      	push	{r4, r5, r6, lr}
 8027332:	2268      	movs	r2, #104	; 0x68
 8027334:	1e4d      	subs	r5, r1, #1
 8027336:	4355      	muls	r5, r2
 8027338:	460e      	mov	r6, r1
 802733a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802733e:	f7ff fbe1 	bl	8026b04 <_malloc_r>
 8027342:	4604      	mov	r4, r0
 8027344:	b140      	cbz	r0, 8027358 <__sfmoreglue+0x28>
 8027346:	2100      	movs	r1, #0
 8027348:	e9c0 1600 	strd	r1, r6, [r0]
 802734c:	300c      	adds	r0, #12
 802734e:	60a0      	str	r0, [r4, #8]
 8027350:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8027354:	f7ff fb62 	bl	8026a1c <memset>
 8027358:	4620      	mov	r0, r4
 802735a:	bd70      	pop	{r4, r5, r6, pc}

0802735c <__sfp_lock_acquire>:
 802735c:	4801      	ldr	r0, [pc, #4]	; (8027364 <__sfp_lock_acquire+0x8>)
 802735e:	f000 b8c5 	b.w	80274ec <__retarget_lock_acquire_recursive>
 8027362:	bf00      	nop
 8027364:	20016321 	.word	0x20016321

08027368 <__sfp_lock_release>:
 8027368:	4801      	ldr	r0, [pc, #4]	; (8027370 <__sfp_lock_release+0x8>)
 802736a:	f000 b8c0 	b.w	80274ee <__retarget_lock_release_recursive>
 802736e:	bf00      	nop
 8027370:	20016321 	.word	0x20016321

08027374 <__sinit_lock_acquire>:
 8027374:	4801      	ldr	r0, [pc, #4]	; (802737c <__sinit_lock_acquire+0x8>)
 8027376:	f000 b8b9 	b.w	80274ec <__retarget_lock_acquire_recursive>
 802737a:	bf00      	nop
 802737c:	20016322 	.word	0x20016322

08027380 <__sinit_lock_release>:
 8027380:	4801      	ldr	r0, [pc, #4]	; (8027388 <__sinit_lock_release+0x8>)
 8027382:	f000 b8b4 	b.w	80274ee <__retarget_lock_release_recursive>
 8027386:	bf00      	nop
 8027388:	20016322 	.word	0x20016322

0802738c <__sinit>:
 802738c:	b510      	push	{r4, lr}
 802738e:	4604      	mov	r4, r0
 8027390:	f7ff fff0 	bl	8027374 <__sinit_lock_acquire>
 8027394:	69a3      	ldr	r3, [r4, #24]
 8027396:	b11b      	cbz	r3, 80273a0 <__sinit+0x14>
 8027398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802739c:	f7ff bff0 	b.w	8027380 <__sinit_lock_release>
 80273a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80273a4:	6523      	str	r3, [r4, #80]	; 0x50
 80273a6:	4b13      	ldr	r3, [pc, #76]	; (80273f4 <__sinit+0x68>)
 80273a8:	4a13      	ldr	r2, [pc, #76]	; (80273f8 <__sinit+0x6c>)
 80273aa:	681b      	ldr	r3, [r3, #0]
 80273ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80273ae:	42a3      	cmp	r3, r4
 80273b0:	bf04      	itt	eq
 80273b2:	2301      	moveq	r3, #1
 80273b4:	61a3      	streq	r3, [r4, #24]
 80273b6:	4620      	mov	r0, r4
 80273b8:	f000 f820 	bl	80273fc <__sfp>
 80273bc:	6060      	str	r0, [r4, #4]
 80273be:	4620      	mov	r0, r4
 80273c0:	f000 f81c 	bl	80273fc <__sfp>
 80273c4:	60a0      	str	r0, [r4, #8]
 80273c6:	4620      	mov	r0, r4
 80273c8:	f000 f818 	bl	80273fc <__sfp>
 80273cc:	2200      	movs	r2, #0
 80273ce:	60e0      	str	r0, [r4, #12]
 80273d0:	2104      	movs	r1, #4
 80273d2:	6860      	ldr	r0, [r4, #4]
 80273d4:	f7ff ff82 	bl	80272dc <std>
 80273d8:	68a0      	ldr	r0, [r4, #8]
 80273da:	2201      	movs	r2, #1
 80273dc:	2109      	movs	r1, #9
 80273de:	f7ff ff7d 	bl	80272dc <std>
 80273e2:	68e0      	ldr	r0, [r4, #12]
 80273e4:	2202      	movs	r2, #2
 80273e6:	2112      	movs	r1, #18
 80273e8:	f7ff ff78 	bl	80272dc <std>
 80273ec:	2301      	movs	r3, #1
 80273ee:	61a3      	str	r3, [r4, #24]
 80273f0:	e7d2      	b.n	8027398 <__sinit+0xc>
 80273f2:	bf00      	nop
 80273f4:	0802e08c 	.word	0x0802e08c
 80273f8:	08027325 	.word	0x08027325

080273fc <__sfp>:
 80273fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80273fe:	4607      	mov	r7, r0
 8027400:	f7ff ffac 	bl	802735c <__sfp_lock_acquire>
 8027404:	4b1e      	ldr	r3, [pc, #120]	; (8027480 <__sfp+0x84>)
 8027406:	681e      	ldr	r6, [r3, #0]
 8027408:	69b3      	ldr	r3, [r6, #24]
 802740a:	b913      	cbnz	r3, 8027412 <__sfp+0x16>
 802740c:	4630      	mov	r0, r6
 802740e:	f7ff ffbd 	bl	802738c <__sinit>
 8027412:	3648      	adds	r6, #72	; 0x48
 8027414:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8027418:	3b01      	subs	r3, #1
 802741a:	d503      	bpl.n	8027424 <__sfp+0x28>
 802741c:	6833      	ldr	r3, [r6, #0]
 802741e:	b30b      	cbz	r3, 8027464 <__sfp+0x68>
 8027420:	6836      	ldr	r6, [r6, #0]
 8027422:	e7f7      	b.n	8027414 <__sfp+0x18>
 8027424:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8027428:	b9d5      	cbnz	r5, 8027460 <__sfp+0x64>
 802742a:	4b16      	ldr	r3, [pc, #88]	; (8027484 <__sfp+0x88>)
 802742c:	60e3      	str	r3, [r4, #12]
 802742e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8027432:	6665      	str	r5, [r4, #100]	; 0x64
 8027434:	f000 f859 	bl	80274ea <__retarget_lock_init_recursive>
 8027438:	f7ff ff96 	bl	8027368 <__sfp_lock_release>
 802743c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8027440:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8027444:	6025      	str	r5, [r4, #0]
 8027446:	61a5      	str	r5, [r4, #24]
 8027448:	2208      	movs	r2, #8
 802744a:	4629      	mov	r1, r5
 802744c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8027450:	f7ff fae4 	bl	8026a1c <memset>
 8027454:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8027458:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802745c:	4620      	mov	r0, r4
 802745e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027460:	3468      	adds	r4, #104	; 0x68
 8027462:	e7d9      	b.n	8027418 <__sfp+0x1c>
 8027464:	2104      	movs	r1, #4
 8027466:	4638      	mov	r0, r7
 8027468:	f7ff ff62 	bl	8027330 <__sfmoreglue>
 802746c:	4604      	mov	r4, r0
 802746e:	6030      	str	r0, [r6, #0]
 8027470:	2800      	cmp	r0, #0
 8027472:	d1d5      	bne.n	8027420 <__sfp+0x24>
 8027474:	f7ff ff78 	bl	8027368 <__sfp_lock_release>
 8027478:	230c      	movs	r3, #12
 802747a:	603b      	str	r3, [r7, #0]
 802747c:	e7ee      	b.n	802745c <__sfp+0x60>
 802747e:	bf00      	nop
 8027480:	0802e08c 	.word	0x0802e08c
 8027484:	ffff0001 	.word	0xffff0001

08027488 <fiprintf>:
 8027488:	b40e      	push	{r1, r2, r3}
 802748a:	b503      	push	{r0, r1, lr}
 802748c:	4601      	mov	r1, r0
 802748e:	ab03      	add	r3, sp, #12
 8027490:	4805      	ldr	r0, [pc, #20]	; (80274a8 <fiprintf+0x20>)
 8027492:	f853 2b04 	ldr.w	r2, [r3], #4
 8027496:	6800      	ldr	r0, [r0, #0]
 8027498:	9301      	str	r3, [sp, #4]
 802749a:	f000 fa21 	bl	80278e0 <_vfiprintf_r>
 802749e:	b002      	add	sp, #8
 80274a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80274a4:	b003      	add	sp, #12
 80274a6:	4770      	bx	lr
 80274a8:	20000340 	.word	0x20000340

080274ac <_fwalk_reent>:
 80274ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80274b0:	4606      	mov	r6, r0
 80274b2:	4688      	mov	r8, r1
 80274b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80274b8:	2700      	movs	r7, #0
 80274ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80274be:	f1b9 0901 	subs.w	r9, r9, #1
 80274c2:	d505      	bpl.n	80274d0 <_fwalk_reent+0x24>
 80274c4:	6824      	ldr	r4, [r4, #0]
 80274c6:	2c00      	cmp	r4, #0
 80274c8:	d1f7      	bne.n	80274ba <_fwalk_reent+0xe>
 80274ca:	4638      	mov	r0, r7
 80274cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80274d0:	89ab      	ldrh	r3, [r5, #12]
 80274d2:	2b01      	cmp	r3, #1
 80274d4:	d907      	bls.n	80274e6 <_fwalk_reent+0x3a>
 80274d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80274da:	3301      	adds	r3, #1
 80274dc:	d003      	beq.n	80274e6 <_fwalk_reent+0x3a>
 80274de:	4629      	mov	r1, r5
 80274e0:	4630      	mov	r0, r6
 80274e2:	47c0      	blx	r8
 80274e4:	4307      	orrs	r7, r0
 80274e6:	3568      	adds	r5, #104	; 0x68
 80274e8:	e7e9      	b.n	80274be <_fwalk_reent+0x12>

080274ea <__retarget_lock_init_recursive>:
 80274ea:	4770      	bx	lr

080274ec <__retarget_lock_acquire_recursive>:
 80274ec:	4770      	bx	lr

080274ee <__retarget_lock_release_recursive>:
 80274ee:	4770      	bx	lr

080274f0 <__swhatbuf_r>:
 80274f0:	b570      	push	{r4, r5, r6, lr}
 80274f2:	460e      	mov	r6, r1
 80274f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80274f8:	2900      	cmp	r1, #0
 80274fa:	b096      	sub	sp, #88	; 0x58
 80274fc:	4614      	mov	r4, r2
 80274fe:	461d      	mov	r5, r3
 8027500:	da08      	bge.n	8027514 <__swhatbuf_r+0x24>
 8027502:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8027506:	2200      	movs	r2, #0
 8027508:	602a      	str	r2, [r5, #0]
 802750a:	061a      	lsls	r2, r3, #24
 802750c:	d410      	bmi.n	8027530 <__swhatbuf_r+0x40>
 802750e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027512:	e00e      	b.n	8027532 <__swhatbuf_r+0x42>
 8027514:	466a      	mov	r2, sp
 8027516:	f000 fd5d 	bl	8027fd4 <_fstat_r>
 802751a:	2800      	cmp	r0, #0
 802751c:	dbf1      	blt.n	8027502 <__swhatbuf_r+0x12>
 802751e:	9a01      	ldr	r2, [sp, #4]
 8027520:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8027524:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027528:	425a      	negs	r2, r3
 802752a:	415a      	adcs	r2, r3
 802752c:	602a      	str	r2, [r5, #0]
 802752e:	e7ee      	b.n	802750e <__swhatbuf_r+0x1e>
 8027530:	2340      	movs	r3, #64	; 0x40
 8027532:	2000      	movs	r0, #0
 8027534:	6023      	str	r3, [r4, #0]
 8027536:	b016      	add	sp, #88	; 0x58
 8027538:	bd70      	pop	{r4, r5, r6, pc}
	...

0802753c <__smakebuf_r>:
 802753c:	898b      	ldrh	r3, [r1, #12]
 802753e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027540:	079d      	lsls	r5, r3, #30
 8027542:	4606      	mov	r6, r0
 8027544:	460c      	mov	r4, r1
 8027546:	d507      	bpl.n	8027558 <__smakebuf_r+0x1c>
 8027548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802754c:	6023      	str	r3, [r4, #0]
 802754e:	6123      	str	r3, [r4, #16]
 8027550:	2301      	movs	r3, #1
 8027552:	6163      	str	r3, [r4, #20]
 8027554:	b002      	add	sp, #8
 8027556:	bd70      	pop	{r4, r5, r6, pc}
 8027558:	ab01      	add	r3, sp, #4
 802755a:	466a      	mov	r2, sp
 802755c:	f7ff ffc8 	bl	80274f0 <__swhatbuf_r>
 8027560:	9900      	ldr	r1, [sp, #0]
 8027562:	4605      	mov	r5, r0
 8027564:	4630      	mov	r0, r6
 8027566:	f7ff facd 	bl	8026b04 <_malloc_r>
 802756a:	b948      	cbnz	r0, 8027580 <__smakebuf_r+0x44>
 802756c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027570:	059a      	lsls	r2, r3, #22
 8027572:	d4ef      	bmi.n	8027554 <__smakebuf_r+0x18>
 8027574:	f023 0303 	bic.w	r3, r3, #3
 8027578:	f043 0302 	orr.w	r3, r3, #2
 802757c:	81a3      	strh	r3, [r4, #12]
 802757e:	e7e3      	b.n	8027548 <__smakebuf_r+0xc>
 8027580:	4b0d      	ldr	r3, [pc, #52]	; (80275b8 <__smakebuf_r+0x7c>)
 8027582:	62b3      	str	r3, [r6, #40]	; 0x28
 8027584:	89a3      	ldrh	r3, [r4, #12]
 8027586:	6020      	str	r0, [r4, #0]
 8027588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802758c:	81a3      	strh	r3, [r4, #12]
 802758e:	9b00      	ldr	r3, [sp, #0]
 8027590:	6163      	str	r3, [r4, #20]
 8027592:	9b01      	ldr	r3, [sp, #4]
 8027594:	6120      	str	r0, [r4, #16]
 8027596:	b15b      	cbz	r3, 80275b0 <__smakebuf_r+0x74>
 8027598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802759c:	4630      	mov	r0, r6
 802759e:	f000 fd2b 	bl	8027ff8 <_isatty_r>
 80275a2:	b128      	cbz	r0, 80275b0 <__smakebuf_r+0x74>
 80275a4:	89a3      	ldrh	r3, [r4, #12]
 80275a6:	f023 0303 	bic.w	r3, r3, #3
 80275aa:	f043 0301 	orr.w	r3, r3, #1
 80275ae:	81a3      	strh	r3, [r4, #12]
 80275b0:	89a0      	ldrh	r0, [r4, #12]
 80275b2:	4305      	orrs	r5, r0
 80275b4:	81a5      	strh	r5, [r4, #12]
 80275b6:	e7cd      	b.n	8027554 <__smakebuf_r+0x18>
 80275b8:	08027325 	.word	0x08027325

080275bc <__malloc_lock>:
 80275bc:	4801      	ldr	r0, [pc, #4]	; (80275c4 <__malloc_lock+0x8>)
 80275be:	f7ff bf95 	b.w	80274ec <__retarget_lock_acquire_recursive>
 80275c2:	bf00      	nop
 80275c4:	20016320 	.word	0x20016320

080275c8 <__malloc_unlock>:
 80275c8:	4801      	ldr	r0, [pc, #4]	; (80275d0 <__malloc_unlock+0x8>)
 80275ca:	f7ff bf90 	b.w	80274ee <__retarget_lock_release_recursive>
 80275ce:	bf00      	nop
 80275d0:	20016320 	.word	0x20016320

080275d4 <__ssputs_r>:
 80275d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80275d8:	688e      	ldr	r6, [r1, #8]
 80275da:	429e      	cmp	r6, r3
 80275dc:	4682      	mov	sl, r0
 80275de:	460c      	mov	r4, r1
 80275e0:	4690      	mov	r8, r2
 80275e2:	461f      	mov	r7, r3
 80275e4:	d838      	bhi.n	8027658 <__ssputs_r+0x84>
 80275e6:	898a      	ldrh	r2, [r1, #12]
 80275e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80275ec:	d032      	beq.n	8027654 <__ssputs_r+0x80>
 80275ee:	6825      	ldr	r5, [r4, #0]
 80275f0:	6909      	ldr	r1, [r1, #16]
 80275f2:	eba5 0901 	sub.w	r9, r5, r1
 80275f6:	6965      	ldr	r5, [r4, #20]
 80275f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80275fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027600:	3301      	adds	r3, #1
 8027602:	444b      	add	r3, r9
 8027604:	106d      	asrs	r5, r5, #1
 8027606:	429d      	cmp	r5, r3
 8027608:	bf38      	it	cc
 802760a:	461d      	movcc	r5, r3
 802760c:	0553      	lsls	r3, r2, #21
 802760e:	d531      	bpl.n	8027674 <__ssputs_r+0xa0>
 8027610:	4629      	mov	r1, r5
 8027612:	f7ff fa77 	bl	8026b04 <_malloc_r>
 8027616:	4606      	mov	r6, r0
 8027618:	b950      	cbnz	r0, 8027630 <__ssputs_r+0x5c>
 802761a:	230c      	movs	r3, #12
 802761c:	f8ca 3000 	str.w	r3, [sl]
 8027620:	89a3      	ldrh	r3, [r4, #12]
 8027622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027626:	81a3      	strh	r3, [r4, #12]
 8027628:	f04f 30ff 	mov.w	r0, #4294967295
 802762c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027630:	6921      	ldr	r1, [r4, #16]
 8027632:	464a      	mov	r2, r9
 8027634:	f7ff f9ca 	bl	80269cc <memcpy>
 8027638:	89a3      	ldrh	r3, [r4, #12]
 802763a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802763e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027642:	81a3      	strh	r3, [r4, #12]
 8027644:	6126      	str	r6, [r4, #16]
 8027646:	6165      	str	r5, [r4, #20]
 8027648:	444e      	add	r6, r9
 802764a:	eba5 0509 	sub.w	r5, r5, r9
 802764e:	6026      	str	r6, [r4, #0]
 8027650:	60a5      	str	r5, [r4, #8]
 8027652:	463e      	mov	r6, r7
 8027654:	42be      	cmp	r6, r7
 8027656:	d900      	bls.n	802765a <__ssputs_r+0x86>
 8027658:	463e      	mov	r6, r7
 802765a:	6820      	ldr	r0, [r4, #0]
 802765c:	4632      	mov	r2, r6
 802765e:	4641      	mov	r1, r8
 8027660:	f7ff f9c2 	bl	80269e8 <memmove>
 8027664:	68a3      	ldr	r3, [r4, #8]
 8027666:	1b9b      	subs	r3, r3, r6
 8027668:	60a3      	str	r3, [r4, #8]
 802766a:	6823      	ldr	r3, [r4, #0]
 802766c:	4433      	add	r3, r6
 802766e:	6023      	str	r3, [r4, #0]
 8027670:	2000      	movs	r0, #0
 8027672:	e7db      	b.n	802762c <__ssputs_r+0x58>
 8027674:	462a      	mov	r2, r5
 8027676:	f000 fce1 	bl	802803c <_realloc_r>
 802767a:	4606      	mov	r6, r0
 802767c:	2800      	cmp	r0, #0
 802767e:	d1e1      	bne.n	8027644 <__ssputs_r+0x70>
 8027680:	6921      	ldr	r1, [r4, #16]
 8027682:	4650      	mov	r0, sl
 8027684:	f7ff f9d2 	bl	8026a2c <_free_r>
 8027688:	e7c7      	b.n	802761a <__ssputs_r+0x46>
	...

0802768c <_svfiprintf_r>:
 802768c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027690:	4698      	mov	r8, r3
 8027692:	898b      	ldrh	r3, [r1, #12]
 8027694:	061b      	lsls	r3, r3, #24
 8027696:	b09d      	sub	sp, #116	; 0x74
 8027698:	4607      	mov	r7, r0
 802769a:	460d      	mov	r5, r1
 802769c:	4614      	mov	r4, r2
 802769e:	d50e      	bpl.n	80276be <_svfiprintf_r+0x32>
 80276a0:	690b      	ldr	r3, [r1, #16]
 80276a2:	b963      	cbnz	r3, 80276be <_svfiprintf_r+0x32>
 80276a4:	2140      	movs	r1, #64	; 0x40
 80276a6:	f7ff fa2d 	bl	8026b04 <_malloc_r>
 80276aa:	6028      	str	r0, [r5, #0]
 80276ac:	6128      	str	r0, [r5, #16]
 80276ae:	b920      	cbnz	r0, 80276ba <_svfiprintf_r+0x2e>
 80276b0:	230c      	movs	r3, #12
 80276b2:	603b      	str	r3, [r7, #0]
 80276b4:	f04f 30ff 	mov.w	r0, #4294967295
 80276b8:	e0d1      	b.n	802785e <_svfiprintf_r+0x1d2>
 80276ba:	2340      	movs	r3, #64	; 0x40
 80276bc:	616b      	str	r3, [r5, #20]
 80276be:	2300      	movs	r3, #0
 80276c0:	9309      	str	r3, [sp, #36]	; 0x24
 80276c2:	2320      	movs	r3, #32
 80276c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80276c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80276cc:	2330      	movs	r3, #48	; 0x30
 80276ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8027878 <_svfiprintf_r+0x1ec>
 80276d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80276d6:	f04f 0901 	mov.w	r9, #1
 80276da:	4623      	mov	r3, r4
 80276dc:	469a      	mov	sl, r3
 80276de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80276e2:	b10a      	cbz	r2, 80276e8 <_svfiprintf_r+0x5c>
 80276e4:	2a25      	cmp	r2, #37	; 0x25
 80276e6:	d1f9      	bne.n	80276dc <_svfiprintf_r+0x50>
 80276e8:	ebba 0b04 	subs.w	fp, sl, r4
 80276ec:	d00b      	beq.n	8027706 <_svfiprintf_r+0x7a>
 80276ee:	465b      	mov	r3, fp
 80276f0:	4622      	mov	r2, r4
 80276f2:	4629      	mov	r1, r5
 80276f4:	4638      	mov	r0, r7
 80276f6:	f7ff ff6d 	bl	80275d4 <__ssputs_r>
 80276fa:	3001      	adds	r0, #1
 80276fc:	f000 80aa 	beq.w	8027854 <_svfiprintf_r+0x1c8>
 8027700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027702:	445a      	add	r2, fp
 8027704:	9209      	str	r2, [sp, #36]	; 0x24
 8027706:	f89a 3000 	ldrb.w	r3, [sl]
 802770a:	2b00      	cmp	r3, #0
 802770c:	f000 80a2 	beq.w	8027854 <_svfiprintf_r+0x1c8>
 8027710:	2300      	movs	r3, #0
 8027712:	f04f 32ff 	mov.w	r2, #4294967295
 8027716:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802771a:	f10a 0a01 	add.w	sl, sl, #1
 802771e:	9304      	str	r3, [sp, #16]
 8027720:	9307      	str	r3, [sp, #28]
 8027722:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027726:	931a      	str	r3, [sp, #104]	; 0x68
 8027728:	4654      	mov	r4, sl
 802772a:	2205      	movs	r2, #5
 802772c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027730:	4851      	ldr	r0, [pc, #324]	; (8027878 <_svfiprintf_r+0x1ec>)
 8027732:	f7d8 fd9d 	bl	8000270 <memchr>
 8027736:	9a04      	ldr	r2, [sp, #16]
 8027738:	b9d8      	cbnz	r0, 8027772 <_svfiprintf_r+0xe6>
 802773a:	06d0      	lsls	r0, r2, #27
 802773c:	bf44      	itt	mi
 802773e:	2320      	movmi	r3, #32
 8027740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027744:	0711      	lsls	r1, r2, #28
 8027746:	bf44      	itt	mi
 8027748:	232b      	movmi	r3, #43	; 0x2b
 802774a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802774e:	f89a 3000 	ldrb.w	r3, [sl]
 8027752:	2b2a      	cmp	r3, #42	; 0x2a
 8027754:	d015      	beq.n	8027782 <_svfiprintf_r+0xf6>
 8027756:	9a07      	ldr	r2, [sp, #28]
 8027758:	4654      	mov	r4, sl
 802775a:	2000      	movs	r0, #0
 802775c:	f04f 0c0a 	mov.w	ip, #10
 8027760:	4621      	mov	r1, r4
 8027762:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027766:	3b30      	subs	r3, #48	; 0x30
 8027768:	2b09      	cmp	r3, #9
 802776a:	d94e      	bls.n	802780a <_svfiprintf_r+0x17e>
 802776c:	b1b0      	cbz	r0, 802779c <_svfiprintf_r+0x110>
 802776e:	9207      	str	r2, [sp, #28]
 8027770:	e014      	b.n	802779c <_svfiprintf_r+0x110>
 8027772:	eba0 0308 	sub.w	r3, r0, r8
 8027776:	fa09 f303 	lsl.w	r3, r9, r3
 802777a:	4313      	orrs	r3, r2
 802777c:	9304      	str	r3, [sp, #16]
 802777e:	46a2      	mov	sl, r4
 8027780:	e7d2      	b.n	8027728 <_svfiprintf_r+0x9c>
 8027782:	9b03      	ldr	r3, [sp, #12]
 8027784:	1d19      	adds	r1, r3, #4
 8027786:	681b      	ldr	r3, [r3, #0]
 8027788:	9103      	str	r1, [sp, #12]
 802778a:	2b00      	cmp	r3, #0
 802778c:	bfbb      	ittet	lt
 802778e:	425b      	neglt	r3, r3
 8027790:	f042 0202 	orrlt.w	r2, r2, #2
 8027794:	9307      	strge	r3, [sp, #28]
 8027796:	9307      	strlt	r3, [sp, #28]
 8027798:	bfb8      	it	lt
 802779a:	9204      	strlt	r2, [sp, #16]
 802779c:	7823      	ldrb	r3, [r4, #0]
 802779e:	2b2e      	cmp	r3, #46	; 0x2e
 80277a0:	d10c      	bne.n	80277bc <_svfiprintf_r+0x130>
 80277a2:	7863      	ldrb	r3, [r4, #1]
 80277a4:	2b2a      	cmp	r3, #42	; 0x2a
 80277a6:	d135      	bne.n	8027814 <_svfiprintf_r+0x188>
 80277a8:	9b03      	ldr	r3, [sp, #12]
 80277aa:	1d1a      	adds	r2, r3, #4
 80277ac:	681b      	ldr	r3, [r3, #0]
 80277ae:	9203      	str	r2, [sp, #12]
 80277b0:	2b00      	cmp	r3, #0
 80277b2:	bfb8      	it	lt
 80277b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80277b8:	3402      	adds	r4, #2
 80277ba:	9305      	str	r3, [sp, #20]
 80277bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8027888 <_svfiprintf_r+0x1fc>
 80277c0:	7821      	ldrb	r1, [r4, #0]
 80277c2:	2203      	movs	r2, #3
 80277c4:	4650      	mov	r0, sl
 80277c6:	f7d8 fd53 	bl	8000270 <memchr>
 80277ca:	b140      	cbz	r0, 80277de <_svfiprintf_r+0x152>
 80277cc:	2340      	movs	r3, #64	; 0x40
 80277ce:	eba0 000a 	sub.w	r0, r0, sl
 80277d2:	fa03 f000 	lsl.w	r0, r3, r0
 80277d6:	9b04      	ldr	r3, [sp, #16]
 80277d8:	4303      	orrs	r3, r0
 80277da:	3401      	adds	r4, #1
 80277dc:	9304      	str	r3, [sp, #16]
 80277de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80277e2:	4826      	ldr	r0, [pc, #152]	; (802787c <_svfiprintf_r+0x1f0>)
 80277e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80277e8:	2206      	movs	r2, #6
 80277ea:	f7d8 fd41 	bl	8000270 <memchr>
 80277ee:	2800      	cmp	r0, #0
 80277f0:	d038      	beq.n	8027864 <_svfiprintf_r+0x1d8>
 80277f2:	4b23      	ldr	r3, [pc, #140]	; (8027880 <_svfiprintf_r+0x1f4>)
 80277f4:	bb1b      	cbnz	r3, 802783e <_svfiprintf_r+0x1b2>
 80277f6:	9b03      	ldr	r3, [sp, #12]
 80277f8:	3307      	adds	r3, #7
 80277fa:	f023 0307 	bic.w	r3, r3, #7
 80277fe:	3308      	adds	r3, #8
 8027800:	9303      	str	r3, [sp, #12]
 8027802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027804:	4433      	add	r3, r6
 8027806:	9309      	str	r3, [sp, #36]	; 0x24
 8027808:	e767      	b.n	80276da <_svfiprintf_r+0x4e>
 802780a:	fb0c 3202 	mla	r2, ip, r2, r3
 802780e:	460c      	mov	r4, r1
 8027810:	2001      	movs	r0, #1
 8027812:	e7a5      	b.n	8027760 <_svfiprintf_r+0xd4>
 8027814:	2300      	movs	r3, #0
 8027816:	3401      	adds	r4, #1
 8027818:	9305      	str	r3, [sp, #20]
 802781a:	4619      	mov	r1, r3
 802781c:	f04f 0c0a 	mov.w	ip, #10
 8027820:	4620      	mov	r0, r4
 8027822:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027826:	3a30      	subs	r2, #48	; 0x30
 8027828:	2a09      	cmp	r2, #9
 802782a:	d903      	bls.n	8027834 <_svfiprintf_r+0x1a8>
 802782c:	2b00      	cmp	r3, #0
 802782e:	d0c5      	beq.n	80277bc <_svfiprintf_r+0x130>
 8027830:	9105      	str	r1, [sp, #20]
 8027832:	e7c3      	b.n	80277bc <_svfiprintf_r+0x130>
 8027834:	fb0c 2101 	mla	r1, ip, r1, r2
 8027838:	4604      	mov	r4, r0
 802783a:	2301      	movs	r3, #1
 802783c:	e7f0      	b.n	8027820 <_svfiprintf_r+0x194>
 802783e:	ab03      	add	r3, sp, #12
 8027840:	9300      	str	r3, [sp, #0]
 8027842:	462a      	mov	r2, r5
 8027844:	4b0f      	ldr	r3, [pc, #60]	; (8027884 <_svfiprintf_r+0x1f8>)
 8027846:	a904      	add	r1, sp, #16
 8027848:	4638      	mov	r0, r7
 802784a:	f3af 8000 	nop.w
 802784e:	1c42      	adds	r2, r0, #1
 8027850:	4606      	mov	r6, r0
 8027852:	d1d6      	bne.n	8027802 <_svfiprintf_r+0x176>
 8027854:	89ab      	ldrh	r3, [r5, #12]
 8027856:	065b      	lsls	r3, r3, #25
 8027858:	f53f af2c 	bmi.w	80276b4 <_svfiprintf_r+0x28>
 802785c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802785e:	b01d      	add	sp, #116	; 0x74
 8027860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027864:	ab03      	add	r3, sp, #12
 8027866:	9300      	str	r3, [sp, #0]
 8027868:	462a      	mov	r2, r5
 802786a:	4b06      	ldr	r3, [pc, #24]	; (8027884 <_svfiprintf_r+0x1f8>)
 802786c:	a904      	add	r1, sp, #16
 802786e:	4638      	mov	r0, r7
 8027870:	f000 f9d4 	bl	8027c1c <_printf_i>
 8027874:	e7eb      	b.n	802784e <_svfiprintf_r+0x1c2>
 8027876:	bf00      	nop
 8027878:	0802e1a0 	.word	0x0802e1a0
 802787c:	0802e1aa 	.word	0x0802e1aa
 8027880:	00000000 	.word	0x00000000
 8027884:	080275d5 	.word	0x080275d5
 8027888:	0802e1a6 	.word	0x0802e1a6

0802788c <__sfputc_r>:
 802788c:	6893      	ldr	r3, [r2, #8]
 802788e:	3b01      	subs	r3, #1
 8027890:	2b00      	cmp	r3, #0
 8027892:	b410      	push	{r4}
 8027894:	6093      	str	r3, [r2, #8]
 8027896:	da08      	bge.n	80278aa <__sfputc_r+0x1e>
 8027898:	6994      	ldr	r4, [r2, #24]
 802789a:	42a3      	cmp	r3, r4
 802789c:	db01      	blt.n	80278a2 <__sfputc_r+0x16>
 802789e:	290a      	cmp	r1, #10
 80278a0:	d103      	bne.n	80278aa <__sfputc_r+0x1e>
 80278a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80278a6:	f7ff bb79 	b.w	8026f9c <__swbuf_r>
 80278aa:	6813      	ldr	r3, [r2, #0]
 80278ac:	1c58      	adds	r0, r3, #1
 80278ae:	6010      	str	r0, [r2, #0]
 80278b0:	7019      	strb	r1, [r3, #0]
 80278b2:	4608      	mov	r0, r1
 80278b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80278b8:	4770      	bx	lr

080278ba <__sfputs_r>:
 80278ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80278bc:	4606      	mov	r6, r0
 80278be:	460f      	mov	r7, r1
 80278c0:	4614      	mov	r4, r2
 80278c2:	18d5      	adds	r5, r2, r3
 80278c4:	42ac      	cmp	r4, r5
 80278c6:	d101      	bne.n	80278cc <__sfputs_r+0x12>
 80278c8:	2000      	movs	r0, #0
 80278ca:	e007      	b.n	80278dc <__sfputs_r+0x22>
 80278cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80278d0:	463a      	mov	r2, r7
 80278d2:	4630      	mov	r0, r6
 80278d4:	f7ff ffda 	bl	802788c <__sfputc_r>
 80278d8:	1c43      	adds	r3, r0, #1
 80278da:	d1f3      	bne.n	80278c4 <__sfputs_r+0xa>
 80278dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080278e0 <_vfiprintf_r>:
 80278e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278e4:	460d      	mov	r5, r1
 80278e6:	b09d      	sub	sp, #116	; 0x74
 80278e8:	4614      	mov	r4, r2
 80278ea:	4698      	mov	r8, r3
 80278ec:	4606      	mov	r6, r0
 80278ee:	b118      	cbz	r0, 80278f8 <_vfiprintf_r+0x18>
 80278f0:	6983      	ldr	r3, [r0, #24]
 80278f2:	b90b      	cbnz	r3, 80278f8 <_vfiprintf_r+0x18>
 80278f4:	f7ff fd4a 	bl	802738c <__sinit>
 80278f8:	4b89      	ldr	r3, [pc, #548]	; (8027b20 <_vfiprintf_r+0x240>)
 80278fa:	429d      	cmp	r5, r3
 80278fc:	d11b      	bne.n	8027936 <_vfiprintf_r+0x56>
 80278fe:	6875      	ldr	r5, [r6, #4]
 8027900:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027902:	07d9      	lsls	r1, r3, #31
 8027904:	d405      	bmi.n	8027912 <_vfiprintf_r+0x32>
 8027906:	89ab      	ldrh	r3, [r5, #12]
 8027908:	059a      	lsls	r2, r3, #22
 802790a:	d402      	bmi.n	8027912 <_vfiprintf_r+0x32>
 802790c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802790e:	f7ff fded 	bl	80274ec <__retarget_lock_acquire_recursive>
 8027912:	89ab      	ldrh	r3, [r5, #12]
 8027914:	071b      	lsls	r3, r3, #28
 8027916:	d501      	bpl.n	802791c <_vfiprintf_r+0x3c>
 8027918:	692b      	ldr	r3, [r5, #16]
 802791a:	b9eb      	cbnz	r3, 8027958 <_vfiprintf_r+0x78>
 802791c:	4629      	mov	r1, r5
 802791e:	4630      	mov	r0, r6
 8027920:	f7ff fb8e 	bl	8027040 <__swsetup_r>
 8027924:	b1c0      	cbz	r0, 8027958 <_vfiprintf_r+0x78>
 8027926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027928:	07dc      	lsls	r4, r3, #31
 802792a:	d50e      	bpl.n	802794a <_vfiprintf_r+0x6a>
 802792c:	f04f 30ff 	mov.w	r0, #4294967295
 8027930:	b01d      	add	sp, #116	; 0x74
 8027932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027936:	4b7b      	ldr	r3, [pc, #492]	; (8027b24 <_vfiprintf_r+0x244>)
 8027938:	429d      	cmp	r5, r3
 802793a:	d101      	bne.n	8027940 <_vfiprintf_r+0x60>
 802793c:	68b5      	ldr	r5, [r6, #8]
 802793e:	e7df      	b.n	8027900 <_vfiprintf_r+0x20>
 8027940:	4b79      	ldr	r3, [pc, #484]	; (8027b28 <_vfiprintf_r+0x248>)
 8027942:	429d      	cmp	r5, r3
 8027944:	bf08      	it	eq
 8027946:	68f5      	ldreq	r5, [r6, #12]
 8027948:	e7da      	b.n	8027900 <_vfiprintf_r+0x20>
 802794a:	89ab      	ldrh	r3, [r5, #12]
 802794c:	0598      	lsls	r0, r3, #22
 802794e:	d4ed      	bmi.n	802792c <_vfiprintf_r+0x4c>
 8027950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027952:	f7ff fdcc 	bl	80274ee <__retarget_lock_release_recursive>
 8027956:	e7e9      	b.n	802792c <_vfiprintf_r+0x4c>
 8027958:	2300      	movs	r3, #0
 802795a:	9309      	str	r3, [sp, #36]	; 0x24
 802795c:	2320      	movs	r3, #32
 802795e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027962:	f8cd 800c 	str.w	r8, [sp, #12]
 8027966:	2330      	movs	r3, #48	; 0x30
 8027968:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8027b2c <_vfiprintf_r+0x24c>
 802796c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027970:	f04f 0901 	mov.w	r9, #1
 8027974:	4623      	mov	r3, r4
 8027976:	469a      	mov	sl, r3
 8027978:	f813 2b01 	ldrb.w	r2, [r3], #1
 802797c:	b10a      	cbz	r2, 8027982 <_vfiprintf_r+0xa2>
 802797e:	2a25      	cmp	r2, #37	; 0x25
 8027980:	d1f9      	bne.n	8027976 <_vfiprintf_r+0x96>
 8027982:	ebba 0b04 	subs.w	fp, sl, r4
 8027986:	d00b      	beq.n	80279a0 <_vfiprintf_r+0xc0>
 8027988:	465b      	mov	r3, fp
 802798a:	4622      	mov	r2, r4
 802798c:	4629      	mov	r1, r5
 802798e:	4630      	mov	r0, r6
 8027990:	f7ff ff93 	bl	80278ba <__sfputs_r>
 8027994:	3001      	adds	r0, #1
 8027996:	f000 80aa 	beq.w	8027aee <_vfiprintf_r+0x20e>
 802799a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802799c:	445a      	add	r2, fp
 802799e:	9209      	str	r2, [sp, #36]	; 0x24
 80279a0:	f89a 3000 	ldrb.w	r3, [sl]
 80279a4:	2b00      	cmp	r3, #0
 80279a6:	f000 80a2 	beq.w	8027aee <_vfiprintf_r+0x20e>
 80279aa:	2300      	movs	r3, #0
 80279ac:	f04f 32ff 	mov.w	r2, #4294967295
 80279b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80279b4:	f10a 0a01 	add.w	sl, sl, #1
 80279b8:	9304      	str	r3, [sp, #16]
 80279ba:	9307      	str	r3, [sp, #28]
 80279bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80279c0:	931a      	str	r3, [sp, #104]	; 0x68
 80279c2:	4654      	mov	r4, sl
 80279c4:	2205      	movs	r2, #5
 80279c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80279ca:	4858      	ldr	r0, [pc, #352]	; (8027b2c <_vfiprintf_r+0x24c>)
 80279cc:	f7d8 fc50 	bl	8000270 <memchr>
 80279d0:	9a04      	ldr	r2, [sp, #16]
 80279d2:	b9d8      	cbnz	r0, 8027a0c <_vfiprintf_r+0x12c>
 80279d4:	06d1      	lsls	r1, r2, #27
 80279d6:	bf44      	itt	mi
 80279d8:	2320      	movmi	r3, #32
 80279da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80279de:	0713      	lsls	r3, r2, #28
 80279e0:	bf44      	itt	mi
 80279e2:	232b      	movmi	r3, #43	; 0x2b
 80279e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80279e8:	f89a 3000 	ldrb.w	r3, [sl]
 80279ec:	2b2a      	cmp	r3, #42	; 0x2a
 80279ee:	d015      	beq.n	8027a1c <_vfiprintf_r+0x13c>
 80279f0:	9a07      	ldr	r2, [sp, #28]
 80279f2:	4654      	mov	r4, sl
 80279f4:	2000      	movs	r0, #0
 80279f6:	f04f 0c0a 	mov.w	ip, #10
 80279fa:	4621      	mov	r1, r4
 80279fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027a00:	3b30      	subs	r3, #48	; 0x30
 8027a02:	2b09      	cmp	r3, #9
 8027a04:	d94e      	bls.n	8027aa4 <_vfiprintf_r+0x1c4>
 8027a06:	b1b0      	cbz	r0, 8027a36 <_vfiprintf_r+0x156>
 8027a08:	9207      	str	r2, [sp, #28]
 8027a0a:	e014      	b.n	8027a36 <_vfiprintf_r+0x156>
 8027a0c:	eba0 0308 	sub.w	r3, r0, r8
 8027a10:	fa09 f303 	lsl.w	r3, r9, r3
 8027a14:	4313      	orrs	r3, r2
 8027a16:	9304      	str	r3, [sp, #16]
 8027a18:	46a2      	mov	sl, r4
 8027a1a:	e7d2      	b.n	80279c2 <_vfiprintf_r+0xe2>
 8027a1c:	9b03      	ldr	r3, [sp, #12]
 8027a1e:	1d19      	adds	r1, r3, #4
 8027a20:	681b      	ldr	r3, [r3, #0]
 8027a22:	9103      	str	r1, [sp, #12]
 8027a24:	2b00      	cmp	r3, #0
 8027a26:	bfbb      	ittet	lt
 8027a28:	425b      	neglt	r3, r3
 8027a2a:	f042 0202 	orrlt.w	r2, r2, #2
 8027a2e:	9307      	strge	r3, [sp, #28]
 8027a30:	9307      	strlt	r3, [sp, #28]
 8027a32:	bfb8      	it	lt
 8027a34:	9204      	strlt	r2, [sp, #16]
 8027a36:	7823      	ldrb	r3, [r4, #0]
 8027a38:	2b2e      	cmp	r3, #46	; 0x2e
 8027a3a:	d10c      	bne.n	8027a56 <_vfiprintf_r+0x176>
 8027a3c:	7863      	ldrb	r3, [r4, #1]
 8027a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8027a40:	d135      	bne.n	8027aae <_vfiprintf_r+0x1ce>
 8027a42:	9b03      	ldr	r3, [sp, #12]
 8027a44:	1d1a      	adds	r2, r3, #4
 8027a46:	681b      	ldr	r3, [r3, #0]
 8027a48:	9203      	str	r2, [sp, #12]
 8027a4a:	2b00      	cmp	r3, #0
 8027a4c:	bfb8      	it	lt
 8027a4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8027a52:	3402      	adds	r4, #2
 8027a54:	9305      	str	r3, [sp, #20]
 8027a56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8027b3c <_vfiprintf_r+0x25c>
 8027a5a:	7821      	ldrb	r1, [r4, #0]
 8027a5c:	2203      	movs	r2, #3
 8027a5e:	4650      	mov	r0, sl
 8027a60:	f7d8 fc06 	bl	8000270 <memchr>
 8027a64:	b140      	cbz	r0, 8027a78 <_vfiprintf_r+0x198>
 8027a66:	2340      	movs	r3, #64	; 0x40
 8027a68:	eba0 000a 	sub.w	r0, r0, sl
 8027a6c:	fa03 f000 	lsl.w	r0, r3, r0
 8027a70:	9b04      	ldr	r3, [sp, #16]
 8027a72:	4303      	orrs	r3, r0
 8027a74:	3401      	adds	r4, #1
 8027a76:	9304      	str	r3, [sp, #16]
 8027a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027a7c:	482c      	ldr	r0, [pc, #176]	; (8027b30 <_vfiprintf_r+0x250>)
 8027a7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027a82:	2206      	movs	r2, #6
 8027a84:	f7d8 fbf4 	bl	8000270 <memchr>
 8027a88:	2800      	cmp	r0, #0
 8027a8a:	d03f      	beq.n	8027b0c <_vfiprintf_r+0x22c>
 8027a8c:	4b29      	ldr	r3, [pc, #164]	; (8027b34 <_vfiprintf_r+0x254>)
 8027a8e:	bb1b      	cbnz	r3, 8027ad8 <_vfiprintf_r+0x1f8>
 8027a90:	9b03      	ldr	r3, [sp, #12]
 8027a92:	3307      	adds	r3, #7
 8027a94:	f023 0307 	bic.w	r3, r3, #7
 8027a98:	3308      	adds	r3, #8
 8027a9a:	9303      	str	r3, [sp, #12]
 8027a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a9e:	443b      	add	r3, r7
 8027aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8027aa2:	e767      	b.n	8027974 <_vfiprintf_r+0x94>
 8027aa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8027aa8:	460c      	mov	r4, r1
 8027aaa:	2001      	movs	r0, #1
 8027aac:	e7a5      	b.n	80279fa <_vfiprintf_r+0x11a>
 8027aae:	2300      	movs	r3, #0
 8027ab0:	3401      	adds	r4, #1
 8027ab2:	9305      	str	r3, [sp, #20]
 8027ab4:	4619      	mov	r1, r3
 8027ab6:	f04f 0c0a 	mov.w	ip, #10
 8027aba:	4620      	mov	r0, r4
 8027abc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027ac0:	3a30      	subs	r2, #48	; 0x30
 8027ac2:	2a09      	cmp	r2, #9
 8027ac4:	d903      	bls.n	8027ace <_vfiprintf_r+0x1ee>
 8027ac6:	2b00      	cmp	r3, #0
 8027ac8:	d0c5      	beq.n	8027a56 <_vfiprintf_r+0x176>
 8027aca:	9105      	str	r1, [sp, #20]
 8027acc:	e7c3      	b.n	8027a56 <_vfiprintf_r+0x176>
 8027ace:	fb0c 2101 	mla	r1, ip, r1, r2
 8027ad2:	4604      	mov	r4, r0
 8027ad4:	2301      	movs	r3, #1
 8027ad6:	e7f0      	b.n	8027aba <_vfiprintf_r+0x1da>
 8027ad8:	ab03      	add	r3, sp, #12
 8027ada:	9300      	str	r3, [sp, #0]
 8027adc:	462a      	mov	r2, r5
 8027ade:	4b16      	ldr	r3, [pc, #88]	; (8027b38 <_vfiprintf_r+0x258>)
 8027ae0:	a904      	add	r1, sp, #16
 8027ae2:	4630      	mov	r0, r6
 8027ae4:	f3af 8000 	nop.w
 8027ae8:	4607      	mov	r7, r0
 8027aea:	1c78      	adds	r0, r7, #1
 8027aec:	d1d6      	bne.n	8027a9c <_vfiprintf_r+0x1bc>
 8027aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027af0:	07d9      	lsls	r1, r3, #31
 8027af2:	d405      	bmi.n	8027b00 <_vfiprintf_r+0x220>
 8027af4:	89ab      	ldrh	r3, [r5, #12]
 8027af6:	059a      	lsls	r2, r3, #22
 8027af8:	d402      	bmi.n	8027b00 <_vfiprintf_r+0x220>
 8027afa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027afc:	f7ff fcf7 	bl	80274ee <__retarget_lock_release_recursive>
 8027b00:	89ab      	ldrh	r3, [r5, #12]
 8027b02:	065b      	lsls	r3, r3, #25
 8027b04:	f53f af12 	bmi.w	802792c <_vfiprintf_r+0x4c>
 8027b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027b0a:	e711      	b.n	8027930 <_vfiprintf_r+0x50>
 8027b0c:	ab03      	add	r3, sp, #12
 8027b0e:	9300      	str	r3, [sp, #0]
 8027b10:	462a      	mov	r2, r5
 8027b12:	4b09      	ldr	r3, [pc, #36]	; (8027b38 <_vfiprintf_r+0x258>)
 8027b14:	a904      	add	r1, sp, #16
 8027b16:	4630      	mov	r0, r6
 8027b18:	f000 f880 	bl	8027c1c <_printf_i>
 8027b1c:	e7e4      	b.n	8027ae8 <_vfiprintf_r+0x208>
 8027b1e:	bf00      	nop
 8027b20:	0802e160 	.word	0x0802e160
 8027b24:	0802e180 	.word	0x0802e180
 8027b28:	0802e140 	.word	0x0802e140
 8027b2c:	0802e1a0 	.word	0x0802e1a0
 8027b30:	0802e1aa 	.word	0x0802e1aa
 8027b34:	00000000 	.word	0x00000000
 8027b38:	080278bb 	.word	0x080278bb
 8027b3c:	0802e1a6 	.word	0x0802e1a6

08027b40 <_printf_common>:
 8027b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027b44:	4616      	mov	r6, r2
 8027b46:	4699      	mov	r9, r3
 8027b48:	688a      	ldr	r2, [r1, #8]
 8027b4a:	690b      	ldr	r3, [r1, #16]
 8027b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027b50:	4293      	cmp	r3, r2
 8027b52:	bfb8      	it	lt
 8027b54:	4613      	movlt	r3, r2
 8027b56:	6033      	str	r3, [r6, #0]
 8027b58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027b5c:	4607      	mov	r7, r0
 8027b5e:	460c      	mov	r4, r1
 8027b60:	b10a      	cbz	r2, 8027b66 <_printf_common+0x26>
 8027b62:	3301      	adds	r3, #1
 8027b64:	6033      	str	r3, [r6, #0]
 8027b66:	6823      	ldr	r3, [r4, #0]
 8027b68:	0699      	lsls	r1, r3, #26
 8027b6a:	bf42      	ittt	mi
 8027b6c:	6833      	ldrmi	r3, [r6, #0]
 8027b6e:	3302      	addmi	r3, #2
 8027b70:	6033      	strmi	r3, [r6, #0]
 8027b72:	6825      	ldr	r5, [r4, #0]
 8027b74:	f015 0506 	ands.w	r5, r5, #6
 8027b78:	d106      	bne.n	8027b88 <_printf_common+0x48>
 8027b7a:	f104 0a19 	add.w	sl, r4, #25
 8027b7e:	68e3      	ldr	r3, [r4, #12]
 8027b80:	6832      	ldr	r2, [r6, #0]
 8027b82:	1a9b      	subs	r3, r3, r2
 8027b84:	42ab      	cmp	r3, r5
 8027b86:	dc26      	bgt.n	8027bd6 <_printf_common+0x96>
 8027b88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8027b8c:	1e13      	subs	r3, r2, #0
 8027b8e:	6822      	ldr	r2, [r4, #0]
 8027b90:	bf18      	it	ne
 8027b92:	2301      	movne	r3, #1
 8027b94:	0692      	lsls	r2, r2, #26
 8027b96:	d42b      	bmi.n	8027bf0 <_printf_common+0xb0>
 8027b98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027b9c:	4649      	mov	r1, r9
 8027b9e:	4638      	mov	r0, r7
 8027ba0:	47c0      	blx	r8
 8027ba2:	3001      	adds	r0, #1
 8027ba4:	d01e      	beq.n	8027be4 <_printf_common+0xa4>
 8027ba6:	6823      	ldr	r3, [r4, #0]
 8027ba8:	68e5      	ldr	r5, [r4, #12]
 8027baa:	6832      	ldr	r2, [r6, #0]
 8027bac:	f003 0306 	and.w	r3, r3, #6
 8027bb0:	2b04      	cmp	r3, #4
 8027bb2:	bf08      	it	eq
 8027bb4:	1aad      	subeq	r5, r5, r2
 8027bb6:	68a3      	ldr	r3, [r4, #8]
 8027bb8:	6922      	ldr	r2, [r4, #16]
 8027bba:	bf0c      	ite	eq
 8027bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027bc0:	2500      	movne	r5, #0
 8027bc2:	4293      	cmp	r3, r2
 8027bc4:	bfc4      	itt	gt
 8027bc6:	1a9b      	subgt	r3, r3, r2
 8027bc8:	18ed      	addgt	r5, r5, r3
 8027bca:	2600      	movs	r6, #0
 8027bcc:	341a      	adds	r4, #26
 8027bce:	42b5      	cmp	r5, r6
 8027bd0:	d11a      	bne.n	8027c08 <_printf_common+0xc8>
 8027bd2:	2000      	movs	r0, #0
 8027bd4:	e008      	b.n	8027be8 <_printf_common+0xa8>
 8027bd6:	2301      	movs	r3, #1
 8027bd8:	4652      	mov	r2, sl
 8027bda:	4649      	mov	r1, r9
 8027bdc:	4638      	mov	r0, r7
 8027bde:	47c0      	blx	r8
 8027be0:	3001      	adds	r0, #1
 8027be2:	d103      	bne.n	8027bec <_printf_common+0xac>
 8027be4:	f04f 30ff 	mov.w	r0, #4294967295
 8027be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027bec:	3501      	adds	r5, #1
 8027bee:	e7c6      	b.n	8027b7e <_printf_common+0x3e>
 8027bf0:	18e1      	adds	r1, r4, r3
 8027bf2:	1c5a      	adds	r2, r3, #1
 8027bf4:	2030      	movs	r0, #48	; 0x30
 8027bf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027bfa:	4422      	add	r2, r4
 8027bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027c00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027c04:	3302      	adds	r3, #2
 8027c06:	e7c7      	b.n	8027b98 <_printf_common+0x58>
 8027c08:	2301      	movs	r3, #1
 8027c0a:	4622      	mov	r2, r4
 8027c0c:	4649      	mov	r1, r9
 8027c0e:	4638      	mov	r0, r7
 8027c10:	47c0      	blx	r8
 8027c12:	3001      	adds	r0, #1
 8027c14:	d0e6      	beq.n	8027be4 <_printf_common+0xa4>
 8027c16:	3601      	adds	r6, #1
 8027c18:	e7d9      	b.n	8027bce <_printf_common+0x8e>
	...

08027c1c <_printf_i>:
 8027c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027c20:	7e0f      	ldrb	r7, [r1, #24]
 8027c22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027c24:	2f78      	cmp	r7, #120	; 0x78
 8027c26:	4691      	mov	r9, r2
 8027c28:	4680      	mov	r8, r0
 8027c2a:	460c      	mov	r4, r1
 8027c2c:	469a      	mov	sl, r3
 8027c2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8027c32:	d807      	bhi.n	8027c44 <_printf_i+0x28>
 8027c34:	2f62      	cmp	r7, #98	; 0x62
 8027c36:	d80a      	bhi.n	8027c4e <_printf_i+0x32>
 8027c38:	2f00      	cmp	r7, #0
 8027c3a:	f000 80d8 	beq.w	8027dee <_printf_i+0x1d2>
 8027c3e:	2f58      	cmp	r7, #88	; 0x58
 8027c40:	f000 80a3 	beq.w	8027d8a <_printf_i+0x16e>
 8027c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027c48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027c4c:	e03a      	b.n	8027cc4 <_printf_i+0xa8>
 8027c4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8027c52:	2b15      	cmp	r3, #21
 8027c54:	d8f6      	bhi.n	8027c44 <_printf_i+0x28>
 8027c56:	a101      	add	r1, pc, #4	; (adr r1, 8027c5c <_printf_i+0x40>)
 8027c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027c5c:	08027cb5 	.word	0x08027cb5
 8027c60:	08027cc9 	.word	0x08027cc9
 8027c64:	08027c45 	.word	0x08027c45
 8027c68:	08027c45 	.word	0x08027c45
 8027c6c:	08027c45 	.word	0x08027c45
 8027c70:	08027c45 	.word	0x08027c45
 8027c74:	08027cc9 	.word	0x08027cc9
 8027c78:	08027c45 	.word	0x08027c45
 8027c7c:	08027c45 	.word	0x08027c45
 8027c80:	08027c45 	.word	0x08027c45
 8027c84:	08027c45 	.word	0x08027c45
 8027c88:	08027dd5 	.word	0x08027dd5
 8027c8c:	08027cf9 	.word	0x08027cf9
 8027c90:	08027db7 	.word	0x08027db7
 8027c94:	08027c45 	.word	0x08027c45
 8027c98:	08027c45 	.word	0x08027c45
 8027c9c:	08027df7 	.word	0x08027df7
 8027ca0:	08027c45 	.word	0x08027c45
 8027ca4:	08027cf9 	.word	0x08027cf9
 8027ca8:	08027c45 	.word	0x08027c45
 8027cac:	08027c45 	.word	0x08027c45
 8027cb0:	08027dbf 	.word	0x08027dbf
 8027cb4:	682b      	ldr	r3, [r5, #0]
 8027cb6:	1d1a      	adds	r2, r3, #4
 8027cb8:	681b      	ldr	r3, [r3, #0]
 8027cba:	602a      	str	r2, [r5, #0]
 8027cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027cc4:	2301      	movs	r3, #1
 8027cc6:	e0a3      	b.n	8027e10 <_printf_i+0x1f4>
 8027cc8:	6820      	ldr	r0, [r4, #0]
 8027cca:	6829      	ldr	r1, [r5, #0]
 8027ccc:	0606      	lsls	r6, r0, #24
 8027cce:	f101 0304 	add.w	r3, r1, #4
 8027cd2:	d50a      	bpl.n	8027cea <_printf_i+0xce>
 8027cd4:	680e      	ldr	r6, [r1, #0]
 8027cd6:	602b      	str	r3, [r5, #0]
 8027cd8:	2e00      	cmp	r6, #0
 8027cda:	da03      	bge.n	8027ce4 <_printf_i+0xc8>
 8027cdc:	232d      	movs	r3, #45	; 0x2d
 8027cde:	4276      	negs	r6, r6
 8027ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027ce4:	485e      	ldr	r0, [pc, #376]	; (8027e60 <_printf_i+0x244>)
 8027ce6:	230a      	movs	r3, #10
 8027ce8:	e019      	b.n	8027d1e <_printf_i+0x102>
 8027cea:	680e      	ldr	r6, [r1, #0]
 8027cec:	602b      	str	r3, [r5, #0]
 8027cee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8027cf2:	bf18      	it	ne
 8027cf4:	b236      	sxthne	r6, r6
 8027cf6:	e7ef      	b.n	8027cd8 <_printf_i+0xbc>
 8027cf8:	682b      	ldr	r3, [r5, #0]
 8027cfa:	6820      	ldr	r0, [r4, #0]
 8027cfc:	1d19      	adds	r1, r3, #4
 8027cfe:	6029      	str	r1, [r5, #0]
 8027d00:	0601      	lsls	r1, r0, #24
 8027d02:	d501      	bpl.n	8027d08 <_printf_i+0xec>
 8027d04:	681e      	ldr	r6, [r3, #0]
 8027d06:	e002      	b.n	8027d0e <_printf_i+0xf2>
 8027d08:	0646      	lsls	r6, r0, #25
 8027d0a:	d5fb      	bpl.n	8027d04 <_printf_i+0xe8>
 8027d0c:	881e      	ldrh	r6, [r3, #0]
 8027d0e:	4854      	ldr	r0, [pc, #336]	; (8027e60 <_printf_i+0x244>)
 8027d10:	2f6f      	cmp	r7, #111	; 0x6f
 8027d12:	bf0c      	ite	eq
 8027d14:	2308      	moveq	r3, #8
 8027d16:	230a      	movne	r3, #10
 8027d18:	2100      	movs	r1, #0
 8027d1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027d1e:	6865      	ldr	r5, [r4, #4]
 8027d20:	60a5      	str	r5, [r4, #8]
 8027d22:	2d00      	cmp	r5, #0
 8027d24:	bfa2      	ittt	ge
 8027d26:	6821      	ldrge	r1, [r4, #0]
 8027d28:	f021 0104 	bicge.w	r1, r1, #4
 8027d2c:	6021      	strge	r1, [r4, #0]
 8027d2e:	b90e      	cbnz	r6, 8027d34 <_printf_i+0x118>
 8027d30:	2d00      	cmp	r5, #0
 8027d32:	d04d      	beq.n	8027dd0 <_printf_i+0x1b4>
 8027d34:	4615      	mov	r5, r2
 8027d36:	fbb6 f1f3 	udiv	r1, r6, r3
 8027d3a:	fb03 6711 	mls	r7, r3, r1, r6
 8027d3e:	5dc7      	ldrb	r7, [r0, r7]
 8027d40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8027d44:	4637      	mov	r7, r6
 8027d46:	42bb      	cmp	r3, r7
 8027d48:	460e      	mov	r6, r1
 8027d4a:	d9f4      	bls.n	8027d36 <_printf_i+0x11a>
 8027d4c:	2b08      	cmp	r3, #8
 8027d4e:	d10b      	bne.n	8027d68 <_printf_i+0x14c>
 8027d50:	6823      	ldr	r3, [r4, #0]
 8027d52:	07de      	lsls	r6, r3, #31
 8027d54:	d508      	bpl.n	8027d68 <_printf_i+0x14c>
 8027d56:	6923      	ldr	r3, [r4, #16]
 8027d58:	6861      	ldr	r1, [r4, #4]
 8027d5a:	4299      	cmp	r1, r3
 8027d5c:	bfde      	ittt	le
 8027d5e:	2330      	movle	r3, #48	; 0x30
 8027d60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027d64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8027d68:	1b52      	subs	r2, r2, r5
 8027d6a:	6122      	str	r2, [r4, #16]
 8027d6c:	f8cd a000 	str.w	sl, [sp]
 8027d70:	464b      	mov	r3, r9
 8027d72:	aa03      	add	r2, sp, #12
 8027d74:	4621      	mov	r1, r4
 8027d76:	4640      	mov	r0, r8
 8027d78:	f7ff fee2 	bl	8027b40 <_printf_common>
 8027d7c:	3001      	adds	r0, #1
 8027d7e:	d14c      	bne.n	8027e1a <_printf_i+0x1fe>
 8027d80:	f04f 30ff 	mov.w	r0, #4294967295
 8027d84:	b004      	add	sp, #16
 8027d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027d8a:	4835      	ldr	r0, [pc, #212]	; (8027e60 <_printf_i+0x244>)
 8027d8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8027d90:	6829      	ldr	r1, [r5, #0]
 8027d92:	6823      	ldr	r3, [r4, #0]
 8027d94:	f851 6b04 	ldr.w	r6, [r1], #4
 8027d98:	6029      	str	r1, [r5, #0]
 8027d9a:	061d      	lsls	r5, r3, #24
 8027d9c:	d514      	bpl.n	8027dc8 <_printf_i+0x1ac>
 8027d9e:	07df      	lsls	r7, r3, #31
 8027da0:	bf44      	itt	mi
 8027da2:	f043 0320 	orrmi.w	r3, r3, #32
 8027da6:	6023      	strmi	r3, [r4, #0]
 8027da8:	b91e      	cbnz	r6, 8027db2 <_printf_i+0x196>
 8027daa:	6823      	ldr	r3, [r4, #0]
 8027dac:	f023 0320 	bic.w	r3, r3, #32
 8027db0:	6023      	str	r3, [r4, #0]
 8027db2:	2310      	movs	r3, #16
 8027db4:	e7b0      	b.n	8027d18 <_printf_i+0xfc>
 8027db6:	6823      	ldr	r3, [r4, #0]
 8027db8:	f043 0320 	orr.w	r3, r3, #32
 8027dbc:	6023      	str	r3, [r4, #0]
 8027dbe:	2378      	movs	r3, #120	; 0x78
 8027dc0:	4828      	ldr	r0, [pc, #160]	; (8027e64 <_printf_i+0x248>)
 8027dc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027dc6:	e7e3      	b.n	8027d90 <_printf_i+0x174>
 8027dc8:	0659      	lsls	r1, r3, #25
 8027dca:	bf48      	it	mi
 8027dcc:	b2b6      	uxthmi	r6, r6
 8027dce:	e7e6      	b.n	8027d9e <_printf_i+0x182>
 8027dd0:	4615      	mov	r5, r2
 8027dd2:	e7bb      	b.n	8027d4c <_printf_i+0x130>
 8027dd4:	682b      	ldr	r3, [r5, #0]
 8027dd6:	6826      	ldr	r6, [r4, #0]
 8027dd8:	6961      	ldr	r1, [r4, #20]
 8027dda:	1d18      	adds	r0, r3, #4
 8027ddc:	6028      	str	r0, [r5, #0]
 8027dde:	0635      	lsls	r5, r6, #24
 8027de0:	681b      	ldr	r3, [r3, #0]
 8027de2:	d501      	bpl.n	8027de8 <_printf_i+0x1cc>
 8027de4:	6019      	str	r1, [r3, #0]
 8027de6:	e002      	b.n	8027dee <_printf_i+0x1d2>
 8027de8:	0670      	lsls	r0, r6, #25
 8027dea:	d5fb      	bpl.n	8027de4 <_printf_i+0x1c8>
 8027dec:	8019      	strh	r1, [r3, #0]
 8027dee:	2300      	movs	r3, #0
 8027df0:	6123      	str	r3, [r4, #16]
 8027df2:	4615      	mov	r5, r2
 8027df4:	e7ba      	b.n	8027d6c <_printf_i+0x150>
 8027df6:	682b      	ldr	r3, [r5, #0]
 8027df8:	1d1a      	adds	r2, r3, #4
 8027dfa:	602a      	str	r2, [r5, #0]
 8027dfc:	681d      	ldr	r5, [r3, #0]
 8027dfe:	6862      	ldr	r2, [r4, #4]
 8027e00:	2100      	movs	r1, #0
 8027e02:	4628      	mov	r0, r5
 8027e04:	f7d8 fa34 	bl	8000270 <memchr>
 8027e08:	b108      	cbz	r0, 8027e0e <_printf_i+0x1f2>
 8027e0a:	1b40      	subs	r0, r0, r5
 8027e0c:	6060      	str	r0, [r4, #4]
 8027e0e:	6863      	ldr	r3, [r4, #4]
 8027e10:	6123      	str	r3, [r4, #16]
 8027e12:	2300      	movs	r3, #0
 8027e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027e18:	e7a8      	b.n	8027d6c <_printf_i+0x150>
 8027e1a:	6923      	ldr	r3, [r4, #16]
 8027e1c:	462a      	mov	r2, r5
 8027e1e:	4649      	mov	r1, r9
 8027e20:	4640      	mov	r0, r8
 8027e22:	47d0      	blx	sl
 8027e24:	3001      	adds	r0, #1
 8027e26:	d0ab      	beq.n	8027d80 <_printf_i+0x164>
 8027e28:	6823      	ldr	r3, [r4, #0]
 8027e2a:	079b      	lsls	r3, r3, #30
 8027e2c:	d413      	bmi.n	8027e56 <_printf_i+0x23a>
 8027e2e:	68e0      	ldr	r0, [r4, #12]
 8027e30:	9b03      	ldr	r3, [sp, #12]
 8027e32:	4298      	cmp	r0, r3
 8027e34:	bfb8      	it	lt
 8027e36:	4618      	movlt	r0, r3
 8027e38:	e7a4      	b.n	8027d84 <_printf_i+0x168>
 8027e3a:	2301      	movs	r3, #1
 8027e3c:	4632      	mov	r2, r6
 8027e3e:	4649      	mov	r1, r9
 8027e40:	4640      	mov	r0, r8
 8027e42:	47d0      	blx	sl
 8027e44:	3001      	adds	r0, #1
 8027e46:	d09b      	beq.n	8027d80 <_printf_i+0x164>
 8027e48:	3501      	adds	r5, #1
 8027e4a:	68e3      	ldr	r3, [r4, #12]
 8027e4c:	9903      	ldr	r1, [sp, #12]
 8027e4e:	1a5b      	subs	r3, r3, r1
 8027e50:	42ab      	cmp	r3, r5
 8027e52:	dcf2      	bgt.n	8027e3a <_printf_i+0x21e>
 8027e54:	e7eb      	b.n	8027e2e <_printf_i+0x212>
 8027e56:	2500      	movs	r5, #0
 8027e58:	f104 0619 	add.w	r6, r4, #25
 8027e5c:	e7f5      	b.n	8027e4a <_printf_i+0x22e>
 8027e5e:	bf00      	nop
 8027e60:	0802e1b1 	.word	0x0802e1b1
 8027e64:	0802e1c2 	.word	0x0802e1c2

08027e68 <_putc_r>:
 8027e68:	b570      	push	{r4, r5, r6, lr}
 8027e6a:	460d      	mov	r5, r1
 8027e6c:	4614      	mov	r4, r2
 8027e6e:	4606      	mov	r6, r0
 8027e70:	b118      	cbz	r0, 8027e7a <_putc_r+0x12>
 8027e72:	6983      	ldr	r3, [r0, #24]
 8027e74:	b90b      	cbnz	r3, 8027e7a <_putc_r+0x12>
 8027e76:	f7ff fa89 	bl	802738c <__sinit>
 8027e7a:	4b1c      	ldr	r3, [pc, #112]	; (8027eec <_putc_r+0x84>)
 8027e7c:	429c      	cmp	r4, r3
 8027e7e:	d124      	bne.n	8027eca <_putc_r+0x62>
 8027e80:	6874      	ldr	r4, [r6, #4]
 8027e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027e84:	07d8      	lsls	r0, r3, #31
 8027e86:	d405      	bmi.n	8027e94 <_putc_r+0x2c>
 8027e88:	89a3      	ldrh	r3, [r4, #12]
 8027e8a:	0599      	lsls	r1, r3, #22
 8027e8c:	d402      	bmi.n	8027e94 <_putc_r+0x2c>
 8027e8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027e90:	f7ff fb2c 	bl	80274ec <__retarget_lock_acquire_recursive>
 8027e94:	68a3      	ldr	r3, [r4, #8]
 8027e96:	3b01      	subs	r3, #1
 8027e98:	2b00      	cmp	r3, #0
 8027e9a:	60a3      	str	r3, [r4, #8]
 8027e9c:	da05      	bge.n	8027eaa <_putc_r+0x42>
 8027e9e:	69a2      	ldr	r2, [r4, #24]
 8027ea0:	4293      	cmp	r3, r2
 8027ea2:	db1c      	blt.n	8027ede <_putc_r+0x76>
 8027ea4:	b2eb      	uxtb	r3, r5
 8027ea6:	2b0a      	cmp	r3, #10
 8027ea8:	d019      	beq.n	8027ede <_putc_r+0x76>
 8027eaa:	6823      	ldr	r3, [r4, #0]
 8027eac:	1c5a      	adds	r2, r3, #1
 8027eae:	6022      	str	r2, [r4, #0]
 8027eb0:	701d      	strb	r5, [r3, #0]
 8027eb2:	b2ed      	uxtb	r5, r5
 8027eb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027eb6:	07da      	lsls	r2, r3, #31
 8027eb8:	d405      	bmi.n	8027ec6 <_putc_r+0x5e>
 8027eba:	89a3      	ldrh	r3, [r4, #12]
 8027ebc:	059b      	lsls	r3, r3, #22
 8027ebe:	d402      	bmi.n	8027ec6 <_putc_r+0x5e>
 8027ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027ec2:	f7ff fb14 	bl	80274ee <__retarget_lock_release_recursive>
 8027ec6:	4628      	mov	r0, r5
 8027ec8:	bd70      	pop	{r4, r5, r6, pc}
 8027eca:	4b09      	ldr	r3, [pc, #36]	; (8027ef0 <_putc_r+0x88>)
 8027ecc:	429c      	cmp	r4, r3
 8027ece:	d101      	bne.n	8027ed4 <_putc_r+0x6c>
 8027ed0:	68b4      	ldr	r4, [r6, #8]
 8027ed2:	e7d6      	b.n	8027e82 <_putc_r+0x1a>
 8027ed4:	4b07      	ldr	r3, [pc, #28]	; (8027ef4 <_putc_r+0x8c>)
 8027ed6:	429c      	cmp	r4, r3
 8027ed8:	bf08      	it	eq
 8027eda:	68f4      	ldreq	r4, [r6, #12]
 8027edc:	e7d1      	b.n	8027e82 <_putc_r+0x1a>
 8027ede:	4629      	mov	r1, r5
 8027ee0:	4622      	mov	r2, r4
 8027ee2:	4630      	mov	r0, r6
 8027ee4:	f7ff f85a 	bl	8026f9c <__swbuf_r>
 8027ee8:	4605      	mov	r5, r0
 8027eea:	e7e3      	b.n	8027eb4 <_putc_r+0x4c>
 8027eec:	0802e160 	.word	0x0802e160
 8027ef0:	0802e180 	.word	0x0802e180
 8027ef4:	0802e140 	.word	0x0802e140

08027ef8 <__sread>:
 8027ef8:	b510      	push	{r4, lr}
 8027efa:	460c      	mov	r4, r1
 8027efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027f00:	f000 f8cc 	bl	802809c <_read_r>
 8027f04:	2800      	cmp	r0, #0
 8027f06:	bfab      	itete	ge
 8027f08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8027f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8027f0c:	181b      	addge	r3, r3, r0
 8027f0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8027f12:	bfac      	ite	ge
 8027f14:	6563      	strge	r3, [r4, #84]	; 0x54
 8027f16:	81a3      	strhlt	r3, [r4, #12]
 8027f18:	bd10      	pop	{r4, pc}

08027f1a <__swrite>:
 8027f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027f1e:	461f      	mov	r7, r3
 8027f20:	898b      	ldrh	r3, [r1, #12]
 8027f22:	05db      	lsls	r3, r3, #23
 8027f24:	4605      	mov	r5, r0
 8027f26:	460c      	mov	r4, r1
 8027f28:	4616      	mov	r6, r2
 8027f2a:	d505      	bpl.n	8027f38 <__swrite+0x1e>
 8027f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027f30:	2302      	movs	r3, #2
 8027f32:	2200      	movs	r2, #0
 8027f34:	f000 f870 	bl	8028018 <_lseek_r>
 8027f38:	89a3      	ldrh	r3, [r4, #12]
 8027f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027f42:	81a3      	strh	r3, [r4, #12]
 8027f44:	4632      	mov	r2, r6
 8027f46:	463b      	mov	r3, r7
 8027f48:	4628      	mov	r0, r5
 8027f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027f4e:	f000 b817 	b.w	8027f80 <_write_r>

08027f52 <__sseek>:
 8027f52:	b510      	push	{r4, lr}
 8027f54:	460c      	mov	r4, r1
 8027f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027f5a:	f000 f85d 	bl	8028018 <_lseek_r>
 8027f5e:	1c43      	adds	r3, r0, #1
 8027f60:	89a3      	ldrh	r3, [r4, #12]
 8027f62:	bf15      	itete	ne
 8027f64:	6560      	strne	r0, [r4, #84]	; 0x54
 8027f66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8027f6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8027f6e:	81a3      	strheq	r3, [r4, #12]
 8027f70:	bf18      	it	ne
 8027f72:	81a3      	strhne	r3, [r4, #12]
 8027f74:	bd10      	pop	{r4, pc}

08027f76 <__sclose>:
 8027f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027f7a:	f000 b81b 	b.w	8027fb4 <_close_r>
	...

08027f80 <_write_r>:
 8027f80:	b538      	push	{r3, r4, r5, lr}
 8027f82:	4d07      	ldr	r5, [pc, #28]	; (8027fa0 <_write_r+0x20>)
 8027f84:	4604      	mov	r4, r0
 8027f86:	4608      	mov	r0, r1
 8027f88:	4611      	mov	r1, r2
 8027f8a:	2200      	movs	r2, #0
 8027f8c:	602a      	str	r2, [r5, #0]
 8027f8e:	461a      	mov	r2, r3
 8027f90:	f7f0 ff05 	bl	8018d9e <_write>
 8027f94:	1c43      	adds	r3, r0, #1
 8027f96:	d102      	bne.n	8027f9e <_write_r+0x1e>
 8027f98:	682b      	ldr	r3, [r5, #0]
 8027f9a:	b103      	cbz	r3, 8027f9e <_write_r+0x1e>
 8027f9c:	6023      	str	r3, [r4, #0]
 8027f9e:	bd38      	pop	{r3, r4, r5, pc}
 8027fa0:	2001631c 	.word	0x2001631c

08027fa4 <abort>:
 8027fa4:	b508      	push	{r3, lr}
 8027fa6:	2006      	movs	r0, #6
 8027fa8:	f000 f8b2 	bl	8028110 <raise>
 8027fac:	2001      	movs	r0, #1
 8027fae:	f7f0 fecf 	bl	8018d50 <_exit>
	...

08027fb4 <_close_r>:
 8027fb4:	b538      	push	{r3, r4, r5, lr}
 8027fb6:	4d06      	ldr	r5, [pc, #24]	; (8027fd0 <_close_r+0x1c>)
 8027fb8:	2300      	movs	r3, #0
 8027fba:	4604      	mov	r4, r0
 8027fbc:	4608      	mov	r0, r1
 8027fbe:	602b      	str	r3, [r5, #0]
 8027fc0:	f7f0 ff09 	bl	8018dd6 <_close>
 8027fc4:	1c43      	adds	r3, r0, #1
 8027fc6:	d102      	bne.n	8027fce <_close_r+0x1a>
 8027fc8:	682b      	ldr	r3, [r5, #0]
 8027fca:	b103      	cbz	r3, 8027fce <_close_r+0x1a>
 8027fcc:	6023      	str	r3, [r4, #0]
 8027fce:	bd38      	pop	{r3, r4, r5, pc}
 8027fd0:	2001631c 	.word	0x2001631c

08027fd4 <_fstat_r>:
 8027fd4:	b538      	push	{r3, r4, r5, lr}
 8027fd6:	4d07      	ldr	r5, [pc, #28]	; (8027ff4 <_fstat_r+0x20>)
 8027fd8:	2300      	movs	r3, #0
 8027fda:	4604      	mov	r4, r0
 8027fdc:	4608      	mov	r0, r1
 8027fde:	4611      	mov	r1, r2
 8027fe0:	602b      	str	r3, [r5, #0]
 8027fe2:	f7f0 ff04 	bl	8018dee <_fstat>
 8027fe6:	1c43      	adds	r3, r0, #1
 8027fe8:	d102      	bne.n	8027ff0 <_fstat_r+0x1c>
 8027fea:	682b      	ldr	r3, [r5, #0]
 8027fec:	b103      	cbz	r3, 8027ff0 <_fstat_r+0x1c>
 8027fee:	6023      	str	r3, [r4, #0]
 8027ff0:	bd38      	pop	{r3, r4, r5, pc}
 8027ff2:	bf00      	nop
 8027ff4:	2001631c 	.word	0x2001631c

08027ff8 <_isatty_r>:
 8027ff8:	b538      	push	{r3, r4, r5, lr}
 8027ffa:	4d06      	ldr	r5, [pc, #24]	; (8028014 <_isatty_r+0x1c>)
 8027ffc:	2300      	movs	r3, #0
 8027ffe:	4604      	mov	r4, r0
 8028000:	4608      	mov	r0, r1
 8028002:	602b      	str	r3, [r5, #0]
 8028004:	f7f0 ff03 	bl	8018e0e <_isatty>
 8028008:	1c43      	adds	r3, r0, #1
 802800a:	d102      	bne.n	8028012 <_isatty_r+0x1a>
 802800c:	682b      	ldr	r3, [r5, #0]
 802800e:	b103      	cbz	r3, 8028012 <_isatty_r+0x1a>
 8028010:	6023      	str	r3, [r4, #0]
 8028012:	bd38      	pop	{r3, r4, r5, pc}
 8028014:	2001631c 	.word	0x2001631c

08028018 <_lseek_r>:
 8028018:	b538      	push	{r3, r4, r5, lr}
 802801a:	4d07      	ldr	r5, [pc, #28]	; (8028038 <_lseek_r+0x20>)
 802801c:	4604      	mov	r4, r0
 802801e:	4608      	mov	r0, r1
 8028020:	4611      	mov	r1, r2
 8028022:	2200      	movs	r2, #0
 8028024:	602a      	str	r2, [r5, #0]
 8028026:	461a      	mov	r2, r3
 8028028:	f7f0 fefc 	bl	8018e24 <_lseek>
 802802c:	1c43      	adds	r3, r0, #1
 802802e:	d102      	bne.n	8028036 <_lseek_r+0x1e>
 8028030:	682b      	ldr	r3, [r5, #0]
 8028032:	b103      	cbz	r3, 8028036 <_lseek_r+0x1e>
 8028034:	6023      	str	r3, [r4, #0]
 8028036:	bd38      	pop	{r3, r4, r5, pc}
 8028038:	2001631c 	.word	0x2001631c

0802803c <_realloc_r>:
 802803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028040:	4680      	mov	r8, r0
 8028042:	4614      	mov	r4, r2
 8028044:	460e      	mov	r6, r1
 8028046:	b921      	cbnz	r1, 8028052 <_realloc_r+0x16>
 8028048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802804c:	4611      	mov	r1, r2
 802804e:	f7fe bd59 	b.w	8026b04 <_malloc_r>
 8028052:	b92a      	cbnz	r2, 8028060 <_realloc_r+0x24>
 8028054:	f7fe fcea 	bl	8026a2c <_free_r>
 8028058:	4625      	mov	r5, r4
 802805a:	4628      	mov	r0, r5
 802805c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028060:	f000 f872 	bl	8028148 <_malloc_usable_size_r>
 8028064:	4284      	cmp	r4, r0
 8028066:	4607      	mov	r7, r0
 8028068:	d802      	bhi.n	8028070 <_realloc_r+0x34>
 802806a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802806e:	d812      	bhi.n	8028096 <_realloc_r+0x5a>
 8028070:	4621      	mov	r1, r4
 8028072:	4640      	mov	r0, r8
 8028074:	f7fe fd46 	bl	8026b04 <_malloc_r>
 8028078:	4605      	mov	r5, r0
 802807a:	2800      	cmp	r0, #0
 802807c:	d0ed      	beq.n	802805a <_realloc_r+0x1e>
 802807e:	42bc      	cmp	r4, r7
 8028080:	4622      	mov	r2, r4
 8028082:	4631      	mov	r1, r6
 8028084:	bf28      	it	cs
 8028086:	463a      	movcs	r2, r7
 8028088:	f7fe fca0 	bl	80269cc <memcpy>
 802808c:	4631      	mov	r1, r6
 802808e:	4640      	mov	r0, r8
 8028090:	f7fe fccc 	bl	8026a2c <_free_r>
 8028094:	e7e1      	b.n	802805a <_realloc_r+0x1e>
 8028096:	4635      	mov	r5, r6
 8028098:	e7df      	b.n	802805a <_realloc_r+0x1e>
	...

0802809c <_read_r>:
 802809c:	b538      	push	{r3, r4, r5, lr}
 802809e:	4d07      	ldr	r5, [pc, #28]	; (80280bc <_read_r+0x20>)
 80280a0:	4604      	mov	r4, r0
 80280a2:	4608      	mov	r0, r1
 80280a4:	4611      	mov	r1, r2
 80280a6:	2200      	movs	r2, #0
 80280a8:	602a      	str	r2, [r5, #0]
 80280aa:	461a      	mov	r2, r3
 80280ac:	f7f0 fe5a 	bl	8018d64 <_read>
 80280b0:	1c43      	adds	r3, r0, #1
 80280b2:	d102      	bne.n	80280ba <_read_r+0x1e>
 80280b4:	682b      	ldr	r3, [r5, #0]
 80280b6:	b103      	cbz	r3, 80280ba <_read_r+0x1e>
 80280b8:	6023      	str	r3, [r4, #0]
 80280ba:	bd38      	pop	{r3, r4, r5, pc}
 80280bc:	2001631c 	.word	0x2001631c

080280c0 <_raise_r>:
 80280c0:	291f      	cmp	r1, #31
 80280c2:	b538      	push	{r3, r4, r5, lr}
 80280c4:	4604      	mov	r4, r0
 80280c6:	460d      	mov	r5, r1
 80280c8:	d904      	bls.n	80280d4 <_raise_r+0x14>
 80280ca:	2316      	movs	r3, #22
 80280cc:	6003      	str	r3, [r0, #0]
 80280ce:	f04f 30ff 	mov.w	r0, #4294967295
 80280d2:	bd38      	pop	{r3, r4, r5, pc}
 80280d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80280d6:	b112      	cbz	r2, 80280de <_raise_r+0x1e>
 80280d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80280dc:	b94b      	cbnz	r3, 80280f2 <_raise_r+0x32>
 80280de:	4620      	mov	r0, r4
 80280e0:	f000 f830 	bl	8028144 <_getpid_r>
 80280e4:	462a      	mov	r2, r5
 80280e6:	4601      	mov	r1, r0
 80280e8:	4620      	mov	r0, r4
 80280ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80280ee:	f000 b817 	b.w	8028120 <_kill_r>
 80280f2:	2b01      	cmp	r3, #1
 80280f4:	d00a      	beq.n	802810c <_raise_r+0x4c>
 80280f6:	1c59      	adds	r1, r3, #1
 80280f8:	d103      	bne.n	8028102 <_raise_r+0x42>
 80280fa:	2316      	movs	r3, #22
 80280fc:	6003      	str	r3, [r0, #0]
 80280fe:	2001      	movs	r0, #1
 8028100:	e7e7      	b.n	80280d2 <_raise_r+0x12>
 8028102:	2400      	movs	r4, #0
 8028104:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028108:	4628      	mov	r0, r5
 802810a:	4798      	blx	r3
 802810c:	2000      	movs	r0, #0
 802810e:	e7e0      	b.n	80280d2 <_raise_r+0x12>

08028110 <raise>:
 8028110:	4b02      	ldr	r3, [pc, #8]	; (802811c <raise+0xc>)
 8028112:	4601      	mov	r1, r0
 8028114:	6818      	ldr	r0, [r3, #0]
 8028116:	f7ff bfd3 	b.w	80280c0 <_raise_r>
 802811a:	bf00      	nop
 802811c:	20000340 	.word	0x20000340

08028120 <_kill_r>:
 8028120:	b538      	push	{r3, r4, r5, lr}
 8028122:	4d07      	ldr	r5, [pc, #28]	; (8028140 <_kill_r+0x20>)
 8028124:	2300      	movs	r3, #0
 8028126:	4604      	mov	r4, r0
 8028128:	4608      	mov	r0, r1
 802812a:	4611      	mov	r1, r2
 802812c:	602b      	str	r3, [r5, #0]
 802812e:	f7f0 fdfd 	bl	8018d2c <_kill>
 8028132:	1c43      	adds	r3, r0, #1
 8028134:	d102      	bne.n	802813c <_kill_r+0x1c>
 8028136:	682b      	ldr	r3, [r5, #0]
 8028138:	b103      	cbz	r3, 802813c <_kill_r+0x1c>
 802813a:	6023      	str	r3, [r4, #0]
 802813c:	bd38      	pop	{r3, r4, r5, pc}
 802813e:	bf00      	nop
 8028140:	2001631c 	.word	0x2001631c

08028144 <_getpid_r>:
 8028144:	f7f0 bdea 	b.w	8018d1c <_getpid>

08028148 <_malloc_usable_size_r>:
 8028148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802814c:	1f18      	subs	r0, r3, #4
 802814e:	2b00      	cmp	r3, #0
 8028150:	bfbc      	itt	lt
 8028152:	580b      	ldrlt	r3, [r1, r0]
 8028154:	18c0      	addlt	r0, r0, r3
 8028156:	4770      	bx	lr

08028158 <_init>:
 8028158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802815a:	bf00      	nop
 802815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802815e:	bc08      	pop	{r3}
 8028160:	469e      	mov	lr, r3
 8028162:	4770      	bx	lr

08028164 <_fini>:
 8028164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028166:	bf00      	nop
 8028168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802816a:	bc08      	pop	{r3}
 802816c:	469e      	mov	lr, r3
 802816e:	4770      	bx	lr
